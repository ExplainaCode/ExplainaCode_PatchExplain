record_number,buggy_code,fixed_code
42001,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    if (args.length == 0) {
      try {
        return commandMap.get(""String_Node_Str"").execute(plugin.wrapPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (args[0] == null) {
      api.getLogger().severe(""String_Node_Str"");
      return false;
    }
    PlotCommand _command=commandMap.get(args[0]);
    if (_command == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      try {
        return _command.execute(new BukkitPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    return handleConsoleCommands(sender,args);
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    if (args.length == 0) {
      return commandMap.get(""String_Node_Str"").execute(plugin.wrapPlayer((Player)sender),args);
    }
    if (args[0] == null) {
      api.getLogger().severe(""String_Node_Str"");
      return false;
    }
    PlotCommand _command=commandMap.get(args[0]);
    if (_command == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      return _command.execute(new BukkitPlayer((Player)sender),args);
    }
  }
 else {
    return handleConsoleCommands(sender,args);
  }
}"
42002,"public BukkitServerBridge(Logger logger){
  super(logger);
}","public BukkitServerBridge(PlotMe_CorePlugin plotMeCorePlugin,Logger logger){
  super(logger);
  this.plotMeCorePlugin=plotMeCorePlugin;
}"
42003,"@Override public int scheduleSyncRepeatingTask(Runnable func,long l,long l2){
  return Bukkit.getScheduler().scheduleSyncRepeatingTask(PlotMe_CorePlugin.getInstance(),func,l,l2);
}","@Override public int scheduleSyncRepeatingTask(Runnable func,long l,long l2){
  return Bukkit.getScheduler().scheduleSyncRepeatingTask(plotMeCorePlugin,func,l,l2);
}"
42004,"@Override public void runTaskLater(Runnable runnable,long delay){
  Bukkit.getServer().getScheduler().runTaskLater(PlotMe_CorePlugin.getInstance(),runnable,delay);
}","@Override public void runTaskLater(Runnable runnable,long delay){
  Bukkit.getServer().getScheduler().runTaskLater(plotMeCorePlugin,runnable,delay);
}"
42005,"@Override public File getDataFolder(){
  return PlotMe_CorePlugin.getInstance().getDataFolder();
}","@Override public File getDataFolder(){
  return plotMeCorePlugin.getDataFolder();
}"
42006,"public File getWorldFolder(){
  return PlotMe_CorePlugin.getInstance().getServer().getWorldContainer();
}","public File getWorldFolder(){
  return plotMeCorePlugin.getServer().getWorldContainer();
}"
42007,"@Override public void scheduleSyncDelayedTask(Runnable task,int i){
  Bukkit.getScheduler().scheduleSyncDelayedTask(PlotMe_CorePlugin.getInstance(),task,i);
}","@Override public void scheduleSyncDelayedTask(Runnable task,int i){
  Bukkit.getScheduler().scheduleSyncDelayedTask(plotMeCorePlugin,task,i);
}"
42008,"@Override public void runTaskAsynchronously(Runnable runnable){
  Bukkit.getScheduler().runTaskAsynchronously(PlotMe_CorePlugin.getInstance(),runnable);
}","@Override public void runTaskAsynchronously(Runnable runnable){
  Bukkit.getScheduler().runTaskAsynchronously(plotMeCorePlugin,runnable);
}"
42009,"/** 
 * Setup PlotMe plugin hooks
 */
@Override public void setupHooks(){
  PluginManager pluginManager=PlotMe_CorePlugin.getInstance().getServer().getPluginManager();
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    WorldEditPlugin worldEdit=(WorldEditPlugin)pluginManager.getPlugin(""String_Node_Str"");
    worldEdit.getWorldEdit().getEventBus().register(new PlotWorldEditListener());
  }
  setUsingLwc(pluginManager.getPlugin(""String_Node_Str"") != null);
}","/** 
 * Setup PlotMe plugin hooks
 */
@Override public void setupHooks(){
  PluginManager pluginManager=plotMeCorePlugin.getServer().getPluginManager();
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    WorldEditPlugin worldEdit=(WorldEditPlugin)pluginManager.getPlugin(""String_Node_Str"");
    worldEdit.getWorldEdit().getEventBus().register(new PlotWorldEditListener());
  }
  setUsingLwc(pluginManager.getPlugin(""String_Node_Str"") != null);
}"
42010,"@Override public void onEnable(){
  INSTANCE=this;
  getLogger().info(""String_Node_Str"");
  serverObjectBuilder=new BukkitServerBridge(getLogger());
  plotme.registerServerBridge(serverObjectBuilder);
  getAPI().enable();
  doMetric();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(),this);
  pm.registerEvents(new BukkitPlotDenyListener(),this);
  this.getCommand(""String_Node_Str"").setExecutor(new BukkitCommand(this));
}","@Override public void onEnable(){
  INSTANCE=this;
  getLogger().info(""String_Node_Str"");
  serverObjectBuilder=new BukkitServerBridge(this,getLogger());
  plotme.registerServerBridge(serverObjectBuilder);
  getAPI().enable();
  doMetric();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(this),this);
  pm.registerEvents(new BukkitPlotDenyListener(this),this);
  this.getCommand(""String_Node_Str"").setExecutor(new BukkitCommand(this));
}"
42011,"/** 
 * Uses the code that allows a delay while ""Teleporting"" or moving the entity
 * @param location new location
 */
@Override public void teleport(Location location){
  final int delay=PlotMe_CorePlugin.getInstance().getAPI().getConfig().getInt(""String_Node_Str"");
  player.sendMessage(String.format(""String_Node_Str"",delay));
  PlotMe_CorePlugin.getInstance().getServerObjectBuilder().runTaskLater(new TeleportRunnable(this,location),delay);
}","/** 
 * Uses the code that allows a delay while ""Teleporting"" or moving the entity
 * @param location new location
 */
@Override public void teleport(Location location){
  final int delay=PlotMe_CorePlugin.getInstance().getAPI().getConfig().getInt(""String_Node_Str"");
  if (delay != 0) {
    player.sendMessage(String.format(""String_Node_Str"",delay));
  }
  PlotMe_CorePlugin.getInstance().getServerObjectBuilder().runTaskLater(new TeleportRunnable(this,location),delay);
}"
42012,"@EventHandler(priority=EventPriority.HIGH) public void onPlayerMove(PlayerMoveEvent event){
  IPlayer player=plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    Location to=new Location(player.getWorld(),BukkitUtil.locationToVector(event.getTo()));
    Plot plot=manager.getPlot(to);
    if (plot != null && plot.isDenied(player.getUniqueId())) {
      event.setTo(event.getFrom());
    }
  }
}","@EventHandler(priority=EventPriority.HIGH) public void onPlayerMove(PlayerMoveEvent event){
  BukkitPlayer player=(BukkitPlayer)plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    Location to=new Location(player.getWorld(),BukkitUtil.locationToVector(event.getTo()));
    Plot plot=manager.getPlot(to);
    if (plot != null && plot.isDenied(player.getUniqueId())) {
      event.setTo(event.getFrom());
    }
  }
}"
42013,"public BukkitPlotDenyListener(){
  plugin=PlotMe_CorePlugin.getInstance();
  manager=PlotMeCoreManager.getInstance();
}","public BukkitPlotDenyListener(PlotMe_CorePlugin plotMeCorePlugin){
  plugin=plotMeCorePlugin;
  manager=PlotMeCoreManager.getInstance();
}"
42014,"public BukkitPlotListener(){
  api=PlotMe_CorePlugin.getInstance().getAPI();
  this.plugin=PlotMe_CorePlugin.getInstance();
  manager=PlotMeCoreManager.getInstance();
}","public BukkitPlotListener(PlotMe_CorePlugin plotMeCorePlugin){
  api=plotMeCorePlugin.getAPI();
  this.plugin=plotMeCorePlugin;
  manager=PlotMeCoreManager.getInstance();
}"
42015,"private Plot getPlotById(PlotId id,Location location){
  return getPlotById(id,location.getWorld());
}","/** 
 * Gets the plot with the given id in the given world.
 * @param id plot id
 * @param world
 * @return plot
 */
public Plot getPlotById(PlotId id,IWorld world){
  return plugin.getSqlManager().getPlot(id,world);
}"
42016,"public boolean isPlotAvailable(Location location){
  PlotId id=getPlotId(location);
  return id != null && getPlotById(id,location) == null;
}","/** 
 * Checks if the plot is claimed or not
 * @param id    the plot id to be checked
 * @param world
 * @return true if the plot is unclaimed, false otherwise
 */
public boolean isPlotAvailable(PlotId id,IWorld world){
  for (  Plot plot : plugin.getSqlManager().worldToPlotMap.get(world)) {
    if (plot.getId().equals(id)) {
      return false;
    }
  }
  if (getPlotTopLoc(world,id).getX() > world.getWorldBorder().minX()) {
    if (getPlotBottomLoc(world,id).getX() < world.getWorldBorder().maxX()) {
      if (getPlotTopLoc(world,id).getZ() > world.getWorldBorder().minZ()) {
        if (getPlotBottomLoc(world,id).getZ() < world.getWorldBorder().maxZ()) {
          return true;
        }
      }
    }
  }
  return false;
}"
42017,"@Override public void run(){
  Database sqlmanager=plugin.getSqlManager();
  PlotMeCoreManager plotMeCoreManager=PlotMeCoreManager.getInstance();
  if (plugin.getWorldCurrentlyProcessingExpired() != null) {
    IWorld world=plugin.getWorldCurrentlyProcessingExpired();
    TreeSet<Plot> expiredPlots=sqlmanager.getExpiredPlots(world);
    if (expiredPlots.isEmpty()) {
      plugin.setCounterExpired(0);
    }
 else {
      String ids=""String_Node_Str"";
      for (      Plot expiredPlot : expiredPlots) {
        PlotResetEvent event=new PlotResetEvent(world,expiredPlot,sender);
        plugin.getEventBus().post(event);
        if (!event.isCancelled()) {
          plotMeCoreManager.clear(expiredPlot,world,sender,ClearReason.Expired);
          PlotId id=expiredPlot.getId();
          ids+=id + ""String_Node_Str"";
          plotMeCoreManager.deletePlot(world,expiredPlot);
          plugin.setCounterExpired(plugin.getCounterExpired() - 1);
        }
      }
      if (""String_Node_Str"".equals(ids.substring(ids.length() - 2))) {
        ids=ids.substring(0,ids.length() - 2);
      }
      plugin.getLogger().info(plugin.C(""String_Node_Str"") + ""String_Node_Str"" + ids);
    }
    if (plugin.getCounterExpired() == 0) {
      plugin.getLogger().info(plugin.C(""String_Node_Str""));
      plugin.setWorldCurrentlyProcessingExpired(null);
    }
  }
}","@Override public void run(){
  Database sqlmanager=plugin.getSqlManager();
  PlotMeCoreManager plotMeCoreManager=PlotMeCoreManager.getInstance();
  if (plugin.getWorldCurrentlyProcessingExpired() != null) {
    IWorld world=plugin.getWorldCurrentlyProcessingExpired();
    if (plotMeCoreManager.getMap(world).getDaysToExpiration() == 0) {
      return;
    }
    List<Plot> expiredPlots=sqlmanager.getExpiredPlots(world);
    if (expiredPlots.isEmpty()) {
      plugin.setCounterExpired(0);
    }
 else {
      String ids=""String_Node_Str"";
      for (      Plot expiredPlot : expiredPlots) {
        PlotResetEvent event=new PlotResetEvent(world,expiredPlot,sender);
        plugin.getEventBus().post(event);
        if (!event.isCancelled()) {
          plotMeCoreManager.clear(expiredPlot,world,sender,ClearReason.Expired);
          PlotId id=expiredPlot.getId();
          ids+=id + ""String_Node_Str"";
          plotMeCoreManager.deletePlot(world,expiredPlot);
          plugin.setCounterExpired(plugin.getCounterExpired() - 1);
        }
      }
      if (""String_Node_Str"".equals(ids.substring(ids.length() - 2))) {
        ids=ids.substring(0,ids.length() - 2);
      }
      plugin.getLogger().info(plugin.C(""String_Node_Str"") + ""String_Node_Str"" + ids);
    }
    if (plugin.getCounterExpired() == 0) {
      plugin.getLogger().info(plugin.C(""String_Node_Str""));
      plugin.setWorldCurrentlyProcessingExpired(null);
    }
  }
}"
42018,"public void removeDenied(String name){
  if (getDenied().contains(name)) {
    PlotMeCoreManager.getInstance().getSQLManager().deletePlotDenied(getInternalID(),name);
  }
}","public void removeDenied(String name){
  if (getDenied().contains(name)) {
    getDenied().remove(name);
    PlotMeCoreManager.getInstance().getSQLManager().deletePlotDenied(getInternalID(),name);
  }
}"
42019,"public int getTopX(){
  return topX;
}","public int getTopX(){
  return plotTopLoc.getBlockX();
}"
42020,"public int getTopZ(){
  return topZ;
}","public int getTopZ(){
  return plotTopLoc.getBlockZ();
}"
42021,"public int getBottomX(){
  return bottomX;
}","public int getBottomX(){
  return plotBottomLoc.getBlockX();
}"
42022,"public Plot(long internalID,String owner,UUID ownerId,IWorld world,String biome,Date expiredDate,HashMap<String,AccessLevel> allowed,HashSet<String> denied,HashSet<String> likers,PlotId id,double price,boolean forSale,boolean finished,String finishedDate,boolean protect,Map<String,Map<String,String>> metadata,int plotLikes,String plotName,int topX,int bottomX,int topZ,int bottomZ,String createdDate){
  setInternalID(internalID);
  setOwner(owner);
  setOwnerId(ownerId);
  setWorld(world);
  setBiome(biome);
  setExpiredDate(expiredDate);
  setFinished(finished);
  this.allowed.putAll(allowed);
  setId(id);
  setPrice(price);
  setForSale(forSale);
  setFinishedDate(finishedDate);
  setProtected(protect);
  setLikers(likers);
  setLikes(plotLikes);
  setPlotName(plotName);
  this.denied.addAll(denied);
  this.metadata.putAll(metadata);
  this.topX=topX;
  this.bottomX=bottomX;
  this.topZ=topZ;
  this.bottomZ=bottomZ;
  this.createdDate=createdDate;
}","public Plot(long internalID,String owner,UUID ownerId,IWorld world,String biome,Date expiredDate,HashMap<String,AccessLevel> allowed,HashSet<String> denied,HashSet<String> likers,PlotId id,double price,boolean forSale,boolean finished,String finishedDate,boolean protect,Map<String,Map<String,String>> metadata,int plotLikes,String plotName,Vector topLoc,Vector bottomLoc,String createdDate){
  setInternalID(internalID);
  setOwner(owner);
  setOwnerId(ownerId);
  setWorld(world);
  setBiome(biome);
  setExpiredDate(expiredDate);
  setFinished(finished);
  this.allowed.putAll(allowed);
  setId(id);
  setPrice(price);
  setForSale(forSale);
  setFinishedDate(finishedDate);
  setProtected(protect);
  setLikers(likers);
  setLikes(plotLikes);
  setPlotName(plotName);
  this.denied.addAll(denied);
  this.metadata.putAll(metadata);
  this.plotTopLoc=topLoc;
  this.plotBottomLoc=bottomLoc;
  this.createdDate=createdDate;
}"
42023,"public int getBottomZ(){
  return bottomZ;
}","public int getBottomZ(){
  return plotBottomLoc.getBlockZ();
}"
42024,"public void removeAllowed(String name){
  if (getMembers().containsKey(name)) {
    PlotMeCoreManager.getInstance().getSQLManager().deletePlotAllowed(getInternalID(),name);
  }
}","public void removeAllowed(String name){
  if (getMembers().containsKey(name)) {
    getMembers().remove(name,AccessLevel.ALLOWED);
    PlotMeCoreManager.getInstance().getSQLManager().deletePlotMember(getInternalID(),name);
  }
}"
42025,"public Plot getPlot(PlotId id){
  if (id == null) {
    return null;
  }
  if (!plots.containsKey(id)) {
    Plot plot=plugin.getSqlManager().getPlot(world,id);
    if (plot == null) {
      return null;
    }
    plots.put(id,plot);
  }
  return plots.get(id);
}","public Plot getPlot(PlotId id){
  if (id == null) {
    return null;
  }
  if (!plots.containsKey(id)) {
    Plot plot=plugin.getSqlManager().getPlot(id,world);
    if (plot == null) {
      return null;
    }
    plots.put(id,plot);
  }
  return plots.get(id);
}"
42026,"/** 
 * Get the number of plots the player owns
 * @param uuid player UUID
 * @param world plotworld
 * @return number of plots the player owns
 */
public int getOwnedPlotCount(UUID uuid,String world){
  return plugin.getSqlManager().getPlotCount(world,uuid);
}","/** 
 * Get the number of plots the player owns
 * @param uuid player UUID
 * @param world plotworld
 * @return number of plots the player owns
 */
public int getOwnedPlotCount(UUID uuid,IWorld world){
  return plugin.getSqlManager().getPlotCount(world,uuid);
}"
42027,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_AUTO)) {
    if (manager.isPlotWorld(player) || plugin.getConfig().getBoolean(""String_Node_Str"")) {
      IWorld world;
      if (!manager.isPlotWorld(player) && plugin.getConfig().getBoolean(""String_Node_Str"")) {
        if (args.length == 2) {
          world=manager.getWorld(args[1]);
        }
 else {
          world=manager.getFirstWorld();
        }
        if (world == null) {
          player.sendMessage(C(""String_Node_Str""));
          return true;
        }
        if (!manager.isPlotWorld(world)) {
          player.sendMessage(world + ""String_Node_Str"" + C(""String_Node_Str""));
          return true;
        }
      }
 else {
        world=player.getWorld();
      }
      int playerLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world.getName().toLowerCase());
      if (playerLimit != -1 && plotsOwned >= playerLimit && !player.hasPermission(""String_Node_Str"")) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ playerLimit+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      int limit=pmi.getPlotAutoLimit();
      int x=0;
      int z=0;
      int dx=0;
      int dz=-1;
      int t=limit;
      int maxPlots=t * t;
      for (int i=0; i < maxPlots; i++) {
        if (-limit / 2 <= x && x <= limit / 2 && -limit / 2 <= z && z <= limit / 2) {
          PlotId id=new PlotId(x,z);
          if (manager.isPlotAvailable(id,pmi)) {
            double price=0.0;
            PlotCreateEvent event=new PlotCreateEvent(world,id,player);
            plugin.getEventBus().post(event);
            if (manager.isEconomyEnabled(pmi)) {
              price=pmi.getClaimPrice();
              if (serverBridge.has(player,price)) {
                player.sendMessage(""String_Node_Str"" + serverBridge.getEconomy().format(price) + ""String_Node_Str"");
                return true;
              }
 else {
                if (event.isCancelled()) {
                  return true;
                }
                EconomyResponse er=serverBridge.withdrawPlayer(player,price);
                if (!er.transactionSuccess()) {
                  player.sendMessage(er.errorMessage);
                  serverBridge.getLogger().warning(er.errorMessage);
                  return true;
                }
              }
            }
            if (!event.isCancelled()) {
              manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
              player.setLocation(manager.getPlotHome(id,player.getWorld()));
              player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
              if (isAdvancedLogging()) {
                if (price == 0) {
                  serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                }
 else {
                  serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
                }
              }
              return true;
            }
          }
        }
        if (x == z || x < 0 && x == -z || x > 0 && x == 1 - z) {
          t=dx;
          dx=-dz;
          dz=t;
        }
        x+=dx;
        z+=dz;
      }
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_AUTO)) {
    if (manager.isPlotWorld(player) || plugin.getConfig().getBoolean(""String_Node_Str"")) {
      IWorld world;
      if (!manager.isPlotWorld(player) && plugin.getConfig().getBoolean(""String_Node_Str"")) {
        if (args.length == 2) {
          world=manager.getWorld(args[1]);
        }
 else {
          world=manager.getFirstWorld();
        }
        if (world == null) {
          player.sendMessage(C(""String_Node_Str""));
          return true;
        }
        if (!manager.isPlotWorld(world)) {
          player.sendMessage(world + ""String_Node_Str"" + C(""String_Node_Str""));
          return true;
        }
      }
 else {
        world=player.getWorld();
      }
      int playerLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world);
      if (playerLimit != -1 && plotsOwned >= playerLimit && !player.hasPermission(""String_Node_Str"")) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ playerLimit+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      int limit=pmi.getPlotAutoLimit();
      int x=0;
      int z=0;
      int dx=0;
      int dz=-1;
      int t=limit;
      int maxPlots=t * t;
      for (int i=0; i < maxPlots; i++) {
        if (-limit / 2 <= x && x <= limit / 2 && -limit / 2 <= z && z <= limit / 2) {
          PlotId id=new PlotId(x,z);
          if (manager.isPlotAvailable(id,pmi)) {
            double price=0.0;
            PlotCreateEvent event=new PlotCreateEvent(world,id,player);
            plugin.getEventBus().post(event);
            if (manager.isEconomyEnabled(pmi)) {
              price=pmi.getClaimPrice();
              if (serverBridge.has(player,price)) {
                player.sendMessage(""String_Node_Str"" + serverBridge.getEconomy().get().format(price) + ""String_Node_Str"");
                return true;
              }
 else {
                if (event.isCancelled()) {
                  return true;
                }
                EconomyResponse er=serverBridge.withdrawPlayer(player,price);
                if (!er.transactionSuccess()) {
                  player.sendMessage(er.errorMessage);
                  serverBridge.getLogger().warning(er.errorMessage);
                  return true;
                }
              }
            }
            if (!event.isCancelled()) {
              manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
              player.setLocation(manager.getPlotHome(id,player.getWorld()));
              player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
              if (isAdvancedLogging()) {
                if (price == 0) {
                  serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                }
 else {
                  serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
                }
              }
              return true;
            }
          }
        }
        if (x == z || x < 0 && x == -z || x > 0 && x == 1 - z) {
          t=dx;
          dx=-dz;
          dz=t;
        }
        x+=dx;
        z+=dz;
      }
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42028,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  IWorld world=player.getWorld();
  if (manager.isPlotWorld(world)) {
    if (manager.isEconomyEnabled(world)) {
      if (player.hasPermission(PermissionNames.USER_BUY)) {
        Plot plot=manager.getPlot(player.getLocation());
        if (plot != null) {
          if (plot.isForSale()) {
            String buyer=player.getName();
            if (player.getUniqueId().equals(plot.getOwnerId())) {
              player.sendMessage(C(""String_Node_Str""));
            }
 else {
              int plotLimit=getPlotLimit(player);
              int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world.getName());
              if (plotLimit != -1 && plotsOwned >= plotLimit) {
                player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
              }
 else {
                double cost=plot.getPrice();
                if (serverBridge.has(player,cost)) {
                  player.sendMessage(C(""String_Node_Str""));
                }
 else {
                  PlotBuyEvent event=new PlotBuyEvent(world,plot,player,cost);
                  plugin.getEventBus().post(event);
                  if (!event.isCancelled()) {
                    EconomyResponse er=serverBridge.withdrawPlayer(player,cost);
                    if (er.transactionSuccess()) {
                      String oldOwner=plot.getOwner();
                      IOfflinePlayer currBuyer=serverBridge.getOfflinePlayer(plot.getOwnerId());
                      if (currBuyer != null) {
                        EconomyResponse er2=serverBridge.depositPlayer(currBuyer,cost);
                        if (er2.transactionSuccess()) {
                          for (                          IPlayer onlinePlayers : serverBridge.getOnlinePlayers()) {
                            if (onlinePlayers.getName().equals(oldOwner)) {
                              onlinePlayers.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getId()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ buyer+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(cost));
                              break;
                            }
                          }
                        }
 else {
                          player.sendMessage(er2.errorMessage);
                          serverBridge.getLogger().warning(er2.errorMessage);
                        }
                      }
                      plot.setOwner(buyer);
                      plot.setOwnerId(player.getUniqueId());
                      plot.setPrice(0.0);
                      plot.setForSale(false);
                      plot.updateField(""String_Node_Str"",buyer);
                      plot.updateField(""String_Node_Str"",player.getUniqueId());
                      plot.updateField(""String_Node_Str"",0);
                      plot.updateField(""String_Node_Str"",false);
                      manager.adjustWall(plot,world,true);
                      manager.removeSellSign(plot,world);
                      manager.setOwnerSign(world,plot);
                      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + serverBridge.getEconomy().get().format(cost));
                      if (isAdvancedLogging()) {
                        plugin.getLogger().info(buyer + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().toString()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ cost);
                      }
                    }
 else {
                      player.sendMessage(er.errorMessage);
                      serverBridge.getLogger().warning(er.errorMessage);
                    }
                  }
                }
              }
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        return false;
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  IWorld world=player.getWorld();
  if (manager.isPlotWorld(world)) {
    if (manager.isEconomyEnabled(world)) {
      if (player.hasPermission(PermissionNames.USER_BUY)) {
        Plot plot=manager.getPlot(player.getLocation());
        if (plot != null) {
          if (plot.isForSale()) {
            String buyer=player.getName();
            if (player.getUniqueId().equals(plot.getOwnerId())) {
              player.sendMessage(C(""String_Node_Str""));
            }
 else {
              int plotLimit=getPlotLimit(player);
              int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world);
              if (plotLimit != -1 && plotsOwned >= plotLimit) {
                player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
              }
 else {
                double cost=plot.getPrice();
                if (serverBridge.has(player,cost)) {
                  player.sendMessage(C(""String_Node_Str""));
                }
 else {
                  PlotBuyEvent event=new PlotBuyEvent(world,plot,player,cost);
                  plugin.getEventBus().post(event);
                  if (!event.isCancelled()) {
                    EconomyResponse er=serverBridge.withdrawPlayer(player,cost);
                    if (er.transactionSuccess()) {
                      String oldOwner=plot.getOwner();
                      IOfflinePlayer currBuyer=serverBridge.getOfflinePlayer(plot.getOwnerId());
                      if (currBuyer != null) {
                        EconomyResponse er2=serverBridge.depositPlayer(currBuyer,cost);
                        if (er2.transactionSuccess()) {
                          for (                          IPlayer onlinePlayers : serverBridge.getOnlinePlayers()) {
                            if (onlinePlayers.getName().equals(oldOwner)) {
                              onlinePlayers.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getId()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ buyer+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(cost));
                              break;
                            }
                          }
                        }
 else {
                          player.sendMessage(er2.errorMessage);
                          serverBridge.getLogger().warning(er2.errorMessage);
                        }
                      }
                      plot.setOwner(buyer);
                      plot.setOwnerId(player.getUniqueId());
                      plot.setPrice(0.0);
                      plot.setForSale(false);
                      plot.updateField(""String_Node_Str"",buyer);
                      plot.updateField(""String_Node_Str"",player.getUniqueId());
                      plot.updateField(""String_Node_Str"",0);
                      plot.updateField(""String_Node_Str"",false);
                      manager.adjustWall(plot,world,true);
                      manager.removeSellSign(plot,world);
                      manager.setOwnerSign(world,plot);
                      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + serverBridge.getEconomy().get().format(cost));
                      if (isAdvancedLogging()) {
                        plugin.getLogger().info(buyer + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().toString()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ cost);
                      }
                    }
 else {
                      player.sendMessage(er.errorMessage);
                      serverBridge.getLogger().warning(er.errorMessage);
                    }
                  }
                }
              }
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        return false;
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
  return true;
}"
42029,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_CLAIM) || player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,pmi)) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      IOfflinePlayer futurePlotOwner=player;
      if (args.length == 2 && player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
        if (args[1].length() > 16 || !validUserPattern2.matcher(args[1]).matches()) {
          throw new IllegalArgumentException(C(""String_Node_Str""));
        }
        if (serverBridge.getPlayer(args[1]) == null) {
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 else {
          futurePlotOwner=serverBridge.getPlayer(args[1]);
        }
      }
      int plotLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world.getName().toLowerCase());
      if (player.getUniqueId().equals(futurePlotOwner.getUniqueId()) && plotLimit != -1 && plotsOwned >= plotLimit) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
 else {
        double price=0.0;
        PlotCreateEvent event=new PlotCreateEvent(world,id,player);
        if (manager.isEconomyEnabled(pmi)) {
          price=pmi.getClaimPrice();
          if (serverBridge.has(player,price)) {
            plugin.getEventBus().post(event);
            if (event.isCancelled()) {
              return true;
            }
            EconomyResponse er=serverBridge.withdrawPlayer(player,price);
            if (!er.transactionSuccess()) {
              player.sendMessage(er.errorMessage);
              serverBridge.getLogger().warning(er.errorMessage);
              return true;
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            return true;
          }
        }
 else {
          plugin.getEventBus().post(event);
        }
        if (!event.isCancelled()) {
          Plot plot=manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
          if (player.getUniqueId().equals(futurePlotOwner.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + player.getName()+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
          if (isAdvancedLogging()) {
            if (price == 0) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
 else {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
            }
          }
        }
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_CLAIM) || player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,pmi)) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      IOfflinePlayer futurePlotOwner=player;
      if (args.length == 2 && player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
        if (args[1].length() > 16 || !validUserPattern2.matcher(args[1]).matches()) {
          throw new IllegalArgumentException(C(""String_Node_Str""));
        }
        if (serverBridge.getPlayer(args[1]) == null) {
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 else {
          futurePlotOwner=serverBridge.getPlayer(args[1]);
        }
      }
      int plotLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world);
      if (player.getUniqueId().equals(futurePlotOwner.getUniqueId()) && plotLimit != -1 && plotsOwned >= plotLimit) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
 else {
        double price=0.0;
        PlotCreateEvent event=new PlotCreateEvent(world,id,player);
        if (manager.isEconomyEnabled(pmi)) {
          price=pmi.getClaimPrice();
          if (serverBridge.has(player,price)) {
            plugin.getEventBus().post(event);
            if (event.isCancelled()) {
              return true;
            }
            EconomyResponse er=serverBridge.withdrawPlayer(player,price);
            if (!er.transactionSuccess()) {
              player.sendMessage(er.errorMessage);
              serverBridge.getLogger().warning(er.errorMessage);
              return true;
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            return true;
          }
        }
 else {
          plugin.getEventBus().post(event);
        }
        if (!event.isCancelled()) {
          Plot plot=manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
          if (player.getUniqueId().equals(futurePlotOwner.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + player.getName()+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
          if (isAdvancedLogging()) {
            if (price == 0) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
 else {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
            }
          }
        }
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42030,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length < 2 && args.length >= 3) {
    throw new BadUsageException(getUsage());
  }
  if (args[1].length() > 16 || !validUserPattern.matcher(args[1]).matches()) {
    throw new IllegalArgumentException(C(""String_Node_Str""));
  }
  if (""String_Node_Str"".equals(args[1]) && plugin.getConfig().getBoolean(""String_Node_Str"")) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_DENY) || player.hasPermission(PermissionNames.USER_DENY)) {
    IWorld world=player.getWorld();
    if (manager.isPlotWorld(world)) {
      Plot plot=manager.getPlot(player);
      if (plot == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      String denied;
      IPlayer deniedPlayer=serverBridge.getPlayer(args[1]);
      if (""String_Node_Str"".equals(args[1])) {
        denied=""String_Node_Str"";
      }
 else       if (deniedPlayer != null) {
        denied=deniedPlayer.getUniqueId().toString();
      }
 else {
        player.sendMessage(args[1] + ""String_Node_Str"");
        return true;
      }
      if (player.getUniqueId().equals(plot.getOwnerId()) || player.hasPermission(PermissionNames.ADMIN_DENY)) {
        if (!""String_Node_Str"".equals(denied)) {
          if (plot.getOwnerId().equals(deniedPlayer.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str""));
            return true;
          }
        }
        if (plot.isDeniedConsulting(denied)) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + args[1]+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
 else {
          double price=0.0;
          PlotAddDeniedEvent event=new PlotAddDeniedEvent(world,plot,player,denied);
          if (manager.isEconomyEnabled(pmi)) {
            price=pmi.getDenyPlayerPrice();
            if (serverBridge.has(player,price)) {
              plugin.getEventBus().post(event);
              if (event.isCancelled()) {
                return true;
              }
              EconomyResponse er=serverBridge.withdrawPlayer(player,price);
              if (!er.transactionSuccess()) {
                player.sendMessage(er.errorMessage);
                serverBridge.getLogger().warning(er.errorMessage);
                return true;
              }
            }
 else {
              player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().format(price));
              return true;
            }
          }
 else {
            plugin.getEventBus().post(event);
          }
          if (!event.isCancelled()) {
            plot.addDenied(denied);
            plot.removeAllowed(denied);
            if (""String_Node_Str"".equals(denied)) {
              List<IPlayer> playersInPlot=manager.getPlayersInPlot(id,world);
              for (              IPlayer iPlayer : playersInPlot) {
                if (!plot.isAllowed(iPlayer.getUniqueId())) {
                  iPlayer.setLocation(manager.getPlotHome(plot.getId(),player.getWorld()));
                }
              }
            }
 else {
              IPlayer deniedPlayer=serverBridge.getPlayer(denied);
              if (deniedPlayer != null && deniedPlayer.getWorld().equals(world)) {
                PlotId plotId=manager.getPlotId(deniedPlayer);
                if (plot.getId().equals(plotId)) {
                  deniedPlayer.setLocation(manager.getPlotHome(plot.getId(),player.getWorld()));
                }
              }
            }
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            if (isAdvancedLogging()) {
              if (price == 0) {
                serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().getID());
              }
 else {
                serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().getID()+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
              }
            }
          }
        }
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getId().getID()+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length < 2 && args.length >= 3) {
    throw new BadUsageException(getUsage());
  }
  if (args[1].length() > 16 || !validUserPattern.matcher(args[1]).matches()) {
    throw new IllegalArgumentException(C(""String_Node_Str""));
  }
  if (""String_Node_Str"".equals(args[1]) && plugin.getConfig().getBoolean(""String_Node_Str"")) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_DENY) || player.hasPermission(PermissionNames.USER_DENY)) {
    IWorld world=player.getWorld();
    if (manager.isPlotWorld(world)) {
      Plot plot=manager.getPlot(player);
      if (plot == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      String denied;
      IPlayer deniedPlayer=serverBridge.getPlayer(args[1]);
      if (""String_Node_Str"".equals(args[1])) {
        denied=""String_Node_Str"";
      }
 else       if (deniedPlayer != null) {
        denied=deniedPlayer.getUniqueId().toString();
      }
 else {
        player.sendMessage(args[1] + ""String_Node_Str"");
        return true;
      }
      if (player.getUniqueId().equals(plot.getOwnerId()) || player.hasPermission(PermissionNames.ADMIN_DENY)) {
        if (!""String_Node_Str"".equals(denied)) {
          if (plot.getOwnerId().equals(deniedPlayer.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str""));
            return true;
          }
        }
        if (plot.isDeniedConsulting(denied)) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + args[1]+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
 else {
          double price=0.0;
          PlotAddDeniedEvent event=new PlotAddDeniedEvent(world,plot,player,denied);
          if (manager.isEconomyEnabled(pmi)) {
            price=pmi.getDenyPlayerPrice();
            if (serverBridge.has(player,price)) {
              plugin.getEventBus().post(event);
              if (event.isCancelled()) {
                return true;
              }
              EconomyResponse er=serverBridge.withdrawPlayer(player,price);
              if (!er.transactionSuccess()) {
                player.sendMessage(er.errorMessage);
                serverBridge.getLogger().warning(er.errorMessage);
                return true;
              }
            }
 else {
              player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
              return true;
            }
          }
 else {
            plugin.getEventBus().post(event);
          }
          if (!event.isCancelled()) {
            plot.addDenied(denied);
            plot.removeMember(denied);
            if (""String_Node_Str"".equals(denied)) {
              List<IPlayer> playersInPlot=manager.getPlayersInPlot(plot.getId(),world);
              for (              IPlayer iPlayer : playersInPlot) {
                if (!plot.isAllowed(iPlayer.getUniqueId())) {
                  iPlayer.setLocation(manager.getPlotHome(plot.getId(),player.getWorld()));
                }
              }
            }
 else {
              if (deniedPlayer != null && deniedPlayer.getWorld().equals(world)) {
                PlotId plotId=manager.getPlotId(deniedPlayer);
                if (plot.getId().equals(plotId)) {
                  deniedPlayer.setLocation(manager.getPlotHome(plot.getId(),player.getWorld()));
                }
              }
            }
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            if (isAdvancedLogging()) {
              if (price == 0) {
                serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().getID());
              }
 else {
                serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ denied+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getId().getID()+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
              }
            }
          }
        }
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getId().getID()+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42031,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_HOME)) {
    if (manager.isPlotWorld(player) || plugin.getConfig().getBoolean(""String_Node_Str"")) {
      UUID uuid=player.getUniqueId();
      IWorld world;
      if (manager.isPlotWorld(player)) {
        world=player.getWorld();
      }
 else {
        world=manager.getFirstWorld();
      }
      String worldName=world.getName();
      int nb=1;
      if (args[1].contains(""String_Node_Str"")) {
        if (args[1].split(""String_Node_Str"").length == 1 || args[0].split(""String_Node_Str"")[1].isEmpty()) {
          player.sendMessage(getUsage());
          return true;
        }
        try {
          nb=Integer.parseInt(args[1].split(""String_Node_Str"")[1]);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(getUsage());
          return true;
        }
      }
      String playerName=player.getName();
      if (args.length == 2) {
        if (manager.getWorld(args[1]) == null) {
          playerName=args[1];
          uuid=null;
        }
 else {
          world=serverBridge.getWorld(args[1]);
        }
      }
      if (args.length == 3) {
        if (manager.getWorld(args[2]) == null) {
          player.sendMessage(args[2] + C(""String_Node_Str""));
          return true;
        }
        world=serverBridge.getWorld(args[2]);
        worldName=args[2];
      }
      if (world == null) {
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      if (manager.isPlotWorld(world)) {
        int i=nb - 1;
        for (        Plot plot : plugin.getSqlManager().getOwnedPlots(world,uuid)) {
          ILocation location;
          if (uuid == null) {
            if (plot.getOwner().equals(playerName)) {
              if (i == 0) {
                double price=0.0;
                location=manager.getPlotHome(plot.getId(),player.getWorld());
                PlotTeleportHomeEvent event=new PlotTeleportHomeEvent(plot,player,location);
                if (manager.isEconomyEnabled(pmi)) {
                  price=pmi.getPlotHomePrice();
                  if (serverBridge.has(player,price)) {
                    plugin.getEventBus().post(event);
                    if (event.isCancelled()) {
                      return true;
                    }
                    EconomyResponse er=serverBridge.withdrawPlayer(player,price);
                    if (!er.transactionSuccess()) {
                      player.sendMessage(er.errorMessage);
                      return true;
                    }
                  }
 else {
                    player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().format(price));
                    return true;
                  }
                }
 else {
                  plugin.getEventBus().post(event);
                }
                if (!event.isCancelled()) {
                  player.setLocation(event.getHomeLocation());
                  if (price != 0) {
                    player.sendMessage(serverBridge.getEconomy().format(price));
                  }
                }
                return true;
              }
              i--;
            }
          }
 else           if (plot.getOwnerId().equals(uuid)) {
            if (i == 0) {
              double price=0.0;
              location=manager.getPlotHome(plot.getId(),player.getWorld());
              PlotTeleportHomeEvent event=new PlotTeleportHomeEvent(plot,player,location);
              if (manager.isEconomyEnabled(pmi)) {
                price=pmi.getPlotHomePrice();
                if (serverBridge.has(player,price)) {
                  plugin.getEventBus().post(event);
                  if (!event.isCancelled()) {
                    EconomyResponse er=serverBridge.withdrawPlayer(player,price);
                    if (!er.transactionSuccess()) {
                      player.sendMessage(er.errorMessage);
                      return true;
                    }
                  }
                }
 else {
                  player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().format(price));
                  return true;
                }
              }
 else {
                plugin.getEventBus().post(event);
              }
              if (!event.isCancelled()) {
                player.teleport(event.getHomeLocation());
                if (price != 0) {
                  player.sendMessage(serverBridge.getEconomy().format(price));
                }
              }
              return true;
            }
            i--;
          }
        }
        if (nb > 0) {
          if (playerName.equals(player.getName())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + nb);
          }
 else {
            player.sendMessage(playerName + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ nb);
          }
        }
 else         if (!playerName.equals(player.getName())) {
          player.sendMessage(playerName + ""String_Node_Str"" + C(""String_Node_Str""));
        }
 else {
          player.sendMessage(C(""String_Node_Str""));
        }
      }
 else {
        player.sendMessage(worldName + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_HOME)) {
    if (manager.isPlotWorld(player) || plugin.getConfig().getBoolean(""String_Node_Str"")) {
      UUID uuid=player.getUniqueId();
      IWorld world;
      if (manager.isPlotWorld(player)) {
        world=player.getWorld();
      }
 else {
        world=manager.getFirstWorld();
      }
      int nb=1;
      if (args[1].contains(""String_Node_Str"")) {
        if (args[1].split(""String_Node_Str"").length == 1 || args[0].split(""String_Node_Str"")[1].isEmpty()) {
          player.sendMessage(getUsage());
          return true;
        }
        try {
          nb=Integer.parseInt(args[1].split(""String_Node_Str"")[1]);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(getUsage());
          return true;
        }
      }
      String playerName=player.getName();
      if (args.length == 2) {
        if (manager.getWorld(args[1]) == null) {
          playerName=args[1];
          uuid=null;
        }
 else {
          world=manager.getWorld(args[1]);
        }
      }
      if (args.length == 3) {
        if (manager.getWorld(args[2]) == null) {
          player.sendMessage(args[2] + C(""String_Node_Str""));
          return true;
        }
        world=manager.getWorld(args[2]);
      }
      if (world == null) {
        return true;
      }
      PlotMapInfo pmi=manager.getMap(world);
      if (manager.isPlotWorld(world)) {
        int i=nb - 1;
        for (        Plot plot : plugin.getSqlManager().getOwnedPlots(world,uuid)) {
          ILocation location;
          if (plot.getOwnerId().equals(uuid)) {
            if (i == 0) {
              double price=0.0;
              location=manager.getPlotHome(plot.getId(),player.getWorld());
              PlotTeleportHomeEvent event=new PlotTeleportHomeEvent(plot,player,location);
              if (manager.isEconomyEnabled(pmi)) {
                price=pmi.getPlotHomePrice();
                if (serverBridge.has(player,price)) {
                  plugin.getEventBus().post(event);
                  if (!event.isCancelled()) {
                    EconomyResponse er=serverBridge.withdrawPlayer(player,price);
                    if (!er.transactionSuccess()) {
                      player.sendMessage(er.errorMessage);
                      return true;
                    }
                  }
                }
 else {
                  player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
                  return true;
                }
              }
 else {
                plugin.getEventBus().post(event);
              }
              if (!event.isCancelled()) {
                player.teleport(event.getHomeLocation());
                if (price != 0) {
                  player.sendMessage(serverBridge.getEconomy().get().format(price));
                }
              }
              return true;
            }
            i--;
          }
        }
        if (nb > 0) {
          if (playerName.equals(player.getName())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + nb);
          }
 else {
            player.sendMessage(playerName + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ nb);
          }
        }
 else         if (!playerName.equals(player.getName())) {
          player.sendMessage(playerName + ""String_Node_Str"" + C(""String_Node_Str""));
        }
 else {
          player.sendMessage(C(""String_Node_Str""));
        }
      }
 else {
        player.sendMessage(world.getName() + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42032,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_INFO)) {
    IWorld world=player.getWorld();
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      if (!manager.isPlotAvailable(id,world)) {
        Plot plot=manager.getPlotById(id,world);
        player.sendMessage(""String_Node_Str"" + plot.getInternalID());
        player.sendMessage(""String_Node_Str"" + id + ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getBiome());
        final String neverExpire=C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"");
        if (plot.getExpiredDate() == null) {
          if (plot.isFinished()) {
            if (plot.isProtected()) {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
 else {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
          }
 else {
            if (plot.isProtected()) {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
 else {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
          }
        }
 else         if (plot.isProtected()) {
          if (plot.isFinished()) {
            player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
 else {
            player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else         if (plot.isFinished()) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getExpiredDate()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
 else {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getExpiredDate()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
        if (plot.getMembers().size() > 0) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getMembers().keySet().toString());
        }
        if (plot.getDenied().size() > 0) {
          if (plot.getDenied().contains(""String_Node_Str"")) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getDenied().toString());
          }
          NameFetcher nameFetcher=new NameFetcher(plot.getDenied());
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + nameFetcher.call().toString());
        }
        if (manager.isEconomyEnabled(world)) {
          if (plot.isForSale()) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + (Math.round(plot.getPrice())));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str""));
          }
        }
        int bottomX=manager.bottomX(id,world);
        int bottomZ=manager.bottomZ(id,world);
        int topX=manager.topX(id,world);
        int topZ=manager.topZ(id,world);
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + bottomX+ ""String_Node_Str""+ bottomZ);
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + topX+ ""String_Node_Str""+ topZ);
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_INFO)) {
    IWorld world=player.getWorld();
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      if (!manager.isPlotAvailable(id,world)) {
        Plot plot=manager.getPlotById(id,world);
        player.sendMessage(""String_Node_Str"" + plot.getInternalID());
        player.sendMessage(""String_Node_Str"" + id + ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getBiome());
        player.sendMessage(""String_Node_Str"" + plot.getCreatedDate());
        final String neverExpire=C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"");
        if (plot.getExpiredDate() == null) {
          if (plot.isFinished()) {
            if (plot.isProtected()) {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
 else {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
          }
 else {
            if (plot.isProtected()) {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
 else {
              player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
            }
          }
        }
 else         if (plot.isProtected()) {
          if (plot.isFinished()) {
            player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
 else {
            player.sendMessage(neverExpire + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else         if (plot.isFinished()) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getExpiredDate()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
 else {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getExpiredDate()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
        if (plot.getMembers().size() > 0) {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getMembers().keySet().toString());
        }
        if (plot.getDenied().size() > 0) {
          if (plot.getDenied().contains(""String_Node_Str"")) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plot.getDenied().toString());
          }
          NameFetcher nameFetcher=new NameFetcher(plot.getDenied());
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + nameFetcher.call().toString());
        }
        if (manager.isEconomyEnabled(world)) {
          if (plot.isForSale()) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + (Math.round(plot.getPrice())));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str""));
          }
        }
        int bottomX=manager.bottomX(id,world);
        int bottomZ=manager.bottomZ(id,world);
        int topX=manager.topX(id,world);
        int topZ=manager.topZ(id,world);
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + bottomX+ ""String_Node_Str""+ bottomZ);
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + topX+ ""String_Node_Str""+ topZ);
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42033,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_MIDDLE) || player.hasPermission(PermissionNames.ADMIN_MIDDLE_OTHER)) {
    if (manager.isPlotWorld(player)) {
      IWorld world=player.getWorld();
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      Plot plot=manager.getPlotById(id,world);
      if (plot == null) {
        player.sendMessage(C(""String_Node_Str""));
      }
 else       if (plot.isAllowed(player.getUniqueId()) || player.hasPermission(PermissionNames.ADMIN_MIDDLE_OTHER)) {
        Vector middleloc=manager.getPlotMiddle(world,plot.getId());
        ILocation location=new ILocation(world,middleloc);
        PlotTeleportMiddleEvent event=new PlotTeleportMiddleEvent(plot,player,location);
        plugin.getEventBus().post(event);
        if (!event.isCancelled()) {
          player.setLocation(event.getMiddleLocation());
        }
      }
 else {
        player.sendMessage(C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42034,"@Override public void onEnable(){
  INSTANCE=this;
  getLogger().info(""String_Node_Str"");
  serverObjectBuilder=new BukkitServerBridge(getLogger());
  plotme=new PlotMe_Core();
  plotme.registerServerBridge(serverObjectBuilder);
  getAPI().enable();
  doMetric();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(),this);
  pm.registerEvents(new BukkitPlotDenyListener(),this);
  this.getCommand(""String_Node_Str"").setExecutor(new BukkitCommand(this));
}","@Override public void onEnable(){
  INSTANCE=this;
  getLogger().info(""String_Node_Str"");
  serverObjectBuilder=new BukkitServerBridge(getLogger());
  plotme.registerServerBridge(serverObjectBuilder);
  getAPI().enable();
  doMetric();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(),this);
  pm.registerEvents(new BukkitPlotDenyListener(),this);
  this.getCommand(""String_Node_Str"").setExecutor(new BukkitCommand(this));
}"
42035,"private void setupWorld(IWorld world){
  getServerBridge().loadDefaultConfig(configFile,""String_Node_Str"" + world.getName().toLowerCase());
  PlotMapInfo pmi=new PlotMapInfo(configFile,world.getName().toLowerCase());
  PlotMeCoreManager.getInstance().addPlotMap(world,pmi);
  getSqlManager().loadPlotsAsynchronously(world);
}","private void setupWorld(IWorld world){
  getLogger().info(""String_Node_Str"");
  getServerBridge().loadDefaultConfig(configFile,""String_Node_Str"" + world.getName().toLowerCase());
  PlotMapInfo pmi=new PlotMapInfo(configFile,world.getName().toLowerCase());
  PlotMeCoreManager.getInstance().addPlotMap(world,pmi);
  getSqlManager().loadPlotsAsynchronously(world);
}"
42036,"private boolean handleConsoleCommands(CommandSender sender,String[] args){
  if (args.length == 0) {
    PlotCommand command=commandMap.get(""String_Node_Str"");
    if (command != null) {
      try {
        return command.execute(new BukkitCommandSender(sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    sender.sendMessage(""String_Node_Str"");
  }
  if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
    PlotCommand command=commandMap.get(""String_Node_Str"");
    if (command != null) {
      try {
        return command.execute(new BukkitCommandSender(sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return false;
}","private boolean handleConsoleCommands(CommandSender sender,String[] args){
  if (args.length == 0) {
    PlotCommand command=commandMap.get(""String_Node_Str"");
    if (command != null) {
      try {
        return command.execute(new BukkitCommandSender(sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
      PlotCommand command=commandMap.get(""String_Node_Str"");
      if (command != null) {
        try {
          return command.execute(new BukkitCommandSender(sender),args);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
  return false;
}"
42037,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_CLAIM) || player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,world)) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      IOfflinePlayer futurePlotOwner=player;
      if (args.length == 2 && player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
        if (args[1].length() > 16 || !validUserPattern2.matcher(args[1]).matches()) {
          throw new IllegalArgumentException(C(""String_Node_Str""));
        }
        if (serverBridge.getPlayer(args[1]) == null) {
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 else {
          futurePlotOwner=serverBridge.getPlayer(args[1]);
        }
      }
      int plotLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world);
      if (player.getUniqueId().equals(futurePlotOwner.getUniqueId()) && plotLimit != -1 && plotsOwned >= plotLimit) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
 else {
        double price=0.0;
        PlotCreateEvent event=new PlotCreateEvent(world,id,player);
        if (manager.isEconomyEnabled(pmi)) {
          price=pmi.getClaimPrice();
          if (serverBridge.has(player,price)) {
            plugin.getEventBus().post(event);
            if (event.isCancelled()) {
              return true;
            }
            EconomyResponse er=serverBridge.withdrawPlayer(player,price);
            if (!er.transactionSuccess()) {
              player.sendMessage(er.errorMessage);
              serverBridge.getLogger().warning(er.errorMessage);
              return true;
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            return true;
          }
        }
 else {
          plugin.getEventBus().post(event);
        }
        if (!event.isCancelled()) {
          Plot plot=manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
          if (player.getUniqueId().equals(futurePlotOwner.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + player.getName()+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
          }
          if (isAdvancedLogging()) {
            if (price == 0) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
 else {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
            }
          }
        }
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.USER_CLAIM) || player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,world)) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
      IOfflinePlayer futurePlotOwner=player;
      if (args.length == 2 && player.hasPermission(PermissionNames.ADMIN_CLAIM_OTHER)) {
        if (args[1].length() > 16 || !validUserPattern2.matcher(args[1]).matches()) {
          throw new IllegalArgumentException(C(""String_Node_Str""));
        }
        if (serverBridge.getPlayer(args[1]) == null) {
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 else {
          futurePlotOwner=serverBridge.getPlayer(args[1]);
        }
      }
      int plotLimit=getPlotLimit(player);
      int plotsOwned=manager.getOwnedPlotCount(player.getUniqueId(),world);
      if (player.getUniqueId().equals(futurePlotOwner.getUniqueId()) && plotLimit != -1 && plotsOwned >= plotLimit) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + plotsOwned+ ""String_Node_Str""+ getPlotLimit(player)+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
 else {
        double price=0.0;
        PlotCreateEvent event=new PlotCreateEvent(world,id,player);
        if (manager.isEconomyEnabled(pmi)) {
          price=pmi.getClaimPrice();
          if (serverBridge.has(player,price)) {
            plugin.getEventBus().post(event);
            if (event.isCancelled()) {
              return true;
            }
            EconomyResponse er=serverBridge.withdrawPlayer(player,price);
            if (!er.transactionSuccess()) {
              player.sendMessage(er.errorMessage);
              serverBridge.getLogger().warning(er.errorMessage);
              return true;
            }
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ serverBridge.getEconomy().get().format(price));
            return true;
          }
        }
 else {
          plugin.getEventBus().post(event);
        }
        if (!event.isCancelled()) {
          Plot plot=manager.createPlot(id,world,player.getName(),player.getUniqueId(),pmi);
          if (player.getUniqueId().equals(futurePlotOwner.getUniqueId())) {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
 else {
            player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + player.getName()+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
          if (isAdvancedLogging()) {
            if (price == 0) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
 else {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ (""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ price));
            }
          }
        }
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
    }
  }
 else {
    return false;
  }
  return true;
}"
42038,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_PROTECT) || player.hasPermission(PermissionNames.USER_PROTECT)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,world)) {
        Plot plot=manager.getPlotById(id,world);
        String name=player.getName();
        if (player.getUniqueId().equals(plot.getOwnerId()) || player.hasPermission(PermissionNames.ADMIN_PROTECT)) {
          PlotProtectChangeEvent event;
          if (plot.isProtected()) {
            event=new PlotProtectChangeEvent(world,plot,player,false);
            plugin.getEventBus().post(event);
            if (!event.isCancelled()) {
              plot.setProtected(false);
              manager.adjustWall(player);
              plugin.getSqlManager().savePlot(plot);
              player.sendMessage(C(""String_Node_Str""));
              if (isAdvancedLogging()) {
                serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
              }
            }
          }
 else {
            double cost=pmi.getProtectPrice();
            if (manager.isEconomyEnabled(pmi)) {
              if (serverBridge.has(player,cost)) {
                player.sendMessage(C(""String_Node_Str""));
                return true;
              }
 else {
                event=new PlotProtectChangeEvent(world,plot,player,true);
                plugin.getEventBus().post(event);
                if (!event.isCancelled()) {
                  EconomyResponse er=serverBridge.withdrawPlayer(player,cost);
                  if (!er.transactionSuccess()) {
                    player.sendMessage(er.errorMessage);
                    serverBridge.getLogger().warning(er.errorMessage);
                    return true;
                  }
                }
 else {
                  return true;
                }
              }
            }
 else {
              event=new PlotProtectChangeEvent(world,plot,player,true);
              plugin.getEventBus().post(event);
            }
            if (!event.isCancelled()) {
              plot.setProtected(true);
              manager.adjustWall(player);
              plugin.getSqlManager().savePlot(plot);
              player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + serverBridge.getEconomy().get().format(cost));
              if (isAdvancedLogging()) {
                serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
              }
            }
          }
        }
 else {
          player.sendMessage(C(""String_Node_Str""));
        }
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_PROTECT) || player.hasPermission(PermissionNames.USER_PROTECT)) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      PlotId id=manager.getPlotId(player);
      if (id == null) {
        player.sendMessage(C(""String_Node_Str""));
        return true;
      }
 else       if (!manager.isPlotAvailable(id,world)) {
        Plot plot=manager.getPlotById(id,world);
        String name=player.getName();
        if (player.getUniqueId().equals(plot.getOwnerId()) || player.hasPermission(PermissionNames.ADMIN_PROTECT)) {
          PlotProtectChangeEvent event;
          if (plot.isProtected()) {
            event=new PlotProtectChangeEvent(world,plot,player,false);
            plugin.getEventBus().post(event);
            if (!event.isCancelled()) {
              plot.setProtected(false);
              manager.adjustWall(player);
              plugin.getSqlManager().savePlot(plot);
              player.sendMessage(C(""String_Node_Str""));
              if (isAdvancedLogging()) {
                serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
              }
            }
          }
 else {
            double cost=pmi.getProtectPrice();
            if (manager.isEconomyEnabled(pmi)) {
              if (serverBridge.has(player,cost)) {
                player.sendMessage(C(""String_Node_Str""));
                return true;
              }
 else {
                event=new PlotProtectChangeEvent(world,plot,player,true);
                plugin.getEventBus().post(event);
                if (!event.isCancelled()) {
                  EconomyResponse er=serverBridge.withdrawPlayer(player,cost);
                  if (!er.transactionSuccess()) {
                    player.sendMessage(er.errorMessage);
                    serverBridge.getLogger().warning(er.errorMessage);
                    return true;
                  }
                }
 else {
                  return true;
                }
              }
            }
 else {
              event=new PlotProtectChangeEvent(world,plot,player,true);
              plugin.getEventBus().post(event);
            }
            if (!event.isCancelled()) {
              plot.setProtected(true);
              manager.adjustWall(player);
              plugin.getSqlManager().savePlot(plot);
              player.sendMessage(C(""String_Node_Str""));
              if (isAdvancedLogging()) {
                serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
              }
            }
          }
        }
 else {
          player.sendMessage(C(""String_Node_Str""));
        }
      }
 else {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
  return true;
}"
42039,"@Override public void run(){
  plugin.getLogger().info(""String_Node_Str"" + world);
  ArrayList<Plot> plots=getPlots(world);
  worldToPlotMap.put(world,plots);
  PlotWorldLoadEvent eventWorld=new PlotWorldLoadEvent(world,plots.size());
  plugin.getEventBus().post(eventWorld);
  for (  Plot plot : plots) {
    PlotLoadEvent event=new PlotLoadEvent(world,plot);
    plugin.getEventBus().post(event);
  }
}","@Override public void run(){
  plugin.getLogger().info(""String_Node_Str"" + world.getName());
  ArrayList<Plot> plots=getPlots(world);
  worldToPlotMap.put(world,plots);
  PlotWorldLoadEvent eventWorld=new PlotWorldLoadEvent(world,plots.size());
  plugin.getEventBus().post(eventWorld);
  for (  Plot plot : plots) {
    PlotLoadEvent event=new PlotLoadEvent(world,plot);
    plugin.getEventBus().post(event);
  }
}"
42040,"public void loadPlotsAsynchronously(final IWorld world){
  plugin.getServerBridge().runTaskAsynchronously(new Runnable(){
    @Override public void run(){
      plugin.getLogger().info(""String_Node_Str"" + world);
      ArrayList<Plot> plots=getPlots(world);
      worldToPlotMap.put(world,plots);
      PlotWorldLoadEvent eventWorld=new PlotWorldLoadEvent(world,plots.size());
      plugin.getEventBus().post(eventWorld);
      for (      Plot plot : plots) {
        PlotLoadEvent event=new PlotLoadEvent(world,plot);
        plugin.getEventBus().post(event);
      }
    }
    private ArrayList<Plot> getPlots(    IWorld world){
      ArrayList<Plot> ret=new ArrayList<>();
      Connection connection=getConnection();
      try (PreparedStatement statementPlot=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementAllowed=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementDenied=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementLikes=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementMetadata=connection.prepareStatement(""String_Node_Str"")){
        statementPlot.setString(1,world.getName().toLowerCase());
        try (ResultSet setPlots=statementPlot.executeQuery()){
          while (setPlots.next()) {
            long internalID=setPlots.getLong(""String_Node_Str"");
            PlotId id=new PlotId(setPlots.getInt(""String_Node_Str""),setPlots.getInt(""String_Node_Str""));
            plotIds.add(id);
            String owner=setPlots.getString(""String_Node_Str"");
            UUID ownerId=UUID.fromString(setPlots.getString(""String_Node_Str""));
            String biome=setPlots.getString(""String_Node_Str"");
            Date expiredDate=setPlots.getDate(""String_Node_Str"");
            boolean finished=setPlots.getBoolean(""String_Node_Str"");
            String finishedDate=setPlots.getString(""String_Node_Str"");
            String createdDate=setPlots.getString(""String_Node_Str"");
            double price=setPlots.getDouble(""String_Node_Str"");
            boolean forSale=setPlots.getBoolean(""String_Node_Str"");
            boolean protect=setPlots.getBoolean(""String_Node_Str"");
            String plotName=setPlots.getString(""String_Node_Str"");
            int plotLikes=setPlots.getInt(""String_Node_Str"");
            Vector topLoc=new Vector(setPlots.getInt(""String_Node_Str""),255,setPlots.getInt(""String_Node_Str""));
            Vector bottomLoc=new Vector(setPlots.getInt(""String_Node_Str""),0,setPlots.getInt(""String_Node_Str""));
            HashMap<String,Map<String,String>> metadata=new HashMap<>();
            HashMap<String,Plot.AccessLevel> allowed=new HashMap<>();
            HashSet<String> denied=new HashSet<>();
            HashSet<UUID> likers=new HashSet<>();
            statementAllowed.setLong(1,internalID);
            try (ResultSet setAllowed=statementAllowed.executeQuery()){
              while (setAllowed.next()) {
                allowed.put(setAllowed.getString(""String_Node_Str""),Plot.AccessLevel.getAccessLevel(setAllowed.getInt(""String_Node_Str"")));
              }
            }
             statementDenied.setLong(1,internalID);
            try (ResultSet setDenied=statementAllowed.executeQuery()){
              while (setDenied.next()) {
                denied.add(setDenied.getString(""String_Node_Str""));
              }
            }
             statementLikes.setLong(1,internalID);
            try (ResultSet setLikes=statementLikes.executeQuery()){
              while (setLikes.next()) {
                likers.add(UUID.fromString(setLikes.getString(""String_Node_Str"")));
              }
            }
             statementMetadata.setLong(1,internalID);
            try (ResultSet setMetadata=statementMetadata.executeQuery()){
              while (setMetadata.next()) {
                String pluginname=setMetadata.getString(""String_Node_Str"");
                String propertyname=setMetadata.getString(""String_Node_Str"");
                String propertyvalue=setMetadata.getString(""String_Node_Str"");
                if (!metadata.containsKey(pluginname)) {
                  metadata.put(pluginname,new HashMap<String,String>());
                }
                metadata.get(pluginname).put(propertyname,propertyvalue);
              }
            }
             Plot plot=new Plot(internalID,owner,ownerId,world,biome,expiredDate,allowed,denied,likers,id,price,forSale,finished,finishedDate,protect,metadata,plotLikes,plotName,topLoc,bottomLoc,createdDate);
            ret.add(plot);
          }
        }
       }
 catch (      SQLException ex) {
        plugin.getLogger().severe(""String_Node_Str"");
        plugin.getLogger().severe(ex.getMessage());
      }
      return ret;
    }
  }
);
}","public void loadPlotsAsynchronously(final IWorld world){
  plugin.getServerBridge().runTaskAsynchronously(new Runnable(){
    @Override public void run(){
      plugin.getLogger().info(""String_Node_Str"" + world.getName());
      ArrayList<Plot> plots=getPlots(world);
      worldToPlotMap.put(world,plots);
      PlotWorldLoadEvent eventWorld=new PlotWorldLoadEvent(world,plots.size());
      plugin.getEventBus().post(eventWorld);
      for (      Plot plot : plots) {
        PlotLoadEvent event=new PlotLoadEvent(world,plot);
        plugin.getEventBus().post(event);
      }
    }
    private ArrayList<Plot> getPlots(    IWorld world){
      ArrayList<Plot> ret=new ArrayList<>();
      Connection connection=getConnection();
      try (PreparedStatement statementPlot=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementAllowed=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementDenied=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementLikes=connection.prepareStatement(""String_Node_Str"");PreparedStatement statementMetadata=connection.prepareStatement(""String_Node_Str"")){
        statementPlot.setString(1,world.getName().toLowerCase());
        try (ResultSet setPlots=statementPlot.executeQuery()){
          while (setPlots.next()) {
            long internalID=setPlots.getLong(""String_Node_Str"");
            PlotId id=new PlotId(setPlots.getInt(""String_Node_Str""),setPlots.getInt(""String_Node_Str""));
            plotIds.add(id);
            String owner=setPlots.getString(""String_Node_Str"");
            UUID ownerId=UUID.fromString(setPlots.getString(""String_Node_Str""));
            String biome=setPlots.getString(""String_Node_Str"");
            Date expiredDate=setPlots.getDate(""String_Node_Str"");
            boolean finished=setPlots.getBoolean(""String_Node_Str"");
            String finishedDate=setPlots.getString(""String_Node_Str"");
            String createdDate=setPlots.getString(""String_Node_Str"");
            double price=setPlots.getDouble(""String_Node_Str"");
            boolean forSale=setPlots.getBoolean(""String_Node_Str"");
            boolean protect=setPlots.getBoolean(""String_Node_Str"");
            String plotName=setPlots.getString(""String_Node_Str"");
            int plotLikes=setPlots.getInt(""String_Node_Str"");
            Vector topLoc=new Vector(setPlots.getInt(""String_Node_Str""),255,setPlots.getInt(""String_Node_Str""));
            Vector bottomLoc=new Vector(setPlots.getInt(""String_Node_Str""),0,setPlots.getInt(""String_Node_Str""));
            HashMap<String,Map<String,String>> metadata=new HashMap<>();
            HashMap<String,Plot.AccessLevel> allowed=new HashMap<>();
            HashSet<String> denied=new HashSet<>();
            HashSet<UUID> likers=new HashSet<>();
            statementAllowed.setLong(1,internalID);
            try (ResultSet setAllowed=statementAllowed.executeQuery()){
              while (setAllowed.next()) {
                allowed.put(setAllowed.getString(""String_Node_Str""),Plot.AccessLevel.getAccessLevel(setAllowed.getInt(""String_Node_Str"")));
              }
            }
             statementDenied.setLong(1,internalID);
            try (ResultSet setDenied=statementAllowed.executeQuery()){
              while (setDenied.next()) {
                denied.add(setDenied.getString(""String_Node_Str""));
              }
            }
             statementLikes.setLong(1,internalID);
            try (ResultSet setLikes=statementLikes.executeQuery()){
              while (setLikes.next()) {
                likers.add(UUID.fromString(setLikes.getString(""String_Node_Str"")));
              }
            }
             statementMetadata.setLong(1,internalID);
            try (ResultSet setMetadata=statementMetadata.executeQuery()){
              while (setMetadata.next()) {
                String pluginname=setMetadata.getString(""String_Node_Str"");
                String propertyname=setMetadata.getString(""String_Node_Str"");
                String propertyvalue=setMetadata.getString(""String_Node_Str"");
                if (!metadata.containsKey(pluginname)) {
                  metadata.put(pluginname,new HashMap<String,String>());
                }
                metadata.get(pluginname).put(propertyname,propertyvalue);
              }
            }
             Plot plot=new Plot(internalID,owner,ownerId,world,biome,expiredDate,allowed,denied,likers,id,price,forSale,finished,finishedDate,protect,metadata,plotLikes,plotName,topLoc,bottomLoc,createdDate);
            ret.add(plot);
          }
        }
       }
 catch (      SQLException ex) {
        plugin.getLogger().severe(""String_Node_Str"");
        plugin.getLogger().severe(ex.getMessage());
      }
      return ret;
    }
  }
);
}"
42041,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    if (args.length == 0) {
      try {
        return commandMap.get(""String_Node_Str"").execute(plugin.wrapPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    PlotCommand _command=commandMap.get(args[0]);
    if (_command == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      try {
        return _command.execute(new BukkitPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    return handleConsoleCommands(sender,args);
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    if (args.length == 0) {
      try {
        return commandMap.get(""String_Node_Str"").execute(plugin.wrapPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (args[0] == null) {
      api.getLogger().severe(""String_Node_Str"");
      return false;
    }
    PlotCommand _command=commandMap.get(args[0]);
    if (_command == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else {
      try {
        return _command.execute(new BukkitPlayer((Player)sender),args);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 else {
    return handleConsoleCommands(sender,args);
  }
  return false;
}"
42042,"public boolean execute(ICommandSender sender,String[] args) throws Exception {
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_ADDTIME)) {
    if (manager.isPlotWorld(player)) {
      PlotMapInfo pmi=manager.getMap(player);
      if (pmi.getDaysToExpiration() != 0) {
        PlotId id=manager.getPlotId(player);
        if (id == null) {
          player.sendMessage(C(""String_Node_Str""));
          return true;
        }
        if (!manager.isPlotAvailable(id,pmi)) {
          Plot plot=manager.getPlotById(id,pmi);
          if (plot != null) {
            String name=player.getName();
            plot.resetExpire(pmi.getDaysToExpiration());
            player.sendMessage(C(""String_Node_Str""));
            if (isAdvancedLogging()) {
              serverBridge.getLogger().info(name + ""String_Node_Str"" + id);
            }
          }
        }
 else {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
          return true;
        }
      }
 else {
        return true;
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
  return true;
}","public boolean execute(ICommandSender sender,String[] args) throws Exception {
  if (args.length > 1) {
    throw new BadUsageException(getUsage());
  }
  IPlayer player=(IPlayer)sender;
  if (player.hasPermission(PermissionNames.ADMIN_ADDTIME)) {
    if (manager.isPlotWorld(player)) {
      PlotMapInfo pmi=manager.getMap(player);
      if (pmi.getDaysToExpiration() != 0) {
        PlotId id=manager.getPlotId(player);
        if (id == null) {
          player.sendMessage(C(""String_Node_Str""));
          return true;
        }
        if (!manager.isPlotAvailable(id,pmi)) {
          Plot plot=manager.getPlotById(id,pmi);
          if (plot != null) {
            String name=player.getName();
            plot.resetExpire(pmi.getDaysToExpiration());
            player.sendMessage(C(""String_Node_Str""));
            if (isAdvancedLogging()) {
              serverBridge.getLogger().info(name + ""String_Node_Str"" + id);
            }
          }
        }
 else {
          player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str""));
          return true;
        }
      }
 else {
        return true;
      }
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
  return true;
}"
42043,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonExtend(BlockPistonExtendEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    BlockFace face=event.getDirection();
    for (    Block block : event.getBlocks()) {
      PlotId id=manager.getPlotId(new BukkitLocation(block.getLocation().add(face.getModX(),face.getModY(),face.getModZ())));
      if (id == null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onBlockPistonExtend(BlockPistonExtendEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    BlockFace face=event.getDirection();
    for (    Block block : event.getBlocks()) {
      PlotId id=manager.getPlotId(new BukkitLocation(block.getLocation().add(face.getModX(),face.getModY(),face.getModZ())));
      if (id == null) {
        event.setCancelled(true);
      }
    }
  }
}"
42044,"@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitBlock block=new BukkitBlock(event.getClickedBlock());
  if (manager.isPlotWorld(block.getWorld())) {
    Player player=event.getPlayer();
    PlotId plotId=manager.getPlotId(block.getLocation());
    PlotToClear ptc=api.getPlotLocked(block.getWorld(),plotId);
    if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
      break;
case Reset:
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  break;
case Expired:
player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
boolean canBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
PlotMapInfo pmi=manager.getMap(block.getWorld());
Plot plot=manager.getPlotById(plotId,pmi);
if (event.isBlockInHand() && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (canBuild) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(pmi.getDaysToExpiration());
}
}
 else {
boolean blocked=false;
if (pmi.isProtectedBlock(block.getTypeId()) && !player.hasPermission(""String_Node_Str"" + block.getTypeId())) {
blocked=true;
}
ItemStack item=event.getItem();
if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
if (item != null) {
int itemId=item.getType().getId();
byte itemData=item.getData().getData();
if ((pmi.isPreventedItem(String.valueOf(itemId)) || pmi.isPreventedItem(itemId + ""String_Node_Str"" + itemData)) && !player.hasPermission(""String_Node_Str"" + itemId)) {
  blocked=true;
}
}
}
if (blocked) {
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (canBuild) {
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  }
  event.setCancelled(true);
}
}
}
}
}
}
}","@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitBlock block=new BukkitBlock(event.getClickedBlock());
  if (manager.isPlotWorld(block.getWorld())) {
    Player player=event.getPlayer();
    PlotId plotId=manager.getPlotId(block.getLocation());
    PlotToClear ptc=api.getPlotLocked(block.getWorld(),plotId);
    if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
      break;
case Reset:
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  break;
case Expired:
player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
boolean canBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
PlotMapInfo pmi=manager.getMap(block.getWorld());
Plot plot=manager.getPlotById(plotId,pmi);
if (event.isBlockInHand() && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (canBuild) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(pmi.getDaysToExpiration());
}
}
 else {
boolean blocked=false;
if (pmi.isProtectedBlock(block.getTypeId()) && !player.hasPermission(""String_Node_Str"" + block.getTypeId())) {
blocked=true;
}
ItemStack item=event.getItem();
if (event.getAction() == Action.RIGHT_CLICK_BLOCK && item != null) {
int itemId=item.getType().getId();
byte itemData=item.getData().getData();
if ((pmi.isPreventedItem(String.valueOf(itemId)) || pmi.isPreventedItem(itemId + ""String_Node_Str"" + itemData)) && !player.hasPermission(""String_Node_Str"" + itemId)) {
blocked=true;
}
}
if (blocked) {
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (canBuild) {
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  }
  event.setCancelled(true);
}
}
}
}
}
}
}"
42045,"/** 
 * Create the file if it does not exist.
 * @return true if the file was created, false if it exists or was never created
 */
public boolean createFile(){
  if (!configFile.exists()) {
    saveFile(false);
    return true;
  }
  return false;
}","/** 
 * Create the file if it does not exist.
 * @return true if the file was created, false if it exists or was never created
 */
public boolean createFile(){
  if (!configFile.exists()) {
    saveFile(true);
    return true;
  }
  return false;
}"
42046,"private void createConfigs(){
  configFile.createFile();
  captionFile.createFile();
}","private void createConfigs(){
  if (configFile.createFile()) {
    getLogger().info(""String_Node_Str"");
  }
  if (captionFile.createFile()) {
    getLogger().info(""String_Node_Str"");
  }
}"
42047,"@SuppressWarnings(""String_Node_Str"") public abstract boolean addMultiverseWorld(String worldName,String seed,String generator);","public abstract boolean addMultiverseWorld(String worldName,String seed,String generator);"
42048,"@SuppressWarnings(""String_Node_Str"") public abstract Collection<IWorld> getWorlds();","/** 
 * Get all Existing Plotworlds.
 * @return all plotworlds on the server
 */
public abstract Collection<IWorld> getWorlds();"
42049,"@SuppressWarnings(""String_Node_Str"") public abstract IOfflinePlayer getOfflinePlayer(String player);",public abstract IOfflinePlayer getOfflinePlayer(String player);
42050,"@SuppressWarnings(""String_Node_Str"") public abstract IMaterial getMaterial(String string);",public abstract IMaterial getMaterial(String string);
42051,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonExtend(BlockPistonExtendEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    BlockFace face=event.getDirection();
    for (    Block block : event.getBlocks()) {
      PlotId id=manager.getPlotId(new BukkitLocation(block.getLocation().add(face.getModX(),face.getModY(),face.getModZ())));
      if (id == null) {
        event.setCancelled(true);
      }
 else {
        PlotToClear ptc=api.getPlotLocked(location.getWorld(),id);
        if (ptc != null) {
          event.setCancelled(true);
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonExtend(BlockPistonExtendEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    BlockFace face=event.getDirection();
    for (    Block block : event.getBlocks()) {
      PlotId id=manager.getPlotId(new BukkitLocation(block.getLocation().add(face.getModX(),face.getModY(),face.getModZ())));
      if (id == null) {
        event.setCancelled(true);
      }
    }
  }
}"
42052,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonRetract(BlockPistonRetractEvent event){
  BukkitBlock block=new BukkitBlock(event.getBlock().getRelative(event.getDirection(),2));
  if (manager.isPlotWorld(block.getWorld()) && event.isSticky()) {
    PlotId id=manager.getPlotId(block.getLocation());
    if (id == null) {
      BukkitBlock block2=new BukkitBlock(event.getBlock().getRelative(event.getDirection(),3));
      PlotId id2=manager.getPlotId(block2.getLocation());
      if (id2 == null) {
        event.setCancelled(true);
      }
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(block.getWorld(),id);
      if (ptc != null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onBlockPistonRetract(BlockPistonRetractEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    List<Block> blocks=event.getBlocks();
    for (    Block moved : blocks) {
      PlotId id=manager.getPlotId(new BukkitLocation(moved.getLocation()));
      if (id == null) {
        event.setCancelled(true);
      }
    }
  }
}"
42053,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBucketEmptyEvent(PlayerBucketEmptyEvent event){
  handleBucketEvent(event);
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBucketEmptyEvent(PlayerBucketEmptyEvent event){
  Player player=event.getPlayer();
  BukkitLocation location=new BukkitLocation(event.getBlockClicked().getLocation());
  if (!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE) && manager.isPlotWorld(location)) {
    PlotId id=manager.getPlotId(location.add(event.getBlockFace().getModX(),event.getBlockFace().getModY(),event.getBlockFace().getModZ()));
    if (id == null) {
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld(),id);
      if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Reset:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
case Expired:
  player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
Plot plot=manager.getPlotById(id,location.getWorld());
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
}
}
}"
42054,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    Player player=event.getPlayer();
    boolean cannotBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
    PlotId id=manager.getPlotId(location);
    if (id == null) {
      if (cannotBuild) {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld().getName(),id);
      if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Reset:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
case Expired:
  player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
Plot plot=manager.getMap(location).getPlot(id);
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (cannotBuild) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(manager.getMap(location).getDaysToExpiration());
}
}
}
}
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    Player player=event.getPlayer();
    boolean cannotBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
    PlotId id=manager.getPlotId(location);
    if (id == null) {
      if (cannotBuild) {
        player.sendMessage(""String_Node_Str"");
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld().getName(),id);
      if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Reset:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
case Expired:
  player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
Plot plot=manager.getMap(location).getPlot(id);
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (cannotBuild) {
player.sendMessage(""String_Node_Str"");
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(manager.getMap(location).getDaysToExpiration());
}
}
}
}
}"
42055,"@Subscribe public void onPlayerMove(PlayerMoveEvent event){
  SpongePlayer player=plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    SpongeLocation to=new SpongeLocation(event.getNewLocation());
    String idTo=manager.getPlotId(to);
    if (!idTo.isEmpty()) {
      Plot plot=manager.getPlotById(idTo,player);
      if (plot != null && plot.isDeniedInternal(player.getName(),player.getUniqueId())) {
        event.getPlayer().setLocation(event.getOldLocation());
      }
    }
  }
}","@Subscribe public void onPlayerMove(PlayerMoveEvent event){
  SpongePlayer player=plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    SpongeLocation to=new SpongeLocation(event.getNewLocation());
    PlotId idTo=manager.getPlotId(to);
    if (idTo != null) {
      Plot plot=manager.getPlotById(idTo,player);
      if (plot != null && plot.isDeniedInternal(player.getName(),player.getUniqueId())) {
        event.getPlayer().setLocation(event.getOldLocation());
      }
    }
  }
}"
42056,"@Subscribe public void onBlockChange(PlayerChangeBlockEvent event){
  SpongeLocation location=new SpongeLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    String id=manager.getPlotId(location);
    Player player=event.getPlayer();
    boolean cannotBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld().getName(),id);
      if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Reset:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
case Expired:
  player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
Plot plot=manager.getMap(location).getPlot(id);
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (cannotBuild) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(manager.getMap(location).getDaysToExpiration());
}
}
}
}
}","@Subscribe public void onBlockChange(PlayerChangeBlockEvent event){
  SpongeLocation location=new SpongeLocation(event.getBlock().getLocation());
  if (manager.isPlotWorld(location)) {
    PlotId id=manager.getPlotId(location);
    Player player=event.getPlayer();
    boolean cannotBuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
    if (id == null) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld().getName(),id);
      if (ptc != null) {
switch (ptc.getReason()) {
case Clear:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Reset:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
case Expired:
  player.sendMessage(api.getUtil().C(""String_Node_Str""));
break;
}
event.setCancelled(true);
}
 else {
Plot plot=manager.getMap(location).getPlot(id);
if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
if (cannotBuild) {
player.sendMessage(api.getUtil().C(""String_Node_Str""));
event.setCancelled(true);
}
}
 else {
plot.resetExpire(manager.getMap(location).getDaysToExpiration());
}
}
}
}
}"
42057,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitPlayer player=(BukkitPlayer)plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player)) {
    if (!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE) && !manager.isPlayerIgnoringWELimit(player) && (event.getAction() == Action.LEFT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_BLOCK)&& event.getItem() != null && event.getItem().getType() != Material.AIR) {
      PlotId id=manager.getPlotId(player);
      Plot plot=manager.getMap(player).getPlot(id);
      if (plot != null && plot.isAllowed(player.getName(),player.getUniqueId())) {
        worldEdit.setMask(player);
      }
 else {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitPlayer player=(BukkitPlayer)plugin.wrapPlayer(event.getPlayer());
  BukkitLocation location=new BukkitLocation(event.getClickedBlock().getLocation());
  if (manager.isPlotWorld(player)) {
    if (!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE) && !manager.isPlayerIgnoringWELimit(player) && (event.getAction() == Action.LEFT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_BLOCK)&& event.getItem() != null && event.getItem().getType() != Material.AIR) {
      PlotId id=manager.getPlotId(location);
      Plot plot=manager.getMap(location).getPlot(id);
      if (plot != null && plot.isAllowed(player.getName(),player.getUniqueId())) {
        worldEdit.setMask(player);
      }
 else {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
  }
}"
42058,"public void setSellSign(IWorld world,Plot plot){
  String line1=Util().C(""String_Node_Str"");
  String line2=Util().C(""String_Node_Str"");
  String line3=String.valueOf(plot.getCustomPrice());
  String line4=""String_Node_Str"" + Util().C(""String_Node_Str"");
  getGenManager(world).setSellerDisplay(world,plot.getId(),line1,line2,line3,line4);
}","public void setSellSign(IWorld world,Plot plot){
  String line1=Util().C(""String_Node_Str"");
  String line2=Util().C(""String_Node_Str"");
  String line3=String.valueOf(plot.getCustomPrice());
  String line4=""String_Node_Str"";
  getGenManager(world).setSellerDisplay(world,plot.getId(),line1,line2,line3,line4);
}"
42059,"public boolean exec(ICommandSender sender){
  if (sender.hasPermission(""String_Node_Str"")) {
    serverBridge.getEventFactory().callPlotReloadEvent();
    plugin.reload();
    serverBridge.getLogger().info(C(""String_Node_Str""));
    return true;
  }
 else {
    return false;
  }
}","public boolean exec(ICommandSender sender){
  if (sender.hasPermission(""String_Node_Str"")) {
    serverBridge.getEventFactory().callPlotReloadEvent();
    plugin.reload();
    sender.sendMessage(C(""String_Node_Str""));
    return true;
  }
 else {
    return false;
  }
}"
42060,"public boolean exec(IPlayer player){
  if (player.hasPermission(PermissionNames.ADMIN_RESET) || player.hasPermission(""String_Node_Str"")) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      Plot plot=manager.getPlotById(player,pmi);
      if (plot == null) {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
 else       if (plot.isProtect()) {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
 else {
        String id=plot.getId();
        if (plot.getOwnerId().equals(player.getUniqueId()) || player.hasPermission(PermissionNames.ADMIN_RESET)) {
          InternalPlotResetEvent event=serverBridge.getEventFactory().callPlotResetEvent(plugin,world,plot,player);
          if (!event.isCancelled()) {
            manager.setBiome(world,id,serverBridge.getBiome(""String_Node_Str""));
            manager.clear(world,plot,player,ClearReason.Reset);
            if (manager.isEconomyEnabled(pmi)) {
              if (plot.isAuctioned()) {
                if (plot.getCurrentBidderId() != null) {
                  IOfflinePlayer offlinePlayer=serverBridge.getOfflinePlayer(plot.getCurrentBidderId());
                  EconomyResponse economyResponse=serverBridge.depositPlayer(offlinePlayer,plot.getCurrentBid());
                  if (economyResponse.transactionSuccess()) {
                    player.sendMessage(plot.getCurrentBidder() + ""String_Node_Str"");
                  }
 else {
                    player.sendMessage(economyResponse.errorMessage);
                    serverBridge.getLogger().warning(economyResponse.errorMessage);
                  }
                }
              }
              if (pmi.isRefundClaimPriceOnReset() && plot.getOwnerId() != null) {
                IOfflinePlayer playerowner=serverBridge.getOfflinePlayer(plot.getOwnerId());
                EconomyResponse er=serverBridge.depositPlayer(playerowner,pmi.getClaimPrice());
                if (er.transactionSuccess()) {
                  IPlayer playerOwner=serverBridge.getPlayer(playerowner.getUniqueId());
                  if (playerOwner.getName().equalsIgnoreCase(plot.getOwner())) {
                    playerOwner.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ Util().moneyFormat(pmi.getClaimPrice(),true));
                  }
                }
 else {
                  player.sendMessage(""String_Node_Str"" + er.errorMessage);
                  serverBridge.getLogger().warning(er.errorMessage);
                  return true;
                }
              }
            }
            if (!manager.isPlotAvailable(id,pmi)) {
              manager.removePlot(pmi,id);
            }
            manager.removeOwnerSign(world,id);
            manager.removeSellSign(world,id);
            plugin.getSqlManager().deletePlot(manager.getIdX(id),manager.getIdZ(id),world.getName());
            if (isAdvancedLogging()) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}","public boolean exec(IPlayer player){
  if (player.hasPermission(PermissionNames.ADMIN_RESET) || player.hasPermission(""String_Node_Str"")) {
    IWorld world=player.getWorld();
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isPlotWorld(world)) {
      Plot plot=manager.getPlotById(player,pmi);
      if (plot == null) {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
 else       if (plot.isProtect()) {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
 else {
        String id=plot.getId();
        if (plot.getOwnerId().equals(player.getUniqueId()) || player.hasPermission(PermissionNames.ADMIN_RESET)) {
          InternalPlotResetEvent event=serverBridge.getEventFactory().callPlotResetEvent(plugin,world,plot,player);
          if (!event.isCancelled()) {
            manager.setBiome(world,id,serverBridge.getBiome(""String_Node_Str""));
            manager.clear(world,plot,player,ClearReason.Reset);
            if (manager.isEconomyEnabled(pmi)) {
              if (plot.isAuctioned()) {
                if (plot.getCurrentBidderId() != null) {
                  IOfflinePlayer offlinePlayer=serverBridge.getOfflinePlayer(plot.getCurrentBidderId());
                  EconomyResponse economyResponse=serverBridge.depositPlayer(offlinePlayer,plot.getCurrentBid());
                  if (economyResponse.transactionSuccess()) {
                    player.sendMessage(plot.getCurrentBidder() + ""String_Node_Str"");
                  }
 else {
                    player.sendMessage(economyResponse.errorMessage);
                    serverBridge.getLogger().warning(economyResponse.errorMessage);
                  }
                }
              }
              if (pmi.isRefundClaimPriceOnReset() && plot.getOwnerId() != null) {
                IOfflinePlayer playerowner=serverBridge.getOfflinePlayer(plot.getOwnerId());
                EconomyResponse er=serverBridge.depositPlayer(playerowner,pmi.getClaimPrice());
                if (er.transactionSuccess()) {
                  IPlayer playerOwner=serverBridge.getPlayer(playerowner.getUniqueId());
                  if (playerOwner.getName().equalsIgnoreCase(plot.getOwner())) {
                    playerOwner.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ Util().moneyFormat(pmi.getClaimPrice(),true));
                  }
                }
 else {
                  player.sendMessage(""String_Node_Str"" + er.errorMessage);
                  serverBridge.getLogger().warning(er.errorMessage);
                  return true;
                }
              }
            }
            if (!manager.isPlotAvailable(id,pmi)) {
              manager.removePlot(pmi,id);
            }
            manager.removeOwnerSign(world,id);
            manager.removeSellSign(world,id);
            manager.removeAuctionSign(world,id);
            plugin.getSqlManager().deletePlot(manager.getIdX(id),manager.getIdZ(id),world.getName());
            if (isAdvancedLogging()) {
              serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}"
42061,"public boolean movePlot(IWorld world,String idFrom,String idTo){
  if (!getGenManager(world).movePlot(world,idFrom,idTo)) {
    return false;
  }
  Plot plot1=getPlotById(idFrom,world);
  Plot plot2=getPlotById(idTo,world);
  if (plot1 != null) {
    if (plot2 != null) {
      int idX=getIdX(idTo);
      int idZ=getIdZ(idTo);
      plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
      removePlot(world,idFrom);
      removePlot(world,idTo);
      idX=getIdX(idFrom);
      idZ=getIdZ(idFrom);
      plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
      plot2.setId(idFrom);
      plugin.getSqlManager().addPlot(plot2,idX,idZ,topX(idFrom,world),bottomX(idFrom,world),topZ(idFrom,world),bottomZ(idFrom,world));
      addPlot(world,idFrom,plot2);
      HashMap<String,UUID> allowed=plot2.allowed().getAllPlayers();
      for (      String player : allowed.keySet()) {
        plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
      }
      HashMap<String,UUID> denied=plot2.denied().getAllPlayers();
      for (      String player : denied.keySet()) {
        plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
      }
      idX=getIdX(idTo);
      idZ=getIdZ(idTo);
      plot1.setId(idTo);
      plugin.getSqlManager().addPlot(plot1,idX,idZ,topX(idTo,world),bottomX(idTo,world),topZ(idTo,world),bottomZ(idTo,world));
      addPlot(world,idTo,plot1);
      allowed=plot1.allowed().getAllPlayers();
      for (      String player : allowed.keySet()) {
        plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
      }
      denied=plot1.denied().getAllPlayers();
      for (      String player : denied.keySet()) {
        plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
      }
      setOwnerSign(world,plot1);
      setSellSign(world,plot1);
      setOwnerSign(world,plot2);
      setSellSign(world,plot2);
    }
  }
 else   if (plot2 != null) {
    int idX=getIdX(idTo);
    int idZ=getIdZ(idTo);
    plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
    removePlot(world,idTo);
    idX=getIdX(idFrom);
    idZ=getIdZ(idFrom);
    plot2.setId(idFrom);
    plugin.getSqlManager().addPlot(plot2,idX,idZ,topX(idFrom,world),bottomX(idFrom,world),topZ(idFrom,world),bottomZ(idFrom,world));
    addPlot(world,idFrom,plot2);
    HashMap<String,UUID> allowed=plot2.allowed().getAllPlayers();
    for (    String player : allowed.keySet()) {
      plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
    }
    HashMap<String,UUID> denied=plot2.denied().getAllPlayers();
    for (    String player : denied.keySet()) {
      plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
    }
    setOwnerSign(world,plot2);
    setSellSign(world,plot2);
    removeOwnerSign(world,idTo);
    getGenManager(world).removeSellerDisplay(world,idTo);
  }
  return true;
}","public boolean movePlot(IWorld world,String idFrom,String idTo){
  if (!getGenManager(world).movePlot(world,idFrom,idTo)) {
    return false;
  }
  Plot plot1=getPlotById(idFrom,world);
  Plot plot2=getPlotById(idTo,world);
  if (plot1 != null) {
    if (plot2 != null) {
      int idX=getIdX(idTo);
      int idZ=getIdZ(idTo);
      plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
      removePlot(world,idFrom);
      removePlot(world,idTo);
      idX=getIdX(idFrom);
      idZ=getIdZ(idFrom);
      plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
      plot2.setId(idFrom);
      plugin.getSqlManager().addPlot(plot2,idX,idZ,topX(idFrom,world),bottomX(idFrom,world),topZ(idFrom,world),bottomZ(idFrom,world));
      addPlot(world,idFrom,plot2);
      HashMap<String,UUID> allowed=plot2.allowed().getAllPlayers();
      for (      String player : allowed.keySet()) {
        plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
      }
      HashMap<String,UUID> denied=plot2.denied().getAllPlayers();
      for (      String player : denied.keySet()) {
        plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
      }
      idX=getIdX(idTo);
      idZ=getIdZ(idTo);
      plot1.setId(idTo);
      plugin.getSqlManager().addPlot(plot1,idX,idZ,topX(idTo,world),bottomX(idTo,world),topZ(idTo,world),bottomZ(idTo,world));
      addPlot(world,idTo,plot1);
      allowed=plot1.allowed().getAllPlayers();
      for (      String player : allowed.keySet()) {
        plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
      }
      denied=plot1.denied().getAllPlayers();
      for (      String player : denied.keySet()) {
        plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
      }
      setOwnerSign(world,plot1);
      removeSellSign(world,plot1.getId());
      removeAuctionSign(world,plot1.getId());
      setOwnerSign(world,plot2);
      removeSellSign(world,plot2.getId());
      removeAuctionSign(world,plot2.getId());
    }
  }
 else   if (plot2 != null) {
    int idX=getIdX(idTo);
    int idZ=getIdZ(idTo);
    plugin.getSqlManager().deletePlot(idX,idZ,world.getName());
    removePlot(world,idTo);
    idX=getIdX(idFrom);
    idZ=getIdZ(idFrom);
    plot2.setId(idFrom);
    plugin.getSqlManager().addPlot(plot2,idX,idZ,topX(idFrom,world),bottomX(idFrom,world),topZ(idFrom,world),bottomZ(idFrom,world));
    addPlot(world,idFrom,plot2);
    HashMap<String,UUID> allowed=plot2.allowed().getAllPlayers();
    for (    String player : allowed.keySet()) {
      plugin.getSqlManager().addPlotAllowed(player,allowed.get(player),idX,idZ,world.getName());
    }
    HashMap<String,UUID> denied=plot2.denied().getAllPlayers();
    for (    String player : denied.keySet()) {
      plugin.getSqlManager().addPlotDenied(player,denied.get(player),idX,idZ,world.getName());
    }
    setOwnerSign(world,plot2);
    setSellSign(world,plot2);
    removeOwnerSign(world,idTo);
    removeSellSign(world,idTo);
    removeAuctionSign(world,idTo);
  }
  return true;
}"
42062,"public boolean exec(IPlayer player,String[] args){
  IWorld world=player.getWorld();
  PlotMapInfo pmi=manager.getMap(world);
  if (manager.isPlotWorld(world)) {
    if (manager.isEconomyEnabled(pmi)) {
      if (pmi.isCanPutOnSale()) {
        if (player.hasPermission(PermissionNames.USE_AUCTION) || player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
          String id=manager.getPlotId(player);
          if (id.isEmpty()) {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
 else           if (!manager.isPlotAvailable(id,pmi)) {
            Plot plot=manager.getPlotById(id,pmi);
            String name=player.getName();
            if (plot.getOwner().equalsIgnoreCase(name) || player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
              if (plot.isAuctioned()) {
                if (plot.getCurrentBidderId() != null) {
                  if (player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
                    IOfflinePlayer currentBidder=serverBridge.getOfflinePlayer(plot.getCurrentBidderId());
                    EconomyResponse er=serverBridge.depositPlayer(currentBidder,plot.getCurrentBid());
                    if (er.transactionSuccess()) {
                      for (                      IPlayer onlinePlayers : serverBridge.getOnlinePlayers()) {
                        if (onlinePlayers.getName().equalsIgnoreCase(plot.getCurrentBidder())) {
                          onlinePlayers.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ Util().moneyFormat(plot.getCurrentBid(),true));
                          break;
                        }
                      }
                    }
 else {
                      player.sendMessage(""String_Node_Str"" + er.errorMessage);
                      serverBridge.getLogger().warning(er.errorMessage);
                    }
                    plot.setAuctioned(false);
                    manager.adjustWall(player);
                    manager.removeAuctionSign(world,id);
                    plot.setCurrentBid(0.0);
                    plot.setCurrentBidder(null);
                    plot.updateField(""String_Node_Str"",0);
                    plot.updateField(""String_Node_Str"",null);
                    plot.updateField(""String_Node_Str"",null);
                    plot.updateField(""String_Node_Str"",false);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                    }
                  }
 else {
                    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                  }
                }
 else {
                  plot.setAuctioned(false);
                  manager.adjustWall(player);
                  manager.removeAuctionSign(world,id);
                  plot.setCurrentBid(0.0);
                  plot.setCurrentBidder(null);
                  plot.updateField(""String_Node_Str"",0);
                  plot.updateField(""String_Node_Str"",null);
                  plot.updateField(""String_Node_Str"",null);
                  plot.updateField(""String_Node_Str"",false);
                  player.sendMessage(C(""String_Node_Str""));
                  if (isAdvancedLogging()) {
                    serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                  }
                }
              }
 else {
                double bid=1.0;
                if (args.length == 2) {
                  bid=Double.parseDouble(args[1]);
                }
                if (bid < 0.0) {
                  player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                }
 else {
                  InternalPlotAuctionEvent event=serverBridge.getEventFactory().callPlotAuctionEvent(plugin,world,plot,player,bid);
                  if (!event.isCancelled()) {
                    plot.setCurrentBid(bid);
                    plot.setAuctioned(true);
                    manager.adjustWall(player);
                    manager.setAuctionSign(world,plot);
                    plot.updateField(""String_Node_Str"",bid);
                    plot.updateField(""String_Node_Str"",true);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ bid);
                    }
                  }
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
            }
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          return false;
        }
      }
 else {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
  return true;
}","public boolean exec(IPlayer player,String[] args){
  IWorld world=player.getWorld();
  PlotMapInfo pmi=manager.getMap(world);
  if (manager.isPlotWorld(world)) {
    if (manager.isEconomyEnabled(pmi)) {
      if (pmi.isCanPutOnSale()) {
        if (player.hasPermission(PermissionNames.USE_AUCTION) || player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
          String id=manager.getPlotId(player);
          if (id.isEmpty()) {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
 else           if (!manager.isPlotAvailable(id,pmi)) {
            Plot plot=manager.getPlotById(id,pmi);
            if (plot.isForSale()) {
              player.sendMessage(C(""String_Node_Str""));
              return true;
            }
            String name=player.getName();
            if (plot.getOwner().equalsIgnoreCase(name) || player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
              if (plot.isAuctioned()) {
                if (plot.getCurrentBidderId() != null) {
                  if (player.hasPermission(PermissionNames.ADMIN_AUCTION)) {
                    IOfflinePlayer currentBidder=serverBridge.getOfflinePlayer(plot.getCurrentBidderId());
                    EconomyResponse er=serverBridge.depositPlayer(currentBidder,plot.getCurrentBid());
                    if (er.transactionSuccess()) {
                      for (                      IPlayer onlinePlayers : serverBridge.getOnlinePlayers()) {
                        if (onlinePlayers.getName().equalsIgnoreCase(plot.getCurrentBidder())) {
                          onlinePlayers.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot.getOwner()+ ""String_Node_Str""+ Util().moneyFormat(plot.getCurrentBid(),true));
                          break;
                        }
                      }
                    }
 else {
                      player.sendMessage(""String_Node_Str"" + er.errorMessage);
                      serverBridge.getLogger().warning(er.errorMessage);
                    }
                    plot.setAuctioned(false);
                    manager.adjustWall(player);
                    manager.removeAuctionSign(world,id);
                    plot.setCurrentBid(0.0);
                    plot.setCurrentBidder(null);
                    plot.updateField(""String_Node_Str"",0);
                    plot.updateField(""String_Node_Str"",null);
                    plot.updateField(""String_Node_Str"",null);
                    plot.updateField(""String_Node_Str"",false);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                    }
                  }
 else {
                    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                  }
                }
 else {
                  plot.setAuctioned(false);
                  manager.adjustWall(player);
                  manager.removeAuctionSign(world,id);
                  plot.setCurrentBid(0.0);
                  plot.setCurrentBidder(null);
                  plot.updateField(""String_Node_Str"",0);
                  plot.updateField(""String_Node_Str"",null);
                  plot.updateField(""String_Node_Str"",null);
                  plot.updateField(""String_Node_Str"",false);
                  player.sendMessage(C(""String_Node_Str""));
                  if (isAdvancedLogging()) {
                    serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id);
                  }
                }
              }
 else {
                double bid=1.0;
                if (args.length == 2) {
                  bid=Double.parseDouble(args[1]);
                }
                if (bid < 0.0) {
                  player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                }
 else {
                  InternalPlotAuctionEvent event=serverBridge.getEventFactory().callPlotAuctionEvent(plugin,world,plot,player,bid);
                  if (!event.isCancelled()) {
                    plot.setCurrentBid(bid);
                    plot.setAuctioned(true);
                    manager.adjustWall(player);
                    manager.setAuctionSign(world,plot);
                    plot.updateField(""String_Node_Str"",bid);
                    plot.updateField(""String_Node_Str"",true);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(name + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ bid);
                    }
                  }
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
            }
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          return false;
        }
      }
 else {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
  return true;
}"
42063,"public boolean exec(IPlayer player,String[] args){
  if (player.hasPermission(PermissionNames.ADMIN_MOVE)) {
    if (!manager.isPlotWorld(player)) {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
 else     if (args.length < 3 || args[1].isEmpty() || args[2].isEmpty()) {
      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
    }
 else {
      String plot1=args[1];
      String plot2=args[2];
      IWorld world=player.getWorld();
      if (!manager.isValidId(world,plot1) || !manager.isValidId(world,plot2)) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
      }
 else {
        InternalPlotMoveEvent event=serverBridge.getEventFactory().callPlotMoveEvent(plugin,world,plot1,plot2,player);
        if (!event.isCancelled()) {
          if (manager.movePlot(world,plot1,plot2)) {
            player.sendMessage(C(""String_Node_Str""));
            serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ plot1+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot2);
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
        }
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}","public boolean exec(IPlayer player,String[] args){
  if (player.hasPermission(PermissionNames.ADMIN_MOVE)) {
    if (!manager.isPlotWorld(player)) {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
 else     if (args.length < 3 || args[1].isEmpty() || args[2].isEmpty()) {
      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
    }
 else {
      String plot1=args[1];
      String plot2=args[2];
      if (plot1.equals(plot2)) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
      }
      IWorld world=player.getWorld();
      if (!manager.isValidId(world,plot1) || !manager.isValidId(world,plot2)) {
        player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
      }
 else {
        InternalPlotMoveEvent event=serverBridge.getEventFactory().callPlotMoveEvent(plugin,world,plot1,plot2,player);
        if (!event.isCancelled()) {
          if (manager.movePlot(world,plot1,plot2)) {
            player.sendMessage(C(""String_Node_Str""));
            serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ plot1+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ plot2);
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
        }
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}"
42064,"public boolean exec(IPlayer player,String[] args){
  IWorld world=player.getWorld();
  if (manager.isPlotWorld(world)) {
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isEconomyEnabled(pmi)) {
      if (pmi.isCanPutOnSale()) {
        if (player.hasPermission(PermissionNames.USER_SELL) || player.hasPermission(PermissionNames.ADMIN_SELL)) {
          String id=manager.getPlotId(player);
          if (id.isEmpty()) {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
 else           if (!manager.isPlotAvailable(id,pmi)) {
            Plot plot=manager.getPlotById(id,pmi);
            if (plot.getOwnerId().equals(player.getUniqueId()) || player.hasPermission(PermissionNames.ADMIN_SELL)) {
              InternalPlotSellChangeEvent event;
              if (plot.isForSale()) {
                event=serverBridge.getEventFactory().callPlotSellChangeEvent(plugin,world,plot,player,plot.getCustomPrice(),false);
                if (!event.isCancelled()) {
                  plot.setCustomPrice(0.0);
                  plot.setForSale(false);
                  plot.updateField(""String_Node_Str"",0);
                  plot.updateField(""String_Node_Str"",false);
                  manager.adjustWall(player);
                  manager.removeSellSign(world,id);
                  player.sendMessage(C(""String_Node_Str""));
                  if (isAdvancedLogging()) {
                    serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
                  }
                }
              }
 else {
                double price=pmi.getSellToPlayerPrice();
                if (args.length == 2) {
                  try {
                    price=Double.parseDouble(args[1]);
                  }
 catch (                  Exception e) {
                    player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
                    return true;
                  }
                }
                if (price < 0.0) {
                  player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                }
 else {
                  event=serverBridge.getEventFactory().callPlotSellChangeEvent(plugin,world,plot,player,price,true);
                  if (!event.isCancelled()) {
                    plot.setCustomPrice(price);
                    plot.setForSale(true);
                    plot.updateField(""String_Node_Str"",price);
                    plot.updateField(""String_Node_Str"",true);
                    manager.adjustWall(player);
                    manager.setSellSign(world,plot);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ price);
                    }
                  }
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
            }
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          return false;
        }
      }
 else {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
  return true;
}","public boolean exec(IPlayer player,String[] args){
  IWorld world=player.getWorld();
  if (manager.isPlotWorld(world)) {
    PlotMapInfo pmi=manager.getMap(world);
    if (manager.isEconomyEnabled(pmi)) {
      if (pmi.isCanPutOnSale()) {
        if (player.hasPermission(PermissionNames.USER_SELL) || player.hasPermission(PermissionNames.ADMIN_SELL)) {
          String id=manager.getPlotId(player);
          if (id.isEmpty()) {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          }
 else           if (!manager.isPlotAvailable(id,pmi)) {
            Plot plot=manager.getPlotById(id,pmi);
            if (plot.isAuctioned()) {
              player.sendMessage(C(""String_Node_Str""));
              return true;
            }
            if (plot.getOwnerId().equals(player.getUniqueId()) || player.hasPermission(PermissionNames.ADMIN_SELL)) {
              InternalPlotSellChangeEvent event;
              if (plot.isForSale()) {
                event=serverBridge.getEventFactory().callPlotSellChangeEvent(plugin,world,plot,player,plot.getCustomPrice(),false);
                if (!event.isCancelled()) {
                  plot.setCustomPrice(0.0);
                  plot.setForSale(false);
                  plot.updateField(""String_Node_Str"",0);
                  plot.updateField(""String_Node_Str"",false);
                  manager.adjustWall(player);
                  manager.removeSellSign(world,id);
                  player.sendMessage(C(""String_Node_Str""));
                  if (isAdvancedLogging()) {
                    serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
                  }
                }
              }
 else {
                double price=pmi.getSellToPlayerPrice();
                if (args.length == 2) {
                  try {
                    price=Double.parseDouble(args[1]);
                  }
 catch (                  Exception e) {
                    player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str"");
                    return true;
                  }
                }
                if (price < 0.0) {
                  player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
                }
 else {
                  event=serverBridge.getEventFactory().callPlotSellChangeEvent(plugin,world,plot,player,price,true);
                  if (!event.isCancelled()) {
                    plot.setCustomPrice(price);
                    plot.setForSale(true);
                    plot.updateField(""String_Node_Str"",price);
                    plot.updateField(""String_Node_Str"",true);
                    manager.adjustWall(player);
                    manager.setSellSign(world,plot);
                    player.sendMessage(C(""String_Node_Str""));
                    if (isAdvancedLogging()) {
                      serverBridge.getLogger().info(player.getName() + ""String_Node_Str"" + C(""String_Node_Str"")+ ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str"")+ ""String_Node_Str""+ price);
                    }
                  }
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
            }
          }
 else {
            player.sendMessage(""String_Node_Str"" + C(""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ C(""String_Node_Str""));
          }
        }
 else {
          player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
          return false;
        }
      }
 else {
        player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    }
  }
  return true;
}"
42065,"/** 
 * Get plots where the player is allowed or owns.
 * @param playername
 * @param playerId
 * @param world
 * @param ownedonly Only get the plots the player owns
 * @return
 */
private List<Plot> getPlayerPlots(String playername,UUID playerId,String world,boolean ownedonly){
  List<Plot> ret=new ArrayList<>();
  PreparedStatement statementPlot=null;
  PreparedStatement statementAllowed=null;
  PreparedStatement statementDenied=null;
  ResultSet setPlots=null;
  try {
    Connection conn=getConnection();
    String query=""String_Node_Str"";
    if (ownedonly) {
      query+=""String_Node_Str"";
    }
 else {
      query+=""String_Node_Str"";
    }
    query+=""String_Node_Str"";
    if (playerId == null) {
      if (ownedonly) {
        query+=""String_Node_Str"";
      }
 else {
        query+=""String_Node_Str"";
      }
    }
 else {
      if (ownedonly) {
        query+=""String_Node_Str"";
      }
 else {
        query+=""String_Node_Str"";
      }
    }
    if (!world.isEmpty()) {
      query+=""String_Node_Str"";
    }
    statementPlot=conn.prepareStatement(query);
    if (playerId == null) {
      statementPlot.setString(1,playername);
      if (!ownedonly) {
        statementPlot.setString(2,playername);
        if (!world.isEmpty()) {
          statementPlot.setString(3,world);
        }
      }
 else       if (!world.isEmpty()) {
        statementPlot.setString(2,world);
      }
    }
 else {
      statementPlot.setBytes(1,UUIDFetcher.toBytes(playerId));
      if (!ownedonly) {
        statementPlot.setBytes(2,UUIDFetcher.toBytes(playerId));
        if (!world.isEmpty()) {
          statementPlot.setString(3,world);
        }
      }
 else       if (!world.isEmpty()) {
        statementPlot.setString(2,world);
      }
    }
    setPlots=statementPlot.executeQuery();
    while (setPlots.next()) {
      int idX=setPlots.getInt(""String_Node_Str"");
      int idZ=setPlots.getInt(""String_Node_Str"");
      String biome=setPlots.getString(""String_Node_Str"");
      Date expireddate=null;
      try {
        expireddate=setPlots.getDate(""String_Node_Str"");
      }
 catch (      SQLException ignored) {
      }
      boolean finished=setPlots.getBoolean(""String_Node_Str"");
      PlayerList allowed=new PlayerList();
      PlayerList denied=new PlayerList();
      double customprice=setPlots.getDouble(""String_Node_Str"");
      boolean forsale=setPlots.getBoolean(""String_Node_Str"");
      String finisheddate=setPlots.getString(""String_Node_Str"");
      boolean protect=setPlots.getBoolean(""String_Node_Str"");
      String currentbidder=setPlots.getString(""String_Node_Str"");
      double currentbid=setPlots.getDouble(""String_Node_Str"");
      boolean auctionned=setPlots.getBoolean(""String_Node_Str"");
      String currworld=setPlots.getString(""String_Node_Str"");
      String owner=setPlots.getString(""String_Node_Str"");
      byte[] byBidder=setPlots.getBytes(""String_Node_Str"");
      byte[] byOwner=setPlots.getBytes(""String_Node_Str"");
      UUID currentbidderid=null;
      if (byBidder != null) {
        currentbidderid=UUIDFetcher.fromBytes(byBidder);
      }
      UUID ownerId=null;
      if (byOwner != null) {
        ownerId=UUIDFetcher.fromBytes(byOwner);
      }
      statementAllowed=conn.prepareStatement(""String_Node_Str"");
      statementAllowed.setString(1,currworld);
      statementAllowed.setInt(2,idX);
      statementAllowed.setInt(3,idZ);
      ResultSet setAllowed=statementAllowed.executeQuery();
      while (setAllowed.next()) {
        byte[] byPlayerId=setAllowed.getBytes(""String_Node_Str"");
        if (byPlayerId == null) {
          allowed.put(setAllowed.getString(""String_Node_Str""));
        }
 else {
          allowed.put(setAllowed.getString(""String_Node_Str""),UUIDFetcher.fromBytes(byPlayerId));
        }
      }
      setAllowed.close();
      statementDenied=conn.prepareStatement(""String_Node_Str"");
      statementDenied.setString(1,currworld);
      statementDenied.setInt(2,idX);
      statementDenied.setInt(3,idZ);
      ResultSet setDenied=statementDenied.executeQuery();
      while (setDenied.next()) {
        byte[] byPlayerId=setDenied.getBytes(""String_Node_Str"");
        if (byPlayerId == null) {
          denied.put(setDenied.getString(""String_Node_Str""));
        }
 else {
          denied.put(setDenied.getString(""String_Node_Str""),UUIDFetcher.fromBytes(byPlayerId));
        }
      }
      setDenied.close();
      Plot plot=new Plot(plugin,owner,ownerId,currworld,biome,expireddate,finished,allowed,idX + ""String_Node_Str"" + idZ,customprice,forsale,finisheddate,protect,currentbidder,currentbidderid,currentbid,auctionned,denied);
      ret.add(plot);
    }
  }
 catch (  SQLException ex) {
    plugin.getLogger().severe(""String_Node_Str"");
    plugin.getLogger().severe(ex.getMessage());
  }
 finally {
    try {
      if (statementPlot != null) {
        statementPlot.close();
      }
      if (statementAllowed != null) {
        statementAllowed.close();
      }
      if (statementDenied != null) {
        statementDenied.close();
      }
      if (setPlots != null) {
        setPlots.close();
      }
    }
 catch (    SQLException ex) {
      plugin.getLogger().severe(""String_Node_Str"");
      plugin.getLogger().severe(ex.getMessage());
    }
  }
  return ret;
}","/** 
 * Get plots where the player is allowed or owns.
 * @param playername
 * @param playerId
 * @param world
 * @param ownedonly Only get the plots the player owns
 * @return
 */
private List<Plot> getPlayerPlots(String playername,UUID playerId,String world,boolean ownedonly){
  List<Plot> ret=new ArrayList<>();
  PreparedStatement statementPlot=null;
  PreparedStatement statementAllowed=null;
  PreparedStatement statementDenied=null;
  ResultSet setPlots=null;
  try {
    Connection conn=getConnection();
    String query=""String_Node_Str"";
    if (ownedonly) {
      query+=""String_Node_Str"";
    }
 else {
      query+=""String_Node_Str"";
    }
    query+=""String_Node_Str"";
    if (playerId == null) {
      if (ownedonly) {
        query+=""String_Node_Str"";
      }
 else {
        query+=""String_Node_Str"";
      }
    }
 else {
      if (ownedonly) {
        query+=""String_Node_Str"";
      }
 else {
        query+=""String_Node_Str"";
      }
    }
    if (!world.isEmpty()) {
      query+=""String_Node_Str"";
    }
    statementPlot=conn.prepareStatement(query);
    if (playerId == null) {
      statementPlot.setString(1,playername);
      if (!ownedonly) {
        statementPlot.setString(2,playername);
        if (!world.isEmpty()) {
          statementPlot.setString(3,world.toLowerCase());
        }
      }
 else       if (!world.isEmpty()) {
        statementPlot.setString(2,world.toLowerCase());
      }
    }
 else {
      statementPlot.setBytes(1,UUIDFetcher.toBytes(playerId));
      if (!ownedonly) {
        statementPlot.setBytes(2,UUIDFetcher.toBytes(playerId));
        if (!world.isEmpty()) {
          statementPlot.setString(3,world.toLowerCase());
        }
      }
 else       if (!world.isEmpty()) {
        statementPlot.setString(2,world.toLowerCase());
      }
    }
    setPlots=statementPlot.executeQuery();
    while (setPlots.next()) {
      int idX=setPlots.getInt(""String_Node_Str"");
      int idZ=setPlots.getInt(""String_Node_Str"");
      String biome=setPlots.getString(""String_Node_Str"");
      Date expireddate=null;
      try {
        expireddate=setPlots.getDate(""String_Node_Str"");
      }
 catch (      SQLException ignored) {
      }
      boolean finished=setPlots.getBoolean(""String_Node_Str"");
      PlayerList allowed=new PlayerList();
      PlayerList denied=new PlayerList();
      double customprice=setPlots.getDouble(""String_Node_Str"");
      boolean forsale=setPlots.getBoolean(""String_Node_Str"");
      String finisheddate=setPlots.getString(""String_Node_Str"");
      boolean protect=setPlots.getBoolean(""String_Node_Str"");
      String currentbidder=setPlots.getString(""String_Node_Str"");
      double currentbid=setPlots.getDouble(""String_Node_Str"");
      boolean auctionned=setPlots.getBoolean(""String_Node_Str"");
      String currworld=setPlots.getString(""String_Node_Str"");
      String owner=setPlots.getString(""String_Node_Str"");
      byte[] byBidder=setPlots.getBytes(""String_Node_Str"");
      byte[] byOwner=setPlots.getBytes(""String_Node_Str"");
      UUID currentbidderid=null;
      if (byBidder != null) {
        currentbidderid=UUIDFetcher.fromBytes(byBidder);
      }
      UUID ownerId=null;
      if (byOwner != null) {
        ownerId=UUIDFetcher.fromBytes(byOwner);
      }
      statementAllowed=conn.prepareStatement(""String_Node_Str"");
      statementAllowed.setString(1,currworld.toLowerCase());
      statementAllowed.setInt(2,idX);
      statementAllowed.setInt(3,idZ);
      ResultSet setAllowed=statementAllowed.executeQuery();
      while (setAllowed.next()) {
        byte[] byPlayerId=setAllowed.getBytes(""String_Node_Str"");
        if (byPlayerId == null) {
          allowed.put(setAllowed.getString(""String_Node_Str""));
        }
 else {
          allowed.put(setAllowed.getString(""String_Node_Str""),UUIDFetcher.fromBytes(byPlayerId));
        }
      }
      setAllowed.close();
      statementDenied=conn.prepareStatement(""String_Node_Str"");
      statementDenied.setString(1,currworld.toLowerCase());
      statementDenied.setInt(2,idX);
      statementDenied.setInt(3,idZ);
      ResultSet setDenied=statementDenied.executeQuery();
      while (setDenied.next()) {
        byte[] byPlayerId=setDenied.getBytes(""String_Node_Str"");
        if (byPlayerId == null) {
          denied.put(setDenied.getString(""String_Node_Str""));
        }
 else {
          denied.put(setDenied.getString(""String_Node_Str""),UUIDFetcher.fromBytes(byPlayerId));
        }
      }
      setDenied.close();
      Plot plot=new Plot(plugin,owner,ownerId,currworld,biome,expireddate,finished,allowed,idX + ""String_Node_Str"" + idZ,customprice,forsale,finisheddate,protect,currentbidder,currentbidderid,currentbid,auctionned,denied);
      ret.add(plot);
    }
  }
 catch (  SQLException ex) {
    plugin.getLogger().severe(""String_Node_Str"");
    plugin.getLogger().severe(ex.getMessage());
  }
 finally {
    try {
      if (statementPlot != null) {
        statementPlot.close();
      }
      if (statementAllowed != null) {
        statementAllowed.close();
      }
      if (statementDenied != null) {
        statementDenied.close();
      }
      if (setPlots != null) {
        setPlots.close();
      }
    }
 catch (    SQLException ex) {
      plugin.getLogger().severe(""String_Node_Str"");
      plugin.getLogger().severe(ex.getMessage());
    }
  }
  return ret;
}"
42066,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockIgnite(BlockIgniteEvent event){
  if (event.getIgnitingEntity() == null) {
    return;
  }
  BukkitEntity entity=new BukkitEntity(event.getIgnitingEntity());
  PlotMapInfo pmi=manager.getMap(entity);
  if (pmi == null) {
    return;
  }
  if (pmi.isDisableIgnition()) {
    event.setCancelled(true);
  }
 else {
    String id=manager.getPlotId(entity.getLocation());
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(entity.getWorld().getName(),id);
      Player player=null;
      if (ptc != null) {
        if (event.getPlayer() != null) {
          player=event.getPlayer();
switch (ptc.getReason()) {
case Clear:
            player.sendMessage(api.getUtil().C(""String_Node_Str""));
          break;
case Reset:
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
      break;
case Expired:
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  break;
}
}
event.setCancelled(true);
}
 else {
if (event.getPlayer() != null) {
player=event.getPlayer();
}
Plot plot=manager.getPlotById(id,pmi);
if (plot == null) {
event.setCancelled(true);
}
 else {
if (player != null && !plot.isAllowed(player.getName(),player.getUniqueId())) {
event.setCancelled(true);
}
}
}
}
}
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockIgnite(BlockIgniteEvent event){
  if (event.getIgnitingEntity() == null) {
    return;
  }
  BukkitLocation location=new BukkitLocation(event.getBlock().getLocation());
  PlotMapInfo pmi=manager.getMap(location);
  if (pmi == null) {
    return;
  }
  if (pmi.isDisableIgnition()) {
    event.setCancelled(true);
  }
 else {
    String id=manager.getPlotId(location);
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(location.getWorld().getName(),id);
      Player player=null;
      if (ptc != null) {
        if (event.getPlayer() != null) {
          player=event.getPlayer();
switch (ptc.getReason()) {
case Clear:
            player.sendMessage(api.getUtil().C(""String_Node_Str""));
          break;
case Reset:
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
      break;
case Expired:
    player.sendMessage(api.getUtil().C(""String_Node_Str""));
  break;
}
}
event.setCancelled(true);
}
 else {
if (event.getPlayer() != null) {
player=event.getPlayer();
}
Plot plot=manager.getPlotById(id,pmi);
if (plot == null) {
event.setCancelled(true);
}
 else {
if (player != null && !plot.isAllowed(player.getName(),player.getUniqueId())) {
event.setCancelled(true);
}
}
}
}
}
}"
42067,"/** 
 * Setup PlotMe plugin hooks
 */
@Override public void setupHooks(){
  PluginManager pluginManager=plugin.getServer().getPluginManager();
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    setupEconomy();
  }
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    PlotMe_Core plotMeCore=plugin.getAPI();
    WorldEditPlugin worldEdit=(WorldEditPlugin)pluginManager.getPlugin(""String_Node_Str"");
    PlotWorldEdit we=null;
    try {
      we=new PlotWorldEdit(plotMeCore,worldEdit);
      setPlotWorldEdit(we);
    }
 catch (    SecurityException|IllegalArgumentException unused) {
      getLogger().warning(""String_Node_Str"");
      setPlotWorldEdit(null);
    }
    pluginManager.registerEvents(new BukkitPlotWorldEditListener(we,plugin),plugin);
  }
  setUsingLwc(pluginManager.getPlugin(""String_Node_Str"") != null);
}","/** 
 * Setup PlotMe plugin hooks
 */
@Override public void setupHooks(){
  PluginManager pluginManager=plugin.getServer().getPluginManager();
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    setupEconomy();
  }
  if (pluginManager.getPlugin(""String_Node_Str"") != null) {
    PlotMe_Core plotMeCore=plugin.getAPI();
    WorldEditPlugin worldEdit=(WorldEditPlugin)pluginManager.getPlugin(""String_Node_Str"");
    PlotWorldEdit we=null;
    try {
      we=new PlotWorldEdit(worldEdit);
      setPlotWorldEdit(we);
    }
 catch (    SecurityException|IllegalArgumentException unused) {
      getLogger().warning(""String_Node_Str"");
      setPlotWorldEdit(null);
    }
    pluginManager.registerEvents(new BukkitPlotWorldEditListener(we,plugin),plugin);
  }
  setUsingLwc(pluginManager.getPlugin(""String_Node_Str"") != null);
}"
42068,"@Override public void run(){
  if (getPlotToClear() != null) {
    IWorld world=plugin.getServerBridge().getWorld(getPlotToClear().getWorld());
    PlotMeCoreManager plotMeCoreManager=PlotMeCoreManager.getInstance();
    if (world != null) {
      if (currentClear == null) {
        currentClear=plotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),null);
      }
 else {
        currentClear=plotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),currentClear);
      }
      if (currentClear == null) {
        if (getPlotToClear().getReason() == ClearReason.Clear) {
          plotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),false,false,false,false);
        }
 else {
          plotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),true,false,false,false);
        }
        if (plugin.getServerBridge().getUsingLwc()) {
          plotMeCoreManager.removeLWC(world,getPlotToClear().getPlotId());
        }
        plotMeCoreManager.getGenManager(world).refreshPlotChunks(world,getPlotToClear().getPlotId());
        plottoclear.getRequester().sendMessage(plugin.getUtil().C(""String_Node_Str"") + ""String_Node_Str"" + getPlotToClear().getPlotId()+ ""String_Node_Str""+ plugin.getUtil().C(""String_Node_Str""));
        plugin.removePlotToClear(getPlotToClear(),plugin.getClearTaskID());
        plottoclear=null;
      }
    }
 else {
      plugin.removePlotToClear(getPlotToClear(),plugin.getClearTaskID());
      plottoclear=null;
    }
  }
}","@Override public void run(){
  if (getPlotToClear() != null) {
    IWorld world=plugin.getServerBridge().getWorld(getPlotToClear().getWorld());
    PlotMeCoreManager plotMeCoreManager=PlotMeCoreManager.getInstance();
    if (world != null) {
      if (currentClear == null) {
        currentClear=plotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),null);
      }
 else {
        currentClear=plotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),currentClear);
      }
      if (currentClear == null) {
        if (getPlotToClear().getReason() == ClearReason.Clear) {
          plotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),true,false,false,false);
        }
 else {
          plotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),false,false,false,false);
        }
        if (plugin.getServerBridge().getUsingLwc()) {
          plotMeCoreManager.removeLWC(world,getPlotToClear().getPlotId());
        }
        plotMeCoreManager.getGenManager(world).refreshPlotChunks(world,getPlotToClear().getPlotId());
        plottoclear.getRequester().sendMessage(plugin.getUtil().C(""String_Node_Str"") + ""String_Node_Str"" + getPlotToClear().getPlotId()+ ""String_Node_Str""+ plugin.getUtil().C(""String_Node_Str""));
        plugin.removePlotToClear(getPlotToClear(),plugin.getClearTaskID());
        plottoclear=null;
      }
    }
 else {
      plugin.removePlotToClear(getPlotToClear(),plugin.getClearTaskID());
      plottoclear=null;
    }
  }
}"
42069,"public PlotWorldEdit(PlotMe_Core instance,WorldEditPlugin worldEditPlugin){
  this.worldEdit=worldEditPlugin;
}","public PlotWorldEdit(WorldEditPlugin worldEditPlugin){
  this.worldEdit=worldEditPlugin;
}"
42070,"public boolean exec(IPlayer player,String[] args){
  if (player.hasPermission(""String_Node_Str"")) {
    if (plugin.getPlotMeCoreManager().isPlotWorld(player.getWorld())) {
      return true;
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
}","public boolean exec(IPlayer player,String[] args){
  if (player.hasPermission(""String_Node_Str"")) {
    if (manager.isPlotWorld(player.getWorld())) {
      return true;
    }
 else {
      player.sendMessage(C(""String_Node_Str""));
      return true;
    }
  }
 else {
    return false;
  }
}"
42071,"@EventHandler(priority=EventPriority.HIGH) public void onPlayerMove(PlayerMoveEvent event){
  BukkitPlayer player=(BukkitPlayer)plugin.wrapPlayer(event.getPlayer());
  if (PlotMeCoreManager.getInstance().isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    BukkitLocation to=new BukkitLocation(event.getTo());
    String idTo=manager.getPlotId(to);
    if (!idTo.isEmpty()) {
      Plot plot=manager.getPlotById(idTo,player);
      if (plot != null && plot.isDeniedInternal(player.getName(),player.getUniqueId())) {
        Location t=event.getFrom().clone();
        t.setYaw(event.getTo().getYaw());
        t.setPitch(event.getTo().getPitch());
        event.setTo(t);
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH) public void onPlayerMove(PlayerMoveEvent event){
  BukkitPlayer player=(BukkitPlayer)plugin.wrapPlayer(event.getPlayer());
  if (manager.isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) {
    BukkitLocation to=new BukkitLocation(event.getTo());
    String idTo=manager.getPlotId(to);
    if (!idTo.isEmpty()) {
      Plot plot=manager.getPlotById(idTo,player);
      if (plot != null && plot.isDeniedInternal(player.getName(),player.getUniqueId())) {
        Location t=event.getFrom().clone();
        t.setYaw(event.getTo().getYaw());
        t.setPitch(event.getTo().getPitch());
        event.setTo(t);
      }
    }
  }
}"
42072,"/** 
 * Please do not use this method if you need to create a plotworld
 * @param worldName Name of the Plotworld
 * @param generator PlotMe Generator
 * @param args
 * @return
 */
@Override public boolean createPlotWorld(String worldName,String generator,Map<String,String> args){
  Long seed=new Random().nextLong();
  if (getMultiverse() == null) {
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      setMultiverse((JavaPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str""));
    }
  }
  if (getMultiverse() == null) {
    getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
    return false;
  }
  PlotMapInfo tempPlotInfo=new PlotMapInfo(plugin.getAPI(),worldName);
  tempPlotInfo.setPlotAutoLimit(Integer.parseInt(args.get(""String_Node_Str"")));
  tempPlotInfo.setDaysToExpiration(Integer.parseInt(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisableExplosion(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisableIgnition(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setUseProgressiveClear(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setUseEconomy(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setCanPutOnSale(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setRefundClaimPriceOnReset(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setRefundClaimPriceOnSetOwner(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setClaimPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setClearPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setAddPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setDenyPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setRemovePlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setUndenyPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setPlotHomePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setSellToPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setBiomeChangePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setProtectPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisposePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  plugin.getAPI().getPlotMeCoreManager().addPlotMap(worldName,tempPlotInfo);
  if (getMultiverse() != null) {
    boolean success=false;
    if (getMultiverse().isEnabled()) {
      success=plugin.getServerObjectBuilder().addMultiverseWorld(worldName,""String_Node_Str"",seed.toString(),generator);
      if (!success) {
        getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
      }
    }
 else {
      getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
    }
    return success;
  }
  return false;
}","/** 
 * Please do not use this method if you need to create a plotworld
 * @param worldName Name of the Plotworld
 * @param generator PlotMe Generator
 * @param args
 * @return
 */
@Override public boolean createPlotWorld(String worldName,String generator,Map<String,String> args){
  Long seed=new Random().nextLong();
  if (getMultiverse() == null) {
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      setMultiverse((JavaPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str""));
    }
  }
  if (getMultiverse() == null) {
    getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
    return false;
  }
  PlotMapInfo tempPlotInfo=new PlotMapInfo(plugin.getAPI(),worldName);
  tempPlotInfo.setPlotAutoLimit(Integer.parseInt(args.get(""String_Node_Str"")));
  tempPlotInfo.setDaysToExpiration(Integer.parseInt(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisableExplosion(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisableIgnition(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setUseProgressiveClear(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setUseEconomy(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setCanPutOnSale(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setRefundClaimPriceOnReset(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setRefundClaimPriceOnSetOwner(Boolean.parseBoolean(args.get(""String_Node_Str"")));
  tempPlotInfo.setClaimPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setClearPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setAddPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setDenyPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setRemovePlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setUndenyPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setPlotHomePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setSellToPlayerPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setBiomeChangePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setProtectPrice(Double.parseDouble(args.get(""String_Node_Str"")));
  tempPlotInfo.setDisposePrice(Double.parseDouble(args.get(""String_Node_Str"")));
  plugin.getAPI().getPlotMeCoreManager().addPlotMap(worldName,tempPlotInfo);
  if (getMultiverse() != null) {
    boolean success=false;
    if (getMultiverse().isEnabled()) {
      success=plugin.getServerObjectBuilder().addMultiverseWorld(worldName,seed.toString(),generator);
      if (!success) {
        getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
      }
    }
 else {
      getLogger().info(plugin.getAPI().getUtil().C(""String_Node_Str""));
    }
    return success;
  }
  return false;
}"
42073,"@Override public boolean addMultiverseWorld(String worldName,String environment,String seed,String generator){
  return getMultiverseWrapper().getMVWorldManager().addWorld(worldName,Environment.valueOf(environment),seed,generator);
}","@Override public boolean addMultiverseWorld(String worldName,String seed,String generator){
  return getMultiverseWrapper().getMVWorldManager().addWorld(worldName,seed,generator);
}"
42074,"public boolean addWorld(String name,World.Environment environment,String seedString,String generator){
  return worldManager.addWorld(name,environment,seedString,WorldType.FLAT,false,generator);
}","public boolean addWorld(String name,String seedString,String generator){
  return worldManager.addWorld(name,World.Environment.NORMAL,seedString,WorldType.FLAT,false,generator);
}"
42075,"@Override public void run(){
  if (getPlotToClear() != null) {
    IWorld world=plugin.getServerBridge().getWorld(getPlotToClear().getWorld());
    if (world != null) {
      if (currentClear == null) {
        currentClear=PlotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),null);
      }
 else {
        currentClear=PlotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),currentClear);
      }
      if (currentClear == null) {
        PlotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),true,false,false,false);
        if (plugin.getServerBridge().getUsinglwc()) {
          plugin.getPlotMeCoreManager().removeLWC(world,getPlotToClear().getPlotId());
        }
        PlotMeCoreManager.getGenManager(world).refreshPlotChunks(world,getPlotToClear().getPlotId());
        plottoclear.getRequester().sendMessage(plugin.getUtil().C(""String_Node_Str"") + ""String_Node_Str"" + getPlotToClear().getPlotId()+ ""String_Node_Str""+ plugin.getUtil().C(""String_Node_Str""));
        plugin.removePlotToClear(getPlotToClear(),taskId);
        plottoclear=null;
      }
    }
 else {
      plugin.removePlotToClear(getPlotToClear(),taskId);
      plottoclear=null;
    }
  }
}","@Override public void run(){
  if (getPlotToClear() != null) {
    IWorld world=plugin.getServerBridge().getWorld(getPlotToClear().getWorld());
    if (world != null) {
      if (currentClear == null) {
        currentClear=PlotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),null);
      }
 else {
        currentClear=PlotMeCoreManager.getGenManager(world).clear(world,getPlotToClear().getPlotId(),plugin.getServerBridge().getConfig().getInt(""String_Node_Str""),currentClear);
      }
      if (currentClear == null) {
        if (getPlotToClear().getReason() == ClearReason.Clear) {
          PlotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),false,false,false,false);
        }
 else {
          PlotMeCoreManager.getGenManager(world).adjustPlotFor(world,getPlotToClear().getPlotId(),true,false,false,false);
        }
        if (plugin.getServerBridge().getUsinglwc()) {
          plugin.getPlotMeCoreManager().removeLWC(world,getPlotToClear().getPlotId());
        }
        PlotMeCoreManager.getGenManager(world).refreshPlotChunks(world,getPlotToClear().getPlotId());
        plottoclear.getRequester().sendMessage(plugin.getUtil().C(""String_Node_Str"") + ""String_Node_Str"" + getPlotToClear().getPlotId()+ ""String_Node_Str""+ plugin.getUtil().C(""String_Node_Str""));
        plugin.removePlotToClear(getPlotToClear(),taskId);
        plottoclear=null;
      }
    }
 else {
      plugin.removePlotToClear(getPlotToClear(),taskId);
      plottoclear=null;
    }
  }
}"
42076,"private void setupWorld(String worldname){
  if (getGenManager(worldname) == null) {
    getLogger().log(Level.SEVERE,""String_Node_Str"",worldname);
    getLogger().log(Level.SEVERE,""String_Node_Str"",worldname);
  }
 else {
    PlotMapInfo pmi=new PlotMapInfo(this,worldname);
    IConfigSection config=getServerBridge().loadDefaultConfig(""String_Node_Str"" + worldname);
    config.set(""String_Node_Str"",null);
    config.set(""String_Node_Str"",null);
    plotMeCoreManager.addPlotMap(worldname,pmi);
  }
  if (getPlotMeCoreManager().getPlotMaps().isEmpty()) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
  }
}","private void setupWorld(String worldname){
  if (getGenManager(worldname.toLowerCase()) == null) {
    getLogger().log(Level.SEVERE,""String_Node_Str"",worldname);
    getLogger().log(Level.SEVERE,""String_Node_Str"",worldname);
  }
 else {
    PlotMapInfo pmi=new PlotMapInfo(this,worldname);
    IConfigSection config=getServerBridge().loadDefaultConfig(""String_Node_Str"" + worldname.toLowerCase());
    config.set(""String_Node_Str"",null);
    config.set(""String_Node_Str"",null);
    plotMeCoreManager.addPlotMap(worldname.toLowerCase(),pmi);
  }
  if (getPlotMeCoreManager().getPlotMaps().isEmpty()) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
  }
}"
42077,"public static IPlotMe_GeneratorManager getGenManager(String name){
  return managers.get(name);
}","public static IPlotMe_GeneratorManager getGenManager(String name){
  return managers.get(name.toLowerCase());
}"
42078,"public abstract boolean addMultiverseWorld(String worldName,String environment,String seed,String generator);","public abstract boolean addMultiverseWorld(String worldName,String seed,String generator);"
42079,"@Override public void setupListeners(){
  PluginManager pm=plugin.getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(plugin),plugin);
  pm.registerEvents(new BukkitPlotDenyListener(plugin),plugin);
}","@Override public void setupListeners(){
  PluginManager pm=plugin.getServer().getPluginManager();
  pm.registerEvents(new BukkitPlotListener(plugin.getAPI()),plugin);
  pm.registerEvents(new BukkitPlotDenyListener(plugin),plugin);
}"
42080,"@Override public void unHook(){
  economy=null;
}","@Override public void unHook(){
  economy=null;
  plotworldedit=null;
  usinglwc=false;
}"
42081,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonRetract(BlockPistonRetractEvent event){
  BukkitBlock piston=new BukkitBlock(event.getBlock());
  BukkitBlock block=new BukkitBlock(event.getRetractLocation().getBlock());
  if (api.getPlotMeCoreManager().isPlotWorld(piston) && piston.getType().equals(Material.PISTON_STICKY_BASE)) {
    String id=PlotMeCoreManager.getPlotId(block.getLocation());
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(piston.getWorld().getName(),id);
      if (ptc != null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonRetract(BlockPistonRetractEvent event){
  BukkitBlock piston=new BukkitBlock(event.getBlock());
  BukkitBlock block=new BukkitBlock(event.getRetractLocation().getBlock());
  if (api.getPlotMeCoreManager().isPlotWorld(piston)) {
    String id=PlotMeCoreManager.getPlotId(block.getLocation());
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(piston.getWorld().getName(),id);
      if (ptc != null) {
        event.setCancelled(true);
      }
    }
  }
}"
42082,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  if (event.getTo() == null || event.getFrom() == null) {
    return;
  }
  BukkitLocation from=new BukkitLocation(event.getFrom());
  BukkitLocation to=new BukkitLocation(event.getTo());
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  String idTo=""String_Node_Str"";
  boolean changemask=false;
  if (!from.getWorld().getName().equalsIgnoreCase(to.getWorld().getName())) {
    changemask=true;
  }
 else   if (from.getLocation() != to.getLocation()) {
    String idFrom=PlotMeCoreManager.getPlotId(from);
    idTo=PlotMeCoreManager.getPlotId(to);
    if (!idFrom.equals(idTo)) {
      changemask=true;
    }
  }
  if (changemask && api.getPlotMeCoreManager().isPlotWorld(to.getWorld())) {
    if (api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player.getUniqueId())) {
      worldEdit.removeMask(player);
    }
 else {
      worldEdit.setMask(player,idTo);
    }
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  if (event.getTo() == null || event.getFrom() == null) {
    return;
  }
  BukkitLocation from=new BukkitLocation(event.getFrom());
  BukkitLocation to=new BukkitLocation(event.getTo());
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  String idTo=""String_Node_Str"";
  boolean changemask=false;
  if (!from.getWorld().getName().equalsIgnoreCase(to.getWorld().getName())) {
    changemask=true;
  }
 else   if (from.getLocation() != to.getLocation()) {
    String idFrom=PlotMeCoreManager.getPlotId(from);
    idTo=PlotMeCoreManager.getPlotId(to);
    if (!idFrom.equals(idTo)) {
      changemask=true;
    }
  }
  if (changemask && api.getPlotMeCoreManager().isPlotWorld(to.getWorld())) {
    if (api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player)) {
      worldEdit.removeMask(player);
    }
 else {
      worldEdit.setMask(player,idTo);
    }
  }
}"
42083,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  BukkitLocation location=new BukkitLocation(event.getClickedBlock().getLocation());
  if (api.getPlotMeCoreManager().isPlotWorld(location)) {
    if (!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE) && !api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player.getUniqueId()) && (event.getAction() == Action.LEFT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_BLOCK)&& ((BukkitMaterial)player.getItemInHand().getType()).getMaterial() != Material.AIR) {
      String id=PlotMeCoreManager.getPlotId(location);
      Plot plot=api.getPlotMeCoreManager().getMap(location).getPlot(id);
      if (plot != null && plot.isAllowed(player.getName(),player.getUniqueId())) {
        worldEdit.setMask(player);
      }
 else {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  BukkitLocation location=new BukkitLocation(event.getClickedBlock().getLocation());
  if (api.getPlotMeCoreManager().isPlotWorld(location)) {
    if (!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE) && !api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player) && (event.getAction() == Action.LEFT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_BLOCK)&& ((BukkitMaterial)player.getItemInHand().getType()).getMaterial() != Material.AIR) {
      String id=PlotMeCoreManager.getPlotId(location);
      Plot plot=api.getPlotMeCoreManager().getMap(location).getPlot(id);
      if (plot != null && plot.isAllowed(player.getName(),player.getUniqueId())) {
        worldEdit.setMask(player);
      }
 else {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
    }
  }
}"
42084,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  if (api.getPlotMeCoreManager().isPlotWorld(player)) {
    if (!api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player.getUniqueId())) {
      if (event.getMessage().startsWith(""String_Node_Str"")) {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
 else       if (event.getMessage().startsWith(""String_Node_Str"")) {
        Plot plot=api.getPlotMeCoreManager().getPlotById(player);
        if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
          event.setCancelled(true);
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  if (api.getPlotMeCoreManager().isPlotWorld(player)) {
    if (!api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player)) {
      if (event.getMessage().startsWith(""String_Node_Str"")) {
        player.sendMessage(api.getUtil().C(""String_Node_Str""));
        event.setCancelled(true);
      }
 else       if (event.getMessage().startsWith(""String_Node_Str"")) {
        Plot plot=api.getPlotMeCoreManager().getPlotById(player);
        if (plot == null || !plot.isAllowed(player.getName(),player.getUniqueId())) {
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
          event.setCancelled(true);
        }
      }
    }
  }
}"
42085,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerJoin(PlayerJoinEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  if (api.getPlotMeCoreManager().isPlotWorld(player)) {
    if (api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player.getUniqueId())) {
      worldEdit.removeMask(player);
    }
 else {
      worldEdit.setMask(player);
    }
  }
 else {
    worldEdit.removeMask(player);
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerJoin(PlayerJoinEvent event){
  BukkitPlayer player=new BukkitPlayer(event.getPlayer());
  if (api.getPlotMeCoreManager().isPlotWorld(player)) {
    if (api.getPlotMeCoreManager().isPlayerIgnoringWELimit(player)) {
      worldEdit.removeMask(player);
    }
 else {
      worldEdit.setMask(player);
    }
  }
 else {
    worldEdit.removeMask(player);
  }
}"
42086,"public void setPlotName(String plotName){
  this.plotName=plotName;
}","public void setPlotName(String plotName){
}"
42087,"public void removeAllowed(UUID uuid){
  if (allowed().contains(uuid)) {
    String name=allowed().remove(uuid);
    plugin.getSqlManager().deletePlotAllowed(PlotMeCoreManager.getIdX(getId()),PlotMeCoreManager.getIdZ(getId()),name,uuid,getWorld());
    if (plugin.getServerBridge().getPlotWorldEdit() != null) {
      IPlayer player=plugin.getServerBridge().getPlayer(uuid);
      if (player != null) {
        if (plugin.getPlotMeCoreManager().isPlotWorld(player.getWorld())) {
          if (plugin.getPlotMeCoreManager().isPlayerIgnoringWELimit(player.getUniqueId()))           plugin.getServerBridge().getPlotWorldEdit().removeMask(player);
 else           plugin.getServerBridge().getPlotWorldEdit().setMask(player);
        }
      }
    }
  }
}","public void removeAllowed(UUID uuid){
  if (allowed().contains(uuid)) {
    String name=allowed().remove(uuid);
    plugin.getSqlManager().deletePlotAllowed(PlotMeCoreManager.getIdX(getId()),PlotMeCoreManager.getIdZ(getId()),name,uuid,getWorld());
    if (plugin.getServerBridge().getPlotWorldEdit() != null) {
      IPlayer player=plugin.getServerBridge().getPlayer(uuid);
      if (player != null) {
        if (plugin.getPlotMeCoreManager().isPlotWorld(player.getWorld())) {
          if (plugin.getPlotMeCoreManager().isPlayerIgnoringWELimit(player))           plugin.getServerBridge().getPlotWorldEdit().removeMask(player);
 else           plugin.getServerBridge().getPlotWorldEdit().setMask(player);
        }
      }
    }
  }
}"
42088,"public boolean isPlayerIgnoringWELimit(UUID uuid){
  return getPlayersIgnoringWELimit().contains(uuid);
}","public boolean isPlayerIgnoringWELimit(IPlayer player){
  if (plugin.getServerBridge().getConfig().getBoolean(""String_Node_Str"")) {
    if (player.hasPermission(PermissionNames.ADMIN_WEANYWHERE)) {
      return !getPlayersIgnoringWELimit().contains(player.getUniqueId());
    }
 else {
      return getPlayersIgnoringWELimit().contains(player.getUniqueId());
    }
  }
 else {
    return getPlayersIgnoringWELimit().contains(player.getUniqueId());
  }
}"
42089,"public void clear(IWorld world,Plot plot,ICommandSender sender,ClearReason reason){
  String id=plot.getId();
  plot.setForSale(false);
  plot.setProtect(false);
  plot.setAuctioned(false);
  plot.setCurrentBid(0.0);
  plot.setCurrentBidder(null);
  String worldName=world.getName().toLowerCase();
  int idX=getIdX(id);
  int idZ=getIdZ(id);
  SqlManager sm=plugin.getSqlManager();
  sm.updatePlot(idX,idZ,worldName,""String_Node_Str"",false);
  sm.updatePlot(idX,idZ,worldName,""String_Node_Str"",false);
  sm.updatePlot(idX,idZ,worldName,""String_Node_Str"",false);
  sm.updatePlot(idX,idZ,worldName,""String_Node_Str"",0);
  sm.updatePlot(idX,idZ,worldName,""String_Node_Str"",null);
  if (getMap(worldName).isUseProgressiveClear()) {
    plugin.addPlotToClear(new PlotToClear(worldName,id,reason));
  }
 else {
    getGenManager(world).clear(world,id);
    if (plugin.getServerBridge().getUsinglwc()) {
      removeLWC(world,id);
    }
    sender.sendMessage(Util().C(""String_Node_Str""));
  }
}","public void clear(IWorld world,Plot plot,ICommandSender sender,ClearReason reason){
}"
42090,"public boolean exec(IPlayer player,String[] args){
  if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
    if (player.hasPermission(PermissionNames.USER_BIOME)) {
      List<String> biomes=serverBridge.getBiomes();
      Collections.sort(biomes);
      int page=1;
      int pages=biomes.size() / 19 + 1;
      if (args.length > 1 && !args[1].isEmpty()) {
        page=Integer.parseInt(args[1]);
      }
      if (page <= pages) {
        page=1;
      }
      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + page+ ""String_Node_Str""+ pages+ ""String_Node_Str"");
      for (int ctr=0; ctr < 19; ctr++) {
        if (biomes.size() <= ctr + (page - 1) * 19) {
          return true;
        }
 else {
          player.sendMessage(""String_Node_Str"" + biomes.get(ctr + (page - 1) * 19));
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      return false;
    }
  }
  return true;
}","public boolean exec(IPlayer player,String arg){
  if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
    if (player.hasPermission(PermissionNames.USER_BIOME)) {
      List<String> biomes=serverBridge.getBiomes();
      int pages=biomes.size() / 19 + 1;
      int page;
      try {
        page=Integer.parseInt(arg);
      }
 catch (      NumberFormatException e) {
        page=1;
      }
      player.sendMessage(C(""String_Node_Str"") + ""String_Node_Str"" + page+ ""String_Node_Str""+ pages+ ""String_Node_Str"");
      for (int ctr=0; ctr < 19; ctr++) {
        if (biomes.size() <= ctr + (page - 1) * 19) {
          return true;
        }
 else {
          player.sendMessage(""String_Node_Str"" + biomes.get(ctr + (page - 1) * 19));
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
      return false;
    }
  }
  return true;
}"
42091,"public boolean exec(IPlayer player){
  if (player.hasPermission(PermissionNames.ADMIN_WEANYWHERE)) {
    String name=player.getName();
    UUID uuid=player.getUniqueId();
    if (!plugin.getPlotMeCoreManager().isPlayerIgnoringWELimit(uuid)) {
      if (serverBridge.getConfig().getBoolean(""String_Node_Str"")) {
        plugin.getPlotMeCoreManager().addPlayerIgnoringWELimit(uuid);
        serverBridge.getPlotWorldEdit().removeMask(player);
      }
 else {
        plugin.getPlotMeCoreManager().removePlayerIgnoringWELimit(uuid);
        if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
          serverBridge.getPlotWorldEdit().setMask(player);
        }
      }
      player.sendMessage(C(""String_Node_Str""));
      if (isAdvancedLogging()) {
        plugin.getLogger().info(name + ""String_Node_Str"");
      }
    }
 else {
      if (serverBridge.getConfig().getBoolean(""String_Node_Str"")) {
        plugin.getPlotMeCoreManager().removePlayerIgnoringWELimit(uuid);
        if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
          serverBridge.getPlotWorldEdit().setMask(player);
        }
      }
 else {
        plugin.getPlotMeCoreManager().addPlayerIgnoringWELimit(uuid);
        serverBridge.getPlotWorldEdit().removeMask(player);
      }
      player.sendMessage(C(""String_Node_Str""));
      if (isAdvancedLogging()) {
        plugin.getLogger().info(name + ""String_Node_Str"");
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}","public boolean exec(IPlayer player){
  boolean defaultWEAnywhere=serverBridge.getConfig().getBoolean(""String_Node_Str"");
  if (player.hasPermission(PermissionNames.ADMIN_WEANYWHERE) && plugin.getServerBridge().getPlotWorldEdit() != null) {
    String name=player.getName();
    UUID uuid=player.getUniqueId();
    if (plugin.getPlotMeCoreManager().isPlayerIgnoringWELimit(player)) {
      if (!defaultWEAnywhere) {
        plugin.getPlotMeCoreManager().removePlayerIgnoringWELimit(uuid);
        if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
          serverBridge.getPlotWorldEdit().setMask(player);
        }
      }
 else {
        plugin.getPlotMeCoreManager().addPlayerIgnoringWELimit(uuid);
        serverBridge.getPlotWorldEdit().removeMask(player);
      }
      player.sendMessage(C(""String_Node_Str""));
      if (isAdvancedLogging()) {
        plugin.getLogger().info(name + ""String_Node_Str"");
      }
    }
 else {
      if (defaultWEAnywhere) {
        plugin.getPlotMeCoreManager().removePlayerIgnoringWELimit(uuid);
        serverBridge.getPlotWorldEdit().setMask(player);
      }
 else {
        plugin.getPlotMeCoreManager().addPlayerIgnoringWELimit(uuid);
        if (plugin.getPlotMeCoreManager().isPlotWorld(player)) {
          serverBridge.getPlotWorldEdit().removeMask(player);
        }
      }
      player.sendMessage(C(""String_Node_Str""));
      if (isAdvancedLogging()) {
        plugin.getLogger().info(name + ""String_Node_Str"");
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"" + C(""String_Node_Str""));
    return false;
  }
  return true;
}"
42092,"public BukkitPlotListener(PlotMe_CorePlugin instance){
  plugin=instance;
  api=plugin.getAPI();
}","public BukkitPlotListener(PlotMe_Core instance){
  api=instance;
}"
42093,"@EventHandler public void onEntityDamagebyEntity(EntityDamageByEntityEvent event){
  BukkitLocation location=new BukkitLocation(event.getDamager().getLocation());
  if (api.getPlotMeCoreManager().isPlotWorld(location)) {
    BukkitEntity entityDamaged=new BukkitEntity(event.getEntity());
    if (event.getDamager() instanceof Player) {
      Player player=(Player)event.getDamager();
      BukkitPlayer bukkitPlayer=new BukkitPlayer(player);
      boolean cantbuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
      String id=PlotMeCoreManager.getPlotId(location);
      if (id.isEmpty()) {
        if (cantbuild) {
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
          event.setCancelled(true);
        }
      }
 else {
        Plot plot=api.getPlotMeCoreManager().getPlotById(id,bukkitPlayer);
        if (plot == null) {
          if (cantbuild) {
            bukkitPlayer.sendMessage(api.getUtil().C(""String_Node_Str""));
            event.setCancelled(true);
          }
        }
 else         if (!plot.isAllowed(player.getName(),player.getUniqueId())) {
          if (cantbuild) {
            bukkitPlayer.sendMessage(api.getUtil().C(""String_Node_Str""));
            event.setCancelled(true);
          }
        }
      }
    }
 else {
      event.setCancelled(true);
    }
  }
}","@EventHandler public void onEntityDamagebyEntity(EntityDamageByEntityEvent event){
  BukkitLocation location=new BukkitLocation(event.getDamager().getLocation());
  if (api.getPlotMeCoreManager().isPlotWorld(location)) {
    if (event.getDamager() instanceof Player) {
      Player player=(Player)event.getDamager();
      BukkitPlayer bukkitPlayer=new BukkitPlayer(player);
      boolean cantbuild=!player.hasPermission(PermissionNames.ADMIN_BUILDANYWHERE);
      String id=PlotMeCoreManager.getPlotId(location);
      if (id.isEmpty()) {
        if (cantbuild) {
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
          event.setCancelled(true);
        }
      }
 else {
        Plot plot=api.getPlotMeCoreManager().getPlotById(id,bukkitPlayer);
        if (plot == null) {
          if (cantbuild) {
            bukkitPlayer.sendMessage(api.getUtil().C(""String_Node_Str""));
            event.setCancelled(true);
          }
        }
 else         if (!plot.isAllowed(player.getName(),player.getUniqueId())) {
          if (cantbuild) {
            bukkitPlayer.sendMessage(api.getUtil().C(""String_Node_Str""));
            event.setCancelled(true);
          }
        }
      }
    }
 else {
      event.setCancelled(true);
    }
  }
}"
42094,"@EventHandler public void onPlotWorldLoad(PlotWorldLoadEvent event){
  plugin.getLogger().info(""String_Node_Str"" + event.getNbPlots() + ""String_Node_Str""+ event.getWorldName());
}","@EventHandler public void onPlotWorldLoad(PlotWorldLoadEvent event){
  api.getLogger().info(""String_Node_Str"" + event.getNbPlots() + ""String_Node_Str""+ event.getWorldName());
}"
42095,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  BukkitBlock block=new BukkitBlock(event.getBlock());
  if (api.getPlotMeCoreManager().isPlotWorld(block)) {
    String id=PlotMeCoreManager.getPlotId(block.getLocation());
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(block.getWorld().getName(),id);
      if (ptc != null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  BukkitBlock block=new BukkitBlock(event.getToBlock());
  if (api.getPlotMeCoreManager().isPlotWorld(block)) {
    String id=PlotMeCoreManager.getPlotId(block.getLocation());
    String id2=PlotMeCoreManager.getPlotId(block.getLocation());
    if (id2.isEmpty()) {
      event.setCancelled(true);
    }
    if (id.isEmpty()) {
      event.setCancelled(true);
    }
 else {
      PlotToClear ptc=api.getPlotLocked(block.getWorld().getName(),id);
      if (ptc != null) {
        event.setCancelled(true);
      }
    }
  }
}"
42096,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockIgnite(BlockIgniteEvent event){
  BukkitEntity entity=new BukkitEntity(event.getIgnitingEntity());
  PlotMapInfo pmi=api.getPlotMeCoreManager().getMap(entity.getLocation());
  if (pmi != null) {
    if (pmi.isDisableIgnition()) {
      event.setCancelled(true);
    }
 else {
      String id=PlotMeCoreManager.getPlotId(entity.getLocation());
      if (id.isEmpty()) {
        event.setCancelled(true);
      }
 else {
        PlotToClear ptc=api.getPlotLocked(entity.getLocation().getWorld().getName(),id);
        Player player=null;
        if (ptc != null) {
          if (event.getPlayer() != null) {
            player=event.getPlayer();
switch (ptc.getReason()) {
case Clear:
              player.sendMessage(api.getUtil().C(""String_Node_Str""));
            break;
case Reset:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Expired:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
}
}
event.setCancelled(true);
}
 else {
if (event.getPlayer() != null) {
player=event.getPlayer();
}
Plot plot=PlotMeCoreManager.getPlotById(id,pmi);
if (plot == null) {
event.setCancelled(true);
}
 else {
if (player != null && !plot.isAllowed(player.getName(),entity.getUniqueId())) {
  event.setCancelled(true);
}
}
}
}
}
}
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockIgnite(BlockIgniteEvent event){
  BukkitBlock block=new BukkitBlock(event.getBlock());
  PlotMapInfo pmi=api.getPlotMeCoreManager().getMap(block.getLocation());
  if (pmi != null) {
    if (pmi.isDisableIgnition()) {
      event.setCancelled(true);
    }
 else {
      String id=PlotMeCoreManager.getPlotId(block.getLocation());
      if (id.isEmpty()) {
        event.setCancelled(true);
      }
 else {
        PlotToClear ptc=api.getPlotLocked(block.getLocation().getWorld().getName(),id);
        Player player=null;
        if (ptc != null) {
          if (event.getPlayer() != null) {
            player=event.getPlayer();
switch (ptc.getReason()) {
case Clear:
              player.sendMessage(api.getUtil().C(""String_Node_Str""));
            break;
case Reset:
          player.sendMessage(api.getUtil().C(""String_Node_Str""));
        break;
case Expired:
      player.sendMessage(api.getUtil().C(""String_Node_Str""));
    break;
}
}
event.setCancelled(true);
}
 else {
if (event.getPlayer() != null) {
player=event.getPlayer();
}
Plot plot=PlotMeCoreManager.getPlotById(id,pmi);
if (plot == null) {
event.setCancelled(true);
}
 else {
if (player != null && !plot.isAllowed(player.getName(),player.getUniqueId())) {
  event.setCancelled(true);
}
}
}
}
}
}
}"
42097,"/** 
 * hardcore math over here
 * @param x
 * @return
 */
private float getScoreForPosition(float x){
  if (mHalfStars)   return (float)Math.round(((x / ((float)getWidth() / (mMaxStars * 3f))) / 3f) * 2f) / 2;
  float value=(float)Math.round((x / ((float)getWidth() / (mMaxStars))));
  return value <= 0 ? 1 : value;
}","/** 
 * hardcore math over here
 * @param x
 * @return
 */
private float getScoreForPosition(float x){
  if (mHalfStars)   return (float)Math.round(((x / ((float)getWidth() / (mMaxStars * 3f))) / 3f) * 2f) / 2;
  float value=(float)Math.round((x / ((float)getWidth() / (mMaxStars))));
  return value < 0 ? 1 : value;
}"
42098,"public static void debug(Object info,Object... info2){
  if (isDeObf) {
    String temp=""String_Node_Str"" + info;
    for (    Object t : info2)     temp=temp + ""String_Node_Str"" + t;
    logger.info(info);
  }
}","public static void debug(Object info,Object... info2){
  if (isDeObf) {
    StringBuilder temp=new StringBuilder(""String_Node_Str"" + info);
    for (    Object t : info2)     temp.append(""String_Node_Str"").append(t);
    logger.info(temp.toString());
  }
}"
42099,"public static void error(Object info,Object... info2){
  String temp=""String_Node_Str"" + info;
  for (  Object t : info2)   temp=temp + ""String_Node_Str"" + t;
  logger.error(info);
}","public static void error(Object info,Object... info2){
  StringBuilder temp=new StringBuilder(""String_Node_Str"" + info);
  for (  Object t : info2)   temp.append(""String_Node_Str"").append(t);
  logger.error(temp.toString());
}"
42100,"public static void info(Object info,Object... info2){
  String temp=""String_Node_Str"" + info;
  for (  Object t : info2)   temp=temp + ""String_Node_Str"" + t;
  logger.info(info);
}","public static void info(Object info,Object... info2){
  StringBuilder temp=new StringBuilder(""String_Node_Str"" + info);
  for (  Object t : info2)   temp.append(""String_Node_Str"").append(t);
  logger.info(temp.toString());
}"
42101,"@Override public ItemStack getCraftingResult(InventoryCrafting var1){
  return ItemBlockTeleporter.assignRandomID(super.getCraftingResult(var1));
}","@Nonnull @Override public ItemStack getCraftingResult(@Nonnull InventoryCrafting var1){
  return ItemBlockTeleporter.assignRandomID(super.getCraftingResult(var1));
}"
42102,"public static ItemWrench makeMeAWrench(){
  ArrayList<ClassNode> nodes=new ArrayList<>(ItemHelper.wrenchClassNames.length);
  ArrayList<String> ifaceList=new ArrayList<>(ItemHelper.wrenchClassNames.length);
  LinkedList<String> toCheck=Lists.newLinkedList();
  Collections.addAll(toCheck,ItemHelper.wrenchClassNames);
  while (!toCheck.isEmpty()) {
    try {
      String wrenchClassName=toCheck.poll();
      byte[] classBytes=loader.getClassBytes(wrenchClassName);
      if (classBytes != null) {
        ClassNode node=new ClassNode(ASM5);
        ClassReader reader=new ClassReader(classBytes);
        reader.accept(node,ClassReader.EXPAND_FRAMES);
        for (        String anInterface : node.interfaces) {
          toCheck.add(anInterface.replace('/','.'));
        }
        nodes.add(node);
        ifaceList.add(wrenchClassName.replace('.','/'));
      }
    }
 catch (    IOException ignore) {
    }
  }
  if (nodes.isEmpty())   return new ItemWrench();
  HashSet<String> methods=new HashSet<>();
  try {
    byte[] classBytes=loader.getClassBytes(ItemWrench.class.getName());
    ClassNode node=new ClassNode(ASM5);
    ClassReader reader=new ClassReader(classBytes);
    reader.accept(node,ClassReader.EXPAND_FRAMES);
    for (    MethodNode method : node.methods) {
      methods.add(getMethodDesc(method));
    }
  }
 catch (  IOException ignore) {
  }
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  String name=""String_Node_Str"";
  String superName=Type.getInternalName(ItemWrench.class);
  String[] ifaces=ifaceList.toArray(new String[ifaceList.size()]);
  cw.visit(V1_6,ACC_PUBLIC | ACC_SUPER,name,null,superName,ifaces);
  cw.visitSource(""String_Node_Str"",null);
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,superName,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  for (  ClassNode node : nodes) {
    for (    MethodNode method : node.methods) {
      String mn=getMethodDesc(method);
      if (methods.contains(mn))       continue;
      methods.add(mn);
      Type returnType=Type.getReturnType(method.desc);
      int returnOpCode=returnType.getOpcode(IRETURN);
      mv=cw.visitMethod(ACC_PUBLIC,method.name,method.desc,null,null);
      mv.visitCode();
switch (returnOpCode) {
case RETURN:
        break;
case IRETURN:
      mv.visitInsn(returnType == Type.BOOLEAN_TYPE ? ICONST_1 : ICONST_0);
    break;
case LRETURN:
  mv.visitInsn(LCONST_0);
break;
case FRETURN:
mv.visitInsn(FCONST_0);
break;
case DRETURN:
mv.visitInsn(DCONST_0);
break;
case ARETURN:
mv.visitInsn(ACONST_NULL);
break;
}
mv.visitInsn(returnOpCode);
mv.visitInsn(RETURN);
mv.visitMaxs(returnOpCode != RETURN ? 1 : 0,1 + Type.getArgumentTypes(method.desc).length);
mv.visitEnd();
}
}
cw.visitEnd();
Class<?> ret=(new ASMClassLoader()).define(name,cw.toByteArray());
try {
return (ItemWrench)ret.newInstance();
}
 catch (Throwable e) {
throw new RuntimeException(e);
}
}","public static ItemWrench makeMeAWrench(){
  ArrayList<ClassNode> nodes=new ArrayList<>(ItemHelper.wrenchClassNames.length);
  ArrayList<String> ifaceList=new ArrayList<>(ItemHelper.wrenchClassNames.length);
  LinkedList<String> toCheck=Lists.newLinkedList();
  Collections.addAll(toCheck,ItemHelper.wrenchClassNames);
  while (!toCheck.isEmpty()) {
    try {
      String wrenchClassName=toCheck.poll();
      byte[] classBytes=loader.getClassBytes(wrenchClassName);
      if (classBytes != null) {
        ClassNode node=new ClassNode(ASM5);
        ClassReader reader=new ClassReader(classBytes);
        reader.accept(node,ClassReader.EXPAND_FRAMES);
        for (        String anInterface : node.interfaces) {
          toCheck.add(anInterface.replace('/','.'));
        }
        nodes.add(node);
        ifaceList.add(wrenchClassName.replace('.','/'));
      }
    }
 catch (    IOException ignore) {
    }
  }
  if (nodes.isEmpty())   return new ItemWrench();
  HashSet<String> methods=new HashSet<>();
  try {
    byte[] classBytes=loader.getClassBytes(ItemWrench.class.getName());
    ClassNode node=new ClassNode(ASM5);
    ClassReader reader=new ClassReader(classBytes);
    reader.accept(node,ClassReader.EXPAND_FRAMES);
    for (    MethodNode method : node.methods) {
      methods.add(getMethodDesc(method));
    }
  }
 catch (  IOException ignore) {
  }
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  String name=""String_Node_Str"";
  String superName=Type.getInternalName(ItemWrench.class);
  String[] ifaces=ifaceList.toArray(new String[0]);
  cw.visit(V1_6,ACC_PUBLIC | ACC_SUPER,name,null,superName,ifaces);
  cw.visitSource(""String_Node_Str"",null);
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,superName,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  for (  ClassNode node : nodes) {
    for (    MethodNode method : node.methods) {
      String mn=getMethodDesc(method);
      if (methods.contains(mn))       continue;
      methods.add(mn);
      Type returnType=Type.getReturnType(method.desc);
      int returnOpCode=returnType.getOpcode(IRETURN);
      mv=cw.visitMethod(ACC_PUBLIC,method.name,method.desc,null,null);
      mv.visitCode();
switch (returnOpCode) {
case RETURN:
        break;
case IRETURN:
      mv.visitInsn(returnType == Type.BOOLEAN_TYPE ? ICONST_1 : ICONST_0);
    break;
case LRETURN:
  mv.visitInsn(LCONST_0);
break;
case FRETURN:
mv.visitInsn(FCONST_0);
break;
case DRETURN:
mv.visitInsn(DCONST_0);
break;
case ARETURN:
mv.visitInsn(ACONST_NULL);
break;
}
mv.visitInsn(returnOpCode);
mv.visitInsn(RETURN);
mv.visitMaxs(returnOpCode != RETURN ? 1 : 0,1 + Type.getArgumentTypes(method.desc).length);
mv.visitEnd();
}
}
cw.visitEnd();
Class<?> ret=(new ASMClassLoader()).define(name,cw.toByteArray());
try {
return (ItemWrench)ret.newInstance();
}
 catch (Throwable e) {
throw new RuntimeException(e);
}
}"
42103,"@Nonnull @Override public IBlockState getStateForPlacement(World worldIn,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer,EnumHand hand){
  IBlockState state=super.getStateForPlacement(worldIn,pos,facing,hitX,hitY,hitZ,meta,placer,hand);
  EnumFacing opposite=facing.getOpposite();
  if (worldIn.getTileEntity(pos.offset(opposite)) instanceof IMover) {
    return state.withProperty(BlockDirectional.FACING,opposite);
  }
  for (  EnumFacing enumFacing : EnumFacing.values()) {
    if (worldIn.getTileEntity(pos.offset(enumFacing)) instanceof IMover) {
      return state.withProperty(BlockDirectional.FACING,enumFacing);
    }
  }
  return state.withProperty(BlockDirectional.FACING,opposite);
}","@Nonnull @Override public IBlockState getStateForPlacement(@Nonnull World worldIn,@Nonnull BlockPos pos,@Nonnull EnumFacing facing,float hitX,float hitY,float hitZ,int meta,@Nonnull EntityLivingBase placer,EnumHand hand){
  IBlockState state=super.getStateForPlacement(worldIn,pos,facing,hitX,hitY,hitZ,meta,placer,hand);
  EnumFacing opposite=facing.getOpposite();
  if (worldIn.getTileEntity(pos.offset(opposite)) instanceof IMover) {
    return state.withProperty(BlockDirectional.FACING,opposite);
  }
  for (  EnumFacing enumFacing : EnumFacing.values()) {
    if (worldIn.getTileEntity(pos.offset(enumFacing)) instanceof IMover) {
      return state.withProperty(BlockDirectional.FACING,enumFacing);
    }
  }
  return state.withProperty(BlockDirectional.FACING,opposite);
}"
42104,@Override public abstract IBlockState getStateFromMeta(int meta);,@Nonnull @Override public abstract IBlockState getStateFromMeta(int meta);
42105,"@Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess source,BlockPos pos){
  return bounds;
}","@Nonnull @Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess source,BlockPos pos){
  return bounds;
}"
42106,"@Override public void breakBlock(World worldIn,BlockPos pos,IBlockState state){
  super.breakBlock(worldIn,pos,state);
}","@Override public void breakBlock(@Nonnull World worldIn,@Nonnull BlockPos pos,@Nonnull IBlockState state){
  super.breakBlock(worldIn,pos,state);
}"
42107,"@Override public BlockFaceShape getBlockFaceShape(IBlockAccess blockAccess,IBlockState stateIn,BlockPos pos,EnumFacing side){
  return BlockFaceShape.UNDEFINED;
}","@Nonnull @Override public BlockFaceShape getBlockFaceShape(IBlockAccess blockAccess,IBlockState stateIn,BlockPos pos,EnumFacing side){
  return BlockFaceShape.UNDEFINED;
}"
42108,"@Nullable @Override public ItemStack getItem(World worldIn,BlockPos pos,@Nonnull IBlockState state){
  @SuppressWarnings(""String_Node_Str"") ItemStack item=super.getItem(worldIn,pos,state);
  if (item.isEmpty() == false) {
    TileEntity tileEntity=worldIn.getTileEntity(pos);
    if (tileEntity instanceof TileTeleport) {
      int teleportId=((TileTeleport)tileEntity).teleportId;
      if (teleportId != 0) {
        NBTTagCompound tag=new NBTTagCompound();
        tag.setInteger(ItemBlockTeleporter.NBT_TELEPORTER_ID,teleportId);
        item.setTagCompound(tag);
      }
    }
  }
  return item;
}","@Override public ItemStack getItem(World worldIn,BlockPos pos,@Nonnull IBlockState state){
  @SuppressWarnings(""String_Node_Str"") ItemStack item=super.getItem(worldIn,pos,state);
  if (!item.isEmpty()) {
    TileEntity tileEntity=worldIn.getTileEntity(pos);
    if (tileEntity instanceof TileTeleport) {
      int teleportId=((TileTeleport)tileEntity).teleportId;
      if (teleportId != 0) {
        NBTTagCompound tag=new NBTTagCompound();
        tag.setInteger(ItemBlockTeleporter.NBT_TELEPORTER_ID,teleportId);
        item.setTagCompound(tag);
      }
    }
  }
  return item;
}"
42109,"@Override public boolean shouldRefresh(World world,BlockPos pos,IBlockState oldState,IBlockState newSate){
  return oldState.getBlock() != newSate.getBlock();
}","@Override public boolean shouldRefresh(World world,BlockPos pos,@Nonnull IBlockState oldState,@Nonnull IBlockState newSate){
  return oldState.getBlock() != newSate.getBlock();
}"
42110,"@Override public void update(){
  if (maxTime == 0)   return;
  if (getWorld().isRemote) {
    time=time + 1 - 1;
  }
  Vec3d mov=getMovVec();
  Set<Entity> entityList=new HashSet<>();
  time++;
  for (  AxisAlignedBB bb : getTransformedColisions()) {
    List<Entity> entities=getWorld().getEntitiesWithinAABB(Entity.class,bb.expand(0,0.1,0));
    for (    Entity entity : entities) {
      entityList.add(entity);
    }
  }
  for (  Entity a : entityList) {
    if (!a.isDead) {
      Map<Entity,Vec3d> map=EntityMovingEventHandler.getMovementMap(side);
      if (!map.containsKey(a)) {
        for (        AxisAlignedBB bb : getTransformedColisions()) {
          AxisAlignedBB boundingBox=a.getEntityBoundingBox();
          if (boundingBox.intersects(bb)) {
            if (boundingBox.minY > bb.maxY - 0.2) {
              a.setEntityBoundingBox(boundingBox.offset(0,bb.maxY - boundingBox.minY,0));
            }
          }
 else           if (dir == 0 && a.motionY <= 0 && boundingBox.intersects(bb.offset(0,0.2,0))) {
            a.setEntityBoundingBox(boundingBox.offset(0,bb.maxY - boundingBox.minY,0));
          }
        }
        EntityMovingEventHandler.moveEntity(a,mov.x,mov.y,mov.z);
        map.put(a,null);
      }
    }
  }
}","@Override public void update(){
  if (maxTime == 0)   return;
  if (getWorld().isRemote) {
    time=time + 1 - 1;
  }
  Vec3d mov=getMovVec();
  Set<Entity> entityList=new HashSet<>();
  time++;
  for (  AxisAlignedBB bb : getTransformedColisions()) {
    List<Entity> entities=getWorld().getEntitiesWithinAABB(Entity.class,bb.expand(0,0.1,0));
    entityList.addAll(entities);
  }
  for (  Entity a : entityList) {
    if (!a.isDead) {
      Map<Entity,Vec3d> map=EntityMovingEventHandler.getMovementMap(side);
      if (!map.containsKey(a)) {
        for (        AxisAlignedBB bb : getTransformedColisions()) {
          AxisAlignedBB boundingBox=a.getEntityBoundingBox();
          if (boundingBox.intersects(bb)) {
            if (boundingBox.minY > bb.maxY - 0.2) {
              a.setEntityBoundingBox(boundingBox.offset(0,bb.maxY - boundingBox.minY,0));
            }
          }
 else           if (dir == 0 && a.motionY <= 0 && boundingBox.intersects(bb.offset(0,0.2,0))) {
            a.setEntityBoundingBox(boundingBox.offset(0,bb.maxY - boundingBox.minY,0));
          }
        }
        EntityMovingEventHandler.moveEntity(a,mov.x,mov.y,mov.z);
        map.put(a,null);
      }
    }
  }
}"
42111,"@Override public void handleUpdateTag(NBTTagCompound tag){
  block=Block.getBlockById(tag.getInteger(""String_Node_Str""));
  meta=tag.getInteger(""String_Node_Str"");
  time=tag.getInteger(""String_Node_Str"");
  maxTime=tag.getInteger(""String_Node_Str"");
  lightLevel=tag.getInteger(""String_Node_Str"");
  lightOpacity=tag.getShort(""String_Node_Str"");
  isAir=block == Blocks.AIR;
  if (tag.hasKey(""String_Node_Str"",9)) {
    collisions=AxisTags(tag.getTagList(""String_Node_Str"",10));
  }
  dir=tag.getByte(""String_Node_Str"");
  TileEntity tile=null;
  if (this.dir >= 0 && this.dir < 8 && this.dir != 6) {
    EnumFacing d=getDir();
    WeakReference<TileEntity> ref=cachedTiles.remove(d != null ? pos.offset(d,-1) : pos);
  }
  if (tile != null && FakeWorldClient.isValid(getWorld()) && tile.getWorld() == this.getWorld()) {
    rawTile=true;
    tile.setPos(pos.toImmutable());
    tile.setWorld(FakeWorldClient.getFakeWorldWrapper(this.getWorld()));
    tile.updateContainingBlockInfo();
    this.tile=tile;
    render=true;
  }
 else {
    render=!tag.getBoolean(""String_Node_Str"");
    if (render) {
      this.tile=Describer.recreateTileEntity(tag,getState(),pos,FakeWorldClient.getFakeWorldWrapper(this.getWorld()));
    }
  }
  if (checkClass(this.block) || checkClass(this.tile))   this.tile=null;
  if (render && !init)   ChunkRerenderer.markBlock(pos);
  init=true;
  getWorld().markBlockRangeForRenderUpdate(pos,pos);
}","@Override public void handleUpdateTag(@Nonnull NBTTagCompound tag){
  block=Block.getBlockById(tag.getInteger(""String_Node_Str""));
  meta=tag.getInteger(""String_Node_Str"");
  time=tag.getInteger(""String_Node_Str"");
  maxTime=tag.getInteger(""String_Node_Str"");
  lightLevel=tag.getInteger(""String_Node_Str"");
  lightOpacity=tag.getShort(""String_Node_Str"");
  isAir=block == Blocks.AIR;
  if (tag.hasKey(""String_Node_Str"",9)) {
    collisions=AxisTags(tag.getTagList(""String_Node_Str"",10));
  }
  dir=tag.getByte(""String_Node_Str"");
  TileEntity tile=null;
  if (this.dir >= 0 && this.dir < 8 && this.dir != 6) {
    EnumFacing d=getDir();
    WeakReference<TileEntity> ref=cachedTiles.remove(d != null ? pos.offset(d,-1) : pos);
  }
  if (tile != null && FakeWorldClient.isValid(getWorld()) && tile.getWorld() == this.getWorld()) {
    rawTile=true;
    tile.setPos(pos.toImmutable());
    tile.setWorld(FakeWorldClient.getFakeWorldWrapper(this.getWorld()));
    tile.updateContainingBlockInfo();
    this.tile=tile;
    render=true;
  }
 else {
    render=!tag.getBoolean(""String_Node_Str"");
    if (render) {
      this.tile=Describer.recreateTileEntity(tag,getState(),pos,FakeWorldClient.getFakeWorldWrapper(this.getWorld()));
    }
  }
  if (checkClass(this.block) || checkClass(this.tile))   this.tile=null;
  if (render && !init)   ChunkRerenderer.markBlock(pos);
  init=true;
  getWorld().markBlockRangeForRenderUpdate(pos,pos);
}"
42112,"@Override public boolean hasCapability(@Nonnull Capability<?> capability,@Nonnull EnumFacing facing){
  return (capability == CapabilityEnergy.ENERGY && TilePusher.powerPerTile > 0) || super.hasCapability(capability,facing);
}","@Override public boolean hasCapability(@Nonnull Capability<?> capability,EnumFacing facing){
  return (capability == CapabilityEnergy.ENERGY && TilePusher.powerPerTile > 0) || super.hasCapability(capability,facing);
}"
42113,"@Nonnull @Override public <T>T getCapability(@Nonnull Capability<T> capability,@Nonnull EnumFacing facing){
  if (capability == CapabilityEnergy.ENERGY && TilePusher.powerPerTile > 0) {
    return CapabilityEnergy.ENERGY.cast(public_energy_wrapper);
  }
  return super.getCapability(capability,facing);
}","@Override public <T>T getCapability(@Nonnull Capability<T> capability,EnumFacing facing){
  if (capability == CapabilityEnergy.ENERGY && TilePusher.powerPerTile > 0) {
    return CapabilityEnergy.ENERGY.cast(public_energy_wrapper);
  }
  return super.getCapability(capability,facing);
}"
42114,"@Override public void init(){
  Validate.notNull(FunkyRegistry.INSTANCE).registerProxy(BlockMultipart.class,FunkyCapabilities.STICKY_BLOCK,(world,pos,side) -> {
    TileEntity tile=world.getTileEntity(pos);
    if (tile != null && tile instanceof TileMultipart) {
      TileMultipart multipart=(TileMultipart)tile;
      TMultiPart sidePart=multipart.partMap(side.ordinal());
      if (sidePart != null) {
        if (sidePart instanceof Microblock) {
          Microblock sideMicro=(Microblock)sidePart;
          return sideMicro.getIMaterial().getMaterialID().startsWith(FLBlocks.FRAMES[0].getRegistryName().toString());
        }
      }
    }
    return false;
  }
);
  Validate.notNull(FunkyRegistry.INSTANCE).registerMoveFactoryBlockClass(BlockMultipart.class,new IMoveFactory(){
    private DefaultMoveFactory defaultFactory=new DefaultMoveFactory();
    @Override public boolean recreateBlock(    World world,    BlockPos pos,    NBTTagCompound tag){
      Block block=ForgeRegistries.BLOCKS.getValue(new ResourceLocation(MultipartMod.modID(),""String_Node_Str""));
      Chunk chunk=world.getChunkFromBlockCoords(pos);
      BlockHelper.silentSetBlock(chunk,pos,block,0);
      TileMultipart multipart=TileMultipart.createFromNBT(tag,world);
      for (      TMultiPart p : multipart.jPartList())       TileMultipart.addPart(world,pos,p);
      return true;
    }
    @Override public NBTTagCompound destroyBlock(    World world,    BlockPos pos){
      NBTTagCompound tag=new NBTTagCompound();
      TileEntity te=world.getTileEntity(pos);
      if (te != null && te instanceof TileMultipart) {
        TileMultipart multipart=(TileMultipart)te;
        multipart.writeToNBT(tag);
      }
      tag.merge(defaultFactory.destroyBlock(world,pos));
      return tag;
    }
  }
);
}","@Override public void init(){
  Validate.notNull(FunkyRegistry.INSTANCE).registerProxy(BlockMultipart.class,FunkyCapabilities.STICKY_BLOCK,(world,pos,side) -> {
    TileEntity tile=world.getTileEntity(pos);
    if (tile instanceof TileMultipart) {
      TileMultipart multipart=(TileMultipart)tile;
      TMultiPart sidePart=multipart.partMap(side.ordinal());
      if (sidePart != null) {
        if (sidePart instanceof Microblock) {
          Microblock sideMicro=(Microblock)sidePart;
          return sideMicro.getIMaterial().getMaterialID().startsWith(FLBlocks.FRAMES[0].getRegistryName().toString());
        }
      }
    }
    return false;
  }
);
  Validate.notNull(FunkyRegistry.INSTANCE).registerMoveFactoryBlockClass(BlockMultipart.class,new IMoveFactory(){
    private DefaultMoveFactory defaultFactory=new DefaultMoveFactory();
    @Override public boolean recreateBlock(    World world,    BlockPos pos,    NBTTagCompound tag){
      Block block=ForgeRegistries.BLOCKS.getValue(new ResourceLocation(MultipartMod.modID(),""String_Node_Str""));
      Chunk chunk=world.getChunkFromBlockCoords(pos);
      BlockHelper.silentSetBlock(chunk,pos,block,0);
      TileMultipart multipart=TileMultipart.createFromNBT(tag,world);
      for (      TMultiPart p : multipart.jPartList())       TileMultipart.addPart(world,pos,p);
      return true;
    }
    @Override public NBTTagCompound destroyBlock(    World world,    BlockPos pos){
      NBTTagCompound tag=new NBTTagCompound();
      TileEntity te=world.getTileEntity(pos);
      if (te instanceof TileMultipart) {
        TileMultipart multipart=(TileMultipart)te;
        multipart.writeToNBT(tag);
      }
      tag.merge(defaultFactory.destroyBlock(world,pos));
      return tag;
    }
  }
);
}"
42115,"@Override public NBTTagCompound destroyBlock(World world,BlockPos pos){
  NBTTagCompound tag=new NBTTagCompound();
  TileEntity te=world.getTileEntity(pos);
  if (te != null && te instanceof TileMultipart) {
    TileMultipart multipart=(TileMultipart)te;
    multipart.writeToNBT(tag);
  }
  tag.merge(defaultFactory.destroyBlock(world,pos));
  return tag;
}","@Override public NBTTagCompound destroyBlock(World world,BlockPos pos){
  NBTTagCompound tag=new NBTTagCompound();
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof TileMultipart) {
    TileMultipart multipart=(TileMultipart)te;
    multipart.writeToNBT(tag);
  }
  tag.merge(defaultFactory.destroyBlock(world,pos));
  return tag;
}"
42116,"@Override public ItemStack dispenseStack(IBlockSource pos,ItemStack stack){
  return stack;
}","@Nonnull @Override public ItemStack dispenseStack(IBlockSource pos,ItemStack stack){
  return stack;
}"
42117,"@Override public ItemStack dispenseStack(IBlockSource pos,ItemStack stack){
  return stack;
}","@Nonnull @Override public ItemStack dispenseStack(IBlockSource pos,ItemStack stack){
  return stack;
}"
42118,"@Override public TileEntity getTileEntity(BlockPos pos){
  TileEntity tileEntity=tileOverides.get(pos);
  if (tileEntity != null)   return tileEntity;
  TileMovingClient tileMovingClient=getTile(pos);
  return tileMovingClient == null ? null : tileMovingClient.tile;
}","@Override public TileEntity getTileEntity(@Nonnull BlockPos pos){
  TileEntity tileEntity=tileOverides.get(pos);
  if (tileEntity != null)   return tileEntity;
  TileMovingClient tileMovingClient=getTile(pos);
  return tileMovingClient == null ? null : tileMovingClient.tile;
}"
42119,"@Override public boolean setBlockState(BlockPos pos,@Nonnull IBlockState newState,int flags){
  return false;
}","@Override public boolean setBlockState(@Nonnull BlockPos pos,@Nonnull IBlockState newState,int flags){
  return false;
}"
42120,"@Override public boolean isSideSolid(BlockPos pos,@Nonnull EnumFacing side,boolean _default){
  return this.getBlockState(pos).isSideSolid(this,pos,side);
}","@Override public boolean isSideSolid(@Nonnull BlockPos pos,@Nonnull EnumFacing side,boolean _default){
  return this.getBlockState(pos).isSideSolid(this,pos,side);
}"
42121,"@Nonnull @Override public IBlockState getBlockState(BlockPos pos){
  IBlockState state=blockstateOverides.get(pos);
  if (state != null)   return state;
  TileMovingClient tile=getTile(pos);
  if (tile != null)   return tile.getState();
  return BlockStates.AIR;
}","@Nonnull @Override public IBlockState getBlockState(@Nonnull BlockPos pos){
  IBlockState state=blockstateOverides.get(pos);
  if (state != null)   return state;
  TileMovingClient tile=getTile(pos);
  if (tile != null)   return tile.getState();
  return BlockStates.AIR;
}"
42122,"@Override public boolean isBlockNormalCube(BlockPos pos,boolean _default){
  IBlockState state=getBlockState(pos);
  return state.getBlock().isNormalCube(state,this,pos);
}","@Override public boolean isBlockNormalCube(@Nonnull BlockPos pos,boolean _default){
  IBlockState state=getBlockState(pos);
  return state.getBlock().isNormalCube(state,this,pos);
}"
42123,"@Override @Nullable public TileEntity getTileEntity(BlockPos pos){
  return access.getTileEntity(pos.add(offset));
}","@Override @Nullable public TileEntity getTileEntity(@Nonnull BlockPos pos){
  return access.getTileEntity(pos.add(offset));
}"
42124,"@Override @SideOnly(Side.CLIENT) public int getCombinedLight(BlockPos pos,int lightValue){
  return access.getCombinedLight(pos.add(offset),lightValue);
}","@Override @SideOnly(Side.CLIENT) public int getCombinedLight(@Nonnull BlockPos pos,int lightValue){
  return access.getCombinedLight(pos.add(offset),lightValue);
}"
42125,"@Override public boolean isAirBlock(BlockPos pos){
  return access.isAirBlock(pos.add(offset));
}","@Override public boolean isAirBlock(@Nonnull BlockPos pos){
  return access.isAirBlock(pos.add(offset));
}"
42126,"@Override public int getStrongPower(BlockPos pos,EnumFacing direction){
  return access.getStrongPower(pos.add(offset),direction);
}","@Override public int getStrongPower(@Nonnull BlockPos pos,@Nonnull EnumFacing direction){
  return access.getStrongPower(pos.add(offset),direction);
}"
42127,"@Override public IBlockState getBlockState(BlockPos pos){
  return access.getBlockState(pos.add(offset));
}","@Nonnull @Override public IBlockState getBlockState(@Nonnull BlockPos pos){
  return access.getBlockState(pos.add(offset));
}"
42128,"@Override @SideOnly(Side.CLIENT) public WorldType getWorldType(){
  return access.getWorldType();
}","@Nonnull @Override @SideOnly(Side.CLIENT) public WorldType getWorldType(){
  return access.getWorldType();
}"
42129,"@Override @SideOnly(Side.CLIENT) public Biome getBiome(BlockPos pos){
  return access.getBiome(pos.add(offset));
}","@Nonnull @Override @SideOnly(Side.CLIENT) public Biome getBiome(@Nonnull BlockPos pos){
  return access.getBiome(pos.add(offset));
}"
42130,"@Override public boolean isSideSolid(BlockPos pos,EnumFacing side,boolean _default){
  return access.isSideSolid(pos.add(offset),side,_default);
}","@Override public boolean isSideSolid(@Nonnull BlockPos pos,@Nonnull EnumFacing side,boolean _default){
  return access.isSideSolid(pos.add(offset),side,_default);
}"
42131,"public static void postUpdateBlock(World world,BlockPos pos){
  int i1=(pos.getZ() & 15) << 4 | (pos.getX() & 15);
  Chunk chunk=world.getChunkFromBlockCoords(pos);
  try {
    int[] precMap=(int[])field_Chunk_precipitationHeightMap.get(chunk);
    if (pos.getY() >= precMap[i1] - 1) {
      precMap[i1]=-999;
    }
  }
 catch (  Exception e) {
  }
  int j1=chunk.getHeightMap()[i1];
  boolean flag=pos.getY() >= j1;
  IBlockState newState=chunk.getBlockState(pos.getX() & 15,pos.getY(),pos.getZ() & 15);
  Block newBlock=newState.getBlock();
  int k2=255;
  if (flag) {
    chunk.generateSkylightMap();
  }
 else {
    int j2=newBlock.getLightOpacity(newState,world,pos);
    try {
      if (j2 > 0) {
        if (pos.getY() >= j1) {
          methodHandle_Chunk_relightBlock.invokeExact(chunk,pos.getX() & 15,pos.getY() + 1,pos.getZ() & 15);
        }
      }
 else       if (pos.getY() == j1 - 1) {
        methodHandle_Chunk_relightBlock.invokeExact(chunk,pos.getX() & 15,pos.getY(),pos.getZ() & 15);
      }
      if (j2 != k2 && (j2 < k2 || chunk.getLightFor(EnumSkyBlock.SKY,pos) > 0 || chunk.getLightFor(EnumSkyBlock.BLOCK,pos) > 0)) {
        methodHandle_Chunk_propagateSkylightOcclusion.invokeExact(chunk,pos.getX() & 15,pos.getZ() & 15);
      }
    }
 catch (    Throwable t) {
    }
  }
  world.checkLight(pos);
  markBlockForUpdate(world,pos);
  if (!world.isRemote) {
    world.neighborChanged(pos,Blocks.AIR,pos);
    world.neighborChanged(pos,newBlock,pos);
    world.notifyNeighborsOfStateChange(pos,newBlock,false);
    if (newState.hasComparatorInputOverride()) {
      world.updateComparatorOutputLevel(pos,newBlock);
    }
  }
}","public static void postUpdateBlock(World world,BlockPos pos){
  int i1=(pos.getZ() & 15) << 4 | (pos.getX() & 15);
  Chunk chunk=world.getChunkFromBlockCoords(pos);
  try {
    int[] precMap=(int[])field_Chunk_precipitationHeightMap.get(chunk);
    if (pos.getY() >= precMap[i1] - 1) {
      precMap[i1]=-999;
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  int j1=chunk.getHeightMap()[i1];
  boolean flag=pos.getY() >= j1;
  IBlockState newState=chunk.getBlockState(pos.getX() & 15,pos.getY(),pos.getZ() & 15);
  Block newBlock=newState.getBlock();
  int k2=255;
  if (flag) {
    chunk.generateSkylightMap();
  }
 else {
    int j2=newBlock.getLightOpacity(newState,world,pos);
    try {
      if (j2 > 0) {
        if (pos.getY() >= j1) {
          methodHandle_Chunk_relightBlock.invokeExact(chunk,pos.getX() & 15,pos.getY() + 1,pos.getZ() & 15);
        }
      }
 else       if (pos.getY() == j1 - 1) {
        methodHandle_Chunk_relightBlock.invokeExact(chunk,pos.getX() & 15,pos.getY(),pos.getZ() & 15);
      }
      if (j2 != k2 && (j2 < k2 || chunk.getLightFor(EnumSkyBlock.SKY,pos) > 0 || chunk.getLightFor(EnumSkyBlock.BLOCK,pos) > 0)) {
        methodHandle_Chunk_propagateSkylightOcclusion.invokeExact(chunk,pos.getX() & 15,pos.getZ() & 15);
      }
    }
 catch (    Throwable throwable) {
      throw new RuntimeException(throwable);
    }
  }
  world.checkLight(pos);
  markBlockForUpdate(world,pos);
  if (!world.isRemote) {
    world.neighborChanged(pos,Blocks.AIR,pos);
    world.neighborChanged(pos,newBlock,pos);
    world.notifyNeighborsOfStateChange(pos,newBlock,false);
    if (newState.hasComparatorInputOverride()) {
      world.updateComparatorOutputLevel(pos,newBlock);
    }
  }
}"
42132,"@SuppressWarnings(""String_Node_Str"") public static boolean silentSetBlock(Chunk chunk,BlockPos pos,Block block,int meta){
  int dx=pos.getX() & 15;
  int dz=pos.getZ() & 15;
  int y=pos.getY();
  int i1=dz << 4 | dx;
  try {
    int[] precMap=(int[])field_Chunk_precipitationHeightMap.get(chunk);
    if (y >= precMap[i1] - 1) {
      precMap[i1]=-999;
    }
  }
 catch (  Exception e) {
  }
  IBlockState state1=chunk.getBlockState(dx,y,dz);
  Block block1=state1.getBlock();
  int k1=block1.getMetaFromState(state1);
  if (block1 == block && k1 == meta) {
    return false;
  }
 else {
    ExtendedBlockStorage extendedblockstorage=chunk.getBlockStorageArray()[y >> 4];
    if (extendedblockstorage == Chunk.NULL_BLOCK_STORAGE) {
      if (block == Blocks.AIR) {
        return false;
      }
      extendedblockstorage=chunk.getBlockStorageArray()[y >> 4]=new ExtendedBlockStorage(y >> 4 << 4,!chunk.getWorld().provider.isNether());
    }
    extendedblockstorage.set(dx,y & 15,dz,block.getStateFromMeta(meta));
    chunk.setModified(true);
    return true;
  }
}","@SuppressWarnings(""String_Node_Str"") public static boolean silentSetBlock(Chunk chunk,BlockPos pos,Block block,int meta){
  int dx=pos.getX() & 15;
  int dz=pos.getZ() & 15;
  int y=pos.getY();
  int i1=dz << 4 | dx;
  try {
    int[] precMap=(int[])field_Chunk_precipitationHeightMap.get(chunk);
    if (y >= precMap[i1] - 1) {
      precMap[i1]=-999;
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  IBlockState state1=chunk.getBlockState(dx,y,dz);
  Block block1=state1.getBlock();
  int k1=block1.getMetaFromState(state1);
  if (block1 == block && k1 == meta) {
    return false;
  }
 else {
    ExtendedBlockStorage extendedblockstorage=chunk.getBlockStorageArray()[y >> 4];
    if (extendedblockstorage == Chunk.NULL_BLOCK_STORAGE) {
      if (block == Blocks.AIR) {
        return false;
      }
      extendedblockstorage=chunk.getBlockStorageArray()[y >> 4]=new ExtendedBlockStorage(y >> 4 << 4,!chunk.getWorld().provider.isNether());
    }
    extendedblockstorage.set(dx,y & 15,dz,block.getStateFromMeta(meta));
    chunk.setModified(true);
    return true;
  }
}"
42133,"public static <E>MethodHandle getMethodHandleVirtual(Class<? super E> clazz,String[] methodNames,Class<?>... paramTypes){
  Exception failed=null;
  try {
    Method method=reflectMethod(clazz,methodNames,paramTypes);
    MethodHandle handle=MethodHandles.lookup().unreflect(method);
    method.setAccessible(false);
    return handle;
  }
 catch (  IllegalAccessException e) {
    failed=e;
  }
  throw new UnableToFindMethodHandleException(methodNames,failed);
}","public static <E>MethodHandle getMethodHandleVirtual(Class<? super E> clazz,String[] methodNames,Class<?>... paramTypes){
  Exception failed;
  try {
    Method method=reflectMethod(clazz,methodNames,paramTypes);
    MethodHandle handle=MethodHandles.lookup().unreflect(method);
    method.setAccessible(false);
    return handle;
  }
 catch (  IllegalAccessException e) {
    failed=e;
  }
  throw new UnableToFindMethodHandleException(methodNames,failed);
}"
42134,"@SubscribeEvent public static void registerItems(RegistryEvent.Register<Item> event){
  IForgeRegistry<Item> registry=event.getRegistry();
  registry.register(generateItemBlock(FLBlocks.BOOSTER));
  registry.register(generateItemBlock(FLBlocks.FRAME_PROJECTOR));
  registry.register(new ItemBlockPusher(FLBlocks.PUSHER).setRegistryName(FLBlocks.PUSHER.getRegistryName()));
  registry.register(generateItemBlock(FLBlocks.SLIDER));
  registry.register(new ItemBlockTeleporter(FLBlocks.TELEPORTER).setRegistryName(FLBlocks.TELEPORTER.getRegistryName()));
  registry.register(generateItemBlock(FLBlocks.MASS_FRAME_EDGE));
  registry.register(generateItemBlock(FLBlocks.MASS_FRAME_CORNER));
  for (int i=0; i < 4; i++) {
    registry.register(generateItemBlock(FLBlocks.FRAMES[i]));
  }
  registry.register(WrenchFactory.makeMeAWrench());
}","@SubscribeEvent public static void registerItems(RegistryEvent.Register<Item> event){
  IForgeRegistry<Item> registry=event.getRegistry();
  registry.register(generateItemBlock(FLBlocks.BOOSTER));
  registry.register(generateItemBlock(FLBlocks.FRAME_PROJECTOR));
  registry.register(new ItemBlockPusher(FLBlocks.PUSHER).setRegistryName(FLBlocks.PUSHER.getRegistryName()));
  registry.register(generateItemBlock(FLBlocks.SLIDER));
  registry.register(new ItemBlockTeleporter(FLBlocks.TELEPORTER).setRegistryName(FLBlocks.TELEPORTER.getRegistryName()));
  registry.register(generateItemBlock(FLBlocks.MASS_FRAME_EDGE));
  registry.register(generateItemBlock(FLBlocks.MASS_FRAME_CORNER));
  for (int i=0; i < 4; i++) {
    registry.register(new ItemBlockFrame(FLBlocks.FRAMES[i]).setRegistryName(FLBlocks.FRAMES[i].getRegistryName()));
  }
  registry.register(WrenchFactory.makeMeAWrench());
}"
42135,"/** 
 * Start a twitter client instance
 */
public void initTwitter(){
  twClient=new TwitterFactory().getInstance();
  twClient.setOAuthConsumer(Config.CONSUMER_KEY,Config.CONSUMER_SECRET);
}","public void initTwitter(){
  twClient=new TwitterFactory().getInstance();
  twClient.setOAuthConsumer(Config.CONSUMER_KEY,Config.CONSUMER_SECRET);
}"
42136,"@Override protected void onPostExecute(Boolean operationSuccessfully){
  super.onPostExecute(operationSuccessfully);
  twitterListener.onTwitterOperationSuccess(isARetweet);
}","@Override protected void onPostExecute(Boolean operationSuccessfully){
  super.onPostExecute(operationSuccessfully);
  twitterListener.onTwitterOperationSuccess(operationSuccessfully);
}"
42137,"@Override public void onMessageReceived(MessageEvent messageEvent){
  super.onMessageReceived(messageEvent);
  String msg=messageEvent.getPath();
  if (msg.equals(Constants.MSG_SALUDATE)) {
    new RequestConnectedNodes().execute();
  }
  if (msg.equals(Constants.MSG_LOAD_LAST_TIMELINE)) {
    twHelper.requestTwitterTimeLine(twitterListener);
  }
 else   if (msg.startsWith(Constants.MSG_RETWEET)) {
    String twID=msg.split(""String_Node_Str"")[3];
    twHelper.retweet(twID);
  }
 else   if (msg.startsWith(Constants.MSG_FAVORITE)) {
    String twID=msg.split(""String_Node_Str"")[3];
    twHelper.markTweetAsFavorite(twID);
  }
}","@Override public void onMessageReceived(MessageEvent messageEvent){
  super.onMessageReceived(messageEvent);
  String msg=messageEvent.getPath();
  if (msg.equals(Constants.MSG_SALUDATE)) {
    sendMessageToWearable(Constants.MSG_AVAILABLE);
  }
  if (msg.equals(Constants.MSG_LOAD_LAST_TIMELINE)) {
    twHelper.requestTwitterTimeLine(twitterListener);
  }
 else   if (msg.startsWith(Constants.MSG_RETWEET)) {
    String twID=msg.split(""String_Node_Str"")[3];
    twHelper.retweet(twID);
  }
 else   if (msg.startsWith(Constants.MSG_FAVORITE)) {
    String twID=msg.split(""String_Node_Str"")[3];
    twHelper.markTweetAsFavorite(twID);
  }
}"
42138,"public void sendMessageToWearable(String message){
  Log.d(""String_Node_Str"",""String_Node_Str"" + (connectedNode == null));
  new SendMessageTask(message,googleApiClient,connectedNode).execute();
}","public void sendMessageToWearable(String message){
  new SendMessageTask(message,googleApiClient,connectedNode).execute();
}"
42139,"@Override public Fragment getFragment(int row,int column){
  Tweet currentTweet=tweets.get(row);
  TwitterActionFragment twitterActionFragment=new TwitterActionFragment();
  if (column == 0) {
    TweetFragment tf=new TweetFragment();
    tf.setCardTweet(currentTweet);
    return tf;
  }
 else   if (column == 1) {
    twitterActionFragment.setTwAction(TwitterAction.RETWEET);
  }
 else   if (column == 2) {
    twitterActionFragment.setTwAction(TwitterAction.FAVORITE);
  }
  twitterActionFragment.setCurrentTweet(currentTweet);
  return twitterActionFragment;
}","@Override public Fragment getFragment(int row,int column){
  Tweet currentTweet=tweets.get(row);
  TwitterActionFragment twitterActionFragment=new TwitterActionFragment();
  twitterActionFragment.setPagerListener(pListener);
  pagerRow=row;
  if (column == 0) {
    TweetFragment tf=new TweetFragment();
    tf.setCardTweet(currentTweet);
    return tf;
  }
 else   if (column == 1) {
    twitterActionFragment.setTwAction(TwitterAction.RETWEET);
  }
 else   if (column == 2) {
    twitterActionFragment.setTwAction(TwitterAction.FAVORITE);
  }
  twitterActionFragment.setCurrentTweet(currentTweet);
  return twitterActionFragment;
}"
42140,"private void initUI(){
  setContentView(R.layout.activity_wait);
  stateMessageTV=(TextView)findViewById(R.id.loading_textview);
  loadingFL=(FrameLayout)findViewById(R.id.loading_frame);
  loadingSegment=(ImageView)findViewById(R.id.loading_segment);
  loadingSegment.startAnimation(AnimationUtils.loadAnimation(this,R.anim.loading_animation));
  printWelcomeMessage();
}","private void initUI(){
  setContentView(R.layout.activity_wait);
  stateMessageTV=(TextView)findViewById(R.id.loading_textview);
  loadingFL=(FrameLayout)findViewById(R.id.loading_frame);
  loadingSegment=(ImageView)findViewById(R.id.loading_segment);
  loadingSegment.startAnimation(AnimationUtils.loadAnimation(this,R.anim.loading_animation));
}"
42141,"@Override public void onWearReady(boolean connected){
  Log.d(""String_Node_Str"",""String_Node_Str"" + connected);
  if (connected)   handler.requestTwitterTimeline();
 else {
    showError(""String_Node_Str"");
  }
}","@Override public void onWearReady(boolean connected){
  if (connected)   handler.requestTwitterTimeline();
 else {
    showError(""String_Node_Str"");
  }
}"
42142,"@Override public void onTimeLimeReceived(ArrayList<String> timeline){
  d(""String_Node_Str"",""String_Node_Str"" + timeline.size());
  Intent streamIntent=new Intent(WaitActivity.this,StreamActivity.class);
  Bundle b=new Bundle();
  b.putStringArrayList(""String_Node_Str"",timeline);
  streamIntent.putExtras(b);
  startActivity(streamIntent);
  this.finish();
}","@Override public void onTimeLimeReceived(ArrayList<String> timeline){
  Intent streamIntent=new Intent(WaitActivity.this,StreamActivity.class);
  Bundle b=new Bundle();
  b.putStringArrayList(""String_Node_Str"",timeline);
  streamIntent.putExtras(b);
  startActivity(streamIntent);
  this.finish();
}"
42143,"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.tweet_fragment,null);
  TextView name=(TextView)rootView.findViewById(R.id.tf_name);
  TextView tweet=(TextView)rootView.findViewById(R.id.tf_tweet);
  TextView time=(TextView)rootView.findViewById(R.id.tf_time);
  if (cardTweet.getTweet().length() >= 120) {
    tweet.setTextSize(tweet.getTextSize() - 10);
    name.setTextSize(name.getTextSize() - 10);
  }
  SpannableString spannableContent=new SpannableString(cardTweet.getTweet());
  Matcher matcher2=MENTION_PATTERN.matcher(cardTweet.getTweet());
  while (matcher2.find()) {
    spannableContent.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.wall_color)),matcher2.start(),matcher2.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  Matcher matcher3=HASHTAG_PATTERN.matcher(cardTweet.getTweet());
  while (matcher3.find()) {
    spannableContent.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.wall_color)),matcher3.start(),matcher3.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  name.setText(cardTweet.getName());
  tweet.setText(spannableContent);
  time.setText(cardTweet.getTime());
  return rootView;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.tweet_fragment,null);
  TextView name=(TextView)rootView.findViewById(R.id.tf_name);
  TextView tweet=(TextView)rootView.findViewById(R.id.tf_tweet);
  TextView time=(TextView)rootView.findViewById(R.id.tf_time);
  if (cardTweet.getTweet().length() >= 120) {
    tweet.setTextSize(tweet.getTextSize() - 10);
    name.setTextSize(name.getTextSize() - 10);
  }
  SpannableString spannableContent=new SpannableString(cardTweet.getTweet());
  Matcher mentionMatcher=MENTION_PATTERN.matcher(cardTweet.getTweet());
  setPatternSpan(mentionMatcher,spannableContent);
  Matcher hashtagMatcher=HASHTAG_PATTERN.matcher(cardTweet.getTweet());
  setPatternSpan(hashtagMatcher,spannableContent);
  name.setText(cardTweet.getName());
  tweet.setText(spannableContent);
  time.setText(cardTweet.getTime());
  return rootView;
}"
42144,"/** 
 * return an equivalent copy without epsilon moves
 */
protected SFT<P,F,S> removeEpsilonMoves(BooleanAlgebraSubst<P,F,S> ba){
  return removeEpsilonMovesFrom(this,ba);
}","/** 
 * return an equivalent copy without epsilon moves
 */
protected SFT<P,F,S> removeEpsilonMoves(BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  return removeEpsilonMovesFrom(this,ba);
}"
42145,"public static <P,F,S>SFT<P,F,S> MkSFT(Collection<SFTMove<P,F,S>> transitions,Integer initialState,Map<Integer,Set<List<S>>> finalStatesAndTails,BooleanAlgebraSubst<P,F,S> ba){
  SFT<P,F,S> aut=new SFT<P,F,S>();
  aut.initialState=initialState;
  for (  Integer state : finalStatesAndTails.keySet()) {
    Set<List<S>> tails=new HashSet<List<S>>();
    for (    List<S> tail : finalStatesAndTails.get(state)) {
      if (tail.size() != 0)       tails.add(tail);
    }
    aut.finalStatesAndTails.put(state,tails);
  }
  aut.states=new HashSet<Integer>();
  aut.states.add(initialState);
  aut.states.addAll(finalStatesAndTails.keySet());
  try {
    for (    SFTMove<P,F,S> t : transitions)     aut.addTransition(t,ba,false);
    return aut;
  }
 catch (  TimeoutException toe) {
    return null;
  }
}","public static <P,F,S>SFT<P,F,S> MkSFT(Collection<SFTMove<P,F,S>> transitions,Integer initialState,Map<Integer,Set<List<S>>> finalStatesAndTails,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFT<P,F,S> aut=new SFT<P,F,S>();
  aut.initialState=initialState;
  for (  Integer state : finalStatesAndTails.keySet()) {
    Set<List<S>> tails=new HashSet<List<S>>();
    for (    List<S> tail : finalStatesAndTails.get(state)) {
      if (tail.size() != 0)       tails.add(tail);
    }
    aut.finalStatesAndTails.put(state,tails);
  }
  aut.states=new HashSet<Integer>();
  aut.states.add(initialState);
  aut.states.addAll(finalStatesAndTails.keySet());
  try {
    for (    SFTMove<P,F,S> t : transitions)     aut.addTransition(t,ba,false);
  }
 catch (  TimeoutException toe) {
    return null;
  }
  aut.isDeterministic=aut.checkDeterminism(ba);
  return aut;
}"
42146,"/** 
 * convert a sfa to a sft by adding empty set of output functions in every transition
 * @return corresponding sft
 */
private static <P,F,S>SFT<P,F,S> SFAtoSFT(SFA<P,S> sfa,BooleanAlgebraSubst<P,F,S> ba){
  Collection<SFTMove<P,F,S>> transitions=new ArrayList<SFTMove<P,F,S>>();
  for (  Integer state : sfa.getStates()) {
    for (    SFAInputMove<P,S> transition : sfa.getInputMovesFrom(state)) {
      List<F> outputFunctions=new LinkedList<F>();
      SFTInputMove<P,F,S> newTrans=new SFTInputMove<P,F,S>(transition.from,transition.to,transition.guard,outputFunctions);
      transitions.add(newTrans);
    }
    for (    SFAEpsilon<P,S> transition : sfa.getEpsilonFrom(state)) {
      List<S> outputs=new LinkedList<S>();
      SFTEpsilon<P,F,S> newTrans=new SFTEpsilon<P,F,S>(transition.from,transition.to,outputs);
      transitions.add(newTrans);
    }
  }
  Map<Integer,Set<List<S>>> finalStatesAndTails=new HashMap<Integer,Set<List<S>>>();
  for (  Integer finalState : sfa.getFinalStates())   finalStatesAndTails.put(finalState,new HashSet<List<S>>());
  return MkSFT(transitions,sfa.getInitialState(),finalStatesAndTails,ba);
}","/** 
 * convert a sfa to a sft by adding empty set of output functions in every transition
 * @return corresponding sft
 */
private static <P,F,S>SFT<P,F,S> SFAtoSFT(SFA<P,S> sfa,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  Collection<SFTMove<P,F,S>> transitions=new ArrayList<SFTMove<P,F,S>>();
  for (  Integer state : sfa.getStates()) {
    for (    SFAInputMove<P,S> transition : sfa.getInputMovesFrom(state)) {
      List<F> outputFunctions=new LinkedList<F>();
      SFTInputMove<P,F,S> newTrans=new SFTInputMove<P,F,S>(transition.from,transition.to,transition.guard,outputFunctions);
      transitions.add(newTrans);
    }
    for (    SFAEpsilon<P,S> transition : sfa.getEpsilonFrom(state)) {
      List<S> outputs=new LinkedList<S>();
      SFTEpsilon<P,F,S> newTrans=new SFTEpsilon<P,F,S>(transition.from,transition.to,outputs);
      transitions.add(newTrans);
    }
  }
  Map<Integer,Set<List<S>>> finalStatesAndTails=new HashMap<Integer,Set<List<S>>>();
  for (  Integer finalState : sfa.getFinalStates())   finalStatesAndTails.put(finalState,new HashSet<List<S>>());
  return MkSFT(transitions,sfa.getInitialState(),finalStatesAndTails,ba);
}"
42147,"/** 
 * return an equivalent copy without epsilon moves
 */
protected static <P,F,S>SFT<P,F,S> removeEpsilonMovesFrom(SFT<P,F,S> sft,BooleanAlgebraSubst<P,F,S> ba){
  if (sft.isEpsilonFree)   return sft;
  Collection<SFTMove<P,F,S>> transitions=new ArrayList<SFTMove<P,F,S>>();
  Map<Integer,Set<List<S>>> finalStatesAndTails=new HashMap<Integer,Set<List<S>>>();
  for (  Integer state : sft.getStates())   transitions.addAll(sft.getInputMovesFrom(state));
  for (  Integer state : sft.getStates()) {
    Map<Integer,List<SFTEpsilon<P,F,S>>> epsilonClosureAndPath=sft.getSFTEpsClosureAndPath(state);
    if (!sft.isFinalState(state))     for (    Integer nextState : epsilonClosureAndPath.keySet()) {
      if (sft.isFinalState(nextState)) {
        List<S> outputAlongPath=new ArrayList<S>();
        for (        SFTEpsilon<P,F,S> transition : epsilonClosureAndPath.get(nextState)) {
          for (          S output : transition.outputs)           outputAlongPath.add(output);
        }
        Set<List<S>> newTails=new HashSet<List<S>>();
        if (sft.getFinalStatesAndTails().get(nextState).size() == 0) {
          newTails.add(outputAlongPath);
        }
 else {
          for (          List<S> tail : sft.getFinalStatesAndTails().get(nextState)) {
            List<S> newTail=new ArrayList<S>(outputAlongPath);
            newTail.addAll(tail);
          }
        }
        if (finalStatesAndTails.containsKey(state))         newTails.addAll(finalStatesAndTails.get(state));
        finalStatesAndTails.put(state,newTails);
      }
    }
    for (    Integer nextState : epsilonClosureAndPath.keySet())     if (!nextState.equals(state)) {
      List<F> outputFuncAlongPath=new ArrayList<F>();
      for (      SFTEpsilon<P,F,S> transition : epsilonClosureAndPath.get(nextState)) {
        for (        S output : transition.outputs)         outputFuncAlongPath.add(ba.MkFuncConst(output));
      }
      for (      SFTInputMove<P,F,S> nextInputMove : sft.getInputMovesFrom(nextState)) {
        List<F> combinedOutputFunctions=new ArrayList<F>(outputFuncAlongPath);
        combinedOutputFunctions.addAll(nextInputMove.outputFunctions);
        transitions.add(new SFTInputMove<P,F,S>(state,nextInputMove.to,nextInputMove.guard,combinedOutputFunctions));
      }
    }
  }
  return MkSFT(transitions,sft.initialState,finalStatesAndTails,ba);
}","/** 
 * return an equivalent copy without epsilon moves
 */
protected static <P,F,S>SFT<P,F,S> removeEpsilonMovesFrom(SFT<P,F,S> sft,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  if (sft.isEpsilonFree)   return sft;
  Collection<SFTMove<P,F,S>> transitions=new ArrayList<SFTMove<P,F,S>>();
  Map<Integer,Set<List<S>>> finalStatesAndTails=new HashMap<Integer,Set<List<S>>>();
  for (  Integer state : sft.getStates())   transitions.addAll(sft.getInputMovesFrom(state));
  for (  Integer state : sft.getStates()) {
    Map<Integer,List<SFTEpsilon<P,F,S>>> epsilonClosureAndPath=sft.getSFTEpsClosureAndPath(state);
    if (!sft.isFinalState(state))     for (    Integer nextState : epsilonClosureAndPath.keySet()) {
      if (sft.isFinalState(nextState)) {
        List<S> outputAlongPath=new ArrayList<S>();
        for (        SFTEpsilon<P,F,S> transition : epsilonClosureAndPath.get(nextState)) {
          for (          S output : transition.outputs)           outputAlongPath.add(output);
        }
        Set<List<S>> newTails=new HashSet<List<S>>();
        if (sft.getFinalStatesAndTails().get(nextState).size() == 0) {
          newTails.add(outputAlongPath);
        }
 else {
          for (          List<S> tail : sft.getFinalStatesAndTails().get(nextState)) {
            List<S> newTail=new ArrayList<S>(outputAlongPath);
            newTail.addAll(tail);
          }
        }
        if (finalStatesAndTails.containsKey(state))         newTails.addAll(finalStatesAndTails.get(state));
        finalStatesAndTails.put(state,newTails);
      }
    }
    for (    Integer nextState : epsilonClosureAndPath.keySet())     if (!nextState.equals(state)) {
      List<F> outputFuncAlongPath=new ArrayList<F>();
      for (      SFTEpsilon<P,F,S> transition : epsilonClosureAndPath.get(nextState)) {
        for (        S output : transition.outputs)         outputFuncAlongPath.add(ba.MkFuncConst(output));
      }
      for (      SFTInputMove<P,F,S> nextInputMove : sft.getInputMovesFrom(nextState)) {
        List<F> combinedOutputFunctions=new ArrayList<F>(outputFuncAlongPath);
        combinedOutputFunctions.addAll(nextInputMove.outputFunctions);
        transitions.add(new SFTInputMove<P,F,S>(state,nextInputMove.to,nextInputMove.guard,combinedOutputFunctions));
      }
    }
  }
  return MkSFT(transitions,sft.initialState,finalStatesAndTails,ba);
}"
42148,"public static SFT<CharPred,CharFunc,Character> getTestSFTCounterexample(){
  List<SFTMove<CharPred,CharFunc,Character>> transitions=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates;
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet=new HashSet<>();
  finalStatesSet.add(0);
  finalStates=setToFTMap(finalStatesSet);
  return SFT.MkSFT(transitions,0,finalStates,ba);
}","public static SFT<CharPred,CharFunc,Character> getTestSFTCounterexample() throws Exception {
  List<SFTMove<CharPred,CharFunc,Character>> transitions=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates;
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet=new HashSet<>();
  finalStatesSet.add(0);
  finalStates=setToFTMap(finalStatesSet);
  return SFT.MkSFT(transitions,0,finalStates,ba);
}"
42149,"public static SFT<CharPred,CharFunc,Character> getTestSFTTotal(){
  List<SFTMove<CharPred,CharFunc,Character>> transitions=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates;
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,2,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(1,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(1,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(2,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(2,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(3,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(3,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet=new HashSet<>();
  finalStatesSet.add(0);
  finalStatesSet.add(1);
  finalStatesSet.add(2);
  finalStatesSet.add(3);
  finalStates=setToFTMap(finalStatesSet);
  return SFT.MkSFT(transitions,0,finalStates,ba);
}","public static SFT<CharPred,CharFunc,Character> getTestSFTTotal() throws Exception {
  List<SFTMove<CharPred,CharFunc,Character>> transitions=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates;
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(0,2,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(1,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(1,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(2,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(2,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(3,3,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  transitions.add(new SFTInputMove<CharPred,CharFunc,Character>(3,3,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet=new HashSet<>();
  finalStatesSet.add(0);
  finalStatesSet.add(1);
  finalStatesSet.add(2);
  finalStatesSet.add(3);
  finalStates=setToFTMap(finalStatesSet);
  return SFT.MkSFT(transitions,0,finalStates,ba);
}"
42150,"/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality (partial equivalent) Page 6, in the middle of left column, figure 3
 * @param sft1withEps symbolic finite transducer 1 who may have epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may have epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.isFinalState(currState)) {
        Set<List<S>> tails1=checkNotNull(product.getFinalStatesAndTails().get(currState).first);
        Set<List<S>> tails2=checkNotNull(product.getFinalStatesAndTails().get(currState).second);
        if (tails1.size() > 1 || tails2.size() > 1)         return false;
        List<F> finalU=new ArrayList<F>(u);
        List<F> finalV=new ArrayList<F>(v);
        for (        List<S> tail : tails1)         for (        S element : tail)         finalU.add(ba.MkFuncConst(element));
        for (        List<S> tail : tails2)         for (        S element : tail)         finalV.add(ba.MkFuncConst(element));
        if (finalU.size() != finalV.size())         return false;
        for (int i=0; i < finalU.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,finalU.get(i),finalV.get(i)))         return false;
      }
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}","/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality (partial equivalent) Page 6, in the middle of left column, figure 3
 * @param sft1withEps symbolic finite transducer 1 who may have epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may have epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.isFinalState(currState)) {
        Set<List<S>> tails1=checkNotNull(product.getFinalStatesAndTails().get(currState).first);
        Set<List<S>> tails2=checkNotNull(product.getFinalStatesAndTails().get(currState).second);
        if (tails1.size() > 1 || tails2.size() > 1)         return false;
        List<F> finalU=new ArrayList<F>(u);
        List<F> finalV=new ArrayList<F>(v);
        for (        List<S> tail : tails1)         for (        S element : tail)         finalU.add(ba.MkFuncConst(element));
        for (        List<S> tail : tails2)         for (        S element : tail)         finalV.add(ba.MkFuncConst(element));
        if (finalU.size() != finalV.size())         return false;
        for (int i=0; i < finalU.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,finalU.get(i),finalV.get(i)))         return false;
      }
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        Integer nextState=transition.to;
        if (reached.containsKey(nextState) && !reached.get(nextState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(nextState)) {
          toVisit.push(nextState);
          reached.put(nextState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        Integer nextState=transition.to;
        if (reached.containsKey(nextState) && !reached.get(nextState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(nextState)) {
          toVisit.push(nextState);
          reached.put(nextState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}"
42151,"/** 
 * generate a witness if <code>sft1withEps</code> and <code>sft2withEps</code> are not 1-equality
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>List<S> witness1disequality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  HashMap<Integer,List<S>> path=new HashMap<Integer,List<S>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  toVisit.add(product.getInitialState());
  path.put(product.getInitialState(),new ArrayList<S>());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<S> previousPath=new ArrayList<S>(path.get(transition.from));
      previousPath.add((S)transition.getWitness(ba));
      path.put(transition.to,previousPath);
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.isFinalState(currState)) {
        Set<List<S>> tails1=checkNotNull(product.getFinalStatesAndTails().get(currState).first);
        Set<List<S>> tails2=checkNotNull(product.getFinalStatesAndTails().get(currState).second);
        if (tails1.size() > 1 || tails2.size() > 1)         return previousPath;
        List<F> finalU=new ArrayList<F>(u);
        List<F> finalV=new ArrayList<F>(v);
        for (        List<S> tail : tails1)         for (        S element : tail)         finalU.add(ba.MkFuncConst(element));
        for (        List<S> tail : tails2)         for (        S element : tail)         finalV.add(ba.MkFuncConst(element));
        if (finalU.size() != finalV.size())         return previousPath;
        for (int i=0; i < finalU.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,finalU.get(i),finalV.get(i)))         return previousPath;
      }
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>()))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return null;
}","/** 
 * generate a witness if <code>sft1withEps</code> and <code>sft2withEps</code> are not 1-equality
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>List<S> witness1disequality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  HashMap<Integer,List<S>> path=new HashMap<Integer,List<S>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  toVisit.add(product.getInitialState());
  path.put(product.getInitialState(),new ArrayList<S>());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<S> previousPath=new ArrayList<S>(path.get(transition.from));
      previousPath.add((S)transition.getWitness(ba));
      path.put(transition.to,previousPath);
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.isFinalState(currState)) {
        Set<List<S>> tails1=checkNotNull(product.getFinalStatesAndTails().get(currState).first);
        Set<List<S>> tails2=checkNotNull(product.getFinalStatesAndTails().get(currState).second);
        if (tails1.size() > 1 || tails2.size() > 1)         return previousPath;
        List<F> finalU=new ArrayList<F>(u);
        List<F> finalV=new ArrayList<F>(v);
        for (        List<S> tail : tails1)         for (        S element : tail)         finalU.add(ba.MkFuncConst(element));
        for (        List<S> tail : tails2)         for (        S element : tail)         finalV.add(ba.MkFuncConst(element));
        if (finalU.size() != finalV.size())         return previousPath;
        for (int i=0; i < finalU.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,finalU.get(i),finalV.get(i)))         return previousPath;
      }
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        Integer nextState=transition.to;
        if (reached.containsKey(nextState) && !reached.get(nextState).equals(new Pair(c,new ArrayList<S>()))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (!reached.containsKey(nextState)) {
          toVisit.push(nextState);
          reached.put(nextState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        Integer nextState=transition.to;
        if (reached.containsKey(nextState) && !reached.get(nextState).equals(new Pair(new ArrayList<S>(),c))) {
          previousPath.addAll(product.getWitness(transition.to,ba));
          return previousPath;
        }
        if (!reached.containsKey(nextState)) {
          toVisit.push(nextState);
          reached.put(nextState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return null;
}"
42152,"/** 
 * Check whether a SFT is deterministic
 */
private boolean checkDeterminism(BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  if (!isEpsilonFree) {
    return false;
  }
 else {
    for (    Integer state : getStates()) {
      ArrayList<SFTInputMove<P,F,S>> trset=new ArrayList<SFTInputMove<P,F,S>>(getInputMovesFrom(state));
      for (int i=0; i < trset.size(); i++) {
        for (int j=i + 1; j < trset.size(); j++) {
          P union=ba.MkAnd(trset.get(i).guard,trset.get(j).guard);
          if (ba.IsSatisfiable(union)) {
            if (trset.get(i).outputFunctions.size() != trset.get(j).outputFunctions.size())             return false;
            for (int k=0; k < trset.get(i).outputFunctions.size(); k++)             if (!ba.CheckGuardedEquality(union,trset.get(i).outputFunctions.get(k),trset.get(j).outputFunctions.get(k)))             return false;
          }
        }
      }
    }
  }
  return true;
}","/** 
 * Check whether a SFT is deterministic
 */
private boolean checkDeterminism(BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  if (!isEpsilonFree) {
    return false;
  }
 else {
    for (    Integer state : getStates()) {
      ArrayList<SFTInputMove<P,F,S>> trset=new ArrayList<SFTInputMove<P,F,S>>(getInputMovesFrom(state));
      for (int i=0; i < trset.size(); i++) {
        for (int j=i + 1; j < trset.size(); j++) {
          if (ba.IsSatisfiable(ba.MkAnd(trset.get(i).guard,trset.get(j).guard))) {
            return false;
          }
        }
      }
    }
  }
  return true;
}"
42153,"/** 
 * Method: MkSFT(Collection<SFTMove<P, F, S>> transitions, Integer initialState, Collection<Integer> finalStates, BooleanAlgebraSubst<P, F, S> ba)
 */
@Test public void testMkSFT() throws Exception {
  List<SFTMove<CharPred,CharFunc,Character>> transitions1=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates1;
  transitions1.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions1.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet1=new HashSet<>();
  finalStatesSet1.add(0);
  finalStates1=setToFTMap(finalStatesSet1);
  SFT<CharPred,CharFunc,Character> myMkSFT1=SFT.MkSFT(transitions1,0,finalStates1,ba);
  assertTrue(myMkSFT1.isDeterministic());
  assertTrue(mySFT111.isDeterministic());
  assertTrue(mySFT121.isDeterministic());
  assertTrue(mySFT122.isDeterministic());
  assertTrue(mySFT123.isDeterministic());
  assertTrue(mySFT131.isDeterministic());
  assertTrue(mySFT211.isDeterministic());
  assertTrue(mySFT221.isDeterministic());
  assertTrue(mySFT222.isDeterministic());
  assertTrue(mySFT223.isDeterministic());
  assertFalse(mySFT231.isDeterministic());
  assertFalse(mySFT232.isDeterministic());
  assertTrue(mySFT241.isDeterministic());
  assertTrue(mySFT242.isDeterministic());
  assertFalse(mySFT251.isDeterministic());
  assertFalse(mySFT252.isDeterministic());
  assertFalse(mySFT261.isDeterministic());
  assertFalse(mySFT311.isDeterministic());
  assertFalse(mySFT321.isDeterministic());
  assertTrue(mySFT331.isDeterministic());
  assertTrue(mySFT411.isDeterministic());
  assertFalse(mySFT421.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions2=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates2;
  transitions2.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions2.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet2=new HashSet<>();
  finalStatesSet2.add(0);
  finalStates2=setToFTMap(finalStatesSet2);
  SFT<CharPred,CharFunc,Character> myMkSFT2=SFT.MkSFT(transitions2,0,finalStates2,ba);
  assertFalse(myMkSFT2.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions3=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates3;
  transitions3.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions3.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet3=new HashSet<>();
  finalStatesSet3.add(0);
  finalStatesSet3.add(1);
  finalStates3=setToFTMap(finalStatesSet3);
  SFT<CharPred,CharFunc,Character> myMkSFT3=SFT.MkSFT(transitions3,0,finalStates3,ba);
  assertFalse(myMkSFT3.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions4=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates4;
  transitions4.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions4.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet4=new HashSet<>();
  finalStatesSet4.add(0);
  finalStates4=setToFTMap(finalStatesSet4);
  SFT<CharPred,CharFunc,Character> myMkSFT4=SFT.MkSFT(transitions4,0,finalStates4,ba);
  assertTrue(myMkSFT4.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions5=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates5;
  transitions5.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions5.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet5=new HashSet<>();
  finalStatesSet5.add(0);
  finalStatesSet5.add(1);
  finalStates5=setToFTMap(finalStatesSet5);
  SFT<CharPred,CharFunc,Character> myMkSFT5=SFT.MkSFT(transitions5,0,finalStates5,ba);
  assertTrue(myMkSFT5.isDeterministic());
}","/** 
 * Method: MkSFT(Collection<SFTMove<P, F, S>> transitions, Integer initialState, Collection<Integer> finalStates, BooleanAlgebraSubst<P, F, S> ba)
 */
@Test public void testMkSFT() throws Exception {
  List<SFTMove<CharPred,CharFunc,Character>> transitions1=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates1;
  transitions1.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b'),stringToCharFunc(""String_Node_Str"")));
  transitions1.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet1=new HashSet<>();
  finalStatesSet1.add(0);
  finalStates1=setToFTMap(finalStatesSet1);
  SFT<CharPred,CharFunc,Character> myMkSFT1=SFT.MkSFT(transitions1,0,finalStates1,ba);
  assertTrue(myMkSFT1.isDeterministic());
  assertTrue(mySFT111.isDeterministic());
  assertTrue(mySFT121.isDeterministic());
  assertTrue(mySFT122.isDeterministic());
  assertTrue(mySFT123.isDeterministic());
  assertTrue(mySFT131.isDeterministic());
  assertTrue(mySFT211.isDeterministic());
  assertTrue(mySFT221.isDeterministic());
  assertTrue(mySFT222.isDeterministic());
  assertTrue(mySFT223.isDeterministic());
  assertFalse(mySFT231.isDeterministic());
  assertFalse(mySFT232.isDeterministic());
  assertTrue(mySFT241.isDeterministic());
  assertTrue(mySFT242.isDeterministic());
  assertFalse(mySFT251.isDeterministic());
  assertFalse(mySFT252.isDeterministic());
  assertFalse(mySFT261.isDeterministic());
  assertFalse(mySFT311.isDeterministic());
  assertFalse(mySFT321.isDeterministic());
  assertTrue(mySFT331.isDeterministic());
  assertTrue(mySFT411.isDeterministic());
  assertFalse(mySFT421.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions2=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates2;
  transitions2.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions2.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet2=new HashSet<>();
  finalStatesSet2.add(0);
  finalStates2=setToFTMap(finalStatesSet2);
  SFT<CharPred,CharFunc,Character> myMkSFT2=SFT.MkSFT(transitions2,0,finalStates2,ba);
  assertFalse(myMkSFT2.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions3=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates3;
  transitions3.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions3.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet3=new HashSet<>();
  finalStatesSet3.add(0);
  finalStatesSet3.add(1);
  finalStates3=setToFTMap(finalStatesSet3);
  SFT<CharPred,CharFunc,Character> myMkSFT3=SFT.MkSFT(transitions3,0,finalStates3,ba);
  assertFalse(myMkSFT3.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions4=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates4;
  transitions4.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions4.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet4=new HashSet<>();
  finalStatesSet4.add(0);
  finalStates4=setToFTMap(finalStatesSet4);
  SFT<CharPred,CharFunc,Character> myMkSFT4=SFT.MkSFT(transitions4,0,finalStates4,ba);
  assertFalse(myMkSFT4.isDeterministic());
  List<SFTMove<CharPred,CharFunc,Character>> transitions5=new LinkedList<>();
  Map<Integer,Set<List<Character>>> finalStates5;
  transitions5.add(new SFTInputMove<CharPred,CharFunc,Character>(0,1,new CharPred('a','d'),stringToCharFunc(""String_Node_Str"")));
  transitions5.add(new SFTInputMove<CharPred,CharFunc,Character>(0,0,new CharPred('b','e'),stringToCharFunc(""String_Node_Str"")));
  HashSet<Integer> finalStatesSet5=new HashSet<>();
  finalStatesSet5.add(0);
  finalStatesSet5.add(1);
  finalStates5=setToFTMap(finalStatesSet5);
  SFT<CharPred,CharFunc,Character> myMkSFT5=SFT.MkSFT(transitions5,0,finalStates5,ba);
  assertFalse(myMkSFT5.isDeterministic());
}"
42154,"public CharPred substIn(CharPred p,UnaryCharIntervalSolver cs){
  return checkNotNull(p).isSatisfiedBy(c) ? StdCharPred.TRUE : StdCharPred.FALSE;
}","public CharPred substIn(CharPred p,UnaryCharIntervalSolver cs){
  return new CharPred(c);
}"
42155,"public CharPred substIn(CharPred p,UnaryCharIntervalSolver cs){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  ImmutablePair<Character,Character> interval : checkNotNull(p).intervals) {
    long leftPrime=charSnap(interval.left - increment);
    long rightPrime=charSnap(interval.right - increment);
    intervals.add(ImmutablePair.of((char)leftPrime,(char)rightPrime));
  }
  return new CharPred(intervals.build());
}","public CharPred substIn(CharPred p,UnaryCharIntervalSolver cs){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  ImmutablePair<Character,Character> interval : checkNotNull(p).intervals) {
    long leftPrime=charSnap(interval.left + increment);
    long rightPrime=charSnap(interval.right + increment);
    intervals.add(ImmutablePair.of((char)leftPrime,(char)rightPrime));
  }
  return new CharPred(intervals.build());
}"
42156,"/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality Page 6, in the middle of left column, figure 3
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba){
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.getFinalStates().contains(currState) && u.size() != v.size())       return false;
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!u.get(i).equals(v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=null;
        try {
          witness=(S)transition.getWitness(ba);
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         try {
          if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))           return false;
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!u.get(i).equals(v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(u.get(i));
        S witness=null;
        try {
          witness=(S)transition.getWitness(ba);
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         try {
          if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))           return false;
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}","/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality (partial equivalent) Page 6, in the middle of left column, figure 3 Warning: it cannot recognize that when input is 'b', lambda x.x is equivalent to lambda x.b
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba){
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.getFinalStates().contains(currState) && u.size() != v.size())       return false;
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!u.get(i).equals(v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=null;
        try {
          witness=(S)transition.getWitness(ba);
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         try {
          if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))           return false;
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!u.get(i).equals(v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=null;
        try {
          witness=(S)transition.getWitness(ba);
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         try {
          if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))           return false;
        }
 catch (        TimeoutException te) {
          te.printStackTrace();
        }
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}"
42157,"/** 
 * Given a symbolic finite transducer and the start state, return all possible transition chains in <code>steps</code> steps
 * @param sft symbolic finite transducer
 * @param startState the start state which could be any state, including but not limited to the initial state
 * @param steps the number of steps, which should be a natural number
 * @return
 */
private static <P,F,S>List<List<Integer>> possibleTransitionChains(SFTProduct<P,F,S> sft,Integer startState,int steps){
  List<List<Integer>> chains=new LinkedList<List<Integer>>();
  List<Integer> tempList=new LinkedList<Integer>();
  tempList.add(startState);
  backtrack(chains,tempList,sft,startState,steps);
  return chains;
}","/** 
 * Given a symbolic finite transducer and the start state, return all possible transition chains in <code>steps</code> steps
 * @param sft symbolic finite transducer
 * @param startState the start state which could be any state, including but not limited to the initial state
 * @param steps the number of steps, which should be a natural number
 * @return
 */
private static <P,F,S>List<List<SFTProductInputMove<P,F,S>>> possibleTransitionChains(SFTProduct<P,F,S> sft,Integer startState,int steps){
  List<List<SFTProductInputMove<P,F,S>>> chains=new ArrayList<List<SFTProductInputMove<P,F,S>>>();
  for (  SFTProductInputMove<P,F,S> initialTransition : sft.getInputMovesFrom(startState)) {
    List<SFTProductInputMove<P,F,S>> tempList=new LinkedList<SFTProductInputMove<P,F,S>>();
    tempList.add(initialTransition);
    backtrack(chains,tempList,sft,steps - 1);
  }
  return chains;
}"
42158,"private List<List<Integer>> getPossibleTransitionChains(Integer startState,int steps){
  return possibleTransitionChains(this,startState,steps);
}","private List<List<SFTProductInputMove<P,F,S>>> getPossibleTransitionChains(Integer startState,int steps){
  return possibleTransitionChains(this,startState,steps);
}"
42159,"private static <P,F,S>void backtrack(List<List<Integer>> chains,List<Integer> tempList,SFTProduct<P,F,S> sft,Integer currentState,int remainSteps){
  if (remainSteps < 0)   return;
 else   if (remainSteps == 0)   chains.add(new ArrayList<>(tempList));
 else {
    for (    SFTProductInputMove<P,F,S> transition : sft.getInputMovesFrom(currentState)) {
      tempList.add(transition.to);
      backtrack(chains,tempList,sft,transition.to,remainSteps - 1);
      tempList.remove(tempList.size() - 1);
    }
  }
}","private static <P,F,S>void backtrack(List<List<SFTProductInputMove<P,F,S>>> chains,List<SFTProductInputMove<P,F,S>> tempList,SFTProduct<P,F,S> sft,int remainSteps){
  if (remainSteps < 0)   return;
 else   if (remainSteps == 0)   chains.add(new ArrayList<SFTProductInputMove<P,F,S>>(tempList));
 else {
    Integer currentState=tempList.get(tempList.size() - 1).to;
    for (    SFTProductInputMove<P,F,S> transition : sft.getInputMovesFrom(currentState)) {
      tempList.add(transition);
      backtrack(chains,tempList,sft,remainSteps - 1);
      tempList.remove(tempList.size() - 1);
    }
  }
}"
42160,"/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality (partial equivalent) Page 6, in the middle of left column, figure 3 Warning: it cannot recognize that when input is 'b', lambda x.x is equivalent to lambda x.b
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.getFinalStates().contains(currState) && u.size() != v.size())       return false;
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}","/** 
 * judge whether <code>sft1withEps</code> and <code>sft2withEps</code> are 1-equality (partial equivalent) Page 6, in the middle of left column, figure 3
 * @param sft1withEps symbolic finite transducer 1 who may has epsilon transitions
 * @param sft2withEps symbolic finite transducer 2 who may has epsilon transitions
 */
public static <P,F,S>boolean decide1equality(SFT<P,F,S> sft1withEps,SFT<P,F,S> sft2withEps,BooleanAlgebraSubst<P,F,S> ba) throws TimeoutException {
  SFTProduct<P,F,S> product=SFTProduct.MkSFTProduct(sft1withEps,sft2withEps,ba);
  HashMap<Integer,Pair<List<S>,List<S>>> reached=new HashMap<Integer,Pair<List<S>,List<S>>>();
  reached.put(product.getInitialState(),new Pair(new ArrayList<S>(),new ArrayList<S>()));
  LinkedList<Integer> toVisit=new LinkedList<Integer>();
  toVisit.add(product.getInitialState());
  while (!toVisit.isEmpty()) {
    Integer currState=toVisit.pop();
    Pair<List<S>,List<S>> promise=reached.get(currState);
    for (    SFTProductInputMove transition : product.getInputMovesFrom(currState)) {
      List<F> u=new ArrayList<F>();
      List<F> v=new ArrayList<F>();
      for (      S a : promise.first)       u.add(ba.MkFuncConst(a));
      for (      S b : promise.second)       v.add(ba.MkFuncConst(b));
      u.addAll(transition.outputFunctions1);
      v.addAll(transition.outputFunctions2);
      if (product.getFinalStates().contains(currState) && u.size() != v.size())       return false;
      if (u.size() >= v.size()) {
        for (int i=0; i < v.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=v.size(); i < u.size(); i++)         w.add(u.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < u.size() - v.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < u.size() - v.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(c,new ArrayList<S>())))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(c,new ArrayList<S>()));
        }
      }
 else {
        for (int i=0; i < u.size(); i++)         if (!ba.CheckGuardedEquality((P)transition.guard,u.get(i),v.get(i)))         return false;
        List<F> w=new ArrayList<F>();
        for (int i=u.size(); i < v.size(); i++)         w.add(v.get(i));
        S witness=(S)transition.getWitness(ba);
        List<S> c=new ArrayList<S>();
        List<F> cF=new ArrayList<F>();
        for (int i=0; i < v.size() - u.size(); i++) {
          c.add(ba.MkSubstFuncConst(w.get(i),witness));
          cF.add(ba.MkSubstFuncFunc(w.get(i),ba.MkFuncConst(witness)));
        }
        for (int i=0; i < v.size() - u.size(); i++)         if (!ba.AreEquivalent(ba.MkSubstFuncPred(w.get(i),(P)transition.guard),ba.MkSubstFuncPred(cF.get(i),(P)transition.guard)))         return false;
        if (reached.containsKey(currState) && !reached.get(currState).equals(new Pair(new ArrayList<S>(),c)))         return false;
        if (!reached.containsKey(currState)) {
          toVisit.push(currState);
          reached.put(currState,new Pair(new ArrayList<S>(),c));
        }
      }
    }
  }
  return true;
}"
42161,"@Override public boolean CheckGuardedEquality(CharPred p,CharFunc f1,CharFunc f2){
  CharPred f1Output, f2Output;
  if (checkNotNull(f1) instanceof CharOffset) {
    CharFunc inverseF1=new CharOffset(-((CharOffset)f1).increment);
    f1Output=this.MkSubstFuncPred(inverseF1,checkNotNull(p));
  }
 else {
    f1Output=new CharPred(((CharConstant)f1).c);
  }
  if (checkNotNull(f2) instanceof CharOffset) {
    CharFunc inverseF2=new CharOffset(-((CharOffset)f2).increment);
    f2Output=this.MkSubstFuncPred(inverseF2,checkNotNull(p));
  }
 else {
    f2Output=new CharPred(((CharConstant)f2).c);
  }
  return this.AreEquivalent(f1Output,f2Output);
}","@Override public boolean CheckGuardedEquality(CharPred p,CharFunc f1,CharFunc f2){
  CharPred f1IsNotEqualTof2;
  if (checkNotNull(f1) instanceof CharConstant && checkNotNull(f2) instanceof CharConstant)   f1IsNotEqualTof2=((CharConstant)f1).c == ((CharConstant)f2).c ? False() : True();
 else   if (checkNotNull(f1) instanceof CharConstant && checkNotNull(f2) instanceof CharOffset)   f1IsNotEqualTof2=MkNot(MkSubstFuncPred(f2,new CharPred(((CharConstant)f1).c)));
 else   if (checkNotNull(f1) instanceof CharOffset && checkNotNull(f2) instanceof CharConstant)   f1IsNotEqualTof2=MkNot(MkSubstFuncPred(f1,new CharPred(((CharConstant)f2).c)));
 else   f1IsNotEqualTof2=((CharOffset)f1).increment == ((CharOffset)f2).increment ? False() : True();
  return !IsSatisfiable(MkAnd(p,f1IsNotEqualTof2));
}"
42162,"@Override public CartesianProduct<P1,P2> MkNot(CartesianProduct<P1,P2> p) throws TimeoutException {
  ArrayList<Pair<P1,P2>> newProducts=new ArrayList<>();
  P1 leftover=ba1.True();
  for (  Pair<P1,P2> pair : p.getProducts()) {
    leftover=ba1.MkAnd(leftover,ba1.MkNot(pair.first));
    P2 newRight=ba2.MkNot(pair.second);
    if (ba2.IsSatisfiable(newRight))     newProducts.add(new Pair<P1,P2>(pair.first,newRight));
  }
  if (ba1.IsSatisfiable(leftover))   newProducts.add(new Pair<P1,P2>(leftover,ba2.True()));
  return new CartesianProduct<>(newProducts);
}","@Override public CartesianProduct<P1,P2> MkNot(CartesianProduct<P1,P2> p) throws TimeoutException {
  ArrayList<CartesianProduct<P1,P2>> conjuncts=new ArrayList<>();
  for (  Pair<P1,P2> pair : p.getProducts()) {
    List<Pair<P1,P2>> temp=new ArrayList<Pair<P1,P2>>();
    temp.add(new Pair<P1,P2>(ba1.MkNot(pair.first),ba2.True()));
    temp.add(new Pair<P1,P2>(ba1.True(),ba2.MkNot(pair.second)));
    conjuncts.add(new CartesianProduct<P1,P2>(temp));
  }
  return MkAnd(conjuncts);
}"
42163,"/** 
 * Returns true if the SAFA accepts the input list
 * @param input
 * @param ba
 * @return true if accepted false otherwise
 * @throws TimeoutException
 */
public static <P,S>SFA<P,S> getReverseSFA(SAFA<P,S> aut,BooleanAlgebra<P,S> ba) throws TimeoutException {
  Collection<SFAMove<P,S>> transitions=new ArrayList<SFAMove<P,S>>();
  Integer initialState=0;
  Collection<Integer> finalStates=new ArrayList<Integer>();
  HashMap<HashSet<Integer>,Integer> reached=new HashMap<HashSet<Integer>,Integer>();
  LinkedList<HashSet<Integer>> toVisit=new LinkedList<HashSet<Integer>>();
  HashSet<Integer> init=new HashSet<>(aut.finalStates);
  reached.put(init,0);
  toVisit.add(init);
  while (!toVisit.isEmpty()) {
    HashSet<Integer> currentState=toVisit.removeFirst();
    int currentStateID=reached.get(currentState);
    ArrayList<SAFAInputMove<P,S>> movesToCurr=new ArrayList<>();
    ArrayList<P> predicatesToCurr=new ArrayList<>();
    if (currentState.contains(aut.initialState))     finalStates.add(currentStateID);
    for (    SAFAInputMove<P,S> t : aut.getInputMoves())     if (t.to.hasModel(currentState)) {
      movesToCurr.add(t);
      predicatesToCurr.add(t.guard);
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms=ba.GetMinterms(predicatesToCurr);
    for (    Pair<P,ArrayList<Integer>> minterm : minterms) {
      ArrayList<Integer> moveBits=minterm.second;
      HashSet<Integer> fromState=new HashSet<Integer>();
      for (int moveIndex=0; moveIndex < moveBits.size(); moveIndex++)       if (moveBits.get(moveIndex) == 1)       fromState.add(movesToCurr.get(moveIndex).from);
      if (fromState.size() > 0) {
        int fromSt=getStateId(fromState,reached,toVisit);
        transitions.add(new SFAInputMove<P,S>(currentStateID,fromSt,minterm.first));
      }
    }
  }
  SFA<P,S> rev=SFA.MkSFA(transitions,initialState,finalStates,ba);
  rev.setIsDet(true);
  return rev;
}","/** 
 * Returns true if the SAFA accepts the input list
 * @param input
 * @param ba
 * @return true if accepted false otherwise
 * @throws TimeoutException
 */
public static <P,S>SFA<P,S> getReverseSFA(SAFA<P,S> aut,BooleanAlgebra<P,S> ba) throws TimeoutException {
  Collection<SFAMove<P,S>> transitions=new ArrayList<SFAMove<P,S>>();
  Integer initialState=0;
  Collection<Integer> finalStates=new ArrayList<Integer>();
  HashMap<HashSet<Integer>,Integer> reached=new HashMap<HashSet<Integer>,Integer>();
  LinkedList<HashSet<Integer>> toVisit=new LinkedList<HashSet<Integer>>();
  HashSet<Integer> init=new HashSet<>(aut.finalStates);
  reached.put(init,0);
  toVisit.add(init);
  while (!toVisit.isEmpty()) {
    HashSet<Integer> currentState=toVisit.removeFirst();
    int currentStateID=reached.get(currentState);
    ArrayList<SAFAInputMove<P,S>> movesToCurr=new ArrayList<>();
    ArrayList<P> predicatesToCurr=new ArrayList<>();
    if (aut.initialState.hasModel(currentState))     finalStates.add(currentStateID);
    for (    SAFAInputMove<P,S> t : aut.getInputMoves())     if (t.to.hasModel(currentState)) {
      movesToCurr.add(t);
      predicatesToCurr.add(t.guard);
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms=ba.GetMinterms(predicatesToCurr);
    for (    Pair<P,ArrayList<Integer>> minterm : minterms) {
      ArrayList<Integer> moveBits=minterm.second;
      HashSet<Integer> fromState=new HashSet<Integer>();
      for (int moveIndex=0; moveIndex < moveBits.size(); moveIndex++)       if (moveBits.get(moveIndex) == 1)       fromState.add(movesToCurr.get(moveIndex).from);
      if (fromState.size() > 0) {
        int fromSt=getStateId(fromState,reached,toVisit);
        transitions.add(new SFAInputMove<P,S>(currentStateID,fromSt,minterm.first));
      }
    }
  }
  SFA<P,S> rev=SFA.MkSFA(transitions,initialState,finalStates,ba);
  rev.setIsDet(true);
  return rev;
}"
42164,"/** 
 * @return true iff <code>p1</code> and <code>p2</code> are equivalent
 */
public abstract boolean AreEquivalent(P p1,P p2);","/** 
 * @return true iff <code>p1</code> and <code>p2</code> are equivalent
 * @throws TimeoutException 
 */
public abstract boolean AreEquivalent(P p1,P p2) throws TimeoutException ;"
42165,"@Override public boolean AreEquivalent(Pair<P1,P2> p1,Pair<P1,P2> p2){
  return ba1.AreEquivalent(p1.first,p2.first) && ba2.AreEquivalent(p1.second,p2.second);
}","@Override public boolean AreEquivalent(Pair<P1,P2> p1,Pair<P1,P2> p2) throws TimeoutException {
  return ba1.AreEquivalent(p1.first,p2.first) && ba2.AreEquivalent(p1.second,p2.second);
}"
42166,"@Override public Pair<P1,P2> MkAtom(Choice<S1,S2> s) throws TimeoutException {
  if (s.isLeft())   return new Pair<P1,P2>(ba1.MkAtom(s.left),ba2.False());
 else   return new Pair<P1,P2>(ba1.False(),ba2.MkAtom(s.right));
}","@Override public Pair<P1,P2> MkAtom(Choice<S1,S2> s) throws TimeoutException {
  if (s.isLeft()) {
    InL<S1,S2> cast=(InL<S1,S2>)s;
    return new Pair<P1,P2>(ba1.MkAtom(cast.left),ba2.False());
  }
 else {
    InR<S1,S2> cast=(InR<S1,S2>)s;
    return new Pair<P1,P2>(ba1.False(),ba2.MkAtom(cast.right));
  }
}"
42167,"@Override public ArrayList<Pair<P1,P2>> GetSeparatingPredicates(ArrayList<Collection<Choice<S1,S2>>> groups,long timeout) throws TimeoutException {
  ArrayList<Collection<S1>> g1=new ArrayList<Collection<S1>>();
  ArrayList<Collection<S2>> g2=new ArrayList<Collection<S2>>();
  for (  Collection<Choice<S1,S2>> c : groups) {
    Collection<S1> s1set=new HashSet<S1>();
    Collection<S2> s2set=new HashSet<S2>();
    for (    Choice<S1,S2> p : c) {
      if (p.isLeft())       s1set.add(p.left);
 else       s2set.add(p.right);
    }
    g1.add(s1set);
    g2.add(s2set);
  }
  ArrayList<P1> preds1=ba1.GetSeparatingPredicates(g1,timeout);
  ArrayList<P2> preds2=ba2.GetSeparatingPredicates(g2,timeout);
  checkArgument(preds1.size() == preds2.size());
  ArrayList<Pair<P1,P2>> ret=new ArrayList<Pair<P1,P2>>();
  for (int i=0; i < preds1.size(); i++) {
    ret.add(new Pair<P1,P2>(preds1.get(i),preds2.get(i)));
  }
  return ret;
}","@Override public ArrayList<Pair<P1,P2>> GetSeparatingPredicates(ArrayList<Collection<Choice<S1,S2>>> groups,long timeout) throws TimeoutException {
  ArrayList<Collection<S1>> g1=new ArrayList<Collection<S1>>();
  ArrayList<Collection<S2>> g2=new ArrayList<Collection<S2>>();
  for (  Collection<Choice<S1,S2>> c : groups) {
    Collection<S1> s1set=new HashSet<S1>();
    Collection<S2> s2set=new HashSet<S2>();
    for (    Choice<S1,S2> p : c) {
      if (p.isLeft()) {
        InL<S1,S2> cast=(InL<S1,S2>)p;
        s1set.add(cast.left);
      }
 else {
        InR<S1,S2> cast=(InR<S1,S2>)p;
        s2set.add(cast.right);
      }
    }
    g1.add(s1set);
    g2.add(s2set);
  }
  ArrayList<P1> preds1=ba1.GetSeparatingPredicates(g1,timeout);
  ArrayList<P2> preds2=ba2.GetSeparatingPredicates(g2,timeout);
  checkArgument(preds1.size() == preds2.size());
  ArrayList<Pair<P1,P2>> ret=new ArrayList<Pair<P1,P2>>();
  for (int i=0; i < preds1.size(); i++) {
    ret.add(new Pair<P1,P2>(preds1.get(i),preds2.get(i)));
  }
  return ret;
}"
42168,"@Override public boolean HasModel(Pair<P1,P2> p1,Pair<S1,S2> el1,Pair<S1,S2> el2){
  return false;
}","@Override public boolean HasModel(CartesianProduct<P1,P2> p1,Pair<S1,S2> el1,Pair<S1,S2> el2){
  for (  Pair<P1,P2> p : p1.getProducts())   if (ba1.HasModel(p.first,el1.first,el2.first) && ba2.HasModel(p.second,el1.second,el2.second))   return true;
  return false;
}"
42169,"@Override public boolean IsSatisfiable(Pair<P1,P2> p1){
  return ba1.IsSatisfiable(p1.first) && ba2.IsSatisfiable(p1.second);
}","@Override public boolean IsSatisfiable(CartesianProduct<P1,P2> p1){
  for (  Pair<P1,P2> p : p1.getProducts())   if (ba1.IsSatisfiable(p.first) && ba2.IsSatisfiable(p.second))   return true;
  return false;
}"
42170,"@Override public Pair<S1,S2> generateWitness(Pair<P1,P2> p1){
  S1 wit1=ba1.generateWitness(p1.first);
  S2 wit2=ba2.generateWitness(p1.second);
  if (wit1 == null || wit2 == null)   return null;
  return new Pair<S1,S2>(wit1,wit2);
}","@Override public Pair<S1,S2> generateWitness(CartesianProduct<P1,P2> p1){
  for (  Pair<P1,P2> p : p1.getProducts())   if (ba1.IsSatisfiable(p.first) && ba2.IsSatisfiable(p.second))   return new Pair<>(ba1.generateWitness(p.first),ba2.generateWitness(p.second));
  return null;
}"
42171,"@Override public Pair<P1,P2> MkOr(Pair<P1,P2> p1,Pair<P1,P2> p2) throws TimeoutException {
  return null;
}","@Override public CartesianProduct<P1,P2> MkOr(CartesianProduct<P1,P2> p1,CartesianProduct<P1,P2> p2) throws TimeoutException {
  ArrayList<Pair<P1,P2>> newProducts=new ArrayList<>(p1.getProducts());
  newProducts.addAll(p2.getProducts());
  CartesianProduct<P1,P2> pp=new CartesianProduct<>(newProducts);
  pp.normalize(ba1,ba2);
  return pp;
}"
42172,"@Override public boolean AreEquivalent(Pair<P1,P2> p1,Pair<P1,P2> p2){
  return ba1.AreEquivalent(p1.first,p2.first) && ba2.AreEquivalent(p1.second,p2.second);
}","@Override public boolean AreEquivalent(CartesianProduct<P1,P2> p1,CartesianProduct<P1,P2> p2) throws TimeoutException {
  return IsSatisfiable(MkAnd(p1,MkNot(p2))) || IsSatisfiable(MkAnd(MkNot(p1),p2));
}"
42173,"@Override public Pair<P1,P2> MkAtom(Pair<S1,S2> s) throws TimeoutException {
  return new Pair<P1,P2>(ba1.MkAtom(s.first),ba2.MkAtom(s.second));
}","@Override public CartesianProduct<P1,P2> MkAtom(Pair<S1,S2> s) throws TimeoutException {
  return new CartesianProduct<>(ba1.MkAtom(s.first),ba2.MkAtom(s.second));
}"
42174,"@Override public Pair<P1,P2> MkAnd(Pair<P1,P2> p1,Pair<P1,P2> p2) throws TimeoutException {
  return null;
}","@Override public CartesianProduct<P1,P2> MkAnd(CartesianProduct<P1,P2> p1,CartesianProduct<P1,P2> p2) throws TimeoutException {
  ArrayList<Pair<P1,P2>> newProducts=new ArrayList<>();
  for (  Pair<P1,P2> pair1 : p1.getProducts())   for (  Pair<P1,P2> pair2 : p2.getProducts()) {
    P1 newFirst=ba1.MkAnd(pair1.first,pair2.first);
    if (ba1.IsSatisfiable(newFirst)) {
      P2 newSecond=ba2.MkAnd(pair1.second,pair2.second);
      if (ba2.IsSatisfiable(newSecond))       newProducts.add(new Pair<P1,P2>(newFirst,newSecond));
    }
  }
  return new CartesianProduct<>(newProducts);
}"
42175,"@Override public Pair<Pair<S1,S2>,Pair<S1,S2>> generateWitnesses(Pair<P1,P2> p1){
  return null;
}","@Override public Pair<Pair<S1,S2>,Pair<S1,S2>> generateWitnesses(CartesianProduct<P1,P2> p1){
  for (  Pair<P1,P2> p : p1.getProducts())   if (ba1.IsSatisfiable(p.first) && ba2.IsSatisfiable(p.second)) {
    Pair<S1,S1> w1=ba1.generateWitnesses(p.first);
    Pair<S2,S2> w2=ba2.generateWitnesses(p.second);
    return new Pair<>(new Pair<>(w1.first,w2.first),new Pair<>(w1.second,w2.second));
  }
  return null;
}"
42176,"@Override public Pair<P1,P2> True(){
  return new Pair<P1,P2>(ba1.True(),ba2.True());
}","@Override public CartesianProduct<P1,P2> True(){
  return new CartesianProduct<>(ba1.True(),ba2.True());
}"
42177,"@Override public Pair<P1,P2> MkNot(Pair<P1,P2> p) throws TimeoutException {
  return null;
}","@Override public CartesianProduct<P1,P2> MkNot(CartesianProduct<P1,P2> p) throws TimeoutException {
  ArrayList<Pair<P1,P2>> newProducts=new ArrayList<>();
  P1 leftover=ba1.True();
  for (  Pair<P1,P2> pair : p.getProducts()) {
    leftover=ba1.MkAnd(leftover,ba1.MkNot(pair.first));
    P2 newRight=ba2.MkNot(pair.second);
    if (ba2.IsSatisfiable(newRight))     newProducts.add(new Pair<P1,P2>(pair.first,newRight));
  }
  if (ba1.IsSatisfiable(leftover))   newProducts.add(new Pair<P1,P2>(leftover,ba2.True()));
  return new CartesianProduct<>(newProducts);
}"
42178,"@Override public Pair<P1,P2> False(){
  return new Pair<P1,P2>(ba1.False(),ba2.False());
}","@Override public CartesianProduct<P1,P2> False(){
  return new CartesianProduct<>();
}"
42179,"public void normalize(BooleanAlgebra<CharPred,Character> ba) throws TimeoutException {
  ArrayList<Pair<CharPred,CharPred>> newNotEqual=new ArrayList<Pair<CharPred,CharPred>>();
  ArrayList<CharPred> firstProj=new ArrayList<>();
  for (  Pair<CharPred,CharPred> pair : notEqual)   firstProj.add(pair.first);
  Collection<Pair<CharPred,ArrayList<Integer>>> minterms=ba.GetMinterms(firstProj);
  for (  Pair<CharPred,ArrayList<Integer>> minterm : minterms) {
    CharPred currA=minterm.first;
    CharPred currB=ba.False();
    for (int bit=0; bit < notEqual.size(); bit++)     if (minterm.second.get(bit) == 1)     currB=ba.MkOr(notEqual.get(bit).second,notEqual.get(bit).second);
    newNotEqual.add(new Pair<>(currA,currB));
  }
  notEqual=newNotEqual;
}","public void normalize(BooleanAlgebra<CharPred,Character> ba) throws TimeoutException {
  ArrayList<Pair<CharPred,CharPred>> newNotEqual=new ArrayList<Pair<CharPred,CharPred>>();
  ArrayList<CharPred> firstProj=new ArrayList<>();
  for (  Pair<CharPred,CharPred> pair : notEqual)   firstProj.add(pair.first);
  Collection<Pair<CharPred,ArrayList<Integer>>> minterms=ba.GetMinterms(firstProj);
  for (  Pair<CharPred,ArrayList<Integer>> minterm : minterms) {
    CharPred currA=minterm.first;
    CharPred currB=ba.False();
    for (int bit=0; bit < notEqual.size(); bit++)     if (minterm.second.get(bit) == 1)     currB=ba.MkOr(currB,notEqual.get(bit).second);
    newNotEqual.add(new Pair<>(currA,currB));
  }
  notEqual=newNotEqual;
}"
42180,"@Override public ICharPred MkAnd(ICharPred u1,ICharPred u2){
  if (u1 instanceof CharPred) {
    CharPred u1c=(CharPred)u1;
    if (u2 instanceof CharPred) {
      CharPred u2c=(CharPred)u2;
      if (u1c.isReturn()) {
        if (u2c.isReturn()) {
          CharPred cp=usolver.MkAnd(u1c,u2c);
          cp.setAsReturn();
          return cp;
        }
 else {
          throw new NotImplementedException(""String_Node_Str"");
        }
      }
 else {
        if (u2c.isReturn()) {
          ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
          newUneq.add(new Pair<CharPred,CharPred>(u1c,u2c));
          return new BinaryCharPred(usolver.MkAnd(u1c,u2c),newUneq);
        }
 else {
          return usolver.MkAnd(u1c,u2c);
        }
      }
    }
 else {
      BinaryCharPred u2c=(BinaryCharPred)u2;
      if (u1c.isReturn()) {
        CharPred newEq=usolver.MkAnd(u1c,u2c.equals);
        ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
        for (        Pair<CharPred,CharPred> pair : u2c.notEqual) {
          CharPred conj=usolver.MkAnd(pair.second,u1c);
          if (usolver.IsSatisfiable(conj))           newUneq.add(new Pair<CharPred,CharPred>(pair.first,conj));
        }
        BinaryCharPred pp=new BinaryCharPred(newEq,newUneq);
        return pp;
      }
 else {
        CharPred newEq=usolver.MkAnd(u1c,u2c.equals);
        ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
        for (        Pair<CharPred,CharPred> pair : u2c.notEqual) {
          CharPred conj=usolver.MkAnd(pair.first,u1c);
          if (usolver.IsSatisfiable(conj))           newUneq.add(new Pair<CharPred,CharPred>(conj,pair.second));
        }
        BinaryCharPred pp=new BinaryCharPred(newEq,newUneq);
        return pp;
      }
    }
  }
 else {
    BinaryCharPred u1c=(BinaryCharPred)u1;
    if (u2 instanceof CharPred) {
      CharPred u2c=(CharPred)u2;
      if (u2c.isReturn()) {
        return MkAnd(u2,u1);
      }
 else {
        throw new NotImplementedException(""String_Node_Str"");
      }
    }
 else {
      BinaryCharPred u2c=(BinaryCharPred)u2;
      CharPred newEq=usolver.MkAnd(u1c.equals,u2c.equals);
      ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
      for (      Pair<CharPred,CharPred> pair1 : u1c.notEqual) {
        for (        Pair<CharPred,CharPred> pair2 : u2c.notEqual) {
          CharPred newFirst=usolver.MkAnd(pair1.first,pair2.first);
          if (usolver.IsSatisfiable(newFirst)) {
            CharPred newSecond=usolver.MkAnd(pair1.second,pair2.second);
            if (usolver.IsSatisfiable(newFirst))             newUneq.add(new Pair<CharPred,CharPred>(newFirst,newSecond));
          }
        }
      }
      return new BinaryCharPred(newEq,newUneq);
    }
  }
}","@Override public ICharPred MkAnd(ICharPred u1,ICharPred u2){
  if (u1 instanceof CharPred) {
    CharPred u1c=(CharPred)u1;
    if (u2 instanceof CharPred) {
      CharPred u2c=(CharPred)u2;
      if (u1c.isReturn()) {
        if (u2c.isReturn()) {
          CharPred cp=usolver.MkAnd(u1c,u2c);
          cp.setAsReturn();
          return cp;
        }
 else {
          throw new NotImplementedException(""String_Node_Str"");
        }
      }
 else {
        if (u2c.isReturn()) {
          ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
          newUneq.add(new Pair<CharPred,CharPred>(u1c,u2c));
          return new BinaryCharPred(usolver.MkAnd(u1c,u2c),newUneq);
        }
 else {
          return usolver.MkAnd(u1c,u2c);
        }
      }
    }
 else {
      BinaryCharPred u2c=(BinaryCharPred)u2;
      if (u1c.isReturn()) {
        CharPred newEq=usolver.MkAnd(u1c,u2c.equals);
        ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
        for (        Pair<CharPred,CharPred> pair : u2c.notEqual) {
          CharPred conj=usolver.MkAnd(pair.second,u1c);
          if (usolver.IsSatisfiable(conj))           newUneq.add(new Pair<CharPred,CharPred>(pair.first,conj));
        }
        BinaryCharPred pp=new BinaryCharPred(newEq,newUneq);
        return pp;
      }
 else {
        CharPred newEq=usolver.MkAnd(u1c,u2c.equals);
        ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
        for (        Pair<CharPred,CharPred> pair : u2c.notEqual) {
          CharPred conj=usolver.MkAnd(pair.first,u1c);
          if (usolver.IsSatisfiable(conj))           newUneq.add(new Pair<CharPred,CharPred>(conj,pair.second));
        }
        BinaryCharPred pp=new BinaryCharPred(newEq,newUneq);
        return pp;
      }
    }
  }
 else {
    BinaryCharPred u1c=(BinaryCharPred)u1;
    if (u2 instanceof CharPred) {
      CharPred u2c=(CharPred)u2;
      if (u2c.isReturn()) {
        return MkAnd(u2,u1);
      }
 else {
        throw new NotImplementedException(""String_Node_Str"");
      }
    }
 else {
      BinaryCharPred u2c=(BinaryCharPred)u2;
      CharPred newEq=usolver.MkAnd(u1c.equals,u2c.equals);
      ArrayList<Pair<CharPred,CharPred>> newUneq=new ArrayList<>();
      for (      Pair<CharPred,CharPred> pair1 : u1c.notEqual) {
        for (        Pair<CharPred,CharPred> pair2 : u2c.notEqual) {
          CharPred newFirst=usolver.MkAnd(pair1.first,pair2.first);
          if (usolver.IsSatisfiable(newFirst)) {
            CharPred newSecond=usolver.MkAnd(pair1.second,pair2.second);
            if (usolver.IsSatisfiable(newSecond))             newUneq.add(new Pair<CharPred,CharPred>(newFirst,newSecond));
          }
        }
      }
      return new BinaryCharPred(newEq,newUneq);
    }
  }
}"
42181,"private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaLHS,ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempLeft=IntersectedSAFA(safaLHS,timeOut);
    long fullTimeSAFALeft=System.currentTimeMillis() - start;
    long solverTimeSAFALeft=0;
    long subTimeSAFALeft=0;
    start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempRight=IntersectedSAFA(safaRHS,timeOut - fullTimeSAFALeft);
    long fullTimeSAFARight=System.currentTimeMillis() - start;
    long solverTimeSAFARight=0;
    long subTimeSAFARight=0;
    if (fullTimeSAFALeft + fullTimeSAFARight >= timeOut) {
      fullTimeSAFA=timeOut;
      solverTimeSAFA=timeOut;
      subTimeSAFA=timeOut;
    }
 else {
      Timers.setTimeout(Long.MAX_VALUE);
      SAFA.isEquivalent(tempLeft,tempRight,solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFALeft - fullTimeSAFARight);
      fullTimeSAFA=Timers.getFull() + fullTimeSAFALeft + fullTimeSAFARight;
      solverTimeSAFA=Timers.getSolver() + solverTimeSAFALeft + solverTimeSAFARight;
      subTimeSAFA=Timers.getSubsumption() + subTimeSAFALeft + subTimeSAFARight;
    }
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,timeOut);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}","private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaLHS,ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempLeft=IntersectedSAFA(safaLHS,timeOut);
    long fullTimeSAFALeft=System.currentTimeMillis() - start;
    long solverTimeSAFALeft=0;
    long subTimeSAFALeft=0;
    start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempRight=IntersectedSAFA(safaRHS,timeOut - fullTimeSAFALeft);
    long fullTimeSAFARight=System.currentTimeMillis() - start;
    long solverTimeSAFARight=0;
    long subTimeSAFARight=0;
    if (fullTimeSAFALeft + fullTimeSAFARight >= timeOut) {
      fullTimeSAFA=timeOut;
      solverTimeSAFA=timeOut;
      subTimeSAFA=timeOut;
    }
 else {
      Timers.setTimeout(Long.MAX_VALUE);
      SAFA.isEquivalent(tempLeft,tempRight,solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFALeft - fullTimeSAFARight);
      fullTimeSAFA=Timers.getFull() + fullTimeSAFALeft + fullTimeSAFARight;
      solverTimeSAFA=Timers.getSolver() + solverTimeSAFALeft + solverTimeSAFARight;
      subTimeSAFA=Timers.getSubsumption() + subTimeSAFALeft + subTimeSAFARight;
    }
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long totalTimeLeft=timeOut;
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,totalTimeLeft);
    long endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    totalTimeSFA=timeOut - totalTimeLeft;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}"
42182,"private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long totalTime=System.currentTimeMillis() - start;
    long fullTimeSAFAIntersect=totalTime;
    long solverTimeSAFAIntersect=0;
    long subTimeSAFAIntersect=0;
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
    exploredStatesSAFA=Timers.exploredStates;
    successfulSubsumptionsSAFA=Timers.successfulSubs;
  }
 catch (  TimeoutException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
catch (  NullPointerException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,timeOut);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
    exploredStatesSFA=Timers.exploredStates;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
    exploredStatesSFA=-1;
  }
}","private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long totalTime=System.currentTimeMillis() - start;
    long fullTimeSAFAIntersect=totalTime;
    long solverTimeSAFAIntersect=0;
    long subTimeSAFAIntersect=0;
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
    exploredStatesSAFA=Timers.exploredStates;
    successfulSubsumptionsSAFA=Timers.successfulSubs;
  }
 catch (  TimeoutException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
catch (  NullPointerException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
  try {
    long totalTimeLeft=timeOut;
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,totalTimeLeft);
    long endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    totalTimeSFA=timeOut - totalTimeLeft;
    exploredStatesSFA=Timers.exploredStates;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
    exploredStatesSFA=-1;
  }
}"
42183,"public static void main(String[] args) throws TimeoutException {
  try {
    inFile=new FileReader(""String_Node_Str"");
  }
 catch (  FileNotFoundException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  try (BufferedReader br=new BufferedReader(inFile)){
    String line;
    while ((line=br.readLine()) != null) {
      list.add(line);
    }
    System.out.println(list.size());
    inFile.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  for (  String regex : list) {
    SFA<CharPred,Character> sfa=(new SFAprovider(regex,solver)).getSFA();
    if (sfa == null) {
      System.err.println(""String_Node_Str"" + regex);
    }
    sfaList.add(sfa);
  }
  for (  SFA<CharPred,Character> sfa : sfaList) {
    safaList.add(sfa.getSAFA(solver));
  }
  ArrayList<String> temp=new ArrayList<>();
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (  String s : temp) {
    equivalentTest(s.split(""String_Node_Str""),60000);
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    System.out.println(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ exploredStatesSAFA+ ""String_Node_Str""+ successfulSubsumptionsSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ exploredStatesSFA+ ""String_Node_Str""+ sfaMinussafa);
  }
}","public static void main(String[] args) throws TimeoutException {
  try {
    inFile=new FileReader(""String_Node_Str"");
  }
 catch (  FileNotFoundException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  try (BufferedReader br=new BufferedReader(inFile)){
    String line;
    while ((line=br.readLine()) != null) {
      list.add(line);
    }
    System.out.println(list.size());
    inFile.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  for (  String regex : list) {
    SFA<CharPred,Character> sfa=(new SFAprovider(regex,solver)).getSFA();
    if (sfa == null) {
      System.err.println(""String_Node_Str"" + regex);
    }
    sfaList.add(sfa);
  }
  for (  SFA<CharPred,Character> sfa : sfaList) {
    safaList.add(sfa.getSAFA(solver));
  }
  ArrayList<String> temp=new ArrayList<>();
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  temp.add(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (  String s : temp) {
    equivalentTest(s.split(""String_Node_Str""),60000);
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    System.out.println(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ exploredStatesSAFA+ ""String_Node_Str""+ successfulSubsumptionsSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ exploredStatesSFA+ ""String_Node_Str""+ sfaMinussafa);
  }
}"
42184,"private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long totalTime=System.currentTimeMillis() - start;
    long fullTimeSAFAIntersect=totalTime;
    long solverTimeSAFAIntersect=0;
    long subTimeSAFAIntersect=0;
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
    exploredStatesSAFA=Timers.exploredStates;
    successfulSubsumptionsSAFA=Timers.successfulSubs;
  }
 catch (  TimeoutException e) {
    System.err.println(""String_Node_Str"");
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
catch (  NullPointerException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,timeOut);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
    exploredStatesSFA=Timers.exploredStates;
  }
 catch (  TimeoutException e) {
    System.err.println(""String_Node_Str"");
    totalTimeSFA=timeOut;
    exploredStatesSFA=-1;
  }
}","private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long totalTime=System.currentTimeMillis() - start;
    long fullTimeSAFAIntersect=totalTime;
    long solverTimeSAFAIntersect=0;
    long subTimeSAFAIntersect=0;
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
    exploredStatesSAFA=Timers.exploredStates;
    successfulSubsumptionsSAFA=Timers.successfulSubs;
  }
 catch (  TimeoutException e) {
    System.err.println(""String_Node_Str"");
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
catch (  NullPointerException e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
    exploredStatesSAFA=-1;
    successfulSubsumptionsSAFA=-1;
  }
  try {
    long totalTimeLeft=timeOut;
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,totalTimeLeft);
    long endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    startDate=System.currentTimeMillis();
    tempLeftSFA.isHopcroftKarpEquivalentTo(tempRightSFA,solver,totalTimeLeft);
    endDate=System.currentTimeMillis();
    totalTimeLeft-=endDate - startDate;
    totalTimeSFA=timeOut - totalTimeLeft;
    exploredStatesSFA=Timers.exploredStates;
  }
 catch (  TimeoutException e) {
    System.err.println(""String_Node_Str"");
    totalTimeSFA=timeOut;
    exploredStatesSFA=-1;
  }
}"
42185,"private static void generate3to4(long timeOut){
  HashSet<String> tripleSet=new HashSet<String>();
  for (  String str : tripleList) {
    tripleSet.add(str);
  }
  for (  String str : quadraList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third);
    String possiblePair=builder.toString();
    if (tripleList.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence3to4.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence3to4.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence3to4.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}","private static void generate3to4(long timeOut){
  HashSet<String> tripleSet=new HashSet<String>();
  for (  String str : tripleList) {
    tripleSet.add(str);
  }
  for (  String str : quadraList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third);
    String possiblePair=builder.toString();
    if (tripleList.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence3to4.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence3to4.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence3to4.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
      System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}"
42186,"private static void generate4to5(long timeOut){
  HashSet<String> quadraSet=new HashSet<String>();
  for (  String str : quadraList) {
    quadraSet.add(str);
  }
  for (  String str : pentaList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    String fourth=splited[3];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third+ ""String_Node_Str""+ fourth);
    String possiblePair=builder.toString();
    if (tripleList.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence4to5.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence4to5.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence4to5.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}","private static void generate4to5(long timeOut){
  HashSet<String> quadraSet=new HashSet<String>();
  for (  String str : quadraList) {
    quadraSet.add(str);
  }
  for (  String str : pentaList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    String fourth=splited[3];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third+ ""String_Node_Str""+ fourth);
    String possiblePair=builder.toString();
    if (tripleList.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence4to5.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence4to5.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence4to5.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
      System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}"
42187,"private static void generate2to3(long timeOut){
  HashSet<String> pairSet=new HashSet<String>();
  for (  String str : pairList) {
    pairSet.add(str);
  }
  for (  String str : tripleList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    builder.append(first + ""String_Node_Str"" + second);
    String possiblePair=builder.toString();
    if (pairSet.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence2to3.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence2to3.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence2to3.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}","private static void generate2to3(long timeOut){
  HashSet<String> pairSet=new HashSet<String>();
  for (  String str : pairList) {
    pairSet.add(str);
  }
  for (  String str : tripleList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    builder.append(first + ""String_Node_Str"" + second);
    String possiblePair=builder.toString();
    if (pairSet.contains(possiblePair)) {
      System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
      equivalentTest(splited,timeOut);
      equivalence2to3.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
      equivalence2to3.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
      long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
      equivalence2to3.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
      System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    }
  }
}"
42188,"private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaLHS,ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA<CharPred,Character> tempLeft=IntersectedSAFA(safaLHS,timeOut);
    long fullTimeSAFALeft=Timers.getFull();
    long solverTimeSAFALeft=Timers.getSolver();
    long subTimeSAFALeft=Timers.getSubsumption();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA<CharPred,Character> tempRight=IntersectedSAFA(safaRHS,timeOut - fullTimeSAFALeft);
    long fullTimeSAFARight=Timers.getFull();
    long solverTimeSAFARight=Timers.getSolver();
    long subTimeSAFARight=Timers.getSubsumption();
    if (fullTimeSAFALeft + fullTimeSAFARight >= timeOut) {
      fullTimeSAFA=timeOut;
      solverTimeSAFA=timeOut;
      subTimeSAFA=timeOut;
    }
 else {
      Timers.setTimeout(Long.MAX_VALUE);
      SAFA.isEquivalent(tempLeft,tempRight,solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFALeft - fullTimeSAFARight);
      fullTimeSAFA=Timers.getFull() + fullTimeSAFALeft + fullTimeSAFARight;
      solverTimeSAFA=Timers.getSolver() + solverTimeSAFALeft + solverTimeSAFARight;
      subTimeSAFA=Timers.getSubsumption() + subTimeSAFALeft + subTimeSAFARight;
    }
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    SFA.areHopcroftKarpEquivalent(tempLeftSFA,tempRightSFA,solver);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}","private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaLHS,ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempLeft=IntersectedSAFA(safaLHS,timeOut);
    long fullTimeSAFALeft=System.currentTimeMillis() - start;
    long solverTimeSAFALeft=0;
    long subTimeSAFALeft=0;
    start=System.currentTimeMillis();
    SAFA<CharPred,Character> tempRight=IntersectedSAFA(safaRHS,timeOut - fullTimeSAFALeft);
    long fullTimeSAFARight=System.currentTimeMillis() - start;
    long solverTimeSAFARight=0;
    long subTimeSAFARight=0;
    if (fullTimeSAFALeft + fullTimeSAFARight >= timeOut) {
      fullTimeSAFA=timeOut;
      solverTimeSAFA=timeOut;
      subTimeSAFA=timeOut;
    }
 else {
      Timers.setTimeout(Long.MAX_VALUE);
      SAFA.isEquivalent(tempLeft,tempRight,solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFALeft - fullTimeSAFARight);
      fullTimeSAFA=Timers.getFull() + fullTimeSAFALeft + fullTimeSAFARight;
      solverTimeSAFA=Timers.getSolver() + solverTimeSAFALeft + solverTimeSAFARight;
      subTimeSAFA=Timers.getSubsumption() + subTimeSAFALeft + subTimeSAFARight;
    }
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    SFA.areHopcroftKarpEquivalent(tempLeftSFA,tempRightSFA,solver);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}"
42189,"private static void generate3to4(long timeOut){
  for (  String str : quadraList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence3to4.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence3to4.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence3to4.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}","private static void generate3to4(long timeOut){
  for (  String str : quadraList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence3to4.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence3to4.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence3to4.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}"
42190,"private static void generate4to5(long timeOut){
  for (  String str : pentaList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    String fourth=splited[3];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third+ ""String_Node_Str""+ fourth);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence4to5.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence4to5.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence4to5.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}","private static void generate4to5(long timeOut){
  for (  String str : pentaList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    String third=splited[2];
    String fourth=splited[3];
    builder.append(first + ""String_Node_Str"" + second+ ""String_Node_Str""+ third+ ""String_Node_Str""+ fourth);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence4to5.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence4to5.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence4to5.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}"
42191,"private static void generate2to3(long timeOut){
  for (  String str : tripleList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    builder.append(first + ""String_Node_Str"" + second);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence2to3.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence2to3.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence2to3.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}","private static void generate2to3(long timeOut){
  for (  String str : tripleList) {
    String[] splited=str.split(""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    String first=splited[0];
    String second=splited[1];
    builder.append(first + ""String_Node_Str"" + second);
    String possiblePair=builder.toString();
    System.out.println(""String_Node_Str"" + possiblePair + ""String_Node_Str""+ str);
    equivalentTest(splited,timeOut);
    equivalence2to3.print(possiblePair + ""String_Node_Str"" + str+ ""String_Node_Str"");
    equivalence2to3.print(safa1Size + ""String_Node_Str"" + safa2Size+ ""String_Node_Str""+ sfa1Size+ ""String_Node_Str""+ sfa2Size+ ""String_Node_Str"");
    long sfaMinussafa=totalTimeSFA - fullTimeSAFA;
    equivalence2to3.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
    System.out.print(fullTimeSAFA + ""String_Node_Str"" + solverTimeSAFA+ ""String_Node_Str""+ subTimeSAFA+ ""String_Node_Str""+ totalTimeSFA+ ""String_Node_Str""+ sfaMinussafa+ ""String_Node_Str"");
  }
}"
42192,"private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    Timers.setTimeout(Long.MAX_VALUE);
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long fullTimeSAFAIntersect=Timers.getFull();
    long solverTimeSAFAIntersect=Timers.getSolver();
    long subTimeSAFAIntersect=Timers.getSubsumption();
    Timers.setTimeout(Long.MAX_VALUE);
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,SAFA.getBooleanExpressionFactory(),timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    SFA.areHopcroftKarpEquivalent(tempLeftSFA,tempRightSFA,solver);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}","private static void runEquivalent(ArrayList<SAFA<CharPred,Character>> safaRHS,ArrayList<SFA<CharPred,Character>> sfaLHS,ArrayList<SFA<CharPred,Character>> sfaRHS,long timeOut){
  try {
    long start=System.currentTimeMillis();
    Triple<SAFA<CharPred,Character>,PositiveBooleanExpression,PositiveBooleanExpression> tempTriple=IntersectedSAFA(safaRHS);
    long totalTime=System.currentTimeMillis() - start;
    long fullTimeSAFAIntersect=totalTime;
    long solverTimeSAFAIntersect=0;
    long subTimeSAFAIntersect=0;
    SAFA<CharPred,Character> tempSAFA=tempTriple.getLeft();
    Timers.setTimeout(Long.MAX_VALUE);
    BooleanExpressionFactory<BDDExpression> bef=new BDDExpressionFactory(tempSAFA.stateCount() + 1);
    SAFA.checkEquivalenceOfTwoConfigurations(tempSAFA,tempTriple.getMiddle(),tempSAFA.getInitialState(),solver,bef,timeOut - fullTimeSAFAIntersect);
    fullTimeSAFA=Timers.getFull() + fullTimeSAFAIntersect;
    solverTimeSAFA=Timers.getSolver() + solverTimeSAFAIntersect;
    subTimeSAFA=Timers.getSubsumption() + subTimeSAFAIntersect;
  }
 catch (  Exception e) {
    fullTimeSAFA=timeOut;
    solverTimeSAFA=timeOut;
    subTimeSAFA=timeOut;
  }
  try {
    long startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempLeftSFA=IntersectedSFA(sfaLHS,timeOut);
    long endDate=System.currentTimeMillis();
    long totalTimeLeft=endDate - startDate;
    startDate=System.currentTimeMillis();
    SFA<CharPred,Character> tempRightSFA=IntersectedSFA(sfaRHS,timeOut - totalTimeLeft);
    endDate=System.currentTimeMillis();
    long totalTimeRight=endDate - startDate;
    long startDateEquiv=System.currentTimeMillis();
    SFA.areHopcroftKarpEquivalent(tempLeftSFA,tempRightSFA,solver);
    long endDateEquiv=System.currentTimeMillis();
    totalTimeSFA=endDateEquiv - startDateEquiv + totalTimeLeft + totalTimeRight;
  }
 catch (  Exception e) {
    totalTimeSFA=timeOut;
  }
}"
42193,"public Distance(int size){
  distance=new int[size];
  for (int s=0; s < size; s++) {
    distance[s]=size;
  }
}","public Distance(int size){
  distance=new int[size];
  for (int s=0; s < size; s++) {
    distance[s]=size + 1;
  }
}"
42194,"private Distance computeDistances(){
  Distance distance=new Distance(maxStateId + 1);
  for (  Integer s : finalStates) {
    distance.setDistance(s,0);
  }
  BooleanExpressionMorphism<Integer> formulaDistance=new BooleanExpressionMorphism<>((s) -> distance.getDistance(s),distance);
  boolean changed=true;
  while (changed) {
    changed=false;
    for (    Integer s : getStates()) {
      for (      SAFAInputMove<P,S> tr : getInputMovesFrom(s)) {
        changed=distance.setDistance(s,1 + formulaDistance.apply(tr.to)) || changed;
      }
    }
  }
  return distance;
}","private Distance computeDistances(){
  Distance distance=new Distance(maxStateId + 1);
  for (  Integer s : finalStates) {
    distance.setDistance(s,0);
  }
  boolean changed;
  do {
    changed=false;
    for (    Integer s : getStates()) {
      for (      SAFAInputMove<P,S> tr : getInputMovesFrom(s)) {
        BooleanExpressionMorphism<Integer> formulaDistance=new BooleanExpressionMorphism<>((st) -> distance.getDistance(st),distance);
        changed=distance.setDistance(s,1 + formulaDistance.apply(tr.to)) || changed;
      }
    }
  }
 while (changed);
  return distance;
}"
42195,"public SAFA<P,S> simplify(BooleanAlgebra<P,S> ba) throws TimeoutException {
  Distance distance=computeDistances();
  BooleanExpressionFactory<PositiveBooleanExpression> boolexpr=getBooleanExpressionFactory();
  BooleanExpressionMorphism<PositiveBooleanExpression> simplify=new BooleanExpressionMorphism<>((s) -> distance.getDistance(s) > maxStateId ? boolexpr.False() : boolexpr.MkState(s),boolexpr);
  Collection<SAFAInputMove<P,S>> transitions=new LinkedList<SAFAInputMove<P,S>>();
  PositiveBooleanExpression initial=simplify.apply(initialState);
  Collection<Integer> states=new TreeSet<Integer>();
  Collection<Integer> worklist=new TreeSet<Integer>();
  worklist.addAll(initial.getStates());
  while (!worklist.isEmpty()) {
    int s=worklist.iterator().next();
    worklist.remove(s);
    states.add(s);
    for (    SAFAInputMove<P,S> tr : getInputMovesFrom(s)) {
      PositiveBooleanExpression postState=simplify.apply(tr.to);
      if (!postState.equals(boolexpr.False())) {
        transitions.add(new SAFAInputMove<P,S>(s,postState,tr.guard));
        for (        Integer succ : postState.getStates()) {
          if (!states.contains(succ)) {
            worklist.add(succ);
          }
        }
      }
    }
  }
  Collection<Integer> finalStates=new TreeSet<Integer>();
  for (  Integer s : this.finalStates) {
    if (states.contains(s)) {
      finalStates.add(s);
    }
  }
  return MkSAFA(transitions,initial,finalStates,ba,false,false,false);
}","public SAFA<P,S> simplify(BooleanAlgebra<P,S> ba) throws TimeoutException {
  Distance distance=computeDistances();
  BooleanExpressionFactory<PositiveBooleanExpression> boolexpr=getBooleanExpressionFactory();
  BooleanExpressionMorphism<PositiveBooleanExpression> simplify=new BooleanExpressionMorphism<>((s) -> distance.getDistance(s) > maxStateId + 1 ? boolexpr.False() : boolexpr.MkState(s),boolexpr);
  Collection<SAFAInputMove<P,S>> transitions=new LinkedList<SAFAInputMove<P,S>>();
  PositiveBooleanExpression initial=simplify.apply(initialState);
  Collection<Integer> states=new TreeSet<Integer>();
  Collection<Integer> worklist=new TreeSet<Integer>();
  worklist.addAll(initial.getStates());
  while (!worklist.isEmpty()) {
    int s=worklist.iterator().next();
    worklist.remove(s);
    states.add(s);
    for (    SAFAInputMove<P,S> tr : getInputMovesFrom(s)) {
      PositiveBooleanExpression postState=simplify.apply(tr.to);
      if (!postState.equals(boolexpr.False())) {
        transitions.add(new SAFAInputMove<P,S>(s,postState,tr.guard));
        for (        Integer succ : postState.getStates()) {
          if (!states.contains(succ)) {
            worklist.add(succ);
          }
        }
      }
    }
  }
  Collection<Integer> finalStates=new TreeSet<Integer>();
  for (  Integer s : this.finalStates) {
    if (states.contains(s)) {
      finalStates.add(s);
    }
  }
  return MkSAFA(transitions,initial,finalStates,ba,false,false,false);
}"
42196,"@Override public <R>R apply(LatticeMorphism<BooleanExpression,R> f) throws TimeoutException {
  return apply(f,this.bdd);
}","@Override public <R>R apply(LatticeMorphism<BooleanExpression,R> f) throws TimeoutException {
  if (bdd.isOne()) {
    return f.True();
  }
 else   if (bdd.isZero()) {
    return f.False();
  }
 else {
    return f.MkOr(f.MkAnd(f.apply(bdd.var()),f.apply(new BDDExpression(bdd.high()))),f.apply(new BDDExpression(bdd.low())));
  }
}"
42197,"int bdd_support(int r){
  int n;
  int res=1;
  CHECKa(r,bddfalse);
  if (r < 2)   return bddtrue;
  if (supportSize < bddvarnum) {
    supportSet=new int[bddvarnum];
    supportSize=bddvarnum;
    supportID=0;
  }
  if (supportID == 0x0FFFFFFF) {
    for (int i=0; i < bddvarnum; ++i)     supportSet[i]=0;
    supportID=0;
  }
  ++supportID;
  supportMin=LEVEL(r);
  supportMax=supportMin;
  support_rec(r,supportSet);
  bdd_unmark(r);
  bdd_disable_reorder();
  for (n=supportMax; n >= supportMin; --n)   if (supportSet[n] == supportID) {
    int tmp;
    bdd_addref(res);
    tmp=bdd_makenode(n,0,res);
    bdd_delref(res);
    res=tmp;
  }
  bdd_enable_reorder();
  return res;
}","int bdd_support(int r){
  int n;
  int res=1;
  CHECKa(r,bddfalse);
  if (r < 2)   return bddtrue;
  if (supportSet == null || supportSize < bddvarnum) {
    supportSet=new int[bddvarnum];
    supportSize=bddvarnum;
    supportID=0;
  }
  if (supportID == 0x0FFFFFFF) {
    for (int i=0; i < bddvarnum; ++i)     supportSet[i]=0;
    supportID=0;
  }
  ++supportID;
  supportMin=LEVEL(r);
  supportMax=supportMin;
  support_rec(r,supportSet);
  bdd_unmark(r);
  bdd_disable_reorder();
  for (n=supportMax; n >= supportMin; --n)   if (supportSet[n] == supportID) {
    int tmp;
    bdd_addref(res);
    tmp=bdd_makenode(n,0,res);
    bdd_delref(res);
    res=tmp;
  }
  bdd_enable_reorder();
  return res;
}"
42198,"/** 
 * c and r without caring about equality
 */
public BinaryCharPred(CharPred c,CharPred r,BooleanAlgebra<CharPred,Character> ba){
  checkArgument(c != null && r != null);
  notEqual=new ArrayList<Pair<CharPred,CharPred>>();
  equals=StdCharPred.FALSE;
  equals=ba.MkAnd(c,r);
  notEqual.add(new Pair<CharPred,CharPred>(c,r));
}","/** 
 * c and r without caring about equality
 */
public BinaryCharPred(CharPred c,CharPred r,BooleanAlgebra<CharPred,Character> ba){
  this();
  checkArgument(c != null && r != null);
  notEqual=new ArrayList<Pair<CharPred,CharPred>>();
  equals=StdCharPred.FALSE;
  equals=ba.MkAnd(c,r);
  notEqual.add(new Pair<CharPred,CharPred>(c,r));
}"
42199,"public static CharPred of(ImmutableList<Character> characters){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  Character c : checkNotNull(characters)) {
    intervals.add(ImmutablePair.of(checkNotNull(c),c));
  }
  return new CharPred(intervals.build());
}","public static CharPred of(ImmutableList<Character> characters,boolean isReturn){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  Character c : checkNotNull(characters)) {
    intervals.add(ImmutablePair.of(checkNotNull(c),c));
  }
  CharPred res=new CharPred(intervals.build(),isReturn);
  if (isReturn)   res.setAsReturn();
  return res;
}"
42200,"public CharPred(ImmutableList<ImmutablePair<Character,Character>> intervals){
  for (  ImmutablePair<Character,Character> interval : checkNotNull(intervals)) {
    checkArgument(interval.left != null && interval.right != null && interval.left <= interval.right);
  }
  this.intervals=sortIntervals(checkNotNull(intervals));
}","public CharPred(ImmutableList<ImmutablePair<Character,Character>> intervals,boolean isReturn){
  for (  ImmutablePair<Character,Character> interval : checkNotNull(intervals)) {
    checkArgument(interval.left != null && interval.right != null && interval.left <= interval.right);
  }
  this.intervals=sortIntervals(checkNotNull(intervals));
  if (isReturn)   setAsReturn();
}"
42201,"/** 
 * Checks whether laut and raut are equivalent using bisimulation up to congruence.
 */
public static <P,S,E extends BooleanExpression>boolean isEquivalent(SAFA<P,S> laut,SAFA<P,S> raut,BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr) throws TimeoutException {
  SAFARelation similar=new SATRelation();
  LinkedList<Pair<E,E>> worklist=new LinkedList<>();
  BooleanExpressionMorphism<E> coerce=new BooleanExpressionMorphism<>((x) -> boolexpr.MkState(x),boolexpr);
  E leftInitial=coerce.apply(laut.initialState);
  E rightInitial=coerce.apply(raut.initialState);
  similar.add(leftInitial,rightInitial);
  worklist.add(new Pair<>(leftInitial,rightInitial));
  while (!worklist.isEmpty()) {
    Pair<E,E> next=worklist.removeFirst();
    E left=next.getFirst();
    E right=next.getSecond();
    P guard=ba.True();
    do {
      S model=ba.generateWitness(guard);
      P implicant=ba.True();
      Map<Integer,E> leftMove=new HashMap<>();
      Map<Integer,E> rightMove=new HashMap<>();
      for (      Integer s : left.getStates()) {
        E succ=boolexpr.False();
        for (        SAFAInputMove<P,S> tr : laut.getInputMovesFrom(s)) {
          if (ba.HasModel(tr.guard,model)) {
            succ=boolexpr.MkOr(succ,coerce.apply(tr.to));
            implicant=ba.MkAnd(implicant,tr.guard);
          }
        }
        leftMove.put(s,succ);
      }
      for (      Integer s : right.getStates()) {
        E succ=boolexpr.False();
        for (        SAFAInputMove<P,S> tr : raut.getInputMovesFrom(s)) {
          if (ba.HasModel(tr.guard,model)) {
            succ=boolexpr.MkOr(succ,coerce.apply(tr.to));
            implicant=ba.MkAnd(implicant,tr.guard);
          }
        }
        rightMove.put(s,succ);
      }
      E leftSucc=boolexpr.substitute((lit) -> leftMove.get(lit)).apply(left);
      E rightSucc=boolexpr.substitute((lit) -> rightMove.get(lit)).apply(right);
      if (leftSucc.hasModel(laut.finalStates) != rightSucc.hasModel(raut.finalStates)) {
        return false;
      }
 else       if (!similar.isMember(leftSucc,rightSucc)) {
        similar.add(leftSucc,rightSucc);
        worklist.addFirst(new Pair<>(leftSucc,rightSucc));
      }
      guard=ba.MkAnd(guard,ba.MkNot(implicant));
    }
 while (ba.IsSatisfiable(guard));
  }
  return true;
}","/** 
 * Checks whether laut and raut are equivalent using bisimulation up to congruence.
 */
public static <P,S,E extends BooleanExpression>Pair<Boolean,List<S>> isEquivalent(SAFA<P,S> laut,SAFA<P,S> raut,BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr) throws TimeoutException {
  SAFARelation similar=new SATRelation();
  LinkedList<Pair<Pair<E,E>,List<S>>> worklist=new LinkedList<>();
  BooleanExpressionMorphism<E> coerce=new BooleanExpressionMorphism<>((x) -> boolexpr.MkState(x),boolexpr);
  E leftInitial=coerce.apply(laut.initialState);
  E rightInitial=coerce.apply(raut.initialState);
  similar.add(leftInitial,rightInitial);
  worklist.add(new Pair<>(new Pair<>(leftInitial,rightInitial),new LinkedList<>()));
  while (!worklist.isEmpty()) {
    Pair<Pair<E,E>,List<S>> next=worklist.removeFirst();
    E left=next.getFirst().getFirst();
    E right=next.getFirst().getSecond();
    List<S> witness=next.getSecond();
    P guard=ba.True();
    do {
      S model=ba.generateWitness(guard);
      P implicant=ba.True();
      Map<Integer,E> leftMove=new HashMap<>();
      Map<Integer,E> rightMove=new HashMap<>();
      for (      Integer s : left.getStates()) {
        E succ=boolexpr.False();
        for (        SAFAInputMove<P,S> tr : laut.getInputMovesFrom(s)) {
          if (ba.HasModel(tr.guard,model)) {
            succ=boolexpr.MkOr(succ,coerce.apply(tr.to));
            implicant=ba.MkAnd(implicant,tr.guard);
          }
 else {
            implicant=ba.MkAnd(implicant,ba.MkNot(tr.guard));
          }
        }
        leftMove.put(s,succ);
      }
      for (      Integer s : right.getStates()) {
        E succ=boolexpr.False();
        for (        SAFAInputMove<P,S> tr : raut.getInputMovesFrom(s)) {
          if (ba.HasModel(tr.guard,model)) {
            succ=boolexpr.MkOr(succ,coerce.apply(tr.to));
            implicant=ba.MkAnd(implicant,tr.guard);
          }
 else {
            implicant=ba.MkAnd(implicant,ba.MkNot(tr.guard));
          }
        }
        rightMove.put(s,succ);
      }
      E leftSucc=boolexpr.substitute((lit) -> leftMove.get(lit)).apply(left);
      E rightSucc=boolexpr.substitute((lit) -> rightMove.get(lit)).apply(right);
      List<S> succWitness=new LinkedList<>();
      succWitness.addAll(witness);
      succWitness.add(model);
      if (leftSucc.hasModel(laut.finalStates) != rightSucc.hasModel(raut.finalStates)) {
        return new Pair<>(false,succWitness);
      }
 else       if (!similar.isMember(leftSucc,rightSucc)) {
        if (!similar.add(leftSucc,rightSucc)) {
          return new Pair<>(false,succWitness);
        }
        worklist.addFirst(new Pair<>(new Pair<>(leftSucc,rightSucc),succWitness));
      }
      guard=ba.MkAnd(guard,ba.MkNot(implicant));
    }
 while (ba.IsSatisfiable(guard));
  }
  return new Pair<>(true,null);
}"
42202,"/** 
 * Checks whether the SAFA aut is empty
 * @throws TimeoutException
 */
public static <P,S,E extends BooleanExpression>boolean isEmpty(SAFA<P,S> aut,BooleanAlgebra<P,S> ba) throws TimeoutException {
  BooleanExpressionFactory<PositiveBooleanExpression> boolexpr=getBooleanExpressionFactory();
  return isEquivalent(aut,getEmptySAFA(ba),ba,boolexpr);
}","/** 
 * Checks whether the SAFA aut is empty
 * @throws TimeoutException
 */
public static <P,S,E extends BooleanExpression>boolean isEmpty(SAFA<P,S> aut,BooleanAlgebra<P,S> ba) throws TimeoutException {
  BooleanExpressionFactory<PositiveBooleanExpression> boolexpr=getBooleanExpressionFactory();
  return isEquivalent(aut,getEmptySAFA(ba),ba,boolexpr).getFirst();
}"
42203,"private void addTransition(SAFAInputMove<P,S> transition,BooleanAlgebra<P,S> ba,boolean skipSatCheck){
  if (skipSatCheck || transition.isSatisfiable(ba)) {
    transitionCount++;
    if (transition.from > maxStateId)     maxStateId=transition.from;
    if (transition.maxState > maxStateId)     maxStateId=transition.maxState;
    states.add(transition.from);
    states.addAll(transition.toStates);
    getInputMovesFrom(transition.from).add((SAFAInputMove<P,S>)transition);
  }
}","private void addTransition(SAFAInputMove<P,S> transition,BooleanAlgebra<P,S> ba,boolean skipSatCheck){
  if (skipSatCheck || transition.isSatisfiable(ba)) {
    transitionCount++;
    if (transition.from > maxStateId)     maxStateId=transition.from;
    if (transition.maxState > maxStateId)     maxStateId=transition.maxState;
    states.add(transition.from);
    states.addAll(transition.toStates);
    getInputMovesFrom(transition.from).add(transition);
  }
}"
42204,"public SAFAInputMove(Integer from,PositiveBooleanExpression to,P guard){
  super();
  this.from=from;
  this.to=to;
  toStates=to.getStates();
  maxState=Collections.max(toStates);
  this.guard=guard;
}","public SAFAInputMove(Integer from,PositiveBooleanExpression to,P guard){
  super();
  this.from=from;
  this.to=to;
  toStates=to.getStates();
  if (toStates.isEmpty()) {
    maxState=-1;
  }
 else {
    maxState=Collections.max(toStates);
  }
  if (maxState < from) {
    maxState=from;
  }
  this.guard=guard;
}"
42205,"/** 
 * Add a pair to the relation
 * @param p
 * @param q
 */
public abstract void add(BooleanExpression p,BooleanExpression q);","/** 
 * Add a pair to the relation
 * @param p
 * @param q
 */
public abstract boolean add(BooleanExpression p,BooleanExpression q);"
42206,"public void add(BooleanExpression p,BooleanExpression q){
  VecInt pair=new VecInt();
  pair.push(mkIff(p,q));
  factory.unsafeAddClause(pair);
}","public boolean add(BooleanExpression p,BooleanExpression q){
  VecInt pair=new VecInt();
  pair.push(mkIff(p,q));
  try {
    factory.solver.addClause(pair);
    return true;
  }
 catch (  ContradictionException e) {
    return false;
  }
}"
42207,"@Override public PositiveBooleanExpression MkOr(PositiveBooleanExpression phi,PositiveBooleanExpression psi){
  if (phi instanceof PositiveTrue || psi instanceof PositiveTrue) {
    return False();
  }
 else   if (phi instanceof PositiveFalse) {
    return psi;
  }
 else   if (psi instanceof PositiveFalse) {
    return phi;
  }
 else {
    return mkOr.apply(new Pair<>(phi,psi));
  }
}","@Override public PositiveBooleanExpression MkOr(PositiveBooleanExpression phi,PositiveBooleanExpression psi){
  if (phi instanceof PositiveTrue || psi instanceof PositiveTrue) {
    return True();
  }
 else   if (phi instanceof PositiveFalse) {
    return psi;
  }
 else   if (psi instanceof PositiveFalse) {
    return phi;
  }
 else {
    return mkOr.apply(new Pair<>(phi,psi));
  }
}"
42208,"@Test public void testLargeEquiv(){
  int size=7;
  LTLFormula<CharPred,Character> tot=new True<>();
  for (int i=100; i < 100 + size; i++) {
    CharPred ch=new CharPred((char)i);
    LTLFormula<CharPred,Character> evch=ev(ba,ch);
    tot=new And<>(evch,tot);
  }
  SAFA<CharPred,Character> safa1=tot.getSAFA(ba);
  tot=new True<>();
  for (int i=100; i < 100 + size - 1; i++) {
    CharPred ch=new CharPred((char)i);
    LTLFormula<CharPred,Character> evch=ev(ba,ch);
    tot=new And<>(evch,tot);
  }
  SAFA<CharPred,Character> safa2=tot.getSAFA(ba);
  long startTime=System.currentTimeMillis();
  boolean b=true;
  try {
    b=SAFA.isEquivalent(safa1,safa2,ba,SumOfProductsFactory.getInstance());
  }
 catch (  TimeoutException toe) {
    System.out.println(toe);
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  startTime=System.currentTimeMillis();
  Pair<Boolean,List<Character>> b1=SAFA.areReverseEquivalent(safa1,safa2,ba);
  System.out.println(b1);
  stopTime=System.currentTimeMillis();
  elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  assertTrue(b == b1.first);
}","@Test public void testLargeEquiv(){
  int size=7;
  LTLFormula<CharPred,Character> tot=new True<>();
  for (int i=100; i < 100 + size; i++) {
    CharPred ch=new CharPred((char)i);
    LTLFormula<CharPred,Character> evch=ev(ba,ch);
    tot=new And<>(evch,tot);
  }
  SAFA<CharPred,Character> safa1=tot.getSAFA(ba);
  tot=new True<>();
  for (int i=100; i < 100 + size - 1; i++) {
    CharPred ch=new CharPred((char)i);
    LTLFormula<CharPred,Character> evch=ev(ba,ch);
    tot=new And<>(evch,tot);
  }
  SAFA<CharPred,Character> safa2=tot.getSAFA(ba);
  long startTime=System.currentTimeMillis();
  boolean b=true;
  try {
    b=SAFA.isEquivalent(safa1,safa2,ba,SumOfProductsFactory.getInstance()).first;
  }
 catch (  TimeoutException toe) {
    System.out.println(toe);
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  startTime=System.currentTimeMillis();
  Pair<Boolean,List<Character>> b1=SAFA.areReverseEquivalent(safa1,safa2,ba);
  System.out.println(b1);
  stopTime=System.currentTimeMillis();
  elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  assertTrue(b == b1.first);
}"
42209,"@Test public void testLargeEmptinessBDD(){
  int sizeTot=14;
  BDDExpressionFactory bef=new BDDExpressionFactory(sizeTot);
  for (int size=10; size < sizeTot; size++) {
    BDDSolver bs=new BDDSolver(size);
    LTLFormula<BDD,BDD> tot=new True<>();
    List<LTLFormula<BDD,BDD>> conjuncts=new LinkedList<>();
    for (int i=0; i < size; i++) {
      conjuncts.add(new Eventually<>(new Predicate<BDD,BDD>(bs.factory.ithVar(i))));
    }
    tot=new And<>(conjuncts);
    long startTime=System.currentTimeMillis();
    SAFA<BDD,BDD> safa1=tot.getSAFA(bs);
    boolean b=true;
    try {
      b=SAFA.isEquivalent(safa1,SAFA.getEmptySAFA(bs),bs,bef);
      assertFalse(b);
    }
 catch (    Exception toe) {
      System.out.println(toe);
    }
    long stopTime=System.currentTimeMillis();
    long elapsedTime=stopTime - startTime;
    System.out.println(size + ""String_Node_Str"" + elapsedTime);
  }
}","@Test public void testLargeEmptinessBDD(){
  int sizeTot=12;
  BDDExpressionFactory bef=new BDDExpressionFactory(sizeTot);
  for (int size=10; size < sizeTot; size++) {
    BDDSolver bs=new BDDSolver(size);
    LTLFormula<BDD,BDD> tot=new True<>();
    List<LTLFormula<BDD,BDD>> conjuncts=new LinkedList<>();
    for (int i=0; i < size; i++) {
      conjuncts.add(new Eventually<>(new Predicate<BDD,BDD>(bs.factory.ithVar(i))));
    }
    tot=new And<>(conjuncts);
    long startTime=System.currentTimeMillis();
    SAFA<BDD,BDD> safa1=tot.getSAFA(bs);
    boolean b=true;
    try {
      b=SAFA.isEquivalent(safa1,SAFA.getEmptySAFA(bs),bs,bef).first;
      assertFalse(b);
    }
 catch (    Exception toe) {
      System.out.println(toe);
    }
    long stopTime=System.currentTimeMillis();
    long elapsedTime=stopTime - startTime;
    System.out.println(size + ""String_Node_Str"" + elapsedTime);
  }
}"
42210,"@Test public void testLargeEquivSAT() throws TimeoutException {
  int size=2;
  SATBooleanAlgebra ba=new SATBooleanAlgebra(size + 1);
  LTLFormula<Integer,boolean[]> tot=new True<>();
  List<LTLFormula<Integer,boolean[]>> conjuncts=new LinkedList<>();
  for (int i=1; i < size; i++) {
    conjuncts.add(new Eventually<>(new Predicate<Integer,boolean[]>(i)));
  }
  tot=new And<>(conjuncts);
  SAFA<Integer,boolean[]> safa1=tot.getSAFA(ba);
  tot=new True<>();
  for (int i=size - 1; i >= 1; i--) {
    LTLFormula<Integer,boolean[]> evch=new Eventually<>(new Predicate<Integer,boolean[]>(i));
    tot=new And<>(evch,tot);
  }
  SAFA<Integer,boolean[]> safa2=tot.getSAFA(ba);
  long startTime=System.currentTimeMillis();
  boolean b=true;
  try {
    b=SAFA.isEquivalent(safa1,safa2,ba,SumOfProductsFactory.getInstance());
  }
 catch (  TimeoutException toe) {
    System.out.println(toe);
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  startTime=System.currentTimeMillis();
  Pair<Boolean,List<boolean[]>> b1=SAFA.areReverseEquivalent(safa1,safa2,ba);
  System.out.println(b1);
  stopTime=System.currentTimeMillis();
  elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  assertTrue(b == b1.first);
}","@Test public void testLargeEquivSAT() throws TimeoutException {
  int size=2;
  SATBooleanAlgebra ba=new SATBooleanAlgebra(size + 1);
  LTLFormula<Integer,boolean[]> tot=new True<>();
  List<LTLFormula<Integer,boolean[]>> conjuncts=new LinkedList<>();
  for (int i=1; i < size; i++) {
    conjuncts.add(new Eventually<>(new Predicate<Integer,boolean[]>(i)));
  }
  tot=new And<>(conjuncts);
  SAFA<Integer,boolean[]> safa1=tot.getSAFA(ba);
  tot=new True<>();
  for (int i=size - 1; i >= 1; i--) {
    LTLFormula<Integer,boolean[]> evch=new Eventually<>(new Predicate<Integer,boolean[]>(i));
    tot=new And<>(evch,tot);
  }
  SAFA<Integer,boolean[]> safa2=tot.getSAFA(ba);
  long startTime=System.currentTimeMillis();
  boolean b=true;
  try {
    b=SAFA.isEquivalent(safa1,safa2,ba,SumOfProductsFactory.getInstance()).first;
  }
 catch (  TimeoutException toe) {
    System.out.println(toe);
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  startTime=System.currentTimeMillis();
  Pair<Boolean,List<boolean[]>> b1=SAFA.areReverseEquivalent(safa1,safa2,ba);
  System.out.println(b1);
  stopTime=System.currentTimeMillis();
  elapsedTime=stopTime - startTime;
  System.out.println(elapsedTime);
  assertTrue(b == b1.first);
}"
42211,"@Test public void testNegate() throws TimeoutException {
  SAFA<CharPred,Character> a=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba);
  SAFA<CharPred,Character> b=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba);
  SAFA<CharPred,Character> notA=a.negate(ba);
  SAFA<CharPred,Character> notB=b.negate(ba);
  BooleanExpressionFactory<SumOfProducts> boolexpr=SumOfProductsFactory.getInstance();
  assertTrue(SAFA.isEmpty(a.intersectionWith(notA,ba),ba));
  assertTrue(SAFA.isEmpty(b.intersectionWith(notB,ba),ba));
  assertTrue(SAFA.isEquivalent(a,notA.negate(ba),ba,boolexpr));
  assertTrue(SAFA.isEquivalent(a,notB.negate(ba),ba,boolexpr));
}","@Test public void testNegate() throws TimeoutException {
  SAFA<CharPred,Character> a=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba);
  SAFA<CharPred,Character> b=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba);
  SAFA<CharPred,Character> notA=a.negate(ba);
  SAFA<CharPred,Character> notB=b.negate(ba);
  BooleanExpressionFactory<SumOfProducts> boolexpr=SumOfProductsFactory.getInstance();
  assertTrue(SAFA.isEmpty(a.intersectionWith(notA,ba),ba));
  assertTrue(SAFA.isEmpty(b.intersectionWith(notB,ba),ba));
  assertTrue(SAFA.isEquivalent(a,notA.negate(ba),ba,boolexpr).first);
  assertTrue(SAFA.isEquivalent(a,notB.negate(ba),ba,boolexpr).first);
}"
42212,"@Test public void testForwardEquivalence() throws TimeoutException {
  BooleanExpressionFactory<SumOfProducts> pos=SumOfProductsFactory.getInstance();
  SAFA<CharPred,Character> intersection1=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba);
  SAFA<CharPred,Character> intersection2=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba);
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,atLeastOneNum,ba,pos));
  assertFalse(SAFA.isEquivalent(atLeastOneNum,atLeastOneAlpha,ba,pos));
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,intersection1,ba,pos));
  assertFalse(SAFA.isEquivalent(intersection1,atLeastOneAlpha,ba,pos));
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,intersection2,ba,pos));
  assertFalse(SAFA.isEquivalent(intersection2,atLeastOneAlpha,ba,pos));
  assertFalse(SAFA.isEquivalent(atLeastOneNum,intersection1,ba,pos));
  assertFalse(SAFA.isEquivalent(intersection1,atLeastOneNum,ba,pos));
  assertFalse(SAFA.isEquivalent(atLeastOneNum,intersection2,ba,pos));
  assertFalse(SAFA.isEquivalent(intersection2,atLeastOneNum,ba,pos));
  assertTrue(SAFA.isEquivalent(intersection2,intersection1,ba,pos));
  assertTrue(SAFA.isEquivalent(intersection1,intersection2,ba,pos));
}","@Test public void testForwardEquivalence() throws TimeoutException {
  BooleanExpressionFactory<SumOfProducts> pos=SumOfProductsFactory.getInstance();
  SAFA<CharPred,Character> intersection1=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba);
  SAFA<CharPred,Character> intersection2=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba);
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,atLeastOneNum,ba,pos).first);
  assertFalse(SAFA.isEquivalent(atLeastOneNum,atLeastOneAlpha,ba,pos).first);
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,intersection1,ba,pos).first);
  assertFalse(SAFA.isEquivalent(intersection1,atLeastOneAlpha,ba,pos).first);
  assertFalse(SAFA.isEquivalent(atLeastOneAlpha,intersection2,ba,pos).first);
  assertFalse(SAFA.isEquivalent(intersection2,atLeastOneAlpha,ba,pos).first);
  assertFalse(SAFA.isEquivalent(atLeastOneNum,intersection1,ba,pos).first);
  assertFalse(SAFA.isEquivalent(intersection1,atLeastOneNum,ba,pos).first);
  assertFalse(SAFA.isEquivalent(atLeastOneNum,intersection2,ba,pos).first);
  assertFalse(SAFA.isEquivalent(intersection2,atLeastOneNum,ba,pos).first);
  assertTrue(SAFA.isEquivalent(intersection2,intersection1,ba,pos).first);
  assertTrue(SAFA.isEquivalent(intersection1,intersection2,ba,pos).first);
}"
42213,"public static void RunSelfEquivLTLFile(Path filePath,TestThread tt) throws IOException {
  List<LTLNode> nodes=LTLParserProvider.parse(new FileReader(filePath.toFile()));
  for (  LTLNode ltl : nodes) {
    Pair<BDDSolver,LTLFormula<BDD,BDD>> pair=LTLConverter.getLTLBDD(ltl);
    BDDSolver bdds=pair.first;
    LTLFormula<BDD,BDD> tot=pair.second.pushNegations(bdds);
    SAFA<BDD,BDD> safa=tot.getSAFA(bdds);
    if (tt.isRunning) {
      long startTime=System.currentTimeMillis();
      boolean b=true;
      long stopTime=System.currentTimeMillis();
      try {
        b=SAFA.isEquivalent(safa,safa,bdds,SumOfProductsFactory.getInstance());
        stopTime=System.currentTimeMillis();
      }
 catch (      TimeoutException toe) {
        stopTime=System.currentTimeMillis() + timeout;
      }
      if (tt.isRunning) {
        long elapsedTime=stopTime - startTime;
        System.out.println(elapsedTime);
        startTime=System.currentTimeMillis();
        Pair<Boolean,List<BDD>> b1=SAFA.areReverseEquivalent(safa,safa,bdds);
        if (tt.isRunning) {
          stopTime=System.currentTimeMillis();
          elapsedTime=stopTime - startTime;
          System.out.println(elapsedTime);
          if (b != b1.first)           throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
    }
  }
}","public static void RunSelfEquivLTLFile(Path filePath,TestThread tt) throws IOException {
  List<LTLNode> nodes=LTLParserProvider.parse(new FileReader(filePath.toFile()));
  for (  LTLNode ltl : nodes) {
    Pair<BDDSolver,LTLFormula<BDD,BDD>> pair=LTLConverter.getLTLBDD(ltl);
    BDDSolver bdds=pair.first;
    LTLFormula<BDD,BDD> tot=pair.second.pushNegations(bdds);
    SAFA<BDD,BDD> safa=tot.getSAFA(bdds);
    if (tt.isRunning) {
      long startTime=System.currentTimeMillis();
      boolean b=true;
      long stopTime=System.currentTimeMillis();
      try {
        b=SAFA.isEquivalent(safa,safa,bdds,SumOfProductsFactory.getInstance()).getFirst();
        stopTime=System.currentTimeMillis();
      }
 catch (      TimeoutException toe) {
        stopTime=System.currentTimeMillis() + timeout;
      }
      if (tt.isRunning) {
        long elapsedTime=stopTime - startTime;
        System.out.println(elapsedTime);
        startTime=System.currentTimeMillis();
        Pair<Boolean,List<BDD>> b1=SAFA.areReverseEquivalent(safa,safa,bdds);
        if (tt.isRunning) {
          stopTime=System.currentTimeMillis();
          elapsedTime=stopTime - startTime;
          System.out.println(elapsedTime);
          if (b != b1.first)           throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
    }
  }
}"
42214,"/** 
 * Checks whether laut and raut are equivalent using bisimulation up to congruence.
 */
public static <P,S,E extends BooleanExpression,F extends BooleanExpression>boolean isEquivalent(SAFA<P,S,F> laut,SAFA<P,S,F> raut,BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr) throws TimeoutException {
  SAFARelation similar=new SATRelation();
  LinkedList<Pair<E,E>> worklist=new LinkedList<>();
  E leftInitial=(E)laut.initialState;
  E rightInitial=(E)raut.initialState;
  similar.add(leftInitial,rightInitial);
  worklist.add(new Pair<>(leftInitial,rightInitial));
  while (!worklist.isEmpty()) {
    Pair<E,E> next=worklist.removeFirst();
    E left=next.getFirst();
    E right=next.getSecond();
    LinkedList<Pair<P,Map<Integer,E>>> leftMoves=laut.getTransitionTablesFrom(left.getStates(),ba,ba.True(),boolexpr);
    for (    Pair<P,Map<Integer,E>> leftMove : leftMoves) {
      E leftSucc=boolexpr.substitute((lit) -> leftMove.getSecond().get(lit)).apply(left);
      boolean leftSuccAccept=leftSucc.hasModel(laut.finalStates);
      LinkedList<Pair<P,Map<Integer,E>>> rightMoves=raut.getTransitionTablesFrom(right.getStates(),ba,leftMove.getFirst(),boolexpr);
      for (      Pair<P,Map<Integer,E>> rightMove : rightMoves) {
        E rightSucc=boolexpr.substitute((lit) -> rightMove.getSecond().get(lit)).apply(right);
        if (leftSuccAccept != rightSucc.hasModel(raut.finalStates)) {
          return false;
        }
 else         if (!similar.isMember(leftSucc,rightSucc)) {
          similar.add(leftSucc,rightSucc);
          worklist.addFirst(new Pair<>(leftSucc,rightSucc));
        }
      }
    }
  }
  return true;
}","/** 
 * Checks whether laut and raut are equivalent using bisimulation up to congruence.
 */
public static <P,S,E extends BooleanExpression,F extends BooleanExpression>boolean isEquivalent(SAFA<P,S,F> laut,SAFA<P,S,F> raut,BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr) throws TimeoutException {
  SAFARelation similar=new SATRelation();
  LinkedList<Pair<E,E>> worklist=new LinkedList<>();
  BooleanExpressionMorphism<E> coerce=new BooleanExpressionMorphism<>((x) -> boolexpr.MkState(x),boolexpr);
  E leftInitial=coerce.apply(laut.initialState);
  E rightInitial=coerce.apply(raut.initialState);
  similar.add(leftInitial,rightInitial);
  worklist.add(new Pair<>(leftInitial,rightInitial));
  while (!worklist.isEmpty()) {
    Pair<E,E> next=worklist.removeFirst();
    E left=next.getFirst();
    E right=next.getSecond();
    LinkedList<Pair<P,Map<Integer,E>>> leftMoves=laut.getTransitionTablesFrom(left.getStates(),ba,ba.True(),boolexpr);
    for (    Pair<P,Map<Integer,E>> leftMove : leftMoves) {
      E leftSucc=boolexpr.substitute((lit) -> leftMove.getSecond().get(lit)).apply(left);
      boolean leftSuccAccept=leftSucc.hasModel(laut.finalStates);
      LinkedList<Pair<P,Map<Integer,E>>> rightMoves=raut.getTransitionTablesFrom(right.getStates(),ba,leftMove.getFirst(),boolexpr);
      for (      Pair<P,Map<Integer,E>> rightMove : rightMoves) {
        E rightSucc=boolexpr.substitute((lit) -> rightMove.getSecond().get(lit)).apply(right);
        if (leftSuccAccept != rightSucc.hasModel(raut.finalStates)) {
          return false;
        }
 else         if (!similar.isMember(leftSucc,rightSucc)) {
          similar.add(leftSucc,rightSucc);
          worklist.addFirst(new Pair<>(leftSucc,rightSucc));
        }
      }
    }
  }
  return true;
}"
42215,"public SAFA<P,S,E> negate(BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr){
class DeMorgan extends BooleanExpressionFactory<E> {
    public DeMorgan(){
    }
    public E MkAnd(    E p,    E q){
      return boolexpr.MkOr(p,q);
    }
    public E MkOr(    E p,    E q){
      return boolexpr.MkAnd(p,q);
    }
    public E True(){
      return boolexpr.False();
    }
    public E False(){
      return boolexpr.True();
    }
    public E MkState(    int i){
      return boolexpr.MkState(i);
    }
  }
  Collection<SAFAInputMove<P,S,E>> transitions=new ArrayList<SAFAInputMove<P,S,E>>();
  BooleanExpressionMorphism<E> demorganize=new BooleanExpressionMorphism<E>((x) -> boolexpr.MkState(x),new DeMorgan());
  for (int state=0; state < maxStateId; state++) {
    if (!inputMovesFrom.containsKey(state)) {
      continue;
    }
    for (    SAFAInputMove<P,S,E> transition : inputMovesFrom.get(state)) {
      transitions.add(new SAFAInputMove<>(state,demorganize.apply(transition.to),transition.guard));
    }
  }
  Set<Integer> nonFinal=new HashSet<>();
  for (int state=0; state < maxStateId; state++) {
    if (!finalStates.contains(state)) {
      nonFinal.add(state);
    }
  }
  return MkSAFA(transitions,initialState,nonFinal,ba,boolexpr,true);
}","/** 
 * Computes the complement of the automaton as a new SAFA.  The input automaton need not be normal.
 */
public SAFA<P,S,E> negate(BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr){
class DeMorgan extends BooleanExpressionFactory<E> {
    public DeMorgan(){
    }
    public E MkAnd(    E p,    E q){
      return boolexpr.MkOr(p,q);
    }
    public E MkOr(    E p,    E q){
      return boolexpr.MkAnd(p,q);
    }
    public E True(){
      return boolexpr.False();
    }
    public E False(){
      return boolexpr.True();
    }
    public E MkState(    int i){
      return boolexpr.MkState(i);
    }
  }
  Collection<SAFAInputMove<P,S,E>> transitions=new ArrayList<SAFAInputMove<P,S,E>>();
  BooleanExpressionMorphism<E> demorganize=new BooleanExpressionMorphism<E>((x) -> boolexpr.MkState(x),new DeMorgan());
  boolean addAccept=false;
  for (int state=0; state <= maxStateId; state++) {
    P residual=ba.True();
    if (inputMovesFrom.containsKey(state)) {
      for (      SAFAInputMove<P,S,E> transition : inputMovesFrom.get(state)) {
        transitions.add(new SAFAInputMove<>(state,demorganize.apply(transition.to),transition.guard));
        residual=ba.MkAnd(ba.MkNot(transition.guard),residual);
      }
    }
    if (ba.IsSatisfiable(residual)) {
      transitions.add(new SAFAInputMove(state,boolexpr.MkState(maxStateId + 1),residual));
      addAccept=true;
    }
  }
  Set<Integer> nonFinal=new HashSet<>();
  for (int state=0; state <= maxStateId; state++) {
    if (!finalStates.contains(state)) {
      nonFinal.add(state);
    }
  }
  if (addAccept) {
    nonFinal.add(maxStateId + 1);
    transitions.add(new SAFAInputMove<>(maxStateId + 1,boolexpr.MkState(maxStateId + 1),ba.True()));
  }
  E notInitial=demorganize.apply(initialState);
  return MkSAFA(transitions,notInitial,nonFinal,ba,boolexpr,false);
}"
42216,"@Test public void testNegate() throws TimeoutException {
  SAFA<CharPred,Character,SumOfProducts> intersection1=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> intersection2=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> notIntersection1=intersection1.negate(ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> notIntersection2=intersection2.negate(ba,boolexpr);
  assertTrue(SAFA.isEmpty(intersection1.intersectionWith(notIntersection1,ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEmpty(intersection2.intersectionWith(notIntersection2,ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEquivalent(intersection1,notIntersection1.negate(ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEquivalent(intersection2,notIntersection2.negate(ba,boolexpr),ba,boolexpr));
}","@Test public void testNegate() throws TimeoutException {
  SAFA<CharPred,Character,SumOfProducts> a=atLeastOneAlpha.intersectionWith(atLeastOneNum,ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> b=atLeastOneNum.intersectionWith(atLeastOneAlpha,ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> notA=a.negate(ba,boolexpr);
  SAFA<CharPred,Character,SumOfProducts> notB=b.negate(ba,boolexpr);
  assertTrue(SAFA.isEmpty(a.intersectionWith(notA,ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEmpty(b.intersectionWith(notB,ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEquivalent(a,notA.negate(ba,boolexpr),ba,boolexpr));
  assertTrue(SAFA.isEquivalent(a,notB.negate(ba,boolexpr),ba,boolexpr));
}"
42217,"/** 
 * Checks whether laut and raut are equivalent using HopcroftKarp on the SFA accepting the reverse language
 */
public static <P,S,E extends BooleanExpression>Pair<Boolean,List<S>> areReverseEquivalent(SAFA<P,S,E> aut1,SAFA<P,S,E> aut2,BooleanAlgebra<P,S> ba){
  UnionFindHopKarp<S> ds=new UnionFindHopKarp<>();
  HashMap<HashSet<Integer>,Integer> reached1=new HashMap<HashSet<Integer>,Integer>();
  HashMap<HashSet<Integer>,Integer> reached2=new HashMap<HashSet<Integer>,Integer>();
  LinkedList<Pair<HashSet<Integer>,HashSet<Integer>>> toVisit=new LinkedList<>();
  HashSet<Integer> in1=new HashSet<Integer>(aut1.finalStates);
  HashSet<Integer> in2=new HashSet<Integer>(aut2.finalStates);
  reached1.put(in1,0);
  reached2.put(in2,1);
  toVisit.add(new Pair<HashSet<Integer>,HashSet<Integer>>(in1,in2));
  ds.add(0,in1.contains(aut1.initialState),new LinkedList<>());
  ds.add(1,in2.contains(aut2.initialState),new LinkedList<>());
  ds.mergeSets(0,1);
  while (!toVisit.isEmpty()) {
    Pair<HashSet<Integer>,HashSet<Integer>> curr=toVisit.removeFirst();
    HashSet<Integer> curr1=curr.first;
    HashSet<Integer> curr2=curr.second;
    ArrayList<SAFAInputMove<P,S,E>> movesToCurr1=new ArrayList<>();
    ArrayList<P> predicatesToCurr1=new ArrayList<>();
    ArrayList<SAFAInputMove<P,S,E>> movesToCurr2=new ArrayList<>();
    ArrayList<P> predicatesToCurr2=new ArrayList<>();
    for (    SAFAInputMove<P,S,E> t : aut1.getInputMoves())     if (t.to.hasModel(curr1)) {
      movesToCurr1.add(t);
      predicatesToCurr1.add(t.guard);
    }
    for (    SAFAInputMove<P,S,E> t : aut2.getInputMoves())     if (t.to.hasModel(curr2)) {
      movesToCurr2.add(t);
      predicatesToCurr2.add(t.guard);
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms1=ba.GetMinterms(predicatesToCurr1);
    Collection<Pair<P,ArrayList<Integer>>> minterms2=ba.GetMinterms(predicatesToCurr2);
    for (    Pair<P,ArrayList<Integer>> minterm1 : minterms1) {
      for (      Pair<P,ArrayList<Integer>> minterm2 : minterms2) {
        P conj=ba.MkAnd(minterm1.first,minterm2.first);
        if (ba.IsSatisfiable(conj)) {
          HashSet<Integer> from1=new HashSet<>();
          HashSet<Integer> from2=new HashSet<>();
          for (int i=0; i < minterm1.second.size(); i++)           if (minterm1.second.get(i) == 1)           from1.add(movesToCurr1.get(i).from);
          for (int i=0; i < minterm2.second.size(); i++)           if (minterm2.second.get(i) == 1)           from2.add(movesToCurr2.get(i).from);
          List<S> pref=new LinkedList<S>(ds.getWitness(reached1.get(curr1)));
          pref.add(ba.generateWitness(conj));
          Integer r1=null, r2=null;
          if (!reached1.containsKey(from1)) {
            r1=ds.getNumberOfElements();
            reached1.put(from1,r1);
            ds.add(r1,from1.contains(aut1.initialState),pref);
          }
          if (r1 == null)           r1=reached1.get(from1);
          if (!reached2.containsKey(from2)) {
            r2=ds.getNumberOfElements();
            reached2.put(from2,r2);
            ds.add(r2,from2.contains(aut2.initialState),pref);
          }
          if (r2 == null)           r2=reached2.get(from2);
          if (!ds.areInSameSet(r1,r2)) {
            if (!ds.mergeSets(r1,r2))             return new Pair<Boolean,List<S>>(false,Lists.reverse(pref));
            toVisit.add(new Pair<HashSet<Integer>,HashSet<Integer>>(from1,from2));
          }
        }
      }
    }
  }
  return new Pair<Boolean,List<S>>(true,null);
}","/** 
 * Checks whether laut and raut are equivalent using HopcroftKarp on the SFA accepting the reverse language
 */
public static <P,S,E extends BooleanExpression>Pair<Boolean,List<S>> areReverseEquivalent(SAFA<P,S,E> aut1,SAFA<P,S,E> aut2,BooleanAlgebra<P,S> ba){
  UnionFindHopKarp<S> ds=new UnionFindHopKarp<>();
  HashMap<HashSet<Integer>,Integer> reached1=new HashMap<HashSet<Integer>,Integer>();
  HashMap<HashSet<Integer>,Integer> reached2=new HashMap<HashSet<Integer>,Integer>();
  LinkedList<Pair<HashSet<Integer>,HashSet<Integer>>> toVisit=new LinkedList<>();
  HashSet<Integer> in1=new HashSet<Integer>(aut1.finalStates);
  HashSet<Integer> in2=new HashSet<Integer>(aut2.finalStates);
  reached1.put(in1,0);
  reached2.put(in2,1);
  toVisit.add(new Pair<HashSet<Integer>,HashSet<Integer>>(in1,in2));
  ds.add(0,in1.contains(aut1.initialState),new LinkedList<>());
  ds.add(1,in2.contains(aut2.initialState),new LinkedList<>());
  ds.mergeSets(0,1);
  while (!toVisit.isEmpty()) {
    Pair<HashSet<Integer>,HashSet<Integer>> curr=toVisit.removeFirst();
    HashSet<Integer> curr1=curr.first;
    HashSet<Integer> curr2=curr.second;
    ArrayList<SAFAInputMove<P,S,E>> movesToCurr1=new ArrayList<>();
    ArrayList<P> predicatesToCurr1=new ArrayList<>();
    ArrayList<SAFAInputMove<P,S,E>> movesToCurr2=new ArrayList<>();
    ArrayList<P> predicatesToCurr2=new ArrayList<>();
    for (    SAFAInputMove<P,S,E> t : aut1.getInputMoves())     if (t.to.hasModel(curr1)) {
      movesToCurr1.add(t);
      predicatesToCurr1.add(t.guard);
    }
    for (    SAFAInputMove<P,S,E> t : aut2.getInputMoves())     if (t.to.hasModel(curr2)) {
      movesToCurr2.add(t);
      predicatesToCurr2.add(t.guard);
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms1=ba.GetMinterms(predicatesToCurr1);
    Collection<Pair<P,ArrayList<Integer>>> minterms2=ba.GetMinterms(predicatesToCurr2);
    for (    Pair<P,ArrayList<Integer>> minterm1 : minterms1) {
      for (      Pair<P,ArrayList<Integer>> minterm2 : minterms2) {
        P conj=ba.MkAnd(minterm1.first,minterm2.first);
        if (ba.IsSatisfiable(conj)) {
          HashSet<Integer> from1=new HashSet<>();
          HashSet<Integer> from2=new HashSet<>();
          for (int i=0; i < minterm1.second.size(); i++)           if (minterm1.second.get(i) == 1)           from1.add(movesToCurr1.get(i).from);
          for (int i=0; i < minterm2.second.size(); i++)           if (minterm2.second.get(i) == 1)           from2.add(movesToCurr2.get(i).from);
          List<S> pref=new LinkedList<S>(ds.getWitness(reached1.get(curr1)));
          pref.add(ba.generateWitness(conj));
          Integer r1=null, r2=null;
          if (!reached1.containsKey(from1)) {
            r1=ds.getNumberOfElements();
            reached1.put(from1,r1);
            ds.add(r1,aut1.initialState.hasModel(from1),pref);
          }
          if (r1 == null)           r1=reached1.get(from1);
          if (!reached2.containsKey(from2)) {
            r2=ds.getNumberOfElements();
            reached2.put(from2,r2);
            ds.add(r2,aut2.initialState.hasModel(from2),pref);
          }
          if (r2 == null)           r2=reached2.get(from2);
          if (!ds.areInSameSet(r1,r2)) {
            if (!ds.mergeSets(r1,r2))             return new Pair<Boolean,List<S>>(false,Lists.reverse(pref));
            toVisit.add(new Pair<HashSet<Integer>,HashSet<Integer>>(from1,from2));
          }
        }
      }
    }
  }
  return new Pair<Boolean,List<S>>(true,null);
}"
42218,"/** 
 * Returns true if the SAFA accepts the input list
 * @param input
 * @param ba
 * @return true if accepted false otherwise
 */
public boolean accepts(List<S> input,BooleanAlgebra<P,S> ba){
  List<S> revInput=Lists.reverse(input);
  Collection<Integer> currConf=finalStates;
  for (  S el : revInput) {
    currConf=getPrevState(currConf,el,ba);
    if (currConf.isEmpty())     return false;
  }
  return currConf.contains(initialState);
}","/** 
 * Returns true if the SAFA accepts the input list
 * @param input
 * @param ba
 * @return true if accepted false otherwise
 */
public boolean accepts(List<S> input,BooleanAlgebra<P,S> ba){
  List<S> revInput=Lists.reverse(input);
  Collection<Integer> currConf=finalStates;
  for (  S el : revInput) {
    currConf=getPrevState(currConf,el,ba);
    if (currConf.isEmpty())     return false;
  }
  return initialState.hasModel(currConf);
}"
42219,"public Integer MkAnd(Integer left,Integer right){
  List<Integer> conjuncts=new LinkedList<>();
  conjuncts.add(left);
  conjuncts.add(right);
  return MkAnd(conjuncts);
}","public Integer MkAnd(Integer left,Integer right){
  Set<Integer> conjuncts=new TreeSet<>();
  conjuncts.add(left);
  conjuncts.add(right);
  return MkAnd(conjuncts);
}"
42220,"/** 
 * Normalizes the SAFA by having at most one transition for each symbol out of each state
 */
public SAFA<P,S,E> normalize(BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr){
  Collection<SAFAInputMove<P,S,E>> transitions=new ArrayList<SAFAInputMove<P,S,E>>();
  boolean addedSink=false;
  int sink=maxStateId + 1;
  for (  int state : states) {
    ArrayList<SAFAInputMove<P,S,E>> trFromState=new ArrayList<>(getInputMovesFrom(state));
    P leftoverPredicate=ba.True();
    ArrayList<P> predicates=new ArrayList<>();
    for (    SAFAInputMove<P,S,E> t : trFromState) {
      predicates.add(t.guard);
      ba.MkAnd(leftoverPredicate,ba.MkNot(t.guard));
    }
    if (ba.IsSatisfiable(leftoverPredicate)) {
      transitions.add(new SAFAInputMove<>(state,boolexpr.MkState(sink),leftoverPredicate));
      addedSink=true;
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms=ba.GetMinterms(predicates);
    for (    Pair<P,ArrayList<Integer>> minterm : minterms) {
      E newTo=null;
      for (int i=0; i < minterm.second.size(); i++)       if (minterm.second.get(i) == 1)       if (newTo == null)       newTo=trFromState.get(i).to;
 else       newTo=boolexpr.MkOr(newTo,trFromState.get(i).to);
      if (newTo != null)       transitions.add(new SAFAInputMove<>(state,newTo,minterm.first));
    }
  }
  if (addedSink)   transitions.add(new SAFAInputMove<>(sink,boolexpr.MkState(sink),ba.True()));
  return MkSAFA(transitions,initialState,finalStates,ba,boolexpr,false);
}","/** 
 * Normalizes the SAFA by having at most one transition for each symbol out of each state
 */
public SAFA<P,S,E> normalize(BooleanAlgebra<P,S> ba,BooleanExpressionFactory<E> boolexpr){
  Collection<SAFAInputMove<P,S,E>> transitions=new ArrayList<SAFAInputMove<P,S,E>>();
  boolean addedSink=false;
  int sink=maxStateId + 1;
  for (  int state : states) {
    ArrayList<SAFAInputMove<P,S,E>> trFromState=new ArrayList<>(getInputMovesFrom(state));
    ArrayList<P> predicates=new ArrayList<>();
    for (    SAFAInputMove<P,S,E> t : trFromState) {
      predicates.add(t.guard);
    }
    Collection<Pair<P,ArrayList<Integer>>> minterms=ba.GetMinterms(predicates);
    for (    Pair<P,ArrayList<Integer>> minterm : minterms) {
      E newTo=null;
      for (int i=0; i < minterm.second.size(); i++)       if (minterm.second.get(i) == 1)       if (newTo == null)       newTo=trFromState.get(i).to;
 else       newTo=boolexpr.MkOr(newTo,trFromState.get(i).to);
      if (newTo != null) {
        transitions.add(new SAFAInputMove<>(state,newTo,minterm.first));
      }
 else {
        transitions.add(new SAFAInputMove<>(state,boolexpr.MkState(sink),minterm.first));
        addedSink=true;
      }
    }
  }
  if (addedSink)   transitions.add(new SAFAInputMove<>(sink,boolexpr.MkState(sink),ba.True()));
  return MkSAFA(transitions,initialState,finalStates,ba,boolexpr,false);
}"
42221,"/** 
 * checks whether aut1 is equivalent to aut2 using Hopcroft Karp's algorithm
 */
public static <A,B>boolean areHopcroftKarpEquivalent(SFA<A,B> aut1,SFA<A,B> aut2,BooleanAlgebra<A,B> ba){
  DisjointSet ds=new DisjointSet(aut1.stateCount() + aut2.stateCount());
  int offset=aut1.stateCount();
  ds.mergeSets(aut1.initialState,aut2.initialState + offset);
  LinkedList<Pair<Integer,Integer>> toVisit=new LinkedList<>();
  toVisit.add(new Pair<Integer,Integer>(aut1.initialState,aut2.initialState));
  while (!toVisit.isEmpty()) {
    Pair<Integer,Integer> curr=toVisit.removeFirst();
    for (    SFAInputMove<A,B> move1 : aut1.getInputMovesFrom(curr.first))     for (    SFAInputMove<A,B> move2 : aut2.getInputMovesFrom(curr.second))     if (ba.IsSatisfiable(ba.MkAnd(move1.guard,move2.guard))) {
      int r1=move1.to, r2=move2.to + offset;
      boolean isFinal1=aut1.isFinalState(move1.to);
      boolean isFinal2=aut2.isFinalState(move2.to);
      if (isFinal1 && !isFinal2)       return false;
      if (isFinal2 && !isFinal1)       return false;
      if (!ds.areInSameSet(r1,r2)) {
        ds.mergeSets(r1,r2);
        toVisit.add(new Pair<Integer,Integer>(r1,r2));
      }
    }
  }
  HashSet<Integer> finals=new HashSet<>();
  HashSet<Integer> nonFinals=new HashSet<>();
  for (  int st1 : aut1.states) {
    int rep=ds.getRepr(st1);
    if (aut1.finalStates.contains(st1)) {
      if (nonFinals.contains(rep))       return false;
      finals.add(rep);
    }
 else {
      if (finals.contains(rep))       return false;
      nonFinals.add(rep);
    }
  }
  for (  int st2 : aut2.states) {
    int rep=ds.getRepr(st2 + offset);
    if (aut2.finalStates.contains(st2)) {
      if (nonFinals.contains(rep))       return false;
      finals.add(rep);
    }
 else {
      if (finals.contains(rep))       return false;
      nonFinals.add(rep);
    }
  }
  return true;
}","/** 
 * checks whether aut1 is equivalent to aut2 using Hopcroft Karp's algorithm
 */
public static <A,B>boolean areHopcroftKarpEquivalent(SFA<A,B> aut1,SFA<A,B> aut2,BooleanAlgebra<A,B> ba){
  DisjointSet ds=new DisjointSet();
  int offset=aut1.stateCount();
  ds.add(aut1.initialState);
  ds.add(aut1.initialState + offset);
  ds.mergeSets(aut1.initialState,aut2.initialState + offset);
  LinkedList<Pair<Integer,Integer>> toVisit=new LinkedList<>();
  toVisit.add(new Pair<Integer,Integer>(aut1.initialState,aut2.initialState));
  while (!toVisit.isEmpty()) {
    Pair<Integer,Integer> curr=toVisit.removeFirst();
    for (    SFAInputMove<A,B> move1 : aut1.getInputMovesFrom(curr.first))     for (    SFAInputMove<A,B> move2 : aut2.getInputMovesFrom(curr.second))     if (ba.IsSatisfiable(ba.MkAnd(move1.guard,move2.guard))) {
      int r1=move1.to;
      int r2=move2.to + offset;
      boolean isFinal1=aut1.isFinalState(move1.to);
      boolean isFinal2=aut2.isFinalState(move2.to);
      if (isFinal1 && !isFinal2)       return false;
      if (isFinal2 && !isFinal1)       return false;
      if (!ds.contains(r1))       ds.add(r1);
      if (!ds.contains(r2))       ds.add(r2);
      if (!ds.areInSameSet(r1,r2)) {
        ds.mergeSets(r1,r2);
        toVisit.add(new Pair<Integer,Integer>(move1.to,move2.to));
      }
    }
  }
  HashSet<Integer> finals=new HashSet<>();
  HashSet<Integer> nonFinals=new HashSet<>();
  for (  int st1 : aut1.states) {
    int rep=ds.getRepr(st1);
    if (aut1.finalStates.contains(st1)) {
      if (nonFinals.contains(rep))       return false;
      finals.add(rep);
    }
 else {
      if (finals.contains(rep))       return false;
      nonFinals.add(rep);
    }
  }
  for (  int st2 : aut2.states) {
    int rep=ds.getRepr(st2 + offset);
    if (aut2.finalStates.contains(st2)) {
      if (nonFinals.contains(rep))       return false;
      finals.add(rep);
    }
 else {
      if (finals.contains(rep))       return false;
      nonFinals.add(rep);
    }
  }
  return true;
}"
42222,"public boolean mergeSets(int elemIndex0,int elemIndex1){
  int repr0=getRepr(elemIndex0);
  int repr1=getRepr(elemIndex1);
  if (repr0 == repr1)   return false;
  int cmp=ranks[repr0] - ranks[repr1];
  if (cmp == 0)   ranks[repr0]++;
 else   if (cmp < 0) {
    int temp=repr0;
    repr0=repr1;
    repr1=temp;
  }
  parents[repr1]=repr0;
  sizes[repr0]+=sizes[repr1];
  sizes[repr1]=0;
  numSets--;
  return true;
}","public boolean mergeSets(int elemIndex0,int elemIndex1){
  int repr0=getRepr(elemIndex0);
  int repr1=getRepr(elemIndex1);
  if (repr0 == repr1)   return false;
  int cmp=ranks.get(repr0) - ranks.get(repr1);
  if (cmp == 0) {
    int r=ranks.get(repr0);
    ranks.put(repr0,r + 1);
  }
 else   if (cmp < 0) {
    int temp=repr0;
    repr0=repr1;
    repr1=temp;
  }
  parents.put(repr1,repr0);
  int sizer1=sizes.get(repr1);
  sizes.put(repr0,sizer1);
  sizes.put(repr1,0);
  numSets--;
  return true;
}"
42223,"void checkStructure(){
  int numRepr=0;
  for (int i=0; i < parents.length; i++) {
    int parent=parents[i];
    int rank=ranks[i];
    int size=sizes[i];
    boolean isRepr=parent == i;
    if (isRepr)     numRepr++;
    boolean ok=true;
    ok&=0 <= parent && parent < parents.length;
    ok&=0 <= rank && (isRepr || rank < ranks[parent]);
    ok&=!isRepr && size == 0 || isRepr && size >= (1 << rank);
    if (!ok)     throw new AssertionError();
  }
  if (!(1 <= numSets && numSets == numRepr && numSets <= parents.length))   throw new AssertionError();
}","void checkStructure(){
  int numRepr=0;
  for (int i=0; i < parents.size(); i++) {
    int parent=parents.get(i);
    int rank=ranks.get(i);
    int size=sizes.get(i);
    boolean isRepr=parent == i;
    if (isRepr)     numRepr++;
    boolean ok=true;
    ok&=0 <= parent && parent < parents.size();
    ok&=0 <= rank && (isRepr || rank < ranks.get(parent));
    ok&=!isRepr && size == 0 || isRepr && size >= (1 << rank);
    if (!ok)     throw new AssertionError();
  }
  if (!(1 <= numSets && numSets == numRepr && numSets <= parents.size()))   throw new AssertionError();
}"
42224,"public int getSizeOfSet(int elemIndex){
  return sizes[getRepr(elemIndex)];
}","public int getSizeOfSet(int elemIndex){
  return sizes.get(getRepr(elemIndex));
}"
42225,"public int getNumberOfElements(){
  return parents.length;
}","public int getNumberOfElements(){
  return parents.size();
}"
42226,"public DisjointSet(int numElems){
  if (numElems <= 0)   throw new IllegalArgumentException(""String_Node_Str"");
  parents=new int[numElems];
  ranks=new byte[numElems];
  sizes=new int[numElems];
  for (int i=0; i < numElems; i++) {
    parents[i]=i;
    ranks[i]=0;
    sizes[i]=1;
  }
  numSets=numElems;
}","public DisjointSet(){
  parents=new HashMap<>();
  ranks=new HashMap<>();
  sizes=new HashMap<>();
  numSets=0;
}"
42227,"public int getRepr(int elemIndex){
  if (elemIndex < 0 || elemIndex >= parents.length)   throw new IndexOutOfBoundsException();
  int parent=parents[elemIndex];
  if (parent == elemIndex)   return elemIndex;
  while (true) {
    int grandparent=parents[parent];
    if (grandparent == parent)     return parent;
    parents[elemIndex]=grandparent;
    elemIndex=parent;
    parent=grandparent;
  }
}","public int getRepr(int elemIndex){
  int parent=parents.get(elemIndex);
  if (parent == elemIndex)   return elemIndex;
  while (true) {
    int grandparent=parents.get(parent);
    if (grandparent == parent)     return parent;
    parents.put(elemIndex,grandparent);
    elemIndex=parent;
    parent=grandparent;
  }
}"
42228,"/** 
 * Returns the empty SST
 */
public static <P1,F1,S1>SST<P1,F1,S1> getEmptySST(BooleanAlgebraSubst<P1,F1,S1> ba){
  SST<P1,F1,S1> aut=new SST<P1,F1,S1>();
  aut.states=new HashSet<Integer>();
  aut.states.add(0);
  aut.initialState=0;
  aut.isDeterministic=true;
  aut.isEmpty=true;
  aut.isEpsilonFree=true;
  aut.maxStateId=1;
  return aut;
}","/** 
 * Returns the empty SST
 */
public static <P1,F1,S1>SST<P1,F1,S1> getEmptySST(BooleanAlgebraSubst<P1,F1,S1> ba){
  SST<P1,F1,S1> aut=new SST<P1,F1,S1>();
  aut.states=new HashSet<Integer>();
  aut.states.add(0);
  aut.initialState=0;
  aut.isDeterministic=true;
  aut.isEmpty=true;
  aut.variableCount=0;
  aut.isEpsilonFree=true;
  aut.maxStateId=1;
  return aut;
}"
42229,"/** 
 * iterate of the sst
 */
public static <P1,F1,S1>SST<P1,F1,S1> computeStar(SST<P1,F1,S1> sst,BooleanAlgebraSubst<P1,F1,S1> ba,boolean isLeftIter){
  if (sst.isEmpty)   return getEmptySST(ba);
  Collection<SSTMove<P1,F1,S1>> transitions=new ArrayList<SSTMove<P1,F1,S1>>();
  Map<Integer,OutputUpdate<P1,F1,S1>> outputFunction=new HashMap<Integer,OutputUpdate<P1,F1,S1>>();
  Integer initialState;
  Integer numberOfVariables;
  initialState=sst.maxStateId + 1;
  int accId=sst.variableCount;
  SSTVariable<P1,F1,S1> xAcc=new SSTVariable<P1,F1,S1>(accId);
  numberOfVariables=accId + 1;
  for (  SSTInputMove<P1,F1,S1> t : sst.getInputMovesFrom(sst.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.liftToNVars(numberOfVariables);
    variableUpdate.variableUpdate.get(accId).add(xAcc);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from,t.to,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst.getEpsilonMovesFrom(sst.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.liftToNVars(numberOfVariables);
    variableUpdate.variableUpdate.get(accId).add(xAcc);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from,t.to,variableUpdate);
    transitions.add(newMove);
  }
  for (  Integer finStateSst : sst.getFinalStates()) {
    ArrayList<List<ConstantToken<P1,F1,S1>>> resUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
    for (int i=0; i < numberOfVariables; i++) {
      List<ConstantToken<P1,F1,S1>> updateList=new ArrayList<ConstantToken<P1,F1,S1>>();
      if (i == accId)       if (isLeftIter) {
        updateList.addAll(sst.outputFunction.get(finStateSst).update);
        updateList.add(xAcc);
      }
 else {
        updateList.add(xAcc);
        updateList.addAll(sst.outputFunction.get(finStateSst).update);
      }
      resUpdate.add(updateList);
    }
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(finStateSst,initialState,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
    transitions.add(newMove);
  }
  ArrayList<List<ConstantToken<P1,F1,S1>>> initUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
  for (int i=0; i < numberOfVariables; i++) {
    List<ConstantToken<P1,F1,S1>> updateList=new ArrayList<ConstantToken<P1,F1,S1>>();
    if (i == accId)     updateList.add(xAcc);
    initUpdate.add(updateList);
  }
  SSTEpsilon<P1,F1,S1> initMove=new SSTEpsilon<P1,F1,S1>(initialState,sst.initialState,new SimpleVariableUpdate<P1,F1,S1>(initUpdate));
  transitions.add(initMove);
  List<ConstantToken<P1,F1,S1>> outUpdate=new ArrayList<ConstantToken<P1,F1,S1>>();
  outUpdate.add(xAcc);
  outputFunction.put(initialState,new OutputUpdate<P1,F1,S1>(outUpdate));
  return MkSST(transitions,initialState,numberOfVariables,outputFunction,ba);
}","/** 
 * iterate of the sst
 */
public static <P1,F1,S1>SST<P1,F1,S1> computeStar(SST<P1,F1,S1> sst,BooleanAlgebraSubst<P1,F1,S1> ba,boolean isLeftIter){
  if (sst.isEmpty) {
    return getEpsilonSST(new LinkedList<ConstantToken<P1,F1,S1>>(),ba);
  }
  Collection<SSTMove<P1,F1,S1>> transitions=new ArrayList<SSTMove<P1,F1,S1>>();
  Map<Integer,OutputUpdate<P1,F1,S1>> outputFunction=new HashMap<Integer,OutputUpdate<P1,F1,S1>>();
  Integer initialState;
  Integer numberOfVariables;
  initialState=sst.maxStateId + 1;
  int accId=sst.variableCount;
  SSTVariable<P1,F1,S1> xAcc=new SSTVariable<P1,F1,S1>(accId);
  numberOfVariables=accId + 1;
  for (  SSTInputMove<P1,F1,S1> t : sst.getInputMovesFrom(sst.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.liftToNVars(numberOfVariables);
    variableUpdate.variableUpdate.get(accId).add(xAcc);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from,t.to,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst.getEpsilonMovesFrom(sst.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.liftToNVars(numberOfVariables);
    variableUpdate.variableUpdate.get(accId).add(xAcc);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from,t.to,variableUpdate);
    transitions.add(newMove);
  }
  for (  Integer finStateSst : sst.getFinalStates()) {
    ArrayList<List<ConstantToken<P1,F1,S1>>> resUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
    for (int i=0; i < numberOfVariables; i++) {
      List<ConstantToken<P1,F1,S1>> updateList=new ArrayList<ConstantToken<P1,F1,S1>>();
      if (i == accId)       if (isLeftIter) {
        updateList.addAll(sst.outputFunction.get(finStateSst).update);
        updateList.add(xAcc);
      }
 else {
        updateList.add(xAcc);
        updateList.addAll(sst.outputFunction.get(finStateSst).update);
      }
      resUpdate.add(updateList);
    }
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(finStateSst,initialState,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
    transitions.add(newMove);
  }
  ArrayList<List<ConstantToken<P1,F1,S1>>> initUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
  for (int i=0; i < numberOfVariables; i++) {
    List<ConstantToken<P1,F1,S1>> updateList=new ArrayList<ConstantToken<P1,F1,S1>>();
    if (i == accId)     updateList.add(xAcc);
    initUpdate.add(updateList);
  }
  SSTEpsilon<P1,F1,S1> initMove=new SSTEpsilon<P1,F1,S1>(initialState,sst.initialState,new SimpleVariableUpdate<P1,F1,S1>(initUpdate));
  transitions.add(initMove);
  List<ConstantToken<P1,F1,S1>> outUpdate=new ArrayList<ConstantToken<P1,F1,S1>>();
  outUpdate.add(xAcc);
  outputFunction.put(initialState,new OutputUpdate<P1,F1,S1>(outUpdate));
  return MkSST(transitions,initialState,numberOfVariables,outputFunction,ba);
}"
42230,"/** 
 * @return a new total total SFA (with one transition for each symbol out ofevery state) equivalent to <code>aut</code>
 */
@SuppressWarnings(""String_Node_Str"") public static <A,B>SFA<A,B> mkTotal(SFA<A,B> aut,BooleanAlgebra<A,B> ba){
  if (aut.isTotal) {
    return (SFA<A,B>)aut.clone();
  }
  SFA<A,B> sfa=aut;
  if (!aut.isDeterministic(ba))   sfa=determinize(aut,ba);
  Collection<SFAMove<A,B>> transitions=new ArrayList<SFAMove<A,B>>();
  Integer initialState=sfa.initialState;
  Collection<Integer> finalStates=new HashSet<Integer>(sfa.finalStates);
  int sinkState=sfa.maxStateId + 1;
  boolean addSink=false;
  for (  Integer state : sfa.states) {
    A totGuard=null;
    for (    SFAInputMove<A,B> move : sfa.getInputMovesFrom(state)) {
      transitions.add(move);
      if (totGuard == null)       totGuard=ba.MkNot(move.guard);
 else       totGuard=ba.MkAnd(totGuard,ba.MkNot(move.guard));
    }
    if (totGuard != null && ba.IsSatisfiable(totGuard)) {
      addSink=true;
      transitions.add(new SFAInputMove<A,B>(state,sinkState,totGuard));
    }
  }
  if (addSink)   transitions.add(new SFAInputMove<A,B>(sinkState,sinkState,ba.True()));
  return MkSFA(transitions,initialState,finalStates,ba,false);
}","/** 
 * @return a new total total SFA (with one transition for each symbol out ofevery state) equivalent to <code>aut</code>
 */
@SuppressWarnings(""String_Node_Str"") public static <A,B>SFA<A,B> mkTotal(SFA<A,B> aut,BooleanAlgebra<A,B> ba){
  if (aut.isTotal) {
    return (SFA<A,B>)aut.clone();
  }
  SFA<A,B> sfa=aut;
  if (!aut.isDeterministic(ba))   sfa=determinize(aut,ba);
  Collection<SFAMove<A,B>> transitions=new ArrayList<SFAMove<A,B>>();
  Integer initialState=sfa.initialState;
  Collection<Integer> finalStates=new HashSet<Integer>(sfa.finalStates);
  int sinkState=sfa.maxStateId + 1;
  boolean addSink=false;
  for (  Integer state : sfa.states) {
    A totGuard=null;
    for (    SFAInputMove<A,B> move : sfa.getInputMovesFrom(state)) {
      transitions.add(move);
      if (totGuard == null)       totGuard=ba.MkNot(move.guard);
 else       totGuard=ba.MkAnd(totGuard,ba.MkNot(move.guard));
    }
    if (totGuard == null)     totGuard=ba.True();
    if (ba.IsSatisfiable(totGuard)) {
      addSink=true;
      transitions.add(new SFAInputMove<A,B>(state,sinkState,totGuard));
    }
  }
  if (addSink)   transitions.add(new SFAInputMove<A,B>(sinkState,sinkState,ba.True()));
  return MkSFA(transitions,initialState,finalStates,ba,false);
}"
42231,"private static <A,B>SFA<A,B> MkSFA(Collection<SFAMove<A,B>> transitions,Integer initialState,Collection<Integer> finalStates,BooleanAlgebra<A,B> ba,boolean remUnreachableStates,boolean normalize){
  SFA<A,B> aut=new SFA<A,B>();
  aut.states=new HashSet<Integer>();
  aut.states.add(initialState);
  aut.states.addAll(finalStates);
  aut.initialState=initialState;
  aut.finalStates=finalStates;
  for (  SFAMove<A,B> t : transitions)   aut.addTransition(t,ba,false);
  if (normalize)   aut=aut.normalize(ba);
  if (remUnreachableStates)   aut=removeDeadOrUnreachableStates(aut,ba);
  return aut;
}","private static <A,B>SFA<A,B> MkSFA(Collection<SFAMove<A,B>> transitions,Integer initialState,Collection<Integer> finalStates,BooleanAlgebra<A,B> ba,boolean remUnreachableStates,boolean normalize){
  SFA<A,B> aut=new SFA<A,B>();
  aut.states=new HashSet<Integer>();
  aut.states.add(initialState);
  aut.states.addAll(finalStates);
  aut.initialState=initialState;
  aut.finalStates=finalStates;
  if (finalStates.isEmpty())   return getEmptySFA(ba);
  for (  SFAMove<A,B> t : transitions)   aut.addTransition(t,ba,false);
  if (normalize)   aut=aut.normalize(ba);
  if (remUnreachableStates)   aut=removeDeadOrUnreachableStates(aut,ba);
  if (aut.finalStates.isEmpty())   return getEmptySFA(ba);
  return aut;
}"
42232,"public char instantiateWith(char c){
  return (char)(c + increment);
}","public char instantiateWith(char c){
  return (char)charSnap(c + increment);
}"
42233,"public CharPred substIn(CharPred p,CharSolver cs){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  ImmutablePair<Character,Character> interval : checkNotNull(p).intervals) {
    intervals.add(ImmutablePair.of((char)(interval.left - increment),(char)(interval.right - increment)));
  }
  return new CharPred(intervals.build());
}","public CharPred substIn(CharPred p,CharSolver cs){
  ImmutableList.Builder<ImmutablePair<Character,Character>> intervals=ImmutableList.builder();
  for (  ImmutablePair<Character,Character> interval : checkNotNull(p).intervals) {
    long leftPrime=charSnap(interval.left - increment);
    long rightPrime=charSnap(interval.right - increment);
    intervals.add(ImmutablePair.of((char)leftPrime,(char)rightPrime));
  }
  return new CharPred(intervals.build());
}"
42234,"/** 
 * Computes the union of <code>sst1</code> and <code>sst2</code> as a new SST
 */
@SuppressWarnings(""String_Node_Str"") public static <P1,F1,S1>SST<P1,F1,S1> union(SST<P1,F1,S1> sst1,SST<P1,F1,S1> sst2,BooleanAlgebraSubst<P1,F1,S1> ba){
  if (sst1.isEmpty && sst2.isEmpty)   return getEmptySST(ba);
  if (sst1.isEmpty)   return (SST<P1,F1,S1>)sst2.clone();
  if (sst2.isEmpty)   return (SST<P1,F1,S1>)sst1.clone();
  Collection<SSTMove<P1,F1,S1>> transitions=new ArrayList<SSTMove<P1,F1,S1>>();
  Map<Integer,OutputUpdate<P1,F1,S1>> outputFunction=new HashMap<Integer,OutputUpdate<P1,F1,S1>>();
  Integer initialState;
  Integer numberOfVariables;
  int offSet=sst1.maxStateId + 2;
  initialState=sst1.maxStateId + offSet;
  Integer varRenameSst1=0;
  Integer varRenameSst2=0;
  numberOfVariables=Math.max(sst1.variableCount,sst2.variableCount);
  for (  SSTInputMove<P1,F1,S1> t : sst1.getInputMovesFrom(sst1.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst1).liftToNVars(numberOfVariables);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from,t.to,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst1.getEpsilonMovesFrom(sst1.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst1).liftToNVars(numberOfVariables);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from,t.to,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTInputMove<P1,F1,S1> t : sst2.getInputMovesFrom(sst2.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst2).liftToNVars(numberOfVariables);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from + offSet,t.to + offSet,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst2.getEpsilonMovesFrom(sst2.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst2).liftToNVars(numberOfVariables);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from + offSet,t.to + offSet,variableUpdate);
    transitions.add(newMove);
  }
  ArrayList<List<ConstantToken<P1,F1,S1>>> resUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
  for (int i=0; i < numberOfVariables; i++)   resUpdate.add(new ArrayList<ConstantToken<P1,F1,S1>>());
  SSTEpsilon<P1,F1,S1> newMove1=new SSTEpsilon<P1,F1,S1>(initialState,sst1.initialState,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
  transitions.add(newMove1);
  SSTEpsilon<P1,F1,S1> newMove2=new SSTEpsilon<P1,F1,S1>(initialState,sst2.initialState + offSet,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
  transitions.add(newMove2);
  for (  Integer state : sst1.getFinalStates())   outputFunction.put(state,sst1.outputFunction.get(state).renameVars(varRenameSst1));
  for (  Integer state : sst2.getFinalStates())   outputFunction.put(state + offSet,sst2.outputFunction.get(state).renameVars(varRenameSst2));
  return MkSST(transitions,initialState,numberOfVariables,outputFunction,ba);
}","/** 
 * Computes the union of <code>sst1</code> and <code>sst2</code> as a new SST
 */
@SuppressWarnings(""String_Node_Str"") public static <P1,F1,S1>SST<P1,F1,S1> union(SST<P1,F1,S1> sst1,SST<P1,F1,S1> sst2,BooleanAlgebraSubst<P1,F1,S1> ba){
  if (sst1.isEmpty && sst2.isEmpty)   return getEmptySST(ba);
  if (sst1.isEmpty)   return (SST<P1,F1,S1>)sst2.clone();
  if (sst2.isEmpty)   return (SST<P1,F1,S1>)sst1.clone();
  Collection<SSTMove<P1,F1,S1>> transitions=new ArrayList<SSTMove<P1,F1,S1>>();
  Map<Integer,OutputUpdate<P1,F1,S1>> outputFunction=new HashMap<Integer,OutputUpdate<P1,F1,S1>>();
  Integer initialState;
  Integer numberOfVariables;
  int offSet=sst1.maxStateId + 2;
  initialState=sst1.maxStateId + 1;
  Integer varRenameSst1=0;
  Integer varRenameSst2=0;
  numberOfVariables=Math.max(sst1.variableCount,sst2.variableCount);
  for (  SSTInputMove<P1,F1,S1> t : sst1.getInputMovesFrom(sst1.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst1).liftToNVars(numberOfVariables);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from,t.to,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst1.getEpsilonMovesFrom(sst1.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst1).liftToNVars(numberOfVariables);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from,t.to,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTInputMove<P1,F1,S1> t : sst2.getInputMovesFrom(sst2.states)) {
    FunctionalVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst2).liftToNVars(numberOfVariables);
    SSTInputMove<P1,F1,S1> newMove=new SSTInputMove<P1,F1,S1>(t.from + offSet,t.to + offSet,t.guard,variableUpdate);
    transitions.add(newMove);
  }
  for (  SSTEpsilon<P1,F1,S1> t : sst2.getEpsilonMovesFrom(sst2.states)) {
    SimpleVariableUpdate<P1,F1,S1> variableUpdate=t.variableUpdate.renameVars(varRenameSst2).liftToNVars(numberOfVariables);
    SSTEpsilon<P1,F1,S1> newMove=new SSTEpsilon<P1,F1,S1>(t.from + offSet,t.to + offSet,variableUpdate);
    transitions.add(newMove);
  }
  ArrayList<List<ConstantToken<P1,F1,S1>>> resUpdate=new ArrayList<List<ConstantToken<P1,F1,S1>>>();
  for (int i=0; i < numberOfVariables; i++)   resUpdate.add(new ArrayList<ConstantToken<P1,F1,S1>>());
  SSTEpsilon<P1,F1,S1> newMove1=new SSTEpsilon<P1,F1,S1>(initialState,sst1.initialState,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
  transitions.add(newMove1);
  SSTEpsilon<P1,F1,S1> newMove2=new SSTEpsilon<P1,F1,S1>(initialState,sst2.initialState + offSet,new SimpleVariableUpdate<P1,F1,S1>(resUpdate));
  transitions.add(newMove2);
  for (  Integer state : sst1.getFinalStates())   outputFunction.put(state,sst1.outputFunction.get(state).renameVars(varRenameSst1));
  for (  Integer state : sst2.getFinalStates())   outputFunction.put(state + offSet,sst2.outputFunction.get(state).renameVars(varRenameSst2));
  return MkSST(transitions,initialState,numberOfVariables,outputFunction,ba);
}"
42235,"public RequestTrackerBundle(){
  this.header=RequestTrackerConstants.DEFAULT_LOG_ID_HEADER;
}","public RequestTrackerBundle(){
  this.header=RequestTrackerConstants.DEFAULT_HEADER;
}"
42236,"protected ClientRequest doWork(ClientRequest clientRequest){
  Optional<String> requestId=Optional.fromNullable(MDC.get(RequestTrackerConstants.MDC_KEY));
  clientRequest.getHeaders().add(header,requestId.or(ID_SUPPLIER));
  return clientRequest;
}","protected ClientRequest doWork(ClientRequest clientRequest){
  Optional<String> requestId=Optional.fromNullable(MDC.get(RequestTrackerConstants.DEFAULT_MDC_KEY));
  clientRequest.getHeaders().add(header,requestId.or(ID_SUPPLIER));
  return clientRequest;
}"
42237,"public RequestTrackerClientFilter(){
  this.header=RequestTrackerConstants.DEFAULT_LOG_ID_HEADER;
}","public RequestTrackerClientFilter(){
  this.header=RequestTrackerConstants.DEFAULT_HEADER;
}"
42238,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  Optional<String> requestId=Optional.fromNullable(httpServletRequest.getHeader(header));
  MDC.put(RequestTrackerConstants.MDC_KEY,requestId.or(ID_SUPPLIER));
  chain.doFilter(request,response);
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  Optional<String> requestId=Optional.fromNullable(httpServletRequest.getHeader(header));
  MDC.put(RequestTrackerConstants.DEFAULT_MDC_KEY,requestId.or(ID_SUPPLIER));
  chain.doFilter(request,response);
}"
42239,"public RequestTrackerServletFilter(){
  this.header=RequestTrackerConstants.DEFAULT_LOG_ID_HEADER;
}","public RequestTrackerServletFilter(){
  this.header=RequestTrackerConstants.DEFAULT_HEADER;
}"
42240,"@Test public void usesExistingMDCValueWhenPresent(){
  String logId=UUID.randomUUID().toString();
  MDC.put(RequestTrackerConstants.MDC_KEY,logId);
  requestTrackerClientFilter.doWork(clientRequest);
  verify(headersMap).add(eq(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER),eq(logId));
}","@Test public void usesExistingMDCValueWhenPresent(){
  String logId=UUID.randomUUID().toString();
  MDC.put(RequestTrackerConstants.DEFAULT_MDC_KEY,logId);
  requestTrackerClientFilter.doWork(clientRequest);
  verify(headersMap).add(eq(RequestTrackerConstants.DEFAULT_HEADER),eq(logId));
}"
42241,"@Test public void setsTheRequestTrackerHeader(){
  requestTrackerClientFilter.doWork(clientRequest);
  verify(headersMap).add(eq(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER),Mockito.any(UUID.class));
}","@Test public void setsTheRequestTrackerHeader(){
  requestTrackerClientFilter.doWork(clientRequest);
  verify(headersMap).add(eq(RequestTrackerConstants.DEFAULT_HEADER),Mockito.any(UUID.class));
}"
42242,"@Test public void reusesIdWhenHeaderPresent() throws Exception {
  String headerId=UUID.randomUUID().toString();
  when(request.getHeader(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER)).thenReturn(headerId);
  requestTrackerServletFilter.doFilter(request,response,chain);
  String idInLog=MDC.get(RequestTrackerConstants.MDC_KEY);
  assertThat(idInLog,equalTo(headerId));
}","@Test public void reusesIdWhenHeaderPresent() throws Exception {
  String headerId=UUID.randomUUID().toString();
  when(request.getHeader(RequestTrackerConstants.DEFAULT_HEADER)).thenReturn(headerId);
  requestTrackerServletFilter.doFilter(request,response,chain);
  String idInLog=MDC.get(RequestTrackerConstants.DEFAULT_MDC_KEY);
  assertThat(idInLog,equalTo(headerId));
}"
42243,"@Test public void checksForHeader() throws Exception {
  requestTrackerServletFilter.doFilter(request,response,chain);
  verify(request).getHeader(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER);
}","@Test public void checksForHeader() throws Exception {
  requestTrackerServletFilter.doFilter(request,response,chain);
  verify(request).getHeader(RequestTrackerConstants.DEFAULT_HEADER);
}"
42244,"@Test public void setsIdWhenHeaderMissing() throws Exception {
  requestTrackerServletFilter.doFilter(request,response,chain);
  UUID.fromString(MDC.get(RequestTrackerConstants.MDC_KEY));
}","@Test public void setsIdWhenHeaderMissing() throws Exception {
  requestTrackerServletFilter.doFilter(request,response,chain);
  UUID.fromString(MDC.get(RequestTrackerConstants.DEFAULT_MDC_KEY));
}"
42245,"@Test public void addsTrackerToOutgoingRequest() throws Exception {
  Client client=new Client();
  client.addFilter(new RequestTrackerClientFilter(""String_Node_Str""));
  URI initialURI=new URI(""String_Node_Str"",null,""String_Node_Str"",RULE.getLocalPort(),""String_Node_Str"",null,null);
  URI secondaryURI=new URI(""String_Node_Str"",null,""String_Node_Str"",RULE.getLocalPort(),""String_Node_Str"",null,null);
  ClientTestResource clientTest=new ClientTestResource(secondaryURI,client);
  MockTestResource mockTest=new MockTestResource();
  RULE.getEnvironment().getApplicationContext().stop();
  RULE.getEnvironment().jersey().register(mockTest);
  RULE.getEnvironment().jersey().register(clientTest);
  RULE.getEnvironment().getApplicationContext().start();
  client.resource(initialURI).post(ClientResponse.class);
  assertThat(mockTest.getHeaders().getRequestHeader(""String_Node_Str""),notNullValue());
  assertThat(mockTest.getHeaders().getRequestHeader(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER),nullValue());
}","@Test public void addsTrackerToOutgoingRequest() throws Exception {
  Client client=new Client();
  client.addFilter(new RequestTrackerClientFilter(""String_Node_Str""));
  URI initialURI=new URI(""String_Node_Str"",null,""String_Node_Str"",RULE.getLocalPort(),""String_Node_Str"",null,null);
  URI secondaryURI=new URI(""String_Node_Str"",null,""String_Node_Str"",RULE.getLocalPort(),""String_Node_Str"",null,null);
  ClientTestResource clientTest=new ClientTestResource(secondaryURI,client);
  MockTestResource mockTest=new MockTestResource();
  RULE.getEnvironment().getApplicationContext().stop();
  RULE.getEnvironment().jersey().register(mockTest);
  RULE.getEnvironment().jersey().register(clientTest);
  RULE.getEnvironment().getApplicationContext().start();
  client.resource(initialURI).post(ClientResponse.class);
  assertThat(mockTest.getHeaders().getRequestHeader(""String_Node_Str""),notNullValue());
  assertThat(mockTest.getHeaders().getRequestHeader(RequestTrackerConstants.DEFAULT_HEADER),nullValue());
}"
42246,"@Test public void keepsTheId() throws Exception {
  Client client=new Client();
  UUID id=UUID.randomUUID();
  client.resource(INITIAL_URI).header(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER,id).post(ClientResponse.class);
  assertThat(MOCK_TEST.getLogId(),equalTo(id.toString()));
}","@Test public void keepsTheId() throws Exception {
  Client client=new Client();
  UUID id=UUID.randomUUID();
  client.resource(INITIAL_URI).header(RequestTrackerConstants.DEFAULT_HEADER,id).post(ClientResponse.class);
  assertThat(MOCK_TEST.getRequestTrackerId(),equalTo(id.toString()));
}"
42247,"@Test public void addsTrackerToOutgoingRequest() throws Exception {
  CLIENT.resource(INITIAL_URI).post(ClientResponse.class);
  assertThat(MOCK_TEST.getLogId(),notNullValue());
}","@Test public void addsTrackerToOutgoingRequest() throws Exception {
  CLIENT.resource(INITIAL_URI).post(ClientResponse.class);
  assertThat(MOCK_TEST.getRequestTrackerId(),notNullValue());
}"
42248,"@POST public void test(@Context HttpHeaders headers){
  this.headers=headers;
  this.logId=headers.getRequestHeader(RequestTrackerConstants.DEFAULT_LOG_ID_HEADER).get(0);
}","@POST public void test(@Context HttpHeaders headers){
  this.headers=headers;
  this.requestTrackerId=headers.getRequestHeader(RequestTrackerConstants.DEFAULT_HEADER).get(0);
}"
42249,"@After public void clear(){
  System.clearProperty(AutomationConstants.AWS_ACCESS_KEY);
  System.clearProperty(AutomationConstants.AWS_PRIVATE_KEY);
}","@After public void clear(){
  System.clearProperty(AutomationConstants.AWS_ACCESS_KEY);
  System.clearProperty(AutomationConstants.AWS_PRIVATE_KEY);
  System.clearProperty(""String_Node_Str"");
}"
42250,"@Override public void run(){
  FileOutputStream out;
  try {
    out=new FileOutputStream(fname);
    bitmap.compress(Bitmap.CompressFormat.PNG,80,out);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  FileOutputStream out;
  try {
    out=new FileOutputStream(fname);
    bitmap.compress(Bitmap.CompressFormat.PNG,80,out);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
  }
}"
42251,"public static void outputBitmapToFile(final Bitmap bitmap,final Activity activity){
  String path=Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"";
  path=path + activity.getPackageName() + ""String_Node_Str"";
  File dir=new File(path);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  final String fname=path + activity.getLocalClassName() + ""String_Node_Str"";
  new Thread(){
    @Override public void run(){
      FileOutputStream out;
      try {
        out=new FileOutputStream(fname);
        bitmap.compress(Bitmap.CompressFormat.PNG,80,out);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
.start();
}","public static void outputBitmapToFile(final Bitmap bitmap,final Activity activity){
  String path=Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"";
  path=path + activity.getPackageName() + ""String_Node_Str"";
  File dir=new File(path);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  final String fname=path + activity.getLocalClassName() + ""String_Node_Str"";
  new Thread(){
    @Override public void run(){
      FileOutputStream out;
      try {
        out=new FileOutputStream(fname);
        bitmap.compress(Bitmap.CompressFormat.PNG,80,out);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      IllegalStateException e) {
        e.printStackTrace();
      }
    }
  }
.start();
}"
42252,"@Override public void initZygote(StartupParam startupParam) throws Throwable {
  mSettingHelper=SettingHelper.getInstance(new XSharedPreferences(Constant.PKG_NAME,SettingHelper.PREF));
  XposedBridge.hookAllConstructors(Activity.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",null);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
    }
  }
);
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",Bundle.class,new ActivityOnCreateHook());
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",new ActivityOnResumeHook(mSettingHelper));
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",boolean.class,new OnWindowFocusedHook(mSettingHelper));
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",new OnContentChangedHook());
}","@Override public void initZygote(StartupParam startupParam) throws Throwable {
  mSettingHelper=new SettingHelper(new XSharedPreferences(Constant.PKG_NAME,SettingHelper.PREF));
  XposedBridge.hookAllConstructors(Activity.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",null);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""String_Node_Str"",false);
    }
  }
);
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",Bundle.class,new ActivityOnCreateHook());
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",new ActivityOnResumeHook(mSettingHelper));
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",boolean.class,new OnWindowFocusedHook(mSettingHelper));
  XposedHelpers.findAndHookMethod(Activity.class,""String_Node_Str"",new OnContentChangedHook());
}"
42253,"private SettingHelper(XSharedPreferences xprefs){
  mXPreferences=xprefs;
}","private SettingHelper(SharedPreferences prefs){
  mPreferences=prefs;
}"
42254,"public static SettingHelper getInstance(XSharedPreferences xprefs){
  if (mInstance == null) {
    mInstance=new SettingHelper(xprefs);
  }
  return mInstance;
}","public static SettingHelper getInstance(Context context){
  if (mInstance == null) {
    SharedPreferences sp=context.getSharedPreferences(PREF,Context.MODE_WORLD_READABLE);
    mInstance=new SettingHelper(sp);
  }
  return mInstance;
}"
42255,"public void writeColor(String pkgName,String actName,int color){
  Editor edit=mXPreferences.edit();
  edit.putInt(getKey(pkgName,actName),color);
  edit.commit();
}","public void writeColor(String pkgName,String actName,int color){
  Editor edit=mPreferences.edit();
  edit.putInt(getKey(pkgName,actName),color);
  edit.commit();
}"
42256,"public void sendChangeStatusBarIntent(Activity activity){
  int backgroundtype=0;
  int color=Color.BLACK;
  String path=null;
  boolean colorHandled=false;
  boolean isdark=false;
  boolean darkHandled=false;
  WindowType type=Utils.getWindowType(activity);
switch (type) {
case Float:
    return;
case Fullscreen:
  color=Color.parseColor(""String_Node_Str"");
colorHandled=true;
isdark=false;
darkHandled=true;
break;
case Translucent:
color=Color.TRANSPARENT;
colorHandled=true;
Utils.log(""String_Node_Str"");
break;
default :
boolean exinform=Settings.System.getInt(activity.getContentResolver(),Constant.KEY_PREF_EXPORT_INFORM,0) == 1 ? true : false;
if (exinform) {
Utils.logStandXml(activity);
Utils.exportStandXml(activity);
}
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",1);
darkHandled=true;
backgroundtype=(Integer)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
switch (backgroundtype) {
case 1:
path=(String)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
break;
case 0:
Object obj=XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (obj != null) {
color=(Integer)obj;
Utils.log(""String_Node_Str"" + color);
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
break;
}
}
if (!colorHandled) {
ProfileHelper helper=(ProfileHelper)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (helper != null) {
try {
backgroundtype=helper.getBackgroundType();
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",backgroundtype);
switch (backgroundtype) {
case 0:
int i=helper.getColor();
if (i != Constant.UNKNOW_COLOR) {
color=i;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
int k=helper.getPaddingOffset();
if (k != 0) {
Utils.resetPadding(activity,k);
}
}
break;
case 1:
path=helper.getBackgroundPath();
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",path);
Bitmap tempmap=helper.getBitmap();
isdark=Utils.getDarkMode(Utils.getBitmapColor(tempmap).Color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
int k=helper.getPaddingOffset();
if (k != 0) {
Utils.resetPadding(activity,k);
}
break;
}
}
 catch (NumberFormatException e) {
e.printStackTrace();
}
}
}
if (!colorHandled) {
darkHandled=true;
ActionBar actionBar=activity.getActionBar();
if (actionBar != null) {
FrameLayout container=(FrameLayout)XposedHelpers.getObjectField(actionBar,""String_Node_Str"");
if (container != null) {
Drawable backgroundDrawable=(Drawable)XposedHelpers.getObjectField(container,""String_Node_Str"");
if (backgroundDrawable != null) {
try {
color=Utils.getMainColorFromActionBarDrawable(backgroundDrawable);
actionBar.setBackgroundDrawable(new ColorDrawable(color));
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
}
 catch (IllegalArgumentException e) {
}
container.invalidate();
}
}
}
}
if (!colorHandled) {
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
Utils.log(""String_Node_Str"");
return;
}
break;
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_TYPE,backgroundtype);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_PATH,path);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
Utils.log(""String_Node_Str"" + backgroundtype + ""String_Node_Str""+ ""String_Node_Str""+ color+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str""+ ""String_Node_Str""+ isdark+ ""String_Node_Str""+ ""String_Node_Str""+ darkHandled);
activity.sendBroadcast(intent);
}","public void sendChangeStatusBarIntent(Activity activity){
  int backgroundtype=0;
  int color=Color.BLACK;
  String path=null;
  boolean colorHandled=false;
  boolean isdark=false;
  boolean darkHandled=false;
  WindowType type=Utils.getWindowType(activity);
  Utils.log(""String_Node_Str"" + type);
switch (type) {
case Float:
    return;
case Fullscreen:
  color=Color.parseColor(""String_Node_Str"");
colorHandled=true;
isdark=false;
darkHandled=true;
break;
case Translucent:
color=Color.TRANSPARENT;
colorHandled=true;
Utils.log(""String_Node_Str"");
break;
default :
boolean exinform=Settings.System.getInt(activity.getContentResolver(),Constant.KEY_PREF_EXPORT_INFORM,0) == 1 ? true : false;
if (exinform) {
Utils.logStandXml(activity);
Utils.exportStandXml(activity);
}
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",0);
darkHandled=true;
backgroundtype=(Integer)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
switch (backgroundtype) {
case 1:
path=(String)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
break;
case 0:
Object obj=XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (obj != null) {
color=(Integer)obj;
Utils.log(""String_Node_Str"" + color);
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
break;
}
}
if (!colorHandled) {
ProfileHelper helper=(ProfileHelper)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (helper != null) {
try {
backgroundtype=helper.getBackgroundType();
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",backgroundtype);
switch (backgroundtype) {
case 0:
int i=helper.getColor();
if (i != Constant.UNKNOW_COLOR) {
color=i;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
int k=helper.getPaddingOffset();
if (k != 0) {
Utils.resetPadding(activity,k);
}
}
break;
case 1:
path=helper.getBackgroundPath();
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",path);
Bitmap tempmap=helper.getBitmap();
isdark=Utils.getDarkMode(Utils.getBitmapColor(tempmap).Color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
int k=helper.getPaddingOffset();
if (k != 0) {
Utils.resetPadding(activity,k);
}
break;
}
}
 catch (NumberFormatException e) {
e.printStackTrace();
}
}
}
if (!colorHandled) {
darkHandled=true;
ActionBar actionBar=activity.getActionBar();
if (actionBar != null) {
FrameLayout container=(FrameLayout)XposedHelpers.getObjectField(actionBar,""String_Node_Str"");
if (container != null) {
Drawable backgroundDrawable=(Drawable)XposedHelpers.getObjectField(container,""String_Node_Str"");
if (backgroundDrawable != null) {
try {
color=Utils.getMainColorFromActionBarDrawable(backgroundDrawable);
actionBar.setBackgroundDrawable(new ColorDrawable(color));
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
}
 catch (IllegalArgumentException e) {
}
container.invalidate();
}
}
}
}
if (!colorHandled) {
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
Utils.log(""String_Node_Str"");
return;
}
break;
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_TYPE,backgroundtype);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_PATH,path);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
Utils.log(""String_Node_Str"" + backgroundtype + ""String_Node_Str""+ ""String_Node_Str""+ color+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str""+ ""String_Node_Str""+ isdark+ ""String_Node_Str""+ ""String_Node_Str""+ darkHandled);
activity.sendBroadcast(intent);
}"
42257,"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  final Activity activity=(Activity)param.thisObject;
  boolean isSysApp=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (isSysApp) {
    Utils.log(""String_Node_Str"");
    return;
  }
  WindowType type=Utils.getWindowType(activity);
  if (type != WindowType.Normal)   return;
  boolean hasProfile=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (hasProfile)   return;
  int changeTimes=(Integer)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",changeTimes + 1);
  if (changeTimes == 0) {
    return;
  }
  Utils.log(""String_Node_Str"" + changeTimes + ""String_Node_Str"");
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",null);
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
  dialog(activity);
}","@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  final Activity activity=(Activity)param.thisObject;
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      update(activity);
    }
  }
,100L);
}"
42258,"public static WindowType getWindowType(Activity activity){
  Intent activityIntent=activity.getIntent();
  int flags=activity.getWindow().getAttributes().flags;
  if ((flags & WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS) == WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS) {
    return WindowType.Translucent;
  }
  if ((flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) == WindowManager.LayoutParams.FLAG_FULLSCREEN) {
    return WindowType.Fullscreen;
  }
  if (activityIntent != null && (activityIntent.getFlags() & 0x00002000) == 0x00002000) {
    return WindowType.Float;
  }
  int isFloating=XposedHelpers.getStaticIntField(XposedHelpers.findClass(""String_Node_Str"",null),""String_Node_Str"");
  if (activity.getWindow().getWindowStyle().getBoolean(isFloating,false)) {
    Utils.log(""String_Node_Str"");
    return WindowType.Float;
  }
  return WindowType.Normal;
}","public static WindowType getWindowType(Activity activity){
  if (activity.getPackageName().equals(""String_Node_Str"")) {
    return WindowType.Normal;
  }
  Intent activityIntent=activity.getIntent();
  int flags=activity.getWindow().getAttributes().flags;
  if ((flags & WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS) == WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS) {
    return WindowType.Translucent;
  }
  if ((flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) == WindowManager.LayoutParams.FLAG_FULLSCREEN) {
    return WindowType.Fullscreen;
  }
  if (activityIntent != null && (activityIntent.getFlags() & 0x00002000) == 0x00002000) {
    return WindowType.Float;
  }
  int isFloating=XposedHelpers.getStaticIntField(XposedHelpers.findClass(""String_Node_Str"",null),""String_Node_Str"");
  if (activity.getWindow().getWindowStyle().getBoolean(isFloating,false)) {
    Utils.log(""String_Node_Str"");
    return WindowType.Float;
  }
  return WindowType.Normal;
}"
42259,"public void writeColor(String pkgName,String actName,int color){
  Editor edit=mPreferences.edit();
  String r=Integer.toHexString(Color.red(color));
  String g=Integer.toHexString(Color.green(color));
  String b=Integer.toHexString(Color.blue(color));
  edit.putString(r + g + b,null);
  edit.commit();
  Intent intent=new Intent(Constant.INTENT_UPDATE_SETTINGS);
  mContext.sendBroadcast(intent);
}","public void writeColor(String pkgName,String actName,int color){
  Editor edit=mPreferences.edit();
  String r=Integer.toHexString(Color.red(color));
  String g=Integer.toHexString(Color.green(color));
  String b=Integer.toHexString(Color.blue(color));
  edit.putString(actName,r + g + b);
  edit.commit();
  Intent intent=new Intent(Constant.INTENT_UPDATE_SETTINGS);
  mContext.sendBroadcast(intent);
}"
42260,"public void sendChangeStatusBarIntent(Activity activity){
  int color=Color.BLACK;
  boolean colorHandled=false;
  boolean isdark=false;
  boolean darkHandled=false;
  boolean isSysApp=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (isSysApp) {
    Utils.log(""String_Node_Str"");
    color=Color.TRANSPARENT;
    colorHandled=true;
  }
 else {
    WindowType type=Utils.getWindowType(activity);
switch (type) {
case Float:
      return;
case Fullscreen:
    color=Color.parseColor(""String_Node_Str"");
  colorHandled=true;
isdark=false;
darkHandled=true;
break;
case Translucent:
Utils.log(""String_Node_Str"");
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
return;
default :
darkHandled=true;
Object obj=XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (obj != null) {
color=(Integer)obj;
Utils.log(""String_Node_Str"" + color);
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
}
if (!colorHandled) {
darkHandled=true;
ActionBar actionBar=activity.getActionBar();
if (actionBar != null) {
FrameLayout container=(FrameLayout)XposedHelpers.getObjectField(actionBar,""String_Node_Str"");
if (container != null) {
Drawable backgroundDrawable=(Drawable)XposedHelpers.getObjectField(container,""String_Node_Str"");
if (backgroundDrawable != null) {
try {
color=Utils.getMainColorFromActionBarDrawable(backgroundDrawable);
actionBar.setBackgroundDrawable(new ColorDrawable(color));
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
}
 catch (IllegalArgumentException e) {
}
container.invalidate();
}
}
}
}
if (!colorHandled) {
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
Utils.log(""String_Node_Str"");
return;
}
break;
}
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
Utils.log(""String_Node_Str"" + color + ""String_Node_Str""+ ""String_Node_Str""+ isdark+ ""String_Node_Str""+ ""String_Node_Str""+ darkHandled);
activity.sendBroadcast(intent);
}","public void sendChangeStatusBarIntent(Activity activity){
  int color=Color.BLACK;
  boolean colorHandled=false;
  boolean isdark=false;
  boolean darkHandled=false;
  boolean isSysApp=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (isSysApp) {
    Utils.log(""String_Node_Str"");
    color=Color.TRANSPARENT;
    colorHandled=true;
  }
 else {
    WindowType type=Utils.getWindowType(activity);
switch (type) {
case Float:
      return;
case Fullscreen:
    color=Color.parseColor(""String_Node_Str"");
  colorHandled=true;
isdark=false;
darkHandled=true;
break;
case Translucent:
Utils.log(""String_Node_Str"");
return;
default :
darkHandled=true;
Object obj=XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (obj != null) {
color=(Integer)obj;
Utils.log(""String_Node_Str"" + color);
isdark=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
colorHandled=true;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
}
if (!colorHandled) {
darkHandled=true;
ActionBar actionBar=activity.getActionBar();
if (actionBar != null) {
FrameLayout container=(FrameLayout)XposedHelpers.getObjectField(actionBar,""String_Node_Str"");
if (container != null) {
Drawable backgroundDrawable=(Drawable)XposedHelpers.getObjectField(container,""String_Node_Str"");
if (backgroundDrawable != null) {
try {
color=Utils.getMainColorFromActionBarDrawable(backgroundDrawable);
actionBar.setBackgroundDrawable(new ColorDrawable(color));
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
colorHandled=true;
}
 catch (IllegalArgumentException e) {
}
container.invalidate();
}
}
}
}
if (!colorHandled) {
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
Utils.log(""String_Node_Str"");
return;
}
break;
}
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
Utils.log(""String_Node_Str"" + color + ""String_Node_Str""+ ""String_Node_Str""+ isdark+ ""String_Node_Str""+ ""String_Node_Str""+ darkHandled);
activity.sendBroadcast(intent);
}"
42261,"public static void sendChangeStatusBarIntent(final Activity activity){
  boolean isSysApp=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (isSysApp) {
    Utils.log(""String_Node_Str"");
    return;
  }
  WindowType type=Utils.getWindowType(activity);
switch (type) {
case Normal:
    boolean needGetColorFromBackground=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (!needGetColorFromBackground)   return;
int delay=Constant.DELAY_GET_CACHEDRAWABLE;
String activityName=activity.getLocalClassName();
if (activityName.equals(""String_Node_Str"")) {
delay=800;
}
 else if (activityName.equals(""String_Node_Str"") && activity.getPackageName().equals(""String_Node_Str"")) {
delay=300;
}
Handler handler=new Handler();
handler.postDelayed(new Runnable(){
@Override public void run(){
Bitmap bitmap=Utils.getBitMapFromActivityBackground(activity);
int color=Color.BLACK;
boolean isdark=false;
boolean darkHandled=false;
if (bitmap != null) {
BitMapColor bitmapColor=Utils.getBitmapColor(bitmap);
if (bitmapColor.mType == Type.FLAT) {
Utils.log(""String_Node_Str"");
color=bitmapColor.Color;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
darkHandled=true;
}
 else if (bitmapColor.mType == Type.GRADUAL) {
Utils.log(""String_Node_Str"");
color=bitmapColor.Color;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
darkHandled=true;
if (!(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"")) {
  Utils.resetPadding(activity,Constant.OFFEST_FOR_GRADUAL_ACTIVITY);
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
}
}
 else if (bitmapColor.mType == Type.PICTURE) {
Utils.log(""String_Node_Str"");
if (Settings.System.getInt(activity.getContentResolver(),SettingsActivity.KEY_PREF_FORCE_TINT,0) == 1) {
  color=bitmapColor.Color;
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
  isdark=Utils.getDarkMode(color);
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
  darkHandled=true;
}
}
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
activity.sendBroadcast(intent);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
}
}
,delay);
break;
case Translucent:
boolean needGetDarkModeFromBackground=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
if (needGetDarkModeFromBackground) {
Bitmap bitmap=Utils.getBitMapFromActivityBackground(activity);
if (bitmap != null) {
BitMapColor bitmapColor=Utils.getBitmapColor(bitmap);
int color=bitmapColor.Color;
boolean darkMode=Utils.getDarkMode(color);
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,Color.TRANSPARENT);
intent.putExtra(Constant.IS_DARKMODE,darkMode);
intent.putExtra(Constant.DARKMODE_HANDLE,true);
activity.sendBroadcast(intent);
}
}
break;
default :
break;
}
}","public void sendChangeStatusBarIntent(final Activity activity){
  boolean isSysApp=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (isSysApp) {
    Utils.log(""String_Node_Str"");
    return;
  }
  WindowType type=Utils.getWindowType(activity);
switch (type) {
case Normal:
    boolean needGetColorFromBackground=(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"");
  if (!needGetColorFromBackground)   return;
int delay=Constant.DELAY_GET_CACHEDRAWABLE;
String activityName=activity.getLocalClassName();
if (activityName.equals(""String_Node_Str"")) {
delay=800;
}
 else if (activityName.equals(""String_Node_Str"") && activity.getPackageName().equals(""String_Node_Str"")) {
delay=300;
}
Handler handler=new Handler();
handler.postDelayed(new Runnable(){
@Override public void run(){
Bitmap bitmap=Utils.getBitMapFromActivityBackground(activity);
int color=Color.BLACK;
boolean isdark=false;
boolean darkHandled=false;
if (bitmap != null) {
BitMapColor bitmapColor=Utils.getBitmapColor(bitmap);
if (bitmapColor.mType == Type.FLAT) {
Utils.log(""String_Node_Str"");
color=bitmapColor.Color;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
darkHandled=true;
}
 else if (bitmapColor.mType == Type.GRADUAL) {
Utils.log(""String_Node_Str"");
color=bitmapColor.Color;
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
isdark=Utils.getDarkMode(color);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
darkHandled=true;
if (!(Boolean)XposedHelpers.getAdditionalInstanceField(activity,""String_Node_Str"")) {
  Utils.resetPadding(activity,Constant.OFFEST_FOR_GRADUAL_ACTIVITY);
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",true);
}
}
 else if (bitmapColor.mType == Type.PICTURE) {
Utils.log(""String_Node_Str"");
if (Settings.System.getInt(activity.getContentResolver(),SettingsActivity.KEY_PREF_FORCE_TINT,0) == 1) {
  color=bitmapColor.Color;
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",color);
  isdark=Utils.getDarkMode(color);
  XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",isdark);
  darkHandled=true;
}
}
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,color);
intent.putExtra(Constant.IS_DARKMODE,isdark);
intent.putExtra(Constant.DARKMODE_HANDLE,darkHandled);
activity.sendBroadcast(intent);
XposedHelpers.setAdditionalInstanceField(activity,""String_Node_Str"",false);
}
}
,delay);
break;
case Translucent:
if (this.mDarkModeTranslucent == null) {
Bitmap bitmap=Utils.getBitMapFromActivityBackground(activity);
if (bitmap != null) {
BitMapColor bitmapColor=Utils.getBitmapColor(bitmap);
int color=bitmapColor.Color;
mDarkModeTranslucent=Utils.getDarkMode(color);
}
}
Intent intent=new Intent(Constant.INTENT_CHANGE_STATUSBAR_COLOR);
intent.putExtra(Constant.STATUSBAR_BACKGROUND_COLOR,Color.TRANSPARENT);
intent.putExtra(Constant.IS_DARKMODE,mDarkModeTranslucent);
intent.putExtra(Constant.DARKMODE_HANDLE,true);
activity.sendBroadcast(intent);
break;
default :
break;
}
}"
42262,"private XValue parseXExpr(Shell shell,String arg) throws CoreException {
  mLogger.entry(shell,arg);
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  compiler.setModuleURIResolver(new ShellModuleURIResolver(mShell));
  compiler.declareNamespace(""String_Node_Str"",EvalDefinition.kXMLSH_EXT_NAMESPACE);
  NameValueMap<String> ns=shell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  List<XValue> args=shell.getArgs();
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Variables variables=shell.getEnv().getVars();
  Collection<String> varnames=variables.getVarNames();
  NameValueMap<XdmValue> usedVars=new NameValueMap<XdmValue>(args.size() + varnames.size());
  for (  String name : varnames) {
    XVariable var=variables.get(name);
    XdmValue xdmValue=convertVar(var);
    if (xdmValue != null) {
      usedVars.put(var.getName(),xdmValue);
      sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
    }
  }
  int i=0;
  for (  XValue xv : args) {
    i++;
    XdmValue xdmValue=convertValue(xv);
    if (xdmValue != null) {
      String name=""String_Node_Str"" + i;
      usedVars.put(name,xdmValue);
      sb.append(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
  sb.append(arg);
  Shell saved_shell=ThreadLocalShell.set(shell);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    Entry<String,XdmValue> entry : usedVars.entrySet()) {
      XdmValue v=entry.getValue();
      eval.setExternalVariable(new QName(entry.getKey()),v);
    }
    XdmValue result=eval.evaluate();
    return mLogger.exit(XDMTypeFamily.getInstance().getXValue(result));
  }
 catch (  SaxonApiException e) {
    String msg=""String_Node_Str"" + arg;
    mLogger.warn(msg,e);
    mShell.printErr(msg,e);
    throw new CoreException(msg,e);
  }
 finally {
    ThreadLocalShell.set(saved_shell);
  }
}","private XValue parseXExpr(Shell shell,String arg) throws CoreException {
  mLogger.entry(shell,arg);
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  compiler.setModuleURIResolver(new ShellModuleURIResolver(mShell));
  compiler.declareNamespace(""String_Node_Str"",EvalDefinition.kXMLSH_EXT_NAMESPACE);
  NameValueMap<String> ns=shell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  List<XValue> args=shell.getArgs();
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Variables variables=shell.getEnv().getVars();
  Collection<String> varnames=variables.getVarNames();
  NameValueMap<XdmValue> usedVars=new NameValueMap<XdmValue>();
  for (  String name : varnames) {
    XVariable var=variables.get(name);
    XdmValue xdmValue=convertVar(var);
    if (xdmValue != null) {
      usedVars.put(var.getName(),xdmValue);
      sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
    }
  }
  int i=0;
  for (  XValue xv : args) {
    i++;
    XdmValue xdmValue=convertValue(xv);
    if (xdmValue != null) {
      String name=""String_Node_Str"" + i;
      usedVars.put(name,xdmValue);
      sb.append(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
  sb.append(arg);
  Shell saved_shell=ThreadLocalShell.set(shell);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    Entry<String,XdmValue> entry : usedVars.entrySet()) {
      XdmValue v=entry.getValue();
      eval.setExternalVariable(new QName(entry.getKey()),v);
    }
    XdmValue result=eval.evaluate();
    return mLogger.exit(XDMTypeFamily.getInstance().getXValue(result));
  }
 catch (  SaxonApiException e) {
    String msg=""String_Node_Str"" + arg;
    mLogger.warn(msg,e);
    mShell.printErr(msg,e);
    throw new CoreException(msg,e);
  }
 finally {
    ThreadLocalShell.set(saved_shell);
  }
}"
42263,"public void UnifiedFileAttributes(Path path,BasicFileAttributes attrs,boolean followLinks){
  mPath=path;
  setBasic(attrs);
  setPosix(FileUtils.getPosixFileAttributes(path,followLinks));
  setDos(FileUtils.getDosFileAttributes(path,followLinks));
  if (getPosix() != null) {
    if (getBasic() != null)     setBasic(getPosix());
    posixPermissions=getPosix().permissions();
  }
 else   if (getBasic() == null) {
    if (getDos() != null)     setBasic(getDos());
 else     setBasic(FileUtils.getBasicFileAttributes(path,followLinks));
  }
  if (posixPermissions == null) {
    posixPermissions=FileUtils.emulatePosixFilePermissions(path,followLinks);
  }
}","public void UnifiedFileAttributes(Path path,BasicFileAttributes attrs,boolean followLinks){
  mPath=path;
  setBasic(attrs);
  setPosix(FileUtils.getPosixFileAttributes(path,followLinks));
  setDos(FileUtils.getDosFileAttributes(path,followLinks));
  if (getPosix() != null) {
    if (getBasic() == null)     setBasic(getPosix());
    posixPermissions=getPosix().permissions();
  }
  if (getBasic() == null) {
    if (getDos() != null)     setBasic(getDos());
 else     setBasic(FileUtils.getBasicFileAttributes(path,followLinks));
  }
  if (posixPermissions == null) {
    posixPermissions=FileUtils.emulatePosixFilePermissions(path,followLinks);
  }
}"
42264,"public XValue expand(Shell shell,EvalEnv env,SourceLocation loc) throws IOException, CoreException {
  if (this.size() == 0)   return new XValue(XdmEmptySequence.getInstance());
  if (this.size() == 1)   return this.get(0).expand(shell,env,loc);
  List<XValue> list=new ArrayList<XValue>(this.size());
  for (  Word w : this)   list.add(w.expand(shell,env,loc));
  return new XValue(list);
}","public XValue expand(Shell shell,EvalEnv env,SourceLocation loc) throws IOException, CoreException {
  if (this.size() == 0)   return new XValue(XdmEmptySequence.getInstance());
  if (this.size() == 1)   return this.get(0).expand(shell,env,loc);
  List<XValue> list=new ArrayList<XValue>(this.size());
  for (  Word w : this) {
    XValue v=w.expand(shell,env,loc);
    if ((v == null || v.isNull()) && env.omitNulls())     continue;
    list.add(v);
  }
  return new XValue(list);
}"
42265,"List<XValue> expandToList(String arg,EvalEnv env) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(arg.substring(3,arg.length() - 3)));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  Result result=new Result();
  char c;
  int i;
  CharAttr curAttr=env.preserveValue() ? CharAttr.ATTR_PRESERVE : CharAttr.ATTR_NONE;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (env.parseQuotes()) {
      if (CharAttr.isQuote(c)) {
        CharAttr ca=CharAttr.valueOf(c);
        if (curAttr.isQuote()) {
          curAttr.clear(ca);
          if (curAttr.isQuote())           result.append(c,curAttr);
        }
 else {
          result.append((String)null,curAttr);
          curAttr.set(ca);
        }
        continue;
      }
 else       if (c == '\\') {
        if (curAttr.isHardQuote())         result.append(c,curAttr);
 else         if (i < arg.length()) {
          char nextc=arg.charAt(++i);
          if (curAttr.isSoftQuote()) {
switch (nextc) {
case '$':
case '`':
case '""':
case '\\':
case '\n':
              break;
default :
            result.append(c,curAttr);
          break;
      }
    }
    CharAttr cAttr=CharAttr.ATTR_ESCAPED;
    cAttr.set(curAttr);
    result.append(nextc,cAttr);
  }
  continue;
}
}
if (!curAttr.isHardQuote() && c == '$') {
if (++i == arg.length()) {
  result.append('$',curAttr);
  break;
}
StringBuffer sbv=new StringBuffer();
if (arg.charAt(i) == '{') {
  i=readToMatching(arg,i,sbv,'}');
}
 else {
  c=arg.charAt(i);
  if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
    boolean bKeepGoing;
    do {
      bKeepGoing=false;
      sbv.append(c);
      if (Character.isDigit(c)) {
        if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
          i++;
          bKeepGoing=true;
        }
      }
    }
 while (bKeepGoing);
  }
 else {
    for (; i < arg.length(); i++) {
      c=arg.charAt(i);
      if (Util.isIdentifier(c))       sbv.append(c);
 else {
        i--;
        break;
      }
    }
  }
}
String var=sbv.toString();
if (!Util.isBlank(var)) {
  if (var.equals(""String_Node_Str"")) {
    boolean bFirst=true;
    for (    XValue v : mShell.getArgs()) {
      if (curAttr.isSoftQuote()) {
        if (!bFirst)         result.append(mIFS.getFirstChar(),curAttr);
        result.append(v,curAttr);
      }
 else {
        result.flush();
        result.add(v);
      }
      bFirst=false;
    }
  }
 else   if (var.equals(""String_Node_Str"")) {
    boolean bFirst=true;
    List<XValue> args=mShell.getArgs();
    if (args.isEmpty())     result.resetIfEmpty();
 else     for (    XValue v : args) {
      if (curAttr.isSoftQuote() && bFirst)       result.append(v,curAttr);
 else       result.add(v);
      bFirst=false;
    }
  }
 else {
    List<XValue> vs=evalVar(var,curAttr);
    if (vs != null) {
      int vsize=vs.size();
      for (int vi=0; vi < vsize; vi++) {
        XValue v=vs.get(vi);
        if (vi > 0)         result.flush();
        result.append(v,curAttr);
      }
    }
  }
}
 else result.append('$',curAttr);
}
 else {
result.append(c,curAttr);
}
}
result.flush();
ArrayList<XValue> result2=new ArrayList<XValue>();
for (Result.RXValue rv : result.getResult()) {
if (!env.expandWild()) result2.add(rv.toXValue());
 else {
if (rv.bRaw) result2.add(rv.xvalue);
 else {
  List<XValue> r=expandWild(rv);
  if (r != null)   result2.addAll(r);
}
}
}
return result2;
}","List<XValue> expandToList(String arg,EvalEnv env) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(arg.substring(3,arg.length() - 3)));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  Result result=new Result();
  char c;
  int i;
  CharAttr curAttr=env.preserveValue() ? CharAttr.ATTR_PRESERVE : CharAttr.ATTR_NONE;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (env.parseQuotes()) {
      if (CharAttr.isQuote(c)) {
        CharAttr ca=CharAttr.valueOf(c);
        if (curAttr.isQuote()) {
          curAttr.clear(ca);
          if (curAttr.isQuote())           result.append(c,curAttr);
        }
 else {
          result.append((String)null,curAttr);
          curAttr.set(ca);
        }
        continue;
      }
 else       if (c == '\\') {
        if (curAttr.isHardQuote())         result.append(c,curAttr);
 else         if (i < arg.length()) {
          char nextc=arg.charAt(++i);
          if (curAttr.isSoftQuote()) {
switch (nextc) {
case '$':
case '`':
case '""':
case '\\':
case '\n':
              break;
default :
            result.append(c,curAttr);
          break;
      }
    }
    CharAttr cAttr=CharAttr.ATTR_ESCAPED;
    cAttr.set(curAttr);
    result.append(nextc,cAttr);
  }
  continue;
}
}
if (!curAttr.isHardQuote() && c == '$') {
if (++i == arg.length()) {
  result.append('$',curAttr);
  break;
}
StringBuffer sbv=new StringBuffer();
if (arg.charAt(i) == '{') {
  i=readToMatching(arg,i,sbv,'}');
}
 else {
  c=arg.charAt(i);
  if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
    boolean bKeepGoing;
    do {
      bKeepGoing=false;
      sbv.append(c);
      if (Character.isDigit(c)) {
        if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
          i++;
          bKeepGoing=true;
        }
      }
    }
 while (bKeepGoing);
  }
 else {
    for (; i < arg.length(); i++) {
      c=arg.charAt(i);
      if (Util.isIdentifier(c))       sbv.append(c);
 else {
        i--;
        break;
      }
    }
  }
}
String var=sbv.toString();
if (!Util.isBlank(var)) {
  if (var.equals(""String_Node_Str"")) {
    boolean bFirst=true;
    for (    XValue v : mShell.getArgs()) {
      if (curAttr.isSoftQuote()) {
        if (!bFirst)         result.append(mIFS.getFirstChar(),curAttr);
        result.append(v,env,curAttr);
      }
 else {
        result.flush();
        result.add(v);
      }
      bFirst=false;
    }
  }
 else   if (var.equals(""String_Node_Str"")) {
    boolean bFirst=true;
    List<XValue> args=mShell.getArgs();
    if (args.isEmpty())     result.resetIfEmpty();
 else     for (    XValue v : args) {
      if (curAttr.isSoftQuote() && bFirst)       result.append(v,env,curAttr);
 else       result.add(v);
      bFirst=false;
    }
  }
 else {
    List<XValue> vs=evalVar(var,curAttr);
    if (vs != null) {
      int vsize=vs.size();
      for (int vi=0; vi < vsize; vi++) {
        XValue v=vs.get(vi);
        if (vi > 0)         result.flush();
        result.append(v,env,curAttr);
      }
    }
  }
}
 else result.append('$',curAttr);
}
 else {
result.append(c,curAttr);
}
}
result.flush();
ArrayList<XValue> result2=new ArrayList<XValue>();
for (Result.RXValue rv : result.getResult()) {
if (!env.expandWild()) result2.add(rv.toXValue());
 else {
if (rv.bRaw) result2.add(rv.xvalue);
 else {
  List<XValue> r=expandWild(rv);
  if (r != null)   result2.addAll(r);
}
}
}
return result2;
}"
42266,"public void append(XValue value,CharAttr attr){
  if (value.isAtomic() && !attr.isPreserve()) {
    if (attr.isQuote() || cur != null || (achars != null && !achars.isEmpty())) {
      String str=value.toString();
      if (attr.isQuote() && Util.isEmpty(str))       return;
      append(str,attr);
    }
 else     cur=new RXValue(value,false);
  }
 else {
    if (attr.isQuote()) {
      if (value.isObject())       append(value,attr);
 else {
        boolean bFirst=true;
        for (        XdmValue v : value.asXdmValue()) {
          if (!bFirst)           append(sSEPSPACE,attr);
          append(v.toString(),attr);
          bFirst=false;
        }
      }
    }
 else {
      flush();
      add(value,attr.isPreserve());
    }
  }
}","public void append(XValue value,EvalEnv env,CharAttr attr){
  if ((value == null || value.isNull()) && env.omitNulls())   return;
  if (value.isAtomic() && !attr.isPreserve()) {
    if (attr.isQuote() || cur != null || (achars != null && !achars.isEmpty())) {
      String str=value.toString();
      if (attr.isQuote() && Util.isEmpty(str))       return;
      append(str,attr);
    }
 else     cur=new RXValue(value,false);
  }
 else {
    if (attr.isQuote()) {
      if (value.isObject())       append(value.toString(),attr);
 else {
        boolean bFirst=true;
        for (        XdmValue v : value.asXdmValue()) {
          if (!bFirst)           append(sSEPSPACE,attr);
          append(v.toString(),attr);
          bFirst=false;
        }
      }
    }
 else {
      flush();
      add(value,attr.isPreserve());
    }
  }
}"
42267,"public static boolean wildMatches(String pattern,String word,boolean caseSensitive){
  String reg=""String_Node_Str"" + pattern.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  if (reg.equals(""String_Node_Str""))   reg=""String_Node_Str"";
  Pattern p=Pattern.compile(reg,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
  return p.matcher(word).matches();
}","public static boolean wildMatches(String pattern,String word,boolean caseSensitive){
  return compileWild(pattern,caseSensitive).matcher(word).matches();
}"
42268,"public final synchronized void release(){
  try {
    if (--mRef <= 0) {
      flush();
      close();
    }
  }
 catch (  Exception e) {
    LogManager.getLogger(getClass()).error(""String_Node_Str"",e);
  }
}","public final void release(){
  try {
    if (mRef.decrementAndGet() <= 0) {
synchronized (this) {
        flush();
        close();
      }
    }
  }
 catch (  Exception e) {
    LogManager.getLogger(getClass()).error(""String_Node_Str"",e);
  }
}"
42269,"public final synchronized void addRef(){
  mRef++;
}","public final void addRef(){
  mRef.incrementAndGet();
}"
42270,"ExplorerOptions(String connectString) throws Exception {
  if (connectString != null) {
    URI uri=new URI(connectString);
    mScheme=uri.getScheme();
    mHost=uri.getHost();
    mPort=uri.getPort();
    String userInfoStr=uri.getUserInfo();
    String[] userInfo=(userInfoStr == null) ? (new String[0]) : userInfoStr.split(""String_Node_Str"",2);
    String contentBase=uri.getPath();
    if (contentBase != null) {
      if (contentBase.startsWith(""String_Node_Str"")) {
        contentBase=contentBase.substring(1);
      }
      if (contentBase.length() == 0) {
        contentBase=uri.getFragment();
        if (contentBase != null) {
          contentBase=""String_Node_Str"" + contentBase;
        }
      }
    }
    mDatabase=contentBase;
    if (userInfo.length == 2) {
      mUser=userInfo[0];
      mPassword=userInfo[1];
    }
  }
  mOptions=MLUtil.newTrustOptions(mScheme);
}","ExplorerOptions(String connectString) throws Exception {
  if (!Util.isBlank(connectString)) {
    URI uri=new URI(connectString);
    mScheme=uri.getScheme();
    mHost=uri.getHost();
    mPort=uri.getPort();
    String userInfoStr=uri.getUserInfo();
    String[] userInfo=(userInfoStr == null) ? (new String[0]) : userInfoStr.split(""String_Node_Str"",2);
    String contentBase=uri.getPath();
    if (contentBase != null) {
      if (contentBase.startsWith(""String_Node_Str"")) {
        contentBase=contentBase.substring(1);
      }
      if (contentBase.length() == 0) {
        contentBase=uri.getFragment();
        if (contentBase != null) {
          contentBase=""String_Node_Str"" + contentBase;
        }
      }
    }
    mDatabase=contentBase;
    if (userInfo.length == 2) {
      mUser=userInfo[0];
      mPassword=userInfo[1];
    }
  }
  mOptions=MLUtil.newTrustOptions(mScheme);
}"
42271,"private boolean eval(List<XValue> av) throws Error, UnexpectedException, IOException, XPathException {
  if (av.size() == 0)   return false;
  XValue av1=av.remove(0);
  if (av.size() == 0 || av.get(0).equals(""String_Node_Str""))   return evalUnary(""String_Node_Str"",av1);
  if (av1.isAtomic()) {
    String a1=av1.toString();
    if (a1.equals(""String_Node_Str""))     return !eval(av);
    if (a1.equals(""String_Node_Str"")) {
      boolean ret=eval(av);
      if (av.size() < 1 || !av.remove(0).equals(""String_Node_Str"")) {
        throw new Error(""String_Node_Str"");
      }
      return ret;
    }
 else     if (a1.startsWith(""String_Node_Str"") && !Util.isInt(a1,true)) {
      if (av.size() < 1) {
        throw new Error(""String_Node_Str"" + a1);
      }
      return evalUnary(a1,av.remove(0));
    }
 else     if (av.size() == 1) {
      throw new Error(""String_Node_Str"" + av.remove(0));
    }
  }
  XValue op=av.remove(0);
  if (op.isAtomic())   return evalBinary(av1,op.toString(),av.remove(0));
 else   throw new Error(""String_Node_Str"");
}","private boolean eval(List<XValue> av) throws Error, UnexpectedException, IOException, XPathException {
  if (av.size() == 0)   return false;
  XValue av1=av.remove(0);
  if (av.size() == 0)   return evalUnary(""String_Node_Str"",av1);
  if (pdepth > 0 && av.get(0).equals(""String_Node_Str"")) {
    pdepth--;
    av.remove(0);
    return evalUnary(""String_Node_Str"",av1);
  }
  if (av1.isAtomic()) {
    String a1=av1.toString();
    if (a1.equals(""String_Node_Str""))     return !eval(av);
    if (a1.equals(""String_Node_Str"")) {
      pdepth++;
      boolean ret=eval(av);
      if (av.size() < 1)       return ret;
      if (pdepth > 0 && (av.get(0).isAtomic() && av.get(0).toString().equals(""String_Node_Str""))) {
        av.remove(0);
        pdepth--;
        return ret;
      }
    }
 else     if (a1.startsWith(""String_Node_Str"") && !Util.isInt(a1,true)) {
      if (av.size() < 1) {
        throw new Error(""String_Node_Str"" + a1);
      }
      return evalUnary(a1,av.remove(0));
    }
 else     if (av.size() == 1) {
      throw new Error(""String_Node_Str"" + av.remove(0));
    }
  }
  XValue op=av.remove(0);
  if (op.isAtomic()) {
    if (av.size() < 1)     throw new Error(""String_Node_Str"");
    return evalBinary(av1,op.toString(),av.remove(0));
  }
 else   throw new Error(""String_Node_Str"");
}"
42272,"private boolean evalUnary(String op,XValue value) throws Error, UnexpectedException, IOException, XPathException {
  if (op.equals(""String_Node_Str""))   return value.isXExpr();
 else   if (op.equals(""String_Node_Str""))   return value.isAtomic();
 else   if (op.equals(""String_Node_Str""))   return mShell.getEnv().isDefined(value.toString());
  if (op.equals(""String_Node_Str"")) {
    return value.toBoolean();
  }
 else   if (op.equals(""String_Node_Str"")) {
    return !value.toBoolean();
  }
 else   if (op.equals(""String_Node_Str""))   return getFile(value).isDirectory();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).exists();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).isFile();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canRead();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).length() > 0;
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canWrite();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canExecute();
 else   if (op.equals(""String_Node_Str""))   return isURI(value);
 else {
    throw new Error(""String_Node_Str"" + op);
  }
}","private boolean evalUnary(String op,XValue value) throws Error, UnexpectedException, IOException, XPathException {
  if (op.equals(""String_Node_Str""))   return value.isXExpr();
 else   if (op.equals(""String_Node_Str""))   return value.isAtomic();
 else   if (op.equals(""String_Node_Str""))   return mShell.getEnv().isDefined(value.toString());
  if (op.equals(""String_Node_Str"")) {
    return value.toBoolean();
  }
 else   if (op.equals(""String_Node_Str"")) {
    return !value.toBoolean();
  }
 else   if (op.equals(""String_Node_Str""))   return getFile(value).getTotalSpace() > 0L;
 else   if (op.equals(""String_Node_Str""))   return getFile(value).isDirectory();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).exists();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).isFile();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canRead();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).length() > 0;
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canWrite();
 else   if (op.equals(""String_Node_Str""))   return getFile(value).canExecute();
 else   if (op.equals(""String_Node_Str""))   return isURI(value);
 else {
    throw new Error(""String_Node_Str"" + op);
  }
}"
42273,"public void close(){
  mIO.release();
  if (mAutoRelease != null) {
    mAutoRelease.close();
    mAutoRelease=null;
  }
}","public void close() throws CoreException {
  if (this.mSavedIO != null && !mSavedIO.isEmpty())   throw new CoreException(""String_Node_Str"");
  mIO.release();
  if (mAutoRelease != null) {
    mAutoRelease.close();
    mAutoRelease=null;
  }
}"
42274,"public InputPort setInput(String name,InputPort port) throws CoreException {
  InputPort in;
  if (name == null || name.equals(kSTDIN)) {
    name=kSTDIN;
    in=mInputs.getDefault();
    mStdinRedirected=true;
  }
 else   in=mInputs.get(name);
  if (in != null) {
    mInputs.removePort(in);
    in.release();
  }
  mInputs.add(new NamedPort<InputPort>(name,name.equals(kSTDIN),port));
  return port;
}","public InputPort setInput(String name,InputPort port) throws CoreException {
  InputPort in;
  if (name == null || name.equals(kSTDIN)) {
    name=kSTDIN;
    mStdinRedirected=true;
  }
  in=mInputs.removeNamed(name);
  if (in != null)   in.release();
  mInputs.add(new NamedPort<InputPort>(name,name.equals(kSTDIN),port));
  return port;
}"
42275,"public void setOutput(String name,OutputPort port) throws CoreException {
  OutputPort out;
  if (name == null) {
    out=mOutputs.getDefault();
    name=kSTDOUT;
  }
 else   out=mOutputs.get(name);
  if (out != null) {
    mOutputs.removePort(out);
    out.release();
  }
  mOutputs.add(new NamedPort<OutputPort>(name,name.equals(kSTDOUT),port));
}","public void setOutput(String name,OutputPort port) throws CoreException {
  OutputPort out;
  if (name == null)   name=kSTDOUT;
  out=mOutputs.removeNamed(name);
  if (out != null)   out.release();
  mOutputs.add(new NamedPort<OutputPort>(name,name.equals(kSTDOUT),port));
}"
42276,"public void setStderr(OutputPort err) throws CoreException {
  OutputPort stderr=mOutputs.get(kSTDERR);
  if (stderr != null) {
    mOutputs.removePort(stderr);
    stderr.release();
  }
  mOutputs.add(new NamedPort<OutputPort>(kSTDERR,false,err));
}","public void setStderr(OutputPort err) throws CoreException {
  OutputPort stderr=mOutputs.removeNamed(kSTDERR);
  if (stderr != null)   stderr.release();
  mOutputs.add(new NamedPort<OutputPort>(kSTDERR,false,err));
}"
42277,"public void close(){
  if (mEnv != null) {
    mEnv.close();
    mEnv=null;
  }
  if (mSavedCD != null)   SystemEnvironment.getInstance().setProperty(""String_Node_Str"",mSavedCD);
  if (mSession != null) {
    mSession.release();
    mSession=null;
  }
}","public void close(){
  try {
    if (mEnv != null) {
      mEnv.close();
      mEnv=null;
    }
    if (mSavedCD != null)     SystemEnvironment.getInstance().setProperty(""String_Node_Str"",mSavedCD);
    if (mSession != null) {
      mSession.release();
      mSession=null;
    }
  }
 catch (  CoreException e) {
    mLogger.error(""String_Node_Str"",e);
  }
}"
42278,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean bList=opts.hasOpt(""String_Node_Str"");
  String dest=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  InputPort iport=(zipfile == null ? getStdin() : getInput(zipfile));
  InputStream is=iport.asInputStream(serializeOpts);
  ZipInputStream zis=new ZipInputStream(is);
  try {
    int ret=0;
    if (bList) {
      ret=list(zis,serializeOpts,args);
      while (is.read() >= 0)       ;
    }
 else     ret=unzip(zis,getFile(dest),args);
    zis.close();
    return ret;
  }
  finally {
    zis.close();
    is.close();
    iport.close();
  }
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean bList=opts.hasOpt(""String_Node_Str"");
  String dest=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  InputPort iport=(zipfile == null ? getStdin() : getInput(zipfile));
  InputStream is=iport.asInputStream(serializeOpts);
  ZipInputStream zis=new ZipInputStream(is);
  try {
    int ret=0;
    if (bList) {
      ret=list(zis,serializeOpts,args);
    }
 else     ret=unzip(zis,getFile(dest),args);
    while (is.read() >= 0)     ;
    zis.close();
    return ret;
  }
  finally {
    zis.close();
    is.close();
    iport.close();
  }
}"
42279,"public final synchronized void release(){
  try {
    flush();
    if (--mRef <= 0)     close();
  }
 catch (  Exception e) {
    LogManager.getLogger(getClass()).error(""String_Node_Str"",e);
  }
}","public final synchronized void release(){
  try {
    if (--mRef <= 0) {
      flush();
      close();
    }
  }
 catch (  Exception e) {
    LogManager.getLogger(getClass()).error(""String_Node_Str"",e);
  }
}"
42280,"@Override public SequenceIterator call(SequenceIterator[] arguments,XPathContext context) throws XPathException {
  String command=arguments[0].next().getStringValue();
  SequenceIterator args=arguments.length > 1 ? arguments[1] : null;
  Shell shell=ShellContext.get();
  try {
    if (shell == null)     shell=new Shell();
 else     shell=shell.clone();
    Command cmd=shell.parseEval(command);
    List<XValue> shell_args=new ArrayList<XValue>();
    Item item=null;
    if (args != null) {
      while ((item=args.next()) != null) {
        shell_args.add(new XValue(item));
      }
    }
    XValue oValue=new XValue();
    XVariable oVar=new XVariable(""String_Node_Str"",oValue);
    VariableOutputPort oPort=new VariableOutputPort(oVar);
    shell.getEnv().setStdout(oPort);
    Item contextItem=null;
    if (arguments.length > 2)     contextItem=arguments[2].next();
 else     contextItem=context.getContextItem();
    if (context != null) {
      VariableInputPort iPort=new VariableInputPort(new XVariable(""String_Node_Str"",new XValue(contextItem)));
      shell.getEnv().setStdin(iPort);
    }
    shell.setArgs(shell_args);
    try {
      shell.exec(cmd);
    }
 catch (    ThrowException e) {
      mLogger.info(""String_Node_Str"",e);
      return null;
    }
    oValue=oVar.getValue();
    if (oValue == null)     return null;
    return oValue.asSequenceIterator();
  }
 catch (  Exception e) {
    throw new XPathException(e);
  }
 finally {
    shell.close();
  }
}","@Override public SequenceIterator call(SequenceIterator[] arguments,XPathContext context) throws XPathException {
  String command=arguments[0].next().getStringValue();
  SequenceIterator args=arguments.length > 1 ? arguments[1] : null;
  Shell shell=ShellContext.get();
  try {
    if (shell == null)     shell=new Shell();
 else     shell=shell.clone();
    Command cmd=shell.parseEval(command);
    List<XValue> shell_args=new ArrayList<XValue>();
    Item item=null;
    if (args != null) {
      while ((item=args.next()) != null) {
        shell_args.add(new XValue(item));
      }
    }
    XValue oValue=new XValue();
    XVariable oVar=new XVariable(""String_Node_Str"",oValue);
    VariableOutputPort oPort=new VariableOutputPort(oVar);
    shell.getEnv().setStdout(oPort);
    Item contextItem=null;
    if (arguments.length > 2)     contextItem=arguments[2].next();
 else     contextItem=context.getContextItem();
    if (context != null) {
      VariableInputPort iPort=new VariableInputPort(new XVariable(""String_Node_Str"",new XValue(contextItem)));
      shell.getEnv().setStdin(iPort);
    }
    shell.setArgs(shell_args);
    try {
      shell.exec(cmd);
    }
 catch (    ThrowException e) {
      mLogger.info(""String_Node_Str"",e);
      return null;
    }
    oPort.release();
    oValue=oVar.getValue();
    if (oValue == null)     return null;
    return oValue.asSequenceIterator();
  }
 catch (  Exception e) {
    throw new XPathException(e);
  }
 finally {
    shell.close();
  }
}"
42281,"public void serialize(OutputStream out,SerializeOpts opt) throws UnsupportedEncodingException, IOException, SaxonApiException {
  if (isAtomic())   out.write(toString().getBytes(opt.getEncoding()));
 else   if (mValue instanceof XdmValue) {
    Serializer ser=Util.getSerializer(opt);
    ser.setOutputStream(out);
    Util.writeXdmValue(asXdmValue(),ser);
  }
}","public void serialize(OutputStream out,SerializeOpts opt) throws UnsupportedEncodingException, IOException, SaxonApiException {
  if (isAtomic() || isObject())   out.write(toString().getBytes(opt.getEncoding()));
 else   if (mValue instanceof XdmValue) {
    Serializer ser=Util.getSerializer(opt);
    ser.setOutputStream(out);
    Util.writeXdmValue(asXdmValue(),ser);
  }
}"
42282,"public String toString(){
  if (mValue != null) {
    if (isAtomic())     return mValue.toString();
 else {
      try {
        return new String(toBytes(""String_Node_Str""),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        mLogger.warn(""String_Node_Str"");
      }
    }
  }
  return ""String_Node_Str"";
}","public String toString(){
  if (mValue != null) {
    if (isAtomic() || isObject())     return mValue.toString();
 else {
      try {
        return new String(toBytes(""String_Node_Str""),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        mLogger.warn(""String_Node_Str"");
      }
    }
  }
  return ""String_Node_Str"";
}"
42283,"public boolean isAtomic(){
  if (mValue == null)   return true;
  if (!(mValue instanceof XdmValue))   return true;
  ValueRepresentation value=asXdmValue().getUnderlyingValue();
  boolean isAtom=(value instanceof AtomicValue) || (value instanceof NodeInfo && ((NodeInfo)value).getNodeKind() == net.sf.saxon.type.Type.TEXT);
  return isAtom;
}","public boolean isAtomic(){
  if (mValue == null)   return true;
  if (!(mValue instanceof XdmValue))   return false;
  ValueRepresentation value=asXdmValue().getUnderlyingValue();
  boolean isAtom=(value instanceof AtomicValue) || (value instanceof NodeInfo && ((NodeInfo)value).getNodeKind() == net.sf.saxon.type.Type.TEXT);
  return isAtom;
}"
42284,"public static List<XValue> expandSequences(List<XValue> values){
  if (values.isEmpty())   return values;
  ArrayList<XValue> list=new ArrayList<XValue>(values.size());
  for (  XValue arg : values) {
    if (arg.isAtomic())     list.add(arg);
 else {
      XdmValue xv=arg.asXdmValue();
      Iterator<XdmItem> iter=xv.iterator();
      while (iter.hasNext())       list.add(new XValue(iter.next()));
    }
  }
  return list;
}","public static List<XValue> expandSequences(List<XValue> values){
  if (values.isEmpty())   return values;
  ArrayList<XValue> list=new ArrayList<XValue>(values.size());
  for (  XValue arg : values) {
    if (arg.isAtomic() || arg.isObject())     list.add(arg);
 else {
      XdmValue xv=arg.asXdmValue();
      Iterator<XdmItem> iter=xv.iterator();
      while (iter.hasNext())       list.add(new XValue(iter.next()));
    }
  }
  return list;
}"
42285,"@Override public int exec(Shell shell) throws Exception {
  XValue ret=null;
  if (mArg == null)   ret=new XValue(0);
 else   ret=mArg.expand(shell,false,false,false,getLocation()).get(0);
  shell.exec_return(ret);
  return 0;
}","@Override public int exec(Shell shell) throws Exception {
  XValue ret=null;
  if (mArg == null)   ret=new XValue(0);
 else {
    List<XValue> vret=mArg.expand(shell,false,false,false,getLocation());
    if (vret == null || vret.isEmpty())     ret=new XValue();
 else     ret=vret.get(0);
  }
  shell.exec_return(ret);
  return 0;
}"
42286,"private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen - 1) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    String sbs=sb.toString();
    if (sbs.equals(vs))     r.add(v);
 else     r.add(new XValue(sbs));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  vs=vs.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String root=null;
  String parent=null;
  if (vs.startsWith(""String_Node_Str"")) {
    root=""String_Node_Str"";
    parent=""String_Node_Str"";
    vs=vs.substring(1);
  }
  if (Util.isWindows() && vs.matches(""String_Node_Str"")) {
    root=vs.substring(0,2) + ""String_Node_Str"";
    vs=vs.substring(2);
    if (vs.startsWith(""String_Node_Str""))     vs=vs.substring(1);
    parent=root;
  }
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(root == null ? mShell.getCurdir() : new File(root),parent,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}","private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr() || v.isObject()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen - 1) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    String sbs=sb.toString();
    if (sbs.equals(vs))     r.add(v);
 else     r.add(new XValue(sbs));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  vs=vs.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String root=null;
  String parent=null;
  if (vs.startsWith(""String_Node_Str"")) {
    root=""String_Node_Str"";
    parent=""String_Node_Str"";
    vs=vs.substring(1);
  }
  if (Util.isWindows() && vs.matches(""String_Node_Str"")) {
    root=vs.substring(0,2) + ""String_Node_Str"";
    vs=vs.substring(2);
    if (vs.startsWith(""String_Node_Str""))     vs=vs.substring(1);
    parent=root;
  }
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(root == null ? mShell.getCurdir() : new File(root),parent,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}"
42287,"private void writeXML(Properties props,String comment) throws IOException, CoreException, SaxonApiException, XMLStreamException {
  SerializeOpts serializeOpts=getSerializeOpts();
  ByteArrayOutputStream oss=new ByteArrayOutputStream();
  props.storeToXML(oss,comment,serializeOpts.getEncoding());
  ByteArrayInputStream iss=new ByteArrayInputStream(oss.toByteArray());
  XMLInputFactory factory=XMLInputFactory.newInstance();
  factory.setProperty(XMLInputFactory.SUPPORT_DTD,new Boolean(false));
  XMLEventReader reader=factory.createXMLEventReader(null,iss);
  XMLEventWriter writer=getStdout().asXMLEventWriter(serializeOpts);
  writer.add(reader);
  reader.close();
  writer.close();
}","private void writeXML(Properties props,String comment) throws IOException, CoreException, SaxonApiException, XMLStreamException {
  SerializeOpts serializeOpts=getSerializeOpts();
  ByteArrayOutputStream oss=new ByteArrayOutputStream();
  props.storeToXML(oss,comment,serializeOpts.getEncoding());
  ByteArrayInputStream iss=new ByteArrayInputStream(oss.toByteArray());
  XMLInputFactory factory=XMLInputFactory.newInstance();
  factory.setProperty(XMLInputFactory.SUPPORT_DTD,Boolean.valueOf(false));
  XMLEventReader reader=factory.createXMLEventReader(null,iss);
  XMLEventWriter writer=getStdout().asXMLEventWriter(serializeOpts);
  writer.add(reader);
  reader.close();
  writer.close();
}"
42288,"private void runUpdate(Connection conn,SerializeOpts serializeOpts,String root,String row,String query,boolean bAttr,int batch) throws SQLException, IOException, InvalidArgumentException, XMLStreamException {
  Statement pStmt=null;
  ResultSet rs=null;
  try {
    pStmt=conn.createStatement();
    OutputPort stdout=getStdout();
    XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
    writer.writeStartDocument();
    writer.writeStartElement(root);
    int rows=pStmt.executeUpdate(query);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(rows));
    writer.writeEndElement();
    writer.writeEndDocument();
    stdout.writeSequenceTerminator(serializeOpts);
    writer.close();
  }
  finally {
    try {
      if (rs != null)       rs.close();
      if (pStmt != null)       pStmt.close();
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}","private void runUpdate(Connection conn,SerializeOpts serializeOpts,String root,String row,String query,boolean bAttr,int batch) throws SQLException, IOException, InvalidArgumentException, XMLStreamException {
  Statement pStmt=null;
  try {
    pStmt=conn.createStatement();
    OutputPort stdout=getStdout();
    XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
    writer.writeStartDocument();
    writer.writeStartElement(root);
    int rows=pStmt.executeUpdate(query);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(rows));
    writer.writeEndElement();
    writer.writeEndDocument();
    stdout.writeSequenceTerminator(serializeOpts);
    writer.close();
  }
  finally {
    try {
      if (pStmt != null)       pStmt.close();
    }
 catch (    Exception e) {
      mLogger.error(""String_Node_Str"",e);
    }
  }
}"
42289,"private void runQuery(Connection conn,SerializeOpts serializeOpts,String root,String row,String query,boolean bAttr,String fetch) throws SQLException, IOException, InvalidArgumentException, XMLStreamException {
  Statement pStmt=null;
  ResultSet rs=null;
  try {
    pStmt=conn.createStatement();
    if (fetch != null)     pStmt.setFetchSize(Util.parseInt(fetch,1));
    OutputPort stdout=getStdout();
    XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
    writer.writeStartDocument();
    writer.writeStartElement(root);
    rs=pStmt.executeQuery(query);
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      addElement(writer,rs,row,bAttr,meta);
    }
    writer.writeEndElement();
    writer.writeEndDocument();
    stdout.writeSequenceTerminator(serializeOpts);
    writer.close();
  }
  finally {
    try {
      if (rs != null)       rs.close();
      if (pStmt != null)       pStmt.close();
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}","private void runQuery(Connection conn,SerializeOpts serializeOpts,String root,String row,String query,boolean bAttr,String fetch) throws SQLException, IOException, InvalidArgumentException, XMLStreamException {
  Statement pStmt=null;
  ResultSet rs=null;
  try {
    pStmt=conn.createStatement();
    if (fetch != null)     pStmt.setFetchSize(Util.parseInt(fetch,1));
    OutputPort stdout=getStdout();
    XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
    writer.writeStartDocument();
    writer.writeStartElement(root);
    rs=pStmt.executeQuery(query);
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      addElement(writer,rs,row,bAttr,meta);
    }
    writer.writeEndElement();
    writer.writeEndDocument();
    stdout.writeSequenceTerminator(serializeOpts);
    writer.close();
  }
  finally {
    try {
      if (rs != null)       rs.close();
      if (pStmt != null)       pStmt.close();
    }
 catch (    Exception e) {
      mLogger.error(""String_Node_Str"",e);
    }
  }
}"
42290,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean bList=opts.hasOpt(""String_Node_Str"");
  String dest=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  InputPort iport=(zipfile == null ? getStdin() : getInput(zipfile));
  InputStream is=iport.asInputStream(serializeOpts);
  ZipInputStream zis=new ZipInputStream(is);
  try {
    int ret=0;
    if (bList) {
      ret=list(zis,serializeOpts,args);
      while (is.read() >= 0)       ;
    }
 else     ret=unzip(zis,getFile(dest),args);
    zis.close();
  }
  finally {
    zis.close();
    is.close();
    iport.close();
  }
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean bList=opts.hasOpt(""String_Node_Str"");
  String dest=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  InputPort iport=(zipfile == null ? getStdin() : getInput(zipfile));
  InputStream is=iport.asInputStream(serializeOpts);
  ZipInputStream zis=new ZipInputStream(is);
  try {
    int ret=0;
    if (bList) {
      ret=list(zis,serializeOpts,args);
      while (is.read() >= 0)       ;
    }
 else     ret=unzip(zis,getFile(dest),args);
    zis.close();
    return ret;
  }
  finally {
    zis.close();
    is.close();
    iport.close();
  }
}"
42291,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  ZipOutputStream zos=new ZipOutputStream(zipfile == null ? getStdout().asOutputStream(serializeOpts) : this.getOutputStream(zipfile.toString(),false));
  try {
    int ret=0;
    ret=zip(zos,args);
    zos.finish();
  }
  finally {
    zos.close();
  }
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  ZipOutputStream zos=new ZipOutputStream(zipfile == null ? getStdout().asOutputStream(serializeOpts) : this.getOutputStream(zipfile.toString(),false));
  try {
    int ret=0;
    ret=zip(zos,args);
    zos.finish();
    return ret;
  }
  finally {
    zos.close();
  }
}"
42292,"public synchronized void flush() throws CoreException {
  if (mXdmDestination != null)   appendVar(mXdmDestination.getXdmNode());
  if (mByteArrayOutputStream != null)   try {
    appendVar(mByteArrayOutputStream.toString(mSerializeOpts.getText_encoding()));
  }
 catch (  UnsupportedEncodingException e1) {
    throw new CoreException(e1);
  }
  if (mBuilder != null)   appendVar((XdmNode)S9Util.wrapNode(mBuilder.getCurrentRoot()));
  if (mWriterBuffer != null) {
    DocumentBuilder builder=Shell.getProcessor().newDocumentBuilder();
    XdmNode node;
    try {
      node=builder.build(new StAXSource(mWriterBuffer.getReader()));
    }
 catch (    Exception e) {
      throw new CoreException(e);
    }
    appendVar(node);
  }
  mXdmDestination=null;
  mByteArrayOutputStream=null;
  mBuilder=null;
  mWriterBuffer=null;
}","public synchronized void flush() throws CoreException {
  if (mXdmDestination != null)   appendVar(mXdmDestination.getXdmNode());
  if (mByteArrayOutputStream != null)   try {
    appendVar(mByteArrayOutputStream.toString(mSerializeOpts.getText_encoding()));
  }
 catch (  UnsupportedEncodingException e1) {
    throw new CoreException(e1);
  }
  if (mBuilder != null)   appendVar((XdmNode)S9Util.wrapNode(mBuilder.getCurrentRoot()));
  mXdmDestination=null;
  mByteArrayOutputStream=null;
  mBuilder=null;
}"
42293,"@Override public ContentHandler asContentHandler(SerializeOpts opts) throws XPathException {
  ReceivingContentHandler rch=new ReceivingContentHandler();
  Receiver r=null;
  Builder b=new TinyBuilder();
  PipelineConfiguration pipe=Shell.getProcessor().getUnderlyingConfiguration().makePipelineConfiguration();
  b.setPipelineConfiguration(pipe);
  r=b;
  rch.setReceiver(r);
  rch.setPipelineConfiguration(pipe);
  mBuilder=b;
  return rch;
}","@Override public synchronized ContentHandler asContentHandler(SerializeOpts opts) throws XPathException {
  ReceivingContentHandler rch=new ReceivingContentHandler();
  Receiver r=null;
  Builder b=new TinyBuilder();
  PipelineConfiguration pipe=Shell.getProcessor().getUnderlyingConfiguration().makePipelineConfiguration();
  b.setPipelineConfiguration(pipe);
  r=b;
  rch.setReceiver(r);
  rch.setPipelineConfiguration(pipe);
  mBuilder=b;
  return rch;
}"
42294,"public void validate(String systemid,InputStream xml) throws Exception {
  XMLValidationSchemaFactory sf=XMLValidationSchemaFactory.newInstance(XMLValidationSchema.SCHEMA_ID_DTD);
  XMLValidationSchema rng=sf.createSchema(mDTD);
  XMLInputFactory2 ifact=(XMLInputFactory2)XMLInputFactory.newInstance();
  ifact.setProperty(XMLInputFactory2.P_DTD_OVERRIDE,null);
  ifact.setProperty(XMLInputFactory.SUPPORT_DTD,new Boolean(false));
  XMLStreamReader2 sr=(XMLStreamReader2)ifact.createXMLStreamReader(systemid,xml);
  sr.validateAgainst(rng);
  while (sr.hasNext()) {
    sr.next();
  }
}","public void validate(String systemid,InputStream xml) throws Exception {
  XMLValidationSchemaFactory sf=XMLValidationSchemaFactory.newInstance(XMLValidationSchema.SCHEMA_ID_DTD);
  XMLValidationSchema rng=sf.createSchema(mDTD);
  XMLInputFactory2 ifact=(XMLInputFactory2)XMLInputFactory.newInstance();
  ifact.setProperty(XMLInputFactory2.P_DTD_OVERRIDE,null);
  ifact.setProperty(XMLInputFactory.SUPPORT_DTD,Boolean.valueOf(false));
  XMLStreamReader2 sr=(XMLStreamReader2)ifact.createXMLStreamReader(systemid,xml);
  sr.validateAgainst(rng);
  while (sr.hasNext()) {
    sr.next();
  }
}"
42295,"public void execute() throws BuildException {
  mLogger.info(""String_Node_Str"");
  Shell shell=null;
  try {
    shell=new Shell();
    List<XValue> vargs=new ArrayList<XValue>();
    if (mScript != null)     vargs.add(new XValue(mScript));
 else {
      vargs.add(new XValue(""String_Node_Str""));
      vargs.add(new XValue(mText));
    }
    if (mArgs != null) {
      for (      Arg arg : mArgs)       vargs.add(new XValue(arg.mValue));
    }
    org.xmlsh.commands.builtin.xmlsh cmd=new org.xmlsh.commands.builtin.xmlsh(true);
    int ret=cmd.run(shell,""String_Node_Str"",vargs);
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}","public void execute() throws BuildException {
  mLogger.info(""String_Node_Str"");
  Shell shell=null;
  try {
    shell=new Shell();
    List<XValue> vargs=new ArrayList<XValue>();
    if (mScript != null)     vargs.add(new XValue(mScript));
 else {
      vargs.add(new XValue(""String_Node_Str""));
      vargs.add(new XValue(mText));
    }
    if (mArgs != null) {
      for (      Arg arg : mArgs)       vargs.add(new XValue(arg.mValue));
    }
    org.xmlsh.commands.builtin.xmlsh cmd=new org.xmlsh.commands.builtin.xmlsh(true);
    @SuppressWarnings(""String_Node_Str"") int ret=cmd.run(shell,""String_Node_Str"",vargs);
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}"
42296,"@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  OutputStream out=null;
  InputStream in=null;
  Shell shell=null;
  try {
    String spath=request.getServletPath();
    String path=spath.substring(1);
    if (Util.isBlank(path) || path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    XVariable xp=parseParams(request);
    XVariable headers=parseHeaders(request);
    List<XValue> vargs=new ArrayList<XValue>();
    shell=new Shell(false);
    shell.setCurdir(new File(mRoot));
    Enumeration<?> names=request.getParameterNames();
    XEnvironment env=shell.getEnv();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      String value=(String)request.getParameter(name);
      env.setVar(name,value,false);
    }
    ICommand script=CommandFactory.getInstance().getScript(shell,path,true,null);
    if (script != null) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      env.setStdout(new StreamOutputPort(bos,false));
      env.setStderr(new StreamOutputPort(new NullOutputStream(),false));
      InputStream is=readInput(request.getInputStream());
      env.setStdin(is);
      if (xp != null)       env.setVar(xp,false);
      if (headers != null)       env.setVar(headers,false);
      ManagedHttpSession mhs=new ManagedHttpSession(request.getSession());
      shell.getSession().setVar(""String_Node_Str"",mhs);
      mhs.release();
      int ret=script.run(shell,path,vargs);
      String ct=shell.getSerializeOpts().getContent_type() + ""String_Node_Str"" + shell.getSerializeOpts().getEncoding();
      response.setContentType(ct);
      OutputStream os=response.getOutputStream();
      Util.copyStream(new ByteArrayInputStream(bos.toByteArray()),os);
    }
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}","@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  OutputStream out=null;
  InputStream in=null;
  Shell shell=null;
  try {
    String spath=request.getServletPath();
    String path=spath.substring(1);
    if (Util.isBlank(path) || path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    XVariable xp=parseParams(request);
    XVariable headers=parseHeaders(request);
    List<XValue> vargs=new ArrayList<XValue>();
    shell=new Shell(false);
    shell.setCurdir(new File(mRoot));
    Enumeration<?> names=request.getParameterNames();
    XEnvironment env=shell.getEnv();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      String value=(String)request.getParameter(name);
      env.setVar(name,value,false);
    }
    ICommand script=CommandFactory.getInstance().getScript(shell,path,true,null);
    if (script != null) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      env.setStdout(new StreamOutputPort(bos,false));
      env.setStderr(new StreamOutputPort(new NullOutputStream(),false));
      InputStream is=readInput(request.getInputStream());
      env.setStdin(is);
      if (xp != null)       env.setVar(xp,false);
      if (headers != null)       env.setVar(headers,false);
      ManagedHttpSession mhs=new ManagedHttpSession(request.getSession());
      shell.getSession().setVar(""String_Node_Str"",mhs);
      mhs.release();
      @SuppressWarnings(""String_Node_Str"") int ret=script.run(shell,path,vargs);
      String ct=shell.getSerializeOpts().getContent_type() + ""String_Node_Str"" + shell.getSerializeOpts().getEncoding();
      response.setContentType(ct);
      OutputStream os=response.getOutputStream();
      Util.copyStream(new ByteArrayInputStream(bos.toByteArray()),os);
    }
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}"
42297,"@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  OutputStream out=null;
  Shell shell=null;
  try {
    String spath=request.getServletPath();
    String path=spath.substring(1);
    if (Util.isBlank(path) || path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    XVariable xp=parseParams(request);
    XVariable headers=parseHeaders(request);
    List<XValue> vargs=new ArrayList<XValue>();
    shell=new Shell(false);
    shell.setCurdir(new File(mRoot));
    ICommand script=CommandFactory.getInstance().getScript(shell,path,true,null);
    if (script != null) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      XEnvironment env=shell.getEnv();
      env.setStdout(new StreamOutputPort(bos,false));
      env.setStderr(new StreamOutputPort(new NullOutputStream(),false));
      env.setStdin(new NullInputStream());
      if (xp != null)       env.setVar(xp,false);
      if (headers != null)       env.setVar(headers,false);
      ManagedHttpSession mhs=new ManagedHttpSession(request.getSession());
      shell.getSession().setVar(""String_Node_Str"",mhs);
      mhs.release();
      int ret=script.run(shell,path,vargs);
      String ct=shell.getSerializeOpts().getContent_type() + ""String_Node_Str"" + shell.getSerializeOpts().getEncoding();
      response.setContentType(ct);
      OutputStream os=response.getOutputStream();
      Util.copyStream(new ByteArrayInputStream(bos.toByteArray()),os);
    }
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}","@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  OutputStream out=null;
  Shell shell=null;
  try {
    String spath=request.getServletPath();
    String path=spath.substring(1);
    if (Util.isBlank(path) || path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    XVariable xp=parseParams(request);
    XVariable headers=parseHeaders(request);
    List<XValue> vargs=new ArrayList<XValue>();
    shell=new Shell(false);
    shell.setCurdir(new File(mRoot));
    ICommand script=CommandFactory.getInstance().getScript(shell,path,true,null);
    if (script != null) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      XEnvironment env=shell.getEnv();
      env.setStdout(new StreamOutputPort(bos,false));
      env.setStderr(new StreamOutputPort(new NullOutputStream(),false));
      env.setStdin(new NullInputStream());
      if (xp != null)       env.setVar(xp,false);
      if (headers != null)       env.setVar(headers,false);
      ManagedHttpSession mhs=new ManagedHttpSession(request.getSession());
      shell.getSession().setVar(""String_Node_Str"",mhs);
      mhs.release();
      @SuppressWarnings(""String_Node_Str"") int ret=script.run(shell,path,vargs);
      String ct=shell.getSerializeOpts().getContent_type() + ""String_Node_Str"" + shell.getSerializeOpts().getEncoding();
      response.setContentType(ct);
      OutputStream os=response.getOutputStream();
      Util.copyStream(new ByteArrayInputStream(bos.toByteArray()),os);
    }
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
 finally {
    if (shell != null)     shell.close();
  }
}"
42298,"public void exit(int retval){
  mExitVal=new Integer(retval);
}","public void exit(int retval){
  mExitVal=Integer.valueOf(retval);
}"
42299,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean nolf=opts.hasOpt(""String_Node_Str"");
  String port=opts.getOptString(""String_Node_Str"",null);
  OutputPort stdout=port != null ? mShell.getEnv().getOutputPort(port) : mShell.getEnv().getStdout();
  if (stdout == null)   throw new InvalidArgumentException(""String_Node_Str"" + port);
  OutputStream out=stdout.asOutputStream();
  args=opts.getRemainingArgs();
  args=Util.expandSequences(args);
  boolean bFirst=true;
  for (  XValue arg : args) {
    if (!bFirst)     out.write(' ');
    bFirst=false;
    arg.serialize(out,getSerializeOpts(opts));
  }
  if (!nolf)   out.write(Util.getNewline(getSerializeOpts(opts)));
  out.flush();
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  boolean nolf=opts.hasOpt(""String_Node_Str"");
  String port=opts.getOptString(""String_Node_Str"",null);
  OutputPort stdout=port != null ? mShell.getEnv().getOutputPort(port) : mShell.getEnv().getStdout();
  if (stdout == null)   throw new InvalidArgumentException(""String_Node_Str"" + port);
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  OutputStream out=stdout.asOutputStream(serializeOpts);
  args=opts.getRemainingArgs();
  args=Util.expandSequences(args);
  boolean bFirst=true;
  for (  XValue arg : args) {
    if (!bFirst)     out.write(' ');
    bFirst=false;
    arg.serialize(out,serializeOpts);
  }
  if (!nolf)   out.write(Util.getNewline(serializeOpts));
  out.flush();
  return 0;
}"
42300,"public int run(List<XValue> args) throws Exception {
  for (  XValue arg : args)   mShell.getEnv().unsetVar(arg.toString());
  InputPort stdin=mShell.getEnv().getStdin();
  InputStream is=stdin.asInputStream(getSerializeOpts());
  String line=Util.readLine(is);
  if (line == null)   return 1;
  String ifs=getIFSRegex();
  String[] results=line.split(ifs,args.size());
  for (int i=0; i < args.size(); i++)   if (i < results.length)   mShell.getEnv().setVar(args.get(i).toString(),new XValue(results[i]),false);
  is.close();
  return 0;
}","public int run(List<XValue> args) throws Exception {
  for (  XValue arg : args)   mShell.getEnv().unsetVar(arg.toString());
  InputPort stdin=mShell.getEnv().getStdin();
  InputStream is=stdin.asInputStream(getSerializeOpts());
  String line=Util.readLine(is,getSerializeOpts().getText_encoding());
  if (line == null)   return 1;
  String ifs=getIFSRegex();
  String[] results=line.split(ifs,args.size());
  for (int i=0; i < args.size(); i++)   if (i < results.length)   mShell.getEnv().setVar(args.get(i).toString(),new XValue(results[i]),false);
  is.close();
  return 0;
}"
42301,"public int run(List<XValue> args) throws Exception {
  mFormatter=new CSVFormatter();
  mOutput=getStdout().asOutputStream();
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  bHeader=opts.hasOpt(""String_Node_Str"");
  bAttr=opts.hasOpt(""String_Node_Str"");
  Processor processor=Shell.getProcessor();
  mCompiler=processor.newXQueryCompiler();
  XdmNode context=null;
  DocumentBuilder builder=processor.newDocumentBuilder();
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=builder.build(((XdmNode)item).asSource());
    }
    if (context == null) {
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       context=builder.build(getSource(ov.getValue()));
 else {
        context=getStdin().asXdmNode(getSerializeOpts());
      }
    }
  }
  if (bAttr) {
    mFieldXPath=""String_Node_Str"";
    mHeaderXPath=""String_Node_Str"";
  }
  XQueryExecutable expr=mCompiler.compile(mRowXpath);
  XQueryEvaluator eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  boolean bFirst=true;
  for (  XdmItem row : eval) {
    if (bFirst && bHeader) {
      writeHeader(row);
      bFirst=false;
    }
    writeLine(row,mFieldXPath);
  }
  return 0;
}","public int run(List<XValue> args) throws Exception {
  mFormatter=new CSVFormatter();
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  mOutput=getStdout().asOutputStream(getSerializeOpts());
  bHeader=opts.hasOpt(""String_Node_Str"");
  bAttr=opts.hasOpt(""String_Node_Str"");
  Processor processor=Shell.getProcessor();
  mCompiler=processor.newXQueryCompiler();
  XdmNode context=null;
  DocumentBuilder builder=processor.newDocumentBuilder();
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=builder.build(((XdmNode)item).asSource());
    }
    if (context == null) {
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       context=builder.build(getSource(ov.getValue()));
 else {
        context=getStdin().asXdmNode(getSerializeOpts());
      }
    }
  }
  if (bAttr) {
    mFieldXPath=""String_Node_Str"";
    mHeaderXPath=""String_Node_Str"";
  }
  XQueryExecutable expr=mCompiler.compile(mRowXpath);
  XQueryEvaluator eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  boolean bFirst=true;
  for (  XdmItem row : eval) {
    if (bFirst && bHeader) {
      writeHeader(row);
      bFirst=false;
    }
    writeLine(row,mFieldXPath);
  }
  return 0;
}"
42302,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  String method=""String_Node_Str"";
  boolean doInput=true;
  boolean doOutput=false;
  String surl=null;
  if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    doInput=true;
    doOutput=true;
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    doOutput=true;
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    surl=opts.getOptString(""String_Node_Str"",null);
    method=""String_Node_Str"";
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    surl=opts.getOptString(""String_Node_Str"",null);
    method=""String_Node_Str"";
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   surl=opts.getRemainingArgs().get(0).toString();
  if (surl == null) {
    usage();
    return 1;
  }
  int ret=0;
  URL url=new URL(surl);
  URLConnection conn=url.openConnection();
  if (conn instanceof HttpURLConnection) {
    HttpURLConnection http=(HttpURLConnection)conn;
    setOptions(http,opts);
    http.setRequestMethod(method);
    http.setDoInput(doInput);
    http.setDoOutput(doOutput);
    if (doOutput) {
      conn.connect();
      OutputStream out=http.getOutputStream();
      Util.copyStream(getStdin().asInputStream(getSerializeOpts()),out);
      out.close();
    }
    ret=http.getResponseCode();
    if (ret == 200)     ret=0;
  }
  if (doInput) {
    InputStream in=conn.getInputStream();
    Util.copyStream(in,getStdout().asOutputStream());
    in.close();
  }
  return ret;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  SerializeOpts serializeOpts=getSerializeOpts();
  String method=""String_Node_Str"";
  boolean doInput=true;
  boolean doOutput=false;
  String surl=null;
  if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    doInput=true;
    doOutput=true;
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    doOutput=true;
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    surl=opts.getOptString(""String_Node_Str"",null);
    method=""String_Node_Str"";
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    surl=opts.getOptString(""String_Node_Str"",null);
    method=""String_Node_Str"";
  }
 else   if (opts.hasOpt(""String_Node_Str"")) {
    method=""String_Node_Str"";
    surl=opts.getOptString(""String_Node_Str"",null);
  }
 else   surl=opts.getRemainingArgs().get(0).toString();
  if (surl == null) {
    usage();
    return 1;
  }
  int ret=0;
  URL url=new URL(surl);
  URLConnection conn=url.openConnection();
  if (conn instanceof HttpURLConnection) {
    HttpURLConnection http=(HttpURLConnection)conn;
    setOptions(http,opts);
    http.setRequestMethod(method);
    OptionValue headers=opts.getOpt(""String_Node_Str"");
    if (headers != null) {
      for (      XValue v : headers.getValues()) {
        StringPair pair=new StringPair(v.toString(),'=');
        http.addRequestProperty(pair.getLeft(),pair.getRight());
      }
    }
    http.setDoInput(doInput);
    http.setDoOutput(doOutput);
    if (doOutput) {
      conn.connect();
      OutputStream out=http.getOutputStream();
      Util.copyStream(getStdin().asInputStream(serializeOpts),out);
      out.close();
    }
    ret=http.getResponseCode();
    if (ret == 200)     ret=0;
  }
  if (doInput) {
    InputStream in=conn.getInputStream();
    Util.copyStream(in,getStdout().asOutputStream(serializeOpts));
    in.close();
  }
  return ret;
}"
42303,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  String getVar=opts.getOptString(""String_Node_Str"",null);
  String setVar=opts.getOptString(""String_Node_Str"",null);
  Boolean noErr=opts.hasOpt(""String_Node_Str"");
  if (getVar == null && setVar == null) {
    usage();
    return 1;
  }
  ManagedHttpSession msess=(ManagedHttpSession)getShell().getSession().getVar(""String_Node_Str"");
  if (msess == null) {
    printErr(""String_Node_Str"");
    return 2;
  }
  try {
    SerializeOpts serializeOpts=getSerializeOpts(opts);
    if (getVar != null) {
      Object value=msess.getSession().getAttribute(getVar);
      if (value != null) {
        writeValue(value,serializeOpts);
        return 0;
      }
 else       if (!noErr)       printErr(""String_Node_Str"" + getVar);
      return 1;
    }
 else     if (setVar != null) {
      args=opts.getRemainingArgs();
      if (args.size() < 1) {
        usage();
        return 1;
      }
      msess.getSession().setAttribute(setVar,args.get(0));
      return 0;
    }
  }
  finally {
    msess.release();
  }
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  String getVar=opts.getOptString(""String_Node_Str"",null);
  String setVar=opts.getOptString(""String_Node_Str"",null);
  Boolean noErr=opts.hasOpt(""String_Node_Str"");
  if (getVar == null && setVar == null) {
    usage();
    return 1;
  }
  ManagedHttpSession msess=(ManagedHttpSession)getShell().getSession().getVar(""String_Node_Str"");
  if (msess == null) {
    printErr(""String_Node_Str"");
    return 2;
  }
  try {
    if (getVar != null) {
      Object value=msess.getSession().getAttribute(getVar);
      if (value != null) {
        writeValue(value,serializeOpts);
        return 0;
      }
 else       if (!noErr)       printErr(""String_Node_Str"" + getVar);
      return 1;
    }
 else     if (setVar != null) {
      args=opts.getRemainingArgs();
      if (args.size() < 1) {
        usage();
        return 1;
      }
      msess.getSession().setAttribute(setVar,args.get(0));
      return 0;
    }
  }
  finally {
    msess.release();
  }
  return 0;
}"
42304,"private void writeValue(Object value,SerializeOpts serializeOpts) throws CoreException, IOException {
  if (value instanceof XValue) {
    XValue xv=(XValue)value;
    IXdmValueOutputStream dest=getStdout().asXdmValueOutputStream(serializeOpts);
    dest.write(xv.asXdmValue());
  }
 else {
    String svalue=value.toString();
    getStdout().asPrintStream().print(svalue);
  }
}","private void writeValue(Object value,SerializeOpts serializeOpts) throws CoreException, IOException {
  if (value instanceof XValue) {
    XValue xv=(XValue)value;
    IXdmValueOutputStream dest=getStdout().asXdmValueOutputStream(serializeOpts);
    dest.write(xv.asXdmValue());
  }
 else {
    String svalue=value.toString();
    getStdout().asPrintStream(serializeOpts).print(svalue);
  }
}"
42305,"public synchronized int run(List<XValue> args) throws Exception {
  ClassLoader classloader=null;
  if (args.size() > 1) {
    String arg1=args.get(0).toString();
    if (arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str"")) {
      args.remove(0);
      XValue classpath=args.remove(0);
      classloader=getClassLoader(classpath);
    }
  }
  if (classloader == null)   classloader=getClassLoader(null);
  SecurityManager oldManager=null;
  if (args.size() < 1)   throw new InvalidArgumentException(""String_Node_Str"");
  PrintStream stdout=System.out;
  InputStream stdin=System.in;
  PrintStream newStdout=null;
  try {
    oldManager=System.getSecurityManager();
    System.setSecurityManager(new NoExitSecurityManager(oldManager));
    System.setOut(newStdout=getStdout().asPrintStream());
    System.setIn(getStdin().asInputStream(getSerializeOpts()));
    String className=args.remove(0).toString();
    Class<?> cls=Class.forName(className,true,classloader);
    Method method=cls.getMethod(""String_Node_Str"",String[].class);
    method.invoke(null,new Object[]{Util.toStringArray(args)});
  }
 catch (  InvocationTargetException e) {
    Throwable e2=e.getTargetException();
    if (e2 instanceof ExitException)     return ((ExitException)e2).mExitCode;
 else     if (e2 != null && e2 instanceof Exception)     throw (Exception)e2;
 else     throw e;
  }
catch (  ExitException e) {
    return e.mExitCode;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    System.setSecurityManager(oldManager);
    System.setOut(stdout);
    System.setIn(stdin);
    newStdout.flush();
  }
  return 0;
}","public synchronized int run(List<XValue> args) throws Exception {
  SerializeOpts serializeOpts=getSerializeOpts();
  ClassLoader classloader=null;
  if (args.size() > 1) {
    String arg1=args.get(0).toString();
    if (arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str"")) {
      args.remove(0);
      XValue classpath=args.remove(0);
      classloader=getClassLoader(classpath);
    }
  }
  if (classloader == null)   classloader=getClassLoader(null);
  SecurityManager oldManager=null;
  if (args.size() < 1)   throw new InvalidArgumentException(""String_Node_Str"");
  PrintStream stdout=System.out;
  InputStream stdin=System.in;
  PrintStream newStdout=null;
  try {
    oldManager=System.getSecurityManager();
    System.setSecurityManager(new NoExitSecurityManager(oldManager));
    System.setOut(newStdout=getStdout().asPrintStream(serializeOpts));
    System.setIn(getStdin().asInputStream(serializeOpts));
    String className=args.remove(0).toString();
    Class<?> cls=Class.forName(className,true,classloader);
    Method method=cls.getMethod(""String_Node_Str"",String[].class);
    method.invoke(null,new Object[]{Util.toStringArray(args)});
  }
 catch (  InvocationTargetException e) {
    Throwable e2=e.getTargetException();
    if (e2 instanceof ExitException)     return ((ExitException)e2).mExitCode;
 else     if (e2 != null && e2 instanceof Exception)     throw (Exception)e2;
 else     throw e;
  }
catch (  ExitException e) {
    return e.mExitCode;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    System.setSecurityManager(oldManager);
    System.setOut(stdout);
    System.setIn(stdin);
    newStdout.flush();
  }
  return 0;
}"
42306,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  bHeader=opts.hasOpt(""String_Node_Str"");
  bAttr=opts.hasOpt(""String_Node_Str"");
  String delim=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  String quote=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  mFormatter=new CSVFormatter(delim.charAt(0),quote.charAt(0));
  mOutput=getStdout().asOutputStream();
  Processor processor=Shell.getProcessor();
  mCompiler=processor.newXQueryCompiler();
  InputPort in=getStdin();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XdmNode context=in.asXdmNode(serializeOpts);
  if (bAttr) {
    mFieldXPath=""String_Node_Str"";
    mHeaderXPath=""String_Node_Str"";
  }
  XQueryExecutable expr=mCompiler.compile(mRowXpath);
  XQueryEvaluator eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  boolean bFirst=true;
  for (  XdmItem row : eval) {
    if (bFirst && bHeader) {
      writeHeader(row);
      bFirst=false;
    }
    writeLine(row,mFieldXPath);
  }
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  bHeader=opts.hasOpt(""String_Node_Str"");
  bAttr=opts.hasOpt(""String_Node_Str"");
  String delim=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  String quote=opts.getOptString(""String_Node_Str"",""String_Node_Str"");
  mFormatter=new CSVFormatter(delim.charAt(0),quote.charAt(0));
  mOutput=getStdout().asOutputStream(serializeOpts);
  Processor processor=Shell.getProcessor();
  mCompiler=processor.newXQueryCompiler();
  InputPort in=getStdin();
  XdmNode context=in.asXdmNode(serializeOpts);
  if (bAttr) {
    mFieldXPath=""String_Node_Str"";
    mHeaderXPath=""String_Node_Str"";
  }
  XQueryExecutable expr=mCompiler.compile(mRowXpath);
  XQueryEvaluator eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  boolean bFirst=true;
  for (  XdmItem row : eval) {
    if (bFirst && bHeader) {
      writeHeader(row);
      bFirst=false;
    }
    writeLine(row,mFieldXPath);
  }
  return 0;
}"
42307,"private void writeText(Properties props,String comment) throws IOException {
  props.store(getEnv().getStdout().asOutputStream(),comment);
}","private void writeText(Properties props,String comment,SerializeOpts serializeOpts) throws IOException {
  props.store(getEnv().getStdout().asOutputStream(serializeOpts),comment);
}"
42308,"private void writeVars(Properties props,List<String> vars) throws UnsupportedEncodingException, IOException, InvalidArgumentException {
  PrintWriter out=getStdout().asPrintWriter(getSerializeOpts());
  for (  String var : vars)   out.println(props.getProperty(var,""String_Node_Str""));
  out.flush();
}","private void writeVars(Properties props,List<String> vars,SerializeOpts serializeOpts) throws UnsupportedEncodingException, IOException, InvalidArgumentException {
  PrintWriter out=getStdout().asPrintWriter(serializeOpts);
  for (  String var : vars)   out.println(props.getProperty(var,""String_Node_Str""));
  out.flush();
}"
42309,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  XValue optIn=opts.getOptValue(""String_Node_Str"");
  XValue optInXml=opts.getOptValue(""String_Node_Str"");
  boolean bOutText=opts.hasOpt(""String_Node_Str"");
  if (optIn != null && optInXml != null) {
    usage(""String_Node_Str"");
    return -1;
  }
  String comment=opts.getOptString(""String_Node_Str"",null);
  Properties props=new Properties();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  if (optInXml != null)   props.loadFromXML(getInput(optInXml).asInputStream(serializeOpts));
 else   if (optIn != null)   props.load(getInput(optIn).asInputStream(serializeOpts));
  if (opts.hasOpt(""String_Node_Str""))   for (  XValue d : opts.getOpt(""String_Node_Str"").getValues())   props.remove(d.toString());
  List<String> printVars=null;
  if (opts.hasOpt(""String_Node_Str"")) {
    printVars=new ArrayList<String>();
    for (    XValue var : opts.getOpt(""String_Node_Str"").getValues())     printVars.add(var.toString());
  }
  if (opts.hasOpt(""String_Node_Str"")) {
    for (    XValue add : opts.getOpt(""String_Node_Str"").getValues()) {
      StringPair pair=new StringPair(add.toString(),'=');
      props.setProperty(pair.getLeft(),pair.getRight());
    }
  }
  if (printVars != null)   writeVars(props,printVars);
 else   if (!bOutText)   writeXML(props,comment);
 else   writeText(props,comment);
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XValue optIn=opts.getOptValue(""String_Node_Str"");
  XValue optInXml=opts.getOptValue(""String_Node_Str"");
  boolean bOutText=opts.hasOpt(""String_Node_Str"");
  if (optIn != null && optInXml != null) {
    usage(""String_Node_Str"");
    return -1;
  }
  String comment=opts.getOptString(""String_Node_Str"",null);
  Properties props=new Properties();
  if (optInXml != null)   props.loadFromXML(getInput(optInXml).asInputStream(serializeOpts));
 else   if (optIn != null)   props.load(getInput(optIn).asInputStream(serializeOpts));
  if (opts.hasOpt(""String_Node_Str""))   for (  XValue d : opts.getOpt(""String_Node_Str"").getValues())   props.remove(d.toString());
  List<String> printVars=null;
  if (opts.hasOpt(""String_Node_Str"")) {
    printVars=new ArrayList<String>();
    for (    XValue var : opts.getOpt(""String_Node_Str"").getValues())     printVars.add(var.toString());
  }
  if (opts.hasOpt(""String_Node_Str"")) {
    for (    XValue add : opts.getOpt(""String_Node_Str"").getValues()) {
      StringPair pair=new StringPair(add.toString(),'=');
      props.setProperty(pair.getLeft(),pair.getRight());
    }
  }
  if (printVars != null)   writeVars(props,printVars,serializeOpts);
 else   if (!bOutText)   writeXML(props,comment);
 else   writeText(props,comment,serializeOpts);
  return 0;
}"
42310,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  String style=opts.getOptStringRequired(""String_Node_Str"");
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  Source source=getStdin().asSource(serializeOpts);
  apply(style,source,getStdout().asOutputStream(),opts.hasOpt(""String_Node_Str"") ? args : null,serializeOpts);
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  String style=opts.getOptStringRequired(""String_Node_Str"");
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  Source source=getStdin().asSource(serializeOpts);
  apply(style,source,getStdout().asOutputStream(serializeOpts),opts.hasOpt(""String_Node_Str"") ? args : null,serializeOpts);
  return 0;
}"
42311,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  ZipOutputStream zos=new ZipOutputStream(zipfile == null ? getStdout().asOutputStream() : this.getOutputStream(zipfile.toString(),false));
  try {
    int ret=0;
    ret=zip(zos,args);
    zos.finish();
  }
  finally {
    zos.close();
  }
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  XValue zipfile=opts.getOptValue(""String_Node_Str"");
  args=opts.getRemainingArgs();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  ZipOutputStream zos=new ZipOutputStream(zipfile == null ? getStdout().asOutputStream(serializeOpts) : this.getOutputStream(zipfile.toString(),false));
  try {
    int ret=0;
    ret=zip(zos,args);
    zos.finish();
  }
  finally {
    zos.close();
  }
  return 0;
}"
42312,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  boolean bDecode=opts.hasOpt(""String_Node_Str"");
  boolean bWrap=opts.hasOpt(""String_Node_Str"");
  InputPort iport=(args.isEmpty() ? getStdin() : getInput(args.get(0)));
  InputStream is=iport.asInputStream(getSerializeOpts(opts));
  OutputStream os=getStdout().asOutputStream();
  is=new BufferedInputStream(is);
  os=new BufferedOutputStream(os);
  try {
    if (bDecode)     decode(is,os);
 else     encode(is,os,bWrap);
  }
  finally {
    is.close();
    os.close();
    iport.release();
  }
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  boolean bDecode=opts.hasOpt(""String_Node_Str"");
  boolean bWrap=opts.hasOpt(""String_Node_Str"");
  InputPort iport=(args.isEmpty() ? getStdin() : getInput(args.get(0)));
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  InputStream is=iport.asInputStream(serializeOpts);
  OutputStream os=getStdout().asOutputStream(serializeOpts);
  is=new BufferedInputStream(is);
  os=new BufferedOutputStream(os);
  try {
    if (bDecode)     decode(is,os);
 else     encode(is,os,bWrap);
  }
  finally {
    is.close();
    os.close();
    iport.release();
  }
  return 0;
}"
42313,"@Override public int run(List<XValue> args) throws Exception {
  OutputStream stdout=getStdout().asOutputStream();
  if (args.size() > 0) {
    for (    XValue arg : args) {
      File inf=getFile(arg);
      if (!inf.exists()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      if (!inf.canRead()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      InputStream in=new FileInputStream(inf);
      Util.copyStream(in,stdout);
      in.close();
    }
  }
 else   Util.copyStream(getStdin().asInputStream(getSerializeOpts()),stdout);
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  OutputStream stdout=getStdout().asOutputStream(getSerializeOpts());
  if (args.size() > 0) {
    for (    XValue arg : args) {
      File inf=getFile(arg);
      if (!inf.exists()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      if (!inf.canRead()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      InputStream in=new FileInputStream(inf);
      Util.copyStream(in,stdout);
      in.close();
    }
  }
 else   Util.copyStream(getStdin().asInputStream(getSerializeOpts()),stdout);
  return 0;
}"
42314,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  mSerial=this.getSerializeOpts(opts);
  XValue vlines=getEnv().getVarValue(""String_Node_Str"");
  if (vlines != null)   mLines=(int)vlines.toLong();
  mLines=opts.getOptInt(""String_Node_Str"",mLines);
  OutputStream stdout=getStdout().asOutputStream();
  if (args.size() > 0) {
    for (    XValue arg : args) {
      File inf=getFile(arg);
      if (!inf.exists()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      if (!inf.canRead()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      InputStream in=new FileInputStream(inf);
      boolean bQuit=page(in,stdout);
      in.close();
      if (bQuit)       break;
    }
  }
 else   page(getStdin().asInputStream(getSerializeOpts()),stdout);
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  mSerial=this.getSerializeOpts(opts);
  XValue vlines=getEnv().getVarValue(""String_Node_Str"");
  if (vlines != null)   mLines=(int)vlines.toLong();
  mLines=opts.getOptInt(""String_Node_Str"",mLines);
  OutputStream stdout=getStdout().asOutputStream(mSerial);
  if (args.size() > 0) {
    for (    XValue arg : args) {
      File inf=getFile(arg);
      if (!inf.exists()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      if (!inf.canRead()) {
        this.printErr(""String_Node_Str"" + arg.toString());
        continue;
      }
      InputStream in=new FileInputStream(inf);
      boolean bQuit=page(in,stdout);
      in.close();
      if (bQuit)       break;
    }
  }
 else {
    page(getStdin().asInputStream(mSerial),stdout);
  }
  return 0;
}"
42315,"private boolean page(InputStream in,OutputStream stdout) throws IOException {
  Console con=System.console();
  if (con == null) {
    Util.copyStream(in,stdout);
    return false;
  }
  Reader r=con.reader();
  int lines=mLines;
  do {
    for (int i=0; i < lines; i++) {
      String l=Util.readLine(in);
      if (l == null)       return false;
      stdout.write(l.getBytes(mSerial.getText_encoding()));
      stdout.write('\n');
    }
    char[] ret=con.readPassword(""String_Node_Str"");
    if (ret == null)     return false;
    if (ret.length == 0)     continue;
    if (ret[0] == 'q' || ret[0] == 'Q')     return true;
  }
 while (true);
}","private boolean page(InputStream in,OutputStream stdout) throws IOException {
  Console con=System.console();
  if (con == null) {
    Util.copyStream(in,stdout);
    return false;
  }
  Reader r=con.reader();
  int lines=mLines;
  do {
    for (int i=0; i < lines; i++) {
      String l=Util.readLine(in,mSerial.getText_encoding());
      if (l == null)       return false;
      stdout.write(l.getBytes(mSerial.getText_encoding()));
      stdout.write('\n');
    }
    char[] ret=con.readPassword(""String_Node_Str"");
    if (ret == null)     return false;
    if (ret.length == 0)     continue;
    if (ret[0] == 'q' || ret[0] == 'Q')     return true;
  }
 while (true);
}"
42316,"public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  File curdir=shell.getCurdir();
  mLogger.debug(""String_Node_Str"" + mCommandFile.getPath() + ""String_Node_Str""+ curdir.getPath());
  ArrayList<XValue> cmdlist=new ArrayList<XValue>();
  cmdlist.add(new XValue(mCommandFile.getPath()));
  cmdlist.addAll(Util.expandSequences(args));
  Process proc=null;
synchronized (this.getClass()) {
    ProcessBuilder builder=new ProcessBuilder();
    builder.command(Util.toStringList(cmdlist));
    builder.directory(curdir);
    setEnvironment(shell,builder);
    proc=builder.start();
    if (proc == null)     return -1;
  }
  StreamCopier outCopier=new StreamCopier(proc.getInputStream(),shell.getEnv().getStdout().asOutputStream(),true);
  StreamCopier errCopier=new StreamCopier(proc.getErrorStream(),shell.getEnv().getStderr().asOutputStream(),true);
  PortCopier inCopier=null;
  if (shell.getEnv().isStdinRedirected())   inCopier=new PortCopier(shell.getEnv().getStdin(),proc.getOutputStream(),shell.getSerializeOpts(),true);
 else   proc.getOutputStream().close();
  errCopier.start();
  if (inCopier != null)   inCopier.start();
  outCopier.run();
  outCopier.closeIn();
  int ret=proc.waitFor();
  if (inCopier != null)   inCopier.join();
  outCopier.join();
  errCopier.join();
  return ret;
}","public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  File curdir=shell.getCurdir();
  mLogger.debug(""String_Node_Str"" + mCommandFile.getPath() + ""String_Node_Str""+ curdir.getPath());
  ArrayList<XValue> cmdlist=new ArrayList<XValue>();
  cmdlist.add(new XValue(mCommandFile.getPath()));
  cmdlist.addAll(Util.expandSequences(args));
  Process proc=null;
synchronized (this.getClass()) {
    ProcessBuilder builder=new ProcessBuilder();
    builder.command(Util.toStringList(cmdlist));
    builder.directory(curdir);
    setEnvironment(shell,builder);
    proc=builder.start();
    if (proc == null)     return -1;
  }
  StreamCopier outCopier=new StreamCopier(proc.getInputStream(),shell.getEnv().getStdout().asOutputStream(shell.getSerializeOpts()),true);
  StreamCopier errCopier=new StreamCopier(proc.getErrorStream(),shell.getEnv().getStderr().asOutputStream(shell.getSerializeOpts()),true);
  PortCopier inCopier=null;
  if (shell.getEnv().isStdinRedirected())   inCopier=new PortCopier(shell.getEnv().getStdin(),proc.getOutputStream(),shell.getSerializeOpts(),true);
 else   proc.getOutputStream().close();
  errCopier.start();
  if (inCopier != null)   inCopier.start();
  outCopier.run();
  outCopier.closeIn();
  int ret=proc.waitFor();
  if (inCopier != null)   inCopier.join();
  outCopier.join();
  errCopier.join();
  return ret;
}"
42317,"public synchronized PrintStream asPrintStream(){
  return new PrintStream(asOutputStream());
}","public synchronized PrintStream asPrintStream(SerializeOpts opts){
  return new PrintStream(asOutputStream(opts));
}"
42318,public abstract OutputStream asOutputStream();,public abstract OutputStream asOutputStream(SerializeOpts opts);
42319,"public synchronized PrintWriter asPrintWriter(SerializeOpts opts) throws UnsupportedEncodingException {
  return new PrintWriter(new OutputStreamWriter(asOutputStream(),opts.getText_encoding()));
}","public synchronized PrintWriter asPrintWriter(SerializeOpts opts) throws UnsupportedEncodingException {
  return new PrintWriter(new OutputStreamWriter(asOutputStream(opts),opts.getText_encoding()));
}"
42320,"private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    String sbs=sb.toString();
    if (sbs.equals(vs))     r.add(v);
 else     r.add(new XValue(sbs));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  vs=vs.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String root=null;
  String parent=null;
  if (vs.startsWith(""String_Node_Str"")) {
    root=""String_Node_Str"";
    parent=""String_Node_Str"";
    vs=vs.substring(1);
  }
  if (Util.isWindows() && vs.matches(""String_Node_Str"")) {
    root=vs.substring(0,2) + ""String_Node_Str"";
    vs=vs.substring(2);
    if (vs.startsWith(""String_Node_Str""))     vs=vs.substring(1);
    parent=root;
  }
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(root == null ? mShell.getCurdir() : new File(root),parent,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}","private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen - 1) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    String sbs=sb.toString();
    if (sbs.equals(vs))     r.add(v);
 else     r.add(new XValue(sbs));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  vs=vs.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String root=null;
  String parent=null;
  if (vs.startsWith(""String_Node_Str"")) {
    root=""String_Node_Str"";
    parent=""String_Node_Str"";
    vs=vs.substring(1);
  }
  if (Util.isWindows() && vs.matches(""String_Node_Str"")) {
    root=vs.substring(0,2) + ""String_Node_Str"";
    vs=vs.substring(2);
    if (vs.startsWith(""String_Node_Str""))     vs=vs.substring(1);
    parent=root;
  }
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(root == null ? mShell.getCurdir() : new File(root),parent,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}"
42321,"private XValue removeQuotes(XValue v){
  if (v.isXExpr())   return v;
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen) {
      sb.append(c);
      c=vs.charAt(++i);
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    sb.append(c);
  }
  String sbs=sb.toString();
  if (vs.equals(sbs))   return v;
 else   return new XValue(sbs);
}","private XValue removeQuotes(XValue v){
  if (v.isXExpr())   return v;
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen - 1) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    sb.append(c);
  }
  String sbs=sb.toString();
  if (vs.equals(sbs))   return v;
 else   return new XValue(sbs);
}"
42322,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  Shell shell=getShell();
  if (!mTopShell)   shell=shell.clone();
  int ret=0;
  try {
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    String command=null;
    if (opts.hasOpt(""String_Node_Str""))     command=opts.getOptStringRequired(""String_Node_Str"").toString();
    args=opts.getRemainingArgs();
    if (args.size() == 0 && command == null) {
      String rcfile=opts.getOptString(""String_Node_Str"",null);
      if (rcfile == null) {
        XValue home=shell.getEnv().getVarValue(""String_Node_Str"");
        if (home != null) {
          rcfile=home.toString() + ""String_Node_Str"";
        }
      }
      ret=shell.interactive(rcfile);
    }
 else {
      if (command != null) {
        Command cmd=new EvalScriptCommand(command);
        ret=shell.exec(cmd);
      }
 else {
        String scmd=args.remove(0).toString();
        ICommand cmd=CommandFactory.getInstance().getScript(shell,scmd,true,getLocation());
        if (cmd == null) {
          SourceLocation loc=getLocation();
          if (loc != null)           shell.printErr(loc.toString());
          shell.printErr(scmd + ""String_Node_Str"");
        }
 else {
          shell.setArg0(scmd);
          shell.setArgs(args);
          ret=cmd.run(shell,scmd,null);
        }
      }
    }
  }
  finally {
    if (!mTopShell)     shell.close();
  }
  return ret;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  Shell shell=getShell();
  if (!mTopShell)   shell=shell.clone();
  int ret=0;
  try {
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    if (opts.hasOpt(""String_Node_Str""))     shell.setOption(""String_Node_Str"",true);
    String command=null;
    if (opts.hasOpt(""String_Node_Str""))     command=opts.getOptStringRequired(""String_Node_Str"").toString();
    boolean bNoRc=opts.hasOpt(""String_Node_Str"");
    args=opts.getRemainingArgs();
    if (args.size() == 0 && command == null) {
      String rcfile=opts.getOptString(""String_Node_Str"",null);
      if (rcfile == null) {
        XValue home=shell.getEnv().getVarValue(""String_Node_Str"");
        if (home != null) {
          rcfile=home.toString() + ""String_Node_Str"";
        }
      }
      ret=shell.interactive(bNoRc ? null : rcfile);
    }
 else {
      if (command != null) {
        Command cmd=new EvalScriptCommand(command);
        ret=shell.exec(cmd);
      }
 else {
        String scmd=args.remove(0).toString();
        ICommand cmd=CommandFactory.getInstance().getScript(shell,scmd,true,getLocation());
        if (cmd == null) {
          SourceLocation loc=getLocation();
          if (loc != null)           shell.printErr(loc.toString());
          shell.printErr(scmd + ""String_Node_Str"");
        }
 else {
          shell.setArg0(scmd);
          shell.setArgs(args);
          ret=cmd.run(shell,scmd,null);
        }
      }
    }
  }
  finally {
    if (!mTopShell)     shell.close();
  }
  return ret;
}"
42323,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  String optdef=opts.getOptString(""String_Node_Str"",null);
  String passthrough=opts.getOptString(""String_Node_Str"",null);
  String ignore=opts.getOptString(""String_Node_Str"",null);
  boolean bSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bPassSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bArgIndex=opts.hasOpt(""String_Node_Str"");
  args=opts.getRemainingArgs();
  if (optdef == null) {
    if (args.size() == 0) {
      usage();
      return 1;
    }
    if (passthrough != null)     optdef=passthrough;
 else     optdef=args.remove(0).toString();
  }
  boolean bNoArgs=opts.hasOpt(""String_Node_Str"");
  boolean bNoValues=opts.hasOpt(""String_Node_Str"");
  List<OptionDef> ignore_opts=null;
  Options prog_opts=new Options(optdef,bSerialize ? SerializeOpts.getOptionDefs() : null);
  if (ignore != null)   ignore_opts=prog_opts.addOptionDefs(ignore);
  if (passthrough != null && passthrough != optdef)   prog_opts.addOptionDefs(passthrough);
  List<OptionValue> prog_optvalues=prog_opts.parse(args);
  SerializeOpts serializeOpts=this.getSerializeOpts(opts);
  List<XValue> remaining_args=prog_opts.getRemainingArgs();
  int arg_index=remaining_args.isEmpty() ? args.size() : args.indexOf(remaining_args.get(0));
  if (passthrough == null)   writeOptions(opts,bNoArgs,bNoValues,prog_opts,prog_optvalues,ignore_opts);
 else {
    OutputPort stdout=getStdout();
    IXdmValueOutputStream out=stdout.asXdmValueOutputStream(serializeOpts);
    Options pass_opts=new Options(passthrough,bPassSerialize ? SerializeOpts.getOptionDefs() : null);
    List<OptionDef> pass_optdefs=pass_opts.getOptDefs();
    for (    OptionDef def : pass_optdefs) {
      OptionValue value=prog_opts.getOpt(def.name);
      if (value != null) {
        writeOption(stdout,serializeOpts,out,value);
      }
    }
    stdout.writeSequenceTerminator(serializeOpts);
    stdout.release();
  }
  return bArgIndex ? arg_index : 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  String optdef=opts.getOptString(""String_Node_Str"",null);
  String passthrough=opts.getOptString(""String_Node_Str"",null);
  String ignore=opts.getOptString(""String_Node_Str"",null);
  boolean bSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bPassSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bArgIndex=opts.hasOpt(""String_Node_Str"");
  args=opts.getRemainingArgs();
  if (optdef == null) {
    if (passthrough != null)     optdef=passthrough;
 else {
      if (args.size() == 0) {
        usage();
        return 1;
      }
      optdef=args.remove(0).toString();
    }
  }
  boolean bNoArgs=opts.hasOpt(""String_Node_Str"");
  boolean bNoValues=opts.hasOpt(""String_Node_Str"");
  List<OptionDef> ignore_opts=null;
  Options prog_opts=new Options(optdef,bSerialize ? SerializeOpts.getOptionDefs() : null);
  if (ignore != null)   ignore_opts=prog_opts.addOptionDefs(ignore);
  if (passthrough != null && passthrough != optdef)   prog_opts.addOptionDefs(passthrough);
  List<OptionValue> prog_optvalues=prog_opts.parse(args);
  SerializeOpts serializeOpts=this.getSerializeOpts(opts);
  List<XValue> remaining_args=prog_opts.getRemainingArgs();
  int arg_index=remaining_args.isEmpty() ? args.size() : args.indexOf(remaining_args.get(0));
  if (passthrough == null)   writeOptions(opts,bNoArgs,bNoValues,prog_opts,prog_optvalues,ignore_opts);
 else {
    OutputPort stdout=getStdout();
    IXdmValueOutputStream out=stdout.asXdmValueOutputStream(serializeOpts);
    Options pass_opts=new Options(passthrough,bPassSerialize ? SerializeOpts.getOptionDefs() : null);
    List<OptionDef> pass_optdefs=pass_opts.getOptDefs();
    for (    OptionDef def : pass_optdefs) {
      OptionValue value=prog_opts.getOpt(def.name);
      if (value != null) {
        writeOption(stdout,serializeOpts,out,value);
      }
    }
    stdout.writeSequenceTerminator(serializeOpts);
    stdout.release();
  }
  return bArgIndex ? arg_index : 0;
}"
42324,"public void append(XValue value,boolean inQuotes){
  if (value.isAtomic()) {
    if (inQuotes || cur != null || sb.length() > 0) {
      String str=value.toString();
      if (!inQuotes && Util.isEmpty(str))       return;
      ajoin();
      sb.append(str);
    }
 else     cur=value;
  }
 else {
    if (inQuotes) {
      boolean bFirst=true;
      for (      XdmValue v : value.asXdmValue()) {
        if (!bFirst)         append(sSEPSPACE);
        append(v.toString());
        bFirst=false;
      }
    }
 else {
      flush();
      add(value);
    }
  }
}","public void append(XValue value,boolean inQuotes){
  if (value.isAtomic()) {
    if (inQuotes || cur != null || sb.length() > 0) {
      String str=value.toString();
      if (!inQuotes && Util.isEmpty(str))       return;
      ajoin();
      sb.append(str);
    }
 else     cur=value;
  }
 else {
    if (inQuotes) {
      boolean bFirst=true;
      for (      XdmValue v : value.asXdmValue()) {
        if (!bFirst)         append(sSEPSPACE);
        String sv=v.toString();
        append(escapeQuotes(sv));
        bFirst=false;
      }
    }
 else {
      flush();
      add(value);
    }
  }
}"
42325,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  OutputPort stdout=getEnv().getStdout();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
  writer.writeStartDocument();
  writer.writeStartElement(""String_Node_Str"");
  writeNetwork(writer);
  writer.writeEndElement();
  writer.writeEndDocument();
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(SerializeOpts.getOptionDefs());
  opts.parse(args);
  OutputPort stdout=getEnv().getStdout();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
  writer.writeStartDocument();
  writer.writeStartElement(""String_Node_Str"");
  writeNetwork(writer);
  writer.writeEndElement();
  writer.writeEndDocument();
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}"
42326,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  String command=opts.getOptString(""String_Node_Str"",getShell().getArg0());
  String optdef=opts.getOptString(""String_Node_Str"",null);
  String passthrough=opts.getOptString(""String_Node_Str"",null);
  boolean bSerialize=opts.getOptBool(""String_Node_Str"",true);
  boolean bPassSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bArgIndex=opts.hasOpt(""String_Node_Str"");
  args=opts.getRemainingArgs();
  if (optdef == null) {
    if (args.size() == 0) {
      usage();
      return 1;
    }
    if (passthrough != null)     optdef=passthrough;
 else     optdef=args.remove(0).toString();
  }
  boolean bNoArgs=opts.hasOpt(""String_Node_Str"");
  boolean bNoValues=opts.hasOpt(""String_Node_Str"");
  Options prog_opts=new Options(optdef,bSerialize ? SerializeOpts.getOptionDefs() : null);
  List<OptionValue> prog_optvalues=prog_opts.parse(args);
  SerializeOpts serializeOpts=this.getSerializeOpts(opts);
  List<XValue> remaining_args=prog_opts.getRemainingArgs();
  int arg_index=remaining_args.isEmpty() ? args.size() : args.indexOf(remaining_args.get(0));
  if (passthrough == null)   writeOptions(opts,bNoArgs,bNoValues,prog_opts,prog_optvalues);
 else {
    OutputPort stdout=getStdout();
    IXdmValueOutputStream out=stdout.asXdmValueOutputStream(serializeOpts);
    Options pass_opts=new Options(passthrough,bPassSerialize ? SerializeOpts.getOptionDefs() : null);
    List<OptionDef> pass_optdefs=pass_opts.getOptDefs();
    for (    OptionDef def : pass_optdefs) {
      OptionValue value=prog_opts.getOpt(def.name);
      if (value != null) {
        writeOption(stdout,serializeOpts,out,value);
      }
    }
    stdout.writeSequenceTerminator(serializeOpts);
    stdout.release();
  }
  return bArgIndex ? arg_index : 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  String optdef=opts.getOptString(""String_Node_Str"",null);
  String passthrough=opts.getOptString(""String_Node_Str"",null);
  boolean bSerialize=opts.getOptBool(""String_Node_Str"",true);
  boolean bPassSerialize=opts.getOptFlag(""String_Node_Str"",true);
  boolean bArgIndex=opts.hasOpt(""String_Node_Str"");
  args=opts.getRemainingArgs();
  if (optdef == null) {
    if (args.size() == 0) {
      usage();
      return 1;
    }
    if (passthrough != null)     optdef=passthrough;
 else     optdef=args.remove(0).toString();
  }
  boolean bNoArgs=opts.hasOpt(""String_Node_Str"");
  boolean bNoValues=opts.hasOpt(""String_Node_Str"");
  Options prog_opts=new Options(optdef,bSerialize ? SerializeOpts.getOptionDefs() : null);
  List<OptionValue> prog_optvalues=prog_opts.parse(args);
  SerializeOpts serializeOpts=this.getSerializeOpts(opts);
  List<XValue> remaining_args=prog_opts.getRemainingArgs();
  int arg_index=remaining_args.isEmpty() ? args.size() : args.indexOf(remaining_args.get(0));
  if (passthrough == null)   writeOptions(opts,bNoArgs,bNoValues,prog_opts,prog_optvalues);
 else {
    OutputPort stdout=getStdout();
    IXdmValueOutputStream out=stdout.asXdmValueOutputStream(serializeOpts);
    Options pass_opts=new Options(passthrough,bPassSerialize ? SerializeOpts.getOptionDefs() : null);
    List<OptionDef> pass_optdefs=pass_opts.getOptDefs();
    for (    OptionDef def : pass_optdefs) {
      OptionValue value=prog_opts.getOpt(def.name);
      if (value != null) {
        writeOption(stdout,serializeOpts,out,value);
      }
    }
    stdout.writeSequenceTerminator(serializeOpts);
    stdout.release();
  }
  return bArgIndex ? arg_index : 0;
}"
42327,"public int run(List<XValue> args) throws Exception {
  Options opts=new Options(SerializeOpts.getOptionDefs());
  opts.parse(args);
  args=opts.getRemainingArgs();
  XFile file=new XFile(getCurdir());
  OutputPort stdout=getStdout();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
  writer.writeStartDocument();
  file.serialize(writer,false,false);
  writer.writeEndDocument();
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}","public int run(List<XValue> args) throws Exception {
  Options opts=new Options(SerializeOpts.getOptionDefs());
  opts.parse(args);
  XFile file=new XFile(getCurdir());
  OutputPort stdout=getStdout();
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  XMLStreamWriter writer=stdout.asXMLStreamWriter(serializeOpts);
  writer.writeStartDocument();
  file.serialize(writer,false,false);
  writer.writeEndDocument();
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}"
42328,"private boolean page(InputStream in,OutputStream stdout) throws IOException {
  Console con=System.console();
  if (con == null) {
    Util.copyStream(in,stdout);
    return false;
  }
  Reader r=con.reader();
  int lines=mLines;
  do {
    for (int i=0; i < lines; i++) {
      String l=Util.readLine(in,mSerial.getText_encoding());
      if (l == null)       return false;
      stdout.write(l.getBytes(mSerial.getText_encoding()));
      stdout.write('\n');
    }
    char[] ret=con.readPassword(""String_Node_Str"");
    if (ret == null)     return false;
    if (ret.length == 0)     continue;
    if (ret[0] == 'q' || ret[0] == 'Q')     return true;
  }
 while (true);
}","private boolean page(InputStream in,OutputStream stdout) throws IOException {
  Console con=System.console();
  if (con == null) {
    Util.copyStream(in,stdout);
    return false;
  }
  int lines=mLines;
  do {
    for (int i=0; i < lines; i++) {
      String l=Util.readLine(in,mSerial.getText_encoding());
      if (l == null)       return false;
      stdout.write(l.getBytes(mSerial.getText_encoding()));
      stdout.write('\n');
    }
    char[] ret=con.readPassword(""String_Node_Str"");
    if (ret == null)     return false;
    if (ret.length == 0)     continue;
    if (ret[0] == 'q' || ret[0] == 'Q')     return true;
  }
 while (true);
}"
42329,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  args=opts.getRemainingArgs();
  String sRefFile=opts.getOptString(""String_Node_Str"",null);
  File refFile=sRefFile == null ? null : getFile(sRefFile);
  long modtime=refFile != null ? refFile.lastModified() : (new Date()).getTime();
  for (  XValue arg : args) {
    File file=getFile(arg);
    file.createNewFile();
    if (refFile != null)     file.setLastModified(modtime);
 else     file.setLastModified(modtime);
  }
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"");
  opts.parse(args);
  args=opts.getRemainingArgs();
  String sRefFile=opts.getOptString(""String_Node_Str"",null);
  File refFile=sRefFile == null ? null : getFile(sRefFile);
  long modtime=refFile != null ? refFile.lastModified() : (new Date()).getTime();
  for (  XValue arg : args) {
    File file=getFile(arg);
    file.createNewFile();
    file.setLastModified(modtime);
  }
  return 0;
}"
42330,"@Override public XMLStreamWriter asXMLStreamWriter(SerializeOpts opts){
  ReceivingContentHandler rch=new ReceivingContentHandler();
  Receiver r=null;
  Builder b=new TinyBuilder();
  PipelineConfiguration pipe=Shell.getProcessor().getUnderlyingConfiguration().makePipelineConfiguration();
  b.setPipelineConfiguration(pipe);
  r=b;
  rch.setReceiver(r);
  rch.setPipelineConfiguration(pipe);
  XMLStreamWriterToContentHandler sw=new XMLStreamWriterToContentHandler(rch);
  mBuilder=b;
  return sw;
}","@Override public synchronized XMLStreamWriter asXMLStreamWriter(SerializeOpts opts){
  ReceivingContentHandler rch=new ReceivingContentHandler();
  Receiver r=null;
  Builder b=new TinyBuilder();
  PipelineConfiguration pipe=Shell.getProcessor().getUnderlyingConfiguration().makePipelineConfiguration();
  b.setPipelineConfiguration(pipe);
  r=b;
  rch.setReceiver(r);
  rch.setPipelineConfiguration(pipe);
  XMLStreamWriterToContentHandler sw=new XMLStreamWriterToContentHandler(rch);
  mBuilder=b;
  return sw;
}"
42331,"public int run(List<XValue> args,XEnvironment env) throws Exception {
  mEnvironment=env;
  mShell=env.getShell();
  return run(args);
}","public URLClassLoader run(){
  return new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]));
}"
42332,"protected ClassLoader getClassLoader(XValue classpath) throws MalformedURLException, IOException, URISyntaxException {
  if (classpath == null)   return this.getClass().getClassLoader();
  List<URL> urls=new ArrayList<URL>();
  for (  XdmItem item : classpath.asXdmValue()) {
    String cp=item.getStringValue();
    URL url=getShell().getURL(cp);
    urls.add(url);
  }
  URLClassLoader loader=new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]));
  return loader;
}","protected ClassLoader getClassLoader(XValue classpath) throws MalformedURLException, IOException, URISyntaxException {
  if (classpath == null)   return this.getClass().getClassLoader();
  final List<URL> urls=new ArrayList<URL>();
  for (  XdmItem item : classpath.asXdmValue()) {
    String cp=item.getStringValue();
    URL url=getShell().getURL(cp);
    urls.add(url);
  }
  URLClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
    public URLClassLoader run(){
      return new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]));
    }
  }
);
  return loader;
}"
42333,"public void printErr(String s,Exception e){
  PrintWriter out;
  try {
    out=getEnv().getStderr().asPrintWriter(getSerializeOpts());
  }
 catch (  IOException e1) {
    mLogger.error(""String_Node_Str"" + s,e);
    return;
  }
  out.println(s);
  out.println(e.getMessage());
  out.flush();
}","public void printErr(String s,Exception e){
  PrintWriter out;
  try {
    out=getEnv().getStderr().asPrintWriter(getSerializeOpts());
  }
 catch (  IOException e1) {
    mLogger.error(""String_Node_Str"" + s,e);
    return;
  }
  out.println(s);
  out.println(e.getMessage());
  out.flush();
  out.close();
}"
42334,"public void printOut(String s){
  PrintWriter out;
  try {
    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(getEnv().getStdout().asOutputStream(getSerializeOpts()),getSerializeOpts().getText_encoding())));
  }
 catch (  IOException e) {
    mLogger.error(""String_Node_Str"" + s,e);
    return;
  }
  out.println(s);
  out.flush();
}","public void printOut(String s){
  PrintWriter out;
  try {
    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(getEnv().getStdout().asOutputStream(getSerializeOpts()),getSerializeOpts().getText_encoding())));
  }
 catch (  IOException e) {
    mLogger.error(""String_Node_Str"" + s,e);
    return;
  }
  out.println(s);
  out.flush();
  out.close();
}"
42335,"@Override public int run(List<XValue> args) throws Exception {
  boolean opt_delete=false;
  XValue opt_add=null;
  XValue opt_replace=null;
  String opt_matches=null;
  String opt_xpath=null;
  String opt_replacex=null;
  String opt_rename=null;
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  setupBuilders();
  XdmNode context=null;
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=importNode((XdmNode)item);
    }
    if (context == null) {
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       context=build(getSource(ov.getValue()));
 else {
        context=build(getStdin().asSource(serializeOpts));
      }
    }
  }
  List<XValue> xvargs=opts.getRemainingArgs();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      mCompiler.declareVariable(new QName(name));
    }
  }
  opt_add=opts.getOptValue(""String_Node_Str"");
  opt_replace=opts.getOptValue(""String_Node_Str"");
  opt_delete=opts.hasOpt(""String_Node_Str"");
  opt_replacex=opts.getOptString(""String_Node_Str"",null);
  opt_rename=opts.getOptString(""String_Node_Str"",null);
  opt_matches=opts.getOptString(""String_Node_Str"",null);
  opt_xpath=opts.getOptString(""String_Node_Str"",null);
  if (opt_matches == null && opt_xpath == null)   throw new InvalidArgumentException(""String_Node_Str"");
  XPathExecutable expr;
  if (opt_matches == null)   expr=mCompiler.compile(opt_xpath);
 else   expr=mCompiler.compilePattern(opt_matches);
  XPathSelector eval=expr.load();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      XValue value=xvargs.get(i * 2 + 1);
      eval.setVariable(new QName(name),value.asXdmValue());
    }
  }
  XPathSelector replacex=null;
  if (opt_replacex != null) {
    XPathExecutable xe=mCompiler.compile(opt_replacex);
    replacex=xe.load();
  }
  if (opt_replace != null || opt_delete || opt_add != null || opt_replacex != null || opt_rename != null) {
    Iterable<XdmItem> results=getResults(eval,context,opt_matches != null);
    for (    XdmItem item : results) {
      Object obj=item.getUnderlyingValue();
      if (obj instanceof MutableNodeInfo) {
        MutableNodeInfo node=(MutableNodeInfo)obj;
        if (opt_replace != null)         replace(node,opt_replace);
        if (replacex != null)         replace(item,node,replacex);
        if (opt_add != null)         add(node,opt_add);
        if (opt_delete)         delete(node);
        if (opt_rename != null)         rename(node,opt_rename);
      }
    }
  }
  OutputPort stdout=getStdout();
  Util.writeXdmValue(context,stdout.asDestination(serializeOpts));
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}","@Override public int run(List<XValue> args) throws Exception {
  boolean opt_delete=false;
  XValue opt_add=null;
  XValue opt_replace=null;
  String opt_matches=null;
  String opt_xpath=null;
  String opt_replacex=null;
  String opt_rename=null;
  Options opts=new Options(""String_Node_Str"",SerializeOpts.getOptionDefs());
  opts.parse(args);
  setupBuilders();
  XdmNode context=null;
  SerializeOpts serializeOpts=getSerializeOpts(opts);
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=importNode((XdmNode)item);
    }
    if (context == null) {
      Source src=null;
      InputPort insrc=null;
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       insrc=getInput(ov.getValue());
 else {
        insrc=getStdin();
      }
      try {
        context=build(insrc.asSource(serializeOpts));
      }
  finally {
        insrc.close();
      }
    }
  }
  List<XValue> xvargs=opts.getRemainingArgs();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      mCompiler.declareVariable(new QName(name));
    }
  }
  opt_add=opts.getOptValue(""String_Node_Str"");
  opt_replace=opts.getOptValue(""String_Node_Str"");
  opt_delete=opts.hasOpt(""String_Node_Str"");
  opt_replacex=opts.getOptString(""String_Node_Str"",null);
  opt_rename=opts.getOptString(""String_Node_Str"",null);
  opt_matches=opts.getOptString(""String_Node_Str"",null);
  opt_xpath=opts.getOptString(""String_Node_Str"",null);
  if (opt_matches == null && opt_xpath == null)   throw new InvalidArgumentException(""String_Node_Str"");
  XPathExecutable expr;
  if (opt_matches == null)   expr=mCompiler.compile(opt_xpath);
 else   expr=mCompiler.compilePattern(opt_matches);
  XPathSelector eval=expr.load();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      XValue value=xvargs.get(i * 2 + 1);
      eval.setVariable(new QName(name),value.asXdmValue());
    }
  }
  XPathSelector replacex=null;
  if (opt_replacex != null) {
    XPathExecutable xe=mCompiler.compile(opt_replacex);
    replacex=xe.load();
  }
  if (opt_replace != null || opt_delete || opt_add != null || opt_replacex != null || opt_rename != null) {
    Iterable<XdmItem> results=getResults(eval,context,opt_matches != null);
    for (    XdmItem item : results) {
      Object obj=item.getUnderlyingValue();
      if (obj instanceof MutableNodeInfo) {
        MutableNodeInfo node=(MutableNodeInfo)obj;
        if (opt_replace != null)         replace(node,opt_replace);
        if (replacex != null)         replace(item,node,replacex);
        if (opt_add != null)         add(node,opt_add);
        if (opt_delete)         delete(node);
        if (opt_rename != null)         rename(node,opt_rename);
      }
    }
  }
  OutputPort stdout=getStdout();
  Util.writeXdmValue(context,stdout.asDestination(serializeOpts));
  stdout.writeSequenceTerminator(serializeOpts);
  return 0;
}"
42336,"public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  File curdir=shell.getCurdir();
  mLogger.debug(""String_Node_Str"" + mCommandFile.getPath() + ""String_Node_Str""+ curdir.getPath());
  ArrayList<XValue> cmdlist=new ArrayList<XValue>();
  cmdlist.add(new XValue(mCommandFile.getPath()));
  cmdlist.addAll(Util.expandSequences(args));
  Process proc=null;
synchronized (this.getClass()) {
    ProcessBuilder builder=new ProcessBuilder();
    builder.command(Util.toStringList(cmdlist));
    builder.directory(curdir);
    proc=builder.start();
    if (proc == null)     return -1;
  }
  StreamCopier outCopier=new StreamCopier(proc.getInputStream(),shell.getEnv().getStdout().asOutputStream(),true);
  StreamCopier errCopier=new StreamCopier(proc.getErrorStream(),shell.getEnv().getStderr().asOutputStream(),true);
  PortCopier inCopier=null;
  if (shell.getEnv().isStdinRedirected())   inCopier=new PortCopier(shell.getEnv().getStdin(),proc.getOutputStream(),shell.getSerializeOpts(),true);
 else   proc.getOutputStream().close();
  errCopier.start();
  if (inCopier != null)   inCopier.start();
  outCopier.run();
  int ret=proc.waitFor();
  if (inCopier != null)   inCopier.join();
  outCopier.join();
  errCopier.join();
  return ret;
}","public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  File curdir=shell.getCurdir();
  mLogger.debug(""String_Node_Str"" + mCommandFile.getPath() + ""String_Node_Str""+ curdir.getPath());
  ArrayList<XValue> cmdlist=new ArrayList<XValue>();
  cmdlist.add(new XValue(mCommandFile.getPath()));
  cmdlist.addAll(Util.expandSequences(args));
  Process proc=null;
synchronized (this.getClass()) {
    ProcessBuilder builder=new ProcessBuilder();
    builder.command(Util.toStringList(cmdlist));
    builder.directory(curdir);
    proc=builder.start();
    if (proc == null)     return -1;
  }
  StreamCopier outCopier=new StreamCopier(proc.getInputStream(),shell.getEnv().getStdout().asOutputStream(),true);
  StreamCopier errCopier=new StreamCopier(proc.getErrorStream(),shell.getEnv().getStderr().asOutputStream(),true);
  PortCopier inCopier=null;
  if (shell.getEnv().isStdinRedirected())   inCopier=new PortCopier(shell.getEnv().getStdin(),proc.getOutputStream(),shell.getSerializeOpts(),true);
 else   proc.getOutputStream().close();
  errCopier.start();
  if (inCopier != null)   inCopier.start();
  outCopier.run();
  outCopier.closeIn();
  int ret=proc.waitFor();
  if (inCopier != null)   inCopier.join();
  outCopier.join();
  errCopier.join();
  return ret;
}"
42337,"@Override public void run(){
  try {
    Util.copyStream(mIn,mOut);
  }
 catch (  IOException e) {
    mLogger.warn(""String_Node_Str"",e);
  }
 finally {
    if (mCloseOut)     try {
      mOut.close();
    }
 catch (    IOException e) {
      mLogger.warn(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    Util.copyStream(mIn,mOut);
  }
 catch (  IOException e) {
    mLogger.warn(""String_Node_Str"",e);
  }
 finally {
    if (mCloseOut)     closeOut();
  }
}"
42338,"private CommandFactory(){
  addBuiltin(""String_Node_Str"",xcd.class);
  addBuiltin(""String_Node_Str"",xecho.class);
  addBuiltin(""String_Node_Str"",echo.class);
  addBuiltin(""String_Node_Str"",xfalse.class);
  addBuiltin(""String_Node_Str"",xtrue.class);
  addBuiltin(""String_Node_Str"",set.class);
  addBuiltin(""String_Node_Str"",source.class);
  addBuiltin(""String_Node_Str"",source.class);
  addBuiltin(""String_Node_Str"",exit.class);
  addBuiltin(""String_Node_Str"",colon.class);
  addBuiltin(""String_Node_Str"",test.class);
  addBuiltin(""String_Node_Str"",test.class);
  addBuiltin(""String_Node_Str"",shift.class);
  addBuiltin(""String_Node_Str"",read.class);
  addBuiltin(""String_Node_Str"",xread.class);
  addBuiltin(""String_Node_Str"",unset.class);
  addBuiltin(""String_Node_Str"",xwhich.class);
  addBuiltin(""String_Node_Str"",xversion.class);
  addBuiltin(""String_Node_Str"",jobs.class);
  addBuiltin(""String_Node_Str"",wait.class);
  addBuiltin(""String_Node_Str"",xbreak.class);
  addBuiltin(""String_Node_Str"",xcontinue.class);
  addBuiltin(""String_Node_Str"",eval.class);
  addBuiltin(""String_Node_Str"",declare.class);
  addBuiltin(""String_Node_Str"",xreturn.class);
  addBuiltin(""String_Node_Str"",ximport.class);
  addBuiltin(""String_Node_Str"",xmlsh.class);
  addBuiltin(""String_Node_Str"",xthrow.class);
  addBuiltin(""String_Node_Str"",tie.class);
  addBuiltin(""String_Node_Str"",log.class);
  addBuiltin(""String_Node_Str"",xtype.class);
  addBuiltin(""String_Node_Str"",require.class);
}","private CommandFactory(){
  addBuiltin(""String_Node_Str"",xcd.class);
  addBuiltin(""String_Node_Str"",xecho.class);
  addBuiltin(""String_Node_Str"",echo.class);
  addBuiltin(""String_Node_Str"",xfalse.class);
  addBuiltin(""String_Node_Str"",xtrue.class);
  addBuiltin(""String_Node_Str"",set.class);
  addBuiltin(""String_Node_Str"",source.class);
  addBuiltin(""String_Node_Str"",source.class);
  addBuiltin(""String_Node_Str"",exit.class);
  addBuiltin(""String_Node_Str"",colon.class);
  addBuiltin(""String_Node_Str"",test.class);
  addBuiltin(""String_Node_Str"",test.class);
  addBuiltin(""String_Node_Str"",shift.class);
  addBuiltin(""String_Node_Str"",read.class);
  addBuiltin(""String_Node_Str"",xread.class);
  addBuiltin(""String_Node_Str"",unset.class);
  addBuiltin(""String_Node_Str"",xwhich.class);
  addBuiltin(""String_Node_Str"",xversion.class);
  addBuiltin(""String_Node_Str"",jobs.class);
  addBuiltin(""String_Node_Str"",wait.class);
  addBuiltin(""String_Node_Str"",xbreak.class);
  addBuiltin(""String_Node_Str"",xcontinue.class);
  addBuiltin(""String_Node_Str"",eval.class);
  addBuiltin(""String_Node_Str"",declare.class);
  addBuiltin(""String_Node_Str"",xreturn.class);
  addBuiltin(""String_Node_Str"",ximport.class);
  addBuiltin(""String_Node_Str"",xmlsh.class);
  addBuiltin(""String_Node_Str"",xthrow.class);
  addBuiltin(""String_Node_Str"",tie.class);
  addBuiltin(""String_Node_Str"",log.class);
  addBuiltin(""String_Node_Str"",xtype.class);
  addBuiltin(""String_Node_Str"",require.class);
  addBuiltin(""String_Node_Str"",help.class);
}"
42339,"public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  try {
    if (mSourceMode) {
      return shell.runScript(mScript);
    }
 else {
      Shell sh=shell.clone();
      try {
        if (args != null)         sh.setArgs(args);
        sh.setArg0(mScriptName);
        int ret=sh.runScript(mScript);
        return ret;
      }
  finally {
        sh.close();
      }
    }
  }
  finally {
    mScript.close();
  }
}","public int run(Shell shell,String cmd,List<XValue> args) throws Exception {
  try {
    if (mSourceMode) {
      return shell.runScript(mScript);
    }
 else {
      Shell sh=shell.clone();
      try {
        if (args != null)         sh.setArgs(args);
        sh.setArg0(mScriptName);
        int ret=sh.runScript(mScript);
        return ret;
      }
  finally {
        sh.close();
      }
    }
  }
  finally {
    close();
  }
}"
42340,"@Override public int exec(Shell shell) throws Exception {
  if (mCommand == null || mCommand.isEmpty())   return execNull(shell);
  List<XValue> cmdLine=mSuffix.toCmdLine(shell,mCommand);
  String cmdName=cmdLine.remove(0).toString();
  ICommand cmd=CommandFactory.getInstance().getCommand(shell,cmdName);
  if (cmd == null) {
    shell.printErr(mCommand + ""String_Node_Str"");
    return 1;
  }
  XIOEnvironment saved_io=null;
  Shell saved_shell=null;
  Module saved_module=null;
  if (mPrefix == null)   saved_io=shell.getEnv().saveIO();
 else {
    saved_shell=shell;
    shell=shell.clone();
  }
  saved_module=shell.getModule();
  Shell saved_context_shell=ShellContext.set(shell);
  try {
    if (mPrefix != null)     mPrefix.exec(shell);
    mSuffix.exec(shell);
    Module module=cmd.getModule();
    if (module != null)     shell.setModule(module);
    return cmd.run(shell,cmdName,cmdLine);
  }
 catch (  ThrowException e) {
    throw e;
  }
catch (  Exception e) {
    shell.printErr(""String_Node_Str"" + cmdName + ""String_Node_Str""+ e.toString());
    mLogger.error(""String_Node_Str"" + cmdName,e);
    return -1;
  }
 finally {
    ShellContext.set(saved_context_shell);
    if (saved_io != null)     shell.getEnv().restoreIO(saved_io);
 else     if (saved_shell != null)     shell.close();
    shell.setModule(saved_module);
  }
}","@Override public int exec(Shell shell) throws Exception {
  if (mCommand == null || mCommand.isEmpty())   return execNull(shell);
  List<XValue> cmdLine=mSuffix.toCmdLine(shell,mCommand);
  String cmdName=cmdLine.remove(0).toString();
  ICommand cmd=CommandFactory.getInstance().getCommand(shell,cmdName);
  if (cmd == null) {
    shell.printErr(mCommand + ""String_Node_Str"");
    return 1;
  }
  XIOEnvironment saved_io=null;
  Shell saved_shell=null;
  Module saved_module=null;
  if (mPrefix == null)   saved_io=shell.getEnv().saveIO();
 else {
    saved_shell=shell;
    shell=shell.clone();
  }
  saved_module=shell.getModule();
  Shell saved_context_shell=ShellContext.set(shell);
  try {
    if (mPrefix != null)     mPrefix.exec(shell);
    mSuffix.exec(shell);
    Module module=cmd.getModule();
    if (module != null)     shell.setModule(module);
    return cmd.run(shell,cmdName,cmdLine);
  }
 catch (  ThrowException e) {
    cmd.close();
    throw e;
  }
catch (  Exception e) {
    shell.printErr(""String_Node_Str"" + cmdName + ""String_Node_Str""+ e.toString());
    mLogger.error(""String_Node_Str"" + cmdName,e);
    return -1;
  }
 finally {
    ShellContext.set(saved_context_shell);
    if (saved_io != null)     shell.getEnv().restoreIO(saved_io);
 else     if (saved_shell != null)     shell.close();
    shell.setModule(saved_module);
  }
}"
42341,"public void load(List<XValue> files,String baseUri,boolean bRecurse) throws CoreException, IOException, RequestException {
  printErr(""String_Node_Str"" + files.size() + ""String_Node_Str""+ baseUri);
  List<Content> contents=new ArrayList<Content>(files.size());
  int i=0;
  for (  XValue v : files) {
    String fname=v.toString();
    File file=getFile(fname);
    String uri=baseUri + file.getName() + ""String_Node_Str"";
    if (file.isDirectory()) {
      if (!bRecurse) {
        printErr(""String_Node_Str"" + file.getName());
        continue;
      }
      List<XValue> sub=new ArrayList<XValue>();
      for (      String fn : file.list()) {
        sub.add(new XValue(fname + ""String_Node_Str"" + fn));
      }
      createDir(uri);
      if (!sub.isEmpty())       load(sub,uri,bRecurse);
      continue;
    }
    Content content=ContentFactory.newContent(uri,file,options);
    contents.add(content);
  }
  if (!contents.isEmpty())   session.insertContent(contents.toArray(new Content[contents.size()]));
}","public void load(List<XValue> files,String baseUri,boolean bRecurse) throws CoreException, IOException, RequestException {
  printErr(""String_Node_Str"" + files.size() + ""String_Node_Str""+ baseUri);
  List<Content> contents=new ArrayList<Content>(files.size());
  int i=0;
  for (  XValue v : files) {
    String fname=v.toString();
    File file=getFile(fname);
    String uri=baseUri + file.getName();
    if (file.isDirectory()) {
      if (!bRecurse) {
        printErr(""String_Node_Str"" + file.getName());
        continue;
      }
      List<XValue> sub=new ArrayList<XValue>();
      for (      String fn : file.list()) {
        sub.add(new XValue(fname + ""String_Node_Str"" + fn));
      }
      createDir(uri + ""String_Node_Str"");
      if (!sub.isEmpty())       load(sub,uri + ""String_Node_Str"",bRecurse);
      continue;
    }
    Content content=ContentFactory.newContent(uri,file,options);
    contents.add(content);
  }
  if (!contents.isEmpty())   session.insertContent(contents.toArray(new Content[contents.size()]));
}"
42342,"public static boolean wildMatches(String pattern,String word){
  String reg=""String_Node_Str"" + pattern.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  if (reg.equals(""String_Node_Str""))   reg=""String_Node_Str"";
  return word.matches(reg);
}","public static boolean wildMatches(String pattern,String word,boolean caseSensitive){
  String reg=""String_Node_Str"" + pattern.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  if (reg.equals(""String_Node_Str""))   reg=""String_Node_Str"";
  Pattern p=Pattern.compile(reg,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
  return p.matcher(word).matches();
}"
42343,"public boolean matches(String word){
  for (  String pattern : mPattern) {
    if (Util.wildMatches(pattern,word))     return true;
  }
  return false;
}","public boolean matches(String word){
  for (  String pattern : mPattern) {
    if (Util.wildMatches(pattern,word,true))     return true;
  }
  return false;
}"
42344,"public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  String file=mFile.expandString(shell,false);
  boolean isPort=file.startsWith(""String_Node_Str"") && file.endsWith(""String_Node_Str"");
  if (isPort) {
    String var=file.substring(1,file.length() - 1);
    if (mPrefix.equals(""String_Node_Str""))     env.setStdin(env.getVar(var));
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=new XVariable(var,null);
      env.setVar(xvar);
      env.setStdout(xvar);
    }
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=env.getVar(var);
      if (var == null) {
        xvar=new XVariable(var,null);
        env.setVar(xvar);
      }
      env.setStdout(xvar);
    }
    return;
  }
  if (mPrefix.equals(""String_Node_Str"")) {
    env.setStdin(shell.getInputStream(file));
    env.getStdin().setSystemId(file);
  }
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStderr(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,true));
}","public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  String file=mFile.expandString(shell,true);
  boolean isPort=file.startsWith(""String_Node_Str"") && file.endsWith(""String_Node_Str"");
  if (isPort) {
    String var=file.substring(1,file.length() - 1);
    if (mPrefix.equals(""String_Node_Str""))     env.setStdin(env.getVar(var));
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=new XVariable(var,null);
      env.setVar(xvar);
      env.setStdout(xvar);
    }
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=env.getVar(var);
      if (var == null) {
        xvar=new XVariable(var,null);
        env.setVar(xvar);
      }
      env.setStdout(xvar);
    }
    return;
  }
  if (mPrefix.equals(""String_Node_Str"")) {
    env.setStdin(shell.getInputStream(file));
    env.getStdin().setSystemId(file);
  }
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStderr(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,true));
}"
42345,"private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    r.add(new XValue(sb.toString()));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(mShell.getCurdir(),null,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}","private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen) {
      c=vs.charAt(++i);
      if (c != '""' && c != '\'')       sb.append('\\');
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    r.add(new XValue(sb.toString()));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  vs=vs.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String root=null;
  String parent=null;
  if (vs.startsWith(""String_Node_Str"")) {
    root=""String_Node_Str"";
    parent=""String_Node_Str"";
    vs=vs.substring(1);
  }
  if (Util.isWindows() && vs.matches(""String_Node_Str"")) {
    root=vs.substring(0,2);
    vs=vs.substring(2);
    if (vs.startsWith(""String_Node_Str""))     vs=vs.substring(1);
    parent=root;
  }
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(root == null ? mShell.getCurdir() : new File(root),parent,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}"
42346,"@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",args);
  opts.parse();
  Processor processor=Shell.getProcessor();
  XPathCompiler compiler=processor.newXPathCompiler();
  XdmNode context=null;
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    DocumentBuilder builder=processor.newDocumentBuilder();
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=(XdmNode)item;
    }
    if (context == null) {
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       context=builder.build(getSource(ov.getValue()));
 else {
        context=getStdin().asXdmNode();
      }
    }
  }
  List<XValue> xvargs=opts.getRemainingArgs();
  boolean bQuiet=opts.hasOpt(""String_Node_Str"");
  OptionValue ov=opts.getOpt(""String_Node_Str"");
  String xpath=null;
  if (ov != null)   xpath=Util.readString(getURI(ov.getValue()));
 else {
    ov=opts.getOpt(""String_Node_Str"");
    if (ov != null)     xpath=ov.getValue().toString();
  }
  if (xpath == null)   xpath=xvargs.remove(0).toString();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      compiler.declareVariable(new QName(name));
    }
  }
  Namespaces ns=null;
  if (!opts.hasOpt(""String_Node_Str""))   ns=getEnv().getNamespaces();
  if (opts.hasOpt(""String_Node_Str"")) {
    Namespaces ns2=new Namespaces();
    if (ns != null)     ns2.putAll(ns);
    for (    XValue v : opts.getOpt(""String_Node_Str"").getValues())     ns2.declare(v);
    ns=ns2;
  }
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XPathExecutable expr=compiler.compile(xpath);
  XPathSelector eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      XValue value=xvargs.get(i * 2 + 1);
      eval.setVariable(new QName(name),value.asXdmValue());
    }
  }
  OutputPort stdout=getStdout();
  Destination ser=stdout.asDestination();
  boolean bAnyOutput=false;
  boolean bFirst=true;
  for (  XdmItem item : eval) {
    bAnyOutput=true;
    if (bQuiet)     break;
    if (!bFirst)     stdout.writeSequenceSeperator();
    bFirst=false;
    processor.writeXdmValue(item,ser);
  }
  if (!bQuiet && bAnyOutput)   stdout.writeSequenceTerminator();
  return bAnyOutput ? 0 : 1;
}","@Override public int run(List<XValue> args) throws Exception {
  Options opts=new Options(""String_Node_Str"",args);
  opts.parse();
  Processor processor=Shell.getProcessor();
  XPathCompiler compiler=processor.newXPathCompiler();
  XdmNode context=null;
  if (!opts.hasOpt(""String_Node_Str"")) {
    OptionValue ov=opts.getOpt(""String_Node_Str"");
    DocumentBuilder builder=processor.newDocumentBuilder();
    if (ov != null && ov.getValue().isXExpr()) {
      XdmItem item=ov.getValue().asXdmValue().itemAt(0);
      if (item instanceof XdmNode)       context=(XdmNode)item;
    }
    if (context == null) {
      if (ov != null && !ov.getValue().toString().equals(""String_Node_Str""))       context=builder.build(getSource(ov.getValue()));
 else {
        context=getStdin().asXdmNode();
      }
    }
  }
  List<XValue> xvargs=opts.getRemainingArgs();
  boolean bQuiet=opts.hasOpt(""String_Node_Str"");
  OptionValue ov=opts.getOpt(""String_Node_Str"");
  String xpath=null;
  if (ov != null)   xpath=Util.readString(getURI(ov.getValue()));
 else {
    ov=opts.getOpt(""String_Node_Str"");
    if (ov != null)     xpath=ov.getValue().toString();
  }
  if (xpath == null)   xpath=xvargs.remove(0).toString();
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      compiler.declareVariable(new QName(name));
    }
  }
  Namespaces ns=null;
  if (!opts.hasOpt(""String_Node_Str""))   ns=getEnv().getNamespaces();
  if (opts.hasOpt(""String_Node_Str"")) {
    Namespaces ns2=new Namespaces();
    if (ns != null)     ns2.putAll(ns);
    for (    XValue v : opts.getOpt(""String_Node_Str"").getValues())     ns2.declare(v);
    ns=ns2;
  }
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XPathExecutable expr=compiler.compile(xpath);
  XPathSelector eval=expr.load();
  if (context != null)   eval.setContextItem(context);
  if (opts.hasOpt(""String_Node_Str"")) {
    for (int i=0; i < xvargs.size() / 2; i++) {
      String name=xvargs.get(i * 2).toString();
      XValue value=xvargs.get(i * 2 + 1);
      eval.setVariable(new QName(name),value.asXdmValue());
    }
  }
  OutputPort stdout=getStdout();
  Destination ser=stdout.asDestination();
  boolean bAnyOutput=false;
  boolean bFirst=true;
  for (  XdmItem item : eval) {
    bAnyOutput=true;
    if (bQuiet)     break;
    if (!bFirst)     stdout.writeSequenceSeperator();
 else {
      if (item instanceof XdmNode) {
        URI uri=((XdmNode)item).getBaseURI();
        stdout.setSystemId(uri.toString());
      }
    }
    bFirst=false;
    processor.writeXdmValue(item,ser);
  }
  if (!bQuiet && bAnyOutput)   stdout.writeSequenceTerminator();
  return bAnyOutput ? 0 : 1;
}"
42347,"public int run(List<XValue> args) throws Exception {
  OutputPort stdout=mShell.getEnv().getStdout();
  Destination dest=stdout.asDestination();
  Processor processor=Shell.getProcessor();
  args=Util.expandSequences(args);
  boolean bFirst=true;
  for (  XValue arg : args) {
    if (!bFirst)     stdout.writeSequenceSeperator();
    bFirst=false;
    processor.writeXdmValue(arg.asXdmValue(),dest);
  }
  stdout.writeSequenceTerminator();
  return 0;
}","public int run(List<XValue> args) throws Exception {
  OutputPort stdout=mShell.getEnv().getStdout();
  Destination dest=stdout.asDestination();
  Processor processor=Shell.getProcessor();
  args=Util.expandSequences(args);
  boolean bFirst=true;
  for (  XValue arg : args) {
    if (!bFirst)     stdout.writeSequenceSeperator();
 else {
      XdmValue item=arg.asXdmValue();
      if (item instanceof XdmNode) {
        URI uri=((XdmNode)item).getBaseURI();
        stdout.setSystemId(uri.toString());
      }
    }
    bFirst=false;
    processor.writeXdmValue(arg.asXdmValue(),dest);
  }
  stdout.writeSequenceTerminator();
  return 0;
}"
42348,"final synchronized void release() throws CoreException {
  if (--mRef <= 0)   try {
    close();
  }
 catch (  Exception e) {
    throw new CoreException(""String_Node_Str"");
  }
}","final synchronized void release() throws CoreException {
  try {
    flush();
    if (--mRef <= 0)     close();
  }
 catch (  Exception e) {
    throw new CoreException(""String_Node_Str"");
  }
}"
42349,"private void appendVar(XdmItem xitem) throws InvalidArgumentException {
  XValue value=mVariable.getValue();
  if (value == null)   mVariable.setValue(new XValue(xitem));
 else {
    mVariable.setValue(value.append(xitem));
  }
}","private void appendVar(XdmItem xitem) throws InvalidArgumentException {
  if (xitem instanceof XdmNode) {
    XdmNode node=(XdmNode)xitem;
    node.getUnderlyingNode().setSystemId(getSystemId());
  }
  XValue value=mVariable.getValue();
  if (value == null)   mVariable.setValue(new XValue(xitem));
 else {
    mVariable.setValue(value.append(xitem));
  }
}"
42350,"public synchronized void close() throws IOException, InvalidArgumentException {
  if (mStream != null)   mStream.close();
  if (mVariable != null) {
    if (mXdmDestination != null)     appendVar(mXdmDestination.getXdmNode());
    if (mByteArrayOutputStream != null)     appendVar(mByteArrayOutputStream.toString(Shell.getTextEncoding()));
    if (mBuilder != null)     appendVar((XdmNode)S9Util.wrapNode(mBuilder.getCurrentRoot()));
  }
}","public synchronized void close() throws IOException, InvalidArgumentException {
  if (mStream != null)   mStream.close();
}"
42351,"public void initStdio() throws IOException {
  mInputs.add(new NamedPort<InputPort>(null,true,new InputPort(System.in,""String_Node_Str"")));
  mOutputs.add(new NamedPort<OutputPort>(null,true,new OutputPort(System.out)));
  mOutputs.add(new NamedPort<OutputPort>(kSTDERR,false,new OutputPort(System.err)));
}","public void initStdio() throws IOException {
  mInputs.add(new NamedPort<InputPort>(null,true,new InputPort(System.in)));
  mOutputs.add(new NamedPort<OutputPort>(null,true,new OutputPort(System.out)));
  mOutputs.add(new NamedPort<OutputPort>(kSTDERR,false,new OutputPort(System.err)));
}"
42352,"public PipedStream(String systemId) throws IOException {
  super(systemId);
  mOut=new PipedOutputStream();
  mIn=new PipedInputStream(mOut);
}","public PipedStream() throws IOException {
  mOut=new PipedOutputStream();
  mIn=new PipedInputStream(mOut);
}"
42353,"static public PipedStream[] getPipes(int n) throws IOException {
  if (n == 0)   return null;
  PipedStream streams[]=new PipedStream[n];
  for (int i=0; i < n; i++)   streams[i]=new PipedStream(""String_Node_Str"");
  return streams;
}","static public PipedStream[] getPipes(int n) throws IOException {
  if (n == 0)   return null;
  PipedStream streams[]=new PipedStream[n];
  for (int i=0; i < n; i++)   streams[i]=new PipedStream();
  return streams;
}"
42354,"public InputPort getInput() throws IOException {
  return new InputPort(mIn,mSystemId);
}","public InputPort getInput() throws IOException {
  return new InputPort(mIn);
}"
42355,"private String expandSubproc(Shell shell,Command c) throws CoreException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  shell=shell.clone();
  try {
    shell.getEnv().setStdout(out);
    shell.getEnv().setStdin(new NullInputStream(),""String_Node_Str"");
    shell.exec(c);
    return out.toString().trim();
  }
  finally {
    shell.close();
  }
}","private String expandSubproc(Shell shell,Command c) throws CoreException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  shell=shell.clone();
  try {
    shell.getEnv().setStdout(out);
    shell.getEnv().setStdin(new NullInputStream());
    shell.exec(c);
    return out.toString().trim();
  }
  finally {
    shell.close();
  }
}"
42356,"private XdmValue parseXCmd(Shell shell,Command cmd) throws IOException, CoreException {
  ShellThread sht=null;
  try {
    PipedStream pipe=new PipedStream(""String_Node_Str"");
    shell=shell.clone();
    shell.getEnv().setStdout(pipe.getOutput());
    shell.getEnv().setStdin(new NullInputStream(),""String_Node_Str"");
    sht=new ShellThread(shell,null,cmd);
    sht.start();
    DocumentBuilder builder=Shell.getProcessor().newDocumentBuilder();
    XdmNode node=builder.build(pipe.getInput().asSource());
    if (sht != null)     sht.join();
    return node;
  }
 catch (  Exception e) {
    throw new XMLException(""String_Node_Str"" + cmd,e);
  }
}","private XdmValue parseXCmd(Shell shell,Command cmd) throws IOException, CoreException {
  ShellThread sht=null;
  try {
    PipedStream pipe=new PipedStream();
    shell=shell.clone();
    shell.getEnv().setStdout(pipe.getOutput());
    shell.getEnv().setStdin(new NullInputStream());
    sht=new ShellThread(shell,null,cmd);
    sht.start();
    DocumentBuilder builder=Shell.getProcessor().newDocumentBuilder();
    XdmNode node=builder.build(pipe.getInput().asSource());
    if (sht != null)     sht.join();
    return node;
  }
 catch (  Exception e) {
    throw new XMLException(""String_Node_Str"" + cmd,e);
  }
}"
42357,"public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  if (mPrefix.equals(""String_Node_Str"")) {
    Shell sh=shell.clone();
    PipedStream pipe=PipedStream.getPipes(1)[0];
    try {
      sh.getEnv().setStdout(pipe.getOutput());
      sh.getEnv().setStdin(new NullInputStream(),""String_Node_Str"");
      ShellThread sht=new ShellThread(sh,null,mCommand);
      env.setStdin(pipe.getInput());
      sht.start();
      return;
    }
  finally {
    }
  }
 else   throw new InvalidArgumentException(""String_Node_Str"" + mPrefix);
}","public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  if (mPrefix.equals(""String_Node_Str"")) {
    Shell sh=shell.clone();
    PipedStream pipe=PipedStream.getPipes(1)[0];
    try {
      sh.getEnv().setStdout(pipe.getOutput());
      sh.getEnv().setStdin(new NullInputStream());
      ShellThread sht=new ShellThread(sh,null,mCommand);
      env.setStdin(pipe.getInput());
      sht.start();
      return;
    }
  finally {
    }
  }
 else   throw new InvalidArgumentException(""String_Node_Str"" + mPrefix);
}"
42358,"public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  String file=mFile.expandString(shell,false);
  boolean isPort=file.startsWith(""String_Node_Str"") && file.endsWith(""String_Node_Str"");
  if (isPort) {
    String var=file.substring(1,file.length() - 1);
    if (mPrefix.equals(""String_Node_Str""))     env.setStdin(env.getVar(var));
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=new XVariable(var,null);
      env.setVar(xvar);
      env.setStdout(xvar);
    }
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=env.getVar(var);
      if (var == null) {
        xvar=new XVariable(var,null);
        env.setVar(xvar);
      }
      env.setStdout(xvar);
    }
    return;
  }
  if (mPrefix.equals(""String_Node_Str""))   env.setStdin(shell.getInputStream(file),file);
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStderr(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,true));
}","public void exec(Shell shell) throws IOException, CoreException {
  XEnvironment env=shell.getEnv();
  String file=mFile.expandString(shell,false);
  boolean isPort=file.startsWith(""String_Node_Str"") && file.endsWith(""String_Node_Str"");
  if (isPort) {
    String var=file.substring(1,file.length() - 1);
    if (mPrefix.equals(""String_Node_Str""))     env.setStdin(env.getVar(var));
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=new XVariable(var,null);
      env.setVar(xvar);
      env.setStdout(xvar);
    }
 else     if (mPrefix.equals(""String_Node_Str"")) {
      XVariable xvar=env.getVar(var);
      if (var == null) {
        xvar=new XVariable(var,null);
        env.setVar(xvar);
      }
      env.setStdout(xvar);
    }
    return;
  }
  if (mPrefix.equals(""String_Node_Str"")) {
    env.setStdin(shell.getInputStream(file));
    env.getStdin().setSystemId(file);
  }
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStderr(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,false));
 else   if (mPrefix.equals(""String_Node_Str""))   env.setStdout(shell.getOutputStream(file,true));
}"
42359,"public void exec(Shell shell) throws CoreException, UnsupportedEncodingException {
  shell.getEnv().setStdin(new ByteArrayInputStream(mHere.getBytes(Shell.getTextEncoding())),""String_Node_Str"");
}","public void exec(Shell shell) throws CoreException, UnsupportedEncodingException {
  shell.getEnv().setStdin(new ByteArrayInputStream(mHere.getBytes(Shell.getTextEncoding())));
}"
42360,"private XdmValue parseXExpr(String arg){
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  NameValueMap<String> ns=mShell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Collection<XVariable> vars=mShell.getEnv().getVars().values();
  for (  XVariable value : vars) {
    if (value.getFlags().contains(XVarFlag.XEXPR))     sb.append(""String_Node_Str"").append(value.getName()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(arg);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    XVariable value : vars) {
      if (value.getFlags().contains(XVarFlag.XEXPR))       eval.setExternalVariable(new QName(value.getName()),value.getValue().asXdmValue());
    }
    eval.setExternalVariable(new QName(""String_Node_Str""),new XValue(mShell.getArgs()).asXdmValue());
    return eval.evaluate();
  }
 catch (  SaxonApiException e) {
    mLogger.warn(""String_Node_Str"" + arg,e);
    mShell.printErr(""String_Node_Str"");
  }
  return null;
}","private XdmValue parseXExpr(String arg){
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  NameValueMap<String> ns=mShell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Collection<XVariable> vars=mShell.getEnv().getVars().values();
  for (  XVariable value : vars) {
    if (!value.isNull() && value.getFlags().contains(XVarFlag.XEXPR))     sb.append(""String_Node_Str"").append(value.getName()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(arg);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    XVariable value : vars) {
      if (!value.isNull() && value.getFlags().contains(XVarFlag.XEXPR))       eval.setExternalVariable(new QName(value.getName()),value.getValue().asXdmValue());
    }
    eval.setExternalVariable(new QName(""String_Node_Str""),new XValue(mShell.getArgs()).asXdmValue());
    return eval.evaluate();
  }
 catch (  SaxonApiException e) {
    mLogger.warn(""String_Node_Str"" + arg,e);
    mShell.printErr(""String_Node_Str"");
  }
  return null;
}"
42361,"private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    r.add(new XValue(sb.toString()));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(mShell.getCurdir(),null,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}","private List<XValue> expandWild(XValue v){
  ArrayList<XValue> r=new ArrayList<XValue>();
  if (v.isXExpr()) {
    r.add(v);
    return r;
  }
  String vs=v.toString();
  int vslen=vs.length();
  StringBuffer sb=new StringBuffer();
  char cQuote=0;
  boolean wildUnQuoted=false;
  for (int i=0; i < vslen; i++) {
    char c=vs.charAt(i);
    if (c == '\\' && i < vslen) {
      c=vs.charAt(++i);
      sb.append(c);
      continue;
    }
    if (c == '""' || c == '\'') {
      if (c == cQuote) {
        cQuote=0;
        continue;
      }
 else       if (cQuote == 0) {
        cQuote=c;
        continue;
      }
    }
    if (cQuote == 0 && (c == '*' || c == '?' || c == '['))     wildUnQuoted=true;
    sb.append(c);
  }
  if (!wildUnQuoted) {
    r.add(new XValue(sb.toString()));
    return r;
  }
  vs=sb.toString();
  List<String> rs=new ArrayList<String>();
  String wilds[]=vs.split(""String_Node_Str"");
  expandDir(mShell.getCurdir(),null,wilds,rs);
  for (  String f : rs) {
    r.add(new XValue(f));
  }
  if (r.size() == 0)   r.add(v);
  return r;
}"
42362,"List<XValue> expand(String arg,boolean bExpandWild,boolean bExpandWords) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    String res=expandSubproc(arg.substring(2,arg.length() - 1));
    if (bExpandWords)     for (    String w : res.split(""String_Node_Str""))     r.add(new XValue(w));
 else     r.add(new XValue(res));
    return r;
  }
  Result result=new Result();
  char cQuote=0;
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\'' || c == '""') {
      if (cQuote == c)       cQuote=0;
 else       if (cQuote == 0)       cQuote=c;
    }
    if (c == '\\') {
      if (i < arg.length())       result.append(arg.charAt(++i));
      continue;
    }
    if (cQuote != '\'' && c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else       if (arg.charAt(i) == '(') {
        sbv.append('(');
        i=readToMatching(arg,i,sbv,')');
        sbv.append(')');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var,cQuote != '\0');
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  if (!bExpandWild)   return result.getResult();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    List<XValue> r=expandWild(v);
    if (r != null)     result2.addAll(r);
  }
  return result2;
}","List<XValue> expand(String arg,boolean bExpandWild,boolean bExpandWords) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    String res=expandSubproc(arg.substring(2,arg.length() - 1));
    if (bExpandWords)     for (    String w : res.split(""String_Node_Str""))     r.add(new XValue(w));
 else     r.add(new XValue(res));
    return r;
  }
  Result result=new Result();
  char cQuote=0;
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\'' || c == '""') {
      if (cQuote == c)       cQuote=0;
 else       if (cQuote == 0)       cQuote=c;
    }
    if (c == '\\') {
      result.append(c);
      if (i < arg.length())       result.append(arg.charAt(++i));
      continue;
    }
    if (cQuote != '\'' && c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else       if (arg.charAt(i) == '(') {
        sbv.append('(');
        i=readToMatching(arg,i,sbv,')');
        sbv.append(')');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var,cQuote != '\0');
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  if (!bExpandWild)   return result.getResult();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    List<XValue> r=expandWild(v);
    if (r != null)     result2.addAll(r);
  }
  return result2;
}"
42363,"private void setGlobalVars(){
  String path=System.getenv(""String_Node_Str"");
  getEnv().setVar(new XVariable(""String_Node_Str"",new XValue(path)));
  getEnv().setVar(new XDynamicVariable(""String_Node_Str"",EnumSet.of(XVarFlag.READONLY,XVarFlag.XEXPR)){
    public XValue getValue(){
      return new XValue(Util.toJavaPath(getEnv().getCurdir().getAbsolutePath()));
    }
  }
);
  getEnv().setVar(""String_Node_Str"",System.getProperty(""String_Node_Str""));
}","private void setGlobalVars(){
  String path=Util.toJavaPath(System.getenv(""String_Node_Str""));
  getEnv().setVar(new XVariable(""String_Node_Str"",new XValue(path)));
  getEnv().setVar(new XDynamicVariable(""String_Node_Str"",EnumSet.of(XVarFlag.READONLY,XVarFlag.XEXPR)){
    public XValue getValue(){
      return new XValue(Util.toJavaPath(getEnv().getCurdir().getAbsolutePath()));
    }
  }
);
  getEnv().setVar(""String_Node_Str"",Util.toJavaPath(System.getProperty(""String_Node_Str"")));
}"
42364,"List<XValue> expand(String arg,boolean bExpandWild,boolean bExpandWords) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    String res=expandSubproc(arg.substring(2,arg.length() - 1));
    if (bExpandWords)     for (    String w : res.split(""String_Node_Str""))     r.add(new XValue(w));
 else     r.add(new XValue(res));
    return r;
  }
  Result result=new Result();
  char cQuote=0;
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\'' || c == '""') {
      if (cQuote == c)       cQuote=0;
 else       if (cQuote == 0)       cQuote=c;
    }
    if (c == '\\') {
      if (i < arg.length()) {
        char nextc=arg.charAt(++i);
        if (cQuote == 0) {
          if (nextc == '""' || nextc == '\'')           result.append(c);
          result.append(nextc);
        }
        if (cQuote == '""') {
          result.append(c);
          if (nextc != '\\')           result.append(nextc);
        }
        if (cQuote == '\'') {
          result.append(c);
          result.append(nextc);
        }
      }
      continue;
    }
    if (cQuote != '\'' && c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else       if (arg.charAt(i) == '(') {
        sbv.append('(');
        i=readToMatching(arg,i,sbv,')');
        sbv.append(')');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var,cQuote != '\0');
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  if (!bExpandWild)   return result.getResult();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    List<XValue> r=expandWild(v);
    if (r != null)     result2.addAll(r);
  }
  return result2;
}","List<XValue> expand(String arg,boolean bExpandWild,boolean bExpandWords) throws IOException, CoreException {
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    String res=expandSubproc(arg.substring(2,arg.length() - 1));
    if (bExpandWords)     for (    String w : res.split(""String_Node_Str""))     r.add(new XValue(w));
 else     r.add(new XValue(res));
    return r;
  }
  Result result=new Result();
  char cQuote=0;
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\'' || c == '""') {
      if (cQuote == c)       cQuote=0;
 else       if (cQuote == 0)       cQuote=c;
    }
    if (c == '\\') {
      if (i < arg.length()) {
        char nextc=arg.charAt(++i);
        if (cQuote == 0) {
          if (nextc == '""' || nextc == '\'')           result.append(c);
          result.append(nextc);
        }
        if (cQuote == '""') {
          result.append(c);
          if (nextc != '\\')           result.append(nextc);
        }
        if (cQuote == '\'') {
          result.append(c);
          result.append(nextc);
        }
      }
      continue;
    }
    if (cQuote != '\'' && c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else       if (arg.charAt(i) == '(') {
        sbv.append('(');
        i=readToMatching(arg,i,sbv,')');
        sbv.append(')');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || c == '!' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var,cQuote != '\0');
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    if (!bExpandWild)     result2.add(removeQuotes(v));
 else {
      List<XValue> r=expandWild(v);
      if (r != null)       result2.addAll(r);
    }
  }
  return result2;
}"
42365,"private XdmValue parseXExpr(String arg){
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  NameValueMap<String> ns=mShell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Collection<XVariable> vars=mShell.getEnv().getVars().values();
  for (  XVariable value : vars) {
    if (value.getFlags().contains(XVarFlag.EXPORT))     sb.append(""String_Node_Str"").append(value.getName()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(arg);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    XVariable value : vars) {
      if (value.getFlags().contains(XVarFlag.EXPORT))       eval.setExternalVariable(new QName(value.getName()),value.getValue().asXdmValue());
    }
    eval.setExternalVariable(new QName(""String_Node_Str""),new XValue(mShell.getArgs()).asXdmValue());
    return eval.evaluate();
  }
 catch (  SaxonApiException e) {
    mLogger.warn(""String_Node_Str"" + arg,e);
    mShell.printErr(""String_Node_Str"");
  }
  return null;
}","private XdmValue parseXExpr(String arg){
  Processor processor=Shell.getProcessor();
  XQueryCompiler compiler=processor.newXQueryCompiler();
  NameValueMap<String> ns=mShell.getEnv().getNamespaces();
  if (ns != null) {
    for (    String prefix : ns.keySet()) {
      String uri=ns.get(prefix);
      compiler.declareNamespace(prefix,uri);
    }
  }
  XQueryExecutable expr=null;
  StringBuffer sb=new StringBuffer();
  Collection<XVariable> vars=mShell.getEnv().getVars().values();
  for (  XVariable value : vars) {
    if (value.getFlags().contains(XVarFlag.XEXPR))     sb.append(""String_Node_Str"").append(value.getName()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(arg);
  try {
    expr=compiler.compile(sb.toString());
    XQueryEvaluator eval=expr.load();
    for (    XVariable value : vars) {
      if (value.getFlags().contains(XVarFlag.XEXPR))       eval.setExternalVariable(new QName(value.getName()),value.getValue().asXdmValue());
    }
    eval.setExternalVariable(new QName(""String_Node_Str""),new XValue(mShell.getArgs()).asXdmValue());
    return eval.evaluate();
  }
 catch (  SaxonApiException e) {
    mLogger.warn(""String_Node_Str"" + arg,e);
    mShell.printErr(""String_Node_Str"");
  }
  return null;
}"
42366,"private void setGlobalVars(){
  Map<String,String> env=System.getenv();
  for (  Map.Entry<String,String> entry : env.entrySet()) {
    String name=entry.getKey();
    if (name.equals(""String_Node_Str""))     continue;
    getEnv().setVar(new XVariable(name,new XValue(entry.getValue()),EnumSet.of(XVarFlag.EXPORT)));
  }
  String path=Util.toJavaPath(System.getenv(""String_Node_Str""));
  getEnv().setVar(new XVariable(""String_Node_Str"",new XValue(path)));
  getEnv().setVar(new XDynamicVariable(""String_Node_Str"",EnumSet.of(XVarFlag.READONLY,XVarFlag.XEXPR)){
    public XValue getValue(){
      return new XValue(Util.toJavaPath(getEnv().getCurdir().getAbsolutePath()));
    }
  }
);
  getEnv().setVar(""String_Node_Str"",Util.toJavaPath(System.getProperty(""String_Node_Str"")));
}","private void setGlobalVars(){
  Map<String,String> env=System.getenv();
  for (  Map.Entry<String,String> entry : env.entrySet()) {
    String name=entry.getKey();
    if (name.equals(""String_Node_Str""))     continue;
    if (Util.isBlank(name))     continue;
    if (!name.matches(""String_Node_Str""))     continue;
    getEnv().setVar(new XVariable(name,new XValue(entry.getValue()),EnumSet.of(XVarFlag.EXPORT)));
  }
  String path=Util.toJavaPath(System.getenv(""String_Node_Str""));
  getEnv().setVar(new XVariable(""String_Node_Str"",new XValue(path)));
  getEnv().setVar(new XDynamicVariable(""String_Node_Str"",EnumSet.of(XVarFlag.READONLY,XVarFlag.XEXPR)){
    public XValue getValue(){
      return new XValue(Util.toJavaPath(getEnv().getCurdir().getAbsolutePath()));
    }
  }
);
  getEnv().setVar(""String_Node_Str"",Util.toJavaPath(System.getProperty(""String_Node_Str"")));
}"
42367,"public OutputStream getStdout(){
  if (mStdout == null)   mStdout=new SynchronizedOutputStream(System.out);
  return mStdout;
}","/** 
 * @return
 * @see org.xmlsh.core.XIOEnvironment#getStdout()
 */
public OutputStream getStdout(){
  return mIO.getStdout();
}"
42368,"public boolean isStdinRedirected(){
  return mStdinRedirected;
}","public boolean isStdinRedirected(){
  return mIO.isStdinRedirected();
}"
42369,"/** 
 * @param stdin the stdin to set
 * @throws IOException 
 */
public void setStdin(InputStream stdin) throws IOException {
  mStdinRedirected=true;
  if (mStdin != null)   mStdin.close();
  mStdin=new SynchronizedInputStream(stdin);
}","/** 
 * @param stdin
 * @throws IOException
 * @see org.xmlsh.core.XIOEnvironment#setStdin(java.io.InputStream)
 */
public void setStdin(InputStream stdin) throws IOException {
  mIO.setStdin(stdin);
}"
42370,"/** 
 * @param stdout the stdout to set
 * @throws IOException 
 */
public void setStdout(OutputStream stdout) throws IOException {
  if (mStdout != null)   mStdout.close();
  mStdout=new SynchronizedOutputStream(stdout);
}","/** 
 * @param stdout
 * @throws IOException
 * @see org.xmlsh.core.XIOEnvironment#setStdout(java.io.OutputStream)
 */
public void setStdout(OutputStream stdout) throws IOException {
  mIO.setStdout(stdout);
}"
42371,"public XEnvironment clone(Shell shell){
  XEnvironment that=new XEnvironment(shell);
  that.mVars.putAll(this.mVars);
  that.mStderr=this.mStderr;
  if (that.mStderr != null)   that.mStderr.addRef();
  that.mStdin=this.mStdin;
  if (that.mStdin != null) {
    that.mStdin.addRef();
    that.mStdinRedirected=this.mStdinRedirected;
  }
  that.mStdout=this.mStdout;
  if (that.mStdout != null)   that.mStdout.addRef();
  return that;
}","public XEnvironment clone(Shell shell){
  XEnvironment that=new XEnvironment(shell);
  that.mVars.putAll(this.mVars);
  that.mIO=mIO.clone();
  return that;
}"
42372,"public InputStream getStdin(){
  if (mStdin == null)   mStdin=new SynchronizedInputStream(System.in);
  return mStdin;
}","/** 
 * @return
 * @see org.xmlsh.core.XIOEnvironment#getStdin()
 */
public InputStream getStdin(){
  return mIO.getStdin();
}"
42373,"public void close(){
  try {
    if (this.mStdout != null)     this.mStdout.close();
    if (this.mStderr != null)     this.mStderr.close();
    if (this.mStdin != null)     this.mStdin.close();
    this.mStderr=null;
    this.mStdout=null;
    this.mStdin=null;
  }
 catch (  IOException e) {
    mLogger.error(""String_Node_Str"",e);
  }
}","public void close(){
  mIO.close();
}"
42374,"public OutputStream getStderr(){
  if (mStderr == null)   mStderr=new SynchronizedOutputStream(System.err);
  return mStderr;
}","/** 
 * @return
 * @see org.xmlsh.core.XIOEnvironment#getStderr()
 */
public OutputStream getStderr(){
  return mIO.getStderr();
}"
42375,"/** 
 * @param stderr the stderr to set
 * @throws IOException 
 */
public void setStderr(OutputStream stderr) throws IOException {
  if (mStderr != null)   mStderr.close();
  mStderr=new SynchronizedOutputStream(stderr);
}","/** 
 * @param stderr
 * @throws IOException
 * @see org.xmlsh.core.XIOEnvironment#setStderr(java.io.OutputStream)
 */
public void setStderr(OutputStream stderr) throws IOException {
  mIO.setStderr(stderr);
}"
42376,"@Override public int exec(Shell shell) throws Exception {
  applyRedirect(shell);
  return shell.exec(mCommand);
}","@Override public int exec(Shell shell) throws Exception {
  XIOEnvironment io=shell.getEnv().saveIO();
  try {
    applyRedirect(shell);
    return shell.exec(mCommand);
  }
  finally {
    shell.getEnv().restoreIO(io);
  }
}"
42377,"@Override public int exec(Shell shell) throws Exception {
  XValue wordv=shell.expandString(mWord);
  String word=wordv.toString();
  for (  CaseItem item : mList) {
    if (item.matches(word)) {
      return item.exec(shell);
    }
  }
  return 1;
}","@Override public int exec(Shell shell) throws Exception {
  XIOEnvironment io=shell.getEnv().saveIO();
  try {
    applyRedirect(shell);
    XValue wordv=shell.expandString(mWord);
    String word=wordv.toString();
    for (    CaseItem item : mList) {
      if (item.matches(word)) {
        return item.exec(shell);
      }
    }
    return 1;
  }
  finally {
    shell.getEnv().restoreIO(io);
  }
}"
42378,"public int exec(Shell shell) throws Exception {
  if (!mName.matches(""String_Node_Str"")) {
    shell.printErr(""String_Node_Str"" + mName);
    return 1;
  }
  shell.pushEnv();
  try {
    applyRedirect(shell);
    if (mWords == null) {
      for (      XValue inword : shell.getArgs()) {
        shell.getEnv().setVar(new XVariable(mName,inword));
        shell.exec(mCommand);
      }
    }
 else     for (    String in : mWords) {
      List<XValue> inList=shell.expand(in,true);
      for (      XValue inword : inList) {
        if (!shell.keepRunning())         break;
        shell.getEnv().setVar(new XVariable(mName,inword));
        shell.exec(mCommand);
      }
      if (!shell.keepRunning())       break;
    }
  }
  finally {
    shell.popEnv();
  }
  return 0;
}","public int exec(Shell shell) throws Exception {
  if (!mName.matches(""String_Node_Str"")) {
    shell.printErr(""String_Node_Str"" + mName);
    return 1;
  }
  XIOEnvironment io=shell.getEnv().saveIO();
  try {
    applyRedirect(shell);
    if (mWords == null) {
      for (      XValue inword : shell.getArgs()) {
        shell.getEnv().setVar(new XVariable(mName,inword));
        shell.exec(mCommand);
      }
    }
 else     for (    String in : mWords) {
      List<XValue> inList=shell.expand(in,true);
      for (      XValue inword : inList) {
        if (!shell.keepRunning())         break;
        shell.getEnv().setVar(new XVariable(mName,inword));
        shell.exec(mCommand);
      }
      if (!shell.keepRunning())       break;
    }
  }
  finally {
    shell.getEnv().restoreIO(io);
  }
  return 0;
}"
42379,"public int exec(Shell shell) throws Exception {
  int ret=shell.exec(mIfPart);
  if (ret == 0 && shell.keepRunning())   ret=shell.exec(mThenPart);
 else   if (mElsePart != null && shell.keepRunning())   ret=shell.exec(mElsePart);
  return ret;
}","public int exec(Shell shell) throws Exception {
  XIOEnvironment io=shell.getEnv().saveIO();
  try {
    applyRedirect(shell);
    int ret=shell.exec(mIfPart);
    if (ret == 0 && shell.keepRunning())     ret=shell.exec(mThenPart);
 else     if (mElsePart != null && shell.keepRunning())     ret=shell.exec(mElsePart);
    return ret;
  }
  finally {
    shell.getEnv().restoreIO(io);
  }
}"
42380,"public int exec(Shell shell) throws Exception {
  shell.pushEnv();
  try {
    while (!shell.toBool(shell.exec(mUntil)) && shell.keepRunning()) {
      shell.exec(mDo);
    }
  }
  finally {
    shell.popEnv();
  }
  return 0;
}","public int exec(Shell shell) throws Exception {
  XIOEnvironment io=shell.getEnv().saveIO();
  try {
    applyRedirect(shell);
    while (!shell.toBool(shell.exec(mUntil)) && shell.keepRunning()) {
      shell.exec(mDo);
    }
  }
  finally {
    shell.getEnv().restoreIO(io);
  }
  return 0;
}"
42381,"/** 
 * @param stdin the stdin to set
 */
public void setStdin(InputStream stdin){
  mStdinRedirected=true;
  mStdin=new SynchronizedInputStream(stdin);
}","/** 
 * @param stdin the stdin to set
 * @throws IOException 
 */
public void setStdin(InputStream stdin) throws IOException {
  mStdinRedirected=true;
  if (mStdin != null)   mStdin.close();
  mStdin=new SynchronizedInputStream(stdin);
}"
42382,"/** 
 * @param stdout the stdout to set
 */
public void setStdout(OutputStream stdout){
  mStdout=new SynchronizedOutputStream(stdout);
}","/** 
 * @param stdout the stdout to set
 * @throws IOException 
 */
public void setStdout(OutputStream stdout) throws IOException {
  if (mStdout != null)   mStdout.close();
  mStdout=new SynchronizedOutputStream(stdout);
}"
42383,"/** 
 * @param stderr the stderr to set
 */
public void setStderr(OutputStream stderr){
  mStderr=new SynchronizedOutputStream(stderr);
}","/** 
 * @param stderr the stderr to set
 * @throws IOException 
 */
public void setStderr(OutputStream stderr) throws IOException {
  if (mStderr != null)   mStderr.close();
  mStderr=new SynchronizedOutputStream(stderr);
}"
42384,"public void exec(Shell shell){
  for (  Assign ass : mList) {
    XValue value=shell.expandString(ass.mValue);
    shell.getEnv().setVar(new XVariable(ass.mVariable,value));
  }
}","public void exec(Shell shell) throws IOException {
  for (  Assign ass : mList) {
    XValue value=shell.expandString(ass.mValue);
    shell.getEnv().setVar(new XVariable(ass.mVariable,value));
  }
}"
42385,"public List<XValue> toCmdLine(Shell shell,String command){
  ArrayList<XValue> args=new ArrayList<XValue>();
  args.addAll(shell.expand(command,false));
  for (  String arg : mArgs)   args.addAll(shell.expand(arg,false));
  return args;
}","public List<XValue> toCmdLine(Shell shell,String command) throws IOException {
  ArrayList<XValue> args=new ArrayList<XValue>();
  args.addAll(shell.expand(command,false));
  for (  String arg : mArgs)   args.addAll(shell.expand(arg,false));
  return args;
}"
42386,"public void exec(Shell shell) throws UnsupportedEncodingException {
  shell.getEnv().setStdin(new ByteArrayInputStream(mHere.getBytes(""String_Node_Str"")));
}","public void exec(Shell shell) throws IOException {
  shell.getEnv().setStdin(new ByteArrayInputStream(mHere.getBytes(""String_Node_Str"")));
}"
42387,"private String runCmd(String cmd){
  InputStream script=new StringBufferInputStream(cmd);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  Shell shell=mShell.clone();
  try {
    shell.getEnv().setStdout(out);
    shell.getEnv().setStdin(new NullInputStream());
    shell.runScript(script);
    return out.toString();
  }
 catch (  ParseException e) {
    shell.printErr(e.getMessage());
    return ""String_Node_Str"";
  }
 finally {
    shell.close();
    try {
      script.close();
    }
 catch (    IOException e) {
      mLogger.error(""String_Node_Str"",e);
    }
  }
}","private String runCmd(String cmd) throws IOException {
  InputStream script=new StringBufferInputStream(cmd);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  Shell shell=mShell.clone();
  try {
    shell.getEnv().setStdout(out);
    shell.getEnv().setStdin(new NullInputStream());
    shell.runScript(script);
    return out.toString();
  }
 catch (  ParseException e) {
    shell.printErr(e.getMessage());
    return ""String_Node_Str"";
  }
 finally {
    shell.close();
    try {
      script.close();
    }
 catch (    IOException e) {
      mLogger.error(""String_Node_Str"",e);
    }
  }
}"
42388,"List<XValue> expand(String arg){
  if (arg.startsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(arg.substring(1,arg.length() - 1)));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    for (    String w : runCmd(arg.substring(2,arg.length() - 1)).split(""String_Node_Str""))     r.add(new XValue(w));
    return r;
  }
  boolean bQuoted=false;
  if (arg.startsWith(""String_Node_Str"")) {
    bQuoted=true;
    arg=arg.substring(1,arg.length() - 1);
  }
  Result result=new Result(bQuoted);
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\\') {
      if (i < arg.length())       result.append(arg.charAt(++i));
      continue;
    }
    if (c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var);
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  if (bQuoted)   return result.getResult();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    List<XValue> r=expandWild(v);
    if (r != null)     result2.addAll(r);
  }
  return result2;
}","List<XValue> expand(String arg) throws IOException {
  if (arg.startsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(arg.substring(1,arg.length() - 1)));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXExpr(arg.substring(2,arg.length() - 2))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    r.add(new XValue(parseXCmd(arg.substring(3,arg.length() - 1))));
    return r;
  }
  if (arg.startsWith(""String_Node_Str"") && arg.endsWith(""String_Node_Str"")) {
    List<XValue> r=new ArrayList<XValue>(1);
    for (    String w : runCmd(arg.substring(2,arg.length() - 1)).split(""String_Node_Str""))     r.add(new XValue(w));
    return r;
  }
  boolean bQuoted=false;
  if (arg.startsWith(""String_Node_Str"")) {
    bQuoted=true;
    arg=arg.substring(1,arg.length() - 1);
  }
  Result result=new Result(bQuoted);
  char c;
  int i;
  for (i=0; i < arg.length(); i++) {
    c=arg.charAt(i);
    if (c == '\\') {
      if (i < arg.length())       result.append(arg.charAt(++i));
      continue;
    }
    if (c == '$') {
      if (++i == arg.length())       break;
      StringBuffer sbv=new StringBuffer();
      if (arg.charAt(i) == '{') {
        i=readToMatching(arg,i,sbv,'}');
      }
 else {
        c=arg.charAt(i);
        if (c == '?' || c == '@' || c == '$' || c == '#' || c == '*' || Character.isDigit(c)) {
          boolean bKeepGoing;
          do {
            bKeepGoing=false;
            sbv.append(c);
            if (Character.isDigit(c)) {
              if (i < arg.length() - 1 && Character.isDigit(c=arg.charAt(i + 1))) {
                i++;
                bKeepGoing=true;
              }
            }
          }
 while (bKeepGoing);
        }
 else {
          for (; i < arg.length(); i++) {
            c=arg.charAt(i);
            if (Util.isIdentifier(c))             sbv.append(c);
 else {
              i--;
              break;
            }
          }
        }
      }
      String var=sbv.toString();
      if (!Util.isBlank(var)) {
        XValue value=null;
        if (var.equals(""String_Node_Str"")) {
          result.add(mArgs);
        }
 else         value=extractSingle(var);
        if (value != null)         result.append(value);
      }
    }
 else     result.append(c);
  }
  result.flush();
  if (bQuoted)   return result.getResult();
  ArrayList<XValue> result2=new ArrayList<XValue>();
  for (  XValue v : result.getResult()) {
    List<XValue> r=expandWild(v);
    if (r != null)     result2.addAll(r);
  }
  return result2;
}"
42389,"public XValue expandString(String value){
  List<XValue> ret=expand(value,false);
  if (ret.size() == 0)   return new XValue();
 else   if (ret.size() == 1)   return ret.get(0);
  StringBuffer sb=new StringBuffer();
  for (  XValue v : ret) {
    if (sb.length() > 0)     sb.append(' ');
    sb.append(v.toString());
  }
  return new XValue(sb.toString());
}","public XValue expandString(String value) throws IOException {
  List<XValue> ret=expand(value,false);
  if (ret.size() == 0)   return new XValue();
 else   if (ret.size() == 1)   return ret.get(0);
  StringBuffer sb=new StringBuffer();
  for (  XValue v : ret) {
    if (sb.length() > 0)     sb.append(' ');
    sb.append(v.toString());
  }
  return new XValue(sb.toString());
}"
42390,"public List<XValue> expand(String s,boolean bExpandSequences){
  Expander e=new Expander(this);
  List<XValue> result=e.expand(s);
  if (bExpandSequences)   result=Util.expandSequences(result);
  return result;
}","public List<XValue> expand(String s,boolean bExpandSequences) throws IOException {
  Expander e=new Expander(this);
  List<XValue> result=e.expand(s);
  if (bExpandSequences)   result=Util.expandSequences(result);
  return result;
}"
42391,"private File getFile(String str) throws Error {
  try {
    return mShell.getFile(str);
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"" + str);
  }
}","private File getFile(String str) throws Error {
  try {
    return mShell.getFile(str).getCanonicalFile();
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"" + str);
  }
}"
42392,"public int run(Shell shell,String cmd,XValue[] args) throws Exception {
  String sdir=null;
  if (args.length < 1) {
    String home=shell.getEnv().getVar(""String_Node_Str"").toString();
    if (home == null) {
      shell.printErr(""String_Node_Str"");
      return 1;
    }
    sdir=home;
  }
 else   sdir=args[0].toString();
  File newDir=shell.getFile(sdir).getCanonicalFile();
  if (newDir.exists() && newDir.isDirectory() && newDir.canRead()) {
    shell.setCurdir(newDir);
    return 0;
  }
 else {
    shell.printErr(""String_Node_Str"" + sdir);
    return 1;
  }
}","public int run(Shell shell,String cmd,XValue[] args) throws Exception {
  String sdir=null;
  if (args.length < 1) {
    String home=shell.getEnv().getVar(""String_Node_Str"").toString();
    if (home == null) {
      shell.printErr(""String_Node_Str"");
      return 1;
    }
    sdir=home;
  }
 else   sdir=args[0].toString();
  File newDir=shell.getFile(sdir);
  if (newDir.exists() && newDir.isDirectory() && newDir.canRead()) {
    shell.setCurdir(newDir);
    return 0;
  }
 else {
    shell.printErr(""String_Node_Str"" + sdir);
    return 1;
  }
}"
42393,"public File getExplicitFile(String name,boolean mustExist){
  File file=null;
  if (name.startsWith(""String_Node_Str""))   file=new File(name);
 else   file=new File(getCurdir(),name);
  if (file == null)   return null;
  if (mustExist && !file.exists())   return null;
  return file;
}","public File getExplicitFile(String name,boolean mustExist){
  File file=new File(name).getAbsoluteFile();
  if (mustExist && !file.exists())   return null;
  return file;
}"
42394,"public static <T extends Event>InputMap<T> when(BooleanSupplier condition,InputMap<T> im){
  return new InputMap<T>(){
    @Override public void forEachEventType(    HandlerConsumer<? super T> f){
      HandlerConsumer<T> g=new HandlerConsumer<T>(){
        @Override public <F extends T>void accept(        EventType<? extends F> t,        InputHandler<? super F> h){
          f.accept(t,evt -> condition.getAsBoolean() ? h.process(evt) : Result.PROCEED);
        }
      }
;
    }
  }
;
}","public static <T extends Event>InputMap<T> when(BooleanSupplier condition,InputMap<T> im){
  return new InputMap<T>(){
    @Override public void forEachEventType(    HandlerConsumer<? super T> f){
      HandlerConsumer<T> g=new HandlerConsumer<T>(){
        @Override public <F extends T>void accept(        EventType<? extends F> t,        InputHandler<? super F> h){
          f.accept(t,evt -> condition.getAsBoolean() ? h.process(evt) : Result.PROCEED);
        }
      }
;
      im.forEachEventType(g);
    }
  }
;
}"
42395,"protected ThroughputBenchmark(final int timeInMinute,final int concurrency,final int SQLType){
  super();
  this.timeInMillis=timeInMinute * 60 * 1000L;
  this.concurrency=concurrency;
  this.SQLType=SQLType;
  this.completeQueryCount=0L;
  this.totalCostTime=0D;
}","protected ThroughputBenchmark(final int timeInMinute,final int concurrency,final int SQLType){
  super();
  this.timeInMillis=timeInMinute * 60 * 1000L;
  this.concurrency=concurrency;
  this.SQLType=SQLType;
  this.completeQueryCount=0L;
}"
42396,"@Override public final void executeBenchmark() throws SQLException {
  final Thread[] executors=new Thread[this.concurrency];
  for (int index=0; index < this.concurrency; index++) {
    executors[index]=new Thread(this.getExecutableTask());
  }
  this.aliveExecutorCount=this.concurrency;
  for (int index=0; index < this.concurrency; index++) {
    executors[index].start();
  }
  for (; ; ) {
    if (this.aliveExecutorCount == 0) {
      break;
    }
    try {
      Thread.sleep(1000L);
    }
 catch (    InterruptedException e) {
    }
  }
  LOG.info(this.getClass().getSimpleName() + ""String_Node_Str"" + this.completeQueryCount / (this.timeInMillis / 1000.0D));
  LOG.info(this.getClass().getSimpleName() + ""String_Node_Str"" + this.totalCostTime / this.completeQueryCount);
}","@Override public final void executeBenchmark() throws SQLException {
  final Thread[] executors=new Thread[this.concurrency];
  for (int index=0; index < this.concurrency; index++) {
    executors[index]=new Thread(this.getExecutableTask());
  }
  this.aliveExecutorCount=this.concurrency;
  for (int index=0; index < this.concurrency; index++) {
    executors[index].start();
  }
  for (; ; ) {
    if (this.aliveExecutorCount == 0) {
      break;
    }
    try {
      Thread.sleep(1000L);
    }
 catch (    InterruptedException e) {
    }
  }
  LOG.info(this.getClass().getSimpleName() + ""String_Node_Str"" + this.completeQueryCount / (this.timeInMillis / 1000.0D));
}"
42397,"public static ThroughputBenchmark newInstance(final String URL,final int concurrency,final int timeInMinute,final int SQLType,final boolean isElasticsearchPrimitive) throws Exception {
  if (!isElasticsearchPrimitive) {
    return new CrabsThroughputBenchmark(URL,concurrency,timeInMinute,SQLType);
  }
  final Protocol protocol=Protocol.parseURL(URL);
  final Properties properties=protocol.getProperties();
  properties.put(PROPERTY_ENTRY$BENCHMARK_ENABLED.identifier,true);
  return new ElasticsearchThroughputBenchmark(protocol.getServerAddresses(),protocol.getDatabaseName(),""String_Node_Str"",properties,timeInMinute,concurrency,SQLType);
}","public static ThroughputBenchmark newInstance(final String URL,final int concurrency,final int timeInMinute,final int SQLType,final boolean isElasticsearchPrimitive) throws Exception {
  if (!isElasticsearchPrimitive) {
    return new CrabsThroughputBenchmark(URL,concurrency,timeInMinute,SQLType);
  }
  final Protocol protocol=Protocol.parseURL(URL);
  final Properties properties=protocol.getProperties();
  properties.put(PROPERTY_ENTRY$BENCHMARK_ENABLED.identifier,true);
  return new ElasticsearchThroughputBenchmark(protocol.getServerAddresses(),protocol.getDatabaseName(),""String_Node_Str"",properties,timeInMinute,concurrency,SQLType,Boolean.parseBoolean(properties.getProperty(PROPERTY_ENTRY$ES_CACHE_ENABLED.identifier,PROPERTY_ENTRY$ES_CACHE_ENABLED.defaultValue)));
}"
42398,"protected ElasticsearchThroughputBenchmark(final ElasticsearchAddress[] elasticsearchAddresses,final String indexIdentifier,final String typeIdentifier,final Properties properties,final int timeInMinute,final int concurrency,final int SQLType){
  super(timeInMinute,concurrency,SQLType);
  ImmutableSettings.Builder builder=settingsBuilder();
  if (properties != null && !properties.isEmpty()) {
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      builder.put(entry.getKey().toString(),entry.getValue());
    }
  }
  final TransportClient client=new TransportClient(builder.build());
  for (  ElasticsearchAddress address : elasticsearchAddresses) {
    client.addTransportAddress(new InetSocketTransportAddress(address.getHost(),address.getPort()));
  }
  this.elasticsearchClient=client;
  this.indexIdentifier=indexIdentifier;
  this.typeIdentifier=typeIdentifier;
}","protected ElasticsearchThroughputBenchmark(final ElasticsearchAddress[] elasticsearchAddresses,final String indexIdentifier,final String typeIdentifier,final Properties properties,final int timeInMinute,final int concurrency,final int SQLType,final boolean elasticsearchCacheEnabled){
  super(timeInMinute,concurrency,SQLType);
  ImmutableSettings.Builder builder=settingsBuilder();
  if (properties != null && !properties.isEmpty()) {
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      builder.put(entry.getKey().toString(),entry.getValue());
    }
  }
  final TransportClient client=new TransportClient(builder.build());
  for (  ElasticsearchAddress address : elasticsearchAddresses) {
    client.addTransportAddress(new InetSocketTransportAddress(address.getHost(),address.getPort()));
  }
  this.elasticsearchClient=client;
  this.indexIdentifier=indexIdentifier;
  this.typeIdentifier=typeIdentifier;
  this.elasticsearchCacheEnabled=elasticsearchCacheEnabled;
}"
42399,"private static Expression analyzeLikeExpression(final GrammarAnalyzeContext context,final Expression firstExpression) throws SQLException {
  return new LikeExpression(firstExpression,analyzeExpectedExpression(context,Byte.MAX_VALUE));
}","private static Expression analyzeLikeExpression(final GrammarAnalyzeContext context,final Expression firstExpression) throws SQLException {
  return new LikeExpression(firstExpression,analyzeExpectedExpression(context,(byte)3));
}"
42400,"private static Expression analyzeInExpression(final GrammarAnalyzeContext context,final Expression firstExpression) throws SQLException {
  expectSymbol(context,'(');
  context.toNextToken();
  final ArrayList<Expression> expressionList=context.getExpressionList();
  final int startListIndex=expressionList.size();
  expressionList.add(firstExpression);
  boolean expectExpression=false;
  for (; ; ) {
    final Expression expression=expectExpression ? analyzeExpectedExpression(context,Byte.MAX_VALUE) : analyzeExpression(context,Byte.MAX_VALUE);
    if (expression != null) {
      expressionList.add(expression);
      if (context.currentTokenType() == TokenType.SYMBOL && context.currentTokenToSymbol() == ',') {
        context.toNextToken();
        expectExpression=true;
        continue;
      }
    }
    break;
  }
  expectSymbol(context,')');
  context.toNextToken();
  return new InExpression(expressionsListToArray(expressionList,startListIndex));
}","private static Expression analyzeInExpression(final GrammarAnalyzeContext context,final Expression firstExpression) throws SQLException {
  expectSymbol(context,'(');
  context.toNextToken();
  final ArrayList<Expression> expressionList=context.getExpressionList();
  final int startListIndex=expressionList.size();
  expressionList.add(firstExpression);
  boolean expectExpression=false;
  for (; ; ) {
    final Expression expression=expectExpression ? analyzeExpectedExpression(context,(byte)3) : analyzeExpression(context,(byte)3);
    if (expression != null) {
      expressionList.add(expression);
      if (context.currentTokenType() == TokenType.SYMBOL && context.currentTokenToSymbol() == ',') {
        context.toNextToken();
        expectExpression=true;
        continue;
      }
    }
    break;
  }
  expectSymbol(context,')');
  context.toNextToken();
  return new InExpression(expressionsListToArray(expressionList,startListIndex));
}"
42401,"private AbstractAggregationBuilder agg(final Aggregation aggregation,final Integer index) throws CrabsException {
  final String name=index.toString();
  if (aggregation instanceof CountFunction) {
    final CountFunction count=CountFunction.class.cast(aggregation);
    final Reference operand=Reference.class.cast(count.getOperandExpression(0));
    if (operand.columnIdentifier.equals(Reference.ALL_COLUMN_IDENTIFIER)) {
      return AggregationBuilders.count(name).field(this.context.typeDefinition.getFieldDefinition(0).getIdentifier().toString());
    }
    return AggregationBuilders.count(name).field(operand.columnIdentifier.toString());
  }
 else   if (aggregation instanceof SummaryFunction) {
    final SummaryFunction summary=SummaryFunction.class.cast(aggregation);
    return AggregationBuilders.sum(name).field(Reference.class.cast(summary.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof AverageFunction) {
    final AverageFunction average=AverageFunction.class.cast(aggregation);
    return AggregationBuilders.avg(name).field(Reference.class.cast(average.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof MaxinumFunction) {
    final MaxinumFunction maxinum=MaxinumFunction.class.cast(aggregation);
    return AggregationBuilders.max(name).field(Reference.class.cast(maxinum.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof MininumFunction) {
    final MininumFunction mininum=MininumFunction.class.cast(aggregation);
    return AggregationBuilders.min(name).field(Reference.class.cast(mininum.getOperandExpression(0)).columnIdentifier.toString());
  }
  throw new CrabsException(""String_Node_Str"" + aggregation + ""String_Node_Str"");
}","private AbstractAggregationBuilder agg(final Aggregation aggregation,final Integer index) throws CrabsException {
  final String name=index.toString();
  if (aggregation instanceof CountFunction) {
    final CountFunction count=CountFunction.class.cast(aggregation);
    final Reference operand=Reference.class.cast(count.getOperandExpression(0));
    if (operand.columnIdentifier.equals(Reference.ALL_COLUMN_IDENTIFIER)) {
      return AggregationBuilders.count(name).field(this.context.typeDefinition.getPrimaryFieldDefinition().getIdentifier().toString());
    }
    return AggregationBuilders.count(name).field(operand.columnIdentifier.toString());
  }
 else   if (aggregation instanceof SummaryFunction) {
    final SummaryFunction summary=SummaryFunction.class.cast(aggregation);
    return AggregationBuilders.sum(name).field(Reference.class.cast(summary.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof AverageFunction) {
    final AverageFunction average=AverageFunction.class.cast(aggregation);
    return AggregationBuilders.avg(name).field(Reference.class.cast(average.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof MaxinumFunction) {
    final MaxinumFunction maxinum=MaxinumFunction.class.cast(aggregation);
    return AggregationBuilders.max(name).field(Reference.class.cast(maxinum.getOperandExpression(0)).columnIdentifier.toString());
  }
 else   if (aggregation instanceof MininumFunction) {
    final MininumFunction mininum=MininumFunction.class.cast(aggregation);
    return AggregationBuilders.min(name).field(Reference.class.cast(mininum.getOperandExpression(0)).columnIdentifier.toString());
  }
  throw new CrabsException(""String_Node_Str"" + aggregation + ""String_Node_Str"");
}"
42402,"public void beginQueue(){
  if (this.status == Stage.WORKING)   return;
  QueueEntry q;
  if ((q=this.popNextItem()) != null) {
    Logging.log(""String_Node_Str"" + q.getDownloadTempFile().getAbsolutePath());
    q.start();
    this.status=Stage.WORKING;
  }
}","public void beginQueue(){
  if (this.status == Stage.WORKING)   return;
  QueueEntry q;
  if ((q=this.popNextItem()) != null) {
    if (q.getDownloadTempFile() != null) {
      Logging.log(""String_Node_Str"" + q.getDownloadTempFile().getAbsolutePath());
    }
    q.start();
    this.status=Stage.WORKING;
  }
}"
42403,"public BufferedImage readArtwork(){
  int s;
  try {
    s=tag.getArtworkList().size();
  }
 catch (  NullPointerException e) {
    s=0;
  }
  if (s == 0) {
    return null;
  }
  Artwork a=tag.getFirstArtwork();
  byte[] data=a.getBinaryData();
  BufferedImage img;
  try {
    img=ImageIO.read(new ByteArrayInputStream(data));
    return img;
  }
 catch (  IOException e) {
    Logging.log(""String_Node_Str"",e);
    return null;
  }
}","public BufferedImage readArtwork(){
  int s;
  try {
    s=this.tag.getArtworkList().size();
  }
 catch (  final NullPointerException e) {
    s=0;
  }
  if (s == 0)   return null;
  final Artwork a=this.tag.getFirstArtwork();
  final byte[] data=a.getBinaryData();
  BufferedImage img;
  try {
    img=ImageIO.read(new ByteArrayInputStream(data));
    return img;
  }
 catch (  final IOException e) {
    Logging.log(""String_Node_Str"",e);
    return null;
  }
}"
42404,"public String readField(FieldKey f){
  try {
    String s=tag.getFirst(f);
    return s == null ? ""String_Node_Str"" : s;
  }
 catch (  KeyNotFoundException e) {
    return ""String_Node_Str"";
  }
}","public String readField(final FieldKey f){
  try {
    final String s=this.tag.getFirst(f);
    return s == null ? ""String_Node_Str"" : s;
  }
 catch (  final KeyNotFoundException e) {
    return ""String_Node_Str"";
  }
}"
42405,"public void writeAllFields(Map<FieldKey,String> fields){
  try {
    for (    Entry<FieldKey,String> e : fields.entrySet()) {
      tag.setField(e.getKey(),e.getValue().replace(""String_Node_Str"",""String_Node_Str"").trim());
    }
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"",e);
  }
}","public void writeAllFields(final Map<FieldKey,String> fields){
  try {
    for (    final Entry<FieldKey,String> e : fields.entrySet()) {
      this.tag.setField(e.getKey(),e.getValue().replace(""String_Node_Str"",""String_Node_Str"").trim());
    }
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"",e);
  }
}"
42406,"public void commit(){
  try {
    AudioFileIO.write(song);
  }
 catch (  CannotWriteException e) {
    Logging.log(""String_Node_Str"",e);
  }
}","public void commit(){
  try {
    AudioFileIO.write(this.song);
  }
 catch (  final CannotWriteException e) {
    Logging.log(""String_Node_Str"",e);
  }
}"
42407,"public void writeField(FieldKey f,String v){
  try {
    tag.setField(f,v.replace(""String_Node_Str"",""String_Node_Str"").trim());
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"" + f,e);
  }
}","public void writeField(final FieldKey f,final String v){
  try {
    this.tag.setField(f,v.replace(""String_Node_Str"",""String_Node_Str"").trim());
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"" + f,e);
  }
}"
42408,"public File getFile(){
  return musicFile;
}","public File getFile(){
  return this.musicFile;
}"
42409,"public TagEditor(File file,QueueEntry entry){
  musicFile=file;
  this.entry=entry;
  try {
    this.song=AudioFileIO.read(musicFile);
    head=song.getAudioHeader();
    tag=song.getTag();
  }
 catch (  IOException|InvalidAudioFrameException|CannotReadException|TagException|ReadOnlyFileException e) {
    Logging.log(""String_Node_Str"",e);
    head=null;
    tag=null;
    song=null;
  }
}","public TagEditor(final File file,final QueueEntry entry){
  this.musicFile=file;
  this.entry=entry;
  try {
    this.song=AudioFileIO.read(this.musicFile);
    this.head=this.song.getAudioHeader();
    this.tag=this.song.getTag();
  }
 catch (  IOException|InvalidAudioFrameException|CannotReadException|TagException|ReadOnlyFileException e) {
    Logging.log(""String_Node_Str"",e);
    this.head=null;
    this.tag=null;
    this.song=null;
  }
}"
42410,"public void writeArtwork(final BufferedImage img){
  try {
    StandardArtwork s=new StandardArtwork();
    ImageIO.write(img,""String_Node_Str"",entry.getCoverTempFile());
    s.setFromFile(entry.getCoverTempFile());
    tag.deleteArtworkField();
    tag.addField(s);
  }
 catch (  FieldDataInvalidException|IOException e) {
    Logging.log(""String_Node_Str"",e);
  }
}","public void writeArtwork(final BufferedImage img){
  if (img == null)   return;
  try {
    final StandardArtwork s=new StandardArtwork();
    ImageIO.write(img,""String_Node_Str"",this.entry.getCoverTempFile());
    s.setFromFile(this.entry.getCoverTempFile());
    this.tag.deleteArtworkField();
    this.tag.addField(s);
  }
 catch (  FieldDataInvalidException|IOException e) {
    Logging.log(""String_Node_Str"",e);
  }
}"
42411,"@Override public void actionPerformed(ActionEvent arg0){
  if (arg0 == null) {
    handleMetaSearch();
  }
 else {
    saveMetaData(i);
  }
}","@Override public void actionPerformed(final ActionEvent arg0){
  if (arg0 == null) {
    StepMetaSearch.this.handleMetaSearch();
  }
 else {
    StepMetaSearch.this.saveMetaData(i);
  }
}"
42412,"private void handleMetaResult(){
  if (SwingUtilities.isEventDispatchThread()) {
    final InfoFrame i=new InfoFrame(entry,d);
    i.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (arg0 == null) {
          handleMetaSearch();
        }
 else {
          saveMetaData(i);
        }
      }
    }
);
    i.setVisible(true);
  }
 else {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        handleMetaResult();
      }
    }
);
  }
}","private void handleMetaResult(){
  if (SwingUtilities.isEventDispatchThread()) {
    final InfoFrame i=new InfoFrame(this.entry,this.d);
    if (this.d == null) {
      i.fillInfo(this.artist,this.title,this.album);
    }
    i.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent arg0){
        if (arg0 == null) {
          StepMetaSearch.this.handleMetaSearch();
        }
 else {
          StepMetaSearch.this.saveMetaData(i);
        }
      }
    }
);
    i.setVisible(true);
  }
 else {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        StepMetaSearch.this.handleMetaResult();
      }
    }
);
  }
}"
42413,"private void handleMetaSearch(){
  if (SwingUtilities.isEventDispatchThread()) {
    final SearchFrame sf=new SearchFrame(artist,title,album);
    sf.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (arg0 == null) {
        }
 else {
          d=SearchManager.getInstance().searchForSong(sf.getArtist(),sf.getAlbum(),sf.getSongTitle());
          handleMetaResult();
        }
      }
    }
);
    sf.setVisible(true);
  }
 else {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        handleMetaSearch();
      }
    }
);
  }
}","private void handleMetaSearch(){
  if (SwingUtilities.isEventDispatchThread()) {
    final SearchFrame sf=new SearchFrame(this.artist,this.title,this.album);
    sf.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent arg0){
        if (arg0 == null) {
          StepMetaSearch.this.handleMetaResult();
        }
 else {
          StepMetaSearch.this.d=SearchManager.getInstance().searchForSong(sf.getArtist(),sf.getAlbum(),sf.getSongTitle());
          StepMetaSearch.this.handleMetaResult();
        }
      }
    }
);
    sf.setVisible(true);
  }
 else {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        StepMetaSearch.this.handleMetaSearch();
      }
    }
);
  }
}"
42414,"private void saveMetaData(InfoFrame fr){
  Map<FieldKey,String> data=new HashMap<FieldKey,String>();
  data.put(FieldKey.ARTIST,fr.getArtist());
  data.put(FieldKey.ALBUM_ARTIST,fr.getAlbumArtist());
  data.put(FieldKey.CONDUCTOR,fr.getArtist());
  data.put(FieldKey.ALBUM,fr.getAlbum());
  data.put(FieldKey.TITLE,fr.getSongtitle());
  data.put(FieldKey.TRACK,fr.getTrack());
  data.put(FieldKey.TRACK_TOTAL,fr.getTrackCount());
  data.put(FieldKey.YEAR,fr.getYear());
  data.put(FieldKey.MOOD,fr.getMood());
  data.put(FieldKey.GENRE,fr.getGenre());
  data.put(FieldKey.TEMPO,fr.getTempo());
  data.put(FieldKey.COMMENT,entry.getDownloadTempFile().getAbsolutePath());
  entry.getStepInfo().put(""String_Node_Str"",data);
  fr.getTagEditor().writeAllFields(data);
  fr.getTagEditor().writeArtwork(fr.getArtworkImage());
  fr.getTagEditor().commit();
  nextStep();
}","private void saveMetaData(final InfoFrame fr){
  final Map<FieldKey,String> data=new HashMap<FieldKey,String>();
  data.put(FieldKey.ARTIST,fr.getArtist());
  data.put(FieldKey.ALBUM_ARTIST,fr.getAlbumArtist());
  data.put(FieldKey.CONDUCTOR,fr.getArtist());
  data.put(FieldKey.ALBUM,fr.getAlbum());
  data.put(FieldKey.TITLE,fr.getSongtitle());
  data.put(FieldKey.TRACK,fr.getTrack());
  data.put(FieldKey.TRACK_TOTAL,fr.getTrackCount());
  data.put(FieldKey.YEAR,fr.getYear());
  data.put(FieldKey.MOOD,fr.getMood());
  data.put(FieldKey.GENRE,fr.getGenre());
  data.put(FieldKey.TEMPO,fr.getTempo());
  data.put(FieldKey.COMMENT,this.entry.getDownloadTempFile().getAbsolutePath());
  this.entry.getStepInfo().put(""String_Node_Str"",data);
  fr.getTagEditor().writeAllFields(data);
  fr.getTagEditor().writeArtwork(fr.getArtworkImage());
  fr.getTagEditor().commit();
  this.nextStep();
}"
42415,"@Override public String getStepResults(){
  return d == null ? ""String_Node_Str"" : ""String_Node_Str"" + d.getTitle() + ""String_Node_Str"";
}","@Override public String getStepResults(){
  return this.d == null ? ""String_Node_Str"" : ""String_Node_Str"" + this.d.getTitle() + ""String_Node_Str"";
}"
42416,"@Override public void run(){
  handleMetaResult();
}","@Override public void run(){
  StepMetaSearch.this.handleMetaResult();
}"
42417,"public StepMetaSearch(QueueEntry entry){
  super(entry,new StepDescriptor(""String_Node_Str"",""String_Node_Str""));
}","public StepMetaSearch(final QueueEntry entry){
  super(entry,new StepDescriptor(""String_Node_Str"",""String_Node_Str""));
}"
42418,"@Override public void doStep(){
  String baseName=FilenameUtils.getBaseName(entry.getDownloadTempFile().getAbsolutePath());
  String[] parts=baseName.split(""String_Node_Str"");
switch (parts.length) {
case 1:
    title=parts[0].trim();
  break;
case 2:
artist=parts[0].trim();
title=parts[1].trim();
break;
case 3:
artist=parts[0].trim();
title=parts[1].trim();
album=parts[2].trim();
break;
default :
int n=parts.length - 3;
artist=parts[n].trim();
title=parts[n + 1].trim();
album=parts[n + 2].trim();
}
handleMetaSearch();
}","@Override public void doStep(){
  final String baseName=FilenameUtils.getBaseName(this.entry.getDownloadTempFile().getAbsolutePath());
  final String[] parts=baseName.split(""String_Node_Str"");
switch (parts.length) {
case 1:
    this.title=parts[0].trim();
  break;
case 2:
this.artist=parts[0].trim();
this.title=parts[1].trim();
break;
case 3:
this.artist=parts[0].trim();
this.title=parts[1].trim();
this.album=parts[2].trim();
break;
default :
final int n=parts.length - 3;
this.artist=parts[n].trim();
this.title=parts[n + 1].trim();
this.album=parts[n + 2].trim();
}
this.handleMetaSearch();
}"
42419,"public void addDownloadTempFile(final File file){
  downloadTempFile=file;
  final QueueEntry q=new QueueEntry(file);
  Queue.getInstance().addEntry(q);
}","public void addDownloadTempFile(final File file){
  downloadTempFile=file;
  final QueueEntry q=new QueueEntry(file);
  Logging.log(""String_Node_Str"" + file.getAbsolutePath());
  Queue.getInstance().addEntry(q);
}"
42420,"private boolean processInLine() throws IOException {
  String line;
  if ((line=in.readLine()) != null) {
    for (    final ProcessListener l : listener) {
      l.processLineOut(line);
    }
    return true;
  }
  return false;
}","private boolean processInLine() throws IOException {
  String line;
  if ((line=in.readLine()) != null) {
    Logging.log(""String_Node_Str"" + line);
    for (    final ProcessListener l : listener) {
      l.processLineOut(line);
    }
    return true;
  }
  return false;
}"
42421,"@Override public void processLineOut(final String line){
  if (DownloadInfo.isProgress(line)) {
    final DownloadInfo dinf=new DownloadInfo(line);
    final double c=dinf.progress / 100.0;
    double base=(double)(current - 1) / (double)total;
    base+=c / total;
    StepDownload.this.reportProgress(base);
  }
  if (line.contains(""String_Node_Str"")) {
    final String[] p=line.split(""String_Node_Str"")[1].split(""String_Node_Str"");
    current=Integer.parseInt(p[0]);
    total=Integer.parseInt(p[1]);
  }
  if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    final String p=line.split(""String_Node_Str"")[1].trim();
    StepDownload.this.entry.addDownloadTempFile(new File(p));
  }
  if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    String p=line.split(""String_Node_Str"")[1].substring(2);
    p=p.split(""String_Node_Str"")[0].trim();
    StepDownload.this.entry.addDownloadTempFile(new File(p));
  }
}","@Override public void processLineOut(final String line){
  if (DownloadInfo.isProgress(line)) {
    final DownloadInfo dinf=new DownloadInfo(line);
    final double c=dinf.progress / 100.0;
    double base=(double)(current - 1) / (double)total;
    base+=c / total;
    StepDownload.this.reportProgress(base);
  }
  if (line.contains(""String_Node_Str"")) {
    final String[] p=line.split(""String_Node_Str"")[1].split(""String_Node_Str"");
    current=Integer.parseInt(p[0]);
    total=Integer.parseInt(p[1]);
  }
  if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    String p=line.split(""String_Node_Str"")[1].trim();
    p=p.replaceAll(""String_Node_Str"",""String_Node_Str"");
    StepDownload.this.entry.addDownloadTempFile(new File(p));
  }
  if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    String p=line.split(""String_Node_Str"")[1].substring(2);
    p=p.split(""String_Node_Str"")[0].trim();
    StepDownload.this.entry.addDownloadTempFile(new File(p));
  }
}"
42422,"@Override public void doStep(){
  final ProcessBuilder n=new ProcessBuilder(ConfigManager.YOUTUBE_DL.getAbsolutePath(),""String_Node_Str"",ConfigManager.TEMP_DIR.getAbsolutePath() + ConfigManager.DS + ""String_Node_Str"",entry.getWebURL());
  final CLI y=new CLI(n);
  y.addProcessListener(new ProcessAdapter(){
    private int current=1;
    private int total=1;
    @Override public void processLineOut(    final String line){
      if (DownloadInfo.isProgress(line)) {
        final DownloadInfo dinf=new DownloadInfo(line);
        final double c=dinf.progress / 100.0;
        double base=(double)(current - 1) / (double)total;
        base+=c / total;
        StepDownload.this.reportProgress(base);
      }
      if (line.contains(""String_Node_Str"")) {
        final String[] p=line.split(""String_Node_Str"")[1].split(""String_Node_Str"");
        current=Integer.parseInt(p[0]);
        total=Integer.parseInt(p[1]);
      }
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        final String p=line.split(""String_Node_Str"")[1].trim();
        StepDownload.this.entry.addDownloadTempFile(new File(p));
      }
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        String p=line.split(""String_Node_Str"")[1].substring(2);
        p=p.split(""String_Node_Str"")[0].trim();
        StepDownload.this.entry.addDownloadTempFile(new File(p));
      }
    }
  }
);
  y.run();
  nextStep();
}","@Override public void doStep(){
  final ProcessBuilder n=new ProcessBuilder(ConfigManager.YOUTUBE_DL.getAbsolutePath(),""String_Node_Str"",ConfigManager.TEMP_DIR.getAbsolutePath() + ConfigManager.DS + ""String_Node_Str"",entry.getWebURL());
  final CLI y=new CLI(n);
  y.addProcessListener(new ProcessAdapter(){
    private int current=1;
    private int total=1;
    @Override public void processLineOut(    final String line){
      if (DownloadInfo.isProgress(line)) {
        final DownloadInfo dinf=new DownloadInfo(line);
        final double c=dinf.progress / 100.0;
        double base=(double)(current - 1) / (double)total;
        base+=c / total;
        StepDownload.this.reportProgress(base);
      }
      if (line.contains(""String_Node_Str"")) {
        final String[] p=line.split(""String_Node_Str"")[1].split(""String_Node_Str"");
        current=Integer.parseInt(p[0]);
        total=Integer.parseInt(p[1]);
      }
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        String p=line.split(""String_Node_Str"")[1].trim();
        p=p.replaceAll(""String_Node_Str"",""String_Node_Str"");
        StepDownload.this.entry.addDownloadTempFile(new File(p));
      }
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        String p=line.split(""String_Node_Str"")[1].substring(2);
        p=p.split(""String_Node_Str"")[0].trim();
        StepDownload.this.entry.addDownloadTempFile(new File(p));
      }
    }
  }
);
  y.run();
  nextStep();
}"
42423,"public static String sanitize(String main){
  return main.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","public static String sanitize(String main){
  return main.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}"
42424,"public void writeAllFields(Map<FieldKey,String> fields){
  try {
    for (    Entry<FieldKey,String> e : fields.entrySet()) {
      tag.setField(e.getKey(),e.getValue());
    }
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"",e);
  }
}","public void writeAllFields(Map<FieldKey,String> fields){
  try {
    for (    Entry<FieldKey,String> e : fields.entrySet()) {
      tag.setField(e.getKey(),e.getValue().replace(""String_Node_Str"",""String_Node_Str"").trim());
    }
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"",e);
  }
}"
42425,"public void writeField(FieldKey f,String v){
  try {
    tag.setField(f,v);
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"" + f,e);
  }
}","public void writeField(FieldKey f,String v){
  try {
    tag.setField(f,v.replace(""String_Node_Str"",""String_Node_Str"").trim());
  }
 catch (  KeyNotFoundException|FieldDataInvalidException e) {
    Logging.log(""String_Node_Str"" + f,e);
  }
}"
42426,"@SuppressWarnings(""String_Node_Str"") @Override public void doStep(){
  data=(Map<FieldKey,String>)(entry.getStepInfo().get(""String_Node_Str""));
  String convention=ConfigManager.getInstance().getConfig(ConfigKey.FILENAME_CONVENTION,""String_Node_Str"");
  convention=r(convention,""String_Node_Str"",FieldKey.ALBUM);
  convention=r(convention,""String_Node_Str"",FieldKey.TITLE);
  convention=r(convention,""String_Node_Str"",FieldKey.ARTIST);
  convention=r(convention,""String_Node_Str"",FieldKey.TRACK);
  convention=r(convention,""String_Node_Str"",FieldKey.TRACK_TOTAL);
  convention=r(convention,""String_Node_Str"",FieldKey.YEAR);
  String dirPath=ConfigManager.getInstance().getConfig(ConfigKey.DIR_TARGET,ConfigManager.TEMP_DIR.getAbsolutePath());
  finalFile=new File(dirPath + ConfigManager.DS + convention+ ""String_Node_Str"");
  try {
    if (finalFile.exists()) {
      int answer=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + finalFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
      if (answer == JOptionPane.OK_OPTION) {
        FileUtils.deleteQuietly(finalFile);
        FileUtils.moveFile(entry.getConvertTempFile(),finalFile);
      }
    }
 else {
      FileUtils.moveFile(entry.getConvertTempFile(),finalFile);
    }
  }
 catch (  IOException e) {
    Logging.log(""String_Node_Str"",e);
  }
  nextStep();
}","@SuppressWarnings(""String_Node_Str"") @Override public void doStep(){
  data=(Map<FieldKey,String>)(entry.getStepInfo().get(""String_Node_Str""));
  String convention=ConfigManager.getInstance().getConfig(ConfigKey.FILENAME_CONVENTION,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  convention=r(convention,""String_Node_Str"",FieldKey.ALBUM);
  convention=r(convention,""String_Node_Str"",FieldKey.TITLE);
  convention=r(convention,""String_Node_Str"",FieldKey.ARTIST);
  convention=r(convention,""String_Node_Str"",FieldKey.TRACK);
  convention=r(convention,""String_Node_Str"",FieldKey.TRACK_TOTAL);
  convention=r(convention,""String_Node_Str"",FieldKey.YEAR);
  String dirPath=ConfigManager.getInstance().getConfig(ConfigKey.DIR_TARGET,ConfigManager.TEMP_DIR.getAbsolutePath()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  finalFile=new File(dirPath + ConfigManager.DS + convention+ ""String_Node_Str"");
  try {
    if (finalFile.exists()) {
      int answer=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + finalFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
      if (answer == JOptionPane.OK_OPTION) {
        FileUtils.deleteQuietly(finalFile);
        FileUtils.moveFile(entry.getConvertTempFile(),finalFile);
      }
    }
 else {
      FileUtils.moveFile(entry.getConvertTempFile(),finalFile);
    }
  }
 catch (  IOException e) {
    Logging.log(""String_Node_Str"",e);
  }
  nextStep();
}"
42427,"@Override public void updateStatus(Integer status){
  this.getCache().put(CACHE_NAME_PREFIX,status);
  logger.trace(""String_Node_Str"",status);
}","@Override public void updateStatus(Integer status){
  this.getCache().put(CACHE_NAME_STATUS,status);
  logger.trace(""String_Node_Str"",status);
}"
42428,"@Override public Integer getStatus(){
  return this.getCache().get(CACHE_NAME_PREFIX,Integer.class);
}","@Override public Integer getStatus(){
  return this.get(CACHE_NAME_STATUS,Integer.class);
}"
42429,"public Collection<Content> getPublishedContents(String pageCode){
  Set<Content> contents=new HashSet<Content>();
  try {
    IPage page=this.getOnlinePage(pageCode);
    if (null == page) {
      return contents;
    }
    this.addPublishedContents(page.getWidgets(),contents);
  }
 catch (  Throwable t) {
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    _logger.error(""String_Node_Str"",pageCode,t);
    throw new RuntimeException(msg,t);
  }
  return contents;
}","public Collection<Content> getPublishedContents(String pageCode){
  return this.getOnlinePublishedContents(pageCode);
}"
42430,"public void setViewerWidgetCode(String viewerWidgetCode){
  this._viewerWidgetCode=viewerWidgetCode;
}","public void setViewerWidgetCode(String viewerWidgetCode){
  this.viewerWidgetCode=viewerWidgetCode;
}"
42431,"protected IContentManager getContentManager(){
  return _contentManager;
}","protected IContentManager getContentManager(){
  return contentManager;
}"
42432,"public List<ContentRecordVO> getReferencingContents(String pageCode){
  List<ContentRecordVO> referencingContents=null;
  try {
    List<String> referencingContentsId=this.getReferencingContentsId(pageCode);
    if (null != referencingContentsId) {
      referencingContents=new ArrayList<ContentRecordVO>();
      for (int i=0; i < referencingContentsId.size(); i++) {
        ContentRecordVO contentVo=this.getContentManager().loadContentVO(referencingContentsId.get(i));
        if (null != contentVo) {
          referencingContents.add(contentVo);
        }
      }
    }
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",pageCode,t);
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    throw new RuntimeException(msg,t);
  }
  return referencingContents;
}","public List<ContentRecordVO> getReferencingContents(String pageCode){
  List<ContentRecordVO> referencingContents=null;
  try {
    List<String> referencingContentsId=this.getReferencingContentsId(pageCode);
    if (null != referencingContentsId) {
      referencingContents=new ArrayList<>();
      for (int i=0; i < referencingContentsId.size(); i++) {
        ContentRecordVO contentVo=this.getContentManager().loadContentVO(referencingContentsId.get(i));
        if (null != contentVo) {
          referencingContents.add(contentVo);
        }
      }
    }
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",pageCode,t);
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    throw new RuntimeException(msg,t);
  }
  return referencingContents;
}"
42433,"public void setViewerPage(boolean viewerPage){
  this._viewerPage=viewerPage;
}","public void setViewerPage(boolean viewerPage){
  this.viewerPage=viewerPage;
}"
42434,"public void setContentManager(IContentManager contentManager){
  this._contentManager=contentManager;
}","public void setContentManager(IContentManager contentManager){
  this.contentManager=contentManager;
}"
42435,"public boolean isViewerPage(){
  return _viewerPage;
}","public boolean isViewerPage(){
  return viewerPage;
}"
42436,"public List<String> getReferencingContentsId(String pageCode){
  List<String> referencingContentsId=null;
  try {
    referencingContentsId=((PageUtilizer)this.getContentManager()).getPageUtilizers(pageCode);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",pageCode,t);
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    throw new RuntimeException(msg,t);
  }
  return referencingContentsId;
}","public List<String> getReferencingContentsId(String pageCode){
  List<String> referencingContentsId=null;
  try {
    referencingContentsId=((PageUtilizer)this.getContentManager()).getPageUtilizers(pageCode);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",pageCode,t);
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    throw new RuntimeException(msg,t);
  }
  return referencingContentsId;
}"
42437,"public String setViewerPageAPI(){
  IPage page=null;
  try {
    page=this.getPage(this.getPageCode());
    int mainFrame=page.getMetadata().getModel().getMainFrame();
    if (mainFrame > -1) {
      IWidgetTypeManager showletTypeManager=(IWidgetTypeManager)ApsWebApplicationUtils.getBean(SystemConstants.WIDGET_TYPE_MANAGER,this.getRequest());
      Widget viewer=new Widget();
      viewer.setConfig(new ApsProperties());
      WidgetType type=showletTypeManager.getWidgetType(this.getViewerWidgetCode());
      if (null == type) {
        _logger.warn(""String_Node_Str"",page.getCode());
        return SUCCESS;
      }
      viewer.setType(type);
      Widget[] widgets=page.getWidgets();
      widgets[mainFrame]=viewer;
    }
    this.getPageManager().updatePage(page);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",page.getCode(),t);
    return FAILURE;
  }
  return SUCCESS;
}","public String setViewerPageAPI(){
  IPage page=null;
  try {
    page=this.getPage(this.getPageCode());
    int mainFrame=page.getMetadata().getModel().getMainFrame();
    if (mainFrame > -1) {
      IWidgetTypeManager widgetTypeManager=(IWidgetTypeManager)ApsWebApplicationUtils.getBean(SystemConstants.WIDGET_TYPE_MANAGER,this.getRequest());
      Widget viewer=new Widget();
      viewer.setConfig(new ApsProperties());
      WidgetType type=widgetTypeManager.getWidgetType(this.getViewerWidgetCode());
      if (null == type) {
        logger.warn(""String_Node_Str"",page.getCode());
        return SUCCESS;
      }
      viewer.setType(type);
      Widget[] widgets=page.getWidgets();
      widgets[mainFrame]=viewer;
    }
    this.getPageManager().updatePage(page);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",page.getCode(),t);
    return FAILURE;
  }
  return SUCCESS;
}"
42438,"public Collection<Content> getOnlinePublishedContents(String pageCode){
  Collection<Content> contents=new HashSet<Content>();
  try {
    IPage page=this.getOnlinePage(pageCode);
    if (page != null) {
      this.addPublishedContents(page.getWidgets(),contents);
    }
  }
 catch (  Throwable t) {
    String msg=""String_Node_Str"" + pageCode + ""String_Node_Str"";
    _logger.error(""String_Node_Str"",pageCode,t);
    throw new RuntimeException(msg,t);
  }
  return contents;
}","public Collection<Content> getOnlinePublishedContents(String pageCode){
  return CmsPageUtil.getPublishedContents(pageCode,false,ApsWebApplicationUtils.getWebApplicationContext(this.getRequest()));
}"
42439,"protected String getViewerWidgetCode(){
  return _viewerWidgetCode;
}","protected String getViewerWidgetCode(){
  return viewerWidgetCode;
}"
42440,"protected List<String> extractContentsId(IContentListTagBean bean,RequestContext reqCtx) throws ApsSystemException {
  List<String> contentsId=null;
  try {
    List<UserFilterOptionBean> userFilters=bean.getUserFilterOptions();
    Widget widget=(Widget)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_WIDGET);
    ApsProperties config=(null != widget) ? widget.getConfig() : null;
    if (null == bean.getContentType() && null != config) {
      bean.setContentType(config.getProperty(WIDGET_PARAM_CONTENT_TYPE));
    }
    if (null == bean.getContentType()) {
      throw new ApsSystemException(""String_Node_Str"");
    }
    if (null == bean.getCategory() && null != config && null != config.getProperty(SHOWLET_PARAM_CATEGORY)) {
      bean.setCategory(config.getProperty(SHOWLET_PARAM_CATEGORY));
    }
    this.addWidgetFilters(bean,config,WIDGET_PARAM_FILTERS,reqCtx);
    if (null != userFilters && userFilters.size() > 0) {
      for (      UserFilterOptionBean userFilter : userFilters) {
        EntitySearchFilter filter=userFilter.getEntityFilter();
        if (null != filter) {
          bean.addFilter(filter);
        }
      }
    }
    String[] categories=this.getCategories(bean.getCategories(),config,userFilters);
    Collection<String> userGroupCodes=this.getAllowedGroups(reqCtx);
    boolean orCategoryFilterClause=this.extractOrCategoryFilterClause(config);
    contentsId=this.getContentManager().loadPublicContentsId(bean.getContentType(),categories,orCategoryFilterClause,bean.getFilters(),userGroupCodes);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",t);
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return contentsId;
}","protected List<String> extractContentsId(IContentListTagBean bean,RequestContext reqCtx) throws ApsSystemException {
  List<String> contentsId=null;
  try {
    List<UserFilterOptionBean> userFilters=bean.getUserFilterOptions();
    Widget widget=(Widget)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_WIDGET);
    ApsProperties config=(null != widget) ? widget.getConfig() : null;
    if (null == bean.getContentType() && null != config) {
      bean.setContentType(config.getProperty(WIDGET_PARAM_CONTENT_TYPE));
    }
    if (null == bean.getContentType()) {
      throw new ApsSystemException(""String_Node_Str"");
    }
    if (null == bean.getCategory() && null != config && null != config.getProperty(SHOWLET_PARAM_CATEGORY)) {
      bean.setCategory(config.getProperty(SHOWLET_PARAM_CATEGORY));
    }
    EntitySearchFilter[] filtersToUse=this.createWidgetFilters(bean,config,WIDGET_PARAM_FILTERS,reqCtx);
    if (null != userFilters && userFilters.size() > 0) {
      for (      UserFilterOptionBean userFilter : userFilters) {
        EntitySearchFilter filter=userFilter.getEntityFilter();
        if (null != filter) {
          filtersToUse=ArrayUtils.add(filtersToUse,filter);
        }
      }
    }
    String[] categories=this.getCategories(bean.getCategories(),config,userFilters);
    Collection<String> userGroupCodes=this.getAllowedGroups(reqCtx);
    boolean orCategoryFilterClause=this.extractOrCategoryFilterClause(config);
    contentsId=this.getContentManager().loadPublicContentsId(bean.getContentType(),categories,orCategoryFilterClause,filtersToUse,userGroupCodes);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",t);
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return contentsId;
}"
42441,"@Override public InputStream getInputStream() throws Throwable {
  return new FileInputStream(this._file);
}","@Override public InputStream getInputStream() throws Throwable {
  if (null == _file) {
    return null;
  }
  return new FileInputStream(this._file);
}"
42442,"@Override public int getFileSize(){
  return (int)this.getFile().length() / 1000;
}","@Override public int getFileSize(){
  if (null == _file) {
    return 0;
  }
  return (int)this.getFile().length() / 1000;
}"
42443,"@Override public String getFileName(){
  if (null != this._fileName) {
    return _fileName;
  }
  String fullName=this.getFile().getName();
  return fullName.substring(fullName.lastIndexOf('/') + 1).trim();
}","@Override public String getFileName(){
  if (null != this._fileName) {
    return _fileName;
  }
  if (null == _file) {
    return null;
  }
  String fullName=this.getFile().getName();
  return fullName.substring(fullName.lastIndexOf('/') + 1).trim();
}"
42444,"protected static String buildCacheKey(IContentListBean bean,Collection<String> userGroupCodes){
  StringBuilder cacheKey=new StringBuilder();
  if (null != bean.getListName()) {
    cacheKey.append(""String_Node_Str"").append(bean.getListName());
  }
  if (null != bean.getContentType()) {
    cacheKey.append(""String_Node_Str"").append(bean.getContentType());
  }
  List<String> groupCodes=new ArrayList<String>(userGroupCodes);
  if (!groupCodes.contains(Group.FREE_GROUP_NAME)) {
    groupCodes.add(Group.FREE_GROUP_NAME);
  }
  Collections.sort(groupCodes);
  for (int i=0; i < groupCodes.size(); i++) {
    if (i == 0) {
      cacheKey.append(""String_Node_Str"");
    }
    String code=groupCodes.get(i);
    cacheKey.append(""String_Node_Str"").append(code);
  }
  if (null != bean.getCategories()) {
    List<String> categoryCodes=Arrays.asList(bean.getCategories());
    Collections.sort(categoryCodes);
    for (int j=0; j < categoryCodes.size(); j++) {
      if (j == 0) {
        cacheKey.append(""String_Node_Str"");
      }
      String code=categoryCodes.get(j);
      cacheKey.append(""String_Node_Str"").append(code);
    }
  }
  if (null != bean.getFilters()) {
    for (int k=0; k < bean.getFilters().length; k++) {
      if (k == 0) {
        cacheKey.append(""String_Node_Str"");
      }
      EntitySearchFilter filter=bean.getFilters()[k];
      cacheKey.append(""String_Node_Str"").append(filter.toString());
    }
  }
  return cacheKey.toString();
}","protected static String buildCacheKey(IContentListBean bean,Collection<String> userGroupCodes){
  return buildStringBuilderCacheKey(bean,userGroupCodes).toString();
}"
42445,"protected List<String> executeFullTextSearch(IContentListTagBean bean,List<String> masterContentsId,RequestContext reqCtx) throws ApsSystemException {
  UserFilterOptionBean fullTextUserFilter=null;
  List<UserFilterOptionBean> userFilterOptions=bean.getUserFilterOptions();
  if (null != userFilterOptions) {
    for (    UserFilterOptionBean userFilter : userFilterOptions) {
      if (null != userFilter.getFormFieldValues() && userFilter.getFormFieldValues().size() > 0) {
        if (!userFilter.isAttributeFilter() && userFilter.getKey().equals(UserFilterOptionBean.KEY_FULLTEXT)) {
          fullTextUserFilter=userFilter;
        }
      }
    }
  }
  if (fullTextUserFilter != null && null != fullTextUserFilter.getFormFieldValues()) {
    String word=fullTextUserFilter.getFormFieldValues().get(fullTextUserFilter.getFormFieldNames()[0]);
    Lang currentLang=(Lang)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_LANG);
    List<String> fullTextResult=this.getSearchEngineManager().searchEntityId(currentLang.getCode(),word,this.getAllowedGroups(reqCtx));
    if (null != fullTextResult) {
      return ListUtils.intersection(fullTextResult,masterContentsId);
    }
 else {
      return new ArrayList<String>();
    }
  }
 else {
    return masterContentsId;
  }
}","protected List<String> executeFullTextSearch(IContentListTagBean bean,List<String> masterContentsId,RequestContext reqCtx) throws ApsSystemException {
  UserFilterOptionBean fullTextUserFilter=null;
  List<UserFilterOptionBean> userFilterOptions=bean.getUserFilterOptions();
  if (null != userFilterOptions) {
    for (    UserFilterOptionBean userFilter : userFilterOptions) {
      if (null != userFilter.getFormFieldValues() && userFilter.getFormFieldValues().size() > 0) {
        if (!userFilter.isAttributeFilter() && userFilter.getKey().equals(UserFilterOptionBean.KEY_FULLTEXT)) {
          fullTextUserFilter=userFilter;
        }
      }
    }
  }
  if (fullTextUserFilter != null && null != fullTextUserFilter.getFormFieldValues()) {
    String word=fullTextUserFilter.getFormFieldValues().get(fullTextUserFilter.getFormFieldNames()[0]);
    Lang currentLang=(Lang)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_LANG);
    List<String> fullTextResult=this.getSearchEngineManager().searchEntityId(currentLang.getCode(),word,this.getAllowedGroups(reqCtx));
    if (null != fullTextResult) {
      return ListUtils.intersection(fullTextResult,masterContentsId);
    }
 else {
      return new ArrayList<>();
    }
  }
 else {
    return masterContentsId;
  }
}"
42446,"protected static String buildCacheKey(String listName,Collection<String> userGroupCodes,RequestContext reqCtx){
  IPage page=(null != reqCtx) ? (IPage)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_PAGE) : null;
  StringBuilder cacheKey=(null != page) ? new StringBuilder(page.getCode()) : new StringBuilder(""String_Node_Str"");
  Widget currentWidget=(null != reqCtx) ? (Widget)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_WIDGET) : null;
  if (null != currentWidget && null != currentWidget.getType()) {
    cacheKey.append(""String_Node_Str"").append(currentWidget.getType().getCode());
  }
  if (null != reqCtx) {
    Integer frame=(Integer)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_FRAME);
    if (null != frame) {
      cacheKey.append(""String_Node_Str"").append(frame.intValue());
    }
    Lang currentLang=(Lang)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_LANG);
    if (null != currentLang) {
      cacheKey.append(""String_Node_Str"").append(currentLang.getCode()).append(""String_Node_Str"");
    }
  }
  List<String> groupCodes=new ArrayList<String>(userGroupCodes);
  if (!groupCodes.contains(Group.FREE_GROUP_NAME)) {
    groupCodes.add(Group.FREE_GROUP_NAME);
  }
  Collections.sort(groupCodes);
  for (  String code : groupCodes) {
    cacheKey.append(""String_Node_Str"").append(code);
  }
  if (null != currentWidget && null != currentWidget.getConfig()) {
    List<String> paramKeys=new ArrayList(currentWidget.getConfig().keySet());
    Collections.sort(paramKeys);
    for (int i=0; i < paramKeys.size(); i++) {
      if (i == 0) {
        cacheKey.append(""String_Node_Str"");
      }
 else {
        cacheKey.append(""String_Node_Str"");
      }
      String paramkey=(String)paramKeys.get(i);
      cacheKey.append(paramkey).append(""String_Node_Str"").append(currentWidget.getConfig().getProperty(paramkey));
    }
  }
  if (null != listName) {
    cacheKey.append(""String_Node_Str"").append(listName);
  }
  return cacheKey.toString();
}","public static String buildCacheKey(IContentListTagBean bean,RequestContext reqCtx){
  UserDetails currentUser=(UserDetails)reqCtx.getRequest().getSession().getAttribute(SystemConstants.SESSIONPARAM_CURRENT_USER);
  StringBuilder baseCacheKey=ContentListHelper.buildStringBuilderCacheKey(bean,currentUser);
  IPage page=(null != reqCtx) ? (IPage)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_PAGE) : null;
  if (null == page) {
    baseCacheKey.append(""String_Node_Str"");
  }
 else {
    baseCacheKey.append(""String_Node_Str"" + page.getCode());
  }
  Widget currentWidget=(null != reqCtx) ? (Widget)reqCtx.getExtraParam(SystemConstants.EXTRAPAR_CURRENT_WIDGET) : null;
  if (null != currentWidget && null != currentWidget.getConfig()) {
    List<String> paramKeys=new ArrayList(currentWidget.getConfig().keySet());
    Collections.sort(paramKeys);
    for (int i=0; i < paramKeys.size(); i++) {
      if (i == 0) {
        baseCacheKey.append(""String_Node_Str"");
      }
 else {
        baseCacheKey.append(""String_Node_Str"");
      }
      String paramkey=(String)paramKeys.get(i);
      baseCacheKey.append(paramkey).append(""String_Node_Str"").append(currentWidget.getConfig().getProperty(paramkey));
    }
  }
  return DigestUtils.md5Hex(baseCacheKey.toString());
}"
42447,"protected String[] getCategories(String[] categories,ApsProperties config,List<UserFilterOptionBean> userFilters){
  Set<String> codes=new HashSet<String>();
  if (null != categories) {
    for (    String category : categories) {
      codes.add(category);
    }
  }
  String categoriesParam=(null != config) ? config.getProperty(WIDGET_PARAM_CATEGORIES) : null;
  if (null != categoriesParam && categoriesParam.trim().length() > 0) {
    List<String> categoryCodes=splitValues(categoriesParam,CATEGORIES_SEPARATOR);
    for (    String categoryCode : categoryCodes) {
      codes.add(categoryCode);
    }
  }
  if (null != userFilters) {
    for (    UserFilterOptionBean userFilterBean : userFilters) {
      if (!userFilterBean.isAttributeFilter() && userFilterBean.getKey().equals(UserFilterOptionBean.KEY_CATEGORY) && null != userFilterBean.getFormFieldValues()) {
        codes.add(userFilterBean.getFormFieldValues().get(userFilterBean.getFormFieldNames()[0]));
      }
    }
  }
  if (codes.isEmpty()) {
    return null;
  }
  String[] categoryCodes=new String[codes.size()];
  Iterator<String> iter=codes.iterator();
  int i=0;
  while (iter.hasNext()) {
    categoryCodes[i++]=iter.next();
  }
  return categoryCodes;
}","protected String[] getCategories(String[] categories,ApsProperties config,List<UserFilterOptionBean> userFilters){
  Set<String> codes=new HashSet<>();
  if (null != categories) {
    for (    String category : categories) {
      codes.add(category);
    }
  }
  String categoriesParam=(null != config) ? config.getProperty(WIDGET_PARAM_CATEGORIES) : null;
  if (null != categoriesParam && categoriesParam.trim().length() > 0) {
    List<String> categoryCodes=splitValues(categoriesParam,CATEGORIES_SEPARATOR);
    for (    String categoryCode : categoryCodes) {
      codes.add(categoryCode);
    }
  }
  if (null != userFilters) {
    for (    UserFilterOptionBean userFilterBean : userFilters) {
      if (!userFilterBean.isAttributeFilter() && userFilterBean.getKey().equals(UserFilterOptionBean.KEY_CATEGORY) && null != userFilterBean.getFormFieldValues()) {
        codes.add(userFilterBean.getFormFieldValues().get(userFilterBean.getFormFieldNames()[0]));
      }
    }
  }
  if (codes.isEmpty()) {
    return null;
  }
  String[] categoryCodes=new String[codes.size()];
  Iterator<String> iter=codes.iterator();
  int i=0;
  while (iter.hasNext()) {
    categoryCodes[i++]=iter.next();
  }
  return categoryCodes;
}"
42448,"@Override protected void fillDocument(Document doc,PageMetadata pageMetadata){
  super.fillDocument(doc,pageMetadata);
  if (!(pageMetadata instanceof SeoPageMetadata)) {
    return;
  }
  SeoPageMetadata seoPageMetadata=(SeoPageMetadata)pageMetadata;
  Element useExtraDescriptionsElement=new Element(USE_EXTRA_DESCRIPTIONS_ELEMENT_NAME);
  useExtraDescriptionsElement.setText(String.valueOf(seoPageMetadata.isUseExtraDescriptions()));
  doc.getRootElement().addContent(useExtraDescriptionsElement);
  ApsProperties descriptions=seoPageMetadata.getDescriptions();
  if (null != descriptions && descriptions.size() > 0) {
    Element descriptionsElement=new Element(DESCRIPTIONS_ELEMENT_NAME);
    doc.getRootElement().addContent(descriptionsElement);
    Iterator<Object> iterator=descriptions.keySet().iterator();
    while (iterator.hasNext()) {
      String langCode=(String)iterator.next();
      Element extraDescriptionElement=new Element(DESCRIPTION_ELEMENT_NAME);
      extraDescriptionElement.setAttribute(DESCRIPTION_LANG_ATTRIBUTE_NAME,langCode);
      extraDescriptionElement.setText(descriptions.getProperty(langCode));
      descriptionsElement.addContent(extraDescriptionElement);
    }
  }
  if (null != seoPageMetadata.getFriendlyCode() && seoPageMetadata.getFriendlyCode().trim().length() > 0) {
    Element friendlyCodeElement=new Element(FRIENDLY_CODE_ELEMENT_NAME);
    friendlyCodeElement.setText(seoPageMetadata.getFriendlyCode().trim());
    doc.getRootElement().addContent(friendlyCodeElement);
  }
  if (null != seoPageMetadata.getComplexParameters()) {
    Element complexConfigElement=new Element(COMPLEX_PARAMS_ELEMENT_NAME);
    this.addComplexParameters(complexConfigElement,seoPageMetadata.getComplexParameters());
    doc.getRootElement().addContent(complexConfigElement);
  }
}","@Override protected void fillDocument(Document doc,PageMetadata pageMetadata){
  super.fillDocument(doc,pageMetadata);
  if (!(pageMetadata instanceof SeoPageMetadata)) {
    return;
  }
  SeoPageMetadata seoPageMetadata=(SeoPageMetadata)pageMetadata;
  Element useExtraDescriptionsElement=new Element(USE_EXTRA_DESCRIPTIONS_ELEMENT_NAME);
  useExtraDescriptionsElement.setText(String.valueOf(seoPageMetadata.isUseExtraDescriptions()));
  doc.getRootElement().addContent(useExtraDescriptionsElement);
  ApsProperties descriptions=seoPageMetadata.getDescriptions();
  if (null != descriptions && descriptions.size() > 0) {
    Element descriptionsElement=new Element(DESCRIPTIONS_ELEMENT_NAME);
    doc.getRootElement().addContent(descriptionsElement);
    Iterator<Object> iterator=descriptions.keySet().iterator();
    while (iterator.hasNext()) {
      String langCode=(String)iterator.next();
      Element extraDescriptionElement=new Element(DESCRIPTION_ELEMENT_NAME);
      extraDescriptionElement.setAttribute(DESCRIPTION_LANG_ATTRIBUTE_NAME,langCode);
      PageMetatag metatag=(PageMetatag)descriptions.get(langCode);
      extraDescriptionElement.setAttribute(USE_DEFAULT_LANG_ELEMENT_NAME,String.valueOf(metatag.isUseDefaultLangValue()));
      extraDescriptionElement.setText(metatag.getValue());
      descriptionsElement.addContent(extraDescriptionElement);
    }
  }
  if (null != seoPageMetadata.getFriendlyCode() && seoPageMetadata.getFriendlyCode().trim().length() > 0) {
    Element friendlyCodeElement=new Element(FRIENDLY_CODE_ELEMENT_NAME);
    friendlyCodeElement.setText(seoPageMetadata.getFriendlyCode().trim());
    doc.getRootElement().addContent(friendlyCodeElement);
  }
  if (null != seoPageMetadata.getComplexParameters()) {
    Element complexConfigElement=new Element(COMPLEX_PARAMS_ELEMENT_NAME);
    this.addComplexParameters(complexConfigElement,seoPageMetadata.getComplexParameters());
    doc.getRootElement().addContent(complexConfigElement);
  }
}"
42449,"@After(""String_Node_Str"") public void executeExtraValueFormForEdit(JoinPoint joinPoint){
  HttpServletRequest request=ServletActionContext.getRequest();
  PageAction action=(PageAction)joinPoint.getTarget();
  String pageCode=action.getSelectedNode();
  IPage page=action.getPage(pageCode);
  if (null != page && page.getMetadata() instanceof SeoPageMetadata) {
    SeoPageMetadata pageMetadata=(SeoPageMetadata)page.getMetadata();
    request.setAttribute(PARAM_FRIENDLY_CODE,pageMetadata.getFriendlyCode());
    request.setAttribute(PARAM_USE_EXTRA_DESCRIPTIONS,pageMetadata.isUseExtraDescriptions());
    ApsProperties props=pageMetadata.getDescriptions();
    if (null != props) {
      Iterator<Object> iter=props.keySet().iterator();
      while (iter.hasNext()) {
        String key=(String)iter.next();
        PageMetatag metatag=(PageMetatag)props.get(key);
        request.setAttribute(PARAM_DESCRIPTION_PREFIX + key,metatag.getValue());
        request.setAttribute(PARAM_DESCRIPTION_USE_DEFAULT_PREFIX + key,metatag.isUseDefaultLangValue());
      }
    }
    ApsProperties keywords=pageMetadata.getKeywords();
    if (null != keywords) {
      Iterator<Object> iter=keywords.keySet().iterator();
      while (iter.hasNext()) {
        String key=(String)iter.next();
        PageMetatag metatag=(PageMetatag)props.get(key);
        request.setAttribute(PARAM_KEYWORDS_PREFIX + key,metatag.getValue());
        request.setAttribute(PARAM_KEYWORDS_USE_DEFAULT_PREFIX + key,metatag.isUseDefaultLangValue());
      }
    }
    Map<String,Map<String,PageMetatag>> seoParameters=pageMetadata.getComplexParameters();
    if (null != seoParameters) {
      Lang defaultLang=this.getLangManager().getDefaultLang();
      Map<String,Map<String,PageMetatag>> metas=SeoPageExtraConfigDOM.extractRightParams(seoParameters,defaultLang);
      request.setAttribute(PARAM_METATAGS,metas);
    }
    request.setAttribute(PARAM_METATAG_ATTRIBUTE_NAMES,Metatag.getAttributeNames());
  }
}","@After(""String_Node_Str"") public void executeExtraValueFormForEdit(JoinPoint joinPoint){
  HttpServletRequest request=ServletActionContext.getRequest();
  PageAction action=(PageAction)joinPoint.getTarget();
  String pageCode=action.getSelectedNode();
  IPage page=action.getPage(pageCode);
  if (null != page && page.getMetadata() instanceof SeoPageMetadata) {
    SeoPageMetadata pageMetadata=(SeoPageMetadata)page.getMetadata();
    request.setAttribute(PARAM_FRIENDLY_CODE,pageMetadata.getFriendlyCode());
    request.setAttribute(PARAM_USE_EXTRA_DESCRIPTIONS,pageMetadata.isUseExtraDescriptions());
    ApsProperties props=pageMetadata.getDescriptions();
    if (null != props) {
      Iterator<Object> iter=props.keySet().iterator();
      while (iter.hasNext()) {
        String key=(String)iter.next();
        PageMetatag metatag=(PageMetatag)props.get(key);
        request.setAttribute(PARAM_DESCRIPTION_PREFIX + key,metatag.getValue());
        request.setAttribute(PARAM_DESCRIPTION_USE_DEFAULT_PREFIX + key,metatag.isUseDefaultLangValue());
      }
    }
    ApsProperties keywords=pageMetadata.getKeywords();
    if (null != keywords) {
      Iterator<Object> iter=keywords.keySet().iterator();
      while (iter.hasNext()) {
        String key=(String)iter.next();
        PageMetatag metatag=(PageMetatag)keywords.get(key);
        request.setAttribute(PARAM_KEYWORDS_PREFIX + key,metatag.getValue());
        request.setAttribute(PARAM_KEYWORDS_USE_DEFAULT_PREFIX + key,metatag.isUseDefaultLangValue());
      }
    }
    Map<String,Map<String,PageMetatag>> seoParameters=pageMetadata.getComplexParameters();
    if (null != seoParameters) {
      Lang defaultLang=this.getLangManager().getDefaultLang();
      Map<String,Map<String,PageMetatag>> metas=SeoPageExtraConfigDOM.extractRightParams(seoParameters,defaultLang);
      request.setAttribute(PARAM_METATAGS,metas);
    }
    request.setAttribute(PARAM_METATAG_ATTRIBUTE_NAMES,Metatag.getAttributeNames());
  }
}"
42450,"public void testEditPage_2() throws Throwable {
  String selectedPageCode=""String_Node_Str"";
  String result=this.executeActionOnPage(selectedPageCode,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Action.SUCCESS,result);
  IPage page=this._pageManager.getDraftPage(selectedPageCode);
  PageAction action=(PageAction)this.getAction();
  assertEquals(action.getStrutsAction(),ApsAdminSystemConstants.EDIT);
  assertEquals(page.getCode(),action.getPageCode());
  assertEquals(page.getParentCode(),action.getParentPageCode());
  assertEquals(page.getModel().getCode(),action.getModel());
  assertEquals(page.getGroup(),action.getGroup());
  assertEquals(page.isShowable(),action.isShowable());
  assertEquals(""String_Node_Str"",action.getTitles().getProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",action.getTitles().getProperty(""String_Node_Str""));
  Map<String,Map<String,PageMetatag>> metas=(Map<String,Map<String,PageMetatag>>)this.getRequest().getAttribute(PageActionAspect.PARAM_METATAGS);
  assertNotNull(metas);
  assertEquals(3,metas.size());
  Map<String,PageMetatag> engMetas=metas.get(""String_Node_Str"");
  assertNotNull(engMetas);
  assertEquals(6,engMetas.size());
  assertNull(engMetas.get(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",engMetas.get(""String_Node_Str"").getValue());
  String descriptionIt=(String)this.getRequest().getAttribute(PageActionAspect.PARAM_DESCRIPTION_PREFIX + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",descriptionIt);
  Boolean useDefaultDescrIt=(Boolean)this.getRequest().getAttribute(PageActionAspect.PARAM_DESCRIPTION_USE_DEFAULT_PREFIX + ""String_Node_Str"");
  assertFalse(useDefaultDescrIt);
}","public void testEditPage_2() throws Throwable {
  String selectedPageCode=""String_Node_Str"";
  String result=this.executeActionOnPage(selectedPageCode,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Action.SUCCESS,result);
  IPage page=this._pageManager.getDraftPage(selectedPageCode);
  PageAction action=(PageAction)this.getAction();
  assertEquals(action.getStrutsAction(),ApsAdminSystemConstants.EDIT);
  assertEquals(page.getCode(),action.getPageCode());
  assertEquals(page.getParentCode(),action.getParentPageCode());
  assertEquals(page.getModel().getCode(),action.getModel());
  assertEquals(page.getGroup(),action.getGroup());
  assertEquals(page.isShowable(),action.isShowable());
  assertEquals(""String_Node_Str"",action.getTitles().getProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",action.getTitles().getProperty(""String_Node_Str""));
  Map<String,Map<String,PageMetatag>> metas=(Map<String,Map<String,PageMetatag>>)this.getRequest().getAttribute(PageActionAspect.PARAM_METATAGS);
  assertNotNull(metas);
  assertEquals(3,metas.size());
  Map<String,PageMetatag> engMetas=metas.get(""String_Node_Str"");
  assertNotNull(engMetas);
  assertEquals(6,engMetas.size());
  assertNull(engMetas.get(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",engMetas.get(""String_Node_Str"").getValue());
  String descriptionIt=(String)this.getRequest().getAttribute(PageActionAspect.PARAM_DESCRIPTION_PREFIX + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",descriptionIt);
  Boolean useDefaultDescrIt=(Boolean)this.getRequest().getAttribute(PageActionAspect.PARAM_DESCRIPTION_USE_DEFAULT_PREFIX + ""String_Node_Str"");
  assertFalse(useDefaultDescrIt);
  String keywordsEn=(String)this.getRequest().getAttribute(PageActionAspect.PARAM_KEYWORDS_PREFIX + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",keywordsEn);
  Boolean useDefaultKeywordsEn=(Boolean)this.getRequest().getAttribute(PageActionAspect.PARAM_KEYWORDS_USE_DEFAULT_PREFIX + ""String_Node_Str"");
  assertTrue(useDefaultKeywordsEn);
}"
42451,"public void postTaskForm(final KieApiInputFormTask form) throws Throwable {
  if (null == form) {
    throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,""String_Node_Str"",Response.Status.CONFLICT);
  }
  String containerId=null;
  String taskId=null;
  Map<String,String> input=new HashMap<>();
  for (  KieApiInputFormTask.Field field : form.getFields()) {
    if (field.getName().equalsIgnoreCase(""String_Node_Str"")) {
      containerId=field.getValue();
    }
    if (field.getName().equalsIgnoreCase(""String_Node_Str"")) {
      taskId=field.getValue();
    }
    input.put(field.getName().replace(KieApiField.FIELD_NAME_PREFIX,""String_Node_Str""),field.getValue());
  }
  final String result=this.getKieFormManager().completeHumanFormTask(containerId,""String_Node_Str"",Long.valueOf(taskId),input);
  logger.info(""String_Node_Str"",result);
}","public void postTaskForm(final KieApiInputFormTask form) throws Throwable {
  if (null == form) {
    throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,""String_Node_Str"",Response.Status.CONFLICT);
  }
  String containerId=null;
  String taskId=null;
  String processId=null;
  Map<String,String> input=new HashMap<>();
  for (  KieApiInputFormTask.Field field : form.getFields()) {
    logger.info(""String_Node_Str"",field.getName(),field.getValue());
    if (field.getName().equalsIgnoreCase(""String_Node_Str"")) {
      containerId=field.getValue();
    }
    if (field.getName().equalsIgnoreCase(""String_Node_Str"")) {
      taskId=field.getValue();
    }
    if (field.getName().equalsIgnoreCase(""String_Node_Str"")) {
      processId=field.getValue();
    }
    input.put(field.getName().replace(KieApiField.FIELD_NAME_PREFIX,""String_Node_Str""),field.getValue());
  }
  final String result=this.getKieFormManager().completeHumanFormTask(containerId,processId,Long.valueOf(taskId),input);
  logger.info(""String_Node_Str"",result);
}"
42452,"private void setElementList(final ApsProperties config,final JAXBTaskList taskList) throws ApsSystemException {
  final String groups=""String_Node_Str"" + config.getProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  final List<JAXBTask> list=new ArrayList<>();
  final List<KieTask> rawList=this.getKieFormManager().getHumanTaskList(groups,null);
  for (  final KieTask task : rawList) {
    list.add(new JAXBTask(task));
  }
  taskList.setList(list);
}","private void setElementList(final ApsProperties config,final JAXBTaskList taskList) throws ApsSystemException {
  final String groups=config.getProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  final List<JAXBTask> list=new ArrayList<>();
  final List<KieTask> rawList=this.getKieFormManager().getHumanTaskList(groups,null);
  for (  final KieTask task : rawList) {
    list.add(new JAXBTask(task));
  }
  taskList.setList(list);
}"
42453,"public JAXBTask getTask(Properties properties) throws Throwable {
  JAXBTask resTask=null;
  final String idString=properties.getProperty(""String_Node_Str"");
  final String page=properties.getProperty(""String_Node_Str"");
  final String pageSize=properties.getProperty(""String_Node_Str"");
  final String user=properties.getProperty(""String_Node_Str"");
  HashMap<String,String> opt=new HashMap<>();
  int id;
  try {
    id=Integer.parseInt(idString);
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",page);
    }
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",pageSize);
    }
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",user);
    }
  }
 catch (  NumberFormatException e) {
    throw new ApiException(IApiErrorCodes.API_PARAMETER_VALIDATION_ERROR,""String_Node_Str"" + idString + ""String_Node_Str"",Response.Status.CONFLICT);
  }
  List<KieTask> rawList=this.getKieFormManager().getHumanTaskList(""String_Node_Str"",opt);
  for (  KieTask task : rawList) {
    if (id == task.getId()) {
      resTask=new JAXBTask(task);
      break;
    }
  }
  if (null == resTask) {
    throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,""String_Node_Str"" + idString + ""String_Node_Str"",Response.Status.CONFLICT);
  }
  return resTask;
}","public JAXBTask getTask(Properties properties) throws Throwable {
  JAXBTask resTask=null;
  final String idString=properties.getProperty(""String_Node_Str"");
  final String page=properties.getProperty(""String_Node_Str"");
  final String pageSize=properties.getProperty(""String_Node_Str"");
  final String user=properties.getProperty(""String_Node_Str"");
  HashMap<String,String> opt=new HashMap<>();
  int id;
  try {
    id=Integer.parseInt(idString);
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",page);
    }
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",pageSize);
    }
    if (StringUtils.isNotBlank(""String_Node_Str"")) {
      opt.put(""String_Node_Str"",user);
    }
  }
 catch (  NumberFormatException e) {
    throw new ApiException(IApiErrorCodes.API_PARAMETER_VALIDATION_ERROR,""String_Node_Str"" + idString + ""String_Node_Str"",Response.Status.CONFLICT);
  }
  try {
    List<KieTask> rawList=this.getKieFormManager().getHumanTaskList(""String_Node_Str"",opt);
    for (    KieTask task : rawList) {
      if (id == task.getId()) {
        resTask=new JAXBTask(task);
        break;
      }
    }
    if (null == resTask) {
      throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,""String_Node_Str"" + idString + ""String_Node_Str"",Response.Status.CONFLICT);
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
    throw ex;
  }
  return resTask;
}"
42454,"public KieApiForm getTaskForm(Properties properties) throws Throwable {
  String containerId=properties.getProperty(""String_Node_Str"");
  String taskIdString=properties.getProperty(""String_Node_Str"");
  String langCode=properties.getProperty(SystemConstants.API_LANG_CODE_PARAMETER);
  KieApiForm form=null;
  KieProcessFormQueryResult processForm=this.getKieFormManager().getTaskForm(containerId,Long.valueOf(taskIdString));
  if (null == processForm) {
    String msg=String.format(""String_Node_Str"",containerId,taskIdString);
    throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,msg,Response.Status.CONFLICT);
  }
  String processId=processForm.getHolders().get(0).getValue();
  try {
    this.setLabels(processForm,langCode);
    form=KieApiUtil.createForm(processForm,this.getI18nManager(),langCode,this.getFormOverridesMap(containerId,processId,null));
    form.setTaskId(taskIdString);
    form.setContainerId(containerId);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return form;
}","public KieApiForm getTaskForm(Properties properties) throws Throwable {
  String containerId=properties.getProperty(""String_Node_Str"");
  String taskIdString=properties.getProperty(""String_Node_Str"");
  String langCode=properties.getProperty(SystemConstants.API_LANG_CODE_PARAMETER);
  KieApiForm form=null;
  KieProcessFormQueryResult processForm=this.getKieFormManager().getTaskForm(containerId,Long.valueOf(taskIdString));
  if (null == processForm) {
    String msg=String.format(""String_Node_Str"",containerId,taskIdString);
    throw new ApiException(IApiErrorCodes.API_VALIDATION_ERROR,msg,Response.Status.CONFLICT);
  }
  String processId=processForm.getHolders().get(0).getValue();
  try {
    this.setLabels(processForm,langCode);
    form=KieApiUtil.createForm(processForm,this.getI18nManager(),langCode,this.getFormOverridesMap(containerId,processId,null));
    form.setTaskId(taskIdString);
    form.setContainerId(containerId);
    form.setProcessId(processId);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return form;
}"
42455,"@Override public List<KieTask> getHumanTaskList(String groups,Map<String,String> opt) throws ApsSystemException {
  Map<String,String> headersMap=new HashMap<>();
  List<KieTask> list=new ArrayList<>();
  if (!config.getActive()) {
    return list;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_HUMAN_TASK_LIST);
    KieClient client=getCurrentClient();
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieTaskQueryResult result=(KieTaskQueryResult)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setRequestParams(opt).setDebug(config.getDebug()).doRequest(KieTaskQueryResult.class);
    if (null != result && null != result.getList() && !result.getList().isEmpty()) {
      list=result.getList();
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return list;
}","@Override public List<KieTask> getHumanTaskList(String groups,Map<String,String> opt) throws ApsSystemException {
  logger.info(""String_Node_Str"",groups,opt);
  Map<String,String> headersMap=new HashMap<>();
  List<KieTask> list=new ArrayList<>();
  if (!config.getActive()) {
    return list;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_HUMAN_TASK_LIST);
    KieClient client=getCurrentClient();
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    RequestBuilder requestBuilder=new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setRequestParams(opt).setDebug(config.getDebug());
    if (groups != null && !""String_Node_Str"".equalsIgnoreCase(groups)) {
      Map<String,String> recurringParameters=new HashMap<String,String>();
      recurringParameters.put(""String_Node_Str"",groups);
      ((KieRequestBuilder)requestBuilder).setRecurringParameters(recurringParameters);
    }
    KieTaskQueryResult result=(KieTaskQueryResult)requestBuilder.doRequest(KieTaskQueryResult.class);
    if (null != result && null != result.getList() && !result.getList().isEmpty()) {
      list=result.getList();
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return list;
}"
42456,"@Override public List<kieProcess> getProcessDefinitionsList() throws ApsSystemException {
  Map<String,String> headersMap=new HashMap<>();
  List<kieProcess> list=new ArrayList<>();
  if (!config.getActive()) {
    return list;
  }
  try {
    KieClient client=getCurrentClient();
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieProcessesQueryResult result=(KieProcessesQueryResult)new KieRequestBuilder(client).setEndpoint(KieEndpointDictionary.create().get(API_GET_PROCESS_DEFINITIONS_LIST)).setHeaders(headersMap).setDebug(config.getDebug()).doRequest(KieProcessesQueryResult.class);
    if (null != result && null != result.getProcesses() && !result.getProcesses().isEmpty()) {
      list=result.getProcesses();
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return list;
}","@Override public List<kieProcess> getProcessDefinitionsList() throws ApsSystemException {
  Map<String,String> headersMap=new HashMap<>();
  List<kieProcess> list=new ArrayList<>();
  if (!config.getActive()) {
    return list;
  }
  try {
    KieClient client=getCurrentClient();
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieProcessesQueryResult result=(KieProcessesQueryResult)new KieRequestBuilder(client).setEndpoint(KieEndpointDictionary.create().get(API_GET_PROCESS_DEFINITIONS_LIST)).setHeaders(headersMap).setDebug(config.getDebug()).doRequest(KieProcessesQueryResult.class);
    if (null != result && null != result.getProcesses() && !result.getProcesses().isEmpty()) {
      list=result.getProcesses();
      for (      kieProcess process : list) {
        process.setKieSourceId(config.getId());
      }
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return list;
}"
42457,"@Override public KieProcessFormQueryResult getProcessForm(String containerId,String processId) throws ApsSystemException {
  KieProcessFormQueryResult result=null;
  if (!config.getActive() || StringUtils.isBlank(containerId) || StringUtils.isBlank(processId)) {
    return result;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_PROCESS_DEFINITION).resolveParams(containerId,processId);
    KieClient client=getCurrentClient();
    result=(KieProcessFormQueryResult)new KieRequestBuilder(client).setEndpoint(ep).setDebug(config.getDebug()).setUnmarshalOptions(false,true).doRequest(KieProcessFormQueryResult.class);
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  try {
    List<KieFormOverride> overrides=overrideManager.getFormOverrides(containerId,processId);
    BpmToFormHelper.appendOverridesToForm(result,overrides);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
  return result;
}","@Override public KieProcessFormQueryResult getProcessForm(String containerId,String processId) throws ApsSystemException {
  logger.info(""String_Node_Str"",containerId,processId);
  KieProcessFormQueryResult result=null;
  if (!config.getActive() || StringUtils.isBlank(containerId) || StringUtils.isBlank(processId)) {
    return result;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_PROCESS_DEFINITION).resolveParams(containerId,processId);
    KieClient client=getCurrentClient();
    result=(KieProcessFormQueryResult)new KieRequestBuilder(client).setEndpoint(ep).setDebug(config.getDebug()).setUnmarshalOptions(false,true).doRequest(KieProcessFormQueryResult.class);
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  try {
    List<KieFormOverride> overrides=overrideManager.getFormOverrides(containerId,processId);
    BpmToFormHelper.appendOverridesToForm(result,overrides);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
  return result;
}"
42458,"/** 
 * Collect data from the human task form data
 * @param form
 * @param data data JSON returned from the API
 * @return
 * @throws Throwable
 * @note the visit is destructive of the data field
 */
private static void fetchHumanTaskFormData(final KieProcessFormQueryResult form,final JSONObject data,Map<String,Object> result) throws Throwable {
  if (null == form || null == data) {
    return;
  }
  if (null != form.getNestedForms() && !form.getNestedForms().isEmpty()) {
    for (    KieProcessFormQueryResult subForm : form.getNestedForms()) {
      getHumanTaskFormData(subForm,data,result);
    }
  }
  if (null == form.getFields() || form.getFields().isEmpty()) {
    return;
  }
  KieDataHolder dataModeler=BpmToFormHelper.getFormDataModelerEntry(form);
  Object obj=JsonHelper.findKey(data,dataModeler.getValue());
  if (null == obj || !(obj instanceof JSONObject)) {
    throw new RuntimeException(""String_Node_Str"" + dataModeler.getValue());
  }
  JSONObject section=(JSONObject)obj;
  String sectionName=dataModeler.getId();
  List<String> sectionFields=new ArrayList<>();
  for (  KieProcessFormField field : form.getFields()) {
    String jsonName=FormToBpmHelper.generateFieldNameForInput(field,sectionName);
    Object value=null;
    try {
      value=section.get(jsonName);
    }
 catch (    org.json.JSONException ex) {
    }
    if (JSONObject.NULL == value) {
      result.put(field.getName(),null);
    }
 else {
      result.put(field.getName(),value);
    }
  }
  for (  String name : JSONObject.getNames(section)) {
    final String key=generateFieldNameForOutput(name,sectionName);
    final Object value=section.get(name);
    if (value instanceof JSONObject) {
      continue;
    }
    if (JSONObject.NULL == value) {
      result.put(key,null);
    }
 else {
      result.put(key,value);
    }
  }
  JsonHelper.replaceKey(data,dataModeler.getValue(),""String_Node_Str"");
}","/** 
 * Collect data from the human task form data
 * @param form
 * @param data data JSON returned from the API
 * @return
 * @throws Throwable
 * @note the visit is destructive of the data field
 */
private static void fetchHumanTaskFormData(final KieProcessFormQueryResult form,final JSONObject data,Map<String,Object> result) throws Throwable {
  if (null == form || null == data) {
    return;
  }
  if (null != form.getNestedForms() && !form.getNestedForms().isEmpty()) {
    for (    KieProcessFormQueryResult subForm : form.getNestedForms()) {
      getHumanTaskFormData(subForm,data,result);
    }
  }
  if (null == form.getFields() || form.getFields().isEmpty()) {
    return;
  }
  KieDataHolder dataModeler=BpmToFormHelper.getFormDataModelerEntry(form);
  if (dataModeler != null) {
    Object obj=JsonHelper.findKey(data,dataModeler.getValue());
    if (null == obj || !(obj instanceof JSONObject)) {
      throw new RuntimeException(""String_Node_Str"" + dataModeler.getValue());
    }
    JSONObject section=(JSONObject)obj;
    String sectionName=dataModeler.getId();
    List<String> sectionFields=new ArrayList<>();
    for (    KieProcessFormField field : form.getFields()) {
      String jsonName=FormToBpmHelper.generateFieldNameForInput(field,sectionName);
      Object value=null;
      try {
        value=section.get(jsonName);
      }
 catch (      org.json.JSONException ex) {
      }
      if (JSONObject.NULL == value) {
        result.put(field.getName(),null);
      }
 else {
        result.put(field.getName(),value);
      }
    }
    for (    String name : JSONObject.getNames(section)) {
      final String key=generateFieldNameForOutput(name,sectionName);
      final Object value=section.get(name);
      if (value instanceof JSONObject) {
        continue;
      }
      if (JSONObject.NULL == value) {
        result.put(key,null);
      }
 else {
        result.put(key,value);
      }
    }
    JsonHelper.replaceKey(data,dataModeler.getValue(),""String_Node_Str"");
  }
}"
42459,"@Override public synchronized KieServerConfigDto addConfig(KieServerConfigDto configRequest){
  KieServerConfigDto configDto=null;
  try {
    KieBpmConfig newConfig=this.buildConfig(configDto);
    this.getKieFormManager().addConfig(newConfig);
    this.getKieFormManager().getContainersList();
  }
 catch (  Exception t) {
    logger.error(""String_Node_Str"",t);
    throw new RestServerError(""String_Node_Str"",t);
  }
  return configDto;
}","@Override public synchronized KieServerConfigDto addConfig(KieServerConfigDto configRequest){
  KieServerConfigDto configDto=null;
  try {
    KieBpmConfig newConfig=this.buildConfig(configRequest);
    this.getKieFormManager().addConfig(newConfig);
    this.getKieFormManager().getContainersList();
    configDto=this.getKieServerConfigDtoBuilder().convert(newConfig);
  }
 catch (  Exception t) {
    logger.error(""String_Node_Str"",t);
    throw new RestServerError(""String_Node_Str"",t);
  }
  return configDto;
}"
42460,"@Override public KieServerConfigDto updateConfig(KieServerConfigDto configRequest){
  KieServerConfigDto configDto=null;
  try {
    Map<String,KieBpmConfig> map=this.getKieFormManager().getKieServerConfigurations();
    KieBpmConfig config=map.get(configRequest.getId());
    if (null == config) {
      throw new RestRourceNotFoundException(ConfigValidator.ERRCODE_CONFIG_NOT_FOUND,""String_Node_Str"",configRequest.getId());
    }
    this.getKieFormManager().setKieServerConfiguration(configRequest.getId());
    this.getKieFormManager().addConfig(config);
    this.getKieFormManager().getContainersList();
  }
 catch (  RestRourceNotFoundException t) {
    throw t;
  }
catch (  Exception t) {
    logger.error(""String_Node_Str"",t);
    throw new RestServerError(""String_Node_Str"",t);
  }
  return configDto;
}","@Override public KieServerConfigDto updateConfig(KieServerConfigDto configRequest){
  KieServerConfigDto configDto=null;
  try {
    Map<String,KieBpmConfig> map=this.getKieFormManager().getKieServerConfigurations();
    KieBpmConfig config=map.get(configRequest.getId());
    if (null == config) {
      throw new RestRourceNotFoundException(ConfigValidator.ERRCODE_CONFIG_NOT_FOUND,""String_Node_Str"",configRequest.getId());
    }
    KieBpmConfig newConfig=this.buildConfig(configRequest);
    this.getKieFormManager().setKieServerConfiguration(configRequest.getId());
    this.getKieFormManager().addConfig(newConfig);
    this.getKieFormManager().getContainersList();
    configDto=this.getKieServerConfigDtoBuilder().convert(newConfig);
  }
 catch (  RestRourceNotFoundException t) {
    throw t;
  }
catch (  Exception t) {
    logger.error(""String_Node_Str"",t);
    throw new RestServerError(""String_Node_Str"",t);
  }
  return configDto;
}"
42461,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getChannel());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42462,"public String deleteComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().deleteCaseComments(this.getContainerid(),this.getCasePath(),this.getCaseCommentId());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String deleteComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().deleteCaseComments(this.getContainerid(),this.getCasePath(),this.getCaseCommentId());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42463,"public String updateComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().updateCaseComments(this.getContainerid(),this.getCasePath(),this.getCaseCommentId(),this.getCommentInput());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String updateComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().updateCaseComments(this.getContainerid(),this.getCasePath(),this.getCaseCommentId(),this.getCommentInput());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42464,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getFrontEndCaseData());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getChannel());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getChannel());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42465,"public String postComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().postCaseComments(this.getContainerid(),this.getCasePath(),this.getCommentInput());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String postComment(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().postCaseComments(this.getContainerid(),this.getCasePath(),this.getCommentInput());
      this.setComments(this.getCaseManager().getCaseComments(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42466,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setCaseInstanceDetails(this.getCaseManager().getCaseInstancesDetails(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getChannel());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42467,"public String updateData(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    System.out.println(""String_Node_Str"" + this.getChannel());
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      System.out.println(""String_Node_Str"" + this.getChannelPath() + ""String_Node_Str""+ this.getContainerid()+ ""String_Node_Str""+ this.getCasePath()+ ""String_Node_Str""+ this.getData());
      this.getCaseManager().postCaseFile(this.getContainerid(),this.getCasePath(),this.getData());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String updateData(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().postCaseFile(this.getContainerid(),this.getCasePath(),this.getData());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42468,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    System.out.println(""String_Node_Str"" + this.getChannel());
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setChannelPath(this.getChannel());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setChannelPath(this.getChannel());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42469,"public String deleteData(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      System.out.println(""String_Node_Str"" + this.getChannelPath() + ""String_Node_Str""+ this.getContainerid()+ ""String_Node_Str""+ this.getCasePath()+ ""String_Node_Str""+ this.getDataId());
      this.getCaseManager().deleteCaseFile(this.getContainerid(),this.getCasePath(),this.getDataId());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String deleteData(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().deleteCaseFile(this.getContainerid(),this.getCasePath(),this.getDataId());
      this.setCasefile(this.getCaseManager().getCaseFile(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42470,"public String deleteRole(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      System.out.println(""String_Node_Str"" + this.getChannelPath() + ""String_Node_Str""+ this.getContainerid()+ ""String_Node_Str""+ this.getCasePath()+ ""String_Node_Str""+ this.getCaseRoleName()+ ""String_Node_Str""+ this.getUser()+ ""String_Node_Str""+ this.getGroup());
      this.getCaseManager().deleteCaseRoles(this.getContainerid(),this.getCasePath(),this.getCaseRoleName(),this.getUser(),this.getGroup());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String deleteRole(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().deleteCaseRoles(this.getContainerid(),this.getCasePath(),this.getCaseRoleName(),this.getUser(),this.getGroup());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42471,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getFrontEndCaseData());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if ((!StringUtils.isBlank(this.getKnowledgeSourceId()) || !StringUtils.isBlank(this.getContainerid()) || !StringUtils.isBlank(this.getCasePath())|| !StringUtils.isBlank(this.getChannelPath())) && (this.getChannelPath().equalsIgnoreCase(this.getChannel()))) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
 else {
      this.setKnowledgeSourceId(this.getCaseManager().loadFirstConfigurations().getId());
      this.setContainerid(this.getCaseManager().getContainersList().get(0).getContainerId());
      this.setCasePath(this.getCaseManager().getCaseInstancesList(this.getContainerid()).get(0));
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
      this.setChannelPath(this.getChannel());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42472,"public String addRole(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getFrontEndCaseData())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      System.out.println(""String_Node_Str"" + this.getChannelPath() + ""String_Node_Str""+ this.getContainerid()+ ""String_Node_Str""+ this.getCasePath()+ ""String_Node_Str""+ this.getCaseRoleName()+ ""String_Node_Str""+ this.getUser()+ ""String_Node_Str""+ this.getGroup());
      this.getCaseManager().addCaseRoles(this.getContainerid(),this.getCasePath(),this.getCaseRoleName(),this.getUser(),this.getGroup());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String addRole(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndCaseData(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    if (this.getChannelPath().equalsIgnoreCase(this.getChannel())) {
      this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
      this.getCaseManager().addCaseRoles(this.getContainerid(),this.getCasePath(),this.getCaseRoleName(),this.getUser(),this.getGroup());
      this.setRoles(this.getCaseManager().getCaseRoles(this.getContainerid(),this.getCasePath()).toString());
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42473,"public String selectCaseInstance(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    JSONObject frontEndCaseDataInjs=new JSONObject(frontEndCaseDataIn);
    this.setKnowledgeSourceId(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setContainerid(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setChannelPath(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
    this.setCases(this.getCaseManager().getCaseInstancesList(this.getContainerid()));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String selectCaseInstance(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    JSONObject frontEndCaseDataInjs=new JSONObject(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    this.setKnowledgeSourceId(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setContainerid(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setChannelPath(this.getChannel());
    this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
    this.setCases(this.getCaseManager().getCaseInstancesList(this.getContainerid()));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42474,"public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    JSONObject frontEndCaseDataInjs=new JSONObject(frontEndCaseDataIn);
    this.setKnowledgeSourceId(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setContainerid(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setChannelPath(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
    this.setCases(this.getCaseManager().getCaseInstancesList(this.getContainerid()));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndCaseDataIn=extractWidgetConfig(""String_Node_Str"");
    JSONObject frontEndCaseDataInjs=new JSONObject(frontEndCaseDataIn);
    String channelIn=extractWidgetConfig(""String_Node_Str"");
    this.setChannel(channelIn);
    this.setKnowledgeSourceId(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setContainerid(frontEndCaseDataInjs.getString(""String_Node_Str""));
    this.setChannelPath(this.getChannel());
    this.getCaseManager().setKieServerConfiguration(this.getKnowledgeSourceId());
    this.setCases(this.getCaseManager().getCaseInstancesList(this.getContainerid()));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42475,"public String selectCaseInstance(){
  try {
    String containerid=getContainerIDfromfrontEndMilestonesData(this.getFrontEndMilestonesData());
    this.setCases(this.getCaseManager().getCaseInstancesList(containerid));
    String updatedMilestones=this.getCaseManager().getMilestonesList(containerid,this.getCasePath()).toString();
    this.setCaseInstanceMilestones(updatefrontEndMilestonesDataMilestones(this.getFrontEndMilestonesData(),updatedMilestones));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String selectCaseInstance(){
  try {
    String containerid=getContainerIDfromfrontEndMilestonesData(this.getFrontEndMilestonesData());
    this.getCaseManager().setKieServerConfiguration(getKieIDfromfrontEndMilestonesData(this.getFrontEndMilestonesData()));
    this.setCases(this.getCaseManager().getCaseInstancesList(containerid));
    String updatedMilestones=this.getCaseManager().getMilestonesList(containerid,this.getCasePath()).toString();
    this.setCaseInstanceMilestones(updatefrontEndMilestonesDataMilestones(this.getFrontEndMilestonesData(),updatedMilestones));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42476,"public String view(){
  try {
    String frontEndMilestonesDataIn=extractWidgetConfig(""String_Node_Str"");
    this.setFrontEndMilestonesData(frontEndMilestonesDataIn);
    this.getCaseManager().setKieServerConfiguration(getKieIDfromfrontEndMilestonesData(frontEndMilestonesDataIn));
    this.setCases(this.getCaseManager().getCaseInstancesList(getContainerIDfromfrontEndMilestonesData(frontEndMilestonesDataIn)));
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}","public String view(){
  try {
    String frontEndMilestonesDataIn=extractWidgetConfig(""String_Node_Str"");
    String containerid=getContainerIDfromfrontEndMilestonesData(frontEndMilestonesDataIn);
    this.setFrontEndMilestonesData(frontEndMilestonesDataIn);
    this.getCaseManager().setKieServerConfiguration(getKieIDfromfrontEndMilestonesData(frontEndMilestonesDataIn));
    this.setCases(this.getCaseManager().getCaseInstancesList(containerid));
    if (!StringUtils.isBlank(this.getCasePath())) {
      String updatedMilestones=this.getCaseManager().getMilestonesList(containerid,this.getCasePath()).toString();
      this.setCaseInstanceMilestones(updatefrontEndMilestonesDataMilestones(frontEndMilestonesDataIn,updatedMilestones));
    }
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",t);
    return FAILURE;
  }
  return SUCCESS;
}"
42477,"public JSONArray getMilestonesList(String containerId,String caseID) throws ApsSystemException {
  this.setKieBpmConfig(super.getConfig());
  JSONArray milestonesList=null;
  Map<String,String> headersMap=new HashMap<>();
  Map<String,String> param=new HashMap<>();
  String result;
  JSONObject json;
  if (!this.getKieBpmConfig().getActive() || StringUtils.isBlank(containerId) || StringUtils.isBlank(caseID)) {
    return milestonesList;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_MILESTONES_LIST).resolveParams(containerId,caseID);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    param.put(HEADER_MILESTONES_ACHIEVEDONLY_PARM,HEADER_MILESTONES_ACHIEVEDONLY_FALSE);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setRequestParams(param).setDebug(this.getKieBpmConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      milestonesList=(JSONArray)json.get(""String_Node_Str"");
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return milestonesList;
}","public JSONArray getMilestonesList(String containerId,String caseID) throws ApsSystemException {
  super.setConfig(super.getConfig());
  JSONArray milestonesList=null;
  Map<String,String> headersMap=new HashMap<>();
  Map<String,String> param=new HashMap<>();
  String result;
  JSONObject json;
  if (!super.getConfig().getActive() || StringUtils.isBlank(containerId) || StringUtils.isBlank(caseID)) {
    return milestonesList;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_MILESTONES_LIST).resolveParams(containerId,caseID);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    param.put(HEADER_MILESTONES_ACHIEVEDONLY_PARM,HEADER_MILESTONES_ACHIEVEDONLY_FALSE);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setRequestParams(param).setDebug(super.getConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      milestonesList=(JSONArray)json.get(""String_Node_Str"");
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return milestonesList;
}"
42478,"public JSONArray getKieServerStasus() throws ApsSystemException {
  Map<String,String> headersMap=new HashMap<>();
  JSONArray ServersStatus=new JSONArray();
  String result=null;
  JSONObject json=null;
  HashMap<String,KieBpmConfig> ServerConfigurations=super.getKieServerConfigurations();
  for (  String key : ServerConfigurations.keySet()) {
    this.setKieBpmConfig(ServerConfigurations.get(key));
    try {
      Endpoint ep=KieEndpointDictionary.create().get(API_GET_SERVER_STATUS);
      headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
      KieClient client=super.getCurrentClient();
      result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(this.getKieBpmConfig().getDebug()).doRequest();
      if (!result.isEmpty()) {
        json=new JSONObject(result);
        JSONObject serverStatusJson=new JSONObject();
        serverStatusJson.put(""String_Node_Str"",this.getKieBpmConfig().getId());
        serverStatusJson.put(""String_Node_Str"",json);
        JSONObject serverConfJson=new JSONObject();
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getActive());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getId());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getName());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getUsername());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getPassword());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getHostname());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getPort());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getSchema());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getWebapp());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getTimeoutMsec());
        serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getDebug());
        serverStatusJson.put(""String_Node_Str"",serverConfJson);
        ServersStatus.put(serverStatusJson);
        logger.debug(""String_Node_Str"",result);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      JSONObject serverStatusJson=new JSONObject();
      serverStatusJson.put(""String_Node_Str"",this.getKieBpmConfig().getId());
      serverStatusJson.put(""String_Node_Str"",""String_Node_Str"");
      JSONObject serverConfJson=new JSONObject();
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getActive());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getId());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getName());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getUsername());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getPassword());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getHostname());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getPort());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getSchema());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getWebapp());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getTimeoutMsec());
      serverConfJson.put(""String_Node_Str"",this.getKieBpmConfig().getDebug());
      serverStatusJson.put(""String_Node_Str"",serverConfJson);
      ServersStatus.put(serverStatusJson);
      logger.debug(""String_Node_Str"" + t);
    }
  }
  return ServersStatus;
}","public JSONArray getKieServerStasus() throws ApsSystemException {
  KieBpmConfig setKieBpmConfig=super.getConfig();
  Map<String,String> headersMap=new HashMap<>();
  JSONArray ServersStatus=new JSONArray();
  String result=null;
  JSONObject json=null;
  HashMap<String,KieBpmConfig> ServerConfigurations=super.getKieServerConfigurations();
  for (  String key : ServerConfigurations.keySet()) {
    super.setConfig(ServerConfigurations.get(key));
    try {
      Endpoint ep=KieEndpointDictionary.create().get(API_GET_SERVER_STATUS);
      headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
      KieClient client=super.getCurrentClient();
      result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(super.getConfig().getDebug()).doRequest();
      if (!result.isEmpty()) {
        json=new JSONObject(result);
        JSONObject serverStatusJson=new JSONObject();
        serverStatusJson.put(""String_Node_Str"",super.getConfig().getId());
        serverStatusJson.put(""String_Node_Str"",json);
        JSONObject serverConfJson=new JSONObject();
        serverConfJson.put(""String_Node_Str"",super.getConfig().getActive());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getId());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getName());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getUsername());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getPassword());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getHostname());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getPort());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getSchema());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getWebapp());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getTimeoutMsec());
        serverConfJson.put(""String_Node_Str"",super.getConfig().getDebug());
        serverStatusJson.put(""String_Node_Str"",serverConfJson);
        ServersStatus.put(serverStatusJson);
        logger.debug(""String_Node_Str"",result);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      JSONObject serverStatusJson=new JSONObject();
      serverStatusJson.put(""String_Node_Str"",super.getConfig().getId());
      serverStatusJson.put(""String_Node_Str"",""String_Node_Str"");
      JSONObject serverConfJson=new JSONObject();
      serverConfJson.put(""String_Node_Str"",super.getConfig().getActive());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getId());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getName());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getUsername());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getPassword());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getHostname());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getPort());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getSchema());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getWebapp());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getTimeoutMsec());
      serverConfJson.put(""String_Node_Str"",super.getConfig().getDebug());
      serverStatusJson.put(""String_Node_Str"",serverConfJson);
      ServersStatus.put(serverStatusJson);
      logger.debug(""String_Node_Str"" + t);
    }
  }
  super.setConfig(setKieBpmConfig);
  return ServersStatus;
}"
42479,"public List<String> getCaseInstancesList(String containerId) throws ApsSystemException {
  this.setKieBpmConfig(super.getConfig());
  List<String> casesList=new ArrayList<>();
  Map<String,String> headersMap=new HashMap<>();
  String result;
  JSONObject json=null;
  if (!this.getKieBpmConfig().getActive() || StringUtils.isBlank(containerId)) {
    return casesList;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_CASES_LIST).resolveParams(containerId);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(this.getKieBpmConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      JSONArray instances=(JSONArray)json.get(""String_Node_Str"");
      for (int i=0; i < instances.length(); i++) {
        JSONObject iJson=instances.getJSONObject(i);
        casesList.add(iJson.getString(""String_Node_Str""));
      }
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return casesList;
}","public List<String> getCaseInstancesList(String containerId) throws ApsSystemException {
  List<String> casesList=new ArrayList<>();
  Map<String,String> headersMap=new HashMap<>();
  String result;
  JSONObject json=null;
  if (!super.getConfig().getActive() || StringUtils.isBlank(containerId)) {
    return casesList;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_CASES_LIST).resolveParams(containerId);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(super.getConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      JSONArray instances=(JSONArray)json.get(""String_Node_Str"");
      for (int i=0; i < instances.length(); i++) {
        JSONObject iJson=instances.getJSONObject(i);
        casesList.add(iJson.getString(""String_Node_Str""));
      }
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return casesList;
}"
42480,"public JSONObject getCasesDefinitions(String containerId) throws ApsSystemException {
  this.setKieBpmConfig(super.getConfig());
  Map<String,String> headersMap=new HashMap<>();
  String result=null;
  JSONObject json=null;
  if (!this.getKieBpmConfig().getActive() || StringUtils.isBlank(containerId)) {
    return json;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_CASES_DEFINITIONS).resolveParams(containerId);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(this.getKieBpmConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return json;
}","public JSONObject getCasesDefinitions(String containerId) throws ApsSystemException {
  Map<String,String> headersMap=new HashMap<>();
  String result=null;
  JSONObject json=null;
  if (!super.getConfig().getActive() || StringUtils.isBlank(containerId)) {
    return json;
  }
  try {
    Endpoint ep=KieEndpointDictionary.create().get(API_GET_CASES_DEFINITIONS).resolveParams(containerId);
    headersMap.put(HEADER_KEY_ACCEPT,HEADER_VALUE_JSON);
    KieClient client=super.getCurrentClient();
    result=(String)new KieRequestBuilder(client).setEndpoint(ep).setHeaders(headersMap).setDebug(super.getConfig().getDebug()).doRequest();
    if (!result.isEmpty()) {
      json=new JSONObject(result);
      logger.debug(""String_Node_Str"",result);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return json;
}"
42481,"/** 
 * add service configuration
 * @param config
 * @return
 * @throws com.agiletec.aps.system.exception.ApsSystemException
 */
public KieBpmConfig addConfig(KieBpmConfig config) throws ApsSystemException ;","/** 
 * add service configuration
 * @param config
 * @throws com.agiletec.aps.system.exception.ApsSystemException
 */
public void addConfig(KieBpmConfig config) throws ApsSystemException ;"
42482,"@Override public void init() throws Exception {
  try {
    loadConfigurations();
    logger.info(""String_Node_Str"",this.getClass().getName(),config.getActive());
  }
 catch (  ApsSystemException t) {
    logger.error(""String_Node_Str"",this.getClass().getName(),t);
  }
}","@Override public void init(){
}"
42483,"@Override public KieBpmConfig addConfig(KieBpmConfig config) throws ApsSystemException {
  try {
    if (null != config) {
      if (StringUtils.isBlank(config.getId())) {
        String uuid=generateNewUUID();
        config.setId(uuid);
      }
      ConfigInterface configManager=this.getConfigManager();
      String xmlin=configManager.getConfigItem(KieBpmSystemConstants.KIE_BPM_CONFIG_ITEM);
      KiaBpmConfigFactory kBpmConfFctry=(KiaBpmConfigFactory)JAXBHelper.unmarshall(xmlin,KiaBpmConfigFactory.class,true,false);
      kBpmConfFctry.addKiaBpmConfig(config);
      String xml=JAXBHelper.marshall(kBpmConfFctry,true,false);
      configManager.updateConfigItem(KieBpmSystemConstants.KIE_BPM_CONFIG_ITEM,xml);
      this.config=config;
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
  return config;
}","@Override public void addConfig(KieBpmConfig config) throws ApsSystemException {
  try {
    if (null != config) {
      if (StringUtils.isBlank(config.getId())) {
        String uuid=generateNewUUID();
        config.setId(uuid);
      }
      ConfigInterface configManager=this.getConfigManager();
      String xmlin=configManager.getConfigItem(KieBpmSystemConstants.KIE_BPM_CONFIG_ITEM);
      KiaBpmConfigFactory kBpmConfFctry=(KiaBpmConfigFactory)JAXBHelper.unmarshall(xmlin,KiaBpmConfigFactory.class,true,false);
      kBpmConfFctry.addKiaBpmConfig(config);
      String xml=JAXBHelper.marshall(kBpmConfFctry,true,false);
      configManager.updateConfigItem(KieBpmSystemConstants.KIE_BPM_CONFIG_ITEM,xml);
      this.config=config;
    }
  }
 catch (  Throwable t) {
    throw new ApsSystemException(""String_Node_Str"",t);
  }
}"
42484,"public String testall(){
  try {
    JSONArray output=new JSONArray();
    HashMap<String,KieBpmConfig> ServerConfigurations=this.getCaseManager().getKieServerConfigurations();
    for (    String key : ServerConfigurations.keySet()) {
      this.getCaseManager().setKieBpmConfig(ServerConfigurations.get(key));
      JSONObject serverJS=new JSONObject();
      serverJS.put(""String_Node_Str"",key);
      try {
        this.getCaseManager().getContainersList();
        serverJS.put(""String_Node_Str"",true);
      }
 catch (      Throwable t) {
        _logger.error(""String_Node_Str"",t);
        serverJS.put(""String_Node_Str"",false);
      }
      output.put(serverJS);
    }
    this.setKnowledgeSource(this.getFormManager().getKieServerConfigurations());
    this.setKnowledgeSourceStatus(this.getCaseManager().getKieServerStasus().toString());
    this.addActionMessage(this.getText(""String_Node_Str""));
    this.setKnowledgeSourceTestAllResult(output.toString());
  }
 catch (  Throwable t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    return FAILURE;
  }
  return SUCCESS;
}","public String testall(){
  try {
    KieBpmConfig setKieBpmConfig=this.getCaseManager().getConfig();
    JSONArray output=new JSONArray();
    HashMap<String,KieBpmConfig> ServerConfigurations=this.getCaseManager().getKieServerConfigurations();
    for (    String key : ServerConfigurations.keySet()) {
      this.getCaseManager().setConfig(ServerConfigurations.get(key));
      JSONObject serverJS=new JSONObject();
      serverJS.put(""String_Node_Str"",key);
      try {
        this.getCaseManager().getContainersList();
        serverJS.put(""String_Node_Str"",true);
      }
 catch (      ApsSystemException e) {
        _logger.error(""String_Node_Str"",e);
        serverJS.put(""String_Node_Str"",false);
      }
      output.put(serverJS);
    }
    this.getCaseManager().setConfig(setKieBpmConfig);
    this.setKnowledgeSource(this.getFormManager().getKieServerConfigurations());
    this.setKnowledgeSourceStatus(this.getCaseManager().getKieServerStasus().toString());
    this.addActionMessage(this.getText(""String_Node_Str""));
    this.setKnowledgeSourceTestAllResult(output.toString());
  }
 catch (  ApsSystemException|JSONException t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    return FAILURE;
  }
  return SUCCESS;
}"
42485,"@Override public String doRequest() throws Throwable {
  String responseBody=null;
  HttpResponse response=executeRequest();
  if (_execute) {
    InputStream ris=checkResponse(response);
    responseBody=IOUtils.toString(ris,""String_Node_Str"");
    if (_debug) {
      logger.info(""String_Node_Str"",responseBody);
    }
    close();
  }
  return responseBody;
}","@Override public String doRequest() throws Throwable {
  String responseBody=null;
  HttpResponse response=executeRequest();
  if (_execute) {
    InputStream ris=checkResponse(response);
    if (null != ris) {
      responseBody=IOUtils.toString(ris,""String_Node_Str"");
      if (_debug) {
        logger.info(""String_Node_Str"",responseBody);
      }
    }
 else     if (_debug) {
      logger.info(""String_Node_Str"");
    }
 else {
    }
    close();
  }
  return responseBody;
}"
42486,"@Override public List<UserDetails> searchUsers(String text,Boolean entandoUser) throws ApsSystemException {
  if (!isActive()) {
    return super.searchUsers(text);
  }
  try {
    if (entandoUser == null) {
      return this.searchUsers(text);
    }
    IUserDAO userDAO=entandoUser.booleanValue() ? super.getUserDAO() : this.getLdapUserDAO();
    if (text == null || text.trim().length() == 0) {
      return userDAO.loadUsers();
    }
    return userDAO.searchUsers(text);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",t);
    throw new ApsSystemException(""String_Node_Str"",t);
  }
}","@Override public List<UserDetails> searchUsers(String text,Boolean entandoUser) throws ApsSystemException {
  if (!isActive()) {
    if (null == entandoUser || !entandoUser) {
      return new ArrayList<UserDetails>();
    }
    return super.searchUsers(text);
  }
  try {
    if (entandoUser == null) {
      return this.searchUsers(text);
    }
    IUserDAO userDAO=(entandoUser) ? super.getUserDAO() : this.getLdapUserDAO();
    if (text == null || text.trim().length() == 0) {
      return userDAO.loadUsers();
    }
    return userDAO.searchUsers(text);
  }
 catch (  Throwable t) {
    _logger.error(""String_Node_Str"",t);
    throw new ApsSystemException(""String_Node_Str"",t);
  }
}"
42487,"@Override public String edit(){
  this.setStrutsAction(ApsAdminSystemConstants.EDIT);
  try {
    String result=this.checkUserForEdit();
    if (null != result)     return result;
    String username=this.getUsername();
    UserDetails user=this.getUserManager().getUser(username);
    if (!user.isEntandoUser() && !this.isWriteUserEnable()) {
      this.addActionError(this.getText(""String_Node_Str""));
      return ""String_Node_Str"";
    }
    this.setRemoteUser(!user.isEntandoUser());
    this.setActive(!user.isDisabled());
    this.setUser(user);
  }
 catch (  Throwable t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    return FAILURE;
  }
  return SUCCESS;
}","@Override public String edit(){
  this.setStrutsAction(ApsAdminSystemConstants.EDIT);
  try {
    String result=this.checkUserForEdit();
    if (null != result)     return result;
    String username=this.getUsername();
    UserDetails user=this.getUserManager().getUser(username);
    this.setRemoteUser(!user.isEntandoUser());
    this.setActive(!user.isDisabled());
    this.setUser(user);
  }
 catch (  Throwable t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    return FAILURE;
  }
  return SUCCESS;
}"
42488,"@Override public List<String> getSearchResult(){
  List<String> mainSearchResult=super.getSearchResult();
  try {
    Integer userType=this.getUserType();
    if (null == userType || userType == 0) {
      return mainSearchResult;
    }
 else {
      Boolean entandoUser=userType.intValue() == 1;
      List<String> ldapUsernames=this.getLdapUsernames();
      if (entandoUser) {
        return (List<String>)CollectionUtils.removeAll(mainSearchResult,ldapUsernames);
      }
 else {
        return (List<String>)CollectionUtils.intersection(mainSearchResult,ldapUsernames);
      }
    }
  }
 catch (  Throwable t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"",t);
  }
}","@Override public List<String> getSearchResult(){
  List<String> mainSearchResult=super.getSearchResult();
  try {
    Integer userType=this.getUserType();
    if (null == userType || userType == 0) {
      return mainSearchResult;
    }
 else {
      Boolean entandoUser=(userType == 1);
      List<String> ldapUsernames=this.getLdapUsernames();
      List<String> newList=null;
      if (entandoUser) {
        newList=(List<String>)ListUtils.removeAll(mainSearchResult,ldapUsernames);
      }
 else {
        newList=(List<String>)ListUtils.intersection(mainSearchResult,ldapUsernames);
      }
      return newList;
    }
  }
 catch (  Throwable t) {
    ApsSystemUtils.logThrowable(t,this,""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"",t);
  }
}"
42489,"protected List<String> getLdapUsernames() throws ApsSystemException {
  List<UserDetails> users=((ILdapUserManager)this.getUserManager()).searchUsers(this.getUsername(),true);
  List<String> usernames=new ArrayList<String>();
  if (null != users) {
    for (int i=0; i < users.size(); i++) {
      UserDetails user=users.get(i);
      usernames.add(user.getUsername());
    }
  }
  return usernames;
}","protected List<String> getLdapUsernames() throws ApsSystemException {
  List<UserDetails> users=((ILdapUserManager)this.getUserManager()).searchUsers(this.getUsername(),false);
  List<String> usernames=new ArrayList<String>();
  if (null != users) {
    for (int i=0; i < users.size(); i++) {
      UserDetails user=users.get(i);
      usernames.add(user.getUsername());
    }
  }
  return usernames;
}"
42490,"@Override public String[] getBeanNamesForType(Class<?> type){
  String[] beanNames=super.getBeanNamesForType(type);
  List<ClassPathXmlApplicationContext> contexts=(List<ClassPathXmlApplicationContext>)this.getServletContext().getAttribute(""String_Node_Str"");
  if (contexts != null) {
    for (    ClassPathXmlApplicationContext classPathXmlApplicationContext : contexts) {
      try {
        String[] beanNamesTemp=classPathXmlApplicationContext.getBeanNamesForType(type);
        beanNames=(String[])ArrayUtils.addAll(beanNames,beanNamesTemp);
      }
 catch (      Exception ex) {
      }
    }
  }
  return beanNames;
}","@Override public String[] getBeanNamesForType(Class<?> type){
  String[] beanNames=super.getBeanNamesForType(type);
  List<ClassPathXmlApplicationContext> contexts=(List<ClassPathXmlApplicationContext>)this.getServletContext().getAttribute(""String_Node_Str"");
  if (contexts != null) {
    for (    ClassPathXmlApplicationContext classPathXmlApplicationContext : contexts) {
      String[] beanNamesTemp=classPathXmlApplicationContext.getBeanNamesForType(type);
      beanNames=(String[])ArrayUtils.addAll(beanNames,beanNamesTemp);
      HashSet hs=new HashSet();
      for (int i=0; i < beanNames.length; i++) {
        String beanName=beanNames[i];
        hs.add(beanName);
      }
      beanNames=(String[])hs.toArray(new String[0]);
      Arrays.sort(beanNames);
    }
  }
  return beanNames;
}"
42491,"private File extractArtifactJar(File rootDir,String artifactId) throws ZipException, IOException {
  List<File> files=(List<File>)FileUtils.listFiles(rootDir,new String[]{""String_Node_Str""},true);
  File tempDir=null;
  for (  File jarFile : files) {
    if (jarFile.getName().contains(artifactId)) {
      tempDir=new File(rootDir + File.separator + ""String_Node_Str""+ File.separator+ jarFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
      extractArchiveFile(jarFile,rootDir + File.separator + ""String_Node_Str""+ File.separator+ jarFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  return tempDir;
}","private File extractArtifactJar(File rootDir,String artifactId) throws ZipException, IOException {
  List<File> files=(List<File>)FileUtils.listFiles(rootDir,new String[]{""String_Node_Str""},true);
  File tempDir=null;
  for (  File jarFile : files) {
    if (jarFile.getName().contains(artifactId)) {
      tempDir=new File(rootDir + File.separator + ""String_Node_Str""+ File.separator+ artifactId+ File.separator+ jarFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str""));
      extractArchiveFile(jarFile,rootDir + File.separator + ""String_Node_Str""+ File.separator+ artifactId+ File.separator+ jarFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return tempDir;
}"
42492,"private static String getTipFormatted(String displayName,String tipValue){
  if (displayName.startsWith(""String_Node_Str"")) {
    ScriptEngineManager manager=new ScriptEngineManager();
    ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
    try {
      engine.eval(displayName);
      Invocable invoke=(Invocable)engine;
      return String.valueOf(invoke.invokeFunction(""String_Node_Str"",tipValue));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return ""String_Node_Str"";
    }
  }
 else {
    if (flag == 2) {
      return String.format(""String_Node_Str"",displayName,tipValue);
    }
 else {
      return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",displayName,tipValue);
    }
  }
}","private static String getTipFormatted(String displayName,String tipValue){
  if (displayName.startsWith(""String_Node_Str"")) {
    ScriptEngineManager manager=new ScriptEngineManager(null);
    ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
    try {
      engine.eval(displayName);
      Invocable invoke=(Invocable)engine;
      return String.valueOf(invoke.invokeFunction(""String_Node_Str"",tipValue));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return ""String_Node_Str"";
    }
  }
 else {
    if (flag == 2) {
      return String.format(""String_Node_Str"",displayName,tipValue);
    }
 else {
      return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",displayName,tipValue);
    }
  }
}"
42493,"private static String getTipFormatted(String displayName,String tipValue){
  if (displayName.startsWith(""String_Node_Str"")) {
    ScriptEngineManager manager=new ScriptEngineManager(null);
    ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
    try {
      engine.eval(displayName);
      Invocable invoke=(Invocable)engine;
      return String.valueOf(invoke.invokeFunction(""String_Node_Str"",tipValue));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return ""String_Node_Str"";
    }
  }
 else {
    if (flag == 2) {
      return String.format(""String_Node_Str"",displayName,tipValue);
    }
 else {
      return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",displayName,tipValue);
    }
  }
}","private static String getTipFormatted(String displayName,String tipValue){
  if (displayName.startsWith(""String_Node_Str"")) {
    try {
      engine.eval(displayName);
      Invocable invoke=(Invocable)engine;
      return String.valueOf(invoke.invokeFunction(""String_Node_Str"",tipValue));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return ""String_Node_Str"";
    }
  }
 else {
    if (flag == 2) {
      return String.format(""String_Node_Str"",displayName,tipValue);
    }
 else {
      return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",displayName,tipValue);
    }
  }
}"
42494,"@SideOnly(Side.CLIENT) @Mod.EventHandler public void init(@SuppressWarnings(""String_Node_Str"") FMLInitializationEvent event){
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ClientCommandHandler.instance.registerCommand(new CommandReload());
  ClientCommandHandler.instance.registerCommand(new CommandName());
}","@SideOnly(Side.CLIENT) @Mod.EventHandler public void init(FMLInitializationEvent event){
  proxy.init(event);
}"
42495,"@SideOnly(Side.CLIENT) @Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  LogHelper.info(""String_Node_Str"");
  config.init(event.getModConfigurationDirectory());
  LogHelper.info(""String_Node_Str"");
}","@SideOnly(Side.CLIENT) @Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  proxy.preInit(event);
}"
42496,"@Override public void processCommand(ICommandSender sender,String[] array){
  config.loadConfig();
  sender.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
}","@Override public void processCommand(ICommandSender sender,String[] array){
  config.loadConfig((EntityPlayer)sender);
}"
42497,"public static void init(File dir){
  configDir=new File(dir,Reference.MOD_ID);
  if (!configDir.exists()) {
    try {
      if (configDir.mkdir()) {
        File defaultFile=new File(configDir,""String_Node_Str"");
        if (defaultFile.createNewFile()) {
          LogHelper.info(""String_Node_Str"");
        }
 else {
          LogHelper.error(""String_Node_Str"");
        }
      }
 else {
        LogHelper.error(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      LogHelper.info(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  loadConfig();
}","@SuppressWarnings(""String_Node_Str"") public static void init(File dir,EntityPlayer player){
  configDir=new File(dir,Reference.MOD_ID);
  if (!configDir.exists()) {
    try {
      configDir.mkdir();
      File defaultFile=new File(configDir,""String_Node_Str"");
      defaultFile.createNewFile();
      LogHelper.info(""String_Node_Str"");
      player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
    }
 catch (    Exception e) {
      LogHelper.info(""String_Node_Str"");
      player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
      e.printStackTrace();
    }
  }
  loadConfig(player);
}"
42498,"public static void loadConfig(){
  configJson=new JsonObject();
  File[] configFiles=configDir.listFiles();
  if (!(configFiles == null)) {
    for (    File configFile : configFiles) {
      if (configFile.isFile()) {
        try {
          InputStream inputStream=new FileInputStream(configFile);
          InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
          JsonParser parser=new JsonParser();
          JsonElement jsonElementCurrent=parser.parse(inputStreamReader);
          if (jsonElementCurrent.isJsonObject()) {
            JsonObject jsonObjectCurrent=jsonElementCurrent.getAsJsonObject();
            mergeJson(jsonObjectCurrent);
          }
 else {
            LogHelper.error(""String_Node_Str"" + configFile.toString() + ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          LogHelper.error(""String_Node_Str"" + configFile.getName() + ""String_Node_Str""+ e.getCause().getMessage());
        }
      }
    }
  }
  System.out.println(configJson);
  LogHelper.info(""String_Node_Str"");
}","public static void loadConfig(EntityPlayer player){
  configJson=new JsonObject();
  File[] configFiles=configDir.listFiles();
  if (!(configFiles == null)) {
    for (    File configFile : configFiles) {
      if (configFile.isFile()) {
        try {
          InputStream inputStream=new FileInputStream(configFile);
          InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
          JsonParser parser=new JsonParser();
          JsonElement jsonElementCurrent=parser.parse(inputStreamReader);
          if (jsonElementCurrent.isJsonObject()) {
            JsonObject jsonObjectCurrent=jsonElementCurrent.getAsJsonObject();
            mergeJson(jsonObjectCurrent);
          }
 else {
            LogHelper.error(""String_Node_Str"" + configFile.getName() + ""String_Node_Str"");
            player.addChatComponentMessage(new ChatComponentText(String.format(StatCollector.translateToLocal(""String_Node_Str""),configFile.getName())));
          }
        }
 catch (        Exception e) {
          LogHelper.error(""String_Node_Str"" + configFile.getName() + ""String_Node_Str""+ e.getCause().getMessage());
          player.addChatComponentMessage(new ChatComponentText(String.format(StatCollector.translateToLocal(""String_Node_Str""),configFile.getName())));
        }
      }
    }
  }
  LogHelper.info(""String_Node_Str"");
  System.out.println(configJson);
  player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
}"
42499,"@Override public void processCommand(ICommandSender sender,String[] array){
  EntityPlayer player=(EntityPlayer)sender;
  player.addChatComponentMessage(new ChatComponentText(Item.itemRegistry.getNameForObject(player.getHeldItem().getItem())));
}","@Override public void processCommand(ICommandSender sender,String[] array){
  EntityPlayer player=(EntityPlayer)sender;
  ItemStack holdItem=player.getHeldItem();
  if (holdItem == null) {
    player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
    return;
  }
  player.addChatComponentMessage(new ChatComponentText(Item.itemRegistry.getNameForObject(holdItem.getItem())));
}"
42500,"public static void init(File file){
  configFile=file;
  if (file.exists()) {
    loadConfig();
  }
 else {
    LogHelper.info(""String_Node_Str"");
    try {
      if (file.createNewFile()) {
        LogHelper.info(""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      LogHelper.info(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}","public static void init(File file){
  configFile=file;
  if (!file.exists()) {
    LogHelper.info(""String_Node_Str"");
    try {
      if (file.createNewFile()) {
        LogHelper.info(""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      LogHelper.info(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  loadConfig();
}"
42501,"private static String getTipFromPathDeep(NBTTagCompound n,List<String> pathDeep,String type){
  if (pathDeep.size() == 1) {
    String tagName=pathDeep.get(0);
    return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",tagName,NBTHelper.NBTTypeToString(n,tagName,type));
  }
 else {
    String compoundID=pathDeep.get(0);
    pathDeep.remove(0);
    return getTipFromPathDeep(n.getCompoundTag(compoundID),pathDeep,type);
  }
}","private static String getTipFromPathDeep(NBTTagCompound n,List<String> pathDeep,String type){
  if (pathDeep.size() == 1) {
    String tagName=pathDeep.get(0);
    String value=NBTHelper.NBTTypeToString(n,tagName,type);
    if (value == null) {
      return null;
    }
    return String.format(""String_Node_Str"" + TAB + ALIGNRIGHT+ WHITE+ ""String_Node_Str"",tagName,value);
  }
 else {
    String compoundID=pathDeep.get(0);
    pathDeep.remove(0);
    return getTipFromPathDeep(n.getCompoundTag(compoundID),pathDeep,type);
  }
}"
42502,"/** 
 * @param txt the input text
 * @return a map of abbrev:false <-- not matched yet
 */
static public Set<Abbrev> getAbbrevs(String txt){
  Set<Abbrev> ret=Sets.newHashSet();
  try {
    for (    Acronym a : getModel().predict(txt)) {
      if (a._longForm.indexOf('(') == -1 && a._longForm.indexOf(')') == -1 && !a._longForm.matches(""String_Node_Str"") && a._longForm.length() > 2) {
        ret.add(new Abbrev(a._longForm,a._shortForm));
      }
    }
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + snippetize(txt,20),e);
  }
  return ret;
}","/** 
 * @param txt the input text
 * @return a map of abbrev:false <-- not matched yet
 */
static public Set<Abbrev> getAbbrevs(String txt){
  Set<Abbrev> ret=Sets.newHashSet();
  try {
    for (    Acronym a : getModel().predict(txt)) {
      if (a._longForm.indexOf('(') == -1 && a._longForm.indexOf(')') == -1 && !a._longForm.matches(""String_Node_Str"") && a._shortForm.length() > 1 && a._longForm.length() > 2) {
        ret.add(new Abbrev(a._longForm,a._shortForm));
      }
    }
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + snippetize(txt,20),e);
  }
  return ret;
}"
42503,"public String replace(String txt){
  for (  Pattern p : newArrayList(def1,def2,def3)) {
    Matcher m=p.matcher(txt);
    int idx=0;
    while (m.find(idx)) {
      int s=m.start(), e=m.end();
      txt=txt.substring(0,s) + lf + txt.substring(e);
      idx=e;
    }
  }
  int idx=0;
  while (txt.indexOf(sf,idx) > -1) {
    int at=txt.indexOf(sf,idx);
    if (notLetter(txt,at - 1) && notLetter(txt,at + sf.length())) {
      txt=txt.substring(0,at) + lf + txt.substring(at + sf.length());
    }
    idx=at + sf.length();
  }
  return txt;
}","public String replace(String txt){
  txt=txt.replaceAll(p1,lf).replaceAll(p2,lf).replaceAll(p3,lf);
  int idx=0;
  while (txt.indexOf(sf,idx) > -1) {
    int at=txt.indexOf(sf,idx);
    if (notLetter(txt,at - 1) && notLetter(txt,at + sf.length())) {
      txt=txt.substring(0,at) + lf + txt.substring(at + sf.length());
    }
    idx=at + sf.length();
  }
  return txt;
}"
42504,"private Abbrev(String longForm,String shortForm){
  this.lf=longForm;
  this.sf=shortForm;
  this.def1=compile(""String_Node_Str"" + quote(lf) + ""String_Node_Str""+ quote(sf),CASE_INSENSITIVE);
  this.def2=compile(quote(sf) + ""String_Node_Str"" + quote(lf)+ ""String_Node_Str"",CASE_INSENSITIVE);
  this.def3=compile(quote(lf) + ""String_Node_Str"" + quote(sf)+ ""String_Node_Str"",CASE_INSENSITIVE);
}","private Abbrev(String longForm,String shortForm){
  this.lf=longForm;
  this.sf=shortForm;
  this.p1=""String_Node_Str"" + quote(lf) + ""String_Node_Str""+ quote(sf);
  this.p2=""String_Node_Str"" + quote(sf) + ""String_Node_Str""+ quote(lf)+ ""String_Node_Str"";
  this.p3=""String_Node_Str"" + quote(lf) + ""String_Node_Str""+ quote(sf)+ ""String_Node_Str"";
}"
42505,"/** 
 * Converts a jCas'   {@link Cooccurrence}s to  {@link org.itc.irst.tcc.sre.data.Sentence}s
 * @param < brClass >
 */
static <B extends Annotation>Pair<List<Cooccurrence>,List<SentenceExample>> getSvmSentences(JCas jCas,final Class<B> brClass){
  List<Cooccurrence> retCooc=newArrayList();
  List<SentenceExample> retSentences=newArrayList();
  String pmId=getHeaderDocId(jCas);
  int sentenceId=0;
  Map<Sentence,Collection<B>> brIdx=indexCovered(jCas,Sentence.class,brClass);
  Map<Sentence,Collection<Token>> tokenIdx=indexCovered(jCas,Sentence.class,Token.class);
  for (  Entry<Sentence,Collection<Cooccurrence>> uSentences : indexCovered(jCas,Sentence.class,Cooccurrence.class).entrySet()) {
    Sentence uSentence=uSentences.getKey();
    Collection<Token> tokens=tokenIdx.get(uSentence);
    for (    Cooccurrence c : uSentences.getValue()) {
      List<B> a=Lists.newArrayList(brIdx.get(uSentence));
      Collections.sort(a,new java.util.Comparator<B>(){
        @Override public int compare(        B br1,        B br2){
          return new Integer(br1.getBegin()).compareTo(br2.getBegin());
        }
      }
);
      Annotation[] allBrs=a.toArray(new Annotation[a.size()]);
      Annotation br1=c.getFirstEntity(), br2=c.getSecondEntity();
      boolean matchedBr1=false, matchedBr2=false;
      List<Word> words=newArrayList();
      int tokenId=0;
      Iterator<Token> tokenIt=tokens.iterator();
      while (tokenIt.hasNext()) {
        Token token=tokenIt.next();
        String[] feats=new String[7];
        Annotation coveringBr=null;
        for (int i=0; i < allBrs.length; i++) {
          if (allBrs[i] != null && token.getEnd() > allBrs[i].getBegin()) {
            coveringBr=allBrs[i];
            allBrs[i]=null;
          }
        }
        if (coveringBr != null) {
          boolean endOfBR=false;
          while (!endOfBR && tokenIt.hasNext()) {
            Token nextT=tokenIt.next();
            if (nextT.getEnd() >= coveringBr.getEnd())             endOfBR=true;
          }
        }
        if (coveringBr != null) {
          feats[FORM]=coveringBr.getCoveredText();
          feats[LEMMA]=""String_Node_Str"";
          feats[POS]=token.getPos();
          feats[ENTITY_TYPE]=BR_LABEL;
          boolean matched=false;
          if (coveringBr.equals(br1)) {
            matched=true;
            matchedBr1=true;
          }
 else           if (coveringBr.equals(br2)) {
            matched=true;
            matchedBr2=true;
          }
          if (matched) {
            feats[LABEL]=Word.TARGET_LABEL;
          }
 else {
            feats[LABEL]=Word.OTHER_LABEL;
          }
        }
 else {
          feats[FORM]=token.getCoveredText();
          feats[LEMMA]=token.getLemmaStr();
          feats[POS]=token.getPos();
          feats[ENTITY_TYPE]=Word.OTHER_LABEL;
          feats[LABEL]=Word.OTHER_LABEL;
        }
        feats[STEM]=PorterStemmer.getStemmer().stem(feats[FORM]);
        Word w=new Word(feats,tokenId++);
        words.add(w);
      }
      boolean parsedOk=true;
      if (!matchedBr1) {
        parsedOk=false;
        LOG.error(""String_Node_Str"" + To.string(br1));
      }
 else       if (!matchedBr2) {
        parsedOk=false;
        LOG.error(""String_Node_Str"" + To.string(br2));
      }
      for (int i=0; i < allBrs.length; i++) {
        if (allBrs[i] != null) {
          parsedOk=false;
          LOG.error(""String_Node_Str"" + To.string(allBrs[i]));
        }
      }
      if (parsedOk) {
        org.itc.irst.tcc.sre.data.Sentence sentence=new org.itc.irst.tcc.sre.data.Sentence(words);
        boolean label=c.getHasInteraction();
        int classz=label ? 2 : 0;
        String id=pmId + ""String_Node_Str"" + sentenceId++;
        retCooc.add(c);
        retSentences.add(new SentenceExample(sentence,classz,id));
      }
    }
  }
  return Pair.of(retCooc,retSentences);
}","/** 
 * Converts a jCas'   {@link Cooccurrence}s to  {@link org.itc.irst.tcc.sre.data.Sentence}s
 * @param < brClass >
 */
static <B extends Annotation>Pair<List<Cooccurrence>,List<SentenceExample>> getSvmSentences(JCas jCas,final Class<B> brClass){
  List<Cooccurrence> retCooc=newArrayList();
  List<SentenceExample> retSentences=newArrayList();
  String pmId=getHeaderDocId(jCas);
  int sentenceId=0;
  Map<Sentence,Collection<B>> brIdx=indexCovered(jCas,Sentence.class,brClass);
  Map<Sentence,Collection<Token>> tokenIdx=indexCovered(jCas,Sentence.class,Token.class);
  for (  Entry<Sentence,Collection<Cooccurrence>> uSentences : indexCovered(jCas,Sentence.class,Cooccurrence.class).entrySet()) {
    Sentence uSentence=uSentences.getKey();
    Collection<Token> tokens=tokenIdx.get(uSentence);
    for (    Cooccurrence c : uSentences.getValue()) {
      List<B> a=newArrayList(brIdx.get(uSentence));
      sort(a,new java.util.Comparator<B>(){
        @Override public int compare(        B br1,        B br2){
          return new Integer(br1.getBegin()).compareTo(br2.getBegin());
        }
      }
);
      Annotation[] allBrs=a.toArray(new Annotation[a.size()]);
      Annotation br1=c.getFirstEntity(), br2=c.getSecondEntity();
      boolean matchedBr1=false, matchedBr2=false;
      List<Word> words=newArrayList();
      int tokenId=0;
      Iterator<Token> tokenIt=tokens.iterator();
      while (tokenIt.hasNext()) {
        Token token=tokenIt.next();
        String[] feats=new String[7];
        Annotation coveringBr=null;
        for (int i=0; i < allBrs.length; i++) {
          if (allBrs[i] != null && token.getEnd() > allBrs[i].getBegin()) {
            coveringBr=allBrs[i];
            allBrs[i]=null;
          }
        }
        if (coveringBr != null) {
          boolean endOfBR=false;
          while (!endOfBR && tokenIt.hasNext()) {
            Token nextT=tokenIt.next();
            if (nextT.getEnd() >= coveringBr.getEnd())             endOfBR=true;
          }
        }
        if (coveringBr != null) {
          feats[FORM]=coveringBr.getCoveredText();
          feats[LEMMA]=""String_Node_Str"";
          feats[POS]=token.getPos();
          feats[ENTITY_TYPE]=BR_LABEL;
          boolean matched=false;
          if (coveringBr.equals(br1)) {
            matched=true;
            matchedBr1=true;
          }
 else           if (coveringBr.equals(br2)) {
            matched=true;
            matchedBr2=true;
          }
          if (matched) {
            feats[LABEL]=Word.TARGET_LABEL;
          }
 else {
            feats[LABEL]=Word.OTHER_LABEL;
          }
        }
 else {
          feats[FORM]=token.getCoveredText();
          feats[LEMMA]=token.getLemmaStr();
          feats[POS]=token.getPos();
          feats[ENTITY_TYPE]=Word.OTHER_LABEL;
          feats[LABEL]=Word.OTHER_LABEL;
        }
        feats[STEM]=PorterStemmer.getStemmer().stem(feats[FORM]);
        Word w=new Word(feats,tokenId++);
        words.add(w);
      }
      boolean parsedOk=true;
      if (!matchedBr1) {
        parsedOk=false;
        LOG.error(""String_Node_Str"" + To.string(br1) + ""String_Node_Str"",pmId,br1.getBegin());
      }
 else       if (!matchedBr2) {
        parsedOk=false;
        LOG.error(""String_Node_Str"" + To.string(br2) + ""String_Node_Str"",pmId,br2.getBegin());
      }
      for (int i=0; i < allBrs.length; i++) {
        if (allBrs[i] != null) {
          parsedOk=false;
          LOG.error(""String_Node_Str"" + To.string(allBrs[i]) + ""String_Node_Str"",pmId);
        }
      }
      if (parsedOk) {
        org.itc.irst.tcc.sre.data.Sentence sentence=new org.itc.irst.tcc.sre.data.Sentence(words);
        boolean label=c.getHasInteraction();
        int classz=label ? 2 : 0;
        String id=pmId + ""String_Node_Str"" + sentenceId++;
        retCooc.add(c);
        retSentences.add(new SentenceExample(sentence,classz,id));
      }
    }
  }
  return Pair.of(retCooc,retSentences);
}"
42506,"@Override public void collectionProcessComplete() throws AnalysisEngineProcessException {
  IOUtils.closeQuietly(writer);
}","@Override public void collectionProcessComplete() throws AnalysisEngineProcessException {
  closeQuietly(writer);
}"
42507,"@Override public void process(JCas jCas) throws AnalysisEngineProcessException {
  String pmId=BlueCasUtil.getHeaderDocId(jCas);
  try {
    for (    Annotation a : jCas.getAnnotationIndex()) {
      if (a.getClass().getName().equals(annotationClass)) {
        String featureStr;
        if (featureName != null) {
          featureStr=a.getFeatureValueAsString(a.getType().getFeatureByBaseName(featureName));
        }
 else {
          featureStr=a.getCoveredText();
        }
        if (!(filterFeaturesWithValue != null && featureStr.equals(filterFeaturesWithValue))) {
          writer.append(format(""String_Node_Str"",pmId,a.getBegin(),a.getEnd(),featureStr));
        }
      }
    }
    writer.flush();
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + pmId,e);
  }
}","@Override public void process(JCas jCas) throws AnalysisEngineProcessException {
  String pmId=getHeaderDocId(jCas);
  try {
    for (    Annotation a : jCas.getAnnotationIndex()) {
      if (a.getClass().getName().equals(annotationClass)) {
        String featureStr;
        if (featureName != null) {
          featureStr=a.getFeatureValueAsString(a.getType().getFeatureByBaseName(featureName));
        }
 else {
          featureStr=a.getCoveredText();
        }
        if (!(filterFeaturesWithValue != null && featureStr.equals(filterFeaturesWithValue))) {
          writer.append(format(""String_Node_Str"",pmId,a.getBegin(),a.getEnd(),featureStr));
        }
      }
    }
    writer.flush();
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + pmId,e);
  }
}"
42508,"public void process(JCas jCas) throws AnalysisEngineProcessException {
  Map<Annotation,Integer> annotToDistance=new HashMap<Annotation,Integer>();
  Map<Annotation,Cooccurrence> annotationToCoOccurrence=new HashMap<Annotation,Cooccurrence>();
  for (  Annotation enclosingAnnot : JCasUtil.select(jCas,enclosingScope)) {
    List<? extends Annotation> annots1=asList(subiterate(jCas,annotation1,enclosingAnnot,true,false));
    List<? extends Annotation> annots2=asList(subiterate(jCas,annotation2,enclosingAnnot,true,false));
    if (annots1 != null && annots2 != null && !annots1.isEmpty() && !annots2.isEmpty()) {
      for (      Annotation a1 : annots1) {
        for (        Annotation a2 : annots2) {
          if (a1 != a2) {
            String[] firstIdValues=getValues(firstIdMethods,a1);
            String[] secondIdValues=getValues(secondIdMethods,a2);
            if (keepOnlyNearestNeighbors) {
              int oldDistanceForFirstAnnot=Integer.MAX_VALUE;
              int oldDistanceForSecondAnnot=Integer.MAX_VALUE;
              int distanceBetweenAnnot=BlueCasUtil.distance(a1,a2);
              if (distanceBetweenAnnot != -1) {
                if (annotToDistance.containsKey(a1)) {
                  oldDistanceForFirstAnnot=annotToDistance.get(a1);
                }
                if (annotToDistance.containsKey(a2)) {
                  oldDistanceForSecondAnnot=annotToDistance.get(a2);
                }
                if ((distanceBetweenAnnot < oldDistanceForFirstAnnot) && (distanceBetweenAnnot < oldDistanceForSecondAnnot)) {
                  removeExistingCooccurrences(annotationToCoOccurrence,a1,a2);
                  annotToDistance.put(a1,distanceBetweenAnnot);
                  annotToDistance.put(a2,distanceBetweenAnnot);
                  Cooccurrence cooc=filterCooccurence(jCas,enclosingAnnot,a1,a2,firstIdValues,secondIdValues);
                  if (cooc != null) {
                    annotationToCoOccurrence.put(a1,cooc);
                    annotationToCoOccurrence.put(a2,cooc);
                  }
 else {
                    LOG.warn(""String_Node_Str"");
                  }
                }
              }
            }
 else {
              filterCooccurence(jCas,enclosingAnnot,a1,a2,firstIdValues,secondIdValues);
            }
          }
        }
      }
    }
  }
}","public void process(JCas jCas) throws AnalysisEngineProcessException {
  Map<Annotation,Integer> annotToDistance=newHashMap();
  Map<Annotation,Cooccurrence> annotationToCoOccurrence=newHashMap();
  for (  Annotation enclosingAnnot : select(jCas,enclosingScope)) {
    List<? extends Annotation> annots1=asList(subiterate(jCas,annotation1,enclosingAnnot,true,false));
    List<? extends Annotation> annots2=asList(subiterate(jCas,annotation2,enclosingAnnot,true,false));
    if (annots1 != null && annots2 != null && !annots1.isEmpty() && !annots2.isEmpty()) {
      for (      Annotation a1 : annots1) {
        for (        Annotation a2 : annots2) {
          if (!haveSameBeginEnd(a1,a2)) {
            String[] firstIdValues=getValues(firstIdMethods,a1);
            String[] secondIdValues=getValues(secondIdMethods,a2);
            if (keepOnlyNearestNeighbors) {
              int oldDistanceForFirstAnnot=Integer.MAX_VALUE;
              int oldDistanceForSecondAnnot=Integer.MAX_VALUE;
              int distanceBetweenAnnot=distance(a1,a2);
              if (distanceBetweenAnnot != -1) {
                if (annotToDistance.containsKey(a1)) {
                  oldDistanceForFirstAnnot=annotToDistance.get(a1);
                }
                if (annotToDistance.containsKey(a2)) {
                  oldDistanceForSecondAnnot=annotToDistance.get(a2);
                }
                if ((distanceBetweenAnnot < oldDistanceForFirstAnnot) && (distanceBetweenAnnot < oldDistanceForSecondAnnot)) {
                  removeExistingCooccurrences(annotationToCoOccurrence,a1,a2);
                  annotToDistance.put(a1,distanceBetweenAnnot);
                  annotToDistance.put(a2,distanceBetweenAnnot);
                  Cooccurrence cooc=filterCooccurence(jCas,enclosingAnnot,a1,a2,firstIdValues,secondIdValues);
                  if (cooc != null) {
                    annotationToCoOccurrence.put(a1,cooc);
                    annotationToCoOccurrence.put(a2,cooc);
                  }
 else {
                    LOG.warn(""String_Node_Str"");
                  }
                }
              }
            }
 else {
              filterCooccurence(jCas,enclosingAnnot,a1,a2,firstIdValues,secondIdValues);
            }
          }
        }
      }
    }
  }
}"
42509,"public static String snippet(JCas jCas,int snippetBegin,int snippetEnd,Annotation a1,Annotation a2){
  final String T_BEGIN=""String_Node_Str"";
  final String T_END=""String_Node_Str"";
  String s=jCas.getDocumentText().substring(snippetBegin,snippetEnd);
  String sError=s;
  try {
    int relA1Begin=a1.getBegin() - snippetBegin;
    int relA1End=a1.getEnd() - snippetBegin;
    int relA2Begin=a2.getBegin() - snippetBegin;
    int relA2End=a2.getEnd() - snippetBegin;
    Position position=BlueCasUtil.isBefore(a1,a2);
    if (position == Position.before) {
      s=s.substring(0,relA2End) + T_END + s.substring(relA2End);
      s=s.substring(0,relA2Begin) + T_BEGIN + a2.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA2Begin);
      s=s.substring(0,relA1End) + T_END + s.substring(relA1End);
      s=s.substring(0,relA1Begin) + T_BEGIN + a1.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA1Begin);
    }
 else     if (position == Position.after) {
      s=s.substring(0,relA1End) + T_END + s.substring(relA1End);
      s=s.substring(0,relA1Begin) + T_BEGIN + a1.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA1Begin);
      s=s.substring(0,relA2End) + T_END + s.substring(relA2End);
      s=s.substring(0,relA2Begin) + T_BEGIN + a2.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA2Begin);
    }
 else {
      LOG.warn(""String_Node_Str"" + getHeaderDocId(jCas));
    }
    return s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",new Object[]{getHeaderDocId(jCas),snippetBegin,snippetEnd,To.string(a1),To.string(a2)});
    return sError;
  }
}","public static String snippet(JCas jCas,int snippetBegin,int snippetEnd,Annotation a1,Annotation a2){
  final String T_BEGIN=""String_Node_Str"";
  final String T_END=""String_Node_Str"";
  String s=jCas.getDocumentText().substring(snippetBegin,snippetEnd);
  String sError=s;
  try {
    int relA1Begin=a1.getBegin() - snippetBegin;
    int relA1End=a1.getEnd() - snippetBegin;
    int relA2Begin=a2.getBegin() - snippetBegin;
    int relA2End=a2.getEnd() - snippetBegin;
    Position position=BlueCasUtil.isBefore(a1,a2);
    if (position == Position.before) {
      s=s.substring(0,relA2End) + T_END + s.substring(relA2End);
      s=s.substring(0,relA2Begin) + T_BEGIN + a2.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA2Begin);
      s=s.substring(0,relA1End) + T_END + s.substring(relA1End);
      s=s.substring(0,relA1Begin) + T_BEGIN + a1.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA1Begin);
    }
 else     if (position == Position.after) {
      s=s.substring(0,relA1End) + T_END + s.substring(relA1End);
      s=s.substring(0,relA1Begin) + T_BEGIN + a1.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA1Begin);
      s=s.substring(0,relA2End) + T_END + s.substring(relA2End);
      s=s.substring(0,relA2Begin) + T_BEGIN + a2.getClass().getSimpleName()+ ""String_Node_Str""+ s.substring(relA2Begin);
    }
 else {
      LOG.warn(""String_Node_Str"" + getHeaderDocId(jCas),a1.getCoveredText(),a2.getCoveredText());
    }
    return s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",new Object[]{getHeaderDocId(jCas),snippetBegin,snippetEnd,To.string(a1),To.string(a2)});
    return sError;
  }
}"
42510,"public static boolean registerCreativeTabs(Cfg_creativeTab[] data){
  int i;
  for (i=0; i < data.length; i++) {
    boolean registered=registerCreativeTabs(data[i]);
    if (!registered) {
      LogHelper.error(""String_Node_Str"" + i);
      return false;
    }
  }
  return true;
}","public static boolean registerCreativeTabs(Cfg_creativeTab[] data){
  int i;
  if (data != null) {
    for (i=0; i < data.length; i++) {
      boolean registered=registerCreativeTabs(data[i]);
      if (!registered) {
        LogHelper.error(""String_Node_Str"" + i);
        return false;
      }
    }
  }
  return true;
}"
42511,"/** 
 * Test creating an analysis with CORS.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateAnalysisCrossOrigin() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.createAnalysisCrossOrigin(MLIntegrationTestConstants.ANALYSIS_NAME_2,mlHttpclient.getProjectId(MLIntegrationTestConstants.PROJECT_NAME_DIABETES));
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test creating an analysis with CORS.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateAnalysisCrossOrigin() throws MLHttpClientException, IOException {
  createAnalysis(MLIntegrationTestConstants.ANALYSIS_NAME_2,mlHttpclient.getProjectId(MLIntegrationTestConstants.PROJECT_NAME_DIABETES));
}"
42512,"/** 
 * Test creating an analysis.
 * @throws MLHttpClientException 
 * @throws IOException 
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateAnalysis() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.createAnalysis(MLIntegrationTestConstants.ANALYSIS_NAME,mlHttpclient.getProjectId(MLIntegrationTestConstants.PROJECT_NAME_DIABETES));
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test creating an analysis.
 * @throws MLHttpClientException 
 * @throws IOException 
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateAnalysis() throws MLHttpClientException, IOException {
  createAnalysis(MLIntegrationTestConstants.ANALYSIS_NAME,mlHttpclient.getProjectId(MLIntegrationTestConstants.PROJECT_NAME_DIABETES));
}"
42513,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,""String_Node_Str"",MLIntegrationTestConstants.NEW_NORMAL_LABEL,MLIntegrationTestConstants.NEW_ANOMALY_LABEL,MLIntegrationTestConstants.NORMALIZATION,projectId,versionSetId,mlHttpclient);
  }
 else   if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,MLIntegrationTestConstants.NORMAL_LABELS,MLIntegrationTestConstants.NEW_NORMAL_LABEL,MLIntegrationTestConstants.NEW_ANOMALY_LABEL,MLIntegrationTestConstants.NORMALIZATION,projectId,versionSetId,mlHttpclient);
  }
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,""String_Node_Str"",MLIntegrationTestConstants.NEW_NORMAL_LABEL,MLIntegrationTestConstants.NEW_ANOMALY_LABEL,MLIntegrationTestConstants.NORMALIZATION,projectId,versionSetId,mlHttpclient);
  }
 else   if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,MLIntegrationTestConstants.NORMAL_LABELS,MLIntegrationTestConstants.NEW_NORMAL_LABEL,MLIntegrationTestConstants.NEW_ANOMALY_LABEL,MLIntegrationTestConstants.NORMALIZATION,projectId,versionSetId,mlHttpclient);
  }
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42514,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.USER_ID_RECOMMENDATION,MLIntegrationTestConstants.PRODUCT_ID_RECOMMENDATION,MLIntegrationTestConstants.RATING_RECOMMENDATION,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,projectId,versionSetId,mlHttpclient);
  }
 else   if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.USER_ID_RECOMMENDATION,MLIntegrationTestConstants.PRODUCT_ID_RECOMMENDATION,MLIntegrationTestConstants.OBSERVATION_LIST_RECOMMENDATION,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,projectId,versionSetId,mlHttpclient);
  }
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.USER_ID_RECOMMENDATION,MLIntegrationTestConstants.PRODUCT_ID_RECOMMENDATION,MLIntegrationTestConstants.RATING_RECOMMENDATION,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,projectId,versionSetId,mlHttpclient);
  }
 else   if (algorithmName.equals(""String_Node_Str"")) {
    modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.USER_ID_RECOMMENDATION,MLIntegrationTestConstants.PRODUCT_ID_RECOMMENDATION,MLIntegrationTestConstants.OBSERVATION_LIST_RECOMMENDATION,""String_Node_Str"",MLIntegrationTestConstants.TRAIN_DATA_FRACTION_DEFAULT,projectId,versionSetId,mlHttpclient);
  }
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42515,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42516,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_YACHT,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_YACHT,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42517,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_BREAST_CANCER,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_BREAST_CANCER,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42518,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_FOREST_FIRES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_FOREST_FIRES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42519,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_GAMMA_TELESCOPE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_GAMMA_TELESCOPE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42520,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_AUTOMOBILE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_AUTOMOBILE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42521,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_AZURE_STREAMING,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_AZURE_STREAMING,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42522,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DAS,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  String payload=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  int analysisId=mlHttpclient.getAnalysisId(projectId,algorithmName + versionSetId);
  mlHttpclient.setFeatureCustomized(analysisId,payload);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DAS,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  String payload=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  int analysisId=mlHttpclient.getAnalysisId(projectId,algorithmName + versionSetId);
  mlHttpclient.setFeatureCustomized(analysisId,payload);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42523,"private boolean buildModelWithLearningAlgorithmExpectingFailure(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_ABALONE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusFailed(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  return status;
}","private boolean buildModelWithLearningAlgorithmExpectingFailure(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_ABALONE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusFailed(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  return status;
}"
42524,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private boolean buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_ABALONE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  return status;
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private boolean buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_ABALONE,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  return status;
}"
42525,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIGITS,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIGITS,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42526,"/** 
 * Test creating a model.
 * @throws MLHttpClientException 
 * @throws IOException 
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateModel() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.createModel(analysisId,versionSetId);
  MLIntegrationTestConstants.MODEL_NAME=mlHttpclient.getModelName(response);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test creating a model.
 * @throws MLHttpClientException 
 * @throws IOException 
 */
@Test(priority=1,description=""String_Node_Str"") public void testCreateModel() throws MLHttpClientException, IOException {
  createModel(analysisId,versionSetId);
}"
42527,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,analysisId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  CloseableHttpResponse response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusFailed(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,analysisId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  CloseableHttpResponse response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusFailed(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42528,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,analysisId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  CloseableHttpResponse response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_DIABETES,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,analysisId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  CloseableHttpResponse response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42529,"/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_TITANIC,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}","/** 
 * A test case for building a model with the given learning algorithm
 * @param algorithmName Name of the learning algorithm
 * @param algorithmType Type of the learning algorithm
 * @throws MLHttpClientException
 * @throws IOException
 * @throws JSONException
 * @throws InterruptedException
 */
private void buildModelWithLearningAlgorithm(String algorithmName,String algorithmType) throws MLHttpClientException, IOException, JSONException, InterruptedException {
  modelName=MLTestUtils.createModelWithConfigurations(algorithmName,algorithmType,MLIntegrationTestConstants.RESPONSE_ATTRIBUTE_TITANIC,MLIntegrationTestConstants.TRAIN_DATA_FRACTION,projectId,versionSetId,mlHttpclient);
  modelId=mlHttpclient.getModelId(modelName);
  addModelId(modelId);
  String analysisName=algorithmName + versionSetId;
  addAnalysisId(mlHttpclient.getAnalysisId(projectId,analysisName));
  response=mlHttpclient.doHttpPost(""String_Node_Str"" + modelId,null);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
  boolean status=MLTestUtils.checkModelStatusCompleted(modelName,mlHttpclient,MLIntegrationTestConstants.THREAD_SLEEP_TIME_LARGE,1000);
  assertEquals(""String_Node_Str"",true,status);
}"
42530,"/** 
 * @throws MLHttpClientException 
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetAllFeatures() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetAllFeatures() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42531,"/** 
 * @throws MLHttpClientException 
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetFilteredFeatures() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetFilteredFeatures() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42532,"/** 
 * @throws MLHttpClientException 
 */
@Test(priority=4,description=""String_Node_Str"") public void testGetSummaryStatsWithFeature() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=4,description=""String_Node_Str"") public void testGetSummaryStatsWithFeature() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42533,"/** 
 * @throws MLHttpClientException 
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetSummarizedFeatures() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=3,description=""String_Node_Str"") public void testGetSummarizedFeatures() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42534,"/** 
 * @throws MLHttpClientException 
 */
@Test(priority=4,description=""String_Node_Str"") public void testGetSummaryStatsWithoutFeature() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.NOT_FOUND.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(priority=4,description=""String_Node_Str"") public void testGetSummaryStatsWithoutFeature() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + analysisId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.NOT_FOUND.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42535,"/** 
 * Test retrieving all analyzes from project API.
 * @throws MLHttpClientException 
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzesFromProject() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * Test retrieving all analyzes from project API.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzesFromProject() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42536,"/** 
 * Test retrieving all analyzes.
 * @throws MLHttpClientException 
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzesOfProject() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * Test retrieving all analyzes.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzesOfProject() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42537,"/** 
 * Test retrieving an analysis by name.
 * @throws MLHttpClientException 
 * @throws IOException 
 */
@Test(description=""String_Node_Str"") public void testGetAnalysis() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str""+ MLIntegrationTestConstants.ANALYSIS_NAME);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test retrieving an analysis by name.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetAnalysis() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str""+ MLIntegrationTestConstants.ANALYSIS_NAME);
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42538,"/** 
 * Test retrieving a non-existing analysis.
 * @throws MLHttpClientException 
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetNonExistingAnalysis() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str""+ ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.NOT_FOUND.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test retrieving a non-existing analysis.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetNonExistingAnalysis() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"" + projectId + ""String_Node_Str""+ ""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.NOT_FOUND.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42539,"/** 
 * Test retrieving all analyzes.
 * @throws MLHttpClientException 
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzes() throws MLHttpClientException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
}","/** 
 * Test retrieving all analyzes.
 * @throws MLHttpClientException
 * @throws IOException
 */
@Test(description=""String_Node_Str"") public void testGetAllAnalyzes() throws MLHttpClientException, IOException {
  CloseableHttpResponse response=mlHttpclient.doHttpGet(""String_Node_Str"");
  assertEquals(""String_Node_Str"",Response.Status.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  response.close();
}"
42540,"public List<?> predict() throws MLModelBuilderException {
  String algorithmType=model.getAlgorithmClass();
  if (MLConstants.CLASSIFICATION.equals(algorithmType)) {
    SUPERVISED_ALGORITHM supervised_algorithm=SUPERVISED_ALGORITHM.valueOf(model.getAlgorithmName());
    List<Double> predictions=new ArrayList<Double>();
switch (supervised_algorithm) {
case DECISION_TREE:
      DecisionTreeModel decisionTreeModel=(DecisionTreeModel)model.getModel();
    for (    Vector vector : dataToBePredicted) {
      double predictedData=decisionTreeModel.predict(vector);
      predictions.add(predictedData);
      log.info(""String_Node_Str"" + predictedData);
    }
default :
  ClassificationModel classificationModel=(ClassificationModel)model.getModel();
for (Vector vector : dataToBePredicted) {
  double predictedData=classificationModel.predict(vector);
  predictions.add(predictedData);
  log.info(""String_Node_Str"" + predictedData);
}
}
return predictions;
}
 else if (MLConstants.NUMERICAL_PREDICTION.equals(algorithmType)) {
GeneralizedLinearModel generalizedLinearModel=(GeneralizedLinearModel)model.getModel();
List<Double> predictions=new ArrayList<Double>();
for (Vector vector : dataToBePredicted) {
double predictedData=generalizedLinearModel.predict(vector);
predictions.add(predictedData);
log.info(""String_Node_Str"" + predictedData);
}
return predictions;
}
 else if (MLConstants.CLUSTERING.equals((algorithmType))) {
UNSUPERVISED_ALGORITHM unsupervised_algorithm=UNSUPERVISED_ALGORITHM.valueOf(model.getAlgorithmName());
switch (unsupervised_algorithm) {
case K_MEANS:
List<Integer> predictions=new ArrayList<Integer>();
KMeansModel kMeansModel=(KMeansModel)model.getModel();
for (Vector vector : dataToBePredicted) {
int predictedData=kMeansModel.predict(vector);
predictions.add(predictedData);
log.info(""String_Node_Str"" + predictedData);
}
return predictions;
default :
throw new AlgorithmNameException(""String_Node_Str"" + model.getAlgorithmName() + ""String_Node_Str""+ id);
}
}
 else {
throw new MLModelBuilderException(String.format(""String_Node_Str"",id,algorithmType));
}
}","public List<?> predict() throws MLModelBuilderException {
  String algorithmType=model.getAlgorithmClass();
  if (MLConstants.CLASSIFICATION.equals(algorithmType)) {
    SUPERVISED_ALGORITHM supervised_algorithm=SUPERVISED_ALGORITHM.valueOf(model.getAlgorithmName());
    List<Double> predictions=new ArrayList<Double>();
switch (supervised_algorithm) {
case DECISION_TREE:
      DecisionTreeModel decisionTreeModel=(DecisionTreeModel)model.getModel();
    for (    Vector vector : dataToBePredicted) {
      double predictedData=decisionTreeModel.predict(vector);
      predictions.add(predictedData);
      log.info(""String_Node_Str"" + predictedData);
    }
  return predictions;
default :
ClassificationModel classificationModel=(ClassificationModel)model.getModel();
for (Vector vector : dataToBePredicted) {
double predictedData=classificationModel.predict(vector);
predictions.add(predictedData);
log.info(""String_Node_Str"" + predictedData);
}
return predictions;
}
}
 else if (MLConstants.NUMERICAL_PREDICTION.equals(algorithmType)) {
GeneralizedLinearModel generalizedLinearModel=(GeneralizedLinearModel)model.getModel();
List<Double> predictions=new ArrayList<Double>();
for (Vector vector : dataToBePredicted) {
double predictedData=generalizedLinearModel.predict(vector);
predictions.add(predictedData);
log.info(""String_Node_Str"" + predictedData);
}
return predictions;
}
 else if (MLConstants.CLUSTERING.equals((algorithmType))) {
UNSUPERVISED_ALGORITHM unsupervised_algorithm=UNSUPERVISED_ALGORITHM.valueOf(model.getAlgorithmName());
switch (unsupervised_algorithm) {
case K_MEANS:
List<Integer> predictions=new ArrayList<Integer>();
KMeansModel kMeansModel=(KMeansModel)model.getModel();
for (Vector vector : dataToBePredicted) {
int predictedData=kMeansModel.predict(vector);
predictions.add(predictedData);
log.info(""String_Node_Str"" + predictedData);
}
return predictions;
default :
throw new AlgorithmNameException(""String_Node_Str"" + model.getAlgorithmName() + ""String_Node_Str""+ id);
}
}
 else {
throw new MLModelBuilderException(String.format(""String_Node_Str"",id,algorithmType));
}
}"
42541,"public List<MLHyperParameter> getHyperParameters(long analysisId) throws MLAnalysisHandlerException {
  try {
    return databaseService.getHyperParametersOfModel(analysisId);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}","public List<MLHyperParameter> getHyperParameters(long analysisId,String algorithmName) throws MLAnalysisHandlerException {
  try {
    return databaseService.getHyperParametersOfModel(analysisId,algorithmName);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}"
42542,"public void addHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters) throws MLAnalysisHandlerException {
  try {
    databaseService.insertHyperParameters(analysisId,hyperParameters);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}","public void addHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters,String algorithmName) throws MLAnalysisHandlerException {
  try {
    databaseService.insertHyperParameters(analysisId,hyperParameters,algorithmName);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}"
42543,"public void addDefaultsIntoHyperParameters(long analysisId) throws MLAnalysisHandlerException {
  try {
    String algorithmName=databaseService.getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME);
    if (algorithmName == null) {
      throw new MLAnalysisHandlerException(""String_Node_Str"" + analysisId);
    }
    List<MLHyperParameter> hyperParameters=null;
    for (    MLAlgorithm mlAlgorithm : algorithms) {
      if (algorithmName.equalsIgnoreCase(mlAlgorithm.getName())) {
        hyperParameters=mlAlgorithm.getParameters();
        break;
      }
    }
    if (hyperParameters == null) {
      throw new MLAnalysisHandlerException(""String_Node_Str"" + algorithmName);
    }
    databaseService.insertHyperParameters(analysisId,hyperParameters);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}","public void addDefaultsIntoHyperParameters(long analysisId) throws MLAnalysisHandlerException {
  try {
    String algorithmName=databaseService.getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME);
    if (algorithmName == null) {
      throw new MLAnalysisHandlerException(""String_Node_Str"" + analysisId);
    }
    List<MLHyperParameter> hyperParameters=null;
    for (    MLAlgorithm mlAlgorithm : algorithms) {
      if (algorithmName.equalsIgnoreCase(mlAlgorithm.getName())) {
        hyperParameters=mlAlgorithm.getParameters();
        break;
      }
    }
    if (hyperParameters == null) {
      throw new MLAnalysisHandlerException(""String_Node_Str"" + algorithmName);
    }
    databaseService.insertHyperParameters(analysisId,hyperParameters,algorithmName);
  }
 catch (  DatabaseHandlerException e) {
    throw new MLAnalysisHandlerException(e.getMessage(),e);
  }
}"
42544,"/** 
 * Get the list of Hyper-parameters of the model
 * @param analysisId unique id of the analysis
 * @return
 * @throws DatabaseHandlerException
 */
public List<MLHyperParameter> getHyperParametersOfModel(long analysisId) throws DatabaseHandlerException ;","/** 
 * Get the list of Hyper-parameters of the model
 * @param analysisId     Unique ID of the analysis
 * @param algorithmName  Algorithm name
 * @return
 * @throws DatabaseHandlerException
 */
public List<MLHyperParameter> getHyperParametersOfModel(long analysisId,String algorithmName) throws DatabaseHandlerException ;"
42545,"/** 
 * Insert a list of HyperParameters into the database
 * @param analysisId         Analysis Id
 * @param hyperParameters    MLHyperParameter list
 * @throws DatabaseHandlerException
 */
public void insertHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters) throws DatabaseHandlerException ;","/** 
 * Insert a list of HyperParameters into the database
 * @param analysisId         Analysis Id
 * @param hyperParameters    MLHyperParameter list
 * @param algorithmName      Algorithm name
 * @throws DatabaseHandlerException
 */
public void insertHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters,String algorithmName) throws DatabaseHandlerException ;"
42546,"@Override public List<MLHyperParameter> getHyperParametersOfModel(long analysisId) throws DatabaseHandlerException {
  List<MLHyperParameter> hyperParams=new ArrayList<MLHyperParameter>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_ANALYSIS);
    getFeatues.setLong(1,analysisId);
    result=getFeatues.executeQuery();
    while (result.next()) {
      MLHyperParameter param=new MLHyperParameter();
      param.setKey(result.getString(1));
      param.setValue(result.getString(2));
      hyperParams.add(param);
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + analysisId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}","@Override public List<MLHyperParameter> getHyperParametersOfModel(long analysisId,String algorithmName) throws DatabaseHandlerException {
  List<MLHyperParameter> hyperParams=new ArrayList<MLHyperParameter>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    if (algorithmName == null) {
      getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_ANALYSIS);
      getFeatues.setLong(1,analysisId);
    }
 else {
      getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_ANALYSIS_WITH_ALGORITHM);
      getFeatues.setLong(1,analysisId);
      getFeatues.setString(2,algorithmName);
    }
    result=getFeatues.executeQuery();
    while (result.next()) {
      MLHyperParameter param=new MLHyperParameter();
      param.setKey(result.getString(1));
      param.setValue(result.getString(2));
      hyperParams.add(param);
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + analysisId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}"
42547,"@Override public void insertHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    for (    MLHyperParameter mlHyperParameter : hyperParameters) {
      String name=mlHyperParameter.getKey();
      String value=mlHyperParameter.getValue();
      insertStatement=connection.prepareStatement(SQLQueries.INSERT_HYPER_PARAMETER);
      insertStatement.setLong(1,analysisId);
      insertStatement.setString(2,name);
      insertStatement.setString(3,value);
      insertStatement.execute();
    }
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}","@Override public void insertHyperParameters(long analysisId,List<MLHyperParameter> hyperParameters,String algorithmName) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  PreparedStatement getStatement=null;
  PreparedStatement deleteStatement=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    getStatement=connection.prepareStatement(SQLQueries.GET_EXISTING_ALGORITHM);
    getStatement.setLong(1,analysisId);
    result=getStatement.executeQuery();
    if (!algorithmName.equals(result)) {
      deleteStatement=connection.prepareStatement(SQLQueries.DELETE_HYPER_PARAMETERS);
      deleteStatement.setLong(1,analysisId);
      deleteStatement.execute();
    }
    for (    MLHyperParameter mlHyperParameter : hyperParameters) {
      String name=mlHyperParameter.getKey();
      String value=mlHyperParameter.getValue();
      insertStatement=connection.prepareStatement(SQLQueries.INSERT_HYPER_PARAMETER);
      insertStatement.setLong(1,analysisId);
      insertStatement.setString(2,algorithmName);
      insertStatement.setString(3,name);
      insertStatement.setString(4,value);
      insertStatement.execute();
    }
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}"
42548,"/** 
 * get hyper-parameters of an analysis.
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response getHyperParameters(@PathParam(""String_Node_Str"") long analysisId){
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  int tenantId=carbonContext.getTenantId();
  String userName=carbonContext.getUsername();
  try {
    List<MLHyperParameter> responseVariable=mlAnalysisHandler.getHyperParameters(analysisId);
    return Response.ok(responseVariable).build();
  }
 catch (  MLAnalysisHandlerException e) {
    logger.error(String.format(""String_Node_Str"",analysisId,tenantId,userName,e.getMessage()));
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}","/** 
 * get hyper-parameters of an analysis.
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response getHyperParameters(@PathParam(""String_Node_Str"") long analysisId,@QueryParam(""String_Node_Str"") String algorithmName){
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  int tenantId=carbonContext.getTenantId();
  String userName=carbonContext.getUsername();
  try {
    List<MLHyperParameter> responseVariable=mlAnalysisHandler.getHyperParameters(analysisId,algorithmName);
    return Response.ok(responseVariable).build();
  }
 catch (  MLAnalysisHandlerException e) {
    logger.error(String.format(""String_Node_Str"",analysisId,tenantId,userName,e.getMessage()));
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}"
42549,"/** 
 * Adding hyper parameters for the selected algorithm of this analysis.
 */
@POST @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response addHyperParameters(@PathParam(""String_Node_Str"") long analysisId,List<MLHyperParameter> hyperParameters){
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  int tenantId=carbonContext.getTenantId();
  String userName=carbonContext.getUsername();
  try {
    mlAnalysisHandler.addHyperParameters(analysisId,hyperParameters);
    return Response.ok().build();
  }
 catch (  MLAnalysisHandlerException e) {
    logger.error(String.format(""String_Node_Str"",analysisId,tenantId,userName,e.getMessage()));
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}","/** 
 * Adding hyper parameters for the selected algorithm of this analysis.
 */
@POST @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response addHyperParameters(@PathParam(""String_Node_Str"") long analysisId,List<MLHyperParameter> hyperParameters,@QueryParam(""String_Node_Str"") String algorithmName){
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  int tenantId=carbonContext.getTenantId();
  String userName=carbonContext.getUsername();
  try {
    mlAnalysisHandler.addHyperParameters(analysisId,hyperParameters,algorithmName);
    return Response.ok().build();
  }
 catch (  MLAnalysisHandlerException e) {
    logger.error(String.format(""String_Node_Str"",analysisId,tenantId,userName,e.getMessage()));
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}"
42550,"private void persistModel(long modelId,String modelName,MLModel model) throws MLModelBuilderException {
  try {
    MLStorage storage=databaseService.getModelStorage(modelId);
    String storageType=storage.getType();
    String storageLocation=storage.getLocation();
    MLIOFactory ioFactory=new MLIOFactory(mlProperties);
    MLOutputAdapter outputAdapter=ioFactory.getOutputAdapter(storageType + MLConstants.OUT_SUFFIX);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(model);
    oos.flush();
    oos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    String outPath=storageLocation + File.separator + modelName+ ""String_Node_Str""+ MLUtils.getDate();
    outputAdapter.write(outPath,is);
    databaseService.updateModelStorage(modelId,storageType,outPath);
  }
 catch (  Exception e) {
    throw new MLModelBuilderException(""String_Node_Str"" + modelId,e);
  }
}","private void persistModel(long modelId,String modelName,MLModel model) throws MLModelBuilderException {
  try {
    MLStorage storage=databaseService.getModelStorage(modelId);
    String storageType=storage.getType();
    String storageLocation=storage.getLocation();
    MLIOFactory ioFactory=new MLIOFactory(mlProperties);
    MLOutputAdapter outputAdapter=ioFactory.getOutputAdapter(storageType + MLConstants.OUT_SUFFIX);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(model);
    oos.flush();
    oos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    String outPath=storageLocation + File.separator + modelName;
    outputAdapter.write(outPath,is);
    databaseService.updateModelStorage(modelId,storageType,outPath);
  }
 catch (  Exception e) {
    throw new MLModelBuilderException(""String_Node_Str"" + modelId,e);
  }
}"
42551,"/** 
 * Create a new model.
 * @param model model to be created.
 * @throws MLModelHandlerException
 */
public void createModel(MLModelNew model) throws MLModelHandlerException {
  try {
    ModelStorage modelStorage=MLCoreServiceValueHolder.getInstance().getModelStorage();
    model.setStorageType(modelStorage.getStorageType());
    model.setStorageDirectory(modelStorage.getStorageDirectory());
    databaseService.insertModel(model);
    log.info(String.format(""String_Node_Str"",model));
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelHandlerException(e);
  }
}","/** 
 * Create a new model.
 * @param model model to be created.
 * @throws MLModelHandlerException
 */
public MLModelNew createModel(MLModelNew model) throws MLModelHandlerException {
  try {
    ModelStorage modelStorage=MLCoreServiceValueHolder.getInstance().getModelStorage();
    model.setStorageType(modelStorage.getStorageType());
    model.setStorageDirectory(modelStorage.getStorageDirectory());
    String modelName=databaseService.getAnalysis(model.getTenantId(),model.getUserName(),model.getAnalysisId()).getName();
    modelName=modelName + ""String_Node_Str"" + MLConstants.MODEL_NAME+ ""String_Node_Str""+ MLUtils.getDate();
    model.setName(modelName);
    model.setStatus(MLConstants.MODEL_STATUS_NOT_STARTED);
    databaseService.insertModel(model);
    log.info(String.format(""String_Node_Str"",model));
    return model;
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelHandlerException(e);
  }
}"
42552,"/** 
 * Get the Analysis having the given analysis name
 * @param tenantId      tenant id
 * @param userName      username
 * @param analysisName  analysis name
 * @return
 * @throws DatabaseHandlerException
 */
public MLAnalysis getAnalysis(int tenantId,String userName,String analysisName) throws DatabaseHandlerException ;","MLAnalysis getAnalysis(int tenantId,String userName,long analysisId) throws DatabaseHandlerException ;"
42553,"@Override public MLAnalysis getAnalysis(int tenantId,String userName,String analysisName) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_ANALYSIS);
    statement.setString(1,analysisName);
    statement.setInt(2,tenantId);
    statement.setString(3,userName);
    result=statement.executeQuery();
    if (result.first()) {
      MLAnalysis analysis=new MLAnalysis();
      analysis.setId(result.getLong(1));
      analysis.setProjectId(result.getLong(2));
      analysis.setComments(MLDatabaseUtils.toString(result.getClob(3)));
      analysis.setName(analysisName);
      analysis.setTenantId(tenantId);
      analysis.setUserName(userName);
      return analysis;
    }
 else {
      return null;
    }
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + analysisName + ""String_Node_Str""+ tenantId+ ""String_Node_Str""+ userName,e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}","@Override public MLAnalysis getAnalysis(int tenantId,String userName,long analysisId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_ANALYSIS_BY_ID);
    statement.setLong(1,analysisId);
    statement.setInt(2,tenantId);
    statement.setString(3,userName);
    result=statement.executeQuery();
    if (result.first()) {
      MLAnalysis analysis=new MLAnalysis();
      analysis.setId(analysisId);
      analysis.setName(result.getString(1));
      analysis.setProjectId(result.getLong(2));
      analysis.setComments(MLDatabaseUtils.toString(result.getClob(3)));
      analysis.setTenantId(tenantId);
      analysis.setUserName(userName);
      return analysis;
    }
 else {
      return null;
    }
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + analysisId + ""String_Node_Str""+ tenantId+ ""String_Node_Str""+ userName,e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}"
42554,"@Override public void insertModel(MLModelNew model) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_MODEL);
    insertStatement.setString(1,model.getName());
    insertStatement.setLong(2,model.getAnalysisId());
    insertStatement.setLong(3,model.getVersionSetId());
    insertStatement.setInt(4,model.getTenantId());
    insertStatement.setString(5,model.getUserName());
    insertStatement.setString(6,model.getStorageType());
    insertStatement.setString(7,model.getStorageDirectory());
    insertStatement.setString(8,MLConstants.MODEL_STATUS_NOT_STARTED);
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}","@Override public void insertModel(MLModelNew model) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_MODEL);
    insertStatement.setString(1,model.getName());
    insertStatement.setLong(2,model.getAnalysisId());
    insertStatement.setLong(3,model.getVersionSetId());
    insertStatement.setInt(4,model.getTenantId());
    insertStatement.setString(5,model.getUserName());
    insertStatement.setString(6,model.getStorageType());
    insertStatement.setString(7,model.getStorageDirectory());
    insertStatement.setString(8,model.getStatus());
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}"
42555,"/** 
 * Create a new Model.
 */
@POST @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response createModel(MLModelNew model){
  if (model.getName() == null || model.getName().isEmpty() || model.getAnalysisId() == 0 || model.getVersionSetId() == 0) {
    logger.error(""String_Node_Str"");
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  try {
    int tenantId=carbonContext.getTenantId();
    String userName=carbonContext.getUsername();
    model.setTenantId(tenantId);
    model.setUserName(userName);
    mlModelHandler.createModel(model);
    return Response.ok().build();
  }
 catch (  MLModelHandlerException e) {
    logger.error(""String_Node_Str"" + model,e);
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}","/** 
 * Create a new Model.
 */
@POST @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") public Response createModel(MLModelNew model){
  if (model.getAnalysisId() == 0 || model.getVersionSetId() == 0) {
    logger.error(""String_Node_Str"");
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  PrivilegedCarbonContext carbonContext=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  try {
    int tenantId=carbonContext.getTenantId();
    String userName=carbonContext.getUsername();
    model.setTenantId(tenantId);
    model.setUserName(userName);
    MLModelNew insertedModel=mlModelHandler.createModel(model);
    return Response.ok(insertedModel).build();
  }
 catch (  MLModelHandlerException e) {
    logger.error(""String_Node_Str"" + model,e);
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
  }
}"
42556,"@Override public void insertModel(MLModelNew model) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_MODEL);
    insertStatement.setString(1,model.getName());
    insertStatement.setLong(2,model.getAnalysisId());
    insertStatement.setLong(3,model.getVersionSetId());
    insertStatement.setInt(4,model.getTenantId());
    insertStatement.setString(5,model.getUserName());
    insertStatement.setString(6,model.getStorageType());
    insertStatement.setString(7,model.getStorageDirectory());
    insertStatement.setString(7,MLConstants.MODEL_STATUS_NOT_STARTED);
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}","@Override public void insertModel(MLModelNew model) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_MODEL);
    insertStatement.setString(1,model.getName());
    insertStatement.setLong(2,model.getAnalysisId());
    insertStatement.setLong(3,model.getVersionSetId());
    insertStatement.setInt(4,model.getTenantId());
    insertStatement.setString(5,model.getUserName());
    insertStatement.setString(6,model.getStorageType());
    insertStatement.setString(7,model.getStorageDirectory());
    insertStatement.setString(8,MLConstants.MODEL_STATUS_NOT_STARTED);
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}"
42557,"/** 
 */
@Override public InputStream readDataset(URI uri) throws MLInputAdapterException {
  try {
    if (!uri.isAbsolute()) {
      String uriString=uri.toString();
      if (!uriString.startsWith(""String_Node_Str"")) {
        uriString=""String_Node_Str"" + uriString;
        try {
          uri=new URI(uriString);
        }
 catch (        URISyntaxException ignore) {
        }
      }
    }
    Configuration conf=new Configuration();
    conf.set(""String_Node_Str"",org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());
    FileSystem file=FileSystem.get(uri,conf);
    FSDataInputStream inputStream=file.open(new Path(uri));
    return inputStream;
  }
 catch (  Exception e) {
    throw new MLInputAdapterException(String.format(""String_Node_Str"",uri,e),e);
  }
}","/** 
 */
@Override public InputStream readDataset(URI uri) throws MLInputAdapterException {
  try {
    if (!uri.isAbsolute()) {
      String uriString=uri.toString();
      if (!uriString.startsWith(""String_Node_Str"")) {
        if (MLCoreServiceValueHolder.getInstance().getHdfsUrl() != null) {
          uriString=MLCoreServiceValueHolder.getInstance().getHdfsUrl().concat(uriString);
        }
 else {
          uriString=""String_Node_Str"".concat(uriString);
        }
        try {
          uri=new URI(uriString);
        }
 catch (        URISyntaxException ignore) {
        }
      }
    }
    Configuration conf=new Configuration();
    conf.set(""String_Node_Str"",org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());
    FileSystem file=FileSystem.get(uri,conf);
    FSDataInputStream inputStream=file.open(new Path(uri));
    return inputStream;
  }
 catch (  Exception e) {
    throw new MLInputAdapterException(String.format(""String_Node_Str"",uri,e),e);
  }
}"
42558,"@Override public List<MLHyperParameter> getHyperParametersOfModel(long modelId) throws DatabaseHandlerException {
  List<MLHyperParameter> hyperParams=new ArrayList<MLHyperParameter>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_MODEL);
    getFeatues.setLong(1,modelId);
    result=getFeatues.executeQuery();
    while (result.next()) {
      MLHyperParameter param=new MLHyperParameter();
      param.setKey(result.getString(1));
      param.setValue(result.getString(2));
      hyperParams.add(param);
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + modelId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}","@Override public List<MLHyperParameter> getHyperParametersOfModel(long modelId) throws DatabaseHandlerException {
  List<MLHyperParameter> hyperParams=new ArrayList<MLHyperParameter>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_ANALYSIS);
    getFeatues.setLong(1,modelId);
    result=getFeatues.executeQuery();
    while (result.next()) {
      MLHyperParameter param=new MLHyperParameter();
      param.setKey(result.getString(1));
      param.setValue(result.getString(2));
      hyperParams.add(param);
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + modelId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}"
42559,"@Override public Workflow getWorkflow(long modelId,long analysisId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(modelId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,modelId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(analysisId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(analysisId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(modelId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
  }
}","@Override public Workflow getWorkflow(long modelId,long analysisId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(modelId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,modelId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(analysisId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(analysisId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(analysisId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
  }
}"
42560,"@Override public Map<String,String> getHyperParametersOfModelAsMap(long modelId) throws DatabaseHandlerException {
  Map<String,String> hyperParams=new HashMap<String,String>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_MODEL);
    getFeatues.setLong(1,modelId);
    result=getFeatues.executeQuery();
    while (result.next()) {
      hyperParams.put(result.getString(1),result.getString(2));
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + modelId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}","@Override public Map<String,String> getHyperParametersOfModelAsMap(long analysisId) throws DatabaseHandlerException {
  Map<String,String> hyperParams=new HashMap<String,String>();
  Connection connection=null;
  PreparedStatement getFeatues=null;
  ResultSet result=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(true);
    getFeatues=connection.prepareStatement(SQLQueries.GET_HYPER_PARAMETERS_OF_ANALYSIS);
    getFeatues.setLong(1,analysisId);
    result=getFeatues.executeQuery();
    while (result.next()) {
      hyperParams.put(result.getString(1),result.getString(2));
    }
    return hyperParams;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + analysisId + ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,getFeatues,result);
  }
}"
42561,"/** 
 * Test Creating a new version of an existing dataset
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCreateDuplicateDatasetVersion() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.FOREST_COVER_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_INTERNAL_SERVER_ERROR,response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test Creating a new version of an existing dataset
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCreateDuplicateDatasetVersion() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.DIABETES_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_INTERNAL_SERVER_ERROR,response.getStatusLine().getStatusCode());
  response.close();
}"
42562,"/** 
 * Test creating a dataset from a valid csv file.
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"") public void testCreateDatasetFromFile() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.FOREST_COVER_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_OK,response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test creating a dataset from a valid csv file.
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"") public void testCreateDatasetFromFile() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.DIABETES_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_OK,response.getStatusLine().getStatusCode());
  response.close();
}"
42563,"/** 
 * Test Creating a new version of an existing dataset
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCreateNewDatasetVersion() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.FOREST_COVER_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_OK,response.getStatusLine().getStatusCode());
  response.close();
}","/** 
 * Test Creating a new version of an existing dataset
 * @throws ClientProtocolException
 * @throws IOException
 * @throws URISyntaxException
 * @throws MLIntegrationBaseTestException 
 */
@Test(description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCreateNewDatasetVersion() throws ClientProtocolException, IOException, URISyntaxException, MLIntegrationBaseTestException {
  CloseableHttpResponse response=uploadDatasetFromCSV(MLIntegrationTestConstants.DATASET_NAME,""String_Node_Str"",MLIntegrationTestConstants.DIABETES_DATASET_SAMPLE);
  Assert.assertEquals(MLIntegrationTestConstants.HTTP_OK,response.getStatusLine().getStatusCode());
  response.close();
}"
42564,"/** 
 * Build a ML model asynchronously and persist the built model in a given storage.
 * @param modelId id of the model to be built.
 * @param storageType type of the storage bam, hdfs, file. Default storage is file.
 * @param StoragePath path of the provided storage where the model should be saved.
 * @throws MLModelHandlerException
 * @throws MLModelBuilderException
 */
public void buildModel(int tenantId,String userName,long modelId) throws MLModelHandlerException, MLModelBuilderException {
  if (!isValidModelId(tenantId,userName,modelId)) {
    String msg=String.format(""String_Node_Str"",modelId,tenantId,userName);
    throw new MLModelHandlerException(msg);
  }
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    MLModelNew model=databaseService.getModel(tenantId,userName,modelId);
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    long datasetVersionId=databaseService.getDatasetVersionIdOfModel(modelId);
    String dataType=databaseService.getDataTypeOfModel(modelId);
    String columnSeparator=ColumnSeparatorFactory.getColumnSeparator(dataType);
    String dataUrl=databaseService.getDatasetVersionUri(datasetVersionId);
    SparkConf sparkConf=MLCoreServiceValueHolder.getInstance().getSparkConf();
    Workflow facts=databaseService.getWorkflow(modelId,model.getAnalysisId());
    MLModelConfigurationContext context=new MLModelConfigurationContext();
    context.setModelId(modelId);
    context.setColumnSeparator(columnSeparator);
    context.setFacts(facts);
    context.setModel(model);
    JavaSparkContext sparkContext=null;
    sparkConf.setAppName(String.valueOf(modelId));
    sparkContext=new JavaSparkContext(sparkConf);
    JavaRDD<String> lines=sparkContext.textFile(dataUrl);
    String headerRow=lines.take(1).get(0);
    context.setSparkContext(sparkContext);
    context.setLines(lines);
    context.setHeaderRow(headerRow);
    threadExecutor.execute(new ModelBuilder(modelId,context));
    log.info(String.format(""String_Node_Str"",modelId));
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelBuilderException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}","/** 
 * Build a ML model asynchronously and persist the built model in a given storage.
 * @param modelId id of the model to be built.
 * @param storageType type of the storage bam, hdfs, file. Default storage is file.
 * @param StoragePath path of the provided storage where the model should be saved.
 * @throws MLModelHandlerException
 * @throws MLModelBuilderException
 */
public void buildModel(int tenantId,String userName,long modelId) throws MLModelHandlerException, MLModelBuilderException {
  if (!isValidModelId(tenantId,userName,modelId)) {
    String msg=String.format(""String_Node_Str"",modelId,tenantId,userName);
    throw new MLModelHandlerException(msg);
  }
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    MLModelNew model=databaseService.getModel(tenantId,userName,modelId);
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    long datasetVersionId=databaseService.getDatasetVersionIdOfModel(modelId);
    String dataType=databaseService.getDataTypeOfModel(modelId);
    String columnSeparator=ColumnSeparatorFactory.getColumnSeparator(dataType);
    String dataUrl=databaseService.getDatasetVersionUri(datasetVersionId);
    SparkConf sparkConf=MLCoreServiceValueHolder.getInstance().getSparkConf();
    Workflow facts=databaseService.getWorkflow(model.getAnalysisId());
    MLModelConfigurationContext context=new MLModelConfigurationContext();
    context.setModelId(modelId);
    context.setColumnSeparator(columnSeparator);
    context.setFacts(facts);
    context.setModel(model);
    JavaSparkContext sparkContext=null;
    sparkConf.setAppName(String.valueOf(modelId));
    sparkContext=new JavaSparkContext(sparkConf);
    JavaRDD<String> lines=sparkContext.textFile(dataUrl);
    String headerRow=lines.take(1).get(0);
    context.setSparkContext(sparkContext);
    context.setLines(lines);
    context.setHeaderRow(headerRow);
    threadExecutor.execute(new ModelBuilder(modelId,context));
    log.info(String.format(""String_Node_Str"",modelId));
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelBuilderException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}"
42565,"public List<?> predict(int tenantId,String userName,long modelId,String[] data) throws MLModelHandlerException, MLModelBuilderException {
  if (!isValidModelId(tenantId,userName,modelId)) {
    String msg=String.format(""String_Node_Str"",modelId,tenantId,userName);
    throw new MLModelHandlerException(msg);
  }
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    MLModelNew model=databaseService.getModel(tenantId,userName,modelId);
    String dataType=databaseService.getDataTypeOfModel(modelId);
    String columnSeparator=ColumnSeparatorFactory.getColumnSeparator(dataType);
    SparkConf sparkConf=MLCoreServiceValueHolder.getInstance().getSparkConf();
    Workflow facts=databaseService.getWorkflow(modelId,model.getAnalysisId());
    MLModelConfigurationContext context=new MLModelConfigurationContext();
    context.setModelId(modelId);
    context.setColumnSeparator(columnSeparator);
    context.setFacts(facts);
    context.setDataToBePredicted(data);
    JavaSparkContext sparkContext=null;
    sparkConf.setAppName(String.valueOf(modelId));
    sparkContext=new JavaSparkContext(sparkConf);
    context.setSparkContext(sparkContext);
    MLModel builtModel=retrieveModel(modelId);
    Predictor predictor=new Predictor(modelId,builtModel,context);
    List<?> predictions=predictor.predict();
    log.info(String.format(""String_Node_Str"",modelId));
    return predictions;
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelBuilderException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}","public List<?> predict(int tenantId,String userName,long modelId,String[] data) throws MLModelHandlerException, MLModelBuilderException {
  if (!isValidModelId(tenantId,userName,modelId)) {
    String msg=String.format(""String_Node_Str"",modelId,tenantId,userName);
    throw new MLModelHandlerException(msg);
  }
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    MLModelNew model=databaseService.getModel(tenantId,userName,modelId);
    String dataType=databaseService.getDataTypeOfModel(modelId);
    String columnSeparator=ColumnSeparatorFactory.getColumnSeparator(dataType);
    SparkConf sparkConf=MLCoreServiceValueHolder.getInstance().getSparkConf();
    Workflow facts=databaseService.getWorkflow(model.getAnalysisId());
    MLModelConfigurationContext context=new MLModelConfigurationContext();
    context.setModelId(modelId);
    context.setColumnSeparator(columnSeparator);
    context.setFacts(facts);
    context.setDataToBePredicted(data);
    JavaSparkContext sparkContext=null;
    sparkConf.setAppName(String.valueOf(modelId));
    sparkContext=new JavaSparkContext(sparkConf);
    context.setSparkContext(sparkContext);
    MLModel builtModel=retrieveModel(modelId);
    Predictor predictor=new Predictor(modelId,builtModel,context);
    List<?> predictions=predictor.predict();
    log.info(String.format(""String_Node_Str"",modelId));
    return predictions;
  }
 catch (  DatabaseHandlerException e) {
    throw new MLModelBuilderException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}"
42566,"public Workflow getWorkflow(long modelId,long analysisId) throws DatabaseHandlerException ;",public Workflow getWorkflow(long analysisId) throws DatabaseHandlerException ;
42567,"@Override public Workflow getWorkflow(long modelId,long analysisId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(modelId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,modelId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(analysisId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(analysisId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(analysisId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
  }
}","@Override public Workflow getWorkflow(long analysisId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(analysisId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,analysisId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(analysisId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(analysisId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(analysisId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
  }
}"
42568,"@Override public MLStorage getModelStorage(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  MLStorage storage=new MLStorage();
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_MODEL_STORAGE);
    statement.setLong(1,modelId);
    result=statement.executeQuery();
    if (result.first()) {
      storage.setType(result.getString(1));
      storage.setLocation(result.getString(2));
      return storage;
    }
 else {
      return storage;
    }
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}","@Override public MLStorage getModelStorage(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  MLStorage storage=new MLStorage();
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_MODEL_STORAGE);
    statement.setLong(1,modelId);
    result=statement.executeQuery();
    if (result.first()) {
      storage.setType(result.getString(1));
      storage.setLocation(result.getString(2));
      return storage;
    }
 else {
      return storage;
    }
  }
 catch (  SQLException e) {
    logger.error(e);
    throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}"
42569,"@Override public Workflow getWorkflow(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(modelId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,modelId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(modelId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(modelId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(modelId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(modelId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(modelId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
  }
}","@Override public Workflow getWorkflow(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement getStatement=null;
  ResultSet analysisIdResult=null;
  PreparedStatement getAnalysisIdStatement=null;
  try {
    Workflow mlWorkflow=new Workflow();
    mlWorkflow.setWorkflowID(modelId);
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    List<Feature> mlFeatures=new ArrayList<Feature>();
    getStatement=connection.prepareStatement(SQLQueries.GET_CUSTOMIZED_FEATURES);
    getStatement.setLong(1,modelId);
    result=getStatement.executeQuery();
    while (result.next()) {
      if (result.getBoolean(5) == true) {
        Feature mlFeature=new Feature();
        mlFeature.setName(result.getString(1));
        mlFeature.setIndex(result.getInt(2));
        mlFeature.setType(result.getString(3));
        mlFeature.setImputeOption(result.getString(4));
        mlFeature.setInclude(result.getBoolean(5));
        mlFeatures.add(mlFeature);
      }
    }
    mlWorkflow.setFeatures(mlFeatures);
    getAnalysisIdStatement=connection.prepareStatement(SQLQueries.GET_ANALYSIS_ID_OF_MODEL);
    getAnalysisIdStatement.setLong(1,modelId);
    analysisIdResult=getAnalysisIdStatement.executeQuery();
    long analysisId;
    if (analysisIdResult.first()) {
      analysisId=analysisIdResult.getLong(1);
    }
 else {
      throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
    }
    mlWorkflow.setAlgorithmName(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_NAME));
    mlWorkflow.setAlgorithmClass(getAStringModelConfiguration(analysisId,MLConstants.ALGORITHM_TYPE));
    mlWorkflow.setResponseVariable(getAStringModelConfiguration(analysisId,MLConstants.RESPONSE));
    mlWorkflow.setTrainDataFraction(Double.valueOf(getAStringModelConfiguration(analysisId,MLConstants.TRAIN_DATA_FRACTION)));
    mlWorkflow.setHyperParameters(getHyperParametersOfModelAsMap(modelId));
    return mlWorkflow;
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,getStatement,result);
    MLDatabaseUtils.closeDatabaseResources(getAnalysisIdStatement,analysisIdResult);
  }
}"
42570,"/** 
 * Close a given set of database resources.
 * @param preparedStatement PeparedStatement to be closed
 */
public static void closeDatabaseResources(PreparedStatement preparedStatement) throws DatabaseHandlerException {
  closeDatabaseResources(null,preparedStatement,null);
}","/** 
 * Close a given set of database resources.
 * @param preparedStatement
 * @param resultSet
 * @throws DatabaseHandlerException
 */
public static void closeDatabaseResources(PreparedStatement preparedStatement,ResultSet resultSet) throws DatabaseHandlerException {
  closeDatabaseResources(null,preparedStatement,resultSet);
}"
42571,"private void persistModel(long modelId,MLModel model) throws MLModelBuilderException {
  try {
    Map<String,String> storageMap=databaseService.getModelStorage(modelId);
    String storageType=storageMap.get(MLConstants.STORAGE_TYPE);
    String storageLocation=storageMap.get(MLConstants.STORAGE_LOCATION);
    MLIOFactory ioFactory=new MLIOFactory(mlProperties);
    MLOutputAdapter outputAdapter=ioFactory.getOutputAdapter(storageType + MLConstants.OUT_SUFFIX);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(model);
    oos.flush();
    oos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    String outPath=storageLocation + File.separator + modelId;
    outputAdapter.writeDataset(outPath,is);
    databaseService.updateModelStorage(modelId,storageType,outPath);
  }
 catch (  Exception e) {
    throw new MLModelBuilderException(""String_Node_Str"" + modelId,e);
  }
}","private void persistModel(long modelId,MLModel model) throws MLModelBuilderException {
  try {
    MLStorage storage=databaseService.getModelStorage(modelId);
    String storageType=storage.getType();
    String storageLocation=storage.getLocation();
    MLIOFactory ioFactory=new MLIOFactory(mlProperties);
    MLOutputAdapter outputAdapter=ioFactory.getOutputAdapter(storageType + MLConstants.OUT_SUFFIX);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(model);
    oos.flush();
    oos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    String outPath=storageLocation + File.separator + modelId;
    outputAdapter.writeDataset(outPath,is);
    databaseService.updateModelStorage(modelId,storageType,outPath);
  }
 catch (  Exception e) {
    throw new MLModelBuilderException(""String_Node_Str"" + modelId,e);
  }
}"
42572,"Map<String,String> getModelStorage(long modelId) throws DatabaseHandlerException ;",MLStorage getModelStorage(long modelId) throws DatabaseHandlerException ;
42573,"@Override public void insertDefaultsIntoFeatureCustomized(long modelId,MLCustomizedFeature customizedValues) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    int tenantId=customizedValues.getTenantId();
    String imputeOption=customizedValues.getImputeOption();
    boolean inclusion=customizedValues.isInclude();
    String lastModifiedUser=customizedValues.getLastModifiedUser();
    String userName=customizedValues.getUserName();
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_DEFAULTS_INTO_FEATURE_CUSTOMIZED);
    insertStatement.setLong(1,modelId);
    insertStatement.setInt(2,tenantId);
    insertStatement.setString(3,imputeOption);
    insertStatement.setBoolean(4,inclusion);
    insertStatement.setString(5,lastModifiedUser);
    insertStatement.setString(6,userName);
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}","@Override public void insertDefaultsIntoFeatureCustomized(long modelId,MLCustomizedFeature customizedValues) throws DatabaseHandlerException {
  Connection connection=null;
  PreparedStatement insertStatement=null;
  long datasetVersionId=getDatasetVersionIdFromModelId(modelId);
  try {
    connection=dbh.getDataSource().getConnection();
    connection.setAutoCommit(false);
    int tenantId=customizedValues.getTenantId();
    String imputeOption=customizedValues.getImputeOption();
    boolean inclusion=customizedValues.isInclude();
    String lastModifiedUser=customizedValues.getLastModifiedUser();
    String userName=customizedValues.getUserName();
    insertStatement=connection.prepareStatement(SQLQueries.INSERT_DEFAULTS_INTO_FEATURE_CUSTOMIZED);
    insertStatement.setLong(1,modelId);
    insertStatement.setInt(2,tenantId);
    insertStatement.setString(3,imputeOption);
    insertStatement.setBoolean(4,inclusion);
    insertStatement.setString(5,lastModifiedUser);
    insertStatement.setString(6,userName);
    insertStatement.setLong(7,datasetVersionId);
    insertStatement.execute();
    connection.commit();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    MLDatabaseUtils.rollBack(connection);
    throw new DatabaseHandlerException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    MLDatabaseUtils.enableAutoCommit(connection);
    MLDatabaseUtils.closeDatabaseResources(connection,insertStatement);
  }
}"
42574,"@Override public Map<String,String> getModelStorage(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  Map<String,String> map=new HashMap<String,String>();
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_MODEL_STORAGE);
    statement.setLong(1,modelId);
    result=statement.executeQuery();
    if (result.first()) {
      map.put(MLConstants.STORAGE_TYPE,result.getString(1));
      map.put(MLConstants.STORAGE_LOCATION,result.getString(2));
      return map;
    }
 else {
      throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
    }
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}","@Override public MLStorage getModelStorage(long modelId) throws DatabaseHandlerException {
  Connection connection=null;
  ResultSet result=null;
  PreparedStatement statement=null;
  MLStorage storage=new MLStorage();
  try {
    connection=dbh.getDataSource().getConnection();
    statement=connection.prepareStatement(SQLQueries.GET_MODEL_STORAGE);
    statement.setLong(1,modelId);
    result=statement.executeQuery();
    if (result.first()) {
      storage.setType(result.getString(1));
      storage.setLocation(result.getString(2));
      return storage;
    }
 else {
      return storage;
    }
  }
 catch (  SQLException e) {
    throw new DatabaseHandlerException(""String_Node_Str"" + modelId);
  }
 finally {
    MLDatabaseUtils.closeDatabaseResources(connection,statement,result);
  }
}"
42575,"/** 
 * @param fileName      Name of the data-set file with extension, to calculate summary statistics
 * @param datasetID     Unique Identifier of the data-set
 * @param projectID     Unique Identifier of the project associated with the dataset
 * @return              Number of features in the data-set
 * @throws DatasetServiceException
 */
@Override public int calculateSummaryStatistics(String fileName,String datasetID,String projectID) throws DatasetServiceException {
  try {
    String uploadDir=dataUploadSettings.getUploadLocation();
    String fileSeparator=System.getProperty(DatasetConfigurations.FILE_SEPARATOR);
    if (uploadDir.equalsIgnoreCase(DatasetConfigurations.USER_HOME)) {
      uploadDir=System.getProperty(DatasetConfigurations.HOME) + fileSeparator + DatasetConfigurations.ML_PROJECTS;
    }
    String dataSetFullPath=uploadDir + fileSeparator + projectID+ fileSeparator+ fileName;
    File targetFile=new File(dataSetFullPath);
    if (targetFile.isFile() && targetFile.canRead()) {
      DatabaseService dbService=MLDatasetServiceValueHolder.getDatabaseService();
      dbService.insertDatasetDetails(datasetID,targetFile.getPath(),projectID);
      DatasetSummary summary=new DatasetSummary(targetFile,datasetID);
      int noOfFeatures=summary.generateSummary(summaryStatSettings.getSampleSize(),summaryStatSettings.getHistogramBins(),summaryStatSettings.getCategoricalThreshold(),true,mlDatabaseName);
      dbService.updateDatasetSample(datasetID,summary.samplePoints());
      return noOfFeatures;
    }
 else {
      throw new DatasetServiceException(""String_Node_Str"");
    }
  }
 catch (  DatasetSummaryException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  DatabaseHandlerException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
  }
}","/** 
 * @param fileName      Name of the data-set file with extension, to calculate summary statistics
 * @param datasetID     Unique Identifier of the data-set
 * @param projectID     Unique Identifier of the project associated with the dataset
 * @return              Number of features in the data-set
 * @throws DatasetServiceException
 */
@Override public int calculateSummaryStatistics(String fileName,String datasetID,String projectID) throws DatasetServiceException {
  try {
    String uploadDir=dataUploadSettings.getUploadLocation();
    String fileSeparator=System.getProperty(DatasetConfigurations.FILE_SEPARATOR);
    if (uploadDir.equalsIgnoreCase(DatasetConfigurations.USER_HOME)) {
      uploadDir=System.getProperty(DatasetConfigurations.HOME) + fileSeparator + DatasetConfigurations.ML_PROJECTS;
    }
    String dataSetFullPath=uploadDir + fileSeparator + projectID+ fileSeparator+ fileName;
    int tenantId=CarbonContext.getThreadLocalCarbonContext().getTenantId();
    String datasetName=fileName;
    String username=CarbonContext.getThreadLocalCarbonContext().getUsername();
    String comments=""String_Node_Str"";
    String sourceType=""String_Node_Str"";
    String targetType=""String_Node_Str"";
    String dataType=""String_Node_Str"";
    File targetFile=new File(dataSetFullPath);
    if (targetFile.isFile() && targetFile.canRead()) {
      DatabaseService dbService=MLDatasetServiceValueHolder.getDatabaseService();
      dbService.insertDatasetDetails(datasetName,String.valueOf(tenantId),username,comments,sourceType,targetType,dataType);
      String datasetVersion=""String_Node_Str"";
      dbService.insertDatasetVersionDetails(""String_Node_Str"",String.valueOf(tenantId),datasetVersion);
      DatasetSummary summary=new DatasetSummary(targetFile,datasetID);
      int noOfFeatures=summary.generateSummary(summaryStatSettings.getSampleSize(),summaryStatSettings.getHistogramBins(),summaryStatSettings.getCategoricalThreshold(),true,mlDatabaseName);
      dbService.updateValueSetSample(datasetID,summary.samplePoints());
      return noOfFeatures;
    }
 else {
      throw new DatasetServiceException(""String_Node_Str"");
    }
  }
 catch (  DatasetSummaryException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  DatabaseHandlerException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
  }
}"
42576,"/** 
 * Returns a absolute path of a given data source.
 * @param datasetID     Unique Identifier of the data-set
 * @return              Absolute path of a given data-set
 * @throws DatasetServiceException
 */
@Override public String getDatasetUrl(String datasetID) throws DatasetServiceException {
  try {
    DatabaseService dbService=MLDatasetServiceValueHolder.getDatabaseService();
    return dbService.getDatasetUrl(datasetID);
  }
 catch (  DatabaseHandlerException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * Returns a absolute path of a given data source.
 * @param valueSetId     Unique Identifier of the value-set
 * @return              Absolute path of a given value-set
 * @throws DatasetServiceException
 */
@Override public String getDatasetUrl(String valueSetId) throws DatasetServiceException {
  try {
    DatabaseService dbService=MLDatasetServiceValueHolder.getDatabaseService();
    return dbService.getValueSetUri(valueSetId);
  }
 catch (  DatabaseHandlerException e) {
    throw new DatasetServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}"
42577,"/** 
 * This method retuns a list of k-means cluster points
 * @param datasetURL   Dataset URL
 * @param features     List containing feature names
 * @param noOfClusters Number of clusters
 * @return Returns a list of cluster points
 * @throws ModelServiceException
 */
public List<ClusterPoint> getClusterPoints(String datasetURL,List<String> features,int noOfClusters) throws ModelServiceException {
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    final List<ClusterPoint> clusterPoints=new ArrayList<ClusterPoint>();
    if (datasetURL == null || datasetURL.equals(""String_Node_Str"")) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    if (features == null) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    if (noOfClusters < 1) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    sparkConf.setAppName(datasetURL);
    JavaSparkContext sc=new JavaSparkContext(sparkConf);
    JavaRDD<String> lines=sc.textFile(datasetURL);
    String headerRow=lines.take(1).get(0);
    String columnSeparator=MLModelUtils.getColumnSeparator(datasetURL);
    Pattern pattern=Pattern.compile(columnSeparator);
    final List<Integer> featureIndices=new ArrayList<Integer>();
    for (    String feature : features) {
      featureIndices.add(MLModelUtils.getFeatureIndex(feature,headerRow,columnSeparator));
    }
    JavaRDD<Vector> featureVectors=lines.filter(new HeaderFilter(headerRow)).sample(false,10000 / lines.count()).map(new LineToTokens(pattern)).filter(new MissingValuesFilter()).map(new TokensToVectors(featureIndices));
    KMeans kMeans=new KMeans();
    KMeansModel kMeansModel=kMeans.train(featureVectors,noOfClusters,100);
    List<Tuple2<Integer,Vector>> kMeansPredictions=kMeansModel.predict(featureVectors).zip(featureVectors).collect();
    for (    Tuple2<Integer,Vector> kMeansPrediction : kMeansPredictions) {
      ClusterPoint clusterPoint=new ClusterPoint();
      clusterPoint.setCluster(kMeansPrediction._1());
      clusterPoint.setFeatures(kMeansPrediction._2().toArray());
      clusterPoints.add(clusterPoint);
    }
    sc.stop();
    return clusterPoints;
  }
 catch (  ModelServiceException e) {
    throw new ModelServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}","/** 
 * This method retuns a list of k-means cluster points
 * @param datasetURL   Dataset URL
 * @param features     List containing feature names
 * @param noOfClusters Number of clusters
 * @return Returns a list of cluster points
 * @throws ModelServiceException
 */
public List<ClusterPoint> getClusterPoints(String datasetURL,List<String> features,int noOfClusters) throws ModelServiceException {
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    List<ClusterPoint> clusterPoints=new ArrayList<ClusterPoint>();
    if (datasetURL == null || datasetURL.equals(""String_Node_Str"")) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    if (features == null) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    if (noOfClusters < 1) {
      throw new ModelServiceException(""String_Node_Str"");
    }
    Thread.currentThread().setContextClassLoader(JavaSparkContext.class.getClassLoader());
    sparkConf.setAppName(datasetURL);
    JavaSparkContext sc=new JavaSparkContext(sparkConf);
    JavaRDD<String> lines=sc.textFile(datasetURL);
    String headerRow=lines.take(1).get(0);
    String columnSeparator=MLModelUtils.getColumnSeparator(datasetURL);
    Pattern pattern=Pattern.compile(columnSeparator);
    List<Integer> featureIndices=new ArrayList<Integer>();
    for (    String feature : features) {
      featureIndices.add(MLModelUtils.getFeatureIndex(feature,headerRow,columnSeparator));
    }
    double sampleFraction=10000.0 / (lines.count() - 1);
    if (sampleFraction > 1.0) {
      sampleFraction=1.0;
    }
    JavaRDD<Vector> featureVectors=lines.filter(new HeaderFilter(headerRow)).sample(false,sampleFraction).map(new LineToTokens(pattern)).filter(new MissingValuesFilter()).map(new TokensToVectors(featureIndices));
    KMeans kMeans=new KMeans();
    KMeansModel kMeansModel=kMeans.train(featureVectors,noOfClusters,100);
    List<Tuple2<Integer,Vector>> kMeansPredictions=kMeansModel.predict(featureVectors).zip(featureVectors).collect();
    for (    Tuple2<Integer,Vector> kMeansPrediction : kMeansPredictions) {
      ClusterPoint clusterPoint=new ClusterPoint();
      clusterPoint.setCluster(kMeansPrediction._1());
      clusterPoint.setFeatures(kMeansPrediction._2().toArray());
      clusterPoints.add(clusterPoint);
    }
    sc.stop();
    return clusterPoints;
  }
 catch (  ModelServiceException e) {
    throw new ModelServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
}"
42578,"/** 
 * Function to transform double array into labeled point
 * @param tokens double array of tokens
 * @return Labeled point
 * @throws org.wso2.carbon.ml.model.exceptions.ModelServiceException
 */
@Override public LabeledPoint call(double[] tokens) throws ModelServiceException {
  try {
    double response=tokens[responseIndex];
    double[] features=new double[tokens.length];
    for (int i=0; i < tokens.length; ++i) {
      if (responseIndex != i) {
        features[i]=tokens[i];
      }
    }
    return new LabeledPoint(response,Vectors.dense(features));
  }
 catch (  Exception e) {
    throw new ModelServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * Function to transform double array into labeled point
 * @param tokens double array of tokens
 * @return Labeled point
 * @throws org.wso2.carbon.ml.model.exceptions.ModelServiceException
 */
@Override public LabeledPoint call(double[] tokens) throws ModelServiceException {
  try {
    double response=tokens[responseIndex];
    double[] features=new double[tokens.length - 1];
    for (int i=0; i < tokens.length - 1; i++) {
      if (responseIndex != i) {
        features[i]=tokens[i];
      }
    }
    return new LabeledPoint(response,Vectors.dense(features));
  }
 catch (  Exception e) {
    throw new ModelServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}"
42579,"@Override public LogisticRegressionModel call() throws Exception {
  JSONObject json=new JSONObject(userResponse);
  SparkConf conf=new SparkConf().setAppName(""String_Node_Str"").setMaster(""String_Node_Str"");
  JavaSparkContext sc=new JavaSparkContext(conf);
  JavaRDD<String> lines=sc.textFile(json.getString(""String_Node_Str""));
  String headerRow=lines.take(1).get(0);
  String[] headerItems=headerRow.split(json.getString(""String_Node_Str""));
  String response=json.getString(""String_Node_Str"");
  Integer responseIndex;
  for (int i=0; i < headerItems.length; i++) {
    if (response.equals(headerItems[i])) {
      responseIndex=i;
      break;
    }
  }
  Header header=new Header(headerRow);
  JavaRDD<String> data=lines.filter(header);
  Pattern COMMA=Pattern.compile(json.getString(""String_Node_Str""));
  LineToTokens lineToTokens=new LineToTokens(COMMA);
  JavaRDD<String[]> tokens=data.map(lineToTokens);
  TokensToLabeledPoints tokensToLabeledPoints=new TokensToLabeledPoints(8);
  TokensToLabeledPoints tokensToLabeledPoints=new TokensToLabeledPoints(9);
  JavaRDD<LabeledPoint> labeledPoints=tokens.map(tokensToLabeledPoints);
  JavaRDD<LabeledPoint> trainingData=labeledPoints.sample(false,0.7,11L);
  JavaRDD<LabeledPoint> testingData=labeledPoints.subtract(trainingData);
  LogisticRegressionWithSGD lrSGD=new LogisticRegressionWithSGD(json.getDouble(""String_Node_Str""),json.getInt(""String_Node_Str""),json.getDouble(""String_Node_Str""),1.0);
  if (""String_Node_Str"".equals(json.getString(""String_Node_Str""))) {
    lrSGD.optimizer().setUpdater(new L1Updater());
  }
 else   if (""String_Node_Str"".equals(json.getString(""String_Node_Str""))) {
    lrSGD.optimizer().setUpdater(new SquaredL2Updater());
  }
  lrSGD.setIntercept(true);
  LogisticRegressionModel model=lrSGD.run(trainingData.rdd());
  sc.stop();
  return model;
}","@Override public LogisticRegressionModel call() throws Exception {
  JSONObject json=new JSONObject(userResponse);
  SparkConf conf=new SparkConf().setAppName(""String_Node_Str"").setMaster(""String_Node_Str"");
  JavaSparkContext sc=new JavaSparkContext(conf);
  JavaRDD<String> lines=sc.textFile(json.getString(""String_Node_Str""));
  String headerRow=lines.take(1).get(0);
  String[] headerItems=headerRow.split(json.getString(""String_Node_Str""));
  String response=json.getString(""String_Node_Str"");
  Integer responseIndex;
  for (int i=0; i < headerItems.length; i++) {
    if (response.equals(headerItems[i])) {
      responseIndex=i;
      break;
    }
  }
  Header header=new Header(headerRow);
  JavaRDD<String> data=lines.filter(header);
  Pattern COMMA=Pattern.compile(json.getString(""String_Node_Str""));
  LineToTokens lineToTokens=new LineToTokens(COMMA);
  JavaRDD<String[]> tokens=data.map(lineToTokens);
  TokensToLabeledPoints tokensToLabeledPoints=new TokensToLabeledPoints(8);
  JavaRDD<LabeledPoint> labeledPoints=tokens.map(tokensToLabeledPoints);
  JavaRDD<LabeledPoint> trainingData=labeledPoints.sample(false,0.7,11L);
  JavaRDD<LabeledPoint> testingData=labeledPoints.subtract(trainingData);
  LogisticRegressionWithSGD lrSGD=new LogisticRegressionWithSGD(json.getDouble(""String_Node_Str""),json.getInt(""String_Node_Str""),json.getDouble(""String_Node_Str""),1.0);
  if (""String_Node_Str"".equals(json.getString(""String_Node_Str""))) {
    lrSGD.optimizer().setUpdater(new L1Updater());
  }
 else   if (""String_Node_Str"".equals(json.getString(""String_Node_Str""))) {
    lrSGD.optimizer().setUpdater(new SquaredL2Updater());
  }
  lrSGD.setIntercept(true);
  LogisticRegressionModel model=lrSGD.run(trainingData.rdd());
  sc.stop();
  return model;
}"
42580,"@Test public void testLogisticRegression() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  RunLogisticRegression runLogisticRegression=new RunLogisticRegression(jsonString);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  CompletionService<LogisticRegressionModel> completionService=new ExecutorCompletionService<LogisticRegressionModel>(executorService);
  completionService.submit(runLogisticRegression);
  LogisticRegressionModel model=completionService.take().get();
  System.out.println(model.intercept());
}","@Test public void testLogisticRegression() throws Exception {
  String jsonString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  RunLogisticRegression runLogisticRegression=new RunLogisticRegression(jsonString);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  CompletionService<LogisticRegressionModel> completionService=new ExecutorCompletionService<LogisticRegressionModel>(executorService);
  completionService.submit(runLogisticRegression);
  LogisticRegressionModel model=completionService.take().get();
  System.out.println(model.intercept());
}"
42581,"/** 
 * Create the json string with summary stat for a given column
 * @param column
 * @param type
 * @param graphFrequencies
 * @param missing
 * @param unique
 * @param descriptiveStats
 * @return
 */
private JSONObject createJson(int column,FeatureType[] type,List<SortedMap<?,Integer>> graphFrequencies,int[] missing,int[] unique,List<DescriptiveStatistics> descriptiveStats){
  JSONObject json=new JSONObject();
  JSONArray freqs=new JSONArray();
  Object[] categoryNames=graphFrequencies.get(column).keySet().toArray();
  for (int i=0; i < graphFrequencies.get(column).size(); i++) {
    JSONObject temp=new JSONObject();
    temp.put(""String_Node_Str"",categoryNames[i].toString());
    temp.put(""String_Node_Str"",graphFrequencies.get(column).get(categoryNames[i]));
    freqs.put(temp);
  }
  json.put(""String_Node_Str"",type[column].toString());
  json.put(""String_Node_Str"",unique[column]);
  json.put(""String_Node_Str"",missing[column]);
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (descriptiveStats.get(column).getN() != 0) {
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getMean()));
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getPercentile(50)));
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getStandardDeviation()));
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getSkewness()));
  }
  json.put(""String_Node_Str"",freqs);
  return json;
}","/** 
 * Create the json string with summary stat for a given column
 * @param column
 * @param type
 * @param graphFrequencies
 * @param missing
 * @param unique
 * @param descriptiveStats
 * @return
 */
private JSONObject createJson(int column,FeatureType[] type,List<SortedMap<?,Integer>> graphFrequencies,int[] missing,int[] unique,List<DescriptiveStatistics> descriptiveStats){
  JSONObject json=new JSONObject();
  JSONArray freqs=new JSONArray();
  Object[] categoryNames=graphFrequencies.get(column).keySet().toArray();
  for (int i=0; i < graphFrequencies.get(column).size(); i++) {
    JSONObject temp=new JSONObject();
    temp.put(""String_Node_Str"",categoryNames[i].toString());
    temp.put(""String_Node_Str"",graphFrequencies.get(column).get(categoryNames[i]));
    freqs.put(temp);
  }
  json.put(""String_Node_Str"",type[column].toString());
  json.put(""String_Node_Str"",unique[column]);
  json.put(""String_Node_Str"",missing[column]);
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (descriptiveStats.get(column).getN() != 0) {
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getMean()));
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getPercentile(50)));
    json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getStandardDeviation()));
    if (type[column].equals(FeatureType.NUMERICAL)) {
      json.put(""String_Node_Str"",decimalFormat.format(descriptiveStats.get(column).getSkewness()));
    }
  }
  json.put(""String_Node_Str"",freqs);
  return json;
}"
42582,"public Feature[] getFeatures(int dataSet,int startPoint,int numberOfFeatures) throws DatabaseHandlerException {
  List<Feature> features=new ArrayList<Feature>();
  try {
    ResultSet result=connection.createStatement().executeQuery(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numberOfFeatures+ ""String_Node_Str""+ (startPoint - 1)+ ""String_Node_Str"");
    FeatureType featureType=FeatureType.NUMERICAL;
    ImputeOption imputeOperation=ImputeOption.DISCARD;
    while (result.next()) {
      if (""String_Node_Str"".equals(result.getNString(3))) {
        featureType=FeatureType.CATEGORICAL;
      }
      if (""String_Node_Str"".equals(result.getNString(5))) {
        imputeOperation=ImputeOption.REPLACE_WTH_MEAN;
      }
 else       if (""String_Node_Str"".equals(result.getNString(5))) {
        imputeOperation=ImputeOption.REPLACE_WTH_MEAN;
      }
      features.add(new Feature(result.getNString(1),result.getBoolean(6),featureType,imputeOperation,result.getNString(4)));
    }
  }
 catch (  SQLException e) {
    String msg=""String_Node_Str"" + dataSet + ""String_Node_Str""+ e.getMessage();
    LOGGER.error(msg,e);
    throw new DatabaseHandlerException(msg);
  }
  return features.toArray(new Feature[features.size()]);
}","public Feature[] getFeatures(int dataSet,int startPoint,int numberOfFeatures) throws DatabaseHandlerException {
  List<Feature> features=new ArrayList<Feature>();
  try {
    ResultSet result=connection.createStatement().executeQuery(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numberOfFeatures+ ""String_Node_Str""+ (startPoint - 1)+ ""String_Node_Str"");
    while (result.next()) {
      FeatureType featureType=FeatureType.NUMERICAL;
      if (""String_Node_Str"".equals(result.getNString(3))) {
        featureType=FeatureType.CATEGORICAL;
      }
      ImputeOption imputeOperation=ImputeOption.DISCARD;
      if (""String_Node_Str"".equals(result.getNString(5))) {
        imputeOperation=ImputeOption.REPLACE_WTH_MEAN;
      }
 else       if (""String_Node_Str"".equals(result.getNString(5))) {
        imputeOperation=ImputeOption.REPLACE_WTH_MEAN;
      }
      features.add(new Feature(result.getNString(1),result.getBoolean(6),featureType,imputeOperation,result.getNString(4)));
    }
  }
 catch (  SQLException e) {
    String msg=""String_Node_Str"" + dataSet + ""String_Node_Str""+ e.getMessage();
    LOGGER.error(msg,e);
    throw new DatabaseHandlerException(msg);
  }
  return features.toArray(new Feature[features.size()]);
}"
42583,"private String createJson(int column,FeatureType[] type,List<Map<String,Integer>> graphFrequencies,List<Integer> missing,List<Integer> unique,List<DescriptiveStatistics> descriptiveStats){
  String json=""String_Node_Str"";
  String freqs=""String_Node_Str"";
  Object[] categoryNames=graphFrequencies.get(column).keySet().toArray();
  for (int i=0; i < graphFrequencies.get(column).size(); i++) {
    freqs=freqs + ""String_Node_Str"" + categoryNames[i].toString()+ ""String_Node_Str""+ graphFrequencies.get(column).get(categoryNames[i].toString())+ ""String_Node_Str"";
  }
  freqs=freqs.replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  json=json + ""String_Node_Str"" + type[column].toString()+ ""String_Node_Str""+ unique.get(column)+ ""String_Node_Str""+ missing.get(column)+ ""String_Node_Str""+ descriptiveStats.get(column).getMean()+ ""String_Node_Str""+ descriptiveStats.get(column).getPercentile(50)+ ""String_Node_Str""+ descriptiveStats.get(column).getStandardDeviation()+ ""String_Node_Str""+ descriptiveStats.get(column).getSkewness()+ ""String_Node_Str""+ freqs+ ""String_Node_Str"";
  return json;
}","private String createJson(int column,FeatureType[] type,List<Map<String,Integer>> graphFrequencies,List<Integer> missing,List<Integer> unique,List<DescriptiveStatistics> descriptiveStats){
  String json=""String_Node_Str"";
  String freqs=""String_Node_Str"";
  Object[] categoryNames=graphFrequencies.get(column).keySet().toArray();
  for (int i=0; i < graphFrequencies.get(column).size(); i++) {
    freqs=freqs + ""String_Node_Str"" + categoryNames[i].toString()+ ""String_Node_Str""+ graphFrequencies.get(column).get(categoryNames[i].toString())+ ""String_Node_Str"";
  }
  freqs=freqs.replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  json=json + ""String_Node_Str"" + type[column].toString()+ ""String_Node_Str""+ ""String_Node_Str""+ unique.get(column)+ ""String_Node_Str""+ missing.get(column)+ ""String_Node_Str""+ descriptiveStats.get(column).getMean()+ ""String_Node_Str""+ descriptiveStats.get(column).getPercentile(50)+ ""String_Node_Str""+ descriptiveStats.get(column).getStandardDeviation()+ ""String_Node_Str""+ descriptiveStats.get(column).getSkewness()+ ""String_Node_Str""+ freqs+ ""String_Node_Str"";
  return json;
}"
42584,"/** 
 * This private method is used by the  {@link #populateDatatable(HttpServletResponse,HttpServletRequest,Feature[])}method build selected boxes.
 * @param types :
 * @param selectedOption : already selected option
 * @param cssClass : css class assigned to this selection buttons.
 * @return : HTML code for rendering this selection boxes
 */
private String buildSectionBox(String[] types,String selectedOption,String cssClass){
  StringBuilder selection=new StringBuilder();
  selection.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
  for (  String ft : types) {
    if (selectedOption.equals(ft)) {
      selection.append(""String_Node_Str"" + ft.toString() + ""String_Node_Str""+ ft.toString()+ ""String_Node_Str"");
    }
 else {
      selection.append(""String_Node_Str"" + ft.toString() + ""String_Node_Str""+ ft.toString()+ ""String_Node_Str"");
    }
  }
  selection.append(""String_Node_Str"");
  return selection.toString();
}","/** 
 * This private method is used by the  {@link #populateDatatable(HttpServletResponse,HttpServletRequest,Feature[])}method build selected boxes.
 * @param types :
 * @param selectedOption : already selected option
 * @param cssClass : css class assigned to this selection buttons.
 * @return : HTML code for rendering this selection boxes
 */
private String buildSectionBox(String[] types,String selectedOption,String cssClass){
  StringBuilder selection=new StringBuilder();
  selection.append(""String_Node_Str"" + cssClass + ""String_Node_Str"");
  for (  String ft : types) {
    if (selectedOption.equalsIgnoreCase(ft)) {
      selection.append(""String_Node_Str"" + ft.toString() + ""String_Node_Str""+ ft.toString()+ ""String_Node_Str"");
    }
 else {
      selection.append(""String_Node_Str"" + ft.toString() + ""String_Node_Str""+ ft.toString()+ ""String_Node_Str"");
    }
  }
  selection.append(""String_Node_Str"");
  return selection.toString();
}"
42585,"public void populateDatatable(HttpServletResponse response,HttpServletRequest request,Feature[] features,int datasetSize) throws IOException {
  JSONObject jsonResponse=new JSONObject();
  jsonResponse.put(""String_Node_Str"",Integer.parseInt(request.getParameter(""String_Node_Str"")));
  jsonResponse.put(""String_Node_Str"",datasetSize);
  jsonResponse.put(""String_Node_Str"",datasetSize);
  for (  Feature feature : features) {
    JSONArray jsonArray=new JSONArray();
    jsonArray.put(""String_Node_Str"" + feature.getFieldName() + ""String_Node_Str"");
    jsonArray.put(buildInputCheckBox(feature.isInputSpecified()));
    jsonArray.put(buildSectionBox(new String[]{""String_Node_Str"",""String_Node_Str""},feature.getType().toString(),""String_Node_Str""));
    jsonArray.put(""String_Node_Str"");
    jsonArray.put(buildSectionBox(new String[]{""String_Node_Str"",""String_Node_Str""},feature.getImputeOperation().toString(),""String_Node_Str""));
    jsonResponse.append(""String_Node_Str"",jsonArray);
  }
  response.resetBuffer();
  response.reset();
  response.setContentType(""String_Node_Str"");
  response.getWriter().print(jsonResponse.toString().trim());
}","public void populateDatatable(HttpServletResponse response,HttpServletRequest request,Feature[] features,int datasetSize) throws IOException {
  JSONObject jsonResponse=new JSONObject();
  jsonResponse.put(""String_Node_Str"",Integer.parseInt(request.getParameter(""String_Node_Str"")));
  jsonResponse.put(""String_Node_Str"",datasetSize);
  jsonResponse.put(""String_Node_Str"",datasetSize);
  for (  Feature feature : features) {
    JSONArray jsonArray=new JSONArray();
    jsonArray.put(""String_Node_Str"" + feature.getFieldName() + ""String_Node_Str"");
    jsonArray.put(buildInputCheckBox(feature.isInputSpecified()));
    jsonArray.put(buildSectionBox(new String[]{""String_Node_Str"",""String_Node_Str""},feature.getType().getFeatureName(),""String_Node_Str""));
    jsonArray.put(feature.getSummaryStats());
    jsonArray.put(buildSectionBox(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},feature.getImputeOperation().getImputeOptionName(),""String_Node_Str""));
    jsonResponse.append(""String_Node_Str"",jsonArray);
  }
  response.resetBuffer();
  response.reset();
  response.setContentType(""String_Node_Str"");
  response.getWriter().print(jsonResponse.toString().trim());
}"
42586,"public Feature[] getFeatures(int dataSet,int startPoint,int numberOfFeatures) throws DatabaseHandlerException {
  Feature[] features=new Feature[numberOfFeatures];
  try {
    ResultSet result=connection.createStatement().executeQuery(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numberOfFeatures+ ""String_Node_Str""+ (startPoint - 1)+ ""String_Node_Str"");
    Feature[] feature=new Feature[numberOfFeatures];
    FeatureType featureType=new FeatureType();
    ImputeOption imputeOperation=new ImputeOption();
    int i=0;
    while (result.next()) {
      featureType.setFeatureType(result.getNString(3));
      imputeOperation.setMethod(result.getNString(5));
      feature[i++]=new Feature(result.getNString(1),result.getBoolean(6),featureType,imputeOperation);
    }
  }
 catch (  SQLException e) {
    String msg=""String_Node_Str"" + dataSet + ""String_Node_Str""+ e.getMessage();
    LOGGER.error(msg,e);
    throw new DatabaseHandlerException(msg);
  }
  return features;
}","public Feature[] getFeatures(int dataSet,int startPoint,int numberOfFeatures) throws DatabaseHandlerException {
  Feature[] features=new Feature[numberOfFeatures];
  try {
    ResultSet result=connection.createStatement().executeQuery(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numberOfFeatures+ ""String_Node_Str""+ (startPoint - 1)+ ""String_Node_Str"");
    FeatureType featureType=new FeatureType();
    ImputeOption imputeOperation=new ImputeOption();
    int i=0;
    while (result.next()) {
      featureType.setFeatureType(result.getNString(3));
      imputeOperation.setMethod(result.getNString(5));
      features[i++]=new Feature(result.getNString(1),result.getBoolean(6),featureType,imputeOperation);
    }
  }
 catch (  SQLException e) {
    String msg=""String_Node_Str"" + dataSet + ""String_Node_Str""+ e.getMessage();
    LOGGER.error(msg,e);
    throw new DatabaseHandlerException(msg);
  }
  return features;
}"
42587,"/** 
 * Calculates   {@link MonetarySummation} for given {@link Invoice} basing on line {@link Item}s and global   {@link io.konik.zugferd.entity.AllowanceCharge} and {@link LogisticsServiceCharge}
 * @param invoice
 * @return
 */
public static RecalculationResult recalculate(final Invoice invoice){
  assertNotNull(invoice);
  CurrencyCode currency=getCurrency(invoice);
  List<Item> items=Items.purchasableItemsOnly(invoice.getTrade().getItems());
  Settlement settlement=invoice.getTrade().getSettlement();
  TaxAggregator taxAggregator=new TaxAggregator();
  if (items.isEmpty()) {
    return new RecalculationResult(MonetarySummations.newMonetarySummation(settlement.getMonetarySummation()),taxAggregator);
  }
  MonetarySummation monetarySummation=MonetarySummations.newMonetarySummation(currency);
  monetarySummation.setAllowanceTotal(new InvoiceAllowanceTotalCalculator().apply(settlement));
  monetarySummation.setChargeTotal(new InvoiceChargeTotalCalculator().apply(settlement));
  log.debug(""String_Node_Str"",items.size());
  int itemsCounter=0;
  for (  Item item : items) {
    log.debug(""String_Node_Str"",++itemsCounter);
    log.debug(""String_Node_Str"",item.getProduct().getName());
    Amount lineTotal=new ItemLineTotalCalculator().apply(item);
    ItemTax itemTax=new ItemTaxExtractor().apply(item);
    log.debug(""String_Node_Str"",lineTotal);
    log.debug(""String_Node_Str"",itemTax.getPercentage());
    taxAggregator.add(itemTax,lineTotal != null ? lineTotal.getValue() : BigDecimal.ZERO);
    monetarySummation.setLineTotal(Amounts.add(monetarySummation.getLineTotal(),lineTotal));
    log.debug(""String_Node_Str"",monetarySummation.getLineTotal());
  }
  log.debug(""String_Node_Str"");
  log.debug(""String_Node_Str"");
  appendTaxFromInvoiceAllowanceCharge(settlement,taxAggregator);
  appendTaxFromInvoiceServiceCharge(settlement,taxAggregator);
  monetarySummation.setTaxBasisTotal(new Amount(taxAggregator.calculateTaxBasis(),currency));
  monetarySummation.setTaxTotal(new Amount(taxAggregator.calculateTaxTotal(),currency));
  monetarySummation.setGrandTotal(Amounts.add(monetarySummation.getTaxBasisTotal(),monetarySummation.getTaxTotal()));
  log.debug(""String_Node_Str"",monetarySummation.getGrandTotal());
  if (settlement.getMonetarySummation() != null && settlement.getMonetarySummation().getTotalPrepaid() != null) {
    monetarySummation.setTotalPrepaid(settlement.getMonetarySummation().getTotalPrepaid());
  }
  monetarySummation.setDuePayable(Amounts.add(monetarySummation.getGrandTotal(),Amounts.negate(monetarySummation.getTotalPrepaid())));
  MonetarySummation result=MonetarySummations.precise(monetarySummation,2,RoundingMode.HALF_UP);
  log.debug(""String_Node_Str"");
  log.debug(""String_Node_Str"",result);
  log.debug(""String_Node_Str"");
  return new RecalculationResult(result,taxAggregator);
}","/** 
 * Calculates   {@link MonetarySummation} for given {@link Invoice} basing on line {@link Item}s and global   {@link io.konik.zugferd.entity.AllowanceCharge} and {@link LogisticsServiceCharge}
 * @param invoice
 * @return
 */
public static RecalculationResult recalculate(final Invoice invoice){
  assertNotNull(invoice);
  CurrencyCode currency=getCurrency(invoice);
  List<Item> items=Items.purchasableItemsOnly(invoice.getTrade().getItems());
  Settlement settlement=invoice.getTrade().getSettlement();
  TaxAggregator taxAggregator=new TaxAggregator();
  if (items.isEmpty()) {
    return new RecalculationResult(MonetarySummations.newMonetarySummation(settlement.getMonetarySummation()),taxAggregator);
  }
  MonetarySummation monetarySummation=MonetarySummations.newMonetarySummation(currency);
  monetarySummation.setAllowanceTotal(new InvoiceAllowanceTotalCalculator().apply(settlement));
  monetarySummation.setChargeTotal(new InvoiceChargeTotalCalculator().apply(settlement));
  log.debug(""String_Node_Str"",items.size());
  int itemsCounter=0;
  for (  Item item : items) {
    log.debug(""String_Node_Str"",++itemsCounter);
    log.debug(""String_Node_Str"",item.getProduct() != null ? item.getProduct().getName() : ""String_Node_Str"");
    Amount lineTotal=new ItemLineTotalCalculator().apply(item);
    ItemTax itemTax=new ItemTaxExtractor().apply(item);
    log.debug(""String_Node_Str"",lineTotal);
    log.debug(""String_Node_Str"",itemTax.getPercentage());
    taxAggregator.add(itemTax,lineTotal != null ? lineTotal.getValue() : BigDecimal.ZERO);
    monetarySummation.setLineTotal(Amounts.add(monetarySummation.getLineTotal(),lineTotal));
    log.debug(""String_Node_Str"",monetarySummation.getLineTotal());
  }
  log.debug(""String_Node_Str"");
  log.debug(""String_Node_Str"");
  appendTaxFromInvoiceAllowanceCharge(settlement,taxAggregator);
  appendTaxFromInvoiceServiceCharge(settlement,taxAggregator);
  monetarySummation.setTaxBasisTotal(new Amount(taxAggregator.calculateTaxBasis(),currency));
  monetarySummation.setTaxTotal(new Amount(taxAggregator.calculateTaxTotal(),currency));
  monetarySummation.setGrandTotal(Amounts.add(monetarySummation.getTaxBasisTotal(),monetarySummation.getTaxTotal()));
  log.debug(""String_Node_Str"",monetarySummation.getGrandTotal());
  if (settlement.getMonetarySummation() != null && settlement.getMonetarySummation().getTotalPrepaid() != null) {
    monetarySummation.setTotalPrepaid(settlement.getMonetarySummation().getTotalPrepaid());
  }
  monetarySummation.setDuePayable(Amounts.add(monetarySummation.getGrandTotal(),Amounts.negate(monetarySummation.getTotalPrepaid())));
  MonetarySummation result=MonetarySummations.precise(monetarySummation,2,RoundingMode.HALF_UP);
  log.debug(""String_Node_Str"");
  log.debug(""String_Node_Str"",result);
  log.debug(""String_Node_Str"");
  return new RecalculationResult(result,taxAggregator);
}"
42588,"/** 
 * Calculates   {@link SpecifiedMonetarySummation} for given {@link Item}
 * @param item
 * @return
 */
public static SpecifiedMonetarySummation calculateSpecifiedMonetarySummation(final Item item){
  log.debug(""String_Node_Str"",item.getProduct().getName());
  CurrencyCode currencyCode=getCurrency(item);
  SpecifiedMonetarySummation monetarySummation=MonetarySummations.newSpecifiedMonetarySummation(currencyCode);
  monetarySummation.setLineTotal(Amounts.setPrecision(new ItemLineTotalCalculator().apply(item),2,RoundingMode.HALF_UP));
  monetarySummation.setTotalAllowanceCharge(Amounts.setPrecision(new ItemTotalAllowanceChargeCalculator(currencyCode).apply(item),2,RoundingMode.HALF_UP));
  log.debug(""String_Node_Str"",monetarySummation.getLineTotal());
  log.debug(""String_Node_Str"",monetarySummation.getTotalAllowanceCharge());
  return monetarySummation;
}","/** 
 * Calculates   {@link SpecifiedMonetarySummation} for given {@link Item}
 * @param item
 * @return
 */
public static SpecifiedMonetarySummation calculateSpecifiedMonetarySummation(final Item item){
  log.debug(""String_Node_Str"",item.getProduct() != null ? item.getProduct().getName() : ""String_Node_Str"");
  CurrencyCode currencyCode=getCurrency(item);
  SpecifiedMonetarySummation monetarySummation=MonetarySummations.newSpecifiedMonetarySummation(currencyCode);
  monetarySummation.setLineTotal(Amounts.setPrecision(new ItemLineTotalCalculator().apply(item),2,RoundingMode.HALF_UP));
  monetarySummation.setTotalAllowanceCharge(Amounts.setPrecision(new ItemTotalAllowanceChargeCalculator(currencyCode).apply(item),2,RoundingMode.HALF_UP));
  log.debug(""String_Node_Str"",monetarySummation.getLineTotal());
  log.debug(""String_Node_Str"",monetarySummation.getTotalAllowanceCharge());
  return monetarySummation;
}"
42589,"@Parameterized.Parameters(name=""String_Node_Str"") public static Collection<Object[]> getData(){
  return Arrays.asList(new Object[][]{{""String_Node_Str"",0},{""String_Node_Str"",2},{""String_Node_Str"",5},{""String_Node_Str"",0},{""String_Node_Str"",2},{""String_Node_Str"",5}});
}","@Parameterized.Parameters(name=""String_Node_Str"") public static Collection<Object[]> getData(){
  return Arrays.asList(new Object[][]{{""String_Node_Str"",0},{""String_Node_Str"",2},{""String_Node_Str"",5},{""String_Node_Str"",0},{""String_Node_Str"",1},{""String_Node_Str"",5}});
}"
42590,"/** 
 * Gets the invoice header notes. Example:: -   {@code note content: }{@link Note#getContent() Invoice like agreed on the telephone with Mr.X.} --  {@code note subject code as UNCL 4451: }{@link Note#getSubjectCode() AAK}
 * @return the included note
 */
@Basic @Valid @NotEmpty public List<Note> getNotes(){
  if (notes == null) {
    notes=new ArrayList<Note>();
  }
  return this.notes;
}","/** 
 * Gets the invoice header notes. Example:: -   {@code note content: }{@link Note#getContent() Invoice like agreed on the telephone with Mr.X.} --  {@code note subject code as UNCL 4451: }{@link Note#getSubjectCode() AAK}
 * @return the included note
 */
@Basic @Valid public List<Note> getNotes(){
  if (notes == null) {
    notes=new ArrayList<Note>();
  }
  return this.notes;
}"
42591,"/** 
 * Gets the human readable content.
 * @return the content
 */
@Basic(ifParent=Header.class) @Comfort(ifParent=PositionDocument.class) @NotEmpty public List<String> getContents(){
  if (contents == null) {
    this.contents=new ArrayList<String>();
  }
  return this.contents;
}","/** 
 * Gets the human readable note content.
 * @return the content
 */
@Basic(ifParent=Header.class) @Comfort(ifParent=PositionDocument.class) @NotEmpty public List<String> getContents(){
  if (contents == null) {
    this.contents=new ArrayList<String>();
  }
  return this.contents;
}"
42592,"@Test public void validateInvoice(){
  Invoice invoice=createInvoice();
  InvoiceValidator invoiceValidator=new InvoiceValidator();
  Set<ConstraintViolation<Invoice>> violations=invoiceValidator.validate(invoice);
  for (  ConstraintViolation<Invoice> violation : violations) {
  }
  assertThat(violations.size()).isZero();
}","@Test public void validateInvoice(){
  Invoice invoice=createInvoice();
  InvoiceValidator invoiceValidator=new InvoiceValidator();
  Set<ConstraintViolation<Invoice>> violations=invoiceValidator.validate(invoice);
  for (  ConstraintViolation<Invoice> violation : violations) {
    log.log(Level.INFO,violation.getMessage() + ""String_Node_Str"" + violation.getPropertyPath());
  }
  assertThat(violations.size()).isZero();
}"
42593,"@Test public void validateInvoiceModel(){
  Invoice invoice=transformer.toModel(testFile);
  ConformanceLevel conformanceLevel=invoice.getContext().getGuideline().getConformanceLevel();
  Class<?>[] validationGroups=resolveIntoValidationGroups(conformanceLevel);
  Set<ConstraintViolation<Invoice>> validationResult=validator.validate(invoice,validationGroups);
  if (!validationResult.isEmpty()) {
    ConstraintViolation<Invoice> violation=validationResult.iterator().next();
    assertThat(validationResult).as(violation.getMessage()).isEmpty();
  }
 else {
    modelValidationCounter++;
  }
}","@Test public void validateInvoiceModel(){
  Invoice invoice=transformer.toModel(testFile);
  ConformanceLevel conformanceLevel=invoice.getContext().getGuideline().getConformanceLevel();
  Class<?>[] validationGroups=resolveIntoValidationGroups(conformanceLevel);
  Set<ConstraintViolation<Invoice>> validationResult=validator.validate(invoice,validationGroups);
  for (  ConstraintViolation<Invoice> violation : validationResult) {
    String msg=violation.getPropertyPath() + ""String_Node_Str"" + violation.getMessage()+ ""String_Node_Str""+ violation.getInvalidValue();
    assertThat(validationResult).as(msg).isEmpty();
  }
  modelValidationCounter++;
}"
42594,"public static <T extends GenericHandler>Object runAnnotated(T handler,Class<? extends Servlet> servletClass,Class<? extends Annotation> annotationClass){
  HandlerMeta meta=HandlerMeta.get(handler.getClass(),servletClass);
  HandlerMethod method=meta.methodsMap.get(annotationClass);
  if (method == null) {
    return null;
  }
  return method.run(handler.context,handler,annotationClass == After.class);
}","public static <T extends GenericHandler>Object runAnnotated(T handler,Class<? extends Servlet> servletClass,Class<? extends Annotation> annotationClass){
  HandlerMeta meta=HandlerMeta.get(handler.getClass(),servletClass);
  HandlerMethod method=meta.methodsMap.get(annotationClass);
  if (method == null) {
    return null;
  }
  return new HandlerMethodRunner(method).run(handler.context,handler,annotationClass == After.class);
}"
42595,"public static <T extends GenericHandler>Object runHandler(T handler,Class<? extends Servlet> servletClass){
  HandlerMeta meta=HandlerMeta.get(handler.getClass(),servletClass);
  for (  HandlerMethod method : meta.handlerMethods) {
    Object result=method.run(handler.context,handler,false);
    if (result != NoAdapter.NO_ADAPTER) {
      return result;
    }
  }
  return NoAdapter.NO_ADAPTER;
}","public static <T extends GenericHandler>Object runHandler(T handler,Class<? extends Servlet> servletClass){
  HandlerMeta meta=HandlerMeta.get(handler.getClass(),servletClass);
  for (  HandlerMethod method : meta.handlerMethods) {
    Object result=new HandlerMethodRunner(method).run(handler.context,handler,false);
    if (result != NoAdapter.NO_ADAPTER) {
      return result;
    }
  }
  return NoAdapter.NO_ADAPTER;
}"
42596,"@After public void after(){
  Date endTime=new Date();
  long timeDiff=endTime.getTime() - startTime.getTime();
  String queryString=context.getRequest().getQueryString();
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
 else {
    queryString=""String_Node_Str"" + queryString;
  }
  Util.getLogger().info(""String_Node_Str"",context.getRequest().getMethod(),context.getRequest().getRequestURI(),queryString,timeDiff);
  if (context.getRequest() != null && !context.isExceptionHandled()) {
    Util.getLogger().warn(""String_Node_Str"",context.getException());
  }
}","@After public void after(){
  Date endTime=new Date();
  long timeDiff=endTime.getTime() - startTime.getTime();
  String queryString=context.getRequest().getQueryString();
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
 else {
    queryString=""String_Node_Str"" + queryString;
  }
  Util.getLogger().info(""String_Node_Str"",context.getRequest().getMethod(),context.getRequest().getRequestURI(),queryString,timeDiff);
  if (context.getException() != null && !context.isExceptionHandled()) {
    Util.getLogger().warn(""String_Node_Str"",context.getException());
  }
}"
42597,"@Before @HandleErrors({@ErrorCase(code=403,logLevel=""String_Node_Str"",description=""String_Node_Str"",exception=UserDao.TokenNotFoundException.class),@ErrorCase(code=500,logLevel=""String_Node_Str"",description=""String_Node_Str"",exception=UserDao.UserNotFoundException.class)}) public void getUser(@HeaderParam(""String_Node_Str"") @Required String token) throws UserDao.TokenNotFoundException, UserDao.UserNotFoundException, InstantiationException, IllegalAccessException {
  Long userId=getUserDao().getUserIdFromToken(token);
  injectorVariable=getUserDao().getUser(userId);
}","@Before @HandleErrors({@ErrorCase(code=403,logLevel=""String_Node_Str"",description=""String_Node_Str"",exception=UserDao.TokenNotFoundException.class),@ErrorCase(code=500,logLevel=""String_Node_Str"",description=""String_Node_Str"",exception=UserDao.UserNotFoundException.class)}) public void getUser(@HeaderParam(""String_Node_Str"") @Required String token) throws UserDao.TokenNotFoundException, UserDao.UserNotFoundException, InstantiationException, IllegalAccessException {
  String username=getUserDao().getUsernameFromToken(token);
  injectorVariable=getUserDao().getUser(username);
}"
42598,"/** 
 * Save a user's token, with an expire time.
 * @param token  The token.
 * @param userId The id of user.
 * @param expire Expire time, in millisecond.
 */
public void saveToken(String token,long userId,long expire);","/** 
 * Save a user's token, with an expire time.
 * @param token    The token.
 * @param username The username.
 * @param expire   Expire time, in millisecond.
 */
public void saveToken(String token,String username,long expire);"
42599,"public UserNotFoundException(Long userId){
  super(""String_Node_Str"" + userId.toString());
}","public UserNotFoundException(String username){
  super(""String_Node_Str"" + username);
}"
42600,"/** 
 * Get user from userId.
 * @param userId The id of user.
 * @return A user.
 * @throws UserNotFoundException
 */
public UserType getUser(long userId) throws UserNotFoundException ;","/** 
 * Get user from username.
 * @param username The username.
 * @return A user.
 * @throws UserNotFoundException
 */
public UserType getUser(String username) throws UserNotFoundException ;"
42601,"/** 
 * Get static UserDao. Used to get UserDao from class type.
 * @return A global static UserDao.
 */
public UserDao getInstance();","/** 
 * Get static UserDao. Used to get UserDao from class type.
 * @return A global static UserDao.
 */
public UserDaoType getInstance();"
42602,"@Before public void setUp() throws NoSuchMethodException, InstantiationException, IllegalAccessException, NoSuchFieldException {
  servlet=new Servlet(""String_Node_Str"");
  request=new MockHttpServletRequest();
  response=new MockHttpServletResponse();
}","@Before public void setUp() throws NoSuchMethodException, InstantiationException, IllegalAccessException, NoSuchFieldException, JsonMappingException {
  servlet=new Servlet(""String_Node_Str"");
  request=new MockHttpServletRequest();
  response=new MockHttpServletResponse();
}"
42603,"/** 
 * Run GenericHandler method with adapters, filters and injectors. If the class is   {@link Handler}, it will only run when there is at least one adapter on it.
 * @param m                  The method to run
 * @param requiredAnnotation Method will run when has requiredAnnotation. If it is null, method will run.
 * @return The method's return. Or NO_ADAPTER if do not match the request.
 * @see org.binwang.bard.core.Filter
 * @see org.binwang.bard.core.Adapter
 * @see org.binwang.bard.core.Injector
 * @see org.binwang.bard.core.Handler
 */
protected Object runMethod(Method m,Class<? extends Annotation> requiredAnnotation) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
  Boolean findRequiredAnnotation=false;
  Boolean findAdapterOnMethod=false;
  NoAdapter noAdapter=NoAdapter.NO_ADAPTER;
  Annotation[] methodAnnotations=m.getAnnotations();
  Annotation[] classAnnotations=this.getClass().getAnnotations();
  LinkedList<Adapter> adapters=new LinkedList<>();
  Filter[] filters=new Filter[methodAnnotations.length + classAnnotations.length];
  int filterSize=0;
  for (int i=0; i < methodAnnotations.length + classAnnotations.length; i++) {
    Annotation annotation;
    if (i < methodAnnotations.length) {
      annotation=methodAnnotations[i];
    }
 else {
      annotation=classAnnotations[i - methodAnnotations.length];
    }
    Class<? extends Annotation> annotationClass=annotation.annotationType();
    if (annotationClass == requiredAnnotation) {
      findRequiredAnnotation=true;
    }
    Class<? extends Adapter> adapterClass=mapper.adapterMap.get(annotationClass);
    if (adapterClass != null) {
      Adapter adapter=newFromThis(adapterClass,Object.class,annotation);
      adapters.add(adapter);
      if (i < methodAnnotations.length) {
        findAdapterOnMethod=true;
      }
    }
    Class<? extends Filter> filterClass=mapper.filterMap.get(annotationClass);
    if (filterClass != null) {
      Filter filter=newFromThis(filterClass,Object.class,annotation);
      filters[filterSize++]=filter;
    }
  }
  if (!findRequiredAnnotation && requiredAnnotation != null) {
    return noAdapter;
  }
  if (this instanceof Handler && !findAdapterOnMethod) {
    return noAdapter;
  }
  for (  Adapter adapter : adapters) {
    if (!adapter.match()) {
      return noAdapter;
    }
  }
  Object result=null;
  int filterI=0;
  int injectorI;
  LinkedList<LinkedList<Injector>> injectors=new LinkedList<>();
  try {
    for (; filterI < filterSize; filterI++) {
      filters[filterI].context=context;
      filters[filterI].before();
      context=filters[filterI].context;
    }
    Parameter[] parameters=m.getParameters();
    Object args[]=new Object[parameters.length];
    for (injectorI=0; injectorI < parameters.length; injectorI++) {
      Annotation[] annotations=parameters[injectorI].getAnnotations();
      Class parameterClass=parameters[injectorI].getType();
      LinkedList<Injector> paramInjectors=new LinkedList<>();
      injectors.addFirst(paramInjectors);
      Object var=null;
      for (      Annotation annotation : annotations) {
        Class<? extends Annotation> annotationClass=annotation.annotationType();
        Class<? extends Injector> injectorClass=mapper.injectorMap.get(annotationClass);
        if (injectorClass == null) {
          continue;
        }
        Injector injector=newFromThis(injectorClass,parameterClass,annotation);
        injector.context=context;
        injector.variable=var;
        paramInjectors.addFirst(injector);
        injector.before();
        var=injector.variable;
        context=injector.context;
        if (context.exception != null) {
          throw context.exception;
        }
      }
      args[injectorI]=var;
    }
    result=m.invoke(this,args);
    if (this instanceof Handler) {
      context.result=result;
    }
  }
 catch (  final InvocationTargetException e) {
    context.exception=(Exception)e.getCause();
  }
catch (  IllegalAccessException|InstantiationException|NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    context.exception=e;
  }
 finally {
    for (    LinkedList<Injector> paramsInjectors : injectors) {
      for (      Injector injector : paramsInjectors) {
        injector.context=context;
        injector.after();
        context=injector.context;
      }
    }
    for (filterI=filterI - 1; filterI >= 0; filterI--) {
      filters[filterI].context=context;
      filters[filterI].after();
      context=filters[filterI].context;
    }
  }
  return result;
}","/** 
 * Run GenericHandler method with adapters, filters and injectors. If the class is   {@link Handler}, it will only run when there is at least one adapter on it.
 * @param m                  The method to run
 * @param requiredAnnotation Method will run when has requiredAnnotation. If it is null, method will run.
 * @return The method's return. Or NO_ADAPTER if do not match the request.
 * @see org.binwang.bard.core.Filter
 * @see org.binwang.bard.core.Adapter
 * @see org.binwang.bard.core.Injector
 * @see org.binwang.bard.core.Handler
 */
protected Object runMethod(Method m,Class<? extends Annotation> requiredAnnotation) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
  Boolean findRequiredAnnotation=false;
  Boolean findAdapterOnMethod=false;
  NoAdapter noAdapter=NoAdapter.NO_ADAPTER;
  Annotation[] methodAnnotations=m.getAnnotations();
  Annotation[] classAnnotations=this.getClass().getAnnotations();
  LinkedList<Adapter> adapters=new LinkedList<>();
  Filter[] filters=new Filter[methodAnnotations.length + classAnnotations.length];
  int filterSize=0;
  for (int i=0; i < methodAnnotations.length + classAnnotations.length; i++) {
    Annotation annotation;
    if (i < methodAnnotations.length) {
      annotation=methodAnnotations[i];
    }
 else {
      annotation=classAnnotations[i - methodAnnotations.length];
    }
    Class<? extends Annotation> annotationClass=annotation.annotationType();
    if (annotationClass == requiredAnnotation) {
      findRequiredAnnotation=true;
    }
    Class<? extends Adapter> adapterClass=mapper.adapterMap.get(annotationClass);
    if (adapterClass != null) {
      Adapter adapter=newFromThis(adapterClass,Object.class,annotation);
      adapters.add(adapter);
      if (i < methodAnnotations.length) {
        findAdapterOnMethod=true;
      }
    }
    Class<? extends Filter> filterClass=mapper.filterMap.get(annotationClass);
    if (filterClass != null) {
      Filter filter=newFromThis(filterClass,Object.class,annotation);
      filters[filterSize++]=filter;
    }
  }
  if (!findRequiredAnnotation && requiredAnnotation != null) {
    return noAdapter;
  }
  if (this instanceof Handler && !findAdapterOnMethod) {
    return noAdapter;
  }
  for (  Adapter adapter : adapters) {
    if (!adapter.match()) {
      return noAdapter;
    }
  }
  Object result=null;
  int filterI=0;
  int injectorI;
  LinkedList<LinkedList<Injector>> injectors=new LinkedList<>();
  LinkedList<Filter> runFilters=new LinkedList<>();
  try {
    for (; filterI < filterSize; filterI++) {
      filters[filterI].context=context;
      runFilters.addFirst(filters[filterI]);
      filters[filterI].before();
      context=filters[filterI].context;
      if (context.exception != null) {
        throw context.exception;
      }
    }
    Parameter[] parameters=m.getParameters();
    Object args[]=new Object[parameters.length];
    for (injectorI=0; injectorI < parameters.length; injectorI++) {
      Annotation[] annotations=parameters[injectorI].getAnnotations();
      Class parameterClass=parameters[injectorI].getType();
      LinkedList<Injector> paramInjectors=new LinkedList<>();
      injectors.addFirst(paramInjectors);
      Object var=null;
      for (      Annotation annotation : annotations) {
        Class<? extends Annotation> annotationClass=annotation.annotationType();
        Class<? extends Injector> injectorClass=mapper.injectorMap.get(annotationClass);
        if (injectorClass == null) {
          continue;
        }
        Injector injector=newFromThis(injectorClass,parameterClass,annotation);
        injector.context=context;
        injector.variable=var;
        paramInjectors.addFirst(injector);
        injector.before();
        var=injector.variable;
        context=injector.context;
        if (context.exception != null) {
          throw context.exception;
        }
      }
      args[injectorI]=var;
    }
    result=m.invoke(this,args);
    if (this instanceof Handler) {
      context.result=result;
    }
  }
 catch (  final InvocationTargetException e) {
    context.exception=(Exception)e.getCause();
  }
catch (  IllegalAccessException|InstantiationException|NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    context.exception=e;
  }
 finally {
    for (    LinkedList<Injector> paramsInjectors : injectors) {
      for (      Injector injector : paramsInjectors) {
        injector.context=context;
        injector.after();
        context=injector.context;
      }
    }
    for (    Filter filter : runFilters) {
      filter.context=context;
      filter.after();
      context=filter.context;
    }
  }
  return result;
}"
42604,"@TrueAdapter1 @AddHeaderFilter(name=""String_Node_Str"",value=""String_Node_Str"") @ExceptionFilter public void exception(){
  context.response.setHeader(""String_Node_Str"",""String_Node_Str"");
  throw new NullPointerException(""String_Node_Str"");
}","@TrueAdapter1 @AddHeaderFilter(name=""String_Node_Str"",value=""String_Node_Str"") @ExceptionFilter public void exception(){
  context.response.setHeader(""String_Node_Str"",""String_Node_Str"");
}"
42605,"@Test public void exceptionFilterTest(){
  servlet.addHandler(ExceptionFilterHandler.class);
  servlet.service(request,response);
  assertEquals(""String_Node_Str"",response.getHeader(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeader(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeader(""String_Node_Str""));
}","@Test public void exceptionFilterTest(){
  servlet.addHandler(ExceptionFilterHandler.class);
  servlet.service(request,response);
  assertEquals(""String_Node_Str"",response.getHeader(""String_Node_Str""));
  assertEquals(null,response.getHeader(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeader(""String_Node_Str""));
}"
42606,"@After public void getException(){
  if (context.exception != null) {
    context.response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","@After public void getException(){
  if (context.exception instanceof TestFilterException) {
    context.response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}"
42607,"private CompletableFuture<Stream<List<GitHubContributor>>> getContributors(String user,List<GitHubRepo> repos){
  return Futures.sequence(repos.stream().map(r -> Futures.toCompletable(gitHubService.contributorsAsync(user,r.getName()),executor)).filter(f -> f != null));
}","private CompletableFuture<Stream<List<GitHubContributor>>> getContributors(String user,List<GitHubRepo> repos){
  return Futures.sequence(repos.stream().map(r -> Futures.toCompletable(gitHubService.contributorsAsync(user,r.getName()),executor)));
}"
42608,"public static <T>CompletableFuture<Stream<T>> sequence(Stream<CompletableFuture<T>> futures){
  CompletableFuture<Void> allDoneFuture=CompletableFuture.allOf(futures.toArray(value -> new CompletableFuture[(int)futures.count()]));
  return allDoneFuture.thenApply(v -> futures.map(future -> future.join()));
}","public static <T>CompletableFuture<Stream<T>> sequence(Stream<CompletableFuture<T>> futures){
  List<CompletableFuture<T>> futureList=futures.filter(f -> f != null).collect(Collectors.toList());
  CompletableFuture<Void> allDoneFuture=CompletableFuture.allOf(futureList.toArray(new CompletableFuture[futureList.size()]));
  return allDoneFuture.thenApply(v -> futureList.stream().map(future -> future.join()));
}"
42609,"@Override public void onScroll(AbsListView absListView,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  View firstChild=absListView.getChildAt(0);
  if (firstChild != null && firstChild == mTransparentHeader) {
    int scrollY=-absListView.getChildAt(0).getTop();
    if (mScrollView.getScrollY() != scrollY) {
      mScrollView.scrollTo(0,(int)(scrollY / mParallaxFactor));
      ViewGroup.LayoutParams lp=mScrollView.getLayoutParams();
      lp.height=mHeaderHeight - scrollY;
      mScrollView.setLayoutParams(lp);
    }
  }
}","@Override public void onScroll(AbsListView absListView,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  View firstChild=absListView.getChildAt(0);
  if (firstChild != null) {
    if (firstChild == mTransparentHeader) {
      int scrollY=-firstChild.getTop();
      if (mScrollView.getScrollY() != scrollY) {
        mScrollView.scrollTo(0,(int)(scrollY / mParallaxFactor));
        ViewGroup.LayoutParams lp=mScrollView.getLayoutParams();
        lp.height=mHeaderHeight - scrollY;
        mScrollView.setLayoutParams(lp);
      }
    }
 else {
      mScrollView.scrollTo(0,mHeaderHeight);
      ViewGroup.LayoutParams lp=mScrollView.getLayoutParams();
      lp.height=0;
      mScrollView.setLayoutParams(lp);
    }
  }
}"
42610,"private int getClosestIndex(ArrayList<GpsMeasurement> wayPoints,GPSPoseMessage currentLocation){
  double min=Double.MAX_VALUE;
  int closestIndex=lastClosestIndex;
  for (int i=lastClosestIndex; i < (lastClosestIndex + wayPointLOOKAHEADMAX) && i < wayPoints.size(); i++) {
    GPSPoseMessage gpsPoseMessage=wayPoints.get(i).toGpsPoseMessage(0);
    double d=GPSPoseMessage.getDistance(currentLocation,gpsPoseMessage);
    if (d < min) {
      min=d;
      closestIndex=i;
    }
  }
  lastClosestIndex=closestIndex;
  return closestIndex;
}","private int getClosestIndex(ArrayList<GpsMeasurement> wayPoints,GPSPoseMessage currentLocation){
  double min=Double.MAX_VALUE;
  int closestIndex=lastClosestIndex;
  for (int i=lastClosestIndex; i < (lastClosestIndex + WAY_POINT_LOOKAHEAD_MAX) && i < wayPoints.size(); i++) {
    GPSPoseMessage gpsPoseMessage=wayPoints.get(i).toGpsPoseMessage(0);
    double d=GPSPoseMessage.getDistance(currentLocation,gpsPoseMessage);
    if (d < min) {
      min=d;
      closestIndex=i;
    }
  }
  lastClosestIndex=closestIndex;
  return closestIndex;
}"
42611,"private ControllerTesterRobot(){
  super();
  ArrayList<GpsMeasurement> wayPoints=null;
  try {
    wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  nodeList.add(new ControllerTester(""String_Node_Str"",new LocTuple(wayPoints.get(0).getLatitude(),wayPoints.get(0).getLongitude())));
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private ControllerTesterRobot(){
  super();
  ArrayList<GpsMeasurement> wayPoints=new ArrayList<>();
  try {
    wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  nodeList.add(new ControllerTester(""String_Node_Str"",new LocTuple(wayPoints.get(0).getLatitude(),wayPoints.get(0).getLongitude())));
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42612,"/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param name - name of tester
 * @param initialPosition - represents initial position of tester
 */
public ControllerTester(String name,LocTuple initialPosition){
  super(new BuggyBaseNode(NodeChannel.AUTO),SIM_PERIOD,name);
  double[][] xAsDoubleArr={{LocalizerUtil.deg2UTM(initialPosition).getEasting()},{LocalizerUtil.deg2UTM(initialPosition).getNorthing()},{VELOCITY},{INITIAL_HEADING_RAD},{0}};
  x=new Matrix(xAsDoubleArr);
  new Subscriber(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),((topicName,m) -> {
    commandedSteeringAngle=((DriveControlMessage)m).getAngleDouble();
  }
));
  simulatedPosePub=new Publisher(NodeChannel.POSE.getMsgPath());
  gpspub=new Publisher(NodeChannel.GPS.getMsgPath());
}","/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param name - name of tester
 * @param initialPosition - represents initial position of tester
 */
public ControllerTester(String name,LocTuple initialPosition){
  super(new BuggyBaseNode(NodeChannel.AUTO),SIM_PERIOD,name);
  double[][] xAsDoubleArr={{LocalizerUtil.deg2UTM(initialPosition).getEasting()},{LocalizerUtil.deg2UTM(initialPosition).getNorthing()},{VELOCITY},{INITIAL_HEADING_RAD},{0}};
  x=new Matrix(xAsDoubleArr);
  new Subscriber(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),((topicName,m) -> {
    commandedSteeringAngle=((DriveControlMessage)m).getAngleDouble();
  }
));
  simulatedPosePub=new Publisher(NodeChannel.POSE.getMsgPath());
  new Publisher(NodeChannel.GPS.getMsgPath());
}"
42613,"/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param name - name of full simulation runner
 * @param initialPos - initial position of full simulation runner
 */
public FullSimRunner(String name,LocTuple initialPos){
  super(NodeChannel.SIMULATION);
  double[][] motionModelArr={{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,0}};
  motionModel=new Matrix(motionModelArr);
  UTMTuple t=LocalizerUtil.deg2UTM(initialPos);
  double[][] stateArr={{t.getEasting()},{t.getNorthing()},{VELOCITY},{INITIAL_HEADING_IN_RADS},{0}};
  state=new Matrix(stateArr);
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  steerPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  steerSub=new Subscriber(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),(topicName,m) -> {
    updateMotionModel(((DriveControlMessage)m).getAngleDouble());
    steerPub.publish(new SteeringMeasurement(Math.toDegrees(((DriveControlMessage)m).getAngleDouble())));
  }
);
  updateMotionModel(0);
  try {
    localizer=new RobobuggyKFLocalizer(LOCALIZER_UPDATE_PERIOD,""String_Node_Str"",initialPos);
    localizer.startNode();
    controller=new WayPointFollowerPlanner(WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile()));
    controller.startNode();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  gpsTimer=new Timer();
  gpsTimer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      Matrix nextStep=generateNextStep();
      UTMTuple nextLocUTM=new UTMTuple(UTMZONE,'T',state.get(0,0),state.get(1,0));
      nextLocUTM.setEasting(nextLocUTM.getEasting());
      nextLocUTM.setNorthing(nextLocUTM.getNorthing());
      LocTuple nextLocLL=LocalizerUtil.utm2Deg(nextLocUTM);
      gpsPub.publish(new GpsMeasurement(new Date(),nextLocLL.getLatitude(),true,nextLocLL.getLongitude(),true,0,0,0,0,0,0));
      state=nextStep;
    }
  }
,0,GPS_UPDATE_PERIOD);
  encTimer=new Timer();
  encTimer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      state=generateNextStep();
      double deltaDist=ENC_UPDATE_PERIOD / 1000.0 * state.get(2,0);
      totalDistance+=deltaDist;
      encPub.publish(new EncoderMeasurement(totalDistance,state.get(2,0)));
    }
  }
,0,ENC_UPDATE_PERIOD);
}","/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param name - name of full simulation runner
 * @param initialPos - initial position of full simulation runner
 */
public FullSimRunner(String name,LocTuple initialPos){
  super(NodeChannel.SIMULATION);
  double[][] motionModelArr={{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,0}};
  motionModel=new Matrix(motionModelArr);
  UTMTuple t=LocalizerUtil.deg2UTM(initialPos);
  double[][] stateArr={{t.getEasting()},{t.getNorthing()},{VELOCITY},{INITIAL_HEADING_IN_RADS},{0}};
  state=new Matrix(stateArr);
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  steerPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  new Subscriber(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),(topicName,m) -> {
    updateMotionModel(((DriveControlMessage)m).getAngleDouble());
    steerPub.publish(new SteeringMeasurement(Math.toDegrees(((DriveControlMessage)m).getAngleDouble())));
  }
);
  updateMotionModel(0);
  try {
    localizer=new RobobuggyKFLocalizer(LOCALIZER_UPDATE_PERIOD,""String_Node_Str"",initialPos);
    localizer.startNode();
    controller=new WayPointFollowerPlanner(WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile()));
    controller.startNode();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  gpsTimer=new Timer();
  gpsTimer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      Matrix nextStep=generateNextStep();
      UTMTuple nextLocUTM=new UTMTuple(UTMZONE,'T',state.get(0,0),state.get(1,0));
      nextLocUTM.setEasting(nextLocUTM.getEasting());
      nextLocUTM.setNorthing(nextLocUTM.getNorthing());
      LocTuple nextLocLL=LocalizerUtil.utm2Deg(nextLocUTM);
      gpsPub.publish(new GpsMeasurement(new Date(),nextLocLL.getLatitude(),true,nextLocLL.getLongitude(),true,0,0,0,0,0,0));
      state=nextStep;
    }
  }
,0,GPS_UPDATE_PERIOD);
  encTimer=new Timer();
  encTimer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      state=generateNextStep();
      double deltaDist=ENC_UPDATE_PERIOD / 1000.0 * state.get(2,0);
      totalDistance+=deltaDist;
      encPub.publish(new EncoderMeasurement(totalDistance,state.get(2,0)));
    }
  }
,0,ENC_UPDATE_PERIOD);
}"
42614,"/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
getPrivateInstance().posePub.publish(transmitMessage);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}","/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
getPrivateInstance().driveCtrlPub.publish(transmitMessage);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
getPrivateInstance().posePub.publish(transmitMessage);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}"
42615,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorAuton.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=PlayBackRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}"
42616,"private double purePursuitController(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  double K=3.0;
  double velocity=pose.getCurrentState().get(2,0);
  double lookaheadLowerBound=5.0;
  double lookaheadUpperBound=25.0;
  double lookahead=K * velocity;
  if (lookahead < lookaheadLowerBound) {
    lookahead=lookaheadLowerBound;
  }
 else   if (lookahead > lookaheadUpperBound) {
    lookahead=lookaheadUpperBound;
  }
  int lookaheadIndex=0;
  for (lookaheadIndex=closestIndex; lookaheadIndex < wayPoints.size(); lookaheadIndex++) {
    if (GPSPoseMessage.getDistance(pose,wayPoints.get(lookaheadIndex).toGpsPoseMessage(0)) > lookahead) {
      break;
    }
  }
  if (lookaheadIndex >= wayPoints.size()) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return 0;
  }
  GpsMeasurement target=wayPoints.get(lookaheadIndex);
  currentWaypoint=target;
  double dx=LocalizerUtil.convertLonToMeters(target.getLongitude()) - LocalizerUtil.convertLonToMeters(pose.getLongitude());
  double dy=LocalizerUtil.convertLatToMeters(target.getLatitude()) - LocalizerUtil.convertLatToMeters(pose.getLatitude());
  double deltaHeading=Math.atan2(dy,dx) - pose.getHeading();
  GpsMeasurement B=wayPoints.get(closestIndex);
  GpsMeasurement A=wayPoints.get(closestIndex + 1);
  GPSPoseMessage P=pose;
  double padx=LocalizerUtil.convertLonToMeters(P.getLongitude()) - LocalizerUtil.convertLonToMeters(A.getLongitude());
  double pady=LocalizerUtil.convertLatToMeters(P.getLatitude()) - LocalizerUtil.convertLatToMeters(A.getLatitude());
  double phi=Math.atan2(pady,padx);
  double badx=LocalizerUtil.convertLonToMeters(B.getLongitude()) - LocalizerUtil.convertLonToMeters(A.getLongitude());
  double bady=LocalizerUtil.convertLatToMeters(B.getLatitude()) - LocalizerUtil.convertLatToMeters(A.getLatitude());
  double psi=Math.atan2(bady,badx);
  double theta=phi - psi;
  double L=GPSPoseMessage.getDistance(P,A.toGpsPoseMessage(0));
  double E=L * Math.sin(theta);
  double thetaDelta=psi - Math.atan2(dy,dx);
  thetaDelta*=E;
  deltaHeading+=thetaDelta;
  double commandedAngle=Math.atan2(2 * RobobuggyKFLocalizer.WHEELBASE_IN_METERS * Math.sin(deltaHeading),lookahead);
  commandedAngle=Util.normalizeAngleRad(commandedAngle);
  return commandedAngle;
}","private double purePursuitController(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  double K=2.5;
  double velocity=pose.getCurrentState().get(2,0);
  double lookaheadLowerBound=5.0;
  double lookaheadUpperBound=25.0;
  double lookahead=K * velocity;
  if (lookahead < lookaheadLowerBound) {
    lookahead=lookaheadLowerBound;
  }
 else   if (lookahead > lookaheadUpperBound) {
    lookahead=lookaheadUpperBound;
  }
  int lookaheadIndex=0;
  for (lookaheadIndex=closestIndex; lookaheadIndex < wayPoints.size(); lookaheadIndex++) {
    if (GPSPoseMessage.getDistance(pose,wayPoints.get(lookaheadIndex).toGpsPoseMessage(0)) > lookahead) {
      break;
    }
  }
  if (lookaheadIndex >= wayPoints.size()) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return 0;
  }
  GpsMeasurement target=wayPoints.get(lookaheadIndex);
  currentWaypoint=target;
  double dx=LocalizerUtil.convertLonToMeters(target.getLongitude()) - LocalizerUtil.convertLonToMeters(pose.getLongitude());
  double dy=LocalizerUtil.convertLatToMeters(target.getLatitude()) - LocalizerUtil.convertLatToMeters(pose.getLatitude());
  double deltaHeading=Math.atan2(dy,dx) - pose.getHeading();
  GpsMeasurement B=wayPoints.get(closestIndex);
  GpsMeasurement A=wayPoints.get(closestIndex + 1);
  GPSPoseMessage P=pose;
  double padx=LocalizerUtil.convertLonToMeters(A.getLongitude()) - LocalizerUtil.convertLonToMeters(P.getLongitude());
  double pady=LocalizerUtil.convertLatToMeters(A.getLatitude()) - LocalizerUtil.convertLatToMeters(P.getLatitude());
  double phi=Math.atan2(pady,padx);
  double badx=LocalizerUtil.convertLonToMeters(A.getLongitude()) - LocalizerUtil.convertLonToMeters(B.getLongitude());
  double bady=LocalizerUtil.convertLatToMeters(A.getLatitude()) - LocalizerUtil.convertLatToMeters(B.getLatitude());
  double psi=Math.atan2(bady,badx);
  double theta=phi - psi;
  double L=GPSPoseMessage.getDistance(P,B.toGpsPoseMessage(0));
  double E=L * Math.sin(theta);
  double thetaDelta=phi - psi;
  thetaDelta*=E / 10.0;
  deltaHeading+=thetaDelta;
  double commandedAngle=Math.atan2(2 * RobobuggyKFLocalizer.WHEELBASE_IN_METERS * Math.sin(deltaHeading),lookahead);
  commandedAngle=Util.normalizeAngleRad(commandedAngle);
  return commandedAngle;
}"
42617,"private double stanleyMethodController(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  double K=0.01;
  double velocity=pose.getCurrentState().get(2,0);
  if (closestIndex >= (wayPoints.size() - 1)) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return 0;
  }
  GpsMeasurement ptA=wayPoints.get(closestIndex);
  GpsMeasurement ptB=wayPoints.get(closestIndex + 1);
  double pathx=LocalizerUtil.convertLonToMeters(ptB.getLongitude()) - LocalizerUtil.convertLonToMeters(ptA.getLongitude());
  double pathy=LocalizerUtil.convertLatToMeters(ptB.getLatitude()) - LocalizerUtil.convertLatToMeters(ptA.getLatitude());
  double dx=LocalizerUtil.convertLonToMeters(pose.getLongitude()) - LocalizerUtil.convertLonToMeters(ptA.getLongitude());
  double dy=LocalizerUtil.convertLatToMeters(pose.getLatitude()) - LocalizerUtil.convertLatToMeters(ptA.getLatitude());
  currentWaypoint=ptA;
  double pathHeading=Math.atan2(pathy,pathx);
  double headingError=Util.normalizeAngleRad(pathHeading) - Util.normalizeAngleRad(pose.getHeading());
  double commandedAngle;
  double crosstrackError=GPSPoseMessage.getDistance(currentWaypoint.toGpsPoseMessage(0),pose);
  commandedAngle=headingError + Math.atan2(K * crosstrackError,velocity);
  commandedAngle=Util.normalizeAngleRad(commandedAngle);
  return commandedAngle;
}","private double stanleyMethodController(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  double K=0.05;
  double velocity=pose.getCurrentState().get(2,0);
  if (closestIndex >= (wayPoints.size() - 1)) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return 0;
  }
  GpsMeasurement ptA=wayPoints.get(closestIndex);
  GpsMeasurement ptB=wayPoints.get(closestIndex + 1);
  double pathx=LocalizerUtil.convertLonToMeters(ptB.getLongitude()) - LocalizerUtil.convertLonToMeters(ptA.getLongitude());
  double pathy=LocalizerUtil.convertLatToMeters(ptB.getLatitude()) - LocalizerUtil.convertLatToMeters(ptA.getLatitude());
  double dx=LocalizerUtil.convertLonToMeters(pose.getLongitude()) - LocalizerUtil.convertLonToMeters(ptA.getLongitude());
  double dy=LocalizerUtil.convertLatToMeters(pose.getLatitude()) - LocalizerUtil.convertLatToMeters(ptA.getLatitude());
  currentWaypoint=ptA;
  double pathHeading=Math.atan2(pathy,pathx);
  double headingError=Util.normalizeAngleRad(pathHeading) - Util.normalizeAngleRad(pose.getHeading());
  double commandedAngle;
  double L=GPSPoseMessage.getDistance(pose,ptA.toGpsPoseMessage(0));
  double theta=Math.atan2(dy,dx);
  double crosstrackError=L * Math.sin(theta);
  int direction;
  if (headingError > 0) {
    direction=1;
  }
 else {
    direction=-1;
  }
  crosstrackError=crosstrackError * direction;
  commandedAngle=headingError + Math.atan2(K * crosstrackError,velocity);
  commandedAngle=Util.normalizeAngleRad(commandedAngle);
  return commandedAngle;
}"
42618,"@Override public void actionPerformed(String topicName,Message m){
  GPSPoseMessage gpsM=(GPSPoseMessage)m;
  zoomLevel=getMapTree().getViewer().getZoom();
  getMapTree().getViewer().setDisplayPosition(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),zoomLevel);
  addPointsToMapTree(Color.RED,new LocTuple(gpsM.getLatitude(),gpsM.getLongitude()));
  getMapTree().getViewer().removeMapMarker(currentWaypoint);
  currentWaypoint.setLat(WayPointFollowerPlanner.currentWaypoint.getLatitude());
  currentWaypoint.setLon(WayPointFollowerPlanner.currentWaypoint.getLongitude());
  getMapTree().getViewer().addMapMarker(currentWaypoint);
  getMapTree().getViewer().removeMapPolygon(currentHeading);
  currentHeading=new MapPolygonImpl(new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude(),WayPointFollowerPlanner.currentWaypoint.getLongitude()),new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude() + 0.001 * Math.sin(WayPointFollowerPlanner.currentCommandedAngle),WayPointFollowerPlanner.currentWaypoint.getLongitude() + 0.001 * Math.cos(WayPointFollowerPlanner.currentCommandedAngle)),new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude(),WayPointFollowerPlanner.currentWaypoint.getLongitude()));
  getMapTree().getViewer().addMapPolygon(currentHeading);
}","@Override public void actionPerformed(String topicName,Message m){
  GPSPoseMessage gpsM=(GPSPoseMessage)m;
  zoomLevel=getMapTree().getViewer().getZoom();
  getMapTree().getViewer().setDisplayPosition(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),zoomLevel);
  addPointsToMapTree(Color.RED,new LocTuple(gpsM.getLatitude(),gpsM.getLongitude()));
  getMapTree().getViewer().removeMapMarker(currentWaypoint);
  currentWaypoint.setLat(WayPointFollowerPlanner.currentWaypoint.getLatitude());
  currentWaypoint.setLon(WayPointFollowerPlanner.currentWaypoint.getLongitude());
  getMapTree().getViewer().addMapMarker(currentWaypoint);
  double currentHeading=gpsM.getCurrentState().get(3,0);
  getMapTree().getViewer().removeMapPolygon(currentHeadingMapObj);
  currentHeadingMapObj=new MapPolygonImpl(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),new Coordinate(gpsM.getLatitude() + 0.0001 * Math.sin(WayPointFollowerPlanner.currentCommandedAngle + currentHeading),gpsM.getLongitude() + 0.0001 * Math.cos(WayPointFollowerPlanner.currentCommandedAngle + currentHeading)),new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()));
  getMapTree().getViewer().addMapPolygon(currentHeadingMapObj);
}"
42619,"/** 
 * initializes a new Map with cache loaded
 */
public Map(){
  initMapTree();
  addCacheToTree();
  this.add(getMapTree());
  currentWaypoint.setColor(Color.BLUE);
  getMapTree().getViewer().addMapMarker(currentWaypoint);
  getMapTree().getViewer().addMapPolygon(currentHeading);
  new Subscriber(""String_Node_Str"",NodeChannel.POSE.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GPSPoseMessage gpsM=(GPSPoseMessage)m;
      zoomLevel=getMapTree().getViewer().getZoom();
      getMapTree().getViewer().setDisplayPosition(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),zoomLevel);
      addPointsToMapTree(Color.RED,new LocTuple(gpsM.getLatitude(),gpsM.getLongitude()));
      getMapTree().getViewer().removeMapMarker(currentWaypoint);
      currentWaypoint.setLat(WayPointFollowerPlanner.currentWaypoint.getLatitude());
      currentWaypoint.setLon(WayPointFollowerPlanner.currentWaypoint.getLongitude());
      getMapTree().getViewer().addMapMarker(currentWaypoint);
      getMapTree().getViewer().removeMapPolygon(currentHeading);
      currentHeading=new MapPolygonImpl(new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude(),WayPointFollowerPlanner.currentWaypoint.getLongitude()),new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude() + 0.001 * Math.sin(WayPointFollowerPlanner.currentCommandedAngle),WayPointFollowerPlanner.currentWaypoint.getLongitude() + 0.001 * Math.cos(WayPointFollowerPlanner.currentCommandedAngle)),new Coordinate(WayPointFollowerPlanner.currentWaypoint.getLatitude(),WayPointFollowerPlanner.currentWaypoint.getLongitude()));
      getMapTree().getViewer().addMapPolygon(currentHeading);
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gps=((GpsMeasurement)m);
    addPointsToMapTree(Color.BLACK,new LocTuple(gps.getLatitude(),gps.getLongitude()));
  }
));
}","/** 
 * initializes a new Map with cache loaded
 */
public Map(){
  initMapTree();
  addCacheToTree();
  this.add(getMapTree());
  currentWaypoint.setColor(Color.BLUE);
  getMapTree().getViewer().addMapMarker(currentWaypoint);
  getMapTree().getViewer().addMapPolygon(currentHeadingMapObj);
  new Subscriber(""String_Node_Str"",NodeChannel.POSE.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GPSPoseMessage gpsM=(GPSPoseMessage)m;
      zoomLevel=getMapTree().getViewer().getZoom();
      getMapTree().getViewer().setDisplayPosition(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),zoomLevel);
      addPointsToMapTree(Color.RED,new LocTuple(gpsM.getLatitude(),gpsM.getLongitude()));
      getMapTree().getViewer().removeMapMarker(currentWaypoint);
      currentWaypoint.setLat(WayPointFollowerPlanner.currentWaypoint.getLatitude());
      currentWaypoint.setLon(WayPointFollowerPlanner.currentWaypoint.getLongitude());
      getMapTree().getViewer().addMapMarker(currentWaypoint);
      double currentHeading=gpsM.getCurrentState().get(3,0);
      getMapTree().getViewer().removeMapPolygon(currentHeadingMapObj);
      currentHeadingMapObj=new MapPolygonImpl(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),new Coordinate(gpsM.getLatitude() + 0.0001 * Math.sin(WayPointFollowerPlanner.currentCommandedAngle + currentHeading),gpsM.getLongitude() + 0.0001 * Math.cos(WayPointFollowerPlanner.currentCommandedAngle + currentHeading)),new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()));
      getMapTree().getViewer().addMapPolygon(currentHeadingMapObj);
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gps=((GpsMeasurement)m);
    addPointsToMapTree(Color.BLACK,new LocTuple(gps.getLatitude(),gps.getLongitude()));
  }
));
}"
42620,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorDataCollection.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=PlayBackRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}"
42621,"/** 
 * Returns the steering angle to which the   {@link PathPlanner} thinks thebuggy's steering should be commanded to follow the desired path.
 * @return desired commanded steering angle
 */
protected abstract double getCommandedSteeringAngle();","/** 
 * Returns the steering angle to which the   {@link PathPlanner} thinks thebuggy's steering should be commanded to follow the desired path.
 * @return desired commanded steering angle IN RADIANS
 */
protected abstract double getCommandedSteeringAngle();"
42622,"/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  int outputAngle=commandedAngle;
  if (outputAngle > 1000) {
    outputAngle=1000;
  }
 else   if (outputAngle < -1000) {
    outputAngle=-1000;
  }
  RBSMSteeringMessage msgSteer=new RBSMSteeringMessage(outputAngle);
  send(msgSteer.getMessageBytes());
  RBSMBrakeMessage msgBrake=new RBSMBrakeMessage(commandedBrakeEngaged);
  send(msgBrake.getMessageBytes());
}","/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  int outputAngleHundredthsDegrees=(int)(Math.toDegrees(commandedAngle) * 100);
  if (outputAngleHundredthsDegrees > 1000) {
    outputAngleHundredthsDegrees=1000;
  }
 else   if (outputAngleHundredthsDegrees < -1000) {
    outputAngleHundredthsDegrees=-1000;
  }
  RBSMSteeringMessage msgSteer=new RBSMSteeringMessage(outputAngleHundredthsDegrees);
  send(msgSteer.getMessageBytes());
  RBSMBrakeMessage msgBrake=new RBSMBrakeMessage(commandedBrakeEngaged);
  send(msgBrake.getMessageBytes());
}"
42623,"private PlayBackRobot(){
  super();
  new LineByLineSensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  new KfLocalizer(10);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private PlayBackRobot(){
  super();
  new LineByLineSensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42624,"/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}","/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
getPrivateInstance().posePub.publish(transmitMessage);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}"
42625,"/** 
 * Initializes the publishers for the playback util
 */
private PlayBackUtil(){
  imuPub=new Publisher(NodeChannel.IMU.getMsgPath());
  magPub=new Publisher(NodeChannel.IMU_MAGNETIC.getMsgPath());
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encoderPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  brakePub=new Publisher(NodeChannel.BRAKE_STATE.getMsgPath());
  steeringPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  steeringCommandPub=new Publisher(NodeChannel.STEERING_COMMANDED.getMsgPath());
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  logicNotificationPub=new Publisher(NodeChannel.LOGIC_NOTIFICATION.getMsgPath());
}","/** 
 * Initializes the publishers for the playback util
 */
private PlayBackUtil(){
  imuPub=new Publisher(NodeChannel.IMU.getMsgPath());
  magPub=new Publisher(NodeChannel.IMU_MAGNETIC.getMsgPath());
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encoderPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  brakePub=new Publisher(NodeChannel.BRAKE_STATE.getMsgPath());
  steeringPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  steeringCommandPub=new Publisher(NodeChannel.STEERING_COMMANDED.getMsgPath());
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  logicNotificationPub=new Publisher(NodeChannel.LOGIC_NOTIFICATION.getMsgPath());
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
}"
42626,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorDataCollection.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=PlayBackRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
}"
42627,"/** 
 * Returns the steering angle to which the   {@link PathPlanner} thinks thebuggy's steering should be commanded to follow the desired path.
 * @return desired commanded steering angle
 */
protected abstract double getCommandedSteeringAngle();","/** 
 * Returns the steering angle to which the   {@link PathPlanner} thinks thebuggy's steering should be commanded to follow the desired path.
 * @return desired commanded steering angle IN RADIANS
 */
protected abstract double getCommandedSteeringAngle();"
42628,"/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  int outputAngle=commandedAngle;
  if (outputAngle > 1000) {
    outputAngle=1000;
  }
 else   if (outputAngle < -1000) {
    outputAngle=-1000;
  }
  RBSMSteeringMessage msgSteer=new RBSMSteeringMessage(outputAngle);
  send(msgSteer.getMessageBytes());
  RBSMBrakeMessage msgBrake=new RBSMBrakeMessage(commandedBrakeEngaged);
  send(msgBrake.getMessageBytes());
}","/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  int outputAngleHundredthsDegrees=(int)(Math.toDegrees(commandedAngle) * 100);
  if (outputAngleHundredthsDegrees > 1000) {
    outputAngleHundredthsDegrees=1000;
  }
 else   if (outputAngleHundredthsDegrees < -1000) {
    outputAngleHundredthsDegrees=-1000;
  }
  RBSMSteeringMessage msgSteer=new RBSMSteeringMessage(outputAngleHundredthsDegrees);
  send(msgSteer.getMessageBytes());
  RBSMBrakeMessage msgBrake=new RBSMBrakeMessage(commandedBrakeEngaged);
  send(msgBrake.getMessageBytes());
}"
42629,"private PlayBackRobot(){
  super();
  new LineByLineSensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  new KfLocalizer(10);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private PlayBackRobot(){
  super();
  new LineByLineSensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42630,"/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}","/** 
 * reads a sensor log and outputs the next message, if the next message is not suppose to appear for some time then this method will block until that time
 * @param sensorDataJson  the json object of sensor data
 * @param translator      translator object
 * @param playBacktime    the time the playback should play until
 * @param sensorStartTime the time the sensor playback started at
 * @param playBackSpeed   the speed to playback at
 * @return the message from the log
 * @throws InterruptedException timing didn't work
 */
public static Message parseSensorLog(JsonObject sensorDataJson,Gson translator,long playBacktime,long sensorStartTime,double playBackSpeed) throws InterruptedException {
  long sensorTime=sensorDataJson.get(""String_Node_Str"").getAsLong();
  long sensorDt=(sensorTime - sensorStartTime);
  long dt=(long)(sensorDt / playBackSpeed) - playBacktime;
  if (dt > 10) {
    Thread.sleep(dt);
  }
  String versionID=sensorDataJson.get(""String_Node_Str"").getAsString();
  Message transmitMessage=null;
switch (versionID) {
case BrakeControlMessage.VERSION_ID:
    transmitMessage=translator.fromJson(sensorDataJson,BrakeControlMessage.class);
  break;
case BrakeMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,BrakeMessage.class);
getPrivateInstance().brakePub.publish(transmitMessage);
break;
case MagneticMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,MagneticMeasurement.class);
getPrivateInstance().magPub.publish(transmitMessage);
break;
case DriveControlMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,DriveControlMessage.class);
break;
case EncoderMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,EncoderMeasurement.class);
getPrivateInstance().encoderPub.publish(transmitMessage);
break;
case FingerPrintMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,FingerPrintMessage.class);
break;
case GpsMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GpsMeasurement.class);
getPrivateInstance().gpsPub.publish(transmitMessage);
break;
case GuiLoggingButtonMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GuiLoggingButtonMessage.class);
getPrivateInstance().loggingButtonPub.publish(transmitMessage);
break;
case ImuMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ImuMeasurement.class);
getPrivateInstance().imuPub.publish(transmitMessage);
break;
case GPSPoseMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,GPSPoseMessage.class);
getPrivateInstance().posePub.publish(transmitMessage);
break;
case RemoteWheelAngleRequest.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RemoteWheelAngleRequest.class);
break;
case IMUAngularPositionMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,IMUAngularPositionMessage.class);
break;
case ResetMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,ResetMessage.class);
break;
case RobobuggyLogicNotificationMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,RobobuggyLogicNotificationMeasurement.class);
getPrivateInstance().logicNotificationPub.publish(transmitMessage);
break;
case StateMessage.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,StateMessage.class);
break;
case SteeringMeasurement.VERSION_ID:
if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringPub.publish(transmitMessage);
}
 else if (sensorDataJson.get(""String_Node_Str"").getAsString().equals(NodeChannel.STEERING_COMMANDED.getMsgPath())) {
transmitMessage=translator.fromJson(sensorDataJson,SteeringMeasurement.class);
getPrivateInstance().steeringCommandPub.publish(transmitMessage);
}
 else {
return transmitMessage;
}
break;
case WheelAngleCommandMeasurement.VERSION_ID:
transmitMessage=translator.fromJson(sensorDataJson,WheelAngleCommandMeasurement.class);
break;
default :
break;
}
return transmitMessage;
}"
42631,"/** 
 * Initializes the publishers for the playback util
 */
private PlayBackUtil(){
  imuPub=new Publisher(NodeChannel.IMU.getMsgPath());
  magPub=new Publisher(NodeChannel.IMU_MAGNETIC.getMsgPath());
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encoderPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  brakePub=new Publisher(NodeChannel.BRAKE_STATE.getMsgPath());
  steeringPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  steeringCommandPub=new Publisher(NodeChannel.STEERING_COMMANDED.getMsgPath());
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  logicNotificationPub=new Publisher(NodeChannel.LOGIC_NOTIFICATION.getMsgPath());
}","/** 
 * Initializes the publishers for the playback util
 */
private PlayBackUtil(){
  imuPub=new Publisher(NodeChannel.IMU.getMsgPath());
  magPub=new Publisher(NodeChannel.IMU_MAGNETIC.getMsgPath());
  gpsPub=new Publisher(NodeChannel.GPS.getMsgPath());
  encoderPub=new Publisher(NodeChannel.ENCODER.getMsgPath());
  brakePub=new Publisher(NodeChannel.BRAKE_STATE.getMsgPath());
  steeringPub=new Publisher(NodeChannel.STEERING.getMsgPath());
  steeringCommandPub=new Publisher(NodeChannel.STEERING_COMMANDED.getMsgPath());
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  logicNotificationPub=new Publisher(NodeChannel.LOGIC_NOTIFICATION.getMsgPath());
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
}"
42632,"@After public void tearDown() throws Exception {
}","/** 
 * Called after each test case finishes Does nothing at the moment
 */
@After public void tearDown(){
}"
42633,"/** 
 * tests for correct failure of convertMinSecToFloatLongitude() if given invalid input
 */
@Test public void testBadConversionMinSecToFloatLong(){
  GpsNode gpsNode1=new GpsNode(NodeChannel.GPS,""String_Node_Str"");
  String input=""String_Node_Str"";
  try {
    double output=gpsNode1.convertMinSecToFloatLongitude(input);
    fail(""String_Node_Str"");
  }
 catch (  Exception E) {
    return;
  }
}","/** 
 * tests for correct failure of convertMinSecToFloatLongitude() if given invalid input
 */
@Test public void testBadConversionMinSecToFloatLong(){
  GpsNode gpsNode1=new GpsNode(NodeChannel.GPS,""String_Node_Str"");
  String input=""String_Node_Str"";
  try {
    double output=gpsNode1.convertMinSecToFloatLongitude(input);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    return;
  }
}"
42634,"@Before public void setUp() throws Exception {
  messageList.clear();
}","/** 
 * Called before each test case runs Clears the message list so we don't get any corruption between tests
 */
@Before public void setUp(){
  messageList.clear();
}"
42635,"/** 
 * Constructor for TransistorAuton robot class
 */
private TransistorAuton(){
  super();
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new KfLocalizer(10));
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.getComPortGPS()));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.getLoggingChannels()));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.getComPortRBSM(),RobobuggyConfigFile.RBSM_COMMAND_PERIOD));
  nodeList.add(new HillCrestImuNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","/** 
 * Constructor for TransistorAuton robot class
 */
private TransistorAuton(){
  super();
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new KfLocalizer(10));
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.getComPortGPS()));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.getLoggingChannels()));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.getComPortRBSM(),RobobuggyConfigFile.RBSM_COMMAND_PERIOD));
  nodeList.add(new HillcrestImuNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.add(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42636,"private TransistorDataCollection(){
  super();
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.getComPortGPS()));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.getLoggingChannels()));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.getComPortRBSM(),RobobuggyConfigFile.RBSM_COMMAND_PERIOD));
  nodeList.add(new CameraNode(NodeChannel.PUSHBAR_CAMERA,100));
  nodeList.add(new HillCrestImuNode());
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  mainWindow.addWindowListener(new WindowListener(){
    @Override public void windowOpened(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowDeactivated(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
      TransistorDataCollection.this.shutDown();
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowActivated(    WindowEvent e){
    }
  }
);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private TransistorDataCollection(){
  super();
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.getComPortGPS()));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.getLoggingChannels()));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.getComPortRBSM(),RobobuggyConfigFile.RBSM_COMMAND_PERIOD));
  nodeList.add(new CameraNode(NodeChannel.PUSHBAR_CAMERA,100));
  nodeList.add(new HillcrestImuNode());
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  mainWindow.addWindowListener(new WindowListener(){
    @Override public void windowOpened(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowDeactivated(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
      TransistorDataCollection.this.shutDown();
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowActivated(    WindowEvent e){
    }
  }
);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42637,"@Before public void setUp() throws Exception {
}","/** 
 * setup done before each test
 */
@Before public void setUp(){
}"
42638,"@After public void tearDown() throws Exception {
}","/** 
 * work that's done after each test
 */
@After public void tearDown(){
}"
42639,"private void setupEncoderSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),((topicName,m) -> {
    long currentTime=new Date().getTime();
    long dt=currentTime - lastEncoderTime;
    if (dt < 10) {
      return;
    }
    EncoderMeasurement odometry=(EncoderMeasurement)m;
    double currentEncoder=odometry.getDistance();
    double dx=currentEncoder - lastEncoder;
    double bodySpeed=dx / (dt / 1000.0);
    lastEncoderTime=currentTime;
    lastEncoder=currentEncoder;
    double[][] z2D={{bodySpeed}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_encoder,z);
  }
));
}","private void setupEncoderSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),((topicName,m) -> {
    long currentTime=new Date().getTime();
    long dt=currentTime - lastEncoderTime;
    if (dt < 10) {
      return;
    }
    EncoderMeasurement odometry=(EncoderMeasurement)m;
    double currentEncoder=odometry.getDistance();
    double dx=currentEncoder - lastEncoder;
    double bodySpeed=dx / (dt / 1000.0);
    lastEncoderTime=currentTime;
    lastEncoder=currentEncoder;
    double[][] z2D={{0},{0},{bodySpeed},{0},{0}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_encoder,z);
  }
));
}"
42640,"private void setupGPSSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gpsLoc=(GpsMeasurement)m;
    LocTuple loc=new LocTuple(gpsLoc.getLatitude(),gpsLoc.getLongitude());
    UTMTuple gps=LocalizerUtil.deg2UTM(loc);
    double dx=gps.getEasting() - lastGPS.getEasting();
    double dy=gps.getNorthing() - lastGPS.getNorthing();
    lastGPS=gps;
    double heading=Math.atan2(dy,dx);
    if ((dx * dx + dy * dy) < 0.25) {
      heading=x.get(HEADING_GLOBAL_ROW,0);
    }
    if (Math.abs(gps.getEasting() - initialLocationGPS.getEasting()) + Math.abs(gps.getNorthing() - initialLocationGPS.getNorthing()) < 10.0) {
      heading=INITIAL_HEADING_IN_RADS;
    }
    double[][] z2D={{gps.getEasting()},{gps.getNorthing()},{heading}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_gps,z);
  }
));
}","private void setupGPSSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gpsLoc=(GpsMeasurement)m;
    LocTuple loc=new LocTuple(gpsLoc.getLatitude(),gpsLoc.getLongitude());
    UTMTuple gps=LocalizerUtil.deg2UTM(loc);
    double dx=gps.getEasting() - lastGPS.getEasting();
    double dy=gps.getNorthing() - lastGPS.getNorthing();
    lastGPS=gps;
    double heading=Math.atan2(dy,dx);
    if ((dx * dx + dy * dy) < 0.25) {
      heading=x.get(HEADING_GLOBAL_ROW,0);
    }
    if (Math.abs(gps.getEasting() - initialLocationGPS.getEasting()) + Math.abs(gps.getNorthing() - initialLocationGPS.getNorthing()) < 10.0) {
      heading=INITIAL_HEADING_IN_RADS;
    }
    double[][] z2D={{gps.getEasting()},{gps.getNorthing()},{0},{heading},{0}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_gps,z);
  }
));
}"
42641,"private Matrix getMotionModel(double dt){
  double[][] motionModel2D={{1,0,dt * Math.cos(x.get(HEADING_GLOBAL_ROW,0)),0,0},{0,1,dt * Math.sin(x.get(HEADING_GLOBAL_ROW,0)),0,0},{0,0,1,0,0},{0,0,0,1,dt,0},{0,0,Math.tan(steeringAngle) / WHEELBASE_IN_METERS,0,0}};
  return new Matrix(motionModel2D);
}","private Matrix getMotionModel(double dt){
  double[][] motionModel2D={{1,0,dt * Math.cos(x.get(HEADING_GLOBAL_ROW,0)),0,0},{0,1,dt * Math.sin(x.get(HEADING_GLOBAL_ROW,0)),0,0},{0,0,1,0,0},{0,0,0,1,dt},{0,0,Math.tan(steeringAngle) / WHEELBASE_IN_METERS,0,0}};
  return new Matrix(motionModel2D);
}"
42642,"private void kalmanFilter(Matrix C,Matrix z){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  lastTime=now.getTime();
  Matrix A=getMotionModel(dt);
  Matrix x_pre=A.times(x);
  Matrix P_pre=A.times(P).times(A.transpose());
  P_pre=P_pre.plus(R);
  x_pre.set(HEADING_GLOBAL_ROW,0,clampAngle(x_pre.get(HEADING_GLOBAL_ROW,0)));
  x_pre.set(HEADING_VEL_ROW,0,clampAngle(x_pre.get(HEADING_VEL_ROW,0)));
  Matrix residual=z.minus(C.times(x));
  Matrix K=C.times(P_pre).times(C.transpose()).plus(Q);
  K=P_pre.times(C.transpose()).times(K.inverse());
  x=x_pre.plus(K.times(residual));
  P=Matrix.identity(5,5).minus(K.times(C));
  P=P.times(P_pre);
  x.set(HEADING_GLOBAL_ROW,0,clampAngle(x.get(HEADING_GLOBAL_ROW,0)));
  x.set(HEADING_VEL_ROW,0,clampAngle(x.get(HEADING_VEL_ROW,0)));
}","private void kalmanFilter(Matrix C,Matrix z){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  lastTime=now.getTime();
  Matrix A=getMotionModel(dt);
  Matrix x_pre=A.times(x);
  Matrix P_pre=A.times(P).times(A.transpose());
  P_pre=P_pre.plus(R);
  x_pre.set(HEADING_GLOBAL_ROW,0,clampAngle(x_pre.get(HEADING_GLOBAL_ROW,0)));
  x_pre.set(HEADING_VEL_ROW,0,clampAngle(x_pre.get(HEADING_VEL_ROW,0)));
  Matrix residual=z.minus(C.times(x));
  Matrix K=C;
  K=K.times(P_pre);
  K=K.times(C.transpose());
  K=K.plus(Q);
  K=P_pre.times(C.transpose()).times(K.inverse());
  x=x_pre.plus(K.times(residual));
  P=Matrix.identity(5,5).minus(K.times(C));
  P=P.times(P_pre);
  x.set(HEADING_GLOBAL_ROW,0,clampAngle(x.get(HEADING_GLOBAL_ROW,0)));
  x.set(HEADING_VEL_ROW,0,clampAngle(x.get(HEADING_VEL_ROW,0)));
}"
42643,"/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param period of the periodically executed portion of the node
 * @param name the name of the node
 * @param initialPosition the initial position of the localizer
 */
protected RobobuggyKFLocalizer(int period,String name,LocTuple initialPosition){
  super(new BuggyBaseNode(NodeChannel.POSE),period,name);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  initialLocationGPS=LocalizerUtil.deg2UTM(initialPosition);
  lastTime=new Date().getTime();
  lastEncoder=0;
  lastEncoderTime=lastTime;
  lastGPS=initialLocationGPS;
  double[][] x2D={{initialLocationGPS.getEasting()},{initialLocationGPS.getNorthing()},{0},{INITIAL_HEADING_IN_RADS},{0}};
  x=new Matrix(x2D);
  double[] rArray={4,4,0.25,0.01,0.01};
  double[] qArray={4,4,0.25,0.02,0.02};
  double[] pArray={25,25,0.25,2.46,2.46};
  R=arrayToMatrix(rArray);
  Q=arrayToMatrix(qArray);
  P=arrayToMatrix(pArray);
  double[][] cGPS2D={{1,0,0,0,0},{0,1,0,0,0},{0,0,0,1,0}};
  C_gps=new Matrix(cGPS2D);
  double[][] cEncoder2D={{0,0,1,0,0}};
  C_encoder=new Matrix(cEncoder2D);
  setupGPSSubscriber();
  setupEncoderSubscriber();
  setupWheelSubscriber();
}","/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param period of the periodically executed portion of the node
 * @param name the name of the node
 * @param initialPosition the initial position of the localizer
 */
protected RobobuggyKFLocalizer(int period,String name,LocTuple initialPosition){
  super(new BuggyBaseNode(NodeChannel.POSE),period,name);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  initialLocationGPS=LocalizerUtil.deg2UTM(initialPosition);
  lastTime=new Date().getTime();
  lastEncoder=0;
  lastEncoderTime=lastTime;
  lastGPS=initialLocationGPS;
  double[][] x2D={{initialLocationGPS.getEasting()},{initialLocationGPS.getNorthing()},{0},{INITIAL_HEADING_IN_RADS},{0}};
  x=new Matrix(x2D);
  double[] rArray={4,4,0.25,0.01,0.01};
  double[] qArray={4,4,0.25,0.02,0.02};
  double[] pArray={25,25,0.25,2.46,2.46};
  R=arrayToMatrix(rArray);
  Q=arrayToMatrix(qArray);
  P=arrayToMatrix(pArray);
  double[][] cGPS2D={{1,0,0,0,0},{0,1,0,0,0},{0,0,0,0,0},{0,0,0,1,0},{0,0,0,0,0}};
  C_gps=new Matrix(cGPS2D);
  double[][] cEncoder2D={{0,0,0,0,0},{0,0,0,0,0},{0,0,1,0,0},{0,0,0,0,0},{0,0,0,0,0}};
  C_encoder=new Matrix(cEncoder2D);
  setupGPSSubscriber();
  setupEncoderSubscriber();
  setupWheelSubscriber();
}"
42644,"private void setupGPSSubscriber(){
}","private void setupGPSSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gpsLoc=(GpsMeasurement)m;
    LocTuple loc=new LocTuple(gpsLoc.getLatitude(),gpsLoc.getLongitude());
    UTMTuple gps=LocalizerUtil.deg2UTM(loc);
    double dx=gps.getEasting() - lastGPS.getEasting();
    double dy=gps.getNorthing() - lastGPS.getNorthing();
    lastGPS=gps;
    double heading=Math.atan2(dy,dx);
    if ((dx * dx + dy * dy) < 0.25) {
      heading=x.get(HEADING_GLOBAL_ROW,0);
    }
    if (Math.abs(gps.getEasting() - initialLocationGPS.getEasting()) + Math.abs(gps.getNorthing() - initialLocationGPS.getNorthing()) < 10.0) {
      heading=INITIAL_HEADING_IN_RADS;
    }
    double[][] z2D={{gps.getEasting()},{gps.getNorthing()},{heading}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_gps,Q_gps,z);
  }
));
}"
42645,"/** 
 * NOTE THIS IS NOT YET A VALID TEST CASE
 * @throws InterruptedException
 */
@Test public void test_singleIteration() throws InterruptedException {
  RobobuggyKFLocalizer localizer=new RobobuggyKFLocalizer(10000,""String_Node_Str"",new LocTuple(40.441670,-79.9416362));
  new Publisher(NodeChannel.GPS.getMsgPath()).publish(new GpsMeasurement(40.441670,-79.9412361));
  Thread.sleep(100000);
  Assert.assertEquals(0.0,1.0,0.0);
}","/** 
 * NOTE THIS IS NOT YET A VALID TEST CASE
 * @throws InterruptedException
 */
@Test public void test_singleIteration() throws InterruptedException {
  RobobuggyKFLocalizer localizer=new RobobuggyKFLocalizer(10000,""String_Node_Str"",new LocTuple(40.441670,-79.9416362));
  new Publisher(NodeChannel.GPS.getMsgPath()).publish(new GpsMeasurement(40.441670,-79.9512463));
  Thread.sleep(3000);
  localizer.update();
  Thread.sleep(3000);
  Assert.assertEquals(0.0,1.0,0.0);
}"
42646,"private void setupEncoderSubscriber(){
}","private void setupEncoderSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),((topicName,m) -> {
    long currentTime=new Date().getTime();
    long dt=currentTime - lastEncoderTime;
    if (dt < 10) {
      return;
    }
    EncoderMeasurement odometry=(EncoderMeasurement)m;
    double currentEncoder=odometry.getDistance();
    double dx=currentEncoder - lastEncoder;
    double bodySpeed=dx / (dt / 1000.0);
    lastEncoderTime=currentTime;
    lastEncoder=currentEncoder;
    double[][] z2D={{bodySpeed}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_encoder,z);
  }
));
}"
42647,"private void setupGPSSubscriber(){
}","private void setupGPSSubscriber(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),((topicName,m) -> {
    GpsMeasurement gpsLoc=(GpsMeasurement)m;
    LocTuple loc=new LocTuple(gpsLoc.getLatitude(),gpsLoc.getLongitude());
    UTMTuple gps=LocalizerUtil.deg2UTM(loc);
    double dx=gps.getEasting() - lastGPS.getEasting();
    double dy=gps.getNorthing() - lastGPS.getNorthing();
    lastGPS=gps;
    double heading=Math.atan2(dy,dx);
    if ((dx * dx + dy * dy) < 0.25) {
      heading=x.get(HEADING_GLOBAL_ROW,0);
    }
    if (Math.abs(gps.getEasting() - initialGPS.getEasting()) + Math.abs(gps.getNorthing() - initialGPS.getNorthing()) < 10.0) {
      heading=initialHeading;
    }
    double[][] z2D={{gps.getEasting()},{gps.getNorthing()},{heading}};
    Matrix z=new Matrix(z2D);
    kalmanFilter(C_gps,z);
  }
));
}"
42648,"private void kalmanFilter(Matrix C,Matrix z){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  lastTime=now.getTime();
  Matrix A=motionModel(dt);
  Matrix x_pre=A.times(x);
  Matrix P_pre=A.times(P).times(A.transpose());
  P_pre=P_pre.plus(R);
  x_pre.set(HEADING_GLOBAL_ROW,0,scrubAngle(x_pre.get(HEADING_GLOBAL_ROW,0)));
  x_pre.set(HEADING_VEL_ROW,0,scrubAngle(x_pre.get(HEADING_VEL_ROW,0)));
  Matrix residual=z.minus(C.times(x));
  Matrix K=C.times(P_pre).times(C.transpose()).plus(Q);
  K=P_pre.times(C.transpose()).times(K.inverse());
  x=x_pre.plus(K.times(residual));
  P=Matrix.identity(5,5).minus(K.times(C));
  P=P.times(P_pre);
  x.set(HEADING_GLOBAL_ROW,0,scrubAngle(x.get(HEADING_GLOBAL_ROW,0)));
  x.set(HEADING_VEL_ROW,0,scrubAngle(x.get(HEADING_VEL_ROW,0)));
}","private void kalmanFilter(Matrix C,Matrix z){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  lastTime=now.getTime();
  Matrix A=getMotionModel(dt);
  Matrix x_pre=A.times(x);
  Matrix P_pre=A.times(P).times(A.transpose());
  P_pre=P_pre.plus(R);
  x_pre.set(HEADING_GLOBAL_ROW,0,scrubAngle(x_pre.get(HEADING_GLOBAL_ROW,0)));
  x_pre.set(HEADING_VEL_ROW,0,scrubAngle(x_pre.get(HEADING_VEL_ROW,0)));
  Matrix residual=z.minus(C.times(x));
  Matrix K=C.times(P_pre).times(C.transpose()).plus(Q);
  K=P_pre.times(C.transpose()).times(K.inverse());
  x=x_pre.plus(K.times(residual));
  P=Matrix.identity(5,5).minus(K.times(C));
  P=P.times(P_pre);
  x.set(HEADING_GLOBAL_ROW,0,scrubAngle(x.get(HEADING_GLOBAL_ROW,0)));
  x.set(HEADING_VEL_ROW,0,scrubAngle(x.get(HEADING_VEL_ROW,0)));
}"
42649,"private static Matrix arrayToMatrix(double[] arr){
}","private static Matrix arrayToMatrix(double[] arr){
  double[][] arr2D={{arr[0],0,0,0,0},{0,arr[1],0,0,0},{0,0,arr[2],0,0},{0,0,0,arr[3],0},{0,0,0,0,arr[4]}};
  return new Matrix(arr2D);
}"
42650,"/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param base   {@link BuggyNode} to decorate
 * @param period of the periodically executed portion of the node
 * @param name the name of the node
 * @param initialPosition the initial position of the localizer
 */
protected RobobuggyKFLocalizer(int period,String name,LocTuple initialPosition){
}","/** 
 * Create a new   {@link PeriodicNode} decorator
 * @param period of the periodically executed portion of the node
 * @param name the name of the node
 * @param initialPosition the initial position of the localizer
 */
protected RobobuggyKFLocalizer(int period,String name,LocTuple initialPosition){
  super(new BuggyBaseNode(NodeChannel.POSE),period,name);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  lastTime=new Date().getTime();
  lastEncoder=0;
  lastEncoderTime=lastTime;
  lastGPS=initialGPS;
  double[][] x2D={{initialGPS.getEasting()},{initialGPS.getNorthing()},{0},{initialHeading},{0}};
  x=new Matrix(x2D);
  double[] rArray={4,4,0.25,0.01,0.01};
  double[] qArray={4,4,0.25,0.02,0.02};
  double[] pArray={25,25,0.25,2.46,2.46};
  R=arrayToMatrix(rArray);
  Q=arrayToMatrix(qArray);
  P=arrayToMatrix(pArray);
  double[][] cGPS2D={{1,0,0,0,0},{0,1,0,0,0},{0,0,0,1,0}};
  C_gps=new Matrix(cGPS2D);
  double[][] cEncoder2D={{0,0,1,0,0}};
  C_encoder=new Matrix(cEncoder2D);
  setupGPSSubscriber();
  setupEncoderSubscriber();
  setupWheelSubscriber();
}"
42651,"private Matrix propagate(){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  Matrix A=motionModel(dt);
  return A.times(x);
}","private Matrix propagate(){
  Date now=new Date();
  double dt=(now.getTime() - lastTime) / 1000.0;
  Matrix A=getMotionModel(dt);
  return A.times(x);
}"
42652,"/** 
 * Creates a   {@link SerialNode} decorator for the specified {@link BuggyNode}
 * @param base       {@link BuggyNode} to decorate
 * @param threadName name of the thread
 * @param portName   name of the desired serial port
 * @param baudRate   baud rate of the serial port
 */
public SerialNode(BuggyNode base,String threadName,String portName,int baudRate){
  super(base,portName);
  this.setName(threadName);
  this.threadName=threadName;
  this.sp=connect(portName,baudRate);
}","/** 
 * Creates a   {@link SerialNode} decorator for the specified {@link BuggyNode}
 * @param base       {@link BuggyNode} to decorate
 * @param threadName name of the thread
 * @param portName   name of the desired serial port
 * @param baudRate   baud rate of the serial port
 */
public SerialNode(BuggyNode base,String threadName,String portName,int baudRate){
  super(base,portName);
  this.setName(threadName);
  this.threadName=threadName;
  if (portName.equals(""String_Node_Str"")) {
    return;
  }
  this.sp=connect(portName,baudRate);
}"
42653,"@Override public void actionPerformed(String topicName,Message m){
  GpsMeasurement gpsM=(GpsMeasurement)m;
  messageList.add((GpsMeasurement)m);
}","@Override public void actionPerformed(String topicName,Message m){
  messageList.add((GpsMeasurement)m);
}"
42654,"@Test public void testStandardGPSNode(){
  GpsNode gpsNode1=new GpsNode(NodeChannel.GPS,""String_Node_Str"");
  String input=""String_Node_Str"";
  char[] inputChars=input.toCharArray();
  byte[] bytes=new String(inputChars).getBytes();
  gpsNode1.peel(bytes,0,bytes.length);
  try {
    Thread.sleep(3000);
    if (messageList.size() != 1) {
      fail(""String_Node_Str"");
    }
    Thread.sleep(3000);
    while (!messageList.isEmpty()) {
      GpsMeasurement m=messageList.take();
      assertEquals(m.getLatitude(),48.1173,0.0);
      assertEquals(m.getLongitude(),11.51667,0.0001);
      assertEquals(m.getNorth(),true);
      assertEquals(m.getWest(),false);
    }
  }
 catch (  Exception e) {
  }
}","@Test public void testStandardGPSNode(){
  GpsNode gpsNode1=new GpsNode(NodeChannel.GPS,""String_Node_Str"");
  String input=""String_Node_Str"";
  byte[] bytes=Charset.forName(""String_Node_Str"").encode(input).array();
  gpsNode1.peel(bytes,0,bytes.length);
  try {
    Thread.sleep(3000);
    if (messageList.size() != 1) {
      fail(""String_Node_Str"");
    }
    Thread.sleep(3000);
    while (!messageList.isEmpty()) {
      GpsMeasurement m=messageList.take();
      assertEquals(m.getLatitude(),48.1173,0.0);
      assertEquals(m.getLongitude(),11.51667,0.0001);
      assertEquals(m.getNorth(),true);
      assertEquals(m.getWest(),false);
    }
  }
 catch (  Exception e) {
  }
}"
42655,"@BeforeClass public static void oneTime(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement gpsM=(GpsMeasurement)m;
      messageList.add((GpsMeasurement)m);
    }
  }
);
}","@BeforeClass public static void oneTime(){
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      messageList.add((GpsMeasurement)m);
    }
  }
);
}"
42656,"/** 
 * Creates a new decorator for the given   {@link Node}
 * @param node {@link Node} to decorate
 * @param name the name we want for this node to store so that it can be referenced later
 */
public HillcrestNode(BuggyNode node,String name){
  super(node,name);
}","/** 
 * Creates a new Hillcrest IMU node
 */
public HillcrestNode(){
  super(new BuggyBaseNode(NodeChannel.IMU),""String_Node_Str"");
}"
42657,"public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
}"
42658,"public void tearDown() throws Exception {
}","@After public void tearDown() throws Exception {
}"
42659,"/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  buggyFrameRotZ=0.0;
  buggySteeringAngle=0.0;
  lastEncoderReading=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      buggySteeringAngle=steerM.getAngle();
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        buggyFrameGpsY=newGPSData.getLatitude();
        buggyFrameGpsX=newGPSData.getLongitude();
        double dLat=buggyFrameGpsY - oldGPSY;
        double dLon=buggyFrameGpsX - oldGPSX;
        oldGPSX=buggyFrameGpsX;
        oldGPSY=buggyFrameGpsY;
        buggyFrameRotZ=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
        publishUpdate();
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      buggyFrameRotZ+=MotionModel.getHeadingChange(deltaDistance,buggySteeringAngle);
      LocTuple deltaPos=LocalizerUtil.convertMetersToLatLng(deltaDistance,buggyFrameRotZ);
      buggyFrameGpsY+=deltaPos.getLatitude();
      buggyFrameGpsX+=deltaPos.getLongitude();
      lastEncoderReading=currentEncoderMeasurement;
      publishUpdate();
    }
  }
);
}","/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  buggyFrameRotZ=0.0;
  buggySteeringAngle=0.0;
  lastEncoderReading=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      buggySteeringAngle=steerM.getAngle();
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        buggyFrameGpsY=newGPSData.getLatitude();
        buggyFrameGpsX=newGPSData.getLongitude();
        double dLat=buggyFrameGpsY - oldGPSY;
        double dLon=buggyFrameGpsX - oldGPSX;
        oldGPSX=buggyFrameGpsX;
        oldGPSY=buggyFrameGpsY;
        buggyFrameRotZ=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
        publishUpdate();
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.IMU_ANG_POS.getMsgPath(),((topicName,m) -> {
    IMUAngularPositionMessage mes=((IMUAngularPositionMessage)m);
    Matrix r=new Matrix(mes.getRot());
    double[][] xVec={{1},{0},{0}};
    double[][] yVec={{0},{1},{0}};
    double x=r.times(new Matrix(xVec)).get(0,0);
    double y=r.times(new Matrix(yVec)).get(0,0);
    buggyFrameRotZ=Util.normalizeAngleDeg(Math.toDegrees(-Math.atan2(y,x)) + 90);
    publishUpdate();
  }
));
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      buggyFrameRotZ+=MotionModel.getHeadingChange(deltaDistance,buggySteeringAngle);
      LocTuple deltaPos=LocalizerUtil.convertMetersToLatLng(deltaDistance,buggyFrameRotZ);
      buggyFrameGpsY+=deltaPos.getLatitude();
      buggyFrameGpsX+=deltaPos.getLongitude();
      lastEncoderReading=currentEncoderMeasurement;
      publishUpdate();
    }
  }
);
}"
42660,"@Override protected void update(){
  predictStep();
  UTMTuple currentLatLng=new UTMTuple(17,'T',state.get(0,0),state.get(1,0));
  LocTuple latLng=LocalizerUtil.utm2Deg(currentLatLng);
  posePub.publish(new GPSPoseMessage(new Date(),latLng.getLatitude(),latLng.getLongitude(),state.get(4,0)));
}","@Override protected synchronized void update(){
  predictStep();
  UTMTuple currentLatLng=new UTMTuple(17,'T',state.get(0,0),state.get(1,0));
  LocTuple latLng=LocalizerUtil.utm2Deg(currentLatLng);
  posePub.publish(new GPSPoseMessage(new Date(),latLng.getLatitude(),latLng.getLongitude(),state.get(4,0)));
}"
42661,"@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10;
  int targetIndex=closestIndex;
  while (targetIndex < wayPoints.size() && GPSPoseMessage.getDistance(pose,wayPoints.get(targetIndex).toGpsPoseMessage(0)) < delta) {
    targetIndex=targetIndex + 1;
  }
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  MapMarkerDot destPoint=new MapMarkerDot(targetPoint.getLatitude(),targetPoint.getLongitude());
  AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().setDestinationPoint(destPoint);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
  desiredHeading=Util.normalizeAngleDeg(desiredHeading);
  double poseHeading=Util.normalizeAngleDeg(pose.getHeading());
  return Util.normalizeAngleDeg(desiredHeading - poseHeading);
}","@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10;
  int targetIndex=closestIndex;
  while (targetIndex < wayPoints.size() && GPSPoseMessage.getDistance(pose,wayPoints.get(targetIndex).toGpsPoseMessage(0)) < delta) {
    targetIndex=targetIndex + 1;
  }
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
  desiredHeading=Util.normalizeAngleDeg(desiredHeading);
  double poseHeading=Util.normalizeAngleDeg(pose.getHeading());
  return Util.normalizeAngleDeg(desiredHeading - poseHeading);
}"
42662,"@Override public void handleRead(Device arg0,HidInMsg arg1,int arg2,long arg3){
  if (!(arg1 instanceof FreespaceMsgInMotionEngineOutput)) {
    return;
  }
  FreespaceMsgInMotionEngineOutput m=(FreespaceMsgInMotionEngineOutput)arg1;
  int[] data=m.getMeData();
  int offset=0;
  int axisVal;
  float scale;
  if (offset < 0) {
    return;
  }
  if (m.getFf0()) {
    offset+=6;
  }
  if (m.getFf1()) {
    double xAccel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAccel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAccel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    linearAccPub.publish(new IMULinearAccelerationMessage(xAccel,yAccel,zAccel));
  }
  if (m.getFf2()) {
    double xAccel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAccel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAccel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    linearAccNoGravPub.publish(new IMULinearAccelerationMessage(xAccel,yAccel,zAccel));
  }
  if (m.getFf3()) {
    double xAngularVel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAngularVel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAngularVel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    angVelPub.publish(new IMUAngularVelocityMessage(xAngularVel,yAngularVel,zAngularVel));
  }
  if (m.getFf4()) {
    double xMag=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],12);
    double yMag=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],12);
    double zMag=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],12);
    offset+=6;
    magPub.publish(new MagneticMeasurement(xMag,yMag,zMag));
  }
  if (m.getFf5()) {
    double temperature=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],7);
    offset+=2;
    tempPub.publish(new IMUTemperatureMessage(temperature));
  }
  if (m.getFf6()) {
    double w=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],14);
    double x=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],14);
    double y=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],14);
    double z=convertQNToDouble((byte)data[offset + 6],(byte)data[offset + 7],14);
    double r11=1 - 2 * y * y - 2 * z * z;
    double r12=2 * x * y - 2 * z * w;
    double r13=2 * x * z + 2 * y * w;
    double r21=2 * x * y + 2 * z * w;
    double r22=1 - 2 * x * x - 2 * z * z;
    double r23=2 * y * z - 2 * x * w;
    double r31=2 * x * z - 2 * y * w;
    double r32=2 * y * z + 2 * x * w;
    double r33=1 - 2 * x * x - 2 * y * y;
    double[][] rot={{r11,r12,r13},{r21,r22,r23},{r31,r32,r33}};
    double yaw=Math.atan(r21 / r11);
    double pitch=-r31 / Math.sqrt(r32 * r32 + r33 * r33);
    double roll=Math.atan(r32 / r33);
    angPosPub.publish(new IMUAngularPositionMessage(rot));
    offset+=8;
  }
}","@Override public void handleRead(Device arg0,HidInMsg arg1,int arg2,long arg3){
  if (!(arg1 instanceof FreespaceMsgInMotionEngineOutput)) {
    return;
  }
  FreespaceMsgInMotionEngineOutput m=(FreespaceMsgInMotionEngineOutput)arg1;
  int[] data=m.getMeData();
  int offset=0;
  int axisVal;
  float scale;
  if (offset < 0) {
    return;
  }
  if (m.getFf0()) {
    offset+=6;
  }
  if (m.getFf1()) {
    double xAccel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAccel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAccel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    linearAccPub.publish(new IMULinearAccelerationMessage(xAccel,yAccel,zAccel));
  }
  if (m.getFf2()) {
    double xAccel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAccel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAccel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    linearAccNoGravPub.publish(new IMULinearAccelerationMessage(xAccel,yAccel,zAccel));
  }
  if (m.getFf3()) {
    double xAngularVel=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],10);
    double yAngularVel=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],10);
    double zAngularVel=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],10);
    offset+=6;
    angVelPub.publish(new IMUAngularVelocityMessage(xAngularVel,yAngularVel,zAngularVel));
  }
  if (m.getFf4()) {
    double xMag=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],12);
    double yMag=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],12);
    double zMag=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],12);
    offset+=6;
    magPub.publish(new MagneticMeasurement(xMag,yMag,zMag));
  }
  if (m.getFf5()) {
    double temperature=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],7);
    offset+=2;
    tempPub.publish(new IMUTemperatureMessage(temperature));
  }
  if (m.getFf6()) {
    double w=convertQNToDouble((byte)data[offset + 0],(byte)data[offset + 1],14);
    double x=convertQNToDouble((byte)data[offset + 2],(byte)data[offset + 3],14);
    double y=convertQNToDouble((byte)data[offset + 4],(byte)data[offset + 5],14);
    double z=convertQNToDouble((byte)data[offset + 6],(byte)data[offset + 7],14);
    double r11=1 - 2 * y * y - 2 * z * z;
    double r12=2 * x * y - 2 * z * w;
    double r13=2 * x * z + 2 * y * w;
    double r21=2 * x * y + 2 * z * w;
    double r22=1 - 2 * x * x - 2 * z * z;
    double r23=2 * y * z - 2 * x * w;
    double r31=2 * x * z - 2 * y * w;
    double r32=2 * y * z + 2 * x * w;
    double r33=1 - 2 * x * x - 2 * y * y;
    double[][] rot={{r11,r12,r13},{r21,r22,r23},{r31,r32,r33}};
    angPosPub.publish(new IMUAngularPositionMessage(rot));
    offset+=8;
  }
}"
42663,"/** 
 * Construct a new   {@link DataPanel}
 */
public DataPanel(){
  gpsPanel=new GpsPanel();
  this.addComponent(gpsPanel,0,0,1,.8);
  this.addComponent(createDataPanel(),0,.8,1,.2);
}","/** 
 * Construct a new   {@link DataPanel}
 */
public DataPanel(){
  this.addComponent(createDataPanel(),0,.8,1,.2);
}"
42664,"@Test public void testGotoWaypoint10meters(){
  GpsMeasurement currentPos=new GpsMeasurement(0,0);
  double deltaLat=LocalizerUtil.convertMetersToLat(10);
}","@Test public void testGotoWaypoint10meters(){
  LocalizerUtil.convertMetersToLat(10);
}"
42665,"/** 
 * Constructor for sensor player
 * @param filePath the file to play
 * @param playBackSpeed the playback sped
 */
public LineByLineSensorPlayer(String filePath,double playBackSpeed){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Thread thread=new Thread(){
    public void run(){
      Gson translator=new GsonBuilder().create();
      try {
        InputStream is=new FileInputStream(filePath);
        InputStreamReader isr=new InputStreamReader(is);
        BufferedReader br=new BufferedReader(isr);
        String nextLine;
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=br.readLine();
        nextLine=nextLine.substring(0,nextLine.length() - 1);
        JsonObject sensorObject=translator.fromJson(nextLine,JsonObject.class);
        long startTimeSensor=sensorObject.get(""String_Node_Str"").getAsLong();
        long startTimeReal=new Date().getTime();
        nextLine=br.readLine();
        while (nextLine != null && !nextLine.startsWith(""String_Node_Str"")) {
          try {
            nextLine=nextLine.substring(0,nextLine.length() - 1);
            long now=new Date().getTime();
            sensorObject=translator.fromJson(nextLine,JsonObject.class);
            long dt=now - startTimeReal;
            PlayBackUtil.parseSensorLog(sensorObject,translator,dt,startTimeSensor,RobobuggyConfigFile.getPlayBackSpeed());
            nextLine=br.readLine();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
 catch (      FileNotFoundException e) {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
        e.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
;
  thread.start();
}","/** 
 * Constructor for sensor player
 * @param filePath the file to play
 * @param playBackSpeed the playback sped
 */
public LineByLineSensorPlayer(String filePath,double playBackSpeed){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Thread thread=new Thread(){
    public void run(){
      Gson translator=new GsonBuilder().create();
      try {
        InputStream is=new FileInputStream(filePath);
        InputStreamReader isr=new InputStreamReader(is,""String_Node_Str"");
        BufferedReader br=new BufferedReader(isr);
        String nextLine;
        nextLine=br.readLine();
        if (nextLine != null)         nextLine=br.readLine();
 else {
          new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
          br.close();
          return;
        }
        if (nextLine != null)         nextLine=br.readLine();
        if (nextLine != null)         nextLine=br.readLine();
        if (nextLine != null)         nextLine=br.readLine();
        if (nextLine != null)         nextLine=br.readLine();
        if (nextLine != null)         nextLine=br.readLine();
        if (nextLine != null)         nextLine=nextLine.substring(0,nextLine.length() - 1);
        JsonObject sensorObject=translator.fromJson(nextLine,JsonObject.class);
        long startTimeSensor=sensorObject.get(""String_Node_Str"").getAsLong();
        long startTimeReal=new Date().getTime();
        nextLine=br.readLine();
        while (nextLine != null && !nextLine.startsWith(""String_Node_Str"")) {
          try {
            nextLine=nextLine.substring(0,nextLine.length() - 1);
            long now=new Date().getTime();
            sensorObject=translator.fromJson(nextLine,JsonObject.class);
            long dt=now - startTimeReal;
            PlayBackUtil.parseSensorLog(sensorObject,translator,dt,startTimeSensor,RobobuggyConfigFile.getPlayBackSpeed());
            nextLine=br.readLine();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
        br.close();
      }
 catch (      FileNotFoundException e) {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
        e.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
;
  thread.start();
}"
42666,"public void run(){
  Gson translator=new GsonBuilder().create();
  try {
    InputStream is=new FileInputStream(filePath);
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String nextLine;
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=br.readLine();
    nextLine=nextLine.substring(0,nextLine.length() - 1);
    JsonObject sensorObject=translator.fromJson(nextLine,JsonObject.class);
    long startTimeSensor=sensorObject.get(""String_Node_Str"").getAsLong();
    long startTimeReal=new Date().getTime();
    nextLine=br.readLine();
    while (nextLine != null && !nextLine.startsWith(""String_Node_Str"")) {
      try {
        nextLine=nextLine.substring(0,nextLine.length() - 1);
        long now=new Date().getTime();
        sensorObject=translator.fromJson(nextLine,JsonObject.class);
        long dt=now - startTimeReal;
        PlayBackUtil.parseSensorLog(sensorObject,translator,dt,startTimeSensor,RobobuggyConfigFile.getPlayBackSpeed());
        nextLine=br.readLine();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  FileNotFoundException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    e.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
}","public void run(){
  Gson translator=new GsonBuilder().create();
  try {
    InputStream is=new FileInputStream(filePath);
    InputStreamReader isr=new InputStreamReader(is,""String_Node_Str"");
    BufferedReader br=new BufferedReader(isr);
    String nextLine;
    nextLine=br.readLine();
    if (nextLine != null)     nextLine=br.readLine();
 else {
      new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      br.close();
      return;
    }
    if (nextLine != null)     nextLine=br.readLine();
    if (nextLine != null)     nextLine=br.readLine();
    if (nextLine != null)     nextLine=br.readLine();
    if (nextLine != null)     nextLine=br.readLine();
    if (nextLine != null)     nextLine=br.readLine();
    if (nextLine != null)     nextLine=nextLine.substring(0,nextLine.length() - 1);
    JsonObject sensorObject=translator.fromJson(nextLine,JsonObject.class);
    long startTimeSensor=sensorObject.get(""String_Node_Str"").getAsLong();
    long startTimeReal=new Date().getTime();
    nextLine=br.readLine();
    while (nextLine != null && !nextLine.startsWith(""String_Node_Str"")) {
      try {
        nextLine=nextLine.substring(0,nextLine.length() - 1);
        long now=new Date().getTime();
        sensorObject=translator.fromJson(nextLine,JsonObject.class);
        long dt=now - startTimeReal;
        PlayBackUtil.parseSensorLog(sensorObject,translator,dt,startTimeSensor,RobobuggyConfigFile.getPlayBackSpeed());
        nextLine=br.readLine();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    br.close();
  }
 catch (  FileNotFoundException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    e.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
}"
42667,"public KfLocalizer(int period){
  super(new BuggyBaseNode(NodeChannel.POSE),period,""String_Node_Str"");
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  wheelBase=1.13;
  double[][] startCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  covariance=new Matrix(startCovariance);
  LocTuple startLatLng=new LocTuple(40.4416651,-79.9437577);
  UTMTuple startUTM=LocalizerUtil.Deg2UTM(startLatLng);
  lastGPS=startUTM;
  lastLastGPS=startUTM;
  lastEncoderReadingTime=new Date().getTime();
  mostRecentUpdateTime=new Date();
  double[][] start={{startUTM.Easting},{startUTM.Northing},{0},{0},{-110},{0},{0}};
  state=new Matrix(start);
  double[][] predictCovarianceArray={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  predictCovariance=new Matrix(predictCovarianceArray);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      LocTuple gpsLatLng=new LocTuple(newGPSData.getLatitude(),newGPSData.getLongitude());
      UTMTuple gpsUTM=LocalizerUtil.Deg2UTM(gpsLatLng);
      double dx=gpsUTM.Easting - lastGPS.Easting;
      double dy=gpsUTM.Northing - lastGPS.Northing;
      double th=Math.toDegrees(Math.atan2(dy,dx));
      lastLastGPS=lastGPS;
      lastGPS=gpsUTM;
      System.out.println(th);
      double[][] observationModel={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
      if (Math.sqrt(dx * dx + dy * dy) < .5) {
        observationModel[4][4]=0;
      }
      double[][] meassurement={{gpsUTM.Easting},{gpsUTM.Northing},{0},{0},{th},{0},{0}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.IMU_ANG_POS.getMsgPath(),((topicName,m) -> {
    IMUAngularPositionMessage mes=((IMUAngularPositionMessage)m);
    double[][] xVar={{1},{0},{0}};
    double[][] yVar={{0},{1},{0}};
    Matrix xMat=new Matrix(xVar);
    Matrix yMat=new Matrix(yVar);
    Matrix rot=new Matrix(mes.getRot());
    double x=rot.times(xMat).get(0,0);
    double y=rot.times(yMat).get(0,0);
    double th=-(Math.toDegrees(Math.atan2(y,x)) - 90);
    double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
    double[][] meassurement={{0},{0},{0},{0},{th},{0},{0}};
    double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  }
));
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      long currentTime=new Date().getTime();
      long dt=currentTime - lastEncoderReadingTime;
      if (dt > 1) {
        double bodySpeed=deltaDistance / (dt / 1000.0);
        lastEncoderReadingTime=currentTime;
        lastEncoderReading=currentEncoderMeasurement;
        double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
        double[][] meassurement={{0},{0},{bodySpeed},{0},{0},{0},{0}};
        double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
        updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,1}};
      double[][] meassurement={{0},{0},{0},{0},{0},{0},{steerM.getAngle()}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  resume();
}","public KfLocalizer(int period){
  super(new BuggyBaseNode(NodeChannel.POSE),period,""String_Node_Str"");
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  wheelBase=1.13;
  double[][] startCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  covariance=new Matrix(startCovariance);
  LocTuple startLatLng=new LocTuple(40.441670,-79.9416362);
  UTMTuple startUTM=LocalizerUtil.Deg2UTM(startLatLng);
  lastGPS=startUTM;
  lastLastGPS=startUTM;
  lastEncoderReadingTime=new Date().getTime();
  mostRecentUpdateTime=new Date();
  double startAngle=250;
  double[][] start={{startUTM.Easting},{startUTM.Northing},{0},{0},{startAngle},{0},{0}};
  state=new Matrix(start);
  double[][] predictCovarianceArray={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  predictCovariance=new Matrix(predictCovarianceArray);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      LocTuple gpsLatLng=new LocTuple(newGPSData.getLatitude(),newGPSData.getLongitude());
      UTMTuple gpsUTM=LocalizerUtil.Deg2UTM(gpsLatLng);
      double dx=gpsUTM.Easting - lastGPS.Easting;
      double dy=gpsUTM.Northing - lastGPS.Northing;
      double th=Math.toDegrees(Math.atan2(dy,dx));
      lastLastGPS=lastGPS;
      lastGPS=gpsUTM;
      double[][] observationModel={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
      if (Math.sqrt(dx * dx + dy * dy) < .5) {
        observationModel[4][4]=0;
      }
      if (Math.abs(gpsUTM.Easting - startUTM.Easting) + Math.abs(gpsUTM.Northing - startUTM.Northing) < 10.0) {
        th=startAngle;
      }
      double[][] meassurement={{gpsUTM.Easting},{gpsUTM.Northing},{0},{0},{th},{0},{0}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.IMU_ANG_POS.getMsgPath(),((topicName,m) -> {
    IMUAngularPositionMessage mes=((IMUAngularPositionMessage)m);
    double[][] xVar={{1},{0},{0}};
    double[][] yVar={{0},{1},{0}};
    Matrix xMat=new Matrix(xVar);
    Matrix yMat=new Matrix(yVar);
    Matrix rot=new Matrix(mes.getRot());
    double x=rot.times(xMat).get(0,0);
    double y=rot.times(yMat).get(0,0);
    double th=-(Math.toDegrees(Math.atan2(y,x)) - 90);
    double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
    double[][] meassurement={{0},{0},{0},{0},{th},{0},{0}};
    double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  }
));
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      long currentTime=new Date().getTime();
      long dt=currentTime - lastEncoderReadingTime;
      if (dt > 1) {
        double bodySpeed=deltaDistance / (dt / 1000.0);
        lastEncoderReadingTime=currentTime;
        lastEncoderReading=currentEncoderMeasurement;
        double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
        double[][] meassurement={{0},{0},{bodySpeed},{0},{0},{0},{0}};
        double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
        updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,1}};
      double[][] meassurement={{0},{0},{0},{0},{0},{0},{steerM.getAngle()}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  resume();
}"
42668,"private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  System.out.println(state.get(4,0) + ""String_Node_Str"" + inovation.get(4,0));
  for (int i=4; i < 7; i++) {
    if (inovation.get(i,0) > 180) {
      inovation.set(i,0,-360 + inovation.get(i,0));
    }
 else     if (inovation.get(i,0) < -180) {
      inovation.set(i,0,360 + inovation.get(i,0));
    }
  }
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}","private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  for (int i=4; i < 7; i++) {
    if (inovation.get(i,0) > 180) {
      inovation.set(i,0,-360 + inovation.get(i,0));
    }
 else     if (inovation.get(i,0) < -180) {
      inovation.set(i,0,360 + inovation.get(i,0));
    }
  }
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}"
42669,"private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  if (inovation.get(6,0) > 180) {
    inovation.set(6,0,360 - inovation.get(6,0));
  }
  System.out.println(""String_Node_Str"");
  System.out.println(inovation);
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}","private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  for (int i=4; i < 7; i++) {
    if (inovation.get(i,0) > 180) {
      inovation.set(i,0,-360 + inovation.get(i,0));
    }
 else     if (inovation.get(i,0) < -180) {
      inovation.set(i,0,360 + inovation.get(i,0));
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(inovation);
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}"
42670,"public KfLocalizer(int period){
  super(new BuggyBaseNode(NodeChannel.POSE),period,""String_Node_Str"");
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  wheelBase=1.13;
  double[][] startCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  covariance=new Matrix(startCovariance);
  LocTuple startLatLng=new LocTuple(40.4416651,-79.9437577);
  UTMTuple startUTM=LocalizerUtil.Deg2UTM(startLatLng);
  lastGPS=startUTM;
  lastLastGPS=startUTM;
  lastEncoderReadingTime=new Date().getTime();
  mostRecentUpdateTime=new Date();
  double[][] start={{startUTM.Easting},{startUTM.Northing},{0},{0},{-110},{0},{0}};
  state=new Matrix(start);
  double[][] predictCovarianceArray={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  predictCovariance=new Matrix(predictCovarianceArray);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      LocTuple gpsLatLng=new LocTuple(newGPSData.getLatitude(),newGPSData.getLongitude());
      UTMTuple gpsUTM=LocalizerUtil.Deg2UTM(gpsLatLng);
      double dx=gpsUTM.Easting - lastGPS.Easting;
      double dy=gpsUTM.Northing - lastGPS.Northing;
      double th=Math.toDegrees(Math.atan2(dy,dx));
      lastLastGPS=lastGPS;
      lastGPS=gpsUTM;
      double[][] observationModel={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
      if (Math.sqrt(dx * dx + dy * dy) < .5) {
        observationModel[4][4]=0;
      }
      double[][] meassurement={{gpsUTM.Easting},{gpsUTM.Northing},{0},{0},{th},{0},{0}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.IMU_ANG_POS.getMsgPath(),((topicName,m) -> {
    IMUAngularPositionMessage mes=((IMUAngularPositionMessage)m);
    double[][] xVar={{1},{0},{0}};
    double[][] yVar={{0},{1},{0}};
    Matrix xMat=new Matrix(xVar);
    Matrix yMat=new Matrix(yVar);
    Matrix rot=new Matrix(mes.getRot());
    double x=rot.times(xMat).get(0,0);
    double y=rot.times(yMat).get(0,0);
    double th=-(Math.toDegrees(Math.atan2(y,x)) - 90);
    double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
    double[][] meassurement={{0},{0},{0},{0},{th},{0},{0}};
    double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  }
));
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      long currentTime=new Date().getTime();
      long dt=currentTime - lastEncoderReadingTime;
      if (dt > 1) {
        double bodySpeed=deltaDistance / (dt / 1000.0);
        lastEncoderReadingTime=currentTime;
        lastEncoderReading=currentEncoderMeasurement;
        double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
        double[][] meassurement={{0},{0},{bodySpeed},{0},{0},{0},{0}};
        double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
        updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,1}};
      double[][] meassurement={{0},{0},{0},{0},{0},{0},{steerM.getAngle()}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  resume();
}","public KfLocalizer(int period){
  super(new BuggyBaseNode(NodeChannel.POSE),period,""String_Node_Str"");
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  wheelBase=1.13;
  double[][] startCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  covariance=new Matrix(startCovariance);
  LocTuple startLatLng=new LocTuple(40.4416651,-79.9437577);
  UTMTuple startUTM=LocalizerUtil.Deg2UTM(startLatLng);
  lastGPS=startUTM;
  lastLastGPS=startUTM;
  lastEncoderReadingTime=new Date().getTime();
  mostRecentUpdateTime=new Date();
  double[][] start={{startUTM.Easting},{startUTM.Northing},{0},{0},{-110},{0},{0}};
  state=new Matrix(start);
  double[][] predictCovarianceArray={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  predictCovariance=new Matrix(predictCovarianceArray);
  new Subscriber(""String_Node_Str"",NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      LocTuple gpsLatLng=new LocTuple(newGPSData.getLatitude(),newGPSData.getLongitude());
      UTMTuple gpsUTM=LocalizerUtil.Deg2UTM(gpsLatLng);
      double dx=gpsUTM.Easting - lastGPS.Easting;
      double dy=gpsUTM.Northing - lastGPS.Northing;
      double th=Math.toDegrees(Math.atan2(dy,dx));
      lastLastGPS=lastGPS;
      lastGPS=gpsUTM;
      System.out.println(th);
      double[][] observationModel={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
      if (Math.sqrt(dx * dx + dy * dy) < .5) {
        observationModel[4][4]=0;
      }
      double[][] meassurement={{gpsUTM.Easting},{gpsUTM.Northing},{0},{0},{th},{0},{0}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.IMU_ANG_POS.getMsgPath(),((topicName,m) -> {
    IMUAngularPositionMessage mes=((IMUAngularPositionMessage)m);
    double[][] xVar={{1},{0},{0}};
    double[][] yVar={{0},{1},{0}};
    Matrix xMat=new Matrix(xVar);
    Matrix yMat=new Matrix(yVar);
    Matrix rot=new Matrix(mes.getRot());
    double x=rot.times(xMat).get(0,0);
    double y=rot.times(yMat).get(0,0);
    double th=-(Math.toDegrees(Math.atan2(y,x)) - 90);
    double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
    double[][] meassurement={{0},{0},{0},{0},{th},{0},{0}};
    double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
  }
));
  new Subscriber(""String_Node_Str"",NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement measurement=(EncoderMeasurement)m;
      double currentEncoderMeasurement=measurement.getDistance();
      double deltaDistance=currentEncoderMeasurement - lastEncoderReading;
      long currentTime=new Date().getTime();
      long dt=currentTime - lastEncoderReadingTime;
      if (dt > 1) {
        double bodySpeed=deltaDistance / (dt / 1000.0);
        lastEncoderReadingTime=currentTime;
        lastEncoderReading=currentEncoderMeasurement;
        double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
        double[][] meassurement={{0},{0},{bodySpeed},{0},{0},{0},{0}};
        double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
        updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
      }
    }
  }
);
  new Subscriber(""String_Node_Str"",NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public synchronized void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      double[][] observationModel={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,1}};
      double[][] meassurement={{0},{0},{0},{0},{0},{0},{steerM.getAngle()}};
      double[][] updateCovariance={{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}};
      updateStep(new Matrix(observationModel),new Matrix(meassurement),new Matrix(updateCovariance));
    }
  }
);
  resume();
}"
42671,"private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}","private synchronized void updateStep(Matrix observationMatrix,Matrix measurement,Matrix updateCovariance){
  predictStep();
  Matrix inovation=measurement.minus(observationMatrix.times(state));
  if (inovation.get(6,0) > 180) {
    inovation.set(6,0,360 - inovation.get(6,0));
  }
  System.out.println(""String_Node_Str"");
  System.out.println(inovation);
  Matrix innovationCovariance=observationMatrix.times(covariance).times(observationMatrix.transpose()).plus(updateCovariance);
  Matrix kalmanGain=covariance.times(observationMatrix.transpose()).times(innovationCovariance.inverse());
  state=state.plus(kalmanGain.times(inovation));
  covariance=(Matrix.identity(covariance.getRowDimension(),covariance.getColumnDimension()).minus(kalmanGain.times(observationMatrix)));
}"
42672,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=SimRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorDataCollection.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
42673,"@Override protected void paintComponent(Graphics f){
  super.paintComponent(f);
  int brakeX=50;
  int brakeY=0;
  String status=""String_Node_Str"";
  int battLevelBoxLeft=brakeX + getHeight() / 2;
  if (brakesDown) {
    brakeY=getHeight() - getHeight() / 3;
    status=""String_Node_Str"";
  }
  Graphics2D g=(Graphics2D)f;
  g.setColor(Color.RED);
  g.fillOval(brakeX,brakeY,getHeight() / 3,getHeight() / 3);
  g.setColor(Color.GREEN);
  g.fillRect(brakeX + getHeight() / 3 + 10,0,getHeight() / 3,getHeight());
  g.setColor(Color.BLACK);
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,30));
  g.drawString(""String_Node_Str"" + batteryLevel,battLevelBoxLeft,getHeight() / 2);
  g.drawString(""String_Node_Str"" + status,0,getHeight() / 2);
  g.drawString(""String_Node_Str"" + fphash,battLevelBoxLeft,30);
}","@Override protected void paintComponent(Graphics f){
  super.paintComponent(f);
  int brakeX=50;
  int brakeY=0;
  String status=""String_Node_Str"";
  int battLevelBoxLeft=brakeX + getHeight();
  if (brakesDown) {
    brakeY=getHeight() - getHeight() / 3;
    status=""String_Node_Str"";
  }
  Graphics2D g=(Graphics2D)f;
  g.setColor(Color.RED);
  g.fillOval(brakeX,brakeY,getHeight() / 3,getHeight() / 3);
  g.setColor(Color.GREEN);
  g.fillRect(battLevelBoxLeft,0,getHeight() / 3,getHeight());
  g.setColor(Color.BLACK);
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,30));
  g.drawString(""String_Node_Str"" + batteryLevel,battLevelBoxLeft,getHeight() / 2);
  g.drawString(""String_Node_Str"" + status,0,getHeight() / 2);
  g.drawString(""String_Node_Str"" + fphash,battLevelBoxLeft,30);
}"
42674,"/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  final double latErrorFinal=2 / 111131.745;
  final double lonErrorFinal=2 / 78846.81;
  Map m;
  try {
    RobobuggyConfigFile.loadConfigFile();
    JFrame f=new JFrame(""String_Node_Str"");
    f.setBounds(0,0,500,500);
    m=new Map();
    m.setBounds(0,0,500,500);
    m.setVisible(true);
    f.add(m);
    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    f.setVisible(true);
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    for (int i=0; i < wayPoints.size(); i++) {
      m.addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),wayPoints.get(i).getLongitude()));
      m.repaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(wayPoints);
    for (int i=1; i < wayPoints.size(); i++) {
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          double dlat=wayPoints.get(i).getLatitude() - wayPoints.get(i - 1).getLatitude();
          double dlon=wayPoints.get(i).getLongitude() - wayPoints.get(i - 1).getLongitude();
          currentHeading=Math.toDegrees(Math.atan2(dlat,dlon));
          m.addPointsToMapTree(Color.RED,new LocTuple(lat,lon));
          m.addLineToMap(new LocTuple(lat,lon),angle,Color.RED,false);
          m.addLineToMap(new LocTuple(wayPoints.get(i).getLatitude(),wayPoints.get(i).getLongitude()),currentHeading,Color.YELLOW,false);
          m.repaint();
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  final double latErrorFinal=2 / 111131.745;
  final double lonErrorFinal=2 / 78846.81;
  Map m;
  try {
    RobobuggyConfigFile.loadConfigFile();
    JFrame f=new JFrame(""String_Node_Str"");
    f.setBounds(0,0,500,500);
    m=new Map();
    m.setBounds(0,0,500,500);
    m.setVisible(true);
    f.add(m);
    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    f.setVisible(true);
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    for (int i=0; i < wayPoints.size(); i++) {
      m.addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),wayPoints.get(i).getLongitude()));
      m.repaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(wayPoints);
    for (int i=1; i < wayPoints.size(); i++) {
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          m.addPointsToMapTree(Color.RED,new LocTuple(lat,lon));
          m.addLineToMap(new LocTuple(lat,lon),angle,Color.RED,false);
          m.addLineToMap(new LocTuple(wayPoints.get(i).getLatitude(),wayPoints.get(i).getLongitude()),currentHeading,Color.YELLOW,false);
          m.repaint();
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
42675,"/** 
 * @param originPoint the origin point of the ray
 * @param angle the heading of the ray
 * @param lineColor the color of the line
 * @param clearPrevLine update the line or add a new one
 */
public void addLineToMap(LocTuple originPoint,double angle,Color lineColor,boolean clearPrevLine){
  if (clearPrevLine) {
    mapTree.getViewer().getMapPolygonList().clear();
  }
  double scalingFactor=0.0005;
  double dx=Math.cos(angle) * scalingFactor;
  double dy=Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dx,originPoint.getLongitude() + dy);
  addLineToMap(originPoint,endpoint,lineColor);
}","/** 
 * @param originPoint the origin point of the ray
 * @param angle the heading of the ray
 * @param lineColor the color of the line
 * @param clearPrevLine update the line or add a new one
 */
public void addLineToMap(LocTuple originPoint,double angle,Color lineColor,boolean clearPrevLine){
  if (clearPrevLine) {
    mapTree.getViewer().getMapPolygonList().clear();
  }
  double scalingFactor=0.0005;
  double dx=Math.cos(angle) * scalingFactor;
  double dy=Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dy,originPoint.getLongitude() + dx);
  addLineToMap(originPoint,endpoint,lineColor);
}"
42676,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorDataCollection.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=SimRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
42677,"/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  buggyFrameRotZ=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  mostRecentUpdate=new Date();
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        long dt=newGPSData.getTimestamp().getTime() - mostRecentUpdate.getTime();
        if (dt > 0.0) {
          buggyFrameGpsY=newGPSData.getLatitude();
          buggyFrameGpsX=newGPSData.getLongitude();
          publishUpdate();
          mostRecentUpdate=newGPSData.getTimestamp();
        }
      }
    }
  }
);
}","/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  buggyFrameRotZ=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  mostRecentUpdate=new Date();
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        long dt=newGPSData.getTimestamp().getTime() - mostRecentUpdate.getTime();
        if (dt > 0.0) {
          buggyFrameGpsY=newGPSData.getLatitude();
          buggyFrameGpsX=newGPSData.getLongitude();
          publishUpdate();
          mostRecentUpdate=newGPSData.getTimestamp();
        }
      }
    }
  }
);
  new Subscriber(NodeChannel.IMU_MAGNETIC.getMsgPath(),(topicName,m) -> {
    MagneticMeasurement magM=(MagneticMeasurement)m;
    double currAngle=magM.getRotationZ();
    double offset=0.0;
    buggyFrameRotZ=currAngle - offset;
    publishUpdate();
  }
);
}"
42678,"@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 5;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dLat,dLon) / Math.PI;
  if (desiredHeading < 0) {
    desiredHeading+=360;
  }
  double poseHeading=pose.getHeading();
  if (poseHeading < 0) {
    poseHeading+=360;
  }
  return desiredHeading - poseHeading;
}","@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 5;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().destinationPoint.setLat(targetPoint.getLatitude());
  AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().destinationPoint.setLon(targetPoint.getLongitude());
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dLat,dLon) / Math.PI;
  desiredHeading=Util.normalizeAngleDeg(desiredHeading);
  double poseHeading=Util.normalizeAngleDeg(pose.getHeading());
  return Util.normalizeAngleDeg(desiredHeading - poseHeading);
}"
42679,"private SimRobot(){
  super();
  nodeList.add(new HighTrustGPSLocalizer());
  nodeList.add(new SimulatedImuNode(100));
  nodeList.add(new SimulatedGPSNode(500));
  nodeList.add(new SimulatedRBSMNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  SimulatedBuggy simBuggy=SimulatedBuggy.getInstance();
  simBuggy.setY(LocalizerUtil.convertLatToMeters(40.4404511));
  simBuggy.setX(LocalizerUtil.convertLonToMeters(-79.9443657));
  simBuggy.setDx(.1);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new VelocityWindow(),""String_Node_Str"");
  tabs.addTab(new PoseGraphsPanel(),""String_Node_Str"");
  tabs.addTab(new ImuPanel(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.addTab(new SimulationPanel(),""String_Node_Str"");
  tabs.addTab(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private SimRobot(){
  super();
  nodeList.add(new HighTrustGPSLocalizer());
  nodeList.add(new SimulatedImuNode(100));
  nodeList.add(new SimulatedGPSNode(500));
  nodeList.add(new SimulatedRBSMNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  SimulatedBuggy simBuggy=SimulatedBuggy.getInstance();
  simBuggy.setY(LocalizerUtil.convertLatToMeters(40.438649));
  simBuggy.setX(LocalizerUtil.convertLonToMeters(-79.945233));
  simBuggy.setDx(.1);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new PoseGraphsPanel(),""String_Node_Str"");
  tabs.addTab(new ImuPanel(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.addTab(new SimulationPanel(),""String_Node_Str"");
  tabs.addTab(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42680,"@Override public void actionPerformed(String topicName,Message m){
  GPSPoseMessage curpose=(GPSPoseMessage)m;
  map.addLineToMap(new LocTuple(curpose.getLatitude(),curpose.getLongitude()),curpose.getHeading(),Color.CYAN,true);
}","@Override public void actionPerformed(String topicName,Message m){
  GPSPoseMessage curpose=(GPSPoseMessage)m;
  map.addLineToMap(new LocTuple(curpose.getLatitude(),curpose.getLongitude()),Math.toRadians(curpose.getHeading()),Color.CYAN,true);
}"
42681,"/** 
 * Construct a new   {@link GpsPanel}
 */
public GpsPanel(){
  map=new Map();
  map.setBounds(0,0,getWidth(),getHeight());
  directionLine=new MapPolygonImpl(new Coordinate(0,0),new Coordinate(0,0),new Coordinate(0,1));
  gpsSub=new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      double latitude=((GpsMeasurement)m).getLatitude();
      double longitude=((GpsMeasurement)m).getLongitude();
      map.addPointsToMapTree(Color.BLUE,new LocTuple(latitude,longitude));
      map.updateArrow();
      map.repaint();
      GpsPanel.this.repaint();
    }
  }
);
  new Subscriber(NodeChannel.POSE.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GPSPoseMessage curpose=(GPSPoseMessage)m;
      map.addLineToMap(new LocTuple(curpose.getLatitude(),curpose.getLongitude()),curpose.getHeading(),Color.CYAN,true);
    }
  }
);
  this.add(map);
  map.repaint();
}","/** 
 * Construct a new   {@link GpsPanel}
 */
public GpsPanel(){
  map=new Map();
  map.setBounds(0,0,getWidth(),getHeight());
  destinationPoint=new MapMarkerDot(0.0,0.0);
  map.mapTree.getViewer().addMapMarker(destinationPoint);
  directionLine=new MapPolygonImpl(new Coordinate(0,0),new Coordinate(0,0),new Coordinate(0,1));
  gpsSub=new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      double latitude=((GpsMeasurement)m).getLatitude();
      double longitude=((GpsMeasurement)m).getLongitude();
      map.addPointsToMapTree(Color.BLUE,new LocTuple(latitude,longitude));
      map.updateArrow();
      map.repaint();
      GpsPanel.this.repaint();
    }
  }
);
  new Subscriber(NodeChannel.POSE.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GPSPoseMessage curpose=(GPSPoseMessage)m;
      map.addLineToMap(new LocTuple(curpose.getLatitude(),curpose.getLongitude()),Math.toRadians(curpose.getHeading()),Color.CYAN,true);
    }
  }
);
  this.add(map);
  map.repaint();
}"
42682,"/** 
 * @param originPoint the origin point of the ray
 * @param angle the heading of the ray
 * @param lineColor the color of the line
 * @param clearPrevLine update the line or add a new one
 */
public void addLineToMap(LocTuple originPoint,double angle,Color lineColor,boolean clearPrevLine){
  if (clearPrevLine) {
    mapTree.getViewer().getMapPolygonList().clear();
  }
  double scalingFactor=0.0005;
  double dx=Math.cos(angle) * scalingFactor;
  double dy=Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dy,originPoint.getLongitude() + dx);
  addLineToMap(originPoint,endpoint,lineColor);
}","/** 
 * @param originPoint the origin point of the ray
 * @param angle the heading of the ray in radians
 * @param lineColor the color of the line
 * @param clearPrevLine update the line or add a new one
 */
public void addLineToMap(LocTuple originPoint,double angle,Color lineColor,boolean clearPrevLine){
  if (clearPrevLine) {
    mapTree.getViewer().getMapPolygonList().clear();
  }
  double scalingFactor=0.0005;
  double dx=Math.cos(angle) * scalingFactor;
  double dy=Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dy,originPoint.getLongitude() + dx);
  addLineToMap(originPoint,endpoint,lineColor);
}"
42683,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=TransistorAuton.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException|SecurityException|IllegalAccessException|IllegalArgumentException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot=SimRobot.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  Gui.getInstance();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  robot.startNodes();
  try {
    new JettyServer();
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
42684,"@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 5;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  MapMarkerDot destPoint=new MapMarkerDot(targetPoint.getLatitude(),targetPoint.getLongitude());
  AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().setDestinationPoint(destPoint);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
  desiredHeading=Util.normalizeAngleDeg(desiredHeading);
  double poseHeading=Util.normalizeAngleDeg(pose.getHeading());
  return Util.normalizeAngleDeg(desiredHeading - poseHeading);
}","@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 2;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  MapMarkerDot destPoint=new MapMarkerDot(targetPoint.getLatitude(),targetPoint.getLongitude());
  AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().setDestinationPoint(destPoint);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=Math.toDegrees(Math.atan2(LocalizerUtil.convertLatToMeters(dLat),LocalizerUtil.convertLonToMeters(dLon)));
  desiredHeading=Util.normalizeAngleDeg(desiredHeading);
  double poseHeading=Util.normalizeAngleDeg(pose.getHeading());
  return Util.normalizeAngleDeg(desiredHeading - poseHeading);
}"
42685,"private SimRobot(){
  super();
  nodeList.add(new HighTrustGPSLocalizer());
  nodeList.add(new SimulatedImuNode(100));
  nodeList.add(new SimulatedGPSNode(500));
  nodeList.add(new SimulatedRBSMNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  SimulatedBuggy simBuggy=SimulatedBuggy.getInstance();
  simBuggy.setY(LocalizerUtil.convertLatToMeters(40.441705));
  simBuggy.setX(LocalizerUtil.convertLonToMeters(-79.941585));
  simBuggy.setTh(-100);
  simBuggy.setDx(.1);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new PoseGraphsPanel(),""String_Node_Str"");
  tabs.addTab(new ImuPanel(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.addTab(new SimulationPanel(),""String_Node_Str"");
  tabs.addTab(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}","private SimRobot(){
  super();
  nodeList.add(new HighTrustGPSLocalizer());
  nodeList.add(new SimulatedImuNode(100));
  nodeList.add(new SimulatedGPSNode(500));
  nodeList.add(new SimulatedRBSMNode());
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromWaypointList(RobobuggyConfigFile.getWaypointSourceLogFile());
    nodeList.add(new WayPointFollowerPlanner(wayPoints));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  SimulatedBuggy simBuggy=SimulatedBuggy.getInstance();
  simBuggy.setY(LocalizerUtil.convertLatToMeters(40.441705));
  simBuggy.setX(LocalizerUtil.convertLonToMeters(-79.941585));
  simBuggy.setTh(-110);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  simBuggy.setDx(.5);
  RobobuggyJFrame mainWindow=new RobobuggyJFrame(""String_Node_Str"",1.0,1.0);
  Gui.getInstance().addWindow(mainWindow);
  RobobuggyGUITabs tabs=new RobobuggyGUITabs();
  mainWindow.addComponent(tabs,0.0,0.0,1.0,1.0);
  tabs.addTab(new MainGuiWindow(),""String_Node_Str"");
  tabs.addTab(new PoseGraphsPanel(),""String_Node_Str"");
  tabs.addTab(new ImuPanel(),""String_Node_Str"");
  tabs.addTab(new AutonomousPanel(),""String_Node_Str"");
  tabs.addTab(new SimulationPanel(),""String_Node_Str"");
  tabs.addTab(new PathPanel(),""String_Node_Str"");
  tabs.addTab(new ConfigurationPanel(),""String_Node_Str"");
}"
42686,"/** 
 * @param destinationPoint the destinationPoint to set
 */
public synchronized void setDestinationPoint(MapMarkerDot destinationPoint){
  this.destinationPoint=destinationPoint;
}","/** 
 * @param destinationPoint the destinationPoint to set
 */
public synchronized void setDestinationPoint(MapMarkerDot destinationPoint){
  this.destinationPoint.setLat(destinationPoint.getLat());
  this.destinationPoint.setLon(destinationPoint.getLon());
}"
42687,"@Override public void mouseDragged(MouseEvent e){
  int zoomLevel=getMapTree().getViewer().getZoom();
  mapViewerLat-=((mapDragY - e.getY()) * 0.001) / (zoomLevel * 1000);
  mapViewerLon-=((e.getX() - mapDragX) * 0.001) / (zoomLevel * 1000);
  getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),zoomLevel);
}","@Override public void mouseDragged(MouseEvent e){
  zoomLevel=getMapTree().getViewer().getZoom();
  mapViewerLat-=((mapDragY - e.getY()) * 0.001) / (zoomLevel * 1000);
  mapViewerLon-=((e.getX() - mapDragX) * 0.001) / (zoomLevel * 1000);
  getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),zoomLevel);
}"
42688,"private void initMapTree(){
  setMapTree(new JMapViewerTree(""String_Node_Str""));
  getMapTree().getViewer().setTileSource(new BingAerialTileSource());
  getMapTree().setSize(getWidth(),getHeight());
  getMapTree().getViewer().setSize(getWidth(),getHeight());
  getMapTree().getViewer().setTileLoader(new OsmTileLoader(getMapTree().getViewer()));
  getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),17);
  getMapTree().getViewer().addMouseListener(new MouseListener(){
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      mapDragX=e.getX();
      mapDragY=e.getY();
    }
    @Override public void mouseExited(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
  }
);
  getMapTree().getViewer().addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseMoved(    MouseEvent e){
    }
    @Override public void mouseDragged(    MouseEvent e){
      int zoomLevel=getMapTree().getViewer().getZoom();
      mapViewerLat-=((mapDragY - e.getY()) * 0.001) / (zoomLevel * 1000);
      mapViewerLon-=((e.getX() - mapDragX) * 0.001) / (zoomLevel * 1000);
      getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),zoomLevel);
    }
  }
);
}","private void initMapTree(){
  setMapTree(new JMapViewerTree(""String_Node_Str""));
  getMapTree().getViewer().setTileSource(new BingAerialTileSource());
  getMapTree().setSize(getWidth(),getHeight());
  getMapTree().getViewer().setSize(getWidth(),getHeight());
  getMapTree().getViewer().setTileLoader(new OsmTileLoader(getMapTree().getViewer()));
  getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),zoomLevel);
  getMapTree().getViewer().addMouseListener(new MouseListener(){
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      mapDragX=e.getX();
      mapDragY=e.getY();
    }
    @Override public void mouseExited(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
  }
);
  getMapTree().getViewer().addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseMoved(    MouseEvent e){
    }
    @Override public void mouseDragged(    MouseEvent e){
      zoomLevel=getMapTree().getViewer().getZoom();
      mapViewerLat-=((mapDragY - e.getY()) * 0.001) / (zoomLevel * 1000);
      mapViewerLon-=((e.getX() - mapDragX) * 0.001) / (zoomLevel * 1000);
      getMapTree().getViewer().setDisplayPosition(new Coordinate(mapViewerLat,mapViewerLon),zoomLevel);
    }
  }
);
}"
42689,"private void addCacheToTree(){
  try {
    TileCache courseCache=new MemoryTileCache();
    File mapCacheDir=new File(mapCacheFolderDiskPath);
    if (!mapCacheDir.isDirectory() || !mapCacheDir.exists()) {
      throw new IOException(""String_Node_Str"");
    }
    FilenameFilter filter=(dir,name) -> {
      if (name.contains(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
;
    String[] cachedImages=mapCacheDir.list(filter);
    if (cachedImages == null) {
      return;
    }
    for (    String imageName : cachedImages) {
      BufferedImage tileImageSource=ImageIO.read(new File(mapCacheDir.getAbsolutePath() + ""String_Node_Str"" + imageName));
      String[] tileCoords=imageName.substring(0,imageName.indexOf(""String_Node_Str"")).split(""String_Node_Str"");
      int xCoord=Integer.parseInt(tileCoords[0]);
      int yCoord=Integer.parseInt(tileCoords[1]);
      int zoomLevel=Integer.parseInt(tileCoords[2]);
      Tile cacheInsert=new Tile(getMapTree().getViewer().getTileController().getTileSource(),xCoord,yCoord,zoomLevel,tileImageSource);
      cacheInsert.setLoaded(true);
      courseCache.addTile(cacheInsert);
    }
    getMapTree().getViewer().getTileController().setTileCache(courseCache);
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"" + e.getMessage(),RobobuggyMessageLevel.EXCEPTION);
  }
}","private void addCacheToTree(){
  try {
    TileCache courseCache=new MemoryTileCache();
    File mapCacheDir=new File(mapCacheFolderDiskPath);
    if (!mapCacheDir.isDirectory() || !mapCacheDir.exists()) {
      throw new IOException(""String_Node_Str"");
    }
    FilenameFilter filter=(dir,name) -> {
      if (name.contains(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
;
    String[] cachedImages=mapCacheDir.list(filter);
    if (cachedImages == null) {
      return;
    }
    for (    String imageName : cachedImages) {
      BufferedImage tileImageSource=ImageIO.read(new File(mapCacheDir.getAbsolutePath() + ""String_Node_Str"" + imageName));
      String[] tileCoords=imageName.substring(0,imageName.indexOf(""String_Node_Str"")).split(""String_Node_Str"");
      int xCoord=Integer.parseInt(tileCoords[0]);
      int yCoord=Integer.parseInt(tileCoords[1]);
      zoomLevel=Integer.parseInt(tileCoords[2]);
      Tile cacheInsert=new Tile(getMapTree().getViewer().getTileController().getTileSource(),xCoord,yCoord,zoomLevel,tileImageSource);
      cacheInsert.setLoaded(true);
      courseCache.addTile(cacheInsert);
    }
    getMapTree().getViewer().getTileController().setTileCache(courseCache);
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"" + e.getMessage(),RobobuggyMessageLevel.EXCEPTION);
  }
}"
42690,"/** 
 * initializes a new Map with cache loaded
 */
public Map(){
  initMapTree();
  addCacheToTree();
  this.add(getMapTree());
}","/** 
 * initializes a new Map with cache loaded
 */
public Map(){
  initMapTree();
  addCacheToTree();
  this.add(getMapTree());
  new Subscriber(NodeChannel.POSE.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GPSPoseMessage gpsM=(GPSPoseMessage)m;
      getMapTree().getViewer().setDisplayPosition(new Coordinate(gpsM.getLatitude(),gpsM.getLongitude()),zoomLevel);
    }
  }
);
}"
42691,"/** 
 * evaluates to the inverse of the so2 pose (the position change needed to get to zero) 
 * @return an So2Pose object that is the inverse of the current object
 */
public So2Pose inverse(){
  return new So2Pose(-1 * location.getX(),-1 * location.getY(),-1 * orientation);
}","/** 
 * evaluates to the inverse of the so2 pose (the position change needed to get to zero) 
 * @return an So2Pose object that is the inverse of the current object
 */
public So2Pose inverse(){
  double[][] m={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  Matrix M=new Matrix(m);
  Matrix M_inv=M.inverse();
  double th=Math.atan2(M_inv.get(1,0),M_inv.get(0,0));
  return new So2Pose(M_inv.get(0,2),M_inv.get(1,2),th);
}"
42692,"@Test public void test_2(){
  So2Pose A=new So2Pose(0.0,1.0,0.0);
  So2Pose B=new So2Pose(0.0,2.0,0.0);
  So2Pose C=A.mult(B);
  if (C.getY() != 3.0) {
    fail(""String_Node_Str"");
  }
  So2Pose D=B.mult(A);
  if (D.getY() != 3.0) {
    fail(""String_Node_Str"");
  }
  So2Pose E=new So2Pose(1.2,2.4,3.2);
  So2Pose F=new So2Pose(3.4,5.6,18);
  So2Pose G=E.mult(F);
  So2Pose H=G.mult(F.inverse());
  System.out.println(""String_Node_Str"" + E);
  System.out.println(""String_Node_Str"" + H);
  if (E.getX() != H.getX() || E.getY() != H.getY() || E.getOrientation() != H.getOrientation()) {
    fail(""String_Node_Str"");
  }
}","@Test public void test_2(){
  So2Pose A=new So2Pose(0.0,1.0,0.0);
  So2Pose B=new So2Pose(0.0,2.0,0.0);
  So2Pose C=A.mult(B);
  if (C.getY() != 3.0) {
    fail(""String_Node_Str"");
  }
  So2Pose D=B.mult(A);
  if (D.getY() != 3.0) {
    fail(""String_Node_Str"");
  }
  So2Pose E=new So2Pose(1.2,2.4,3.2);
  So2Pose F=new So2Pose(3.4,5.6,18);
  So2Pose G=E.mult(F);
  So2Pose H=G.mult(F.inverse());
}"
42693,"@Test public void test_inverse(){
  So2Pose A=new So2Pose(1.0,2.0,3.0);
  So2Pose B=A.inverse();
}","@Test public void test_inverse(){
  So2Pose A=new So2Pose(1.0,2.0,3.0);
  So2Pose B=A.inverse();
  So2Pose C=B.mult(A);
  if (!C.equals(So2Pose.Identity())) {
    fail(""String_Node_Str"");
  }
  So2Pose D=A.mult(B);
  if (!D.equals(So2Pose.Identity())) {
    fail(""String_Node_Str"");
  }
}"
42694,"/** 
 * evaluates to the inverse of the so2 pose (the position change needed to get to zero) 
 * @return an So2Pose object that is the inverse of the current object
 */
public So2Pose inverse(){
  double[][] m={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  Matrix M=new Matrix(m);
  Matrix M_inv=M.inverse();
  double th=Math.atan2(M_inv.get(1,0),M_inv.get(0,0));
  return new So2Pose(M_inv.get(0,2),M_inv.get(1,2),th);
}","/** 
 * evaluates to the inverse of the so2 pose (the position change needed to get to zero) 
 * @return an So2Pose object that is the inverse of the current object
 */
public So2Pose inverse(){
  double[][] mArray={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  Matrix mMatrix=new Matrix(mArray);
  Matrix mMatrixInv=mMatrix.inverse();
  double th=Util.normilizeAngleRad(Math.atan2(mMatrixInv.get(1,0),mMatrixInv.get(0,0)));
  return new So2Pose(mMatrixInv.get(0,2),mMatrixInv.get(1,2),th);
}"
42695,"/** 
 * @param x x coord of the point
 * @param y y coord of the point
 * @param newOrientation the new orientation
 */
public So2Pose(double x,double y,double newOrientation){
  location=new Point(x,y);
  orientation=newOrientation;
}","/** 
 * @param x x cord of the point
 * @param y y cord of the point
 * @param newOrientation the new orientation
 */
public So2Pose(double x,double y,double newOrientation){
  location=new Point(x,y);
  orientation=Util.normilizeAngleRad(newOrientation);
}"
42696,"/** 
 * @param postPose the pose that is being applied to the right of the expresion
 * @return the new So2Pose TODO
 */
public So2Pose mult(So2Pose postPose){
  double[][] aM={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  double[][] bM={{Math.cos(postPose.orientation),-Math.sin(postPose.orientation),postPose.getX()},{Math.sin(postPose.orientation),Math.cos(postPose.orientation),postPose.getY()},{0,0,1}};
  Matrix a=new Matrix(aM);
  Matrix b=new Matrix(bM);
  Matrix c=a.times(b);
  return new So2Pose(c.get(0,2),c.get(1,2),Math.atan2(c.get(1,0),c.get(0,0)));
}","/** 
 * @param postPose the pose that is being applied to the right of the expression
 * @return the new So2Pose TODO
 */
public So2Pose mult(So2Pose postPose){
  double[][] aM={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  double[][] bM={{Math.cos(postPose.orientation),-Math.sin(postPose.orientation),postPose.getX()},{Math.sin(postPose.orientation),Math.cos(postPose.orientation),postPose.getY()},{0,0,1}};
  Matrix a=new Matrix(aM);
  Matrix b=new Matrix(bM);
  Matrix c=a.times(b);
  double th=Util.normilizeAngleRad(Math.atan2(c.get(1,0),c.get(0,0)));
  return new So2Pose(c.get(0,2),c.get(1,2),th);
}"
42697,"/** 
 * evaluates to a string encoding infromation about this class
 */
public String toString(){
  return ""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getOrientation()+ ""String_Node_Str"";
}","/** 
 * evaluates to a string encoding information about this class
 * @return a string encoding what this objects information 
 */
public String toString(){
  return ""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getOrientation()+ ""String_Node_Str"";
}"
42698,"/** 
 * updates the values of the pose
 * @param newPoint the new se2 point to be set
 * @param newOrientation the new orientation
 */
public void updatePoint(Point newPoint,double newOrientation){
  this.orientation=newOrientation;
  this.location=newPoint;
}","/** 
 * updates the values of the pose
 * @param newPoint the new se2 point to be set
 * @param newOrientation the new orientation
 */
public void updatePoint(Point newPoint,double newOrientation){
  this.orientation=Util.normilizeAngleRad(newOrientation);
  this.location=newPoint;
}"
42699,"public String getMessage(){
  return message;
}","/** 
 * evaluates to a string encoding of the message
 * @return string encoding of the message
 */
public String getMessage(){
  return message;
}"
42700,"public HillCrestIMUMessage(String Message){
  message=Message;
}","/** 
 * constructor for the datatype 
 * @param message message to encode 
 */
public HillCrestIMUMessage(String message){
  this.message=message;
}"
42701,"/** 
 * Constructs a new   {@link MagMeasurement} at time now
 * @param rotationX rotationx value
 * @param rotationy rotationy value
 * @param rotationz rotationz value
 */
public MagneticMeasurement(double rotationX,double rotationY,double rotationZ){
  this.timestamp=new Date().getTime();
  this.rotationX=rotationX;
  this.rotationY=rotationY;
  this.rotationZ=rotationZ;
}","/** 
 * Constructs a new   {@link MagMeasurement} at time now
 * @param rotationX rotationX value
 * @param rotationY rotationY value
 * @param rotationZ rotationZ value
 */
public MagneticMeasurement(double rotationX,double rotationY,double rotationZ){
  this.timestamp=new Date().getTime();
  this.rotationX=rotationX;
  this.rotationY=rotationY;
  this.rotationZ=rotationZ;
}"
42702,"/** 
 * Creates a new decorator for the given   {@link Node}
 * @param node {@link Node} to decorate
 */
public BuggyDecoratorNode(BuggyNode node,String name){
  this.node=node;
}","/** 
 * Creates a new decorator for the given   {@link Node}
 * @param node {@link Node} to decorate
 * @param name the name we want for this node to store so that it can be refrenced later 
 */
public BuggyDecoratorNode(BuggyNode node,String name){
  this.node=node;
}"
42703,"/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsLon=0.0;
  buggyFrameGpsLat=0.0;
  lastEncoderReading=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  mostRecentUpdate=new Date();
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        long dt=newGPSData.getTimestamp().getTime() - mostRecentUpdate.getTime();
        if (dt > 0.0) {
          double oldGPSX=buggyFrameGpsLon;
          double oldGPSY=buggyFrameGpsLat;
          double dLat=buggyFrameGpsLat - oldGPSY;
          double dLon=buggyFrameGpsLon - oldGPSX;
          double oldRotZ=buggyFrameRotZ;
          publishUpdate();
          mostRecentUpdate=newGPSData.getTimestamp();
        }
      }
    }
  }
);
  new Subscriber(NodeChannel.IMU_MAGNETIC.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      MagneticMeasurement magM=(MagneticMeasurement)m;
      double currAngle=magM.getRotationZ();
      double offset=0.0;
      publishUpdate();
    }
  }
);
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement magM=(EncoderMeasurement)m;
      double dEncoder=magM.getDistance() - lastEncoderReading;
      lastEncoderReading=magM.getDistance();
      buggyFrameGpsLon=buggyFrameGpsLon + dEncoder * Math.cos(buggyFrameRotZ) + dEncoder * Math.sin(buggyFrameRotZ);
      buggyFrameGpsLat=-buggyFrameGpsLat + dEncoder * Math.sin(buggyFrameRotZ) + dEncoder * Math.cos(buggyFrameRotZ);
      publishUpdate();
    }
  }
);
}","/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsLon=0.0;
  buggyFrameGpsLat=0.0;
  lastEncoderReading=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  mostRecentUpdate=new Date();
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
synchronized (this) {
        long dt=newGPSData.getTimestamp().getTime() - mostRecentUpdate.getTime();
        if (dt > 0.0) {
          publishUpdate();
          mostRecentUpdate=newGPSData.getTimestamp();
        }
      }
    }
  }
);
  new Subscriber(NodeChannel.IMU_MAGNETIC.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      MagneticMeasurement magM=(MagneticMeasurement)m;
      double currAngle=magM.getRotationZ();
      double offset=0.0;
      buggyFrameRotZ=currAngle - offset;
      publishUpdate();
    }
  }
);
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement magM=(EncoderMeasurement)m;
      double dEncoder=magM.getDistance() - lastEncoderReading;
      lastEncoderReading=magM.getDistance();
      buggyFrameGpsLon=buggyFrameGpsLon + dEncoder * Math.cos(buggyFrameRotZ) + dEncoder * Math.sin(buggyFrameRotZ);
      buggyFrameGpsLat=-buggyFrameGpsLat + dEncoder * Math.sin(buggyFrameRotZ) + dEncoder * Math.cos(buggyFrameRotZ);
      publishUpdate();
    }
  }
);
}"
42704,"public HillCrestImuNode(){
  super();
  Discovery discover=Discovery.getInstance();
  discover.addListener(this);
}","/** 
 * Constructor for the hillcrest imu
 */
public HillCrestImuNode(){
  super();
  Discovery discover=Discovery.getInstance();
  discover.addListener(this);
}"
42705,"@Override public void freespaceDeviceInserted(Device arg0){
  device_=arg0;
  device_.open(this);
  deviceStats=device_.getStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(deviceStats.toString());
  FreespaceMsgOutDataModeControlV2Request msg=new FreespaceMsgOutDataModeControlV2Request();
  msg.setPacketSelect(8);
  msg.setModeAndStatus(0);
  msg.setFormatSelect(0);
  msg.setFf0(true);
  msg.setFf1(true);
  msg.setFf2(true);
  msg.setFf3(true);
  msg.setFf4(true);
  msg.setFf5(true);
  msg.setFf6(true);
  msg.setFf7(true);
  device_.sendMessageAsync(msg);
  System.out.println(""String_Node_Str"");
}","@Override public void freespaceDeviceInserted(Device arg0){
  thisDevice=arg0;
  thisDevice.open(this);
  deviceStats=thisDevice.getStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(deviceStats.toString());
  FreespaceMsgOutDataModeControlV2Request msg=new FreespaceMsgOutDataModeControlV2Request();
  msg.setPacketSelect(8);
  msg.setModeAndStatus(0);
  msg.setFormatSelect(0);
  msg.setFf0(true);
  msg.setFf1(true);
  msg.setFf2(true);
  msg.setFf3(true);
  msg.setFf4(true);
  msg.setFf5(true);
  msg.setFf6(true);
  msg.setFf7(true);
  thisDevice.sendMessageAsync(msg);
  System.out.println(""String_Node_Str"");
}"
42706,"@Override public void freespaceDeviceRemoved(Device arg0){
  device_=null;
}","@Override public void freespaceDeviceRemoved(Device arg0){
  thisDevice=null;
}"
42707,"/** 
 * constructor for the simulated gps node
 */
public SimulatedGPSNode(int period){
  super(new BuggyBaseNode(NodeChannel.GPS),period,""String_Node_Str"");
  resume();
}","/** 
 * constructor for the simulated gps node
 * @param period the number of milliseconds between gps update messages  
 */
public SimulatedGPSNode(int period){
  super(new BuggyBaseNode(NodeChannel.GPS),period,""String_Node_Str"");
  resume();
}"
42708,"public SimulatedImuNode(int period){
  super(new BuggyBaseNode(NodeChannel.IMU),period,""String_Node_Str"");
  simBuggy=SimulatedBuggy.getInstance();
  resume();
}","/** 
 * Constructor for the simulated imu node
 * @param period how many milliseconds between new simulated imu messages
 */
public SimulatedImuNode(int period){
  super(new BuggyBaseNode(NodeChannel.IMU),period,""String_Node_Str"");
  simBuggy=SimulatedBuggy.getInstance();
  resume();
}"
42709,"@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 5;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dLat,-dLon) / Math.PI;
  return desiredHeading - pose.getHeading();
}","@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10 / 100000.0;
  int targetIndex=closestIndex + 5;
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dLat,-dLon) / Math.PI;
  if (desiredHeading < 0) {
    desiredHeading+=360;
  }
  double poseHeading=pose.getHeading();
  if (poseHeading < 0) {
    poseHeading+=360;
  }
  return desiredHeading - poseHeading;
}"
42710,"/** 
 * @param wayPoints the list of waypoints to follow
 */
public WayPointFollowerPlanner(ArrayList wayPoints){
  super(NodeChannel.PATH_PLANNER);
  this.wayPoints=wayPoints;
  pose=new GPSPoseMessage(new Date(0),0,0,0);
}","/** 
 * @param wayPoints the list of waypoints to follow
 */
public WayPointFollowerPlanner(ArrayList<GpsMeasurement> wayPoints){
  super(NodeChannel.PATH_PLANNER);
  this.wayPoints=wayPoints;
  pose=new GPSPoseMessage(new Date(0),0,0,0);
}"
42711,"/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  final double latErrorFinal=2 / 111131.745;
  final double lonErrorFinal=2 / 78846.81;
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",RobobuggyConfigFile.getWaypointSourceLogFile());
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.RED,new LocTuple(lat,-lon));
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,-lon),angle,Color.RED);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  final double latErrorFinal=2 / 111131.745;
  final double lonErrorFinal=2 / 78846.81;
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",RobobuggyConfigFile.getWaypointSourceLogFile());
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().addPointsToMapTree(Color.RED,new LocTuple(lat,-lon));
          AnalyticsPanel.getInstance().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,-lon),angle,Color.RED);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
42712,"/** 
 * gets the new playback speed from the GUI and puts it into playbackSpeed
 */
public void getNewPlaybackSpeed(){
  playbackSpeed=Gui.getInstance().getMainGuiWindow().getCtrlPanel().getLoggingPanel().getPlaybackSpeed();
}","/** 
 * gets the new playback speed from the GUI and puts it into playbackSpeed
 */
public void getNewPlaybackSpeed(){
  playbackSpeed=RobobuggyConfigFile.getPlayBackSpeed();
}"
42713,"/** 
 * Construct a new   {@link AnalyticsPanel}
 */
public AnalyticsPanel(){
  name=""String_Node_Str"";
  dataPanel=new DataPanel();
  graphPanel=new GraphPanel();
  this.addComponent(dataPanel,0,0,1,.6);
  this.addComponent(graphPanel,0,.6,1,.4);
}","/** 
 * Construct a new   {@link AnalyticsPanel}
 */
private AnalyticsPanel(){
  name=""String_Node_Str"";
  dataPanel=new DataPanel();
  graphPanel=new GraphPanel();
  this.addComponent(dataPanel,0,0,1,.6);
  this.addComponent(graphPanel,0,.6,1,.4);
}"
42714,"public synchronized void deleteWindow(int windowRefrence){
  windowMap.remove(windowRefrence);
}","/** 
 * removes a reference to a particular frame of the window 
 * @param windowRefrence the reference to remove
 * @return 
 */
public synchronized void deleteWindow(int windowRefrence){
  windowMap.remove(windowRefrence);
}"
42715,"public synchronized void getWindow(int windowRefrence){
  windowMap.get(windowRefrence);
}","/** 
 * gets a reference to a particular frame of the window 
 * @param windowRefrence the reference to receive
 * @return the requested frames reference 
 */
public synchronized RobobuggyJFrame getWindow(int windowRefrence){
  return windowMap.get(windowRefrence);
}"
42716,"/** 
 * Construct a new   {@link LoggingPanel} object
 */
public LoggingPanel(){
  name=""String_Node_Str"";
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  encoderResetPub=new Publisher(NodeChannel.ENCODER_RESET.getMsgPath());
  timer=new Timer(10,new TimerHandler());
  timer.setDelay(100);
  timer.setRepeats(true);
  startTime=new Date();
  playBtn=new JButton(""String_Node_Str"");
  playBtn.setFont(new Font(""String_Node_Str"",Font.PLAIN,25));
  playBtn.addActionListener(new PlayButtonHandler());
  playBtn.setEnabled(true);
  playBtn.setBackground(Color.BLUE);
  resetBtn=new JButton(""String_Node_Str"");
  resetBtn.setFont(new Font(""String_Node_Str"",Font.PLAIN,25));
  resetBtn.addActionListener(new ResetEncoderButtonHandler());
  resetBtn.setEnabled(true);
  resetBtn.setBackground(Color.BLUE);
  filenameLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  filenameLabel.setFont(new Font(""String_Node_Str"",Font.PLAIN,15));
  timeLbl=new JFormattedTextField(new SimpleDateFormat(""String_Node_Str""));
  timeLbl.setHorizontalAlignment(SwingConstants.CENTER);
  timeLbl.setFont(new Font(""String_Node_Str"",Font.PLAIN,50));
  timeLbl.setEditable(false);
  timeLbl.setColumns(7);
  timeLbl.setValue(startTime);
  playbackSpeed=new JTextField(""String_Node_Str"");
  playbackSpeed.setHorizontalAlignment(JTextField.CENTER);
  this.addComponent(playBtn,0,0,1.0,.25);
  this.addComponent(resetBtn,0,.25,1.0,0.25);
  this.addComponent(filenameLabel,0,.5,0.5,.25);
  this.addComponent(playbackSpeed,.5,.5,0.5,.25);
  this.addComponent(timeLbl,0,.75,1,.25);
}","/** 
 * Construct a new   {@link LoggingPanel} object
 */
public LoggingPanel(){
  name=""String_Node_Str"";
  loggingButtonPub=new Publisher(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath());
  encoderResetPub=new Publisher(NodeChannel.ENCODER_RESET.getMsgPath());
  timer=new Timer(10,new TimerHandler());
  timer.setDelay(100);
  timer.setRepeats(true);
  startTime=new Date();
  playBtn=new JButton(""String_Node_Str"");
  playBtn.setFont(new Font(""String_Node_Str"",Font.PLAIN,25));
  playBtn.addActionListener(new PlayButtonHandler());
  playBtn.setEnabled(true);
  playBtn.setBackground(Color.BLUE);
  resetBtn=new JButton(""String_Node_Str"");
  resetBtn.setFont(new Font(""String_Node_Str"",Font.PLAIN,25));
  resetBtn.addActionListener(new ResetEncoderButtonHandler());
  resetBtn.setEnabled(true);
  resetBtn.setBackground(Color.BLUE);
  filenameLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  filenameLabel.setFont(new Font(""String_Node_Str"",Font.PLAIN,15));
  timeLbl=new JFormattedTextField(new SimpleDateFormat(""String_Node_Str""));
  timeLbl.setHorizontalAlignment(SwingConstants.CENTER);
  timeLbl.setFont(new Font(""String_Node_Str"",Font.PLAIN,50));
  timeLbl.setEditable(false);
  timeLbl.setColumns(7);
  timeLbl.setValue(startTime);
  playbackSpeed=new JTextField(""String_Node_Str"");
  playbackSpeed.setHorizontalAlignment(JTextField.CENTER);
  this.addComponent(playBtn,0,0,1.0,.25);
  this.addComponent(resetBtn,0,.25,1.0,0.25);
  this.addComponent(filenameLabel,0,.5,0.5,.25);
  this.addComponent(playbackSpeed,.5,.5,0.5,.25);
  this.addComponent(timeLbl,0,.75,1,.25);
  java.util.Timer t=new java.util.Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      updatePlaybackSpeed();
    }
  }
,0,100);
}"
42717,"/** 
 * constructor for the main gui window, sets up what is shown on the window
 */
public MainGuiWindow(){
  analyPane=new AnalyticsPanel();
  ctrlPanel=new ControlPanel();
  addComponent(ctrlPanel,0.0,0.0,.3,1.0);
  addComponent(analyPane,0.3,0.0,.7,1.0);
}","/** 
 * constructor for the main gui window, sets up what is shown on the window
 */
public MainGuiWindow(){
  analyPane=AnalyticsPanel.getInstance();
  ctrlPanel=new ControlPanel();
  addComponent(ctrlPanel,0.0,0.0,.3,1.0);
  addComponent(analyPane,0.3,0.0,.7,1.0);
}"
42718,"/** 
 * A constructor for a gps measurement that is as basic as possible
 * @param latitude latitude measurement
 * @param longitude longitude measurement
 */
public GpsMeasurement(double latitude,double longitude){
  this.timestamp=new Date().getTime();
  this.gpsTimestamp=new Date();
  this.latitude=latitude;
  this.north=true;
  this.longitude=longitude;
  this.west=true;
  this.qualityValue=0;
  this.numSatellites=-1;
  this.horizontalDilutionOfPrecision=0.0;
  this.antennaAltitude=0.0;
}","/** 
 * A constructor for a gps measurement that is as basic as possible
 * @param latitude latitude measurement
 * @param longitude longitude measurement
 */
public GpsMeasurement(double latitude,double longitude){
  this.timestamp=new Date().getTime();
  this.gpsTimestamp=new Date();
  this.latitude=latitude;
  this.north=latitude > 0;
  this.longitude=longitude;
  this.west=longitude < 0;
  this.qualityValue=0;
  this.numSatellites=-1;
  this.horizontalDilutionOfPrecision=0.0;
  this.antennaAltitude=0.0;
}"
42719,"@Override public void actionPerformed(String topicName,Message m){
  GpsMeasurement newGPSData=(GpsMeasurement)m;
  double oldGPSX=buggyFrameGpsX;
  double oldGPSY=buggyFrameGpsY;
  buggyFrameGpsY=newGPSData.getLatitude();
  buggyFrameGpsX=newGPSData.getLongitude();
  double dy=buggyFrameGpsY - oldGPSY;
  double dx=buggyFrameGpsX - oldGPSX;
  buggyFrameRotZ=Math.toDegrees(Math.atan2(dy,dx));
  publishUpdate();
}","@Override public void actionPerformed(String topicName,Message m){
  GpsMeasurement newGPSData=(GpsMeasurement)m;
  double oldGPSX=buggyFrameGpsLon;
  double oldGPSY=buggyFrameGpsLat;
  buggyFrameGpsLat=newGPSData.getLatitude();
  buggyFrameGpsLon=newGPSData.getLongitude();
  double dLat=buggyFrameGpsLat - oldGPSY;
  double dLon=buggyFrameGpsLon - oldGPSX;
  buggyFrameRotZ=Math.toDegrees(Math.atan2(dLat,dLon));
  publishUpdate();
}"
42720,"/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      double oldGPSX=buggyFrameGpsX;
      double oldGPSY=buggyFrameGpsY;
      buggyFrameGpsY=newGPSData.getLatitude();
      buggyFrameGpsX=newGPSData.getLongitude();
      double dy=buggyFrameGpsY - oldGPSY;
      double dx=buggyFrameGpsX - oldGPSX;
      buggyFrameRotZ=Math.toDegrees(Math.atan2(dy,dx));
      publishUpdate();
    }
  }
);
}","/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position)
 */
public HighTrustGPSLocalizer(){
  buggyFrameGpsLon=0.0;
  buggyFrameGpsLat=0.0;
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement newGPSData=(GpsMeasurement)m;
      double oldGPSX=buggyFrameGpsLon;
      double oldGPSY=buggyFrameGpsLat;
      buggyFrameGpsLat=newGPSData.getLatitude();
      buggyFrameGpsLon=newGPSData.getLongitude();
      double dLat=buggyFrameGpsLat - oldGPSY;
      double dLon=buggyFrameGpsLon - oldGPSX;
      buggyFrameRotZ=Math.toDegrees(Math.atan2(dLat,dLon));
      publishUpdate();
    }
  }
);
}"
42721,"private void publishUpdate(){
  posePub.publish(new GPSPoseMessage(new Date(),buggyFrameGpsY,buggyFrameGpsX,buggyFrameRotZ));
}","private void publishUpdate(){
  posePub.publish(new GPSPoseMessage(new Date(),buggyFrameGpsLat,buggyFrameGpsLon,buggyFrameRotZ));
}"
42722,"@Override public boolean shutdown(){
  posePub=null;
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  return true;
}","@Override public boolean shutdown(){
  posePub=null;
  buggyFrameGpsLon=0.0;
  buggyFrameGpsLat=0.0;
  return true;
}"
42723,"@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10;
  int targetIndex=closestIndex;
  while (GPSPoseMessage.getDistance(pose,wayPoints.get(targetIndex).toGpsPoseMessage(0)) < delta) {
    targetIndex=targetIndex + 1;
  }
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dx=targetPoint.getLongitude() - pose.getLongitude();
  double dy=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dy,dx) / Math.PI;
  return desiredHeading - pose.getHeading();
}","@Override public double getCommandedSteeringAngle(){
  int closestIndex=getClosestIndex(wayPoints,pose);
  if (closestIndex == -1) {
    return 17433504;
  }
  double delta=10;
  int targetIndex=closestIndex;
  while (GPSPoseMessage.getDistance(pose,wayPoints.get(targetIndex).toGpsPoseMessage(0)) < delta) {
    targetIndex=targetIndex + 1;
  }
  if (targetIndex >= wayPoints.size()) {
    return 0;
  }
  GpsMeasurement targetPoint=wayPoints.get(targetIndex);
  double dLon=targetPoint.getLongitude() - pose.getLongitude();
  double dLat=targetPoint.getLatitude() - pose.getLatitude();
  double desiredHeading=180 * Math.atan2(dLat,dLon) / Math.PI;
  return desiredHeading - pose.getHeading();
}"
42724,"/** 
 * Constructor for the configuration Panel, this is were all of the gui elements  for the configuration panel are created 
 */
public ConfigurationPanel(){
  addComponent(new JLabel(""String_Node_Str""),0,0,.1,.1);
  JLabel currentConfigFileLabel=new JLabel(RobobuggyConfigFile.getConfigFile());
  addComponent(currentConfigFileLabel,.3,0,.4,.1);
  JButton configFileSelectBtn=new JButton(""String_Node_Str"");
  configFileSelectBtn.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setConfigFile(selectedFile.getAbsolutePath());
        currentConfigFileLabel.setText(RobobuggyConfigFile.getConfigFile());
        RobobuggyMainFile.resetSystem();
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  addComponent(configFileSelectBtn,.1,0,.2,.1);
  JButton saveConfigButton=new JButton(""String_Node_Str"");
  saveConfigButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RobobuggyConfigFile.saveConfigFile();
    }
  }
);
  addComponent(saveConfigButton,.9,0,.1,.1);
  JButton loadConfigButton=new JButton(""String_Node_Str"");
  loadConfigButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RobobuggyConfigFile.loadConfigFile();
    }
  }
);
  addComponent(loadConfigButton,.8,0,.1,.1);
  addComponent(new JLabel(""String_Node_Str""),0,.1,.1,.1);
  JButton wayPointFileSelectBtn=new JButton(""String_Node_Str"");
  addComponent(wayPointFileSelectBtn,.1,.1,.2,.1);
  JLabel currentWayPointLable=new JLabel(RobobuggyConfigFile.getWaypointSourceLogFile());
  addComponent(currentWayPointLable,.3,.1,.4,.1);
  wayPointFileSelectBtn.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setWayPointSourceLogFile(selectedFile.getAbsolutePath());
        currentWayPointLable.setText(RobobuggyConfigFile.getWaypointSourceLogFile());
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.2,.1,.1);
  JButton playBackSlectFileButton=new JButton(""String_Node_Str"");
  addComponent(playBackSlectFileButton,.1,.2,.2,.1);
  JLabel currentPlayBackSourceFileLabel=new JLabel(RobobuggyConfigFile.getPlayBackSourceFile());
  addComponent(currentPlayBackSourceFileLabel,.3,.2,.4,.1);
  playBackSlectFileButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setPlayBackSourceFile(selectedFile.getAbsolutePath());
        currentPlayBackSourceFileLabel.setText(RobobuggyConfigFile.getPlayBackSourceFile());
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  String[] portOptions=getPortOptions();
  addComponent(new JLabel(""String_Node_Str""),0,.4,.1,.05);
  JComboBox imuPortSelector=new JComboBox(portOptions);
  imuPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortImu(),portOptions));
  addComponent(imuPortSelector,.1,.4,.2,.05);
  imuPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=imuPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortImu(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setImuEnabled(false);
      }
 else {
        RobobuggyConfigFile.setImuEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.45,.1,.05);
  JComboBox gpsPortSelector=new JComboBox(portOptions);
  gpsPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortGPS(),portOptions));
  addComponent(gpsPortSelector,.1,.45,.2,.05);
  gpsPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=gpsPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortGps(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setGpsEnabled(false);
      }
 else {
        RobobuggyConfigFile.setGpsEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.5,.1,.05);
  JComboBox rbsmPortSelector=new JComboBox(portOptions);
  rbsmPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortRBSM(),portOptions));
  addComponent(rbsmPortSelector,.1,.5,.2,.05);
  rbsmPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=rbsmPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortRBSM(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setEncoderEnabled(false);
      }
 else {
        RobobuggyConfigFile.setEncoderEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.55,.1,.05);
  JComboBox visionSystemPortSelector=new JComboBox(portOptions);
  visionSystemPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getPortVision(),portOptions));
  addComponent(visionSystemPortSelector,.1,.55,.2,.05);
  visionSystemPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=visionSystemPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setPortVision(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setVisionSystemEnabled(false);
      }
 else {
        RobobuggyConfigFile.setVisionSystemEnabled(true);
      }
    }
  }
);
}","/** 
 * Constructor for the configuration Panel, this is were all of the gui elements  for the configuration panel are created 
 */
public ConfigurationPanel(){
  addComponent(new JLabel(""String_Node_Str""),0,0,.1,.1);
  JLabel currentConfigFileLabel=new JLabel(RobobuggyConfigFile.getConfigFile());
  addComponent(currentConfigFileLabel,.3,0,.4,.1);
  JButton configFileSelectBtn=new JButton(""String_Node_Str"");
  configFileSelectBtn.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setConfigFile(selectedFile.getAbsolutePath());
        currentConfigFileLabel.setText(RobobuggyConfigFile.getConfigFile());
        RobobuggyMainFile.resetSystem();
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  addComponent(configFileSelectBtn,.1,0,.2,.1);
  JButton saveConfigButton=new JButton(""String_Node_Str"");
  saveConfigButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RobobuggyConfigFile.saveConfigFile();
    }
  }
);
  addComponent(saveConfigButton,.9,0,.1,.1);
  JButton loadConfigButton=new JButton(""String_Node_Str"");
  loadConfigButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RobobuggyConfigFile.loadConfigFile();
    }
  }
);
  addComponent(loadConfigButton,.8,0,.1,.1);
  addComponent(new JLabel(""String_Node_Str""),0,.1,.1,.1);
  JButton wayPointFileSelectBtn=new JButton(""String_Node_Str"");
  addComponent(wayPointFileSelectBtn,.1,.1,.2,.1);
  JLabel currentWayPointLable=new JLabel(RobobuggyConfigFile.getWaypointSourceLogFile());
  addComponent(currentWayPointLable,.3,.1,.4,.1);
  wayPointFileSelectBtn.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setWayPointSourceLogFile(selectedFile.getPath());
        currentWayPointLable.setText(RobobuggyConfigFile.getWaypointSourceLogFile());
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.2,.1,.1);
  JButton playBackSlectFileButton=new JButton(""String_Node_Str"");
  addComponent(playBackSlectFileButton,.1,.2,.2,.1);
  JLabel currentPlayBackSourceFileLabel=new JLabel(RobobuggyConfigFile.getPlayBackSourceFile());
  addComponent(currentPlayBackSourceFileLabel,.3,.2,.4,.1);
  playBackSlectFileButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final JFileChooser fc=new JFileChooser();
      fc.setCurrentDirectory(new File(RobobuggyConfigFile.getConfigFile()));
      int returnVal=fc.showOpenDialog(null);
      if (returnVal == fc.APPROVE_OPTION) {
        File selectedFile=fc.getSelectedFile();
        RobobuggyConfigFile.setPlayBackSourceFile(selectedFile.getAbsolutePath());
        currentPlayBackSourceFileLabel.setText(RobobuggyConfigFile.getPlayBackSourceFile());
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
      }
    }
  }
);
  String[] portOptions=getPortOptions();
  addComponent(new JLabel(""String_Node_Str""),0,.4,.1,.05);
  JComboBox imuPortSelector=new JComboBox(portOptions);
  imuPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortImu(),portOptions));
  addComponent(imuPortSelector,.1,.4,.2,.05);
  imuPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=imuPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortImu(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setImuEnabled(false);
      }
 else {
        RobobuggyConfigFile.setImuEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.45,.1,.05);
  JComboBox gpsPortSelector=new JComboBox(portOptions);
  gpsPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortGPS(),portOptions));
  addComponent(gpsPortSelector,.1,.45,.2,.05);
  gpsPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=gpsPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortGps(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setGpsEnabled(false);
      }
 else {
        RobobuggyConfigFile.setGpsEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.5,.1,.05);
  JComboBox rbsmPortSelector=new JComboBox(portOptions);
  rbsmPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getComPortRBSM(),portOptions));
  addComponent(rbsmPortSelector,.1,.5,.2,.05);
  rbsmPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=rbsmPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setComPortRBSM(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setEncoderEnabled(false);
      }
 else {
        RobobuggyConfigFile.setEncoderEnabled(true);
      }
    }
  }
);
  addComponent(new JLabel(""String_Node_Str""),0,.55,.1,.05);
  JComboBox visionSystemPortSelector=new JComboBox(portOptions);
  visionSystemPortSelector.setSelectedIndex(findPortIndex(RobobuggyConfigFile.getPortVision(),portOptions));
  addComponent(visionSystemPortSelector,.1,.55,.2,.05);
  visionSystemPortSelector.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int index=visionSystemPortSelector.getSelectedIndex();
      RobobuggyConfigFile.setPortVision(portOptions[index]);
      if (index == 0) {
        RobobuggyConfigFile.setVisionSystemEnabled(false);
      }
 else {
        RobobuggyConfigFile.setVisionSystemEnabled(true);
      }
    }
  }
);
}"
42725,"public RBSMConfigReader(){
  headers=new JsonObject();
  try {
    Scanner fileIn=new Scanner(new File(RobobuggyConfigFile.RBSM_HEADER_FILE_LOCATION),""String_Node_Str"");
    while (fileIn.hasNextLine()) {
      String line=fileIn.nextLine();
      if (!line.equals(""String_Node_Str"")) {
        String[] lineContents=line.split(""String_Node_Str"");
        String headerName=lineContents[0];
        int headerNumber=Integer.parseInt(lineContents[1]);
        headers.addProperty(headerName,headerNumber);
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","/** 
 * The constructor for the RBSMConfig reader, this file function is where the RBSM header file is read and its data is stored
 */
public RBSMConfigReader(){
  headers=new JsonObject();
  try {
    Scanner fileIn=new Scanner(new File(RobobuggyConfigFile.RBSM_HEADER_FILE_LOCATION),""String_Node_Str"");
    while (fileIn.hasNextLine()) {
      String line=fileIn.nextLine();
      if (!line.equals(""String_Node_Str"")) {
        String[] lineContents=line.split(""String_Node_Str"");
        String headerName=lineContents[0];
        int headerNumber=Integer.parseInt(lineContents[1]);
        headers.addProperty(headerName,headerNumber);
      }
    }
  }
 catch (  FileNotFoundException e) {
    new RobobuggyLogicNotification(""String_Node_Str"" + e.getMessage(),RobobuggyMessageLevel.EXCEPTION);
  }
}"
42726,"public JsonObject getHeaders(){
  return headers;
}","/** 
 * gets the headers json object  
 * @return the json object to lookup header values
 */
public JsonObject getHeaders(){
  return headers;
}"
42727,"/** 
 * Determines if the headerByte is a valid RBSM header
 * @param headerByte header byte
 * @return true iff the headerByte is valid
 */
public static boolean isValidHeader(byte headerByte){
  for (  Map.Entry<String,JsonElement> object : headers.entrySet()) {
    if (object.getValue().getAsByte() == headerByte) {
      return true;
    }
  }
  return false;
}","/** 
 * Determines if the headerByte is a valid RBSM header
 * @param headerByte header byte
 * @return true iff the headerByte is valid
 */
public boolean isValidHeader(byte headerByte){
  for (  Map.Entry<String,JsonElement> object : headers.entrySet()) {
    if (object.getValue().getAsByte() == headerByte) {
      return true;
    }
  }
  return false;
}"
42728,"public static RBSMConfigReader getInstance(){
  if (instance == null) {
    instance=new RBSMConfigReader();
  }
  return instance;
}","/** 
 * evaluates to a reference of the only RBSMConfigReader on the system allows for any object to access header information  
 * @return RBSMConfigReader reference
 */
public static synchronized RBSMConfigReader getInstance(){
  if (instance == null) {
    instance=new RBSMConfigReader();
  }
  return instance;
}"
42729,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  try {
    JettyServer js=new JettyServer();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException e1) {
    e1.printStackTrace();
  }
catch (  SecurityException e1) {
    e1.printStackTrace();
  }
catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  RBSerialMessage.initializeHeaders();
  Robot.getInstance();
  Gui.getInstance();
  if (RobobuggyConfigFile.isDataPlayBack()) {
    new SensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  }
  Robot.getInstance().startNodes();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  try {
    new JettyServer();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException e1) {
    e1.printStackTrace();
  }
catch (  SecurityException e1) {
    e1.printStackTrace();
  }
catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
  RobobuggyConfigFile.loadConfigFile();
  RBSerialMessage.initializeHeaders();
  Robot.getInstance();
  Gui.getInstance();
  if (RobobuggyConfigFile.isDataPlayBack()) {
    new SensorPlayer(RobobuggyConfigFile.getPlayBackSourceFile(),1);
  }
  Robot.getInstance().startNodes();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
}"
42730,"/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static synchronized boolean initializeHeaders(){
  if (headers == null) {
    instance=new RBSerialMessage();
    headers=new JsonObject();
  }
  return true;
}","/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static synchronized boolean initializeHeaders(){
  if (headers == null) {
    headers=new JsonObject();
    instance=new RBSerialMessage();
  }
  return true;
}"
42731,"/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static boolean initializeHeaders(){
  if (headers != null) {
    return true;
  }
  headers=new JsonObject();
  try {
    Scanner fileIn=new Scanner(new File(RobobuggyConfigFile.RBSM_HEADER_FILE_LOCATION),""String_Node_Str"");
    while (fileIn.hasNextLine()) {
      String line=fileIn.nextLine();
      if (!line.equals(""String_Node_Str"")) {
        String[] lineContents=line.split(""String_Node_Str"");
        String headerName=lineContents[0];
        byte headerByte=Byte.parseByte(lineContents[1]);
        headers.addProperty(headerName,headerByte);
      }
    }
    return true;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static synchronized boolean initializeHeaders(){
  if (headers == null) {
    instance=new RBSerialMessage();
  }
  return true;
}"
42732,"/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static synchronized boolean initializeHeaders(){
  if (headers == null) {
    instance=new RBSerialMessage();
  }
  return true;
}","/** 
 * reads the headers text file and puts it into the headers object
 * @return whether initialization succeeded or not
 */
public static synchronized boolean initializeHeaders(){
  if (headers == null) {
    instance=new RBSerialMessage();
    headers=new JsonObject();
  }
  return true;
}"
42733,"/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  System.out.println(""String_Node_Str"");
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",""String_Node_Str"");
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      final double latErrorFinal=2 / 111131.745;
      final double lonErrorFinal=2 / 78846.81;
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.RED,new LocTuple(lat,-lon));
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,-lon),angle,Color.RED);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  double currentHeading=0;
  System.out.println(""String_Node_Str"");
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",RobobuggyConfigFile.WAYPOINT_SOURCE_LOG_FILE);
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.BLUE,new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      final double latErrorFinal=2 / 111131.745;
      final double lonErrorFinal=2 / 78846.81;
      for (double latError=-latErrorFinal; latError <= latErrorFinal; latError+=5 * latErrorFinal) {
        for (double lonError=-lonErrorFinal; lonError <= lonErrorFinal; lonError+=5 * lonErrorFinal) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,currentHeading));
          double angle=Math.PI * planer.getCommandedSteeringAngle() / 180;
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(Color.RED,new LocTuple(lat,-lon));
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,-lon),angle,Color.RED);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
42734,"public HighTrustLocalizer(){
  wheelOrintation_buggyFrame=0.0;
  buggyFrame_gps_x=0.0;
  buggyFrame_gps_y=0.0;
  wheelOrintation_buggyFrame=0.0;
  new Subscriber(NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      wheelOrintation_buggyFrame=steerM.getAngle();
    }
  }
);
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement encM=(EncoderMeasurement)m;
      secondOldestEncoder=mostRecentEncoder;
      mostRecentEncoder=encM.getDistance();
      double worldOrintation=buggyFrame_rot_z + wheelOrintation_buggyFrame;
      double deltaEncoder=mostRecentEncoder - secondOldestEncoder;
      So2Pose deltaPose=new So2Pose(deltaEncoder,0.0,worldOrintation);
      com.roboclub.robobuggy.map.Point deltaPoint=deltaPose.getSe2Point();
    }
  }
);
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement gpsM=(GpsMeasurement)m;
      double oldX=buggyFrame_gps_x;
      double oldY=buggyFrame_gps_y;
      buggyFrame_gps_y=gpsM.getLongitude();
      buggyFrame_gps_x=gpsM.getLatitude();
      double dy=buggyFrame_gps_y - oldY;
      double dx=buggyFrame_gps_x - oldX;
      buggyFrame_rot_z=180 * Math.atan2(dy,dx) / Math.PI;
      publishUpdate();
    }
  }
);
  new Subscriber(NodeChannel.IMU.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      ImuMeasurement imuM=(ImuMeasurement)m;
    }
  }
);
  new Subscriber(NodeChannel.IMU_MAGNETIC.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      MagneticMeasurement magM=(MagneticMeasurement)m;
    }
  }
);
}","/** 
 * Constructor for the High Trust Localizer which will initialize the system to an identity (zero position) 
 */
public HighTrustLocalizer(){
  wheelOrintationBuggyFrame=0.0;
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  wheelOrintationBuggyFrame=0.0;
  new Subscriber(NodeChannel.STEERING.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      SteeringMeasurement steerM=(SteeringMeasurement)m;
      wheelOrintationBuggyFrame=steerM.getAngle();
    }
  }
);
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      EncoderMeasurement encM=(EncoderMeasurement)m;
      secondOldestEncoder=mostRecentEncoder;
      mostRecentEncoder=encM.getDistance();
      double worldOrintation=buggyFrameRotZ + wheelOrintationBuggyFrame;
      double deltaEncoder=mostRecentEncoder - secondOldestEncoder;
      So2Pose deltaPose=new So2Pose(deltaEncoder,0.0,worldOrintation);
      com.roboclub.robobuggy.map.Point deltaPoint=deltaPose.getSe2Point();
    }
  }
);
  new Subscriber(NodeChannel.GPS.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GpsMeasurement gpsM=(GpsMeasurement)m;
      double oldX=buggyFrameGpsX;
      double oldY=buggyFrameGpsY;
      buggyFrameGpsY=gpsM.getLongitude();
      buggyFrameGpsX=gpsM.getLatitude();
      double dy=buggyFrameGpsY - oldY;
      double dx=buggyFrameGpsX - oldX;
      buggyFrameRotZ=180 * Math.atan2(dy,dx) / Math.PI;
      publishUpdate();
    }
  }
);
  new Subscriber(NodeChannel.IMU.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      ImuMeasurement imuM=(ImuMeasurement)m;
    }
  }
);
  new Subscriber(NodeChannel.IMU_MAGNETIC.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      MagneticMeasurement magM=(MagneticMeasurement)m;
    }
  }
);
}"
42735,"private void publishUpdate(){
  posePub.publish(new GPSPoseMessage(new Date(),buggyFrame_gps_x,buggyFrame_gps_y,buggyFrame_rot_z));
}","private void publishUpdate(){
  posePub.publish(new GPSPoseMessage(new Date(),buggyFrameGpsX,buggyFrameGpsY,buggyFrameRotZ));
}"
42736,"/** 
 * Construct a new   {@link PathPlannerNode}
 * @param channel {@link NodeChannel} on which to broadcast statusinformation about the node
 */
public SweepNode(){
  super(NodeChannel.UNKNOWN_CHANNEL);
  steeringPublisher=new Publisher(NodeChannel.DRIVE_CTRL.getMsgPath());
  brakePublisher=new Publisher(NodeChannel.BRAKE_CTRL.getMsgPath());
  Thread t1=new Thread(new Runnable(){
    private boolean sweepUp=false;
    public void run(){
      while (true) {
        System.out.println(""String_Node_Str"");
        if (!sweepUp && currentCommandedSteeringAngle <= STEERING_ANGLE_LOWER_BOUND) {
          sweepUp=true;
        }
 else         if (sweepUp && currentCommandedSteeringAngle >= STEERING_ANGLE_UPPER_BOUND) {
          sweepUp=false;
        }
        if (sweepUp) {
          currentCommandedSteeringAngle+=STEERING_ANGLE_INCREMENT;
        }
 else {
          currentCommandedSteeringAngle-=STEERING_ANGLE_INCREMENT;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        steeringPublisher.publish(new DriveControlMessage(new Date(),currentCommandedSteeringAngle));
        brakePublisher.publish(new BrakeControlMessage(new Date(),false));
      }
    }
  }
);
  t1.start();
}","/** 
 * Construct a new   {@link PathPlannerNode}
 * @param channel {@link NodeChannel} on which to broadcast statusinformation about the node
 */
public SweepNode(NodeChannel channel){
  super(channel);
  steeringPublisher=new Publisher(NodeChannel.DRIVE_CTRL.getMsgPath());
  brakePublisher=new Publisher(NodeChannel.BRAKE_CTRL.getMsgPath());
  Thread t1=new Thread(new Runnable(){
    private boolean sweepUp=false;
    public void run(){
      while (true) {
        System.out.println(""String_Node_Str"");
        if (!sweepUp && currentCommandedSteeringAngle <= STEERING_ANGLE_LOWER_BOUND) {
          sweepUp=true;
        }
 else         if (sweepUp && currentCommandedSteeringAngle >= STEERING_ANGLE_UPPER_BOUND) {
          sweepUp=false;
        }
        if (sweepUp) {
          currentCommandedSteeringAngle+=STEERING_ANGLE_INCREMENT;
        }
 else {
          currentCommandedSteeringAngle-=STEERING_ANGLE_INCREMENT;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        steeringPublisher.publish(new DriveControlMessage(new Date(),currentCommandedSteeringAngle));
        brakePublisher.publish(new BrakeControlMessage(new Date(),false));
      }
    }
  }
);
  t1.start();
}"
42737,"/** 
 * Starts the logging process
 */
private void setupLoggingTrigger(){
  new Subscriber(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GuiLoggingButtonMessage message=(GuiLoggingButtonMessage)m;
      if (message.getLoggingMessage().equals(GuiLoggingButtonMessage.LoggingMessage.START)) {
        if (!createNewLogFile()) {
          new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
          return;
        }
        keepLogging=true;
        loggingThread=new LogWriterThread();
        loggingThread.start();
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
      }
 else       if (message.getLoggingMessage().equals(GuiLoggingButtonMessage.LoggingMessage.STOP)) {
        keepLogging=false;
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
        loggingThread.interrupt();
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      }
    }
  }
);
}","/** 
 * Starts the logging process
 */
private void setupLoggingTrigger(){
  new Subscriber(NodeChannel.GUI_LOGGING_BUTTON.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
      GuiLoggingButtonMessage message=(GuiLoggingButtonMessage)m;
      if (message.getLoggingMessage().equals(GuiLoggingButtonMessage.LoggingMessage.START)) {
        if (!createNewLogFile()) {
          new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
          return;
        }
        messageQueue.clear();
        keepLogging=true;
        loggingThread=new LogWriterThread();
        loggingThread.start();
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
      }
 else       if (message.getLoggingMessage().equals(GuiLoggingButtonMessage.LoggingMessage.STOP)) {
        keepLogging=false;
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
        loggingThread.interrupt();
      }
 else {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      }
    }
  }
);
}"
42738,"public ClientUpdater(){
  try {
    messageTranslator=new GsonBuilder().excludeFieldsWithModifiers(Modifier.TRANSIENT).serializeSpecialFloatingPointValues().create();
  }
 catch (  Exception e) {
  }
  for (  NodeChannel filter : NodeChannel.getLoggingChannels()) {
    new Subscriber(filter.getMsgPath(),new MessageListener(){
      @Override public void actionPerformed(      String topicName,      Message m){
        try {
          String msgAsJsonString=messageTranslator.toJson(m);
          updates.put(msgAsJsonString);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
);
  }
  Thread updater=new Thread(){
    ConcurrentHashMap<Integer,Session> clients=WSHandler.clients;
    private LinkedBlockingQueue<String> updates=ClientUpdater.updates;
    public void run(){
      System.out.println(""String_Node_Str"");
      while (true) {
        try {
          String update=updates.take();
          System.out.println(update);
          Session session;
          for (          int key : clients.keySet()) {
            session=clients.get(key);
            session.getRemote().sendString(update);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  updater.start();
}","/** 
 * starts a new client updater
 */
public ClientUpdater(){
  messageTranslator=new GsonBuilder().excludeFieldsWithModifiers(Modifier.TRANSIENT).serializeSpecialFloatingPointValues().create();
  for (  NodeChannel filter : NodeChannel.getLoggingChannels()) {
    new Subscriber(filter.getMsgPath(),new MessageListener(){
      @Override public void actionPerformed(      String topicName,      Message m){
        try {
          String msgAsJsonString=messageTranslator.toJson(m);
          updates.put(msgAsJsonString);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
);
  }
  Thread updater=new Thread(){
    private ConcurrentHashMap<Integer,Session> clients=WSHandler.getClients();
    private LinkedBlockingQueue<String> updates=ClientUpdater.updates;
    public void run(){
      System.out.println(""String_Node_Str"");
      while (true) {
        try {
          String update=updates.take();
          System.out.println(update);
          Session session;
          for (          int key : clients.keySet()) {
            session=clients.get(key);
            session.getRemote().sendString(update);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  updater.start();
}"
42739,"public JettyServer() throws Exception {
  System.out.println(System.getProperty(""String_Node_Str""));
  server=new Server(8080);
  ClientUpdater cu=new ClientUpdater();
  ResourceHandler res=new ResourceHandler();
  res.setDirectoriesListed(true);
  res.setWelcomeFiles(new String[]{""String_Node_Str""});
  res.setResourceBase(""String_Node_Str"");
  WebSocketHandler wsHandler=new WebSocketHandler(){
    @Override public void configure(    WebSocketServletFactory factory){
      factory.register(WSHandler.class);
    }
  }
;
  GzipHandler gzip=new GzipHandler();
  HandlerList handlers=new HandlerList();
  handlers.setHandlers(new Handler[]{wsHandler,res,new DefaultHandler()});
  gzip.setHandler(handlers);
  ContextHandler contextRoot=new ContextHandler(""String_Node_Str"");
  contextRoot.setHandler(gzip);
  RootHandler help=new RootHandler();
  ContextHandler contextHelp=new ContextHandler(""String_Node_Str"");
  contextHelp.setHandler(help);
  ResourceHandler res1=new ResourceHandler();
  res1.setWelcomeFiles(new String[]{""String_Node_Str""});
  res1.setResourceBase(""String_Node_Str"");
  ContextHandler contextTest=new ContextHandler(""String_Node_Str"");
  contextTest.setHandler(res1);
  ResourceHandler res11=new ResourceHandler();
  res11.setWelcomeFiles(new String[]{""String_Node_Str"",""String_Node_Str""});
  res11.setResourceBase(""String_Node_Str"");
  ContextHandler contextTest1=new ContextHandler(""String_Node_Str"");
  contextTest1.setHandler(res11);
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  contexts.setHandlers(new Handler[]{contextRoot,contextHelp,contextTest,contextTest1,new DefaultHandler()});
  server.setHandler(contexts);
  serverThread=new Thread(){
    public void run(){
      try {
        server.start();
        server.join();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  serverThread.start();
}","/** 
 * initializes the jetty server
 */
public JettyServer(){
  System.out.println(System.getProperty(""String_Node_Str""));
  server=new Server(8080);
  new ClientUpdater();
  ResourceHandler res=new ResourceHandler();
  res.setDirectoriesListed(true);
  res.setWelcomeFiles(new String[]{""String_Node_Str""});
  res.setResourceBase(""String_Node_Str"");
  WebSocketHandler wsHandler=new WebSocketHandler(){
    @Override public void configure(    WebSocketServletFactory factory){
      factory.register(WSHandler.class);
    }
  }
;
  GzipHandler gzip=new GzipHandler();
  HandlerList handlers=new HandlerList();
  handlers.setHandlers(new Handler[]{wsHandler,res,new DefaultHandler()});
  gzip.setHandler(handlers);
  ContextHandler contextRoot=new ContextHandler(""String_Node_Str"");
  contextRoot.setHandler(gzip);
  RootHandler help=new RootHandler();
  ContextHandler contextHelp=new ContextHandler(""String_Node_Str"");
  contextHelp.setHandler(help);
  ResourceHandler res1=new ResourceHandler();
  res1.setWelcomeFiles(new String[]{""String_Node_Str""});
  res1.setResourceBase(""String_Node_Str"");
  ContextHandler contextTest=new ContextHandler(""String_Node_Str"");
  contextTest.setHandler(res1);
  ResourceHandler res11=new ResourceHandler();
  res11.setWelcomeFiles(new String[]{""String_Node_Str"",""String_Node_Str""});
  res11.setResourceBase(""String_Node_Str"");
  ContextHandler contextTest1=new ContextHandler(""String_Node_Str"");
  contextTest1.setHandler(res11);
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  contexts.setHandlers(new Handler[]{contextRoot,contextHelp,contextTest,contextTest1,new DefaultHandler()});
  server.setHandler(contexts);
  serverThread=new Thread(){
    public void run(){
      try {
        server.start();
        server.join();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  serverThread.start();
}"
42740,"public RootHandler(){
}","/** 
 * initializes the roothandler
 */
public RootHandler(){
}"
42741,"@OnWebSocketConnect public void onConnect(Session session){
  clientID=clientCount;
  clients.put(clientID,session);
  System.out.println(""String_Node_Str"" + session.getRemoteAddress().getAddress());
  try {
    session.getRemote().sendString(""String_Node_Str"" + Integer.toString(clientCount));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  clientCount++;
}","/** 
 * new client connected
 * @param session session that connected
 */
@OnWebSocketConnect public void onConnect(Session session){
  clientID=clientCount;
  clients.put(clientID,session);
  System.out.println(""String_Node_Str"" + session.getRemoteAddress().getAddress());
  try {
    session.getRemote().sendString(""String_Node_Str"" + Integer.toString(clientCount));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  clientCount++;
}"
42742,"@OnWebSocketClose public void onClose(int statusCode,String reason){
  clients.remove(clientID);
  clientCount--;
  System.out.println(""String_Node_Str"" + statusCode + ""String_Node_Str""+ reason);
}","/** 
 * we needed to close connection to this client
 * @param statusCode client status
 * @param reason client reason
 */
@OnWebSocketClose public void onClose(int statusCode,String reason){
  clients.remove(clientID);
  clientCount--;
  System.out.println(""String_Node_Str"" + statusCode + ""String_Node_Str""+ reason);
}"
42743,"@OnWebSocketError public void onError(Throwable t){
  clients.remove(clientID);
  clientCount--;
  System.out.println(""String_Node_Str"" + t.getMessage());
}","/** 
 * client had an error
 * @param t the error that occurred
 */
@OnWebSocketError public void onError(Throwable t){
  clients.remove(clientID);
  clientCount--;
  System.out.println(""String_Node_Str"" + t.getMessage());
}"
42744,"@OnWebSocketMessage public void onMessage(String message){
  System.out.println(""String_Node_Str"" + message);
}","/** 
 * new message happened
 * @param message new message
 */
@OnWebSocketMessage public void onMessage(String message){
  System.out.println(""String_Node_Str"" + message);
}"
42745,"/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args) throws Exception {
  JettyServer js=new JettyServer();
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException e1) {
    e1.printStackTrace();
  }
catch (  SecurityException e1) {
    e1.printStackTrace();
  }
catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
  List<String> ports=getAvailablePorts();
  System.out.println(ports);
  Robot.getInstance();
  Gui.getInstance();
  if (RobobuggyConfigFile.DATA_PLAY_BACK) {
    new SensorPlayer(""String_Node_Str"",1);
  }
  Robot.getInstance().startNodes();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  try {
    Thread.sleep(5000);
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
    Thread.sleep(500);
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  }
}","/** 
 * Run Alice
 * @param args : None
 */
public static void main(String[] args){
  new JettyServer();
  try {
    JNISetup.setupJNI();
  }
 catch (  NoSuchFieldException e1) {
    e1.printStackTrace();
  }
catch (  SecurityException e1) {
    e1.printStackTrace();
  }
catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
  List<String> ports=getAvailablePorts();
  System.out.println(ports);
  Robot.getInstance();
  Gui.getInstance();
  if (RobobuggyConfigFile.DATA_PLAY_BACK) {
    new SensorPlayer(""String_Node_Str"",1);
  }
  Robot.getInstance().startNodes();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
}"
42746,"/** 
 * Instantiates a new LogWriterThread by clearing the message queue
 */
public LogWriterThread(){
}","/** 
 * Instantiates a new LogWriterThread by clearing the message queue
 */
LogWriterThread(){
}"
42747,"/** 
 * Create a new   {@link RBSMPeriodicNode} object
 * @param period of the periodic behavior
 * @param channel of the RSBM node
 */
public RBSMPeriodicNode(NodeChannel channel,int period){
  super(new BuggyBaseNode(channel),period);
}","/** 
 * Create a new   {@link RBSMPeriodicNode} object
 * @param period of the periodic behavior
 * @param channel of the RSBM node
 */
RBSMPeriodicNode(NodeChannel channel,int period){
  super(new BuggyBaseNode(channel),period);
}"
42748,"/** 
 * Construct a new   {@link Graph}
 */
public Graph(){
  this.setPreferredSize(new Dimension(graphWidth + 2 * offset,graphHeight + 2 * offset));
}","/** 
 * Construct a new   {@link Graph}
 */
Graph(){
  this.setPreferredSize(new Dimension(graphWidth + 2 * offset,graphHeight + 2 * offset));
}"
42749,"public AutonomousPanel(){
  this.addComponent(new RoboBuggyGraph(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),new getGraphValues(){
    @Override public double getY(    Message m){
      DriveControlMessage steerM=(DriveControlMessage)m;
      return steerM.getAngleDouble();
    }
    @Override public double getX(    Message m){
      DriveControlMessage steerM=(DriveControlMessage)m;
      return steerM.getTimestamp().getTime();
    }
  }
),0,0,1,1);
}","/** 
 * starts a new autonomouspanel that shows what the drive control is on a graph
 */
public AutonomousPanel(){
  this.addComponent(new RoboBuggyGraph(""String_Node_Str"",NodeChannel.DRIVE_CTRL.getMsgPath(),new GetGraphValues(){
    @Override public double getY(    Message m){
      DriveControlMessage steerM=(DriveControlMessage)m;
      return steerM.getAngleDouble();
    }
    @Override public double getX(    Message m){
      DriveControlMessage steerM=(DriveControlMessage)m;
      return steerM.getTimestamp().getTime();
    }
  }
),0,0,1,1);
}"
42750,"/** 
 * @param points points to add to the map
 */
public void addPointsToMapTree(Color thisColor,LocTuple... points){
  for (  LocTuple point : points) {
    mapTree.getViewer().addMapMarker(new MapMarkerDot(thisColor,point.getLatitude(),point.getLongitude()));
  }
}","/** 
 * @param points points to add to the map
 * @param thisColor color of the point
 */
public void addPointsToMapTree(Color thisColor,LocTuple... points){
  for (  LocTuple point : points) {
    mapTree.getViewer().addMapMarker(new MapMarkerDot(thisColor,point.getLatitude(),point.getLongitude()));
  }
}"
42751,"private void addCacheToTree(){
  try {
    TileCache courseCache=new MemoryTileCache();
    File mapCacheDir=new File(mapCacheFolderDiskPath);
    if (!mapCacheDir.isDirectory() || !mapCacheDir.exists()) {
      throw new IOException(""String_Node_Str"");
    }
    FilenameFilter filter=new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (name.contains(""String_Node_Str"")) {
          return true;
        }
        return false;
      }
    }
;
    String[] cachedImages=mapCacheDir.list(filter);
    for (    String imageName : cachedImages) {
      BufferedImage tileImageSource=ImageIO.read(new File(mapCacheDir.getAbsolutePath() + ""String_Node_Str"" + imageName));
      String[] tileCoords=imageName.substring(0,imageName.indexOf(""String_Node_Str"")).split(""String_Node_Str"");
      int xCoord=Integer.parseInt(tileCoords[0]);
      int yCoord=Integer.parseInt(tileCoords[1]);
      int zoomLevel=Integer.parseInt(tileCoords[2]);
      Tile cacheInsert=new Tile(mapTree.getViewer().getTileController().getTileSource(),xCoord,yCoord,zoomLevel,tileImageSource);
      cacheInsert.setLoaded(true);
      courseCache.addTile(cacheInsert);
    }
    mapTree.getViewer().getTileController().setTileCache(courseCache);
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"" + e.getMessage(),RobobuggyMessageLevel.EXCEPTION);
  }
}","private void addCacheToTree(){
  try {
    TileCache courseCache=new MemoryTileCache();
    File mapCacheDir=new File(mapCacheFolderDiskPath);
    if (!mapCacheDir.isDirectory() || !mapCacheDir.exists()) {
      throw new IOException(""String_Node_Str"");
    }
    FilenameFilter filter=(dir,name) -> {
      if (name.contains(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
;
    String[] cachedImages=mapCacheDir.list(filter);
    if (cachedImages == null) {
      return;
    }
    for (    String imageName : cachedImages) {
      BufferedImage tileImageSource=ImageIO.read(new File(mapCacheDir.getAbsolutePath() + ""String_Node_Str"" + imageName));
      String[] tileCoords=imageName.substring(0,imageName.indexOf(""String_Node_Str"")).split(""String_Node_Str"");
      int xCoord=Integer.parseInt(tileCoords[0]);
      int yCoord=Integer.parseInt(tileCoords[1]);
      int zoomLevel=Integer.parseInt(tileCoords[2]);
      Tile cacheInsert=new Tile(mapTree.getViewer().getTileController().getTileSource(),xCoord,yCoord,zoomLevel,tileImageSource);
      cacheInsert.setLoaded(true);
      courseCache.addTile(cacheInsert);
    }
    mapTree.getViewer().getTileController().setTileCache(courseCache);
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"" + e.getMessage(),RobobuggyMessageLevel.EXCEPTION);
  }
}"
42752,"/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",""String_Node_Str"");
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      double LAT_ERROR=1 / 111131.745;
      double LON_ERROR=1 / 78846.81;
      for (double latError=-LAT_ERROR; latError < LAT_ERROR; latError+=LAT_ERROR / 5) {
        for (double lonError=-LON_ERROR; lonError < LON_ERROR; lonError+=LON_ERROR / 5) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,0));
          planer.getCommandedSteeringAngle();
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,lon),planer.getCommandedSteeringAngle());
        }
      }
    }
  }
 catch (  UnsupportedEncodingException|FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * the main method
 * @param args args
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  try {
    ArrayList<GpsMeasurement> wayPoints=WayPointUtil.createWayPointsFromLog(""String_Node_Str"",""String_Node_Str"");
    Gui.getInstance();
    for (int i=0; i < wayPoints.size(); i++) {
      Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addPointsToMapTree(new LocTuple(wayPoints.get(i).getLatitude(),-wayPoints.get(i).getLongitude()));
      Gui.getInstance().fixPaint();
    }
    WayPointFollowerPlanner planer=new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,wayPoints);
    for (int i=0; i < wayPoints.size(); i++) {
      final double latErrorFinal=1 / 111131.745;
      final double lonErrorFinal=1 / 78846.81;
      for (double latError=-latErrorFinal; latError < latErrorFinal; latError+=latErrorFinal / 5) {
        for (double lonError=-lonErrorFinal; lonError < lonErrorFinal; lonError+=lonErrorFinal / 5) {
          double lat=wayPoints.get(i).getLatitude() + latError;
          double lon=wayPoints.get(i).getLongitude() + lonError;
          planer.updatePositionEstimate(new GPSPoseMessage(new Date(),lat,lon,0));
          planer.getCommandedSteeringAngle();
          Gui.getInstance().getMainGuiWindow().getAnalyPane().getDataPanel().getGpsPanel().addLineToMap(new LocTuple(lat,lon),planer.getCommandedSteeringAngle());
        }
      }
    }
  }
 catch (  UnsupportedEncodingException|FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}"
42753,"public void addPointsToMapTree(LocTuple... points){
  for (  LocTuple point : points) {
    mapTree.getViewer().addMapMarker(new MapMarkerDot(Color.BLUE,point.getLatitude(),point.getLongitude()));
  }
}","/** 
 * @param points points to add to the map
 */
public void addPointsToMapTree(LocTuple... points){
  for (  LocTuple point : points) {
    mapTree.getViewer().addMapMarker(new MapMarkerDot(Color.BLUE,point.getLatitude(),point.getLongitude()));
  }
}"
42754,"public void addLineToMap(LocTuple originPoint,double angle){
  double scalingFactor=0.001;
  double dx=originPoint.getLatitude() + Math.cos(angle) * scalingFactor;
  double dy=originPoint.getLongitude() + Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dx,originPoint.getLongitude() + dy);
  addLineToMap(originPoint,endpoint);
}","/** 
 * @param originPoint the origin point of the ray
 * @param angle the heading of the ray
 */
public void addLineToMap(LocTuple originPoint,double angle){
  double scalingFactor=0.001;
  double dx=originPoint.getLatitude() + Math.cos(angle) * scalingFactor;
  double dy=originPoint.getLongitude() + Math.sin(angle) * scalingFactor;
  LocTuple endpoint=new LocTuple(originPoint.getLatitude() + dx,originPoint.getLongitude() + dy);
  addLineToMap(originPoint,endpoint);
}"
42755,"HighTrustLocalizer(){
  wheelOrintation_buggyFrame=0.0;
  buggyFrame_gps_x=0.0;
  buggyFrame_gps_y=0.0;
  buggyFrame_gps_z=0.0;
  wheelOrintation_buggyFrame=0.0;
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
    }
  }
);
}","HighTrustLocalizer(){
  wheelOrientationBuggyFrame=0.0;
  buggyFrameGpsX=0.0;
  buggyFrameGpsY=0.0;
  buggyFrameGpsZ=0.0;
  wheelOrientationBuggyFrame=0.0;
  new Subscriber(NodeChannel.ENCODER.getMsgPath(),new MessageListener(){
    @Override public void actionPerformed(    String topicName,    Message m){
    }
  }
);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
}"
42756,"/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new OdomLocalizer());
  nodeList.add(new ImuNode(NodeChannel.IMU,RobobuggyConfigFile.COM_PORT_IMU));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.values()));
  try {
    nodeList.add(new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,WayPointUtil.CreateWayPointsFromWaypointList(""String_Node_Str"")));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  nodeList.add(new CameraNode(NodeChannel.PUSHBAR_CAMERA,100));
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
}","/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new OdomLocalizer());
  nodeList.add(new ImuNode(NodeChannel.IMU,RobobuggyConfigFile.COM_PORT_IMU));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
  nodeList.add(new LoggingNode(NodeChannel.GUI_LOGGING_BUTTON,RobobuggyConfigFile.LOG_FILE_LOCATION,NodeChannel.values()));
  try {
    nodeList.add(new WayPointFollowerPlanner(NodeChannel.UNKNOWN_CHANNEL,WayPointUtil.createWayPointsFromWaypointList(""String_Node_Str"")));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  nodeList.add(new CameraNode(NodeChannel.PUSHBAR_CAMERA,100));
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    shutDown();
  }
}"
42757,"/** 
 * @param x
 * @param y
 * @param newOrintation
 */
public So2Pose(double x,double y,double newOrintation){
  location=new Point(x,y);
  orintation=newOrintation;
}","/** 
 * @param x x coord of the point
 * @param y y coord of the point
 * @param newOrientation the new orientation
 */
public So2Pose(double x,double y,double newOrientation){
  location=new Point(x,y);
  orientation=newOrientation;
}"
42758,"/** 
 * @param postPose the pose that is being applied to the right of the expresion
 */
public So2Pose mult(So2Pose postPose){
  double[][] aM={{Math.cos(orintation),-Math.sin(orintation),getX()},{Math.sin(orintation),Math.cos(orintation),getY()},{0,0,1}};
  double[][] bM={{Math.cos(postPose.orintation),-Math.sin(postPose.orintation),postPose.getX()},{Math.sin(postPose.orintation),Math.cos(postPose.orintation),postPose.getY()},{0,0,1}};
  Matrix a=new Matrix(aM);
  Matrix b=new Matrix(bM);
  Matrix c=a.times(b);
  return new So2Pose(c.get(0,2),c.get(1,2),Math.atan2(c.get(1,0),c.get(0,0)));
}","/** 
 * @param postPose the pose that is being applied to the right of the expresion
 * @return the new So2Pose TODO
 */
public So2Pose mult(So2Pose postPose){
  double[][] aM={{Math.cos(orientation),-Math.sin(orientation),getX()},{Math.sin(orientation),Math.cos(orientation),getY()},{0,0,1}};
  double[][] bM={{Math.cos(postPose.orientation),-Math.sin(postPose.orientation),postPose.getX()},{Math.sin(postPose.orientation),Math.cos(postPose.orientation),postPose.getY()},{0,0,1}};
  Matrix a=new Matrix(aM);
  Matrix b=new Matrix(bM);
  Matrix c=a.times(b);
  return new So2Pose(c.get(0,2),c.get(1,2),Math.atan2(c.get(1,0),c.get(0,0)));
}"
42759,"public void updatePoint(Point newPoint,double newOrintation){
  this.orintation=orintation;
  this.location=location;
}","/** 
 * updates the values of the pose
 * @param newPoint the new se2 point to be set
 * @param newOrientation the new orientation
 */
public void updatePoint(Point newPoint,double newOrientation){
  this.orientation=newOrientation;
  this.location=newPoint;
}"
42760,"/** 
 * Constructor for the image message
 * @param newImage the image to transmit
 */
public ImageMessage(BufferedImage newImage,int frameNumber){
  thisImage=newImage;
  this.frameNumber=frameNumber;
}","/** 
 * Constructor for the image message
 * @param newImage the image to transmit;
 * @param frameNumber the frame number
 */
public ImageMessage(BufferedImage newImage,int frameNumber){
  thisImage=newImage;
  this.frameNumber=frameNumber;
}"
42761,"public int getFrameNumber(){
  return frameNumber;
}","/** 
 * @return the frame number of the image
 */
public int getFrameNumber(){
  return frameNumber;
}"
42762,"public NodeStatusMessage(Class node,INodeStatus message,JsonObject params){
  this.node=node;
  this.message=message;
  this.params=params;
}","/** 
 * @param node the node reporting the status
 * @param message the status of the node
 * @param params any parameters they want to pass along
 */
public NodeStatusMessage(Class node,INodeStatus message,JsonObject params){
  this.node=node;
  this.message=message;
  this.params=params;
}"
42763,"public INodeStatus getMessage(){
  return message;
}","/** 
 * @return the status of the node
 */
public INodeStatus getMessage(){
  return message;
}"
42764,"public Class getNode(){
  return node;
}","/** 
 * @return the node reporting status
 */
public Class getNode(){
  return node;
}"
42765,"public JsonObject getParams(){
  return params;
}","/** 
 * @return the paramters of the status
 */
public JsonObject getParams(){
  return params;
}"
42766,"private void predictStep(){
  Date now=new Date();
  Date dt=new Date(now.getTime() - mostRecentUpdateTime.getTime());
  state=mModel.applyMotionModel(state,dt);
  covariance=DF.times(covariance).times(DF.transpose());
}","/** 
 * TODO
 */
private void predictStep(){
  System.out.println(""String_Node_Str"");
}"
42767,"protected KfLocalizer(BuggyNode base,int period){
  super(base,period);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  startTime=new Date();
  double[][] startCovariance={{1,0,0},{0,1,0},{0,0,1}};
  covariance=new Matrix(startCovariance);
  state=Util.eye(3);
  mostRecentUpdateTime=startTime;
}","protected KfLocalizer(BuggyNode base,int period){
  super(base,period);
  posePub=new Publisher(NodeChannel.POSE.getMsgPath());
  double[][] startCovariance={{1,0,0},{0,1,0},{0,0,1}};
  covariance=new Matrix(startCovariance);
  state=Util.createIdentityMatrix(3);
}"
42768,"public void updateStep(Matrix measurement,ObservationModel oModel,Matrix DH){
  predictStep();
  Matrix inovation=measurement.minus(oModel.getObservationSpaceState(state));
  Matrix innovationCovariance=DH.times(covariance).times(DH.transpose());
  Matrix kalmanGain=covariance.times(DH.transpose()).times(innovationCovariance.inverse());
  covariance=(Util.eye(3).minus(kalmanGain.times(DH)).times(covariance));
  state=state.plus(kalmanGain.times(inovation));
  mostRecentUpdateTime=new Date();
}","/** 
 * TODO
 * @param measurement TODO
 * @param oModel TODO
 * @param matrixDH TODO
 */
public void updateStep(Matrix measurement,ObservationModel oModel,Matrix matrixDH){
  predictStep();
  Matrix inovation=measurement.minus(oModel.getObservationSpaceState(state));
  Matrix innovationCovariance=matrixDH.times(covariance).times(matrixDH.transpose());
  Matrix kalmanGain=covariance.times(matrixDH.transpose()).times(innovationCovariance.inverse());
  covariance=(Util.createIdentityMatrix(3).minus(kalmanGain.times(matrixDH)).times(covariance));
  state=state.plus(kalmanGain.times(inovation));
}"
42769,"/** 
 * Test with null input
 */
@Test public void testNull(){
  Date result=RobobuggyDateFormatter.formatRobobuggyDate(""String_Node_Str"");
  assertTrue(result != null);
}","/** 
 * Test with null input
 */
@Test public void testNull(){
  Date result=BaseMessage.tryToParseDate(""String_Node_Str"");
  assertTrue(result != null);
}"
42770,"/** 
 * Create a new   {@link LoggingNode} decorator
 * @param channel the {@link NodeChannel} of the {@link LoggingNode}
 * @param outputDirPath The path to the output directory (not file)
 * @param filters sensors to log. To log all sensors, just use NodeChannel.values()
 */
public LoggingNode(NodeChannel channel,String outputDirPath,NodeChannel... filters){
  super(new BuggyBaseNode(channel));
  this.filters=filters;
  messageQueue=new LinkedBlockingQueue<>();
  keepLogging=true;
  outputDirectory=new File(outputDirPath);
  setupSubscriberList();
  setupLoggingTrigger();
}","/** 
 * Create a new   {@link LoggingNode} decorator
 * @param channel the {@link NodeChannel} of the {@link LoggingNode}
 * @param outputDirPath The path to the output directory (not file)
 * @param filters sensors to log. To log all sensors, just use NodeChannel.values()
 */
public LoggingNode(NodeChannel channel,String outputDirPath,NodeChannel... filters){
  super(new BuggyBaseNode(channel));
  this.filters=filters;
  messageQueue=new LinkedBlockingQueue<>();
  keepLogging=true;
  outputDirectory=new File(outputDirPath);
  setupSubscriberList();
  if (!RobobuggyConfigFile.DATA_PLAY_BACK) {
    setupLoggingTrigger();
  }
}"
42771,"/** 
 * Creates the log file, and returns the status Returns false if anything went wrong, but already throws the logic exception
 * @return the status of the operation - true if it succeeded, false if it didn't
 */
private boolean createNewLogFile(){
  if (!outputDirectory.exists() || !outputDirectory.isDirectory()) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return false;
  }
  outputFile=new File(outputDirectory.getPath() + ""String_Node_Str"" + RobobuggyConfigFile.LOG_FILE_NAME+ ""String_Node_Str""+ BaseMessage.formatDate(new Date())+ ""String_Node_Str"");
  try {
    if (!outputFile.createNewFile()) {
      new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      return false;
    }
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return false;
  }
  return true;
}","/** 
 * Creates the log file, and returns the status Returns false if anything went wrong, but already throws the logic exception
 * @return the status of the operation - true if it succeeded, false if it didn't
 */
private boolean createNewLogFile(){
  if (!outputDirectory.exists() || !outputDirectory.isDirectory()) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return false;
  }
  outputFile=new File(outputDirectory.getPath() + ""String_Node_Str"" + RobobuggyConfigFile.LOG_FILE_NAME+ ""String_Node_Str""+ formatDateIntoFile(new Date())+ ""String_Node_Str"");
  try {
    if (!outputFile.createNewFile()) {
      new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      return false;
    }
  }
 catch (  IOException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
    return false;
  }
  return true;
}"
42772,"private boolean validateLogFileMetadata(JsonObject logFile){
  if (!logFile.get(""String_Node_Str"").getAsString().equals(METADATA_NAME)) {
    return false;
  }
  if (logFile.get(""String_Node_Str"").getAsDouble() != METADATA_SCHEMA_VERSION) {
    return false;
  }
  if (!logFile.get(""String_Node_Str"").getAsString().equals(METADATA_HIGHLEVEL_SW_VERSION)) {
    return false;
  }
  return true;
}","private boolean validateLogFileMetadata(JsonObject logFile){
  if (!logFile.get(""String_Node_Str"").getAsString().equals(METADATA_NAME)) {
    return false;
  }
  if (!logFile.get(""String_Node_Str"").getAsString().equals(METADATA_SCHEMA_VERSION)) {
    return false;
  }
  if (!logFile.get(""String_Node_Str"").getAsString().equals(METADATA_HIGHLEVEL_SW_VERSION)) {
    return false;
  }
  return true;
}"
42773,"/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
  nodeList.add(new SweepNode(NodeChannel.BRAKE_CTRL));
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
  nodeList.add(new SweepNode(NodeChannel.BRAKE_CTRL));
  try {
    Thread.sleep(ARDUINO_BOOTLOADER_TIMEOUT);
  }
 catch (  InterruptedException e) {
    new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
  }
}"
42774,"/** 
 * Construct a new   {@link PathPlannerNode}
 * @param channel {@link NodeChannel} on which to broadcast statusinformation about the node
 */
public SweepNode(NodeChannel channel){
  super(channel);
  steeringPublisher=new Publisher(NodeChannel.DRIVE_CTRL.getMsgPath());
  Thread t1=new Thread(new Runnable(){
    boolean sweepUp=false;
    public void run(){
      while (true) {
        if (!sweepUp && currentCommandedSteeringAngle <= STEERING_ANGLE_LOWER_BOUND) {
          sweepUp=true;
        }
 else         if (sweepUp && currentCommandedSteeringAngle >= STEERING_ANGLE_UPPER_BOUND) {
          sweepUp=false;
        }
        if (sweepUp) {
          currentCommandedSteeringAngle+=STEERING_ANGLE_INCREMENT;
        }
 else {
          currentCommandedSteeringAngle-=STEERING_ANGLE_INCREMENT;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        steeringPublisher.publish(new DriveControlMessage(new Date(),currentCommandedSteeringAngle));
        System.out.println(""String_Node_Str"" + currentCommandedSteeringAngle);
      }
    }
  }
);
  t1.start();
}","/** 
 * Construct a new   {@link PathPlannerNode}
 * @param channel {@link NodeChannel} on which to broadcast statusinformation about the node
 */
public SweepNode(NodeChannel channel){
  super(channel);
  steeringPublisher=new Publisher(NodeChannel.DRIVE_CTRL.getMsgPath());
  Thread t1=new Thread(new Runnable(){
    private boolean sweepUp=false;
    public void run(){
      while (true) {
        if (!sweepUp && currentCommandedSteeringAngle <= STEERING_ANGLE_LOWER_BOUND) {
          sweepUp=true;
        }
 else         if (sweepUp && currentCommandedSteeringAngle >= STEERING_ANGLE_UPPER_BOUND) {
          sweepUp=false;
        }
        if (sweepUp) {
          currentCommandedSteeringAngle+=STEERING_ANGLE_INCREMENT;
        }
 else {
          currentCommandedSteeringAngle-=STEERING_ANGLE_INCREMENT;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        steeringPublisher.publish(new DriveControlMessage(new Date(),currentCommandedSteeringAngle));
        System.out.println(""String_Node_Str"" + currentCommandedSteeringAngle);
      }
    }
  }
);
  t1.start();
}"
42775,"/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  RobobuggyLogicNotification.setupLogicException(NodeChannel.LOGIC_EXCEPTION);
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
}","/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  RobobuggyLogicNotification.setupLogicException(NodeChannel.LOGIC_EXCEPTION);
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.COM_PORT_GPS));
  nodeList.add(new ImuNode(NodeChannel.IMU,RobobuggyConfigFile.COM_PORT_IMU));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
}"
42776,"/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 80) {
    return 0;
  }
  String str=Arrays.toString(buffer).substring(start,bytesAvailable);
  if (buffer[start] != '$') {
    return 1;
  }
  if (buffer[start + 1] != 'G') {
    return 1;
  }
  if (buffer[start + 2] != 'P') {
    return 1;
  }
  if (buffer[start + 3] != 'G') {
    return 1;
  }
  if (buffer[start + 4] != 'G') {
    return 1;
  }
  if (buffer[start + 5] != 'A') {
    return 1;
  }
  String[] ar=str.split(""String_Node_Str"");
  if (!ar[0].equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    throw new RuntimeException();
  }
  int quality=Integer.parseInt(ar[6]);
  if (quality == 0) {
    setNodeState(NodeState.ERROR);
    return 1;
  }
  Date readingTime=convertHHMMSStoTime(ar[1]);
  double latitude=convertMinutesSecondsToFloat(ar[2]);
  boolean north;
switch (ar[3]) {
case ""String_Node_Str"":
    north=true;
  break;
case ""String_Node_Str"":
north=false;
break;
default :
System.out.println(""String_Node_Str"");
throw new RuntimeException();
}
double longitude=convertMinSecToFloatLongitude(ar[4]);
boolean west;
switch (ar[5]) {
case ""String_Node_Str"":
west=true;
break;
case ""String_Node_Str"":
west=false;
break;
default :
System.out.println(""String_Node_Str"");
throw new RuntimeException();
}
int numSatellites=Integer.parseInt(ar[7]);
double horizontalDilutionOfPrecision=Double.parseDouble(ar[8]);
double antennaAltitude=Double.parseDouble(ar[9]);
msgPub.publish(new GpsMeasurement(readingTime,latitude,north,longitude,west,quality,numSatellites,horizontalDilutionOfPrecision,antennaAltitude,Double.parseDouble(ar[2]),Double.parseDouble(ar[4])));
setNodeState(NodeState.ON);
return ar[0].length() + ar[1].length() + ar[2].length()+ ar[3].length()+ ar[4].length()+ ar[5].length()+ ar[6].length()+ ar[7].length()+ ar[8].length()+ ar[9].length();
}","/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 80) {
    return 0;
  }
  String str;
  try {
    str=new String(buffer,start,bytesAvailable,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return 0;
  }
  if (buffer[start] != '$') {
    return 1;
  }
  if (buffer[start + 1] != 'G') {
    return 1;
  }
  if (buffer[start + 2] != 'P') {
    return 1;
  }
  if (buffer[start + 3] != 'G') {
    return 1;
  }
  if (buffer[start + 4] != 'G') {
    return 1;
  }
  if (buffer[start + 5] != 'A') {
    return 1;
  }
  String[] ar=str.split(""String_Node_Str"");
  if (!ar[0].equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    throw new RuntimeException();
  }
  int quality=Integer.parseInt(ar[6]);
  if (quality == 0) {
    setNodeState(NodeState.ERROR);
    return 1;
  }
  Date readingTime=convertHHMMSStoTime(ar[1]);
  double latitude=convertMinutesSecondsToFloat(ar[2]);
  boolean north;
switch (ar[3]) {
case ""String_Node_Str"":
    north=true;
  break;
case ""String_Node_Str"":
north=false;
break;
default :
System.out.println(""String_Node_Str"");
throw new RuntimeException();
}
double longitude=convertMinSecToFloatLongitude(ar[4]);
boolean west;
switch (ar[5]) {
case ""String_Node_Str"":
west=true;
break;
case ""String_Node_Str"":
west=false;
break;
default :
System.out.println(""String_Node_Str"");
throw new RuntimeException();
}
int numSatellites=Integer.parseInt(ar[7]);
double horizontalDilutionOfPrecision=Double.parseDouble(ar[8]);
double antennaAltitude=Double.parseDouble(ar[9]);
msgPub.publish(new GpsMeasurement(readingTime,latitude,north,longitude,west,quality,numSatellites,horizontalDilutionOfPrecision,antennaAltitude,Double.parseDouble(ar[2]),Double.parseDouble(ar[4])));
setNodeState(NodeState.ON);
return ar[0].length() + ar[1].length() + ar[2].length()+ ar[3].length()+ ar[4].length()+ ar[5].length()+ ar[6].length()+ ar[7].length()+ ar[8].length()+ ar[9].length();
}"
42777,"/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 30) {
    return 0;
  }
  if (buffer[start] != '#') {
    return 1;
  }
  if (buffer[start + 1] != 'Y') {
    return 1;
  }
  if (buffer[start + 2] != 'P') {
    return 1;
  }
  if (buffer[start + 3] != 'R') {
    return 1;
  }
  if (buffer[start + 4] != '=') {
    return 1;
  }
  double[] vals=new double[3];
  String imuRawStr=Arrays.toString(buffer).substring(start + 5,bytesAvailable - 5);
  int origLength=imuRawStr.length();
  for (int i=0; i < 2; i++) {
    int commaIndex=imuRawStr.indexOf(',');
    try {
      Double d=Double.parseDouble(imuRawStr.substring(0,commaIndex));
      vals[i]=d;
    }
 catch (    NumberFormatException nfe) {
      System.out.println(""String_Node_Str"");
      return 1;
    }
    imuRawStr=imuRawStr.substring(commaIndex + 1);
  }
  int hashIndex=imuRawStr.indexOf('#');
  vals[2]=Double.parseDouble(imuRawStr.substring(0,hashIndex));
  imuRawStr=imuRawStr.substring(hashIndex);
  msgPub.publish(new ImuMeasurement(vals[0],vals[1],vals[2]));
  setNodeState(NodeState.ON);
  return 4 + (origLength - imuRawStr.length());
}","/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 30) {
    return 0;
  }
  if (buffer[start] != '#') {
    return 1;
  }
  if (buffer[start + 1] != 'Y') {
    return 1;
  }
  if (buffer[start + 2] != 'P') {
    return 1;
  }
  if (buffer[start + 3] != 'R') {
    return 1;
  }
  if (buffer[start + 4] != '=') {
    return 1;
  }
  double[] vals=new double[3];
  String imuRawStr;
  try {
    imuRawStr=new String(buffer,start + 5,bytesAvailable - 5,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return 1;
  }
  int origLength=imuRawStr.length();
  for (int i=0; i < 2; i++) {
    int commaIndex=imuRawStr.indexOf(',');
    try {
      Double d=Double.parseDouble(imuRawStr.substring(0,commaIndex));
      vals[i]=d;
    }
 catch (    NumberFormatException nfe) {
      System.out.println(""String_Node_Str"");
      return 1;
    }
    imuRawStr=imuRawStr.substring(commaIndex + 1);
  }
  int hashIndex=imuRawStr.indexOf('#');
  vals[2]=Double.parseDouble(imuRawStr.substring(0,hashIndex));
  imuRawStr=imuRawStr.substring(hashIndex);
  msgPub.publish(new ImuMeasurement(vals[0],vals[1],vals[2]));
  setNodeState(NodeState.ON);
  return 4 + (origLength - imuRawStr.length());
}"
42778,"/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 80) {
    return 0;
  }
  if (buffer[start] != '#') {
    return 1;
  }
  if (buffer[start + 1] != 'A') {
    return 1;
  }
  if (buffer[start + 2] != 'C') {
    return 1;
  }
  if (buffer[start + 3] != 'G') {
    return 1;
  }
  if (buffer[start + 4] != '=') {
    return 1;
  }
  double[] vals=new double[9];
  String lightingRawStr=Arrays.toString(buffer).substring(start + 5,bytesAvailable - 5);
  int origLength=lightingRawStr.length();
  for (int i=0; i < 8; i++) {
    int commaIndex=lightingRawStr.indexOf(',');
    try {
      vals[i]=Double.parseDouble(lightingRawStr.substring(0,commaIndex));
    }
 catch (    NumberFormatException nfe) {
      System.out.println(""String_Node_Str"");
      return 1;
    }
    lightingRawStr=lightingRawStr.substring(commaIndex + 1);
  }
  int hashIndex=lightingRawStr.indexOf('#');
  vals[8]=Double.parseDouble(lightingRawStr.substring(0,hashIndex));
  lightingRawStr=lightingRawStr.substring(hashIndex);
  setNodeState(NodeState.ON);
  return 4 + (origLength - lightingRawStr.length());
}","/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  if (bytesAvailable < 80) {
    return 0;
  }
  if (buffer[start] != '#') {
    return 1;
  }
  if (buffer[start + 1] != 'A') {
    return 1;
  }
  if (buffer[start + 2] != 'C') {
    return 1;
  }
  if (buffer[start + 3] != 'G') {
    return 1;
  }
  if (buffer[start + 4] != '=') {
    return 1;
  }
  double[] vals=new double[9];
  String lightingRawStr;
  try {
    lightingRawStr=new String(buffer,start + 5,bytesAvailable - 5,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return 1;
  }
  int origLength=lightingRawStr.length();
  for (int i=0; i < 8; i++) {
    int commaIndex=lightingRawStr.indexOf(',');
    try {
      vals[i]=Double.parseDouble(lightingRawStr.substring(0,commaIndex));
    }
 catch (    NumberFormatException nfe) {
      System.out.println(""String_Node_Str"");
      return 1;
    }
    lightingRawStr=lightingRawStr.substring(commaIndex + 1);
  }
  int hashIndex=lightingRawStr.indexOf('#');
  vals[8]=Double.parseDouble(lightingRawStr.substring(0,hashIndex));
  lightingRawStr=lightingRawStr.substring(hashIndex);
  setNodeState(NodeState.ON);
  return 4 + (origLength - lightingRawStr.length());
}"
42779,"/** 
 * Construct a new   {@link SensorLogger} object
 * @param outputDir {@link File} of the output file directory
 */
public SensorLogger(File outputDir){
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    if (!outputDir.mkdirs())     throw new RuntimeException(""String_Node_Str"");
  }
  File logFile=new File(outputDir,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath());
  PrintStream log;
  try {
    log=new PrintStream(logFile,""String_Node_Str"");
  }
 catch (  FileNotFoundException|UnsupportedEncodingException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + logFile + ""String_Node_Str"");
  }
  logQueue=startLoggingThread(log);
  Gui.getInstance().getControlPanel().getLoggingPanel().setFileName(outputDir + ""String_Node_Str"");
  for (  NodeChannel channel : NodeChannel.values()) {
    new Subscriber(channel.getMsgPath(),(topicName,m) -> logQueue.offer(topicName + ""String_Node_Str"" + m.toLogString()));
  }
}","public SensorLogger(File outputDir){
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    if (!outputDir.mkdirs())     throw new RuntimeException(""String_Node_Str"");
  }
  File logFile=new File(outputDir,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath());
  PrintStream log;
  try {
    log=new PrintStream(logFile,""String_Node_Str"");
  }
 catch (  FileNotFoundException|UnsupportedEncodingException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + logFile + ""String_Node_Str"");
  }
  logQueue=startLoggingThread(log);
  Gui.getInstance().getControlPanel().getLoggingPanel().setFileName(outputDir + ""String_Node_Str"");
  for (  NodeChannel channel : NodeChannel.values()) {
    new Subscriber(channel.getMsgPath(),new MessageListener(){
      @Override public void actionPerformed(      String topicName,      Message m){
        logQueue.offer(topicName + ""String_Node_Str"" + m.toLogString());
      }
    }
);
  }
}"
42780,"/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  RobobuggyLogicNotification.setupLogicException(NodeChannel.LOGIC_EXCEPTION);
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new GpsNode(NodeChannel.GPS,RobobuggyConfigFile.COM_PORT_GPS));
  nodeList.add(new ImuNode(NodeChannel.IMU,RobobuggyConfigFile.COM_PORT_IMU));
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
}","/** 
 * Set of all internal private functions 
 */
private Robot(){
  System.out.println(""String_Node_Str"");
  autonomous=RobobuggyConfigFile.AUTONOMOUS_DEFAULT;
  nodeList=new LinkedList<>();
  RobobuggyLogicNotification.setupLogicException(NodeChannel.LOGIC_EXCEPTION);
  new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
  nodeList.add(new RBSMNode(NodeChannel.ENCODER,NodeChannel.STEERING,RobobuggyConfigFile.COM_PORT_RBSM,COMMAND_PERIOD));
}"
42781,"/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  RBSMessage msg=new RBSMessage(commandedAngle,commandedBrakeEngaged);
  send(msg.getMessageBytes());
}","/** 
 * Used to send the commanded angle and brake state to the Arduino.  {@inheritDoc}
 */
@Override protected void update(){
  commandedAngle=(short)((commandedAngle + 1) % 256);
  System.out.println(""String_Node_Str"" + commandedAngle);
  RBSMessage msg=new RBSMessage(commandedAngle,commandedBrakeEngaged);
  send(msg.getMessageBytes());
}"
42782,"/** 
 * Constructs a new   {@link RobobuggyLogicNotification}
 * @param exception description of the exception that occurred
 * @param level {@link RobobuggyMessageLevel} of the{@link RobobuggyLogicNotification}
 */
public RobobuggyLogicNotification(String exception,RobobuggyMessageLevel level){
  if (shouldMessageBeDisplayed(level)) {
    System.out.println(exception);
  }
  if (errorPub == null) {
    setupLogicException();
  }
  errorPub.publish(new RobobuggyLogicNotificationMeasurment(exception,level));
  if (level == RobobuggyMessageLevel.EXCEPTION) {
  }
}","/** 
 * Constructs a new   {@link RobobuggyLogicNotification}
 * @param exception description of the exception that occurred
 * @param level {@link RobobuggyMessageLevel} of the{@link RobobuggyLogicNotification}
 */
public RobobuggyLogicNotification(String exception,RobobuggyMessageLevel level){
  if (shouldMessageBeDisplayed(level)) {
    System.out.println(exception);
  }
  if (errorPub == null) {
    setupLogicException();
  }
  errorPub.publish(new RobobuggyLogicNotificationMeasurment(exception,level));
}"
42783,"/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  RBPair rbp=RBSerial.peel(buffer,start,bytesAvailable);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
case 1:
  return 1;
case 6:
break;
default :
System.out.println(""String_Node_Str"");
break;
}
RBSerialMessage message=rbp.getMessage();
byte headerByte=message.getHeaderByte();
switch (headerByte) {
case RBSerialMessage.ENC_TICK_SINCE_RESET:
int encoderReading=message.getDataWord();
maxEncoder=Integer.max(encoderReading,maxEncoder);
System.out.println(""String_Node_Str"" + maxEncoder + ""String_Node_Str""+ encoderReading);
encTicks=message.getDataWord() & 0xFFFF;
messagePubEnc.publish(estimateVelocity(message.getDataWord()));
break;
case RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK:
potValue=message.getDataWord();
System.out.println(potValue);
messagePubPot.publish(new SteeringMeasurement(-(potValue + OFFSET) / ARD_TO_DEG));
break;
case RBSerialMessage.RBSM_MID_MEGA_STEER_ANGLE:
steeringAngle=message.getDataWord();
messagePubControllerSteering.publish(new SteeringMeasurement(steeringAngle));
break;
case RBSerialMessage.FP_HASH:
System.out.println(message.getDataWord());
messagePubFp.publish(new FingerPrintMessage(message.getDataWord()));
break;
default :
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
break;
}
setNodeState(NodeState.ON);
return 6;
}","/** 
 * {@inheritDoc}
 */
@Override public int peel(byte[] buffer,int start,int bytesAvailable){
  RBPair rbp=RBSerial.peel(buffer,start,bytesAvailable);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
case 1:
  return 1;
case 6:
break;
default :
System.out.println(""String_Node_Str"");
break;
}
RBSerialMessage message=rbp.getMessage();
byte headerByte=message.getHeaderByte();
switch (headerByte) {
case RBSerialMessage.ENC_TICK_SINCE_RESET:
encTicks=message.getDataWord() & 0xFFFF;
messagePubEnc.publish(estimateVelocity(message.getDataWord()));
break;
case RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK:
potValue=message.getDataWord();
System.out.println(potValue);
messagePubPot.publish(new SteeringMeasurement(-(potValue + OFFSET) / ARD_TO_DEG));
break;
case RBSerialMessage.RBSM_MID_MEGA_STEER_ANGLE:
steeringAngle=message.getDataWord();
messagePubControllerSteering.publish(new SteeringMeasurement(steeringAngle));
break;
case RBSerialMessage.FP_HASH:
System.out.println(message.getDataWord());
messagePubFp.publish(new FingerPrintMessage(message.getDataWord()));
break;
default :
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.NOTE);
break;
}
setNodeState(NodeState.ON);
return 6;
}"
42784,"@Override public void run(){
  System.out.println(""String_Node_Str"");
  try {
    JSONParser parser=new JSONParser();
    FileReader reader=new FileReader(path);
    JSONObject completeLogFile=(JSONObject)parser.parse(reader);
    Date loggingDate=new Date();
    long prevTimeInMillis=loggingDate.getTime();
    JSONArray sensorDataArray=(JSONArray)completeLogFile.get(""String_Node_Str"");
    long sensorStartTimeInMilis=0;
    for (    Object senObj : sensorDataArray) {
      JSONObject sensor=(JSONObject)senObj;
      Date sensorTimestamp=RobobuggyDateFormatter.formatRobobuggyDate((String)sensor.get(""String_Node_Str""));
      long currentSensorTimeInMillis=sensorTimestamp.getTime();
      long currentTime=loggingDate.getTime();
      if (sensorStartTimeInMilis == 0) {
        sensorStartTimeInMilis=currentSensorTimeInMillis;
      }
      long sensorTimeFromStart=currentSensorTimeInMillis - sensorStartTimeInMilis;
      long realTimeFromStart=currentTime - prevTimeInMillis;
      long playbackSpeed=100;
      long sleepTime=playbackSpeed * realTimeFromStart - sensorTimeFromStart;
      new RobobuggyLogicNotification(""String_Node_Str"" + sleepTime,RobobuggyMessageLevel.NOTE);
      if (sleepTime < 0 && false) {
        Thread.sleep(-sleepTime / 1000000);
      }
      String sensorName=(String)sensor.get(""String_Node_Str"");
      if (sensorName == null) {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      }
 else {
        JSONObject sensorParams=(JSONObject)sensor.get(""String_Node_Str"");
        System.out.println(sensorName);
switch (sensorName) {
case ""String_Node_Str"":
          double yaw=(double)sensorParams.get(""String_Node_Str"");
        double pitch=(double)sensorParams.get(""String_Node_Str"");
      double roll=(double)sensorParams.get(""String_Node_Str"");
    imuPub.publish(new ImuMeasurement(yaw,pitch,roll));
  break;
case ""String_Node_Str"":
double latitude=(double)sensorParams.get(""String_Node_Str"");
double longitude=(double)sensorParams.get(""String_Node_Str"");
String latDir=(String)sensorParams.get(""String_Node_Str"");
String longDir=(String)sensorParams.get(""String_Node_Str"");
boolean north=latDir.equals(""String_Node_Str"");
boolean west=longDir.equals(""String_Node_Str"");
String gpsTimestampString=(String)sensor.get(""String_Node_Str"");
Date gpsTimestamp=RobobuggyDateFormatter.formatRobobuggyDate(gpsTimestampString);
int qualityValue=Integer.valueOf((String)sensorParams.get(""String_Node_Str""));
int numSatellites=Integer.valueOf((String)sensorParams.get(""String_Node_Str""));
double hdop=(double)sensorParams.get(""String_Node_Str"");
double antennaAlt=(double)sensorParams.get(""String_Node_Str"");
double rawLat=(double)sensorParams.get(""String_Node_Str"");
double rawLon=(double)sensorParams.get(""String_Node_Str"");
gpsPub.publish(new GpsMeasurement(gpsTimestamp,latitude,north,longitude,west,qualityValue,numSatellites,hdop,antennaAlt,rawLat,rawLon));
break;
case ""String_Node_Str"":
String loggingStatus=(String)sensorParams.get(""String_Node_Str"");
GuiLoggingButtonMessage.LoggingMessage loggingMessage=LoggingMessage.STOP;
switch (loggingStatus) {
case ""String_Node_Str"":
loggingMessage=LoggingMessage.START;
break;
case ""String_Node_Str"":
loggingMessage=LoggingMessage.STOP;
break;
default :
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
break;
}
loggingButtonPub.publish(new GuiLoggingButtonMessage(loggingMessage));
break;
case ""String_Node_Str"":
double steeringAngle=(double)sensorParams.get(""String_Node_Str"");
steeringPub.publish(new SteeringMeasurement((int)steeringAngle));
break;
case ""String_Node_Str"":
double dataword=(double)sensorParams.get(""String_Node_Str"");
double distance=(double)sensorParams.get(""String_Node_Str"");
double velocity=0;
if (sensorParams.get(""String_Node_Str"") != null) velocity=(double)sensorParams.get(""String_Node_Str"");
double accel=0;
if (sensorParams.get(""String_Node_Str"") != null) accel=(double)sensorParams.get(""String_Node_Str"");
String timestampString=(String)sensor.get(""String_Node_Str"");
Date timestamp=RobobuggyDateFormatter.formatRobobuggyDate(timestampString);
encoderPub.publish(new EncoderMeasurement(timestamp,dataword,distance,velocity,accel));
break;
case ""String_Node_Str"":
break;
default :
break;
}
}
}
}
 catch (IOException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
}
catch (InterruptedException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
}
catch (ParseException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
}
}","@Override public void run(){
  System.out.println(""String_Node_Str"");
  try {
    JSONParser parser=new JSONParser();
    InputStreamReader reader=new InputStreamReader(new FileInputStream(path),""String_Node_Str"");
    JSONObject completeLogFile=(JSONObject)parser.parse(reader);
    Date loggingDate=new Date();
    long prevTimeInMillis=loggingDate.getTime();
    JSONArray sensorDataArray=(JSONArray)completeLogFile.get(""String_Node_Str"");
    long sensorStartTimeInMilis=0;
    for (    Object senObj : sensorDataArray) {
      JSONObject sensor=(JSONObject)senObj;
      Date sensorTimestamp=RobobuggyDateFormatter.formatRobobuggyDate((String)sensor.get(""String_Node_Str""));
      long currentSensorTimeInMillis=sensorTimestamp.getTime();
      long currentTime=loggingDate.getTime();
      if (sensorStartTimeInMilis == 0) {
        sensorStartTimeInMilis=currentSensorTimeInMillis;
      }
      long sensorTimeFromStart=currentSensorTimeInMillis - sensorStartTimeInMilis;
      long realTimeFromStart=currentTime - prevTimeInMillis;
      long playbackSpeed=100;
      long sleepTime=playbackSpeed * realTimeFromStart - sensorTimeFromStart;
      new RobobuggyLogicNotification(""String_Node_Str"" + sleepTime,RobobuggyMessageLevel.NOTE);
      if (sleepTime < 0 && false) {
        Thread.sleep(-sleepTime / 1000000);
      }
      String sensorName=(String)sensor.get(""String_Node_Str"");
      if (sensorName == null) {
        new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
      }
 else {
        JSONObject sensorParams=(JSONObject)sensor.get(""String_Node_Str"");
        System.out.println(sensorName);
switch (sensorName) {
case ""String_Node_Str"":
          double yaw=(double)sensorParams.get(""String_Node_Str"");
        double pitch=(double)sensorParams.get(""String_Node_Str"");
      double roll=(double)sensorParams.get(""String_Node_Str"");
    imuPub.publish(new ImuMeasurement(yaw,pitch,roll));
  break;
case ""String_Node_Str"":
double latitude=(double)sensorParams.get(""String_Node_Str"");
double longitude=(double)sensorParams.get(""String_Node_Str"");
String latDir=(String)sensorParams.get(""String_Node_Str"");
String longDir=(String)sensorParams.get(""String_Node_Str"");
boolean north=latDir.equals(""String_Node_Str"");
boolean west=longDir.equals(""String_Node_Str"");
String gpsTimestampString=(String)sensor.get(""String_Node_Str"");
Date gpsTimestamp=RobobuggyDateFormatter.formatRobobuggyDate(gpsTimestampString);
int qualityValue=Integer.parseInt((String)sensorParams.get(""String_Node_Str""));
int numSatellites=Integer.parseInt((String)sensorParams.get(""String_Node_Str""));
double hdop=(double)sensorParams.get(""String_Node_Str"");
double antennaAlt=(double)sensorParams.get(""String_Node_Str"");
double rawLat=(double)sensorParams.get(""String_Node_Str"");
double rawLon=(double)sensorParams.get(""String_Node_Str"");
gpsPub.publish(new GpsMeasurement(gpsTimestamp,latitude,north,longitude,west,qualityValue,numSatellites,hdop,antennaAlt,rawLat,rawLon));
break;
case ""String_Node_Str"":
String loggingStatus=(String)sensorParams.get(""String_Node_Str"");
GuiLoggingButtonMessage.LoggingMessage loggingMessage=LoggingMessage.STOP;
switch (loggingStatus) {
case ""String_Node_Str"":
loggingMessage=LoggingMessage.START;
break;
case ""String_Node_Str"":
loggingMessage=LoggingMessage.STOP;
break;
default :
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
break;
}
loggingButtonPub.publish(new GuiLoggingButtonMessage(loggingMessage));
break;
case ""String_Node_Str"":
double steeringAngle=(double)sensorParams.get(""String_Node_Str"");
steeringPub.publish(new SteeringMeasurement((int)steeringAngle));
break;
case ""String_Node_Str"":
double dataword=(double)sensorParams.get(""String_Node_Str"");
double distance=(double)sensorParams.get(""String_Node_Str"");
double velocity=0;
if (sensorParams.get(""String_Node_Str"") != null) velocity=(double)sensorParams.get(""String_Node_Str"");
double accel=0;
if (sensorParams.get(""String_Node_Str"") != null) accel=(double)sensorParams.get(""String_Node_Str"");
String timestampString=(String)sensor.get(""String_Node_Str"");
Date timestamp=RobobuggyDateFormatter.formatRobobuggyDate(timestampString);
encoderPub.publish(new EncoderMeasurement(timestamp,dataword,distance,velocity,accel));
break;
case ""String_Node_Str"":
break;
default :
break;
}
}
}
}
 catch (IOException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
}
catch (InterruptedException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.WARNING);
}
catch (ParseException e) {
new RobobuggyLogicNotification(""String_Node_Str"",RobobuggyMessageLevel.EXCEPTION);
}
}"
42785,"private void init(File outputDir,String outputFilename,Date startTime){
  if (outputDir == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    outputDir.mkdirs();
  }
  File csvFile=new File(outputDir,outputFilename + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + outputFilename);
  try {
    csvOutstream=new PrintStream(csvFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + csvFile + ""String_Node_Str"");
  }
  new Thread(new CsvWriter(csvOutstream)).start();
}","private void init(File outputDir,String outputFilename,Date startTime){
  if (outputDir == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    if (!outputDir.mkdirs())     throw new RuntimeException(""String_Node_Str"");
  }
  File csvFile=new File(outputDir,outputFilename + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + outputFilename);
  try {
    csvOutstream=new PrintStream(csvFile,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + csvFile + ""String_Node_Str"");
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  new Thread(new CsvWriter(csvOutstream)).start();
}"
42786,"/** 
 * Creates a new log file to record data in using the   {@link RobotLegger}
 */
public static void createLog(){
  getInstance();
  if (instance != null) {
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
    logFolder=new File(logDir,df.format(new Date()));
    logFolder.mkdirs();
    File msgFile=new File(logFolder,""String_Node_Str"");
    sensor=new SensorLogger(logFolder,new Date());
    try {
      msgFile.createNewFile();
      Handler handler=new StreamHandler(new FileOutputStream(msgFile),new SimpleFormatter());
      instance.message.addHandler(handler);
      System.out.println(""String_Node_Str"" + msgFile.getAbsolutePath());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + msgFile + ""String_Node_Str"");
    }
catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + msgFile + ""String_Node_Str"");
    }
  }
}","/** 
 * Creates a new log file to record data in using the   {@link RobotLegger}
 */
public static void createLog(){
  getInstance();
  if (instance != null) {
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
    logFolder=new File(logDir,df.format(new Date()));
    if (!logFolder.mkdirs())     throw new RuntimeException(""String_Node_Str"");
    File msgFile=new File(logFolder,""String_Node_Str"");
    sensor=new SensorLogger(logFolder,new Date());
    try {
      if (!msgFile.createNewFile())       throw new RuntimeException(""String_Node_Str"");
      Handler handler=new StreamHandler(new FileOutputStream(msgFile),new SimpleFormatter());
      instance.message.addHandler(handler);
      System.out.println(""String_Node_Str"" + msgFile.getAbsolutePath());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + msgFile + ""String_Node_Str"");
    }
catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + msgFile + ""String_Node_Str"");
    }
  }
}"
42787,"/** 
 * Returns a reference to the one   {@link RobotLogger} object.If no  {@link RobotLogger} object exists, one will be constructed.
 * @return a reference to the one {@link RobotLogger} object
 */
public static RobotLogger getInstance(){
  if (instance == null) {
    logDir=new File(Config.LOG_FILE_LOCATION);
    logDir.mkdirs();
    try {
      instance=new RobotLogger(logDir);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return instance;
}","/** 
 * Returns a reference to the one   {@link RobotLogger} object.If no  {@link RobotLogger} object exists, one will be constructed.
 * @return a reference to the one {@link RobotLogger} object
 */
public static RobotLogger getInstance(){
  if (instance == null) {
    logDir=new File(Config.LOG_FILE_LOCATION);
    if (!logDir.mkdirs())     throw new RuntimeException(""String_Node_Str"");
    try {
      instance=new RobotLogger(logDir);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return instance;
}"
42788,"/** 
 * Construct a new   {@link SensorLogger} object
 * @param outputDir {@link File} of the output file directory
 * @param startTime {@link Date} of the start time of the logger
 */
public SensorLogger(File outputDir,Date startTime){
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    outputDir.mkdirs();
  }
  File logFile=new File(outputDir,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath());
  try {
    log=new PrintStream(logFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + logFile + ""String_Node_Str"");
  }
  logQueue=startLoggingThread(log);
  subscribers=new ArrayList<Subscriber>();
  for (  NodeChannel channel : NodeChannel.values()) {
    subscribers.add(new Subscriber(channel.getMsgPath(),new MessageListener(){
      @Override public void actionPerformed(      String topicName,      Message m){
        logQueue.offer(topicName + ""String_Node_Str"" + m.toLogString());
      }
    }
));
  }
}","/** 
 * Construct a new   {@link SensorLogger} object
 * @param outputDir {@link File} of the output file directory
 * @param startTime {@link Date} of the start time of the logger
 */
public SensorLogger(File outputDir,Date startTime){
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (!outputDir.exists()) {
    if (!outputDir.mkdirs())     throw new RuntimeException(""String_Node_Str"");
  }
  File logFile=new File(outputDir,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath());
  try {
    log=new PrintStream(logFile,""String_Node_Str"");
  }
 catch (  FileNotFoundException|UnsupportedEncodingException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + logFile + ""String_Node_Str"");
  }
  logQueue=startLoggingThread(log);
  subscribers=new ArrayList<Subscriber>();
  for (  NodeChannel channel : NodeChannel.values()) {
    subscribers.add(new Subscriber(channel.getMsgPath(),new MessageListener(){
      @Override public void actionPerformed(      String topicName,      Message m){
        logQueue.offer(topicName + ""String_Node_Str"" + m.toLogString());
      }
    }
));
  }
}"
42789,"public static void printSensorData(String sensorname,StringTokenizer st,PrintStream writer){
switch (sensorname) {
case ""String_Node_Str"":
    String angle=st.nextToken();
  Double potValue=Double.parseDouble(angle);
potValue=-(potValue + OFFSET) / ARD_TO_DEG;
angle=potValue.toString();
writer.print(""String_Node_Str"" + angle + ""String_Node_Str"");
break;
case ""String_Node_Str"":
String dataword=st.nextToken();
String d=st.nextToken();
String v=st.nextToken();
String a=st.nextToken();
if (""String_Node_Str"".equals(dataword)) {
dataword=""String_Node_Str"";
}
if (""String_Node_Str"".equals(d)) {
d=""String_Node_Str"";
}
if (""String_Node_Str"".equals(v)) {
v=""String_Node_Str"";
}
if (""String_Node_Str"".equals(a)) {
a=""String_Node_Str"";
}
writer.print(""String_Node_Str"" + dataword + ""String_Node_Str""+ d+ ""String_Node_Str""+ v+ ""String_Node_Str""+ a+ ""String_Node_Str"");
break;
case ""String_Node_Str"":
writer.print(""String_Node_Str"" + st.nextToken().toLowerCase() + ""String_Node_Str"");
break;
case ""String_Node_Str"":
st.nextToken();
writer.print(""String_Node_Str"" + st.nextToken() + ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str"");
writer.print(""String_Node_Str"" + st.nextToken() + ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str"");
break;
case ""String_Node_Str"":
String yaw=st.nextToken();
String pitch=st.nextToken();
String roll=st.nextToken();
writer.print(""String_Node_Str"" + roll + ""String_Node_Str""+ pitch+ ""String_Node_Str""+ yaw+ ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + sensorname);
}
}","public static void printSensorData(String sensorname,StringTokenizer st,PrintStream writer){
switch (sensorname) {
case ""String_Node_Str"":
    String angle=st.nextToken();
  Double potValue=Double.parseDouble(angle);
potValue=-(potValue + OFFSET) / ARD_TO_DEG;
angle=potValue.toString();
writer.print(""String_Node_Str"" + angle + ""String_Node_Str"");
break;
case ""String_Node_Str"":
String dataword=st.nextToken();
String d=st.nextToken();
String v=st.nextToken();
String a=st.nextToken();
if (""String_Node_Str"".equals(dataword) || dataword.contains(""String_Node_Str"")) {
dataword=""String_Node_Str"";
}
if (""String_Node_Str"".equals(d) || d.contains(""String_Node_Str"")) {
d=""String_Node_Str"";
}
if (""String_Node_Str"".equals(v) || v.contains(""String_Node_Str"")) {
v=""String_Node_Str"";
}
if (""String_Node_Str"".equals(a) || a.contains(""String_Node_Str"")) {
a=""String_Node_Str"";
}
writer.print(""String_Node_Str"" + dataword + ""String_Node_Str""+ d+ ""String_Node_Str""+ v+ ""String_Node_Str""+ a+ ""String_Node_Str"");
break;
case ""String_Node_Str"":
writer.print(""String_Node_Str"" + st.nextToken().toLowerCase() + ""String_Node_Str"");
break;
case ""String_Node_Str"":
st.nextToken();
writer.print(""String_Node_Str"" + st.nextToken() + ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str"");
writer.print(""String_Node_Str"");
writer.print(""String_Node_Str"" + st.nextToken() + ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str""+ st.nextToken()+ ""String_Node_Str"");
break;
case ""String_Node_Str"":
String yaw=st.nextToken();
String pitch=st.nextToken();
String roll=st.nextToken();
writer.print(""String_Node_Str"" + roll + ""String_Node_Str""+ pitch+ ""String_Node_Str""+ yaw+ ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + sensorname);
}
}"
42790,"public static void main(String[] args) throws IOException {
  boolean fileinput=false;
  Scanner scanner;
  PrintStream writer;
  if (fileinput) {
    scanner=new Scanner(System.in);
    System.out.println(""String_Node_Str"");
    String inputpath=scanner.nextLine();
    System.out.println(""String_Node_Str"");
    String outputpath=scanner.nextLine();
    scanner.close();
    scanner=new Scanner(new File(inputpath));
    writer=new PrintStream(new File(outputpath));
  }
 else {
    scanner=new Scanner(new File(""String_Node_Str""));
    writer=new PrintStream(new File(""String_Node_Str""));
  }
  String s=scanner.nextLine();
  StringTokenizer st=new StringTokenizer(s,""String_Node_Str"");
  String type=st.nextToken().substring(8);
  StringTokenizer st2=new StringTokenizer(st.nextToken(),""String_Node_Str"");
  StringTokenizer stdate=new StringTokenizer(st2.nextToken(),""String_Node_Str"");
  String[] dateymd={stdate.nextToken(),stdate.nextToken(),stdate.nextToken()};
  String date_recorded=dateymd[1] + ""String_Node_Str"" + dateymd[2]+ ""String_Node_Str""+ dateymd[0];
  String timestamp=st2.nextToken();
  String logname=""String_Node_Str"";
  String schema_version=""String_Node_Str"";
  String software_version=""String_Node_Str"";
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + logname + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + schema_version + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + date_recorded + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + software_version + ""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writeSensorData(scanner,writer,st,type,timestamp);
  while (scanner.hasNextLine()) {
    s=scanner.nextLine();
    st=new StringTokenizer(s,""String_Node_Str"");
    type=st.nextToken().substring(8);
    st2=new StringTokenizer(st.nextToken(),""String_Node_Str"");
    timestamp=st2.nextToken() + ""String_Node_Str"" + st2.nextToken();
    writeSensorData(scanner,writer,st,type,timestamp);
  }
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  for (int x=0; x < sensor_type.size(); x++) {
    writer.print(""String_Node_Str"" + sensor_type.get(x) + ""String_Node_Str""+ sensor_quant.get(x));
    if (x < sensor_type.size() - 1) {
      writer.print(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  boolean fileinput=false;
  Scanner scanner;
  PrintStream writer;
  if (fileinput) {
    scanner=new Scanner(System.in);
    System.out.println(""String_Node_Str"");
    String inputpath=scanner.nextLine();
    System.out.println(""String_Node_Str"");
    String outputpath=scanner.nextLine();
    scanner.close();
    scanner=new Scanner(new File(inputpath));
    writer=new PrintStream(new File(outputpath));
  }
 else {
    scanner=new Scanner(new File(""String_Node_Str""));
    writer=new PrintStream(new File(""String_Node_Str""));
  }
  String s=scanner.nextLine();
  StringTokenizer st=new StringTokenizer(s,""String_Node_Str"");
  String type=st.nextToken().substring(8);
  StringTokenizer st2=new StringTokenizer(st.nextToken(),""String_Node_Str"");
  String date=st2.nextToken();
  StringTokenizer stdate=new StringTokenizer(date,""String_Node_Str"");
  String[] dateymd={stdate.nextToken(),stdate.nextToken(),stdate.nextToken()};
  String date_recorded=dateymd[1] + ""String_Node_Str"" + dateymd[2]+ ""String_Node_Str""+ dateymd[0];
  String timestamp=date + ""String_Node_Str"" + st2.nextToken();
  String logname=""String_Node_Str"";
  String schema_version=""String_Node_Str"";
  String software_version=""String_Node_Str"";
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + logname + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + schema_version + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + date_recorded + ""String_Node_Str"");
  writer.println(""String_Node_Str"" + software_version + ""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writeSensorData(scanner,writer,st,type,timestamp);
  while (scanner.hasNextLine()) {
    s=scanner.nextLine();
    st=new StringTokenizer(s,""String_Node_Str"");
    type=st.nextToken().substring(8);
    st2=new StringTokenizer(st.nextToken(),""String_Node_Str"");
    timestamp=st2.nextToken() + ""String_Node_Str"" + st2.nextToken();
    writeSensorData(scanner,writer,st,type,timestamp);
  }
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  for (int x=0; x < sensor_type.size(); x++) {
    writer.print(""String_Node_Str"" + sensor_type.get(x) + ""String_Node_Str""+ sensor_quant.get(x));
    if (x < sensor_type.size() - 1) {
      writer.print(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
42791,"@SuppressWarnings(""String_Node_Str"") public static JSONObject translatePeelMessageToJObject(String message){
  JSONObject data=new JSONObject();
  JSONObject params=new JSONObject();
  String[] messageData=message.split(""String_Node_Str"");
  params.put(""String_Node_Str"",Float.valueOf(messageData[3]));
  params.put(""String_Node_Str"",messageData[4]);
  params.put(""String_Node_Str"",Float.valueOf(messageData[5]));
  params.put(""String_Node_Str"",messageData[6]);
  params.put(""String_Node_Str"",messageData[7]);
  params.put(""String_Node_Str"",messageData[8]);
  params.put(""String_Node_Str"",Float.valueOf(messageData[9]));
  params.put(""String_Node_Str"",Float.valueOf(messageData[10]));
  data.put(""String_Node_Str"",messageData[1]);
  data.put(""String_Node_Str"",""String_Node_Str"");
  data.put(""String_Node_Str"",params);
  return data;
}","@SuppressWarnings(""String_Node_Str"") public static JSONObject translatePeelMessageToJObject(String message){
  JSONObject data=new JSONObject();
  JSONObject params=new JSONObject();
  String[] messageData=message.split(""String_Node_Str"");
  params.put(""String_Node_Str"",Double.valueOf(messageData[3]));
  params.put(""String_Node_Str"",messageData[4]);
  params.put(""String_Node_Str"",Double.valueOf(messageData[5]));
  params.put(""String_Node_Str"",messageData[6]);
  params.put(""String_Node_Str"",messageData[7]);
  params.put(""String_Node_Str"",messageData[8]);
  params.put(""String_Node_Str"",Double.valueOf(messageData[9]));
  params.put(""String_Node_Str"",Float.valueOf(messageData[10]));
  data.put(""String_Node_Str"",messageData[1]);
  data.put(""String_Node_Str"",""String_Node_Str"");
  data.put(""String_Node_Str"",params);
  return data;
}"
42792,"@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
case 1:
  return 1;
case 6:
break;
default :
{
System.out.println(""String_Node_Str"");
}
}
RBSerialMessage message=rbp.getMessage();
if (message.getHeaderByte() == RBSerialMessage.ENC_TICK_SINCE_RESET) {
encTicks=message.getDataWord() & 0xFFF;
messagePub_enc.publish(estimateVelocity(message.getDataWord()));
System.out.println(encTicks);
}
 else if (message.getHeaderByte() == RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK) {
potValue=message.getDataWord();
System.out.println(potValue);
messagePub_pot.publish(new SteeringMeasurement(-(potValue + OFFSET) / ARD_TO_DEG));
}
 else if (message.getHeaderByte() == RBSerialMessage.FP_HASH) {
System.out.println(message.getDataWord());
}
return 6;
}","@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
  break;
case 1:
return 1;
break;
case 6:
break;
default :
{
System.out.println(""String_Node_Str"");
break;
}
}
RBSerialMessage message=rbp.getMessage();
if (message.getHeaderByte() == RBSerialMessage.ENC_TICK_SINCE_RESET) {
encTicks=message.getDataWord() & 0xFFF;
messagePub_enc.publish(estimateVelocity(message.getDataWord()));
System.out.println(encTicks);
}
 else if (message.getHeaderByte() == RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK) {
potValue=message.getDataWord();
System.out.println(potValue);
messagePub_pot.publish(new SteeringMeasurement(-(potValue + OFFSET) / ARD_TO_DEG));
}
 else if (message.getHeaderByte() == RBSerialMessage.FP_HASH) {
System.out.println(message.getDataWord());
}
return 6;
}"
42793,"public ControlPanel(){
  logging_button_pub=new Publisher(SensorChannel.GUI_LOGGING_BUTTON.getMsgPath());
  timer=new Timer(10,new timerHandler());
  timer.setDelay(100);
  timer.setRepeats(true);
  startTime=new Date(0);
  this.setBorder(BorderFactory.createLineBorder(Color.black));
  this.setLayout(new GridBagLayout());
  this.setBackground(Color.DARK_GRAY);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.weightx=1;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.fill=GridBagConstraints.BOTH;
  addLoggingPanel(gbc);
  gbc.gridy=1;
  addSensorSwitchPanel(gbc);
}","public ControlPanel(){
  logging_button_pub=new Publisher(SensorChannel.GUI_LOGGING_BUTTON.getMsgPath());
  timer=new Timer(10,new timerHandler());
  timer.setDelay(100);
  timer.setRepeats(true);
  startTime=new Date();
  this.setBorder(BorderFactory.createLineBorder(Color.black));
  this.setLayout(new GridBagLayout());
  this.setBackground(Color.DARK_GRAY);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.weightx=1;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.fill=GridBagConstraints.BOTH;
  addLoggingPanel(gbc);
  gbc.gridy=1;
  addSensorSwitchPanel(gbc);
}"
42794,"@Override public int baudRate(){
  return 9600;
}","@Override public int baudRate(){
  return 115200;
}"
42795,"@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
case 1:
  return 1;
case 6:
break;
default :
{
System.out.println(""String_Node_Str"");
}
}
RBSerialMessage message=rbp.getMessage();
if (message.getHeaderByte() == RBSerialMessage.ENC_TICKS_SINCE_LAST) {
encTicks+=message.getDataWord();
estimateVelocity(message.getDataWord());
System.out.println(encTicks);
}
if (message.getHeaderByte() == RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK) {
potValue=message.getDataWord();
System.out.println(potValue);
messagePub_pot.publish(new SteeringMeasurement(potValue));
}
return 6;
}","@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
switch (rbp.getNumberOfBytesRead()) {
case 0:
    return 0;
case 1:
  return 1;
case 6:
break;
default :
{
System.out.println(""String_Node_Str"");
}
}
RBSerialMessage message=rbp.getMessage();
if (message.getHeaderByte() == RBSerialMessage.ENC_TICK_SINCE_RESET) {
encTicks=message.getDataWord() & 0xFFF;
estimateVelocity(message.getDataWord());
System.out.println(encTicks);
}
if (message.getHeaderByte() == RBSerialMessage.RBSM_MID_MEGA_STEER_FEEDBACK) {
potValue=message.getDataWord();
System.out.println(potValue);
messagePub_pot.publish(new SteeringMeasurement(potValue));
}
return 6;
}"
42796,"private static int parseInt(byte[] buf,int start,int num_elements){
  int val=0;
  val|=buf[(start + 1) % buf.length];
  val=val << 0x8;
  val|=buf[(start + 2) % buf.length];
  val=val << 0x8;
  val|=buf[(start + 3) % buf.length];
  val=val << 0x8;
  val|=buf[(start + 4) % buf.length];
  return val;
}","private static int parseInt(byte[] buf,int start,int num_elements){
  int val=0;
  val+=(int)buf[(start + 1) % buf.length] & 0xff;
  val=val << 0x8;
  val+=(int)buf[(start + 2) % buf.length] & 0xff;
  val=val << 0x8;
  val+=(int)buf[(start + 3) % buf.length] & 0xff;
  val=val << 0x8;
  val+=(int)buf[(start + 4) % buf.length] & 0xff;
  return val;
}"
42797,"public static boolean isValidHeader(byte headerByte){
switch (headerByte) {
default :
    return false;
case ENC_MS_SINCE_RESET:
case ENC_TICK_SINCE_RESET:
case ENC_TICKS_SINCE_LAST:
case STEERING:
case BRAKE:
case AUTO:
case BATTERY:
case ERROR:
case DEVICE_ID:
  return true;
}
}","public static boolean isValidHeader(byte headerByte){
switch (headerByte) {
default :
    return false;
case ENC_MS_SINCE_RESET:
case ENC_TICK_SINCE_RESET:
case ENC_TICKS_SINCE_LAST:
case STEERING:
case BRAKE:
case AUTO:
case BATTERY:
case RBSM_MID_MEGA_STEER_FEEDBACK:
case ERROR:
case DEVICE_ID:
  return true;
}
}"
42798,"@Override public long timeOfLastUpdate(){
  return 0;
}","public long timeOfLastUpdate(){
  return 0;
}"
42799,"@Override public SensorState getState(){
  return this.state;
}","public SensorState getState(){
  return this.state;
}"
42800,"@Override public boolean isConnected(){
  return this.connected;
}","public boolean isConnected(){
  return this.connected;
}"
42801,"@Override public boolean close(){
  if (connected) {
    try {
      frontFeed.release();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    try {
      rearFeed.release();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    frontPanel.setVisible(false);
    rearPanel.setVisible(false);
  }
  connected=false;
  state=SensorState.DISCONNECTED;
  return false;
}","public boolean close(){
  if (connected) {
    try {
      frontFeed.release();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    try {
      rearFeed.release();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    frontPanel.setVisible(false);
    rearPanel.setVisible(false);
  }
  connected=false;
  state=SensorState.DISCONNECTED;
  return false;
}"
42802,"@Override public SensorType getSensorType(){
  return this.sensorType;
}","public SensorType getSensorType(){
  return this.sensorType;
}"
42803,"private void step(){
  while (true) {
    encoderPub.publish(new EncoderMeasurement(10,2));
    gpsPub.publish(new GpsMeasurement(42.00f,-76.00f));
    imuPub.publish(new ImuMeasurement(0,0,1,2,3,4,5,6,7));
    reqAnglePub.publish(new RemoteWheelAngleRequest(0.5));
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void step(){
  while (true) {
    encoderPub.publish(new EncoderMeasurement(10,2));
    gpsPub.publish(new GpsMeasurement(null,null,42.00f,false,-76.00f,false,0,0,brake_down,brake_down));
    imuPub.publish(new ImuMeasurement(0,0,1,2,3,4,5,6,7));
    reqAnglePub.publish(new RemoteWheelAngleRequest(0.5));
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
42804,"private void findPort(int baudrate,String header,String owner){
  SerialPort port;
  CommPortIdentifier port_id;
  int TIMEOUT=0;
  int BUFFER_SIZE=512;
  InputStream input;
  OutputStream output;
  int index=0;
  boolean connected;
  char[] inputBuffer;
  Enumeration<CommPortIdentifier> port_list=CommPortIdentifier.getPortIdentifiers();
  while (port_list.hasMoreElements()) {
    port_id=(CommPortIdentifier)port_list.nextElement();
    if (port_id.getPortType() != CommPortIdentifier.PORT_SERIAL) {
      continue;
    }
    System.out.println(""String_Node_Str"" + port_id.getName());
    try {
      port=(SerialPort)port_id.open(owner,TIMEOUT);
      port.setInputBufferSize(BUFFER_SIZE);
      port.setSerialPortParams(baudrate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      input=port.getInputStream();
      output=port.getOutputStream();
      if (isCorrectPort(input,header,512)) {
        port.notifyOnDataAvailable(true);
        inputBuffer=new char[BUFFER_SIZE];
        index=0;
        connected=true;
        port.addEventListener(this);
        System.out.println(""String_Node_Str"" + port.getName());
        return;
      }
      port.close();
      input.close();
      output.close();
    }
 catch (    PortInUseException e) {
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(""String_Node_Str"" + owner);
}","private void findPort(int baudrate,String header,String owner,SerialNode sn){
  SerialPort port;
  CommPortIdentifier port_id;
  int TIMEOUT=0;
  int BUFFER_SIZE=512;
  InputStream input;
  OutputStream output;
  int index=0;
  boolean connected;
  char[] inputBuffer;
  Enumeration<CommPortIdentifier> port_list=CommPortIdentifier.getPortIdentifiers();
  while (port_list.hasMoreElements()) {
    port_id=(CommPortIdentifier)port_list.nextElement();
    if (port_id.getPortType() != CommPortIdentifier.PORT_SERIAL) {
      continue;
    }
    System.out.println(""String_Node_Str"" + port_id.getName());
    try {
      port=(SerialPort)port_id.open(owner,TIMEOUT);
      port.setInputBufferSize(BUFFER_SIZE);
      port.setSerialPortParams(baudrate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      input=port.getInputStream();
      output=port.getOutputStream();
      if (isCorrectPort(sn,input,header,512)) {
        port.notifyOnDataAvailable(true);
        inputBuffer=new char[BUFFER_SIZE];
        index=0;
        connected=true;
        System.out.println(""String_Node_Str"" + port.getName());
        return;
      }
      port.close();
      input.close();
      output.close();
    }
 catch (    PortInUseException e) {
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(""String_Node_Str"" + owner);
}"
42805,"@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
  int bytes_read=rbp.get_num_bytes_read();
  RBSerialMessage message=rbp.getMessage();
  byte b=message.getHeaderByte();
  if (b == RBSerialMessage.BRAKE) {
  }
 else   if (b == RBSerialMessage.STEERING) {
  }
 else   if (b == RBSerialMessage.DEVICE_ID) {
  }
  return bytes_read;
}","@Override public int peel(byte[] buffer,int start,int bytes_available){
  RBPair rbp=RBSerial.peel(buffer,start,bytes_available);
  int bytes_read=rbp.getNumberOfBytesRead();
  RBSerialMessage message=rbp.getMessage();
  byte b=message.getHeaderByte();
  if (b == RBSerialMessage.BRAKE) {
  }
 else   if (b == RBSerialMessage.STEERING) {
  }
 else   if (b == RBSerialMessage.DEVICE_ID) {
  }
  return bytes_read;
}"
42806,"public static void UpdateImu(float aX,float aY,float aZ,float rX,float rY,float rZ,float mX,float mY,float mZ){
  if (config.logging) {
    RobotLogger rl=RobotLogger.getInstance();
    float[] acc={aX,aY,aZ};
    float[] gyro={rX,rY,rZ};
    float[] compass={mX,mY,mZ};
    if (config.active) {
    }
  }
}","public static void UpdateImu(float aX,float aY,float aZ,float rX,float rY,float rZ,float mX,float mY,float mZ){
  if (config.logging) {
    RobotLogger rl=RobotLogger.getInstance();
    float[] acc={aX,aY,aZ};
    float[] gyro={rX,rY,rZ};
    float[] compass={mX,mY,mZ};
    if (config.active) {
      rl.sensor.logImu(new Date().getTime(),acc,gyro,compass);
    }
  }
}"
42807,"public static void UpdateEnc(double distance,double velocity){
  if (config.logging) {
    RobotLogger rl=RobotLogger.getInstance();
    long time_in_millis=new Date().getTime();
  }
}","public static void UpdateEnc(int encTime,int encReset,int encTick){
  if (config.logging) {
    RobotLogger rl=RobotLogger.getInstance();
    if (config.active) {
      RobotLogger.sensor.logEncoder(new Date().getTime(),encTick,encReset,encTime);
    }
  }
}"
42808,"private Robot(){
  sensorList=new ArrayList<>();
  kf=new KalmanFilter();
  System.out.println(""String_Node_Str"");
  autonomous=config.AUTONOMUS_DEFAULT;
  if (config.getInstance().logging) {
    System.out.println(""String_Node_Str"");
    RobotLogger.getInstance();
  }
  System.out.println();
  if (config.GPS_DEFAULT) {
    System.out.println(""String_Node_Str"");
    gps=new Gps(""String_Node_Str"");
    sensorList.add(gps);
  }
  if (config.IMU_DEFAULT) {
    System.out.println(""String_Node_Str"");
    imu=new Imu(""String_Node_Str"");
    sensorList.add(imu);
  }
  if (config.ENCODER_DEFAULT) {
    System.out.println(""String_Node_Str"");
    encoder=new Encoder();
    sensorList.add(encoder);
  }
  if (config.DRIVE_DEFAULT) {
    System.out.println(""String_Node_Str"");
    mega=new DriveActuator();
    sensorList.add(mega);
  }
  if (config.VISION_SYSTEM_DEFAULT) {
  }
  if (config.active) {
  }
  if (autonomous) {
    System.out.println(""String_Node_Str"");
    alice=new Thread(new Planner());
    alice.start();
  }
  System.out.println();
}","private Robot(){
  sensorList=new ArrayList<>();
  kf=new KalmanFilter();
  System.out.println(""String_Node_Str"");
  autonomous=config.AUTONOMUS_DEFAULT;
  if (config.logging) {
    System.out.println(""String_Node_Str"");
    RobotLogger.getInstance();
  }
  System.out.println();
  if (config.GPS_DEFAULT) {
    System.out.println(""String_Node_Str"");
    gps=new Gps(""String_Node_Str"");
    sensorList.add(gps);
  }
  if (config.IMU_DEFAULT) {
    System.out.println(""String_Node_Str"");
    imu=new Imu(""String_Node_Str"");
    sensorList.add(imu);
  }
  if (config.ENCODER_DEFAULT) {
    System.out.println(""String_Node_Str"");
    encoder=new Encoder();
    sensorList.add(encoder);
  }
  if (config.DRIVE_DEFAULT) {
    System.out.println(""String_Node_Str"");
    mega=new DriveActuator();
    sensorList.add(mega);
  }
  if (config.VISION_SYSTEM_DEFAULT) {
  }
  if (config.active) {
  }
  if (autonomous) {
    System.out.println(""String_Node_Str"");
    alice=new Thread(new Planner());
    alice.start();
  }
  System.out.println();
}"
42809,"@SuppressWarnings(""String_Node_Str"") public static void Set(String filename){
  System.out.println(""String_Node_Str"" + filename);
  try {
    JSONParser parser=new JSONParser();
    JSONObject obj=(JSONObject)parser.parse(new FileReader(filename));
    FRONT_CAM_INDEX=(int)obj.getOrDefault(""String_Node_Str"",config.FRONT_CAM_INDEX);
    REAR_CAM_INDEX=(int)obj.getOrDefault(""String_Node_Str"",config.REAR_CAM_INDEX);
    VISION_SYSTEM_EXECUTABLE_LOCATION=(String)obj.getOrDefault(""String_Node_Str"",config.VISION_SYSTEM_EXECUTABLE_LOCATION);
    LOG_FILE_LOCATION=(String)obj.getOrDefault(""String_Node_Str"",config.LOG_FILE_LOCATION);
    active=(boolean)obj.getOrDefault(""String_Node_Str"",config.ACTIVE_DEFAULT);
    logging=(boolean)obj.getOrDefault(""String_Node_Str"",config.LOGGING_DEFAULT);
    GUI_ON=(boolean)obj.getOrDefault(""String_Node_Str"",config.GUI_ON_DEFAULT);
    AUTONOMUS_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.AUTONOMUS_DEFAULT);
    DRIVE_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.DRIVE_DEFAULT);
    IMU_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.IMU_DEFAULT);
    GPS_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.GPS_DEFAULT);
    ENCODER_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.ENCODER_DEFAULT);
    VISION_SYSTEM_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.VISION_SYSTEM_DEFAULT);
    BRAKES_PER_FULL_PRESSURE=(byte)obj.getOrDefault(""String_Node_Str"",config.BRAKES_PER_FULL_PRESSURE);
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
}","@SuppressWarnings(""String_Node_Str"") public static void Set(String filename){
  System.out.println(""String_Node_Str"" + filename);
  try {
    JSONParser parser=new JSONParser();
    JSONObject obj=(JSONObject)parser.parse(new FileReader(filename));
    FRONT_CAM_INDEX=(int)obj.getOrDefault(""String_Node_Str"",config.FRONT_CAM_INDEX);
    REAR_CAM_INDEX=(int)obj.getOrDefault(""String_Node_Str"",config.REAR_CAM_INDEX);
    VISION_SYSTEM_EXECUTABLE_LOCATION=(String)obj.getOrDefault(""String_Node_Str"",config.VISION_SYSTEM_EXECUTABLE_LOCATION);
    LOG_FILE_LOCATION=(String)obj.getOrDefault(""String_Node_Str"",config.LOG_FILE_LOCATION);
    logging=(boolean)obj.getOrDefault(""String_Node_Str"",config.LOGGING_DEFAULT);
    GUI_ON=(boolean)obj.getOrDefault(""String_Node_Str"",config.GUI_ON_DEFAULT);
    AUTONOMUS_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.AUTONOMUS_DEFAULT);
    DRIVE_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.DRIVE_DEFAULT);
    IMU_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.IMU_DEFAULT);
    GPS_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.GPS_DEFAULT);
    ENCODER_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.ENCODER_DEFAULT);
    VISION_SYSTEM_DEFAULT=(boolean)obj.getOrDefault(""String_Node_Str"",config.VISION_SYSTEM_DEFAULT);
    BRAKES_PER_FULL_PRESSURE=(byte)obj.getOrDefault(""String_Node_Str"",config.BRAKES_PER_FULL_PRESSURE);
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + filename);
  }
}"
42810,"public DriveActuator(){
  super(""String_Node_Str"",""String_Node_Str"");
}","public DriveActuator(){
  super(""String_Node_Str"",""String_Node_Str"");
  thisSensorType=SensorType.GPS;
}"
42811,"public Encoder(){
  super(""String_Node_Str"",""String_Node_Str"");
}","public Encoder(){
  super(""String_Node_Str"",""String_Node_Str"");
  thisSensorType=SensorType.ENCODER;
}"
42812,"@Override public void publish(){
  float latitude=0, longitude=0;
  int state=0;
  String val=""String_Node_Str"";
  currentState=SensorState.ON;
  lastUpdateTime=System.currentTimeMillis();
  try {
    for (int i=0; i < index; i++) {
      if (inputBuffer[i] == '\n' || inputBuffer[i] == ',' || i == index) {
switch (state) {
case LAT_NUM:
          latitude=parseLat(val);
        break;
case LAT_DIR:
      if (val.equalsIgnoreCase(""String_Node_Str""))       latitude=-1 * latitude;
    break;
case LONG_NUM:
  longitude=parseLon(val);
break;
case LONG_DIR:
if (val.equalsIgnoreCase(""String_Node_Str"")) longitude=-1 * longitude;
gpsPub.publish(new GpsMeasurement(latitude,longitude));
System.out.println(""String_Node_Str"" + latitude + ""String_Node_Str""+ longitude);
return;
}
val=""String_Node_Str"";
state++;
}
 else val+=inputBuffer[i];
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"");
currentState=SensorState.ERROR;
}
}","@Override public void publish(){
  float latitude=0, longitude=0;
  int state=0;
  String val=""String_Node_Str"";
  currentState=SensorState.ON;
  lastUpdateTime=System.currentTimeMillis();
  try {
    for (int i=0; i < index; i++) {
      if (inputBuffer[i] == '\n' || inputBuffer[i] == ',' || i == index) {
switch (state) {
case LAT_NUM:
          latitude=parseLat(val);
        break;
case LAT_DIR:
      if (val.equalsIgnoreCase(""String_Node_Str""))       latitude=-1 * latitude;
    break;
case LONG_NUM:
  longitude=parseLon(val);
break;
case LONG_DIR:
if (val.equalsIgnoreCase(""String_Node_Str"")) longitude=-1 * longitude;
publisher.publish(new GpsMeasurement(latitude,longitude));
System.out.println(""String_Node_Str"" + latitude + ""String_Node_Str""+ longitude);
return;
}
val=""String_Node_Str"";
state++;
}
 else val+=inputBuffer[i];
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"");
currentState=SensorState.ERROR;
}
}"
42813,"public Gps(String publishPath){
  super(""String_Node_Str"",BAUDRATE,HEADER);
  gpsPub=new Publisher(publishPath);
}","public Gps(String publishPath){
  super(""String_Node_Str"",BAUDRATE,HEADER);
  publisher=new Publisher(publishPath);
  thisSensorType=SensorType.GPS;
}"
42814,"public Imu(String publishPath){
  super(""String_Node_Str"",BAUDRATE,HEADER);
  imuPub=new Publisher(""String_Node_Str"");
}","public Imu(String publishPath){
  super(""String_Node_Str"",BAUDRATE,HEADER);
  publisher=new Publisher(""String_Node_Str"");
  thisSensorType=SensorType.IMU;
}"
42815,"@Override public void publish(){
  float aX=0, aY=0, aZ=0, rX=0, rY=0, rZ=0, mX=0, mY=0, mZ=0;
  String val=""String_Node_Str"";
  int state=0;
  lastUpdateTime=System.currentTimeMillis();
  currentState=SensorState.ON;
  System.out.println(""String_Node_Str"" + currentState);
  try {
    for (int i=0; i < index; i++) {
      if (inputBuffer[i] == '\n' || inputBuffer[i] == ',' || i == index) {
switch (state) {
case AX:
          aX=Float.valueOf(val);
        break;
case AY:
      aY=Float.valueOf(val);
    break;
case AZ:
  aZ=Float.valueOf(val);
break;
case RX:
rX=Float.valueOf(val);
break;
case RY:
rY=Float.valueOf(val);
break;
case RZ:
rZ=Float.valueOf(val);
break;
case MX:
mX=Float.valueOf(val);
break;
case MY:
mY=Float.valueOf(val);
break;
case MZ:
mZ=Float.valueOf(val);
System.out.println(""String_Node_Str"" + aX + ""String_Node_Str""+ aY+ ""String_Node_Str""+ aZ+ ""String_Node_Str""+ rX+ ""String_Node_Str""+ rY+ ""String_Node_Str""+ mX+ ""String_Node_Str""+ mY+ ""String_Node_Str""+ mZ);
Robot.UpdateImu(aX,aY,aZ,rX,rY,rZ,mX,mY,mZ);
imuPub.publish(new ImuMeasurement(aX,aY,aZ,rX,rY,rZ,mX,mY,mZ));
break;
}
val=""String_Node_Str"";
state++;
}
 else {
val+=inputBuffer[i];
}
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"");
currentState=SensorState.ERROR;
}
}","@Override public void publish(){
  float aX=0, aY=0, aZ=0, rX=0, rY=0, rZ=0, mX=0, mY=0, mZ=0;
  String val=""String_Node_Str"";
  int state=0;
  lastUpdateTime=System.currentTimeMillis();
  currentState=SensorState.ON;
  System.out.println(""String_Node_Str"" + currentState);
  try {
    for (int i=0; i < index; i++) {
      if (inputBuffer[i] == '\n' || inputBuffer[i] == ',' || i == index) {
switch (state) {
case AX:
          aX=Float.valueOf(val);
        break;
case AY:
      aY=Float.valueOf(val);
    break;
case AZ:
  aZ=Float.valueOf(val);
break;
case RX:
rX=Float.valueOf(val);
break;
case RY:
rY=Float.valueOf(val);
break;
case RZ:
rZ=Float.valueOf(val);
break;
case MX:
mX=Float.valueOf(val);
break;
case MY:
mY=Float.valueOf(val);
break;
case MZ:
mZ=Float.valueOf(val);
System.out.println(""String_Node_Str"" + aX + ""String_Node_Str""+ aY+ ""String_Node_Str""+ aZ+ ""String_Node_Str""+ rX+ ""String_Node_Str""+ rY+ ""String_Node_Str""+ mX+ ""String_Node_Str""+ mY+ ""String_Node_Str""+ mZ);
Robot.UpdateImu(aX,aY,aZ,rX,rY,rZ,mX,mY,mZ);
publisher.publish(new ImuMeasurement(aX,aY,aZ,rX,rY,rZ,mX,mY,mZ));
break;
}
val=""String_Node_Str"";
state++;
}
 else {
val+=inputBuffer[i];
}
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"");
currentState=SensorState.ERROR;
}
}"
42816,"@SuppressWarnings(""String_Node_Str"") protected SerialConnection(String owner,int baud_rate,String header){
  port_list=CommPortIdentifier.getPortIdentifiers();
  connected=false;
  while (port_list.hasMoreElements()) {
    port_id=(CommPortIdentifier)port_list.nextElement();
    if (port_id.getPortType() == CommPortIdentifier.PORT_SERIAL) {
      System.out.println(""String_Node_Str"" + port_id.getName());
      try {
        port=(SerialPort)port_id.open(owner,TIMEOUT);
        port.setInputBufferSize(BUFFER_SIZE);
        port.setSerialPortParams(baud_rate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
        input=port.getInputStream();
        output=port.getOutputStream();
        if (isCorrectPort(input,header)) {
          port.notifyOnDataAvailable(true);
          inputBuffer=new char[BUFFER_SIZE];
          index=0;
          connected=true;
          port.addEventListener(this);
          System.out.println(""String_Node_Str"" + this.getName());
          return;
        }
        port.close();
        input.close();
        output.close();
      }
 catch (      PortInUseException e) {
      }
catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + owner);
}","@SuppressWarnings(""String_Node_Str"") protected SerialConnection(String owner,int baud_rate,String header){
  port_list=CommPortIdentifier.getPortIdentifiers();
  connected=false;
  currentState=SensorState.DISCONECTED;
  lastUpdateTime=0;
  while (port_list.hasMoreElements()) {
    port_id=(CommPortIdentifier)port_list.nextElement();
    if (port_id.getPortType() == CommPortIdentifier.PORT_SERIAL) {
      System.out.println(""String_Node_Str"" + port_id.getName());
      try {
        port=(SerialPort)port_id.open(owner,TIMEOUT);
        port.setInputBufferSize(BUFFER_SIZE);
        port.setSerialPortParams(baud_rate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
        input=port.getInputStream();
        output=port.getOutputStream();
        if (isCorrectPort(input,header)) {
          port.notifyOnDataAvailable(true);
          inputBuffer=new char[BUFFER_SIZE];
          index=0;
          connected=true;
          currentState=SensorState.ON;
          port.addEventListener(this);
          System.out.println(""String_Node_Str"" + this.getName());
          return;
        }
        port.close();
        input.close();
        output.close();
      }
 catch (      PortInUseException e) {
      }
catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + owner);
}"
42817,"public void updatePanel(){
  System.out.println(""String_Node_Str"");
  gps_switch.setState(Robot.getInstance().getGpsState());
  gps_switch.repaint();
  IMU_switch.setState(Robot.getInstance().getImuState());
  IMU_switch.repaint();
  frontCam_switch.setState(Robot.getInstance().getFrontCamState());
  frontCam_switch.repaint();
  backCam_switch.setState(Robot.getInstance().getBackCamState());
  backCam_switch.repaint();
  encoders_switch.setState(Robot.getInstance().getEncoderState());
  encoders_switch.updateSensorMessage_lbl(Robot.getInstance().getEncoderMsg());
  encoders_switch.repaint();
  controlInputs_switch.setState(Robot.getInstance().getControlInputState());
  controlInputs_switch.repaint();
  updateStartPause_btn();
}","public void updatePanel(){
  System.out.println(""String_Node_Str"");
  Robot robot=Robot.getInstance();
  gps_switch.setState(robot.getGpsState());
  gps_switch.repaint();
  IMU_switch.setState(robot.getImuState());
  IMU_switch.repaint();
  frontCam_switch.setState(robot.getFrontCamState());
  frontCam_switch.repaint();
  backCam_switch.setState(robot.getBackCamState());
  backCam_switch.repaint();
  encoders_switch.setState(robot.getEncoderState());
  encoders_switch.updateSensorMessage_lbl(robot.getEncoderMsg());
  encoders_switch.repaint();
  controlInputs_switch.setState(robot.getControlInputState());
  controlInputs_switch.repaint();
  updateStartPause_btn();
}"
42818,"@Override public void run(){
  while (true) {
synchronized (local_inbox) {
      while (local_inbox.peek() != null) {
        try {
          local_inbox.wait();
        }
 catch (        InterruptedException ie) {
          System.out.println(""String_Node_Str"");
        }
        Message m=local_inbox.poll();
        if (m != null) {
          callback.actionPerformed(m);
        }
 else {
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
}","@Override public void run(){
synchronized (local_inbox) {
    while (local_inbox.peek() != null) {
      try {
        local_inbox.wait();
      }
 catch (      InterruptedException ie) {
        System.out.println(""String_Node_Str"");
      }
      Message m=local_inbox.poll();
      if (m != null) {
        callback.actionPerformed(m);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}"
42819,"public FauxArduino(){
  System.out.println(""String_Node_Str"");
  int distance=0;
  while (true) {
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException ie) {
      throw new RuntimeException(""String_Node_Str"");
    }
    int speed=5;
    distance+=speed;
    encoderPub.publish(new EncoderMeasurement(distance,speed));
  }
}","public FauxArduino(){
  System.out.println(""String_Node_Str"");
  (new Thread(new Runnable(){
    @Override public void run(){
      int distance=0;
      int speed=5;
      while (true) {
        try {
          Thread.sleep(10000);
        }
 catch (        InterruptedException ie) {
          throw new RuntimeException(""String_Node_Str"");
        }
        distance+=speed;
        encoderPub.publish(new EncoderMeasurement(distance,speed));
        System.out.println(""String_Node_Str"");
      }
    }
  }
)).start();
}"
42820,"@Override public void run(){
  while (true) {
    Map.Entry<String,Message> request;
    try {
      request=inbox.take();
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    String topicName=request.getKey();
    Message m=request.getValue();
    outbox_lock.readLock().lock();
    List<Subscriber> subs=outbox_mapping.get(topicName);
    for (    Subscriber s : subs) {
      s.putMessage(m);
    }
    outbox_lock.readLock().unlock();
  }
}","@Override public void run(){
  while (true) {
    Map.Entry<String,Message> request;
    try {
      request=inbox.take();
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    String topicName=request.getKey();
    Message m=request.getValue();
    outbox_lock.readLock().lock();
    List<Subscriber> subs=outbox_mapping.get(topicName);
    if (subs != null) {
      for (      Subscriber s : subs) {
        s.putMessage(m);
      }
    }
    outbox_lock.readLock().unlock();
  }
}"
42821,"@Override public boolean next(Text key,Text value) throws IOException {
  if (eof) {
    return false;
  }
  try {
    if (!firstRecord && realReader.nextKeyValue()) {
      SimpleGroup g=realReader.getCurrentValue();
      ls=groupToStrings(g);
    }
    if (firstRecord)     firstRecord=false;
    if (key != null)     key.set(fetchKey());
    if (value != null)     value.set(fetchValue());
    return true;
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}","@Override public boolean next(Text key,Text value) throws IOException {
  if (eof)   return false;
  try {
    if (!firstRecord) {
      if (!realReader.nextKeyValue())       return false;
      SimpleGroup g=realReader.getCurrentValue();
      ls=groupToStrings(g);
    }
 else     firstRecord=false;
    if (key != null)     key.set(fetchKey());
    if (value != null)     value.set(fetchValue());
    return true;
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}"
42822,"@Test public void testParquetAsTextFmt() throws IOException {
  ParquetAsTextOutputFormat outfmt=new ParquetAsTextOutputFormat();
  FileOutputFormat.setOutputPath(defaultConf,file);
  String outpath=FileOutputFormat.getTaskOutputPath(defaultConf,""String_Node_Str"").toString();
  defaultConf.set(""String_Node_Str"",outpath);
  RecordWriter<Text,Text> writer=outfmt.getRecordWriter(file.getFileSystem(defaultConf),defaultConf,fname,new dummyReporter());
  writer.write(new Text(tsv),null);
  writer.close(null);
  FileInputFormat.setInputPaths(defaultConf,outpath + ""String_Node_Str"" + fname+ ""String_Node_Str"");
  ParquetAsTextInputFormat informat=new ParquetAsTextInputFormat();
  RecordReader<Text,Text> reader=informat.getRecordReader(informat.getSplits(defaultConf,1)[0],defaultConf,new dummyReporter());
  Text k=new Text();
  Text v=new Text();
  reader.next(k,v);
  Assert.assertEquals(""String_Node_Str"",tsv,k.toString() + ""String_Node_Str"" + v.toString());
}","@Test public void testParquetAsTextFmt() throws IOException {
  ParquetAsTextOutputFormat outfmt=new ParquetAsTextOutputFormat();
  FileOutputFormat.setOutputPath(defaultConf,file);
  String outpath=FileOutputFormat.getTaskOutputPath(defaultConf,""String_Node_Str"").toString();
  defaultConf.set(""String_Node_Str"",outpath);
  RecordWriter<Text,Text> writer=outfmt.getRecordWriter(file.getFileSystem(defaultConf),defaultConf,fname,new dummyReporter());
  for (  String s : tsv.split(""String_Node_Str""))   writer.write(new Text(s),null);
  writer.close(null);
  FileInputFormat.setInputPaths(defaultConf,outpath + ""String_Node_Str"" + fname+ ""String_Node_Str"");
  ParquetAsTextInputFormat informat=new ParquetAsTextInputFormat();
  RecordReader<Text,Text> reader=informat.getRecordReader(informat.getSplits(defaultConf,1)[0],defaultConf,new dummyReporter());
  StringBuilder readBack=new StringBuilder();
  Text k=new Text();
  Text v=new Text();
  while (reader.next(k,v)) {
    readBack.append(k.toString());
    readBack.append(""String_Node_Str"");
    readBack.append(v.toString());
    readBack.append(""String_Node_Str"");
  }
  Assert.assertEquals(""String_Node_Str"",tsv,readBack.toString());
}"
42823,"@Override public void renderAnyTypes(ItemStack item,Object... data){
  plate.simpleRender(0F);
  PlateRender.renderPlateContents(new PlateRender.Plate(item));
}","@Override public void renderAnyTypes(ItemStack item,Object... data){
  plate.simpleRender(0F);
  PlateRender.renderPlateContents(new PlateRender.Plate(item));
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
}"
42824,"/** 
 * Sets the pan's ingredient to whatever the item links to.
 * @param clicked The item the pan is being clicked with.
 * @return Returns true if the ingredient was set successfully.
 */
private boolean setIngredient(ItemStack clicked){
  if (this.ingredient == Ingredient.getIngredient(""String_Node_Str"") && this.cookTime == 0) {
    Ingredient ingredientFromItem=KitchenItems.valueOf(clicked.getItem());
    if (ingredientFromItem != null) {
      this.ingredient=ingredientFromItem;
      return true;
    }
 else     return false;
  }
 else   return false;
}","/** 
 * Sets the pan's ingredient to whatever the item links to.
 * @param clicked The item the pan is being clicked with.
 * @return Returns true if the ingredient was set successfully.
 */
private boolean setIngredient(ItemStack clicked){
  System.out.println(""String_Node_Str"");
  if (this.ingredient == Ingredient.getIngredient(""String_Node_Str"") && this.cookTime == 0) {
    Ingredient ingredientFromItem=KitchenItems.valueOf(clicked.getItem());
    if (ingredientFromItem != Ingredient.getIngredient(""String_Node_Str"")) {
      this.ingredient=ingredientFromItem;
      return true;
    }
 else     return false;
  }
 else   return false;
}"
42825,"public static int getComboID(ItemStack sandwich){
  for (int i=0; i < combos.length; i++)   if (combos[i].matches(sandwich))   return i;
  return 0;
}","public static int getComboID(ItemStack sandwich){
  for (int i=1; i < combos.length && combos[i] != null; i++)   if (combos[i].matches(sandwich))   return i;
  return 0;
}"
42826,"@Override public int func_150905_g(ItemStack item){
  int healAmount=0;
  if (item.getTagCompound() != null)   if (item.getTagCompound().hasKey(""String_Node_Str"")) {
    NBTTagList layersList=item.getTagCompound().getTagList(""String_Node_Str"",10);
    if (layersList != null) {
      for (int i=0; i < layersList.tagCount(); ++i) {
        NBTTagCompound layerCompound=layersList.getCompoundTagAt(i);
        healAmount+=((ItemSandwichable)ItemStack.loadItemStackFromNBT(layerCompound).getItem()).getHealAmount();
      }
      byte combo=item.getTagCompound().getCompoundTag(""String_Node_Str"").getByte(""String_Node_Str"");
      if (SandwichCombo.combos[(int)combo] != null)       healAmount+=SandwichCombo.combos[(int)combo].getExtraHeal();
    }
  }
  return healAmount;
}","@Override public int func_150905_g(ItemStack item){
  int healAmount=0;
  if (item.getTagCompound() != null)   if (item.getTagCompound().hasKey(""String_Node_Str"")) {
    NBTTagList layersList=item.getTagCompound().getTagList(""String_Node_Str"",10);
    if (layersList != null) {
      for (int i=0; i < layersList.tagCount(); ++i) {
        NBTTagCompound layerCompound=layersList.getCompoundTagAt(i);
        healAmount+=ModConfig.getSandwichConfig().getHealAmount(ItemStack.loadItemStackFromNBT(layerCompound));
      }
      byte combo=item.getTagCompound().getCompoundTag(""String_Node_Str"").getByte(""String_Node_Str"");
      if (SandwichCombo.combos[(int)combo] != null)       healAmount+=SandwichCombo.combos[(int)combo].getExtraHeal();
    }
  }
  System.out.println(""String_Node_Str"" + healAmount);
  return healAmount;
}"
42827,"private void renderItemEntity(ItemStack item,double xOffset,double yOffset,double zOffset,int i){
  GL11.glPushMatrix();
  GL11.glTranslated(xOffset,yOffset,zOffset);
  if (((ItemSandwichable)this.items[i].getItem()).hasCustomModel)   if (i + 1 < this.items.length)   if (this.items[i + 1] != null) {
    ((ItemSandwichable)this.items[i].getItem()).getBottomModel().render(Minecraft.getMinecraft().renderViewEntity,0.0F,0.0F,0.0F,0.0F,0.0F,0.0625F);
    this.yItemOffset+=(((ItemSandwichable)this.items[i].getItem()).modelBottomHeight * 0.033D);
  }
 else {
    ((ItemSandwichable)this.items[i].getItem()).getTopModel().render(Minecraft.getMinecraft().renderViewEntity,0.0F,0.0F,0.0F,0.0F,0.0F,0.0625F);
    this.yItemOffset+=(((ItemSandwichable)this.items[i].getItem()).modelTopHeight * 0.033D);
  }
 else {
    ((ItemSandwichable)this.items[i].getItem()).getTopModel().render(Minecraft.getMinecraft().renderViewEntity,0.0F,0.0F,0.0F,0.0F,0.0F,0.0625F);
    this.yItemOffset+=(((ItemSandwichable)this.items[i].getItem()).modelTopHeight * 0.033D);
  }
 else {
    EntityItem itemEntity=new EntityItem(Minecraft.getMinecraft().thePlayer.getEntityWorld(),0D,0D,0D,item);
    itemEntity.hoverStart=0.0F;
    RenderItem.renderInFrame=true;
    GL11.glRotatef(180,0,1,1);
    RenderManager.instance.renderEntityWithPosYaw(itemEntity,0.0D,0.0D,0.0D,0.0F,0.0F);
    RenderItem.renderInFrame=false;
  }
  GL11.glPopMatrix();
}","private void renderItemEntity(ItemStack item,double xOffset,double yOffset,double zOffset,int i){
  GL11.glPushMatrix();
  GL11.glTranslated(xOffset,yOffset,zOffset);
  EntityItem itemEntity=new EntityItem(Minecraft.getMinecraft().thePlayer.getEntityWorld(),0D,0D,0D,item);
  itemEntity.hoverStart=0.0F;
  RenderItem.renderInFrame=true;
  GL11.glRotatef(180,0,1,1);
  RenderManager.instance.renderEntityWithPosYaw(itemEntity,0.0D,0.0D,0.0D,0.0F,0.0F);
  RenderItem.renderInFrame=false;
  GL11.glPopMatrix();
}"
42828,"public ItemStack finishSandwich(){
  if (!(ModConfig.getSandwichConfig().isBread(this.layers.get(0)) && ModConfig.getSandwichConfig().isBread(this.layers.get(this.layers.size()))) || this.layers.size() < 2)   return null;
  NBTTagList layersList=new NBTTagList();
  ItemStack sandwich=GameRegistry.findItemStack(ModInfo.modid,""String_Node_Str"",1);
  for (  ItemStack layer : this.layers) {
    NBTTagCompound layerCompound=new NBTTagCompound();
    layer.writeToNBT(layerCompound);
    layersList.appendTag(layerCompound);
  }
  sandwich.setTagInfo(""String_Node_Str"",layersList);
  NBTTagCompound comboCompound=new NBTTagCompound();
  byte combo=(byte)SandwichCombo.getComboID(sandwich);
  comboCompound.setByte(""String_Node_Str"",combo);
  sandwich.setTagInfo(""String_Node_Str"",comboCompound);
  return sandwich;
}","public ItemStack finishSandwich(){
  if (!(ModConfig.getSandwichConfig().isBread(this.layers.get(0)) && ModConfig.getSandwichConfig().isBread(this.layers.get(this.layers.size() - 1))) || this.layers.size() < 2)   return null;
  NBTTagList layersList=new NBTTagList();
  ItemStack sandwich=GameRegistry.findItemStack(ModInfo.modid,""String_Node_Str"",1);
  for (  ItemStack layer : this.layers) {
    NBTTagCompound layerCompound=new NBTTagCompound();
    layer.writeToNBT(layerCompound);
    layersList.appendTag(layerCompound);
  }
  sandwich.setTagInfo(""String_Node_Str"",layersList);
  NBTTagCompound comboCompound=new NBTTagCompound();
  byte combo=(byte)SandwichCombo.getComboID(sandwich);
  comboCompound.setByte(""String_Node_Str"",combo);
  sandwich.setTagInfo(""String_Node_Str"",comboCompound);
  this.resetLayers();
  return sandwich;
}"
42829,"@Override public boolean isAgencySetupRequired(){
  boolean setupRequired=false;
  if (currentDbVersion > 0 && currentDbVersion != getCurrentDbVersion()) {
    setupRequired=true;
  }
 else   if (!SqlUtils.isDbExist(getContext(),getDbName())) {
    setupRequired=true;
  }
 else   if (SqlUtils.getCurrentDbVersion(getContext(),getDbName()) != getCurrentDbVersion()) {
    setupRequired=true;
  }
  return setupRequired;
}","@Override public boolean isAgencySetupRequired(){
  if (currentDbVersion > 0 && currentDbVersion != getCurrentDbVersion()) {
    return true;
  }
  if (!SqlUtils.isDbExist(getContext(),getDbName())) {
    return true;
  }
  if (SqlUtils.getCurrentDbVersion(getContext(),getDbName()) != getCurrentDbVersion()) {
    return true;
  }
  return false;
}"
42830,"@Override public boolean isAgencySetupRequired(){
  boolean setupRequired=false;
  if (currentDbVersion > 0 && currentDbVersion != getCurrentDbVersion()) {
    setupRequired=true;
  }
 else   if (!SqlUtils.isDbExist(getContext(),getDbName())) {
    setupRequired=true;
  }
 else   if (SqlUtils.getCurrentDbVersion(getContext(),getDbName()) != getCurrentDbVersion()) {
    setupRequired=true;
  }
  return setupRequired;
}","@Override public boolean isAgencySetupRequired(){
  if (currentDbVersion > 0 && currentDbVersion != getCurrentDbVersion()) {
    return true;
  }
  if (!SqlUtils.isDbExist(getContext(),getDbName())) {
    return true;
  }
  if (SqlUtils.getCurrentDbVersion(getContext(),getDbName()) != getCurrentDbVersion()) {
    return true;
  }
  return false;
}"
42831,"@Override public ArrayMap<LatLng,MapViewController.POIMarker> callMT() throws Exception {
  double minLat=Math.min(this.latLngBounds.northeast.latitude,this.latLngBounds.southwest.latitude);
  double maxLat=Math.max(this.latLngBounds.northeast.latitude,this.latLngBounds.southwest.latitude);
  double minLng=Math.min(this.latLngBounds.northeast.longitude,this.latLngBounds.southwest.longitude);
  double maxLng=Math.max(this.latLngBounds.northeast.longitude,this.latLngBounds.southwest.longitude);
  Double optLoadedMinLat=this.loadedLatLngBounds == null ? null : Math.min(this.loadedLatLngBounds.northeast.latitude,this.loadedLatLngBounds.southwest.latitude);
  Double optLoadedMaxLat=this.loadedLatLngBounds == null ? null : Math.max(this.loadedLatLngBounds.northeast.latitude,this.loadedLatLngBounds.southwest.latitude);
  Double optLoadedMinLng=this.loadedLatLngBounds == null ? null : Math.min(this.loadedLatLngBounds.northeast.longitude,this.loadedLatLngBounds.southwest.longitude);
  Double optLoadedMaxLng=this.loadedLatLngBounds == null ? null : Math.max(this.loadedLatLngBounds.northeast.longitude,this.loadedLatLngBounds.southwest.longitude);
  POIProviderContract.Filter poiFilter=POIProviderContract.Filter.getNewAreaFilter(minLat,maxLat,minLng,maxLng,optLoadedMinLat,optLoadedMaxLat,optLoadedMinLng,optLoadedMaxLng);
  ArrayMap<LatLng,MapViewController.POIMarker> clusterItems=new ArrayMap<LatLng,MapViewController.POIMarker>();
  ArrayList<POIManager> poims=DataSourceManager.findPOIs(this.context,this.agency.getAuthority(),poiFilter);
  String agencyShortName=this.agency.getShortName();
  if (poims != null) {
    LatLng position;
    LatLng positionTrunc;
    String name;
    String extra;
    String uuid;
    String authority;
    Integer color;
    Integer secondaryColor;
    for (    POIManager poim : poims) {
      position=MapViewController.POIMarker.getLatLng(poim);
      positionTrunc=MapViewController.POIMarker.getLatLngTrunc(poim);
      if (!this.latLngBounds.contains(position)) {
        continue;
      }
 else       if (this.loadedLatLngBounds != null && this.loadedLatLngBounds.contains(position)) {
        continue;
      }
      name=poim.poi.getName();
      extra=null;
      if (poim.poi instanceof RouteTripStop) {
        extra=((RouteTripStop)poim.poi).getRoute().getShortestName();
      }
      uuid=poim.poi.getUUID();
      authority=poim.poi.getAuthority();
      color=POIManager.getColor(this.context,poim.poi,null);
      secondaryColor=agency.getColorInt();
      if (clusterItems.containsKey(positionTrunc)) {
        clusterItems.get(positionTrunc).merge(position,name,agencyShortName,extra,color,secondaryColor,uuid,authority);
      }
 else {
        clusterItems.put(positionTrunc,new MapViewController.POIMarker(position,name,agencyShortName,extra,color,secondaryColor,uuid,authority));
      }
    }
  }
  return clusterItems;
}","@Override public ArrayMap<LatLng,MapViewController.POIMarker> callMT() throws Exception {
  double minLat=Math.min(this.latLngBounds.northeast.latitude,this.latLngBounds.southwest.latitude);
  double maxLat=Math.max(this.latLngBounds.northeast.latitude,this.latLngBounds.southwest.latitude);
  double minLng=Math.min(this.latLngBounds.northeast.longitude,this.latLngBounds.southwest.longitude);
  double maxLng=Math.max(this.latLngBounds.northeast.longitude,this.latLngBounds.southwest.longitude);
  Double optLoadedMinLat=this.loadedLatLngBounds == null ? null : Math.min(this.loadedLatLngBounds.northeast.latitude,this.loadedLatLngBounds.southwest.latitude);
  Double optLoadedMaxLat=this.loadedLatLngBounds == null ? null : Math.max(this.loadedLatLngBounds.northeast.latitude,this.loadedLatLngBounds.southwest.latitude);
  Double optLoadedMinLng=this.loadedLatLngBounds == null ? null : Math.min(this.loadedLatLngBounds.northeast.longitude,this.loadedLatLngBounds.southwest.longitude);
  Double optLoadedMaxLng=this.loadedLatLngBounds == null ? null : Math.max(this.loadedLatLngBounds.northeast.longitude,this.loadedLatLngBounds.southwest.longitude);
  POIProviderContract.Filter poiFilter=POIProviderContract.Filter.getNewAreaFilter(minLat,maxLat,minLng,maxLng,optLoadedMinLat,optLoadedMaxLat,optLoadedMinLng,optLoadedMaxLng);
  ArrayMap<LatLng,MapViewController.POIMarker> clusterItems=new ArrayMap<LatLng,MapViewController.POIMarker>();
  ArrayList<POIManager> poims=DataSourceManager.findPOIs(this.context,this.agency.getAuthority(),poiFilter);
  String agencyShortName=this.agency.getShortName();
  if (poims != null) {
    LatLng position;
    LatLng positionTrunc;
    String name;
    String extra;
    String uuid;
    String authority;
    Integer color;
    Integer secondaryColor;
    for (    POIManager poim : poims) {
      position=MapViewController.POIMarker.getLatLng(poim);
      positionTrunc=MapViewController.POIMarker.getLatLngTrunc(poim);
      if (!this.latLngBounds.contains(position)) {
        continue;
      }
      if (this.loadedLatLngBounds != null && this.loadedLatLngBounds.contains(position)) {
        continue;
      }
      name=poim.poi.getName();
      extra=null;
      if (poim.poi instanceof RouteTripStop) {
        extra=((RouteTripStop)poim.poi).getRoute().getShortestName();
      }
      uuid=poim.poi.getUUID();
      authority=poim.poi.getAuthority();
      color=POIManager.getColor(this.context,poim.poi,null);
      secondaryColor=agency.getColorInt();
      if (clusterItems.containsKey(positionTrunc)) {
        clusterItems.get(positionTrunc).merge(position,name,agencyShortName,extra,color,secondaryColor,uuid,authority);
      }
 else {
        clusterItems.put(positionTrunc,new MapViewController.POIMarker(position,name,agencyShortName,extra,color,secondaryColor,uuid,authority));
      }
    }
  }
  return clusterItems;
}"
42832,"private void setupView(View view){
  if (view == null) {
    return;
  }
  AbsListView absListView=(AbsListView)view.findViewById(isShowingListInsteadOfGrid() ? R.id.list : R.id.grid);
  linkAdapterWithListView(absListView);
  absListView.setOnItemClickListener(this);
  switchView(view);
}","private void setupView(View view){
  if (view == null) {
    return;
  }
  AbsListView absListView=(AbsListView)view.findViewById(isShowingListInsteadOfGrid() ? R.id.list : R.id.grid);
  linkAdapterWithListView(view);
  absListView.setOnItemClickListener(this);
  switchView(view);
}"
42833,"private void onFragmentVisible(){
  if (this.fragmentVisible) {
    return;
  }
  if (!isResumed()) {
    return;
  }
  this.fragmentVisible=true;
  switchView(getView());
  if (this.adapter == null || !this.adapter.isInitialized()) {
    LoaderUtils.restartLoader(this,ROUTES_LOADER,null,this);
  }
  checkIfShowingListInsteadOfGridChanged();
  getActivity().supportInvalidateOptionsMenu();
  updateListGridToggleMenuItem();
}","private void onFragmentVisible(){
  if (this.fragmentVisible) {
    return;
  }
  if (!isResumed()) {
    return;
  }
  this.fragmentVisible=true;
  switchView(getView());
  if (this.adapter == null || !this.adapter.isInitialized()) {
    LoaderUtils.restartLoader(this,ROUTES_LOADER,null,this);
  }
  checkIfShowingListInsteadOfGridChanged();
  if (getActivity() != null) {
    getActivity().invalidateOptionsMenu();
  }
  updateListGridToggleMenuItem();
}"
42834,"public static void destroyAd(Activity activity){
  if (!AD_ENABLED) {
    return;
  }
  View adLayout=activity == null ? null : activity.findViewById(R.id.ad_layout);
  if (adLayout != null) {
    AdView adView=(AdView)adLayout.findViewById(R.id.ad);
    if (adView != null) {
      adView.destroy();
    }
  }
  adLoaded=null;
  if (setupAdTask != null) {
    setupAdTask.cancel(true);
  }
  setupAdTask=null;
}","public static void destroyAd(Activity activity){
  if (!AD_ENABLED) {
    return;
  }
  View adLayout=activity == null ? null : activity.findViewById(R.id.ad_layout);
  if (adLayout != null) {
    AdView adView=(AdView)adLayout.findViewById(R.id.ad);
    if (adView != null) {
      try {
        adView.removeAllViews();
        adView.destroy();
      }
 catch (      Throwable t) {
        MTLog.w(TAG,t,""String_Node_Str"");
      }
    }
  }
  adLoaded=null;
  if (setupAdTask != null) {
    setupAdTask.cancel(true);
  }
  setupAdTask=null;
}"
42835,"private synchronized static boolean hasChanged(DataSourceProvider current,Context optContext){
  if (current == null) {
    return true;
  }
  if (optContext == null) {
    return true;
  }
  String agencyProviderMetaData=getAgencyProviderMetaData(optContext);
  String scheduleProviderMetaData=getScheduleProviderMetaData(optContext);
  String statusProviderMetaData=getStatusProviderMetaData(optContext);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(optContext);
  String newsProviderMetaData=getNewsProviderMetaData(optContext);
  int nbAgencyProviders=0, nbScheduleProviders=0, nbStatusProviders=0, nbServiceUpdateProviders=0, nbNewsProviders=0;
  PackageManager pm=optContext.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            if (!instance.hasAgency(provider.authority)) {
              return true;
            }
            nbAgencyProviders++;
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            if (instance.getStatusProvider(provider.authority) == null) {
              return true;
            }
            nbStatusProviders++;
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            if (instance.getScheduleProvider(provider.authority) == null) {
              return true;
            }
            nbScheduleProviders++;
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbServiceUpdateProviders++;
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbNewsProviders++;
          }
        }
      }
    }
  }
  if (nbAgencyProviders != CollectionUtils.getSize(instance.allAgenciesAuthority) || nbStatusProviders != CollectionUtils.getSize(instance.allStatusProviders) || nbScheduleProviders != CollectionUtils.getSize(instance.allScheduleProviders) || nbServiceUpdateProviders != CollectionUtils.getSize(instance.allServiceUpdateProviders) || nbNewsProviders != CollectionUtils.getSize(instance.allNewsProviders)) {
    return true;
  }
  return false;
}","private synchronized static boolean hasChanged(DataSourceProvider current,Context optContext){
  if (current == null) {
    return true;
  }
  if (optContext == null) {
    return true;
  }
  String agencyProviderMetaData=getAgencyProviderMetaData(optContext);
  String scheduleProviderMetaData=getScheduleProviderMetaData(optContext);
  String statusProviderMetaData=getStatusProviderMetaData(optContext);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(optContext);
  String newsProviderMetaData=getNewsProviderMetaData(optContext);
  int nbAgencyProviders=0, nbScheduleProviders=0, nbStatusProviders=0, nbServiceUpdateProviders=0, nbNewsProviders=0;
  PackageManager pm=optContext.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            if (!instance.hasAgency(provider.authority)) {
              return true;
            }
            nbAgencyProviders++;
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            if (instance.getStatusProvider(provider.authority) == null) {
              return true;
            }
            nbStatusProviders++;
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            if (instance.getScheduleProvider(provider.authority) == null) {
              return true;
            }
            nbScheduleProviders++;
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbServiceUpdateProviders++;
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            if (instance.getNewsProvider(provider.authority) == null) {
              return true;
            }
            nbNewsProviders++;
          }
        }
      }
    }
  }
  if (nbAgencyProviders != CollectionUtils.getSize(instance.allAgenciesAuthority) || nbStatusProviders != CollectionUtils.getSize(instance.allStatusProviders) || nbScheduleProviders != CollectionUtils.getSize(instance.allScheduleProviders) || nbServiceUpdateProviders != CollectionUtils.getSize(instance.allServiceUpdateProviders) || nbNewsProviders != CollectionUtils.getSize(instance.allNewsProviders)) {
    return true;
  }
  return false;
}"
42836,"private synchronized void init(Context context){
  String agencyProviderMetaData=getAgencyProviderMetaData(context);
  String agencyProviderTypeMetaData=context.getString(R.string.agency_provider_type);
  String rtsProviderMetaData=context.getString(R.string.rts_provider);
  String scheduleProviderMetaData=getScheduleProviderMetaData(context);
  String statusProviderMetaData=getStatusProviderMetaData(context);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(context);
  String newsProviderMetaData=getNewsProviderMetaData(context);
  String statusProviderTargetMetaData=context.getString(R.string.status_provider_target);
  String scheduleProviderTargetMetaData=context.getString(R.string.schedule_provider_target);
  String serviceUpdateProviderTargetMetaData=context.getString(R.string.service_update_provider_target);
  String newsProviderTargetMetaData=context.getString(R.string.news_provider_target);
  PackageManager pm=context.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            int agencyTypeId=provider.metaData.getInt(agencyProviderTypeMetaData,-1);
            if (agencyTypeId >= 0) {
              DataSourceType newAgencyType=DataSourceType.parseId(agencyTypeId);
              if (newAgencyType != null) {
                if (!this.allAgencyTypes.contains(newAgencyType)) {
                  this.allAgencyTypes.add(newAgencyType);
                }
              }
              this.agenciesAuthorityTypeId.put(provider.authority,agencyTypeId);
            }
            boolean isRTS=rtsProviderMetaData.equals(provider.metaData.getString(rtsProviderMetaData));
            this.agenciesAuthorityIsRts.put(provider.authority,isRTS);
            this.allAgenciesAuthority.add(provider.authority);
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(statusProviderTargetMetaData);
            StatusProviderProperties newStatusProvider=new StatusProviderProperties(provider.authority,targetAuthority);
            addNewStatusProvider(newStatusProvider);
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(scheduleProviderTargetMetaData);
            ScheduleProviderProperties newScheduleProvider=new ScheduleProviderProperties(provider.authority,targetAuthority);
            addNewScheduleProvider(newScheduleProvider);
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(serviceUpdateProviderTargetMetaData);
            ServiceUpdateProviderProperties newServiceUpdateProvider=new ServiceUpdateProviderProperties(provider.authority,targetAuthority);
            addNewServiceUpdateProvider(newServiceUpdateProvider);
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(newsProviderTargetMetaData);
            NewsProviderProperties newNewsProvider=new NewsProviderProperties(provider.authority,targetAuthority);
            addNewNewsProvider(newNewsProvider);
          }
        }
      }
    }
  }
  CollectionUtils.sort(this.allAgencyTypes,new DataSourceType.DataSourceTypeShortNameComparator(context));
}","private synchronized void init(Context context){
  try {
    String agencyProviderMetaData=getAgencyProviderMetaData(context);
    String agencyProviderTypeMetaData=context.getString(R.string.agency_provider_type);
    String rtsProviderMetaData=context.getString(R.string.rts_provider);
    String scheduleProviderMetaData=getScheduleProviderMetaData(context);
    String statusProviderMetaData=getStatusProviderMetaData(context);
    String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(context);
    String newsProviderMetaData=getNewsProviderMetaData(context);
    String statusProviderTargetMetaData=context.getString(R.string.status_provider_target);
    String scheduleProviderTargetMetaData=context.getString(R.string.schedule_provider_target);
    String serviceUpdateProviderTargetMetaData=context.getString(R.string.service_update_provider_target);
    String newsProviderTargetMetaData=context.getString(R.string.news_provider_target);
    PackageManager pm=context.getPackageManager();
    for (    PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
      ProviderInfo[] providers=packageInfo.providers;
      if (providers != null) {
        for (        ProviderInfo provider : providers) {
          if (provider.metaData != null) {
            if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
              int agencyTypeId=provider.metaData.getInt(agencyProviderTypeMetaData,-1);
              if (agencyTypeId >= 0) {
                DataSourceType newAgencyType=DataSourceType.parseId(agencyTypeId);
                if (newAgencyType != null) {
                  if (!this.allAgencyTypes.contains(newAgencyType)) {
                    this.allAgencyTypes.add(newAgencyType);
                  }
                }
                this.agenciesAuthorityTypeId.put(provider.authority,agencyTypeId);
              }
              boolean isRTS=rtsProviderMetaData.equals(provider.metaData.getString(rtsProviderMetaData));
              this.agenciesAuthorityIsRts.put(provider.authority,isRTS);
              this.allAgenciesAuthority.add(provider.authority);
            }
            if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(statusProviderTargetMetaData);
              StatusProviderProperties newStatusProvider=new StatusProviderProperties(provider.authority,targetAuthority);
              addNewStatusProvider(newStatusProvider);
            }
            if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(scheduleProviderTargetMetaData);
              ScheduleProviderProperties newScheduleProvider=new ScheduleProviderProperties(provider.authority,targetAuthority);
              addNewScheduleProvider(newScheduleProvider);
            }
            if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(serviceUpdateProviderTargetMetaData);
              ServiceUpdateProviderProperties newServiceUpdateProvider=new ServiceUpdateProviderProperties(provider.authority,targetAuthority);
              addNewServiceUpdateProvider(newServiceUpdateProvider);
            }
            if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(newsProviderTargetMetaData);
              NewsProviderProperties newNewsProvider=new NewsProviderProperties(provider.authority,targetAuthority);
              addNewNewsProvider(newNewsProvider);
            }
          }
        }
      }
    }
    CollectionUtils.sort(this.allAgencyTypes,new DataSourceType.DataSourceTypeShortNameComparator(context));
  }
 catch (  Exception e) {
    MTLog.w(this,e,""String_Node_Str"");
    destroy();
  }
}"
42837,"private synchronized void initAgencyProperties(Context context){
  if (this.allAgencies != null) {
    return;
  }
  if (context == null) {
    return;
  }
  if (this.allAgenciesAuthority != null) {
    this.allAgencies=new ArrayList<AgencyProperties>();
    this.allAgenciesByAuthority=new HashMap<String,AgencyProperties>();
    this.allAgenciesByTypeId=new SparseArray<ArrayList<AgencyProperties>>();
    this.rtsAgencyRouteLogoByAuthority=new HashMap<String,JPaths>();
    for (    String authority : this.allAgenciesAuthority) {
      String label=DataSourceManager.findAgencyLabel(context,authority);
      String color=DataSourceManager.findAgencyColor(context,authority);
      String shortName=DataSourceManager.findAgencyShortName(context,authority);
      LocationUtils.Area area=DataSourceManager.findAgencyArea(context,authority);
      boolean isRTS=this.agenciesAuthorityIsRts.get(authority);
      JPaths jPath=isRTS ? DataSourceManager.findAgencyRTSRouteLogo(context,authority) : null;
      Integer typeId=this.agenciesAuthorityTypeId.get(authority);
      if (typeId != null && typeId >= 0) {
        DataSourceType type=DataSourceType.parseId(typeId);
        if (type != null) {
          addNewAgency(new AgencyProperties(authority,type,shortName,label,color,area,isRTS));
          if (jPath != null) {
            this.rtsAgencyRouteLogoByAuthority.put(authority,jPath);
          }
        }
 else {
          MTLog.w(this,""String_Node_Str"");
        }
      }
 else {
        MTLog.w(this,""String_Node_Str"",typeId);
      }
    }
    CollectionUtils.sort(this.allAgencies,AgencyProperties.SHORT_NAME_COMPARATOR);
    if (this.allAgenciesByTypeId != null) {
      for (int i=0; i < this.allAgenciesByTypeId.size(); i++) {
        int typeId=this.allAgenciesByTypeId.keyAt(i);
        CollectionUtils.sort(this.allAgenciesByTypeId.get(typeId),AgencyProperties.SHORT_NAME_COMPARATOR);
      }
    }
  }
}","private synchronized void initAgencyProperties(Context context){
  if (this.allAgencies != null) {
    return;
  }
  if (context == null) {
    return;
  }
  try {
    if (this.allAgenciesAuthority != null) {
      this.allAgencies=new ArrayList<AgencyProperties>();
      this.allAgenciesByAuthority=new HashMap<String,AgencyProperties>();
      this.allAgenciesByTypeId=new SparseArray<ArrayList<AgencyProperties>>();
      this.rtsAgencyRouteLogoByAuthority=new HashMap<String,JPaths>();
      for (      String authority : this.allAgenciesAuthority) {
        String label=DataSourceManager.findAgencyLabel(context,authority);
        String color=DataSourceManager.findAgencyColor(context,authority);
        String shortName=DataSourceManager.findAgencyShortName(context,authority);
        LocationUtils.Area area=DataSourceManager.findAgencyArea(context,authority);
        boolean isRTS=this.agenciesAuthorityIsRts.get(authority);
        JPaths jPath=isRTS ? DataSourceManager.findAgencyRTSRouteLogo(context,authority) : null;
        Integer typeId=this.agenciesAuthorityTypeId.get(authority);
        if (typeId != null && typeId >= 0) {
          DataSourceType type=DataSourceType.parseId(typeId);
          if (type != null) {
            addNewAgency(new AgencyProperties(authority,type,shortName,label,color,area,isRTS));
            if (jPath != null) {
              this.rtsAgencyRouteLogoByAuthority.put(authority,jPath);
            }
          }
        }
 else {
          MTLog.w(this,""String_Node_Str"",typeId);
        }
      }
      CollectionUtils.sort(this.allAgencies,AgencyProperties.SHORT_NAME_COMPARATOR);
      if (this.allAgenciesByTypeId != null) {
        for (int i=0; i < this.allAgenciesByTypeId.size(); i++) {
          int typeId=this.allAgenciesByTypeId.keyAt(i);
          CollectionUtils.sort(this.allAgenciesByTypeId.get(typeId),AgencyProperties.SHORT_NAME_COMPARATOR);
        }
      }
    }
  }
 catch (  Exception e) {
    MTLog.w(this,e,""String_Node_Str"");
    this.allAgencies=null;
    this.allAgenciesByAuthority=null;
    this.allAgenciesByTypeId=null;
    this.rtsAgencyRouteLogoByAuthority=null;
  }
}"
42838,"private void updateCommonViewManual(int position,View convertView){
  if (convertView == null || convertView.getTag() == null || !(convertView.getTag() instanceof CommonViewHolder)) {
    return;
  }
  CommonViewHolder holder=(CommonViewHolder)convertView.getTag();
  POIManager poim=getItem(position);
  updateCommonView(holder,poim);
}","private void updateCommonViewManual(int position,View convertView){
  if (convertView == null || convertView.getTag() == null || !(convertView.getTag() instanceof CommonViewHolder)) {
    return;
  }
  CommonViewHolder holder=(CommonViewHolder)convertView.getTag();
  POIManager poim=getItem(position);
  updateCommonView(holder,poim);
  updatePOIStatus(holder.statusViewHolder,poim);
}"
42839,"public Boolean isServiceUpdateWarning(Context context){
  if (this.serviceUpdates == null || this.lastFindServiceUpdateTimestampMs < 0 || this.inFocus || !areServiceUpdatesUseful()) {
    findServiceUpdates(context,false);
    return null;
  }
  return ServiceUpdate.isSeverityWarning(this.serviceUpdates);
}","public Boolean isServiceUpdateWarning(Context context){
  if (this.serviceUpdates == null || this.lastFindServiceUpdateTimestampMs < 0 || this.inFocus || !areServiceUpdatesUseful()) {
    findServiceUpdates(context,false);
  }
  return ServiceUpdate.isSeverityWarning(this.serviceUpdates);
}"
42840,"private void updateABDrawerOpened(){
  getActionBar().setTitle(mDrawerTitle);
  getActionBar().setSubtitle(mDrawerSubtitle);
  if (mDrawerIcon > 0) {
    getActionBar().setIcon(mDrawerIcon);
  }
 else {
    getActionBar().setIcon(new ColorDrawable(getResources().getColor(android.R.color.transparent)));
  }
  if (mDrawerBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mDrawerBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(true);
  invalidateOptionsMenu();
}","private void updateABDrawerOpened(){
  getActionBar().setTitle(mDrawerTitle);
  getActionBar().setSubtitle(mDrawerSubtitle);
  if (mDrawerIcon > 0) {
    getActionBar().setIcon(mDrawerIcon);
    getActionBar().setDisplayShowHomeEnabled(true);
  }
 else {
    getActionBar().setDisplayShowHomeEnabled(false);
  }
  if (mDrawerBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mDrawerBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(true);
  invalidateOptionsMenu();
}"
42841,"private void updateABDrawerClosed(){
  getActionBar().setTitle(mTitle);
  getActionBar().setSubtitle(mSubtitle);
  if (mIcon > 0) {
    getActionBar().setIcon(mIcon);
  }
 else {
    getActionBar().setIcon(new ColorDrawable(getResources().getColor(android.R.color.transparent)));
  }
  if (mBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(getSupportFragmentManager().getBackStackEntryCount() < 1);
  invalidateOptionsMenu();
}","private void updateABDrawerClosed(){
  getActionBar().setTitle(mTitle);
  getActionBar().setSubtitle(mSubtitle);
  if (mIcon > 0) {
    getActionBar().setIcon(mIcon);
    getActionBar().setDisplayShowHomeEnabled(true);
  }
 else {
    getActionBar().setDisplayShowHomeEnabled(false);
  }
  if (mBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(getSupportFragmentManager().getBackStackEntryCount() < 1);
  invalidateOptionsMenu();
}"
42842,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mTitle=mDrawerTitle=getTitle();
  mSubtitle=mDrawerSubtitle=getActionBar().getSubtitle();
  mIcon=mDrawerIcon=R.drawable.ic_launcher;
  mBgColor=mDrawerBgColor=ABFragment.NO_BG_COLOR;
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  mDrawerListAdapter=new MenuAdapter(this);
  mDrawerList.setAdapter(mDrawerListAdapter);
  mDrawerList.setOnItemClickListener(this);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    @Override public void onDrawerClosed(    View view){
      updateABDrawerClosed();
    }
    @Override public void onDrawerOpened(    View drawerView){
      updateABDrawerOpened();
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  if (savedInstanceState == null) {
    final String itemId=PreferenceUtils.getPrefLcl(this,PreferenceUtils.PREFS_LCL_ROOT_SCREEN_ITEM_ID,MenuAdapter.ITEM_ID_SELECTED_SCREEN_DEFAULT);
    selectItem(this.mDrawerListAdapter.getScreenItemPosition(itemId));
  }
 else {
    onRestoreState(savedInstanceState);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mTitle=mDrawerTitle=getTitle();
  mSubtitle=mDrawerSubtitle=getActionBar().getSubtitle();
  mIcon=mDrawerIcon=R.drawable.ic_launcher;
  mBgColor=mDrawerBgColor=ABFragment.NO_BG_COLOR;
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  mDrawerListAdapter=new MenuAdapter(this);
  mDrawerList.setAdapter(mDrawerListAdapter);
  mDrawerList.setOnItemClickListener(this);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    @Override public void onDrawerClosed(    View view){
      updateABDrawerClosed();
    }
    @Override public void onDrawerOpened(    View drawerView){
      updateABDrawerOpened();
    }
    @Override public void onDrawerStateChanged(    int newState){
      mDrawerState=newState;
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  if (savedInstanceState == null) {
    final String itemId=PreferenceUtils.getPrefLcl(this,PreferenceUtils.PREFS_LCL_ROOT_SCREEN_ITEM_ID,MenuAdapter.ITEM_ID_SELECTED_SCREEN_DEFAULT);
    selectItem(this.mDrawerListAdapter.getScreenItemPosition(itemId));
  }
 else {
    onRestoreState(savedInstanceState);
  }
}"
42843,"private void updateAB(){
  if (isDrawerOpen()) {
    updateABDrawerOpened();
  }
 else {
    updateABDrawerClosed();
  }
}","private void updateAB(){
  if (mDrawerState != DrawerLayout.STATE_IDLE) {
    return;
  }
  if (isDrawerOpen()) {
    updateABDrawerOpened();
  }
 else {
    updateABDrawerClosed();
  }
}"
42844,"@Override public void onUserLocationChanged(Location newLocation){
  if (newLocation != null) {
    this.userLocation=newLocation;
    if (this.agencyTypePagerAdapter != null) {
      this.agencyTypePagerAdapter.setUserLocation(newLocation);
    }
    if (this.nearbyLocation == null) {
      setNewNearbyLocation(newLocation);
    }
    boolean requireNotifyAB=false;
    if (LocationUtils.areAlmostTheSame(this.nearbyLocation,this.userLocation)) {
      if (this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=false;
      }
    }
 else {
      if (!this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=true;
      }
    }
    if (requireNotifyAB) {
      ((MainActivity)getActivity()).notifyABChange();
    }
  }
}","@Override public void onUserLocationChanged(Location newLocation){
  if (newLocation != null) {
    this.userLocation=newLocation;
    final List<Fragment> fragments=getChildFragmentManager().getFragments();
    if (fragments != null) {
      for (      Fragment fragment : fragments) {
        if (fragment != null && fragment instanceof MTActivityWithLocation.UserLocationListener) {
          ((MTActivityWithLocation.UserLocationListener)fragment).onUserLocationChanged(this.userLocation);
        }
      }
    }
    if (this.agencyTypePagerAdapter != null) {
      this.agencyTypePagerAdapter.setUserLocation(newLocation);
    }
    if (this.nearbyLocation == null) {
      setNewNearbyLocation(newLocation);
    }
    boolean requireNotifyAB=false;
    if (LocationUtils.areAlmostTheSame(this.nearbyLocation,this.userLocation)) {
      if (this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=false;
      }
    }
 else {
      if (!this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=true;
      }
    }
    if (requireNotifyAB) {
      ((MainActivity)getActivity()).notifyABChange();
    }
  }
}"
42845,"public void onFragmentInvisible(){
  if (!this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=false;
  if (this.adapter != null) {
    this.adapter.onPause();
  }
}","private void onFragmentInvisible(){
  if (!this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=false;
  if (this.adapter != null) {
    this.adapter.onPause();
  }
}"
42846,"public void onFragmentVisisble(){
  if (this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=true;
  if (this.adapter == null) {
    initAdapter();
  }
 else {
    if (this.adapter.getPoisCount() > 0) {
      this.adapter.onResume();
      this.adapter.refreshFavorites();
    }
  }
  NearbyFragment nearbyFragment=(NearbyFragment)getActivity().getSupportFragmentManager().findFragmentByTag(NearbyFragment.FRAGMENT_TAG);
  if (nearbyFragment != null) {
    useNewNearbyLocation(nearbyFragment.getNearbyLocation(),false);
    onUserLocationChanged(nearbyFragment.getUserLocation());
  }
}","private void onFragmentVisisble(){
  if (this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=true;
  if (this.adapter == null) {
    initAdapter();
  }
 else {
    if (this.adapter.getPoisCount() > 0) {
      this.adapter.onResume();
      this.adapter.refreshFavorites();
    }
  }
  NearbyFragment nearbyFragment=(NearbyFragment)getActivity().getSupportFragmentManager().findFragmentByTag(NearbyFragment.FRAGMENT_TAG);
  if (nearbyFragment != null) {
    useNewNearbyLocation(nearbyFragment.getNearbyLocation(),false);
    onUserLocationChanged(nearbyFragment.getUserLocation());
  }
}"
42847,"private void initTabsAndViewPager(){
  final List<DataSourceType> availableAgencyTypes=DataSourceProvider.get().getAvailableAgencyTypes(getActivity());
  if (CollectionUtils.getSize(availableAgencyTypes) == 0) {
    return;
  }
  this.agencyTypePagerAdapter=new AgencyTypePagerAdapter(getActivity(),getActivity().getSupportFragmentManager(),availableAgencyTypes);
  this.agencyTypePagerAdapter.setNearbyLocation(this.nearbyLocation);
  final ViewPager viewPager=(ViewPager)getView().findViewById(R.id.viewpager);
  viewPager.setAdapter(this.agencyTypePagerAdapter);
  viewPager.setOffscreenPageLimit(3);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)getView().findViewById(R.id.tabs);
  tabs.setViewPager(viewPager);
  tabs.setOnPageChangeListener(this);
  this.lastPageSelected=0;
  new MTAsyncTask<Void,Void,Integer>(){
    public String getLogTag(){
      return TAG;
    }
    @Override protected Integer doInBackgroundMT(    Void... params){
      try {
        final int typeId=PreferenceUtils.getPrefLcl(getActivity(),PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE,PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE_DEFAULT);
        for (int i=0; i < availableAgencyTypes.size(); i++) {
          if (availableAgencyTypes.get(i).getId() == typeId) {
            return i;
          }
        }
      }
 catch (      Exception e) {
        MTLog.w(TAG,e,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void onPostExecute(    Integer lastPageSelected){
      if (lastPageSelected != null) {
        if (NearbyFragment.this.lastPageSelected == 0) {
          viewPager.setCurrentItem(lastPageSelected.intValue());
          NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
          onPageSelected(NearbyFragment.this.lastPageSelected);
        }
      }
    }
  }
.execute();
}","private void initTabsAndViewPager(){
  final List<DataSourceType> availableAgencyTypes=DataSourceProvider.get().getAvailableAgencyTypes(getActivity());
  if (CollectionUtils.getSize(availableAgencyTypes) == 0) {
    return;
  }
  this.agencyTypePagerAdapter=new AgencyTypePagerAdapter(getActivity(),getActivity().getSupportFragmentManager(),availableAgencyTypes);
  this.agencyTypePagerAdapter.setNearbyLocation(this.nearbyLocation);
  final ViewPager viewPager=(ViewPager)getView().findViewById(R.id.viewpager);
  viewPager.setAdapter(this.agencyTypePagerAdapter);
  viewPager.setOffscreenPageLimit(3);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)getView().findViewById(R.id.tabs);
  tabs.setViewPager(viewPager);
  tabs.setOnPageChangeListener(this);
  this.lastPageSelected=0;
  new MTAsyncTask<Void,Void,Integer>(){
    private final String TAG=NearbyFragment.class.getSimpleName() + ""String_Node_Str"";
    public String getLogTag(){
      return TAG;
    }
    @Override protected Integer doInBackgroundMT(    Void... params){
      try {
        final int typeId=PreferenceUtils.getPrefLcl(getActivity(),PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE,PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE_DEFAULT);
        for (int i=0; i < availableAgencyTypes.size(); i++) {
          if (availableAgencyTypes.get(i).getId() == typeId) {
            return i;
          }
        }
      }
 catch (      Exception e) {
        MTLog.w(TAG,e,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void onPostExecute(    Integer lastPageSelected){
      if (NearbyFragment.this.lastPageSelected != 0) {
        return;
      }
      if (lastPageSelected != null) {
        NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
        viewPager.setCurrentItem(NearbyFragment.this.lastPageSelected);
      }
      onPageSelected(NearbyFragment.this.lastPageSelected);
    }
  }
.execute();
}"
42848,"@Override protected void onPostExecute(Integer lastPageSelected){
  if (lastPageSelected != null) {
    if (NearbyFragment.this.lastPageSelected == 0) {
      viewPager.setCurrentItem(lastPageSelected.intValue());
      NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
      onPageSelected(NearbyFragment.this.lastPageSelected);
    }
  }
}","@Override protected void onPostExecute(Integer lastPageSelected){
  if (NearbyFragment.this.lastPageSelected != 0) {
    return;
  }
  if (lastPageSelected != null) {
    NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
    viewPager.setCurrentItem(NearbyFragment.this.lastPageSelected);
  }
  onPageSelected(NearbyFragment.this.lastPageSelected);
}"
42849,"private void disableTimeChangeddReceiver(){
  if (this.timeChangedReceiverEnabled) {
    getContext().unregisterReceiver(this.timeChangedReceiver);
    this.timeChangedReceiverEnabled=false;
    this.nowToTheMinute=-1;
  }
}","private void disableTimeChangeddReceiver(){
  if (this.timeChangedReceiverEnabled) {
    getContext().unregisterReceiver(this.timeChangedReceiver);
    this.timeChangedReceiverEnabled=false;
    this.nowToTheMinute=-1l;
  }
}"
42850,"public void onDestroy(){
  disableTimeChangeddReceiver();
}","public void onDestroy(){
  disableTimeChangeddReceiver();
  if (this.pois != null) {
    this.pois.clear();
  }
  this.compassImgsWR.clear();
  this.poiStatusViewHoldersWR.clear();
}"
42851,"private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.setPois(null);
    this.adapter.notifyDataSetChanged(true);
  }
  if (this.nearbyLocation == null) {
    final View view=getView();
    if (view != null) {
      if (view.findViewById(R.id.list) != null) {
        ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
      }
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}","private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.notifyDataSetChanged(true);
  }
  final View view=getView();
  if (view != null) {
    if (view.findViewById(R.id.list) != null) {
      ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}"
42852,"@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.setPois(null);
    this.adapter.onPause();
  }
}","@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.onPause();
  }
}"
42853,"private void setupView(View view){
  if (view == null) {
    return;
  }
  AbsListView absListView=(AbsListView)view.findViewById(isShowingListInsteadOfGrid() ? R.id.list : R.id.grid);
  linkAdapterWithListView(absListView);
  absListView.setOnItemClickListener(this);
  switchView(view);
}","private void setupView(View view){
  if (view == null) {
    return;
  }
  AbsListView absListView=(AbsListView)view.findViewById(isShowingListInsteadOfGrid() ? R.id.list : R.id.grid);
  linkAdapterWithListView(view);
  absListView.setOnItemClickListener(this);
  switchView(view);
}"
42854,"private void onFragmentVisible(){
  if (this.fragmentVisible) {
    return;
  }
  if (!isResumed()) {
    return;
  }
  this.fragmentVisible=true;
  switchView(getView());
  if (this.adapter == null || !this.adapter.isInitialized()) {
    LoaderUtils.restartLoader(this,ROUTES_LOADER,null,this);
  }
  checkIfShowingListInsteadOfGridChanged();
  getActivity().supportInvalidateOptionsMenu();
  updateListGridToggleMenuItem();
}","private void onFragmentVisible(){
  if (this.fragmentVisible) {
    return;
  }
  if (!isResumed()) {
    return;
  }
  this.fragmentVisible=true;
  switchView(getView());
  if (this.adapter == null || !this.adapter.isInitialized()) {
    LoaderUtils.restartLoader(this,ROUTES_LOADER,null,this);
  }
  checkIfShowingListInsteadOfGridChanged();
  if (getActivity() != null) {
    getActivity().invalidateOptionsMenu();
  }
  updateListGridToggleMenuItem();
}"
42855,"public static void destroyAd(Activity activity){
  if (!AD_ENABLED) {
    return;
  }
  View adLayout=activity == null ? null : activity.findViewById(R.id.ad_layout);
  if (adLayout != null) {
    AdView adView=(AdView)adLayout.findViewById(R.id.ad);
    if (adView != null) {
      adView.destroy();
    }
  }
  adLoaded=null;
  if (setupAdTask != null) {
    setupAdTask.cancel(true);
  }
  setupAdTask=null;
}","public static void destroyAd(Activity activity){
  if (!AD_ENABLED) {
    return;
  }
  View adLayout=activity == null ? null : activity.findViewById(R.id.ad_layout);
  if (adLayout != null) {
    AdView adView=(AdView)adLayout.findViewById(R.id.ad);
    if (adView != null) {
      try {
        adView.removeAllViews();
        adView.destroy();
      }
 catch (      Throwable t) {
        MTLog.w(TAG,t,""String_Node_Str"");
      }
    }
  }
  adLoaded=null;
  if (setupAdTask != null) {
    setupAdTask.cancel(true);
  }
  setupAdTask=null;
}"
42856,"private synchronized static boolean hasChanged(DataSourceProvider current,Context optContext){
  if (current == null) {
    return true;
  }
  if (optContext == null) {
    return true;
  }
  String agencyProviderMetaData=getAgencyProviderMetaData(optContext);
  String scheduleProviderMetaData=getScheduleProviderMetaData(optContext);
  String statusProviderMetaData=getStatusProviderMetaData(optContext);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(optContext);
  String newsProviderMetaData=getNewsProviderMetaData(optContext);
  int nbAgencyProviders=0, nbScheduleProviders=0, nbStatusProviders=0, nbServiceUpdateProviders=0, nbNewsProviders=0;
  PackageManager pm=optContext.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            if (!instance.hasAgency(provider.authority)) {
              return true;
            }
            nbAgencyProviders++;
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            if (instance.getStatusProvider(provider.authority) == null) {
              return true;
            }
            nbStatusProviders++;
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            if (instance.getScheduleProvider(provider.authority) == null) {
              return true;
            }
            nbScheduleProviders++;
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbServiceUpdateProviders++;
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbNewsProviders++;
          }
        }
      }
    }
  }
  if (nbAgencyProviders != CollectionUtils.getSize(instance.allAgenciesAuthority) || nbStatusProviders != CollectionUtils.getSize(instance.allStatusProviders) || nbScheduleProviders != CollectionUtils.getSize(instance.allScheduleProviders) || nbServiceUpdateProviders != CollectionUtils.getSize(instance.allServiceUpdateProviders) || nbNewsProviders != CollectionUtils.getSize(instance.allNewsProviders)) {
    return true;
  }
  return false;
}","private synchronized static boolean hasChanged(DataSourceProvider current,Context optContext){
  if (current == null) {
    return true;
  }
  if (optContext == null) {
    return true;
  }
  String agencyProviderMetaData=getAgencyProviderMetaData(optContext);
  String scheduleProviderMetaData=getScheduleProviderMetaData(optContext);
  String statusProviderMetaData=getStatusProviderMetaData(optContext);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(optContext);
  String newsProviderMetaData=getNewsProviderMetaData(optContext);
  int nbAgencyProviders=0, nbScheduleProviders=0, nbStatusProviders=0, nbServiceUpdateProviders=0, nbNewsProviders=0;
  PackageManager pm=optContext.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            if (!instance.hasAgency(provider.authority)) {
              return true;
            }
            nbAgencyProviders++;
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            if (instance.getStatusProvider(provider.authority) == null) {
              return true;
            }
            nbStatusProviders++;
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            if (instance.getScheduleProvider(provider.authority) == null) {
              return true;
            }
            nbScheduleProviders++;
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            if (instance.getServiceUpdateProvider(provider.authority) == null) {
              return true;
            }
            nbServiceUpdateProviders++;
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            if (instance.getNewsProvider(provider.authority) == null) {
              return true;
            }
            nbNewsProviders++;
          }
        }
      }
    }
  }
  if (nbAgencyProviders != CollectionUtils.getSize(instance.allAgenciesAuthority) || nbStatusProviders != CollectionUtils.getSize(instance.allStatusProviders) || nbScheduleProviders != CollectionUtils.getSize(instance.allScheduleProviders) || nbServiceUpdateProviders != CollectionUtils.getSize(instance.allServiceUpdateProviders) || nbNewsProviders != CollectionUtils.getSize(instance.allNewsProviders)) {
    return true;
  }
  return false;
}"
42857,"private synchronized void init(Context context){
  String agencyProviderMetaData=getAgencyProviderMetaData(context);
  String agencyProviderTypeMetaData=context.getString(R.string.agency_provider_type);
  String rtsProviderMetaData=context.getString(R.string.rts_provider);
  String scheduleProviderMetaData=getScheduleProviderMetaData(context);
  String statusProviderMetaData=getStatusProviderMetaData(context);
  String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(context);
  String newsProviderMetaData=getNewsProviderMetaData(context);
  String statusProviderTargetMetaData=context.getString(R.string.status_provider_target);
  String scheduleProviderTargetMetaData=context.getString(R.string.schedule_provider_target);
  String serviceUpdateProviderTargetMetaData=context.getString(R.string.service_update_provider_target);
  String newsProviderTargetMetaData=context.getString(R.string.news_provider_target);
  PackageManager pm=context.getPackageManager();
  for (  PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
    ProviderInfo[] providers=packageInfo.providers;
    if (providers != null) {
      for (      ProviderInfo provider : providers) {
        if (provider.metaData != null) {
          if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
            int agencyTypeId=provider.metaData.getInt(agencyProviderTypeMetaData,-1);
            if (agencyTypeId >= 0) {
              DataSourceType newAgencyType=DataSourceType.parseId(agencyTypeId);
              if (newAgencyType != null) {
                if (!this.allAgencyTypes.contains(newAgencyType)) {
                  this.allAgencyTypes.add(newAgencyType);
                }
              }
              this.agenciesAuthorityTypeId.put(provider.authority,agencyTypeId);
            }
            boolean isRTS=rtsProviderMetaData.equals(provider.metaData.getString(rtsProviderMetaData));
            this.agenciesAuthorityIsRts.put(provider.authority,isRTS);
            this.allAgenciesAuthority.add(provider.authority);
          }
          if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(statusProviderTargetMetaData);
            StatusProviderProperties newStatusProvider=new StatusProviderProperties(provider.authority,targetAuthority);
            addNewStatusProvider(newStatusProvider);
          }
          if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(scheduleProviderTargetMetaData);
            ScheduleProviderProperties newScheduleProvider=new ScheduleProviderProperties(provider.authority,targetAuthority);
            addNewScheduleProvider(newScheduleProvider);
          }
          if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(serviceUpdateProviderTargetMetaData);
            ServiceUpdateProviderProperties newServiceUpdateProvider=new ServiceUpdateProviderProperties(provider.authority,targetAuthority);
            addNewServiceUpdateProvider(newServiceUpdateProvider);
          }
          if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
            String targetAuthority=provider.metaData.getString(newsProviderTargetMetaData);
            NewsProviderProperties newNewsProvider=new NewsProviderProperties(provider.authority,targetAuthority);
            addNewNewsProvider(newNewsProvider);
          }
        }
      }
    }
  }
  CollectionUtils.sort(this.allAgencyTypes,new DataSourceType.DataSourceTypeShortNameComparator(context));
}","private synchronized void init(Context context){
  try {
    String agencyProviderMetaData=getAgencyProviderMetaData(context);
    String agencyProviderTypeMetaData=context.getString(R.string.agency_provider_type);
    String rtsProviderMetaData=context.getString(R.string.rts_provider);
    String scheduleProviderMetaData=getScheduleProviderMetaData(context);
    String statusProviderMetaData=getStatusProviderMetaData(context);
    String serviceUpdateProviderMetaData=getServiceUpdateProviderMetaData(context);
    String newsProviderMetaData=getNewsProviderMetaData(context);
    String statusProviderTargetMetaData=context.getString(R.string.status_provider_target);
    String scheduleProviderTargetMetaData=context.getString(R.string.schedule_provider_target);
    String serviceUpdateProviderTargetMetaData=context.getString(R.string.service_update_provider_target);
    String newsProviderTargetMetaData=context.getString(R.string.news_provider_target);
    PackageManager pm=context.getPackageManager();
    for (    PackageInfo packageInfo : pm.getInstalledPackages(PackageManager.GET_PROVIDERS | PackageManager.GET_META_DATA)) {
      ProviderInfo[] providers=packageInfo.providers;
      if (providers != null) {
        for (        ProviderInfo provider : providers) {
          if (provider.metaData != null) {
            if (agencyProviderMetaData.equals(provider.metaData.getString(agencyProviderMetaData))) {
              int agencyTypeId=provider.metaData.getInt(agencyProviderTypeMetaData,-1);
              if (agencyTypeId >= 0) {
                DataSourceType newAgencyType=DataSourceType.parseId(agencyTypeId);
                if (newAgencyType != null) {
                  if (!this.allAgencyTypes.contains(newAgencyType)) {
                    this.allAgencyTypes.add(newAgencyType);
                  }
                }
                this.agenciesAuthorityTypeId.put(provider.authority,agencyTypeId);
              }
              boolean isRTS=rtsProviderMetaData.equals(provider.metaData.getString(rtsProviderMetaData));
              this.agenciesAuthorityIsRts.put(provider.authority,isRTS);
              this.allAgenciesAuthority.add(provider.authority);
            }
            if (statusProviderMetaData.equals(provider.metaData.getString(statusProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(statusProviderTargetMetaData);
              StatusProviderProperties newStatusProvider=new StatusProviderProperties(provider.authority,targetAuthority);
              addNewStatusProvider(newStatusProvider);
            }
            if (scheduleProviderMetaData.equals(provider.metaData.getString(scheduleProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(scheduleProviderTargetMetaData);
              ScheduleProviderProperties newScheduleProvider=new ScheduleProviderProperties(provider.authority,targetAuthority);
              addNewScheduleProvider(newScheduleProvider);
            }
            if (serviceUpdateProviderMetaData.equals(provider.metaData.getString(serviceUpdateProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(serviceUpdateProviderTargetMetaData);
              ServiceUpdateProviderProperties newServiceUpdateProvider=new ServiceUpdateProviderProperties(provider.authority,targetAuthority);
              addNewServiceUpdateProvider(newServiceUpdateProvider);
            }
            if (newsProviderMetaData.equals(provider.metaData.getString(newsProviderMetaData))) {
              String targetAuthority=provider.metaData.getString(newsProviderTargetMetaData);
              NewsProviderProperties newNewsProvider=new NewsProviderProperties(provider.authority,targetAuthority);
              addNewNewsProvider(newNewsProvider);
            }
          }
        }
      }
    }
    CollectionUtils.sort(this.allAgencyTypes,new DataSourceType.DataSourceTypeShortNameComparator(context));
  }
 catch (  Exception e) {
    MTLog.w(this,e,""String_Node_Str"");
    destroy();
  }
}"
42858,"private synchronized void initAgencyProperties(Context context){
  if (this.allAgencies != null) {
    return;
  }
  if (context == null) {
    return;
  }
  if (this.allAgenciesAuthority != null) {
    this.allAgencies=new ArrayList<AgencyProperties>();
    this.allAgenciesByAuthority=new HashMap<String,AgencyProperties>();
    this.allAgenciesByTypeId=new SparseArray<ArrayList<AgencyProperties>>();
    this.rtsAgencyRouteLogoByAuthority=new HashMap<String,JPaths>();
    for (    String authority : this.allAgenciesAuthority) {
      String label=DataSourceManager.findAgencyLabel(context,authority);
      String color=DataSourceManager.findAgencyColor(context,authority);
      String shortName=DataSourceManager.findAgencyShortName(context,authority);
      LocationUtils.Area area=DataSourceManager.findAgencyArea(context,authority);
      boolean isRTS=this.agenciesAuthorityIsRts.get(authority);
      JPaths jPath=isRTS ? DataSourceManager.findAgencyRTSRouteLogo(context,authority) : null;
      Integer typeId=this.agenciesAuthorityTypeId.get(authority);
      if (typeId != null && typeId >= 0) {
        DataSourceType type=DataSourceType.parseId(typeId);
        if (type != null) {
          addNewAgency(new AgencyProperties(authority,type,shortName,label,color,area,isRTS));
          if (jPath != null) {
            this.rtsAgencyRouteLogoByAuthority.put(authority,jPath);
          }
        }
 else {
          MTLog.w(this,""String_Node_Str"");
        }
      }
 else {
        MTLog.w(this,""String_Node_Str"",typeId);
      }
    }
    CollectionUtils.sort(this.allAgencies,AgencyProperties.SHORT_NAME_COMPARATOR);
    if (this.allAgenciesByTypeId != null) {
      for (int i=0; i < this.allAgenciesByTypeId.size(); i++) {
        int typeId=this.allAgenciesByTypeId.keyAt(i);
        CollectionUtils.sort(this.allAgenciesByTypeId.get(typeId),AgencyProperties.SHORT_NAME_COMPARATOR);
      }
    }
  }
}","private synchronized void initAgencyProperties(Context context){
  if (this.allAgencies != null) {
    return;
  }
  if (context == null) {
    return;
  }
  try {
    if (this.allAgenciesAuthority != null) {
      this.allAgencies=new ArrayList<AgencyProperties>();
      this.allAgenciesByAuthority=new HashMap<String,AgencyProperties>();
      this.allAgenciesByTypeId=new SparseArray<ArrayList<AgencyProperties>>();
      this.rtsAgencyRouteLogoByAuthority=new HashMap<String,JPaths>();
      for (      String authority : this.allAgenciesAuthority) {
        String label=DataSourceManager.findAgencyLabel(context,authority);
        String color=DataSourceManager.findAgencyColor(context,authority);
        String shortName=DataSourceManager.findAgencyShortName(context,authority);
        LocationUtils.Area area=DataSourceManager.findAgencyArea(context,authority);
        boolean isRTS=this.agenciesAuthorityIsRts.get(authority);
        JPaths jPath=isRTS ? DataSourceManager.findAgencyRTSRouteLogo(context,authority) : null;
        Integer typeId=this.agenciesAuthorityTypeId.get(authority);
        if (typeId != null && typeId >= 0) {
          DataSourceType type=DataSourceType.parseId(typeId);
          if (type != null) {
            addNewAgency(new AgencyProperties(authority,type,shortName,label,color,area,isRTS));
            if (jPath != null) {
              this.rtsAgencyRouteLogoByAuthority.put(authority,jPath);
            }
          }
        }
 else {
          MTLog.w(this,""String_Node_Str"",typeId);
        }
      }
      CollectionUtils.sort(this.allAgencies,AgencyProperties.SHORT_NAME_COMPARATOR);
      if (this.allAgenciesByTypeId != null) {
        for (int i=0; i < this.allAgenciesByTypeId.size(); i++) {
          int typeId=this.allAgenciesByTypeId.keyAt(i);
          CollectionUtils.sort(this.allAgenciesByTypeId.get(typeId),AgencyProperties.SHORT_NAME_COMPARATOR);
        }
      }
    }
  }
 catch (  Exception e) {
    MTLog.w(this,e,""String_Node_Str"");
    this.allAgencies=null;
    this.allAgenciesByAuthority=null;
    this.allAgenciesByTypeId=null;
    this.rtsAgencyRouteLogoByAuthority=null;
  }
}"
42859,"private void updateCommonViewManual(int position,View convertView){
  if (convertView == null || convertView.getTag() == null || !(convertView.getTag() instanceof CommonViewHolder)) {
    return;
  }
  CommonViewHolder holder=(CommonViewHolder)convertView.getTag();
  POIManager poim=getItem(position);
  updateCommonView(holder,poim);
}","private void updateCommonViewManual(int position,View convertView){
  if (convertView == null || convertView.getTag() == null || !(convertView.getTag() instanceof CommonViewHolder)) {
    return;
  }
  CommonViewHolder holder=(CommonViewHolder)convertView.getTag();
  POIManager poim=getItem(position);
  updateCommonView(holder,poim);
  updatePOIStatus(holder.statusViewHolder,poim);
}"
42860,"private void updateABDrawerOpened(){
  getActionBar().setTitle(mDrawerTitle);
  getActionBar().setSubtitle(mDrawerSubtitle);
  if (mDrawerIcon > 0) {
    getActionBar().setIcon(mDrawerIcon);
  }
 else {
    getActionBar().setIcon(new ColorDrawable(getResources().getColor(android.R.color.transparent)));
  }
  if (mDrawerBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mDrawerBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(true);
  invalidateOptionsMenu();
}","private void updateABDrawerOpened(){
  getActionBar().setTitle(mDrawerTitle);
  getActionBar().setSubtitle(mDrawerSubtitle);
  if (mDrawerIcon > 0) {
    getActionBar().setIcon(mDrawerIcon);
    getActionBar().setDisplayShowHomeEnabled(true);
  }
 else {
    getActionBar().setDisplayShowHomeEnabled(false);
  }
  if (mDrawerBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mDrawerBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(true);
  invalidateOptionsMenu();
}"
42861,"private void updateABDrawerClosed(){
  getActionBar().setTitle(mTitle);
  getActionBar().setSubtitle(mSubtitle);
  if (mIcon > 0) {
    getActionBar().setIcon(mIcon);
  }
 else {
    getActionBar().setIcon(new ColorDrawable(getResources().getColor(android.R.color.transparent)));
  }
  if (mBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(getSupportFragmentManager().getBackStackEntryCount() < 1);
  invalidateOptionsMenu();
}","private void updateABDrawerClosed(){
  getActionBar().setTitle(mTitle);
  getActionBar().setSubtitle(mSubtitle);
  if (mIcon > 0) {
    getActionBar().setIcon(mIcon);
    getActionBar().setDisplayShowHomeEnabled(true);
  }
 else {
    getActionBar().setDisplayShowHomeEnabled(false);
  }
  if (mBgColor != null) {
    getActionBar().setBackgroundDrawable(new ColorDrawable(mBgColor));
  }
 else {
    getActionBar().setBackgroundDrawable(null);
  }
  this.mDrawerToggle.setDrawerIndicatorEnabled(getSupportFragmentManager().getBackStackEntryCount() < 1);
  invalidateOptionsMenu();
}"
42862,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mTitle=mDrawerTitle=getTitle();
  mSubtitle=mDrawerSubtitle=getActionBar().getSubtitle();
  mIcon=mDrawerIcon=R.drawable.ic_launcher;
  mBgColor=mDrawerBgColor=ABFragment.NO_BG_COLOR;
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  mDrawerListAdapter=new MenuAdapter(this);
  mDrawerList.setAdapter(mDrawerListAdapter);
  mDrawerList.setOnItemClickListener(this);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    @Override public void onDrawerClosed(    View view){
      updateABDrawerClosed();
    }
    @Override public void onDrawerOpened(    View drawerView){
      updateABDrawerOpened();
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  if (savedInstanceState == null) {
    final String itemId=PreferenceUtils.getPrefLcl(this,PreferenceUtils.PREFS_LCL_ROOT_SCREEN_ITEM_ID,MenuAdapter.ITEM_ID_SELECTED_SCREEN_DEFAULT);
    selectItem(this.mDrawerListAdapter.getScreenItemPosition(itemId));
  }
 else {
    onRestoreState(savedInstanceState);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mTitle=mDrawerTitle=getTitle();
  mSubtitle=mDrawerSubtitle=getActionBar().getSubtitle();
  mIcon=mDrawerIcon=R.drawable.ic_launcher;
  mBgColor=mDrawerBgColor=ABFragment.NO_BG_COLOR;
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  mDrawerListAdapter=new MenuAdapter(this);
  mDrawerList.setAdapter(mDrawerListAdapter);
  mDrawerList.setOnItemClickListener(this);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    @Override public void onDrawerClosed(    View view){
      updateABDrawerClosed();
    }
    @Override public void onDrawerOpened(    View drawerView){
      updateABDrawerOpened();
    }
    @Override public void onDrawerStateChanged(    int newState){
      mDrawerState=newState;
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  if (savedInstanceState == null) {
    final String itemId=PreferenceUtils.getPrefLcl(this,PreferenceUtils.PREFS_LCL_ROOT_SCREEN_ITEM_ID,MenuAdapter.ITEM_ID_SELECTED_SCREEN_DEFAULT);
    selectItem(this.mDrawerListAdapter.getScreenItemPosition(itemId));
  }
 else {
    onRestoreState(savedInstanceState);
  }
}"
42863,"private void updateAB(){
  if (isDrawerOpen()) {
    updateABDrawerOpened();
  }
 else {
    updateABDrawerClosed();
  }
}","private void updateAB(){
  if (mDrawerState != DrawerLayout.STATE_IDLE) {
    return;
  }
  if (isDrawerOpen()) {
    updateABDrawerOpened();
  }
 else {
    updateABDrawerClosed();
  }
}"
42864,"@Override public void onUserLocationChanged(Location newLocation){
  if (newLocation != null) {
    this.userLocation=newLocation;
    if (this.agencyTypePagerAdapter != null) {
      this.agencyTypePagerAdapter.setUserLocation(newLocation);
    }
    if (this.nearbyLocation == null) {
      setNewNearbyLocation(newLocation);
    }
    boolean requireNotifyAB=false;
    if (LocationUtils.areAlmostTheSame(this.nearbyLocation,this.userLocation)) {
      if (this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=false;
      }
    }
 else {
      if (!this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=true;
      }
    }
    if (requireNotifyAB) {
      ((MainActivity)getActivity()).notifyABChange();
    }
  }
}","@Override public void onUserLocationChanged(Location newLocation){
  if (newLocation != null) {
    this.userLocation=newLocation;
    final List<Fragment> fragments=getChildFragmentManager().getFragments();
    if (fragments != null) {
      for (      Fragment fragment : fragments) {
        if (fragment != null && fragment instanceof MTActivityWithLocation.UserLocationListener) {
          ((MTActivityWithLocation.UserLocationListener)fragment).onUserLocationChanged(this.userLocation);
        }
      }
    }
    if (this.agencyTypePagerAdapter != null) {
      this.agencyTypePagerAdapter.setUserLocation(newLocation);
    }
    if (this.nearbyLocation == null) {
      setNewNearbyLocation(newLocation);
    }
    boolean requireNotifyAB=false;
    if (LocationUtils.areAlmostTheSame(this.nearbyLocation,this.userLocation)) {
      if (this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=false;
      }
    }
 else {
      if (!this.userAwayFromNearbyLocation) {
        requireNotifyAB=true;
        this.userAwayFromNearbyLocation=true;
      }
    }
    if (requireNotifyAB) {
      ((MainActivity)getActivity()).notifyABChange();
    }
  }
}"
42865,"public void onFragmentInvisible(){
  if (!this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=false;
  if (this.adapter != null) {
    this.adapter.onPause();
  }
}","private void onFragmentInvisible(){
  if (!this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=false;
  if (this.adapter != null) {
    this.adapter.onPause();
  }
}"
42866,"public void onFragmentVisisble(){
  if (this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=true;
  if (this.adapter == null) {
    initAdapter();
  }
 else {
    if (this.adapter.getPoisCount() > 0) {
      this.adapter.onResume();
      this.adapter.refreshFavorites();
    }
  }
  NearbyFragment nearbyFragment=(NearbyFragment)getActivity().getSupportFragmentManager().findFragmentByTag(NearbyFragment.FRAGMENT_TAG);
  if (nearbyFragment != null) {
    useNewNearbyLocation(nearbyFragment.getNearbyLocation(),false);
    onUserLocationChanged(nearbyFragment.getUserLocation());
  }
}","private void onFragmentVisisble(){
  if (this.fragmentVisible) {
    return;
  }
  this.fragmentVisible=true;
  if (this.adapter == null) {
    initAdapter();
  }
 else {
    if (this.adapter.getPoisCount() > 0) {
      this.adapter.onResume();
      this.adapter.refreshFavorites();
    }
  }
  NearbyFragment nearbyFragment=(NearbyFragment)getActivity().getSupportFragmentManager().findFragmentByTag(NearbyFragment.FRAGMENT_TAG);
  if (nearbyFragment != null) {
    useNewNearbyLocation(nearbyFragment.getNearbyLocation(),false);
    onUserLocationChanged(nearbyFragment.getUserLocation());
  }
}"
42867,"private void initTabsAndViewPager(){
  final List<DataSourceType> availableAgencyTypes=DataSourceProvider.get().getAvailableAgencyTypes(getActivity());
  if (CollectionUtils.getSize(availableAgencyTypes) == 0) {
    return;
  }
  this.agencyTypePagerAdapter=new AgencyTypePagerAdapter(getActivity(),getActivity().getSupportFragmentManager(),availableAgencyTypes);
  this.agencyTypePagerAdapter.setNearbyLocation(this.nearbyLocation);
  final ViewPager viewPager=(ViewPager)getView().findViewById(R.id.viewpager);
  viewPager.setAdapter(this.agencyTypePagerAdapter);
  viewPager.setOffscreenPageLimit(3);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)getView().findViewById(R.id.tabs);
  tabs.setViewPager(viewPager);
  tabs.setOnPageChangeListener(this);
  this.lastPageSelected=0;
  new MTAsyncTask<Void,Void,Integer>(){
    public String getLogTag(){
      return TAG;
    }
    @Override protected Integer doInBackgroundMT(    Void... params){
      try {
        final int typeId=PreferenceUtils.getPrefLcl(getActivity(),PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE,PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE_DEFAULT);
        for (int i=0; i < availableAgencyTypes.size(); i++) {
          if (availableAgencyTypes.get(i).getId() == typeId) {
            return i;
          }
        }
      }
 catch (      Exception e) {
        MTLog.w(TAG,e,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void onPostExecute(    Integer lastPageSelected){
      if (lastPageSelected != null) {
        if (NearbyFragment.this.lastPageSelected == 0) {
          viewPager.setCurrentItem(lastPageSelected.intValue());
          NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
          onPageSelected(NearbyFragment.this.lastPageSelected);
        }
      }
    }
  }
.execute();
}","private void initTabsAndViewPager(){
  final List<DataSourceType> availableAgencyTypes=DataSourceProvider.get().getAvailableAgencyTypes(getActivity());
  if (CollectionUtils.getSize(availableAgencyTypes) == 0) {
    return;
  }
  this.agencyTypePagerAdapter=new AgencyTypePagerAdapter(getActivity(),getActivity().getSupportFragmentManager(),availableAgencyTypes);
  this.agencyTypePagerAdapter.setNearbyLocation(this.nearbyLocation);
  final ViewPager viewPager=(ViewPager)getView().findViewById(R.id.viewpager);
  viewPager.setAdapter(this.agencyTypePagerAdapter);
  viewPager.setOffscreenPageLimit(3);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)getView().findViewById(R.id.tabs);
  tabs.setViewPager(viewPager);
  tabs.setOnPageChangeListener(this);
  this.lastPageSelected=0;
  new MTAsyncTask<Void,Void,Integer>(){
    private final String TAG=NearbyFragment.class.getSimpleName() + ""String_Node_Str"";
    public String getLogTag(){
      return TAG;
    }
    @Override protected Integer doInBackgroundMT(    Void... params){
      try {
        final int typeId=PreferenceUtils.getPrefLcl(getActivity(),PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE,PreferenceUtils.PREFS_LCL_NEARBY_TAB_TYPE_DEFAULT);
        for (int i=0; i < availableAgencyTypes.size(); i++) {
          if (availableAgencyTypes.get(i).getId() == typeId) {
            return i;
          }
        }
      }
 catch (      Exception e) {
        MTLog.w(TAG,e,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void onPostExecute(    Integer lastPageSelected){
      if (NearbyFragment.this.lastPageSelected != 0) {
        return;
      }
      if (lastPageSelected != null) {
        NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
        viewPager.setCurrentItem(NearbyFragment.this.lastPageSelected);
      }
      onPageSelected(NearbyFragment.this.lastPageSelected);
    }
  }
.execute();
}"
42868,"@Override protected void onPostExecute(Integer lastPageSelected){
  if (lastPageSelected != null) {
    if (NearbyFragment.this.lastPageSelected == 0) {
      viewPager.setCurrentItem(lastPageSelected.intValue());
      NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
      onPageSelected(NearbyFragment.this.lastPageSelected);
    }
  }
}","@Override protected void onPostExecute(Integer lastPageSelected){
  if (NearbyFragment.this.lastPageSelected != 0) {
    return;
  }
  if (lastPageSelected != null) {
    NearbyFragment.this.lastPageSelected=lastPageSelected.intValue();
    viewPager.setCurrentItem(NearbyFragment.this.lastPageSelected);
  }
  onPageSelected(NearbyFragment.this.lastPageSelected);
}"
42869,"private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.setPois(null);
    this.adapter.notifyDataSetChanged(true);
  }
  if (this.nearbyLocation == null) {
    final View view=getView();
    if (view != null) {
      if (view.findViewById(R.id.list) != null) {
        ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
      }
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}","private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.notifyDataSetChanged(true);
  }
  final View view=getView();
  if (view != null) {
    if (view.findViewById(R.id.list) != null) {
      ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}"
42870,"@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.setPois(null);
    this.adapter.onPause();
  }
}","@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.onPause();
  }
}"
42871,"private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.notifyDataSetChanged(true);
  }
  final View view=getView();
  if (view != null) {
    if (view.findViewById(R.id.list) != null) {
      ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}","private void useNewNearbyLocation(Location newNearbyLocation,boolean force){
  if (!force && (newNearbyLocation == null || !this.fragmentVisible || LocationUtils.areTheSame(newNearbyLocation,this.nearbyLocation))) {
    return;
  }
  this.nearbyLocation=newNearbyLocation;
  if (this.adapter != null) {
    this.adapter.clear();
  }
  final View view=getView();
  if (view != null) {
    if (view.findViewById(R.id.list) != null) {
      ((ListView)view.findViewById(R.id.list)).setSelectionFromTop(0,0);
    }
  }
  this.ad=LocationUtils.DEFAULT_AROUND_DIFF;
  showLoading();
  if (this.nearbyLocation != null) {
    getLoaderManager().restartLoader(NEARBY_POIS_LOADER,null,this);
  }
}"
42872,"@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.clearAll();
    this.adapter.onPause();
  }
}","@Override public void onLoaderReset(Loader<List<POIManager>> loader){
  if (this.adapter != null) {
    this.adapter.clear();
    this.adapter.onPause();
  }
}"
42873,"private void validate(RsProtectParams params){
  if (params.getResources() == null || params.getResources().isEmpty()) {
    throw new ErrorResponseException(ErrorResponseCode.NO_UMA_RESOURCES_TO_PROTECT);
  }
  if (!org.xdi.oxd.rs.protect.ResourceValidator.isHttpMethodUniqueInPath(params.getResources())) {
    throw new ErrorResponseException(ErrorResponseCode.UMA_HTTP_METHOD_NOT_UNIQUE);
  }
  if (params.getResources() != null) {
    for (    RsResource resource : params.getResources()) {
      if (resource.getConditions() != null) {
        for (        Condition condition : resource.getConditions()) {
          if (condition.getScopeExpression() != null) {
            String json=condition.getScopeExpression().toString();
            if (StringUtils.isNotBlank(json)) {
              boolean nodeValid=JsonLogicNodeParser.isNodeValid(json);
              LOG.trace(""String_Node_Str"" + nodeValid + ""String_Node_Str""+ json);
              if (!nodeValid) {
                throw new ErrorResponseException(ErrorResponseCode.UMA_FAILED_TO_VALIDATE_SCOPE_EXPRESSION);
              }
            }
          }
        }
      }
    }
  }
  List<UmaResource> existingUmaResources=getRp().getUmaProtectedResources();
  if (existingUmaResources != null && !existingUmaResources.isEmpty()) {
    if (params.getOverwrite() == null || !params.getOverwrite()) {
      throw new ErrorResponseException(ErrorResponseCode.UMA_PROTECTION_FAILED_BECAUSE_RESOURCES_ALREADY_EXISTS);
    }
 else {
      UmaMetadata discovery=getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId());
      UmaResourceService resourceService=UmaClientFactory.instance().createResourceService(discovery,getHttpService().getClientExecutor());
      String pat=getUmaTokenService().getPat(params.getOxdId()).getToken();
      for (      UmaResource resource : existingUmaResources) {
        LOG.trace(""String_Node_Str"" + resource.getId() + ""String_Node_Str"");
        resourceService.deleteResource(""String_Node_Str"" + pat,resource.getId());
        LOG.trace(""String_Node_Str"" + resource.getId() + ""String_Node_Str"");
      }
    }
  }
}","private void validate(RsProtectParams params){
  if (params.getResources() == null || params.getResources().isEmpty()) {
    throw new ErrorResponseException(ErrorResponseCode.NO_UMA_RESOURCES_TO_PROTECT);
  }
  if (!org.xdi.oxd.rs.protect.ResourceValidator.isHttpMethodUniqueInPath(params.getResources())) {
    throw new ErrorResponseException(ErrorResponseCode.UMA_HTTP_METHOD_NOT_UNIQUE);
  }
  if (params.getResources() != null) {
    for (    RsResource resource : params.getResources()) {
      if (resource.getConditions() != null) {
        for (        Condition condition : resource.getConditions()) {
          if (condition.getScopeExpression() != null) {
            String json=condition.getScopeExpression().toString();
            if (StringUtils.isNotBlank(json)) {
              boolean nodeValid=JsonLogicNodeParser.isNodeValid(json);
              LOG.trace(""String_Node_Str"" + nodeValid + ""String_Node_Str""+ json);
              if (!nodeValid) {
                throw new ErrorResponseException(ErrorResponseCode.UMA_FAILED_TO_VALIDATE_SCOPE_EXPRESSION);
              }
            }
          }
        }
      }
    }
  }
  Rp rp=getRp();
  List<UmaResource> existingUmaResources=rp.getUmaProtectedResources();
  if (existingUmaResources != null && !existingUmaResources.isEmpty()) {
    if (params.getOverwrite() == null || !params.getOverwrite()) {
      throw new ErrorResponseException(ErrorResponseCode.UMA_PROTECTION_FAILED_BECAUSE_RESOURCES_ALREADY_EXISTS);
    }
 else {
      UmaMetadata discovery=getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId());
      UmaResourceService resourceService=UmaClientFactory.instance().createResourceService(discovery,getHttpService().getClientExecutor());
      String pat=getUmaTokenService().getPat(params.getOxdId()).getToken();
      for (      UmaResource resource : existingUmaResources) {
        LOG.trace(""String_Node_Str"" + resource.getId() + ""String_Node_Str"");
        resourceService.deleteResource(""String_Node_Str"" + pat,resource.getId());
        LOG.trace(""String_Node_Str"" + resource.getId() + ""String_Node_Str"");
      }
      rp.getUmaProtectedResources().clear();
      getRpService().updateSilently(rp);
    }
  }
}"
42874,"@Override protected void configure(){
  bind(LicenseService.class).in(Singleton.class);
  bind(ConfigurationService.class).in(Singleton.class);
  bind(SocketService.class).in(Singleton.class);
  bind(PublicOpKeyService.class).in(Singleton.class);
  bind(RpService.class).in(Singleton.class);
  bind(HttpService.class).in(Singleton.class);
  bind(SqlPersistenceProvider.class).to(H2PersistenceProvider.class).in(Singleton.class);
  bind(PersistenceService.class).to(PersistenceServiceImpl.class).in(Singleton.class);
  bind(MigrationService.class).in(Singleton.class);
  bind(DiscoveryService.class).in(Singleton.class);
  bind(ValidationService.class).in(Singleton.class);
  bind(TimeService.class).in(Singleton.class);
  bind(StateService.class).in(Singleton.class);
  bind(Configuration.class).toProvider(ConfigurationService.class);
}","@Override protected void configure(){
  bind(LicenseService.class).in(Singleton.class);
  bind(ConfigurationService.class).in(Singleton.class);
  bind(SocketService.class).in(Singleton.class);
  bind(PublicOpKeyService.class).in(Singleton.class);
  bind(RpService.class).in(Singleton.class);
  bind(HttpService.class).in(Singleton.class);
  bind(IntrospectionService.class).in(Singleton.class);
  bind(SqlPersistenceProvider.class).to(H2PersistenceProvider.class).in(Singleton.class);
  bind(PersistenceService.class).to(PersistenceServiceImpl.class).in(Singleton.class);
  bind(MigrationService.class).in(Singleton.class);
  bind(DiscoveryService.class).in(Singleton.class);
  bind(ValidationService.class).in(Singleton.class);
  bind(TimeService.class).in(Singleton.class);
  bind(StateService.class).in(Singleton.class);
  bind(Configuration.class).toProvider(ConfigurationService.class);
}"
42875,"@Override public CommandResponse execute(IntrospectAccessTokenParams params) throws Exception {
  getValidationService().validate(params);
  final IntrospectionService introspectionService=ProxyFactory.create(IntrospectionService.class,getDiscoveryService().getConnectDiscoveryResponseByOxdId(params.getOxdId()).getIntrospectionEndpoint(),getHttpService().getClientExecutor());
  IntrospectionResponse response=null;
  try {
    response=introspectionService.introspectToken(""String_Node_Str"" + getUmaTokenService().getPat(params.getOxdId()).getToken(),params.getAccessToken());
  }
 catch (  ClientResponseFailure e) {
    int status=e.getResponse().getStatus();
    LOG.debug(""String_Node_Str"" + e.getResponse().getEntity(String.class) + ""String_Node_Str""+ status,e);
    if (status == 400 || status == 401) {
      LOG.debug(""String_Node_Str"");
      getUmaTokenService().obtainPat(params.getOxdId());
      response=introspectionService.introspectToken(""String_Node_Str"" + getUmaTokenService().getPat(params.getOxdId()).getToken(),params.getAccessToken());
    }
 else {
      throw e;
    }
  }
  return CommandResponse.ok().setData(new POJONode(response));
}","@Override public CommandResponse execute(IntrospectAccessTokenParams params) throws Exception {
  getValidationService().validate(params);
  final IntrospectionService introspectionService=getInstance(IntrospectionService.class);
  IntrospectionResponse response=introspectionService.introspectToken(params.getOxdId(),params.getAccessToken());
  return CommandResponse.ok().setData(new POJONode(response));
}"
42876,"public IntrospectionResponse introspect(String accessToken,String oxdId){
  if (StringUtils.isBlank(accessToken)) {
    throw new ErrorResponseException(ErrorResponseCode.BLANK_PROTECTION_ACCESS_TOKEN);
  }
  final RpService rpService=ServerLauncher.getInjector().getInstance(RpService.class);
  final Rp rp=rpService.getRp(oxdId);
  if (StringUtils.isNotBlank(rp.getSetupOxdId())) {
    oxdId=rp.getSetupOxdId();
  }
  LOG.trace(""String_Node_Str"" + rpService.getRp(oxdId));
  final DiscoveryService discoveryService=ServerLauncher.getInjector().getInstance(DiscoveryService.class);
  final String introspectionEndpoint=discoveryService.getConnectDiscoveryResponseByOxdId(oxdId).getIntrospectionEndpoint();
  final UmaTokenService umaTokenService=ServerLauncher.getInjector().getInstance(UmaTokenService.class);
  final HttpService httpService=ServerLauncher.getInjector().getInstance(HttpService.class);
  final IntrospectionService introspectionService=ProxyFactory.create(IntrospectionService.class,introspectionEndpoint,httpService.getClientExecutor());
  IntrospectionResponse response=null;
  try {
    response=introspectionService.introspectToken(""String_Node_Str"" + umaTokenService.getPat(oxdId).getToken(),accessToken);
  }
 catch (  ClientResponseFailure e) {
    int status=e.getResponse().getStatus();
    LOG.debug(""String_Node_Str"" + e.getResponse().getEntity(String.class) + ""String_Node_Str""+ status,e);
    if (status == 400 || status == 401) {
      LOG.debug(""String_Node_Str"");
      umaTokenService.obtainPat(oxdId);
      response=introspectionService.introspectToken(""String_Node_Str"" + umaTokenService.getPat(oxdId).getToken(),accessToken);
    }
 else {
      throw e;
    }
  }
  if (!response.isActive()) {
    LOG.debug(""String_Node_Str"");
    throw new ErrorResponseException(ErrorResponseCode.INACTIVE_PROTECTION_ACCESS_TOKEN);
  }
  return response;
}","public IntrospectionResponse introspect(String accessToken,String oxdId){
  if (StringUtils.isBlank(accessToken)) {
    throw new ErrorResponseException(ErrorResponseCode.BLANK_PROTECTION_ACCESS_TOKEN);
  }
  final RpService rpService=ServerLauncher.getInjector().getInstance(RpService.class);
  final Rp rp=rpService.getRp(oxdId);
  if (StringUtils.isNotBlank(rp.getSetupOxdId())) {
    oxdId=rp.getSetupOxdId();
  }
  LOG.trace(""String_Node_Str"" + rpService.getRp(oxdId));
  final IntrospectionService introspectionService=ServerLauncher.getInjector().getInstance(IntrospectionService.class);
  final IntrospectionResponse response=introspectionService.introspectToken(oxdId,accessToken);
  if (!response.isActive()) {
    LOG.debug(""String_Node_Str"");
    throw new ErrorResponseException(ErrorResponseCode.INACTIVE_PROTECTION_ACCESS_TOKEN);
  }
  return response;
}"
42877,"public Rp getRp(String oxdId){
  Connection conn=null;
  try {
    conn=provider.getConnection();
    conn.setAutoCommit(false);
    PreparedStatement query=conn.prepareStatement(""String_Node_Str"");
    query.setString(1,oxdId);
    ResultSet rs=query.executeQuery();
    rs.next();
    String data=rs.getString(""String_Node_Str"");
    query.close();
    conn.commit();
    Rp rp=MigrationService.parseRp(data);
    if (rp != null) {
      LOG.debug(""String_Node_Str"" + oxdId + ""String_Node_Str""+ rp);
      return rp;
    }
 else {
      LOG.error(""String_Node_Str"" + oxdId);
      throw new RuntimeException(""String_Node_Str"" + oxdId);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + oxdId + ""String_Node_Str""+ e.getMessage(),e);
    rollbackSilently(conn);
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeSilently(conn);
  }
}","public Rp getRp(String oxdId){
  Connection conn=null;
  try {
    conn=provider.getConnection();
    conn.setAutoCommit(false);
    PreparedStatement query=conn.prepareStatement(""String_Node_Str"");
    query.setString(1,oxdId);
    ResultSet rs=query.executeQuery();
    rs.next();
    String data=rs.getString(""String_Node_Str"");
    query.close();
    conn.commit();
    Rp rp=MigrationService.parseRp(data);
    if (rp != null) {
      LOG.debug(""String_Node_Str"" + oxdId + ""String_Node_Str""+ rp);
      return rp;
    }
 else {
      LOG.error(""String_Node_Str"" + oxdId);
      return null;
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + oxdId + ""String_Node_Str""+ e.getMessage(),e);
    rollbackSilently(conn);
    return null;
  }
 finally {
    IOUtils.closeSilently(conn);
  }
}"
42878,"public boolean remove(String oxdId){
  return persistenceService.remove(oxdId);
}","public boolean remove(String oxdId){
  boolean ok=persistenceService.remove(oxdId);
  if (ok) {
    rpMap.remove(oxdId);
  }
  return ok;
}"
42879,"public static String getConfPath(){
  return Tester.class.getProtectionDomain().getCodeSource().getLocation().getPath() + File.separator + ConfigurationService.TEST_FILE_NAME;
}","public static String getConfPath(){
  String workingDir=System.getProperty(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + workingDir);
  return workingDir + ""String_Node_Str"" + File.separator+ ConfigurationService.TEST_FILE_NAME;
}"
42880,"public static void setSystemConfPath(){
  System.setProperty(ConfigurationService.CONF_SYS_PROPERTY_NAME,getConfPath());
}","public static void setSystemConfPath(){
  System.setProperty(ConfigurationService.CONF_SYS_PROPERTY_NAME,getConfPath());
  System.out.println(ConfigurationService.CONF_SYS_PROPERTY_NAME + ""String_Node_Str"" + System.getProperty(ConfigurationService.CONF_SYS_PROPERTY_NAME));
}"
42881,"@Test(invocationCount=10,threadPoolSize=10) public void stressTest() throws IOException {
  final Rp rp=configurationService.defaultRp();
  rp.setOxdId(UUID.randomUUID().toString());
  rp.setPat(UUID.randomUUID().toString());
  service.create(rp);
  for (int i=0; i < 11; i++) {
    EXECUTOR_SERVICE.submit(new Runnable(){
      @Override public void run(){
        try {
          rp.setPat(UUID.randomUUID().toString());
          service.update(rp);
          System.out.println(""String_Node_Str"" + rp.getPat() + ""String_Node_Str""+ rp.getOxdId());
        }
 catch (        Throwable e) {
          throw new AssertionError(""String_Node_Str"" + rp.getOxdId());
        }
      }
    }
);
  }
}","@Test(invocationCount=10,threadPoolSize=10,enabled=false) public void stressTest() throws IOException {
  final Rp rp=configurationService.defaultRp();
  rp.setOxdId(UUID.randomUUID().toString());
  rp.setPat(UUID.randomUUID().toString());
  service.create(rp);
  for (int i=0; i < 11; i++) {
    EXECUTOR_SERVICE.submit(new Runnable(){
      @Override public void run(){
        try {
          rp.setPat(UUID.randomUUID().toString());
          service.update(rp);
          System.out.println(""String_Node_Str"" + rp.getPat() + ""String_Node_Str""+ rp.getOxdId());
        }
 catch (        Throwable e) {
          throw new AssertionError(""String_Node_Str"" + rp.getOxdId());
        }
      }
    }
);
  }
}"
42882,"@Test public void persist() throws Exception {
  Rp rp=newRp();
  service.create(rp);
  assertEquals(service.getRps().size(),2);
  rp.setClientName(""String_Node_Str"");
  service.update(rp);
  assertEquals(service.getRp(rp.getOxdId()).getClientName(),""String_Node_Str"");
  assertEquals(persistenceService.getRp(rp.getOxdId()).getClientName(),""String_Node_Str"");
}","@Test public void persist() throws Exception {
  Rp rp=newRp();
  service.create(rp);
  assertEquals(service.getRps().size(),1);
  rp.setClientName(""String_Node_Str"");
  service.update(rp);
  assertEquals(service.getRp(rp.getOxdId()).getClientName(),""String_Node_Str"");
  assertEquals(persistenceService.getRp(rp.getOxdId()).getClientName(),""String_Node_Str"");
}"
42883,"public static String joinAndUrlEncode(Collection<String> list) throws UnsupportedEncodingException {
  if (list == null || list.isEmpty()) {
    return ""String_Node_Str"";
  }
  return URLEncoder.encode(Joiner.on(""String_Node_Str"").join(list),""String_Node_Str"");
}","public static String joinAndUrlEncode(Collection<String> list) throws UnsupportedEncodingException {
  if (list == null || list.isEmpty()) {
    return ""String_Node_Str"";
  }
  return encode(Joiner.on(""String_Node_Str"").join(list));
}"
42884,"@Override public CommandResponse execute(GetAuthorizationUrlParams params) throws Exception {
  final Rp site=getRp();
  String authorizationEndpoint=getDiscoveryService().getConnectDiscoveryResponse(site).getAuthorizationEndpoint();
  List<String> scope=Lists.newArrayList();
  if (params.getScope() != null && !params.getScope().isEmpty()) {
    scope.addAll(params.getScope());
  }
 else   if (site.getScope() != null) {
    scope.addAll(site.getScope());
  }
  authorizationEndpoint+=""String_Node_Str"" + Utils.joinAndUrlEncode(site.getResponseTypes());
  authorizationEndpoint+=""String_Node_Str"" + site.getClientId();
  authorizationEndpoint+=""String_Node_Str"" + site.getAuthorizationRedirectUri();
  authorizationEndpoint+=""String_Node_Str"" + Utils.joinAndUrlEncode(scope);
  authorizationEndpoint+=""String_Node_Str"" + getStateService().generateState();
  authorizationEndpoint+=""String_Node_Str"" + getStateService().generateNonce();
  String acrValues=Utils.joinAndUrlEncode(acrValues(site,params)).trim();
  if (!Strings.isNullOrEmpty(acrValues)) {
    authorizationEndpoint+=""String_Node_Str"" + acrValues;
  }
  if (!Strings.isNullOrEmpty(params.getPrompt())) {
    authorizationEndpoint+=""String_Node_Str"" + params.getPrompt();
  }
  if (!Strings.isNullOrEmpty(params.getHostedDomain())) {
    authorizationEndpoint+=""String_Node_Str"" + params.getHostedDomain();
  }
  if (params.getCustomParameters() != null && !params.getCustomParameters().isEmpty()) {
    authorizationEndpoint+=""String_Node_Str"" + AuthorizeRequestParam.CUSTOM_RESPONSE_HEADERS + ""String_Node_Str""+ Util.mapAsString(params.getCustomParameters());
  }
  return okResponse(new GetAuthorizationUrlResponse(authorizationEndpoint));
}","@Override public CommandResponse execute(GetAuthorizationUrlParams params) throws Exception {
  final Rp site=getRp();
  String authorizationEndpoint=getDiscoveryService().getConnectDiscoveryResponse(site).getAuthorizationEndpoint();
  List<String> scope=Lists.newArrayList();
  if (params.getScope() != null && !params.getScope().isEmpty()) {
    scope.addAll(params.getScope());
  }
 else   if (site.getScope() != null) {
    scope.addAll(site.getScope());
  }
  authorizationEndpoint+=""String_Node_Str"" + Utils.joinAndUrlEncode(site.getResponseTypes());
  authorizationEndpoint+=""String_Node_Str"" + site.getClientId();
  authorizationEndpoint+=""String_Node_Str"" + site.getAuthorizationRedirectUri();
  authorizationEndpoint+=""String_Node_Str"" + Utils.joinAndUrlEncode(scope);
  authorizationEndpoint+=""String_Node_Str"" + getStateService().generateState();
  authorizationEndpoint+=""String_Node_Str"" + getStateService().generateNonce();
  String acrValues=Utils.joinAndUrlEncode(acrValues(site,params)).trim();
  if (!Strings.isNullOrEmpty(acrValues)) {
    authorizationEndpoint+=""String_Node_Str"" + acrValues;
  }
  if (!Strings.isNullOrEmpty(params.getPrompt())) {
    authorizationEndpoint+=""String_Node_Str"" + params.getPrompt();
  }
  if (!Strings.isNullOrEmpty(params.getHostedDomain())) {
    authorizationEndpoint+=""String_Node_Str"" + params.getHostedDomain();
  }
  if (params.getCustomParameters() != null && !params.getCustomParameters().isEmpty()) {
    authorizationEndpoint+=""String_Node_Str"" + AuthorizeRequestParam.CUSTOM_RESPONSE_HEADERS + ""String_Node_Str""+ Utils.encode(Util.mapAsString(params.getCustomParameters()));
  }
  return okResponse(new GetAuthorizationUrlResponse(authorizationEndpoint));
}"
42885,"private void notifyClientUsedImpl(Rp rp,boolean isClientLocal){
  try {
    String licenseId=conf.getLicenseId();
    String clientId=rp.getClientId();
    String oxdId=rp.getOxdId();
    String clientName=rp.getClientName();
    String macAddress=MacAddressProvider.macAddress();
    StatisticUpdateRequest request=StatisticUpdateRequest.clientUpdate(licenseId,clientId,oxdId,clientName,macAddress,isClientLocal);
    request.setAppMetadata(appMetadata(rp.getOxdRpProgrammingLanguage()));
    LOG.trace(""String_Node_Str"" + request);
    LicenseClient.statisticWs(LicenseFileUpdateService.LICENSE_SERVER_ENDPOINT,httpService.getClientExecutor()).update(request);
    LOG.trace(""String_Node_Str"" + request);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void notifyClientUsedImpl(Rp rp,boolean isClientLocal){
  try {
    String licenseId=conf.getLicenseId();
    String clientId=rp.getClientId();
    String oxdId=rp.getOxdId();
    String clientName=rp.getClientName();
    String macAddress=MacAddressProvider.macAddress();
    StatisticUpdateRequest request=StatisticUpdateRequest.clientUpdate(licenseId,clientId,oxdId,clientName,macAddress,isClientLocal);
    request.setAppMetadata(appMetadata(rp.getOxdRpProgrammingLanguage()));
    LOG.trace(""String_Node_Str"" + request);
    LicenseClient.statisticWs(LicenseFileUpdateService.LICENSE_SERVER_ENDPOINT,httpService.getClientExecutor()).update(request);
    LOG.trace(""String_Node_Str"" + oxdId);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + e.getMessage(),e);
  }
}"
42886,"@Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void register(String host,int port,String opHost,String redirectUrl,String postLogoutRedirectUrl,String logoutUrl) throws IOException {
  CommandClient client=null;
  try {
    client=new CommandClient(host,port);
    RegisterSiteResponse resp=registerSite(client,opHost,redirectUrl,postLogoutRedirectUrl,logoutUrl);
    assertNotNull(resp);
    notEmpty(resp.getOxdId());
    final RegisterSiteParams commandParams=new RegisterSiteParams();
    commandParams.setOpHost(opHost);
    commandParams.setAuthorizationRedirectUri(redirectUrl);
    commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);
    commandParams.setClientLogoutUri(Lists.newArrayList(logoutUrl));
    commandParams.setRedirectUris(Arrays.asList(redirectUrl));
    commandParams.setAcrValues(new ArrayList<String>());
    commandParams.setScope(Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
    commandParams.setGrantType(Lists.newArrayList(""String_Node_Str""));
    commandParams.setResponseTypes(Lists.newArrayList(""String_Node_Str""));
    final Command command=new Command(CommandType.REGISTER_SITE);
    command.setParamsObject(commandParams);
    resp=client.send(command).dataAsResponse(RegisterSiteResponse.class);
    assertNotNull(resp);
    assertNotNull(resp.getOxdId());
    oxdId=resp.getOxdId();
  }
  finally {
    CommandClient.closeQuietly(client);
  }
}","@Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void register(String host,int port,String opHost,String redirectUrl,String postLogoutRedirectUrl,String logoutUrl) throws IOException {
  CommandClient client=null;
  try {
    client=new CommandClient(host,port);
    final SetupClientResponse setupClient=SetupClientTest.setupClient(client,opHost,redirectUrl);
    final RegisterSiteParams commandParams=new RegisterSiteParams();
    commandParams.setProtectionAccessToken(setupClient.getClientRegistrationAccessToken());
    commandParams.setOpHost(opHost);
    commandParams.setAuthorizationRedirectUri(redirectUrl);
    commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);
    commandParams.setClientLogoutUri(Lists.newArrayList(logoutUrl));
    commandParams.setRedirectUris(Arrays.asList(redirectUrl));
    commandParams.setAcrValues(new ArrayList<String>());
    commandParams.setScope(Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
    commandParams.setGrantType(Lists.newArrayList(""String_Node_Str""));
    commandParams.setResponseTypes(Lists.newArrayList(""String_Node_Str""));
    final Command command=new Command(CommandType.REGISTER_SITE);
    command.setParamsObject(commandParams);
    RegisterSiteResponse resp=client.send(command).dataAsResponse(RegisterSiteResponse.class);
    assertNotNull(resp);
    assertNotNull(resp.getOxdId());
    oxdId=resp.getOxdId();
  }
  finally {
    CommandClient.closeQuietly(client);
  }
}"
42887,"private void validateAccessToken(String oxdId,RegisterSiteParams params){
  final Configuration conf=getConfigurationService().getConfiguration();
  if (conf.getProtectCommandsWithAccessToken() != null && !conf.getProtectCommandsWithAccessToken()) {
    if (StringUtils.isBlank(params.getProtectionAccessToken())) {
      return;
    }
  }
  final IntrospectionResponse response=getValidationService().introspect(params.getProtectionAccessToken(),params.getOxdId());
  LOG.trace(""String_Node_Str"" + response + ""String_Node_Str""+ rp.getSetupClientId());
  rp.setSetupClientId(response.getClientId());
  rp.setSetupOxdId(oxdId);
  getRpService().updateSilently(rp);
}","private void validateAccessToken(String oxdId,RegisterSiteParams params){
  final Configuration conf=getConfigurationService().getConfiguration();
  if (conf.getProtectCommandsWithAccessToken() != null && !conf.getProtectCommandsWithAccessToken()) {
    if (StringUtils.isBlank(params.getProtectionAccessToken())) {
      return;
    }
  }
  if (params instanceof SetupClientParams) {
    return;
  }
  final IntrospectionResponse response=getValidationService().introspect(params.getProtectionAccessToken(),oxdId);
  LOG.trace(""String_Node_Str"" + response + ""String_Node_Str""+ rp.getSetupClientId());
  rp.setSetupClientId(response.getClientId());
  rp.setSetupOxdId(oxdId);
  getRpService().updateSilently(rp);
}"
42888,"@Override public CommandResponse execute(RpAuthorizeRptParams params){
  validate(params);
  final RptAuthorizationRequest authorizationRequest=new RptAuthorizationRequest(params.getRpt(),params.getTicket());
  LOG.debug(""String_Node_Str"",params.getTicket());
  final RptAuthorizationRequestService rptAuthorizationService=UmaClientFactory.instance().createAuthorizationRequestService(getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId()),getHttpService().getClientExecutor());
  final RptAuthorizationResponse authorizationResponse=rptAuthorizationService.requestRptPermissionAuthorization(""String_Node_Str"" + getUmaTokenService().getAat(params.getOxdId()).getToken(),getRp().opHostWithoutProtocol(),authorizationRequest);
  if (authorizationResponse != null) {
    LOG.trace(""String_Node_Str"",params.getRpt());
    return okResponse(new RpAuthorizeRptResponse(params.getOxdId()));
  }
  return CommandResponse.createErrorResponse(ErrorResponseCode.RPT_NOT_AUTHORIZED);
}","@Override public CommandResponse execute(RpAuthorizeRptParams params){
  validate(params);
  final RptAuthorizationRequest authorizationRequest=new RptAuthorizationRequest(params.getRpt(),params.getTicket());
  LOG.debug(""String_Node_Str"",params.getTicket());
  final RptAuthorizationRequestService rptAuthorizationService=UmaClientFactory.instance().createAuthorizationRequestService(getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId()),getHttpService().getClientExecutor());
  try {
    final RptAuthorizationResponse authorizationResponse=rptAuthorizationService.requestRptPermissionAuthorization(""String_Node_Str"" + getUmaTokenService().getAat(params.getOxdId()).getToken(),getRp().opHostWithoutProtocol(),authorizationRequest);
    if (authorizationResponse != null) {
      LOG.trace(""String_Node_Str"",params.getRpt());
      return okResponse(new RpAuthorizeRptResponse(params.getOxdId()));
    }
  }
 catch (  ClientResponseFailure e) {
    LOG.trace(""String_Node_Str"",e);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return CommandResponse.createErrorResponse(ErrorResponseCode.RPT_NOT_AUTHORIZED);
}"
42889,"public Pat getPat(String oxdId){
  validationService.notBlankOxdId(oxdId);
  SiteConfiguration site=siteService.getSite(oxdId);
  if (site.getPat() != null && site.getPatCreatedAt() != null && site.getPatExpiresIn() > 0) {
    Calendar c=Calendar.getInstance();
    c.setTime(site.getPatCreatedAt());
    c.add(Calendar.SECOND,site.getPatExpiresIn());
    boolean isExpired=c.getTime().after(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getPat());
      return new Pat(site.getPat(),""String_Node_Str"",site.getPatExpiresIn());
    }
  }
  return obtainPat(oxdId);
}","public Pat getPat(String oxdId){
  validationService.notBlankOxdId(oxdId);
  SiteConfiguration site=siteService.getSite(oxdId);
  if (site.getPat() != null && site.getPatCreatedAt() != null && site.getPatExpiresIn() > 0) {
    Calendar c=Calendar.getInstance();
    c.setTime(site.getPatCreatedAt());
    c.add(Calendar.SECOND,site.getPatExpiresIn());
    boolean isExpired=c.getTime().before(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getPat());
      return new Pat(site.getPat(),""String_Node_Str"",site.getPatExpiresIn());
    }
  }
  return obtainPat(oxdId);
}"
42890,"public String getRpt(String oxdId,boolean forceNew){
  SiteConfiguration site=siteService.getSite(oxdId);
  UmaConfiguration discovery=discoveryService.getUmaDiscoveryByOxdId(oxdId);
  if (!forceNew && !Strings.isNullOrEmpty(site.getRpt()) && site.getRptExpiresAt() != null) {
    boolean isExpired=site.getRptExpiresAt().after(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getRpt() + ""String_Node_Str""+ site);
      return site.getRpt();
    }
  }
  final CreateRptService rptService=UmaClientFactory.instance().createRequesterPermissionTokenService(discovery,httpService.getClientExecutor());
  final String aat=getAat(oxdId).getToken();
  final RPTResponse rptResponse=rptService.createRPT(""String_Node_Str"" + aat,site.opHostWithoutProtocol());
  if (rptResponse != null && StringUtils.isNotBlank(rptResponse.getRpt())) {
    RptStatusService rptStatusService=UmaClientFactory.instance().createRptStatusService(discovery,httpService.getClientExecutor());
    RptIntrospectionResponse status=rptStatusService.requestRptStatus(""String_Node_Str"" + getPat(oxdId).getToken(),rptResponse.getRpt(),""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + rptResponse.getRpt() + ""String_Node_Str""+ status);
    if (status.getActive()) {
      LOG.debug(""String_Node_Str"",rptResponse.getRpt());
      site.setRpt(rptResponse.getRpt());
      site.setRptCreatedAt(status.getIssuedAt());
      site.setRptExpiresAt(status.getExpiresAt());
      siteService.updateSilently(site);
      return rptResponse.getRpt();
    }
  }
  LOG.error(""String_Node_Str"" + site);
  throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_RPT);
}","public String getRpt(String oxdId,boolean forceNew){
  SiteConfiguration site=siteService.getSite(oxdId);
  UmaConfiguration discovery=discoveryService.getUmaDiscoveryByOxdId(oxdId);
  if (!forceNew && !Strings.isNullOrEmpty(site.getRpt()) && site.getRptExpiresAt() != null) {
    boolean isExpired=site.getRptExpiresAt().before(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getRpt() + ""String_Node_Str""+ site);
      return site.getRpt();
    }
  }
  final CreateRptService rptService=UmaClientFactory.instance().createRequesterPermissionTokenService(discovery,httpService.getClientExecutor());
  final String aat=getAat(oxdId).getToken();
  final RPTResponse rptResponse=rptService.createRPT(""String_Node_Str"" + aat,site.opHostWithoutProtocol());
  if (rptResponse != null && StringUtils.isNotBlank(rptResponse.getRpt())) {
    RptStatusService rptStatusService=UmaClientFactory.instance().createRptStatusService(discovery,httpService.getClientExecutor());
    RptIntrospectionResponse status=rptStatusService.requestRptStatus(""String_Node_Str"" + getPat(oxdId).getToken(),rptResponse.getRpt(),""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + rptResponse.getRpt() + ""String_Node_Str""+ status);
    if (status.getActive()) {
      LOG.debug(""String_Node_Str"",rptResponse.getRpt());
      site.setRpt(rptResponse.getRpt());
      site.setRptCreatedAt(status.getIssuedAt());
      site.setRptExpiresAt(status.getExpiresAt());
      siteService.updateSilently(site);
      return rptResponse.getRpt();
    }
  }
  LOG.error(""String_Node_Str"" + site);
  throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_RPT);
}"
42891,"public String getGat(String oxdId,List<String> scopes){
  SiteConfiguration site=siteService.getSite(oxdId);
  UmaConfiguration discovery=discoveryService.getUmaDiscoveryByOxdId(oxdId);
  if (!Strings.isNullOrEmpty(site.getGat()) && site.getGatExpiresAt() != null) {
    boolean isExpired=site.getGatExpiresAt().after(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getGat() + ""String_Node_Str""+ site);
      return site.getGat();
    }
  }
  final CreateGatService gatService=UmaClientFactory.instance().createGatService(discovery,httpService.getClientExecutor());
  final String aat=getAat(oxdId).getToken();
  final RPTResponse response=gatService.createGAT(""String_Node_Str"" + aat,site.opHostWithoutProtocol(),new GatRequest(scopes));
  if (response != null && StringUtils.isNotBlank(response.getRpt())) {
    RptStatusService rptStatusService=UmaClientFactory.instance().createRptStatusService(discovery,httpService.getClientExecutor());
    RptIntrospectionResponse status=rptStatusService.requestRptStatus(""String_Node_Str"" + getPat(oxdId).getToken(),response.getRpt(),""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + response.getRpt() + ""String_Node_Str""+ status);
    if (status.getActive()) {
      LOG.debug(""String_Node_Str"",response.getRpt());
      site.setGat(response.getRpt());
      site.setGatCreatedAt(status.getIssuedAt());
      site.setGatExpiresAt(status.getExpiresAt());
      siteService.updateSilently(site);
      return response.getRpt();
    }
  }
  LOG.error(""String_Node_Str"" + site);
  throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_GAT);
}","public String getGat(String oxdId,List<String> scopes){
  SiteConfiguration site=siteService.getSite(oxdId);
  UmaConfiguration discovery=discoveryService.getUmaDiscoveryByOxdId(oxdId);
  if (!Strings.isNullOrEmpty(site.getGat()) && site.getGatExpiresAt() != null) {
    boolean isExpired=site.getGatExpiresAt().before(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site.getGat() + ""String_Node_Str""+ site);
      return site.getGat();
    }
  }
  final CreateGatService gatService=UmaClientFactory.instance().createGatService(discovery,httpService.getClientExecutor());
  final String aat=getAat(oxdId).getToken();
  final RPTResponse response=gatService.createGAT(""String_Node_Str"" + aat,site.opHostWithoutProtocol(),new GatRequest(scopes));
  if (response != null && StringUtils.isNotBlank(response.getRpt())) {
    RptStatusService rptStatusService=UmaClientFactory.instance().createRptStatusService(discovery,httpService.getClientExecutor());
    RptIntrospectionResponse status=rptStatusService.requestRptStatus(""String_Node_Str"" + getPat(oxdId).getToken(),response.getRpt(),""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + response.getRpt() + ""String_Node_Str""+ status);
    if (status.getActive()) {
      LOG.debug(""String_Node_Str"",response.getRpt());
      site.setGat(response.getRpt());
      site.setGatCreatedAt(status.getIssuedAt());
      site.setGatExpiresAt(status.getExpiresAt());
      siteService.updateSilently(site);
      return response.getRpt();
    }
  }
  LOG.error(""String_Node_Str"" + site);
  throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_GAT);
}"
42892,"public Aat getAat(String oxdId){
  validationService.notBlankOxdId(oxdId);
  SiteConfiguration site=siteService.getSite(oxdId);
  if (site.getAat() != null && site.getAatCreatedAt() != null && site.getAatExpiresIn() > 0) {
    Calendar c=Calendar.getInstance();
    c.setTime(site.getAatCreatedAt());
    c.add(Calendar.SECOND,site.getAatExpiresIn());
    boolean isExpired=c.getTime().after(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site);
      return new Aat(site.getAat(),""String_Node_Str"",site.getAatExpiresIn());
    }
  }
  return obtainAat(oxdId);
}","public Aat getAat(String oxdId){
  validationService.notBlankOxdId(oxdId);
  SiteConfiguration site=siteService.getSite(oxdId);
  if (site.getAat() != null && site.getAatCreatedAt() != null && site.getAatExpiresIn() > 0) {
    Calendar c=Calendar.getInstance();
    c.setTime(site.getAatCreatedAt());
    c.add(Calendar.SECOND,site.getAatExpiresIn());
    boolean isExpired=c.getTime().before(new Date());
    if (!isExpired) {
      LOG.debug(""String_Node_Str"" + site);
      return new Aat(site.getAat(),""String_Node_Str"",site.getAatExpiresIn());
    }
  }
  return obtainAat(oxdId);
}"
42893,"@Override public CommandResponse execute(RegisterSiteParams params){
  try {
    validateParametersAndFallbackIfNeeded(params);
    String siteId=UUID.randomUUID().toString();
    LOG.info(""String_Node_Str"");
    persistSiteConfiguration(siteId,params);
    LOG.info(""String_Node_Str"" + siteConfiguration);
    RegisterSiteResponse opResponse=new RegisterSiteResponse();
    opResponse.setOxdId(siteId);
    opResponse.setOpHost(params.getOpHost());
    return okResponse(opResponse);
  }
 catch (  Exception e) {
    LOG.error(e.getMessage(),e);
  }
  return CommandResponse.INTERNAL_ERROR_RESPONSE;
}","@Override public CommandResponse execute(RegisterSiteParams params){
  try {
    validateParametersAndFallbackIfNeeded(params);
    String siteId=UUID.randomUUID().toString();
    LOG.info(""String_Node_Str"");
    persistSiteConfiguration(siteId,params);
    LOG.info(""String_Node_Str"" + siteConfiguration);
    RegisterSiteResponse opResponse=new RegisterSiteResponse();
    opResponse.setOxdId(siteId);
    opResponse.setOpHost(params.getOpHost());
    return okResponse(opResponse);
  }
 catch (  ErrorResponseException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error(e.getMessage(),e);
  }
  return CommandResponse.INTERNAL_ERROR_RESPONSE;
}"
42894,"@Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void test(String host,int port,String redirectUrl,String opHost) throws IOException {
  CommandClient client=null;
  try {
    client=new CommandClient(host,port);
    final RegisterSiteResponse site=RegisterSiteTest.registerSite(client,opHost,redirectUrl);
    final GetAuthorizationUrlParams commandParams=new GetAuthorizationUrlParams();
    commandParams.setOxdId(site.getOxdId());
    final Command command=new Command(CommandType.GET_AUTHORIZATION_URL);
    command.setParamsObject(commandParams);
    final GetAuthorizationUrlResponse resp=client.send(command).dataAsResponse(GetAuthorizationUrlResponse.class);
    assertNotNull(resp);
    notEmpty(resp.getAuthorizationUrl());
    Assert.assertTrue(resp.getAuthorizationUrl().contains(""String_Node_Str""));
  }
  finally {
    CommandClient.closeQuietly(client);
  }
}","@Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void test(String host,int port,String redirectUrl,String opHost) throws IOException {
  CommandClient client=null;
  try {
    client=new CommandClient(host,port);
    final RegisterSiteResponse site=RegisterSiteTest.registerSite(client,opHost,redirectUrl);
    final GetAuthorizationUrlParams commandParams=new GetAuthorizationUrlParams();
    commandParams.setOxdId(site.getOxdId());
    final Command command=new Command(CommandType.GET_AUTHORIZATION_URL);
    command.setParamsObject(commandParams);
    final GetAuthorizationUrlResponse resp=client.send(command).dataAsResponse(GetAuthorizationUrlResponse.class);
    assertNotNull(resp);
    notEmpty(resp.getAuthorizationUrl());
  }
  finally {
    CommandClient.closeQuietly(client);
  }
}"
42895,"private RegisterRequest createRegisterClientRequest(RegisterSiteParams params){
  List<ResponseType> responseTypes=Lists.newArrayList();
  for (  String type : params.getResponseTypes()) {
    responseTypes.add(ResponseType.fromString(type));
  }
  String clientName=""String_Node_Str"" + siteConfiguration.getOxdId();
  final RegisterRequest request=new RegisterRequest(ApplicationType.WEB,clientName,params.getRedirectUris());
  request.setResponseTypes(responseTypes);
  request.setJwksUri(params.getClientJwksUri());
  request.setPostLogoutRedirectUris(params.getPostLogoutRedirectUri() != null ? Lists.newArrayList(params.getPostLogoutRedirectUri()) : Lists.<String>newArrayList());
  request.setContacts(params.getContacts());
  request.setScopes(params.getScope());
  List<GrantType> grantTypes=Lists.newArrayList();
  for (  String grantType : params.getGrantType()) {
    grantTypes.add(GrantType.fromString(grantType));
  }
  request.setGrantTypes(grantTypes);
  request.setLogoutUris(Lists.newArrayList(params.getClientLogoutUri()));
  if (StringUtils.isNotBlank(params.getClientTokenEndpointAuthMethod())) {
    final AuthenticationMethod authenticationMethod=AuthenticationMethod.fromString(params.getClientTokenEndpointAuthMethod());
    if (authenticationMethod != null) {
      request.setTokenEndpointAuthMethod(authenticationMethod);
    }
  }
  if (params.getClientRequestUris() != null && !params.getClientRequestUris().isEmpty()) {
    request.setRequestUris(params.getClientRequestUris());
  }
  if (!Strings.isNullOrEmpty(params.getClientSectorIdentifierUri())) {
    request.setSectorIdentifierUri(params.getClientSectorIdentifierUri());
  }
  siteConfiguration.setResponseTypes(params.getResponseTypes());
  siteConfiguration.setPostLogoutRedirectUri(params.getPostLogoutRedirectUri());
  siteConfiguration.setContacts(params.getContacts());
  siteConfiguration.setRedirectUris(Lists.newArrayList(params.getRedirectUris()));
  return request;
}","private RegisterRequest createRegisterClientRequest(RegisterSiteParams params){
  List<ResponseType> responseTypes=Lists.newArrayList();
  for (  String type : params.getResponseTypes()) {
    responseTypes.add(ResponseType.fromString(type));
  }
  String clientName=""String_Node_Str"" + siteConfiguration.getOxdId();
  final RegisterRequest request=new RegisterRequest(ApplicationType.WEB,clientName,params.getRedirectUris());
  request.setResponseTypes(responseTypes);
  request.setJwksUri(params.getClientJwksUri());
  request.setPostLogoutRedirectUris(params.getPostLogoutRedirectUri() != null ? Lists.newArrayList(params.getPostLogoutRedirectUri()) : Lists.<String>newArrayList());
  request.setContacts(params.getContacts());
  request.setScopes(params.getScope());
  request.setDefaultAcrValues(params.getAcrValues());
  List<GrantType> grantTypes=Lists.newArrayList();
  for (  String grantType : params.getGrantType()) {
    grantTypes.add(GrantType.fromString(grantType));
  }
  request.setGrantTypes(grantTypes);
  request.setLogoutUris(Lists.newArrayList(params.getClientLogoutUri()));
  if (StringUtils.isNotBlank(params.getClientTokenEndpointAuthMethod())) {
    final AuthenticationMethod authenticationMethod=AuthenticationMethod.fromString(params.getClientTokenEndpointAuthMethod());
    if (authenticationMethod != null) {
      request.setTokenEndpointAuthMethod(authenticationMethod);
    }
  }
  if (params.getClientRequestUris() != null && !params.getClientRequestUris().isEmpty()) {
    request.setRequestUris(params.getClientRequestUris());
  }
  if (!Strings.isNullOrEmpty(params.getClientSectorIdentifierUri())) {
    request.setSectorIdentifierUri(params.getClientSectorIdentifierUri());
  }
  siteConfiguration.setResponseTypes(params.getResponseTypes());
  siteConfiguration.setPostLogoutRedirectUri(params.getPostLogoutRedirectUri());
  siteConfiguration.setContacts(params.getContacts());
  siteConfiguration.setRedirectUris(Lists.newArrayList(params.getRedirectUris()));
  return request;
}"
42896,"private void validateParametersAndFallbackIfNeeded(RegisterSiteParams params){
  SiteConfiguration fallback=getSiteService().defaultSiteConfiguration();
  if (Strings.isNullOrEmpty(params.getOpHost())) {
    LOG.warn(""String_Node_Str"" + params + ""String_Node_Str""+ SiteConfigurationService.DEFAULT_SITE_CONFIG_JSON+ ""String_Node_Str"");
    String fallbackOpHost=fallback.getOpHost();
    if (Strings.isNullOrEmpty(fallbackOpHost)) {
      throw new ErrorResponseException(ErrorResponseCode.INVALID_OP_HOST);
    }
    LOG.warn(""String_Node_Str"" + fallbackOpHost + ""String_Node_Str""+ SiteConfigurationService.DEFAULT_SITE_CONFIG_JSON);
    params.setOpHost(fallbackOpHost);
  }
  List<String> grantTypes=Lists.newArrayList();
  if (params.getGrantType() != null && !params.getGrantType().isEmpty()) {
    grantTypes.addAll(params.getGrantType());
  }
  if (grantTypes.isEmpty() && fallback.getGrantType() != null && !fallback.getGrantType().isEmpty()) {
    grantTypes.addAll(fallback.getGrantType());
  }
  if (grantTypes.isEmpty()) {
    grantTypes.add(GrantType.AUTHORIZATION_CODE.getValue());
  }
  params.setGrantType(grantTypes);
  if (Strings.isNullOrEmpty(params.getAuthorizationRedirectUri())) {
    params.setAuthorizationRedirectUri(fallback.getAuthorizationRedirectUri());
  }
  if (Strings.isNullOrEmpty(params.getAuthorizationRedirectUri())) {
    throw new ErrorResponseException(ErrorResponseCode.INVALID_AUTHORIZATION_REDIRECT_URI);
  }
  if (Strings.isNullOrEmpty(params.getPostLogoutRedirectUri()) && !Strings.isNullOrEmpty(fallback.getPostLogoutRedirectUri())) {
    params.setPostLogoutRedirectUri(fallback.getPostLogoutRedirectUri());
  }
  List<String> responseTypes=Lists.newArrayList();
  if (params.getResponseTypes() != null && !params.getResponseTypes().isEmpty()) {
    responseTypes.addAll(params.getResponseTypes());
  }
  if (responseTypes.isEmpty() && fallback.getResponseTypes() != null && !fallback.getResponseTypes().isEmpty()) {
    responseTypes.addAll(fallback.getResponseTypes());
  }
  if (responseTypes.isEmpty()) {
    responseTypes.add(""String_Node_Str"");
  }
  params.setResponseTypes(responseTypes);
  Set<String> redirectUris=Sets.newHashSet();
  redirectUris.add(params.getAuthorizationRedirectUri());
  if (params.getRedirectUris() != null && !params.getRedirectUris().isEmpty()) {
    redirectUris.addAll(params.getRedirectUris());
    if (!Strings.isNullOrEmpty(params.getPostLogoutRedirectUri())) {
      redirectUris.add(params.getPostLogoutRedirectUri());
    }
  }
  params.setRedirectUris(Lists.newArrayList(redirectUris));
  if (params.getScope() == null || params.getScope().isEmpty()) {
    params.setScope(fallback.getScope());
  }
  if (params.getScope() == null || params.getScope().isEmpty()) {
    throw new ErrorResponseException(ErrorResponseCode.INVALID_SCOPE);
  }
  if (params.getAcrValues() == null || params.getAcrValues().isEmpty()) {
    params.setAcrValues(fallback.getAcrValues());
  }
  if (params.getAcrValues() == null || params.getAcrValues().isEmpty()) {
    throw new ErrorResponseException(ErrorResponseCode.INVALID_ACR_VALUES);
  }
  if (Strings.isNullOrEmpty(params.getClientJwksUri()) && !Strings.isNullOrEmpty(fallback.getClientJwksUri())) {
    params.setClientJwksUri(fallback.getClientJwksUri());
  }
  if (params.getContacts() == null || params.getContacts().isEmpty()) {
    params.setContacts(fallback.getContacts());
  }
  if (params.getUiLocales() == null || params.getUiLocales().isEmpty()) {
    params.setUiLocales(fallback.getUiLocales());
  }
  if (params.getClaimsLocales() == null || params.getClaimsLocales().isEmpty()) {
    params.setClaimsLocales(fallback.getClaimsLocales());
  }
}","private void validateParametersAndFallbackIfNeeded(RegisterSiteParams params){
  SiteConfiguration fallback=getSiteService().defaultSiteConfiguration();
  if (Strings.isNullOrEmpty(params.getOpHost())) {
    LOG.warn(""String_Node_Str"" + params + ""String_Node_Str""+ SiteConfigurationService.DEFAULT_SITE_CONFIG_JSON+ ""String_Node_Str"");
    String fallbackOpHost=fallback.getOpHost();
    if (Strings.isNullOrEmpty(fallbackOpHost)) {
      throw new ErrorResponseException(ErrorResponseCode.INVALID_OP_HOST);
    }
    LOG.warn(""String_Node_Str"" + fallbackOpHost + ""String_Node_Str""+ SiteConfigurationService.DEFAULT_SITE_CONFIG_JSON);
    params.setOpHost(fallbackOpHost);
  }
  List<String> grantTypes=Lists.newArrayList();
  if (params.getGrantType() != null && !params.getGrantType().isEmpty()) {
    grantTypes.addAll(params.getGrantType());
  }
  if (grantTypes.isEmpty() && fallback.getGrantType() != null && !fallback.getGrantType().isEmpty()) {
    grantTypes.addAll(fallback.getGrantType());
  }
  if (grantTypes.isEmpty()) {
    grantTypes.add(GrantType.AUTHORIZATION_CODE.getValue());
  }
  params.setGrantType(grantTypes);
  if (Strings.isNullOrEmpty(params.getAuthorizationRedirectUri())) {
    params.setAuthorizationRedirectUri(fallback.getAuthorizationRedirectUri());
  }
  if (Strings.isNullOrEmpty(params.getAuthorizationRedirectUri())) {
    throw new ErrorResponseException(ErrorResponseCode.INVALID_AUTHORIZATION_REDIRECT_URI);
  }
  if (Strings.isNullOrEmpty(params.getPostLogoutRedirectUri()) && !Strings.isNullOrEmpty(fallback.getPostLogoutRedirectUri())) {
    params.setPostLogoutRedirectUri(fallback.getPostLogoutRedirectUri());
  }
  List<String> responseTypes=Lists.newArrayList();
  if (params.getResponseTypes() != null && !params.getResponseTypes().isEmpty()) {
    responseTypes.addAll(params.getResponseTypes());
  }
  if (responseTypes.isEmpty() && fallback.getResponseTypes() != null && !fallback.getResponseTypes().isEmpty()) {
    responseTypes.addAll(fallback.getResponseTypes());
  }
  if (responseTypes.isEmpty()) {
    responseTypes.add(""String_Node_Str"");
  }
  params.setResponseTypes(responseTypes);
  Set<String> redirectUris=Sets.newHashSet();
  redirectUris.add(params.getAuthorizationRedirectUri());
  if (params.getRedirectUris() != null && !params.getRedirectUris().isEmpty()) {
    redirectUris.addAll(params.getRedirectUris());
    if (!Strings.isNullOrEmpty(params.getPostLogoutRedirectUri())) {
      redirectUris.add(params.getPostLogoutRedirectUri());
    }
  }
  params.setRedirectUris(Lists.newArrayList(redirectUris));
  if (params.getScope() == null || params.getScope().isEmpty()) {
    params.setScope(fallback.getScope());
  }
  if (params.getScope() == null || params.getScope().isEmpty()) {
    throw new ErrorResponseException(ErrorResponseCode.INVALID_SCOPE);
  }
  if (params.getAcrValues() == null || params.getAcrValues().isEmpty()) {
    params.setAcrValues(fallback.getAcrValues());
  }
  if (Strings.isNullOrEmpty(params.getClientJwksUri()) && !Strings.isNullOrEmpty(fallback.getClientJwksUri())) {
    params.setClientJwksUri(fallback.getClientJwksUri());
  }
  if (params.getContacts() == null || params.getContacts().isEmpty()) {
    params.setContacts(fallback.getContacts());
  }
  if (params.getUiLocales() == null || params.getUiLocales().isEmpty()) {
    params.setUiLocales(fallback.getUiLocales());
  }
  if (params.getClaimsLocales() == null || params.getClaimsLocales().isEmpty()) {
    params.setClaimsLocales(fallback.getClaimsLocales());
  }
}"
42897,"@Override public CommandResponse execute(final RsCheckAccessParams params) throws Exception {
  validate(params);
  SiteConfiguration site=getSite();
  UmaResource resource=site.umaResource(params.getPath(),params.getHttpMethod());
  if (resource == null) {
    final ErrorResponse error=new ErrorResponse(""String_Node_Str"");
    error.setErrorDescription(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ Configuration.DOC_URL);
    LOG.error(error.getErrorDescription());
    return CommandResponse.error().setData(new POJONode(error));
  }
  PatProvider patProvider=new PatProvider(){
    @Override public String getPatToken(){
      return getUmaTokenService().getPat(params.getOxdId()).getToken();
    }
    @Override public void clearPat(){
    }
  }
;
  final RptStatusService registrationService=UmaClientFactory.instance().createRptStatusService(getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId()),getHttpService().getClientExecutor());
  final RptIntrospectionResponse status=registrationService.requestRptStatus(""String_Node_Str"" + patProvider.getPatToken(),params.getRpt(),""String_Node_Str"");
  final boolean isGat=RptPreProcessInterceptor.isGat(params.getRpt());
  if (!Strings.isNullOrEmpty(params.getRpt()) && status != null && status.getActive() && status.getPermissions() != null) {
    for (    UmaPermission permission : status.getPermissions()) {
      final List<String> requiredScopes=resource.getScopes();
      boolean containsAny=!Collections.disjoint(requiredScopes,permission.getScopes());
      if (containsAny) {
        if (isGat) {
          LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ site);
          return okResponse(new RsCheckAccessResponse(""String_Node_Str""));
        }
        if ((permission.getResourceSetId() != null && permission.getResourceSetId().equals(resource.getId()))) {
          LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ site);
          return okResponse(new RsCheckAccessResponse(""String_Node_Str""));
        }
      }
    }
  }
  List<String> scopes=resource.getTicketScopes();
  if (scopes.isEmpty()) {
    scopes=resource.getScopes();
  }
  final RptPreProcessInterceptor rptInterceptor=new RptPreProcessInterceptor(new ResourceRegistrar(patProvider,new ServiceProvider(site.getOpHost())));
  final ServerResponse response=(ServerResponse)rptInterceptor.registerTicketResponse(scopes,resource.getId());
  RsCheckAccessResponse opResponse=new RsCheckAccessResponse(""String_Node_Str"");
  opResponse.setWwwAuthenticateHeader((String)response.getMetadata().getFirst(""String_Node_Str""));
  opResponse.setTicket((String)response.getEntity());
  LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ opResponse);
  return okResponse(opResponse);
}","@Override public CommandResponse execute(final RsCheckAccessParams params) throws Exception {
  validate(params);
  SiteConfiguration site=getSite();
  UmaResource resource=site.umaResource(params.getPath(),params.getHttpMethod());
  if (resource == null) {
    final ErrorResponse error=new ErrorResponse(""String_Node_Str"");
    error.setErrorDescription(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ Configuration.DOC_URL);
    LOG.error(error.getErrorDescription());
    return CommandResponse.error().setData(new POJONode(error));
  }
  PatProvider patProvider=new PatProvider(){
    @Override public String getPatToken(){
      return getUmaTokenService().getPat(params.getOxdId()).getToken();
    }
    @Override public void clearPat(){
    }
  }
;
  final RptStatusService registrationService=UmaClientFactory.instance().createRptStatusService(getDiscoveryService().getUmaDiscoveryByOxdId(params.getOxdId()),getHttpService().getClientExecutor());
  final RptIntrospectionResponse status=registrationService.requestRptStatus(""String_Node_Str"" + patProvider.getPatToken(),params.getRpt(),""String_Node_Str"");
  final boolean isGat=RptPreProcessInterceptor.isGat(params.getRpt());
  if (!Strings.isNullOrEmpty(params.getRpt()) && status != null && status.getActive() && status.getPermissions() != null) {
    for (    UmaPermission permission : status.getPermissions()) {
      final List<String> requiredScopes=resource.getScopes();
      boolean containsAny=!Collections.disjoint(requiredScopes,permission.getScopes());
      if (containsAny) {
        if (isGat) {
          LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ site);
          return okResponse(new RsCheckAccessResponse(""String_Node_Str""));
        }
        if ((permission.getResourceSetId() != null && permission.getResourceSetId().equals(resource.getId()))) {
          LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ site);
          return okResponse(new RsCheckAccessResponse(""String_Node_Str""));
        }
      }
    }
  }
  List<String> scopes=resource.getTicketScopes();
  if (scopes.isEmpty()) {
    scopes=resource.getScopes();
  }
  final RptPreProcessInterceptor rptInterceptor=new RptPreProcessInterceptor(new ResourceRegistrar(patProvider,new ServiceProvider(site.getOpHost())));
  final ServerResponse response=(ServerResponse)rptInterceptor.registerTicketResponse(scopes,resource.getId());
  RsCheckAccessResponse opResponse=new RsCheckAccessResponse(""String_Node_Str"");
  opResponse.setWwwAuthenticateHeader((String)response.getMetadata().getFirst(""String_Node_Str""));
  opResponse.setTicket(((PermissionTicket)response.getEntity()).getTicket());
  LOG.debug(""String_Node_Str"" + params.getPath() + ""String_Node_Str""+ params.getHttpMethod()+ ""String_Node_Str""+ opResponse);
  return okResponse(opResponse);
}"
42898,"private void setButtonsState(){
  this.view.getRemoveButton().setEnabled(!selectionModel.getSelectedSet().isEmpty());
  this.view.getRemoveButton().setEnabled(selectionModel.getSelectedSet().size() == 1);
}","private void setButtonsState(){
  this.view.getRemoveButton().setEnabled(!selectionModel.getSelectedSet().isEmpty());
  this.view.getEditButton().setEnabled(selectionModel.getSelectedSet().size() == 1);
}"
42899,"public static SafeHtml asHtml(String str){
  String s=str != null ? str : ""String_Node_Str"";
  return SafeHtmlUtils.fromString(s);
}","public static SafeHtml asHtml(String str){
  String s=str != null ? str : ""String_Node_Str"";
  if (s.length() > 40) {
    s=s.substring(0,40) + ""String_Node_Str"";
  }
  return SafeHtmlUtils.fromString(s);
}"
42900,"private void clear(){
  view.getNameField().setHTML(""String_Node_Str"");
  view.getPrivateKey().setHTML(""String_Node_Str"");
  view.getPublicKey().setHTML(""String_Node_Str"");
  view.getClientPublicKey().setHTML(""String_Node_Str"");
  view.getClientPrivateKey().setHTML(""String_Node_Str"");
  view.getPrivatePassword().setHTML(""String_Node_Str"");
  view.getPublicPassword().setHTML(""String_Node_Str"");
  view.getLicensePassword().setHTML(""String_Node_Str"");
  view.getLicenseIdCount().setHTML(""String_Node_Str"");
  view.getLicenseIds().setRowCount(0);
  view.getLicenseIds().setRowData(new ArrayList<LdapLicenseId>());
}","public void clear(){
  view.getNameField().setHTML(""String_Node_Str"");
  view.getPrivateKey().setHTML(""String_Node_Str"");
  view.getPublicKey().setHTML(""String_Node_Str"");
  view.getClientPublicKey().setHTML(""String_Node_Str"");
  view.getClientPrivateKey().setHTML(""String_Node_Str"");
  view.getPrivatePassword().setHTML(""String_Node_Str"");
  view.getPublicPassword().setHTML(""String_Node_Str"");
  view.getLicensePassword().setHTML(""String_Node_Str"");
  view.getLicenseIdCount().setHTML(""String_Node_Str"");
  view.getLicenseIds().setRowCount(0);
  view.getLicenseIds().setRowData(new ArrayList<LdapLicenseId>());
}"
42901,"private void onRemove(){
  Admin.getService().remove(selectionModel.getSelectedSet(),new SuccessCallback<Void>(){
    @Override public void onSuccess(    Void result){
      LicenseCryptDetailsPresenter.this.clear();
    }
  }
);
}","private void onRemove(){
  Admin.getService().remove(selectionModel.getSelectedSet(),new SuccessCallback<Void>(){
    @Override public void onSuccess(    Void result){
      LicenseCryptDetailsPresenter.this.loadLicenseIds();
    }
  }
);
}"
42902,"public void show(LdapLicenseCrypt licenseCrypt){
  this.licenseCrypt=licenseCrypt;
  view.getNameField().setHTML(Admin.asHtml(licenseCrypt.getName()));
  view.getPrivateKey().setHTML(Admin.asHtml(licenseCrypt.getPrivateKey()));
  view.getPublicKey().setHTML(Admin.asHtml(licenseCrypt.getPublicKey()));
  view.getClientPublicKey().setHTML(Admin.asHtml(licenseCrypt.getClientPublicKey()));
  view.getClientPrivateKey().setHTML(Admin.asHtml(licenseCrypt.getClientPrivateKey()));
  view.getPrivatePassword().setHTML(Admin.asHtml(licenseCrypt.getPrivatePassword()));
  view.getPublicPassword().setHTML(Admin.asHtml(licenseCrypt.getPublicPassword()));
  view.getLicensePassword().setHTML(Admin.asHtml(licenseCrypt.getLicensePassword()));
}","public void show(LdapLicenseCrypt licenseCrypt){
  this.licenseCrypt=licenseCrypt;
  if (licenseCrypt == null) {
    clear();
  }
  view.getNameField().setHTML(Admin.asHtml(licenseCrypt.getName()));
  view.getPrivateKey().setHTML(Admin.asHtml(licenseCrypt.getPrivateKey()));
  view.getPublicKey().setHTML(Admin.asHtml(licenseCrypt.getPublicKey()));
  view.getClientPublicKey().setHTML(Admin.asHtml(licenseCrypt.getClientPublicKey()));
  view.getClientPrivateKey().setHTML(Admin.asHtml(licenseCrypt.getClientPrivateKey()));
  view.getPrivatePassword().setHTML(Admin.asHtml(licenseCrypt.getPrivatePassword()));
  view.getPublicPassword().setHTML(Admin.asHtml(licenseCrypt.getPublicPassword()));
  view.getLicensePassword().setHTML(Admin.asHtml(licenseCrypt.getLicensePassword()));
}"
42903,"public LicenseCryptTab(){
  uiBinder.createAndBindUi(this);
}","public LicenseCryptTab(){
  uiBinder.createAndBindUi(this);
  table.addColumn(new TextColumn<LdapLicenseCrypt>(){
    @Override public String getValue(    LdapLicenseCrypt object){
      return object.getName();
    }
  }
,""String_Node_Str"");
}"
42904,"@NotNull public static String sysFrameCommand(final int frameNumber){
  return String.format(""String_Node_Str"",frameNumber);
}","@NotNull private static String sysFrameCommand(final int frameNumber){
  return String.format(""String_Node_Str"",frameNumber);
}"
42905,"@Test public void innerFunctionValueHandling(){
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",TheRDebuggerUtils.handleValue(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + ENVIRONMENT + ""String_Node_Str""));
}","@Test public void innerFunctionValueHandling(){
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",TheRDebuggerUtils.handleValue(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + ENVIRONMENT_PREFIX + ""String_Node_Str""));
}"
42906,"public TheRDebugProcess(@NotNull final XDebugSession session,@NotNull final TheRXProcessHandler processHandler,@NotNull final List<String> initCommands,@NotNull final TheRDebugger debugger,@NotNull final TheRXOutputReceiver outputReceiver,@NotNull final TheRXResolvingSession resolvingSession,@NotNull final ExecutorService executor){
  super(session);
  myProcessHandler=processHandler;
  myInitCommands=initCommands;
  myDebugger=debugger;
  myOutputReceiver=outputReceiver;
  myStack=new TheRXStack(myDebugger.getStack(),resolvingSession,executor);
  myExecutor=executor;
  myBreakpoints=new HashMap<XSourcePositionWrapper,XLineBreakpoint<XBreakpointProperties>>();
  myTempBreakpoints=new HashSet<XSourcePositionWrapper>();
  myConsole=(ConsoleView)super.createConsole();
  myEditorsProvider=new TheREditorsProvider();
  myBreakpointHandlers=new XBreakpointHandler[]{new TheRXLineBreakpointHandler()};
  myProcessHandler.addListener(this);
  myConsole.attachToProcess(myProcessHandler);
}","public TheRDebugProcess(@NotNull final XDebugSession session,@NotNull final TheRXProcessHandler processHandler,@NotNull final List<String> initCommands,@NotNull final TheRDebugger debugger,@NotNull final TheRXOutputReceiver outputReceiver,@NotNull final TheRResolvingSession resolvingSession,@NotNull final ExecutorService executor){
  super(session);
  myProcessHandler=processHandler;
  myInitCommands=initCommands;
  myDebugger=debugger;
  myOutputReceiver=outputReceiver;
  myStack=new TheRXStack(myDebugger.getStack(),resolvingSession,executor);
  myExecutor=executor;
  myBreakpoints=new HashMap<XSourcePositionWrapper,XLineBreakpoint<XBreakpointProperties>>();
  myTempBreakpoints=new HashSet<XSourcePositionWrapper>();
  myConsole=(ConsoleView)super.createConsole();
  myEditorsProvider=new TheREditorsProvider();
  myBreakpointHandlers=new XBreakpointHandler[]{new TheRXLineBreakpointHandler()};
  myProcessHandler.addListener(this);
  myConsole.attachToProcess(myProcessHandler);
}"
42907,"@Test public void sameDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRXResolvingSession resolvingSession=new MockTheRXResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.set(1,new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,1);
}","@Test public void sameDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRResolvingSession resolvingSession=new MockTheRResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.set(1,new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,1);
}"
42908,"@Test public void plusOneDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRXResolvingSession resolvingSession=new MockTheRXResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,2,1);
}","@Test public void plusOneDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRResolvingSession resolvingSession=new MockTheRResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,2,1);
}"
42909,"@Test public void minusOneDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRXResolvingSession resolvingSession=new MockTheRXResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.remove(originalStack.size() - 1);
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(1,resolvingSession.myDropped);
  check(stack,3,1);
}","@Test public void minusOneDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRResolvingSession resolvingSession=new MockTheRResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.remove(originalStack.size() - 1);
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(1,resolvingSession.myDropped);
  check(stack,3,1);
}"
42910,"@Test public void lessDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRXResolvingSession resolvingSession=new MockTheRXResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,2,1);
  originalStack.remove(originalStack.size() - 1);
  originalStack.remove(originalStack.size() - 1);
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myDropped);
  check(stack,4);
}","@Test public void lessDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRResolvingSession resolvingSession=new MockTheRResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,3,2,1);
  originalStack.remove(originalStack.size() - 1);
  originalStack.remove(originalStack.size() - 1);
  stack.update();
  assertEquals(3,resolvingSession.myNext);
  assertEquals(1,resolvingSession.myCurrent);
  assertEquals(2,resolvingSession.myDropped);
  check(stack,4);
}"
42911,"@Test public void moreDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRXResolvingSession resolvingSession=new MockTheRXResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(4,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,4,3,2,1);
}","@Test public void moreDepth(){
  final List<TheRStackFrame> originalStack=new ArrayList<TheRStackFrame>();
  final MockTheRResolvingSession resolvingSession=new MockTheRResolvingSession();
  final TheRXStack stack=new TheRXStack(originalStack,resolvingSession,ExecutorServices.ILLEGAL_EXECUTOR);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",2),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(2,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,2,1);
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  originalStack.add(new TheRStackFrame(new TheRLocation(""String_Node_Str"",1),new IllegalTheRVarsLoader(),new IllegalTheRDebuggerEvaluator()));
  stack.update();
  assertEquals(4,resolvingSession.myNext);
  assertEquals(0,resolvingSession.myCurrent);
  assertEquals(0,resolvingSession.myDropped);
  check(stack,4,3,2,1);
}"
42912,"public TheRDebugger(@NotNull final TheRExecutor executor,@NotNull final TheRFunctionDebuggerFactory debuggerFactory,@NotNull final TheRVarsLoaderFactory loaderFactory,@NotNull final TheRDebuggerEvaluatorFactory evaluatorFactory,@NotNull final TheRScriptReader scriptReader,@NotNull final TheROutputReceiver outputReceiver,@NotNull final TheRExpressionHandler expressionHandler,@NotNull final TheRValueModifierFactory modifierFactory,@NotNull final TheRValueModifierHandler modifierHandler) throws TheRDebuggerException {
  myExecutor=executor;
  myDebuggerFactory=debuggerFactory;
  myLoaderFactory=loaderFactory;
  myEvaluatorFactory=evaluatorFactory;
  myScriptReader=scriptReader;
  myOutputReceiver=outputReceiver;
  myExpressionHandler=expressionHandler;
  myModifierFactory=modifierFactory;
  myModifierHandler=modifierHandler;
  myDebuggers=new ArrayList<TheRFunctionDebugger>();
  myStack=new ArrayList<TheRStackFrame>();
  myUnmodifiableStack=Collections.unmodifiableList(myStack);
  myReturnLineNumber=-1;
  myDropFrames=1;
  myIsRunning=false;
}","public TheRDebugger(@NotNull final TheRExecutor executor,@NotNull final TheRFunctionDebuggerFactory debuggerFactory,@NotNull final TheRVarsLoaderFactory loaderFactory,@NotNull final TheRDebuggerEvaluatorFactory evaluatorFactory,@NotNull final TheRScriptReader scriptReader,@NotNull final TheROutputReceiver outputReceiver,@NotNull final TheRExpressionHandler expressionHandler,@NotNull final TheRValueModifierFactory modifierFactory,@NotNull final TheRValueModifierHandler modifierHandler){
  myExecutor=executor;
  myDebuggerFactory=debuggerFactory;
  myLoaderFactory=loaderFactory;
  myEvaluatorFactory=evaluatorFactory;
  myScriptReader=scriptReader;
  myOutputReceiver=outputReceiver;
  myExpressionHandler=expressionHandler;
  myModifierFactory=modifierFactory;
  myModifierHandler=modifierHandler;
  myDebuggers=new ArrayList<TheRFunctionDebugger>();
  myStack=new ArrayList<TheRStackFrame>();
  myUnmodifiableStack=Collections.unmodifiableList(myStack);
  myReturnLineNumber=-1;
  myDropFrames=1;
  myIsRunning=false;
}"
42913,"@NotNull private TheRDebugger createDebugger(@NotNull final TheRXProcessHandler processHandler,@NotNull final TheRXOutputReceiver outputReceiver,@NotNull final String scriptPath) throws ExecutionException {
  try {
    return new TheRDebugger(processHandler,new TheRFunctionDebuggerFactoryImpl(),new TheRVarsLoaderFactoryImpl(processHandler,outputReceiver),new TheRDebuggerEvaluatorFactoryImpl(),new TheRScriptReaderImpl(scriptPath),outputReceiver,new TheRExpressionHandlerImpl(),new TheRValueModifierFactoryImpl(),new TheRValueModifierHandlerImpl());
  }
 catch (  final TheRDebuggerException e) {
    throw new ExecutionException(e);
  }
catch (  final IOException e) {
    throw new ExecutionException(e);
  }
}","@NotNull private TheRDebugger createDebugger(@NotNull final TheRXProcessHandler processHandler,@NotNull final TheRXOutputReceiver outputReceiver,@NotNull final String scriptPath) throws ExecutionException {
  try {
    return new TheRDebugger(processHandler,new TheRFunctionDebuggerFactoryImpl(),new TheRVarsLoaderFactoryImpl(processHandler,outputReceiver),new TheRDebuggerEvaluatorFactoryImpl(),new TheRScriptReaderImpl(scriptPath),outputReceiver,new TheRExpressionHandlerImpl(),new TheRValueModifierFactoryImpl(),new TheRValueModifierHandlerImpl());
  }
 catch (  final IOException e) {
    throw new ExecutionException(e);
  }
}"
42914,"private void writeEnvs(@NotNull final Element element){
  JDOMExternalizerUtil.writeField(element,PARENT_ENVS,Boolean.toString(isPassParentEnvs()));
  EnvironmentVariablesComponent.writeExternal(element,getEnvs());
}","private void writeEnvs(@NotNull final Element element){
  JDOMExternalizerUtil.writeField(element,PASS_PARENT_ENVS,Boolean.toString(isPassParentEnvs()));
  EnvironmentVariablesComponent.writeExternal(element,getEnvs());
}"
42915,"@Nullable @Override public String suggestedName(){
  if (StringUtil.isEmptyOrSpaces(myScriptPath)) {
    return null;
  }
  final String name=new File(myScriptPath).getName();
  final String extension=TheRFileType.INSTANCE.getDefaultExtension();
  final int dotIndex=name.length() - extension.length() - 1;
  if (StringUtil.endsWithIgnoreCase(name,extension) && name.charAt(dotIndex) == '.') {
    return name.substring(0,dotIndex);
  }
  return name;
}","@Nullable @Override public String suggestedName(){
  if (StringUtil.isEmptyOrSpaces(myScriptPath)) {
    return null;
  }
  final String name=new File(myScriptPath).getName();
  final String dotAndExtension=""String_Node_Str"" + TheRFileType.INSTANCE.getDefaultExtension();
  if (name.length() > dotAndExtension.length() && StringUtil.endsWithIgnoreCase(name,dotAndExtension)) {
    return name.substring(0,name.length() - dotAndExtension.length());
  }
  return name;
}"
42916,"private void readEnvs(@NotNull final Element element){
  setPassParentEnvs(Boolean.parseBoolean(JDOMExternalizerUtil.readField(element,PARENT_ENVS,""String_Node_Str"")));
  EnvironmentVariablesComponent.readExternal(element,getEnvs());
}","private void readEnvs(@NotNull final Element element){
  setPassParentEnvs(Boolean.parseBoolean(JDOMExternalizerUtil.readField(element,PASS_PARENT_ENVS,""String_Node_Str"")));
  EnvironmentVariablesComponent.readExternal(element,getEnvs());
}"
42917,"@NotNull private String calculateWorkDirectory(@NotNull final TheRRunConfigurationParams runConfigurationParams){
  final String specifiedValue=runConfigurationParams.getWorkingDirectory();
  final String defaultValue=new File(runConfigurationParams.getScriptPath()).getParent();
  return !StringUtil.isEmptyOrSpaces(specifiedValue) ? specifiedValue : defaultValue;
}","@NotNull private String calculateWorkDirectory(@NotNull final TheRRunConfigurationParams runConfigurationParams){
  final String workingDirectory=runConfigurationParams.getWorkingDirectory();
  final String defaultValue=new File(runConfigurationParams.getScriptPath()).getParent();
  return !StringUtil.isEmptyOrSpaces(workingDirectory) ? workingDirectory : defaultValue;
}"
42918,"private void addEntry(@NotNull final TheRLocation nextLocation){
  final String nextFunctionName=nextLocation.getFunctionName();
  final TheRXFunctionDescriptor descriptor=myEntries.isEmpty() ? myRoot : resolveDescriptor(myEntries.listIterator(myEntries.size()),nextFunctionName);
  final boolean isUnbraceFunction=descriptor != null && nextLocation.getLine() == 0;
  final int line=isUnbraceFunction ? descriptor.getStartLine() : nextLocation.getLine() - 1;
  myEntries.add(new TheRXResolvingSessionEntry(descriptor,line));
}","private void addEntry(@NotNull final TheRLocation nextLocation){
  final String nextFunctionName=nextLocation.getFunctionName();
  final TheRXFunctionDescriptor descriptor=myEntries.isEmpty() ? myRoot : resolveDescriptor(myEntries.listIterator(myEntries.size()),nextFunctionName);
  myEntries.add(new TheRXResolvingSessionEntry(descriptor,resolveLine(descriptor,nextLocation.getLine())));
}"
42919,"private void updateCurrentEntry(final int line){
  final int lastIndex=myEntries.size() - 1;
  myEntries.set(lastIndex,new TheRXResolvingSessionEntry(myEntries.get(lastIndex).myDescriptor,line - 1));
}","private void updateCurrentEntry(final int line){
  final int lastIndex=myEntries.size() - 1;
  final TheRXFunctionDescriptor descriptor=myEntries.get(lastIndex).myDescriptor;
  myEntries.set(lastIndex,new TheRXResolvingSessionEntry(descriptor,resolveLine(descriptor,line)));
}"
42920,"protected TheRConfigurationFactory(ConfigurationType configurationType){
  super(configurationType);
}","public TheRConfigurationFactory(@NotNull final ConfigurationType configurationType){
  super(configurationType);
}"
42921,"@Override public RunConfiguration createTemplateConfiguration(Project project){
  return new TheRRunConfiguration(project,this);
}","@Override public RunConfiguration createTemplateConfiguration(@NotNull final Project project){
  return new TheRRunConfiguration(project,this);
}"
42922,"public static TheRConfigurationType getInstance(){
  return ConfigurationTypeUtil.findConfigurationType(TheRConfigurationType.class);
}","@NotNull public static TheRConfigurationType getInstance(){
  return ConfigurationTypeUtil.findConfigurationType(TheRConfigurationType.class);
}"
42923,"@Nullable private XSourcePosition resolvePosition(@NotNull final TheRXResolvingSessionEntry entry){
  if (entry.myDescriptor == null) {
    return null;
  }
  return XDebuggerUtil.getInstance().createPosition(myVirtualFile,entry.myLine - 1);
}","@Nullable private XSourcePosition resolvePosition(@NotNull final TheRXResolvingSessionEntry entry){
  if (entry.myDescriptor == null) {
    return null;
  }
  return XDebuggerUtil.getInstance().createPosition(myVirtualFile,entry.myLine);
}"
42924,"private void addEntry(@NotNull final TheRLocation nextLocation){
  final TheRXFunctionDescriptor descriptor=myEntries.isEmpty() ? myRoot : resolveDescriptor(myEntries.listIterator(myEntries.size()),nextLocation.getFunctionName());
  myEntries.add(new TheRXResolvingSessionEntry(descriptor,nextLocation.getLine()));
}","private void addEntry(@NotNull final TheRLocation nextLocation){
  final String nextFunctionName=nextLocation.getFunctionName();
  final TheRXFunctionDescriptor descriptor=myEntries.isEmpty() ? myRoot : resolveDescriptor(myEntries.listIterator(myEntries.size()),nextFunctionName);
  final boolean isUnbraceFunction=descriptor != null && nextLocation.getLine() == 0;
  final int line=isUnbraceFunction ? descriptor.getStartLine() : nextLocation.getLine() - 1;
  myEntries.add(new TheRXResolvingSessionEntry(descriptor,line));
}"
42925,"private void updateCurrentEntry(final int line){
  final int lastIndex=myEntries.size() - 1;
  myEntries.set(lastIndex,new TheRXResolvingSessionEntry(myEntries.get(lastIndex).myDescriptor,line));
}","private void updateCurrentEntry(final int line){
  final int lastIndex=myEntries.size() - 1;
  myEntries.set(lastIndex,new TheRXResolvingSessionEntry(myEntries.get(lastIndex).myDescriptor,line - 1));
}"
42926,"@Test public void function(){
  final String expression=""String_Node_Str"";
  final String error=""String_Node_Str"";
  final String result=""String_Node_Str"";
  final AlwaysSameResultTheRExecutor executor=new AlwaysSameResultTheRExecutor(TheRDebugConstants.DEBUGGING_IN + ""String_Node_Str"" + expression,DEBUGGING_IN,TextRange.EMPTY_RANGE,error);
  final MyFunctionDebugger debugger=new MyFunctionDebugger();
  final MockTheRFunctionDebuggerFactory factory=new MockTheRFunctionDebuggerFactory(debugger);
  final MockTheROutputReceiver outputReceiver=new MockTheROutputReceiver();
  final MockTheRExpressionHandler handler=new MockTheRExpressionHandler();
  final TheRDebuggerEvaluatorImpl evaluator=new TheRDebuggerEvaluatorImpl(executor,factory,outputReceiver,handler,1);
  final TheRDebuggerEvaluatorReceiver receiver=new TheRDebuggerEvaluatorReceiver(result);
  evaluator.evalExpression(expression,receiver);
  assertEquals(1,executor.getCounter());
  assertEquals(2,debugger.getCounter());
  assertEquals(1,factory.getCounter());
  assertEquals(1,receiver.getCounter());
  assertEquals(Collections.singletonList(error),outputReceiver.getErrors());
  assertEquals(Collections.emptyList(),outputReceiver.getOutputs());
  assertEquals(1,handler.myCounter);
  assertEquals(expression,handler.myLastExpression);
}","@Test public void function(){
  final String expression=""String_Node_Str"";
  final String error=""String_Node_Str"";
  final String result=""String_Node_Str"";
  final AlwaysSameResultTheRExecutor executor=new AlwaysSameResultTheRExecutor(TheRDebugConstants.DEBUGGING_IN + ""String_Node_Str"" + expression+ ""String_Node_Str""+ DEBUG+ ""String_Node_Str""+ ""String_Node_Str""+ SERVICE_FUNCTION_PREFIX+ ""String_Node_Str""+ SERVICE_ENTER_FUNCTION_SUFFIX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",DEBUGGING_IN,TextRange.EMPTY_RANGE,error);
  final MyFunctionDebugger debugger=new MyFunctionDebugger();
  final MockTheRFunctionDebuggerFactory factory=new MockTheRFunctionDebuggerFactory(debugger);
  final MockTheROutputReceiver outputReceiver=new MockTheROutputReceiver();
  final MockTheRExpressionHandler handler=new MockTheRExpressionHandler();
  final TheRDebuggerEvaluatorImpl evaluator=new TheRDebuggerEvaluatorImpl(executor,factory,outputReceiver,handler,1);
  final TheRDebuggerEvaluatorReceiver receiver=new TheRDebuggerEvaluatorReceiver(result);
  evaluator.evalExpression(expression,receiver);
  assertEquals(1,executor.getCounter());
  assertEquals(2,debugger.getCounter());
  assertEquals(1,factory.getCounter());
  assertEquals(1,receiver.getCounter());
  assertEquals(Collections.singletonList(error),outputReceiver.getErrors());
  assertEquals(Collections.emptyList(),outputReceiver.getOutputs());
  assertEquals(1,handler.myCounter);
  assertEquals(expression,handler.myLastExpression);
}"
42927,"@Test public void function(){
  final String error=""String_Node_Str"";
  final AlwaysSameResultTheRExecutor executor=new AlwaysSameResultTheRExecutor(TheRDebugConstants.DEBUGGING_IN + ""String_Node_Str"",DEBUGGING_IN,TextRange.EMPTY_RANGE,error);
  final MockTheRFunctionDebugger debugger=new MockTheRFunctionDebugger(""String_Node_Str"",2);
  final MockTheRFunctionDebuggerFactory factory=new MockTheRFunctionDebuggerFactory(debugger);
  final MockTheROutputReceiver receiver=new MockTheROutputReceiver();
  final AlwaysSameResponseHandler handler=new AlwaysSameResponseHandler(true);
  final SuccessListener listener=new SuccessListener();
  final TheRValueModifierImpl modifier=new TheRValueModifierImpl(executor,factory,receiver,handler,0);
  modifier.setValue(""String_Node_Str"",""String_Node_Str"",listener);
  assertEquals(1,executor.getCounter());
  assertEquals(2,debugger.getCounter());
  assertEquals(1,factory.getCounter());
  assertEquals(Collections.singletonList(error),receiver.getErrors());
  assertEquals(Collections.emptyList(),receiver.getOutputs());
  assertEquals(1,handler.myCounter);
  assertEquals(1,listener.myCounter);
}","@Test public void function(){
  final String error=""String_Node_Str"";
  final AlwaysSameResultTheRExecutor executor=new AlwaysSameResultTheRExecutor(TheRDebugConstants.DEBUGGING_IN + ""String_Node_Str"" + DEBUG+ ""String_Node_Str""+ ""String_Node_Str""+ SERVICE_FUNCTION_PREFIX+ ""String_Node_Str""+ SERVICE_ENTER_FUNCTION_SUFFIX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",DEBUGGING_IN,TextRange.EMPTY_RANGE,error);
  final MockTheRFunctionDebugger debugger=new MockTheRFunctionDebugger(""String_Node_Str"",2);
  final MockTheRFunctionDebuggerFactory factory=new MockTheRFunctionDebuggerFactory(debugger);
  final MockTheROutputReceiver receiver=new MockTheROutputReceiver();
  final AlwaysSameResponseHandler handler=new AlwaysSameResponseHandler(true);
  final SuccessListener listener=new SuccessListener();
  final TheRValueModifierImpl modifier=new TheRValueModifierImpl(executor,factory,receiver,handler,0);
  modifier.setValue(""String_Node_Str"",""String_Node_Str"",listener);
  assertEquals(1,executor.getCounter());
  assertEquals(2,debugger.getCounter());
  assertEquals(1,factory.getCounter());
  assertEquals(Collections.singletonList(error),receiver.getErrors());
  assertEquals(Collections.emptyList(),receiver.getOutputs());
  assertEquals(1,handler.myCounter);
  assertEquals(1,listener.myCounter);
}"
42928,"private void doSetValue(@NotNull final String name,@NotNull final String value,@NotNull final Listener listener) throws TheRDebuggerException {
  final TheRProcessResponse response=execute(myProcess,name + ""String_Node_Str"" + value,myReceiver);
switch (response.getType()) {
case EMPTY:
    listener.onSuccess();
  return;
case DEBUGGING_IN:
runFunction();
listener.onSuccess();
return;
case DEBUG_AT:
execute(myProcess,EXECUTE_AND_STEP_COMMAND,RESPONSE,myReceiver);
listener.onSuccess();
return;
default :
throw new TheRUnexpectedResponseException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + response.getType() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ DEBUGGING_IN+ ""String_Node_Str""+ EMPTY+ ""String_Node_Str""+ DEBUG_AT+ ""String_Node_Str""+ ""String_Node_Str"");
}
}","private void doSetValue(@NotNull final String name,@NotNull final String value,@NotNull final Listener listener) throws TheRDebuggerException {
  final TheRProcessResponse response=execute(myProcess,name + ""String_Node_Str"" + value,myReceiver);
switch (response.getType()) {
case EMPTY:
    if (response.getError().isEmpty()) {
      listener.onSuccess();
    }
 else {
      listener.onError(response.getError());
    }
  return;
case DEBUGGING_IN:
runFunction();
listener.onSuccess();
return;
case DEBUG_AT:
execute(myProcess,EXECUTE_AND_STEP_COMMAND,RESPONSE,myReceiver);
listener.onSuccess();
return;
default :
throw new TheRUnexpectedResponseException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + response.getType() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ DEBUGGING_IN+ ""String_Node_Str""+ EMPTY+ ""String_Node_Str""+ DEBUG_AT+ ""String_Node_Str""+ ""String_Node_Str"");
}
}"
42929,"private static void addDebuggerTests(@NotNull final TestSuite suite){
  addJUnit4Test(suite,TheRDebuggerEvaluatorImplTest.class);
  addJUnit4Test(suite,TheRExpressionHandlerImplTest.class);
  addJUnit4Test(suite,TheRValueModifierHandlerImplTest.class);
  addJUnit4Test(suite,TheRVarsLoaderImplTest.class);
  addJUnit4Test(suite,TheRFunctionDebuggerFactoryImplTest.class);
  addJUnit4Test(suite,TheRMainFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRNotMainBraceFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRNotMainUnbraceFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRTraceAndDebugUtilsTest.class);
  addJUnit4Test(suite,TheRProcessReceiverTest.class);
  addJUnit4Test(suite,TheRProcessResponseCalculatorTest.class);
  addJUnit4Test(suite,TheRProcessUtilsTest.class);
  addJUnit4Test(suite,TheRDebuggerTest.class);
  addJUnit4Test(suite,TheRDebuggerStringUtilsTest.class);
  addJUnit4Test(suite,TheRScriptReaderImplTest.class);
}","private static void addDebuggerTests(@NotNull final TestSuite suite){
  addJUnit4Test(suite,TheRDebuggerEvaluatorImplTest.class);
  addJUnit4Test(suite,TheRExpressionHandlerImplTest.class);
  addJUnit4Test(suite,TheRValueModifierHandlerImplTest.class);
  addJUnit4Test(suite,TheRValueModifierImplTest.class);
  addJUnit4Test(suite,TheRVarsLoaderImplTest.class);
  addJUnit4Test(suite,TheRFunctionDebuggerFactoryImplTest.class);
  addJUnit4Test(suite,TheRMainFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRNotMainBraceFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRNotMainUnbraceFunctionDebuggerTest.class);
  addJUnit4Test(suite,TheRTraceAndDebugUtilsTest.class);
  addJUnit4Test(suite,TheRProcessReceiverTest.class);
  addJUnit4Test(suite,TheRProcessResponseCalculatorTest.class);
  addJUnit4Test(suite,TheRProcessUtilsTest.class);
  addJUnit4Test(suite,TheRDebuggerTest.class);
  addJUnit4Test(suite,TheRDebuggerStringUtilsTest.class);
  addJUnit4Test(suite,TheRScriptReaderImplTest.class);
}"
42930,"@Override public void run(){
  try {
    do {
      if (!advance())       return;
      myStack.update(myDebugger.getStack());
    }
 while (!isBreakpoint());
    showDebugInformation();
  }
 catch (  final TheRDebuggerException e) {
    LOGGER.error(e);
  }
}","@Override public void run(){
  if (isError) {
    Messages.showErrorDialog(getSession().getProject(),message,title);
  }
 else {
    Messages.showWarningDialog(getSession().getProject(),message,title);
  }
}"
42931,"private void printInterpreterOutput(){
  final Queue<TheRXOutputBuffer.Entry> messages=myOutputBuffer.getMessages();
  while (!messages.isEmpty()) {
    final TheRXOutputBuffer.Entry message=messages.poll();
    if (message != null) {
      final String text=message.getText();
      final ConsoleViewContentType type=message.getType();
      myConsole.print(text,type);
      if (!StringUtil.endsWithLineBreak(text)) {
        myConsole.print(TheRDebugConstants.LINE_SEPARATOR,type);
      }
    }
  }
}","private void printInterpreterOutput(){
  final Queue<TheRXOutputBuffer.Entry> messages=myOutputBuffer.getMessages();
  while (!messages.isEmpty()) {
    final TheRXOutputBuffer.Entry message=messages.poll();
    if (message != null) {
      final String text=message.getText();
      final ConsoleViewContentType type=message.getType();
      if (type == ConsoleViewContentType.ERROR_OUTPUT) {
        tryFailedImportMessage(text);
      }
      myConsole.print(text,type);
      if (!StringUtil.endsWithLineBreak(text)) {
        myConsole.print(TheRDebugConstants.LINE_SEPARATOR,type);
      }
    }
  }
}"
42932,"@Override public void setDropFrames(final int number){
  myDropFrames=number;
}","@Override public void setDropFrames(final int number){
  myDropFrames=number;
  if (myDropFrames == myDebuggers.size()) {
    myResult=topDebugger().getResult();
  }
}"
42933,"@NotNull public String getResult(){
  return topDebugger().getResult();
}","@NotNull public String getResult(){
  if (myResult != null) {
    return myResult;
  }
 else {
    return topDebugger().getResult();
  }
}"
42934,"public TheREvaluatedFunctionDebuggerHandler(@NotNull final TheRProcess process,@NotNull final TheRFunctionDebuggerFactory debuggerFactory,@NotNull final TheROutputReceiver outputReceiver) throws TheRDebuggerException {
  myDebuggers=new ArrayList<TheRFunctionDebugger>();
  myDropFrames=1;
  appendDebugger(debuggerFactory.getNotMainFunctionDebugger(process,this,outputReceiver));
}","public TheREvaluatedFunctionDebuggerHandler(@NotNull final TheRProcess process,@NotNull final TheRFunctionDebuggerFactory factory,@NotNull final TheROutputReceiver receiver) throws TheRDebuggerException {
  myDebuggers=new ArrayList<TheRFunctionDebugger>();
  myDropFrames=1;
  appendDebugger(factory.getNotMainFunctionDebugger(process,this,receiver));
}"
42935,"public boolean advance() throws TheRDebuggerException {
  topDebugger().advance();
  while (!topDebugger().hasNext()) {
    if (myDebuggers.size() == 1) {
      return false;
    }
    for (int i=0; i < myDropFrames; i++) {
      popDebugger();
    }
    myDropFrames=1;
  }
  return true;
}","public boolean advance() throws TheRDebuggerException {
  topDebugger().advance();
  while (!myDebuggers.isEmpty() && !topDebugger().hasNext()) {
    if (myDebuggers.size() == 1) {
      return false;
    }
    for (int i=0; i < myDropFrames; i++) {
      popDebugger();
    }
    myDropFrames=1;
  }
  return !myDebuggers.isEmpty();
}"
42936,"private void goToFlexUnitTestOrCodeAction(AnActionEvent e){
  final Module module=e.getData(DataKeys.MODULE);
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  Editor editor=e.getData(PlatformDataKeys.EDITOR);
  JSClass jsClass=JSPsiImplUtils.findClass((JSFile)psiFile);
  final String packageName=JSResolveUtil.getPackageName(jsClass);
  final VirtualFile testFolder=getTestFolderFromCurrentModule(module);
  Runnable runnable=new Runnable(){
    public void run(){
      if (testFolder != null) {
        try {
          VirtualFile childDirectory=testFolder.findChild(packageName);
          if (childDirectory == null) {
            childDirectory=testFolder.createChildDirectory(project,packageName);
          }
          String testFileName=psiFile.getVirtualFile().getNameWithoutExtension() + ""String_Node_Str"";
          PsiDirectory psiDirectory=PsiManagerImpl.getInstance(project).findDirectory(childDirectory);
          PsiFile testFile=psiDirectory.findFile(testFileName + ""String_Node_Str"");
          if (testFile == null) {
            testFile=(PsiFile)CreateClassOrInterfaceAction.createClass(testFileName,packageName,psiDirectory,""String_Node_Str"");
          }
          FileEditorManager.getInstance(project).openFile(testFile.getVirtualFile(),true);
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
    }
  }
;
  ApplicationManager.getApplication().runWriteAction(runnable);
}","private void goToFlexUnitTestOrCodeAction(AnActionEvent e){
  final Module module=e.getData(DataKeys.MODULE);
  project=e.getData(PlatformDataKeys.PROJECT);
  Editor editor=e.getData(PlatformDataKeys.EDITOR);
  JSClass jsClass=JSPsiImplUtils.findClass((JSFile)psiFile);
  final String packageName=JSResolveUtil.getPackageName(jsClass);
  final VirtualFile testFolder=getTestFolderFromCurrentModule(module);
  Runnable runnable=new Runnable(){
    public void run(){
      if (testFolder != null) {
        try {
          VirtualFile childDirectory=createDirectories(testFolder,packageName);
          String testFileName=psiFile.getVirtualFile().getNameWithoutExtension() + ""String_Node_Str"";
          PsiDirectory psiDirectory=PsiManagerImpl.getInstance(project).findDirectory(childDirectory);
          PsiFile testFile=psiDirectory.findFile(testFileName + ""String_Node_Str"");
          if (testFile == null) {
            testFile=(PsiFile)CreateClassOrInterfaceAction.createClass(testFileName,packageName,psiDirectory,""String_Node_Str"");
          }
          FileEditorManager.getInstance(project).openFile(testFile.getVirtualFile(),true);
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
    }
  }
;
  ApplicationManager.getApplication().runWriteAction(runnable);
}"
42937,"public void run(){
  if (testFolder != null) {
    try {
      VirtualFile childDirectory=testFolder.findChild(packageName);
      if (childDirectory == null) {
        childDirectory=testFolder.createChildDirectory(project,packageName);
      }
      String testFileName=psiFile.getVirtualFile().getNameWithoutExtension() + ""String_Node_Str"";
      PsiDirectory psiDirectory=PsiManagerImpl.getInstance(project).findDirectory(childDirectory);
      PsiFile testFile=psiDirectory.findFile(testFileName + ""String_Node_Str"");
      if (testFile == null) {
        testFile=(PsiFile)CreateClassOrInterfaceAction.createClass(testFileName,packageName,psiDirectory,""String_Node_Str"");
      }
      FileEditorManager.getInstance(project).openFile(testFile.getVirtualFile(),true);
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}","public void run(){
  if (testFolder != null) {
    try {
      VirtualFile childDirectory=createDirectories(testFolder,packageName);
      String testFileName=psiFile.getVirtualFile().getNameWithoutExtension() + ""String_Node_Str"";
      PsiDirectory psiDirectory=PsiManagerImpl.getInstance(project).findDirectory(childDirectory);
      PsiFile testFile=psiDirectory.findFile(testFileName + ""String_Node_Str"");
      if (testFile == null) {
        testFile=(PsiFile)CreateClassOrInterfaceAction.createClass(testFileName,packageName,psiDirectory,""String_Node_Str"");
      }
      FileEditorManager.getInstance(project).openFile(testFile.getVirtualFile(),true);
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}"
42938,"private void findText(){
  if (getText().length() < 2) {
    return;
  }
  if (timer != null) {
    timer.stop();
    timer=null;
  }
  timer=new Timer(100,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          findModel.setStringToFind(getText());
          results=findAllVisible();
          String[] strings=calcWords(getText(),editor);
          for (          String string : strings) {
            findModel.setStringToFind(string);
            results.addAll(findAllVisible());
          }
          HashSet hashSet=new HashSet();
          hashSet.addAll(results);
          results.clear();
          results.addAll(hashSet);
          final int caretOffset=editor.getCaretModel().getOffset();
          RelativePoint caretPoint=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(caretOffset));
          final Point cP=caretPoint.getOriginalPoint();
          Collections.sort(results,new Comparator<Integer>(){
            @Override public int compare(            Integer o1,            Integer o2){
              RelativePoint o1Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o1));
              RelativePoint o2Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o2));
              Point o1P=o1Point.getOriginalPoint();
              Point o2P=o2Point.getOriginalPoint();
              double i1=Point.distance(o1P.x,o1P.y,cP.x,cP.y);
              double i2=Point.distance(o2P.x,o2P.y,cP.x,cP.y);
              if (i1 > i2) {
                return 1;
              }
 else               if (i1 == i2) {
                return 0;
              }
 else {
                return -1;
              }
            }
          }
);
          startResult=0;
          endResult=ALLOWED_RESULTS;
          showBalloons(results,startResult,endResult);
        }
      }
);
    }
  }
);
  timer.setRepeats(false);
  timer.start();
}","private void findText(){
  final int length=getText().length();
  if (length < 2) {
    return;
  }
  if (timer != null) {
    timer.stop();
    timer=null;
  }
  int delay=100;
  if (length == 2) {
    delay=250;
  }
  timer=new Timer(delay,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (getText().length() < 2) {
        return;
      }
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          System.out.println(getText());
          findModel.setStringToFind(getText());
          results=findAllVisible();
          String[] strings=calcWords(getText(),editor);
          for (          String string : strings) {
            findModel.setStringToFind(string);
            results.addAll(findAllVisible());
          }
          HashSet hashSet=new HashSet();
          hashSet.addAll(results);
          results.clear();
          results.addAll(hashSet);
          final int caretOffset=editor.getCaretModel().getOffset();
          RelativePoint caretPoint=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(caretOffset));
          final Point cP=caretPoint.getOriginalPoint();
          Collections.sort(results,new Comparator<Integer>(){
            @Override public int compare(            Integer o1,            Integer o2){
              RelativePoint o1Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o1));
              RelativePoint o2Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o2));
              Point o1P=o1Point.getOriginalPoint();
              Point o2P=o2Point.getOriginalPoint();
              double i1=Point.distance(o1P.x,o1P.y,cP.x,cP.y);
              double i2=Point.distance(o2P.x,o2P.y,cP.x,cP.y);
              if (i1 > i2) {
                return 1;
              }
 else               if (i1 == i2) {
                return 0;
              }
 else {
                return -1;
              }
            }
          }
);
          startResult=0;
          endResult=ALLOWED_RESULTS;
          showBalloons(results,startResult,endResult);
        }
      }
);
    }
  }
);
  timer.setRepeats(false);
  timer.start();
}"
42939,"@Override public void actionPerformed(ActionEvent e){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      findModel.setStringToFind(getText());
      results=findAllVisible();
      String[] strings=calcWords(getText(),editor);
      for (      String string : strings) {
        findModel.setStringToFind(string);
        results.addAll(findAllVisible());
      }
      HashSet hashSet=new HashSet();
      hashSet.addAll(results);
      results.clear();
      results.addAll(hashSet);
      final int caretOffset=editor.getCaretModel().getOffset();
      RelativePoint caretPoint=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(caretOffset));
      final Point cP=caretPoint.getOriginalPoint();
      Collections.sort(results,new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          RelativePoint o1Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o1));
          RelativePoint o2Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o2));
          Point o1P=o1Point.getOriginalPoint();
          Point o2P=o2Point.getOriginalPoint();
          double i1=Point.distance(o1P.x,o1P.y,cP.x,cP.y);
          double i2=Point.distance(o2P.x,o2P.y,cP.x,cP.y);
          if (i1 > i2) {
            return 1;
          }
 else           if (i1 == i2) {
            return 0;
          }
 else {
            return -1;
          }
        }
      }
);
      startResult=0;
      endResult=ALLOWED_RESULTS;
      showBalloons(results,startResult,endResult);
    }
  }
);
}","@Override public void actionPerformed(ActionEvent e){
  if (getText().length() < 2) {
    return;
  }
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      System.out.println(getText());
      findModel.setStringToFind(getText());
      results=findAllVisible();
      String[] strings=calcWords(getText(),editor);
      for (      String string : strings) {
        findModel.setStringToFind(string);
        results.addAll(findAllVisible());
      }
      HashSet hashSet=new HashSet();
      hashSet.addAll(results);
      results.clear();
      results.addAll(hashSet);
      final int caretOffset=editor.getCaretModel().getOffset();
      RelativePoint caretPoint=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(caretOffset));
      final Point cP=caretPoint.getOriginalPoint();
      Collections.sort(results,new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          RelativePoint o1Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o1));
          RelativePoint o2Point=getPointFromVisualPosition(editor,editor.offsetToVisualPosition(o2));
          Point o1P=o1Point.getOriginalPoint();
          Point o2P=o2Point.getOriginalPoint();
          double i1=Point.distance(o1P.x,o1P.y,cP.x,cP.y);
          double i2=Point.distance(o2P.x,o2P.y,cP.x,cP.y);
          if (i1 > i2) {
            return 1;
          }
 else           if (i1 == i2) {
            return 0;
          }
 else {
            return -1;
          }
        }
      }
);
      startResult=0;
      endResult=ALLOWED_RESULTS;
      showBalloons(results,startResult,endResult);
    }
  }
);
}"
42940,"@Nullable protected java.util.List<Integer> findAllVisible(){
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (psiFile == null) {
    return null;
  }
  CharSequence text=document.getCharsSequence();
  int textLength=document.getTextLength();
  final List<Integer> usages=new ArrayList<Integer>();
  JViewport viewport=editor.getScrollPane().getViewport();
  double linesAbove=viewport.getViewPosition().getY() / editor.getLineHeight();
  ScrollingModelImpl scrollingModel=(ScrollingModelImpl)editor.getScrollingModel();
  Rectangle visibleArea=scrollingModel.getVisibleArea();
  double visibleLines=visibleArea.getHeight() / editor.getLineHeight() + 4;
  int offset=document.getLineStartOffset((int)linesAbove);
  int endLine=(int)(linesAbove + visibleLines);
  int lineCount=document.getLineCount() - 1;
  if (endLine > lineCount) {
    endLine=lineCount;
  }
  int endOffset=document.getLineEndOffset(endLine);
  while (offset < endOffset) {
    FindResult result=findManager.findString(text,offset,findModel,virtualFile);
    if (!result.isStringFound()) {
      break;
    }
    UsageInfo2UsageAdapter usageAdapter=new UsageInfo2UsageAdapter(new UsageInfo(psiFile,result.getStartOffset(),result.getEndOffset()));
    Point point=editor.logicalPositionToXY(editor.offsetToLogicalPosition(usageAdapter.getUsageInfo().getNavigationOffset()));
    if (visibleArea.contains(point)) {
      UsageInfo usageInfo=usageAdapter.getUsageInfo();
      usages.add(usageInfo.getNavigationOffset());
    }
    final int prevOffset=offset;
    offset=result.getEndOffset();
    if (prevOffset == offset) {
      ++offset;
    }
  }
  return usages;
}","@Nullable protected java.util.List<Integer> findAllVisible(){
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (psiFile == null) {
    return null;
  }
  CharSequence text=document.getCharsSequence();
  final List<Integer> usages=new ArrayList<Integer>();
  JViewport viewport=editor.getScrollPane().getViewport();
  double linesAbove=viewport.getViewPosition().getY() / editor.getLineHeight();
  ScrollingModelImpl scrollingModel=(ScrollingModelImpl)editor.getScrollingModel();
  Rectangle visibleArea=scrollingModel.getVisibleArea();
  double visibleLines=visibleArea.getHeight() / editor.getLineHeight() + 4;
  int offset=document.getLineStartOffset((int)linesAbove);
  int endLine=(int)(linesAbove + visibleLines);
  int lineCount=document.getLineCount() - 1;
  if (endLine > lineCount) {
    endLine=lineCount;
  }
  int endOffset=document.getLineEndOffset(endLine);
  while (offset < endOffset) {
    FindResult result=findManager.findString(text,offset,findModel,virtualFile);
    if (!result.isStringFound()) {
      break;
    }
    UsageInfo2UsageAdapter usageAdapter=new UsageInfo2UsageAdapter(new UsageInfo(psiFile,result.getStartOffset(),result.getEndOffset()));
    Point point=editor.logicalPositionToXY(editor.offsetToLogicalPosition(usageAdapter.getUsageInfo().getNavigationOffset()));
    if (visibleArea.contains(point)) {
      UsageInfo usageInfo=usageAdapter.getUsageInfo();
      usages.add(usageInfo.getNavigationOffset());
    }
    final int prevOffset=offset;
    offset=result.getEndOffset();
    if (prevOffset == offset) {
      ++offset;
    }
  }
  return usages;
}"
42941,"/** 
 * Ends the current array or object.
 */
public SELF end(){
  if (states.size() == 0)   throw new JsonWriterException(""String_Node_Str"");
  if (inObject) {
    raw('}');
  }
 else {
    raw(']');
  }
  inObject=states.pop();
  return castThis();
}","/** 
 * Ends the current array or object.
 */
public SELF end(){
  if (states.size() == 0)   throw new JsonWriterException(""String_Node_Str"");
  if (inObject) {
    raw('}');
  }
 else {
    raw(']');
  }
  first=false;
  inObject=states.pop();
  return castThis();
}"
42942,"@Test public void testFailBadKeywords4(){
  try {
    JsonParser.parse(""String_Node_Str"");
    fail();
  }
 catch (  JsonParserException e) {
    testException(e,1,2);
  }
}","@Test public void testFailBadKeywords4(){
  try {
    JsonParser.parse(""String_Node_Str"");
    fail();
  }
 catch (  JsonParserException e) {
  }
}"
42943,"@Test public void testFailBadKeywords4(){
  try {
    JsonParser.parse(""String_Node_Str"");
    fail();
  }
 catch (  JsonParserException e) {
  }
}","@Test public void testFailBadKeywords4(){
  try {
    JsonParser.parse(""String_Node_Str"");
    fail();
  }
 catch (  JsonParserException e) {
    testException(e,1,2);
  }
}"
42944,"/** 
 * Creates an area from the supplied shape.
 */
public Area(IShape s){
  double[] segmentCoords=new double[6];
  double lastMoveX=0f;
  double lastMoveY=0f;
  int rulesIndex=0;
  int coordsIndex=0;
  for (PathIterator pi=s.pathIterator(null); !pi.isDone(); pi.next()) {
    _coords=adjustSize(_coords,coordsIndex + 6);
    _rules=adjustSize(_rules,rulesIndex + 1);
    _offsets=adjustSize(_offsets,rulesIndex + 1);
    _rules[rulesIndex]=pi.currentSegment(segmentCoords);
    _offsets[rulesIndex]=coordsIndex;
switch (_rules[rulesIndex]) {
case PathIterator.SEG_MOVETO:
      _coords[coordsIndex++]=segmentCoords[0];
    _coords[coordsIndex++]=segmentCoords[1];
  lastMoveX=segmentCoords[0];
lastMoveY=segmentCoords[1];
++_moveToCount;
break;
case PathIterator.SEG_LINETO:
if ((segmentCoords[0] != lastMoveX) || (segmentCoords[1] != lastMoveY)) {
_coords[coordsIndex++]=segmentCoords[0];
_coords[coordsIndex++]=segmentCoords[1];
}
 else {
--rulesIndex;
}
break;
case PathIterator.SEG_QUADTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,4);
coordsIndex+=4;
_isPolygonal=false;
break;
case PathIterator.SEG_CUBICTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,6);
coordsIndex+=6;
_isPolygonal=false;
break;
case PathIterator.SEG_CLOSE:
break;
}
++rulesIndex;
}
if ((rulesIndex != 0) && (_rules[rulesIndex - 1] != PathIterator.SEG_CLOSE)) {
_rules[rulesIndex]=PathIterator.SEG_CLOSE;
_offsets[rulesIndex]=_coordsSize;
}
_rulesSize=rulesIndex;
_coordsSize=coordsIndex;
}","/** 
 * Creates an area from the supplied shape.
 */
public Area(IShape s){
  double[] segmentCoords=new double[6];
  double lastMoveX=0f;
  double lastMoveY=0f;
  int rulesIndex=0;
  int coordsIndex=0;
  for (PathIterator pi=s.pathIterator(null); !pi.isDone(); pi.next()) {
    _coords=adjustSize(_coords,coordsIndex + 6);
    _rules=adjustSize(_rules,rulesIndex + 1);
    _offsets=adjustSize(_offsets,rulesIndex + 1);
    _rules[rulesIndex]=pi.currentSegment(segmentCoords);
    _offsets[rulesIndex]=coordsIndex;
switch (_rules[rulesIndex]) {
case PathIterator.SEG_MOVETO:
      _coords[coordsIndex++]=segmentCoords[0];
    _coords[coordsIndex++]=segmentCoords[1];
  lastMoveX=segmentCoords[0];
lastMoveY=segmentCoords[1];
++_moveToCount;
break;
case PathIterator.SEG_LINETO:
if ((segmentCoords[0] != lastMoveX) || (segmentCoords[1] != lastMoveY)) {
_coords[coordsIndex++]=segmentCoords[0];
_coords[coordsIndex++]=segmentCoords[1];
}
 else {
--rulesIndex;
}
break;
case PathIterator.SEG_QUADTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,4);
coordsIndex+=4;
_isPolygonal=false;
break;
case PathIterator.SEG_CUBICTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,6);
coordsIndex+=6;
_isPolygonal=false;
break;
case PathIterator.SEG_CLOSE:
break;
}
++rulesIndex;
}
if ((rulesIndex != 0) && (_rules[rulesIndex - 1] != PathIterator.SEG_CLOSE)) {
_rules=adjustSize(_rules,rulesIndex + 1);
_rules[rulesIndex]=PathIterator.SEG_CLOSE;
_offsets=adjustSize(_offsets,rulesIndex + 1);
_offsets[rulesIndex]=coordsIndex;
++rulesIndex;
}
_rulesSize=rulesIndex;
_coordsSize=coordsIndex;
}"
42945,"/** 
 * Creates an area from the supplied shape.
 */
public Area(IShape s){
  float[] segmentCoords=new float[6];
  float lastMoveX=0f;
  float lastMoveY=0f;
  int rulesIndex=0;
  int coordsIndex=0;
  for (PathIterator pi=s.pathIterator(null); !pi.isDone(); pi.next()) {
    _coords=adjustSize(_coords,coordsIndex + 6);
    _rules=adjustSize(_rules,rulesIndex + 1);
    _offsets=adjustSize(_offsets,rulesIndex + 1);
    _rules[rulesIndex]=pi.currentSegment(segmentCoords);
    _offsets[rulesIndex]=coordsIndex;
switch (_rules[rulesIndex]) {
case PathIterator.SEG_MOVETO:
      _coords[coordsIndex++]=segmentCoords[0];
    _coords[coordsIndex++]=segmentCoords[1];
  lastMoveX=segmentCoords[0];
lastMoveY=segmentCoords[1];
++_moveToCount;
break;
case PathIterator.SEG_LINETO:
if ((segmentCoords[0] != lastMoveX) || (segmentCoords[1] != lastMoveY)) {
_coords[coordsIndex++]=segmentCoords[0];
_coords[coordsIndex++]=segmentCoords[1];
}
 else {
--rulesIndex;
}
break;
case PathIterator.SEG_QUADTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,4);
coordsIndex+=4;
_isPolygonal=false;
break;
case PathIterator.SEG_CUBICTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,6);
coordsIndex+=6;
_isPolygonal=false;
break;
case PathIterator.SEG_CLOSE:
break;
}
++rulesIndex;
}
if ((rulesIndex != 0) && (_rules[rulesIndex - 1] != PathIterator.SEG_CLOSE)) {
_rules[rulesIndex]=PathIterator.SEG_CLOSE;
_offsets[rulesIndex]=_coordsSize;
}
_rulesSize=rulesIndex;
_coordsSize=coordsIndex;
}","/** 
 * Creates an area from the supplied shape.
 */
public Area(IShape s){
  float[] segmentCoords=new float[6];
  float lastMoveX=0f;
  float lastMoveY=0f;
  int rulesIndex=0;
  int coordsIndex=0;
  for (PathIterator pi=s.pathIterator(null); !pi.isDone(); pi.next()) {
    _coords=adjustSize(_coords,coordsIndex + 6);
    _rules=adjustSize(_rules,rulesIndex + 1);
    _offsets=adjustSize(_offsets,rulesIndex + 1);
    _rules[rulesIndex]=pi.currentSegment(segmentCoords);
    _offsets[rulesIndex]=coordsIndex;
switch (_rules[rulesIndex]) {
case PathIterator.SEG_MOVETO:
      _coords[coordsIndex++]=segmentCoords[0];
    _coords[coordsIndex++]=segmentCoords[1];
  lastMoveX=segmentCoords[0];
lastMoveY=segmentCoords[1];
++_moveToCount;
break;
case PathIterator.SEG_LINETO:
if ((segmentCoords[0] != lastMoveX) || (segmentCoords[1] != lastMoveY)) {
_coords[coordsIndex++]=segmentCoords[0];
_coords[coordsIndex++]=segmentCoords[1];
}
 else {
--rulesIndex;
}
break;
case PathIterator.SEG_QUADTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,4);
coordsIndex+=4;
_isPolygonal=false;
break;
case PathIterator.SEG_CUBICTO:
System.arraycopy(segmentCoords,0,_coords,coordsIndex,6);
coordsIndex+=6;
_isPolygonal=false;
break;
case PathIterator.SEG_CLOSE:
break;
}
++rulesIndex;
}
if ((rulesIndex != 0) && (_rules[rulesIndex - 1] != PathIterator.SEG_CLOSE)) {
_rules=adjustSize(_rules,rulesIndex + 1);
_rules[rulesIndex]=PathIterator.SEG_CLOSE;
_offsets=adjustSize(_offsets,rulesIndex + 1);
_offsets[rulesIndex]=coordsIndex;
++rulesIndex;
}
_rulesSize=rulesIndex;
_coordsSize=coordsIndex;
}"
42946,"public void setTransform(AffineTransform t){
  type=t.type;
  setTransform(t.m00,t.m10,t.m01,t.m11,t.m02,t.m12);
}","public void setTransform(AffineTransform t){
  setTransform(t.m00,t.m10,t.m01,t.m11,t.m02,t.m12);
  type=t.type;
}"
42947,"public void setTransform(AffineTransform t){
  type=t.type;
  setTransform(t.m00,t.m10,t.m01,t.m11,t.m02,t.m12);
}","public void setTransform(AffineTransform t){
  setTransform(t.m00,t.m10,t.m01,t.m11,t.m02,t.m12);
  type=t.type;
}"
42948,"@Override public float getTy(){
  return this.tx;
}","@Override public float getTy(){
  return this.ty;
}"
42949,"@Override public void setFrame(float x,float y,float w,float h){
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
}","@Override public void setFrame(float x,float y,float width,float height){
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
}"
42950,"/** 
 * {@inheritDoc} 
 */
public Class<?> resolveClass(final Unmarshaller unmarshaller,final String className,final long serialVersionUID) throws IOException, ClassNotFoundException {
  final String name=(String)unmarshaller.readObject();
  if (name == null) {
    return Class.forName(className,false,Module.class.getClassLoader());
  }
  final String slot=(String)unmarshaller.readObject();
  final ModuleIdentifier identifier=ModuleIdentifier.create(name,slot);
  try {
    return Class.forName(className,false,moduleLoader.loadModule(identifier).getClassLoader());
  }
 catch (  ModuleLoadException e) {
    final InvalidClassException ce=new InvalidClassException(className,""String_Node_Str"");
    ce.initCause(e);
    throw ce;
  }
}","/** 
 * {@inheritDoc} 
 */
public Class<?> resolveClass(final Unmarshaller unmarshaller,final String className,final long serialVersionUID) throws IOException, ClassNotFoundException {
  final String name=(String)unmarshaller.readObject();
  if (name == null) {
    final ClassLoader classLoader;
    if (System.getSecurityManager() == null) {
      classLoader=Module.class.getClassLoader();
    }
 else {
      classLoader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
        @Override public ClassLoader run(){
          return Module.class.getClassLoader();
        }
      }
);
    }
    return Class.forName(className,false,classLoader);
  }
  final String slot=(String)unmarshaller.readObject();
  final ModuleIdentifier identifier=ModuleIdentifier.create(name,slot);
  try {
    final ClassLoader classLoader;
    final Module module=moduleLoader.loadModule(identifier);
    if (System.getSecurityManager() == null) {
      classLoader=module.getClassLoader();
    }
 else {
      classLoader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
        @Override public ClassLoader run(){
          return module.getClassLoader();
        }
      }
);
    }
    return Class.forName(className,false,classLoader);
  }
 catch (  ModuleLoadException e) {
    final InvalidClassException ce=new InvalidClassException(className,""String_Node_Str"");
    ce.initCause(e);
    throw ce;
  }
}"
42951,"/** 
 * {@inheritDoc} 
 */
public Class<?> resolveProxyClass(final Unmarshaller unmarshaller,final String[] names) throws IOException, ClassNotFoundException {
  final String name=(String)unmarshaller.readObject();
  final ClassLoader classLoader;
  if (name == null) {
    classLoader=Module.class.getClassLoader();
  }
 else {
    final String slot=(String)unmarshaller.readObject();
    final ModuleIdentifier identifier=ModuleIdentifier.create(name,slot);
    final Module module;
    try {
      module=moduleLoader.loadModule(identifier);
    }
 catch (    ModuleLoadException e) {
      final InvalidClassException ce=new InvalidClassException(""String_Node_Str"");
      ce.initCause(e);
      throw ce;
    }
    classLoader=module.getClassLoader();
  }
  final int len=names.length;
  final Class<?>[] interfaces=new Class<?>[len];
  for (int i=0; i < len; i++) {
    interfaces[i]=Class.forName(names[i],false,classLoader);
  }
  return Proxy.getProxyClass(classLoader,interfaces);
}","/** 
 * {@inheritDoc} 
 */
public Class<?> resolveProxyClass(final Unmarshaller unmarshaller,final String[] names) throws IOException, ClassNotFoundException {
  final String name=(String)unmarshaller.readObject();
  final ClassLoader classLoader;
  if (name == null) {
    if (System.getSecurityManager() == null) {
      classLoader=Module.class.getClassLoader();
    }
 else {
      classLoader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
        @Override public ClassLoader run(){
          return Module.class.getClassLoader();
        }
      }
);
    }
  }
 else {
    final String slot=(String)unmarshaller.readObject();
    final ModuleIdentifier identifier=ModuleIdentifier.create(name,slot);
    final Module module;
    try {
      module=moduleLoader.loadModule(identifier);
    }
 catch (    ModuleLoadException e) {
      final InvalidClassException ce=new InvalidClassException(""String_Node_Str"");
      ce.initCause(e);
      throw ce;
    }
    classLoader=module.getClassLoader();
  }
  final int len=names.length;
  final Class<?>[] interfaces=new Class<?>[len];
  for (int i=0; i < len; i++) {
    interfaces[i]=Class.forName(names[i],false,classLoader);
  }
  return Proxy.getProxyClass(classLoader,interfaces);
}"
42952,"public <T>T[] toArray(final T[] a){
  ArrayList<T> list=new ArrayList<T>();
  list.addAll((Set<T>)this);
  return list.toArray(a);
}","public Object[] toArray(){
  ArrayList<Object> list=new ArrayList<Object>(size());
  list.addAll(this);
  return list.toArray();
}"
42953,"protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
instanceCache.put(obj,instanceSeq++);
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
instanceCache.put(obj,instanceSeq++);
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
instanceCache.put(obj,instanceSeq++);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}","protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
instanceCache.put(obj,instanceSeq++);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}"
42954,"ClassDescriptor doReadClassDescriptor(final int classType) throws IOException, ClassNotFoundException {
  final ArrayList<ClassDescriptor> classCache=this.classCache;
switch (classType) {
case ID_REPEAT_CLASS_FAR:
{
      return classCache.get(readInt());
    }
case ID_REPEAT_CLASS_NEAR:
{
    return classCache.get((readByte() | 0xffffff00) + classCache.size());
  }
case ID_REPEAT_CLASS_NEARISH:
{
  return classCache.get((readShort() | 0xffff0000) + classCache.size());
}
case ID_PREDEFINED_ENUM_TYPE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_ENUM_TYPE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_EXTERNALIZABLE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZER_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final Externalizer externalizer=(Externalizer)readObject();
final SimpleClassDescriptor descriptor=new ExternalizerClassDescriptor(type,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PLAIN_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_PLAIN_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PROXY_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_PROXY_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_SERIALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SerializableClass serializableClass=registry.lookup(type);
int descType=serializableClass.hasWriteObject() ? ID_WRITE_OBJECT_CLASS : ID_SERIALIZABLE_CLASS;
final ClassDescriptor descriptor=new BasicSerializableClassDescriptor(serializableClass,doReadClassDescriptor(readUnsignedByte()),serializableClass.getFields(),descType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PLAIN_CLASS:
{
final String className=readString();
final Class<?> clazz=classResolver.resolveClass(this,className,0L);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(clazz,ID_PLAIN_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_PROXY_CLASS:
{
String[] interfaces=new String[readInt()];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readString();
}
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(classResolver.resolveProxyClass(this,interfaces),ID_PROXY_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_WRITE_OBJECT_CLASS:
case ID_SERIALIZABLE_CLASS:
{
int idx=classCache.size();
classCache.add(null);
final String className=readString();
final long uid=readLong();
final Class<?> clazz=classResolver.resolveClass(this,className,uid);
final Class<?> superClazz=clazz.getSuperclass();
final FutureSerializableClassDescriptor descriptor=new FutureSerializableClassDescriptor(clazz,classType);
classCache.set(idx,descriptor);
final int cnt=readInt();
final String[] names=new String[cnt];
final ClassDescriptor[] descriptors=new ClassDescriptor[cnt];
final boolean[] unshareds=new boolean[cnt];
for (int i=0; i < cnt; i++) {
names[i]=readUTF();
descriptors[i]=doReadClassDescriptor(readUnsignedByte());
unshareds[i]=readBoolean();
}
ClassDescriptor superDescriptor=doReadClassDescriptor(readUnsignedByte());
if (superDescriptor != null) {
final Class<?> superType=superDescriptor.getType();
if (!superType.isAssignableFrom(clazz)) {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
Class<?> cl=superClazz;
while (cl != superType) {
superDescriptor=new SerializableGapClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
 else if (superClazz != null) {
Class<?> cl=superClazz;
while (serializabilityChecker.isSerializable(cl)) {
superDescriptor=new SerializableGapClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
final SerializableClass serializableClass=registry.lookup(clazz);
final SerializableField[] fields=new SerializableField[cnt];
for (int i=0; i < cnt; i++) {
fields[i]=serializableClass.getSerializableField(names[i],descriptors[i].getType(),unshareds[i]);
}
descriptor.setResult(new BasicSerializableClassDescriptor(serializableClass,superDescriptor,fields,classType));
return descriptor;
}
case ID_EXTERNALIZABLE_CLASS:
{
final String className=readString();
final long uid=readLong();
final Class<?> clazz=classResolver.resolveClass(this,className,uid);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(clazz,ID_EXTERNALIZABLE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_EXTERNALIZER_CLASS:
{
final String className=readString();
int idx=classCache.size();
classCache.add(null);
final Class<?> clazz=classResolver.resolveClass(this,className,0L);
final Externalizer externalizer=(Externalizer)readObject();
final SimpleClassDescriptor descriptor=new ExternalizerClassDescriptor(clazz,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_ENUM_TYPE_CLASS:
{
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(classResolver.resolveClass(this,readString(),0L),ID_ENUM_TYPE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_OBJECT_ARRAY_TYPE_CLASS:
{
final ClassDescriptor elementType=doReadClassDescriptor(readUnsignedByte());
final SimpleClassDescriptor arrayDescriptor=new SimpleClassDescriptor(Array.newInstance(elementType.getType(),0).getClass(),ID_OBJECT_ARRAY_TYPE_CLASS);
classCache.add(arrayDescriptor);
return arrayDescriptor;
}
case ID_CC_ARRAY_LIST:
{
return ClassDescriptors.CC_ARRAY_LIST;
}
case ID_CC_LINKED_LIST:
{
return ClassDescriptors.CC_LINKED_LIST;
}
case ID_CC_HASH_SET:
{
return ClassDescriptors.CC_HASH_SET;
}
case ID_CC_LINKED_HASH_SET:
{
return ClassDescriptors.CC_LINKED_HASH_SET;
}
case ID_CC_TREE_SET:
{
return ClassDescriptors.CC_TREE_SET;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return ClassDescriptors.CC_IDENTITY_HASH_MAP;
}
case ID_CC_HASH_MAP:
{
return ClassDescriptors.CC_HASH_MAP;
}
case ID_CC_HASHTABLE:
{
return ClassDescriptors.CC_HASHTABLE;
}
case ID_CC_LINKED_HASH_MAP:
{
return ClassDescriptors.CC_LINKED_HASH_MAP;
}
case ID_CC_TREE_MAP:
{
return ClassDescriptors.CC_TREE_MAP;
}
case ID_CC_ENUM_SET:
{
return ClassDescriptors.CC_ENUM_SET;
}
case ID_CC_ENUM_MAP:
{
return ClassDescriptors.CC_ENUM_MAP;
}
case ID_ABSTRACT_COLLECTION:
{
return ClassDescriptors.ABSTRACT_COLLECTION;
}
case ID_ABSTRACT_LIST:
{
return ClassDescriptors.ABSTRACT_LIST;
}
case ID_ABSTRACT_QUEUE:
{
return ClassDescriptors.ABSTRACT_QUEUE;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return ClassDescriptors.ABSTRACT_SEQUENTIAL_LIST;
}
case ID_ABSTRACT_SET:
{
return ClassDescriptors.ABSTRACT_SET;
}
case ID_CC_CONCURRENT_HASH_MAP:
{
return ClassDescriptors.CONCURRENT_HASH_MAP;
}
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
{
return ClassDescriptors.COPY_ON_WRITE_ARRAY_LIST;
}
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
return ClassDescriptors.COPY_ON_WRITE_ARRAY_SET;
}
case ID_CC_VECTOR:
{
return ClassDescriptors.VECTOR;
}
case ID_CC_STACK:
{
return ClassDescriptors.STACK;
}
case ID_CC_ARRAY_DEQUE:
{
return ClassDescriptors.ARRAY_DEQUE;
}
case ID_CC_NCOPIES:
{
return ClassDescriptors.NCOPIES;
}
case ID_SINGLETON_MAP_OBJECT:
{
return ClassDescriptors.SINGLETON_MAP;
}
case ID_SINGLETON_SET_OBJECT:
{
return ClassDescriptors.SINGLETON_SET;
}
case ID_SINGLETON_LIST_OBJECT:
{
return ClassDescriptors.SINGLETON_LIST;
}
case ID_EMPTY_MAP_OBJECT:
{
return ClassDescriptors.EMPTY_MAP;
}
case ID_EMPTY_SET_OBJECT:
{
return ClassDescriptors.EMPTY_SET;
}
case ID_EMPTY_LIST_OBJECT:
{
return ClassDescriptors.EMPTY_LIST;
}
case ID_REVERSE_ORDER_OBJECT:
{
return ClassDescriptors.REVERSE_ORDER;
}
case ID_REVERSE_ORDER2_OBJECT:
{
return ClassDescriptors.REVERSE_ORDER2;
}
case ID_PAIR:
{
return ClassDescriptors.PAIR;
}
case ID_STRING_CLASS:
{
return ClassDescriptors.STRING_DESCRIPTOR;
}
case ID_OBJECT_CLASS:
{
return ClassDescriptors.OBJECT_DESCRIPTOR;
}
case ID_CLASS_CLASS:
{
return ClassDescriptors.CLASS_DESCRIPTOR;
}
case ID_ENUM_CLASS:
{
return ClassDescriptors.ENUM_DESCRIPTOR;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return ClassDescriptors.BOOLEAN_ARRAY;
}
case ID_BYTE_ARRAY_CLASS:
{
return ClassDescriptors.BYTE_ARRAY;
}
case ID_SHORT_ARRAY_CLASS:
{
return ClassDescriptors.SHORT_ARRAY;
}
case ID_INT_ARRAY_CLASS:
{
return ClassDescriptors.INT_ARRAY;
}
case ID_LONG_ARRAY_CLASS:
{
return ClassDescriptors.LONG_ARRAY;
}
case ID_CHAR_ARRAY_CLASS:
{
return ClassDescriptors.CHAR_ARRAY;
}
case ID_FLOAT_ARRAY_CLASS:
{
return ClassDescriptors.FLOAT_ARRAY;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return ClassDescriptors.DOUBLE_ARRAY;
}
case ID_PRIM_BOOLEAN:
{
return ClassDescriptors.BOOLEAN;
}
case ID_PRIM_BYTE:
{
return ClassDescriptors.BYTE;
}
case ID_PRIM_CHAR:
{
return ClassDescriptors.CHAR;
}
case ID_PRIM_DOUBLE:
{
return ClassDescriptors.DOUBLE;
}
case ID_PRIM_FLOAT:
{
return ClassDescriptors.FLOAT;
}
case ID_PRIM_INT:
{
return ClassDescriptors.INT;
}
case ID_PRIM_LONG:
{
return ClassDescriptors.LONG;
}
case ID_PRIM_SHORT:
{
return ClassDescriptors.SHORT;
}
case ID_VOID:
{
return ClassDescriptors.VOID;
}
case ID_BOOLEAN_CLASS:
{
return ClassDescriptors.BOOLEAN_OBJ;
}
case ID_BYTE_CLASS:
{
return ClassDescriptors.BYTE_OBJ;
}
case ID_SHORT_CLASS:
{
return ClassDescriptors.SHORT_OBJ;
}
case ID_INTEGER_CLASS:
{
return ClassDescriptors.INTEGER_OBJ;
}
case ID_LONG_CLASS:
{
return ClassDescriptors.LONG_OBJ;
}
case ID_CHARACTER_CLASS:
{
return ClassDescriptors.CHARACTER_OBJ;
}
case ID_FLOAT_CLASS:
{
return ClassDescriptors.FLOAT_OBJ;
}
case ID_DOUBLE_CLASS:
{
return ClassDescriptors.DOUBLE_OBJ;
}
case ID_VOID_CLASS:
{
return ClassDescriptors.VOID_OBJ;
}
default :
{
throw new InvalidClassException(""String_Node_Str"" + classType);
}
}
}","ClassDescriptor doReadClassDescriptor(final int classType) throws IOException, ClassNotFoundException {
  final ArrayList<ClassDescriptor> classCache=this.classCache;
switch (classType) {
case ID_REPEAT_CLASS_FAR:
{
      return classCache.get(readInt());
    }
case ID_REPEAT_CLASS_NEAR:
{
    return classCache.get((readByte() | 0xffffff00) + classCache.size());
  }
case ID_REPEAT_CLASS_NEARISH:
{
  return classCache.get((readShort() | 0xffff0000) + classCache.size());
}
case ID_PREDEFINED_ENUM_TYPE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_ENUM_TYPE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_EXTERNALIZABLE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZER_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final Externalizer externalizer=(Externalizer)readObject();
final SimpleClassDescriptor descriptor=new ExternalizerClassDescriptor(type,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PLAIN_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_PLAIN_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PROXY_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(type,ID_PROXY_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_SERIALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=classTable.readClass(this);
final SerializableClass serializableClass=registry.lookup(type);
int descType=serializableClass.hasWriteObject() ? ID_WRITE_OBJECT_CLASS : ID_SERIALIZABLE_CLASS;
final ClassDescriptor descriptor=new BasicSerializableClassDescriptor(serializableClass,doReadClassDescriptor(readUnsignedByte()),serializableClass.getFields(),descType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PLAIN_CLASS:
{
final String className=readString();
final Class<?> clazz=classResolver.resolveClass(this,className,0L);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(clazz,ID_PLAIN_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_PROXY_CLASS:
{
String[] interfaces=new String[readInt()];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readString();
}
final int idx=classCache.size();
classCache.add(null);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(classResolver.resolveProxyClass(this,interfaces),ID_PROXY_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_WRITE_OBJECT_CLASS:
case ID_SERIALIZABLE_CLASS:
{
int idx=classCache.size();
classCache.add(null);
final String className=readString();
final long uid=readLong();
final Class<?> clazz=classResolver.resolveClass(this,className,uid);
final Class<?> superClazz=clazz.getSuperclass();
final FutureSerializableClassDescriptor descriptor=new FutureSerializableClassDescriptor(clazz,classType);
classCache.set(idx,descriptor);
final int cnt=readInt();
final String[] names=new String[cnt];
final ClassDescriptor[] descriptors=new ClassDescriptor[cnt];
final boolean[] unshareds=new boolean[cnt];
for (int i=0; i < cnt; i++) {
names[i]=readUTF();
descriptors[i]=doReadClassDescriptor(readUnsignedByte());
unshareds[i]=readBoolean();
}
ClassDescriptor superDescriptor=doReadClassDescriptor(readUnsignedByte());
if (superDescriptor != null) {
final Class<?> superType=superDescriptor.getType();
if (!superType.isAssignableFrom(clazz)) {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
Class<?> cl=superClazz;
while (cl != superType) {
superDescriptor=new SerializableGapClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
 else if (superClazz != null) {
Class<?> cl=superClazz;
while (serializabilityChecker.isSerializable(cl)) {
superDescriptor=new SerializableGapClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
final SerializableClass serializableClass=registry.lookup(clazz);
final SerializableField[] fields=new SerializableField[cnt];
for (int i=0; i < cnt; i++) {
fields[i]=serializableClass.getSerializableField(names[i],descriptors[i].getType(),unshareds[i]);
}
descriptor.setResult(new BasicSerializableClassDescriptor(serializableClass,superDescriptor,fields,classType));
return descriptor;
}
case ID_EXTERNALIZABLE_CLASS:
{
final String className=readString();
final long uid=readLong();
final Class<?> clazz=classResolver.resolveClass(this,className,uid);
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(clazz,ID_EXTERNALIZABLE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_EXTERNALIZER_CLASS:
{
final String className=readString();
int idx=classCache.size();
classCache.add(null);
final Class<?> clazz=classResolver.resolveClass(this,className,0L);
final Externalizer externalizer=(Externalizer)readObject();
final SimpleClassDescriptor descriptor=new ExternalizerClassDescriptor(clazz,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_ENUM_TYPE_CLASS:
{
final SimpleClassDescriptor descriptor=new SimpleClassDescriptor(classResolver.resolveClass(this,readString(),0L),ID_ENUM_TYPE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_OBJECT_ARRAY_TYPE_CLASS:
{
final ClassDescriptor elementType=doReadClassDescriptor(readUnsignedByte());
final SimpleClassDescriptor arrayDescriptor=new SimpleClassDescriptor(Array.newInstance(elementType.getType(),0).getClass(),ID_OBJECT_ARRAY_TYPE_CLASS);
classCache.add(arrayDescriptor);
return arrayDescriptor;
}
case ID_CC_ARRAY_LIST:
{
return ClassDescriptors.CC_ARRAY_LIST;
}
case ID_CC_LINKED_LIST:
{
return ClassDescriptors.CC_LINKED_LIST;
}
case ID_CC_HASH_SET:
{
return ClassDescriptors.CC_HASH_SET;
}
case ID_CC_LINKED_HASH_SET:
{
return ClassDescriptors.CC_LINKED_HASH_SET;
}
case ID_CC_TREE_SET:
{
return ClassDescriptors.CC_TREE_SET;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return ClassDescriptors.CC_IDENTITY_HASH_MAP;
}
case ID_CC_HASH_MAP:
{
return ClassDescriptors.CC_HASH_MAP;
}
case ID_CC_HASHTABLE:
{
return ClassDescriptors.CC_HASHTABLE;
}
case ID_CC_LINKED_HASH_MAP:
{
return ClassDescriptors.CC_LINKED_HASH_MAP;
}
case ID_CC_TREE_MAP:
{
return ClassDescriptors.CC_TREE_MAP;
}
case ID_CC_ENUM_SET:
{
return ClassDescriptors.CC_ENUM_SET;
}
case ID_CC_ENUM_MAP:
{
return ClassDescriptors.CC_ENUM_MAP;
}
case ID_ABSTRACT_COLLECTION:
{
return ClassDescriptors.ABSTRACT_COLLECTION;
}
case ID_ABSTRACT_LIST:
{
return ClassDescriptors.ABSTRACT_LIST;
}
case ID_ABSTRACT_QUEUE:
{
return ClassDescriptors.ABSTRACT_QUEUE;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return ClassDescriptors.ABSTRACT_SEQUENTIAL_LIST;
}
case ID_ABSTRACT_SET:
{
return ClassDescriptors.ABSTRACT_SET;
}
case ID_CC_CONCURRENT_HASH_MAP:
{
return ClassDescriptors.CONCURRENT_HASH_MAP;
}
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
{
return ClassDescriptors.COPY_ON_WRITE_ARRAY_LIST;
}
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
return ClassDescriptors.COPY_ON_WRITE_ARRAY_SET;
}
case ID_CC_VECTOR:
{
return ClassDescriptors.VECTOR;
}
case ID_CC_STACK:
{
return ClassDescriptors.STACK;
}
case ID_CC_ARRAY_DEQUE:
{
return ClassDescriptors.ARRAY_DEQUE;
}
case ID_CC_NCOPIES:
{
return ClassDescriptors.NCOPIES;
}
case ID_SINGLETON_MAP_OBJECT:
{
return ClassDescriptors.SINGLETON_MAP;
}
case ID_SINGLETON_SET_OBJECT:
{
return ClassDescriptors.SINGLETON_SET;
}
case ID_SINGLETON_LIST_OBJECT:
{
return ClassDescriptors.SINGLETON_LIST;
}
case ID_EMPTY_MAP_OBJECT:
{
return ClassDescriptors.EMPTY_MAP;
}
case ID_EMPTY_SET_OBJECT:
{
return ClassDescriptors.EMPTY_SET;
}
case ID_EMPTY_LIST_OBJECT:
{
return ClassDescriptors.EMPTY_LIST;
}
case ID_REVERSE_ORDER_OBJECT:
{
return ClassDescriptors.REVERSE_ORDER;
}
case ID_REVERSE_ORDER2_OBJECT:
{
return ClassDescriptors.REVERSE_ORDER2;
}
case ID_PAIR:
{
return ClassDescriptors.PAIR;
}
case ID_STRING_CLASS:
{
return ClassDescriptors.STRING_DESCRIPTOR;
}
case ID_OBJECT_CLASS:
{
return ClassDescriptors.OBJECT_DESCRIPTOR;
}
case ID_CLASS_CLASS:
{
return ClassDescriptors.CLASS_DESCRIPTOR;
}
case ID_ENUM_CLASS:
{
return ClassDescriptors.ENUM_DESCRIPTOR;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return ClassDescriptors.BOOLEAN_ARRAY;
}
case ID_BYTE_ARRAY_CLASS:
{
return ClassDescriptors.BYTE_ARRAY;
}
case ID_SHORT_ARRAY_CLASS:
{
return ClassDescriptors.SHORT_ARRAY;
}
case ID_INT_ARRAY_CLASS:
{
return ClassDescriptors.INT_ARRAY;
}
case ID_LONG_ARRAY_CLASS:
{
return ClassDescriptors.LONG_ARRAY;
}
case ID_CHAR_ARRAY_CLASS:
{
return ClassDescriptors.CHAR_ARRAY;
}
case ID_FLOAT_ARRAY_CLASS:
{
return ClassDescriptors.FLOAT_ARRAY;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return ClassDescriptors.DOUBLE_ARRAY;
}
case ID_PRIM_BOOLEAN:
{
return ClassDescriptors.BOOLEAN;
}
case ID_PRIM_BYTE:
{
return ClassDescriptors.BYTE;
}
case ID_PRIM_CHAR:
{
return ClassDescriptors.CHAR;
}
case ID_PRIM_DOUBLE:
{
return ClassDescriptors.DOUBLE;
}
case ID_PRIM_FLOAT:
{
return ClassDescriptors.FLOAT;
}
case ID_PRIM_INT:
{
return ClassDescriptors.INT;
}
case ID_PRIM_LONG:
{
return ClassDescriptors.LONG;
}
case ID_PRIM_SHORT:
{
return ClassDescriptors.SHORT;
}
case ID_VOID:
{
return ClassDescriptors.VOID;
}
case ID_BOOLEAN_CLASS:
{
return ClassDescriptors.BOOLEAN_OBJ;
}
case ID_BYTE_CLASS:
{
return ClassDescriptors.BYTE_OBJ;
}
case ID_SHORT_CLASS:
{
return ClassDescriptors.SHORT_OBJ;
}
case ID_INTEGER_CLASS:
{
return ClassDescriptors.INTEGER_OBJ;
}
case ID_LONG_CLASS:
{
return ClassDescriptors.LONG_OBJ;
}
case ID_CHARACTER_CLASS:
{
return ClassDescriptors.CHARACTER_OBJ;
}
case ID_FLOAT_CLASS:
{
return ClassDescriptors.FLOAT_OBJ;
}
case ID_DOUBLE_CLASS:
{
return ClassDescriptors.DOUBLE_OBJ;
}
case ID_VOID_CLASS:
{
return ClassDescriptors.VOID_OBJ;
}
default :
{
throw new InvalidClassException(""String_Node_Str"" + classType);
}
}
}"
42955,"@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
return objectTable.readObject(this);
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return IdentityHashMap.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_ENUM_SET_PROXY:
{
return enumSetProxyClass;
}
case ID_CC_ENUM_SET:
{
return EnumSet.class;
}
case ID_CC_ENUM_MAP:
{
return EnumMap.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_CC_CONCURRENT_HASH_MAP:
{
return ConcurrentHashMap.class;
}
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
{
return CopyOnWriteArrayList.class;
}
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
return CopyOnWriteArraySet.class;
}
case ID_CC_VECTOR:
{
return Vector.class;
}
case ID_CC_STACK:
{
return Stack.class;
}
case ID_CC_NCOPIES:
{
return nCopiesClass;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_REVERSE_ORDER2_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.reverseOrder((Comparator<?>)doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_REVERSE_ORDER_OBJECT:
{
return Collections.reverseOrder();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,-1,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,-1,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,-1,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,-1,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
int idx=instanceCache.size();
instanceCache.add(null);
Comparator comp=(Comparator)doReadNestedObject(false,""String_Node_Str"");
return readCollectionData(unshared,idx,len,new TreeSet(comp));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,-1,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,-1,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,-1,len,new Stack());
}
case ID_CC_ARRAY_DEQUE:
{
return readCollectionData(unshared,-1,len,new ArrayDeque(len));
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,-1,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,-1,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,-1,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,-1,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
int idx=instanceCache.size();
instanceCache.add(null);
Comparator comp=(Comparator)doReadNestedObject(false,""String_Node_Str"");
return readMapData(unshared,idx,len,new TreeMap(comp));
}
case ID_CC_ENUM_MAP:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,-1,len,new EnumMap(elementType));
}
case ID_CC_NCOPIES:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.nCopies(len,doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_PAIR:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Pair.create(doReadNestedObject(unshared,""String_Node_Str""),doReadNestedObject(unshared,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}","@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
return objectTable.readObject(this);
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return IdentityHashMap.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_ENUM_SET_PROXY:
{
return enumSetProxyClass;
}
case ID_CC_ENUM_SET:
{
return EnumSet.class;
}
case ID_CC_ENUM_MAP:
{
return EnumMap.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_CC_CONCURRENT_HASH_MAP:
{
return ConcurrentHashMap.class;
}
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
{
return CopyOnWriteArrayList.class;
}
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
return CopyOnWriteArraySet.class;
}
case ID_CC_VECTOR:
{
return Vector.class;
}
case ID_CC_STACK:
{
return Stack.class;
}
case ID_CC_NCOPIES:
{
return nCopiesClass;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_REVERSE_ORDER2_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.reverseOrder((Comparator<?>)doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_REVERSE_ORDER_OBJECT:
{
return Collections.reverseOrder();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,-1,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,-1,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,-1,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,-1,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
int idx=instanceCache.size();
instanceCache.add(null);
Comparator comp=(Comparator)doReadNestedObject(false,""String_Node_Str"");
return readCollectionData(unshared,idx,len,new TreeSet(comp));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,-1,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,-1,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,-1,len,new Stack());
}
case ID_CC_ARRAY_DEQUE:
{
return readCollectionData(unshared,-1,len,new ArrayDeque(len));
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,-1,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,-1,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,-1,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,-1,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
int idx=instanceCache.size();
instanceCache.add(null);
Comparator comp=(Comparator)doReadNestedObject(false,""String_Node_Str"");
return readMapData(unshared,idx,len,new TreeMap(comp));
}
case ID_CC_ENUM_MAP:
{
int idx=instanceCache.size();
instanceCache.add(null);
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,idx,len,new EnumMap(elementType));
}
case ID_CC_NCOPIES:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.nCopies(len,doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_PAIR:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Pair.create(doReadNestedObject(unshared,""String_Node_Str""),doReadNestedObject(unshared,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}"
42956,"@DataProvider(name=""String_Node_Str"") @SuppressWarnings({""String_Node_Str""}) public static Object[][] parameters(){
  final MarshallerFactory riverMarshallerFactory=Marshalling.getProvidedMarshallerFactory(""String_Node_Str"");
  final TestMarshallerProvider riverTestMarshallerProviderV2=new MarshallerFactoryTestMarshallerProvider(riverMarshallerFactory,2);
  final TestUnmarshallerProvider riverTestUnmarshallerProviderV2=new MarshallerFactoryTestUnmarshallerProvider(riverMarshallerFactory,2);
  final TestMarshallerProvider riverTestMarshallerProviderV3=new MarshallerFactoryTestMarshallerProvider(riverMarshallerFactory,3);
  final TestUnmarshallerProvider riverTestUnmarshallerProviderV3=new MarshallerFactoryTestUnmarshallerProvider(riverMarshallerFactory,3);
  final MarshallerFactory serialMarshallerFactory=Marshalling.getProvidedMarshallerFactory(""String_Node_Str"");
  final TestMarshallerProvider serialTestMarshallerProvider=new MarshallerFactoryTestMarshallerProvider(serialMarshallerFactory);
  final TestUnmarshallerProvider serialTestUnmarshallerProvider=new MarshallerFactoryTestUnmarshallerProvider(serialMarshallerFactory);
  final TestMarshallerProvider oosTestMarshallerProvider=new ObjectOutputStreamTestMarshallerProvider();
  final TestUnmarshallerProvider oisTestUnmarshallerProvider=new ObjectInputStreamTestUnmarshallerProvider();
  @SuppressWarnings(""String_Node_Str"") final List<Pair<TestMarshallerProvider,TestUnmarshallerProvider>> marshallerProviderPairs=Arrays.asList(create(riverTestMarshallerProviderV2,riverTestUnmarshallerProviderV2),create(riverTestMarshallerProviderV2,riverTestUnmarshallerProviderV3),create(riverTestMarshallerProviderV3,riverTestUnmarshallerProviderV3),create(serialTestMarshallerProvider,serialTestUnmarshallerProvider),create(serialTestMarshallerProvider,oisTestUnmarshallerProvider),create(oosTestMarshallerProvider,serialTestUnmarshallerProvider),null);
  final Collection<Object[]> c=new ArrayList<Object[]>();
  final MarshallingConfiguration configuration=new MarshallingConfiguration();
  for (  Pair<TestMarshallerProvider,TestUnmarshallerProvider> pair : marshallerProviderPairs) {
    if (pair == null)     continue;
    c.add(new Object[]{pair.getA(),pair.getB(),configuration.clone()});
  }
  return c.toArray(new Object[c.size()][]);
}","@DataProvider(name=""String_Node_Str"") @SuppressWarnings({""String_Node_Str""}) public static Object[][] parameters(){
  final MarshallerFactory riverMarshallerFactory=Marshalling.getProvidedMarshallerFactory(""String_Node_Str"");
  final TestMarshallerProvider riverTestMarshallerProviderV2=new MarshallerFactoryTestMarshallerProvider(riverMarshallerFactory,2);
  final TestUnmarshallerProvider riverTestUnmarshallerProviderV2=new MarshallerFactoryTestUnmarshallerProvider(riverMarshallerFactory,2);
  final TestMarshallerProvider riverTestMarshallerProviderV3=new MarshallerFactoryTestMarshallerProvider(riverMarshallerFactory,3);
  final TestUnmarshallerProvider riverTestUnmarshallerProviderV3=new MarshallerFactoryTestUnmarshallerProvider(riverMarshallerFactory,3);
  final MarshallerFactory serialMarshallerFactory=Marshalling.getProvidedMarshallerFactory(""String_Node_Str"");
  final TestMarshallerProvider serialTestMarshallerProvider=new MarshallerFactoryTestMarshallerProvider(serialMarshallerFactory);
  final TestUnmarshallerProvider serialTestUnmarshallerProvider=new MarshallerFactoryTestUnmarshallerProvider(serialMarshallerFactory);
  final TestMarshallerProvider oosTestMarshallerProvider=new ObjectOutputStreamTestMarshallerProvider();
  final TestUnmarshallerProvider oisTestUnmarshallerProvider=new ObjectInputStreamTestUnmarshallerProvider();
  @SuppressWarnings(""String_Node_Str"") final List<Pair<TestMarshallerProvider,TestUnmarshallerProvider>> marshallerProviderPairs=Arrays.asList(create(riverTestMarshallerProviderV2,riverTestUnmarshallerProviderV2),create(riverTestMarshallerProviderV2,riverTestUnmarshallerProviderV3),create(riverTestMarshallerProviderV3,riverTestUnmarshallerProviderV3),create(serialTestMarshallerProvider,serialTestUnmarshallerProvider),create(serialTestMarshallerProvider,oisTestUnmarshallerProvider),create(oosTestMarshallerProvider,serialTestUnmarshallerProvider),null);
  final Collection<Object[]> c=new ArrayList<Object[]>();
  final MarshallingConfiguration configuration=new MarshallingConfiguration();
  for (  Pair<TestMarshallerProvider,TestUnmarshallerProvider> pair : marshallerProviderPairs) {
    if (pair == null)     continue;
    c.add(new Object[]{pair.getA(),pair.getB(),configuration.clone()});
  }
  configuration.setClassResolver(new AbstractClassResolver(){
    protected ClassLoader getClassLoader(){
      return SimpleMarshallerTestFactory.class.getClassLoader();
    }
    public void annotateProxyClass(    final Marshaller marshaller,    final Class<?> proxyClass) throws IOException {
      marshaller.writeObject(""String_Node_Str"");
      marshaller.writeObject(""String_Node_Str"");
    }
    public void annotateClass(    final Marshaller marshaller,    final Class<?> clazz) throws IOException {
      marshaller.writeObject(""String_Node_Str"");
      marshaller.writeObject(""String_Node_Str"");
    }
    public Class<?> resolveProxyClass(    final Unmarshaller unmarshaller,    final String[] interfaces) throws IOException, ClassNotFoundException {
      assertEquals(""String_Node_Str"",unmarshaller.readObject(String.class));
      assertEquals(""String_Node_Str"",unmarshaller.readObject(String.class));
      return super.resolveProxyClass(unmarshaller,interfaces);
    }
    public Class<?> resolveClass(    final Unmarshaller unmarshaller,    final String name,    final long serialVersionUID) throws IOException, ClassNotFoundException {
      assertEquals(""String_Node_Str"",unmarshaller.readObject(String.class));
      assertEquals(""String_Node_Str"",unmarshaller.readObject(String.class));
      return super.resolveClass(unmarshaller,name,serialVersionUID);
    }
    public String toString(){
      return ""String_Node_Str"";
    }
  }
);
  for (  Pair<TestMarshallerProvider,TestUnmarshallerProvider> pair : marshallerProviderPairs) {
    if (pair == null)     continue;
    c.add(new Object[]{pair.getA(),pair.getB(),configuration.clone()});
  }
  return c.toArray(new Object[c.size()][]);
}"
42957,"protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
instanceCache.put(obj,instanceSeq++);
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
instanceCache.put(obj,instanceSeq++);
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}","protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
instanceCache.put(obj,instanceSeq++);
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
instanceCache.put(obj,instanceSeq++);
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
instanceCache.put(obj,instanceSeq++);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}"
42958,"StepObjectOutput(final Queue<Step> steps) throws IOException {
  super(SerializingCloner.this.bufferSize);
  this.steps=steps;
  start(byteOutput);
}","StepObjectOutput(final Queue<Step> steps) throws IOException {
  super(SerializingCloner.this.bufferSize);
  this.steps=steps;
  super.start(byteOutput);
}"
42959,"public void clearInstanceCache() throws IOException {
}","public void clearInstanceCache() throws IOException {
  throw new UnsupportedOperationException();
}"
42960,"public void finish() throws IOException {
  super.finish();
}","public void finish() throws IOException {
  throw new UnsupportedOperationException();
}"
42961,"protected Object doReadObject(final boolean unshared) throws ClassNotFoundException, IOException {
  finish();
  Step step;
  do {
    step=steps.poll();
  }
 while (step instanceof ByteDataStep);
  if (step == null) {
    throw new EOFException();
  }
  @SuppressWarnings(""String_Node_Str"") final Object clone=SerializingCloner.this.clone(((CloneStep)step).getOrig());
  step=steps.peek();
  if (step instanceof ByteDataStep) {
    start(Marshalling.createByteInput(new ByteArrayInputStream(((ByteDataStep)steps.poll()).getBytes())));
  }
  return clone;
}","protected Object doReadObject(final boolean unshared) throws ClassNotFoundException, IOException {
  finish();
  Step step;
  do {
    step=steps.poll();
  }
 while (step instanceof ByteDataStep);
  if (step == null) {
    throw new EOFException();
  }
  @SuppressWarnings(""String_Node_Str"") final Object clone=SerializingCloner.this.clone(((CloneStep)step).getOrig());
  step=steps.peek();
  if (step instanceof ByteDataStep) {
    super.start(Marshalling.createByteInput(new ByteArrayInputStream(((ByteDataStep)steps.poll()).getBytes())));
  }
  return clone;
}"
42962,"public void clearClassCache() throws IOException {
}","public void clearClassCache() throws IOException {
  throw new UnsupportedOperationException();
}"
42963,"StepObjectInput(final Queue<Step> steps) throws IOException {
  super(bufferSize);
  this.steps=steps;
  if (steps.peek() instanceof ByteDataStep) {
    final ByteDataStep step=(ByteDataStep)steps.poll();
    start(Marshalling.createByteInput(new ByteArrayInputStream(step.getBytes())));
  }
}","StepObjectInput(final Queue<Step> steps) throws IOException {
  super(bufferSize);
  this.steps=steps;
  if (steps.peek() instanceof ByteDataStep) {
    final ByteDataStep step=(ByteDataStep)steps.poll();
    super.start(Marshalling.createByteInput(new ByteArrayInputStream(step.getBytes())));
  }
}"
42964,"public void start(final ByteInput byteInput) throws IOException {
  super.start(byteInput);
}","public void start(final ByteInput byteInput) throws IOException {
  throw new UnsupportedOperationException();
}"
42965,"private Object clone(final Object orig,final boolean replace) throws IOException, ClassNotFoundException {
  if (orig == null) {
    return null;
  }
  final IdentityHashMap<Object,Object> clones=this.clones;
  Object cached=clones.get(orig);
  if (cached != null) {
    return cached;
  }
  final ClassCloner classCloner=this.classCloner;
  if (orig instanceof Class) {
    final Class<?> classObj=(Class<?>)orig;
    final Class<?> clonedClass=Proxy.isProxyClass(classObj) ? classCloner.cloneProxy(classObj) : classCloner.clone(classObj);
    clones.put(orig,clonedClass);
    return clonedClass;
  }
  if ((cached=delegate.clone(orig,this,classCloner)) != null) {
    clones.put(orig,cached);
    return cached;
  }
  final Class<? extends Object> objClass=orig.getClass();
  if (orig instanceof Enum) {
    @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneClass=((Class<?>)clone(objClass)).asSubclass(Enum.class);
    if (cloneClass == objClass) {
      return orig;
    }
 else {
      @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneEnumClass;
      final Class<?> enumClass=((Enum<?>)orig).getDeclaringClass();
      if (enumClass == objClass) {
        cloneEnumClass=cloneClass;
      }
 else {
        cloneEnumClass=((Class<?>)clone(enumClass)).asSubclass(Enum.class);
      }
      return Enum.valueOf(cloneEnumClass,((Enum<?>)orig).name());
    }
  }
  final Class<?> clonedClass=(Class<?>)clone(objClass);
  if (Proxy.isProxyClass(objClass)) {
    return Proxy.newProxyInstance(clonedClass.getClassLoader(),clonedClass.getInterfaces(),(InvocationHandler)clone(getInvocationHandler(orig)));
  }
  if (UNCLONED.contains(objClass)) {
    return orig;
  }
  if (objClass.isArray()) {
    Object simpleClone=simpleClone(orig,objClass);
    if (simpleClone != null)     return simpleClone;
    final Object[] origArray=(Object[])orig;
    final int len=origArray.length;
    final boolean sameClass=objClass == clonedClass;
    if (sameClass && len == 0) {
      clones.put(orig,orig);
      return orig;
    }
    if (UNCLONED.contains(objClass.getComponentType())) {
      final Object[] clone=origArray.clone();
      clones.put(orig,clone);
      return clone;
    }
    final Object[] clone;
    if (sameClass) {
      clone=origArray.clone();
    }
 else {
      clone=(Object[])Array.newInstance(clonedClass.getComponentType(),len);
    }
    clones.put(orig,clone);
    for (int i=0; i < len; i++) {
      clone[i]=clone(origArray[i]);
    }
    return clone;
  }
  final SerializableClass info=registry.lookup(objClass);
  if (replace) {
    Object replaced=orig;
    if (info.hasWriteReplace()) {
      replaced=info.callWriteReplace(replaced);
    }
    replaced=objectResolver.writeReplace(replaced);
    if (replaced != orig) {
      Object clone=clone(replaced,false);
      clones.put(orig,clone);
      return clone;
    }
  }
  final Object clone;
  if (orig instanceof Externalizable) {
    final Externalizable externalizable=(Externalizable)orig;
    clone=externalizedCreator.create((Class<?>)clone(objClass));
    clones.put(orig,clone);
    final Queue<Step> steps=new ArrayDeque<Step>();
    externalizable.writeExternal(new StepObjectOutput(steps));
    ((Externalizable)clone).readExternal(new StepObjectInput(steps));
  }
 else   if (serializabilityChecker.isSerializable(objClass)) {
    clone=serializedCreator.create((Class<?>)clone(objClass));
    final Class<?> cloneClass=clone.getClass();
    if (!(serializabilityChecker.isSerializable(cloneClass))) {
      throw new NotSerializableException(cloneClass.getName());
    }
    clones.put(orig,clone);
    initSerializableClone(orig,info,clone,cloneClass);
  }
 else {
    throw new NotSerializableException(objClass.getName());
  }
  Object replaced=clone;
  if (info.hasReadResolve()) {
    replaced=info.callReadResolve(replaced);
  }
  replaced=objectResolver.readResolve(replaced);
  if (replaced != clone)   clones.put(orig,replaced);
  return replaced;
}","private Object clone(final Object orig,final boolean replace) throws IOException, ClassNotFoundException {
  if (orig == null) {
    return null;
  }
  final IdentityHashMap<Object,Object> clones=this.clones;
  Object cached=clones.get(orig);
  if (cached != null) {
    return cached;
  }
  final ClassCloner classCloner=this.classCloner;
  if (orig instanceof Class) {
    final Class<?> classObj=(Class<?>)orig;
    final Class<?> clonedClass=Proxy.isProxyClass(classObj) ? classCloner.cloneProxy(classObj) : classCloner.clone(classObj);
    clones.put(orig,clonedClass);
    return clonedClass;
  }
  if ((cached=delegate.clone(orig,this,classCloner)) != null) {
    clones.put(orig,cached);
    return cached;
  }
  final Class<? extends Object> objClass=orig.getClass();
  if (orig instanceof Enum) {
    @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneClass=((Class<?>)clone(objClass)).asSubclass(Enum.class);
    if (cloneClass == objClass) {
      return orig;
    }
 else {
      @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneEnumClass;
      final Class<?> enumClass=((Enum<?>)orig).getDeclaringClass();
      if (enumClass == objClass) {
        cloneEnumClass=cloneClass;
      }
 else {
        cloneEnumClass=((Class<?>)clone(enumClass)).asSubclass(Enum.class);
      }
      return Enum.valueOf(cloneEnumClass,((Enum<?>)orig).name());
    }
  }
  final Class<?> clonedClass=(Class<?>)clone(objClass);
  if (Proxy.isProxyClass(objClass)) {
    return Proxy.newProxyInstance(clonedClass.getClassLoader(),clonedClass.getInterfaces(),(InvocationHandler)clone(getInvocationHandler(orig)));
  }
  if (UNCLONED.contains(objClass)) {
    return orig;
  }
  if (objClass.isArray()) {
    Object simpleClone=simpleClone(orig,objClass);
    if (simpleClone != null)     return simpleClone;
    final Object[] origArray=(Object[])orig;
    final int len=origArray.length;
    final boolean sameClass=objClass == clonedClass;
    if (sameClass && len == 0) {
      clones.put(orig,orig);
      return orig;
    }
    if (UNCLONED.contains(objClass.getComponentType())) {
      final Object[] clone=origArray.clone();
      clones.put(orig,clone);
      return clone;
    }
    final Object[] clone;
    if (sameClass) {
      clone=origArray.clone();
    }
 else {
      clone=(Object[])Array.newInstance(clonedClass.getComponentType(),len);
    }
    clones.put(orig,clone);
    for (int i=0; i < len; i++) {
      clone[i]=clone(origArray[i]);
    }
    return clone;
  }
  final SerializableClass info=registry.lookup(objClass);
  if (replace) {
    Object replaced=orig;
    if (info.hasWriteReplace()) {
      replaced=info.callWriteReplace(replaced);
    }
    replaced=objectResolver.writeReplace(replaced);
    if (replaced != orig) {
      Object clone=clone(replaced,false);
      clones.put(orig,clone);
      return clone;
    }
  }
  final Object clone;
  if (orig instanceof Externalizable) {
    final Externalizable externalizable=(Externalizable)orig;
    clone=externalizedCreator.create((Class<?>)clone(objClass));
    clones.put(orig,clone);
    final Queue<Step> steps=new ArrayDeque<Step>();
    final StepObjectOutput soo=new StepObjectOutput(steps);
    externalizable.writeExternal(soo);
    soo.doFinish();
    ((Externalizable)clone).readExternal(new StepObjectInput(steps));
  }
 else   if (serializabilityChecker.isSerializable(objClass)) {
    clone=serializedCreator.create((Class<?>)clone(objClass));
    final Class<?> cloneClass=clone.getClass();
    if (!(serializabilityChecker.isSerializable(cloneClass))) {
      throw new NotSerializableException(cloneClass.getName());
    }
    clones.put(orig,clone);
    initSerializableClone(orig,info,clone,cloneClass);
  }
 else {
    throw new NotSerializableException(objClass.getName());
  }
  Object replaced=clone;
  if (info.hasReadResolve()) {
    replaced=info.callReadResolve(replaced);
  }
  replaced=objectResolver.readResolve(replaced);
  if (replaced != clone)   clones.put(orig,replaced);
  return replaced;
}"
42966,"public void testEquals() throws Throwable {
  final ObjectCloner objectCloner=ObjectCloners.getSerializingObjectClonerFactory().createCloner(new ClonerConfiguration());
  final Object[] objects={Pair.create(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"",Integer.valueOf(2),Boolean.TRUE,""String_Node_Str""),new DateFieldType(new Date(),true)};
  for (  Object orig : objects) {
    final Object clone=objectCloner.clone(orig);
    assertEquals(clone,orig);
  }
}","public void testEquals() throws Throwable {
  final ObjectCloner objectCloner=ObjectCloners.getSerializingObjectClonerFactory().createCloner(new ClonerConfiguration());
  final Object[] objects={Pair.create(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"",Integer.valueOf(2),Boolean.TRUE,""String_Node_Str""),new DateFieldType(new Date(),true),new ExtTest(12345)};
  for (  Object orig : objects) {
    final Object clone=objectCloner.clone(orig);
    assertEquals(clone,orig);
  }
}"
42967,"/** 
 * {@inheritDoc} 
 */
public void annotateClass(final Marshaller marshaller,final Class<?> clazz) throws IOException {
  final Module module=Module.forClass(clazz);
  if (module == null) {
    throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
  }
  final ModuleIdentifier identifier=module.getIdentifier();
  marshaller.writeObject(identifier.getName());
  marshaller.writeObject(identifier.getSlot());
}","/** 
 * {@inheritDoc} 
 */
public void annotateClass(final Marshaller marshaller,final Class<?> clazz) throws IOException {
  final Module module=Module.forClass(clazz);
  if (module == null) {
    marshaller.writeObject(null);
  }
 else {
    final ModuleIdentifier identifier=module.getIdentifier();
    marshaller.writeObject(identifier.getName());
    marshaller.writeObject(identifier.getSlot());
  }
}"
42968,"private static SerializableClassDescriptor getSerializableClassDescriptor(final Class<?> subject){
  return AccessController.doPrivileged(new PrivilegedAction<SerializableClassDescriptor>(){
    public SerializableClassDescriptor run(){
      final SerializableClassRegistry reg=SerializableClassRegistry.getInstance();
      final SerializableClass serializableClass=reg.lookup(subject);
      final SerializableField[] fields=serializableClass.getFields();
      final boolean hasWriteObject=serializableClass.hasWriteObject();
      try {
        return new BasicSerializableClassDescriptor(serializableClass,null,fields,Externalizable.class.isAssignableFrom(subject) ? Protocol.ID_EXTERNALIZABLE_CLASS : hasWriteObject ? Protocol.ID_WRITE_OBJECT_CLASS : Protocol.ID_SERIALIZABLE_CLASS);
      }
 catch (      ClassNotFoundException e) {
        throw new NoClassDefFoundError(e.getMessage());
      }
    }
  }
);
}","private static SerializableClassDescriptor getSerializableClassDescriptor(final Class<?> subject,final ClassDescriptor superDescriptor){
  return AccessController.doPrivileged(new PrivilegedAction<SerializableClassDescriptor>(){
    public SerializableClassDescriptor run(){
      final SerializableClassRegistry reg=SerializableClassRegistry.getInstance();
      final SerializableClass serializableClass=reg.lookup(subject);
      final SerializableField[] fields=serializableClass.getFields();
      final boolean hasWriteObject=serializableClass.hasWriteObject();
      try {
        return new BasicSerializableClassDescriptor(serializableClass,superDescriptor,fields,Externalizable.class.isAssignableFrom(subject) ? Protocol.ID_EXTERNALIZABLE_CLASS : hasWriteObject ? Protocol.ID_WRITE_OBJECT_CLASS : Protocol.ID_SERIALIZABLE_CLASS);
      }
 catch (      ClassNotFoundException e) {
        throw new NoClassDefFoundError(e.getMessage());
      }
    }
  }
);
}"
42969,"public SerializableClassDescriptor run(){
  final SerializableClassRegistry reg=SerializableClassRegistry.getInstance();
  final SerializableClass serializableClass=reg.lookup(subject);
  final SerializableField[] fields=serializableClass.getFields();
  final boolean hasWriteObject=serializableClass.hasWriteObject();
  try {
    return new BasicSerializableClassDescriptor(serializableClass,null,fields,Externalizable.class.isAssignableFrom(subject) ? Protocol.ID_EXTERNALIZABLE_CLASS : hasWriteObject ? Protocol.ID_WRITE_OBJECT_CLASS : Protocol.ID_SERIALIZABLE_CLASS);
  }
 catch (  ClassNotFoundException e) {
    throw new NoClassDefFoundError(e.getMessage());
  }
}","public SerializableClassDescriptor run(){
  final SerializableClassRegistry reg=SerializableClassRegistry.getInstance();
  final SerializableClass serializableClass=reg.lookup(subject);
  final SerializableField[] fields=serializableClass.getFields();
  final boolean hasWriteObject=serializableClass.hasWriteObject();
  try {
    return new BasicSerializableClassDescriptor(serializableClass,superDescriptor,fields,Externalizable.class.isAssignableFrom(subject) ? Protocol.ID_EXTERNALIZABLE_CLASS : hasWriteObject ? Protocol.ID_WRITE_OBJECT_CLASS : Protocol.ID_SERIALIZABLE_CLASS);
  }
 catch (  ClassNotFoundException e) {
    throw new NoClassDefFoundError(e.getMessage());
  }
}"
42970,"public void run() throws Throwable {
  final MarshallerFactory factory=new RiverMarshallerFactory();
  final MarshallingConfiguration configuration=new MarshallingConfiguration();
  configuration.setCreator(new SunReflectiveCreator());
  configure(configuration);
  final Marshaller marshaller=factory.createMarshaller(configuration);
  final ByteArrayOutputStream baos=new ByteArrayOutputStream(10240);
  marshaller.start(Marshalling.createByteOutput(baos));
  runWrite(marshaller);
  marshaller.finish();
  final byte[] bytes=baos.toByteArray();
  final Unmarshaller unmarshaller=factory.createUnmarshaller(configuration);
  unmarshaller.start(Marshalling.createByteInput(new ByteArrayInputStream(bytes)));
  runRead(unmarshaller);
  unmarshaller.finish();
}","public void run() throws Throwable {
  final MarshallerFactory factory=new RiverMarshallerFactory();
  final MarshallingConfiguration configuration=new MarshallingConfiguration();
  configuration.setSerializedCreator(new SunReflectiveCreator());
  configuration.setExternalizerCreator(new ReflectiveCreator());
  configure(configuration);
  final Marshaller marshaller=factory.createMarshaller(configuration);
  final ByteArrayOutputStream baos=new ByteArrayOutputStream(10240);
  marshaller.start(Marshalling.createByteOutput(baos));
  runWrite(marshaller);
  marshaller.finish();
  final byte[] bytes=baos.toByteArray();
  final Unmarshaller unmarshaller=factory.createUnmarshaller(configuration);
  unmarshaller.start(Marshalling.createByteInput(new ByteArrayInputStream(bytes)));
  runRead(unmarshaller);
  unmarshaller.finish();
}"
42971,"public void runWrite(final Marshaller marshaller) throws Throwable {
  marshaller.writeObject(test);
}","public void runWrite(final Marshaller marshaller) throws Throwable {
  marshaller.writeObject(test);
  marshaller.writeObject(test);
}"
42972,"public SimpleMarshallerTests(TestMarshallerProvider testMarshallerProvider,TestUnmarshallerProvider testUnmarshallerProvider,MarshallingConfiguration configuration){
  super(testMarshallerProvider,testUnmarshallerProvider,configuration);
}","/** 
 * Simple constructor for running one test at a time from an IDE.
 */
public SimpleMarshallerTests(){
  super(new MarshallerFactoryTestMarshallerProvider(new RiverMarshallerFactory(),3),new MarshallerFactoryTestUnmarshallerProvider(new RiverMarshallerFactory(),3),getOneTestMarshallingConfiguration());
}"
42973,"public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  unmarshaller.readObject();
}","public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  final LRUMap map=unmarshaller.readObject(LRUMap.class);
  assertSame(map,unmarshaller.readObject());
}"
42974,"private static void populateAllMaps(List<Object> list){
  populateAllMapSizes(list,hashMapMaker);
  populateAllMapSizes(list,concurrentHashMapMaker);
  populateAllMapSizes(list,linkedHashMapMaker);
  populateAllMapSizes(list,identityHashMapMaker);
  populateAllMapSizes(list,treeMapMaker);
  populateAllMapSizes(list,treeMapCompMaker);
}","private static void populateAllMaps(List<Object> list){
  populateAllMapSizes(list,hashMapMaker);
  populateAllMapSizes(list,concurrentHashMapMaker);
  populateAllMapSizes(list,linkedHashMapMaker);
  populateAllMapSizes(list,identityHashMapMaker);
  populateAllMapSizes(list,treeMapMaker);
  populateAllMapSizes(list,treeMapCompMaker);
  populateAllMapSizes(list,lruMapMaker);
}"
42975,"protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
instanceCache.put(obj,instanceSeq++);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}","protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        final int diff=rid - instanceSeq;
        if (diff >= -256) {
          write(ID_REPEAT_OBJECT_NEAR);
          write(diff);
        }
 else         if (diff >= -65536) {
          write(ID_REPEAT_OBJECT_NEARISH);
          writeShort(diff);
        }
 else {
          write(ID_REPEAT_OBJECT_FAR);
          writeInt(rid);
        }
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=getBasicClasses(configuredVersion).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
            write(ID_NEW_OBJECT);
            writeClassClass(classObj);
            return;
          }
default :
{
          write(cid);
          return;
        }
    }
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    write(ID_BYTE_OBJECT);
    writeByte(((Byte)obj).byteValue());
    return;
  }
case ID_BOOLEAN_CLASS:
{
  write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  return;
}
case ID_CHARACTER_CLASS:
{
write(ID_CHARACTER_OBJECT);
writeChar(((Character)obj).charValue());
return;
}
case ID_DOUBLE_CLASS:
{
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
return;
}
case ID_FLOAT_CLASS:
{
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
return;
}
case ID_INTEGER_CLASS:
{
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
return;
}
case ID_LONG_CLASS:
{
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
return;
}
case ID_SHORT_CLASS:
{
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 0x100) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 0x10000) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
shallowFlush();
UTFUtils.writeUTFBytes(byteOutput,string);
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
case ID_CC_VECTOR:
case ID_CC_STACK:
case ID_CC_ARRAY_DEQUE:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_ENUM_SET_PROXY:
{
final Enum[] elements=getEnumSetElements(obj);
final int len=elements.length;
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
writeClass(getEnumSetElementType(obj));
instanceCache.put(obj,instanceSeq++);
for (Object o : elements) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
case ID_CC_ENUM_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
switch (id) {
case ID_CC_TREE_MAP:
doWriteObject(((TreeMap)map).comparator(),false);
break;
case ID_CC_ENUM_MAP:
writeClass(getEnumMapKeyType(obj));
break;
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
case ID_REVERSE_ORDER_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_REVERSE_ORDER2_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
try {
doWriteObject(Protocol.reverseOrder2Field.get(obj),false);
}
 catch (IllegalAccessException e) {
throw new InvalidObjectException(""String_Node_Str"");
}
return;
}
case ID_CC_CONCURRENT_HASH_MAP:
case ID_CC_COPY_ON_WRITE_ARRAY_LIST:
case ID_CC_COPY_ON_WRITE_ARRAY_SET:
{
info=registry.lookup(objClass);
break;
}
case ID_PAIR:
{
instanceCache.put(obj,instanceSeq++);
write(id);
Pair<?,?> pair=(Pair<?,?>)obj;
doWriteObject(pair.getA(),unshared);
doWriteObject(pair.getB(),unshared);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_NCOPIES:
{
List<?> list=(List<?>)obj;
int size=list.size();
if (size == 0) {
write(ID_EMPTY_LIST_OBJECT);
return;
}
instanceCache.put(obj,instanceSeq++);
if (size <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(size);
}
 else if (size <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(size);
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(size);
}
write(id);
doWriteObject(list.iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
instanceCache.put(obj,instanceSeq++);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeProxyClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
instanceCache.put(obj,instanceSeq++);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (serializabilityChecker.isSerializable(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}"
42976,"public StepObjectOutput(final Queue<Step> steps) throws IOException {
  super(SerializingCloner.this.bufferSize);
  this.steps=steps;
  start(byteOutput);
}","StepObjectOutput(final Queue<Step> steps) throws IOException {
  super(SerializingCloner.this.bufferSize);
  this.steps=steps;
  start(byteOutput);
}"
42977,"protected void doWriteObject(final Object obj,final boolean unshared) throws IOException {
  final ByteArrayOutputStream baos=byteArrayOutputStream;
  if (baos.size() > 0) {
    steps.add(new ByteDataStep(baos.toByteArray()));
    baos.reset();
  }
  steps.add(new CloneStep(obj));
}","protected void doWriteObject(final Object obj,final boolean unshared) throws IOException {
  super.flush();
  final ByteArrayOutputStream baos=byteArrayOutputStream;
  if (baos.size() > 0) {
    steps.add(new ByteDataStep(baos.toByteArray()));
    baos.reset();
  }
  steps.add(new CloneStep(obj));
}"
42978,"public void flush() throws IOException {
  final ByteArrayOutputStream baos=byteArrayOutputStream;
  steps.add(new ByteDataStep(baos.toByteArray()));
  baos.reset();
}","public void flush() throws IOException {
  super.flush();
  final ByteArrayOutputStream baos=byteArrayOutputStream;
  steps.add(new ByteDataStep(baos.toByteArray()));
  baos.reset();
}"
42979,"protected Object doReadObject(final boolean unshared) throws ClassNotFoundException, IOException {
  finish();
  Step step;
  do {
    step=steps.poll();
  }
 while (step instanceof ByteDataStep);
  if (step == null) {
    throw new EOFException();
  }
  final Object clone=SerializingCloner.this.clone(((CloneStep)step).getOrig());
  step=steps.peek();
  if (step instanceof ByteDataStep) {
    start(Marshalling.createByteInput(new ByteArrayInputStream(((ByteDataStep)steps.poll()).getBytes())));
  }
  return clone;
}","protected Object doReadObject(final boolean unshared) throws ClassNotFoundException, IOException {
  finish();
  Step step;
  do {
    step=steps.poll();
  }
 while (step instanceof ByteDataStep);
  if (step == null) {
    throw new EOFException();
  }
  @SuppressWarnings(""String_Node_Str"") final Object clone=SerializingCloner.this.clone(((CloneStep)step).getOrig());
  step=steps.peek();
  if (step instanceof ByteDataStep) {
    start(Marshalling.createByteInput(new ByteArrayInputStream(((ByteDataStep)steps.poll()).getBytes())));
  }
  return clone;
}"
42980,"private void initSerializableClone(final Object orig,final SerializableClass info,final Object clone,final Class<?> cloneClass) throws IOException, ClassNotFoundException {
  final Class<?> objClass=info.getSubjectClass();
  if (!serializabilityChecker.isSerializable(cloneClass)) {
    throw new NotSerializableException(cloneClass.getName());
  }
  final SerializableClass cloneInfo=registry.lookup(cloneClass);
  final Class<?> cloneSuperClass=cloneClass.getSuperclass();
  if (cloneClass != clone(objClass)) {
    initSerializableClone(orig,info,clone,cloneSuperClass);
    if (cloneInfo.hasReadObjectNoData()) {
      cloneInfo.callReadObjectNoData(clone);
    }
    return;
  }
  final Class<?> superClass=objClass.getSuperclass();
  if (serializabilityChecker.isSerializable(superClass) || serializabilityChecker.isSerializable(cloneSuperClass)) {
    initSerializableClone(orig,registry.lookup(superClass),clone,cloneSuperClass);
  }
  if (!serializabilityChecker.isSerializable(objClass)) {
    if (cloneInfo.hasReadObjectNoData()) {
      cloneInfo.callReadObjectNoData(clone);
    }
    return;
  }
  final ClonerPutField fields=new ClonerPutField();
  fields.defineFields(info);
  if (info.hasWriteObject()) {
    final Queue<Step> steps=new ArrayDeque<Step>();
    info.callWriteObject(orig,new StepObjectOutputStream(steps,fields,orig));
    if (cloneInfo.hasReadObject()) {
      cloneInfo.callReadObject(clone,new StepObjectInputStream(steps,fields,clone,cloneInfo));
    }
 else {
      cloneFields(fields);
      storeFields(cloneInfo,clone,fields);
    }
  }
 else {
    prepareFields(orig,fields);
    cloneFields(fields);
    if (cloneInfo.hasReadObject()) {
      cloneInfo.callReadObject(clone,new StepObjectInputStream(new ArrayDeque<Step>(),fields,clone,cloneInfo));
    }
 else {
      storeFields(cloneInfo,clone,fields);
    }
  }
}","private void initSerializableClone(final Object orig,final SerializableClass info,final Object clone,final Class<?> cloneClass) throws IOException, ClassNotFoundException {
  final Class<?> objClass=info.getSubjectClass();
  if (!serializabilityChecker.isSerializable(cloneClass)) {
    throw new NotSerializableException(cloneClass.getName());
  }
  final SerializableClass cloneInfo=registry.lookup(cloneClass);
  final Class<?> cloneSuperClass=cloneClass.getSuperclass();
  if (cloneClass != clone(objClass)) {
    initSerializableClone(orig,info,clone,cloneSuperClass);
    if (cloneInfo.hasReadObjectNoData()) {
      cloneInfo.callReadObjectNoData(clone);
    }
    return;
  }
  final Class<?> superClass=objClass.getSuperclass();
  if (serializabilityChecker.isSerializable(superClass) || serializabilityChecker.isSerializable(cloneSuperClass)) {
    initSerializableClone(orig,registry.lookup(superClass),clone,cloneSuperClass);
  }
  if (!serializabilityChecker.isSerializable(objClass)) {
    if (cloneInfo.hasReadObjectNoData()) {
      cloneInfo.callReadObjectNoData(clone);
    }
    return;
  }
  final ClonerPutField fields=new ClonerPutField();
  fields.defineFields(info);
  if (info.hasWriteObject()) {
    final Queue<Step> steps=new ArrayDeque<Step>();
    final StepObjectOutputStream stepObjectOutputStream=new StepObjectOutputStream(steps,fields,orig);
    info.callWriteObject(orig,stepObjectOutputStream);
    stepObjectOutputStream.flush();
    if (cloneInfo.hasReadObject()) {
      cloneInfo.callReadObject(clone,new StepObjectInputStream(steps,fields,clone,cloneInfo));
    }
 else {
      cloneFields(fields);
      storeFields(cloneInfo,clone,fields);
    }
  }
 else {
    prepareFields(orig,fields);
    cloneFields(fields);
    if (cloneInfo.hasReadObject()) {
      cloneInfo.callReadObject(clone,new StepObjectInputStream(new ArrayDeque<Step>(),fields,clone,cloneInfo));
    }
 else {
      storeFields(cloneInfo,clone,fields);
    }
  }
}"
42981,"public StepObjectInput(final Queue<Step> steps) throws IOException {
  super(bufferSize);
  this.steps=steps;
  if (steps.peek() instanceof ByteDataStep) {
    final ByteDataStep step=(ByteDataStep)steps.poll();
    start(Marshalling.createByteInput(new ByteArrayInputStream(step.getBytes())));
  }
}","StepObjectInput(final Queue<Step> steps) throws IOException {
  super(bufferSize);
  this.steps=steps;
  if (steps.peek() instanceof ByteDataStep) {
    final ByteDataStep step=(ByteDataStep)steps.poll();
    start(Marshalling.createByteInput(new ByteArrayInputStream(step.getBytes())));
  }
}"
42982,"public void registerValidation(final ObjectInputValidation obj,final int prio) throws NotActiveException, InvalidObjectException {
}","public void registerValidation(final ObjectInputValidation obj,final int priority) throws NotActiveException, InvalidObjectException {
}"
42983,"public StepObjectInputStream(final Queue<Step> steps,final ClonerPutField clonerPutField,final Object clone,final SerializableClass cloneInfo) throws IOException {
  super(new StepObjectInput(steps));
  this.clonerPutField=clonerPutField;
  this.clone=clone;
  this.cloneInfo=cloneInfo;
}","StepObjectInputStream(final Queue<Step> steps,final ClonerPutField clonerPutField,final Object clone,final SerializableClass cloneInfo) throws IOException {
  super(new StepObjectInput(steps));
  this.clonerPutField=clonerPutField;
  this.clone=clone;
  this.cloneInfo=cloneInfo;
}"
42984,"protected StepObjectOutputStream(final Queue<Step> steps,final ClonerPutField clonerPutField,final Object subject) throws IOException {
  super(new StepObjectOutput(steps));
  this.steps=steps;
  this.clonerPutField=clonerPutField;
  this.subject=subject;
}","StepObjectOutputStream(final Queue<Step> steps,final ClonerPutField clonerPutField,final Object subject) throws IOException {
  super(new StepObjectOutput(steps));
  this.steps=steps;
  this.clonerPutField=clonerPutField;
  this.subject=subject;
}"
42985,"private Object clone(final Object orig,final boolean replace) throws IOException, ClassNotFoundException {
  if (orig == null) {
    return null;
  }
  final IdentityHashMap<Object,Object> clones=this.clones;
  Object cached=clones.get(orig);
  if (cached != null) {
    return cached;
  }
  final ClassCloner classCloner=this.classCloner;
  if (orig instanceof Class) {
    final Class<?> classObj=(Class<?>)orig;
    final Class<?> clonedClass=Proxy.isProxyClass(classObj) ? classCloner.cloneProxy(classObj) : classCloner.clone(classObj);
    clones.put(orig,clonedClass);
    return clonedClass;
  }
  if ((cached=delegate.clone(orig,this,classCloner)) != null) {
    clones.put(orig,cached);
    return cached;
  }
  final Class<? extends Object> objClass=orig.getClass();
  if (orig instanceof Enum) {
    final Class<? extends Enum> cloneClass=((Class<?>)clone(objClass)).asSubclass(Enum.class);
    if (cloneClass == objClass) {
      return orig;
    }
 else {
      final Class<? extends Enum> cloneEnumClass;
      final Class<?> enumClass=((Enum)orig).getDeclaringClass();
      if (enumClass == objClass) {
        cloneEnumClass=cloneClass;
      }
 else {
        cloneEnumClass=((Class<?>)clone(enumClass)).asSubclass(Enum.class);
      }
      return Enum.valueOf(cloneEnumClass,((Enum)orig).name());
    }
  }
  final Class<?> clonedClass=(Class<?>)clone(objClass);
  if (Proxy.isProxyClass(objClass)) {
    return Proxy.newProxyInstance(clonedClass.getClassLoader(),clonedClass.getInterfaces(),(InvocationHandler)clone(getInvocationHandler(orig)));
  }
  if (UNCLONED.contains(objClass)) {
    return orig;
  }
  if (objClass.isArray()) {
    Object simpleClone=simpleClone(orig,objClass);
    if (simpleClone != null)     return simpleClone;
    final Object[] origArray=(Object[])orig;
    final int len=origArray.length;
    final boolean sameClass=objClass == clonedClass;
    if (sameClass && len == 0) {
      clones.put(orig,orig);
      return orig;
    }
    if (UNCLONED.contains(objClass.getComponentType())) {
      final Object[] clone=origArray.clone();
      clones.put(orig,clone);
      return clone;
    }
    final Object[] clone;
    if (sameClass) {
      clone=origArray.clone();
    }
 else {
      clone=(Object[])Array.newInstance(clonedClass.getComponentType(),len);
    }
    clones.put(orig,clone);
    for (int i=0; i < len; i++) {
      clone[i]=clone(origArray[i]);
    }
    return clone;
  }
  final SerializableClass info=registry.lookup(objClass);
  if (replace) {
    Object replaced=orig;
    if (info.hasWriteReplace()) {
      replaced=info.callWriteReplace(replaced);
    }
    replaced=objectResolver.writeReplace(replaced);
    if (replaced != orig) {
      Object clone=clone(replaced,false);
      clones.put(orig,clone);
      return clone;
    }
  }
  final Object clone;
  if (orig instanceof Externalizable) {
    final Externalizable externalizable=(Externalizable)orig;
    clone=externalizedCreator.create((Class<?>)clone(objClass));
    clones.put(orig,clone);
    final Queue<Step> steps=new ArrayDeque<Step>();
    externalizable.writeExternal(new StepObjectOutput(steps));
    ((Externalizable)clone).readExternal(new StepObjectInput(steps));
  }
 else   if (serializabilityChecker.isSerializable(objClass)) {
    clone=serializedCreator.create((Class<?>)clone(objClass));
    final Class<?> cloneClass=clone.getClass();
    if (!(serializabilityChecker.isSerializable(cloneClass))) {
      throw new NotSerializableException(cloneClass.getName());
    }
    clones.put(orig,clone);
    initSerializableClone(orig,info,clone,cloneClass);
  }
 else {
    throw new NotSerializableException(objClass.getName());
  }
  Object replaced=clone;
  if (info.hasReadResolve()) {
    replaced=info.callReadResolve(replaced);
  }
  replaced=objectResolver.readResolve(replaced);
  if (replaced != clone)   clones.put(orig,replaced);
  return replaced;
}","private Object clone(final Object orig,final boolean replace) throws IOException, ClassNotFoundException {
  if (orig == null) {
    return null;
  }
  final IdentityHashMap<Object,Object> clones=this.clones;
  Object cached=clones.get(orig);
  if (cached != null) {
    return cached;
  }
  final ClassCloner classCloner=this.classCloner;
  if (orig instanceof Class) {
    final Class<?> classObj=(Class<?>)orig;
    final Class<?> clonedClass=Proxy.isProxyClass(classObj) ? classCloner.cloneProxy(classObj) : classCloner.clone(classObj);
    clones.put(orig,clonedClass);
    return clonedClass;
  }
  if ((cached=delegate.clone(orig,this,classCloner)) != null) {
    clones.put(orig,cached);
    return cached;
  }
  final Class<? extends Object> objClass=orig.getClass();
  if (orig instanceof Enum) {
    @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneClass=((Class<?>)clone(objClass)).asSubclass(Enum.class);
    if (cloneClass == objClass) {
      return orig;
    }
 else {
      @SuppressWarnings(""String_Node_Str"") final Class<? extends Enum> cloneEnumClass;
      final Class<?> enumClass=((Enum<?>)orig).getDeclaringClass();
      if (enumClass == objClass) {
        cloneEnumClass=cloneClass;
      }
 else {
        cloneEnumClass=((Class<?>)clone(enumClass)).asSubclass(Enum.class);
      }
      return Enum.valueOf(cloneEnumClass,((Enum<?>)orig).name());
    }
  }
  final Class<?> clonedClass=(Class<?>)clone(objClass);
  if (Proxy.isProxyClass(objClass)) {
    return Proxy.newProxyInstance(clonedClass.getClassLoader(),clonedClass.getInterfaces(),(InvocationHandler)clone(getInvocationHandler(orig)));
  }
  if (UNCLONED.contains(objClass)) {
    return orig;
  }
  if (objClass.isArray()) {
    Object simpleClone=simpleClone(orig,objClass);
    if (simpleClone != null)     return simpleClone;
    final Object[] origArray=(Object[])orig;
    final int len=origArray.length;
    final boolean sameClass=objClass == clonedClass;
    if (sameClass && len == 0) {
      clones.put(orig,orig);
      return orig;
    }
    if (UNCLONED.contains(objClass.getComponentType())) {
      final Object[] clone=origArray.clone();
      clones.put(orig,clone);
      return clone;
    }
    final Object[] clone;
    if (sameClass) {
      clone=origArray.clone();
    }
 else {
      clone=(Object[])Array.newInstance(clonedClass.getComponentType(),len);
    }
    clones.put(orig,clone);
    for (int i=0; i < len; i++) {
      clone[i]=clone(origArray[i]);
    }
    return clone;
  }
  final SerializableClass info=registry.lookup(objClass);
  if (replace) {
    Object replaced=orig;
    if (info.hasWriteReplace()) {
      replaced=info.callWriteReplace(replaced);
    }
    replaced=objectResolver.writeReplace(replaced);
    if (replaced != orig) {
      Object clone=clone(replaced,false);
      clones.put(orig,clone);
      return clone;
    }
  }
  final Object clone;
  if (orig instanceof Externalizable) {
    final Externalizable externalizable=(Externalizable)orig;
    clone=externalizedCreator.create((Class<?>)clone(objClass));
    clones.put(orig,clone);
    final Queue<Step> steps=new ArrayDeque<Step>();
    externalizable.writeExternal(new StepObjectOutput(steps));
    ((Externalizable)clone).readExternal(new StepObjectInput(steps));
  }
 else   if (serializabilityChecker.isSerializable(objClass)) {
    clone=serializedCreator.create((Class<?>)clone(objClass));
    final Class<?> cloneClass=clone.getClass();
    if (!(serializabilityChecker.isSerializable(cloneClass))) {
      throw new NotSerializableException(cloneClass.getName());
    }
    clones.put(orig,clone);
    initSerializableClone(orig,info,clone,cloneClass);
  }
 else {
    throw new NotSerializableException(objClass.getName());
  }
  Object replaced=clone;
  if (info.hasReadResolve()) {
    replaced=info.callReadResolve(replaced);
  }
  replaced=objectResolver.readResolve(replaced);
  if (replaced != clone)   clones.put(orig,replaced);
  return replaced;
}"
42986,"/** 
 * Returns <tt>true</tt> if this map maps one or more keys to the specified value. Note: This method requires a full internal traversal of the hash table, and so is much slower than method <tt>containsKey</tt>.
 * @param value value whose presence in this map is to be tested
 * @return <tt>true</tt> if this map maps one or more keys to thespecified value
 * @throws NullPointerException if the specified value is null
 */
public boolean containsValue(Object value){
  if (value == null)   throw new NullPointerException();
  final Segment<K,V>[] segments=this.segments;
  int[] mc=new int[segments.length];
  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {
    int sum=0;
    int mcsum=0;
    for (int i=0; i < segments.length; ++i) {
      int c=segments[i].count;
      mcsum+=mc[i]=segments[i].modCount;
      if (segments[i].containsValue(value))       return true;
    }
    boolean cleanSweep=true;
    if (mcsum != 0) {
      for (int i=0; i < segments.length; ++i) {
        int c=segments[i].count;
        if (mc[i] != segments[i].modCount) {
          cleanSweep=false;
          break;
        }
      }
    }
    if (cleanSweep)     return false;
  }
  for (int i=0; i < segments.length; ++i)   segments[i].lock();
  boolean found=false;
  try {
    for (int i=0; i < segments.length; ++i) {
      if (segments[i].containsValue(value)) {
        found=true;
        break;
      }
    }
  }
  finally {
    for (int i=0; i < segments.length; ++i)     segments[i].unlock();
  }
  return found;
}","/** 
 * Returns <tt>true</tt> if this map maps one or more keys to the specified value. Note: This method requires a full internal traversal of the hash table, and so is much slower than method <tt>containsKey</tt>.
 * @param value value whose presence in this map is to be tested
 * @return <tt>true</tt> if this map maps one or more keys to thespecified value
 * @throws NullPointerException if the specified value is null
 */
public boolean containsValue(Object value){
  if (value == null)   throw new NullPointerException();
  final Segment<K,V>[] segments=this.segments;
  int[] mc=new int[segments.length];
  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {
    int mcsum=0;
    for (int i=0; i < segments.length; ++i) {
      mcsum+=mc[i]=segments[i].modCount;
      if (segments[i].containsValue(value))       return true;
    }
    boolean cleanSweep=true;
    if (mcsum != 0) {
      for (int i=0; i < segments.length; ++i) {
        if (mc[i] != segments[i].modCount) {
          cleanSweep=false;
          break;
        }
      }
    }
    if (cleanSweep)     return false;
  }
  for (int i=0; i < segments.length; ++i)   segments[i].lock();
  boolean found=false;
  try {
    for (int i=0; i < segments.length; ++i) {
      if (segments[i].containsValue(value)) {
        found=true;
        break;
      }
    }
  }
  finally {
    for (int i=0; i < segments.length; ++i)     segments[i].unlock();
  }
  return found;
}"
42987,"@SuppressWarnings(""String_Node_Str"") final K key(){
  if (keyRef instanceof Reference)   return ((Reference<K>)keyRef).get();
  return (K)keyRef;
}","@SuppressWarnings(""String_Node_Str"") final K key(){
  if (keyRef instanceof KeyReference)   return ((Reference<K>)keyRef).get();
  return (K)keyRef;
}"
42988,"@SuppressWarnings(""String_Node_Str"") final V dereferenceValue(Object value){
  if (value instanceof Reference)   return ((Reference<V>)value).get();
  return (V)value;
}","@SuppressWarnings(""String_Node_Str"") final V dereferenceValue(Object value){
  if (value instanceof KeyReference)   return ((Reference<V>)value).get();
  return (V)value;
}"
42989,"public boolean equals(Object o){
  if (!(o instanceof Map.Entry))   return false;
  @SuppressWarnings(""String_Node_Str"") Map.Entry e=(Map.Entry)o;
  return eq(key,e.getKey()) && eq(value,e.getValue());
}","public boolean equals(Object o){
  if (!(o instanceof Map.Entry))   return false;
  Map.Entry<?,?> e=(Map.Entry<?,?>)o;
  return eq(key,e.getKey()) && eq(value,e.getValue());
}"
42990,"/** 
 * Push an exception condition into the queue.  After this method is called, no further buffers may be pushed into this instance.
 * @param e the exception to push
 */
public void pushException(IOException e){
synchronized (this) {
    if (!eof) {
      failure=e;
    }
  }
}","/** 
 * Push an exception condition into the queue.  After this method is called, no further buffers may be pushed into this instance.
 * @param e the exception to push
 */
public void pushException(IOException e){
synchronized (this) {
    if (!eof) {
      failure=e;
      notifyAll();
    }
  }
}"
42991,"/** 
 * Construct a new instance.  The given   {@code inputHandler} willbe invoked after each buffer is fully read and when the stream is closed.
 * @param inputHandler the input events handler
 */
public NioByteInput(final InputHandler inputHandler){
  this.inputHandler=inputHandler;
  queue=new ArrayDeque<ByteBuffer>();
}","/** 
 * Construct a new instance.  The given   {@code inputHandler} willbe invoked after each buffer is fully read and when the stream is closed.
 * @param inputHandler the input events handler
 */
public NioByteInput(final InputHandler inputHandler){
  this.inputHandler=inputHandler;
  queue=new ArrayDeque<Pair<ByteBuffer,BufferReturn>>();
}"
42992,"/** 
 * {@inheritDoc} 
 */
public int read(final byte[] b,final int off,int len) throws IOException {
  if (len == 0) {
    return 0;
  }
  final Queue<ByteBuffer> queue=this.queue;
synchronized (this) {
    while (queue.isEmpty()) {
      if (eof) {
        return -1;
      }
      checkFailure();
      try {
        wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new InterruptedIOException(""String_Node_Str"");
      }
    }
    int total=0;
    while (len > 0) {
      final ByteBuffer buffer=queue.peek();
      if (buffer == null) {
        break;
      }
      final int bytecnt=Math.min(buffer.remaining(),len);
      buffer.get(b,off,bytecnt);
      total+=bytecnt;
      len-=bytecnt;
      if (buffer.remaining() == 0) {
        try {
          inputHandler.acknowledge();
        }
 catch (        IOException e) {
          eof=true;
          queue.clear();
          throw e;
        }
      }
    }
    return total;
  }
}","/** 
 * {@inheritDoc} 
 */
public int read(final byte[] b,final int off,int len) throws IOException {
  if (len == 0) {
    return 0;
  }
  final Queue<Pair<ByteBuffer,BufferReturn>> queue=this.queue;
synchronized (this) {
    while (queue.isEmpty()) {
      if (eof) {
        return -1;
      }
      checkFailure();
      try {
        wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new InterruptedIOException(""String_Node_Str"");
      }
    }
    int total=0;
    while (len > 0) {
      final Pair<ByteBuffer,BufferReturn> pair=queue.peek();
      if (pair == null) {
        break;
      }
      final ByteBuffer buffer=pair.getA();
      final BufferReturn bufferReturn=pair.getB();
      final int bytecnt=Math.min(buffer.remaining(),len);
      buffer.get(b,off,bytecnt);
      total+=bytecnt;
      len-=bytecnt;
      if (buffer.remaining() == 0) {
        if (bufferReturn != null) {
          bufferReturn.returnBuffer(buffer);
        }
        queue.poll();
        try {
          inputHandler.acknowledge();
        }
 catch (        IOException e) {
          eof=true;
          clearQueue();
          notifyAll();
          throw e;
        }
      }
    }
    return total;
  }
}"
42993,"/** 
 * Push the EOF condition into the queue.  After this method is called, no further buffers may be pushed into this instance.
 */
public void pushEof(){
synchronized (this) {
    eof=true;
  }
}","/** 
 * Push the EOF condition into the queue.  After this method is called, no further buffers may be pushed into this instance.
 */
public void pushEof(){
synchronized (this) {
    eof=true;
    notifyAll();
  }
}"
42994,"/** 
 * {@inheritDoc} 
 */
public int available() throws IOException {
synchronized (this) {
    int total=0;
    for (    ByteBuffer buffer : queue) {
      total+=buffer.remaining();
      if (total < 0) {
        return Integer.MAX_VALUE;
      }
    }
    return total;
  }
}","/** 
 * {@inheritDoc} 
 */
public int available() throws IOException {
synchronized (this) {
    int total=0;
    for (    Pair<ByteBuffer,BufferReturn> pair : queue) {
      total+=pair.getA().remaining();
      if (total < 0) {
        return Integer.MAX_VALUE;
      }
    }
    return total;
  }
}"
42995,"public long skip(long qty) throws IOException {
  final Queue<ByteBuffer> queue=this.queue;
synchronized (this) {
    while (queue.isEmpty()) {
      if (eof) {
        return 0L;
      }
      checkFailure();
      try {
        wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new InterruptedIOException(""String_Node_Str"");
      }
    }
    long skipped=0L;
    while (qty > 0L) {
      final ByteBuffer buffer=queue.peek();
      if (buffer == null) {
        break;
      }
      final int bytecnt=Math.min(buffer.remaining(),(int)Math.max((long)Integer.MAX_VALUE,qty));
      buffer.position(buffer.position() + bytecnt);
      skipped+=bytecnt;
      qty-=bytecnt;
      if (buffer.remaining() == 0) {
        queue.poll();
        try {
          inputHandler.acknowledge();
        }
 catch (        IOException e) {
          eof=true;
          queue.clear();
          throw e;
        }
      }
    }
    return skipped;
  }
}","public long skip(long qty) throws IOException {
  final Queue<Pair<ByteBuffer,BufferReturn>> queue=this.queue;
synchronized (this) {
    while (queue.isEmpty()) {
      if (eof) {
        return 0L;
      }
      checkFailure();
      try {
        wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new InterruptedIOException(""String_Node_Str"");
      }
    }
    long skipped=0L;
    while (qty > 0L) {
      final Pair<ByteBuffer,BufferReturn> pair=queue.peek();
      if (pair == null) {
        break;
      }
      final ByteBuffer buffer=pair.getA();
      final BufferReturn bufferReturn=pair.getB();
      final int bytecnt=Math.min(buffer.remaining(),(int)Math.max((long)Integer.MAX_VALUE,qty));
      buffer.position(buffer.position() + bytecnt);
      skipped+=bytecnt;
      qty-=bytecnt;
      if (buffer.remaining() == 0) {
        queue.poll();
        if (bufferReturn != null) {
          bufferReturn.returnBuffer(buffer);
        }
        try {
          inputHandler.acknowledge();
        }
 catch (        IOException e) {
          eof=true;
          clearQueue();
          throw e;
        }
      }
    }
    return skipped;
  }
}"
42996,"private void checkFailure() throws IOException {
  final IOException failure=this.failure;
  if (failure != null) {
    failure.fillInStackTrace();
    try {
      throw failure;
    }
  finally {
      eof=true;
      this.failure=null;
    }
  }
}","private void checkFailure() throws IOException {
  final IOException failure=this.failure;
  if (failure != null) {
    failure.fillInStackTrace();
    try {
      throw failure;
    }
  finally {
      eof=true;
      clearQueue();
      this.failure=null;
    }
  }
}"
42997,"/** 
 * Push a buffer into the queue.  There is no mechanism to limit the number of pushed buffers; if such a mechanism is desired, it must be implemented externally, for example maybe using a   {@link java.util.concurrent.Semaphore Semaphore}.
 * @param buffer the buffer from which more data should be read
 */
public void push(final ByteBuffer buffer){
synchronized (this) {
    if (!eof && failure == null) {
      queue.add(buffer);
    }
  }
}","/** 
 * Push a buffer into the queue.  There is no mechanism to limit the number of pushed buffers; if such a mechanism is desired, it must be implemented externally, for example maybe using a   {@link java.util.concurrent.Semaphore Semaphore}.
 * @param buffer the buffer from which more data should be read
 * @param bufferReturn the buffer return to send this buffer to when it is exhausted
 */
public void push(final ByteBuffer buffer,final BufferReturn bufferReturn){
synchronized (this) {
    if (!eof && failure == null) {
      queue.add(Pair.create(buffer,bufferReturn));
      notifyAll();
    }
 else {
      throw new IllegalStateException();
    }
  }
}"
42998,"@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
final Object obj=objectTable.readObject(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
return obj;
}
 else {
return objectTable.readObject(this);
}
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return IdentityHashMap.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
return readCollectionData(unshared,len,new TreeSet((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,len,new Stack());
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
return readMapData(unshared,len,new TreeMap((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_MAP:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,len,new EnumMap(elementType));
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}","@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
final Object obj=objectTable.readObject(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
return obj;
}
 else {
return objectTable.readObject(this);
}
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return IdentityHashMap.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_ENUM_SET_PROXY:
{
return enumSetProxyClass;
}
case ID_CC_ENUM_SET:
{
return EnumSet.class;
}
case ID_CC_ENUM_MAP:
{
return EnumMap.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
return readCollectionData(unshared,len,new TreeSet((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,len,new Stack());
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
return readMapData(unshared,len,new TreeMap((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_MAP:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,len,new EnumMap(elementType));
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}"
42999,"public void defaultReadObject() throws IOException, ClassNotFoundException {
  if (!state.compareAndSet(State.UNREAD_FIELDS,State.ON)) {
    throw new NotActiveException(""String_Node_Str"");
  }
  try {
    unmarshaller.readFields(current,serializableClassDescriptor);
  }
  finally {
    serializableClassDescriptor=null;
    current=null;
  }
}","public void defaultReadObject() throws IOException, ClassNotFoundException {
  State old=state.getAndSet(State.ON);
switch (old) {
case UNREAD_FIELDS:
case UNREAD_FIELDS_EOB:
    break;
default :
  throw new NotActiveException(""String_Node_Str"");
}
try {
unmarshaller.readFields(current,serializableClassDescriptor);
if (old == State.UNREAD_FIELDS_EOB) {
  restoreIdx=blockUnmarshaller.tempEndOfStream();
}
}
  finally {
serializableClassDescriptor=null;
current=null;
}
}"
43000,"public GetField readFields() throws IOException, ClassNotFoundException {
  if (!state.compareAndSet(State.UNREAD_FIELDS,State.ON)) {
    throw new NotActiveException(""String_Node_Str"");
  }
  final SerializableField[] streamFields=serializableClassDescriptor.getFields();
  final int cnt=streamFields.length;
  final ReadField[] readFields=new ReadField[cnt];
  for (int i=0; i < cnt; i++) {
    SerializableField field=streamFields[i];
    try {
switch (field.getKind()) {
case BOOLEAN:
{
          readFields[i]=new BooleanReadField(field,unmarshaller.readBoolean());
          break;
        }
case BYTE:
{
        readFields[i]=new ByteReadField(field,unmarshaller.readByte());
        break;
      }
case CHAR:
{
      readFields[i]=new CharReadField(field,unmarshaller.readChar());
      break;
    }
case DOUBLE:
{
    readFields[i]=new DoubleReadField(field,unmarshaller.readDouble());
    break;
  }
case FLOAT:
{
  readFields[i]=new FloatReadField(field,unmarshaller.readFloat());
  break;
}
case INT:
{
readFields[i]=new IntReadField(field,unmarshaller.readInt());
break;
}
case LONG:
{
readFields[i]=new LongReadField(field,unmarshaller.readLong());
break;
}
case OBJECT:
{
readFields[i]=new ObjectReadField(field,unmarshaller.readObject());
break;
}
case SHORT:
{
readFields[i]=new ShortReadField(field,unmarshaller.readShort());
break;
}
default :
throw new IllegalStateException(""String_Node_Str"");
}
}
 catch (IOException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
catch (ClassNotFoundException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
catch (RuntimeException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
}
return new GetField(){
public ObjectStreamClass getObjectStreamClass(){
throw new UnsupportedOperationException(""String_Node_Str"");
}
private ReadField find(final String name){
if (name == null) {
throw new NullPointerException(""String_Node_Str"");
}
for (ReadField field : readFields) {
if (name.equals(field.getName())) {
return field;
}
}
throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
}
public boolean defaulted(final String name) throws IOException {
return find(name).isDefaulted();
}
public boolean get(final String name,final boolean val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getBoolean();
}
public byte get(final String name,final byte val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getByte();
}
public char get(final String name,final char val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getChar();
}
public short get(final String name,final short val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getShort();
}
public int get(final String name,final int val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getInt();
}
public long get(final String name,final long val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getLong();
}
public float get(final String name,final float val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getFloat();
}
public double get(final String name,final double val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getDouble();
}
public Object get(final String name,final Object val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getObject();
}
}
;
}","public GetField readFields() throws IOException, ClassNotFoundException {
  State old=state.getAndSet(State.ON);
switch (old) {
case UNREAD_FIELDS:
case UNREAD_FIELDS_EOB:
    break;
default :
  throw new NotActiveException(""String_Node_Str"");
}
final SerializableField[] streamFields=serializableClassDescriptor.getFields();
final int cnt=streamFields.length;
final ReadField[] readFields=new ReadField[cnt];
for (int i=0; i < cnt; i++) {
SerializableField field=streamFields[i];
try {
switch (field.getKind()) {
case BOOLEAN:
{
      readFields[i]=new BooleanReadField(field,unmarshaller.readBoolean());
      break;
    }
case BYTE:
{
    readFields[i]=new ByteReadField(field,unmarshaller.readByte());
    break;
  }
case CHAR:
{
  readFields[i]=new CharReadField(field,unmarshaller.readChar());
  break;
}
case DOUBLE:
{
readFields[i]=new DoubleReadField(field,unmarshaller.readDouble());
break;
}
case FLOAT:
{
readFields[i]=new FloatReadField(field,unmarshaller.readFloat());
break;
}
case INT:
{
readFields[i]=new IntReadField(field,unmarshaller.readInt());
break;
}
case LONG:
{
readFields[i]=new LongReadField(field,unmarshaller.readLong());
break;
}
case OBJECT:
{
readFields[i]=new ObjectReadField(field,unmarshaller.readObject());
break;
}
case SHORT:
{
readFields[i]=new ShortReadField(field,unmarshaller.readShort());
break;
}
default :
throw new IllegalStateException(""String_Node_Str"");
}
}
 catch (IOException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
catch (ClassNotFoundException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
catch (RuntimeException e) {
TraceInformation.addFieldInformation(e,field.getName());
throw e;
}
}
if (old == State.UNREAD_FIELDS_EOB) {
restoreIdx=blockUnmarshaller.tempEndOfStream();
}
return new GetField(){
public ObjectStreamClass getObjectStreamClass(){
throw new UnsupportedOperationException(""String_Node_Str"");
}
private ReadField find(final String name){
if (name == null) {
throw new NullPointerException(""String_Node_Str"");
}
for (ReadField field : readFields) {
if (name.equals(field.getName())) {
return field;
}
}
throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
}
public boolean defaulted(final String name) throws IOException {
return find(name).isDefaulted();
}
public boolean get(final String name,final boolean val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getBoolean();
}
public byte get(final String name,final byte val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getByte();
}
public char get(final String name,final char val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getChar();
}
public short get(final String name,final short val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getShort();
}
public int get(final String name,final int val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getInt();
}
public long get(final String name,final long val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getLong();
}
public float get(final String name,final float val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getFloat();
}
public double get(final String name,final double val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getDouble();
}
public Object get(final String name,final Object val) throws IOException {
final ReadField field=find(name);
return field.isDefaulted() ? val : field.getObject();
}
}
;
}"
