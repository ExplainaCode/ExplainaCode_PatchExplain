record_number,buggy_code,fixed_code
96001,"@Test public void SubqueryInFilterTestExists() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AsteriskColumn()),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(0)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AsteriskColumn()),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void SubqueryInFilterTestExists() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AsteriskColumn()),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(0)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AsteriskColumn()),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96002,"@Test public void Query6Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),lineitem);
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query6Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),lineitem);
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96003,"@Test public void Query14Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),ConstantColumn.valueOf(0)))))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),Arrays.asList(lineitem,part));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(relation,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query14Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(""String_Node_Str""),new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),ConstantColumn.valueOf(0)))))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),Arrays.asList(lineitem,part));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(relation,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96004,"@Test public void Query20Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(0.5),new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(3));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query20Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(0.5),new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(3));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96005,"@Test public void Query18Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(2));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query18Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(2));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96006,"@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    ExecutionInfoToken failureToken=getFailureTokenIfExists(tokens);
    if (failureToken != null) {
      broadcast(failureToken);
      break;
    }
    if (areAllSuccess(tokens)) {
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
      break;
    }
  }
}","@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    ExecutionInfoToken failureToken=getFailureTokenIfExists(tokens);
    if (failureToken != null) {
      broadcast(failureToken);
      break;
    }
    if (areAllSuccess(tokens)) {
      System.out.println(new ToStringBuilder(node,ToStringStyle.DEFAULT_STYLE) + ""String_Node_Str"" + successSourceCount);
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
      break;
    }
  }
}"
96007,"public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan) throws VerdictDBException {
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (true) {
    ExecutionInfoToken token=reader.next();
    if (token == null) {
      break;
    }
  }
}","public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan) throws VerdictDBException {
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (true) {
    ExecutionInfoToken token=reader.next();
    System.out.println(""String_Node_Str"" + token);
    if (token == null) {
      break;
    }
  }
}"
96008,"public void clearSubscribers(){
  for (  ExecutableNodeBase s : subscribers) {
    s.cancelSubscriptionTo(this);
  }
}","public void clearSubscribers(){
  for (  ExecutableNodeBase s : subscribers) {
    s.cancelSubscriptionTo(this);
  }
  subscribers=new ArrayList<>();
}"
96009,"@Override public String toString(){
  return new ToStringBuilder(this,ToStringStyle.DEFAULT_STYLE).append(""String_Node_Str"",sources).append(""String_Node_Str"",channels).toString();
}","@Override public String toString(){
  return new ToStringBuilder(this,ToStringStyle.DEFAULT_STYLE).append(""String_Node_Str"",subscribers.size()).append(""String_Node_Str"",sources).toString();
}"
96010,"@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    ExecutionInfoToken failureToken=getFailureTokenIfExists(tokens);
    if (failureToken != null) {
      broadcast(failureToken);
      break;
    }
    if (areAllSuccess(tokens)) {
      System.out.println(new ToStringBuilder(node,ToStringStyle.DEFAULT_STYLE) + ""String_Node_Str"" + successSourceCount);
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
      break;
    }
  }
}","@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    System.out.println(new ToStringBuilder(node,ToStringStyle.DEFAULT_STYLE) + ""String_Node_Str"" + tokens);
    ExecutionInfoToken failureToken=getFailureTokenIfExists(tokens);
    if (failureToken != null) {
      broadcast(failureToken);
      break;
    }
    if (areAllSuccess(tokens)) {
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
      break;
    }
  }
}"
96011,"public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan) throws VerdictDBException {
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (true) {
    ExecutionInfoToken token=reader.next();
    System.out.println(""String_Node_Str"" + token);
    if (token == null) {
      break;
    }
  }
}","public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan) throws VerdictDBException {
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (true) {
    ExecutionInfoToken token=reader.next();
    if (token == null) {
      break;
    }
  }
}"
96012,"public ExecutionTokenReader getTokenReader(){
  ExecutionTokenReader reader;
  if (plan.getReportingNode() != null) {
    ExecutableNodeBase node=ExecutableNodeBase.create();
    node.subscribeTo((ExecutableNodeBase)plan.getReportingNode());
    reader=new ExecutionTokenReader(node.getSourceQueues().get(0));
  }
 else {
    reader=new ExecutionTokenReader();
  }
  ExecutorService executor=Executors.newCachedThreadPool();
  List<Integer> groupIds=plan.getNodeGroupIDs();
  List<List<ExecutableNode>> nodeGroups=new ArrayList<>();
  for (  int gid : groupIds) {
    List<ExecutableNode> nodes=plan.getNodesInGroup(gid);
    nodeGroups.add(nodes);
  }
  while (true) {
    boolean submittedAtLeastOne=false;
    for (int i=0; i < nodeGroups.size(); i++) {
      List<ExecutableNode> nodes=nodeGroups.get(i);
      if (!nodes.isEmpty()) {
        ExecutableNode node=nodes.remove(0);
        System.out.println(""String_Node_Str"" + node);
        executor.submit(new ExecutableNodeRunner(conn,node));
        submittedAtLeastOne=true;
      }
    }
    if (submittedAtLeastOne) {
      continue;
    }
 else {
      break;
    }
  }
  return reader;
}","public ExecutionTokenReader getTokenReader(){
  ExecutionTokenReader reader;
  if (plan.getReportingNode() != null) {
    ExecutableNodeBase node=ExecutableNodeBase.create();
    node.subscribeTo((ExecutableNodeBase)plan.getReportingNode());
    reader=new ExecutionTokenReader(node.getSourceQueues().get(0));
  }
 else {
    reader=new ExecutionTokenReader();
  }
  ExecutorService executor=Executors.newCachedThreadPool();
  List<Integer> groupIds=plan.getNodeGroupIDs();
  List<List<ExecutableNode>> nodeGroups=new ArrayList<>();
  for (  int gid : groupIds) {
    List<ExecutableNode> nodes=plan.getNodesInGroup(gid);
    nodeGroups.add(nodes);
  }
  while (true) {
    boolean submittedAtLeastOne=false;
    for (int i=0; i < nodeGroups.size(); i++) {
      List<ExecutableNode> nodes=nodeGroups.get(i);
      if (!nodes.isEmpty()) {
        ExecutableNode node=nodes.remove(0);
        executor.submit(new ExecutableNodeRunner(conn,node));
        submittedAtLeastOne=true;
      }
    }
    if (submittedAtLeastOne) {
      continue;
    }
 else {
      break;
    }
  }
  return reader;
}"
96013,"public List<ExecutableNodeBase> getSources(){
  List<ExecutableNodeBase> ss=new ArrayList<>();
  for (  Pair<ExecutableNodeBase,Integer> s : sources) {
    ss.add(s.getKey());
  }
  return ss;
}","public List<ExecutableNodeBase> getSources(){
  List<Pair<ExecutableNodeBase,Integer>> temp=getSourcesAndChannels();
  Collections.sort(temp,new Comparator<Pair<ExecutableNodeBase,Integer>>(){
    @Override public int compare(    Pair<ExecutableNodeBase,Integer> o1,    Pair<ExecutableNodeBase,Integer> o2){
      return o1.getRight() - o2.getRight();
    }
  }
);
  List<ExecutableNodeBase> ss=new ArrayList<>();
  for (  Pair<ExecutableNodeBase,Integer> s : temp) {
    ss.add(s.getKey());
  }
  return ss;
}"
96014,"@Override public void getNotified(ExecutableNode source,ExecutionInfoToken token){
  for (  Pair<ExecutableNodeBase,Integer> a : sources) {
    int channel=a.getRight();
    channels.get(channel).add(token);
  }
}","@Override public void getNotified(ExecutableNode source,ExecutionInfoToken token){
  for (  Pair<ExecutableNodeBase,Integer> a : sources) {
    if (source.equals(a.getLeft())) {
      int channel=a.getRight();
      channels.get(channel).add(token);
    }
  }
}"
96015,"protected void copyFields(ExecutableNodeBase from,ExecutableNodeBase to){
  to.subscribers=new ArrayList<>(from.subscribers);
  to.sources=new ArrayList<>(from.sources);
  to.channels=new TreeMap<>(from.channels);
}","protected void copyFields(ExecutableNodeBase from,ExecutableNodeBase to){
  to.subscribers=new ArrayList<>(from.subscribers);
  to.sources=new ArrayList<>(from.sources);
  to.channels=new TreeMap<>();
  for (  Entry<Integer,ExecutionTokenQueue> a : from.channels.entrySet()) {
    to.channels.put(a.getKey(),new ExecutionTokenQueue());
  }
}"
96016,"protected void copyFields(QueryNodeBase from,QueryNodeBase to){
  super.copyFields(from,to);
  to.selectQuery=from.selectQuery;
}","protected void copyFields(QueryNodeBase from,QueryNodeBase to){
  super.copyFields(from,to);
  to.selectQuery=from.selectQuery.deepcopy();
}"
96017,"/** 
 * Replicas of the group is made. The token queues among the group's nodes are replicated. The token queues outside the group's nodes are shared. This is for each replicated group to receive the same information from the downstream operations.
 * @param root
 * @return
 * @throws VerdictDBValueException 
 */
public AggExecutionNodeBlock deepcopyExcludingDependentAggregates() throws VerdictDBValueException {
  List<ExecutableNodeBase> newNodes=new ArrayList<>();
  for (  ExecutableNodeBase node : blockNodes) {
    ExecutableNodeBase copied=node.deepcopy();
    copied.clearSubscribers();
    newNodes.add(copied);
  }
  for (int i=0; i < newNodes.size(); i++) {
    ExecutableNodeBase newNode=newNodes.get(i);
    ExecutableNodeBase oldNode=blockNodes.get(i);
    for (int j=0; j < oldNode.getSources().size(); j++) {
      Pair<ExecutableNodeBase,Integer> source=oldNode.getSourcesAndChannels().get(j);
      int idx=blockNodes.indexOf(source.getLeft());
      if (idx >= 0) {
        newNode.subscribeTo(newNodes.get(idx),source.getRight());
      }
 else {
        newNode.subscribeTo(source.getLeft(),source.getRight());
      }
    }
  }
  int rootIdx=blockNodes.indexOf(blockRoot);
  return new AggExecutionNodeBlock(idCreator,newNodes.get(rootIdx));
}","/** 
 * Replicas of the group is made. The token queues among the group's nodes are replicated. The token queues outside the group's nodes are shared. This is for each replicated group to receive the same information from the downstream operations.
 * @param root
 * @return
 * @throws VerdictDBValueException 
 */
public AggExecutionNodeBlock deepcopyExcludingDependentAggregates() throws VerdictDBValueException {
  List<ExecutableNodeBase> newNodes=new ArrayList<>();
  for (  ExecutableNodeBase node : blockNodes) {
    ExecutableNodeBase copied=node.deepcopy();
    copied.clearSubscribers();
    newNodes.add(copied);
  }
  for (int i=0; i < newNodes.size(); i++) {
    ExecutableNodeBase newNode=newNodes.get(i);
    ExecutableNodeBase oldNode=blockNodes.get(i);
    for (int j=0; j < oldNode.getSources().size(); j++) {
      Pair<ExecutableNodeBase,Integer> source=oldNode.getSourcesAndChannels().get(j);
      int idx=blockNodes.indexOf(source.getLeft());
      newNode.cancelSubscriptionTo(source.getLeft());
      if (idx >= 0) {
        newNode.subscribeTo(newNodes.get(idx),source.getRight());
      }
 else {
        newNode.subscribeTo(source.getLeft(),source.getRight());
      }
    }
  }
  int rootIdx=blockNodes.indexOf(blockRoot);
  return new AggExecutionNodeBlock(idCreator,newNodes.get(rootIdx));
}"
96018,"@Override public ExecutionInfoToken executeNode(DbmsConnection conn,List<ExecutionInfoToken> downstreamResults) throws VerdictDBException {
  ExecutionInfoToken result=super.executeNode(conn,downstreamResults);
  if (parents.size() == 1 && (parents.get(0) instanceof AsyncAggExecutionNode || parents.get(0) instanceof AggCombinerExecutionNode)) {
    QueryExecutionNode asyncNode=parents.get(0);
    int index=0;
    while (!(asyncNode instanceof AsyncAggExecutionNode)) {
      asyncNode=asyncNode.parents.get(0);
      index++;
    }
    BaseTable scrambleTable=((AsyncAggExecutionNode)asyncNode).getScrambleTables().get(0);
    Dimension dimension=new Dimension(scrambleTable.getSchemaName(),scrambleTable.getTableName(),index,index);
    result.setKeyValue(""String_Node_Str"",Arrays.asList(new HyperTableCube(Arrays.asList(dimension))));
  }
  return result;
}","@Override public ExecutionInfoToken executeNode(DbmsConnection conn,List<ExecutionInfoToken> downstreamResults) throws VerdictDBException {
  ExecutionInfoToken result=super.executeNode(conn,downstreamResults);
  if (parents.get(0) instanceof AsyncAggScaleExecutionNode) {
    QueryExecutionNode asyncNode=parents.get(0);
    int index=-1;
    if (asyncNode.getParents().size() == 2) {
      index=0;
      asyncNode=asyncNode.getParents().get(1);
    }
 else {
      AsyncAggExecutionNode asyncRoot=asyncNode.getParents().get(0).getParents().size() == 2 ? (AsyncAggExecutionNode)asyncNode.getParents().get(0).getParents().get(1) : (AsyncAggExecutionNode)asyncNode.getParents().get(0).getParents().get(0);
      index=asyncRoot.getDependents().indexOf(asyncNode.getParents().get(0));
      asyncNode=asyncRoot;
    }
    BaseTable scrambleTable=((AsyncAggExecutionNode)asyncNode).getScrambleTables().get(0);
    Dimension dimension=new Dimension(scrambleTable.getSchemaName(),scrambleTable.getTableName(),index,index);
    result.setKeyValue(""String_Node_Str"",Arrays.asList(new HyperTableCube(Arrays.asList(dimension))));
  }
  return result;
}"
96019,"public double calculateScaleFactor(List<HyperTableCube> cubes){
  double executedRatio=0;
  ScrambleMeta scrambleMeta=((AsyncAggExecutionNode)(this.dependents.get(0))).getScrambleMeta();
  int totalSize=1;
  for (  Dimension d : cubes.get(0).getDimensions()) {
    int blockCount=scrambleMeta.getAggregationBlockCount(d.getSchemaName(),d.getTableName());
    totalSize=totalSize * blockCount;
  }
  int count=0;
  for (  HyperTableCube cube : cubes) {
    int volume=1;
    for (    Dimension d : cube.getDimensions()) {
      volume=volume * d.length();
    }
    count+=volume;
  }
  return totalSize / count;
}","public double calculateScaleFactor(List<HyperTableCube> cubes){
  AsyncAggExecutionNode asyncNode;
  if (this.getParents().size() == 2) {
    asyncNode=(AsyncAggExecutionNode)this.getParents().get(1);
  }
 else {
    asyncNode=this.getParents().get(0).getParents().size() == 2 ? (AsyncAggExecutionNode)this.getParents().get(0).getParents().get(1) : (AsyncAggExecutionNode)this.getParents().get(0).getParents().get(0);
  }
  ScrambleMeta scrambleMeta=asyncNode.getScrambleMeta();
  int totalSize=1;
  for (  Dimension d : cubes.get(0).getDimensions()) {
    int blockCount=scrambleMeta.getAggregationBlockCount(d.getSchemaName(),d.getTableName());
    totalSize=totalSize * blockCount;
  }
  int count=0;
  for (  HyperTableCube cube : cubes) {
    int volume=1;
    for (    Dimension d : cube.getDimensions()) {
      volume=volume * d.length();
    }
    count+=volume;
  }
  return totalSize / count;
}"
96020,"public static AsyncAggScaleExecutionNode create(QueryExecutionPlan plan,AggExecutionNode aggNode) throws VerdictDBException {
  AsyncAggScaleExecutionNode node=new AsyncAggScaleExecutionNode(plan);
  List<SelectItem> newSelectList=aggNode.getSelectQuery().deepcopy().getSelectList();
  for (  SelectItem selectItem : newSelectList) {
    if (selectItem instanceof AliasedColumn) {
      int index=newSelectList.indexOf(selectItem);
      UnnamedColumn col=((AliasedColumn)selectItem).getColumn();
      if (AsyncAggScaleExecutionNode.isAggregateColumn(col)) {
        ColumnOp aggColumn=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(node.scaleFactor),col));
        node.aggColumnlist.add(aggColumn);
        newSelectList.set(index,new AliasedColumn(aggColumn,((AliasedColumn)selectItem).getAliasName()));
      }
    }
  }
  Pair<BaseTable,ExecutionTokenQueue> baseAndQueue=node.createPlaceHolderTable(""String_Node_Str"");
  SelectQuery query=SelectQuery.create(newSelectList,baseAndQueue.getLeft());
  node.setSelectQuery(query);
  for (  QueryExecutionNode parent : aggNode.getParents()) {
    int index=parent.dependents.indexOf(aggNode);
    ExecutionTokenQueue queue=new ExecutionTokenQueue();
    parent.getListeningQueues().set(index,queue);
    node.addBroadcastingQueue(queue);
    parent.dependents.set(index,node);
  }
  aggNode.getBroadcastingQueues().clear();
  aggNode.addBroadcastingQueue(baseAndQueue.getRight());
  aggNode.getParents().clear();
  aggNode.getParents().add(node);
  return node;
}","public static AsyncAggScaleExecutionNode create(QueryExecutionPlan plan,AggExecutionNode aggNode) throws VerdictDBException {
  AsyncAggScaleExecutionNode node=new AsyncAggScaleExecutionNode(plan);
  Pair<BaseTable,ExecutionTokenQueue> baseAndQueue=node.createPlaceHolderTable(""String_Node_Str"");
  List<SelectItem> newSelectList=aggNode.getSelectQuery().deepcopy().getSelectList();
  for (  SelectItem selectItem : newSelectList) {
    if (selectItem instanceof AliasedColumn) {
      int index=newSelectList.indexOf(selectItem);
      UnnamedColumn col=((AliasedColumn)selectItem).getColumn();
      if (AsyncAggScaleExecutionNode.isAggregateColumn(col)) {
        ColumnOp aggColumn=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(node.scaleFactor),new BaseColumn(""String_Node_Str"",((AliasedColumn)selectItem).getAliasName())));
        node.aggColumnlist.add(aggColumn);
        newSelectList.set(index,new AliasedColumn(aggColumn,((AliasedColumn)selectItem).getAliasName()));
      }
 else {
        newSelectList.set(index,new AliasedColumn(new BaseColumn(""String_Node_Str"",((AliasedColumn)selectItem).getAliasName()),((AliasedColumn)selectItem).getAliasName()));
      }
    }
  }
  SelectQuery query=SelectQuery.create(newSelectList,baseAndQueue.getLeft());
  node.setSelectQuery(query);
  for (  QueryExecutionNode parent : aggNode.getParents()) {
    int index=parent.dependents.indexOf(aggNode);
    ExecutionTokenQueue queue=new ExecutionTokenQueue();
    if (parent instanceof AsyncAggExecutionNode) {
      node.addBroadcastingQueue(parent.getListeningQueue(0));
    }
 else {
      parent.getListeningQueues().set(index,queue);
      node.addBroadcastingQueue(queue);
    }
    parent.dependents.set(index,node);
    node.addParent(parent);
  }
  aggNode.getBroadcastingQueues().clear();
  aggNode.addBroadcastingQueue(baseAndQueue.getRight());
  aggNode.getParents().clear();
  node.addDependency(aggNode);
  return node;
}"
96021,"void compressTwoNode(QueryExecutionNode node,QueryExecutionNode parent){
  BaseTable placeholderTableinParent=((QueryExecutionNodeWithPlaceHolders)parent).getPlaceholderTables().get(parent.dependents.indexOf(node));
  if (parent.selectQuery.getFromList().contains(placeholderTableinParent)) {
    int index=parent.selectQuery.getFromList().indexOf(placeholderTableinParent);
    node.selectQuery.setAliasName(parent.selectQuery.getFromList().get(index).getAliasName().get());
    parent.selectQuery.getFromList().set(index,node.selectQuery);
  }
 else {
    List<SubqueryColumn> placeholderTablesinFilter=((QueryExecutionNodeWithPlaceHolders)parent).getPlaceholderTablesinFilter();
    for (    SubqueryColumn filter : placeholderTablesinFilter) {
      if (filter.getSubquery().getFromList().size() == 1 && filter.getSubquery().getFromList().get(0).equals(placeholderTableinParent)) {
        filter.setSubquery(node.selectQuery);
      }
    }
  }
  parent.getListeningQueues().removeAll(node.broadcastingQueues);
  parent.getListeningQueues().addAll(node.getListeningQueues());
  parent.dependents.remove(node);
  parent.dependents.addAll(node.dependents);
  for (  QueryExecutionNode dependent : node.dependents) {
    dependent.parents.remove(node);
    dependent.parents.add(parent);
  }
}","void compressTwoNode(QueryExecutionNode node,QueryExecutionNode parent){
  BaseTable placeholderTableinParent=((QueryExecutionNodeWithPlaceHolders)parent).getPlaceholderTables().get(parent.dependents.indexOf(node));
  ((QueryExecutionNodeWithPlaceHolders)parent).getPlaceholderTables().remove(placeholderTableinParent);
  if (parent.selectQuery.getFromList().contains(placeholderTableinParent)) {
    int index=parent.selectQuery.getFromList().indexOf(placeholderTableinParent);
    node.selectQuery.setAliasName(parent.selectQuery.getFromList().get(index).getAliasName().get());
    parent.selectQuery.getFromList().set(index,node.selectQuery);
  }
 else {
    List<SubqueryColumn> placeholderTablesinFilter=((QueryExecutionNodeWithPlaceHolders)parent).getPlaceholderTablesinFilter();
    for (    SubqueryColumn filter : placeholderTablesinFilter) {
      if (filter.getSubquery().getFromList().size() == 1 && filter.getSubquery().getFromList().get(0).equals(placeholderTableinParent)) {
        filter.setSubquery(node.selectQuery);
      }
    }
  }
  parent.getListeningQueues().removeAll(node.broadcastingQueues);
  parent.getListeningQueues().addAll(node.getListeningQueues());
  parent.getLatestResults().clear();
  for (int i=0; i < parent.getLatestResults().size(); i++) {
    parent.getLatestResults().add(Optional.<ExecutionInfoToken>absent());
  }
  parent.dependents.remove(node);
  parent.dependents.addAll(node.dependents);
  for (  QueryExecutionNode dependent : node.dependents) {
    dependent.parents.remove(node);
    dependent.parents.add(parent);
  }
}"
96022,"/** 
 * Converts the root node and its descendants into the configuration that enables progressive aggregation. Basically aggregate subqueries are blocking operations while others operations are divided into smaller- scale operations (which involve different portions of data).
 * @param nodeBlock
 * @return Returns the root of the multiple aggregation nodes (each of which involves different combinationsof partitions)
 * @throws VerdictDBValueException 
 */
public QueryExecutionNode convertToProgressiveAgg() throws VerdictDBValueException {
  List<QueryExecutionNode> individualAggNodes=new ArrayList<>();
  List<QueryExecutionNode> combiners=new ArrayList<>();
  ScrambleMeta scrambleMeta=plan.getScrambleMeta();
  List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodes=identifyScrambledNodes(scrambleMeta,blockNodes);
  List<Pair<String,String>> scrambles=new ArrayList<>();
  for (  Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodes) {
    String schemaName=a.getRight().getLeft();
    String tableName=a.getRight().getMiddle();
    scrambles.add(Pair.of(schemaName,tableName));
  }
  AggBlockMeta aggMeta=new AggBlockMeta(scrambleMeta,scrambles);
  for (int i=0; i < aggMeta.totalBlockAggCount(); i++) {
    AggExecutionNodeBlock copy=deepcopyExcludingDependentAggregates();
    List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodeAndTableName=identifyScrambledNodes(scrambleMeta,copy.getNodesInBlock());
    for (    Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodeAndTableName) {
      QueryExecutionNode scrambledNode=a.getLeft();
      String schemaName=a.getRight().getLeft();
      String tableName=a.getRight().getMiddle();
      String aliasName=a.getRight().getRight();
      Pair<Integer,Integer> span=aggMeta.getAggBlockSpanForTable(schemaName,tableName,i);
      String aggblockColumn=scrambleMeta.getAggregationBlockColumn(schemaName,tableName);
      SelectQuery q=(SelectQuery)scrambledNode.getSelectQuery();
      if (aliasName == null) {
        throw new VerdictDBValueException(String.format(""String_Node_Str"",schemaName,tableName));
      }
      int left=span.getLeft();
      int right=span.getRight();
      if (left == right) {
        q.addFilterByAnd(ColumnOp.equal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
      }
 else {
        q.addFilterByAnd(ColumnOp.greaterequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
        q.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(right)));
      }
    }
    individualAggNodes.add(copy.getBlockRootNode());
  }
  for (  QueryExecutionNode n : individualAggNodes) {
    n.clearBroadcastingQueues();
  }
  for (int i=1; i < aggMeta.totalBlockAggCount(); i++) {
    AggCombinerExecutionNode combiner;
    if (i == 1) {
      combiner=AggCombinerExecutionNode.create(plan,individualAggNodes.get(0),individualAggNodes.get(1));
    }
 else {
      combiner=AggCombinerExecutionNode.create(plan,combiners.get(i - 2),individualAggNodes.get(i));
    }
    combiners.add(combiner);
  }
  QueryExecutionNode newRoot=AsyncAggExecutionNode.create(plan,individualAggNodes,combiners);
  List<ExecutionTokenQueue> broadcastingQueue=blockRoot.getBroadcastingQueues();
  for (  ExecutionTokenQueue queue : broadcastingQueue) {
    newRoot.addBroadcastingQueue(queue);
  }
  return newRoot;
}","/** 
 * Converts the root node and its descendants into the configuration that enables progressive aggregation. Basically aggregate subqueries are blocking operations while others operations are divided into smaller- scale operations (which involve different portions of data).
 * @param nodeBlock
 * @return Returns the root of the multiple aggregation nodes (each of which involves different combinationsof partitions)
 * @throws VerdictDBValueException 
 */
public QueryExecutionNode convertToProgressiveAgg() throws VerdictDBValueException {
  List<QueryExecutionNode> individualAggNodes=new ArrayList<>();
  List<QueryExecutionNode> combiners=new ArrayList<>();
  ScrambleMeta scrambleMeta=plan.getScrambleMeta();
  List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodes=identifyScrambledNodes(scrambleMeta,blockNodes);
  List<Pair<String,String>> scrambles=new ArrayList<>();
  for (  Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodes) {
    String schemaName=a.getRight().getLeft();
    String tableName=a.getRight().getMiddle();
    scrambles.add(Pair.of(schemaName,tableName));
  }
  AggBlockMeta aggMeta=new AggBlockMeta(scrambleMeta,scrambles);
  for (int i=0; i < aggMeta.totalBlockAggCount(); i++) {
    AggExecutionNodeBlock copy=deepcopyExcludingDependentAggregates();
    List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodeAndTableName=identifyScrambledNodes(scrambleMeta,copy.getNodesInBlock());
    for (    Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodeAndTableName) {
      QueryExecutionNode scrambledNode=a.getLeft();
      String schemaName=a.getRight().getLeft();
      String tableName=a.getRight().getMiddle();
      String aliasName=a.getRight().getRight();
      Pair<Integer,Integer> span=aggMeta.getAggBlockSpanForTable(schemaName,tableName,i);
      String aggblockColumn=scrambleMeta.getAggregationBlockColumn(schemaName,tableName);
      SelectQuery q=(SelectQuery)scrambledNode.getSelectQuery();
      if (aliasName == null) {
        throw new VerdictDBValueException(String.format(""String_Node_Str"",schemaName,tableName));
      }
      int left=span.getLeft();
      int right=span.getRight();
      if (left == right) {
        q.addFilterByAnd(ColumnOp.equal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
      }
 else {
        q.addFilterByAnd(ColumnOp.greaterequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
        q.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(right)));
      }
    }
    individualAggNodes.add(copy.getBlockRootNode());
  }
  for (  QueryExecutionNode n : individualAggNodes) {
    n.getParents().clear();
    n.clearBroadcastingQueues();
  }
  for (int i=1; i < aggMeta.totalBlockAggCount(); i++) {
    AggCombinerExecutionNode combiner;
    if (i == 1) {
      combiner=AggCombinerExecutionNode.create(plan,individualAggNodes.get(0),individualAggNodes.get(1));
    }
 else {
      combiner=AggCombinerExecutionNode.create(plan,combiners.get(i - 2),individualAggNodes.get(i));
    }
    combiners.add(combiner);
  }
  QueryExecutionNode newRoot=AsyncAggExecutionNode.create(plan,individualAggNodes,combiners);
  List<ExecutionTokenQueue> broadcastingQueue=blockRoot.getBroadcastingQueues();
  for (  ExecutionTokenQueue queue : broadcastingQueue) {
    newRoot.addBroadcastingQueue(queue);
  }
  return newRoot;
}"
96023,"@BeforeClass public static void setupH2Database() throws SQLException, VerdictDBException {
  final String DB_CONNECTION=""String_Node_Str"";
  final String DB_USER=""String_Node_Str"";
  final String DB_PASSWORD=""String_Node_Str"";
  conn=DriverManager.getConnection(DB_CONNECTION,DB_USER,DB_PASSWORD);
  stmt=conn.createStatement();
  stmt.execute(String.format(""String_Node_Str"",originalSchema));
  stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,originalTable));
  for (int i=0; i < 10; i++) {
    stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,originalTable,i,(double)i + 1));
  }
  stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,smallTable));
  UniformScrambler scrambler=new UniformScrambler(originalSchema,originalTable,originalSchema,""String_Node_Str"",aggBlockCount);
  CreateTableAsSelectQuery scramblingQuery=scrambler.createQuery();
  stmt.executeUpdate(QueryToSql.convert(new H2Syntax(),scramblingQuery));
  ScrambleMetaForTable tablemeta=scrambler.generateMeta();
  scrambledTable=tablemeta.getTableName();
  meta.insertScrambleMetaEntry(tablemeta);
  staticMetaData.setDefaultSchema(originalSchema);
  List<Pair<String,Integer>> arr=new ArrayList<>();
  arr.addAll(Arrays.asList(new ImmutablePair<>(""String_Node_Str"",BIGINT),new ImmutablePair<>(""String_Node_Str"",DOUBLE)));
  staticMetaData.addTableData(new StaticMetaData.TableInfo(originalSchema,""String_Node_Str""),arr);
  arr=new ArrayList<>();
  arr.addAll(Arrays.asList(new ImmutablePair<>(""String_Node_Str"",BIGINT),new ImmutablePair<>(""String_Node_Str"",DOUBLE)));
  staticMetaData.addTableData(new StaticMetaData.TableInfo(originalSchema,smallTable),arr);
}","@BeforeClass public static void setupH2Database() throws SQLException, VerdictDBException {
  final String DB_CONNECTION=""String_Node_Str"";
  final String DB_USER=""String_Node_Str"";
  final String DB_PASSWORD=""String_Node_Str"";
  conn=DriverManager.getConnection(DB_CONNECTION,DB_USER,DB_PASSWORD);
  stmt=conn.createStatement();
  stmt.execute(String.format(""String_Node_Str"",originalSchema));
  stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,originalTable));
  for (int i=0; i < 10; i++) {
    stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,originalTable,i,(double)i + 1));
  }
  stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,smallTable));
  for (int i=0; i < 10; i++) {
    stmt.executeUpdate(String.format(""String_Node_Str"",originalSchema,smallTable,i,(double)i + 1));
  }
  UniformScrambler scrambler=new UniformScrambler(originalSchema,originalTable,originalSchema,""String_Node_Str"",aggBlockCount);
  CreateTableAsSelectQuery scramblingQuery=scrambler.createQuery();
  stmt.executeUpdate(QueryToSql.convert(new H2Syntax(),scramblingQuery));
  ScrambleMetaForTable tablemeta=scrambler.generateMeta();
  scrambledTable=tablemeta.getTableName();
  meta.insertScrambleMetaEntry(tablemeta);
  staticMetaData.setDefaultSchema(originalSchema);
  List<Pair<String,Integer>> arr=new ArrayList<>();
  arr.addAll(Arrays.asList(new ImmutablePair<>(""String_Node_Str"",BIGINT),new ImmutablePair<>(""String_Node_Str"",DOUBLE)));
  staticMetaData.addTableData(new StaticMetaData.TableInfo(originalSchema,""String_Node_Str""),arr);
  arr=new ArrayList<>();
  arr.addAll(Arrays.asList(new ImmutablePair<>(""String_Node_Str"",BIGINT),new ImmutablePair<>(""String_Node_Str"",DOUBLE)));
  staticMetaData.addTableData(new StaticMetaData.TableInfo(originalSchema,smallTable),arr);
}"
96024,"@Test public void ScrambleTableTest() throws VerdictDBException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  assertEquals(2,queryExecutionPlan.getRootNode().dependents.get(0).dependents.get(0).getParents().size());
}","@Test public void ScrambleTableTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().dependents.get(0)).addScrambleTable(new BaseTable(originalSchema,""String_Node_Str""));
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().dependents.get(0)).setScrambleMeta(meta);
  queryExecutionPlan.setScalingNode();
  stmt.execute(""String_Node_Str"");
  queryExecutionPlan.root.executeAndWaitForTermination(new JdbcConnection(conn,new H2Syntax()));
  stmt.execute(""String_Node_Str"");
}"
96025,"@Test public void NestedAggregateWithScrambleTableHavingCommonChildrenTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(null,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.dependents.get(0).getDependents().remove(0);
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().remove(0);
  asyncAggExecutionNode.addBroadcastingQueue(queryExecutionPlan.root.dependents.get(0).generateListeningQueue());
  queryExecutionPlan.root.dependents.get(0).addDependency(asyncAggExecutionNode);
  SelectQuery commonQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode common=AggExecutionNode.create(null,commonQuery);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  leftNode.addDependency(common);
  common.addBroadcastingQueue(leftNode.generateListeningQueue());
  rightNode.addDependency(common);
  common.addBroadcastingQueue(rightNode.generateListeningQueue());
  QueryExecutionNode copy=queryExecutionPlan.root.getDependent(0).deepcopy();
  queryExecutionPlan.compress();
  SelectQuery compressed=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compressed.setAliasName(""String_Node_Str"");
  assertEquals(queryExecutionPlan.root.selectQuery.getFromList().get(0),compressed);
  assertEquals(queryExecutionPlan.root.dependents.get(0),asyncAggExecutionNode);
  assertEquals(copy.dependents.get(0),queryExecutionPlan.root.dependents.get(0));
}","@Test public void NestedAggregateWithScrambleTableHavingCommonChildrenTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(null,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.dependents.get(0).getDependents().remove(0);
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().remove(0);
  ExecutionTokenQueue q=new ExecutionTokenQueue();
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().add(q);
  asyncAggExecutionNode.addBroadcastingQueue(q);
  queryExecutionPlan.root.dependents.get(0).addDependency(asyncAggExecutionNode);
  SelectQuery commonQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode common=AggExecutionNode.create(null,commonQuery);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  leftNode.addDependency(common);
  common.addBroadcastingQueue(leftNode.generateListeningQueue());
  rightNode.addDependency(common);
  common.addBroadcastingQueue(rightNode.generateListeningQueue());
  QueryExecutionNode copy=queryExecutionPlan.root.getDependent(0).deepcopy();
  queryExecutionPlan.compress();
  SelectQuery compressed=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compressed.setAliasName(""String_Node_Str"");
  assertEquals(queryExecutionPlan.root.selectQuery.getFromList().get(0),compressed);
  assertEquals(queryExecutionPlan.root.dependents.get(0),asyncAggExecutionNode);
  assertEquals(copy.dependents.get(0),queryExecutionPlan.root.dependents.get(0));
}"
96026,"@Test public void NestedAggregateWithScrambleTableTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(null,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.dependents.get(0).getDependents().remove(0);
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().remove(0);
  asyncAggExecutionNode.addBroadcastingQueue(queryExecutionPlan.root.dependents.get(0).generateListeningQueue());
  queryExecutionPlan.root.dependents.get(0).addDependency(asyncAggExecutionNode);
  QueryExecutionNode copy=queryExecutionPlan.root.getDependent(0).deepcopy();
  queryExecutionPlan.compress();
  SelectQuery compressed=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compressed.setAliasName(""String_Node_Str"");
  assertEquals(queryExecutionPlan.root.selectQuery.getFromList().get(0),compressed);
  assertEquals(queryExecutionPlan.root.dependents.get(0),asyncAggExecutionNode);
  assertEquals(copy.dependents.get(0),queryExecutionPlan.root.dependents.get(0));
}","@Test public void NestedAggregateWithScrambleTableTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(null,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.dependents.get(0).getDependents().remove(0);
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().remove(0);
  ExecutionTokenQueue q=new ExecutionTokenQueue();
  queryExecutionPlan.root.dependents.get(0).getListeningQueues().add(q);
  asyncAggExecutionNode.addBroadcastingQueue(q);
  queryExecutionPlan.root.dependents.get(0).addDependency(asyncAggExecutionNode);
  QueryExecutionNode copy=queryExecutionPlan.root.getDependent(0).deepcopy();
  queryExecutionPlan.compress();
  SelectQuery compressed=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compressed.setAliasName(""String_Node_Str"");
  assertEquals(queryExecutionPlan.root.selectQuery.getFromList().get(0),compressed);
  assertEquals(queryExecutionPlan.root.dependents.get(0),asyncAggExecutionNode);
  assertEquals(copy.dependents.get(0),queryExecutionPlan.root.dependents.get(0));
}"
96027,"@Test public void SimpleAggregateWithScrambleTableTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(queryExecutionPlan,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.getDependents().remove(0);
  queryExecutionPlan.root.getListeningQueues().remove(0);
  asyncAggExecutionNode.addBroadcastingQueue(queryExecutionPlan.root.generateListeningQueue());
  queryExecutionPlan.root.addDependency(asyncAggExecutionNode);
  QueryExecutionNode copy=queryExecutionPlan.root.deepcopy();
  queryExecutionPlan.compress();
  assertEquals(asyncAggExecutionNode,queryExecutionPlan.root.dependents.get(0));
  assertEquals(copy.selectQuery,queryExecutionPlan.root.selectQuery);
}","@Test public void SimpleAggregateWithScrambleTableTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  BaseTable base=new BaseTable(originalSchema,originalTable,""String_Node_Str"");
  SelectQuery leftQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  leftQuery.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  SelectQuery rightQuery=SelectQuery.create(new AliasedColumn(ColumnOp.count(),""String_Node_Str""),base);
  rightQuery.addFilterByAnd(ColumnOp.greater(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5.0)));
  AggExecutionNode leftNode=AggExecutionNode.create(null,leftQuery);
  AggExecutionNode rightNode=AggExecutionNode.create(null,rightQuery);
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  AggCombinerExecutionNode combiner=AggCombinerExecutionNode.create(queryExecutionPlan,leftNode,rightNode);
  combiner.addBroadcastingQueue(queue);
  AsyncAggExecutionNode asyncAggExecutionNode=AsyncAggExecutionNode.create(queryExecutionPlan,Arrays.<QueryExecutionNode>asList(leftNode,rightNode),Arrays.<QueryExecutionNode>asList(combiner));
  queryExecutionPlan.root.getDependents().remove(0);
  queryExecutionPlan.root.getListeningQueues().remove(0);
  ExecutionTokenQueue q=new ExecutionTokenQueue();
  queryExecutionPlan.root.getListeningQueues().add(q);
  asyncAggExecutionNode.addBroadcastingQueue(q);
  queryExecutionPlan.root.addDependency(asyncAggExecutionNode);
  QueryExecutionNode copy=queryExecutionPlan.root.deepcopy();
  queryExecutionPlan.compress();
  assertEquals(asyncAggExecutionNode,queryExecutionPlan.root.dependents.get(0));
  assertEquals(copy.selectQuery,queryExecutionPlan.root.selectQuery);
}"
96028,public boolean execute(String query) throws VerdictDBDbmsException ;,public DbmsQueryResult execute(String query) throws VerdictDBDbmsException ;
96029,"@Override public boolean execute(String sql) throws VerdictDBDbmsException {
  System.out.println(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return doesResultExist;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","@Override public DbmsQueryResult execute(String sql) throws VerdictDBDbmsException {
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
96030,"public DbmsQueryResult executeQuery(String sql) throws VerdictDBDbmsException {
  execute(sql);
  return getResult();
}","public DbmsQueryResult executeQuery(String sql) throws VerdictDBDbmsException {
  return execute(sql);
}"
96031,"@Override public boolean execute(String query) throws VerdictDBDbmsException {
  return false;
}","@Override public DbmsQueryResult execute(String query) throws VerdictDBDbmsException {
  return null;
}"
96032,"public ExecutableNodeRunner(DbmsConnection conn,ExecutableNode node){
  this.conn=conn;
  this.node=node;
}","public ExecutableNodeRunner(DbmsConnection conn,ExecutableNode node){
  this.conn=conn;
  this.node=node;
  this.dependentCount=node.getDependentNodeCount();
}"
96033,"@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken());
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    if (doesIncludeFailure(tokens)) {
      broadcast(ExecutionInfoToken.failureToken());
      break;
    }
    if (areAllSuccess(tokens)) {
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken());
      break;
    }
  }
}","@Override public void run(){
  if (node.getSourceQueues().size() == 0) {
    try {
      executeAndBroadcast(Arrays.<ExecutionInfoToken>asList());
      broadcast(ExecutionInfoToken.successToken());
      return;
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
    }
  }
  while (true) {
    List<ExecutionInfoToken> tokens=retrieve();
    if (tokens == null) {
      continue;
    }
    if (doesIncludeFailure(tokens)) {
      broadcast(ExecutionInfoToken.failureToken());
      break;
    }
    if (areAllSuccess(tokens)) {
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    try {
      executeAndBroadcast(tokens);
    }
 catch (    VerdictDBException e) {
      e.printStackTrace();
      broadcast(ExecutionInfoToken.failureToken(e));
      break;
    }
  }
}"
96034,"boolean areAllSuccess(List<ExecutionInfoToken> latestResults){
  for (  ExecutionInfoToken t : latestResults) {
    if (t.isStatusToken()) {
    }
 else {
      return false;
    }
  }
  return true;
}","boolean areAllSuccess(List<ExecutionInfoToken> latestResults){
  for (  ExecutionInfoToken t : latestResults) {
    if (t.isSuccessToken()) {
      successSourceCount++;
    }
 else {
      return false;
    }
  }
  if (successSourceCount == dependentCount) {
    return true;
  }
 else {
    return false;
  }
}"
96035,"void executeAndBroadcast(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  ExecutionInfoToken resultToken=execute(tokens);
  broadcast(resultToken);
}","void executeAndBroadcast(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  ExecutionInfoToken resultToken=execute(tokens);
  if (resultToken != null) {
    broadcast(resultToken);
  }
}"
96036,"public ExecutionInfoToken execute(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  SqlConvertable sqlObj=node.createQuery(tokens);
  boolean doesResultExist=false;
  if (sqlObj != null) {
    String sql=QueryToSql.convert(conn.getSyntax(),sqlObj);
    doesResultExist=conn.execute(sql);
  }
  DbmsQueryResult intermediate=null;
  if (doesResultExist) {
    intermediate=conn.getResult();
  }
  return node.createToken(intermediate);
}","public ExecutionInfoToken execute(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  if (tokens.size() > 0 && tokens.get(0).isStatusToken()) {
    return null;
  }
  SqlConvertable sqlObj=node.createQuery(tokens);
  DbmsQueryResult intermediate=null;
  if (sqlObj != null) {
    String sql=QueryToSql.convert(conn.getSyntax(),sqlObj);
    intermediate=conn.execute(sql);
  }
  return node.createToken(intermediate);
}"
96037,"public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan){
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (reader.next() != null) {
  }
}","public static void runTillEnd(DbmsConnection conn,ExecutablePlan plan){
  ExecutionTokenReader reader=(new ExecutablePlanRunner(conn,plan)).getTokenReader();
  while (true) {
    ExecutionInfoToken token=reader.next();
    if (token == null) {
      break;
    }
 else {
    }
  }
}"
96038,"public static ExecutionInfoToken failureToken(){
  ExecutionInfoToken token=new ExecutionInfoToken();
  token.setKeyValue(""String_Node_Str"",""String_Node_Str"");
  return token;
}","public static ExecutionInfoToken failureToken(Exception e){
  ExecutionInfoToken token=new ExecutionInfoToken();
  token.setKeyValue(""String_Node_Str"",""String_Node_Str"");
  token.setKeyValue(""String_Node_Str"",e);
  return token;
}"
96039,"@Test public void nestedAggregateFromTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  StandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}","@Test public void nestedAggregateFromTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  ResultStandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}"
96040,"@Test public void simpleAggregateTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  StandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}","@Test public void simpleAggregateTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  ResultStandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}"
96041,"@Test public void nestedAggregateWithGroupbyTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  StandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}","@Test public void nestedAggregateWithGroupbyTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  ResultStandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}"
96042,"@Test public void aggregateWithGroupbyTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  StandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}","@Test public void aggregateWithGroupbyTest() throws VerdictDBException {
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  ResultStandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}"
96043,"@Test public void nestedAggregateFilterTest() throws VerdictDBException {
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  StandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}","@Test public void nestedAggregateFilterTest() throws VerdictDBException {
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  SelectQuery selectQuery=(SelectQuery)sqlToRelation.toRelation(sql);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(newSchema,null,selectQuery);
  queryExecutionPlan.getRoot().print();
  ResultStandardOutputPrinter.run(ExecutablePlanRunner.getResultReader(conn,queryExecutionPlan));
}"
96044,"@Override public ExecutionInfoToken executeNode(DbmsConnection conn,List<ExecutionInfoToken> downstreamResults) throws VerdictDBException {
  ExecutionInfoToken result=super.executeNode(conn,downstreamResults);
  if (parents.size() == 1 && (parents.get(0) instanceof AsyncAggExecutionNode || parents.get(0) instanceof AggCombinerExecutionNode)) {
    QueryExecutionNode asyncNode=parents.get(0);
    int index=0;
    while (!(asyncNode instanceof AsyncAggExecutionNode)) {
      asyncNode=asyncNode.parents.get(0);
      index++;
    }
    BaseTable scrambleTable=((AsyncAggExecutionNode)asyncNode).getScrambleTables().get(0);
    Dimension dimension=new Dimension(scrambleTable.getSchemaName(),scrambleTable.getTableName(),index,index);
    result.setKeyValue(""String_Node_Str"",Arrays.asList(new HyperTableCube(Arrays.asList(dimension))));
  }
  return result;
}","@Override public ExecutionInfoToken executeNode(DbmsConnection conn,List<ExecutionInfoToken> downstreamResults) throws VerdictDBException {
  ExecutionInfoToken result=super.executeNode(conn,downstreamResults);
  return result;
}"
96045,"public ExecutionInfoToken take(){
  try {
    return internalQueue.take();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return null;
}","public ExecutionInfoToken take(){
  try {
    return internalQueue.takeFirst();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return null;
}"
96046,"@Override public void run(){
  while (true) {
    if (listeningQueues.size() == 0) {
      int ret=process(conn,Arrays.<ExecutionInfoToken>asList());
      if (ret == 0) {
        broadcast(ExecutionInfoToken.successToken());
        setSuccess();
      }
 else {
        broadcast(ExecutionInfoToken.failureToken());
        setFailure();
      }
      break;
    }
    readLatestResultsFromDependents();
    if (doesFailedDependentExist()) {
      broadcast(ExecutionInfoToken.failureToken());
      setFailure();
      break;
    }
    if (areDependentsAllSuccess()) {
      broadcast(ExecutionInfoToken.successToken());
      setSuccess();
      break;
    }
    List<ExecutionInfoToken> latestResults=getLatestResultsIfAvailable();
    if (latestResults == null) {
      continue;
    }
    int ret=process(conn,latestResults);
    if (ret != 0) {
      broadcast(ExecutionInfoToken.failureToken());
      setFailure();
      break;
    }
  }
}","@Override public void run(){
  while (true) {
    if (listeningQueues.size() == 0) {
      int ret=process(conn,Arrays.<ExecutionInfoToken>asList());
      if (ret == 0) {
        setSuccess();
        broadcast(ExecutionInfoToken.successToken());
      }
 else {
        setFailure();
        broadcast(ExecutionInfoToken.failureToken());
      }
      break;
    }
    List<ExecutionInfoToken> latestResults=getResultsFromQueues();
    if (latestResults == null) {
      continue;
    }
    if (doesIncludeFailure(latestResults)) {
      setFailure();
      broadcast(ExecutionInfoToken.failureToken());
      break;
    }
    if (areAllSuccess(latestResults)) {
      setSuccess();
      broadcast(ExecutionInfoToken.successToken());
      break;
    }
    int ret=process(conn,latestResults);
    if (ret != 0) {
      setFailure();
      broadcast(ExecutionInfoToken.failureToken());
      break;
    }
  }
}"
96047,"void copyFields(QueryExecutionNode from,QueryExecutionNode to){
  to.selectQuery=from.selectQuery.deepcopy();
  to.status=from.status;
  to.parents.addAll(from.parents);
  to.dependents.addAll(from.dependents);
  to.broadcastingQueues.addAll(from.broadcastingQueues);
  to.listeningQueues.addAll(from.listeningQueues);
  to.latestResults.addAll(from.latestResults);
}","void copyFields(QueryExecutionNode from,QueryExecutionNode to){
  to.selectQuery=from.selectQuery.deepcopy();
  to.status=from.status;
  to.parents.addAll(from.parents);
  to.dependents.addAll(from.dependents);
  to.broadcastingQueues.addAll(from.broadcastingQueues);
  to.listeningQueues.addAll(from.listeningQueues);
}"
96048,"public ExecutionTokenQueue generateReplacementListeningQueue(int index) throws VerdictDBValueException {
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  listeningQueues.set(index,queue);
  if (listeningQueues.size() != latestResults.size()) {
    throw new VerdictDBValueException(""String_Node_Str"");
  }
  return queue;
}","public ExecutionTokenQueue generateReplacementListeningQueue(int index) throws VerdictDBValueException {
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  listeningQueues.set(index,queue);
  return queue;
}"
96049,"/** 
 * For multi-threading, run executeNode() on a separate thread.
 * @param resultQueue
 * @throws VerdictDBValueException 
 */
public void execute(final DbmsConnection conn,ExecutorService executor) throws VerdictDBValueException {
  if (listeningQueues.size() != latestResults.size()) {
    throw new VerdictDBValueException(""String_Node_Str"");
  }
  if (!getStatus().equals(""String_Node_Str"")) {
    return;
  }
  for (  QueryExecutionNode child : dependents) {
    child.execute(conn,executor);
  }
  setStatus(""String_Node_Str"");
  executor.submit(new Runnable(){
    int process(    DbmsConnection conn,    List<ExecutionInfoToken> tokens){
      try {
        ExecutionInfoToken rs=executeNode(conn,tokens);
        broadcast(rs);
        return 0;
      }
 catch (      VerdictDBException e) {
        e.printStackTrace();
      }
      return -1;
    }
    @Override public void run(){
      while (true) {
        if (listeningQueues.size() == 0) {
          int ret=process(conn,Arrays.<ExecutionInfoToken>asList());
          if (ret == 0) {
            broadcast(ExecutionInfoToken.successToken());
            setSuccess();
          }
 else {
            broadcast(ExecutionInfoToken.failureToken());
            setFailure();
          }
          break;
        }
        readLatestResultsFromDependents();
        if (doesFailedDependentExist()) {
          broadcast(ExecutionInfoToken.failureToken());
          setFailure();
          break;
        }
        if (areDependentsAllSuccess()) {
          broadcast(ExecutionInfoToken.successToken());
          setSuccess();
          break;
        }
        List<ExecutionInfoToken> latestResults=getLatestResultsIfAvailable();
        if (latestResults == null) {
          continue;
        }
        int ret=process(conn,latestResults);
        if (ret != 0) {
          broadcast(ExecutionInfoToken.failureToken());
          setFailure();
          break;
        }
      }
    }
  }
);
}","/** 
 * For multi-threading, run executeNode() on a separate thread.
 * @param resultQueue
 * @throws VerdictDBValueException 
 */
public void execute(final DbmsConnection conn,ExecutorService executor) throws VerdictDBValueException {
  if (!getStatus().equals(""String_Node_Str"")) {
    return;
  }
  for (  QueryExecutionNode child : dependents) {
    child.execute(conn,executor);
  }
  setStatus(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + this);
  executor.submit(new Runnable(){
    int process(    DbmsConnection conn,    List<ExecutionInfoToken> tokens){
      try {
        ExecutionInfoToken rs=executeNode(conn,tokens);
        broadcast(rs);
        return 0;
      }
 catch (      VerdictDBException e) {
        e.printStackTrace();
      }
      return -1;
    }
    @Override public void run(){
      while (true) {
        if (listeningQueues.size() == 0) {
          int ret=process(conn,Arrays.<ExecutionInfoToken>asList());
          if (ret == 0) {
            setSuccess();
            broadcast(ExecutionInfoToken.successToken());
          }
 else {
            setFailure();
            broadcast(ExecutionInfoToken.failureToken());
          }
          break;
        }
        List<ExecutionInfoToken> latestResults=getResultsFromQueues();
        if (latestResults == null) {
          continue;
        }
        if (doesIncludeFailure(latestResults)) {
          setFailure();
          broadcast(ExecutionInfoToken.failureToken());
          break;
        }
        if (areAllSuccess(latestResults)) {
          setSuccess();
          broadcast(ExecutionInfoToken.successToken());
          break;
        }
        int ret=process(conn,latestResults);
        if (ret != 0) {
          setFailure();
          broadcast(ExecutionInfoToken.failureToken());
          break;
        }
      }
    }
  }
);
}"
96050,"public ExecutionTokenQueue generateListeningQueue() throws VerdictDBValueException {
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  listeningQueues.add(queue);
  latestResults.add(Optional.<ExecutionInfoToken>absent());
  if (listeningQueues.size() != latestResults.size()) {
    throw new VerdictDBValueException(""String_Node_Str"");
  }
  return queue;
}","public ExecutionTokenQueue generateListeningQueue() throws VerdictDBValueException {
  ExecutionTokenQueue queue=new ExecutionTokenQueue();
  listeningQueues.add(queue);
  return queue;
}"
96051,"@Override public String toString(){
  return new ToStringBuilder(this,ToStringStyle.DEFAULT_STYLE).append(""String_Node_Str"",status).append(""String_Node_Str"",listeningQueues).append(""String_Node_Str"",broadcastingQueues).append(""String_Node_Str"",latestResults).append(""String_Node_Str"",selectQuery).toString();
}","@Override public String toString(){
  return new ToStringBuilder(this,ToStringStyle.DEFAULT_STYLE).append(""String_Node_Str"",status).append(""String_Node_Str"",listeningQueues).append(""String_Node_Str"",broadcastingQueues).append(""String_Node_Str"",selectQuery).toString();
}"
96052,"/** 
 * Converts the root node and its descendants into the configuration that enables progressive aggregation. Basically aggregate subqueries are blocking operations while others operations are divided into smaller- scale operations (which involve different portions of data).
 * @param nodeBlock
 * @return Returns the root of the multiple aggregation nodes (each of which involves different combinationsof partitions)
 * @throws VerdictDBValueException 
 */
public QueryExecutionNode convertToProgressiveAgg() throws VerdictDBValueException {
  List<QueryExecutionNode> individualAggNodes=new ArrayList<>();
  List<QueryExecutionNode> combiners=new ArrayList<>();
  ScrambleMeta scrambleMeta=plan.getScrambleMeta();
  List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodes=identifyScrambledNodes(scrambleMeta,blockNodes);
  List<Pair<String,String>> scrambles=new ArrayList<>();
  for (  Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodes) {
    String schemaName=a.getRight().getLeft();
    String tableName=a.getRight().getMiddle();
    scrambles.add(Pair.of(schemaName,tableName));
  }
  AggBlockMeta aggMeta=new AggBlockMeta(scrambleMeta,scrambles);
  for (int i=0; i < aggMeta.totalBlockAggCount(); i++) {
    AggExecutionNodeBlock copy=deepcopyExcludingDependentAggregates();
    List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodeAndTableName=identifyScrambledNodes(scrambleMeta,copy.getNodesInBlock());
    for (    Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodeAndTableName) {
      QueryExecutionNode scrambledNode=a.getLeft();
      String schemaName=a.getRight().getLeft();
      String tableName=a.getRight().getMiddle();
      String aliasName=a.getRight().getRight();
      Pair<Integer,Integer> span=aggMeta.getAggBlockSpanForTable(schemaName,tableName,i);
      String aggblockColumn=scrambleMeta.getAggregationBlockColumn(schemaName,tableName);
      SelectQuery q=(SelectQuery)scrambledNode.getSelectQuery();
      if (aliasName == null) {
        throw new VerdictDBValueException(String.format(""String_Node_Str"",schemaName,tableName));
      }
      int left=span.getLeft();
      int right=span.getRight();
      if (left == right) {
        q.addFilterByAnd(ColumnOp.equal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
      }
 else {
        q.addFilterByAnd(ColumnOp.greaterequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
        q.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(right)));
      }
    }
    individualAggNodes.add(copy.getBlockRootNode());
  }
  for (  QueryExecutionNode n : individualAggNodes) {
    n.clearBroadcastingQueues();
  }
  for (int i=1; i < aggMeta.totalBlockAggCount(); i++) {
    AggCombinerExecutionNode combiner;
    if (i == 1) {
      combiner=AggCombinerExecutionNode.create(plan,individualAggNodes.get(0),individualAggNodes.get(1));
    }
 else {
      combiner=AggCombinerExecutionNode.create(plan,combiners.get(i - 2),individualAggNodes.get(i));
    }
    combiners.add(combiner);
  }
  QueryExecutionNode newRoot=AsyncAggExecutionNode.create(plan,individualAggNodes,combiners);
  List<ExecutionTokenQueue> broadcastingQueue=blockRoot.getBroadcastingQueues();
  for (  ExecutionTokenQueue queue : broadcastingQueue) {
    newRoot.addBroadcastingQueue(queue);
  }
  return newRoot;
}","/** 
 * Converts the root node and its descendants into the configuration that enables progressive aggregation. Basically aggregate subqueries are blocking operations while others operations are divided into smaller- scale operations (which involve different portions of data).
 * @param nodeBlock
 * @return Returns the root of the multiple aggregation nodes (each of which involves different combinationsof partitions)
 * @throws VerdictDBValueException 
 */
public QueryExecutionNode convertToProgressiveAgg() throws VerdictDBValueException {
  List<QueryExecutionNode> individualAggNodes=new ArrayList<>();
  List<QueryExecutionNode> combiners=new ArrayList<>();
  ScrambleMeta scrambleMeta=plan.getScrambleMeta();
  List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodes=identifyScrambledNodes(scrambleMeta,blockNodes);
  List<Pair<String,String>> scrambles=new ArrayList<>();
  for (  Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodes) {
    String schemaName=a.getRight().getLeft();
    String tableName=a.getRight().getMiddle();
    scrambles.add(Pair.of(schemaName,tableName));
  }
  AggBlockMeta aggMeta=new AggBlockMeta(scrambleMeta,scrambles);
  for (int i=0; i < aggMeta.totalBlockAggCount(); i++) {
    AggExecutionNodeBlock copy=deepcopyExcludingDependentAggregates();
    QueryExecutionNode aggroot=copy.getBlockRootNode();
    for (    QueryExecutionNode parent : aggroot.getParents()) {
      parent.getDependents().remove(aggroot);
    }
    aggroot.getParents().clear();
    List<Pair<QueryExecutionNode,Triple<String,String,String>>> scrambledNodeAndTableName=identifyScrambledNodes(scrambleMeta,copy.getNodesInBlock());
    for (    Pair<QueryExecutionNode,Triple<String,String,String>> a : scrambledNodeAndTableName) {
      QueryExecutionNode scrambledNode=a.getLeft();
      String schemaName=a.getRight().getLeft();
      String tableName=a.getRight().getMiddle();
      String aliasName=a.getRight().getRight();
      Pair<Integer,Integer> span=aggMeta.getAggBlockSpanForTable(schemaName,tableName,i);
      String aggblockColumn=scrambleMeta.getAggregationBlockColumn(schemaName,tableName);
      SelectQuery q=(SelectQuery)scrambledNode.getSelectQuery();
      if (aliasName == null) {
        throw new VerdictDBValueException(String.format(""String_Node_Str"",schemaName,tableName));
      }
      int left=span.getLeft();
      int right=span.getRight();
      if (left == right) {
        q.addFilterByAnd(ColumnOp.equal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
      }
 else {
        q.addFilterByAnd(ColumnOp.greaterequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(left)));
        q.addFilterByAnd(ColumnOp.lessequal(new BaseColumn(aliasName,aggblockColumn),ConstantColumn.valueOf(right)));
      }
    }
    individualAggNodes.add(aggroot);
  }
  for (  QueryExecutionNode n : individualAggNodes) {
    n.clearBroadcastingQueues();
  }
  for (int i=1; i < aggMeta.totalBlockAggCount(); i++) {
    AggCombinerExecutionNode combiner;
    if (i == 1) {
      combiner=AggCombinerExecutionNode.create(plan,individualAggNodes.get(0),individualAggNodes.get(1));
    }
 else {
      combiner=AggCombinerExecutionNode.create(plan,combiners.get(i - 2),individualAggNodes.get(i));
    }
    combiners.add(combiner);
  }
  QueryExecutionNode newRoot=AsyncAggExecutionNode.create(plan,individualAggNodes,combiners);
  List<ExecutionTokenQueue> broadcastingQueue=blockRoot.getBroadcastingQueues();
  for (  ExecutionTokenQueue queue : broadcastingQueue) {
    newRoot.addBroadcastingQueue(queue);
  }
  return newRoot;
}"
96053,"private List<SelectItem> replaceSelectList(List<SelectItem> selectItemList) throws VerdictDBDbmsException {
  List<SelectItem> newSelectItemList=new ArrayList<>();
  for (  SelectItem sel : selectItemList) {
    if (!(sel instanceof AliasedColumn) && !(sel instanceof AsteriskColumn)) {
      if (sel instanceof BaseColumn) {
        sel=replaceBaseColumn((BaseColumn)sel);
        colNameAndColAlias.put(((BaseColumn)sel).getColumnName(),""String_Node_Str"" + itemID);
        newSelectItemList.add(new AliasedColumn((BaseColumn)sel,""String_Node_Str"" + itemID++));
      }
 else       if (sel instanceof ColumnOp) {
        sel=replaceFilter((ColumnOp)sel);
        if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
      }
    }
 else {
      if (sel instanceof AliasedColumn) {
        ((AliasedColumn)sel).setColumn(replaceFilter(((AliasedColumn)sel).getColumn()));
      }
      newSelectItemList.add(sel);
      if (sel instanceof AliasedColumn && ((AliasedColumn)sel).getColumn() instanceof BaseColumn) {
        colNameAndColAlias.put(((BaseColumn)((AliasedColumn)sel).getColumn()).getColumnName(),((AliasedColumn)sel).getAliasName());
      }
    }
  }
  return newSelectItemList;
}","private List<SelectItem> replaceSelectList(List<SelectItem> selectItemList) throws VerdictDBDbmsException {
  List<SelectItem> newSelectItemList=new ArrayList<>();
  for (  SelectItem sel : selectItemList) {
    if (!(sel instanceof AliasedColumn) && !(sel instanceof AsteriskColumn)) {
      if (sel instanceof BaseColumn) {
        sel=replaceBaseColumn((BaseColumn)sel);
        colNameAndColAlias.put(((BaseColumn)sel).getColumnName(),((BaseColumn)sel).getColumnName());
        newSelectItemList.add(new AliasedColumn((BaseColumn)sel,((BaseColumn)sel).getColumnName()));
      }
 else       if (sel instanceof ColumnOp) {
        sel=replaceFilter((ColumnOp)sel);
        if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else         if (((ColumnOp)sel).getOpType().equals(""String_Node_Str"")) {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
 else {
          newSelectItemList.add(new AliasedColumn((ColumnOp)sel,""String_Node_Str"" + itemID++));
        }
      }
    }
 else {
      if (sel instanceof AliasedColumn) {
        ((AliasedColumn)sel).setColumn(replaceFilter(((AliasedColumn)sel).getColumn()));
      }
      newSelectItemList.add(sel);
      if (sel instanceof AliasedColumn && ((AliasedColumn)sel).getColumn() instanceof BaseColumn) {
        colNameAndColAlias.put(((BaseColumn)((AliasedColumn)sel).getColumn()).getColumnName(),((AliasedColumn)sel).getAliasName());
      }
    }
  }
  return newSelectItemList;
}"
96054,"private SelectAllExecutionNode(){
  super(null);
}","private SelectAllExecutionNode(QueryExecutionPlan plan){
  super(plan);
}"
96055,"public static SelectAllExecutionNode create(QueryExecutionPlan plan,SelectQuery query){
  SelectAllExecutionNode selectAll=new SelectAllExecutionNode();
  Pair<BaseTable,ExecutionTokenQueue> baseAndQueue=selectAll.createPlaceHolderTable(""String_Node_Str"");
  SelectQuery selectQuery=SelectQuery.create(new AsteriskColumn(),baseAndQueue.getLeft());
  selectAll.setSelectQuery(selectQuery);
  if (query.isAggregateQuery()) {
    AggExecutionNode dependent=AggExecutionNode.create(plan,query);
    dependent.addBroadcastingQueue(baseAndQueue.getRight());
    selectAll.addDependency(dependent);
  }
 else {
    ProjectionExecutionNode dependent=ProjectionExecutionNode.create(plan,query);
    dependent.addBroadcastingQueue(baseAndQueue.getRight());
    selectAll.addDependency(dependent);
  }
  return selectAll;
}","public static SelectAllExecutionNode create(QueryExecutionPlan plan,SelectQuery query){
  SelectAllExecutionNode selectAll=new SelectAllExecutionNode(plan);
  Pair<BaseTable,ExecutionTokenQueue> baseAndQueue=selectAll.createPlaceHolderTable(""String_Node_Str"");
  SelectQuery selectQuery=SelectQuery.create(new AsteriskColumn(),baseAndQueue.getLeft());
  selectAll.setSelectQuery(selectQuery);
  if (query.isAggregateQuery()) {
    AggExecutionNode dependent=AggExecutionNode.create(plan,query);
    dependent.addBroadcastingQueue(baseAndQueue.getRight());
    selectAll.addDependency(dependent);
  }
 else {
    ProjectionExecutionNode dependent=ProjectionExecutionNode.create(plan,query);
    dependent.addBroadcastingQueue(baseAndQueue.getRight());
    selectAll.addDependency(dependent);
  }
  return selectAll;
}"
96056,"@Override public QueryExecutionNode deepcopy(){
  SelectAllExecutionNode node=new SelectAllExecutionNode();
  copyFields(this,node);
  return node;
}","@Override public QueryExecutionNode deepcopy(){
  SelectAllExecutionNode node=new SelectAllExecutionNode(plan);
  copyFields(this,node);
  return node;
}"
96057,"public static AggregateFrame fromDmbsQueryResult(DbmsQueryResult result,List<String> nonaggColumnsName,List<Pair<String,String>> aggColumns) throws ValueException {
  List<String> colName=new ArrayList<>();
  List<Integer> colIndex=new ArrayList<>();
  List<String> aggColumnsName=new ArrayList<>();
  for (  Pair<String,String> pair : aggColumns) {
    aggColumnsName.add(pair.getKey());
  }
  HashSet<String> aggColumnsSet=new HashSet<>(aggColumnsName);
  HashSet<String> nonaggColumnsSet=new HashSet<>(nonaggColumnsName);
  List<Integer> aggColumnIndex=new ArrayList<>();
  List<Integer> nonaggColumnIndex=new ArrayList<>();
  List<String> orderedAggColumnName=new ArrayList<>();
  List<String> orderedNonaggColumnName=new ArrayList<>();
  List<Integer> columnTypes=new ArrayList<>();
  for (int i=0; i < result.getColumnCount(); i++) {
    colName.add(result.getColumnName(i));
    columnTypes.add(result.getColumnType(i));
    if (aggColumnsSet.contains(result.getColumnName(i))) {
      orderedAggColumnName.add(result.getColumnName(i));
      aggColumnIndex.add(i);
    }
 else     if (nonaggColumnsSet.contains(result.getColumnName(i))) {
      orderedNonaggColumnName.add(result.getColumnName(i));
      nonaggColumnIndex.add(i);
    }
 else {
      throw new ValueException(""String_Node_Str"");
    }
  }
  AggregateFrame aggregateFrame=new AggregateFrame(colName);
  aggregateFrame.setColumnTypes(columnTypes);
  for (  String col : colName) {
    boolean find=false;
    for (int i=0; i < orderedNonaggColumnName.size(); i++) {
      if (col.equals(orderedNonaggColumnName.get(i))) {
        colIndex.add(i);
        find=true;
        break;
      }
    }
    if (find)     continue;
    for (int i=0; i < orderedAggColumnName.size(); i++) {
      if (col.equals(orderedAggColumnName.get(i))) {
        colIndex.add(i + orderedNonaggColumnName.size());
        break;
      }
    }
  }
  aggregateFrame.setOrderedColumnIndex(colIndex);
  while (result.next()) {
    List<Object> aggValue=new ArrayList<>();
    List<Object> nonaggValue=new ArrayList<>();
    for (    int i : aggColumnIndex) {
      aggValue.add(result.getValue(i));
    }
    for (    int i : nonaggColumnIndex) {
      nonaggValue.add(result.getValue(i));
    }
    aggregateFrame.addRow(new AggregateGroup(orderedNonaggColumnName,nonaggValue),new AggregateMeasures(orderedAggColumnName,aggValue));
  }
  return aggregateFrame;
}","public static AggregateFrame fromDmbsQueryResult(DbmsQueryResult result,List<String> nonaggColumnsName,List<Pair<String,String>> aggColumns) throws ValueException {
  List<String> colName=new ArrayList<>();
  List<String> aggColumnsName=new ArrayList<>();
  for (  Pair<String,String> pair : aggColumns) {
    aggColumnsName.add(pair.getKey());
  }
  HashSet<String> aggColumnsSet=new HashSet<>(aggColumnsName);
  HashSet<String> nonaggColumnsSet=new HashSet<>(nonaggColumnsName);
  List<Integer> aggColumnIndex=new ArrayList<>();
  List<Integer> nonaggColumnIndex=new ArrayList<>();
  List<String> orderedAggColumnName=new ArrayList<>();
  List<String> orderedNonaggColumnName=new ArrayList<>();
  List<Integer> columnTypes=new ArrayList<>();
  for (int i=0; i < result.getColumnCount(); i++) {
    colName.add(result.getColumnName(i));
    columnTypes.add(result.getColumnType(i));
    if (aggColumnsSet.contains(result.getColumnName(i))) {
      orderedAggColumnName.add(result.getColumnName(i));
      aggColumnIndex.add(i);
    }
 else     if (nonaggColumnsSet.contains(result.getColumnName(i))) {
      orderedNonaggColumnName.add(result.getColumnName(i));
      nonaggColumnIndex.add(i);
    }
 else {
      throw new ValueException(""String_Node_Str"");
    }
  }
  AggregateFrame aggregateFrame=new AggregateFrame(colName);
  aggregateFrame.setColumnTypes(columnTypes);
  while (result.next()) {
    List<Object> aggValue=new ArrayList<>();
    List<Object> nonaggValue=new ArrayList<>();
    for (    int i : aggColumnIndex) {
      aggValue.add(result.getValue(i));
    }
    for (    int i : nonaggColumnIndex) {
      nonaggValue.add(result.getValue(i));
    }
    aggregateFrame.addRow(new AggregateGroup(orderedNonaggColumnName,nonaggValue),new AggregateMeasures(orderedAggColumnName,aggValue));
  }
  return aggregateFrame;
}"
96058,"@Override public Object getValue(int index){
  index=aggregateFrame.getOrderedColumnIndex().get(index);
  if (index < ((AggregateGroup)currentEntry.getKey()).attributeValues.size()) {
    return ((AggregateGroup)currentEntry.getKey()).attributeValues.get(index);
  }
 else {
    return ((AggregateMeasures)currentEntry.getValue()).attributeValues.get(index - ((AggregateGroup)currentEntry.getKey()).attributeValues.size());
  }
}","@Override public Object getValue(int index){
  index=orderedColumnIndex.get(index);
  if (index < ((AggregateGroup)currentEntry.getKey()).attributeValues.size()) {
    return ((AggregateGroup)currentEntry.getKey()).attributeValues.get(index);
  }
 else {
    return ((AggregateMeasures)currentEntry.getValue()).attributeValues.get(index - ((AggregateGroup)currentEntry.getKey()).attributeValues.size());
  }
}"
96059,"public AggregateFrameQueryResult(AggregateFrame aggregateFrame){
  this.aggregateFrame=aggregateFrame;
  it=aggregateFrame.data.entrySet().iterator();
}","public AggregateFrameQueryResult(AggregateFrame aggregateFrame){
  this.aggregateFrame=aggregateFrame;
  it=aggregateFrame.data.entrySet().iterator();
  List<String> orderedColumnName=aggregateFrame.getColumnNames();
  if (!aggregateFrame.data.entrySet().isEmpty()) {
    AggregateGroup group=((AggregateGroup)(aggregateFrame.data.keySet().toArray()[0]));
    AggregateMeasures measures=(AggregateMeasures)(aggregateFrame.data.values().toArray()[0]);
    for (int i=0; i < group.attributeNames.size(); i++) {
      orderedColumnIndex.add(orderedColumnName.indexOf(group.attributeNames.get(i)));
    }
    for (int i=0; i < measures.attributeNames.size(); i++) {
      orderedColumnIndex.add(orderedColumnName.indexOf(measures.attributeNames.get(i)));
    }
  }
}"
96060,"protected void createStratifiedSample(SampleParam param) throws VerdictException {
  VerdictLogger.info(this,String.format(""String_Node_Str"",param.getSamplingRatio() * 100,param.getOriginalTable(),param.colNamesInString()));
  Pair<Long,Long> sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  if (sampleAndOriginalSizes == null) {
    double heuristicRatio=this.heuristicSampleSizeSuggestion(param);
    SampleParam uniformSample=new SampleParam(param);
    uniformSample.setSamplingRatio(heuristicRatio);
    uniformSample.setSampleType(""String_Node_Str"");
    uniformSample.setColumnNames(new ArrayList<String>());
    VerdictLogger.info(this,String.format(""String_Node_Str""));
    createUniformRandomSample(uniformSample);
    sampleAndOriginalSizes=vc.getDbms().createUniformRandomSampleTableOf(uniformSample);
    vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
    vc.getMeta().refreshDatabases();
    vc.getMeta().refreshTables(uniformSample.getOriginalTable().getSchemaName());
    vc.getMeta().refreshSampleInfo(uniformSample.getOriginalTable().getSchemaName(),true);
    sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  }
  vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
}","protected void createStratifiedSample(SampleParam param) throws VerdictException {
  VerdictLogger.info(this,String.format(""String_Node_Str"",param.getSamplingRatio() * 100,param.getOriginalTable(),param.colNamesInString()));
  Pair<Long,Long> sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  if (sampleAndOriginalSizes == null) {
    double heuristicRatio=this.heuristicSampleSizeSuggestion(param);
    SampleParam uniformSample=new SampleParam(param);
    uniformSample.setSamplingRatio(heuristicRatio);
    uniformSample.setSampleType(""String_Node_Str"");
    uniformSample.setColumnNames(new ArrayList<String>());
    VerdictLogger.info(this,String.format(""String_Node_Str""));
    createUniformRandomSample(uniformSample);
    sampleAndOriginalSizes=vc.getDbms().createUniformRandomSampleTableOf(uniformSample);
    vc.getMeta().insertSampleInfo(uniformSample,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
    vc.getMeta().refreshDatabases();
    vc.getMeta().refreshTables(uniformSample.getOriginalTable().getSchemaName());
    vc.getMeta().refreshSampleInfo(uniformSample.getOriginalTable().getSchemaName(),true);
    sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  }
  vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
}"
96061,"protected void createStratifiedSample(SampleParam param) throws VerdictException {
  VerdictLogger.info(this,String.format(""String_Node_Str"",param.getSamplingRatio() * 100,param.getOriginalTable(),param.colNamesInString()));
  Pair<Long,Long> sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  if (sampleAndOriginalSizes == null) {
    double heuristicRatio=this.heuristicSampleSizeSuggestion(param);
    SampleParam uniformSample=new SampleParam(param);
    uniformSample.setSamplingRatio(heuristicRatio);
    uniformSample.setSampleType(""String_Node_Str"");
    uniformSample.setColumnNames(new ArrayList<String>());
    VerdictLogger.info(this,String.format(""String_Node_Str""));
    createUniformRandomSample(uniformSample);
    sampleAndOriginalSizes=vc.getDbms().createUniformRandomSampleTableOf(uniformSample);
    vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
    vc.getMeta().refreshDatabases();
    vc.getMeta().refreshTables(uniformSample.getOriginalTable().getSchemaName());
    vc.getMeta().refreshSampleInfo(uniformSample.getOriginalTable().getSchemaName(),true);
    sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  }
  vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
}","protected void createStratifiedSample(SampleParam param) throws VerdictException {
  VerdictLogger.info(this,String.format(""String_Node_Str"",param.getSamplingRatio() * 100,param.getOriginalTable(),param.colNamesInString()));
  Pair<Long,Long> sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  if (sampleAndOriginalSizes == null) {
    double heuristicRatio=this.heuristicSampleSizeSuggestion(param);
    SampleParam uniformSample=new SampleParam(param);
    uniformSample.setSamplingRatio(heuristicRatio);
    uniformSample.setSampleType(""String_Node_Str"");
    uniformSample.setColumnNames(new ArrayList<String>());
    VerdictLogger.info(this,String.format(""String_Node_Str""));
    createUniformRandomSample(uniformSample);
    sampleAndOriginalSizes=vc.getDbms().createUniformRandomSampleTableOf(uniformSample);
    vc.getMeta().insertSampleInfo(uniformSample,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
    vc.getMeta().refreshDatabases();
    vc.getMeta().refreshTables(uniformSample.getOriginalTable().getSchemaName());
    vc.getMeta().refreshSampleInfo(uniformSample.getOriginalTable().getSchemaName(),true);
    sampleAndOriginalSizes=vc.getDbms().createStratifiedSampleTableOf(param);
  }
  vc.getMeta().insertSampleInfo(param,sampleAndOriginalSizes.getLeft(),sampleAndOriginalSizes.getRight());
}"
96062,"public static Relation queryToRelation(VerdictContext vc,String sql) throws VerdictException {
  ExactRelation r=ExactRelation.from(vc,sql);
  VerdictSQLParser p=StringManipulations.parserOf(sql);
  VerdictSQLBaseVisitor<Boolean> visitor=new VerdictSQLBaseVisitor<Boolean>(){
    @Override public Boolean visitSelect_statement(    VerdictSQLParser.Select_statementContext ctx){
      return (ctx.EXACT() != null) ? true : false;
    }
  }
;
  Boolean exact=visitor.visit(p.select_statement());
  if (exact) {
    return r;
  }
 else {
    Map<TableUniqueName,SampleParam> forcedSamples=VerdictConf.getForcedSamples();
    ApproxRelation a=(forcedSamples == null) ? r.approx() : r.approxWith(forcedSamples);
    return a;
  }
}","public static Relation queryToRelation(VerdictContext vc,String sql) throws VerdictException {
  ExactRelation r=ExactRelation.from(vc,sql);
  VerdictSQLParser p=StringManipulations.parserOf(sql);
  VerdictSQLBaseVisitor<Boolean> visitor=new VerdictSQLBaseVisitor<Boolean>(){
    @Override public Boolean visitSelect_statement(    VerdictSQLParser.Select_statementContext ctx){
      return (ctx.EXACT() != null) ? true : false;
    }
  }
;
  Boolean exact=visitor.visit(p.select_statement());
  if (exact) {
    return r;
  }
 else {
    Map<TableUniqueName,SampleParam> forcedSamples=VerdictConf.getSamplesToUse();
    ApproxRelation a=(forcedSamples == null) ? r.approx() : r.approxWith(forcedSamples);
    return a;
  }
}"
96063,"@Override public void createMetaTablesInDMBS(TableUniqueName originalTableName,TableUniqueName sizeTableName,TableUniqueName nameTableName) throws VerdictException {
  VerdictLogger.debug(this,""String_Node_Str"");
  String sql=String.format(""String_Node_Str"",sizeTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  sql=String.format(""String_Node_Str"",nameTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  VerdictLogger.debug(this,""String_Node_Str"");
}","public void createMetaTablesInDMBS(TableUniqueName originalTableName,TableUniqueName sizeTableName,TableUniqueName nameTableName) throws VerdictException {
  VerdictLogger.debug(this,""String_Node_Str"");
  String sql=String.format(""String_Node_Str"",sizeTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  sql=String.format(""String_Node_Str"",nameTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  VerdictLogger.debug(this,""String_Node_Str"");
}"
96064,"@Override public void createMetaTablesInDMBS(TableUniqueName originalTableName,TableUniqueName sizeTableName,TableUniqueName nameTableName) throws VerdictException {
  VerdictLogger.debug(this,""String_Node_Str"");
  String sql=String.format(""String_Node_Str"",sizeTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  sql=String.format(""String_Node_Str"",nameTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  VerdictLogger.debug(this,""String_Node_Str"");
}","public void createMetaTablesInDMBS(TableUniqueName originalTableName,TableUniqueName sizeTableName,TableUniqueName nameTableName) throws VerdictException {
  VerdictLogger.debug(this,""String_Node_Str"");
  String sql=String.format(""String_Node_Str"",sizeTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  sql=String.format(""String_Node_Str"",nameTableName) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  executeUpdate(sql);
  VerdictLogger.debug(this,""String_Node_Str"");
}"
96065,"/** 
 * Parses a depth-one select statement. If there exist subqueries, this function will be called recursively.
 */
@Override public ExactRelation visitQuery_specification(VerdictSQLParser.Query_specificationContext ctx){
  List<ExactRelation> tableSources=new ArrayList<ExactRelation>();
  for (  Table_sourceContext s : ctx.table_source()) {
    TableSourceExtractor e=new TableSourceExtractor();
    ExactRelation r1=e.visit(s);
    tableSources.add(r1);
  }
  Cond where=null;
  if (ctx.WHERE() != null) {
    where=Cond.from(vc,ctx.where);
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    where=resolver.visit(where);
  }
  ExactRelation joinedTabeSource=null;
  while (where != null && tableSources.size() > 0) {
    Pair<Cond,Pair<ExactRelation,ExactRelation>> joinCondAndTabName=where.searchForJoinCondition(tableSources);
    if (joinCondAndTabName == null) {
      break;
    }
    Cond joinCond=joinCondAndTabName.getKey();
    Pair<ExactRelation,ExactRelation> pairsToJoin=joinCondAndTabName.getValue();
    List<ExactRelation> newTableSources=new ArrayList<ExactRelation>();
    ExactRelation joined=JoinedRelation.from(vc,pairsToJoin.getLeft(),pairsToJoin.getRight(),joinCond);
    newTableSources.add(joined);
    for (    ExactRelation t : tableSources) {
      if (t != pairsToJoin.getLeft() && t != pairsToJoin.getRight()) {
        newTableSources.add(t);
      }
    }
    tableSources=newTableSources;
    where=where.remove(joinCond);
  }
  for (  ExactRelation r : tableSources) {
    if (joinedTabeSource == null) {
      joinedTabeSource=r;
    }
 else {
      joinedTabeSource=new JoinedRelation(vc,joinedTabeSource,r,null);
    }
  }
  if (where != null) {
    joinedTabeSource=new FilteredRelation(vc,joinedTabeSource,where);
  }
  SelectListExtractor select=new SelectListExtractor();
  Triple<List<SelectElem>,List<SelectElem>,List<SelectElem>> elems=select.visit(ctx.select_list());
  List<SelectElem> nonaggs=elems.getLeft();
  List<SelectElem> aggs=elems.getMiddle();
  List<SelectElem> bothInOrder=elems.getRight();
  TableSourceResolver resolver=new TableSourceResolver(vc,tableAliasAndColNames);
  nonaggs=replaceTableNamesWithAliasesIn(nonaggs,resolver);
  aggs=replaceTableNamesWithAliasesIn(aggs,resolver);
  bothInOrder=replaceTableNamesWithAliasesIn(bothInOrder,resolver);
  selectElems=bothInOrder;
  if (aggs.size() == 0) {
    joinedTabeSource=new ProjectedRelation(vc,joinedTabeSource,bothInOrder);
  }
 else {
    if (ctx.GROUP() != null) {
      List<Expr> groupby=new ArrayList<Expr>();
      for (      Group_by_itemContext g : ctx.group_by_item()) {
        Expr gexpr=resolver.visit(Expr.from(vc,g.expression()));
        boolean aliasFound=false;
        if (!aliasFound) {
          groupby.add(gexpr);
        }
      }
      joinedTabeSource=new GroupedRelation(vc,joinedTabeSource,groupby);
    }
    joinedTabeSource=new AggregatedRelation(vc,joinedTabeSource,bothInOrder);
  }
  return joinedTabeSource;
}","/** 
 * Parses a depth-one select statement. If there exist subqueries, this function will be called recursively.
 */
@Override public ExactRelation visitQuery_specification(VerdictSQLParser.Query_specificationContext ctx){
  List<ExactRelation> tableSources=new ArrayList<ExactRelation>();
  for (  Table_sourceContext s : ctx.table_source()) {
    TableSourceExtractor e=new TableSourceExtractor();
    ExactRelation r1=e.visit(s);
    tableSources.add(r1);
  }
  Cond where=null;
  if (ctx.WHERE() != null) {
    where=Cond.from(vc,ctx.where);
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    where=resolver.visit(where);
  }
  ExactRelation joinedTableSource=null;
  Map<Set<ExactRelation>,List<Cond>> joinMap=new HashMap<>();
  while (where != null) {
    Pair<Cond,Pair<ExactRelation,ExactRelation>> joinCondAndTabName=where.extractJoinCondition(tableSources);
    if (joinCondAndTabName == null) {
      break;
    }
    Set<ExactRelation> joinTableSet=new HashSet<>();
    joinTableSet.add(joinCondAndTabName.getRight().getLeft());
    joinTableSet.add(joinCondAndTabName.getRight().getRight());
    if (!joinMap.containsKey(joinTableSet)) {
      joinMap.put(joinTableSet,new ArrayList<Cond>());
    }
    List<Cond> joinCondList=joinMap.get(joinTableSet);
    joinCondList.add(joinCondAndTabName.getLeft());
    Cond joinCond=joinCondAndTabName.getKey();
    where=where.remove(joinCond);
  }
  for (  Set<ExactRelation> joinSet : joinMap.keySet()) {
    List<Cond> joinCondList=joinMap.get(joinSet);
    Cond joinCond=null;
    if (joinCondList.size() == 1) {
      joinCond=joinCondList.get(0);
    }
 else {
      joinCond=AndCond.from(joinCondList.get(0),joinCondList.get(1));
      for (int i=2; i < joinCondList.size(); ++i) {
        joinCond=AndCond.from(joinCond,joinCondList.get(i));
      }
    }
    ExactRelation[] joinSetArray=new ExactRelation[2];
    joinSet.toArray(joinSetArray);
    ExactRelation left=joinSetArray[0];
    ExactRelation right=joinSetArray[1];
    for (    ExactRelation r : tableSources) {
      if (r instanceof JoinedRelation) {
        JoinedRelation j=(JoinedRelation)r;
        if (j.containsRelation(left,left.getAlias())) {
          left=r;
          break;
        }
      }
    }
    for (    ExactRelation r : tableSources) {
      if (r instanceof JoinedRelation) {
        JoinedRelation j=(JoinedRelation)r;
        if (j.containsRelation(right,right.getAlias())) {
          right=r;
          break;
        }
      }
    }
    ExactRelation joined=JoinedRelation.from(vc,left,right,joinCond);
    List<ExactRelation> newTableSources=new ArrayList<>();
    newTableSources.add(joined);
    for (    ExactRelation t : tableSources) {
      if (t != left && t != right) {
        newTableSources.add(t);
      }
    }
    tableSources=newTableSources;
  }
  for (  ExactRelation r : tableSources) {
    if (joinedTableSource == null) {
      joinedTableSource=r;
    }
 else {
      joinedTableSource=new JoinedRelation(vc,joinedTableSource,r,null);
    }
  }
  if (where != null) {
    joinedTableSource=new FilteredRelation(vc,joinedTableSource,where);
  }
  SelectListExtractor select=new SelectListExtractor();
  Triple<List<SelectElem>,List<SelectElem>,List<SelectElem>> elems=select.visit(ctx.select_list());
  List<SelectElem> nonaggs=elems.getLeft();
  List<SelectElem> aggs=elems.getMiddle();
  List<SelectElem> bothInOrder=elems.getRight();
  TableSourceResolver resolver=new TableSourceResolver(vc,tableAliasAndColNames);
  nonaggs=replaceTableNamesWithAliasesIn(nonaggs,resolver);
  aggs=replaceTableNamesWithAliasesIn(aggs,resolver);
  bothInOrder=replaceTableNamesWithAliasesIn(bothInOrder,resolver);
  selectElems=bothInOrder;
  if (aggs.size() == 0) {
    joinedTableSource=new ProjectedRelation(vc,joinedTableSource,bothInOrder);
  }
 else {
    if (ctx.GROUP() != null) {
      List<Expr> groupby=new ArrayList<Expr>();
      for (      Group_by_itemContext g : ctx.group_by_item()) {
        Expr gexpr=resolver.visit(Expr.from(vc,g.expression()));
        boolean aliasFound=false;
        if (!aliasFound) {
          groupby.add(gexpr);
        }
      }
      joinedTableSource=new GroupedRelation(vc,joinedTableSource,groupby);
    }
    joinedTableSource=new AggregatedRelation(vc,joinedTableSource,bothInOrder);
  }
  return joinedTableSource;
}"
96066,"/** 
 * Parses a depth-one select statement. If there exist subqueries, this function will be called recursively.
 */
@Override public ExactRelation visitQuery_specification(VerdictSQLParser.Query_specificationContext ctx){
  List<ExactRelation> tableSources=new ArrayList<ExactRelation>();
  for (  Table_sourceContext s : ctx.table_source()) {
    TableSourceExtractor e=new TableSourceExtractor();
    ExactRelation r1=e.visit(s);
    tableSources.add(r1);
  }
  Cond where=null;
  if (ctx.WHERE() != null) {
    where=Cond.from(vc,ctx.where);
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    where=resolver.visit(where);
  }
  ExactRelation joinedTabeSource=null;
  while (where != null && tableSources.size() > 1) {
    Pair<Cond,Pair<ExactRelation,ExactRelation>> joinCondAndTabName=where.searchForJoinCondition(tableSources);
    if (joinCondAndTabName == null) {
      break;
    }
    Cond joinCond=joinCondAndTabName.getKey();
    Pair<ExactRelation,ExactRelation> pairsToJoin=joinCondAndTabName.getValue();
    List<ExactRelation> newTableSources=new ArrayList<ExactRelation>();
    ExactRelation joined=JoinedRelation.from(vc,pairsToJoin.getLeft(),pairsToJoin.getRight(),joinCond);
    newTableSources.add(joined);
    for (    ExactRelation t : tableSources) {
      if (t != pairsToJoin.getLeft() && t != pairsToJoin.getRight()) {
        newTableSources.add(t);
      }
    }
    tableSources=newTableSources;
    where=where.remove(joinCond);
  }
  for (  ExactRelation r : tableSources) {
    if (joinedTabeSource == null) {
      joinedTabeSource=r;
    }
 else {
      joinedTabeSource=new JoinedRelation(vc,joinedTabeSource,r,null);
    }
  }
  if (where != null) {
    joinedTabeSource=new FilteredRelation(vc,joinedTabeSource,where);
  }
  SelectListExtractor select=new SelectListExtractor();
  Triple<List<SelectElem>,List<SelectElem>,List<SelectElem>> elems=select.visit(ctx.select_list());
  List<SelectElem> nonaggs=elems.getLeft();
  List<SelectElem> aggs=elems.getMiddle();
  List<SelectElem> bothInOrder=elems.getRight();
  TableSourceResolver resolver=new TableSourceResolver(vc,tableAliasAndColNames);
  nonaggs=replaceTableNamesWithAliasesIn(nonaggs,resolver);
  aggs=replaceTableNamesWithAliasesIn(aggs,resolver);
  bothInOrder=replaceTableNamesWithAliasesIn(bothInOrder,resolver);
  selectElems=bothInOrder;
  if (aggs.size() == 0) {
    joinedTabeSource=new ProjectedRelation(vc,joinedTabeSource,bothInOrder);
  }
 else {
    if (ctx.GROUP() != null) {
      List<Expr> groupby=new ArrayList<Expr>();
      for (      Group_by_itemContext g : ctx.group_by_item()) {
        Expr gexpr=resolver.visit(Expr.from(vc,g.expression()));
        boolean aliasFound=false;
        if (!aliasFound) {
          groupby.add(gexpr);
        }
      }
      joinedTabeSource=new GroupedRelation(vc,joinedTabeSource,groupby);
    }
    joinedTabeSource=new AggregatedRelation(vc,joinedTabeSource,bothInOrder);
  }
  return joinedTabeSource;
}","/** 
 * Parses a depth-one select statement. If there exist subqueries, this function will be called recursively.
 */
@Override public ExactRelation visitQuery_specification(VerdictSQLParser.Query_specificationContext ctx){
  List<ExactRelation> tableSources=new ArrayList<ExactRelation>();
  for (  Table_sourceContext s : ctx.table_source()) {
    TableSourceExtractor e=new TableSourceExtractor();
    ExactRelation r1=e.visit(s);
    tableSources.add(r1);
  }
  Cond where=null;
  if (ctx.WHERE() != null) {
    where=Cond.from(vc,ctx.where);
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    where=resolver.visit(where);
  }
  ExactRelation joinedTabeSource=null;
  while (where != null && tableSources.size() > 0) {
    Pair<Cond,Pair<ExactRelation,ExactRelation>> joinCondAndTabName=where.searchForJoinCondition(tableSources);
    if (joinCondAndTabName == null) {
      break;
    }
    Cond joinCond=joinCondAndTabName.getKey();
    Pair<ExactRelation,ExactRelation> pairsToJoin=joinCondAndTabName.getValue();
    List<ExactRelation> newTableSources=new ArrayList<ExactRelation>();
    ExactRelation joined=JoinedRelation.from(vc,pairsToJoin.getLeft(),pairsToJoin.getRight(),joinCond);
    newTableSources.add(joined);
    for (    ExactRelation t : tableSources) {
      if (t != pairsToJoin.getLeft() && t != pairsToJoin.getRight()) {
        newTableSources.add(t);
      }
    }
    tableSources=newTableSources;
    where=where.remove(joinCond);
  }
  for (  ExactRelation r : tableSources) {
    if (joinedTabeSource == null) {
      joinedTabeSource=r;
    }
 else {
      joinedTabeSource=new JoinedRelation(vc,joinedTabeSource,r,null);
    }
  }
  if (where != null) {
    joinedTabeSource=new FilteredRelation(vc,joinedTabeSource,where);
  }
  SelectListExtractor select=new SelectListExtractor();
  Triple<List<SelectElem>,List<SelectElem>,List<SelectElem>> elems=select.visit(ctx.select_list());
  List<SelectElem> nonaggs=elems.getLeft();
  List<SelectElem> aggs=elems.getMiddle();
  List<SelectElem> bothInOrder=elems.getRight();
  TableSourceResolver resolver=new TableSourceResolver(vc,tableAliasAndColNames);
  nonaggs=replaceTableNamesWithAliasesIn(nonaggs,resolver);
  aggs=replaceTableNamesWithAliasesIn(aggs,resolver);
  bothInOrder=replaceTableNamesWithAliasesIn(bothInOrder,resolver);
  selectElems=bothInOrder;
  if (aggs.size() == 0) {
    joinedTabeSource=new ProjectedRelation(vc,joinedTabeSource,bothInOrder);
  }
 else {
    if (ctx.GROUP() != null) {
      List<Expr> groupby=new ArrayList<Expr>();
      for (      Group_by_itemContext g : ctx.group_by_item()) {
        Expr gexpr=resolver.visit(Expr.from(vc,g.expression()));
        boolean aliasFound=false;
        if (!aliasFound) {
          groupby.add(gexpr);
        }
      }
      joinedTabeSource=new GroupedRelation(vc,joinedTabeSource,groupby);
    }
    joinedTabeSource=new AggregatedRelation(vc,joinedTabeSource,bothInOrder);
  }
  return joinedTabeSource;
}"
96067,"@Override public Pair<Cond,Pair<ExactRelation,ExactRelation>> searchForJoinCondition(List<ExactRelation> tableSources){
  if (compOp.equals(""String_Node_Str"")) {
    if (left instanceof ColNameExpr && right instanceof ColNameExpr) {
      String leftTab=((ColNameExpr)left).getTab();
      String rightTab=((ColNameExpr)right).getTab();
      ExactRelation r1=tableSources.get(0);
      ExactRelation r2=null;
      if (doesRelationContain(r1,leftTab)) {
        r2=findSourceContaining(tableSources,rightTab);
      }
 else       if (doesRelationContain(r1,rightTab)) {
        r2=findSourceContaining(tableSources,leftTab);
      }
      if (r2 != null && r1 != r2) {
        return Pair.of((Cond)this,Pair.of(r1,r2));
      }
    }
  }
  return null;
}","@Override public Pair<Cond,Pair<ExactRelation,ExactRelation>> searchForJoinCondition(List<ExactRelation> tableSources){
  if (compOp.equals(""String_Node_Str"")) {
    if (left instanceof ColNameExpr && right instanceof ColNameExpr) {
      String leftTab=((ColNameExpr)left).getTab();
      String rightTab=((ColNameExpr)right).getTab();
      ExactRelation r1=tableSources.get(0);
      ExactRelation r2=null;
      if (doesRelationContain(r1,leftTab)) {
        r2=findSourceContaining(tableSources,rightTab);
        if (r2 != null && r2 instanceof JoinedRelation) {
          r2=findSingleRelation(r2,rightTab);
        }
      }
 else       if (doesRelationContain(r1,rightTab)) {
        r2=findSourceContaining(tableSources,leftTab);
        if (r2 != null && r2 instanceof JoinedRelation) {
          r2=findSingleRelation(r2,leftTab);
        }
      }
      String leftOriginalName=getOriginalTableName(tableSources,leftTab);
      String rightOriginalName=getOriginalTableName(tableSources,rightTab);
      if (r2 != null && leftOriginalName != null && rightOriginalName != null && !leftOriginalName.equals(rightOriginalName)) {
        return Pair.of((Cond)this,Pair.of(r1,r2));
      }
    }
  }
  return null;
}"
96068,"public void refreshSampleInfo(String schemaName,boolean isCreateSample){
  TableUniqueName metaNameTable=getMetaNameTableForOriginalSchema(schemaName);
  TableUniqueName metaSizeTable=getMetaSizeTableForOriginalSchema(schemaName);
  List<List<Object>> result;
  try {
    clearSampleInformationFor(schemaName);
    Set<String> databases=getDatabases();
    if (databases.contains(metaNameTable.getSchemaName())) {
      Set<String> tables=getTables(metaNameTable.getSchemaName());
      if (tables != null && tables.contains(metaNameTable.getTableName())) {
        if (isCreateSample) {
          vc.getDbms().cacheTable(metaNameTable);
        }
        result=SingleRelation.from(vc,metaNameTable).select(""String_Node_Str"").collect();
        for (        List<Object> row : result) {
          String originalSchemaName=row.get(0).toString();
          String originalTabName=row.get(1).toString();
          String sampleSchemaName=row.get(2).toString();
          String sampleTabName=row.get(3).toString();
          String sampleType=row.get(4).toString();
          double samplingRatio=TypeCasting.toDouble(row.get(5));
          String columnNamesString=row.get(6).toString();
          List<String> columnNames=(columnNamesString.length() == 0) ? new ArrayList<String>() : Arrays.asList(columnNamesString.split(""String_Node_Str""));
          TableUniqueName originalTable=TableUniqueName.uname(originalSchemaName,originalTabName);
          if (!sampleNameMeta.containsKey(originalTable)) {
            sampleNameMeta.put(originalTable,new HashMap<SampleParam,TableUniqueName>());
          }
          sampleNameMeta.get(originalTable).put(new SampleParam(vc,originalTable,sampleType,samplingRatio,columnNames),TableUniqueName.uname(sampleSchemaName,sampleTabName));
          TableUniqueName sampleTable=TableUniqueName.uname(sampleSchemaName,sampleTabName);
          if (tables.contains(sampleTabName)) {
            if (isCreateSample) {
              vc.getDbms().cacheTable(sampleTable);
            }
          }
 else {
            VerdictLogger.error(this,String.format(""String_Node_Str"",sampleTable));
          }
        }
      }
    }
    if (databases.contains(metaSizeTable.getSchemaName())) {
      Set<String> tables=getTables(metaSizeTable.getSchemaName());
      if (tables != null && tables.contains(metaSizeTable.getTableName())) {
        if (isCreateSample) {
          vc.getDbms().cacheTable(metaSizeTable);
        }
        result=SingleRelation.from(vc,metaSizeTable).select(""String_Node_Str"").collect();
        for (        List<Object> row : result) {
          String sampleSchemaName=row.get(0).toString();
          String sampleTabName=row.get(1).toString();
          Long sampleSize=TypeCasting.toLong(row.get(2));
          Long originalTableSize=TypeCasting.toLong(row.get(3));
          sampleSizeMeta.put(TableUniqueName.uname(sampleSchemaName,sampleTabName),new SampleSizeInfo(sampleSize,originalTableSize));
        }
      }
    }
  }
 catch (  VerdictException e) {
    VerdictLogger.error(this,e.getMessage());
  }
  uptodateSchemas.put(schemaName,vc.getCurrentQid());
  VerdictLogger.info(this,""String_Node_Str"");
}","public void refreshSampleInfo(String schemaName,boolean isCreateSample){
  TableUniqueName metaNameTable=getMetaNameTableForOriginalSchema(schemaName);
  TableUniqueName metaSizeTable=getMetaSizeTableForOriginalSchema(schemaName);
  Map<TableUniqueName,TableUniqueName> sampleToOriginalTable=new HashMap<>();
  List<List<Object>> result;
  try {
    clearSampleInformationFor(schemaName);
    Set<String> databases=getDatabases();
    if (databases.contains(metaNameTable.getSchemaName())) {
      Set<String> tables=getTables(metaNameTable.getSchemaName());
      if (tables != null && tables.contains(metaNameTable.getTableName())) {
        if (isCreateSample) {
          vc.getDbms().cacheTable(metaNameTable);
        }
        result=SingleRelation.from(vc,metaNameTable).select(""String_Node_Str"").collect();
        for (        List<Object> row : result) {
          String originalSchemaName=row.get(0).toString();
          String originalTabName=row.get(1).toString();
          String sampleSchemaName=row.get(2).toString();
          String sampleTabName=row.get(3).toString();
          String sampleType=row.get(4).toString();
          double samplingRatio=TypeCasting.toDouble(row.get(5));
          String columnNamesString=row.get(6).toString();
          List<String> columnNames=(columnNamesString.length() == 0) ? new ArrayList<String>() : Arrays.asList(columnNamesString.split(""String_Node_Str""));
          TableUniqueName originalTable=TableUniqueName.uname(originalSchemaName,originalTabName);
          if (!sampleNameMeta.containsKey(originalTable)) {
            sampleNameMeta.put(originalTable,new HashMap<SampleParam,TableUniqueName>());
          }
          sampleNameMeta.get(originalTable).put(new SampleParam(vc,originalTable,sampleType,samplingRatio,columnNames),TableUniqueName.uname(sampleSchemaName,sampleTabName));
          TableUniqueName sampleTable=TableUniqueName.uname(sampleSchemaName,sampleTabName);
          sampleToOriginalTable.put(sampleTable,originalTable);
          if (tables.contains(sampleTabName)) {
            if (isCreateSample) {
              vc.getDbms().cacheTable(sampleTable);
            }
          }
 else {
            VerdictLogger.error(this,String.format(""String_Node_Str"",sampleTable));
          }
        }
      }
    }
    if (databases.contains(metaSizeTable.getSchemaName())) {
      Set<String> tables=getTables(metaSizeTable.getSchemaName());
      if (tables != null && tables.contains(metaSizeTable.getTableName())) {
        if (isCreateSample) {
          vc.getDbms().cacheTable(metaSizeTable);
        }
        result=SingleRelation.from(vc,metaSizeTable).select(""String_Node_Str"").collect();
        for (        List<Object> row : result) {
          String sampleSchemaName=row.get(0).toString();
          String sampleTabName=row.get(1).toString();
          Long sampleSize=TypeCasting.toLong(row.get(2));
          Long originalTableSize=TypeCasting.toLong(row.get(3));
          TableUniqueName sampleTable=TableUniqueName.uname(sampleSchemaName,sampleTabName);
          sampleSizeMeta.put(sampleTable,new SampleSizeInfo(sampleToOriginalTable.get(sampleTable),sampleSize,originalTableSize));
        }
      }
    }
  }
 catch (  VerdictException e) {
    VerdictLogger.error(this,e.getMessage());
  }
  uptodateSchemas.put(schemaName,vc.getCurrentQid());
  VerdictLogger.info(this,""String_Node_Str"");
}"
96069,"public SampleSizeInfo(long sampleSize,long originalTableSize){
  this.sampleSize=sampleSize;
  this.originalTableSize=originalTableSize;
}","public SampleSizeInfo(TableUniqueName originalTable,long sampleSize,long originalTableSize){
  this.originalTable=originalTable;
  this.sampleSize=sampleSize;
  this.originalTableSize=originalTableSize;
}"
96070,"@Override public double cost(){
  if (sampleType().equals(""String_Node_Str"")) {
    SampleParam ufParam=new SampleParam(vc,param.getOriginalTable(),""String_Node_Str"",null,Arrays.<String>asList());
    TableUniqueName ufSample=vc.getMeta().lookForSampleTable(ufParam);
    SampleSizeInfo info=vc.getMeta().getSampleSizeOf(ufSample);
    return (info == null) ? 0 : info.originalTableSize;
  }
 else {
    SampleSizeInfo info=vc.getMeta().getSampleSizeOf(param);
    if (info == null) {
      return -1;
    }
    return info.sampleSize;
  }
}","@Override public double cost(){
  if (sampleType().equals(""String_Node_Str"")) {
    SampleSizeInfo info=vc.getMeta().getOriginalSizeOf(param.getOriginalTable());
    return (info == null) ? 0 : info.originalTableSize;
  }
 else {
    SampleSizeInfo info=vc.getMeta().getSampleSizeOf(param);
    if (info == null) {
      return -1;
    }
    return info.sampleSize;
  }
}"
96071,"public static ApproxSingleRelation asis(SingleRelation r){
  ApproxSingleRelation a=new ApproxSingleRelation(r.vc,r.getTableName(),new SampleParam(r.vc,r.getTableName(),""String_Node_Str"",1.0,null),new SampleSizeInfo(-1,-1));
  a.setAlias(r.getAlias());
  return a;
}","public static ApproxSingleRelation asis(SingleRelation r){
  ApproxSingleRelation a=new ApproxSingleRelation(r.vc,r.getTableName(),new SampleParam(r.vc,r.getTableName(),""String_Node_Str"",1.0,null),new SampleSizeInfo(r.getTableName(),-1,-1));
  a.setAlias(r.getAlias());
  return a;
}"
96072,"@Override public ExactRelation rewriteWithPartition(){
  ExactRelation newSource=source.rewriteWithPartition();
  List<Expr> newGroupby=groupbyWithTablesSubstituted();
  ColNameExpr partitionCol=newSource.partitionColumn();
  if (partitionCol != null) {
    partitionCol.setTab(getAlias());
    newGroupby.add(partitionCol);
  }
  ExactRelation r=new GroupedRelation(vc,newSource,newGroupby);
  r.setAlias(r.getAlias());
  return r;
}","@Override public ExactRelation rewriteWithPartition(){
  ExactRelation newSource=source.rewriteWithPartition();
  List<Expr> newGroupby=groupbyWithTablesSubstituted();
  ColNameExpr partitionCol=newSource.partitionColumn();
  if (partitionCol != null) {
    if (newSource instanceof ProjectedRelation || newSource instanceof AggregatedRelation) {
      partitionCol.setTab(getAlias());
    }
    newGroupby.add(partitionCol);
  }
  ExactRelation r=new GroupedRelation(vc,newSource,newGroupby);
  r.setAlias(r.getAlias());
  return r;
}"
96073,"@Override public void cancel() throws SQLException {
  System.out.print(""String_Node_Str"");
  stmt.cancel();
}","@Override public void cancel() throws SQLException {
}"
96074,"@Override public void cancel() throws SQLException {
  stmt.cancel();
}","@Override public void cancel() throws SQLException {
  System.out.print(""String_Node_Str"");
  stmt.cancel();
  try {
    ((DbmsJDBC)vc.getDbms()).closeStatement();
  }
 catch (  VerdictException e) {
    new SQLException(StackTraceReader.stackTrace2String(e));
  }
}"
96075,"@Override public ExactRelation rewriteWithPartition(){
  ExactRelation newSource1=source1.rewriteWithPartition();
  ExactRelation newSource2=source2.rewriteWithPartition();
  List<Pair<Expr,Expr>> newJoinCond=joinCondWithTablesSubstitutioned();
  ExactRelation r=JoinedRelation.from(vc,newSource1,newSource2,newJoinCond);
  r.setAlias(getAlias());
  return r;
}","@Override public ExactRelation rewriteWithPartition(){
  ExactRelation newSource1=source1.rewriteWithPartition();
  ExactRelation newSource2=source2.rewriteWithPartition();
  List<Pair<Expr,Expr>> newJoinCond=joinCondWithTablesSubstitutioned();
  JoinedRelation r=JoinedRelation.from(vc,newSource1,newSource2,newJoinCond);
  r.setJoinType(getJoinType());
  r.setAlias(getAlias());
  return r;
}"
96076,"@Override protected String toStringWithIndent(String indent){
  return null;
}","@Override protected String toStringWithIndent(String indent){
  StringBuilder s=new StringBuilder(1000);
  s.append(indent);
  s.append(String.format(""String_Node_Str"",lateralFunc.toString(),tableAlias,columnAlias));
  return s.toString();
}"
96077,"@Override public Expr tupleProbabilityColumn(){
  return null;
}","@Override public Expr tupleProbabilityColumn(){
  return new ConstantExpr(vc,1.0);
}"
96078,"@Override public Expr tableSamplingRatio(){
  return null;
}","@Override public Expr tableSamplingRatio(){
  return new ConstantExpr(vc,1.0);
}"
96079,@Deprecated protected abstract String toStringWithIndent(String indent);,protected abstract String toStringWithIndent(String indent);
96080,"@Override protected List<ApproxRelation> nBestSamples(Expr elem,int n) throws VerdictException {
  List<ApproxRelation> ofSources1=source1.nBestSamples(elem,n);
  List<ApproxRelation> ofSources2=source2.nBestSamples(elem,n);
  List<ApproxRelation> joined=new ArrayList<ApproxRelation>();
  for (  ApproxRelation a1 : ofSources1) {
    for (    ApproxRelation a2 : ofSources2) {
      ApproxJoinedRelation j=new ApproxJoinedRelation(vc,a1,a2,joinCols);
      if (expectedSampleType(j.sampleType())) {
        joined.add(j);
      }
    }
  }
  return joined;
}","@Override protected List<ApproxRelation> nBestSamples(Expr elem,int n) throws VerdictException {
  List<ApproxRelation> ofSources1=source1.nBestSamples(elem,n);
  List<ApproxRelation> ofSources2=source2.nBestSamples(elem,n);
  List<ApproxRelation> joined=new ArrayList<ApproxRelation>();
  for (  ApproxRelation a1 : ofSources1) {
    for (    ApproxRelation a2 : ofSources2) {
      ApproxJoinedRelation j=new ApproxJoinedRelation(vc,a1,a2,joinCols);
      j.setJoinType(getJoinType());
      if (expectedSampleType(j.sampleType())) {
        joined.add(j);
      }
    }
  }
  return joined;
}"
96081,"@Override protected String toStringWithIndent(String indent){
  return null;
}","@Override protected String toStringWithIndent(String indent){
  StringBuilder s=new StringBuilder(1000);
  s.append(indent);
  s.append(String.format(""String_Node_Str"",lateralFunc.toString(),tableAlias,columnAlias));
  return s.toString();
}"
96082,"public static VerdictSpark2Context getVerdictContext(){
  return vc;
}","public static VerdictSparkHiveContext getVerdictContext(){
  return vc;
}"
96083,"private static void setup(){
  try {
    vc=new VerdictSpark2Context(sc);
    vc.sql(""String_Node_Str"" + database);
    hc=new HiveContext(sc);
    hc.sql(""String_Node_Str"" + database);
  }
 catch (  VerdictException e) {
    e.printStackTrace();
  }
}","private static void setup(){
  try {
    vc=new VerdictSparkHiveContext(sc);
    vc.sql(""String_Node_Str"" + database);
    hc=new HiveContext(sc);
    hc.sql(""String_Node_Str"" + database);
  }
 catch (  VerdictException e) {
    e.printStackTrace();
  }
}"
96084,"@Override public List<String> getTables(String schema) throws VerdictException {
  List<String> tables=new ArrayList<String>();
  List<Row> rows=getTablesInDataFrame(schema).collectAsList();
  for (  Row row : rows) {
    String table=row.getString(0);
    tables.add(table);
  }
  return tables;
}","@Override public List<String> getTables(String schema) throws VerdictException {
  List<String> tables=new ArrayList<String>();
  List<Row> rows=getTablesInDataFrame(schema).collectAsList();
  for (  Row row : rows) {
    String table=row.getString(1);
    tables.add(table);
  }
  return tables;
}"
96085,"@Override public Set<String> getDatabases() throws VerdictException {
  Set<String> databases=new HashSet<String>();
  List<Row> rows=getDatabaseNamesInDataFrame().collectAsList();
  for (  Row row : rows) {
    String dbname=row.getString(0);
    databases.add(dbname);
  }
  return databases;
}","@Override public Set<String> getDatabases() throws VerdictException {
  Set<String> databases=new HashSet<String>();
  List<Row> rows=getDatabaseNamesInDataset().collectAsList();
  for (  Row row : rows) {
    String dbname=row.getString(0);
    databases.add(dbname);
  }
  return databases;
}"
96086,"@Override public Map<String,String> getColumns(TableUniqueName table) throws VerdictException {
  Map<String,String> col2type=new LinkedHashMap<String,String>();
  List<Row> rows=describeTableInDataFrame(table).collectAsList();
  for (  Row row : rows) {
    String column=row.getString(0);
    String type=row.getString(1);
    col2type.put(column,type);
  }
  return col2type;
}","@Override public Map<String,String> getColumns(TableUniqueName table) throws VerdictException {
  Map<String,String> col2type=new LinkedHashMap<String,String>();
  List<Row> rows=describeTableInDataset(table).collectAsList();
  for (  Row row : rows) {
    String column=row.getString(0);
    String type=row.getString(1);
    col2type.put(column,type);
  }
  return col2type;
}"
96087,"@Override public List<String> getTables(String schema) throws VerdictException {
  List<String> tables=new ArrayList<String>();
  List<Row> rows=getTablesInDataFrame(schema).collectAsList();
  for (  Row row : rows) {
    String table=row.getString(0);
    tables.add(table);
  }
  return tables;
}","@Override public List<String> getTables(String schema) throws VerdictException {
  List<String> tables=new ArrayList<String>();
  List<Row> rows=getTablesInDataset(schema).collectAsList();
  for (  Row row : rows) {
    String table=row.getString(0);
    tables.add(table);
  }
  return tables;
}"
96088,"@Override public void compute() throws VerdictException {
  VerdictSQLParser p=StringManipulations.parserOf(queryString);
  VerdictSQLBaseVisitor<TableUniqueName> visitor=new VerdictSQLBaseVisitor<TableUniqueName>(){
    private TableUniqueName tableName;
    protected TableUniqueName defaultResult(){
      return tableName;
    }
    @Override public TableUniqueName visitDescribe_table_statement(    VerdictSQLParser.Describe_table_statementContext ctx){
      String schema=null;
      Table_nameContext t=ctx.table_name();
      if (t.schema != null) {
        schema=t.schema.getText();
      }
      String table=t.table.getText();
      tableName=TableUniqueName.uname(schema,table);
      return tableName;
    }
  }
;
  TableUniqueName tableName=visitor.visit(p.describe_table_statement());
  TableUniqueName table=(tableName.getSchemaName() != null) ? tableName : TableUniqueName.uname(vc,tableName.getTableName());
  if (table.getSchemaName() == null) {
    VerdictLogger.info(""String_Node_Str"");
  }
 else {
    if (vc.getDbms().isJDBC()) {
      rs=((DbmsJDBC)vc.getDbms()).describeTableInResultSet(table);
    }
 else     if (vc.getDbms().isSpark()) {
      df=((DbmsSpark)vc.getDbms()).describeTableInDataFrame(table);
    }
 else     if (vc.getDbms().isSpark2()) {
      ds=((DbmsSpark2)vc.getDbms()).describeTableInDataFrame(table);
    }
  }
}","@Override public void compute() throws VerdictException {
  VerdictSQLParser p=StringManipulations.parserOf(queryString);
  VerdictSQLBaseVisitor<TableUniqueName> visitor=new VerdictSQLBaseVisitor<TableUniqueName>(){
    private TableUniqueName tableName;
    protected TableUniqueName defaultResult(){
      return tableName;
    }
    @Override public TableUniqueName visitDescribe_table_statement(    VerdictSQLParser.Describe_table_statementContext ctx){
      String schema=null;
      Table_nameContext t=ctx.table_name();
      if (t.schema != null) {
        schema=t.schema.getText();
      }
      String table=t.table.getText();
      tableName=TableUniqueName.uname(schema,table);
      return tableName;
    }
  }
;
  TableUniqueName tableName=visitor.visit(p.describe_table_statement());
  TableUniqueName table=(tableName.getSchemaName() != null) ? tableName : TableUniqueName.uname(vc,tableName.getTableName());
  if (table.getSchemaName() == null) {
    VerdictLogger.info(""String_Node_Str"");
  }
 else {
    if (vc.getDbms().isJDBC()) {
      rs=((DbmsJDBC)vc.getDbms()).describeTableInResultSet(table);
    }
 else     if (vc.getDbms().isSpark()) {
      df=((DbmsSpark)vc.getDbms()).describeTableInDataFrame(table);
    }
 else     if (vc.getDbms().isSpark2()) {
      ds=((DbmsSpark2)vc.getDbms()).describeTableInDataset(table);
    }
  }
}"
96089,"public Dataset<Row> getDataset(){
  if (ds == null && (vc.getDbms() instanceof DbmsSpark2)) {
    return ((DbmsSpark2)vc.getDbms()).emptyDataFrame();
  }
 else {
    return ds;
  }
}","public Dataset<Row> getDataset(){
  if (ds == null && (vc.getDbms() instanceof DbmsSpark2)) {
    return ((DbmsSpark2)vc.getDbms()).emptyDataset();
  }
 else {
    return ds;
  }
}"
96090,"@Override public void compute() throws VerdictException {
  if (vc.getDbms() instanceof DbmsJDBC) {
    rs=((DbmsJDBC)vc.getDbms()).getDatabaseNamesInResultSet();
  }
 else   if (vc.getDbms() instanceof DbmsSpark) {
    df=((DbmsSpark)vc.getDbms()).getDatabaseNamesInDataFrame();
  }
 else   if (vc.getDbms() instanceof DbmsSpark2) {
    ds=((DbmsSpark2)vc.getDbms()).getDatabaseNamesInDataFrame();
  }
}","@Override public void compute() throws VerdictException {
  if (vc.getDbms() instanceof DbmsJDBC) {
    rs=((DbmsJDBC)vc.getDbms()).getDatabaseNamesInResultSet();
  }
 else   if (vc.getDbms() instanceof DbmsSpark) {
    df=((DbmsSpark)vc.getDbms()).getDatabaseNamesInDataFrame();
  }
 else   if (vc.getDbms() instanceof DbmsSpark2) {
    ds=((DbmsSpark2)vc.getDbms()).getDatabaseNamesInDataset();
  }
}"
96091,"@Override public void compute() throws VerdictException {
  VerdictSQLParser p=StringManipulations.parserOf(queryString);
  VerdictSQLBaseVisitor<String> visitor=new VerdictSQLBaseVisitor<String>(){
    private String schemaName=null;
    protected String defaultResult(){
      return schemaName;
    }
    @Override public String visitShow_tables_statement(    VerdictSQLParser.Show_tables_statementContext ctx){
      if (ctx.schema != null) {
        schemaName=ctx.schema.getText();
      }
      return schemaName;
    }
  }
;
  String schema=visitor.visit(p.show_tables_statement());
  schema=(schema != null) ? schema : ((vc.getCurrentSchema().isPresent()) ? vc.getCurrentSchema().get() : null);
  if (schema == null) {
    VerdictLogger.info(""String_Node_Str"");
    return;
  }
 else {
    if (vc.getDbms().isJDBC()) {
      rs=((DbmsJDBC)vc.getDbms()).getTablesInResultSet(schema);
    }
 else     if (vc.getDbms().isSpark()) {
      df=((DbmsSpark)vc.getDbms()).getTablesInDataFrame(schema);
    }
 else     if (vc.getDbms().isSpark2()) {
      ds=((DbmsSpark2)vc.getDbms()).getTablesInDataFrame(schema);
    }
  }
}","@Override public void compute() throws VerdictException {
  VerdictSQLParser p=StringManipulations.parserOf(queryString);
  VerdictSQLBaseVisitor<String> visitor=new VerdictSQLBaseVisitor<String>(){
    private String schemaName=null;
    protected String defaultResult(){
      return schemaName;
    }
    @Override public String visitShow_tables_statement(    VerdictSQLParser.Show_tables_statementContext ctx){
      if (ctx.schema != null) {
        schemaName=ctx.schema.getText();
      }
      return schemaName;
    }
  }
;
  String schema=visitor.visit(p.show_tables_statement());
  schema=(schema != null) ? schema : ((vc.getCurrentSchema().isPresent()) ? vc.getCurrentSchema().get() : null);
  if (schema == null) {
    VerdictLogger.info(""String_Node_Str"");
    return;
  }
 else {
    if (vc.getDbms().isJDBC()) {
      rs=((DbmsJDBC)vc.getDbms()).getTablesInResultSet(schema);
    }
 else     if (vc.getDbms().isSpark()) {
      df=((DbmsSpark)vc.getDbms()).getTablesInDataFrame(schema);
    }
 else     if (vc.getDbms().isSpark2()) {
      ds=((DbmsSpark2)vc.getDbms()).getTablesInDataset(schema);
    }
  }
}"
96092,"public static String genColumnAlias(Expr expr){
  String a;
  if (expr instanceof ColNameExpr) {
    a=expr.getText();
  }
 else {
    a=String.format(""String_Node_Str"",expr.getText().substring(0,1),column_alias_num);
  }
  column_alias_num++;
  return a;
}","public static String genColumnAlias(Expr expr){
  String a;
  if (expr instanceof ColNameExpr) {
    a=((ColNameExpr)expr).getCol();
  }
 else {
    a=String.format(""String_Node_Str"",expr.getText().substring(0,1),column_alias_num);
  }
  column_alias_num++;
  return a;
}"
96093,"public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  vc.destroy();
}","public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  vc.destroy();
}"
96094,"protected TableUniqueName createUniformRandomSampledTable(SampleParam param) throws VerdictException {
  String whereClause=String.format(""String_Node_Str"",randNumColname,param.samplingRatio);
  ExactRelation sampled=SingleRelation.from(vc,param.getOriginalTable()).select(String.format(""String_Node_Str"",randomNumberExpression(param),randNumColname)).where(whereClause).select(""String_Node_Str"" + randomPartitionColumn());
  TableUniqueName temp=Relation.getTempTableName(vc,param.sampleTableName().getSchemaName());
  dropTable(temp);
  String sql=String.format(""String_Node_Str"",temp,sampled.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(vc,sql),""String_Node_Str"");
  executeUpdate(sql);
  return temp;
}","protected TableUniqueName createUniformRandomSampledTable(SampleParam param) throws VerdictException {
  String whereClause=String.format(""String_Node_Str"",randNumColname,param.samplingRatio);
  ExactRelation sampled=SingleRelation.from(vc,param.getOriginalTable()).select(String.format(""String_Node_Str"",randomNumberExpression(param),randNumColname)).where(whereClause).select(""String_Node_Str"" + randomPartitionColumn());
  TableUniqueName temp=Relation.getTempTableName(vc,param.sampleTableName().getSchemaName());
  dropTable(temp);
  String sql=String.format(""String_Node_Str"",temp,sampled.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debug(this,sql);
  VerdictLogger.debugPretty(this,Relation.prettyfySql(vc,sql),""String_Node_Str"");
  executeUpdate(sql);
  return temp;
}"
96095,"public void setAlias(String alias){
  this.alias=Optional.of(alias.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
}","public void setAlias(String alias){
  if (alias == null) {
    this.alias=Optional.fromNullable(alias);
  }
 else {
    this.alias=Optional.of(alias.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
}"
96096,"/** 
 * This relation must include partition numbers, and the answers must be scaled properly. Note that   {@link ApproxRelation#rewriteWithSubsampledErrorBounds()}is used only for the statement including final error bounds; all internal manipulations must be performed by this method. The rewritten relation transforms original aggregate elements as follows. Every aggregate element is replaced with two aggregate elements. One is for mean estimate and the other is for error estimate. The rewritten relation includes an extra aggregate element: count(*). This is to compute the partition sizes. These partition sizes can be used by an upstream (or parent) relation for computing the final mean estimate. (note that computing weighted average provides higher accuracy compared to unweighted average.)
 * @return
 */
@Override protected ExactRelation rewriteWithPartition(){
  ExactRelation newSource=partitionedSource();
  List<SelectElem> scaledElems=new ArrayList<SelectElem>();
  List<Expr> groupby=new ArrayList<Expr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).getGroupby());
  }
  ColNameExpr partitionColExpr=newSource.partitionColumn();
  Expr tupleSamplingProbExpr=source.tupleProbabilityColumn();
  Expr tableSamplingRatioExpr=source.tableSamplingRatio();
  SingleFunctionTransformerForSubsampling transformer=new SingleFunctionTransformerForSubsampling(vc,groupby,partitionColExpr,tupleSamplingProbExpr,tableSamplingRatioExpr);
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      scaledElems.add(elem);
    }
 else {
      Expr agg=elem.getExpr();
      Expr scaled=transformer.call(agg);
      scaledElems.add(new SelectElem(vc,scaled,elem.getAlias()));
    }
  }
  scaledElems.add(new SelectElem(vc,newSource.partitionColumn(),partitionColumnName()));
  scaledElems.add(new SelectElem(vc,FuncExpr.count(),partitionSizeAlias));
  scaledElems.add(new SelectElem(vc,FuncExpr.avg(ConstantExpr.from(vc,samplingProbability())),samplingProbabilityColumnName()));
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledElems);
  r.setAlias(getAlias());
  return r;
}","/** 
 * @param projectUnprojectedGroups This option is used by {@link ApproxAggregatedRelation#rewriteWithSubsampledErrorBounds()}.
 * @return
 */
protected ExactRelation rewriteWithPartition(boolean projectUnprojectedGroups){
  ExactRelation newSource=partitionedSource();
  List<SelectElem> scaledElems=new ArrayList<SelectElem>();
  List<Expr> groupby=new ArrayList<Expr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).getGroupby());
  }
  ColNameExpr partitionColExpr=newSource.partitionColumn();
  Expr tupleSamplingProbExpr=source.tupleProbabilityColumn();
  Expr tableSamplingRatioExpr=source.tableSamplingRatio();
  SingleFunctionTransformerForSubsampling transformer=new SingleFunctionTransformerForSubsampling(vc,groupby,partitionColExpr,tupleSamplingProbExpr,tableSamplingRatioExpr);
  List<ColNameExpr> unappearingGroups=new ArrayList<ColNameExpr>();
  if (source instanceof ApproxGroupedRelation) {
    for (    Expr e : ((ApproxGroupedRelation)source).getGroupby()) {
      if (e instanceof ColNameExpr) {
        unappearingGroups.add((ColNameExpr)e);
      }
    }
  }
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      scaledElems.add(elem);
      Expr e=elem.getExpr();
      if (e instanceof ColNameExpr) {
        int i=0;
        for (i=0; i < unappearingGroups.size(); i++) {
          if (unappearingGroups.get(i).getCol().equals(((ColNameExpr)e).getCol())) {
            break;
          }
        }
        if (i < unappearingGroups.size()) {
          unappearingGroups.remove(i);
        }
      }
    }
 else {
      Expr agg=elem.getExpr();
      Expr scaled=transformer.call(agg);
      scaledElems.add(new SelectElem(vc,scaled,elem.getAlias()));
    }
  }
  if (projectUnprojectedGroups) {
    for (    ColNameExpr e : unappearingGroups) {
      scaledElems.add(new SelectElem(vc,e));
    }
  }
  scaledElems.add(new SelectElem(vc,newSource.partitionColumn(),partitionColumnName()));
  scaledElems.add(new SelectElem(vc,FuncExpr.count(),partitionSizeAlias));
  scaledElems.add(new SelectElem(vc,FuncExpr.avg(ConstantExpr.from(vc,samplingProbability())),samplingProbabilityColumnName()));
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledElems);
  r.setAlias(getAlias());
  return r;
}"
96097,"@Override public ExactRelation rewriteWithSubsampledErrorBounds(){
  if (!doesIncludeSample()) {
    return getOriginalRelation();
  }
  ExactRelation r=rewriteWithPartition();
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  List<SelectElem> oldElems=((AggregatedRelation)r).getElemList();
  for (int i=0; i < oldElems.size(); i++) {
    SelectElem elem=oldElems.get(i);
    Optional<SelectElem> originalElem=Optional.absent();
    if (i < this.elems.size()) {
      originalElem=Optional.fromNullable(this.elems.get(i));
    }
    if (!elem.isagg()) {
      if (elem.aliasPresent() && elem.getAlias().equals(partitionColumnName())) {
        continue;
      }
      SelectElem newElem=null;
      if (elem.getAlias() == null) {
        Expr newExpr=elem.getExpr().withTableSubstituted(r.getAlias());
        newElem=new SelectElem(vc,newExpr,elem.getAlias());
      }
 else {
        newElem=new SelectElem(vc,new ColNameExpr(vc,elem.getAlias(),r.getAlias()),elem.getAlias());
      }
      newElems.add(newElem);
    }
 else {
      if (elem.getAlias().equals(partitionSizeAlias)) {
        continue;
      }
      if (!originalElem.isPresent()) {
        continue;
      }
      ColNameExpr est=new ColNameExpr(vc,elem.getAlias(),r.getAlias());
      ColNameExpr psize=new ColNameExpr(vc,partitionSizeAlias,r.getAlias());
      Expr averaged=null;
      Expr originalExpr=originalElem.get().getExpr();
      if (originalExpr.isCountDistinct()) {
        averaged=FuncExpr.round(FuncExpr.avg(est));
      }
 else       if (originalExpr.isMax()) {
        averaged=FuncExpr.max(est);
      }
 else       if (originalExpr.isMin()) {
        averaged=FuncExpr.min(est);
      }
 else {
        averaged=BinaryOpExpr.from(vc,FuncExpr.sum(BinaryOpExpr.from(vc,est,psize,""String_Node_Str"")),FuncExpr.sum(psize),""String_Node_Str"");
        if (originalElem.get().getExpr().isCount()) {
          averaged=FuncExpr.round(averaged);
        }
      }
      newElems.add(new SelectElem(vc,averaged,elem.getAlias()));
      if (originalExpr.isMax() || originalExpr.isMin()) {
      }
 else {
        Expr error=BinaryOpExpr.from(vc,BinaryOpExpr.from(vc,FuncExpr.stddev(est),FuncExpr.sqrt(FuncExpr.avg(psize)),""String_Node_Str""),FuncExpr.sqrt(FuncExpr.sum(psize)),""String_Node_Str"");
        error=BinaryOpExpr.from(vc,error,ConstantExpr.from(vc,confidenceIntervalMultiplier()),""String_Node_Str"");
        newElems.add(new SelectElem(vc,error,Relation.errorBoundColumn(elem.getAlias())));
      }
    }
  }
  List<Expr> newGroupby=new ArrayList<Expr>();
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      if (elem.aliasPresent()) {
        if (!elem.getAlias().equals(partitionColumnName())) {
          newGroupby.add(new ColNameExpr(vc,elem.getAlias(),r.getAlias()));
        }
      }
 else {
        if (!elem.getExpr().toString().equals(partitionColumnName())) {
          newGroupby.add(elem.getExpr().withTableSubstituted(r.getAlias()));
        }
      }
    }
  }
  if (newGroupby.size() > 0) {
    r=new GroupedRelation(vc,r,newGroupby);
  }
  r=new AggregatedRelation(vc,r,newElems);
  r.setAlias(getAlias());
  return r;
}","@Override public ExactRelation rewriteWithSubsampledErrorBounds(){
  if (!doesIncludeSample()) {
    return getOriginalRelation();
  }
  ExactRelation r=rewriteWithPartition(true);
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  List<SelectElem> oldElems=((AggregatedRelation)r).getElemList();
  List<Expr> newGroupby=new ArrayList<Expr>();
  for (int i=0; i < oldElems.size(); i++) {
    SelectElem elem=oldElems.get(i);
    Optional<SelectElem> originalElem=Optional.absent();
    if (i < this.elems.size()) {
      originalElem=Optional.fromNullable(this.elems.get(i));
    }
    if (!elem.isagg()) {
      if (elem.aliasPresent() && elem.getAlias().equals(partitionColumnName())) {
        continue;
      }
      SelectElem newElem=null;
      Expr newExpr=null;
      if (elem.getAlias() == null) {
        newExpr=elem.getExpr().withTableSubstituted(r.getAlias());
        newElem=new SelectElem(vc,newExpr,elem.getAlias());
      }
 else {
        newExpr=new ColNameExpr(vc,elem.getAlias(),r.getAlias());
        newElem=new SelectElem(vc,newExpr,elem.getAlias());
      }
      if (originalElem.isPresent()) {
        newElems.add(newElem);
      }
      newGroupby.add(newExpr);
    }
 else {
      if (elem.getAlias().equals(partitionSizeAlias)) {
        continue;
      }
      if (!originalElem.isPresent()) {
        continue;
      }
      ColNameExpr est=new ColNameExpr(vc,elem.getAlias(),r.getAlias());
      ColNameExpr psize=new ColNameExpr(vc,partitionSizeAlias,r.getAlias());
      Expr averaged=null;
      Expr originalExpr=originalElem.get().getExpr();
      if (originalExpr.isCountDistinct()) {
        averaged=FuncExpr.round(FuncExpr.avg(est));
      }
 else       if (originalExpr.isMax()) {
        averaged=FuncExpr.max(est);
      }
 else       if (originalExpr.isMin()) {
        averaged=FuncExpr.min(est);
      }
 else {
        averaged=BinaryOpExpr.from(vc,FuncExpr.sum(BinaryOpExpr.from(vc,est,psize,""String_Node_Str"")),FuncExpr.sum(psize),""String_Node_Str"");
        if (originalElem.get().getExpr().isCount()) {
          averaged=FuncExpr.round(averaged);
        }
      }
      newElems.add(new SelectElem(vc,averaged,elem.getAlias()));
      if (originalExpr.isMax() || originalExpr.isMin()) {
      }
 else {
        Expr error=BinaryOpExpr.from(vc,BinaryOpExpr.from(vc,FuncExpr.stddev(est),FuncExpr.sqrt(FuncExpr.avg(psize)),""String_Node_Str""),FuncExpr.sqrt(FuncExpr.sum(psize)),""String_Node_Str"");
        error=BinaryOpExpr.from(vc,error,ConstantExpr.from(vc,confidenceIntervalMultiplier()),""String_Node_Str"");
        newElems.add(new SelectElem(vc,error,Relation.errorBoundColumn(elem.getAlias())));
      }
    }
  }
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      if (elem.aliasPresent()) {
        if (!elem.getAlias().equals(partitionColumnName())) {
          newGroupby.add(new ColNameExpr(vc,elem.getAlias(),r.getAlias()));
        }
      }
 else {
        if (!elem.getExpr().toString().equals(partitionColumnName())) {
          newGroupby.add(elem.getExpr().withTableSubstituted(r.getAlias()));
        }
      }
    }
  }
  if (newGroupby.size() > 0) {
    r=new GroupedRelation(vc,r,newGroupby);
  }
  r=new AggregatedRelation(vc,r,newElems);
  r.setAlias(getAlias());
  return r;
}"
96098,"public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"");
  vc.executeJdbcQuery(""String_Node_Str"");
  vc.executeJdbcQuery(""String_Node_Str"");
  vc.destroy();
}","public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"");
  vc.destroy();
}"
96099,"@Override protected Expr replaceColNameExpr(ColNameExpr expr){
  if (expr.getTab() != null) {
    if (expr.getSchema() != null) {
      TableUniqueName t=new TableUniqueName(expr.getSchema(),expr.getTab());
      if (tabAliasColumns.containsKey(t)) {
        return new ColNameExpr(vc,expr.getCol(),tabAliasColumns.get(t).getKey());
      }
    }
 else {
      TableUniqueName a=new TableUniqueName(null,expr.getTab());
      if (tabAliasColumns.containsKey(a)) {
        return new ColNameExpr(vc,expr.getCol(),tabAliasColumns.get(a).getKey());
      }
      TableUniqueName t=TableUniqueName.uname(vc,expr.getTab());
      if (tabAliasColumns.containsKey(t)) {
        return new ColNameExpr(vc,expr.getCol(),tabAliasColumns.get(t).getKey());
      }
    }
  }
 else {
    String col=expr.getCol();
    for (    Map.Entry<TableUniqueName,Pair<String,Set<String>>> e : tabAliasColumns.entrySet()) {
      Pair<String,Set<String>> aliasCols=e.getValue();
      if (aliasCols.getValue().contains(col)) {
        return new ColNameExpr(vc,col,aliasCols.getKey());
      }
    }
  }
  VerdictLogger.error(this,String.format(""String_Node_Str"",expr.toString()));
  return expr;
}","@Override protected Expr replaceColNameExpr(ColNameExpr expr){
  if (expr.getTab() != null) {
    if (expr.getSchema() != null) {
      TableUniqueName t=new TableUniqueName(expr.getSchema(),expr.getTab());
      if (tabAliasColumns.containsKey(t)) {
        return new ColNameExpr(vc,expr.getCol(),tabAliasColumns.get(t).getKey());
      }
    }
 else {
      for (      Pair<String,Set<String>> aliasColumns : tabAliasColumns.values()) {
        String alias=aliasColumns.getKey();
        if (alias.equals(expr.getTab())) {
          return expr;
        }
      }
      TableUniqueName t=TableUniqueName.uname(vc,expr.getTab());
      if (tabAliasColumns.containsKey(t)) {
        return new ColNameExpr(vc,expr.getCol(),tabAliasColumns.get(t).getKey());
      }
    }
  }
 else {
    String col=expr.getCol();
    for (    Map.Entry<TableUniqueName,Pair<String,Set<String>>> e : tabAliasColumns.entrySet()) {
      Pair<String,Set<String>> aliasCols=e.getValue();
      if (aliasCols.getValue().contains(col)) {
        return new ColNameExpr(vc,col,aliasCols.getKey());
      }
    }
  }
  VerdictLogger.error(this,String.format(""String_Node_Str"",expr.toString()));
  return expr;
}"
96100,"public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  vc.destroy();
}","public static void main(String[] args) throws VerdictException, FileNotFoundException {
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(BaseIT.readHost());
  conf.setPort(""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  VerdictContext vc=VerdictJDBCContext.from(conf);
  vc.executeJdbcQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  vc.destroy();
}"
96101,"@Override public ExactRelation visitJoin_part(VerdictSQLParser.Join_partContext ctx){
  if (ctx.INNER() != null) {
    TableSourceExtractor ext=new TableSourceExtractor();
    ExactRelation r=ext.visit(ctx.table_source());
    Cond cond=Cond.from(vc,ctx.search_condition());
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    Cond resolved=resolver.visit(cond);
    if (resolved instanceof CompCond) {
      CompCond comp=(CompCond)resolved;
      Expr right=comp.getRight();
      if (right instanceof ColNameExpr) {
        if (((ColNameExpr)right).getCol() != r.getAlias()) {
          resolved=new CompCond(comp.getRight(),comp.getOp(),comp.getLeft());
        }
      }
    }
    joinCond=resolved;
    return r;
  }
 else {
    VerdictLogger.error(this,""String_Node_Str"" + ctx.getText());
    return null;
  }
}","@Override public ExactRelation visitJoin_part(VerdictSQLParser.Join_partContext ctx){
  if (ctx.INNER() != null) {
    TableSourceExtractor ext=new TableSourceExtractor();
    ExactRelation r=ext.visit(ctx.table_source());
    Cond cond=Cond.from(vc,ctx.search_condition());
    ColNameResolver resolver=new ColNameResolver(tableAliasAndColNames);
    Cond resolved=resolver.visit(cond);
    if (resolved instanceof CompCond) {
      CompCond comp=(CompCond)resolved;
      Expr right=comp.getRight();
      if (right instanceof ColNameExpr) {
        if (((ColNameExpr)right).getTab() != r.getAlias()) {
          resolved=new CompCond(comp.getRight(),comp.getOp(),comp.getLeft());
        }
      }
    }
    joinCond=resolved;
    return r;
  }
 else {
    VerdictLogger.error(this,""String_Node_Str"" + ctx.getText());
    return null;
  }
}"
96102,"@Override public Map<String,String> getColumns(TableUniqueName table) throws VerdictException {
  Map<String,String> col2type=new LinkedHashMap<String,String>();
  List<Row> rows=executeSparkQuery(""String_Node_Str"" + table).collectAsList();
  for (  Row row : rows) {
    String column=row.getString(0);
    String type=row.getString(2);
    col2type.put(column,type);
  }
  return col2type;
}","@Override public Map<String,String> getColumns(TableUniqueName table) throws VerdictException {
  Map<String,String> col2type=new LinkedHashMap<String,String>();
  List<Row> rows=executeSparkQuery(""String_Node_Str"" + table).collectAsList();
  for (  Row row : rows) {
    String column=row.getString(0);
    String type=row.getString(1);
    col2type.put(column,type);
  }
  return col2type;
}"
96103,"@Override protected void testGroupbyCountFor(String tableName,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).count().orderby(groups).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}","@Override protected void testGroupbyCountFor(String tableName,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).count().orderby(groups).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}"
96104,"@Override protected void testSimpleAvgFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.avg(aggCol).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}","@Override protected void testSimpleAvgFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.avg(aggCol).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}"
96105,"@Override protected void testGroupbyAvgFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).avg(aggCol).orderby(groups).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}","@Override protected void testGroupbyAvgFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).avg(aggCol).orderby(groups).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}"
96106,"@Override protected void testSimpleCountFor(String tableName,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.count().collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}","@Override protected void testSimpleCountFor(String tableName,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.count().collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}"
96107,"@Override protected void testGroupbyCountDistinctFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).countDistinct(aggCol).orderby(groups).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}","@Override protected void testGroupbyCountDistinctFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).countDistinct(aggCol).orderby(groups).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}"
96108,"@Override protected void testSimpleCountDistinctFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.countDistinct(aggCol).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}","@Override protected void testSimpleCountDistinctFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.countDistinct(aggCol).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}"
96109,"@Override protected void testSimpleSumFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.sum(aggCol).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}","@Override protected void testSimpleSumFor(String tableName,String aggCol,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String sql=String.format(""String_Node_Str"",aggCol,tableName);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.sum(aggCol).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsSimilar(expected,actual,1,error);
}"
96110,"@Override protected void testGroupbySumFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).sum(aggCol).orderby(groups).collectResultSet());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}","@Override protected void testGroupbySumFor(String tableName,String aggCol,List<String> groupby,String sampleType,List<String> sampleColumns) throws SQLException, VerdictException {
  String groups=Joiner.on(""String_Node_Str"").join(groupby);
  String sql=String.format(""String_Node_Str"",groups,aggCol,tableName,groups,groups);
  List<List<Object>> expected=collectResult(hc.sql(sql));
  TableUniqueName originalTable=TableUniqueName.uname(vc,tableName);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(vc,originalTable,sampleType,samplingRatio,sampleColumns));
  List<List<Object>> actual=collectResult(r.groupby(groups).sum(aggCol).orderby(groups).collectDataFrame());
  printTestCase(sql,expected,actual);
  assertColsEqual(expected,actual,1);
  assertColsSimilar(expected,actual,2,error);
}"
96111,"private TableUniqueName createTableWithRandNumbers(SampleParam param) throws VerdictException {
  ExactRelation withRand=SingleRelation.from(vc,param.originalTable).select(""String_Node_Str"");
  TableUniqueName temp=Relation.getTempTableName(vc,param.sampleTableName().getSchemaName());
  String sql=String.format(""String_Node_Str"",temp,withRand.toSql());
  executeUpdate(sql);
  return temp;
}","private TableUniqueName createTableWithRandNumbers(SampleParam param) throws VerdictException {
  ExactRelation withRand=SingleRelation.from(vc,param.originalTable).select(""String_Node_Str"");
  TableUniqueName temp=Relation.getTempTableName(vc,param.sampleTableName().getSchemaName());
  String sql=String.format(""String_Node_Str"",temp,withRand.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql),""String_Node_Str"");
  executeUpdate(sql);
  return temp;
}"
96112,"private void createUniformRandomSampleFromRandTable(SampleParam param,TableUniqueName temp) throws VerdictException {
  String samplingProbCol=vc.getDbms().samplingProbabilityColumnName();
  Set<String> colNames=vc.getMeta().getColumns(param.originalTable);
  ExactRelation withRand=SingleRelation.from(vc,temp);
  long total_size=withRand.countValue();
  ExactRelation sampled=withRand.select(Joiner.on(""String_Node_Str"").join(colNames) + ""String_Node_Str"" + total_size+ ""String_Node_Str""+ samplingProbCol+ ""String_Node_Str""+ randomPartitionColumn());
  String sql=String.format(""String_Node_Str"",param.sampleTableName() + sampled.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql),""String_Node_Str"");
  executeUpdate(sql);
}","private void createUniformRandomSampleFromRandTable(SampleParam param,TableUniqueName temp) throws VerdictException {
  String samplingProbCol=vc.getDbms().samplingProbabilityColumnName();
  Set<String> colNames=vc.getMeta().getColumns(param.originalTable);
  ExactRelation withRand=SingleRelation.from(vc,temp);
  long total_size=withRand.countValue();
  ExactRelation sampled=withRand.where(""String_Node_Str"" + param.samplingRatio).select(Joiner.on(""String_Node_Str"").join(colNames) + ""String_Node_Str"" + total_size+ ""String_Node_Str""+ samplingProbCol+ ""String_Node_Str""+ randomPartitionColumn());
  String sql=String.format(""String_Node_Str"",param.sampleTableName(),sampled.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql),""String_Node_Str"");
  executeUpdate(sql);
}"
96113,"@Override protected Map<TableUniqueName,String> tableSubstitution(){
  return ImmutableMap.of();
}","@Override protected Map<TableUniqueName,String> tableSubstitution(){
  return source.tableSubstitution();
}"
96114,"private Expr transformForSingleFunctionWithPartitionSize(Expr f,final List<ColNameExpr> samplingProbCols,List<Expr> groupby,final ColNameExpr partitionCol,final Map<TableUniqueName,String> tablesNamesSub,final boolean forErrorEst){
  final List<Expr> groupbyExpr=new ArrayList<Expr>();
  for (  Expr c : groupby) {
    groupbyExpr.add((Expr)c);
  }
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,tablesNamesSub);
        List<Expr> samplingProbExprs=source.samplingProbabilityExprsFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProbExprs));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol,forErrorEst);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          Expr scale=scaleForSampling(samplingProbExprs);
          Expr est=null;
          if (dbname.equals(""String_Node_Str"")) {
            est=new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr());
          }
 else {
            est=new FuncExpr(FuncExpr.FuncName.COUNT_DISTINCT,s.getUnaryExpr());
          }
          est=BinaryOpExpr.from(est,scale,""String_Node_Str"");
          if (sampleType().equals(""String_Node_Str"")) {
            est=scaleWithPartitionSize(est,groupbyExpr,partitionCol,forErrorEst);
          }
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProbExprs);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol,forErrorEst);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProbExprs);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}","private Expr transformForSingleFunctionWithPartitionSize(Expr f,final List<ColNameExpr> samplingProbCols,final List<Expr> groupby,final ColNameExpr partitionCol,final Map<TableUniqueName,String> tablesNamesSub,final boolean forErrorEst){
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,tablesNamesSub);
        List<Expr> samplingProbExprs=source.samplingProbabilityExprsFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProbExprs));
          est=scaleWithPartitionSize(est,groupby,partitionCol,forErrorEst);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          Expr scale=scaleForSampling(samplingProbExprs);
          Expr est=null;
          if (dbname.equals(""String_Node_Str"")) {
            est=new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr());
          }
 else {
            est=new FuncExpr(FuncExpr.FuncName.COUNT_DISTINCT,s.getUnaryExpr());
          }
          est=BinaryOpExpr.from(est,scale,""String_Node_Str"");
          if (sampleType().equals(""String_Node_Str"")) {
            est=scaleWithPartitionSize(est,groupby,partitionCol,forErrorEst);
          }
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProbExprs);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          est=scaleWithPartitionSize(est,groupby,partitionCol,forErrorEst);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProbExprs);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}"
96115,"/** 
 * This relation must include partition numbers, and the answers must be scaled properly. Note that   {@link ApproxRelation#rewriteWithSubsampledErrorBounds()}is used only for the statement including final error bounds; all internal manipulations must be performed by this method. The rewritten relation transforms original aggregate elements as follows. Every aggregate element is replaced with two aggregate elements. One is for mean estimate and the other is for error estimate. The rewritten relation includes an extra aggregate element: count(*). This is to compute the partition sizes. These partition sizes can be used by an upstream (or parent) relation for computing the final mean estimate. (note that computing weighted average provides higher accuracy compared to unweighted average.)
 * @return
 */
@Override protected ExactRelation rewriteWithPartition(){
  ExactRelation newSource=partitionedSource();
  List<Expr> scaledExpr=new ArrayList<Expr>();
  List<ColNameExpr> samplingProbCols=newSource.accumulateSamplingProbColumns();
  List<Expr> groupby=new ArrayList<Expr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).getGroupby());
  }
  final Map<TableUniqueName,String> sub=source.tableSubstitution();
  for (  Expr e : aggs) {
    Expr scaled=transformForSingleFunctionWithPartitionSize(e,samplingProbCols,groupby,newSource.partitionColumn(),sub,false);
    scaledExpr.add(scaled);
  }
  scaledExpr.add(FuncExpr.count());
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledExpr);
  return r;
}","/** 
 * This relation must include partition numbers, and the answers must be scaled properly. Note that   {@link ApproxRelation#rewriteWithSubsampledErrorBounds()}is used only for the statement including final error bounds; all internal manipulations must be performed by this method. The rewritten relation transforms original aggregate elements as follows. Every aggregate element is replaced with two aggregate elements. One is for mean estimate and the other is for error estimate. The rewritten relation includes an extra aggregate element: count(*). This is to compute the partition sizes. These partition sizes can be used by an upstream (or parent) relation for computing the final mean estimate. (note that computing weighted average provides higher accuracy compared to unweighted average.)
 * @return
 */
@Override protected ExactRelation rewriteWithPartition(){
  ExactRelation newSource=partitionedSource();
  List<Expr> scaledExpr=new ArrayList<Expr>();
  List<ColNameExpr> samplingProbCols=newSource.accumulateSamplingProbColumns();
  List<Expr> groupby=new ArrayList<Expr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).groupbyWithTablesSubstituted());
  }
  final Map<TableUniqueName,String> sub=source.tableSubstitution();
  for (  Expr e : aggs) {
    Expr scaled=transformForSingleFunctionWithPartitionSize(e,samplingProbCols,groupby,newSource.partitionColumn(),sub,false);
    scaledExpr.add(scaled);
  }
  scaledExpr.add(FuncExpr.count());
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledExpr);
  return r;
}"
96116,"@Override protected Map<TableUniqueName,String> tableSubstitution(){
  return source.tableSubstitution();
}","/** 
 * Due to the fact that the antecedents of a projected relation does not propagate any substitution.
 */
@Override protected Map<TableUniqueName,String> tableSubstitution(){
  return ImmutableMap.of();
}"
96117,"@Override public ExactRelation rewriteWithSubsampledErrorBounds(){
  if (!(source instanceof ApproxAggregatedRelation)) {
    ExactRelation r=new ProjectedRelation(vc,source.rewriteWithSubsampledErrorBounds(),elems);
    r.setAliasName(getAlias());
    return r;
  }
  ExactRelation r=rewriteWithPartition(true);
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  List<Expr> newAggs=new ArrayList<Expr>();
  List<SelectElem> elems=((ProjectedRelation)r).getSelectElems();
  for (int i=0; i < elems.size() - 1; i++) {
    SelectElem elem=elems.get(i);
    if (!elem.isagg()) {
      SelectElem newElem=null;
      if (elem.getAlias() == null) {
        newElem=new SelectElem(elem.getExpr(),elem.getAlias());
      }
 else {
        newElem=new SelectElem(ColNameExpr.from(elem.getAlias()),elem.getAlias());
      }
      newElems.add(newElem);
    }
 else {
      if (elem.getAlias().equals(partitionSizeAlias)) {
        continue;
      }
      ColNameExpr est=new ColNameExpr(elem.getAlias(),r.getAlias());
      ColNameExpr psize=new ColNameExpr(partitionSizeAlias,r.getAlias());
      Expr averaged=null;
      if (elem.getExpr().isCountDistinct()) {
        averaged=FuncExpr.round(FuncExpr.avg(est));
      }
 else {
        averaged=BinaryOpExpr.from(FuncExpr.sum(BinaryOpExpr.from(est,psize,""String_Node_Str"")),FuncExpr.sum(psize),""String_Node_Str"");
        if (elem.getExpr().isCount()) {
          averaged=FuncExpr.round(averaged);
        }
      }
      newElems.add(new SelectElem(averaged,elem.getAlias()));
      newAggs.add(averaged);
      Expr error=BinaryOpExpr.from(BinaryOpExpr.from(FuncExpr.stddev(est),FuncExpr.sqrt(FuncExpr.avg(psize)),""String_Node_Str""),FuncExpr.sqrt(FuncExpr.sum(psize)),""String_Node_Str"");
      error=BinaryOpExpr.from(error,ConstantExpr.from(confidenceIntervalMultiplier()),""String_Node_Str"");
      newElems.add(new SelectElem(error,Relation.errorBoundColumn(elem.getAlias())));
      newAggs.add(error);
    }
  }
  List<Expr> newGroupby=new ArrayList<Expr>();
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      if (elem.aliasPresent()) {
        if (!elem.getAlias().equals(partitionColumnName())) {
          newGroupby.add(ColNameExpr.from(elem.getAlias()));
        }
      }
 else {
        if (!elem.getExpr().toString().equals(partitionColumnName())) {
          newGroupby.add(elem.getExpr());
        }
      }
    }
  }
  if (newGroupby.size() > 0) {
    r=new GroupedRelation(vc,r,newGroupby);
  }
  r=new AggregatedRelation(vc,r,newAggs);
  r=new ProjectedRelation(vc,r,newElems);
  return r;
}","@Override public ExactRelation rewriteWithSubsampledErrorBounds(){
  if (!(source instanceof ApproxAggregatedRelation)) {
    ExactRelation r=new ProjectedRelation(vc,source.rewriteWithSubsampledErrorBounds(),elemsWithSubstitutedTables());
    r.setAliasName(getAlias());
    return r;
  }
  ExactRelation r=rewriteWithPartition(true);
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  List<Expr> newAggs=new ArrayList<Expr>();
  List<SelectElem> elems=((ProjectedRelation)r).getSelectElems();
  for (int i=0; i < elems.size() - 1; i++) {
    SelectElem elem=elems.get(i);
    if (!elem.isagg()) {
      SelectElem newElem=null;
      if (elem.getAlias() == null) {
        Expr newExpr=elem.getExpr().withTableSubstituted(r.getAlias());
        newElem=new SelectElem(newExpr,elem.getAlias());
      }
 else {
        newElem=new SelectElem(new ColNameExpr(elem.getAlias(),r.getAlias()),elem.getAlias());
      }
      newElems.add(newElem);
    }
 else {
      if (elem.getAlias().equals(partitionSizeAlias)) {
        continue;
      }
      ColNameExpr est=new ColNameExpr(elem.getAlias(),r.getAlias());
      ColNameExpr psize=new ColNameExpr(partitionSizeAlias,r.getAlias());
      Expr averaged=null;
      if (elem.getExpr().isCountDistinct()) {
        averaged=FuncExpr.round(FuncExpr.avg(est));
      }
 else {
        averaged=BinaryOpExpr.from(FuncExpr.sum(BinaryOpExpr.from(est,psize,""String_Node_Str"")),FuncExpr.sum(psize),""String_Node_Str"");
        if (elem.getExpr().isCount()) {
          averaged=FuncExpr.round(averaged);
        }
      }
      newElems.add(new SelectElem(averaged,elem.getAlias()));
      newAggs.add(averaged);
      Expr error=BinaryOpExpr.from(BinaryOpExpr.from(FuncExpr.stddev(est),FuncExpr.sqrt(FuncExpr.avg(psize)),""String_Node_Str""),FuncExpr.sqrt(FuncExpr.sum(psize)),""String_Node_Str"");
      error=BinaryOpExpr.from(error,ConstantExpr.from(confidenceIntervalMultiplier()),""String_Node_Str"");
      newElems.add(new SelectElem(error,Relation.errorBoundColumn(elem.getAlias())));
      newAggs.add(error);
    }
  }
  List<Expr> newGroupby=new ArrayList<Expr>();
  for (  SelectElem elem : elems) {
    if (!elem.isagg()) {
      if (elem.aliasPresent()) {
        if (!elem.getAlias().equals(partitionColumnName())) {
          newGroupby.add(new ColNameExpr(elem.getAlias(),r.getAlias()));
        }
      }
 else {
        if (!elem.getExpr().toString().equals(partitionColumnName())) {
          newGroupby.add(elem.getExpr().withTableSubstituted(r.getAlias()));
        }
      }
    }
  }
  if (newGroupby.size() > 0) {
    r=new GroupedRelation(vc,r,newGroupby);
  }
  r=new AggregatedRelation(vc,r,newAggs);
  r=new ProjectedRelation(vc,r,newElems);
  return r;
}"
96118,"@Override public ExactRelation rewriteForPointEstimate(){
  ExactRelation r=new ProjectedRelation(vc,source.rewriteForPointEstimate(),elems);
  r.setAliasName(getAlias());
  return r;
}","@Override public ExactRelation rewriteForPointEstimate(){
  ExactRelation r=new ProjectedRelation(vc,source.rewriteForPointEstimate(),elemsWithSubstitutedTables());
  r.setAliasName(getAlias());
  return r;
}"
96119,"/** 
 * Inserts extra information if extra is set to true. The extra information is: 1. partition size. 
 * @param extra
 * @return
 */
protected ExactRelation rewriteWithPartition(boolean extra){
  ExactRelation newSource=source.rewriteWithPartition();
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  int index=0;
  for (  SelectElem elem : elems) {
    if (!elem.getExpr().isagg()) {
      newElems.add(elem);
    }
 else {
      Expr agg=((AggregatedRelation)newSource).getAggList().get(index++);
      newElems.add(new SelectElem(agg,elem.getAlias()));
    }
  }
  if (extra) {
    newElems.add(new SelectElem(FuncExpr.count(),partitionSizeAlias));
  }
  newElems.add(new SelectElem(newSource.partitionColumn(),partitionColumnName()));
  ExactRelation r=new ProjectedRelation(vc,newSource,newElems);
  r.setAliasName(getAlias());
  return r;
}","/** 
 * Inserts extra information if extra is set to true. The extra information is: 1. partition size. 
 * @param extra
 * @return
 */
protected ExactRelation rewriteWithPartition(boolean extra){
  ExactRelation newSource=source.rewriteWithPartition();
  List<SelectElem> newElems=new ArrayList<SelectElem>();
  Map<TableUniqueName,String> sub=source.tableSubstitution();
  int index=0;
  for (  SelectElem elem : elems) {
    if (!elem.getExpr().isagg()) {
      Expr newExpr=exprWithTableNamesSubstituted(elem.getExpr(),sub);
      SelectElem newElem=new SelectElem(newExpr,elem.getAlias());
      newElems.add(newElem);
    }
 else {
      Expr agg=((AggregatedRelation)newSource).getAggList().get(index++);
      agg=exprWithTableNamesSubstituted(agg,sub);
      newElems.add(new SelectElem(agg,elem.getAlias()));
    }
  }
  if (extra) {
    newElems.add(new SelectElem(FuncExpr.count(),partitionSizeAlias));
  }
  newElems.add(new SelectElem(newSource.partitionColumn(),partitionColumnName()));
  ExactRelation r=new ProjectedRelation(vc,newSource,newElems);
  r.setAliasName(getAlias());
  return r;
}"
96120,"@Override protected Map<TableUniqueName,String> tableSubstitution(){
  Map<TableUniqueName,String> s=ImmutableMap.of(param.originalTable,alias);
  return s;
}","/** 
 * Using this substitution pattern can handle: 1. user specified his own table alias and using it: no need for substitution since aliases are preserved. 2. user specified his own table alias but referring the raw table name: below pattern handles it. 3. user didn't specified table aliases: below pattern handles it.
 */
@Override protected Map<TableUniqueName,String> tableSubstitution(){
  Map<TableUniqueName,String> s=ImmutableMap.of(param.originalTable,alias);
  return s;
}"
96121,"public Relation call(Relation r){
  return r;
}","public Expr call(Expr expr){
  return expr;
}"
96122,"/** 
 * Makes connections to the 'data' DBMS and 'meta' DBMS.
 * @param conf
 * @throws VerdictException
 */
public VerdictContext(VerdictConf conf) throws VerdictException {
  this.conf=conf;
  dbms=Dbms.getInstance(this,conf.getDbms(),conf.getHost(),conf.getPort(),conf.getDbmsSchema(),(conf.getBoolean(""String_Node_Str"")) ? ""String_Node_Str"" : conf.getUser(),(conf.getBoolean(""String_Node_Str"")) ? ""String_Node_Str"" : conf.getPassword(),conf.get(conf.getDbms() + ""String_Node_Str""));
  VerdictLogger.info((conf.getDbmsSchema() != null) ? String.format(""String_Node_Str"",conf.getDbms(),conf.getHost(),conf.getPort(),conf.getDbmsSchema()) : String.format(""String_Node_Str"",conf.getDbms(),conf.getHost(),conf.getPort()));
  metaDbms=dbms;
  meta=new VerdictMeta(this);
  if (conf.getDbmsSchema() != null) {
    meta.refreshSampleInfo(conf.getDbmsSchema());
  }
}","/** 
 * Makes connections to the 'data' DBMS and 'meta' DBMS.
 * @param conf
 * @throws VerdictException
 */
public VerdictContext(VerdictConf conf) throws VerdictException {
  this.conf=conf;
  dbms=Dbms.getInstance(this,conf.getDbms(),conf.getHost(),conf.getPort(),conf.getDbmsSchema(),(conf.getBoolean(""String_Node_Str"")) ? ""String_Node_Str"" : conf.getUser(),(conf.getBoolean(""String_Node_Str"")) ? ""String_Node_Str"" : conf.getPassword(),conf.get(conf.getDbms() + ""String_Node_Str""));
  VerdictLogger.info((conf.getDbmsSchema() != null) ? String.format(""String_Node_Str"",conf.getDbms(),conf.getHost(),conf.getPort(),conf.getDbmsSchema()) : String.format(""String_Node_Str"",conf.getDbms(),conf.getHost(),conf.getPort()));
  metaDbms=dbms;
  meta=new VerdictMeta(this);
  if (conf.getDbmsSchema() != null) {
    meta.refreshSampleInfo(conf.getDbmsSchema());
  }
  this.contextId=ThreadLocalRandom.current().nextInt(0,10000);
}"
96123,"public void refreshSampleInfo(String schemaName){
  ResultSet rs;
  TableUniqueName metaNameTable=getMetaNameTableName(schemaName);
  TableUniqueName metaSizeTable=getMetaSizeTableName(schemaName);
  try {
    String sql=String.format(""String_Node_Str"" + ""String_Node_Str"",metaNameTable);
    rs=getMetaDbms().executeQuery(sql);
    while (rs.next()) {
      String originalSchemaName=rs.getString(1);
      String originalTabName=rs.getString(2);
      String sampleSchemaName=rs.getString(3);
      String sampleTabName=rs.getString(4);
      String sampleType=rs.getString(5);
      double samplingRatio=rs.getDouble(6);
      String columnNamesString=rs.getString(7);
      List<String> columnNames=(columnNamesString.length() == 0) ? new ArrayList<String>() : Arrays.asList(columnNamesString.split(""String_Node_Str""));
      TableUniqueName originalTable=TableUniqueName.uname(originalSchemaName,originalTabName);
      if (!sampleNameMeta.containsKey(originalTable)) {
        sampleNameMeta.put(originalTable,new HashMap<SampleParam,TableUniqueName>());
      }
      sampleNameMeta.get(originalTable).put(new SampleParam(originalTable,sampleType,samplingRatio,columnNames),TableUniqueName.uname(sampleSchemaName,sampleTabName));
    }
    rs.close();
    sql=String.format(""String_Node_Str"" + ""String_Node_Str"",metaSizeTable);
    rs=getMetaDbms().executeQuery(sql);
    while (rs.next()) {
      String sampleSchemaName=rs.getString(1);
      String sampleTabName=rs.getString(2);
      Long sampleSize=rs.getLong(3);
      Long originalTableSize=rs.getLong(4);
      sampleSizeMeta.put(TableUniqueName.uname(sampleSchemaName,sampleTabName),new SampleSizeInfo(sampleSize,originalTableSize));
    }
    rs.close();
    tableToColumnNames.clear();
    List<Pair<String,String>> tabCols=vc.getDbms().getAllTableAndColumns(schemaName);
    for (    Pair<String,String> tabCol : tabCols) {
      TableUniqueName tableUName=TableUniqueName.uname(schemaName,tabCol.getLeft());
      if (!tableToColumnNames.containsKey(tableUName)) {
        tableToColumnNames.put(tableUName,new ArrayList<String>());
      }
      tableToColumnNames.get(tableUName).add(tabCol.getRight());
    }
  }
 catch (  VerdictException|SQLException e) {
  }
  VerdictLogger.debug(this,""String_Node_Str"");
}","public void refreshSampleInfo(String schemaName){
  ResultSet rs;
  TableUniqueName metaNameTable=getMetaNameTableName(schemaName);
  TableUniqueName metaSizeTable=getMetaSizeTableName(schemaName);
  try {
    tableToColumnNames.clear();
    List<Pair<String,String>> tabCols=vc.getDbms().getAllTableAndColumns(schemaName);
    for (    Pair<String,String> tabCol : tabCols) {
      TableUniqueName tableUName=TableUniqueName.uname(schemaName,tabCol.getLeft());
      if (!tableToColumnNames.containsKey(tableUName)) {
        tableToColumnNames.put(tableUName,new ArrayList<String>());
      }
      tableToColumnNames.get(tableUName).add(tabCol.getRight());
    }
    if (tableToColumnNames.containsKey(metaNameTable)) {
      rs=SingleRelation.from(vc,metaNameTable).select(""String_Node_Str"").collectResultSet();
      while (rs.next()) {
        String originalSchemaName=rs.getString(1);
        String originalTabName=rs.getString(2);
        String sampleSchemaName=rs.getString(3);
        String sampleTabName=rs.getString(4);
        String sampleType=rs.getString(5);
        double samplingRatio=rs.getDouble(6);
        String columnNamesString=rs.getString(7);
        List<String> columnNames=(columnNamesString.length() == 0) ? new ArrayList<String>() : Arrays.asList(columnNamesString.split(""String_Node_Str""));
        TableUniqueName originalTable=TableUniqueName.uname(originalSchemaName,originalTabName);
        if (!sampleNameMeta.containsKey(originalTable)) {
          sampleNameMeta.put(originalTable,new HashMap<SampleParam,TableUniqueName>());
        }
        sampleNameMeta.get(originalTable).put(new SampleParam(originalTable,sampleType,samplingRatio,columnNames),TableUniqueName.uname(sampleSchemaName,sampleTabName));
      }
      rs.close();
    }
    if (tableToColumnNames.containsKey(metaSizeTable)) {
      rs=SingleRelation.from(vc,metaSizeTable).select(""String_Node_Str"").collectResultSet();
      while (rs.next()) {
        String sampleSchemaName=rs.getString(1);
        String sampleTabName=rs.getString(2);
        Long sampleSize=rs.getLong(3);
        Long originalTableSize=rs.getLong(4);
        sampleSizeMeta.put(TableUniqueName.uname(sampleSchemaName,sampleTabName),new SampleSizeInfo(sampleSize,originalTableSize));
      }
      rs.close();
    }
  }
 catch (  VerdictException|SQLException e) {
  }
  VerdictLogger.debug(this,""String_Node_Str"");
}"
96124,"public TableUniqueName(String schemaName,String tableName){
  this.schemaName=schemaName;
  this.tableName=tableName;
}","public TableUniqueName(String schemaName,String tableName){
  this.schemaName=(schemaName != null) ? schemaName.toLowerCase() : schemaName;
  this.tableName=(tableName != null) ? tableName.toLowerCase() : tableName;
}"
96125,"protected TableUniqueName createTempTableExlucdingNameEntry(SampleParam param,TableUniqueName metaNameTableName) throws VerdictException {
  TableUniqueName tempTableName=generateTempTableName();
  TableUniqueName originalTableName=param.originalTable;
  executeUpdate(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",tempTableName,metaNameTableName,originalTableName.schemaName,originalTableName.tableName,param.sampleType,samplingRatioToString(param.samplingRatio),columnNameListToString(param.columnNames)));
  return tempTableName;
}","protected TableUniqueName createTempTableExlucdingNameEntry(SampleParam param,TableUniqueName metaNameTableName) throws VerdictException {
  TableUniqueName tempTableName=Relation.getTempTableName(vc);
  TableUniqueName originalTableName=param.originalTable;
  executeUpdate(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",tempTableName,metaNameTableName,originalTableName.schemaName,originalTableName.tableName,param.sampleType,samplingRatioToString(param.samplingRatio),columnNameListToString(param.columnNames)));
  return tempTableName;
}"
96126,"protected TableUniqueName createTempTableWithRand(TableUniqueName originalTableName) throws VerdictException {
  TableUniqueName tempTableName=generateTempTableName();
  VerdictLogger.debug(this,""String_Node_Str"" + tempTableName);
  executeUpdate(String.format(""String_Node_Str"",tempTableName,originalTableName));
  VerdictLogger.debug(this,""String_Node_Str"");
  return tempTableName;
}","protected TableUniqueName createTempTableWithRand(TableUniqueName originalTableName) throws VerdictException {
  TableUniqueName tempTableName=Relation.getTempTableName(vc);
  VerdictLogger.debug(this,""String_Node_Str"" + tempTableName);
  executeUpdate(String.format(""String_Node_Str"",tempTableName,originalTableName));
  VerdictLogger.debug(this,""String_Node_Str"");
  return tempTableName;
}"
96127,"/** 
 * Creates a stratified sample from a temp table, which is created by  {@link DbmsImpala#createTempTableWithGroupCountsAndRand createTempTableWithGroupCountsAndRand}. The created stratified sample includes a sampling probability for every tuple (in column name ""verdict_sampling_prob"") so that it can be used for computing the final answer. The sampling probability for each tuple is determined as: min( 1.0, (original table size) * (sampling ratio param) / (number of groups) / (size of the group) )
 * @param tempTableName
 * @param param
 * @throws VerdictException
 */
protected void createStratifiedSampleFromTempTable(TableUniqueName rnTempTable,TableUniqueName grpTempTable,SampleParam param) throws VerdictException {
  TableUniqueName originalTableName=param.originalTable;
  TableUniqueName sampleTempTable=generateTempTableName();
  String samplingProbColName=vc.samplingProbColName();
  VerdictLogger.debug(this,""String_Node_Str"" + rnTempTable + ""String_Node_Str""+ grpTempTable);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(param.originalTable,""String_Node_Str"",null,new ArrayList<String>()));
  long originalTableSize=r.countValue();
  long groupCount=SingleRelation.from(vc,grpTempTable).countValue();
  String tmpCol1=Relation.genColumnAlias();
  String sql1=String.format(""String_Node_Str"",sampleTempTable) + String.format(""String_Node_Str"",columnNamesInString(originalTableName,""String_Node_Str"")) + String.format(""String_Node_Str"",originalTableSize,param.samplingRatio,groupCount,tmpCol1,rnTempTable)+ ""String_Node_Str""+ tmpCol1;
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql1),""String_Node_Str"");
  executeUpdate(sql1);
  List<String> joinCond=new ArrayList<String>();
  for (  String g : param.columnNames) {
    joinCond.add(String.format(""String_Node_Str"",g,g));
  }
  ExactRelation grpRatioBase=SingleRelation.from(vc,sampleTempTable).groupby(param.columnNames).agg(""String_Node_Str"").join(SingleRelation.from(vc,grpTempTable),Joiner.on(""String_Node_Str"").join(joinCond));
  List<String> groupNamesWithTabName=new ArrayList<String>();
  for (  String col : param.columnNames) {
    groupNamesWithTabName.add(grpTempTable + ""String_Node_Str"" + col);
  }
  ExactRelation grpRatioRel=grpRatioBase.select(Joiner.on(""String_Node_Str"").join(groupNamesWithTabName) + String.format(""String_Node_Str"",samplingProbColName));
  ExactRelation stSampleRel=SingleRelation.from(vc,sampleTempTable).join(grpRatioRel,Joiner.on(""String_Node_Str"").join(joinCond)).select(columnNamesInString(originalTableName,sampleTempTable.tableName) + String.format(""String_Node_Str"",samplingProbColName));
  String sql2=String.format(""String_Node_Str"",param.sampleTableName()) + stSampleRel.toSql();
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql2),""String_Node_Str"");
  executeUpdate(sql2);
  dropTable(sampleTempTable);
}","/** 
 * Creates a stratified sample from a temp table, which is created by  {@link DbmsImpala#createTempTableWithGroupCountsAndRand createTempTableWithGroupCountsAndRand}. The created stratified sample includes a sampling probability for every tuple (in column name ""verdict_sampling_prob"") so that it can be used for computing the final answer. The sampling probability for each tuple is determined as: min( 1.0, (original table size) * (sampling ratio param) / (number of groups) / (size of the group) )
 * @param tempTableName
 * @param param
 * @throws VerdictException
 */
protected void createStratifiedSampleFromTempTable(TableUniqueName rnTempTable,TableUniqueName grpTempTable,SampleParam param) throws VerdictException {
  TableUniqueName originalTableName=param.originalTable;
  TableUniqueName sampleTempTable=Relation.getTempTableName(vc);
  String samplingProbColName=vc.samplingProbColName();
  VerdictLogger.debug(this,""String_Node_Str"" + rnTempTable + ""String_Node_Str""+ grpTempTable);
  ApproxRelation r=ApproxSingleRelation.from(vc,new SampleParam(param.originalTable,""String_Node_Str"",null,new ArrayList<String>()));
  long originalTableSize=r.countValue();
  long groupCount=SingleRelation.from(vc,grpTempTable).countValue();
  String tmpCol1=Relation.genColumnAlias();
  String sql1=String.format(""String_Node_Str"",sampleTempTable) + String.format(""String_Node_Str"",columnNamesInString(originalTableName,""String_Node_Str"")) + String.format(""String_Node_Str"",originalTableSize,param.samplingRatio,groupCount,tmpCol1,rnTempTable)+ ""String_Node_Str""+ tmpCol1;
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql1),""String_Node_Str"");
  executeUpdate(sql1);
  List<String> joinCond=new ArrayList<String>();
  for (  String g : param.columnNames) {
    joinCond.add(String.format(""String_Node_Str"",g,g));
  }
  ExactRelation grpRatioBase=SingleRelation.from(vc,sampleTempTable).groupby(param.columnNames).agg(""String_Node_Str"").join(SingleRelation.from(vc,grpTempTable),Joiner.on(""String_Node_Str"").join(joinCond));
  List<String> groupNamesWithTabName=new ArrayList<String>();
  for (  String col : param.columnNames) {
    groupNamesWithTabName.add(grpTempTable + ""String_Node_Str"" + col);
  }
  ExactRelation grpRatioRel=grpRatioBase.select(Joiner.on(""String_Node_Str"").join(groupNamesWithTabName) + String.format(""String_Node_Str"",samplingProbColName));
  ExactRelation stSampleRel=SingleRelation.from(vc,sampleTempTable).join(grpRatioRel,Joiner.on(""String_Node_Str"").join(joinCond)).select(columnNamesInString(originalTableName,sampleTempTable.tableName) + String.format(""String_Node_Str"",samplingProbColName));
  String sql2=String.format(""String_Node_Str"",param.sampleTableName()) + stSampleRel.toSql();
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql2),""String_Node_Str"");
  executeUpdate(sql2);
  dropTable(sampleTempTable);
}"
96128,"/** 
 * Creates a temp table that includes 1. all the columns in the original table. 2. the size of the group on which this stratified sample is being created. 3. a random number between 0 and 1.
 * @param param
 * @return A pair of the table with random numbers and the table that stores the per-group size.
 * @throws VerdictException
 */
protected Pair<TableUniqueName,TableUniqueName> createTempTableWithGroupCountsAndRand(SampleParam param) throws VerdictException {
  TableUniqueName rnTempTable=generateTempTableName();
  TableUniqueName grpTempTable=generateTempTableName();
  TableUniqueName originalTableName=param.originalTable;
  String groupName=Joiner.on(""String_Node_Str"").join(param.columnNames);
  String sql1=String.format(""String_Node_Str"",grpTempTable,groupName,originalTableName,groupName);
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql1),""String_Node_Str"");
  executeUpdate(sql1);
  List<String> joinCond=new ArrayList<String>();
  for (  String g : param.columnNames) {
    joinCond.add(String.format(""String_Node_Str"",g,g));
  }
  Relation tableWithRand=SingleRelation.from(vc,originalTableName).join(SingleRelation.from(vc,grpTempTable),Joiner.on(""String_Node_Str"").join(joinCond)).select(String.format(""String_Node_Str"",columnNamesInString(originalTableName)));
  String sql2=String.format(""String_Node_Str"",rnTempTable,tableWithRand.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql2),""String_Node_Str"");
  executeUpdate(sql2);
  return Pair.of(rnTempTable,grpTempTable);
}","/** 
 * Creates a temp table that includes 1. all the columns in the original table. 2. the size of the group on which this stratified sample is being created. 3. a random number between 0 and 1.
 * @param param
 * @return A pair of the table with random numbers and the table that stores the per-group size.
 * @throws VerdictException
 */
protected Pair<TableUniqueName,TableUniqueName> createTempTableWithGroupCountsAndRand(SampleParam param) throws VerdictException {
  TableUniqueName rnTempTable=Relation.getTempTableName(vc);
  TableUniqueName grpTempTable=Relation.getTempTableName(vc);
  TableUniqueName originalTableName=param.originalTable;
  String groupName=Joiner.on(""String_Node_Str"").join(param.columnNames);
  String sql1=String.format(""String_Node_Str"",grpTempTable,groupName,originalTableName,groupName);
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql1),""String_Node_Str"");
  executeUpdate(sql1);
  List<String> joinCond=new ArrayList<String>();
  for (  String g : param.columnNames) {
    joinCond.add(String.format(""String_Node_Str"",g,g));
  }
  Relation tableWithRand=SingleRelation.from(vc,originalTableName).join(SingleRelation.from(vc,grpTempTable),Joiner.on(""String_Node_Str"").join(joinCond)).select(String.format(""String_Node_Str"",columnNamesInString(originalTableName)));
  String sql2=String.format(""String_Node_Str"",rnTempTable,tableWithRand.toSql());
  VerdictLogger.debug(this,""String_Node_Str"");
  VerdictLogger.debugPretty(this,Relation.prettyfySql(sql2),""String_Node_Str"");
  executeUpdate(sql2);
  return Pair.of(rnTempTable,grpTempTable);
}"
96129,"protected TableUniqueName createTempTableExlucdingSizeEntry(SampleParam param,TableUniqueName metaSizeTableName) throws VerdictException {
  TableUniqueName tempTableName=generateTempTableName();
  TableUniqueName sampleTableName=param.sampleTableName();
  executeUpdate(String.format(""String_Node_Str"",tempTableName,metaSizeTableName,sampleTableName.schemaName,sampleTableName.tableName));
  return tempTableName;
}","protected TableUniqueName createTempTableExlucdingSizeEntry(SampleParam param,TableUniqueName metaSizeTableName) throws VerdictException {
  TableUniqueName tempTableName=Relation.getTempTableName(vc);
  TableUniqueName sampleTableName=param.sampleTableName();
  executeUpdate(String.format(""String_Node_Str"",tempTableName,metaSizeTableName,sampleTableName.schemaName,sampleTableName.tableName));
  return tempTableName;
}"
96130,"public static String genTableAlias(){
  String n=String.format(""String_Node_Str"",alias_no);
  alias_no++;
  return n;
}","public static String genTableAlias(){
  String n=String.format(""String_Node_Str"",tab_alias_no);
  tab_alias_no++;
  return n;
}"
96131,"public static String genColumnAlias(){
  String n=String.format(""String_Node_Str"",alias_no);
  alias_no++;
  return n;
}","public static String genColumnAlias(){
  String n=String.format(""String_Node_Str"",col_alias_no);
  col_alias_no++;
  return n;
}"
96132,"public ColNameExpr(String col,String tab,String schema){
  this.col=col;
  this.tab=tab;
  this.schema=schema;
}","public ColNameExpr(String col,String tab,String schema){
  this.col=col.toLowerCase();
  this.tab=(tab != null) ? tab.toLowerCase() : tab;
  this.schema=(schema != null) ? schema.toLowerCase() : schema;
}"
96133,"@AfterClass public static void destroy() throws VerdictException {
  vc.destroy();
}","@AfterClass public static void destroy() throws VerdictException, SQLException {
  stmt.close();
  conn.close();
  vc.destroy();
}"
96134,"@BeforeClass public static void connect() throws VerdictException, SQLException, FileNotFoundException {
  final String host=readHost();
  final String port=""String_Node_Str"";
  final String schema=""String_Node_Str"";
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(host);
  conf.setPort(port);
  conf.setDbmsSchema(schema);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  vc=new VerdictContext(conf);
  String url=String.format(""String_Node_Str"",host,port,schema);
  Connection conn=DriverManager.getConnection(url);
  stmt=conn.createStatement();
}","@BeforeClass public static void connect() throws VerdictException, SQLException, FileNotFoundException {
  final String host=readHost();
  final String port=""String_Node_Str"";
  final String schema=""String_Node_Str"";
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(host);
  conf.setPort(port);
  conf.setDbmsSchema(schema);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  vc=new VerdictContext(conf);
  String url=String.format(""String_Node_Str"",host,port,schema);
  conn=DriverManager.getConnection(url);
  stmt=conn.createStatement();
}"
96135,"@BeforeClass public static void connect() throws VerdictException, SQLException, FileNotFoundException {
  final String host=readHost();
  final String port=""String_Node_Str"";
  final String schema=""String_Node_Str"";
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(host);
  conf.setPort(port);
  conf.setDbmsSchema(schema);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  vc=new VerdictContext(conf);
  String url=String.format(""String_Node_Str"",host,port,schema);
  Connection conn=DriverManager.getConnection(url);
  stmt=conn.createStatement();
}","@BeforeClass public static void connect() throws VerdictException, SQLException, FileNotFoundException {
  final String host=readHost();
  final String port=""String_Node_Str"";
  final String schema=""String_Node_Str"";
  VerdictConf conf=new VerdictConf();
  conf.setDbms(""String_Node_Str"");
  conf.setHost(host);
  conf.setPort(port);
  conf.setDbmsSchema(schema);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  vc=new VerdictContext(conf);
  String url=String.format(""String_Node_Str"",host,port,schema);
  conn=DriverManager.getConnection(url);
  stmt=conn.createStatement();
}"
96136,"private Expr transformForSingleFunction(Expr f,final List<TableUniqueName> stratifiedSampleTables){
  final Map<String,String> sub=source.tableSubstitution();
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
        double samplingProb=source.samplingProbabilityFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProb,stratifiedSampleTables));
          return FuncExpr.round(est);
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          if (dbname.equals(""String_Node_Str"")) {
            return FuncExpr.round(BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
          }
 else {
            return FuncExpr.round(BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
          }
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProb,stratifiedSampleTables);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProb,stratifiedSampleTables);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}","private Expr transformForSingleFunction(Expr f,final List<ColNameExpr> samplingProbCols){
  final Map<String,String> sub=source.tableSubstitution();
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
        double samplingProb=source.samplingProbabilityFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProb,samplingProbCols));
          return FuncExpr.round(est);
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          if (dbname.equals(""String_Node_Str"")) {
            return FuncExpr.round(BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
          }
 else {
            return FuncExpr.round(BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
          }
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProb,samplingProbCols);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProb,samplingProbCols);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}"
96137,"@Override public ExactRelation rewriteForPointEstimate(){
  List<SelectElem> scaled=new ArrayList<SelectElem>();
  List<TableUniqueName> stratifiedSampleTables=source.accumulateStratifiedSamples();
  for (  SelectElem e : elems) {
    scaled.add(new SelectElem(transformForSingleFunction(e.getExpr(),stratifiedSampleTables),e.getAlias()));
  }
  ExactRelation r=new AggregatedRelation(vc,source.rewriteForPointEstimate(),scaled);
  r.setAliasName(getAliasName());
  return r;
}","@Override public ExactRelation rewriteForPointEstimate(){
  ExactRelation newSource=source.rewriteForPointEstimate();
  List<SelectElem> scaled=new ArrayList<SelectElem>();
  List<ColNameExpr> samplingProbColumns=newSource.accumulateSamplingProbColumns();
  for (  SelectElem e : elems) {
    scaled.add(new SelectElem(transformForSingleFunction(e.getExpr(),samplingProbColumns),e.getAlias()));
  }
  ExactRelation r=new AggregatedRelation(vc,newSource,scaled);
  r.setAliasName(getAliasName());
  return r;
}"
96138,"private Expr transformForSingleFunctionWithPartitionSize(Expr f,final List<TableUniqueName> stratifiedSampleTables,List<ColNameExpr> groupby,final ColNameExpr partitionCol){
  final Map<String,String> sub=source.tableSubstitution();
  final List<Expr> groupbyExpr=new ArrayList<Expr>();
  for (  ColNameExpr c : groupby) {
    groupbyExpr.add((Expr)c);
  }
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
        double samplingProb=source.samplingProbabilityFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProb,stratifiedSampleTables));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          if (dbname.equals(""String_Node_Str"")) {
            Expr est=BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str"");
            est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
            return est;
          }
 else {
            return BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str"");
          }
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProb,stratifiedSampleTables);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProb,stratifiedSampleTables);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}","private Expr transformForSingleFunctionWithPartitionSize(Expr f,final List<ColNameExpr> samplingProbCols,List<ColNameExpr> groupby,final ColNameExpr partitionCol){
  final Map<String,String> sub=source.tableSubstitution();
  final List<Expr> groupbyExpr=new ArrayList<Expr>();
  for (  ColNameExpr c : groupby) {
    groupbyExpr.add((Expr)c);
  }
  ExprModifier v=new ExprModifier(){
    public Expr call(    Expr expr){
      if (expr instanceof FuncExpr) {
        FuncExpr f=(FuncExpr)expr;
        FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
        double samplingProb=source.samplingProbabilityFor(f);
        if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
          Expr est=FuncExpr.sum(scaleForSampling(samplingProb,samplingProbCols));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
          String dbname=vc.getDbms().getName();
          if (dbname.equals(""String_Node_Str"")) {
            Expr est=BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str"");
            est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
            return est;
          }
 else {
            return BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str"");
          }
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
          Expr est=scaleForSampling(samplingProb,samplingProbCols);
          est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
          est=scaleWithPartitionSize(est,groupbyExpr,partitionCol);
          return est;
        }
 else         if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
          Expr scale=scaleForSampling(samplingProb,samplingProbCols);
          Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
          Expr countEst=countNotNull(s.getUnaryExpr(),scale);
          return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
        }
 else {
          return s;
        }
      }
 else {
        return expr;
      }
    }
  }
;
  return v.visit(f);
}"
96139,"public Expr call(Expr expr){
  if (expr instanceof FuncExpr) {
    FuncExpr f=(FuncExpr)expr;
    FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
    double samplingProb=source.samplingProbabilityFor(f);
    if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
      Expr est=FuncExpr.sum(scaleForSampling(samplingProb,stratifiedSampleTables));
      return FuncExpr.round(est);
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
      String dbname=vc.getDbms().getName();
      if (dbname.equals(""String_Node_Str"")) {
        return FuncExpr.round(BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
      }
 else {
        return FuncExpr.round(BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
      }
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
      Expr est=scaleForSampling(samplingProb,stratifiedSampleTables);
      est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
      return est;
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
      Expr scale=scaleForSampling(samplingProb,stratifiedSampleTables);
      Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
      Expr countEst=countNotNull(s.getUnaryExpr(),scale);
      return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
    }
 else {
      return s;
    }
  }
 else {
    return expr;
  }
}","public Expr call(Expr expr){
  if (expr instanceof FuncExpr) {
    FuncExpr f=(FuncExpr)expr;
    FuncExpr s=(FuncExpr)exprWithTableNamesSubstituted(expr,sub);
    double samplingProb=source.samplingProbabilityFor(f);
    if (f.getFuncName().equals(FuncExpr.FuncName.COUNT)) {
      Expr est=FuncExpr.sum(scaleForSampling(samplingProb,samplingProbCols));
      return FuncExpr.round(est);
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.COUNT_DISTINCT)) {
      String dbname=vc.getDbms().getName();
      if (dbname.equals(""String_Node_Str"")) {
        return FuncExpr.round(BinaryOpExpr.from(new FuncExpr(FuncExpr.FuncName.IMPALA_APPROX_COUNT_DISTINCT,s.getUnaryExpr()),ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
      }
 else {
        return FuncExpr.round(BinaryOpExpr.from(s,ConstantExpr.from(1.0 / samplingProb),""String_Node_Str""));
      }
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.SUM)) {
      Expr est=scaleForSampling(samplingProb,samplingProbCols);
      est=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),est,""String_Node_Str""));
      return est;
    }
 else     if (f.getFuncName().equals(FuncExpr.FuncName.AVG)) {
      Expr scale=scaleForSampling(samplingProb,samplingProbCols);
      Expr sumEst=FuncExpr.sum(BinaryOpExpr.from(s.getUnaryExpr(),scale,""String_Node_Str""));
      Expr countEst=countNotNull(s.getUnaryExpr(),scale);
      return BinaryOpExpr.from(sumEst,countEst,""String_Node_Str"");
    }
 else {
      return s;
    }
  }
 else {
    return expr;
  }
}"
96140,"private Expr scaleForSampling(double samplingProb,List<TableUniqueName> stratifiedSampleTables){
  Expr scale=ConstantExpr.from(1.0 / samplingProb);
  for (  TableUniqueName t : stratifiedSampleTables) {
    scale=BinaryOpExpr.from(scale,new ColNameExpr(vc.samplingProbColName(),t.tableName),""String_Node_Str"");
  }
  return scale;
}","private Expr scaleForSampling(double samplingProb,List<ColNameExpr> samplingProbCols){
  Expr scale=ConstantExpr.from(1.0 / samplingProb);
  for (  ColNameExpr c : samplingProbCols) {
    scale=BinaryOpExpr.from(scale,c,""String_Node_Str"");
  }
  return scale;
}"
96141,"/** 
 * This relation must include partition numbers, and the answers must be scaled properly. Note that   {@link ApproxRelation#rewriteWithSubsampledErrorBounds()}is used only for the statement including final error bounds; all internal manipulations must be performed by this method.
 * @return
 */
protected ExactRelation rewriteWithPartition(){
  ExactRelation newSource=partitionedSource();
  List<SelectElem> scaledElems=new ArrayList<SelectElem>();
  List<TableUniqueName> stratifiedSampleTables=source.accumulateStratifiedSamples();
  List<ColNameExpr> groupby=new ArrayList<ColNameExpr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).getGroupby());
  }
  for (  SelectElem e : elems) {
    Expr scaled=transformForSingleFunctionWithPartitionSize(e.getExpr(),stratifiedSampleTables,groupby,newSource.partitionColumn());
    scaledElems.add(new SelectElem(scaled,e.getAlias()));
  }
  scaledElems.add(new SelectElem(FuncExpr.count(),partitionSizeAlias));
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledElems);
  return r;
}","/** 
 * This relation must include partition numbers, and the answers must be scaled properly. Note that   {@link ApproxRelation#rewriteWithSubsampledErrorBounds()}is used only for the statement including final error bounds; all internal manipulations must be performed by this method.
 * @return
 */
protected ExactRelation rewriteWithPartition(){
  ExactRelation newSource=partitionedSource();
  List<SelectElem> scaledElems=new ArrayList<SelectElem>();
  List<ColNameExpr> samplingProbCols=newSource.accumulateSamplingProbColumns();
  List<ColNameExpr> groupby=new ArrayList<ColNameExpr>();
  if (source instanceof ApproxGroupedRelation) {
    groupby.addAll(((ApproxGroupedRelation)source).getGroupby());
  }
  for (  SelectElem e : elems) {
    Expr scaled=transformForSingleFunctionWithPartitionSize(e.getExpr(),samplingProbCols,groupby,newSource.partitionColumn());
    scaledElems.add(new SelectElem(scaled,e.getAlias()));
  }
  scaledElems.add(new SelectElem(FuncExpr.count(),partitionSizeAlias));
  ExactRelation r=new AggregatedRelation(vc,newSource,scaledElems);
  return r;
}"
96142,"public ApproxFilteredRelation(VerdictContext vc,ApproxRelation source,Cond cond){
  super(vc);
  this.source=source;
  this.cond=cond;
}","public ApproxFilteredRelation(VerdictContext vc,ApproxRelation source,Cond cond){
  super(vc);
  this.source=source;
  this.cond=cond;
  this.alias=source.alias;
}"
96143,"@Override public ExactRelation rewriteWithPartition(){
  Pair<Cond,List<ApproxRelation>> modifiedCondWithRelToJoin=transformCondWithPartitionedRelations(cond,tableSubstitution());
  Cond modifiedCond=modifiedCondWithRelToJoin.getLeft();
  List<ApproxRelation> relToJoin=modifiedCondWithRelToJoin.getRight();
  ExactRelation joinedSource=source.rewriteWithPartition();
  for (  ApproxRelation a : relToJoin) {
    List<Pair<Expr,Expr>> joinCol=Arrays.asList(Pair.<Expr,Expr>of(source.partitionColumn(),new ColNameExpr(partitionColumnName(),a.sourceTableName())));
    joinedSource=JoinedRelation.from(vc,joinedSource,a.rewriteWithPartition(),joinCol);
  }
  ExactRelation r=new FilteredRelation(vc,joinedSource,modifiedCond);
  r.setAliasName(getAliasName());
  return r;
}","@Override public ExactRelation rewriteWithPartition(){
  Pair<Cond,List<ApproxRelation>> modifiedCondWithRelToJoin=transformCondWithPartitionedRelations(cond,tableSubstitution());
  Cond modifiedCond=modifiedCondWithRelToJoin.getLeft();
  List<ApproxRelation> relToJoin=modifiedCondWithRelToJoin.getRight();
  ExactRelation joinedSource=source.rewriteWithPartition();
  for (  ApproxRelation a : relToJoin) {
    List<Pair<Expr,Expr>> joinCol=Arrays.asList(Pair.<Expr,Expr>of(joinedSource.partitionColumn(),new ColNameExpr(partitionColumnName(),a.sourceTableName())));
    joinedSource=JoinedRelation.from(vc,joinedSource,a.rewriteWithPartition(),joinCol);
  }
  ExactRelation r=new FilteredRelation(vc,joinedSource,modifiedCond);
  r.setAliasName(getAliasName());
  return r;
}"
96144,"public ApproxGroupedRelation(VerdictContext vc,ApproxRelation source,List<ColNameExpr> groupby){
  super(vc);
  this.source=source;
  this.groupby=groupby;
}","public ApproxGroupedRelation(VerdictContext vc,ApproxRelation source,List<ColNameExpr> groupby){
  super(vc);
  this.source=source;
  this.groupby=groupby;
  this.alias=source.alias;
}"
96145,"/** 
 * @param vc
 * @param source1
 * @param source2
 * @param joinCols An empty joinCols indicates CROSS JOIN
 */
public ApproxJoinedRelation(VerdictContext vc,ApproxRelation source1,ApproxRelation source2,List<Pair<Expr,Expr>> joinCols){
  super(vc);
  this.source1=source1;
  this.source2=source2;
  if (joinCols == null) {
    this.joinCols=new ArrayList<Pair<Expr,Expr>>();
  }
 else {
    this.joinCols=joinCols;
  }
}","/** 
 * @param vc
 * @param source1
 * @param source2
 * @param joinCols An empty joinCols indicates CROSS JOIN
 */
public ApproxJoinedRelation(VerdictContext vc,ApproxRelation source1,ApproxRelation source2,List<Pair<Expr,Expr>> joinCols){
  super(vc);
  this.source1=source1;
  this.source2=source2;
  if (joinCols == null) {
    this.joinCols=new ArrayList<Pair<Expr,Expr>>();
  }
 else {
    this.joinCols=joinCols;
  }
  this.alias=null;
}"
96146,"public ApproxLimitedRelation(VerdictContext vc,ApproxRelation source,long limit){
  super(vc);
  this.source=source;
  this.limit=limit;
}","public ApproxLimitedRelation(VerdictContext vc,ApproxRelation source,long limit){
  super(vc);
  this.source=source;
  this.limit=limit;
  this.alias=source.alias;
}"
96147,"public ApproxOrderedRelation(VerdictContext vc,ApproxRelation source,List<OrderByExpr> orderby){
  super(vc);
  this.source=source;
  this.orderby=orderby;
}","public ApproxOrderedRelation(VerdictContext vc,ApproxRelation source,List<OrderByExpr> orderby){
  super(vc);
  this.source=source;
  this.orderby=orderby;
  this.alias=source.alias;
}"
96148,"public FilteredRelation(VerdictContext vc,ExactRelation source,Cond cond){
  super(vc);
  this.source=source;
  this.cond=cond;
}","public FilteredRelation(VerdictContext vc,ExactRelation source,Cond cond){
  super(vc);
  this.source=source;
  this.cond=cond;
  this.alias=source.alias;
}"
96149,"@Override public String visitSelect_list_elem(VerdictSQLParser.Select_list_elemContext ctx){
  select_list_elem_num++;
  String newSelectListElem=null;
  Pair<String,Alias> colName2Alias=null;
  if (ctx.getText().equals(""String_Node_Str"")) {
    newSelectListElem=""String_Node_Str"";
  }
 else {
    StringBuilder elem=new StringBuilder();
    elem.append(visit(ctx.expression()));
    SelectStatementBaseRewriter baseRewriter=new SelectStatementBaseRewriter(queryString);
    String colName=baseRewriter.visit(ctx.expression());
    if (ctx.column_alias() != null) {
      Alias alias=new Alias(colName,ctx.column_alias().getText());
      elem.append(String.format(""String_Node_Str"",alias));
      colName2Alias=Pair.of(colName,alias);
    }
 else {
      Alias alias=Alias.genAlias(depth,colName);
      elem.append(String.format(""String_Node_Str"",alias));
      colName2Alias=Pair.of(baseRewriter.visit(ctx.expression()),alias);
    }
    newSelectListElem=elem.toString();
  }
  colName2Aliases.add(Pair.of(colName2Alias.getKey(),colName2Alias.getValue()));
  return newSelectListElem;
}","@Override public String visitSelect_list_elem(VerdictSQLParser.Select_list_elemContext ctx){
  select_list_elem_num++;
  String newSelectListElem=null;
  Pair<String,Alias> colName2Alias=null;
  if (ctx.getText().equals(""String_Node_Str"")) {
    newSelectListElem=""String_Node_Str"";
  }
 else {
    StringBuilder elem=new StringBuilder();
    SelectStatementBaseRewriter baseRewriter=new SelectStatementBaseRewriter(queryString);
    String tabColName=baseRewriter.visit(ctx.expression());
    String tabName=NameHelpers.tabNameOfColName(tabColName);
    TableUniqueName tabUniqueName=NameHelpers.tabUniqueNameOfColName(vc,tabColName);
    String colName=NameHelpers.colNameOfColName(tabColName);
    if (tableAliases.containsKey(tabUniqueName)) {
      tabName=tableAliases.get(tabUniqueName).toString();
    }
    for (    Map.Entry<String,Map<String,Alias>> e : derivedTableColName2Aliases.entrySet()) {
      String derivedTabName=e.getKey();
      if (tabName.length() > 0 && !tabName.equals(derivedTabName)) {
        continue;
      }
      if (e.getValue().containsKey(colName)) {
        Alias alias=e.getValue().get(colName);
        if (alias.autoGenerated()) {
          colName=alias.toString();
        }
      }
    }
    if (tabName.length() > 0) {
      elem.append(String.format(""String_Node_Str"",tabName,colName));
    }
 else {
      elem.append(colName);
    }
    if (ctx.column_alias() != null) {
      Alias alias=new Alias(colName,ctx.column_alias().getText());
      elem.append(String.format(""String_Node_Str"",alias));
      colName2Alias=Pair.of(colName,alias);
    }
 else {
      Alias alias=Alias.genAlias(depth,colName);
      elem.append(String.format(""String_Node_Str"",alias));
      colName2Alias=Pair.of(baseRewriter.visit(ctx.expression()),alias);
    }
    newSelectListElem=elem.toString();
  }
  colName2Aliases.add(Pair.of(colName2Alias.getKey(),colName2Alias.getValue()));
  return newSelectListElem;
}"
96150,"@Override public String visitGroup_by_item(VerdictSQLParser.Group_by_itemContext ctx){
  String groupName=ctx.getText();
  Alias alias=new Alias(groupName,groupName);
  for (  Pair<String,Alias> e : colName2Aliases) {
    if (e.getKey().equals(groupName)) {
      alias=e.getValue();
      break;
    }
  }
  if (isFirstGroup) {
    isFirstGroup=false;
    return alias.toString();
  }
 else {
    return ""String_Node_Str"" + alias;
  }
}","@Override public String visitGroup_by_item(VerdictSQLParser.Group_by_itemContext ctx){
  String groupName=ctx.getText();
  Alias alias=new Alias(groupName,groupName);
  for (  Pair<String,Alias> e : colName2Aliases) {
    if (NameHelpers.colNameOfColName(e.getKey()).equals(groupName)) {
      alias=e.getValue();
      break;
    }
  }
  if (isFirstGroup) {
    isFirstGroup=false;
    return alias.toString();
  }
 else {
    return ""String_Node_Str"" + alias;
  }
}"
96151,"public AnalyticSelectStatementRewriter(VerdictContext vc,String queryString){
  super(queryString);
  this.vc=vc;
  this.e=null;
  aggColumnIndicator=new ArrayList<Boolean>();
  colName2Aliases=new ArrayList<Pair<String,Alias>>();
  meanColIndex2ErrColIndex=new HashMap<Integer,Integer>();
}","public AnalyticSelectStatementRewriter(VerdictContext vc,String queryString){
  super(queryString);
  this.vc=vc;
  this.e=null;
  aggColumnIndicator=new ArrayList<Boolean>();
  colName2Aliases=new ArrayList<Pair<String,Alias>>();
  meanColIndex2ErrColIndex=new HashMap<Integer,Integer>();
  derivedTableColName2Aliases=new HashMap<String,Map<String,Alias>>();
}"
96152,"protected Pair<String,AnalyticSelectStatementRewriter> rewriteQuery() throws VerdictException {
  VerdictSQLLexer l=new VerdictSQLLexer(CharStreams.fromString(queryString));
  VerdictSQLParser p=new VerdictSQLParser(new CommonTokenStream(l));
  AnalyticSelectStatementRewriter queryRewriter=new BootstrapSelectStatementRewriter(vc,queryString);
  String rewrittenQuery=queryRewriter.visit(p.select_statement());
  if (queryRewriter.getException() != null) {
    throw queryRewriter.getException();
  }
  return Pair.of(rewrittenQuery,queryRewriter);
}","protected Pair<String,AnalyticSelectStatementRewriter> rewriteQuery() throws VerdictException {
  VerdictSQLLexer l=new VerdictSQLLexer(CharStreams.fromString(queryString));
  VerdictSQLParser p=new VerdictSQLParser(new CommonTokenStream(l));
  AnalyticSelectStatementRewriter queryRewriter=null;
  if (vc.getConf().get(""String_Node_Str"").equals(""String_Node_Str"")) {
    queryRewriter=new BootstrapSelectStatementRewriter(vc,queryString);
  }
 else {
    queryRewriter=new AnalyticSelectStatementRewriter(vc,queryString);
  }
  String rewrittenQuery=queryRewriter.visit(p.select_statement());
  if (queryRewriter.getException() != null) {
    throw queryRewriter.getException();
  }
  return Pair.of(rewrittenQuery,queryRewriter);
}"
96153,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  int viewType=getItemViewType(position);
switch (viewType) {
case VIEW_TYPE_ITEM:
    CommentViewHolder cvh=(CommentViewHolder)viewHolder;
  MyComment comment=(MyComment)getItemAt(position);
cvh.authorTextView.setText(comment.author);
cvh.commentTextView.setText(comment.comment);
if (comment.getIndentation() == 0) {
cvh.colorBand.setVisibility(View.GONE);
}
 else {
cvh.colorBand.setVisibility(View.VISIBLE);
cvh.setColorBandColor(comment.getIndentation());
int leftPadding=Utils.getPaddingPixels(mContext,mPaddingDP) * (comment.getIndentation() - 1);
cvh.setPaddingLeft(leftPadding);
}
if (comment.isGroup()) {
cvh.hiddenCommentsCountTextView.setVisibility(View.VISIBLE);
cvh.hiddenCommentsCountTextView.setText(Integer.toString(comment.getGroupSize()));
}
 else {
cvh.hiddenCommentsCountTextView.setVisibility(View.GONE);
}
break;
case VIEW_TYPE_CONTENT:
ContentViewHolder contentVH=(ContentViewHolder)viewHolder;
MyContent content=(MyContent)getItemAt(position);
contentVH.contentTextView.setText(content.content);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  int viewType=getItemViewType(position);
switch (viewType) {
case VIEW_TYPE_ITEM:
    CommentViewHolder cvh=(CommentViewHolder)viewHolder;
  MyComment comment=(MyComment)getItemAt(position);
cvh.authorTextView.setText(comment.author);
cvh.commentTextView.setText(comment.comment);
if (comment.getIndentation() == 0) {
cvh.colorBand.setVisibility(View.GONE);
cvh.setPaddingLeft(0);
}
 else {
cvh.colorBand.setVisibility(View.VISIBLE);
cvh.setColorBandColor(comment.getIndentation());
int leftPadding=Utils.getPaddingPixels(mContext,mPaddingDP) * (comment.getIndentation() - 1);
cvh.setPaddingLeft(leftPadding);
}
if (comment.isGroup()) {
cvh.hiddenCommentsCountTextView.setVisibility(View.VISIBLE);
cvh.hiddenCommentsCountTextView.setText(Integer.toString(comment.getGroupSize()));
}
 else {
cvh.hiddenCommentsCountTextView.setVisibility(View.GONE);
}
break;
case VIEW_TYPE_CONTENT:
ContentViewHolder contentVH=(ContentViewHolder)viewHolder;
MyContent content=(MyContent)getItemAt(position);
contentVH.contentTextView.setText(content.content);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
96154,"/** 
 * Retrieve the commits associated with this repo, filter them, and apply visitors to the survivors. Each commit is assigned to one thread which applies the visitors via calls to   {@link RepoVisitor#visitCommit}
 * @param repo	A repo to process
 */
private void processRepo(SCMRepository repo){
  log.info(""String_Node_Str"" + repo.getPath());
  List<ChangeSet> rawCs=range.get(repo.getScm());
  if (!reverseOrder)   Collections.reverse(rawCs);
  log.info(rawCs.size() + ""String_Node_Str"");
  Queue<ChangeSet> csQueue=new ConcurrentLinkedQueue<ChangeSet>(rawCs);
  List<Future<Integer>> threadDone=new ArrayList<Future<Integer>>();
  for (int i=0; i < nRepoThreads; i++) {
    threadDone.add(threadpool.submit(() -> {
      int nConsumed=0;
      while (true) {
        ChangeSet cs=null;
        try {
          cs=csQueue.remove();
          processChangeSet(repo,cs);
          nConsumed++;
        }
 catch (        NoSuchElementException e) {
          log.debug(""String_Node_Str"");
          break;
        }
catch (        OutOfMemoryError e) {
          String msg=""String_Node_Str"" + cs.getId() + ""String_Node_Str""+ repo.getLastDir()+ ""String_Node_Str""+ e+ ""String_Node_Str"";
          System.err.println(msg);
          log.fatal(msg);
          e.printStackTrace();
          System.exit(1);
        }
catch (        Throwable t) {
          log.error(""String_Node_Str"" + cs.getId() + ""String_Node_Str""+ t);
          continue;
        }
      }
      log.debug(""String_Node_Str"");
      return nConsumed;
    }
));
  }
  int totalConsumed=0;
  for (  Future<Integer> f : threadDone) {
    try {
      totalConsumed+=f.get();
    }
 catch (    InterruptedException|ExecutionException e) {
      log.error(e);
    }
  }
  if (totalConsumed != rawCs.size()) {
    log.fatal(""String_Node_Str"" + totalConsumed + ""String_Node_Str""+ rawCs.size()+ ""String_Node_Str"");
    System.exit(1);
  }
}","/** 
 * Retrieve the commits associated with this repo, filter them, and apply visitors to the survivors. Each commit is assigned to one thread which applies the visitors via calls to   {@link RepoVisitor#visitCommit}
 * @param repo	A repo to process
 */
private void processRepo(SCMRepository repo){
  log.info(""String_Node_Str"" + repo.getPath());
  List<ChangeSet> rawCs=range.get(repo.getScm());
  if (!reverseOrder)   Collections.reverse(rawCs);
  log.info(rawCs.size() + ""String_Node_Str"");
  Queue<ChangeSet> csQueue=new ConcurrentLinkedQueue<ChangeSet>(rawCs);
  List<Future<Integer>> threadDone=new ArrayList<Future<Integer>>();
  for (int i=0; i < nRepoThreads; i++) {
    threadDone.add(threadpool.submit(() -> {
      int nConsumed=0;
      while (true) {
        ChangeSet cs=null;
        try {
          cs=csQueue.remove();
        }
 catch (        NoSuchElementException e) {
          log.debug(""String_Node_Str"");
          break;
        }
        nConsumed++;
        try {
          processChangeSet(repo,cs);
        }
 catch (        OutOfMemoryError e) {
          String msg=""String_Node_Str"" + cs.getId() + ""String_Node_Str""+ repo.getLastDir()+ ""String_Node_Str""+ e+ ""String_Node_Str"";
          System.err.println(msg);
          log.fatal(msg);
          e.printStackTrace();
          System.exit(1);
        }
catch (        Throwable t) {
          log.error(""String_Node_Str"" + cs.getId() + ""String_Node_Str""+ t);
          continue;
        }
      }
      log.debug(""String_Node_Str"" + nConsumed);
      return nConsumed;
    }
));
  }
  int totalConsumed=0;
  for (  Future<Integer> f : threadDone) {
    try {
      totalConsumed+=f.get();
    }
 catch (    InterruptedException|ExecutionException e) {
      log.error(e);
    }
  }
  if (totalConsumed != rawCs.size()) {
    log.fatal(""String_Node_Str"" + totalConsumed + ""String_Node_Str""+ rawCs.size()+ ""String_Node_Str"");
    System.exit(1);
  }
}"
96155,"@Override public String getCommitFromTag(String tag){
  try (Git git=openRepository()){
    Repository repo=git.getRepository();
    Iterable<RevCommit> commits=git.log().add(repo.resolve(tag)).call();
    for (    RevCommit commit : commits) {
      return commit.getName().toString();
    }
    throw new RuntimeException(""String_Node_Str"" + tag);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + tag,e);
  }
}","@Override public String getCommitFromTag(String tag){
  try (Git git=openRepository()){
    Repository repo=git.getRepository();
    Iterable<RevCommit> commits=git.log().add(getActualRefObjectId(repo.findRef(tag),repo)).call();
    for (    RevCommit commit : commits) {
      return commit.getName().toString();
    }
    throw new RuntimeException(""String_Node_Str"" + tag);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + tag,e);
  }
}"
96156,"@Test public void getCommitsBetween2Revisions(){
  TestVisitor visitor=new TestVisitor();
  String from=""String_Node_Str"";
  String to=""String_Node_Str"";
  new RepositoryMining().in(GitRepository.singleProject(path)).through(Commits.betweenTags(from,to)).process(visitor).mine();
  Assert.assertEquals(3,visitor.getVisitedHashes().size());
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(0));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(1));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(2));
}","@Test public void getCommitsBetween2Revisions(){
  TestVisitor visitor=new TestVisitor();
  String from=""String_Node_Str"";
  String to=""String_Node_Str"";
  new RepositoryMining().in(GitRepository.singleProject(path)).through(Commits.betweenTags(from,to)).process(visitor).mine();
  Assert.assertEquals(5,visitor.getVisitedHashes().size());
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(0));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(1));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(2));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(3));
  Assert.assertEquals(""String_Node_Str"",visitor.getVisitedHashes().get(4));
}"
96157,"@Override public synchronized void write(Object... line){
  boolean first=true;
  for (  Object o : line) {
    if (!first)     ps.print(""String_Node_Str"");
    String field=o.toString();
    field=StringEscapeUtils.escapeCsv(field);
    ps.print(field);
    first=false;
  }
  ps.println();
  ps.flush();
}","@Override public synchronized void write(Object... line){
  boolean first=true;
  for (  Object o : line) {
    if (!first)     ps.print(""String_Node_Str"");
    if (o == null)     ps.print(""String_Node_Str"");
 else {
      String field=o.toString();
      field=StringEscapeUtils.escapeCsv(field);
      ps.print(field);
    }
    first=false;
  }
  ps.println();
  ps.flush();
}"
96158,"private List<DiffEntry> diffsForTheCommit(Repository repo,RevCommit commit) throws IOException, AmbiguousObjectException, IncorrectObjectTypeException {
  AnyObjectId hash=repo.resolve(commit.getName());
  AnyObjectId parent=commit.getParentCount() > 0 ? repo.resolve(commit.getParent(0).getName()) : null;
  DiffFormatter df=new DiffFormatter(DisabledOutputStream.INSTANCE);
  df.setRepository(repo);
  df.setDiffComparator(RawTextComparator.DEFAULT);
  df.setDetectRenames(true);
  List<DiffEntry> diffs=null;
  if (parent == null) {
    RevWalk rw=new RevWalk(repo);
    diffs=df.scan(new EmptyTreeIterator(),new CanonicalTreeParser(null,rw.getObjectReader(),commit.getTree()));
    rw.release();
  }
 else {
    diffs=df.scan(hash,parent);
  }
  df.release();
  return diffs;
}","private List<DiffEntry> diffsForTheCommit(Repository repo,RevCommit commit) throws IOException, AmbiguousObjectException, IncorrectObjectTypeException {
  AnyObjectId currentCommit=repo.resolve(commit.getName());
  AnyObjectId parentCommit=commit.getParentCount() > 0 ? repo.resolve(commit.getParent(0).getName()) : null;
  DiffFormatter df=new DiffFormatter(DisabledOutputStream.INSTANCE);
  df.setRepository(repo);
  df.setDiffComparator(RawTextComparator.DEFAULT);
  df.setDetectRenames(true);
  List<DiffEntry> diffs=null;
  if (parentCommit == null) {
    RevWalk rw=new RevWalk(repo);
    diffs=df.scan(new EmptyTreeIterator(),new CanonicalTreeParser(null,rw.getObjectReader(),commit.getTree()));
    rw.release();
  }
 else {
    diffs=df.scan(parentCommit,currentCommit);
  }
  df.release();
  return diffs;
}"
96159,"@Override public Commit getCommit(String id){
  try {
    Git git=Git.open(new File(path));
    Repository repo=git.getRepository();
    Iterable<RevCommit> commits=git.log().add(repo.resolve(id)).call();
    Commit theCommit=null;
    for (    RevCommit jgitCommit : commits) {
      Committer committer=new Committer(jgitCommit.getAuthorIdent().getName(),jgitCommit.getAuthorIdent().getEmailAddress());
      String msg=jgitCommit.getFullMessage().trim();
      String hash=jgitCommit.getName().toString();
      long epoch=jgitCommit.getCommitTime();
      String parent=(jgitCommit.getParentCount() > 0) ? jgitCommit.getParent(0).getName().toString() : ""String_Node_Str"";
      GregorianCalendar date=new GregorianCalendar();
      date.setTime(new Date(epoch * 1000L));
      theCommit=new Commit(hash,committer,date,msg,parent);
      for (      DiffEntry diff : diffsForTheCommit(repo,jgitCommit)) {
        ModificationType change=Enum.valueOf(ModificationType.class,diff.getChangeType().toString());
        String oldPath, newPath;
        if (ModificationType.RENAME.equals(change)) {
          newPath=diff.getOldPath();
          oldPath=diff.getNewPath();
        }
 else {
          oldPath=diff.getOldPath();
          newPath=diff.getNewPath();
        }
        String diffText=""String_Node_Str"";
        String sc=""String_Node_Str"";
        if (diff.getChangeType() != ChangeType.DELETE) {
          diffText=getDiffText(repo,diff);
          sc=getSourceCode(repo,diff);
        }
        theCommit.addModification(oldPath,newPath,change,diffText,sc);
      }
      break;
    }
    return theCommit;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + id + ""String_Node_Str""+ path,e);
  }
}","@Override public Commit getCommit(String id){
  try {
    Git git=Git.open(new File(path));
    Repository repo=git.getRepository();
    Iterable<RevCommit> commits=git.log().add(repo.resolve(id)).call();
    Commit theCommit=null;
    for (    RevCommit jgitCommit : commits) {
      Committer committer=new Committer(jgitCommit.getAuthorIdent().getName(),jgitCommit.getAuthorIdent().getEmailAddress());
      String msg=jgitCommit.getFullMessage().trim();
      String hash=jgitCommit.getName().toString();
      long epoch=jgitCommit.getCommitTime();
      String parent=(jgitCommit.getParentCount() > 0) ? jgitCommit.getParent(0).getName().toString() : ""String_Node_Str"";
      GregorianCalendar date=new GregorianCalendar();
      date.setTime(new Date(epoch * 1000L));
      theCommit=new Commit(hash,committer,date,msg,parent);
      for (      DiffEntry diff : diffsForTheCommit(repo,jgitCommit)) {
        ModificationType change=Enum.valueOf(ModificationType.class,diff.getChangeType().toString());
        String oldPath=diff.getOldPath();
        String newPath=diff.getNewPath();
        String diffText=""String_Node_Str"";
        String sc=""String_Node_Str"";
        if (diff.getChangeType() != ChangeType.DELETE) {
          diffText=getDiffText(repo,diff);
          sc=getSourceCode(repo,diff);
        }
        theCommit.addModification(oldPath,newPath,change,diffText,sc);
      }
      break;
    }
    return theCommit;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + id + ""String_Node_Str""+ path,e);
  }
}"
96160,"public WishlistComponentCursor queryWishlistComponent(long wc_id,long item_id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID+ ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(wc_id),String.valueOf(item_id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=null;
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getReadableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}","public WishlistComponentCursor queryWishlistComponent(long wc_id,long item_id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID+ ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(wc_id),String.valueOf(item_id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=null;
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getWritableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}"
96161,"private SQLiteQueryBuilder builderWishlistComponent(){
  String wc=""String_Node_Str"";
  String w=""String_Node_Str"";
  String i=""String_Node_Str"";
  HashMap<String,String> projectionMap=new HashMap<String,String>();
  projectionMap.put(""String_Node_Str"",wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_QUANTITY,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_QUANTITY);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_NOTES,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_NOTES);
  projectionMap.put(S.COLUMN_ITEMS_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_NAME);
  projectionMap.put(S.COLUMN_ITEMS_JPN_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_JPN_NAME);
  projectionMap.put(S.COLUMN_ITEMS_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_SUB_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SUB_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_RARITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_RARITY);
  projectionMap.put(S.COLUMN_ITEMS_CARRY_CAPACITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_CARRY_CAPACITY);
  projectionMap.put(S.COLUMN_ITEMS_BUY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_BUY);
  projectionMap.put(S.COLUMN_ITEMS_SELL,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SELL);
  projectionMap.put(S.COLUMN_ITEMS_DESCRIPTION,i + ""String_Node_Str"" + S.COLUMN_ITEMS_DESCRIPTION);
  projectionMap.put(S.COLUMN_ITEMS_ICON_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ICON_NAME);
  projectionMap.put(S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX);
  SQLiteQueryBuilder QB=new SQLiteQueryBuilder();
  QB.setTables(S.TABLE_WISHLIST_COMPONENT + ""String_Node_Str"" + ""String_Node_Str""+ S.TABLE_WISHLIST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_ID+ ""String_Node_Str""+ S.TABLE_ITEMS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_ITEMS_ID);
  QB.setProjectionMap(projectionMap);
  return QB;
}","private SQLiteQueryBuilder builderWishlistComponent(){
  String wc=""String_Node_Str"";
  String w=""String_Node_Str"";
  String i=""String_Node_Str"";
  HashMap<String,String> projectionMap=new HashMap<String,String>();
  projectionMap.put(""String_Node_Str"",wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_QUANTITY,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_QUANTITY);
  projectionMap.put(S.COLUMN_WISHLIST_COMPONENT_NOTES,wc + ""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_NOTES);
  projectionMap.put(S.COLUMN_ITEMS_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_NAME);
  projectionMap.put(S.COLUMN_ITEMS_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_SUB_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SUB_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_RARITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_RARITY);
  projectionMap.put(S.COLUMN_ITEMS_CARRY_CAPACITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_CARRY_CAPACITY);
  projectionMap.put(S.COLUMN_ITEMS_BUY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_BUY);
  projectionMap.put(S.COLUMN_ITEMS_SELL,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SELL);
  projectionMap.put(S.COLUMN_ITEMS_DESCRIPTION,i + ""String_Node_Str"" + S.COLUMN_ITEMS_DESCRIPTION);
  projectionMap.put(S.COLUMN_ITEMS_ICON_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ICON_NAME);
  projectionMap.put(S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX);
  SQLiteQueryBuilder QB=new SQLiteQueryBuilder();
  QB.setTables(S.TABLE_WISHLIST_COMPONENT + ""String_Node_Str"" + ""String_Node_Str""+ S.TABLE_WISHLIST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_ID+ ""String_Node_Str""+ S.TABLE_ITEMS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_ITEMS_ID);
  QB.setProjectionMap(projectionMap);
  return QB;
}"
96162,"public WishlistComponentCursor queryWishlistComponents(long id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID + ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID + ""String_Node_Str"";
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getReadableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}","public WishlistComponentCursor queryWishlistComponents(long id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_WISHLIST_ID + ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_COMPONENT_ID + ""String_Node_Str"";
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getWritableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}"
96163,"private SQLiteQueryBuilder builderWishlistData(){
  String wd=""String_Node_Str"";
  String w=""String_Node_Str"";
  String i=""String_Node_Str"";
  HashMap<String,String> projectionMap=new HashMap<String,String>();
  projectionMap.put(""String_Node_Str"",wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  projectionMap.put(S.COLUMN_WISHLIST_DATA_WISHLIST_ID,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_WISHLIST_ID);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_ITEM_ID,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ITEM_ID);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_QUANTITY,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_QUANTITY);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_SATISFIED,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_SATISFIED);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_PATH,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_PATH);
  projectionMap.put(S.COLUMN_ITEMS_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_NAME);
  projectionMap.put(S.COLUMN_ITEMS_JPN_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_JPN_NAME);
  projectionMap.put(S.COLUMN_ITEMS_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_SUB_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SUB_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_RARITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_RARITY);
  projectionMap.put(S.COLUMN_ITEMS_CARRY_CAPACITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_CARRY_CAPACITY);
  projectionMap.put(S.COLUMN_ITEMS_BUY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_BUY);
  projectionMap.put(S.COLUMN_ITEMS_SELL,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SELL);
  projectionMap.put(S.COLUMN_ITEMS_DESCRIPTION,i + ""String_Node_Str"" + S.COLUMN_ITEMS_DESCRIPTION);
  projectionMap.put(S.COLUMN_ITEMS_ICON_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ICON_NAME);
  projectionMap.put(S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX);
  SQLiteQueryBuilder QB=new SQLiteQueryBuilder();
  QB.setTables(S.TABLE_WISHLIST_DATA + ""String_Node_Str"" + ""String_Node_Str""+ S.TABLE_WISHLIST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_WISHLIST_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_ID+ ""String_Node_Str""+ S.TABLE_ITEMS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_ITEMS_ID);
  QB.setProjectionMap(projectionMap);
  return QB;
}","private SQLiteQueryBuilder builderWishlistData(){
  String wd=""String_Node_Str"";
  String w=""String_Node_Str"";
  String i=""String_Node_Str"";
  HashMap<String,String> projectionMap=new HashMap<String,String>();
  projectionMap.put(""String_Node_Str"",wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  projectionMap.put(S.COLUMN_WISHLIST_DATA_WISHLIST_ID,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_WISHLIST_ID);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_ITEM_ID,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ITEM_ID);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_QUANTITY,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_QUANTITY);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_SATISFIED,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_SATISFIED);
  projectionMap.put(S.COLUMN_WISHLIST_DATA_PATH,wd + ""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_PATH);
  projectionMap.put(S.COLUMN_ITEMS_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_NAME);
  projectionMap.put(S.COLUMN_ITEMS_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_SUB_TYPE,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SUB_TYPE);
  projectionMap.put(S.COLUMN_ITEMS_RARITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_RARITY);
  projectionMap.put(S.COLUMN_ITEMS_CARRY_CAPACITY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_CARRY_CAPACITY);
  projectionMap.put(S.COLUMN_ITEMS_BUY,i + ""String_Node_Str"" + S.COLUMN_ITEMS_BUY);
  projectionMap.put(S.COLUMN_ITEMS_SELL,i + ""String_Node_Str"" + S.COLUMN_ITEMS_SELL);
  projectionMap.put(S.COLUMN_ITEMS_DESCRIPTION,i + ""String_Node_Str"" + S.COLUMN_ITEMS_DESCRIPTION);
  projectionMap.put(S.COLUMN_ITEMS_ICON_NAME,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ICON_NAME);
  projectionMap.put(S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX,i + ""String_Node_Str"" + S.COLUMN_ITEMS_ARMOR_DUPE_NAME_FIX);
  SQLiteQueryBuilder QB=new SQLiteQueryBuilder();
  QB.setTables(S.TABLE_WISHLIST_DATA + ""String_Node_Str"" + ""String_Node_Str""+ S.TABLE_WISHLIST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_WISHLIST_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_ID+ ""String_Node_Str""+ S.TABLE_ITEMS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_ITEMS_ID);
  QB.setProjectionMap(projectionMap);
  return QB;
}"
96164,"public WishlistComponentCursor queryWishlistComponentId(long id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_ID + ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=null;
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getReadableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}","public WishlistComponentCursor queryWishlistComponentId(long id){
  String[] wcColumns=null;
  String wcSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_COMPONENT_ID + ""String_Node_Str"";
  String[] wcSelectionArgs=new String[]{String.valueOf(id)};
  String wcGroupBy=null;
  String wcHaving=null;
  String wcOrderBy=null;
  String wcLimit=null;
  SQLiteQueryBuilder qb=builderWishlistComponent();
  Cursor cursor=qb.query(getWritableDatabase(),wcColumns,wcSelection,wcSelectionArgs,wcGroupBy,wcHaving,wcOrderBy,wcLimit);
  return new WishlistComponentCursor(cursor);
}"
96165,"public WishlistDataCursor queryWishlistDataId(long id){
  String[] wdColumns=null;
  String wdSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ID + ""String_Node_Str"";
  String[] wdSelectionArgs=new String[]{String.valueOf(id)};
  String wdGroupBy=null;
  String wdHaving=null;
  String wdOrderBy=null;
  String wdLimit=null;
  SQLiteQueryBuilder qb=builderWishlistData();
  Cursor cursor=qb.query(getReadableDatabase(),wdColumns,wdSelection,wdSelectionArgs,wdGroupBy,wdHaving,wdOrderBy,wdLimit);
  return new WishlistDataCursor(cursor);
}","public WishlistDataCursor queryWishlistDataId(long id){
  String[] wdColumns=null;
  String wdSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_ID + ""String_Node_Str"";
  String[] wdSelectionArgs=new String[]{String.valueOf(id)};
  String wdGroupBy=null;
  String wdHaving=null;
  String wdOrderBy=null;
  String wdLimit=null;
  SQLiteQueryBuilder qb=builderWishlistData();
  Cursor cursor=qb.query(getWritableDatabase(),wdColumns,wdSelection,wdSelectionArgs,wdGroupBy,wdHaving,wdOrderBy,wdLimit);
  return new WishlistDataCursor(cursor);
}"
96166,"public WishlistDataCursor queryWishlistData(long wd_id,long item_id,String path){
  String[] wdColumns=null;
  String wdSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_WISHLIST_ID + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_PATH+ ""String_Node_Str"";
  String[] wdSelectionArgs=new String[]{String.valueOf(wd_id),String.valueOf(item_id),path};
  String wdGroupBy=null;
  String wdHaving=null;
  String wdOrderBy=null;
  String wdLimit=null;
  SQLiteQueryBuilder qb=builderWishlistData();
  Cursor cursor=qb.query(getReadableDatabase(),wdColumns,wdSelection,wdSelectionArgs,wdGroupBy,wdHaving,wdOrderBy,wdLimit);
  return new WishlistDataCursor(cursor);
}","public WishlistDataCursor queryWishlistData(long wd_id,long item_id,String path){
  String[] wdColumns=null;
  String wdSelection=""String_Node_Str"" + S.COLUMN_WISHLIST_DATA_WISHLIST_ID + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ S.COLUMN_WISHLIST_DATA_PATH+ ""String_Node_Str"";
  String[] wdSelectionArgs=new String[]{String.valueOf(wd_id),String.valueOf(item_id),path};
  String wdGroupBy=null;
  String wdHaving=null;
  String wdOrderBy=null;
  String wdLimit=null;
  SQLiteQueryBuilder qb=builderWishlistData();
  Cursor cursor=qb.query(getWritableDatabase(),wdColumns,wdSelection,wdSelectionArgs,wdGroupBy,wdHaving,wdOrderBy,wdLimit);
  return new WishlistDataCursor(cursor);
}"
96167,"public ASBSession getASBSession(Context context){
  if (isBeforeFirst() || isAfterLast()) {
    return null;
  }
  ASBSession session=new ASBSession(context);
  long id=getLong(getColumnIndex(S.COLUMN_ASB_SET_ID));
  ASBSet set=DataManager.get(context).getASBSet(id);
  session.setASBSet(set);
  long headId=getLong(getColumnIndex(S.COLUMN_HEAD_ARMOR_ID));
  long headDecoration1Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_1_ID));
  long headDecoration2Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_2_ID));
  long headDecoration3Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_3_ID));
  Armor headArmor=getArmorById(context,headId);
  Decoration headDecoration1=getDecorationById(context,headDecoration1Id);
  Decoration headDecoration2=getDecorationById(context,headDecoration2Id);
  Decoration headDecoration3=getDecorationById(context,headDecoration3Id);
  long bodyId=getLong(getColumnIndex(S.COLUMN_BODY_ARMOR_ID));
  long bodyDecoration1Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_1_ID));
  long bodyDecoration2Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_2_ID));
  long bodyDecoration3Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_3_ID));
  Armor bodyArmor=getArmorById(context,bodyId);
  Decoration bodyDecoration1=getDecorationById(context,bodyDecoration1Id);
  Decoration bodyDecoration2=getDecorationById(context,bodyDecoration2Id);
  Decoration bodyDecoration3=getDecorationById(context,bodyDecoration3Id);
  long armsId=getLong(getColumnIndex(S.COLUMN_ARMS_ARMOR_ID));
  long armsDecoration1Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_1_ID));
  long armsDecoration2Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_2_ID));
  long armsDecoration3Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_3_ID));
  Armor armsArmor=getArmorById(context,armsId);
  Decoration armsDecoration1=getDecorationById(context,armsDecoration1Id);
  Decoration armsDecoration2=getDecorationById(context,armsDecoration2Id);
  Decoration armsDecoration3=getDecorationById(context,armsDecoration3Id);
  long waistId=getLong(getColumnIndex(S.COLUMN_WAIST_ARMOR_ID));
  long waistDecoration1Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_1_ID));
  long waistDecoration2Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_2_ID));
  long waistDecoration3Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_3_ID));
  Armor waistArmor=getArmorById(context,waistId);
  Decoration waistDecoration1=getDecorationById(context,waistDecoration1Id);
  Decoration waistDecoration2=getDecorationById(context,waistDecoration2Id);
  Decoration waistDecoration3=getDecorationById(context,waistDecoration3Id);
  long legsId=getLong(getColumnIndex(S.COLUMN_LEGS_ARMOR_ID));
  long legsDecoration1Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_1_ID));
  long legsDecoration2Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_2_ID));
  long legsDecoration3Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_3_ID));
  Armor legsArmor=getArmorById(context,legsId);
  Decoration legsDecoration1=getDecorationById(context,legsDecoration1Id);
  Decoration legsDecoration2=getDecorationById(context,legsDecoration2Id);
  Decoration legsDecoration3=getDecorationById(context,legsDecoration3Id);
  int talismanExists=getInt(getColumnIndex(S.COLUMN_TALISMAN_EXISTS));
  long talismanSkill1Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_SKILL_1_ID));
  int talismanSkill1Points=getInt(getColumnIndex(S.COLUMN_TALISMAN_SKILL_1_POINTS));
  long talismanSkill2Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_SKILL_2_ID));
  int talismanSkill2Points=getInt(getColumnIndex(S.COLUMN_TALISMAN_SKILL_2_POINTS));
  int talismanType=getInt(getColumnIndex(S.COLUMN_TALISMAN_TYPE));
  int talismanSlots=getInt(getColumnIndex(S.COLUMN_TALISMAN_SLOTS));
  long talismanDecoration1Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_1_ID));
  long talismanDecoration2Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_2_ID));
  long talismanDecoration3Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_3_ID));
  Decoration talismanDecoration1=getDecorationById(context,talismanDecoration1Id);
  Decoration talismanDecoration2=getDecorationById(context,talismanDecoration2Id);
  Decoration talismanDecoration3=getDecorationById(context,talismanDecoration3Id);
  if (headArmor != null) {
    session.setEquipment(ASBSession.HEAD,headArmor,false);
  }
  if (headDecoration1 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration1,false);
  }
  if (headDecoration2 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration2,false);
  }
  if (headDecoration3 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration3,false);
  }
  if (bodyArmor != null) {
    session.setEquipment(ASBSession.BODY,bodyArmor,false);
  }
  if (bodyDecoration1 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration1,false);
  }
  if (bodyDecoration2 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration2,false);
  }
  if (bodyDecoration3 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration3,false);
  }
  if (armsArmor != null) {
    session.setEquipment(ASBSession.ARMS,armsArmor,false);
  }
  if (armsDecoration1 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration1,false);
  }
  if (armsDecoration2 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration2,false);
  }
  if (armsDecoration3 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration3,false);
  }
  if (waistArmor != null) {
    session.setEquipment(ASBSession.WAIST,waistArmor,false);
  }
  if (waistDecoration1 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration1,false);
  }
  if (waistDecoration2 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration2,false);
  }
  if (waistDecoration3 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration3,false);
  }
  if (legsArmor != null) {
    session.setEquipment(ASBSession.LEGS,legsArmor,false);
  }
  if (legsDecoration1 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration1,false);
  }
  if (legsDecoration2 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration2,false);
  }
  if (legsDecoration3 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration3,false);
  }
  if (talismanExists == 1) {
    ASBTalisman talisman=new ASBTalisman();
    talisman.setName(ResourceUtils.splitStringInArrayByComma(R.array.talisman_names,talismanType,0,context) + ""String_Node_Str"");
    talisman.setTypeIndex(talismanType);
    talisman.setNumSlots(talismanSlots);
    talisman.setSkill1(getSkillTreeById(context,talismanSkill1Id));
    talisman.setSkill1Points(talismanSkill1Points);
    if (talismanSkill2Id != -1) {
      talisman.setSkill2(getSkillTreeById(context,talismanSkill2Id));
      talisman.setSkill2Points(talismanSkill2Points);
    }
    session.setEquipment(ASBSession.TALISMAN,talisman,false);
    if (talismanDecoration1 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration1,false);
    }
    if (talismanDecoration2 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration2,false);
    }
    if (talismanDecoration3 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration2,false);
    }
  }
  session.updateSkillTreePointsSets();
  return session;
}","public ASBSession getASBSession(Context context){
  if (isBeforeFirst() || isAfterLast()) {
    return null;
  }
  ASBSession session=new ASBSession(context);
  long id=getLong(getColumnIndex(S.COLUMN_ASB_SET_ID));
  ASBSet set=DataManager.get(context).getASBSet(id);
  session.setASBSet(set);
  long headId=getLong(getColumnIndex(S.COLUMN_HEAD_ARMOR_ID));
  long headDecoration1Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_1_ID));
  long headDecoration2Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_2_ID));
  long headDecoration3Id=getLong(getColumnIndex(S.COLUMN_HEAD_DECORATION_3_ID));
  Armor headArmor=getArmorById(context,headId);
  Decoration headDecoration1=getDecorationById(context,headDecoration1Id);
  Decoration headDecoration2=getDecorationById(context,headDecoration2Id);
  Decoration headDecoration3=getDecorationById(context,headDecoration3Id);
  long bodyId=getLong(getColumnIndex(S.COLUMN_BODY_ARMOR_ID));
  long bodyDecoration1Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_1_ID));
  long bodyDecoration2Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_2_ID));
  long bodyDecoration3Id=getLong(getColumnIndex(S.COLUMN_BODY_DECORATION_3_ID));
  Armor bodyArmor=getArmorById(context,bodyId);
  Decoration bodyDecoration1=getDecorationById(context,bodyDecoration1Id);
  Decoration bodyDecoration2=getDecorationById(context,bodyDecoration2Id);
  Decoration bodyDecoration3=getDecorationById(context,bodyDecoration3Id);
  long armsId=getLong(getColumnIndex(S.COLUMN_ARMS_ARMOR_ID));
  long armsDecoration1Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_1_ID));
  long armsDecoration2Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_2_ID));
  long armsDecoration3Id=getLong(getColumnIndex(S.COLUMN_ARMS_DECORATION_3_ID));
  Armor armsArmor=getArmorById(context,armsId);
  Decoration armsDecoration1=getDecorationById(context,armsDecoration1Id);
  Decoration armsDecoration2=getDecorationById(context,armsDecoration2Id);
  Decoration armsDecoration3=getDecorationById(context,armsDecoration3Id);
  long waistId=getLong(getColumnIndex(S.COLUMN_WAIST_ARMOR_ID));
  long waistDecoration1Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_1_ID));
  long waistDecoration2Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_2_ID));
  long waistDecoration3Id=getLong(getColumnIndex(S.COLUMN_WAIST_DECORATION_3_ID));
  Armor waistArmor=getArmorById(context,waistId);
  Decoration waistDecoration1=getDecorationById(context,waistDecoration1Id);
  Decoration waistDecoration2=getDecorationById(context,waistDecoration2Id);
  Decoration waistDecoration3=getDecorationById(context,waistDecoration3Id);
  long legsId=getLong(getColumnIndex(S.COLUMN_LEGS_ARMOR_ID));
  long legsDecoration1Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_1_ID));
  long legsDecoration2Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_2_ID));
  long legsDecoration3Id=getLong(getColumnIndex(S.COLUMN_LEGS_DECORATION_3_ID));
  Armor legsArmor=getArmorById(context,legsId);
  Decoration legsDecoration1=getDecorationById(context,legsDecoration1Id);
  Decoration legsDecoration2=getDecorationById(context,legsDecoration2Id);
  Decoration legsDecoration3=getDecorationById(context,legsDecoration3Id);
  int talismanExists=getInt(getColumnIndex(S.COLUMN_TALISMAN_EXISTS));
  long talismanSkill1Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_SKILL_1_ID));
  int talismanSkill1Points=getInt(getColumnIndex(S.COLUMN_TALISMAN_SKILL_1_POINTS));
  long talismanSkill2Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_SKILL_2_ID));
  int talismanSkill2Points=getInt(getColumnIndex(S.COLUMN_TALISMAN_SKILL_2_POINTS));
  int talismanType=getInt(getColumnIndex(S.COLUMN_TALISMAN_TYPE));
  int talismanSlots=getInt(getColumnIndex(S.COLUMN_TALISMAN_SLOTS));
  long talismanDecoration1Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_1_ID));
  long talismanDecoration2Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_2_ID));
  long talismanDecoration3Id=getLong(getColumnIndex(S.COLUMN_TALISMAN_DECORATION_3_ID));
  Decoration talismanDecoration1=getDecorationById(context,talismanDecoration1Id);
  Decoration talismanDecoration2=getDecorationById(context,talismanDecoration2Id);
  Decoration talismanDecoration3=getDecorationById(context,talismanDecoration3Id);
  if (headArmor != null) {
    session.setEquipment(ASBSession.HEAD,headArmor,false);
  }
  if (headDecoration1 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration1,false);
  }
  if (headDecoration2 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration2,false);
  }
  if (headDecoration3 != null) {
    session.addDecoration(ASBSession.HEAD,headDecoration3,false);
  }
  if (bodyArmor != null) {
    session.setEquipment(ASBSession.BODY,bodyArmor,false);
  }
  if (bodyDecoration1 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration1,false);
  }
  if (bodyDecoration2 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration2,false);
  }
  if (bodyDecoration3 != null) {
    session.addDecoration(ASBSession.BODY,bodyDecoration3,false);
  }
  if (armsArmor != null) {
    session.setEquipment(ASBSession.ARMS,armsArmor,false);
  }
  if (armsDecoration1 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration1,false);
  }
  if (armsDecoration2 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration2,false);
  }
  if (armsDecoration3 != null) {
    session.addDecoration(ASBSession.ARMS,armsDecoration3,false);
  }
  if (waistArmor != null) {
    session.setEquipment(ASBSession.WAIST,waistArmor,false);
  }
  if (waistDecoration1 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration1,false);
  }
  if (waistDecoration2 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration2,false);
  }
  if (waistDecoration3 != null) {
    session.addDecoration(ASBSession.WAIST,waistDecoration3,false);
  }
  if (legsArmor != null) {
    session.setEquipment(ASBSession.LEGS,legsArmor,false);
  }
  if (legsDecoration1 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration1,false);
  }
  if (legsDecoration2 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration2,false);
  }
  if (legsDecoration3 != null) {
    session.addDecoration(ASBSession.LEGS,legsDecoration3,false);
  }
  if (talismanExists == 1) {
    ASBTalisman talisman=new ASBTalisman();
    talisman.setName(ResourceUtils.splitStringInArrayByComma(R.array.talisman_names,talismanType,0,context) + ""String_Node_Str"");
    talisman.setTypeIndex(talismanType);
    talisman.setNumSlots(talismanSlots);
    talisman.setSkill1(getSkillTreeById(context,talismanSkill1Id));
    talisman.setSkill1Points(talismanSkill1Points);
    if (talismanSkill2Id != -1) {
      talisman.setSkill2(getSkillTreeById(context,talismanSkill2Id));
      talisman.setSkill2Points(talismanSkill2Points);
    }
    session.setEquipment(ASBSession.TALISMAN,talisman,false);
    if (talismanDecoration1 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration1,false);
    }
    if (talismanDecoration2 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration2,false);
    }
    if (talismanDecoration3 != null) {
      session.addDecoration(ASBSession.TALISMAN,talismanDecoration3,false);
    }
  }
  session.updateSkillTreePointsSets();
  return session;
}"
96168,"/** 
 * Helper method that updates the contents of the dialog based on what's in the armor set builder session.
 */
private void updateDecorationsView(){
  if (session.getEquipment(pieceIndex) != null) {
    for (int i=0; i < decorationNames.length; i++) {
      if (session.decorationIsReal(pieceIndex,i)) {
        Drawable icon=null;
        String cellImage=""String_Node_Str"" + session.getDecoration(pieceIndex,i).getFileLocation();
        try {
          icon=Drawable.createFromStream(parentFragment.getActivity().getAssets().open(cellImage),null);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        decorationIcons[i].setImageDrawable(icon);
      }
 else       if (session.decorationIsDummy(pieceIndex,i)) {
        Drawable icon=null;
        String cellImage=""String_Node_Str"";
        try {
          icon=Drawable.createFromStream(parentFragment.getActivity().getAssets().open(cellImage),null);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        decorationIcons[i].setImageDrawable(icon);
      }
 else {
        decorationIcons[i].setImageDrawable(null);
      }
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setText(session.getDecoration(pieceIndex,i).getName());
      }
 else       if (session.decorationIsDummy(pieceIndex,i)) {
        decorationNames[i].setText(session.findRealDecorationOfDummy(pieceIndex,i).getName());
      }
 else       if (session.getEquipment(pieceIndex).getNumSlots() > i) {
        decorationNames[i].setText(R.string.asb_empty_slot);
      }
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color));
      }
 else {
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color_secondary));
      }
    }
  }
}","/** 
 * Helper method that updates the contents of the dialog based on what's in the armor set builder session.
 */
private void updateDecorationsView(){
  for (  TextView decorationName : decorationNames) {
    decorationName.setTextColor(getResources().getColor(R.color.text_color_secondary));
  }
  if (session.getEquipment(pieceIndex) != null) {
    for (int i=0; i < decorationNames.length; i++) {
      if (session.decorationIsReal(pieceIndex,i)) {
        Drawable icon=null;
        String cellImage=""String_Node_Str"" + session.getDecoration(pieceIndex,i).getFileLocation();
        try {
          icon=Drawable.createFromStream(parentFragment.getActivity().getAssets().open(cellImage),null);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        decorationIcons[i].setImageDrawable(icon);
      }
 else       if (session.decorationIsDummy(pieceIndex,i)) {
        Drawable icon=null;
        String cellImage=""String_Node_Str"";
        try {
          icon=Drawable.createFromStream(parentFragment.getActivity().getAssets().open(cellImage),null);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        decorationIcons[i].setImageDrawable(icon);
      }
 else {
        decorationIcons[i].setImageDrawable(null);
      }
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setText(session.getDecoration(pieceIndex,i).getName());
      }
 else       if (session.decorationIsDummy(pieceIndex,i)) {
        decorationNames[i].setText(session.findRealDecorationOfDummy(pieceIndex,i).getName());
      }
 else       if (session.getEquipment(pieceIndex).getNumSlots() > i) {
        decorationNames[i].setText(R.string.asb_empty_slot);
      }
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color));
      }
 else {
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color_secondary));
      }
    }
  }
}"
96169,"/** 
 * Resets the container to its default state.
 */
private void onArmorRemoved(){
  text.setText(""String_Node_Str"");
  icon.setImageBitmap(fetchIcon(1));
}","/** 
 * Resets the container to its default state.
 */
private void onArmorRemoved(){
  text.setText(""String_Node_Str"");
  icon.setImageBitmap(fetchIcon(1));
  updateDecorationsView();
}"
96170,"private void update(){
  if (session.getEquipment(pieceIndex) != null) {
    boolean addButtonExists=false;
    for (int i=0; i < decorationNames.length; i++) {
      decorationIcons[i].setImageDrawable(fetchDecorationIcon(pieceIndex,i));
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setText(session.getDecoration(pieceIndex,i).getName());
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color));
        decorationMenuButtons[i].setImageDrawable(getResources().getDrawable(R.drawable.ic_remove));
      }
 else {
        if (session.decorationIsDummy(pieceIndex,i)) {
          decorationNames[i].setText(session.findRealDecorationOfDummy(pieceIndex,i).getName());
          decorationMenuButtons[i].setImageDrawable(null);
        }
 else         if (session.getEquipment(pieceIndex).getNumSlots() > i) {
          decorationNames[i].setText(R.string.asb_empty_slot);
          if (!addButtonExists) {
            decorationMenuButtons[i].setImageDrawable(getResources().getDrawable(R.drawable.ic_add));
            addButtonExists=true;
          }
 else {
            decorationMenuButtons[i].setImageDrawable(null);
          }
        }
 else {
          decorationNames[i].setText(R.string.asb_no_slot);
          decorationMenuButtons[i].setImageDrawable(null);
        }
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color_secondary));
      }
    }
  }
 else {
    for (int i=0; i < decorationNames.length; i++) {
      decorationNames[i].setText(null);
      decorationIcons[i].setImageDrawable(null);
      decorationMenuButtons[i].setVisibility(INVISIBLE);
    }
  }
}","private void update(){
  if (session.getEquipment(pieceIndex) != null) {
    boolean addButtonExists=false;
    for (int i=0; i < decorationNames.length; i++) {
      decorationIcons[i].setImageDrawable(fetchDecorationIcon(pieceIndex,i));
      if (session.decorationIsReal(pieceIndex,i)) {
        decorationNames[i].setText(session.getDecoration(pieceIndex,i).getName());
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color));
        decorationMenuButtons[i].setImageDrawable(getResources().getDrawable(R.drawable.ic_remove));
      }
 else {
        if (session.decorationIsDummy(pieceIndex,i)) {
          decorationNames[i].setText(session.findRealDecorationOfDummy(pieceIndex,i).getName());
          decorationMenuButtons[i].setImageDrawable(null);
        }
 else         if (session.getEquipment(pieceIndex).getNumSlots() > i) {
          decorationNames[i].setText(R.string.asb_empty_slot);
          if (!addButtonExists) {
            decorationMenuButtons[i].setImageDrawable(getResources().getDrawable(R.drawable.ic_add));
            addButtonExists=true;
          }
 else {
            decorationMenuButtons[i].setImageDrawable(null);
          }
        }
 else {
          decorationNames[i].setText(R.string.asb_no_slot);
          decorationMenuButtons[i].setImageDrawable(null);
        }
        decorationNames[i].setTextColor(getResources().getColor(R.color.text_color_secondary));
      }
    }
  }
 else {
    for (int i=0; i < decorationNames.length; i++) {
      decorationNames[i].setText(null);
      decorationIcons[i].setImageDrawable(null);
    }
  }
}"
96171,"/** 
 * Refreshes the contents of the piece container based on the   {@code ASBSession}. 
 */
public void updateContents(){
  updateArmorPiece();
  updateDecorationsPreview();
  decorationView.update();
}","/** 
 * Refreshes the contents of the piece container based on the   {@code ASBSession}.
 */
public void updateContents(){
  updateArmorPiece();
  updateDecorationsPreview();
  decorationView.update();
}"
96172,"/** 
 * It is required to call   {@code initialize} after instantiating this class. 
 */
public ASBPieceContainer(Context context,AttributeSet attrs){
  super(context,attrs);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.view_armor_set_builder_piece_container,this);
  icon=(ImageView)findViewById(R.id.armor_builder_item_icon);
  text=(TextView)findViewById(R.id.armor_builder_item_name);
  decorationStates=new ImageView[3];
  decorationStates[0]=(ImageView)findViewById(R.id.decoration_1_state);
  decorationStates[1]=(ImageView)findViewById(R.id.decoration_2_state);
  decorationStates[2]=(ImageView)findViewById(R.id.decoration_3_state);
  text.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (session.isEquipmentSelected(pieceIndex)) {
        requestPieceInfo();
      }
    }
  }
);
  equipmentButton=(ImageView)findViewById(R.id.add_equipment_button);
  equipmentButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!session.isEquipmentSelected(pieceIndex)) {
        onAddEquipment();
      }
 else {
        onRemoveEquipment();
      }
    }
  }
);
  decorationView=new DecorationView();
  dropDownArrow=(ImageView)findViewById(R.id.drop_down_arrow);
  dropDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (decorationView.container.getVisibility() == GONE) {
        showDecorations();
      }
 else {
        hideDecorations();
      }
    }
  }
);
}","/** 
 * It is required to call   {@code initialize} after instantiating this class.
 */
public ASBPieceContainer(Context context,AttributeSet attrs){
  super(context,attrs);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.view_armor_set_builder_piece_container,this);
  icon=(ImageView)findViewById(R.id.armor_builder_item_icon);
  text=(TextView)findViewById(R.id.armor_builder_item_name);
  decorationStates=new ImageView[3];
  decorationStates[0]=(ImageView)findViewById(R.id.decoration_1_state);
  decorationStates[1]=(ImageView)findViewById(R.id.decoration_2_state);
  decorationStates[2]=(ImageView)findViewById(R.id.decoration_3_state);
  text.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (session.isEquipmentSelected(pieceIndex)) {
        requestPieceInfo();
      }
    }
  }
);
  equipmentButton=(ImageView)findViewById(R.id.add_equipment_button);
  equipmentButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!session.isEquipmentSelected(pieceIndex)) {
        onAddEquipment();
      }
 else {
        onRemoveEquipment();
      }
    }
  }
);
  decorationView=new DecorationView();
  dropDownArrow=(ImageView)findViewById(R.id.drop_down_arrow);
  dropDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (decorationView.container.getVisibility() == GONE) {
        showDecorations();
      }
 else {
        hideDecorations();
      }
    }
  }
);
}"
96173,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new MonsterAilmentCursorLoader(getActivity(),args.getLong(ARG_MONSTER_ID));
}","@Override public Loader<Monster> onCreateLoader(int id,Bundle args){
  return new MonsterLoader(getActivity(),args.getLong(ARG_MONSTER_ID));
}"
96174,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  MonsterDamageFragment.MonsterAilmentsCursorAdapter adapter=new MonsterDamageFragment.MonsterAilmentsCursorAdapter(getActivity(),(MonsterAilmentCursor)cursor);
  for (int i=0; i < adapter.getCount(); i++) {
    LinearLayout v=(LinearLayout)adapter.getView(i,null,null);
    mAilmentsLinearLayout.addView(v);
  }
  updateUI();
}","@Override public void onLoadFinished(Loader<Monster> loader,Monster run){
  mMonster=run;
  LoaderManager lm=getLoaderManager();
  Bundle args=new Bundle();
  args.putLong(ARG_MONSTER_ID,run.getId());
  updateUI();
}"
96175,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_monster_damage,container,false);
  mMonsterLabelTextView=(TextView)view.findViewById(R.id.detail_monster_label);
  mMonsterIconImageView=(ImageView)view.findViewById(R.id.detail_monster_image);
  mCutImageView=(ImageView)view.findViewById(R.id.cut);
  mImpactImageView=(ImageView)view.findViewById(R.id.impact);
  mShotImageView=(ImageView)view.findViewById(R.id.shot);
  mKOImageView=(ImageView)view.findViewById(R.id.ko);
  mFireImageView=(ImageView)view.findViewById(R.id.fire);
  mWaterImageView=(ImageView)view.findViewById(R.id.water);
  mIceImageView=(ImageView)view.findViewById(R.id.ice);
  mThunderImageView=(ImageView)view.findViewById(R.id.thunder);
  mDragonImageView=(ImageView)view.findViewById(R.id.dragon);
  mWeaponDamageTL=(LinearLayout)view.findViewById(R.id.weapon_damage);
  mElementalDamageTL=(LinearLayout)view.findViewById(R.id.elemental_damage);
  mDividerView=view.findViewById(R.id.divider);
  mAilmentsLinearLayout=(LinearLayout)view.findViewById(R.id.ailments_list);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_monster_damage,container,false);
  mMonsterLabelTextView=(TextView)view.findViewById(R.id.detail_monster_label);
  mMonsterIconImageView=(ImageView)view.findViewById(R.id.detail_monster_image);
  mCutImageView=(ImageView)view.findViewById(R.id.cut);
  mImpactImageView=(ImageView)view.findViewById(R.id.impact);
  mShotImageView=(ImageView)view.findViewById(R.id.shot);
  mKOImageView=(ImageView)view.findViewById(R.id.ko);
  mFireImageView=(ImageView)view.findViewById(R.id.fire);
  mWaterImageView=(ImageView)view.findViewById(R.id.water);
  mIceImageView=(ImageView)view.findViewById(R.id.ice);
  mThunderImageView=(ImageView)view.findViewById(R.id.thunder);
  mDragonImageView=(ImageView)view.findViewById(R.id.dragon);
  mWeaponDamageTL=(LinearLayout)view.findViewById(R.id.weapon_damage);
  mElementalDamageTL=(LinearLayout)view.findViewById(R.id.elemental_damage);
  mDividerView=view.findViewById(R.id.divider);
  return view;
}"
96176,"@Override public void onLoaderReset(Loader<Cursor> loader){
}","@Override public void onLoaderReset(Loader<Monster> loader){
}"
96177,"private void updateWeaknessUI(){
  int fire, water, thunder, ice, dragon, poison, paralysis, sleep, pitfalltrap, shocktrap, flashbomb, sonicbomb, dungbomb, meat;
  ArrayList<MonsterWeakness> weaknesses=DataManager.get(getActivity()).queryMonsterWeaknessArray(mMonster.getId());
  mWeakness=weaknesses.get(0);
  evalWeakness(mWeakness.getFire(),mWeaknessData,getResources().getString(R.string.image_location_fire));
  evalWeakness(mWeakness.getWater(),mWeaknessData,getResources().getString(R.string.image_location_water));
  evalWeakness(mWeakness.getThunder(),mWeaknessData,getResources().getString(R.string.image_location_thunder));
  evalWeakness(mWeakness.getIce(),mWeaknessData,getResources().getString(R.string.image_location_ice));
  evalWeakness(mWeakness.getDragon(),mWeaknessData,getResources().getString(R.string.image_location_dragon));
  evalWeakness(mWeakness.getPoison(),mWeaknessData,getResources().getString(R.string.image_location_poison));
  evalWeakness(mWeakness.getParalysis(),mWeaknessData,getResources().getString(R.string.image_location_paralysis));
  evalWeakness(mWeakness.getSleep(),mWeaknessData,getResources().getString(R.string.image_location_sleep));
}","private void updateWeaknessUI(){
  int fire, water, thunder, ice, dragon, poison, paralysis, sleep, pitfalltrap, shocktrap, flashbomb, sonicbomb, dungbomb, meat;
  ArrayList<MonsterWeakness> weaknesses=DataManager.get(getActivity()).queryMonsterWeaknessArray(mMonster.getId());
  mWeakness=weaknesses.get(0);
  evalWeakness(mWeakness.getFire(),mWeaknessData,getResources().getString(R.string.image_location_fire));
  evalWeakness(mWeakness.getWater(),mWeaknessData,getResources().getString(R.string.image_location_water));
  evalWeakness(mWeakness.getThunder(),mWeaknessData,getResources().getString(R.string.image_location_thunder));
  evalWeakness(mWeakness.getIce(),mWeaknessData,getResources().getString(R.string.image_location_ice));
  evalWeakness(mWeakness.getDragon(),mWeaknessData,getResources().getString(R.string.image_location_dragon));
  evalWeakness(mWeakness.getPoison(),mWeaknessData,getResources().getString(R.string.image_location_poison));
  evalWeakness(mWeakness.getParalysis(),mWeaknessData,getResources().getString(R.string.image_location_paralysis));
  evalWeakness(mWeakness.getSleep(),mWeaknessData,getResources().getString(R.string.image_location_sleep));
  if (mWeakness.getPitfalltrap() != 0)   addIcon(mTrapData,getResources().getString(R.string.image_location_pitfall_trap),null);
  if (mWeakness.getShocktrap() != 0)   addIcon(mTrapData,getResources().getString(R.string.image_location_shock_trap),null);
  if (mWeakness.getFlashbomb() != 0)   addIcon(mBombData,getResources().getString(R.string.image_location_flash_bomb),null);
  if (mWeakness.getSonicbomb() != 0)   addIcon(mBombData,getResources().getString(R.string.image_location_sonic_bomb),null);
  if (mWeakness.getDungbomb() != 0)   addIcon(mBombData,getResources().getString(R.string.image_location_dung_bomb),null);
}"
96178,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  MonsterSummaryFragment.MonsterAilmentsCursorAdapter adapter=new MonsterSummaryFragment.MonsterAilmentsCursorAdapter(getActivity(),(MonsterAilmentCursor)cursor);
  for (int i=0; i < adapter.getCount(); i++) {
    LinearLayout v=(LinearLayout)adapter.getView(i,null,null);
  }
  updateUI();
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  MonsterSummaryFragment.MonsterAilmentsCursorAdapter adapter=new MonsterSummaryFragment.MonsterAilmentsCursorAdapter(getActivity(),(MonsterAilmentCursor)cursor);
  for (int i=0; i < adapter.getCount(); i++) {
    LinearLayout v=(LinearLayout)adapter.getView(i,null,null);
    mAilments.addView(v);
  }
  updateUI();
}"
96179,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_monster_summary,container,false);
  mMonsterLabelTextView=(TextView)view.findViewById(R.id.detail_monster_label);
  mMonsterIconImageView=(ImageView)view.findViewById(R.id.detail_monster_image);
  mWeaknessData=(LinearLayout)view.findViewById(R.id.weakness_data);
  mAttackData=(LinearLayout)view.findViewById(R.id.attack_data);
  mEarplugData=(LinearLayout)view.findViewById(R.id.earplugs_data);
  mWindpressData=(LinearLayout)view.findViewById(R.id.windpress_data);
  mTrapData=(LinearLayout)view.findViewById(R.id.trap_data);
  mBombData=(LinearLayout)view.findViewById(R.id.bomb_data);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_monster_summary,container,false);
  mMonsterLabelTextView=(TextView)view.findViewById(R.id.detail_monster_label);
  mMonsterIconImageView=(ImageView)view.findViewById(R.id.detail_monster_image);
  mWeaknessData=(LinearLayout)view.findViewById(R.id.weakness_data);
  mAttackData=(LinearLayout)view.findViewById(R.id.attack_data);
  mEarplugData=(LinearLayout)view.findViewById(R.id.earplugs_data);
  mWindpressData=(LinearLayout)view.findViewById(R.id.windpress_data);
  mTrapData=(LinearLayout)view.findViewById(R.id.trap_data);
  mBombData=(LinearLayout)view.findViewById(R.id.bomb_data);
  mAilments=(LinearLayout)view.findViewById(R.id.ailments_data);
  return view;
}"
96180,"/** 
 * Adds any skills to the armor set's skill trees that were not there before, and removes those no longer there.
 */
public void updateSkillTreePointsSets(Context context){
  skillTreePointsSets.clear();
  Map<SkillTree,SkillTreePointsSet> skillTreeToSkillTreePointsSet=new HashMap<>();
  for (  SkillTreePointsSet pointsSet : skillTreePointsSets) {
    skillTreeToSkillTreePointsSet.put(pointsSet.getSkillTree(),pointsSet);
  }
  for (int i=0; i < equipment.length; i++) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + i);
    Map<SkillTree,Integer> armorSkillTreePoints=getSkillsFromArmorPiece(i,context);
    for (    SkillTree skillTree : armorSkillTreePoints.keySet()) {
      SkillTreePointsSet s;
      if (!skillTreeToSkillTreePointsSet.containsKey(skillTree)) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + skillTree.getName() + ""String_Node_Str"");
        s=new SkillTreePointsSet();
        s.setSkillTree(skillTree);
        skillTreePointsSets.add(s);
        skillTreeToSkillTreePointsSet.put(skillTree,s);
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + skillTree.getName() + ""String_Node_Str"");
        s=skillTreeToSkillTreePointsSet.get(skillTree);
      }
      s.setPoints(i,armorSkillTreePoints.get(skillTree));
    }
  }
}","/** 
 * Adds any skills to the armor set's skill trees that were not there before, and removes those no longer there.
 */
public void updateSkillTreePointsSets(Context context){
  skillTreePointsSets.clear();
  Map<Long,SkillTreePointsSet> skillTreeToSkillTreePointsSet=new HashMap<>();
  for (  SkillTreePointsSet pointsSet : skillTreePointsSets) {
    skillTreeToSkillTreePointsSet.put(pointsSet.getSkillTree().getId(),pointsSet);
  }
  for (int i=0; i < equipment.length; i++) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + i);
    Map<SkillTree,Integer> armorSkillTreePoints=getSkillsFromArmorPiece(i,context);
    for (    SkillTree skillTree : armorSkillTreePoints.keySet()) {
      SkillTreePointsSet s;
      if (!skillTreeToSkillTreePointsSet.containsKey(skillTree.getId())) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + skillTree.getName() + ""String_Node_Str"");
        s=new SkillTreePointsSet();
        s.setSkillTree(skillTree);
        skillTreePointsSets.add(s);
        skillTreeToSkillTreePointsSet.put(skillTree.getId(),s);
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + skillTree.getName() + ""String_Node_Str"");
        s=skillTreeToSkillTreePointsSet.get(skillTree.getId());
      }
      s.setPoints(i,armorSkillTreePoints.get(skillTree));
    }
  }
}"
96181,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  LayoutInflater inflater=getActivity().getLayoutInflater();
  final View addView=inflater.inflate(R.layout.dialog_armor_set_builder_edit_talisman,null);
  skillTreeViews=new ArmorSetBuilderTalismanSkillContainer[2];
  skillTreeViews[0]=(ArmorSetBuilderTalismanSkillContainer)addView.findViewById(R.id.skill_1_view);
  skillTreeViews[0].setContainer(this);
  skillTreeViews[1]=(ArmorSetBuilderTalismanSkillContainer)addView.findViewById(R.id.skill_2_view);
  skillTreeViews[1].setContainer(this);
  initializeTypeSpinner(addView);
  Dialog d=new AlertDialog.Builder(getActivity()).setTitle(R.string.armor_set_builder_talisman_dialog_title).setView(addView).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (skillTreeViews[0].hasSkillDefined()) {
        Intent i=new Intent();
        long skill1Id=skillTreeViews[0].getSkillTree().getId();
        int skill1Points=skillTreeViews[0].getSkillPoints();
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_1,skill1Id);
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_1,skill1Points);
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_TYPE_INDEX,talismanTypeIndex);
        if (skillTreeViews[1].hasSkillDefined()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          long skill2Id=skillTreeViews[0].getSkillTree().getId();
          int skill2Points=skillTreeViews[1].getSkillPoints();
          i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_2,skill2Id);
          i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_2,skill2Points);
        }
        getTargetFragment().onActivityResult(ArmorSetBuilderActivity.REQUEST_CODE_CREATE_TALISMAN,Activity.RESULT_OK,i);
      }
    }
  }
).create();
  return d;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  LayoutInflater inflater=getActivity().getLayoutInflater();
  final View addView=inflater.inflate(R.layout.dialog_armor_set_builder_edit_talisman,null);
  skillTreeViews=new ArmorSetBuilderTalismanSkillContainer[2];
  skillTreeViews[0]=(ArmorSetBuilderTalismanSkillContainer)addView.findViewById(R.id.skill_1_view);
  skillTreeViews[0].setContainer(this);
  skillTreeViews[1]=(ArmorSetBuilderTalismanSkillContainer)addView.findViewById(R.id.skill_2_view);
  skillTreeViews[1].setContainer(this);
  initializeTypeSpinner(addView);
  Dialog d=new AlertDialog.Builder(getActivity()).setTitle(R.string.armor_set_builder_talisman_dialog_title).setView(addView).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (skillTreeViews[0].hasSkillDefined()) {
        Intent i=new Intent();
        long skill1Id=skillTreeViews[0].getSkillTree().getId();
        int skill1Points=skillTreeViews[0].getSkillPoints();
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_1,skill1Id);
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_1,skill1Points);
        i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_TYPE_INDEX,talismanTypeIndex);
        if (skillTreeViews[1].hasSkillDefined()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          long skill2Id=skillTreeViews[1].getSkillTree().getId();
          int skill2Points=skillTreeViews[1].getSkillPoints();
          i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_2,skill2Id);
          i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_2,skill2Points);
        }
        getTargetFragment().onActivityResult(ArmorSetBuilderActivity.REQUEST_CODE_CREATE_TALISMAN,Activity.RESULT_OK,i);
      }
    }
  }
).create();
  return d;
}"
96182,"@Override public void onClick(DialogInterface dialog,int which){
  if (skillTreeViews[0].hasSkillDefined()) {
    Intent i=new Intent();
    long skill1Id=skillTreeViews[0].getSkillTree().getId();
    int skill1Points=skillTreeViews[0].getSkillPoints();
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_1,skill1Id);
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_1,skill1Points);
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_TYPE_INDEX,talismanTypeIndex);
    if (skillTreeViews[1].hasSkillDefined()) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      long skill2Id=skillTreeViews[0].getSkillTree().getId();
      int skill2Points=skillTreeViews[1].getSkillPoints();
      i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_2,skill2Id);
      i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_2,skill2Points);
    }
    getTargetFragment().onActivityResult(ArmorSetBuilderActivity.REQUEST_CODE_CREATE_TALISMAN,Activity.RESULT_OK,i);
  }
}","@Override public void onClick(DialogInterface dialog,int which){
  if (skillTreeViews[0].hasSkillDefined()) {
    Intent i=new Intent();
    long skill1Id=skillTreeViews[0].getSkillTree().getId();
    int skill1Points=skillTreeViews[0].getSkillPoints();
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_1,skill1Id);
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_1,skill1Points);
    i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_TYPE_INDEX,talismanTypeIndex);
    if (skillTreeViews[1].hasSkillDefined()) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      long skill2Id=skillTreeViews[1].getSkillTree().getId();
      int skill2Points=skillTreeViews[1].getSkillPoints();
      i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_TREE_2,skill2Id);
      i.putExtra(ArmorSetBuilderActivity.EXTRA_TALISMAN_SKILL_POINTS_2,skill2Points);
    }
    getTargetFragment().onActivityResult(ArmorSetBuilderActivity.REQUEST_CODE_CREATE_TALISMAN,Activity.RESULT_OK,i);
  }
}"
96183,"public ArmorSetBuilderSkillsAdapter(Context context,List<ArmorSetBuilderSession.SkillTreePointsSet> trees,ArmorSetBuilderSession session){
  super(context,R.layout.fragment_armor_set_builder_skills_item,trees);
  this.session=session;
}","public ArmorSetBuilderSkillsAdapter(Context context,List<ArmorSetBuilderSession.SkillTreePointsSet> trees,ArmorSetBuilderSession session){
  super(context,R.layout.fragment_armor_set_builder_skills_item,trees);
}"
96184,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater.from(getContext()));
  View itemView=inflater.inflate(R.layout.fragment_armor_set_builder_skills_item,parent,false);
  TextView treeName=(TextView)itemView.findViewById(R.id.skill_tree_name);
  TextView headPoints=(TextView)itemView.findViewById(R.id.helmet);
  TextView bodyPoints=(TextView)itemView.findViewById(R.id.body);
  TextView armsPoints=(TextView)itemView.findViewById(R.id.arms);
  TextView waistPoints=(TextView)itemView.findViewById(R.id.waist);
  TextView legsPoints=(TextView)itemView.findViewById(R.id.legs);
  TextView totalPoints=(TextView)itemView.findViewById(R.id.total);
  treeName.setText(getItem(position).getSkillTree().getName());
  if (session.isEquipmentSelected(ArmorSetBuilderSession.HEAD)) {
    headPoints.setText(String.valueOf(getItem(position).getHeadPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.BODY)) {
    bodyPoints.setText(String.valueOf(getItem(position).getBodyPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.ARMS)) {
    armsPoints.setText(String.valueOf(getItem(position).getArmsPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.WAIST)) {
    waistPoints.setText(String.valueOf(getItem(position).getWaistPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.LEGS)) {
    legsPoints.setText(String.valueOf(getItem(position).getLegsPoints()));
  }
  totalPoints.setText(String.valueOf(getItem(position).getTotal()));
  itemView.setOnClickListener(new SkillClickListener(getContext(),getItem(position).getSkillTree().getId()));
  return itemView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater.from(getContext()));
  View itemView=inflater.inflate(R.layout.fragment_armor_set_builder_skills_item,parent,false);
  TextView treeName=(TextView)itemView.findViewById(R.id.skill_tree_name);
  TextView headPoints=(TextView)itemView.findViewById(R.id.helmet);
  TextView bodyPoints=(TextView)itemView.findViewById(R.id.body);
  TextView armsPoints=(TextView)itemView.findViewById(R.id.arms);
  TextView waistPoints=(TextView)itemView.findViewById(R.id.waist);
  TextView legsPoints=(TextView)itemView.findViewById(R.id.legs);
  TextView totalPoints=(TextView)itemView.findViewById(R.id.total);
  treeName.setText(getItem(position).getSkillTree().getName());
  if (session.isEquipmentSelected(ArmorSetBuilderSession.HEAD)) {
    headPoints.setText(String.valueOf(getItem(position).getHeadPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.BODY)) {
    bodyPoints.setText(String.valueOf(getItem(position).getBodyPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.ARMS)) {
    armsPoints.setText(String.valueOf(getItem(position).getArmsPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.WAIST)) {
    waistPoints.setText(String.valueOf(getItem(position).getWaistPoints()));
  }
  if (session.isEquipmentSelected(ArmorSetBuilderSession.LEGS)) {
    legsPoints.setText(String.valueOf(getItem(position).getLegsPoints()));
  }
  totalPoints.setText(String.valueOf(getItem(position).getTotal()));
  itemView.setOnClickListener(new SkillClickListener(ArmorSetBuilderSkillsListFragment.this.getActivity(),getItem(position).getSkillTree().getId()));
  return itemView;
}"
96185,"public void removeArmor(int pieceIndex){
  armors[pieceIndex]=noArmor;
  removeAllDecorations(pieceIndex);
}","public void removeArmor(int pieceIndex){
  armors[pieceIndex]=noArmor;
  removeAllDecorations(pieceIndex);
  notifyArmorSetChangedListeners();
}"
96186,"public void setArmor(int pieceIndex,Armor armor){
  armors[pieceIndex]=armor;
}","public void setArmor(int pieceIndex,Armor armor){
  armors[pieceIndex]=armor;
  notifyArmorSetChangedListeners();
}"
96187,"public void removeAllDecorations(int pieceIndex){
  for (int i=0; i < decorations[pieceIndex].length; i++) {
    decorations[pieceIndex][i]=noDecoration;
  }
}","public void removeAllDecorations(int pieceIndex){
  for (int i=0; i < decorations[pieceIndex].length; i++) {
    decorations[pieceIndex][i]=noDecoration;
  }
  notifyArmorSetChangedListeners();
}"
96188,"/** 
 * Default constructor.
 */
public ArmorSetBuilderSession(){
  armors=new Armor[5];
  for (int i=0; i < armors.length; i++) {
    armors[i]=noArmor;
  }
  decorations=new Decoration[5][3];
  for (int i=0; i < decorations.length; i++) {
    for (int j=0; j < decorations[i].length; j++) {
      decorations[i][j]=noDecoration;
    }
  }
  skillTreePointsSets=new ArrayList<>();
}","/** 
 * Default constructor.
 */
public ArmorSetBuilderSession(){
  armors=new Armor[5];
  for (int i=0; i < armors.length; i++) {
    armors[i]=noArmor;
  }
  decorations=new Decoration[5][3];
  for (int i=0; i < decorations.length; i++) {
    for (int j=0; j < decorations[i].length; j++) {
      decorations[i][j]=noDecoration;
    }
  }
  skillTreePointsSets=new ArrayList<>();
  changedListeners=new ArrayList<>();
}"
96189,"/** 
 * Attempts to add a decoration to the specified armor piece.
 * @param pieceIndex The index of a piece in the set to fetch, according to {@link com.daviancorp.android.data.classes.ArmorSetBuilderSession}.
 * @param decoration The decoration to add.
 * @return True if the piece was successfuly added, otherwise false.
 */
public boolean addDecoration(int pieceIndex,Decoration decoration){
  if (getAvailableSlots(pieceIndex) >= decoration.getNumSlots()) {
    int i=0;
    while (decorations[pieceIndex][i] != noDecoration) {
      i++;
    }
    decorations[pieceIndex][i]=decoration;
    if (decoration.getNumSlots() == 2) {
      decorations[pieceIndex][i + 1]=dummy;
    }
    if (decoration.getNumSlots() == 3) {
      decorations[pieceIndex][i + 1]=dummy;
      decorations[pieceIndex][i + 2]=dummy;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Attempts to add a decoration to the specified armor piece.
 * @param pieceIndex The index of a piece in the set to fetch, according to {@link com.daviancorp.android.data.classes.ArmorSetBuilderSession}.
 * @param decoration The decoration to add.
 * @return True if the piece was successfuly added, otherwise false.
 */
public boolean addDecoration(int pieceIndex,Decoration decoration){
  if (getAvailableSlots(pieceIndex) >= decoration.getNumSlots()) {
    int i=0;
    while (decorations[pieceIndex][i] != noDecoration) {
      i++;
    }
    decorations[pieceIndex][i]=decoration;
    if (decoration.getNumSlots() == 2) {
      decorations[pieceIndex][i + 1]=dummy;
    }
    if (decoration.getNumSlots() == 3) {
      decorations[pieceIndex][i + 1]=dummy;
      decorations[pieceIndex][i + 2]=dummy;
    }
    notifyArmorSetChangedListeners();
    return true;
  }
 else {
    return false;
  }
}"
96190,"public void removeDecoration(int pieceIndex,int decorationIndex){
  if (decorations[pieceIndex][decorationIndex] != dummy) {
    decorations[pieceIndex][decorationIndex]=noDecoration;
    for (int j=decorationIndex + 1; j < decorations[pieceIndex].length; j++) {
      if (decorations[pieceIndex][j] == dummy) {
        decorations[pieceIndex][j]=noDecoration;
      }
 else {
        break;
      }
    }
  }
  int i=0;
  Decoration[] newDecorations=new Decoration[3];
  for (  Decoration d : decorations[pieceIndex]) {
    if (d != noDecoration) {
      newDecorations[i++]=d;
    }
  }
  while (i < newDecorations.length) {
    newDecorations[i++]=noDecoration;
  }
  decorations[pieceIndex]=newDecorations;
}","public void removeDecoration(int pieceIndex,int decorationIndex){
  if (decorations[pieceIndex][decorationIndex] != dummy) {
    decorations[pieceIndex][decorationIndex]=noDecoration;
    for (int j=decorationIndex + 1; j < decorations[pieceIndex].length; j++) {
      if (decorations[pieceIndex][j] == dummy) {
        decorations[pieceIndex][j]=noDecoration;
      }
 else {
        break;
      }
    }
  }
  int i=0;
  Decoration[] newDecorations=new Decoration[3];
  for (  Decoration d : decorations[pieceIndex]) {
    if (d != noDecoration) {
      newDecorations[i++]=d;
    }
  }
  while (i < newDecorations.length) {
    newDecorations[i++]=noDecoration;
  }
  decorations[pieceIndex]=newDecorations;
  notifyArmorSetChangedListeners();
}"
96191,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  session=new ArmorSetBuilderSession();
  viewPager=(ViewPager)findViewById(R.id.pager);
  adapter=new ArmorSetBuilderPagerAdapter(getSupportFragmentManager(),session);
  viewPager.setAdapter(adapter);
  mSlidingTabLayout.setViewPager(viewPager);
  armorSetChangedListeners=new ArrayList<>();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  session=new ArmorSetBuilderSession();
  session.addOnArmorSetChangedListener(this);
  viewPager=(ViewPager)findViewById(R.id.pager);
  adapter=new ArmorSetBuilderPagerAdapter(getSupportFragmentManager(),session);
  viewPager.setAdapter(adapter);
  mSlidingTabLayout.setViewPager(viewPager);
  onArmorSetActivityUpdateListeners=new ArrayList<>();
}"
96192,"public void addArmorSetChangedListener(ArmorSetChangedListener a){
  armorSetChangedListeners.add(a);
}","public void addArmorSetChangedListener(OnArmorSetActivityUpdateListener a){
  onArmorSetActivityUpdateListeners.add(a);
}"
96193,"public void fragmentResultReceived(int requestCode,int resultCode,Intent data){
  onActivityResult(requestCode,resultCode,data);
}","/** 
 * To be called when a fragment contained within this activity has   {@code onActivityResult} manually called on it. 
 */
public void fragmentResultReceived(int requestCode,int resultCode,Intent data){
  onActivityResult(requestCode,resultCode,data);
}"
96194,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    if (requestCode == BUILDER_REQUEST_CODE) {
      long armorId=data.getLongExtra(ArmorDetailActivity.EXTRA_ARMOR_ID,-1);
      if (armorId != -1) {
        String armorType=DataManager.get(getApplicationContext()).getArmor(armorId).getSlot();
switch (armorType) {
case ""String_Node_Str"":
          Log.d(""String_Node_Str"",""String_Node_Str"");
        session.setArmor(ArmorSetBuilderSession.HEAD,DataManager.get(getApplicationContext()).getArmor(armorId));
      break;
case ""String_Node_Str"":
    Log.d(""String_Node_Str"",""String_Node_Str"");
  session.setArmor(ArmorSetBuilderSession.BODY,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.ARMS,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.WAIST,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.LEGS,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
}
}
long decorationId=data.getLongExtra(DecorationDetailActivity.EXTRA_DECORATION_ID,-1);
int pieceIndex=data.getIntExtra(EXTRA_PIECE_INDEX,-1);
Log.d(""String_Node_Str"",""String_Node_Str"" + decorationId);
Log.d(""String_Node_Str"",""String_Node_Str"" + pieceIndex);
if (decorationId != -1 && pieceIndex != -1) {
Log.d(""String_Node_Str"",""String_Node_Str"" + DataManager.get(this).getDecoration(decorationId).getName());
Decoration decoration=DataManager.get(this).getDecoration(decorationId);
if (!session.addDecoration(pieceIndex,decoration)) {
Log.i(""String_Node_Str"",""String_Node_Str"");
}
}
}
 else if (requestCode == REMOVE_DECORATION_REQUEST_CODE) {
int pieceIndex=data.getIntExtra(EXTRA_PIECE_INDEX,-1);
int decorationIndex=data.getIntExtra(EXTRA_DECORATION_INDEX,-1);
Log.d(""String_Node_Str"",""String_Node_Str"" + pieceIndex + ""String_Node_Str""+ decorationIndex);
session.removeDecoration(pieceIndex,decorationIndex);
}
for (ArmorSetChangedListener a : armorSetChangedListeners) {
a.updateContents(session);
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    if (requestCode == BUILDER_REQUEST_CODE) {
      long armorId=data.getLongExtra(ArmorDetailActivity.EXTRA_ARMOR_ID,-1);
      if (armorId != -1) {
        String armorType=DataManager.get(getApplicationContext()).getArmor(armorId).getSlot();
switch (armorType) {
case ""String_Node_Str"":
          Log.d(""String_Node_Str"",""String_Node_Str"");
        session.setArmor(ArmorSetBuilderSession.HEAD,DataManager.get(getApplicationContext()).getArmor(armorId));
      break;
case ""String_Node_Str"":
    Log.d(""String_Node_Str"",""String_Node_Str"");
  session.setArmor(ArmorSetBuilderSession.BODY,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.ARMS,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.WAIST,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
case ""String_Node_Str"":
Log.d(""String_Node_Str"",""String_Node_Str"");
session.setArmor(ArmorSetBuilderSession.LEGS,DataManager.get(getApplicationContext()).getArmor(armorId));
break;
}
}
long decorationId=data.getLongExtra(DecorationDetailActivity.EXTRA_DECORATION_ID,-1);
int pieceIndex=data.getIntExtra(EXTRA_PIECE_INDEX,-1);
if (decorationId != -1 && pieceIndex != -1) {
Decoration decoration=DataManager.get(this).getDecoration(decorationId);
if (!session.addDecoration(pieceIndex,decoration)) {
}
}
}
 else if (requestCode == REMOVE_DECORATION_REQUEST_CODE) {
int pieceIndex=data.getIntExtra(EXTRA_PIECE_INDEX,-1);
int decorationIndex=data.getIntExtra(EXTRA_DECORATION_INDEX,-1);
Log.d(""String_Node_Str"",""String_Node_Str"" + pieceIndex + ""String_Node_Str""+ decorationIndex);
session.removeDecoration(pieceIndex,decorationIndex);
}
}
}"
96195,"public void removeDecoration(int pieceIndex,int decorationIndex){
  if (decorations[pieceIndex][decorationIndex] != dummy) {
    decorations[pieceIndex][decorationIndex]=noDecoration;
    for (int j=decorationIndex + 1; j < decorations[pieceIndex].length; j++) {
      if (decorations[pieceIndex][j] == dummy) {
        decorations[pieceIndex][j]=noDecoration;
      }
 else {
        break;
      }
    }
  }
  int i=0;
  Decoration[] newDecorations=new Decoration[3];
  for (  Decoration d : decorations[pieceIndex]) {
    newDecorations[i++]=d;
  }
  decorations[pieceIndex]=newDecorations;
}","public void removeDecoration(int pieceIndex,int decorationIndex){
  if (decorations[pieceIndex][decorationIndex] != dummy) {
    decorations[pieceIndex][decorationIndex]=noDecoration;
    for (int j=decorationIndex + 1; j < decorations[pieceIndex].length; j++) {
      if (decorations[pieceIndex][j] == dummy) {
        decorations[pieceIndex][j]=noDecoration;
      }
 else {
        break;
      }
    }
  }
  int i=0;
  Decoration[] newDecorations=new Decoration[3];
  for (  Decoration d : decorations[pieceIndex]) {
    if (d != noDecoration) {
      newDecorations[i++]=d;
    }
  }
  while (i < newDecorations.length) {
    newDecorations[i++]=noDecoration;
  }
  decorations[pieceIndex]=newDecorations;
}"
96196,"private PopupMenu createPopupMenu(){
  Context context=getContext();
  context.setTheme(R.style.PopupMenuStyle);
  PopupMenu popup=new PopupMenu(context,popupMenuButton);
  if (!session.isPieceSelected(pieceIndex)) {
    popup.getMenu().add(Menu.NONE,MENU_ADD_PIECE,Menu.NONE,R.string.armor_set_builder_add_piece);
  }
 else {
    popup.getMenu().add(Menu.NONE,MENU_REMOVE_PIECE,Menu.NONE,R.string.armor_set_builder_remove_piece);
    popup.getMenu().add(Menu.NONE,MENU_PIECE_INFO,Menu.NONE,R.string.armor_set_builder_piece_info);
  }
  if (session.getAvailableSlots(pieceIndex) > 0) {
    popup.getMenu().add(Menu.NONE,MENU_ADD_DECORATION,Menu.NONE,R.string.armor_set_builder_add_decoration);
  }
  if (session.hasDecorations(pieceIndex)) {
    popup.getMenu().add(Menu.NONE,MENU_REMOVE_DECORATION,Menu.NONE,R.string.armor_set_builder_remove_decoration);
  }
  popup.setOnMenuItemClickListener(new PiecePopupMenuClickListener());
  return popup;
}","private PopupMenu createPopupMenu(){
  PopupMenu popup=new PopupMenu(getContext(),popupMenuButton);
  if (!session.isPieceSelected(pieceIndex)) {
    popup.getMenu().add(Menu.NONE,MENU_ADD_PIECE,Menu.NONE,R.string.armor_set_builder_add_piece);
  }
 else {
    popup.getMenu().add(Menu.NONE,MENU_REMOVE_PIECE,Menu.NONE,R.string.armor_set_builder_remove_piece);
    popup.getMenu().add(Menu.NONE,MENU_PIECE_INFO,Menu.NONE,R.string.armor_set_builder_piece_info);
  }
  if (session.getAvailableSlots(pieceIndex) > 0) {
    popup.getMenu().add(Menu.NONE,MENU_ADD_DECORATION,Menu.NONE,R.string.armor_set_builder_add_decoration);
  }
  if (session.hasDecorations(pieceIndex)) {
    popup.getMenu().add(Menu.NONE,MENU_REMOVE_DECORATION,Menu.NONE,R.string.armor_set_builder_remove_decoration);
  }
  popup.setOnMenuItemClickListener(new PiecePopupMenuClickListener());
  return popup;
}"
96197,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  super.onBindViewHolder(viewHolder,position);
  WeaponBladeViewHolder holder=(WeaponBladeViewHolder)viewHolder;
  Weapon weapon=((WeaponListEntry)getItemAt(position)).weapon;
  String type=weapon.getWtype();
  if (type.equals(""String_Node_Str"")) {
    String special=weapon.getHornNotes();
    holder.note1v.setTag(weapon.getId());
    holder.note2v.setTag(weapon.getId());
    holder.note3v.setTag(weapon.getId());
    holder.note1v.setVisibility(View.VISIBLE);
    holder.note2v.setVisibility(View.VISIBLE);
    holder.note3v.setVisibility(View.VISIBLE);
    holder.specialView.setVisibility(View.VISIBLE);
    holder.specialView.setText(""String_Node_Str"");
    final Bitmap bitmap=getBitmapFromMemCache(getNoteDrawable(special.charAt(0)));
    if (bitmap != null) {
      holder.note1v.setImageBitmap(bitmap);
    }
 else {
      new LoadImage(holder.note1v,getNoteDrawable(special.charAt(0))).execute();
    }
    final Bitmap bitmap2=getBitmapFromMemCache(getNoteDrawable(special.charAt(1)));
    if (bitmap2 != null) {
      holder.note2v.setImageBitmap(bitmap2);
    }
 else {
      new LoadImage(holder.note1v,getNoteDrawable(special.charAt(1))).execute();
    }
    final Bitmap bitmap3=getBitmapFromMemCache(getNoteDrawable(special.charAt(2)));
    if (bitmap3 != null) {
      holder.note3v.setImageBitmap(bitmap3);
    }
 else {
      new LoadImage(holder.note3v,getNoteDrawable(special.charAt(2))).execute();
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    holder.specialView.setVisibility(View.VISIBLE);
    String special=weapon.getShellingType();
    holder.specialView.setText(special);
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    holder.specialView.setVisibility(View.VISIBLE);
    String special=weapon.getPhial();
    holder.specialView.setText(special);
  }
  holder.sharpnessDrawable.init(weapon.getSharpness1(),weapon.getSharpness2());
  holder.sharpnessDrawable.invalidate();
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  super.onBindViewHolder(viewHolder,position);
  WeaponBladeViewHolder holder=(WeaponBladeViewHolder)viewHolder;
  Weapon weapon=((WeaponListEntry)getItemAt(position)).weapon;
  String type=weapon.getWtype();
  if (type.equals(""String_Node_Str"")) {
    String special=weapon.getHornNotes();
    holder.note1v.setTag(weapon.getId());
    holder.note2v.setTag(weapon.getId());
    holder.note3v.setTag(weapon.getId());
    holder.note1v.setVisibility(View.VISIBLE);
    holder.note2v.setVisibility(View.VISIBLE);
    holder.note3v.setVisibility(View.VISIBLE);
    holder.specialView.setVisibility(View.VISIBLE);
    holder.specialView.setText(""String_Node_Str"");
    final Bitmap bitmap=getBitmapFromMemCache(getNoteDrawable(special.charAt(0)));
    if (bitmap != null) {
      holder.note1v.setImageBitmap(bitmap);
    }
 else {
      new LoadImage(holder.note1v,getNoteDrawable(special.charAt(0))).execute();
    }
    final Bitmap bitmap2=getBitmapFromMemCache(getNoteDrawable(special.charAt(1)));
    if (bitmap2 != null) {
      holder.note2v.setImageBitmap(bitmap2);
    }
 else {
      new LoadImage(holder.note2v,getNoteDrawable(special.charAt(1))).execute();
    }
    final Bitmap bitmap3=getBitmapFromMemCache(getNoteDrawable(special.charAt(2)));
    if (bitmap3 != null) {
      holder.note3v.setImageBitmap(bitmap3);
    }
 else {
      new LoadImage(holder.note3v,getNoteDrawable(special.charAt(2))).execute();
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    holder.specialView.setVisibility(View.VISIBLE);
    String special=weapon.getShellingType();
    holder.specialView.setText(special);
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    holder.specialView.setVisibility(View.VISIBLE);
    String special=weapon.getPhial();
    holder.specialView.setText(special);
  }
  holder.sharpnessDrawable.init(weapon.getSharpness1(),weapon.getSharpness2());
  holder.sharpnessDrawable.invalidate();
}"
96198,"public void bindView(View view,Context context,Cursor cursor){
  String a=""String_Node_Str"";
  super.bindView(view,context,cursor);
  ViewHolder holder=(ViewHolder)view.getTag();
  Weapon weapon=mWeaponCursor.getWeapon();
  String arc=weapon.getRecoil();
  String charge=weapon.getCharges();
  String chargeText=""String_Node_Str"";
  String[] charges=charge.split(""String_Node_Str"");
  for (  String c : charges) {
    chargeText=chargeText + getChargeData(c);
  }
  holder.arctv.setText(arc);
  holder.chargetv.setText(chargeText);
  powerv.setImageDrawable(null);
  crangev.setImageDrawable(null);
  poisonv.setImageDrawable(null);
  parav.setImageDrawable(null);
  sleepv.setImageDrawable(null);
  exhaustv.setImageDrawable(null);
  slimev.setImageDrawable(null);
  paintv.setImageDrawable(null);
  powerv.setVisibility(View.GONE);
  crangev.setVisibility(View.GONE);
  poisonv.setVisibility(View.GONE);
  parav.setVisibility(View.GONE);
  sleepv.setVisibility(View.GONE);
  exhaustv.setVisibility(View.GONE);
  slimev.setVisibility(View.GONE);
  paintv.setVisibility(View.GONE);
  String[] coatings=weapon.getCoatings().split(""String_Node_Str"");
  if (!coatings[0].equals(""String_Node_Str"")) {
    powerv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    powerv.setVisibility(View.VISIBLE);
  }
  if (!coatings[1].equals(""String_Node_Str"")) {
    poisonv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    poisonv.setVisibility(View.VISIBLE);
  }
  if (!coatings[2].equals(""String_Node_Str"")) {
    parav.setImageDrawable(getDrawable(context,""String_Node_Str""));
    parav.setVisibility(View.VISIBLE);
  }
  if (!coatings[3].equals(""String_Node_Str"")) {
    sleepv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    sleepv.setVisibility(View.VISIBLE);
  }
  if (!coatings[4].equals(""String_Node_Str"")) {
    crangev.setImageDrawable(getDrawable(context,""String_Node_Str""));
    crangev.setVisibility(View.VISIBLE);
  }
  if (!coatings[5].equals(""String_Node_Str"")) {
    paintv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    paintv.setVisibility(View.VISIBLE);
  }
  if (!coatings[6].equals(""String_Node_Str"")) {
    exhaustv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    exhaustv.setVisibility(View.VISIBLE);
  }
  if (!coatings[7].equals(""String_Node_Str"")) {
    slimev.setImageDrawable(getDrawable(context,""String_Node_Str""));
    slimev.setVisibility(View.VISIBLE);
  }
}","public void bindView(View view,Context context,Cursor cursor){
  String a=""String_Node_Str"";
  super.bindView(view,context,cursor);
  ViewHolder holder=(ViewHolder)view.getTag();
  Weapon weapon=mWeaponCursor.getWeapon();
  String arc=weapon.getRecoil();
  String charge=weapon.getCharges();
  String chargeText=""String_Node_Str"";
  String[] charges=charge.split(""String_Node_Str"");
  for (  String c : charges) {
    chargeText=chargeText + getChargeData(c);
  }
  holder.arctv.setText(arc);
  holder.chargetv.setText(chargeText);
  holder.powerv.setImageDrawable(null);
  holder.crangev.setImageDrawable(null);
  holder.poisonv.setImageDrawable(null);
  holder.parav.setImageDrawable(null);
  holder.sleepv.setImageDrawable(null);
  holder.exhaustv.setImageDrawable(null);
  holder.slimev.setImageDrawable(null);
  holder.paintv.setImageDrawable(null);
  holder.powerv.setVisibility(View.GONE);
  holder.crangev.setVisibility(View.GONE);
  holder.poisonv.setVisibility(View.GONE);
  holder.parav.setVisibility(View.GONE);
  holder.sleepv.setVisibility(View.GONE);
  holder.exhaustv.setVisibility(View.GONE);
  holder.slimev.setVisibility(View.GONE);
  holder.paintv.setVisibility(View.GONE);
  String[] coatings=weapon.getCoatings().split(""String_Node_Str"");
  if (!coatings[0].equals(""String_Node_Str"")) {
    holder.powerv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.powerv.setVisibility(View.VISIBLE);
  }
  if (!coatings[1].equals(""String_Node_Str"")) {
    holder.poisonv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.poisonv.setVisibility(View.VISIBLE);
  }
  if (!coatings[2].equals(""String_Node_Str"")) {
    holder.parav.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.parav.setVisibility(View.VISIBLE);
  }
  if (!coatings[3].equals(""String_Node_Str"")) {
    holder.sleepv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.sleepv.setVisibility(View.VISIBLE);
  }
  if (!coatings[4].equals(""String_Node_Str"")) {
    holder.crangev.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.crangev.setVisibility(View.VISIBLE);
  }
  if (!coatings[5].equals(""String_Node_Str"")) {
    holder.paintv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.paintv.setVisibility(View.VISIBLE);
  }
  if (!coatings[6].equals(""String_Node_Str"")) {
    holder.exhaustv.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.exhaustv.setVisibility(View.VISIBLE);
  }
  if (!coatings[7].equals(""String_Node_Str"")) {
    holder.slimev.setImageDrawable(getDrawable(context,""String_Node_Str""));
    holder.slimev.setVisibility(View.VISIBLE);
  }
}"
96199,"@Override public void bindView(View view,Context context,Cursor cursor){
  super.bindView(view,context,cursor);
  Weapon weapon=mWeaponCursor.getWeapon();
  TextView specialtv=(TextView)view.findViewById(R.id.special_text);
  DrawSharpness sharpnessDrawable=(DrawSharpness)view.findViewById(R.id.sharpness);
  specialtv.setText(""String_Node_Str"");
  String type=weapon.getWtype();
  if (type.equals(""String_Node_Str"")) {
    String special=weapon.getHornNotes();
    ImageView note1v=(ImageView)view.findViewById(R.id.note_image_1);
    ImageView note2v=(ImageView)view.findViewById(R.id.note_image_2);
    ImageView note3v=(ImageView)view.findViewById(R.id.note_image_3);
    note1v.setImageDrawable(getNoteDrawable(context,special.charAt(0)));
    note2v.setImageDrawable(getNoteDrawable(context,special.charAt(1)));
    note3v.setImageDrawable(getNoteDrawable(context,special.charAt(2)));
  }
 else   if (type.equals(""String_Node_Str"")) {
    String special=weapon.getShellingType();
    specialtv.setText(special);
    specialtv.setGravity(Gravity.CENTER);
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    String special=weapon.getPhial();
    specialtv.setText(special);
    specialtv.setGravity(Gravity.CENTER);
  }
  String sharpString=weapon.getSharpness();
  sharpnessDrawable.init(sharpString);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  super.bindView(view,context,cursor);
  Weapon weapon=mWeaponCursor.getWeapon();
  TextView specialtv=(TextView)view.findViewById(R.id.special_text);
  DrawSharpness sharpnessDrawable=(DrawSharpness)view.findViewById(R.id.sharpness);
  sharpnessDrawable.invalidate();
  specialtv.setText(""String_Node_Str"");
  String type=weapon.getWtype();
  if (type.equals(""String_Node_Str"")) {
    String special=weapon.getHornNotes();
    ImageView note1v=(ImageView)view.findViewById(R.id.note_image_1);
    ImageView note2v=(ImageView)view.findViewById(R.id.note_image_2);
    ImageView note3v=(ImageView)view.findViewById(R.id.note_image_3);
    note1v.setImageDrawable(getNoteDrawable(context,special.charAt(0)));
    note2v.setImageDrawable(getNoteDrawable(context,special.charAt(1)));
    note3v.setImageDrawable(getNoteDrawable(context,special.charAt(2)));
  }
 else   if (type.equals(""String_Node_Str"")) {
    String special=weapon.getShellingType();
    specialtv.setText(special);
    specialtv.setGravity(Gravity.CENTER);
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    String special=weapon.getPhial();
    specialtv.setText(special);
    specialtv.setGravity(Gravity.CENTER);
  }
  String sharpString=weapon.getSharpness();
  sharpnessDrawable.init(sharpString);
}"
96200,"@Override public Fragment getItem(int index){
switch (index) {
case 0:
    return MonsterGridFragment.newInstance(null);
case 1:
  return MonsterGridFragment.newInstance(""String_Node_Str"");
case 2:
return MonsterGridFragment.newInstance(""String_Node_Str"");
default :
return null;
}
}","@Override public Fragment getItem(int index){
switch (index) {
case 0:
    return MonsterGridFragment.newInstance(""String_Node_Str"");
case 1:
  return MonsterGridFragment.newInstance(""String_Node_Str"");
case 2:
return MonsterGridFragment.newInstance(null);
default :
return null;
}
}"
96201,"@Override public void bindView(View view,Context context,Cursor cursor){
  Weapon weapon=mWeaponCursor.getWeapon();
  TextView nametv=(TextView)view.findViewById(R.id.name);
  TextView attacktv=(TextView)view.findViewById(R.id.attack);
  TextView elementtv=(TextView)view.findViewById(R.id.element);
  TextView awakentv=(TextView)view.findViewById(R.id.awaken);
  TextView slottv=(TextView)view.findViewById(R.id.slot);
  TextView affinitytv=(TextView)view.findViewById(R.id.affinity);
  TextView defensetv=(TextView)view.findViewById(R.id.defense);
  TextView specialtv=(TextView)view.findViewById(R.id.special);
  elementtv.setCompoundDrawables(null,null,null,null);
  specialtv.setCompoundDrawables(null,null,null,null);
  specialtv.setText(null);
  String name=""String_Node_Str"";
  int wFinal=weapon.getWFinal();
  if (wFinal != 0) {
    name=""String_Node_Str"";
  }
  name=name + weapon.getName();
  String attack=""String_Node_Str"" + weapon.getAttack();
  String element=weapon.getElementalAttack();
  String awakenedElement=weapon.getAwakenedElementalAttack();
  String dualElement=null;
  String elementText=""String_Node_Str"";
  String awakenText=""String_Node_Str"";
  Drawable dEle=null;
  Drawable dDualEle=null;
  if (awakenedElement != null) {
    element=awakenedElement;
    awakenText=""String_Node_Str"";
  }
  if (element != null) {
    String[] elementData=getElementData(element);
    elementText=elementData[0];
    dEle=getDrawable(context,elementData[1]);
    if (element.contains(""String_Node_Str"")) {
      String[] twoElements=elementText.split(""String_Node_Str"");
      elementText=twoElements[0];
      dualElement=twoElements[1];
      String[] dualElementData=getElementData(dualElement);
      specialtv.setText(dualElementData[0]);
      dDualEle=getDrawable(context,dualElementData[1]);
      dDualEle=scaleDrawable(dDualEle,35,35);
      specialtv.setCompoundDrawables(dDualEle,null,null,null);
      android.view.Display display=((android.view.WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
      specialtv.setPadding((int)(display.getWidth() * 0.16),0,0,0);
    }
    dEle=scaleDrawable(dEle,35,35);
    elementtv.setCompoundDrawables(dEle,null,null,null);
    if (awakenedElement != null) {
      elementText=elementText + ""String_Node_Str"";
    }
  }
  String slot=""String_Node_Str"";
switch (weapon.getNumSlots()) {
case 0:
    slot=""String_Node_Str"";
  break;
case 1:
slot=""String_Node_Str"";
break;
case 2:
slot=""String_Node_Str"";
break;
case 3:
slot=""String_Node_Str"";
break;
default :
slot=""String_Node_Str"";
break;
}
String affinity=""String_Node_Str"";
if (weapon.getAffinity() != 0) {
affinity=""String_Node_Str"" + weapon.getAffinity() + ""String_Node_Str"";
}
String defense=""String_Node_Str"";
if (weapon.getDefense() != 0) {
defense=""String_Node_Str"" + weapon.getDefense();
}
nametv.setText(name);
nametv.setTypeface(null,Typeface.BOLD);
attacktv.setText(attack);
elementtv.setText(elementText);
awakentv.setText(awakenText);
slottv.setText(slot);
affinitytv.setText(affinity);
defensetv.setText(defense);
String type=weapon.getWtype();
if (type.equals(""String_Node_Str"")) {
String special=weapon.getHornNotes();
specialtv.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.3f));
ImageView note1v=(ImageView)view.findViewById(R.id.note1);
ImageView note2v=(ImageView)view.findViewById(R.id.note2);
ImageView note3v=(ImageView)view.findViewById(R.id.note3);
TextView fillerv=(TextView)view.findViewById(R.id.filler);
note1v.setImageDrawable(getNoteDrawable(context,special.charAt(0)));
note2v.setImageDrawable(getNoteDrawable(context,special.charAt(1)));
note3v.setImageDrawable(getNoteDrawable(context,special.charAt(2)));
fillerv.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.4f));
note1v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
note2v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
note3v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
}
if (type.equals(""String_Node_Str"")) {
String special=weapon.getShellingType();
specialtv.setText(special);
specialtv.setGravity(Gravity.CENTER);
}
if (type.equals(""String_Node_Str"")) {
String special=weapon.getPhial();
specialtv.setText(special);
specialtv.setGravity(Gravity.CENTER);
}
if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
DrawSharpness sharpnesstv;
sharpnesstv=(DrawSharpness)view.findViewById(R.id.sharpness);
String sharpString=weapon.getSharpness();
sharpnesstv.init(sharpString);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  Weapon weapon=mWeaponCursor.getWeapon();
  TextView nametv=(TextView)view.findViewById(R.id.name);
  TextView attacktv=(TextView)view.findViewById(R.id.attack);
  TextView elementtv=(TextView)view.findViewById(R.id.element);
  TextView awakentv=(TextView)view.findViewById(R.id.awaken);
  TextView slottv=(TextView)view.findViewById(R.id.slot);
  TextView affinitytv=(TextView)view.findViewById(R.id.affinity);
  TextView defensetv=(TextView)view.findViewById(R.id.defense);
  TextView specialtv=(TextView)view.findViewById(R.id.special);
  DrawSharpness sharpnesstv=(DrawSharpness)view.findViewById(R.id.sharpness);
  sharpnesstv.invalidate();
  elementtv.setCompoundDrawables(null,null,null,null);
  specialtv.setCompoundDrawables(null,null,null,null);
  specialtv.setText(null);
  String name=""String_Node_Str"";
  int wFinal=weapon.getWFinal();
  if (wFinal != 0) {
    name=""String_Node_Str"";
  }
  name=name + weapon.getName();
  String attack=""String_Node_Str"" + weapon.getAttack();
  String element=weapon.getElementalAttack();
  String awakenedElement=weapon.getAwakenedElementalAttack();
  String dualElement=null;
  String elementText=""String_Node_Str"";
  String awakenText=""String_Node_Str"";
  Drawable dEle=null;
  Drawable dDualEle=null;
  if (awakenedElement != null) {
    element=awakenedElement;
    awakenText=""String_Node_Str"";
  }
  if (element != null) {
    String[] elementData=getElementData(element);
    elementText=elementData[0];
    dEle=getDrawable(context,elementData[1]);
    if (element.contains(""String_Node_Str"")) {
      String[] twoElements=elementText.split(""String_Node_Str"");
      elementText=twoElements[0];
      dualElement=twoElements[1];
      String[] dualElementData=getElementData(dualElement);
      specialtv.setText(dualElementData[0]);
      dDualEle=getDrawable(context,dualElementData[1]);
      dDualEle=scaleDrawable(dDualEle,35,35);
      specialtv.setCompoundDrawables(dDualEle,null,null,null);
      android.view.Display display=((android.view.WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
      specialtv.setPadding((int)(display.getWidth() * 0.16),0,0,0);
    }
    dEle=scaleDrawable(dEle,35,35);
    elementtv.setCompoundDrawables(dEle,null,null,null);
    if (awakenedElement != null) {
      elementText=elementText + ""String_Node_Str"";
    }
  }
  String slot=""String_Node_Str"";
switch (weapon.getNumSlots()) {
case 0:
    slot=""String_Node_Str"";
  break;
case 1:
slot=""String_Node_Str"";
break;
case 2:
slot=""String_Node_Str"";
break;
case 3:
slot=""String_Node_Str"";
break;
default :
slot=""String_Node_Str"";
break;
}
String affinity=""String_Node_Str"";
if (weapon.getAffinity() != 0) {
affinity=""String_Node_Str"" + weapon.getAffinity() + ""String_Node_Str"";
}
String defense=""String_Node_Str"";
if (weapon.getDefense() != 0) {
defense=""String_Node_Str"" + weapon.getDefense();
}
nametv.setText(name);
nametv.setTypeface(null,Typeface.BOLD);
attacktv.setText(attack);
elementtv.setText(elementText);
awakentv.setText(awakenText);
slottv.setText(slot);
affinitytv.setText(affinity);
defensetv.setText(defense);
String type=weapon.getWtype();
if (type.equals(""String_Node_Str"")) {
String special=weapon.getHornNotes();
specialtv.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.3f));
ImageView note1v=(ImageView)view.findViewById(R.id.note1);
ImageView note2v=(ImageView)view.findViewById(R.id.note2);
ImageView note3v=(ImageView)view.findViewById(R.id.note3);
TextView fillerv=(TextView)view.findViewById(R.id.filler);
note1v.setImageDrawable(getNoteDrawable(context,special.charAt(0)));
note2v.setImageDrawable(getNoteDrawable(context,special.charAt(1)));
note3v.setImageDrawable(getNoteDrawable(context,special.charAt(2)));
fillerv.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.4f));
note1v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
note2v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
note3v.setLayoutParams(new LinearLayout.LayoutParams(0,50,0.1f));
}
if (type.equals(""String_Node_Str"")) {
String special=weapon.getShellingType();
specialtv.setText(special);
specialtv.setGravity(Gravity.CENTER);
}
if (type.equals(""String_Node_Str"")) {
String special=weapon.getPhial();
specialtv.setText(special);
specialtv.setGravity(Gravity.CENTER);
}
if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
String sharpString=weapon.getSharpness();
sharpnesstv.init(sharpString);
}
}"
96202,"/** 
 * Sets the image for the title-bar, so IF it shows in the task-bar, it will have the corresponding image as the SystemTray image
 */
public void setTitleBarImage(final File imageFile){
  if (this.iconFile == null || !this.iconFile.equals(imageFile)) {
    this.iconFile=imageFile;
    try {
      Image image=new ImageIcon(ImageIO.read(imageFile)).getImage();
      image.flush();
      hiddenDialog.setIconImage(image);
    }
 catch (    IOException e) {
      SystemTray.logger.error(""String_Node_Str"");
    }
  }
}","/** 
 * Sets the image for the title-bar, so IF it shows in the task-bar, it will have the corresponding image as the SystemTray image
 */
public void setTitleBarImage(final File imageFile){
  if (this.iconFile == null || !this.iconFile.equals(imageFile)) {
    this.iconFile=imageFile;
    try {
      if (imageFile != null) {
        Image image=new ImageIcon(ImageIO.read(imageFile)).getImage();
        image.flush();
        hiddenDialog.setIconImage(image);
      }
    }
 catch (    IOException e) {
      SystemTray.logger.error(""String_Node_Str"");
    }
  }
}"
96203,"/** 
 * Removes this menu entry from the menu and releases all system resources associated with this menu entry
 */
public void remove(){
  if (peer != null) {
    peer.remove();
    this.parent=null;
    this.systemTray=null;
    peer=null;
  }
}","/** 
 * Removes this menu entry from the menu and releases all system resources associated with this menu entry.
 */
public void remove(){
  if (peer != null) {
    peer.remove();
    this.parent=null;
    this.systemTray=null;
    peer=null;
  }
}"
96204,"/** 
 * This removes all menu entries from this menu AND this menu from it's parent
 */
@Override public void remove(){
  clear();
  super.remove();
}","/** 
 * This removes all menu entries from this menu AND this menu from it's parent
 */
@Override public void remove(){
synchronized (menuEntries) {
    menuEntries.clear();
  }
  super.remove();
}"
96205,"private static Class<? extends Tray> getAutoDetectTrayType(){
  if (OS.isWindows()) {
    try {
      return selectType(TrayType.Swing);
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (OS.isMacOsX()) {
    try {
      return selectType(TrayType.AWT);
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"");
    }
  }
 else   if ((OS.isLinux() || OS.isUnix())) {
    OSUtil.DesktopEnv.Env de=OSUtil.DesktopEnv.get();
    if (DEBUG) {
      logger.debug(""String_Node_Str"",de);
    }
switch (de) {
case Gnome:
{
        String GDM=System.getenv(""String_Node_Str"");
        if (DEBUG) {
          logger.debug(""String_Node_Str"",GDM);
        }
        if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          Tray.usingGnome=true;
          if (OSUtil.Linux.isFedora()) {
            if (DEBUG) {
              logger.debug(""String_Node_Str"");
            }
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else           if (OSUtil.Linux.isUbuntu()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else           if (OSUtil.Unix.isFreeBSD()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else {
            return selectTypeQuietly(TrayType.AppIndicator);
          }
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          Tray.usingGnome=true;
          if (OSUtil.Linux.isKali()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
          if (OSUtil.Linux.isDebian() && Extension.ENABLE_EXTENSION_INSTALL) {
            logger.warn(""String_Node_Str"");
            if (DEBUG) {
              logger.debug(""String_Node_Str"");
            }
            Extension.ENABLE_EXTENSION_INSTALL=false;
          }
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.AppIndicator);
        }
        break;
      }
case KDE:
{
      if (OSUtil.Linux.isFedora()) {
        return selectTypeQuietly(TrayType.GtkStatusIcon);
      }
 else {
        return selectTypeQuietly(TrayType.AppIndicator);
      }
    }
case Unity:
{
    return selectTypeQuietly(TrayType.AppIndicator);
  }
case Unity7:
{
  return selectTypeQuietly(TrayType.AppIndicator);
}
case XFCE:
{
return selectTypeQuietly(TrayType.GtkStatusIcon);
}
case LXDE:
{
return selectTypeQuietly(TrayType.GtkStatusIcon);
}
case Pantheon:
{
return selectTypeQuietly(TrayType.AppIndicator);
}
case ChromeOS:
return null;
}
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
return selectType(TrayType.AppIndicator);
}
 catch (Exception e) {
if (DEBUG) {
  logger.error(""String_Node_Str"",e);
}
 else {
  logger.error(""String_Node_Str"");
}
}
break;
}
}
  finally {
IO.closeQuietly(bin);
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
return null;
}","private static Class<? extends Tray> getAutoDetectTrayType(){
  if (OS.isWindows()) {
    try {
      return selectType(TrayType.Swing);
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (OS.isMacOsX()) {
    try {
      return selectType(TrayType.AWT);
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"");
    }
  }
 else   if ((OS.isLinux() || OS.isUnix())) {
    OSUtil.DesktopEnv.Env de=OSUtil.DesktopEnv.get();
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + OS.LINE_SEPARATOR + OSUtil.Linux.getInfo(),de);
    }
switch (de) {
case Gnome:
{
        String GDM=System.getenv(""String_Node_Str"");
        if (DEBUG) {
          logger.debug(""String_Node_Str"",GDM);
        }
        if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          Tray.usingGnome=true;
          if (OSUtil.Linux.isFedora()) {
            if (DEBUG) {
              logger.debug(""String_Node_Str"");
            }
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else           if (OSUtil.Linux.isUbuntu()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else           if (OSUtil.Unix.isFreeBSD()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
 else {
            return selectTypeQuietly(TrayType.AppIndicator);
          }
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          Tray.usingGnome=true;
          if (OSUtil.Linux.isKali()) {
            return selectTypeQuietly(TrayType.GtkStatusIcon);
          }
          if (OSUtil.Linux.isDebian() && Extension.ENABLE_EXTENSION_INSTALL) {
            logger.warn(""String_Node_Str"");
            if (DEBUG) {
              logger.debug(""String_Node_Str"");
            }
            Extension.ENABLE_EXTENSION_INSTALL=false;
          }
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.GtkStatusIcon);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
          return selectTypeQuietly(TrayType.AppIndicator);
        }
        break;
      }
case KDE:
{
      if (OSUtil.Linux.isFedora()) {
        return selectTypeQuietly(TrayType.GtkStatusIcon);
      }
 else {
        return selectTypeQuietly(TrayType.AppIndicator);
      }
    }
case Unity:
{
    try {
      String ubuntuVersion=OSUtil.Linux.getUbuntuVersion();
      String[] split=ubuntuVersion.split(""String_Node_Str"");
      int major=Integer.parseInt(split[0]);
      int minor=Integer.parseInt(split[1]);
      if (major < 16 || (major == 16 && minor <= 4)) {
        return selectTypeQuietly(TrayType.GtkStatusIcon);
      }
    }
 catch (    Exception ignored) {
    }
    return selectTypeQuietly(TrayType.AppIndicator);
  }
case Unity7:
{
  return selectTypeQuietly(TrayType.AppIndicator);
}
case XFCE:
{
return selectTypeQuietly(TrayType.GtkStatusIcon);
}
case LXDE:
{
return selectTypeQuietly(TrayType.GtkStatusIcon);
}
case Pantheon:
{
return selectTypeQuietly(TrayType.AppIndicator);
}
case ChromeOS:
return null;
}
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
return selectType(TrayType.AppIndicator);
}
 catch (Exception e) {
if (DEBUG) {
  logger.error(""String_Node_Str"",e);
}
 else {
  logger.error(""String_Node_Str"");
}
}
break;
}
}
  finally {
IO.closeQuietly(bin);
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (OS.isLinux()) {
if (OSUtil.Linux.isUbuntu()) {
return selectTypeQuietly(TrayType.AppIndicator);
}
 else if (OSUtil.Linux.isFedora()) {
return selectTypeQuietly(TrayType.AppIndicator);
}
 else {
return selectTypeQuietly(TrayType.AppIndicator);
}
}
}
return null;
}"
96206,"/** 
 * Shuts-down the SystemTray, by removing the menus + tray icon. After calling this method, you MUST call `get()` or `getNative()` again to obtain a new reference to the SystemTray.
 */
public void shutdown(){
  final Menu menu=systemTrayMenu;
  if (menu != null) {
    menu.remove();
  }
  systemTrayMenu=null;
}","/** 
 * Shuts-down the SystemTray, by removing the menus + tray icon. After calling this method, you MUST call `get()` or `getNative()` again to obtain a new reference to the SystemTray.
 */
public void shutdown(){
  final Menu menu=systemTrayMenu;
  if (menu != null) {
    menu.remove();
  }
  systemTrayMenu=null;
  EventDispatch.shutdown();
}"
96207,"/** 
 * the menu entry looks FUNKY when there are a mis-match of entries WITH and WITHOUT images. This is primarily only with AppIndicators, although not always. <p> called on the DISPATCH thread
 */
public void setSpacerImage(final boolean everyoneElseHasImages){
  if (hasLegitImage) {
    return;
  }
  if (spacerImage != null) {
    Gtk2.gtk_container_remove(_native,spacerImage);
    spacerImage=null;
    Gtk2.gtk_widget_show_all(_native);
  }
  if (everyoneElseHasImages) {
    spacerImage=Gtk2.gtk_image_new_from_file(transparentIcon.getAbsolutePath());
    Gtk2.gtk_image_menu_item_set_image(_native,spacerImage);
    Gtk2.gtk_image_menu_item_set_always_show_image(_native,true);
  }
  Gtk2.gtk_widget_show_all(_native);
}","/** 
 * the menu entry looks FUNKY when there are a mis-match of entries WITH and WITHOUT images. This is primarily only with AppIndicators, although not always. <p> called on the DISPATCH thread
 */
public void setSpacerImage(final boolean everyoneElseHasImages){
  if (hasLegitImage) {
    return;
  }
  removeSpacerImage();
  if (everyoneElseHasImages) {
    addSpacerImage();
  }
  Gtk2.gtk_widget_show_all(_native);
}"
96208,"@Override public void add(final Menu parentMenu,final Entry entry,final int index){
  GtkEventDispatch.dispatchAndWait(new Runnable(){
    @Override public void run(){
      deleteMenu();
      if (entry instanceof Menu) {
        GtkMenu item=new GtkMenu(GtkMenu.this);
        menuEntries.add(index,item);
        ((Menu)entry).bind(item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Separator) {
        GtkMenuItemSeparator item=new GtkMenuItemSeparator(GtkMenu.this);
        menuEntries.add(index,item);
        entry.bind(item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Checkbox) {
        GtkMenuItemCheckbox item=new GtkMenuItemCheckbox(GtkMenu.this);
        menuEntries.add(index,item);
        ((Checkbox)entry).bind(item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Status) {
        GtkMenuItemStatus item=new GtkMenuItemStatus(GtkMenu.this);
        menuEntries.add(index,item);
        ((Status)entry).bind(item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof MenuItem) {
        GtkMenuItem item=new GtkMenuItem(GtkMenu.this);
        menuEntries.add(index,item);
        ((MenuItem)entry).bind(item,parentMenu,parentMenu.getSystemTray());
      }
      createMenu();
    }
  }
);
}","@Override public void add(final Menu parentMenu,final Entry entry,final int index){
  GtkEventDispatch.dispatchAndWait(new Runnable(){
    @Override public void run(){
      deleteMenu();
      GtkBaseMenuItem item=null;
      if (entry instanceof Menu) {
        item=new GtkMenu(GtkMenu.this);
        menuEntries.add(index,item);
      }
 else       if (entry instanceof Separator) {
        item=new GtkMenuItemSeparator(GtkMenu.this);
        menuEntries.add(index,item);
      }
 else       if (entry instanceof Checkbox) {
        item=new GtkMenuItemCheckbox(GtkMenu.this);
        menuEntries.add(index,item);
      }
 else       if (entry instanceof Status) {
        item=new GtkMenuItemStatus(GtkMenu.this);
        menuEntries.add(index,item);
      }
 else       if (entry instanceof MenuItem) {
        item=new GtkMenuItem(GtkMenu.this);
        menuEntries.add(index,item);
      }
      createMenu();
      if (entry instanceof Menu) {
        ((Menu)entry).bind((GtkMenu)item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Separator) {
        ((Separator)entry).bind((GtkMenuItemSeparator)item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Checkbox) {
        ((Checkbox)entry).bind((GtkMenuItemCheckbox)item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof Status) {
        ((Status)entry).bind((GtkMenuItemStatus)item,parentMenu,parentMenu.getSystemTray());
      }
 else       if (entry instanceof MenuItem) {
        ((MenuItem)entry).bind((GtkMenuItem)item,parentMenu,parentMenu.getSystemTray());
      }
    }
  }
);
}"
96209,"@Override public void remove(){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      GtkMenu parent=getParent();
      if (parent != null) {
        parent.menuEntries.remove(GtkMenu.this);
      }
      obliterateMenu();
      if (parent != null) {
        Gtk2.gtk_menu_item_set_submenu(_native,null);
        parent.deleteMenu();
        parent.createMenu();
      }
    }
  }
;
  if (GtkEventDispatch.isDispatch.get()) {
    runnable.run();
  }
 else {
    GtkEventDispatch.dispatch(runnable);
  }
}","@Override public void remove(){
  GtkEventDispatch.dispatch(new Runnable(){
    @Override public void run(){
      GtkMenu parent=getParent();
      if (parent != null) {
        parent.menuEntries.remove(GtkMenu.this);
      }
      obliterateMenu();
      if (parent != null) {
        Gtk2.gtk_menu_item_set_submenu(_native,null);
        parent.deleteMenu();
        parent.createMenu();
      }
    }
  }
);
}"
96210,"@SuppressWarnings(""String_Node_Str"") @Override public void setImage(final MenuItem menuItem){
  setLegitImage(menuItem.getImage() != null);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      if (image != null) {
        Gtk2.gtk_container_remove(_native,image);
        image=null;
        Gtk2.gtk_widget_show_all(_native);
      }
      if (menuItem.getImage() != null) {
        image=Gtk2.gtk_image_new_from_file(menuItem.getImage().getAbsolutePath());
        Gtk2.gtk_image_menu_item_set_image(_native,image);
        Gtk2.gtk_image_menu_item_set_always_show_image(_native,true);
      }
      Gtk2.gtk_widget_show_all(_native);
    }
  }
;
  if (GtkEventDispatch.isDispatch.get()) {
    runnable.run();
  }
 else {
    GtkEventDispatch.dispatch(runnable);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void setImage(final MenuItem menuItem){
  setLegitImage(menuItem.getImage() != null);
  GtkEventDispatch.dispatch(new Runnable(){
    @Override public void run(){
      if (image != null) {
        Gtk2.gtk_container_remove(_native,image);
        image=null;
        Gtk2.gtk_widget_show_all(_native);
      }
      if (menuItem.getImage() != null) {
        image=Gtk2.gtk_image_new_from_file(menuItem.getImage().getAbsolutePath());
        Gtk2.gtk_image_menu_item_set_image(_native,image);
        Gtk2.gtk_image_menu_item_set_always_show_image(_native,true);
      }
      Gtk2.gtk_widget_show_all(_native);
    }
  }
);
}"
96211,"@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  if (callback != null) {
    _native.removeActionListener(callback);
  }
  callback=menuItem.getCallback();
  if (callback != null) {
    callback=new ActionListener(){
      final ActionListener cb=menuItem.getCallback();
      @Override public void actionPerformed(      ActionEvent e){
        menuItem.setChecked(!isChecked);
        EventDispatch.runLater(new Runnable(){
          @Override public void run(){
            try {
              cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
            }
 catch (            Throwable throwable) {
              SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
            }
          }
        }
);
      }
    }
;
    _native.addActionListener(callback);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  if (callback != null) {
    _native.removeItemListener(callback);
  }
  ActionListener callback=menuItem.getCallback();
  if (callback != null) {
    this.callback=new ItemListener(){
      final ActionListener cb=menuItem.getCallback();
      @Override public void itemStateChanged(      final ItemEvent e){
        menuItem.setChecked(!isChecked);
        EventDispatch.runLater(new Runnable(){
          @Override public void run(){
            try {
              cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
            }
 catch (            Throwable throwable) {
              SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
            }
          }
        }
);
      }
    }
;
    _native.addItemListener(this.callback);
  }
}"
96212,"@Override public void run(){
  _native.deleteShortcut();
  _native.setEnabled(false);
  if (callback != null) {
    _native.removeActionListener(callback);
    callback=null;
  }
  parent._native.remove(_native);
  _native.removeNotify();
}","@Override public void run(){
  _native.deleteShortcut();
  _native.setEnabled(false);
  if (callback != null) {
    _native.removeItemListener(callback);
    callback=null;
  }
  parent._native.remove(_native);
  _native.removeNotify();
}"
96213,"@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.deleteShortcut();
      _native.setEnabled(false);
      if (callback != null) {
        _native.removeActionListener(callback);
        callback=null;
      }
      parent._native.remove(_native);
      _native.removeNotify();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.deleteShortcut();
      _native.setEnabled(false);
      if (callback != null) {
        _native.removeItemListener(callback);
        callback=null;
      }
      parent._native.remove(_native);
      _native.removeNotify();
    }
  }
);
}"
96214,"private static boolean isOracleVM(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  return !(vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str""));
}","private static boolean isOracleVM(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  return vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str"");
}"
96215,"/** 
 * Allows one to specify the Look & Feel of a menu entry
 * @param jMenuItem the swing JMenuItem that is displayed in the menu
 * @param entry the entry which is bound to the JMenuItem. Can be null during initialization.
 * @return the UI used to customize the Look & Feel of the menu entry
 */
@Override public MenuItemUI getItemUI(final JMenuItem jMenuItem,final Entry entry){
  return new DefaultMenuItemUI(jMenuItem){
    @Override public void installUI(    final JComponent c){
      super.installUI(c);
    }
  }
;
}","/** 
 * Allows one to specify the Look & Feel of a menu entry
 * @param jMenuItem the swing JMenuItem that is displayed in the menu
 * @param entry the entry which is bound to the JMenuItem. Can be null during initialization.
 * @return the UI used to customize the Look & Feel of the menu entry
 */
@Override public MenuItemUI getItemUI(final JMenuItem jMenuItem,final Entry entry){
  if (isWindowsXP) {
    if (jMenuItem instanceof JMenu) {
      return new WindowsMenuUI(){
        @Override public void installUI(        final JComponent c){
          super.installUI(c);
        }
        @Override protected void paintMenuItem(        Graphics g,        JComponent c,        Icon checkIcon,        Icon arrowIcon,        Color background,        Color foreground,        int defaultTextIconGap){
          super.paintMenuItem(g,c,null,arrowIcon,background,foreground,defaultTextIconGap);
        }
        @Override public Dimension getPreferredSize(        JComponent c){
          return getPreferredMenuItemSize(c,null,arrowIcon,defaultTextIconGap);
        }
        @Override protected Dimension getPreferredMenuItemSize(        final JComponent c,        final Icon checkIcon,        final Icon arrowIcon,        final int defaultTextIconGap){
          return super.getPreferredMenuItemSize(c,null,arrowIcon,defaultTextIconGap);
        }
      }
;
    }
 else {
      return new WindowsMenuItemUI(){
        @Override public void installUI(        final JComponent c){
          super.installUI(c);
        }
        @Override protected void paintMenuItem(        Graphics g,        JComponent c,        Icon checkIcon,        Icon arrowIcon,        Color background,        Color foreground,        int defaultTextIconGap){
          super.paintMenuItem(g,c,null,arrowIcon,background,foreground,defaultTextIconGap);
        }
        @Override public Dimension getPreferredSize(        JComponent c){
          return getPreferredMenuItemSize(c,null,arrowIcon,defaultTextIconGap);
        }
      }
;
    }
  }
 else {
    return new DefaultMenuItemUI(jMenuItem){
      @Override public void installUI(      final JComponent c){
        super.installUI(c);
      }
    }
;
  }
}"
96216,"@Override public void setTooltip(final MenuItem menuItem){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.setLabel(menuItem.getTooltip());
    }
  }
);
}","@Override public void setTooltip(final MenuItem menuItem){
}"
96217,"public Color getColor(){
  return new Color(red(),green(),blue());
}","public Color getColor(){
  read();
  return new Color(red(),green(),blue());
}"
96218,"public static native void g_object_get(Pointer instance,String property_name,PointerByReference value,Pointer terminator);","public static native void g_object_get(Pointer instance,String property_name,Pointer value,Pointer terminator);"
96219,"@SuppressWarnings(""String_Node_Str"") private static synchronized File resizeAndCache(final int height,InputStream imageStream){
  if (imageStream == null) {
    return null;
  }
  final String cacheName;
  boolean needsResize=true;
  try {
    imageStream=makeByteArrayInputStream(imageStream);
    imageStream.mark(0);
    cacheName=height + ""String_Node_Str"" + CacheUtil.createNameAsHash(imageStream);
    ((ByteArrayInputStream)imageStream).reset();
    final File check=CacheUtil.check(cacheName);
    if (check != null) {
      return check;
    }
    imageStream.mark(0);
    Dimension imageSize=ImageUtil.getImageSize(imageStream);
    if (height == (int)imageSize.getHeight()) {
      needsResize=false;
    }
  }
 catch (  Exception e) {
    SystemTray.logger.error(""String_Node_Str"",e);
    return getErrorImage(height);
  }
 finally {
    ((ByteArrayInputStream)imageStream).reset();
  }
  if (needsResize) {
    try {
      File resizedFile=resizeFileNoCheck(height,imageStream);
      try {
        return CacheUtil.save(cacheName,resizedFile);
      }
 catch (      Exception e) {
        SystemTray.logger.error(""String_Node_Str"",e);
        return getErrorImage(height);
      }
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"",e);
      return getErrorImage(height);
    }
  }
 else {
    try {
      return CacheUtil.save(cacheName,imageStream);
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"",e);
      return getErrorImage(height);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private static synchronized File resizeAndCache(final int size,InputStream imageStream){
  if (imageStream == null) {
    return null;
  }
  final String cacheName;
  boolean needsResize=true;
  try {
    imageStream=makeByteArrayInputStream(imageStream);
    imageStream.mark(0);
    cacheName=size + ""String_Node_Str"" + CacheUtil.createNameAsHash(imageStream);
    ((ByteArrayInputStream)imageStream).reset();
    final File check=CacheUtil.check(cacheName);
    if (check != null) {
      return check;
    }
    imageStream.mark(0);
    Dimension imageSize=ImageUtil.getImageSize(imageStream);
    if (size == (int)imageSize.getHeight() && size == (int)imageSize.getWidth()) {
      needsResize=false;
    }
  }
 catch (  Exception e) {
    SystemTray.logger.error(""String_Node_Str"",e);
    return getErrorImage(size);
  }
 finally {
    ((ByteArrayInputStream)imageStream).reset();
  }
  if (needsResize) {
    try {
      File resizedFile=resizeFileNoCheck(size,imageStream);
      try {
        return CacheUtil.save(cacheName,resizedFile);
      }
 catch (      Exception e) {
        SystemTray.logger.error(""String_Node_Str"",e);
        return getErrorImage(size);
      }
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"",e);
      return getErrorImage(size);
    }
  }
 else {
    try {
      return CacheUtil.save(cacheName,imageStream);
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"",e);
      return getErrorImage(size);
    }
  }
}"
96220,"/** 
 * Resizes the given InputStream to the specified size. No checks are performed if it's the correct size to begin with.
 * @return the file on disk that is the resized icon
 */
@SuppressWarnings(""String_Node_Str"") private static File resizeFileNoCheck(final int size,InputStream inputStream) throws IOException {
  File newFile=CacheUtil.create(""String_Node_Str"");
  Image image;
  image=ImageUtil.getImageImmediate(ImageIO.read(inputStream));
  image=image.getScaledInstance(-1,size,Image.SCALE_SMOOTH);
  newFile.delete();
  BufferedImage bufferedImage=getBufferedImage(image);
  ImageIO.write(bufferedImage,""String_Node_Str"",newFile);
  return newFile;
}","/** 
 * Resizes the given InputStream to the specified height. No checks are performed if it's the correct height to begin with. Additionally, the image is scaled to where it's largest dimension will always be <= to the size.
 * @return the file on disk that is the resized icon
 */
@SuppressWarnings(""String_Node_Str"") private static File resizeFileNoCheck(final int size,InputStream inputStream) throws IOException {
  File newFile=CacheUtil.create(""String_Node_Str"");
  newFile.delete();
  Image image=ImageUtil.getImageImmediate(ImageIO.read(inputStream));
  int height=image.getHeight(null);
  int width=image.getWidth(null);
  if (width > height) {
    image=image.getScaledInstance(size,-1,Image.SCALE_SMOOTH);
  }
 else {
    image=image.getScaledInstance(-1,size,Image.SCALE_SMOOTH);
  }
  BufferedImage bufferedImage=ImageUtil.getSquareBufferedImage(image);
  ImageIO.write(bufferedImage,""String_Node_Str"",newFile);
  return newFile;
}"
96221,"/** 
 * @return the parsed out CSS, or NULL
 */
public static Css parse(final String css){
  if (css == null) {
    return null;
  }
  List<Entry> colorDefinitions=getColorDefinition(css);
  int endOfColorDefinitions=css.indexOf(""String_Node_Str"");
  for (int lineStart=endOfColorDefinitions; lineStart > 0; lineStart--) {
    if (css.charAt(lineStart) == '\n') {
      endOfColorDefinitions=lineStart + 1;
      break;
    }
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  int index=endOfColorDefinitions;
  int length=css.length();
  do {
    int endOfNodeLabels=css.indexOf(""String_Node_Str"",index);
    if (endOfNodeLabels == -1) {
      break;
    }
    int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
    int endOfSectionTest=css.indexOf(""String_Node_Str"",index) + 1;
    if (endOfSection != endOfSectionTest) {
      index=endOfSection;
      continue;
    }
    for (int lineStart=index; lineStart > 0; lineStart--) {
      if (css.charAt(lineStart) == '\n') {
        index=lineStart + 1;
        break;
      }
    }
    String nodeLabel=css.substring(index,endOfNodeLabels).trim();
    List<Entry> attributes=new ArrayList<Entry>();
    String nodeSection=css.substring(endOfNodeLabels,endOfSection);
    int sectionStart=nodeSection.indexOf('{') + 1;
    int sectionEnd=nodeSection.indexOf('}');
    while (sectionStart != -1) {
      int end=nodeSection.indexOf(';',sectionStart);
      if (end != -1) {
        int separator=nodeSection.indexOf(':',sectionStart);
        if (separator < end) {
          short parenCount=0;
          int j=separator;
          while (j < end) {
            j++;
            char c=nodeSection.charAt(j);
            if (c == '(') {
              parenCount++;
            }
 else             if (c == ')') {
              parenCount--;
            }
          }
          j--;
          if (parenCount > 0) {
            do {
              if (nodeSection.charAt(j) == ')') {
                parenCount--;
              }
              j++;
            }
 while (parenCount > 0 && j < sectionEnd);
          }
          end=j + 1;
          String key=nodeSection.substring(sectionStart,separator);
          String value=nodeSection.substring(separator + 1,end);
          attributes.add(new Entry(key,value));
        }
        sectionStart=end + 1;
      }
 else {
        break;
      }
    }
    int multiIndex=nodeLabel.indexOf(',');
    if (multiIndex != -1) {
      multiIndex=0;
      while (multiIndex != -1) {
        int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
        if (multiEndIndex != -1) {
          String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
          sections.add(new CssNode(newLabel,attributes));
          multiIndex=multiEndIndex + 1;
        }
 else {
          String newLabel=nodeLabel.substring(multiIndex);
          sections.add(new CssNode(newLabel,attributes));
          multiIndex=-1;
        }
      }
    }
 else {
      sections.add(new CssNode(nodeLabel,attributes));
    }
    index=endOfSection;
  }
 while (index < length);
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          for (          Entry attribute : section.attributes) {
            for (Iterator<Entry> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final Entry attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
                break;
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    for (Iterator<Entry> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
      final Entry attribute=iterator1.next();
      if (attribute == null) {
        iterator1.remove();
      }
    }
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
  }
  return new Css(colorDefinitions,sections);
}","/** 
 * @return the parsed out CSS, or NULL
 */
public static Css parse(final String css){
  if (css == null) {
    return null;
  }
  List<Entry> colorDefinitions=getColorDefinition(css);
  int endOfColorDefinitions=css.indexOf(""String_Node_Str"");
  for (int lineStart=endOfColorDefinitions; lineStart > 0; lineStart--) {
    if (css.charAt(lineStart) == '\n') {
      endOfColorDefinitions=lineStart + 1;
      break;
    }
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  int index=endOfColorDefinitions;
  int length=css.length();
  do {
    int endOfNodeLabels=css.indexOf(""String_Node_Str"",index);
    if (endOfNodeLabels == -1) {
      break;
    }
    int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
    int endOfSectionTest=css.indexOf(""String_Node_Str"",index) + 1;
    if (endOfSection != endOfSectionTest) {
      index=endOfSection;
      continue;
    }
    for (int lineStart=index; lineStart > 0; lineStart--) {
      if (css.charAt(lineStart) == '\n') {
        index=lineStart + 1;
        break;
      }
    }
    String nodeLabel=css.substring(index,endOfNodeLabels).trim();
    List<Entry> attributes=new ArrayList<Entry>();
    String nodeSection=css.substring(endOfNodeLabels,endOfSection);
    int sectionStart=nodeSection.indexOf('{') + 1;
    int sectionEnd=nodeSection.indexOf('}');
    while (sectionStart != -1) {
      int end=nodeSection.indexOf(';',sectionStart);
      if (end != -1) {
        int separator=nodeSection.indexOf(':',sectionStart);
        if (separator < end) {
          short parenCount=0;
          int j=separator;
          while (j < end) {
            j++;
            char c=nodeSection.charAt(j);
            if (c == '(') {
              parenCount++;
            }
 else             if (c == ')') {
              parenCount--;
            }
          }
          j--;
          if (parenCount > 0) {
            do {
              if (nodeSection.charAt(j) == ')') {
                parenCount--;
              }
              j++;
            }
 while (parenCount > 0 && j < sectionEnd);
          }
          end=j + 1;
          String key=nodeSection.substring(sectionStart,separator);
          String value=nodeSection.substring(separator + 1,end);
          attributes.add(new Entry(key,value));
        }
        sectionStart=end + 1;
      }
 else {
        break;
      }
    }
    int multiIndex=nodeLabel.indexOf(',');
    if (multiIndex != -1) {
      multiIndex=0;
      while (multiIndex != -1) {
        int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
        if (multiEndIndex != -1) {
          String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
          sections.add(new CssNode(newLabel,attributes));
          multiIndex=multiEndIndex + 1;
        }
 else {
          String newLabel=nodeLabel.substring(multiIndex);
          sections.add(new CssNode(newLabel,attributes));
          multiIndex=-1;
        }
      }
    }
 else {
      sections.add(new CssNode(nodeLabel,attributes));
    }
    index=endOfSection;
  }
 while (index < length);
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          final List<Entry> attributes=section.attributes;
          for (int i1=0; i1 < attributes.size(); i1++) {
            final Entry attribute=attributes.get(i1);
            for (Iterator<Entry> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final Entry attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
                break;
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    for (Iterator<Entry> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
      final Entry attribute=iterator1.next();
      if (attribute == null) {
        iterator1.remove();
      }
    }
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
  }
  return new Css(colorDefinitions,sections);
}"
96222,"/** 
 * Linux/Unix/Solaris use X11 + AWT to add an AWT window to a spot in the notification panel. UNFORTUNATELY, AWT components are heavyweight, and DO NOT support transparency -- so one gets a ""grey"" box as the background of the icon. Spectacularly enough, because this uses X11, it works on any X backend -- regardless of GtkStatusIcon or AppIndicator support. This actually provides **more** support than GtkStatusIcons or AppIndicators, since this will ALWAYS work. Additionally, the size of the tray is hard-coded to be 24. The down side, is that there is a ""grey"" box -- so hack around this issue by getting the color of a pixel in the notification area 1 off the corner, and setting that as the background. It would be better to take a screenshot of the space BEHIND the tray icon, but we can't do that because there is no way to get the info BEFORE the AWT is added to the notification area. See comments below for more details. http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6453521 http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6267936 http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XTrayIconPeer.java http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XSystemTrayPeer.java
 */
public static void fixLinux(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    ClassPool pool=ClassPool.getDefault();
    CtField ctField;
    String className=""String_Node_Str"";
    byte[] eFrameBytes;
    byte[] trayIconBytes;
    byte[] trayPeerBytes;
{
      CtClass trayIconClass=pool.get(className);
      CtClass eFrameClass=null;
      CtClass trayPeerClass;
      CtClass[] nestedClasses=trayIconClass.getNestedClasses();
      for (      CtClass nestedClass : nestedClasses) {
        String name=nestedClass.getName();
        if (name.equals(className + ""String_Node_Str"")) {
          eFrameClass=nestedClass;
        }
      }
      if (eFrameClass == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      trayPeerClass=pool.get(""String_Node_Str"");
      CtConstructor constructor=trayIconClass.getDeclaredConstructors()[0];
      CtMethod method1=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod method2=trayPeerClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{constructor,method1,method2};
      fixTraySize(methodInfos,24,trayIconSize);
      constructor.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method1.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method2.getMethodInfo().rebuildStackMapForME(trayPeerClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
      trayPeerBytes=trayPeerClass.toBytecode();
      CtMethod methodVisible=CtNewMethod.make(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",eFrameClass);
      eFrameClass.addMethod(methodVisible);
      methodVisible.getMethodInfo().rebuildStackMapForME(eFrameClass.getClassPool());
      eFrameBytes=eFrameClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayIconBytes);
    BootStrapClassLoader.defineClass(trayPeerBytes);
    BootStrapClassLoader.defineClass(eFrameBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","/** 
 * Linux/Unix/Solaris use X11 + AWT to add an AWT window to a spot in the notification panel. UNFORTUNATELY, AWT components are heavyweight, and DO NOT support transparency -- so one gets a ""grey"" box as the background of the icon. Spectacularly enough, because this uses X11, it works on any X backend -- regardless of GtkStatusIcon or AppIndicator support. This actually provides **more** support than GtkStatusIcons or AppIndicators, since this will ALWAYS work. Additionally, the size of the tray is hard-coded to be 24. The down side, is that there is a ""grey"" box -- so hack around this issue by getting the color of a pixel in the notification area 1 off the corner, and setting that as the background. It would be better to take a screenshot of the space BEHIND the tray icon, but we can't do that because there is no way to get the info BEFORE the AWT is added to the notification area. See comments below for more details. http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6453521 http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6267936 http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XTrayIconPeer.java http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XSystemTrayPeer.java
 */
public static void fixLinux(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    ClassPool pool=ClassPool.getDefault();
    CtField ctField;
    String className=""String_Node_Str"";
    byte[] eFrameBytes;
    byte[] trayIconBytes;
    byte[] trayPeerBytes;
{
      CtClass trayIconClass=pool.get(className);
      CtClass eFrameClass=null;
      CtClass trayPeerClass;
      CtClass[] nestedClasses=trayIconClass.getNestedClasses();
      for (      CtClass nestedClass : nestedClasses) {
        String name=nestedClass.getName();
        if (name.equals(className + ""String_Node_Str"")) {
          eFrameClass=nestedClass;
        }
      }
      if (eFrameClass == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      trayPeerClass=pool.get(""String_Node_Str"");
      CtConstructor constructor=trayIconClass.getDeclaredConstructors()[0];
      CtMethod method1=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod method2=trayPeerClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{constructor,method1,method2};
      fixTraySize(methodInfos,24,trayIconSize);
      constructor.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method1.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method2.getMethodInfo().rebuildStackMapForME(trayPeerClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
      trayPeerBytes=trayPeerClass.toBytecode();
      CtMethod methodVisible=CtNewMethod.make(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",eFrameClass);
      eFrameClass.addMethod(methodVisible);
      methodVisible.getMethodInfo().rebuildStackMapForME(eFrameClass.getClassPool());
      eFrameBytes=eFrameClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayIconBytes);
    BootStrapClassLoader.defineClass(trayPeerBytes);
    BootStrapClassLoader.defineClass(eFrameBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
96223,"/** 
 * Linux/Unix/Solaris use X11 + AWT to add an AWT window to a spot in the notification panel. UNFORTUNATELY, AWT components are heavyweight, and DO NOT support transparency -- so one gets a ""grey"" box as the background of the icon. Spectacularly enough, because this uses X11, it works on any X backend -- regardless of GtkStatusIcon or AppIndicator support. This actually provides **more** support than GtkStatusIcons or AppIndicators, since this will ALWAYS work. Additionally, the size of the tray is hard-coded to be 24. The down side, is that there is a ""grey"" box -- so hack around this issue by getting the color of a pixel in the notification area 1 off the corner, and setting that as the background. It would be better to take a screenshot of the space BEHIND the tray icon, but we can't do that because there is no way to get the info BEFORE the AWT is added to the notification area. See comments below for more details. http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6453521 http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6267936 http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XTrayIconPeer.java http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XSystemTrayPeer.java
 */
public static void fixLinux(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    ClassPool pool=ClassPool.getDefault();
    CtField ctField;
    String className=""String_Node_Str"";
    byte[] eFrameBytes;
    byte[] trayIconBytes;
    byte[] trayPeerBytes;
{
      CtClass trayIconClass=pool.get(className);
      CtClass eFrameClass=null;
      CtClass trayPeerClass;
      CtClass[] nestedClasses=trayIconClass.getNestedClasses();
      for (      CtClass nestedClass : nestedClasses) {
        String name=nestedClass.getName();
        if (name.equals(className + ""String_Node_Str"")) {
          eFrameClass=nestedClass;
        }
      }
      if (eFrameClass == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      trayPeerClass=pool.get(""String_Node_Str"");
      CtConstructor constructor=trayIconClass.getDeclaredConstructors()[0];
      CtMethod method1=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod method2=trayPeerClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{constructor,method1,method2};
      fixTraySize(methodInfos,trayIconSize);
      constructor.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method1.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method2.getMethodInfo().rebuildStackMapForME(trayPeerClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
      trayPeerBytes=trayPeerClass.toBytecode();
      CtMethod methodVisible=CtNewMethod.make(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",eFrameClass);
      eFrameClass.addMethod(methodVisible);
      methodVisible.getMethodInfo().rebuildStackMapForME(eFrameClass.getClassPool());
      eFrameBytes=eFrameClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayIconBytes);
    BootStrapClassLoader.defineClass(trayPeerBytes);
    BootStrapClassLoader.defineClass(eFrameBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","/** 
 * Linux/Unix/Solaris use X11 + AWT to add an AWT window to a spot in the notification panel. UNFORTUNATELY, AWT components are heavyweight, and DO NOT support transparency -- so one gets a ""grey"" box as the background of the icon. Spectacularly enough, because this uses X11, it works on any X backend -- regardless of GtkStatusIcon or AppIndicator support. This actually provides **more** support than GtkStatusIcons or AppIndicators, since this will ALWAYS work. Additionally, the size of the tray is hard-coded to be 24. The down side, is that there is a ""grey"" box -- so hack around this issue by getting the color of a pixel in the notification area 1 off the corner, and setting that as the background. It would be better to take a screenshot of the space BEHIND the tray icon, but we can't do that because there is no way to get the info BEFORE the AWT is added to the notification area. See comments below for more details. http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6453521 http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6267936 http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XTrayIconPeer.java http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/solaris/classes/sun/awt/X11/XSystemTrayPeer.java
 */
public static void fixLinux(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    ClassPool pool=ClassPool.getDefault();
    CtField ctField;
    String className=""String_Node_Str"";
    byte[] eFrameBytes;
    byte[] trayIconBytes;
    byte[] trayPeerBytes;
{
      CtClass trayIconClass=pool.get(className);
      CtClass eFrameClass=null;
      CtClass trayPeerClass;
      CtClass[] nestedClasses=trayIconClass.getNestedClasses();
      for (      CtClass nestedClass : nestedClasses) {
        String name=nestedClass.getName();
        if (name.equals(className + ""String_Node_Str"")) {
          eFrameClass=nestedClass;
        }
      }
      if (eFrameClass == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayIconClass);
      ctField.setModifiers(Modifier.STATIC);
      trayIconClass.addField(ctField);
      trayPeerClass=pool.get(""String_Node_Str"");
      CtConstructor constructor=trayIconClass.getDeclaredConstructors()[0];
      CtMethod method1=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod method2=trayPeerClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{constructor,method1,method2};
      fixTraySize(methodInfos,24,trayIconSize);
      constructor.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method1.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      method2.getMethodInfo().rebuildStackMapForME(trayPeerClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
      trayPeerBytes=trayPeerClass.toBytecode();
      CtMethod methodVisible=CtNewMethod.make(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",eFrameClass);
      eFrameClass.addMethod(methodVisible);
      methodVisible.getMethodInfo().rebuildStackMapForME(eFrameClass.getClassPool());
      eFrameBytes=eFrameClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayIconBytes);
    BootStrapClassLoader.defineClass(trayPeerBytes);
    BootStrapClassLoader.defineClass(eFrameBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
96224,"/** 
 * oh my. Java likes to think that ALL windows tray icons are 16x16.... Lets fix that! http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/windows/native/sun/windows/awt_TrayIcon.cpp http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/windows/classes/sun/awt/windows/WTrayIconPeer.java
 */
public static void fixWindows(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    @SuppressWarnings(""String_Node_Str"") java.awt.Robot robot=new java.awt.Robot();
    ClassPool pool=ClassPool.getDefault();
    byte[] trayBytes;
    byte[] trayIconBytes;
{
      CtClass trayClass=pool.get(""String_Node_Str"");
      trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
      trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
      CtMethod method=trayClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{method};
      fixTraySize(methodInfos,trayIconSize);
      method.getMethodInfo().rebuildStackMapForME(trayClass.getClassPool());
      trayBytes=trayClass.toBytecode();
    }
{
      CtClass trayIconClass=pool.get(""String_Node_Str"");
      CtMethod ctMethodCreate=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod ctMethodUpdate=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      int TRAY_MASK=(trayIconSize * trayIconSize) / 8;
      ctMethodCreate.setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + TRAY_MASK + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      ctMethodUpdate.setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      ctMethodCreate.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      ctMethodUpdate.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayBytes);
    BootStrapClassLoader.defineClass(trayIconBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",trayIconSize);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",trayIconSize,e);
  }
}","/** 
 * oh my. Java likes to think that ALL windows tray icons are 16x16.... Lets fix that! http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/windows/native/sun/windows/awt_TrayIcon.cpp http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/windows/classes/sun/awt/windows/WTrayIconPeer.java
 */
public static void fixWindows(int trayIconSize){
  if (isOracleVM()) {
    return;
  }
  if (isSwingTrayLoaded()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    @SuppressWarnings(""String_Node_Str"") java.awt.Robot robot=new java.awt.Robot();
    ClassPool pool=ClassPool.getDefault();
    byte[] trayBytes;
    byte[] trayIconBytes;
{
      CtClass trayClass=pool.get(""String_Node_Str"");
      trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
      trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
      CtMethod method=trayClass.getDeclaredMethod(""String_Node_Str"");
      CtBehavior methodInfos[]=new CtBehavior[]{method};
      fixTraySize(methodInfos,16,trayIconSize);
      method.getMethodInfo().rebuildStackMapForME(trayClass.getClassPool());
      trayBytes=trayClass.toBytecode();
    }
{
      CtClass trayIconClass=pool.get(""String_Node_Str"");
      CtMethod ctMethodCreate=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      CtMethod ctMethodUpdate=trayIconClass.getDeclaredMethod(""String_Node_Str"");
      int TRAY_MASK=(trayIconSize * trayIconSize) / 8;
      ctMethodCreate.setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + TRAY_MASK + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      ctMethodUpdate.setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      ctMethodCreate.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      ctMethodUpdate.getMethodInfo().rebuildStackMapForME(trayIconClass.getClassPool());
      trayIconBytes=trayIconClass.toBytecode();
    }
    BootStrapClassLoader.defineClass(trayBytes);
    BootStrapClassLoader.defineClass(trayIconBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",trayIconSize);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",trayIconSize,e);
  }
}"
96225,"private static void fixTraySize(final CtBehavior[] behaviors,final int traySize){
  for (  CtBehavior behavior : behaviors) {
    MethodInfo methodInfo=behavior.getMethodInfo();
    CodeIterator methodIterator=methodInfo.getCodeAttribute().iterator();
    while (methodIterator.hasNext()) {
      int index;
      try {
        index=methodIterator.next();
        int opcode=methodIterator.byteAt(index);
switch (opcode) {
case BIPUSH:
{
            int i=methodIterator.byteAt(index + 1);
            if (i == 24) {
              methodIterator.writeByte((byte)traySize,index + 1);
            }
          }
      }
    }
 catch (    BadBytecode badBytecode) {
      badBytecode.printStackTrace();
    }
  }
}
}","private static void fixTraySize(final CtBehavior[] behaviors,final int oldTraySize,final int newTraySize){
  for (  CtBehavior behavior : behaviors) {
    MethodInfo methodInfo=behavior.getMethodInfo();
    CodeIterator methodIterator=methodInfo.getCodeAttribute().iterator();
    while (methodIterator.hasNext()) {
      int index;
      try {
        index=methodIterator.next();
        int opcode=methodIterator.byteAt(index);
switch (opcode) {
case BIPUSH:
{
            int i=methodIterator.byteAt(index + 1);
            if (i == oldTraySize) {
              methodIterator.writeByte((byte)newTraySize,index + 1);
            }
          }
      }
    }
 catch (    BadBytecode badBytecode) {
      badBytecode.printStackTrace();
    }
  }
}
}"
96226,"/** 
 * Gets the sections of text, of the specified CSS nodes.
 * @param css the css text, in it's raw form
 * @param nodes the section nodes we are interested in (ie: .menuitem, *)
 * @param states the section state we are interested in (ie: focus, hover, active). Null (or empty list) means no state.
 */
public static List<CssNode> getSections(String css,String[] nodes,String[] states){
  if (states == null) {
    states=new String[0];
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  for (  String node : nodes) {
    int i=0;
    while (i != -1) {
      i=css.indexOf(node,i);
      if (i > -1) {
        int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
        int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
        int endOfSectionTest=css.indexOf(""String_Node_Str"",i) + 1;
        if (endOfSection != endOfSectionTest) {
          i=endOfSection;
          continue;
        }
        String nodeLabel=css.substring(i,endOfNodeLabels);
        List<CssAttribute> attributes=new ArrayList<CssAttribute>();
        String nodeSection=css.substring(endOfNodeLabels,endOfSection);
        int start=nodeSection.indexOf('{') + 1;
        while (start != -1) {
          int end=nodeSection.indexOf(';',start);
          if (end != -1) {
            int separator=nodeSection.indexOf(':',start);
            if (separator < end) {
              String key=nodeSection.substring(start,separator);
              String value=nodeSection.substring(separator + 1,end);
              if (value.contains(""String_Node_Str"") || value.contains(""String_Node_Str"")) {
                end=nodeSection.indexOf(')',end);
                end=nodeSection.indexOf(';',end);
                value=nodeSection.substring(separator + 1,end);
              }
              attributes.add(new CssAttribute(key,value));
            }
            start=end + 1;
          }
 else {
            break;
          }
        }
        int multiIndex=nodeLabel.indexOf(',');
        if (multiIndex != -1) {
          multiIndex=0;
          while (multiIndex != -1) {
            int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
            if (multiEndIndex != -1) {
              String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=multiEndIndex + 1;
            }
 else {
              String newLabel=nodeLabel.substring(multiIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=-1;
            }
          }
        }
 else {
          sections.add(new CssNode(nodeLabel,attributes));
        }
        i=endOfSection;
      }
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    String label=section.label;
    boolean canSave=false;
    if (!section.attributes.isEmpty()) {
      main:       for (      String node : nodes) {
        if (label.equals(node)) {
          canSave=true;
          break;
        }
        if (label.length() > node.length() && label.startsWith(node)) {
          int index=node.length();
          label=trim(label.substring(index));
          if (label.charAt(0) == '>') {
            label=label.substring(1);
          }
          for (          String n : nodes) {
            if (n != node && label.startsWith(n)) {
              canSave=true;
              break main;
            }
          }
        }
      }
      if (canSave) {
        int stateIndex=label.lastIndexOf(':');
        if (stateIndex != -1) {
          String stateValue=label.substring(stateIndex + 1);
          boolean saveState=false;
          for (          String state : states) {
            if (stateValue.equals(state)) {
              saveState=true;
              break;
            }
          }
          if (!saveState) {
            canSave=false;
          }
        }
      }
    }
    if (!canSave) {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          for (          CssAttribute attribute : section.attributes) {
            for (Iterator<CssAttribute> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final CssAttribute attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
 else {
      for (Iterator<CssAttribute> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
        final CssAttribute attribute=iterator1.next();
        if (attribute == null) {
          iterator1.remove();
        }
      }
    }
  }
  if (DEBUG_NODES) {
    for (    CssNode section : sections) {
      System.err.println(""String_Node_Str"");
      System.err.println(section);
      System.err.println(""String_Node_Str"");
    }
  }
  return sections;
}","/** 
 * Gets the sections of text, of the specified CSS nodes.
 * @param css the css text, in it's raw form
 * @param nodes the section nodes we are interested in (ie: .menuitem, *)
 * @param states the section state we are interested in (ie: focus, hover, active). Null (or empty list) means no state.
 */
public static List<CssNode> getSections(String css,String[] nodes,String[] states){
  if (states == null) {
    states=new String[0];
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  for (  String node : nodes) {
    int i=0;
    while (i != -1) {
      i=css.indexOf(node,i);
      if (i > -1) {
        int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
        int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
        int endOfSectionTest=css.indexOf(""String_Node_Str"",i) + 1;
        if (endOfSection != endOfSectionTest) {
          i=endOfSection;
          continue;
        }
        String nodeLabel=css.substring(i,endOfNodeLabels);
        List<CssAttribute> attributes=new ArrayList<CssAttribute>();
        String nodeSection=css.substring(endOfNodeLabels,endOfSection);
        int sectionStart=nodeSection.indexOf('{') + 1;
        int sectionEnd=nodeSection.indexOf('}');
        while (sectionStart != -1) {
          int end=nodeSection.indexOf(';',sectionStart);
          if (end != -1) {
            int separator=nodeSection.indexOf(':',sectionStart);
            if (separator < end) {
              short parenCount=0;
              int j=separator;
              while (j < end) {
                j++;
                if (nodeSection.charAt(j) == '(') {
                  parenCount++;
                }
 else                 if (nodeSection.charAt(j) == ')') {
                  parenCount--;
                }
              }
              j--;
              if (parenCount > 0) {
                do {
                  if (nodeSection.charAt(j) == ')') {
                    parenCount--;
                  }
                  j++;
                }
 while (parenCount > 0 && j < sectionEnd);
                end=j;
              }
 else {
                end=j + 1;
              }
              String key=nodeSection.substring(sectionStart,separator);
              String value=nodeSection.substring(separator + 1,end);
              attributes.add(new CssAttribute(key,value));
            }
            sectionStart=end + 1;
          }
 else {
            break;
          }
        }
        int multiIndex=nodeLabel.indexOf(',');
        if (multiIndex != -1) {
          multiIndex=0;
          while (multiIndex != -1) {
            int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
            if (multiEndIndex != -1) {
              String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=multiEndIndex + 1;
            }
 else {
              String newLabel=nodeLabel.substring(multiIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=-1;
            }
          }
        }
 else {
          sections.add(new CssNode(nodeLabel,attributes));
        }
        i=endOfSection;
      }
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    String label=section.label;
    boolean canSave=false;
    if (!section.attributes.isEmpty()) {
      main:       for (      String node : nodes) {
        if (label.equals(node)) {
          canSave=true;
          break;
        }
        if (label.length() > node.length() && label.startsWith(node)) {
          int index=node.length();
          label=trim(label.substring(index));
          if (label.charAt(0) == '>') {
            label=label.substring(1);
          }
          for (          String n : nodes) {
            if (n != node && label.startsWith(n)) {
              canSave=true;
              break main;
            }
          }
        }
      }
      if (canSave) {
        int stateIndex=label.lastIndexOf(':');
        if (stateIndex != -1) {
          String stateValue=label.substring(stateIndex + 1);
          boolean saveState=false;
          for (          String state : states) {
            if (stateValue.equals(state)) {
              saveState=true;
              break;
            }
          }
          if (!saveState) {
            canSave=false;
          }
        }
      }
    }
    if (!canSave) {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          for (          CssAttribute attribute : section.attributes) {
            for (Iterator<CssAttribute> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final CssAttribute attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
 else {
      for (Iterator<CssAttribute> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
        final CssAttribute attribute=iterator1.next();
        if (attribute == null) {
          iterator1.remove();
        }
      }
    }
  }
  if (DEBUG_NODES) {
    for (    CssNode section : sections) {
      System.err.println(""String_Node_Str"");
      System.err.println(section);
      System.err.println(""String_Node_Str"");
    }
  }
  return sections;
}"
96227,"private static boolean isTrayType(final Class<? extends Tray> tray,final TrayType trayType){
switch (trayType) {
case GtkStatusIcon:
    return tray == _GtkStatusIconNativeTray.class;
case AppIndicator:
  return tray == _AppIndicatorNativeTray.class;
case Swing:
return tray == _SwingTray.class;
case AWT:
return tray == _AwtTray.class;
}
return false;
}","void isTrayType(){
}"
96228,"/** 
 * Gets the sections of text, of the specified CSS nodes.
 * @param css the css text, in it's raw form
 * @param nodes the section nodes we are interested in (ie: .menuitem, *)
 * @param states the section state we are interested in (ie: focus, hover, active). Null (or empty list) means no state.
 */
public static List<CssNode> getSections(String css,String[] nodes,String[] states){
  if (states == null) {
    states=new String[0];
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  for (  String node : nodes) {
    int i=0;
    while (i != -1) {
      i=css.indexOf(node,i);
      if (i > -1) {
        int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
        int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
        int endOfSectionTest=css.indexOf(""String_Node_Str"",i) + 1;
        if (endOfSection != endOfSectionTest) {
          i=endOfSection;
          continue;
        }
        String nodeLabel=css.substring(i,endOfNodeLabels);
        List<CssAttribute> attributes=new ArrayList<CssAttribute>();
        String nodeSection=css.substring(endOfNodeLabels,endOfSection);
        int start=nodeSection.indexOf('{') + 1;
        while (start != -1) {
          int end=nodeSection.indexOf(';',start);
          if (end != -1) {
            int separator=nodeSection.indexOf(':',start);
            if (separator < end) {
              String key=nodeSection.substring(start,separator);
              String value=nodeSection.substring(separator + 1,end);
              attributes.add(new CssAttribute(key,value));
            }
            start=end + 1;
          }
 else {
            break;
          }
        }
        int multiIndex=nodeLabel.indexOf(',');
        if (multiIndex != -1) {
          multiIndex=0;
          while (multiIndex != -1) {
            int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
            if (multiEndIndex != -1) {
              String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=multiEndIndex + 1;
            }
 else {
              String newLabel=nodeLabel.substring(multiIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=-1;
            }
          }
        }
 else {
          sections.add(new CssNode(nodeLabel,attributes));
        }
        i=endOfSection;
      }
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    String label=section.label;
    boolean canSave=false;
    if (!section.attributes.isEmpty()) {
      main:       for (      String node : nodes) {
        if (label.equals(node)) {
          canSave=true;
          break;
        }
        if (label.length() > node.length() && label.startsWith(node)) {
          int index=node.length();
          label=trim(label.substring(index));
          if (label.charAt(0) == '>') {
            label=label.substring(1);
          }
          for (          String n : nodes) {
            if (n != node && label.startsWith(n)) {
              canSave=true;
              break main;
            }
          }
        }
      }
      if (canSave) {
        int stateIndex=label.lastIndexOf(':');
        if (stateIndex != -1) {
          String stateValue=label.substring(stateIndex + 1);
          boolean saveState=false;
          for (          String state : states) {
            if (stateValue.equals(state)) {
              saveState=true;
              break;
            }
          }
          if (!saveState) {
            canSave=false;
          }
        }
      }
    }
    if (!canSave) {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          for (          CssAttribute attribute : section.attributes) {
            for (Iterator<CssAttribute> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final CssAttribute attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
 else {
      for (Iterator<CssAttribute> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
        final CssAttribute attribute=iterator1.next();
        if (attribute == null) {
          iterator1.remove();
        }
      }
    }
  }
  if (DEBUG_NODES) {
    for (    CssNode section : sections) {
      System.err.println(""String_Node_Str"");
      System.err.println(section);
      System.err.println(""String_Node_Str"");
    }
  }
  return sections;
}","/** 
 * Gets the sections of text, of the specified CSS nodes.
 * @param css the css text, in it's raw form
 * @param nodes the section nodes we are interested in (ie: .menuitem, *)
 * @param states the section state we are interested in (ie: focus, hover, active). Null (or empty list) means no state.
 */
public static List<CssNode> getSections(String css,String[] nodes,String[] states){
  if (states == null) {
    states=new String[0];
  }
  List<CssNode> sections=new ArrayList<CssNode>();
  for (  String node : nodes) {
    int i=0;
    while (i != -1) {
      i=css.indexOf(node,i);
      if (i > -1) {
        int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
        int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
        int endOfSectionTest=css.indexOf(""String_Node_Str"",i) + 1;
        if (endOfSection != endOfSectionTest) {
          i=endOfSection;
          continue;
        }
        String nodeLabel=css.substring(i,endOfNodeLabels);
        List<CssAttribute> attributes=new ArrayList<CssAttribute>();
        String nodeSection=css.substring(endOfNodeLabels,endOfSection);
        int start=nodeSection.indexOf('{') + 1;
        while (start != -1) {
          int end=nodeSection.indexOf(';',start);
          if (end != -1) {
            int separator=nodeSection.indexOf(':',start);
            if (separator < end) {
              String key=nodeSection.substring(start,separator);
              String value=nodeSection.substring(separator + 1,end);
              if (value.contains(""String_Node_Str"") || value.contains(""String_Node_Str"")) {
                end=nodeSection.indexOf(')',end);
                end=nodeSection.indexOf(';',end);
                value=nodeSection.substring(separator + 1,end);
              }
              attributes.add(new CssAttribute(key,value));
            }
            start=end + 1;
          }
 else {
            break;
          }
        }
        int multiIndex=nodeLabel.indexOf(',');
        if (multiIndex != -1) {
          multiIndex=0;
          while (multiIndex != -1) {
            int multiEndIndex=nodeLabel.indexOf(',',multiIndex);
            if (multiEndIndex != -1) {
              String newLabel=nodeLabel.substring(multiIndex,multiEndIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=multiEndIndex + 1;
            }
 else {
              String newLabel=nodeLabel.substring(multiIndex);
              sections.add(new CssNode(newLabel,attributes));
              multiIndex=-1;
            }
          }
        }
 else {
          sections.add(new CssNode(nodeLabel,attributes));
        }
        i=endOfSection;
      }
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    String label=section.label;
    boolean canSave=false;
    if (!section.attributes.isEmpty()) {
      main:       for (      String node : nodes) {
        if (label.equals(node)) {
          canSave=true;
          break;
        }
        if (label.length() > node.length() && label.startsWith(node)) {
          int index=node.length();
          label=trim(label.substring(index));
          if (label.charAt(0) == '>') {
            label=label.substring(1);
          }
          for (          String n : nodes) {
            if (n != node && label.startsWith(n)) {
              canSave=true;
              break main;
            }
          }
        }
      }
      if (canSave) {
        int stateIndex=label.lastIndexOf(':');
        if (stateIndex != -1) {
          String stateValue=label.substring(stateIndex + 1);
          boolean saveState=false;
          for (          String state : states) {
            if (stateValue.equals(state)) {
              saveState=true;
              break;
            }
          }
          if (!saveState) {
            canSave=false;
          }
        }
      }
    }
    if (!canSave) {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section != null) {
      String label=section.label;
      for (int i=0; i < sections.size(); i++) {
        final CssNode section2=sections.get(i);
        if (section != section2 && section2 != null && label.equals(section2.label)) {
          sections.set(i,null);
          for (          CssAttribute attribute : section.attributes) {
            for (Iterator<CssAttribute> iterator2=section2.attributes.iterator(); iterator2.hasNext(); ) {
              final CssAttribute attribute2=iterator2.next();
              if (attribute.equals(attribute2)) {
                iterator2.remove();
              }
            }
          }
          section.attributes.addAll(section2.attributes);
        }
      }
    }
 else {
      iterator.remove();
    }
  }
  for (Iterator<CssNode> iterator=sections.iterator(); iterator.hasNext(); ) {
    final CssNode section=iterator.next();
    if (section.attributes.isEmpty()) {
      iterator.remove();
    }
 else {
      for (Iterator<CssAttribute> iterator1=section.attributes.iterator(); iterator1.hasNext(); ) {
        final CssAttribute attribute=iterator1.next();
        if (attribute == null) {
          iterator1.remove();
        }
      }
    }
  }
  if (DEBUG_NODES) {
    for (    CssNode section : sections) {
      System.err.println(""String_Node_Str"");
      System.err.println(section);
      System.err.println(""String_Node_Str"");
    }
  }
  return sections;
}"
96229,"/** 
 * get the color we are interested in via raw CSS parsing. This is specifically to get the color of the text of the appindicator/gtk-status-icon menu.
 * @return the color string, parsed from CSS/
 */
private static Color getFromCss(){
  String css=getGtkThemeCss();
  if (css != null) {
    String[] nodes;
    Tray tray=(Tray)SystemTray.get().getMenu();
    if (tray instanceof _GtkStatusIconNativeTray) {
      nodes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
 else     if (tray instanceof _AppIndicatorNativeTray) {
      nodes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
 else {
      return null;
    }
    String colorString=null;
    colorCheck:     for (    String node : nodes) {
      int i=0;
      while (i != -1 && colorString == null) {
        i=css.indexOf(node,i);
        if (i > -1) {
          int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
          String nodeLabel=css.substring(i,endOfNodeLabels);
          if (!nodeLabel.contains(""String_Node_Str"")) {
            i=endOfNodeLabels;
            continue;
          }
          int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels);
          String nodeSection=css.substring(endOfNodeLabels,endOfSection);
          int j=nodeSection.indexOf(""String_Node_Str"");
          if (j > -1) {
            int startOfColorDef=nodeSection.indexOf(""String_Node_Str"",j) + 1;
            int endOfColorDef=nodeSection.indexOf(""String_Node_Str"",startOfColorDef);
            colorString=nodeSection.substring(startOfColorDef,endOfColorDef).trim();
          }
 else {
            i=endOfSection;
          }
        }
      }
    }
    if (colorString == null) {
      colorCheck:       for (      String node : nodes) {
        int i=0;
        while (i != -1 && colorString == null) {
          i=css.indexOf(node,i);
          if (i > -1) {
            int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
            int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels);
            String nodeSection=css.substring(endOfNodeLabels,endOfSection);
            int j=nodeSection.indexOf(""String_Node_Str"");
            if (j > -1) {
              int startOfColorDef=nodeSection.indexOf(""String_Node_Str"",j) + 1;
              int endOfColorDef=nodeSection.indexOf(""String_Node_Str"",startOfColorDef);
              colorString=nodeSection.substring(startOfColorDef,endOfColorDef).trim();
            }
 else {
              i=endOfSection;
            }
          }
        }
      }
    }
    if (colorString != null) {
      if (colorString.startsWith(""String_Node_Str"")) {
        colorString=colorString.substring(1);
        String colorDefine=""String_Node_Str"";
        int start=css.indexOf(colorDefine);
        int end=css.lastIndexOf(colorDefine);
        end=css.lastIndexOf(""String_Node_Str"",end) + 1;
        String colorDefines=css.substring(start,end);
        String newColorString=colorDefine + ""String_Node_Str"" + colorString;
        int i=0;
        while (i != -1) {
          i=colorDefines.indexOf(newColorString);
          if (i >= 0) {
            try {
              int startIndex=i + newColorString.length();
              int endIndex=colorDefines.indexOf(""String_Node_Str"",i);
              String colorSubString=colorDefines.substring(startIndex,endIndex).trim();
              if (colorSubString.startsWith(""String_Node_Str"")) {
                i=endIndex;
                continue;
              }
              return parseColor(colorSubString);
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
 else {
        return parseColor(colorString);
      }
    }
  }
  return null;
}","/** 
 * get the color we are interested in via raw CSS parsing. This is specifically to get the color of the text of the appindicator/gtk-status-icon menu.
 * @return the color string, parsed from CSS/
 */
private static Color getFromCss(){
  String css=getGtkThemeCss();
  if (css != null) {
    String[] nodes;
    Tray tray=(Tray)SystemTray.get().getMenu();
    if (tray instanceof _GtkStatusIconNativeTray) {
      nodes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
 else     if (tray instanceof _AppIndicatorNativeTray) {
      nodes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
 else {
      return null;
    }
    List<String> sections=new ArrayList<String>();
    String colorString=null;
    colorCheck:     for (    String node : nodes) {
      int i=0;
      while (i != -1) {
        i=css.indexOf(node,i);
        if (i > -1) {
          int endOfNodeLabels=css.indexOf(""String_Node_Str"",i);
          int endOfSection=css.indexOf(""String_Node_Str"",endOfNodeLabels + 1) + 1;
          int endOfSectionTest=css.indexOf(""String_Node_Str"",i) + 1;
          if (endOfSection != endOfSectionTest) {
            i=endOfSection;
            continue;
          }
          String nodeLabel=css.substring(i,endOfNodeLabels);
          String nodeSection=css.substring(endOfNodeLabels,endOfSection);
          int j=nodeSection.indexOf(""String_Node_Str"");
          if (j > -1) {
            sections.add(nodeLabel + ""String_Node_Str"" + nodeSection);
          }
          i=endOfSection;
        }
      }
    }
    if (!sections.isEmpty()) {
      String section=sections.get(0);
      int start=section.indexOf(""String_Node_Str"");
      int colorIndex=section.indexOf(""String_Node_Str"",start);
      int startOfColorDef=section.indexOf(""String_Node_Str"",colorIndex) + 1;
      int endOfColorDef=section.indexOf(""String_Node_Str"",startOfColorDef);
      colorString=section.substring(startOfColorDef,endOfColorDef).trim();
    }
    if (colorString != null) {
      if (colorString.startsWith(""String_Node_Str"")) {
        colorString=colorString.substring(1);
        String colorDefine=""String_Node_Str"";
        int start=css.indexOf(colorDefine);
        int end=css.lastIndexOf(colorDefine);
        end=css.lastIndexOf(""String_Node_Str"",end) + 1;
        String colorDefines=css.substring(start,end);
        String newColorString=colorDefine + ""String_Node_Str"" + colorString;
        int i=0;
        while (i != -1) {
          i=colorDefines.indexOf(newColorString);
          if (i >= 0) {
            try {
              int startIndex=i + newColorString.length();
              int endIndex=colorDefines.indexOf(""String_Node_Str"",i);
              String colorSubString=colorDefines.substring(startIndex,endIndex).trim();
              if (colorSubString.startsWith(""String_Node_Str"")) {
                newColorString=colorDefine + ""String_Node_Str"" + colorSubString.substring(1);
                i=0;
                continue;
              }
              return parseColor(colorSubString);
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
 else {
        return parseColor(colorString);
      }
    }
  }
  return null;
}"
96230,"/** 
 * @return the widget color of text for the current theme, or black. It is important that this is called AFTER GTK has been initialized.
 */
public static Color getCurrentThemeTextColor(){
  final AtomicReference<Color> color=new AtomicReference<Color>(null);
  Gtk.dispatchAndWait(new Runnable(){
    @Override public void run(){
      if (Gtk.isGtk3) {
        Color c=getFromCss();
        if (c != null) {
          System.err.println(""String_Node_Str"");
          color.set(c);
          return;
        }
      }
      Color c=getFromColorScheme();
      if (c != null) {
        System.err.println(""String_Node_Str"");
        color.set(c);
        return;
      }
      Pointer offscreen=Gtk.gtk_offscreen_window_new();
      final Pointer item=Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str"");
      Gtk.gtk_container_add(offscreen,item);
      Gtk.gtk_widget_show_all(item);
{
        Pointer style=Gtk.gtk_rc_get_style(item);
        GdkColor gdkColor=new GdkColor();
        boolean success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        if (!success) {
          success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        }
        if (success) {
          int red=gdkColor.red & 0x0000FFFF;
          int green=gdkColor.green & 0x0000FFFF;
          int blue=gdkColor.blue & 0x0000FFFF;
          red=(red >> 8) & 0xFF;
          green=(green >> 8) & 0xFF;
          blue=(blue >> 8) & 0xFF;
          color.set(new Color(red,green,blue));
          Gtk.gtk_widget_destroy(item);
          return;
        }
      }
      if (Gtk.isGtk3) {
        Pointer context=Gtk.gtk_widget_get_style_context(item);
        int state=Gtk3.gtk_style_context_get_state(context);
        GdkRGBAColor gdkColor=new GdkRGBAColor();
        boolean success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (success) {
          color.set(new Color((float)gdkColor.red,(float)gdkColor.green,(float)gdkColor.blue,(float)gdkColor.alpha));
        }
 else {
          Gtk3.gtk_style_context_get_color(context,state,gdkColor.getPointer());
          if ((gdkColor.red == 0.0 && gdkColor.green == 0.0 && gdkColor.blue == 0.0) || gdkColor.alpha == 0.0) {
          }
 else {
            color.set(new Color((float)gdkColor.red,(float)gdkColor.green,(float)gdkColor.blue,(float)gdkColor.alpha));
          }
        }
      }
      Gtk.gtk_widget_destroy(item);
    }
  }
);
  Color color1=color.get();
  if (color1 != null) {
    return color1;
  }
  SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  return Color.BLACK;
}","/** 
 * @return the widget color of text for the current theme, or black. It is important that this is called AFTER GTK has been initialized.
 */
public static Color getCurrentThemeTextColor(){
  final AtomicReference<Color> color=new AtomicReference<Color>(null);
  Gtk.dispatchAndWait(new Runnable(){
    @Override public void run(){
      if (Gtk.isGtk3) {
        Color c=getFromCss();
        if (c != null) {
          System.err.println(""String_Node_Str"");
          color.set(c);
          return;
        }
      }
      Color c=getFromColorScheme();
      if (c != null) {
        System.err.println(""String_Node_Str"");
        color.set(c);
        return;
      }
      Pointer offscreen=Gtk.gtk_offscreen_window_new();
      final Pointer item=Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str"");
      Gtk.gtk_container_add(offscreen,item);
      Gtk.gtk_widget_show_all(item);
{
        Pointer style=Gtk.gtk_rc_get_style(item);
        GdkColor gdkColor=new GdkColor();
        boolean success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        if (!success) {
          success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_lookup_color(style,""String_Node_Str"",gdkColor.getPointer());
        }
        if (success) {
          int red=gdkColor.red & 0x0000FFFF;
          int green=gdkColor.green & 0x0000FFFF;
          int blue=gdkColor.blue & 0x0000FFFF;
          red=(red >> 8) & 0xFF;
          green=(green >> 8) & 0xFF;
          blue=(blue >> 8) & 0xFF;
          color.set(new Color(red,green,blue));
          Gtk.gtk_widget_destroy(item);
          return;
        }
      }
      if (Gtk.isGtk3) {
        Pointer context=Gtk.gtk_widget_get_style_context(item);
        int state=Gtk3.gtk_style_context_get_state(context);
        GdkRGBAColor gdkColor=new GdkRGBAColor();
        boolean success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (!success) {
          success=Gtk.gtk_style_context_lookup_color(context,""String_Node_Str"",gdkColor.getPointer());
        }
        if (success) {
          color.set(new Color((float)gdkColor.red,(float)gdkColor.green,(float)gdkColor.blue,(float)gdkColor.alpha));
        }
 else {
          Gtk3.gtk_style_context_get_color(context,state,gdkColor.getPointer());
          if ((gdkColor.red == 0.0 && gdkColor.green == 0.0 && gdkColor.blue == 0.0) || gdkColor.alpha == 0.0) {
          }
 else {
            color.set(new Color((float)gdkColor.red,(float)gdkColor.green,(float)gdkColor.blue,(float)gdkColor.alpha));
          }
        }
      }
      Gtk.gtk_widget_destroy(item);
    }
  }
);
  Color color1=color.get();
  if (color1 != null) {
    System.err.println(""String_Node_Str"" + color1);
    return color1;
  }
  SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  return Color.BLACK;
}"
96231,"@SuppressWarnings(""String_Node_Str"") SwingMenu(final SwingMenu parent,final Menu entry){
  this.parent=parent;
  if (parent == null) {
    TrayPopup trayPopup=new TrayPopup();
    if (ImageUtils.ENTRY_FONT != null) {
      trayPopup.setFont(ImageUtils.ENTRY_FONT);
    }
    if (SystemTray.SWING_UI != null) {
      trayPopup.setUI(SystemTray.SWING_UI.getMenuUI(trayPopup,null));
    }
    this._native=trayPopup;
  }
 else {
    JMenu jMenu=new JMenu();
    JPopupMenu popupMenu=jMenu.getPopupMenu();
    jMenu.setFont(ImageUtils.ENTRY_FONT);
    if (SystemTray.SWING_UI != null) {
      jMenu.setUI(SystemTray.SWING_UI.getItemUI(jMenu,entry));
      popupMenu.setUI(SystemTray.SWING_UI.getMenuUI(popupMenu,entry));
    }
    this._native=jMenu;
    parent._native.add(jMenu);
  }
}","@SuppressWarnings(""String_Node_Str"") SwingMenu(final SwingMenu parent,final Menu entry){
  this.parent=parent;
  if (parent == null) {
    TrayPopup trayPopup=new TrayPopup();
    if (SystemTray.SWING_UI != null) {
      trayPopup.setUI(SystemTray.SWING_UI.getMenuUI(trayPopup,null));
    }
    this._native=trayPopup;
  }
 else {
    JMenu jMenu=new JMenu();
    JPopupMenu popupMenu=jMenu.getPopupMenu();
    if (SystemTray.SWING_UI != null) {
      jMenu.setUI(SystemTray.SWING_UI.getItemUI(jMenu,entry));
      popupMenu.setUI(SystemTray.SWING_UI.getMenuUI(popupMenu,entry));
    }
    this._native=jMenu;
    parent._native.add(jMenu);
  }
}"
96232,"SwingMenuItem(final SwingMenu parent,Entry entry){
  this.parent=parent;
  if (ImageUtils.ENTRY_FONT != null) {
    _native.setFont(ImageUtils.ENTRY_FONT);
  }
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native);
  if (transparentIcon == null) {
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    transparentIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(transparentIcon);
}","SwingMenuItem(final SwingMenu parent,Entry entry){
  this.parent=parent;
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native);
  if (transparentIcon == null) {
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    transparentIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(transparentIcon);
}"
96233,"SwingMenuItemCheckbox(final SwingMenu parent,final Entry entry){
  this.parent=parent;
  if (ImageUtils.ENTRY_FONT != null) {
    _native.setFont(ImageUtils.ENTRY_FONT);
  }
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native);
  if (checkedIcon == null) {
    File checkedFile=ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,ImageUtils.class.getResource(""String_Node_Str""));
    checkedIcon=new ImageIcon(checkedFile.getAbsolutePath());
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    uncheckedIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(uncheckedIcon);
}","SwingMenuItemCheckbox(final SwingMenu parent,final Entry entry){
  this.parent=parent;
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native);
  if (checkedIcon == null) {
    File checkedFile=ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,ImageUtils.class.getResource(""String_Node_Str""));
    checkedIcon=new ImageIcon(checkedFile.getAbsolutePath());
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    uncheckedIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(uncheckedIcon);
}"
96234,"SwingMenuItemStatus(final SwingMenu parent,final Entry entry){
  this.parent=parent;
  if (ImageUtils.ENTRY_FONT != null) {
    _native.setFont(ImageUtils.ENTRY_FONT);
  }
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native,0);
  Font font=_native.getFont();
  Font font1=font.deriveFont(Font.BOLD);
  _native.setFont(font1);
  _native.setEnabled(false);
}","SwingMenuItemStatus(final SwingMenu parent,final Entry entry){
  this.parent=parent;
  if (SystemTray.SWING_UI != null) {
    _native.setUI(SystemTray.SWING_UI.getItemUI(_native,entry));
  }
  parent._native.add(_native,0);
  Font font=_native.getFont();
  Font font1=font.deriveFont(Font.BOLD);
  _native.setFont(font1);
  _native.setEnabled(false);
}"
96235,"public static void determineIconSize(){
  double trayScalingFactor=0;
  double menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      int[] version=OSUtil.Windows.getVersion();
      if (version[0] <= 5) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 && version[1] == 0) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 && version[1] <= 2) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=4;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        menuScalingFactor=((double)dpiX) / 96.0;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",Arrays.toString(version));
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux() || OS.isUnix()) {
      String XDG=System.getenv(""String_Node_Str"");
      if (XDG == null) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          XDG=""String_Node_Str"";
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          trayScalingFactor=2;
        }
 else         if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length());
              trayScalingFactor=Integer.parseInt(value);
              menuScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        int fedoraVersion=OSUtil.Linux.getFedoraVersion();
        if (trayScalingFactor == 0 && fedoraVersion >= 23) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"" + fedoraVersion);
          }
          trayScalingFactor=2;
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height;
      if (!SwingUtilities.isEventDispatchThread()) {
        final AtomicInteger h=new AtomicInteger(0);
        SwingUtil.invokeAndWaitQuietly(new Runnable(){
          @Override public void run(){
            h.set((int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight());
          }
        }
);
        height=h.get();
      }
 else {
        height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      }
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=(int)(SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor);
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=(int)(SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor);
  }
 else {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
  if (OS.isWindows()) {
    Font font=new JMenuItem().getFont().deriveFont(Font.PLAIN);
    if (menuScalingFactor > 1) {
      font=ImageUtils.getFontForSpecificHeight(font,ENTRY_SIZE);
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",font.getSize(),ENTRY_SIZE);
      }
    }
 else     if (SystemTray.DEBUG) {
      SystemTray.logger.debug(""String_Node_Str"",font.getSize(),ENTRY_SIZE);
    }
    ENTRY_FONT=font;
  }
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}","public static void determineIconSize(){
  double trayScalingFactor=0;
  double menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      int[] version=OSUtil.Windows.getVersion();
      if (version[0] <= 5) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 && version[1] == 0) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 && version[1] <= 2) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=4;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        menuScalingFactor=((double)dpiX) / 96.0;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",Arrays.toString(version));
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux() || OS.isUnix()) {
      String XDG=System.getenv(""String_Node_Str"");
      if (XDG == null) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          XDG=""String_Node_Str"";
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          trayScalingFactor=2;
        }
 else         if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length());
              trayScalingFactor=Integer.parseInt(value);
              menuScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        int fedoraVersion=OSUtil.Linux.getFedoraVersion();
        if (trayScalingFactor == 0 && fedoraVersion >= 23) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"" + fedoraVersion);
          }
          trayScalingFactor=2;
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height;
      if (!SwingUtilities.isEventDispatchThread()) {
        final AtomicInteger h=new AtomicInteger(0);
        SwingUtil.invokeAndWaitQuietly(new Runnable(){
          @Override public void run(){
            h.set((int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight());
          }
        }
);
        height=h.get();
      }
 else {
        height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      }
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=(int)(SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor);
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=(int)(SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor);
  }
 else {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}"
96236,"SwingMenuItem(final SwingMenu parent){
  this.parent=parent;
  parent._native.add(_native);
}","SwingMenuItem(final SwingMenu parent){
  this.parent=parent;
  parent._native.add(_native);
  if (transparentIcon == null) {
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    transparentIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(transparentIcon);
}"
96237,"@Override public void setImage(final MenuItem menuItem){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      File imageFile=menuItem.getImage();
      if (imageFile != null) {
        ImageIcon origIcon=new ImageIcon(imageFile.getAbsolutePath());
        _native.setIcon(origIcon);
      }
 else {
        _native.setIcon(null);
      }
    }
  }
);
}","@Override public void setImage(final MenuItem menuItem){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      File imageFile=menuItem.getImage();
      if (imageFile != null) {
        ImageIcon origIcon=new ImageIcon(imageFile.getAbsolutePath());
        _native.setIcon(origIcon);
      }
 else {
        _native.setIcon(transparentIcon);
      }
    }
  }
);
}"
96238,"/** 
 * Only install a version that specifically moves only our icon next to the clock
 */
public static void install(){
  if (!ENABLE_EXTENSION_INSTALL || !OSUtil.Linux.DesktopEnv.isGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=OSUtil.Linux.DesktopEnv.getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
 else {
        logger.debug(""String_Node_Str"");
        hasSystemTray=false;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  logger.debug(""String_Node_Str"");
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      return;
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        logger.error(""String_Node_Str"");
        return;
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    if (!enabledExtensions.contains(UID)) {
      enabledExtensions.add(UID);
    }
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}","/** 
 * Only install a version that specifically moves only our icon next to the clock
 */
public static void install(){
  if (!ENABLE_EXTENSION_INSTALL || !OSUtil.DesktopEnv.isGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=OSUtil.DesktopEnv.getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
 else {
        logger.debug(""String_Node_Str"");
        hasSystemTray=false;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  logger.debug(""String_Node_Str"");
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      return;
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        logger.error(""String_Node_Str"");
        return;
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    if (!enabledExtensions.contains(UID)) {
      enabledExtensions.add(UID);
    }
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}"
96239,"public static void unInstall(){
  if (!ENABLE_EXTENSION_INSTALL || !OSUtil.Linux.DesktopEnv.isGnome()) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  if (enabledExtensions.contains(UID)) {
    enabledExtensions.remove(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}","public static void unInstall(){
  if (!ENABLE_EXTENSION_INSTALL || !OSUtil.DesktopEnv.isGnome()) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  if (enabledExtensions.contains(UID)) {
    enabledExtensions.remove(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}"
96240,"public static void determineIconSize(){
  int trayScalingFactor=0;
  int menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      int[] version=OSUtil.Windows.getVersion();
      if (version[0] <= 5) {
        trayScalingFactor=1;
      }
 else       if (version[0] == 6 && version[1] == 0) {
        trayScalingFactor=1;
      }
 else       if (version[0] == 6 && version[1] <= 2) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 || (version[0] == 10 && version[1] == 0)) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=8;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        trayScalingFactor=(int)(((double)dpiX) / ((double)96)) * 2;
        menuScalingFactor=trayScalingFactor;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",Arrays.toString(version));
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux()) {
      String XDG=System.getenv(""String_Node_Str"");
      if (XDG == null) {
        double plasmaVersion=OSUtil.Linux.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          XDG=""String_Node_Str"";
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
        double plasmaVersion=OSUtil.Linux.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          trayScalingFactor=2;
        }
 else         if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length());
              trayScalingFactor=Integer.parseInt(value);
              menuScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        int fedoraVersion=OSUtil.Linux.getFedoraVersion();
        if (trayScalingFactor == 0 && fedoraVersion >= 23) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"" + fedoraVersion);
          }
          trayScalingFactor=2;
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height;
      if (!SwingUtilities.isEventDispatchThread()) {
        final AtomicInteger h=new AtomicInteger(0);
        SwingUtil.invokeAndWaitQuietly(new Runnable(){
          @Override public void run(){
            h.set((int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight());
          }
        }
);
        height=h.get();
      }
 else {
        height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      }
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor;
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor;
  }
 else {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}","public static void determineIconSize(){
  int trayScalingFactor=0;
  int menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      int[] version=OSUtil.Windows.getVersion();
      if (version[0] <= 5) {
        trayScalingFactor=1;
      }
 else       if (version[0] == 6 && version[1] == 0) {
        trayScalingFactor=1;
      }
 else       if (version[0] == 6 && version[1] <= 2) {
        trayScalingFactor=2;
      }
 else       if (version[0] == 6 || (version[0] == 10 && version[1] == 0)) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=8;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        trayScalingFactor=(int)(((double)dpiX) / ((double)96)) * 2;
        menuScalingFactor=trayScalingFactor;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",Arrays.toString(version));
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux() || OS.isUnix()) {
      String XDG=System.getenv(""String_Node_Str"");
      if (XDG == null) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          XDG=""String_Node_Str"";
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
        double plasmaVersion=OSUtil.DesktopEnv.getPlasmaVersion();
        if (plasmaVersion > 0) {
          trayScalingFactor=2;
        }
 else         if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length());
              trayScalingFactor=Integer.parseInt(value);
              menuScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        int fedoraVersion=OSUtil.Linux.getFedoraVersion();
        if (trayScalingFactor == 0 && fedoraVersion >= 23) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"" + fedoraVersion);
          }
          trayScalingFactor=2;
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height;
      if (!SwingUtilities.isEventDispatchThread()) {
        final AtomicInteger h=new AtomicInteger(0);
        SwingUtil.invokeAndWaitQuietly(new Runnable(){
          @Override public void run(){
            h.set((int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight());
          }
        }
);
        height=h.get();
      }
 else {
        height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      }
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor;
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor;
  }
 else {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}"
96241,"SwingMenuItemCheckbox(final SwingMenu parent){
  this.parent=parent;
  parent._native.add(_native);
  if (checkedIcon == null) {
    File checkedFile=ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,ImageUtils.class.getResource(""String_Node_Str""));
    checkedIcon=new ImageIcon(checkedFile.getAbsolutePath());
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    uncheckedIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
}","SwingMenuItemCheckbox(final SwingMenu parent){
  this.parent=parent;
  parent._native.add(_native);
  if (checkedIcon == null) {
    File checkedFile=ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,ImageUtils.class.getResource(""String_Node_Str""));
    checkedIcon=new ImageIcon(checkedFile.getAbsolutePath());
    File uncheckedFile=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
    uncheckedIcon=new ImageIcon(uncheckedFile.getAbsolutePath());
  }
  _native.setIcon(uncheckedIcon);
}"
96242,"public static native NativeLong g_signal_connect_object(Pointer instance,String detailed_signal,Callback c_handler,Pointer object,int connect_flags);","public static native void g_signal_connect_object(Pointer instance,String detailed_signal,Callback c_handler,Pointer object,int connect_flags);"
96243,"/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItem(final GtkMenu parent){
  super(Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  nativeLong=Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}","/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItem(final GtkMenu parent){
  super(Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}"
96244,"/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItemCheckbox(final GtkMenu parent){
  super(Gtk.gtk_check_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  nativeLong=Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}","/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItemCheckbox(final GtkMenu parent){
  super(Gtk.gtk_check_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}"
96245,"public _GtkStatusIconNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=false;
          }
 else           if (!visible && enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            Gtk.gtk_status_icon_set_visible(trayIcon,true);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            Gtk.gtk_status_icon_set_visible(trayIcon,false);
            Gobject.g_object_unref(trayIcon);
            trayIcon=null;
            gtkCallbacks.clear();
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(gtkMenu._nativeMenu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  bind(gtkMenu,null,systemTray);
}","public _GtkStatusIconNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=false;
          }
 else           if (!visible && enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            Gtk.gtk_status_icon_set_visible(trayIcon,true);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            Gtk.gtk_status_icon_set_visible(trayIcon,false);
            Gobject.g_object_unref(trayIcon);
            trayIcon=null;
            gtkCallback=null;
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(gtkMenu._nativeMenu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  bind(gtkMenu,null,systemTray);
}"
96246,"@Override public void remove(){
  if (!shuttingDown.getAndSet(true)) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        Gtk.gtk_status_icon_set_visible(trayIcon,false);
        Gobject.g_object_unref(trayIcon);
        trayIcon=null;
        gtkCallbacks.clear();
      }
    }
);
    super.remove();
    Gtk.shutdownGui();
  }
}","@Override public void remove(){
  if (!shuttingDown.getAndSet(true)) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        Gtk.gtk_status_icon_set_visible(trayIcon,false);
        Gobject.g_object_unref(trayIcon);
        trayIcon=null;
        gtkCallback=null;
      }
    }
);
    super.remove();
    Gtk.shutdownGui();
  }
}"
96247,"private void hookMenuOpen(){
  PointerByReference menuServer=new PointerByReference();
  PointerByReference rootMenuItem=new PointerByReference();
  Gobject.g_object_get(appIndicator.getPointer(),""String_Node_Str"",menuServer,null);
  Gobject.g_object_get(menuServer.getValue(),""String_Node_Str"",rootMenuItem,null);
  gtkCallback=new GEventCallback(){
    @Override public void callback(    Pointer notUsed,    final GdkEventButton event){
      Gtk.gtk_menu_shell_deactivate(dummyMenu);
      SwingUtil.invokeLater(popupRunnable);
    }
  }
;
  nativeLong=Gobject.g_signal_connect_object(rootMenuItem.getValue(),""String_Node_Str"",gtkCallback,null,0);
}","private void hookMenuOpen(){
  PointerByReference menuServer=new PointerByReference();
  PointerByReference rootMenuItem=new PointerByReference();
  Gobject.g_object_get(appIndicator.getPointer(),""String_Node_Str"",menuServer,null);
  Gobject.g_object_get(menuServer.getValue(),""String_Node_Str"",rootMenuItem,null);
  gtkCallback=new GEventCallback(){
    @Override public void callback(    Pointer notUsed,    final GdkEventButton event){
      Gtk.gtk_menu_shell_deactivate(dummyMenu);
      SwingUtil.invokeLater(popupRunnable);
    }
  }
;
  Gobject.g_signal_connect_object(rootMenuItem.getValue(),""String_Node_Str"",gtkCallback,null,0);
}"
96248,"public _GtkStatusIconTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            SwingUtil.invokeLater(popupRunnable);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=false;
              }
 else               if (!visible && enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                Gtk.gtk_status_icon_set_visible(trayIcon,true);
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                Gtk.gtk_status_icon_set_visible(trayIcon,false);
                Gobject.g_object_unref(trayIcon);
                trayIcon=null;
                gtkCallbacks.clear();
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      JPopupMenu popupMenu=(JPopupMenu)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,0);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
}","public _GtkStatusIconTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            SwingUtil.invokeLater(popupRunnable);
          }
        }
      }
;
      Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=false;
              }
 else               if (!visible && enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                Gtk.gtk_status_icon_set_visible(trayIcon,true);
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                Gtk.gtk_status_icon_set_visible(trayIcon,false);
                Gobject.g_object_unref(trayIcon);
                trayIcon=null;
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      JPopupMenu popupMenu=(JPopupMenu)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,0);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
}"
96249,"@Override public void remove(){
  if (!shuttingDown.getAndSet(true)) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        Gtk.gtk_status_icon_set_visible(trayIcon,false);
        Gobject.g_object_unref(trayIcon);
        trayIcon=null;
        gtkCallbacks.clear();
      }
    }
);
    Gtk.shutdownGui();
    super.remove();
  }
}","@Override public void remove(){
  if (!shuttingDown.getAndSet(true)) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        Gtk.gtk_status_icon_set_visible(trayIcon,false);
        Gobject.g_object_unref(trayIcon);
        trayIcon=null;
      }
    }
);
    Gtk.shutdownGui();
    super.remove();
  }
}"
96250,"public _AppIndicatorNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    /** 
 * MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu ALWAYS CALLED ON THE EDT
 */
    protected final void onMenuAdded(    final Pointer menu){
      AppIndicator.app_indicator_set_menu(appIndicator,menu);
    }
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
            visible=false;
          }
 else           if (!visible && enabled) {
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        final AppIndicatorInstanceStruct savedAppIndicator=appIndicator;
        appIndicator=null;
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            AppIndicator.app_indicator_set_status(savedAppIndicator,AppIndicator.STATUS_PASSIVE);
            Pointer p=savedAppIndicator.getPointer();
            Gobject.g_object_unref(p);
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
    }
  }
);
  Gtk.waitForStartup();
  if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
      }
    }
);
  }
  bind(gtkMenu,null,systemTray);
}","public _AppIndicatorNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    /** 
 * MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu ALWAYS CALLED ON THE EDT
 */
    protected final void onMenuAdded(    final Pointer menu){
      AppIndicator.app_indicator_set_menu(appIndicator,menu);
      if (!setName) {
        setName=true;
        AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
      }
    }
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
            visible=false;
          }
 else           if (!visible && enabled) {
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        final AppIndicatorInstanceStruct savedAppIndicator=appIndicator;
        appIndicator=null;
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            AppIndicator.app_indicator_set_status(savedAppIndicator,AppIndicator.STATUS_PASSIVE);
            Pointer p=savedAppIndicator.getPointer();
            Gobject.g_object_unref(p);
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
    }
  }
);
  Gtk.waitForStartup();
  bind(gtkMenu,null,systemTray);
}"
96251,"/** 
 * MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu ALWAYS CALLED ON THE EDT
 */
protected final void onMenuAdded(final Pointer menu){
  AppIndicator.app_indicator_set_menu(appIndicator,menu);
}","/** 
 * MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu ALWAYS CALLED ON THE EDT
 */
protected final void onMenuAdded(final Pointer menu){
  AppIndicator.app_indicator_set_menu(appIndicator,menu);
  if (!setName) {
    setName=true;
    AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
  }
}"
96252,"@Override public void run(){
  AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
  AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
}","@Override public void run(){
  File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
  String id=System.nanoTime() + ""String_Node_Str"";
  appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
}"
96253,"public _AppIndicatorTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
      createAppIndicatorMenu();
    }
  }
);
  Gtk.waitForStartup();
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
                visible=false;
              }
 else               if (!visible && enabled) {
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
                hookMenuOpen();
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            final AppIndicatorInstanceStruct savedAppIndicator=appIndicator;
            appIndicator=null;
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                AppIndicator.app_indicator_set_status(savedAppIndicator,AppIndicator.STATUS_PASSIVE);
                Pointer p=savedAppIndicator.getPointer();
                Gobject.g_object_unref(p);
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      TrayPopup popupMenu=(TrayPopup)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupMenu.setOnHideRunnable(new Runnable(){
        @Override public void run(){
          if (appIndicator == null) {
            return;
          }
          Gtk.dispatchAndWait(new Runnable(){
            @Override public void run(){
              createAppIndicatorMenu();
              hookMenuOpen();
            }
          }
);
        }
      }
);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,SystemTray.DEFAULT_TRAY_SIZE);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
  if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    Gtk.dispatch(new Runnable(){
      @Override public void run(){
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
      }
    }
);
  }
}","public _AppIndicatorTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
      createAppIndicatorMenu();
    }
  }
);
  Gtk.waitForStartup();
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
                visible=false;
              }
 else               if (!visible && enabled) {
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
                hookMenuOpen();
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            final AppIndicatorInstanceStruct savedAppIndicator=appIndicator;
            appIndicator=null;
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                AppIndicator.app_indicator_set_status(savedAppIndicator,AppIndicator.STATUS_PASSIVE);
                Pointer p=savedAppIndicator.getPointer();
                Gobject.g_object_unref(p);
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      TrayPopup popupMenu=(TrayPopup)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupMenu.setOnHideRunnable(new Runnable(){
        @Override public void run(){
          if (appIndicator == null) {
            return;
          }
          Gtk.dispatchAndWait(new Runnable(){
            @Override public void run(){
              createAppIndicatorMenu();
              hookMenuOpen();
            }
          }
);
        }
      }
);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,SystemTray.DEFAULT_TRAY_SIZE);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
}"
96254,"@Override public void run(){
  AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
  AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
}","@Override public void run(){
  Point point=MouseInfo.getPointerInfo().getLocation();
  TrayPopup popupMenu=(TrayPopup)swingMenu._native;
  popupMenu.doShow(point,SystemTray.DEFAULT_TRAY_SIZE);
}"
96255,"private void createAppIndicatorMenu(){
  dummyMenu=Gtk.gtk_menu_new();
  Pointer item=Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str"");
  Gtk.gtk_menu_shell_append(dummyMenu,item);
  Gtk.gtk_widget_show_all(item);
  AppIndicator.app_indicator_set_menu(appIndicator,dummyMenu);
}","private void createAppIndicatorMenu(){
  dummyMenu=Gtk.gtk_menu_new();
  Pointer item=Gtk.gtk_image_menu_item_new_with_mnemonic(""String_Node_Str"");
  Gtk.gtk_menu_shell_append(dummyMenu,item);
  Gtk.gtk_widget_show_all(item);
  AppIndicator.app_indicator_set_menu(appIndicator,dummyMenu);
  if (!setName) {
    setName=true;
    AppIndicator.app_indicator_set_title(appIndicator,""String_Node_Str"");
  }
}"
96256,"private void setImage_(final File imageFile){
  this.imageFile=imageFile;
  if (peer != null) {
    ((MenuItemPeer)peer).setImage(this);
  }
}","protected void setImage_(final File imageFile){
  this.imageFile=imageFile;
  if (peer != null) {
    ((MenuItemPeer)peer).setImage(this);
  }
}"
96257,"public static native void gtk_menu_shell_deactivate(Pointer menu_shell,Pointer child);",public static native void gtk_menu_shell_deactivate(Pointer menuShell);
96258,"public static native void gtk_container_remove(Pointer menu,Pointer subItem);","public static native void gtk_container_remove(Pointer parentWidget,Pointer widget);"
96259,"GtkBaseMenuItem(){
  if (transparentIcon == null) {
    transparentIcon=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
  }
}","GtkBaseMenuItem(final Pointer _native){
  this._native=_native;
  if (transparentIcon == null) {
    transparentIcon=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
  }
}"
96260,"@Override public void run(){
  if (spacerImage != null) {
    Gtk.gtk_widget_destroy(spacerImage);
    spacerImage=null;
  }
}","@Override public void run(){
  if (spacerImage != null) {
    Gtk.gtk_container_remove(_native,spacerImage);
    spacerImage=null;
  }
}"
96261,"/** 
 * the menu entry looks FUNKY when there are a mis-match of entries WITH and WITHOUT images. This is primarily only with AppIndicators, although not always. <p> called on the DISPATCH thread
 */
public void setSpacerImage(final Pointer _native,final boolean everyoneElseHasImages){
  if (hasLegitImage) {
    return;
  }
  if (spacerImage != null) {
    Gtk.gtk_widget_destroy(spacerImage);
    spacerImage=null;
    Gtk.gtk_widget_show_all(_native);
  }
  if (everyoneElseHasImages) {
    spacerImage=Gtk.gtk_image_new_from_file(transparentIcon.getAbsolutePath());
    Gtk.gtk_image_menu_item_set_image(_native,spacerImage);
    Gtk.gtk_image_menu_item_set_always_show_image(_native,true);
  }
  Gtk.gtk_widget_show_all(_native);
}","/** 
 * the menu entry looks FUNKY when there are a mis-match of entries WITH and WITHOUT images. This is primarily only with AppIndicators, although not always. <p> called on the DISPATCH thread
 */
public void setSpacerImage(final boolean everyoneElseHasImages){
  if (hasLegitImage) {
    return;
  }
  if (spacerImage != null) {
    Gtk.gtk_container_remove(_native,spacerImage);
    spacerImage=null;
    Gtk.gtk_widget_show_all(_native);
  }
  if (everyoneElseHasImages) {
    spacerImage=Gtk.gtk_image_new_from_file(transparentIcon.getAbsolutePath());
    Gtk.gtk_image_menu_item_set_image(_native,spacerImage);
    Gtk.gtk_image_menu_item_set_always_show_image(_native,true);
  }
  Gtk.gtk_widget_show_all(_native);
}"
96262,"void onCreateMenu(final Pointer parentNative,final Pointer _native,final boolean hasImagesInMenu){
  setSpacerImage(_native,hasImagesInMenu);
  Gtk.gtk_menu_shell_append(parentNative,_native);
  Gobject.g_object_ref_sink(_native);
  Gtk.gtk_widget_show_all(_native);
}","void onCreateMenu(final Pointer parentNative,final boolean hasImagesInMenu){
  setSpacerImage(hasImagesInMenu);
  Gtk.gtk_menu_shell_append(parentNative,_native);
  Gobject.g_object_ref_sink(_native);
  Gtk.gtk_widget_show_all(_native);
}"
96263,"void onDeleteMenu(final Pointer parentNative,final Pointer _native){
  Gobject.g_object_force_floating(_native);
  Gtk.gtk_container_remove(parentNative,_native);
}","void onDeleteMenu(final Pointer parentNative){
  Gobject.g_object_force_floating(_native);
  Gtk.gtk_container_remove(parentNative,_native);
}"
96264,"@Override public void remove(){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (spacerImage != null) {
        Gtk.gtk_widget_destroy(spacerImage);
        spacerImage=null;
      }
    }
  }
);
}","@Override public void remove(){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (spacerImage != null) {
        Gtk.gtk_container_remove(_native,spacerImage);
        spacerImage=null;
      }
    }
  }
);
}"
96265,"public _GtkStatusIconNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=false;
          }
 else           if (!visible && enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            Gtk.gtk_status_icon_set_visible(trayIcon,true);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            Gtk.gtk_status_icon_set_visible(trayIcon,false);
            Gobject.g_object_unref(trayIcon);
            trayIcon=null;
            gtkCallbacks.clear();
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(gtkMenu._nativeMenu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (SystemTray.isJavaFxLoaded) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  bind(gtkMenu,null,systemTray);
}","public _GtkStatusIconNativeTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  final GtkMenu gtkMenu=new GtkMenu(){
    @Override public void setEnabled(    final MenuItem menuItem){
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          boolean enabled=menuItem.getEnabled();
          if (visible && !enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=false;
          }
 else           if (!visible && enabled) {
            Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
            visible=true;
          }
        }
      }
);
    }
    @Override public void setImage(    final MenuItem menuItem){
      imageFile=menuItem.getImage();
      if (imageFile == null) {
        return;
      }
      Gtk.dispatch(new Runnable(){
        @Override public void run(){
          Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
          if (!isActive) {
            isActive=true;
            Gtk.gtk_status_icon_set_visible(trayIcon,true);
          }
        }
      }
);
    }
    @Override public void setText(    final MenuItem menuItem){
    }
    @Override public void setShortcut(    final MenuItem menuItem){
    }
    @Override public void remove(){
      if (!shuttingDown.getAndSet(true)) {
        Gtk.dispatch(new Runnable(){
          @Override public void run(){
            Gtk.gtk_status_icon_set_visible(trayIcon,false);
            Gobject.g_object_unref(trayIcon);
            trayIcon=null;
            gtkCallbacks.clear();
          }
        }
);
        super.remove();
        Gtk.shutdownGui();
      }
    }
  }
;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(gtkMenu._nativeMenu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  bind(gtkMenu,null,systemTray);
}"
96266,"@Override public void run(){
  Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
  if (SystemTray.isJavaFxLoaded) {
    Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
  }
}","@Override public void run(){
  Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
  }
}"
96267,"public _GtkStatusIconTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            SwingUtil.invokeLater(popupRunnable);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (SystemTray.isJavaFxLoaded) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=false;
              }
 else               if (!visible && enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                Gtk.gtk_status_icon_set_visible(trayIcon,true);
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                Gtk.gtk_status_icon_set_visible(trayIcon,false);
                Gobject.g_object_unref(trayIcon);
                trayIcon=null;
                gtkCallbacks.clear();
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      JPopupMenu popupMenu=(JPopupMenu)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,0);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
}","public _GtkStatusIconTray(final SystemTray systemTray){
  super();
  Gtk.startGui();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      trayIcon=Gtk.gtk_status_icon_new();
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            SwingUtil.invokeLater(popupRunnable);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      final SwingMenu swingMenu=new SwingMenu(null){
        @Override public void setEnabled(        final MenuItem menuItem){
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              boolean enabled=menuItem.getEnabled();
              if (visible && !enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=false;
              }
 else               if (!visible && enabled) {
                Gtk.gtk_status_icon_set_visible(trayIcon,enabled);
                visible=true;
              }
            }
          }
);
        }
        @Override public void setImage(        final MenuItem menuItem){
          imageFile=menuItem.getImage();
          if (imageFile == null) {
            return;
          }
          Gtk.dispatch(new Runnable(){
            @Override public void run(){
              Gtk.gtk_status_icon_set_from_file(trayIcon,imageFile.getAbsolutePath());
              if (!isActive) {
                isActive=true;
                Gtk.gtk_status_icon_set_visible(trayIcon,true);
              }
            }
          }
);
          SwingUtil.invokeLater(new Runnable(){
            @Override public void run(){
              ((TrayPopup)_native).setTitleBarImage(imageFile);
            }
          }
);
        }
        @Override public void setText(        final MenuItem menuItem){
        }
        @Override public void setShortcut(        final MenuItem menuItem){
        }
        @Override public void remove(){
          if (!shuttingDown.getAndSet(true)) {
            Gtk.dispatch(new Runnable(){
              @Override public void run(){
                Gtk.gtk_status_icon_set_visible(trayIcon,false);
                Gobject.g_object_unref(trayIcon);
                trayIcon=null;
                gtkCallbacks.clear();
              }
            }
);
            Gtk.shutdownGui();
            super.remove();
          }
        }
      }
;
      JPopupMenu popupMenu=(JPopupMenu)swingMenu._native;
      popupMenu.pack();
      popupMenu.setFocusable(true);
      popupRunnable=new Runnable(){
        @Override public void run(){
          Point point=MouseInfo.getPointerInfo().getLocation();
          TrayPopup popupMenu=(TrayPopup)swingMenu._native;
          popupMenu.doShow(point,0);
        }
      }
;
      bind(swingMenu,null,systemTray);
    }
  }
);
}"
96268,"/** 
 * Best practices for GTK, is to call EVERYTHING for it on the GTK THREAD. This accomplishes that.
 */
public static void dispatch(final Runnable runnable){
  if (alreadyRunningGTK) {
    if (SystemTray.isJavaFxLoaded) {
      if (JavaFX.isEventThread()) {
        runnable.run();
      }
 else {
        JavaFX.dispatch(runnable);
      }
      return;
    }
    if (SystemTray.isSwtLoaded) {
      if (Swt.isEventThread()) {
        runnable.run();
        return;
      }
    }
  }
  if (isDispatch) {
    runnable.run();
  }
 else {
    final FuncCallback callback=new FuncCallback(){
      @Override public int callback(      final Pointer data){
synchronized (gtkCallbacks) {
          gtkCallbacks.removeFirst();
          isDispatch=true;
          try {
            runnable.run();
          }
  finally {
            isDispatch=false;
            return Gtk.FALSE;
          }
        }
      }
    }
;
synchronized (gtkCallbacks) {
      gtkCallbacks.offer(callback);
      gdk_threads_add_idle_full(100,callback,null,null);
    }
  }
}","/** 
 * Best practices for GTK, is to call EVERYTHING for it on the GTK THREAD. This accomplishes that.
 */
public static void dispatch(final Runnable runnable){
  if (alreadyRunningGTK) {
    if (SystemTray.isJavaFxLoaded) {
      if (JavaFX.isEventThread()) {
        runnable.run();
      }
 else {
        JavaFX.dispatch(runnable);
      }
      return;
    }
    if (SystemTray.isSwtLoaded) {
      if (Swt.isEventThread()) {
        runnable.run();
        return;
      }
    }
  }
  if (isDispatch.get()) {
    runnable.run();
  }
 else {
    final FuncCallback callback=new FuncCallback(){
      @Override public int callback(      final Pointer data){
synchronized (gtkCallbacks) {
          gtkCallbacks.removeFirst();
        }
        isDispatch.set(true);
        try {
          runnable.run();
        }
  finally {
          isDispatch.set(false);
        }
        return Gtk.FALSE;
      }
    }
;
synchronized (gtkCallbacks) {
      gtkCallbacks.offer(callback);
    }
    gdk_threads_add_idle_full(100,callback,null,null);
  }
}"
96269,"public static void dispatchAndWait(final Runnable runnable){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      try {
        runnable.run();
      }
  finally {
        countDownLatch.countDown();
      }
    }
  }
);
  try {
    if (!countDownLatch.await(TIMEOUT,TimeUnit.SECONDS)) {
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"",new RuntimeException());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    SystemTray.logger.error(""String_Node_Str"",new Exception());
  }
}","public static void dispatchAndWait(final Runnable runnable){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      try {
        runnable.run();
      }
  finally {
        countDownLatch.countDown();
      }
    }
  }
);
  try {
    if (!countDownLatch.await(TIMEOUT,TimeUnit.SECONDS)) {
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"",new Exception());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    SystemTray.logger.error(""String_Node_Str"",new Exception());
  }
}"
96270,"/** 
 * Waits for the GUI to finish loading
 */
public static void waitForStartup(){
  final CountDownLatch blockUntilStarted=new CountDownLatch(1);
  dispatch(new Runnable(){
    @Override public void run(){
      blockUntilStarted.countDown();
    }
  }
);
  if (SystemTray.isJavaFxLoaded) {
    if (!JavaFX.isEventThread()) {
      try {
        while (true) {
          Thread.sleep(100);
synchronized (gtkCallbacks) {
            if (gtkCallbacks.isEmpty()) {
              break;
            }
          }
        }
        if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",new RuntimeException());
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (SystemTray.isSwtLoaded) {
    if (!Swt.isEventThread()) {
      try {
        while (true) {
          Thread.sleep(100);
synchronized (gtkCallbacks) {
            if (gtkCallbacks.isEmpty()) {
              break;
            }
          }
        }
        if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",new RuntimeException());
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    try {
      while (true) {
        Thread.sleep(100);
synchronized (gtkCallbacks) {
          if (gtkCallbacks.isEmpty()) {
            break;
          }
        }
      }
      if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",new RuntimeException());
        }
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Waits for the GUI to finish loading
 */
public static void waitForStartup(){
  final CountDownLatch blockUntilStarted=new CountDownLatch(1);
  dispatch(new Runnable(){
    @Override public void run(){
      blockUntilStarted.countDown();
    }
  }
);
  if (SystemTray.isJavaFxLoaded) {
    if (!JavaFX.isEventThread()) {
      try {
        while (true) {
          Thread.sleep(100);
synchronized (gtkCallbacks) {
            if (gtkCallbacks.isEmpty()) {
              break;
            }
          }
        }
        if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",new Exception());
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (SystemTray.isSwtLoaded) {
    if (!Swt.isEventThread()) {
      try {
        while (true) {
          Thread.sleep(100);
synchronized (gtkCallbacks) {
            if (gtkCallbacks.isEmpty()) {
              break;
            }
          }
        }
        if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",new Exception());
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    try {
      while (true) {
        Thread.sleep(100);
synchronized (gtkCallbacks) {
          if (gtkCallbacks.isEmpty()) {
            break;
          }
        }
      }
      if (!blockUntilStarted.await(10,TimeUnit.SECONDS)) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",new Exception());
        }
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
96271,"@Override public int callback(final Pointer data){
synchronized (gtkCallbacks) {
    gtkCallbacks.removeFirst();
    isDispatch=true;
    try {
      runnable.run();
    }
  finally {
      isDispatch=false;
      return Gtk.FALSE;
    }
  }
}","@Override public int callback(final Pointer data){
synchronized (gtkCallbacks) {
    gtkCallbacks.removeFirst();
  }
  isDispatch.set(true);
  try {
    runnable.run();
  }
  finally {
    isDispatch.set(false);
  }
  return Gtk.FALSE;
}"
96272,"/** 
 * required to properly setup the dispatch flag when using native menus
 * @param callback will never be null.
 */
public static void proxyClick(final Entry menuEntry,final ActionListener callback){
  Gtk.isDispatch=true;
  try {
    callback.actionPerformed(new ActionEvent(menuEntry,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
  }
  finally {
    Gtk.isDispatch=false;
  }
}","/** 
 * required to properly setup the dispatch flag when using native menus
 * @param callback will never be null.
 */
public static void proxyClick(final Entry menuEntry,final ActionListener callback){
  Gtk.isDispatch.set(true);
  try {
    callback.actionPerformed(new ActionEvent(menuEntry,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
  }
  finally {
    Gtk.isDispatch.set(false);
  }
}"
96273,"public static List<String> getEnabledExtensions(){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  final StringBuilder stringBuilder=new StringBuilder(output);
  int extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex > 0) {
    stringBuilder.delete(extensionIndex,stringBuilder.length());
  }
  extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex > 0) {
    stringBuilder.delete(0,extensionIndex + 1);
  }
  String installedExtensions=stringBuilder.toString();
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",installedExtensions);
  }
  String[] split=installedExtensions.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    final String s=split[i];
    int i1=s.indexOf(""String_Node_Str"");
    int i2=s.lastIndexOf(""String_Node_Str"");
    if (i1 == 1 && i2 == s.length() - 1) {
      split[i]=s.substring(1,s.length() - 2);
    }
  }
  return Arrays.asList(split);
}","public static List<String> getEnabledExtensions(){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  final StringBuilder stringBuilder=new StringBuilder(output);
  int extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex > 0) {
    stringBuilder.delete(extensionIndex,stringBuilder.length());
  }
  extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex >= 0) {
    stringBuilder.delete(0,extensionIndex + 1);
  }
  String installedExtensions=stringBuilder.toString();
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",installedExtensions);
  }
  String[] split=installedExtensions.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    final String s=split[i];
    int i1=s.indexOf(""String_Node_Str"");
    int i2=s.lastIndexOf(""String_Node_Str"");
    if (i1 == 0 && i2 == s.length() - 1) {
      split[i]=s.substring(1,s.length() - 1);
    }
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",split[i]);
    }
  }
  return new ArrayList<String>(Arrays.asList(split));
}"
96274,"public static void install(){
  if (!isReallyGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      throw new RuntimeException(msg);
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    enabledExtensions.add(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}","public static void install(){
  if (!isReallyGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
 else {
        logger.debug(""String_Node_Str"");
        hasSystemTray=false;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      return;
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        logger.error(""String_Node_Str"");
        return;
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    enabledExtensions.add(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}"
96275,"public static void fixMacOS(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  if (!(vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str""))) {
    return;
  }
  boolean isMacTrayLoaded=false;
  try {
    java.lang.reflect.Method m=ClassLoader.class.getDeclaredMethod(""String_Node_Str"",String.class);
    m.setAccessible(true);
    ClassLoader cl=ClassLoader.getSystemClassLoader();
    isMacTrayLoaded=(null != m.invoke(cl,""String_Node_Str"")) || (null != m.invoke(cl,""String_Node_Str""));
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",e);
    }
  }
  if (isMacTrayLoaded) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    java.awt.Robot robot=new java.awt.Robot();
    robot.mousePress(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
  }
 catch (  AWTException e) {
    e.printStackTrace();
  }
  ClassPool pool=ClassPool.getDefault();
  byte[] mouseEventBytes;
  try {
    CtClass trayClass=pool.get(""String_Node_Str"");
    trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
    trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
    CtField ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    CtMethod ctMethodGet=trayClass.getDeclaredMethod(""String_Node_Str"");
    String nsEventFQND;
    if (OS.javaVersion <= 7) {
      nsEventFQND=""String_Node_Str"";
    }
 else {
      nsEventFQND=""String_Node_Str"";
    }
    ctMethodGet.setBody(""String_Node_Str"" + nsEventFQND + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    mouseEventBytes=trayClass.toBytecode();
    BootStrapClassLoader.defineClass(mouseEventBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public static void fixMacOS(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  if (!(vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str""))) {
    return;
  }
  boolean isMacTrayLoaded=false;
  try {
    java.lang.reflect.Method m=ClassLoader.class.getDeclaredMethod(""String_Node_Str"",String.class);
    m.setAccessible(true);
    ClassLoader cl=ClassLoader.getSystemClassLoader();
    isMacTrayLoaded=(null != m.invoke(cl,""String_Node_Str"")) || (null != m.invoke(cl,""String_Node_Str""));
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",e);
    }
  }
  if (isMacTrayLoaded) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    java.awt.Robot robot=new java.awt.Robot();
    robot.mousePress(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
  }
 catch (  AWTException e) {
    e.printStackTrace();
  }
  ClassPool pool=ClassPool.getDefault();
  byte[] mouseEventBytes;
  int mouseDelay=75;
  try {
    CtClass trayClass=pool.get(""String_Node_Str"");
    trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
    trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
    CtField ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    CtMethod ctMethodGet=trayClass.getDeclaredMethod(""String_Node_Str"");
    String nsEventFQND;
    if (OS.javaVersion <= 7) {
      nsEventFQND=""String_Node_Str"";
    }
 else {
      nsEventFQND=""String_Node_Str"";
    }
    ctMethodGet.setBody(""String_Node_Str"" + nsEventFQND + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mouseDelay+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    mouseEventBytes=trayClass.toBytecode();
    BootStrapClassLoader.defineClass(mouseEventBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
96276,"/** 
 * required to properly setup the dispatch flag when using native menus
 * @param callback will never be null.
 */
public static void proxyClick(final Entry menuEntry,final ActionListener callback){
  Gtk.isDispatch.set(true);
  try {
    callback.actionPerformed(new ActionEvent(menuEntry,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
  }
  finally {
    Gtk.isDispatch.set(false);
  }
}","/** 
 * required to properly setup the dispatch flag when using native menus
 * @param callback will never be null.
 */
public static void proxyClick(final Entry menuEntry,final ActionListener callback){
  Gtk.isDispatch.set(true);
  try {
    if (menuEntry != null) {
      callback.actionPerformed(new ActionEvent(menuEntry,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
    }
 else {
      callback.actionPerformed(null);
    }
  }
  finally {
    Gtk.isDispatch.set(false);
  }
}"
96277,"@Override public void actionPerformed(ActionEvent e){
  ActionListener cb=menuItem.getCallback();
  if (cb != null) {
    try {
      cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
    }
 catch (    Throwable throwable) {
      SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  menuItem.setChecked(!isChecked);
  ActionListener cb=menuItem.getCallback();
  if (cb != null) {
    try {
      cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
    }
 catch (    Throwable throwable) {
      SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
    }
  }
}"
96278,"@Override public void setChecked(final Checkbox checkbox){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.setState(checkbox.getChecked());
    }
  }
);
}","@Override public void setChecked(final Checkbox menuItem){
  this.isChecked=menuItem.getChecked();
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.setState(isChecked);
    }
  }
);
}"
96279,"@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  if (swingCallback != null) {
    _native.removeActionListener(swingCallback);
  }
  if (menuItem.getCallback() != null) {
    swingCallback=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        ActionListener cb=menuItem.getCallback();
        if (cb != null) {
          try {
            cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
          }
 catch (          Throwable throwable) {
            SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
          }
        }
      }
    }
;
    _native.addActionListener(swingCallback);
  }
 else {
    swingCallback=null;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  if (callback != null) {
    _native.removeActionListener(callback);
  }
  callback=menuItem.getCallback();
  if (callback != null) {
    callback=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        menuItem.setChecked(!isChecked);
        ActionListener cb=menuItem.getCallback();
        if (cb != null) {
          try {
            cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
          }
 catch (          Throwable throwable) {
            SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
          }
        }
      }
    }
;
    _native.addActionListener(callback);
  }
}"
96280,"@Override public void run(){
  _native.deleteShortcut();
  _native.setEnabled(false);
  if (swingCallback != null) {
    _native.removeActionListener(swingCallback);
    swingCallback=null;
  }
  parent._native.remove(_native);
  _native.removeNotify();
}","@Override public void run(){
  _native.deleteShortcut();
  _native.setEnabled(false);
  if (callback != null) {
    _native.removeActionListener(callback);
    callback=null;
  }
  parent._native.remove(_native);
  _native.removeNotify();
}"
96281,"@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.deleteShortcut();
      _native.setEnabled(false);
      if (swingCallback != null) {
        _native.removeActionListener(swingCallback);
        swingCallback=null;
      }
      parent._native.remove(_native);
      _native.removeNotify();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      _native.deleteShortcut();
      _native.setEnabled(false);
      if (callback != null) {
        _native.removeActionListener(callback);
        callback=null;
      }
      parent._native.remove(_native);
      _native.removeNotify();
    }
  }
);
}"
96282,"@Override public void setShortcut(final Checkbox menuItem){
  this.mnemonicKey=Character.toLowerCase(menuItem.getShortcut());
  setText(menuItem);
}","@Override public void setShortcut(final Checkbox checkbox){
  this.mnemonicKey=Character.toLowerCase(checkbox.getShortcut());
  setText(checkbox);
}"
96283,"/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItemCheckbox(final GtkMenu parent){
  super(Gtk.gtk_check_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  if (transparentIcon == null) {
    transparentIcon=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
  }
  nativeLong=Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}","/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuItemCheckbox(final GtkMenu parent){
  super(Gtk.gtk_check_menu_item_new_with_mnemonic(""String_Node_Str""));
  this.parent=parent;
  nativeLong=Gobject.g_signal_connect_object(_native,""String_Node_Str"",this,null,0);
}"
96284,"@Override public void setChecked(final Checkbox checkbox){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_check_menu_item_set_active(_native,checkbox.getChecked());
    }
  }
);
}","@Override public void setChecked(final Checkbox checkbox){
  this.isChecked=checkbox.getChecked();
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_check_menu_item_set_active(_native,isChecked);
    }
  }
);
}"
96285,"@Override public int callback(final Pointer instance,final Pointer data){
  if (checkbox != null) {
    final ActionListener cb=checkbox.getCallback();
    if (cb != null) {
      try {
        Gtk.proxyClick(checkbox,cb);
      }
 catch (      Exception e) {
        SystemTray.logger.error(""String_Node_Str"",checkbox.getText(),e);
      }
    }
  }
  return Gtk.TRUE;
}","@Override public int callback(final Pointer instance,final Pointer data){
  if (callback != null) {
    Gtk.proxyClick(null,callback);
  }
  return Gtk.TRUE;
}"
96286,"@Override public void setCallback(final Checkbox checkbox){
  this.checkbox=checkbox;
}","@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  callback=menuItem.getCallback();
  if (callback != null) {
    callback=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        menuItem.setChecked(!isChecked);
        ActionListener cb=menuItem.getCallback();
        if (cb != null) {
          try {
            cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
          }
 catch (          Throwable throwable) {
            SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
          }
        }
      }
    }
;
  }
}"
96287,"@Override public void run(){
  Gtk.gtk_container_remove(parent._nativeMenu,_native);
  GtkMenuItemCheckbox.super.remove();
  if (image != null) {
    Gtk.gtk_container_remove(_native,image);
    image=null;
  }
  checkbox=null;
  parent.remove(GtkMenuItemCheckbox.this);
}","@Override public void run(){
  Gtk.gtk_container_remove(parent._nativeMenu,_native);
  GtkMenuItemCheckbox.super.remove();
  if (image != null) {
    Gtk.gtk_container_remove(_native,image);
    image=null;
  }
  parent.remove(GtkMenuItemCheckbox.this);
}"
96288,"@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_container_remove(parent._nativeMenu,_native);
      GtkMenuItemCheckbox.super.remove();
      if (image != null) {
        Gtk.gtk_container_remove(_native,image);
        image=null;
      }
      checkbox=null;
      parent.remove(GtkMenuItemCheckbox.this);
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Override public void remove(){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_container_remove(parent._nativeMenu,_native);
      GtkMenuItemCheckbox.super.remove();
      if (image != null) {
        Gtk.gtk_container_remove(_native,image);
        image=null;
      }
      parent.remove(GtkMenuItemCheckbox.this);
    }
  }
);
}"
96289,"@Override public void setCallback(final Checkbox menuItem){
  if (swingCallback != null) {
    _native.removeActionListener(swingCallback);
  }
  swingCallback=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      menuItem.setChecked(!isChecked);
      ActionListener cb=menuItem.getCallback();
      if (cb != null) {
        try {
          cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
        }
 catch (        Throwable throwable) {
          SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
        }
      }
    }
  }
;
  _native.addActionListener(swingCallback);
}","@SuppressWarnings(""String_Node_Str"") @Override public void setCallback(final Checkbox menuItem){
  if (callback != null) {
    _native.removeActionListener(callback);
  }
  callback=menuItem.getCallback();
  if (callback != null) {
    callback=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        menuItem.setChecked(!isChecked);
        ActionListener cb=menuItem.getCallback();
        if (cb != null) {
          try {
            cb.actionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,""String_Node_Str""));
          }
 catch (          Throwable throwable) {
            SystemTray.logger.error(""String_Node_Str"",menuItem.getText(),throwable);
          }
        }
      }
    }
;
    _native.addActionListener(callback);
  }
}"
96290,"@Override public void run(){
  if (swingCallback != null) {
    _native.removeActionListener(swingCallback);
    swingCallback=null;
  }
  parent._native.remove(_native);
  _native.removeAll();
}","@Override public void run(){
  if (callback != null) {
    _native.removeActionListener(callback);
    callback=null;
  }
  parent._native.remove(_native);
  _native.removeAll();
}"
96291,"@Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      if (swingCallback != null) {
        _native.removeActionListener(swingCallback);
        swingCallback=null;
      }
      parent._native.remove(_native);
      _native.removeAll();
    }
  }
);
}","@Override public void remove(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      if (callback != null) {
        _native.removeActionListener(callback);
        callback=null;
      }
      parent._native.remove(_native);
      _native.removeAll();
    }
  }
);
}"
96292,"public static void setEnabledExtensions(List<String> extensions){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  for (int i=0, extensionsSize=extensions.size(), limit=extensionsSize - 1; i < extensionsSize; i++) {
    final String extension=extensions.get(i);
    stringBuilder.append(""String_Node_Str"").append(extension).append(""String_Node_Str"");
    if (i < limit) {
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.append(""String_Node_Str"");
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",stringBuilder.toString());
  }
  final ShellProcessBuilder setGsettings=new ShellProcessBuilder(outputStream);
  setGsettings.setExecutable(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(stringBuilder.toString());
  setGsettings.start();
}","public static void setEnabledExtensions(List<String> extensions){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  for (int i=0, extensionsSize=extensions.size(), limit=extensionsSize - 1; i < extensionsSize; i++) {
    final String extension=extensions.get(i);
    if (extension.isEmpty()) {
      continue;
    }
    stringBuilder.append(""String_Node_Str"").append(extension).append(""String_Node_Str"");
    if (i < limit) {
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.append(""String_Node_Str"");
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",stringBuilder.toString());
  }
  final ShellProcessBuilder setGsettings=new ShellProcessBuilder(outputStream);
  setGsettings.setExecutable(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(""String_Node_Str"");
  setGsettings.addArgument(stringBuilder.toString());
  setGsettings.start();
}"
96293,"public static List<String> getEnabledExtensions(){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  final StringBuilder stringBuilder=new StringBuilder(output);
  int extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex > 0) {
    stringBuilder.delete(extensionIndex,stringBuilder.length());
  }
  extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex >= 0) {
    stringBuilder.delete(0,extensionIndex + 1);
  }
  String installedExtensions=stringBuilder.toString();
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",installedExtensions);
  }
  String[] split=installedExtensions.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    final String s=split[i];
    int i1=s.indexOf(""String_Node_Str"");
    int i2=s.lastIndexOf(""String_Node_Str"");
    if (i1 == 0 && i2 == s.length() - 1) {
      split[i]=s.substring(1,s.length() - 1);
    }
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",split[i]);
    }
  }
  return new ArrayList<String>(Arrays.asList(split));
}","public static List<String> getEnabledExtensions(){
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  final StringBuilder stringBuilder=new StringBuilder(output);
  int extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex > 0) {
    stringBuilder.delete(extensionIndex,stringBuilder.length());
  }
  extensionIndex=output.indexOf(""String_Node_Str"");
  if (extensionIndex >= 0) {
    stringBuilder.delete(0,extensionIndex + 1);
  }
  String installedExtensions=stringBuilder.toString();
  if (SystemTray.DEBUG) {
    logger.debug(""String_Node_Str"",installedExtensions);
  }
  String[] split=installedExtensions.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    final String s=split[i];
    int i1=s.indexOf(""String_Node_Str"");
    int i2=s.lastIndexOf(""String_Node_Str"");
    if (i1 == 0 && i2 == s.length() - 1) {
      split[i]=s.substring(1,s.length() - 1);
    }
  }
  ArrayList<String> strings=new ArrayList<String>(Arrays.asList(split));
  for (Iterator<String> iterator=strings.iterator(); iterator.hasNext(); ) {
    final String string=iterator.next();
    if (string.trim().isEmpty()) {
      iterator.remove();
    }
  }
  return strings;
}"
96294,"public static void install(){
  if (!OS.isGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=OS.getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
 else {
        logger.debug(""String_Node_Str"");
        hasSystemTray=false;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      return;
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        logger.error(""String_Node_Str"");
        return;
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    enabledExtensions.add(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}","public static void install(){
  if (!ENABLE_EXTENSION_INSTALL || !OS.isGnome()) {
    return;
  }
  boolean hasTopIcons;
  boolean hasSystemTray;
  String gnomeVersion=OS.getGnomeVersion();
  if (gnomeVersion == null) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  hasTopIcons=enabledExtensions.contains(""String_Node_Str"");
  hasSystemTray=enabledExtensions.contains(UID);
  if (hasTopIcons) {
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  final int indexOf=gnomeVersion.indexOf('.');
  final int nextIndexOf=gnomeVersion.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    gnomeVersion=gnomeVersion.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + gnomeVersion + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  logger.debug(""String_Node_Str"");
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException ignored) {
    }
catch (    IOException ignored) {
    }
 finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
 else {
        logger.debug(""String_Node_Str"");
        hasSystemTray=false;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      return;
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    IO.close(outputWriter,logger);
  }
  if (!hasSystemTray) {
    InputStream reader=null;
    FileOutputStream fileOutputStream=null;
    try {
      reader=Extension.class.getResourceAsStream(""String_Node_Str"");
      fileOutputStream=new FileOutputStream(extensionFile);
      if (reader == null) {
        logger.error(""String_Node_Str"");
        return;
      }
      IO.copyStream(reader,fileOutputStream);
    }
 catch (    FileNotFoundException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      IO.close(reader,logger);
      IO.close(fileOutputStream,logger);
    }
    logger.debug(""String_Node_Str"");
    enabledExtensions.add(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}"
96295,"public static void unInstall(){
  if (!OS.isGnome()) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  if (enabledExtensions.contains(UID)) {
    enabledExtensions.remove(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}","public static void unInstall(){
  if (!ENABLE_EXTENSION_INSTALL || !OS.isGnome()) {
    return;
  }
  List<String> enabledExtensions=getEnabledExtensions();
  if (enabledExtensions.contains(UID)) {
    enabledExtensions.remove(UID);
    setEnabledExtensions(enabledExtensions);
    restartShell();
  }
}"
96296,"public static void fixMacOS(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  if (!(vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str""))) {
    return;
  }
  boolean isMacSwingTrayLoaded=false;
  try {
    java.lang.reflect.Method m=ClassLoader.class.getDeclaredMethod(""String_Node_Str"",String.class);
    m.setAccessible(true);
    ClassLoader cl=ClassLoader.getSystemClassLoader();
    isMacSwingTrayLoaded=(null != m.invoke(cl,""String_Node_Str"")) || (null != m.invoke(cl,""String_Node_Str""));
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",e);
    }
  }
  if (isMacSwingTrayLoaded) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    java.awt.Robot robot=new java.awt.Robot();
    robot.mousePress(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
  }
 catch (  AWTException e) {
    e.printStackTrace();
  }
  ClassPool pool=ClassPool.getDefault();
  byte[] mouseEventBytes;
  try {
    CtClass trayClass=pool.get(""String_Node_Str"");
    trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
    trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
    CtField ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    CtMethod ctMethodGet=trayClass.getDeclaredMethod(""String_Node_Str"");
    ctMethodGet.setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    mouseEventBytes=trayClass.toBytecode();
    BootStrapClassLoader.defineClass(mouseEventBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public static void fixMacOS(){
  String vendor=System.getProperty(""String_Node_Str"").toLowerCase(Locale.US);
  if (!(vendor.contains(""String_Node_Str"") || vendor.contains(""String_Node_Str""))) {
    return;
  }
  boolean isMacSwingTrayLoaded=false;
  try {
    java.lang.reflect.Method m=ClassLoader.class.getDeclaredMethod(""String_Node_Str"",String.class);
    m.setAccessible(true);
    ClassLoader cl=ClassLoader.getSystemClassLoader();
    isMacSwingTrayLoaded=(null != m.invoke(cl,""String_Node_Str"")) || (null != m.invoke(cl,""String_Node_Str""));
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",e);
    }
  }
  if (isMacSwingTrayLoaded) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    java.awt.Robot robot=new java.awt.Robot();
    robot.mousePress(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
  }
 catch (  AWTException e) {
    e.printStackTrace();
  }
  ClassPool pool=ClassPool.getDefault();
  byte[] mouseEventBytes;
  try {
    CtClass trayClass=pool.get(""String_Node_Str"");
    trayClass.setModifiers(trayClass.getModifiers() & javassist.Modifier.PUBLIC);
    trayClass.getConstructors()[0].setModifiers(trayClass.getConstructors()[0].getModifiers() & javassist.Modifier.PUBLIC);
    CtField ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(CtClass.intType,""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    ctField=new CtField(pool.get(""String_Node_Str""),""String_Node_Str"",trayClass);
    trayClass.addField(ctField);
    CtMethod ctMethodGet=trayClass.getDeclaredMethod(""String_Node_Str"");
    String nsEventFQND;
    if (OS.javaVersion <= 7) {
      nsEventFQND=""String_Node_Str"";
    }
 else {
      nsEventFQND=""String_Node_Str"";
    }
    ctMethodGet.setBody(""String_Node_Str"" + nsEventFQND + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ nsEventFQND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    mouseEventBytes=trayClass.toBytecode();
    BootStrapClassLoader.defineClass(mouseEventBytes);
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
96297,"public static boolean isEventThread(){
  try {
    return (Boolean)isEventThreadMethod.invoke(null);
  }
 catch (  Throwable e) {
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}","public static boolean isEventThread(){
  try {
    if (OS.javaVersion <= 7) {
      return (Boolean)isEventThreadMethod.invoke(null);
    }
 else {
      return (Boolean)isEventThreadMethod.invoke(isEventThreadObject,null);
    }
  }
 catch (  Throwable e) {
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}"
96298,"public static void determineIconSize(){
  int trayScalingFactor=0;
  int menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      String windowsVersion=""String_Node_Str"";
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            int beginIndex=output.indexOf(""String_Node_Str"") + 7;
            windowsVersion=output.substring(beginIndex,beginIndex + 6);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
      if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=8;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        trayScalingFactor=(int)(((double)dpiX) / ((double)96)) * 2;
        menuScalingFactor=trayScalingFactor;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",windowsVersion);
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux()) {
      if (""String_Node_Str"".equalsIgnoreCase(System.getenv(""String_Node_Str""))) {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            String s=""String_Node_Str"";
            if (output.contains(s)) {
              String value=output.substring(output.indexOf(s) + s.length(),output.length() - 1);
              if (value.startsWith(""String_Node_Str"")) {
                trayScalingFactor=2;
              }
 else               if (value.startsWith(""String_Node_Str"")) {
                trayScalingFactor=8;
              }
 else {
                trayScalingFactor=2;
              }
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
              trayScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor;
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor;
  }
  ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}","public static void determineIconSize(){
  int trayScalingFactor=0;
  int menuScalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      String windowsVersion=""String_Node_Str"";
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            int beginIndex=output.indexOf(""String_Node_Str"") + 7;
            windowsVersion=output.substring(beginIndex,beginIndex + 6);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
      if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        trayScalingFactor=4;
      }
 else {
        trayScalingFactor=8;
      }
      Pointer screen=User32.GetDC(null);
      int dpiX=GetDeviceCaps(screen,LOGPIXELSX);
      User32.ReleaseDC(null,screen);
      if (dpiX != 96) {
        trayScalingFactor=(int)(((double)dpiX) / ((double)96)) * 2;
        menuScalingFactor=trayScalingFactor;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.debug(""String_Node_Str"",windowsVersion);
        SystemTray.logger.debug(""String_Node_Str"",dpiX);
      }
    }
 else     if (OS.isLinux()) {
      if (""String_Node_Str"".equalsIgnoreCase(System.getenv(""String_Node_Str""))) {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            String s=""String_Node_Str"";
            if (output.contains(s)) {
              String value=output.substring(output.indexOf(s) + s.length(),output.length() - 1);
              if (value.startsWith(""String_Node_Str"")) {
                trayScalingFactor=2;
              }
 else               if (value.startsWith(""String_Node_Str"")) {
                trayScalingFactor=8;
              }
 else {
                trayScalingFactor=2;
              }
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
      }
 else {
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
              trayScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
      }
    }
 else     if (OS.isMacOsX()) {
      int height;
      if (!SwingUtilities.isEventDispatchThread()) {
        final AtomicInteger h=new AtomicInteger(0);
        SwingUtil.invokeAndWaitQuietly(new Runnable(){
          @Override public void run(){
            h.set((int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight());
          }
        }
);
        height=h.get();
      }
 else {
        height=(int)java.awt.SystemTray.getSystemTray().getTrayIconSize().getHeight();
      }
      if (height < 32) {
        trayScalingFactor=2;
      }
 else       if ((height & (height - 1)) == 0) {
        trayScalingFactor=height / SystemTray.DEFAULT_TRAY_SIZE;
      }
 else {
        trayScalingFactor=8;
      }
    }
  }
  if (trayScalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * trayScalingFactor;
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
  }
  if (menuScalingFactor > 1) {
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE * menuScalingFactor;
  }
  ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  if (SystemTray.DEBUG) {
    SystemTray.logger.debug(""String_Node_Str"",trayScalingFactor,TRAY_SIZE);
    SystemTray.logger.debug(""String_Node_Str"",menuScalingFactor,ENTRY_SIZE);
  }
}"
96299,"/** 
 * Gets the 'status' string assigned to the system tray
 */
public String getStatus(){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    return ((_AppIndicatorTray)menu).getStatus();
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    return ((_AppIndicatorNativeTray)menu).getStatus();
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    return ((_GtkStatusIconTray)menu).getStatus();
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    return ((_GtkStatusIconNativeTray)menu).getStatus();
  }
 else   if (menu instanceof _AwtTray) {
    return ((_AwtTray)menu).getStatus();
  }
 else {
    return ((_SwingTray)menu).getStatus();
  }
}","/** 
 * Gets the 'status' string assigned to the system tray
 */
public String getStatus(){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    return ((_AppIndicatorTray)menu).getStatus();
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    return ((_AppIndicatorNativeTray)menu).getStatus();
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    return ((_GtkStatusIconTray)menu).getStatus();
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    return ((_GtkStatusIconNativeTray)menu).getStatus();
  }
 else   if (menu instanceof _AwtTray) {
    return ((_AwtTray)menu).getStatus();
  }
 else   if (menu instanceof _SwingTray) {
    return ((_SwingTray)menu).getStatus();
  }
 else {
    return ""String_Node_Str"";
  }
}"
96300,"/** 
 * Sets a 'status' string at the first position in the popup menu. This 'status' string appears as a disabled menu entry.
 * @param statusText the text you want displayed, null if you want to remove the 'status' string
 */
public void setStatus(String statusText){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    ((_AppIndicatorTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    ((_AppIndicatorNativeTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    ((_GtkStatusIconTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    ((_GtkStatusIconNativeTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _AwtTray) {
    ((_AwtTray)menu).setStatus(statusText);
  }
 else {
    ((_SwingTray)menu).setStatus(statusText);
  }
}","/** 
 * Sets a 'status' string at the first position in the popup menu. This 'status' string appears as a disabled menu entry.
 * @param statusText the text you want displayed, null if you want to remove the 'status' string
 */
public void setStatus(String statusText){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    ((_AppIndicatorTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    ((_AppIndicatorNativeTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    ((_GtkStatusIconTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    ((_GtkStatusIconNativeTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _AwtTray) {
    ((_AwtTray)menu).setStatus(statusText);
  }
 else   if (menu instanceof _SwingTray) {
    ((_SwingTray)menu).setStatus(statusText);
  }
}"
96301,"/** 
 * Shuts-down the SystemTray, by removing the menus + tray icon.
 */
public void shutdown(){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    ((_AppIndicatorTray)menu).shutdown();
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    ((_AppIndicatorNativeTray)menu).shutdown();
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    ((_GtkStatusIconTray)menu).shutdown();
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    ((_GtkStatusIconNativeTray)menu).shutdown();
  }
 else   if (menu instanceof _AwtTray) {
    ((_AwtTray)menu).shutdown();
  }
 else {
    ((_SwingTray)menu).shutdown();
  }
  systemTrayMenu=null;
}","/** 
 * Shuts-down the SystemTray, by removing the menus + tray icon. After calling this method, you MUST call `get()` or `getNative()` again to obtain a new reference to the SystemTray.
 */
public void shutdown(){
  final Menu menu=systemTrayMenu;
  if (menu instanceof _AppIndicatorTray) {
    ((_AppIndicatorTray)menu).shutdown();
  }
 else   if (menu instanceof _AppIndicatorNativeTray) {
    ((_AppIndicatorNativeTray)menu).shutdown();
  }
 else   if (menu instanceof _GtkStatusIconTray) {
    ((_GtkStatusIconTray)menu).shutdown();
  }
 else   if (menu instanceof _GtkStatusIconNativeTray) {
    ((_GtkStatusIconNativeTray)menu).shutdown();
  }
 else   if (menu instanceof _AwtTray) {
    ((_AwtTray)menu).shutdown();
  }
 else   if (menu instanceof _SwingTray) {
    ((_SwingTray)menu).shutdown();
  }
  systemTrayMenu=null;
}"
96302,"public static void shutdownGui(){
  dispatch(new Runnable(){
    @Override public void run(){
      if (!alreadyRunningGTK) {
        gtk_main_quit();
      }
      started=false;
    }
  }
);
}","public static void shutdownGui(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      if (!alreadyRunningGTK) {
        gtk_main_quit();
      }
      started=false;
    }
  }
);
}"
96303,"/** 
 * Necessary to guarantee all updates occur on the dispatch thread
 */
protected void dispatchAndWait(final Runnable runnable){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      try {
        runnable.run();
      }
  finally {
        countDownLatch.countDown();
      }
    }
  }
);
  try {
    if (!countDownLatch.await(TIMEOUT,TimeUnit.SECONDS)) {
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    SystemTray.logger.error(""String_Node_Str"",new Exception());
  }
}","/** 
 * Necessary to guarantee all updates occur on the dispatch thread
 */
protected void dispatchAndWait(final Runnable runnable){
  Gtk.dispatchAndWait(runnable);
}"
96304,"public void shutdown(){
  dispatch(new Runnable(){
    @Override public void run(){
      obliterateMenu();
      Gtk.shutdownGui();
    }
  }
);
}","public void shutdown(){
  dispatch(new Runnable(){
    @Override public void run(){
      obliterateMenu();
    }
  }
);
  Gtk.shutdownGui();
}"
96305,"@Override public final void setEnabled(final boolean setEnabled){
  visible=!setEnabled;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
      }
 else       if (!visible && setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
      }
    }
  }
);
}","@Override public final void setEnabled(final boolean setEnabled){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
        visible=false;
      }
 else       if (!visible && setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        visible=true;
      }
    }
  }
);
}"
96306,"@Override public void run(){
  if (visible && !setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
  }
 else   if (!visible && setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
  }
}","@Override public void run(){
  if (visible && !setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
    visible=false;
  }
 else   if (!visible && setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
    visible=true;
  }
}"
96307,"@SuppressWarnings(""String_Node_Str"") public void setEnabled(final boolean setEnabled){
  visible=!setEnabled;
  dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        tray.remove(trayIcon);
      }
 else       if (!visible && setEnabled) {
        try {
          tray.add(trayIcon);
        }
 catch (        AWTException e) {
          dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public void setEnabled(final boolean setEnabled){
  if (OS.isMacOsX()) {
    if (keepAliveThread != null) {
synchronized (keepAliveLock) {
        keepAliveLock.notifyAll();
      }
    }
    keepAliveThread=null;
    if (visible && !setEnabled) {
      keepAliveThread=new Thread(new Runnable(){
        @Override public void run(){
synchronized (keepAliveLock) {
            keepAliveLock.notifyAll();
            try {
              keepAliveLock.wait();
            }
 catch (            InterruptedException ignored) {
            }
          }
        }
      }
,""String_Node_Str"");
      keepAliveThread.start();
    }
synchronized (keepAliveLock) {
      try {
        keepAliveLock.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        tray.remove(trayIcon);
        visible=false;
      }
 else       if (!visible && setEnabled) {
        try {
          tray.add(trayIcon);
          visible=true;
        }
 catch (        AWTException e) {
          dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
}"
96308,"@Override public void run(){
  if (visible && !setEnabled) {
    tray.remove(trayIcon);
  }
 else   if (!visible && setEnabled) {
    try {
      tray.add(trayIcon);
    }
 catch (    AWTException e) {
      dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"");
    }
  }
}","@Override public void run(){
  if (visible && !setEnabled) {
    tray.remove(trayIcon);
    visible=false;
  }
 else   if (!visible && setEnabled) {
    try {
      tray.add(trayIcon);
      visible=true;
    }
 catch (    AWTException e) {
      dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"");
    }
  }
}"
96309,"public void shutdown(){
  dispatch(new Runnable(){
    @Override public void run(){
      removeAll();
      remove();
      tray.remove(trayIcon);
    }
  }
);
}","public void shutdown(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      removeAll();
      remove();
      tray.remove(trayIcon);
    }
  }
);
}"
96310,"@Override public final void setEnabled(final boolean setEnabled){
  visible=!setEnabled;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
      }
 else       if (!visible && setEnabled) {
        Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
      }
    }
  }
);
}","@Override public final void setEnabled(final boolean setEnabled){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
        visible=false;
      }
 else       if (!visible && setEnabled) {
        Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
        visible=true;
      }
    }
  }
);
}"
96311,"@Override public void run(){
  if (visible && !setEnabled) {
    Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
  }
 else   if (!visible && setEnabled) {
    Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
  }
}","@Override public void run(){
  if (visible && !setEnabled) {
    Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
    visible=false;
  }
 else   if (!visible && setEnabled) {
    Gtk.gtk_status_icon_set_visible(trayIcon,setEnabled);
    visible=true;
  }
}"
96312,"@Override public final void setImage_(final File imageFile){
  dispatch(new Runnable(){
    @Override public void run(){
      AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
      if (!isActive) {
        isActive=true;
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        hookMenuOpen();
      }
    }
  }
);
  dispatch(new Runnable(){
    @Override public void run(){
      ((TrayPopup)_native).setTitleBarImage(imageFile);
    }
  }
);
}","@Override public final void setImage_(final File imageFile){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      AppIndicator.app_indicator_set_icon(appIndicator,imageFile.getAbsolutePath());
      if (!isActive) {
        isActive=true;
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        hookMenuOpen();
      }
    }
  }
);
  dispatch(new Runnable(){
    @Override public void run(){
      ((TrayPopup)_native).setTitleBarImage(imageFile);
    }
  }
);
}"
96313,"@Override public final void setEnabled(final boolean setEnabled){
  visible=!setEnabled;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
      }
 else       if (!visible && setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
      }
    }
  }
);
}","@Override public final void setEnabled(final boolean setEnabled){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (visible && !setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
        visible=false;
      }
 else       if (!visible && setEnabled) {
        AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
        visible=true;
      }
    }
  }
);
}"
96314,"@Override public void run(){
  if (visible && !setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
  }
 else   if (!visible && setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
  }
}","@Override public void run(){
  if (visible && !setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_PASSIVE);
    visible=false;
  }
 else   if (!visible && setEnabled) {
    AppIndicator.app_indicator_set_status(appIndicator,AppIndicator.STATUS_ACTIVE);
    visible=true;
  }
}"
96315,"public static void startGui(){
  if (!started) {
    started=true;
    if (!alreadyRunningGTK) {
      if (SystemTray.DEBUG) {
        logger.error(""String_Node_Str"");
      }
      gtkUpdateThread=new Thread(){
        @Override public void run(){
          GThread.g_thread_init(null);
          if (!gtk_init_check(0)) {
            if (SystemTray.DEBUG) {
              logger.error(""String_Node_Str"");
            }
            return;
          }
          gdk_threads_enter();
          gtk_main();
          gdk_threads_leave();
        }
      }
;
      gtkUpdateThread.setName(""String_Node_Str"");
      gtkUpdateThread.start();
    }
  }
}","public static void startGui(){
  if (!started) {
    started=true;
    if (!alreadyRunningGTK) {
      if (SystemTray.DEBUG) {
        logger.error(""String_Node_Str"");
      }
      gtkUpdateThread=new Thread(){
        @Override public void run(){
          if (!gtk_init_check(0)) {
            if (SystemTray.DEBUG) {
              logger.error(""String_Node_Str"");
            }
            return;
          }
          gtk_main();
        }
      }
;
      gtkUpdateThread.setName(""String_Node_Str"");
      gtkUpdateThread.start();
    }
  }
}"
96316,"void createMenu(){
  if (obliterateInProgress) {
    return;
  }
  if (getParent() != null) {
    ((GtkMenu)getParent()).createMenu();
  }
  boolean hasImages=false;
synchronized (menuEntries) {
    for (int i=0, menuEntriesSize=menuEntries.size(); i < menuEntriesSize; i++) {
      final Entry menuEntry__=menuEntries.get(i);
      hasImages|=menuEntry__.hasImage();
    }
    for (int i=0, menuEntriesSize=menuEntries.size(); i < menuEntriesSize; i++) {
      final Entry menuEntry__=menuEntries.get(i);
      if (menuEntry__ instanceof GtkEntry) {
        GtkEntry entry=(GtkEntry)menuEntry__;
        entry.setSpacerImage(hasImages);
        Gtk.gtk_menu_shell_append(this._native,entry._native);
        Gobject.g_object_ref_sink(entry._native);
      }
 else       if (menuEntry__ instanceof GtkMenu) {
        GtkMenu subMenu=(GtkMenu)menuEntry__;
        Gtk.gtk_menu_shell_append(this._native,subMenu.menuEntry._native);
        Gobject.g_object_ref_sink(subMenu.menuEntry._native);
        if (subMenu.getParent() != GtkMenu.this) {
          subMenu.createMenu();
        }
      }
    }
    onMenuAdded(_native);
    Gtk.gtk_widget_show_all(_native);
  }
}","void createMenu(){
  if (obliterateInProgress) {
    return;
  }
  if (getParent() != null) {
    ((GtkMenu)getParent()).createMenu();
  }
  boolean hasImages=false;
synchronized (menuEntries) {
    for (int i=0, menuEntriesSize=menuEntries.size(); i < menuEntriesSize; i++) {
      final Entry menuEntry__=menuEntries.get(i);
      hasImages|=menuEntry__.hasImage();
    }
    for (int i=0, menuEntriesSize=menuEntries.size(); i < menuEntriesSize; i++) {
      final Entry menuEntry__=menuEntries.get(i);
      if (menuEntry__ instanceof GtkEntry) {
        GtkEntry entry=(GtkEntry)menuEntry__;
        entry.setSpacerImage(hasImages);
        Gtk.gtk_menu_shell_append(this._native,entry._native);
        Gobject.g_object_ref_sink(entry._native);
        Gtk.gtk_widget_show_all(entry._native);
      }
 else       if (menuEntry__ instanceof GtkMenu) {
        GtkMenu subMenu=(GtkMenu)menuEntry__;
        Gtk.gtk_menu_shell_append(this._native,subMenu.menuEntry._native);
        Gobject.g_object_ref_sink(subMenu.menuEntry._native);
        Gtk.gtk_widget_show_all(subMenu.menuEntry._native);
        if (subMenu.getParent() != GtkMenu.this) {
          subMenu.createMenu();
        }
      }
    }
    onMenuAdded(_native);
    Gtk.gtk_widget_show_all(_native);
  }
}"
96317,"public void shutdown(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      obliterateMenu();
      Gtk.shutdownGui();
    }
  }
);
}","public void shutdown(){
  dispatch(new Runnable(){
    @Override public void run(){
      obliterateMenu();
      Gtk.shutdownGui();
    }
  }
);
}"
96318,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static void init(final boolean useNativeMenus){
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static void init(boolean useNativeMenus){
}"
96319,"public static void onShutdown(final Runnable runnable){
  currentDisplay.getShells()[0].addListener(org.eclipse.swt.SWT.Close,new org.eclipse.swt.widgets.Listener(){
    @Override public void handleEvent(    final org.eclipse.swt.widgets.Event event){
      runnable.run();
    }
  }
);
}","public static void onShutdown(final Runnable runnable){
  if (isEventThread()) {
    currentDisplay.getShells()[0].addListener(org.eclipse.swt.SWT.Close,new org.eclipse.swt.widgets.Listener(){
      @Override public void handleEvent(      final org.eclipse.swt.widgets.Event event){
        runnable.run();
      }
    }
);
  }
 else {
    dispatch(new Runnable(){
      @Override public void run(){
        currentDisplay.getShells()[0].addListener(org.eclipse.swt.SWT.Close,new org.eclipse.swt.widgets.Listener(){
          @Override public void handleEvent(          final org.eclipse.swt.widgets.Event event){
            runnable.run();
          }
        }
);
      }
    }
);
  }
}"
96320,"public static void dispatch(final Runnable runnable){
  try {
    if (dispatchMethod == null) {
      Class<?> clazz=Class.forName(""String_Node_Str"");
      dispatchMethod=clazz.getMethod(""String_Node_Str"");
    }
    dispatchMethod.invoke(null,runnable);
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      SystemTray.logger.error(""String_Node_Str"",e);
    }
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
}","public static void dispatch(final Runnable runnable){
  try {
    dispatchMethod.invoke(null,runnable);
  }
 catch (  Throwable e) {
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
}"
96321,"public static boolean isEventThread(){
  try {
    if (isEventThread == null) {
      Class<?> clazz=Class.forName(""String_Node_Str"");
      isEventThread=clazz.getMethod(""String_Node_Str"");
    }
    return (Boolean)isEventThread.invoke(null);
  }
 catch (  Throwable e) {
    if (SystemTray.DEBUG) {
      SystemTray.logger.error(""String_Node_Str"",e);
    }
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}","public static boolean isEventThread(){
  try {
    return (Boolean)isEventThreadMethod.invoke(null);
  }
 catch (  Throwable e) {
    SystemTray.logger.error(""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}"
96322,"public static void dispatch(final Runnable runnable){
  org.eclipse.swt.widgets.Display.getCurrent().syncExec(runnable);
}","public static void dispatch(final Runnable runnable){
  currentDisplay.syncExec(runnable);
}"
96323,"public static void onShutdown(final Runnable runnable){
  org.eclipse.swt.widgets.Display.getCurrent().getShells()[0].addListener(org.eclipse.swt.SWT.Close,new org.eclipse.swt.widgets.Listener(){
    @Override public void handleEvent(    final org.eclipse.swt.widgets.Event event){
      runnable.run();
    }
  }
);
}","public static void onShutdown(final Runnable runnable){
  currentDisplay.getShells()[0].addListener(org.eclipse.swt.SWT.Close,new org.eclipse.swt.widgets.Listener(){
    @Override public void handleEvent(    final org.eclipse.swt.widgets.Event event){
      runnable.run();
    }
  }
);
}"
96324,"void doShow(final Point point,int offset){
  Dimension size=getPreferredSize();
  Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
  int x=point.x;
  int y=point.y;
  if (y < bounds.y) {
    y=bounds.y;
  }
 else   if (y + size.height > bounds.y + bounds.height) {
    y-=size.height;
  }
  if (x < bounds.x) {
    x=bounds.x;
  }
 else   if (x + size.width > bounds.x + bounds.width) {
    x-=size.width;
    offset=-offset;
  }
  x-=offset;
  setInvoker(hiddenDialog.getContentPane());
  hiddenDialog.setLocation(x,y);
  hiddenDialog.setVisible(true);
  setLocation(x,y);
  setVisible(true);
  requestFocusInWindow();
}","void doShow(final Point point,int offset){
  invalidate();
  revalidate();
  doLayout();
  Dimension size=getPreferredSize();
  Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
  int x=point.x;
  int y=point.y;
  if (y < bounds.y) {
    y=bounds.y;
  }
 else   if (y + size.height > bounds.y + bounds.height) {
    y-=size.height;
  }
  if (x < bounds.x) {
    x=bounds.x;
  }
 else   if (x + size.width > bounds.x + bounds.width) {
    x-=size.width;
    offset=-offset;
  }
  x-=offset;
  setInvoker(hiddenDialog.getContentPane());
  hiddenDialog.setLocation(x,y);
  hiddenDialog.setVisible(true);
  setLocation(x,y);
  setVisible(true);
  requestFocusInWindow();
}"
96325,"@SuppressWarnings(""String_Node_Str"") TrayPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  hiddenDialog=new JDialog((Frame)null,""String_Node_Str"");
  hiddenDialog.setUndecorated(true);
  hiddenDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  hiddenDialog.setAlwaysOnTop(true);
  hiddenDialog.getContentPane().setLayout(null);
  if (OS.javaVersion >= 7) {
    try {
      Class<? extends JDialog> hiddenDialogClass=hiddenDialog.getClass();
      Method[] methods=hiddenDialogClass.getMethods();
      for (      Method method : methods) {
        if (method.getName().equals(""String_Node_Str"")) {
          Class<Enum> cl=(Class<Enum>)Class.forName(""String_Node_Str"");
          method.invoke(hiddenDialog,Enum.valueOf(cl,""String_Node_Str""));
          break;
        }
      }
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"");
    }
  }
  hiddenDialog.pack();
  hiddenDialog.setBounds(0,0,0,0);
  addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      hiddenDialog.setVisible(false);
      hiddenDialog.toBack();
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
);
  hiddenDialog.addWindowFocusListener(new WindowFocusListener(){
    @Override public void windowLostFocus(    WindowEvent we){
      TrayPopup.this.setVisible(false);
    }
    @Override public void windowGainedFocus(    WindowEvent we){
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") TrayPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  hiddenDialog=new JDialog((Frame)null,""String_Node_Str"");
  hiddenDialog.setUndecorated(true);
  hiddenDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  hiddenDialog.setAlwaysOnTop(true);
  hiddenDialog.getContentPane().setLayout(null);
  if (OS.javaVersion >= 7) {
    try {
      Class<? extends JDialog> hiddenDialogClass=hiddenDialog.getClass();
      Method[] methods=hiddenDialogClass.getMethods();
      for (      Method method : methods) {
        if (method.getName().equals(""String_Node_Str"")) {
          Class<Enum> cl=(Class<Enum>)Class.forName(""String_Node_Str"");
          method.invoke(hiddenDialog,Enum.valueOf(cl,""String_Node_Str""));
          break;
        }
      }
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"");
    }
  }
  hiddenDialog.pack();
  hiddenDialog.setBounds(0,0,0,0);
  addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      hiddenDialog.setVisible(false);
      hiddenDialog.toBack();
      Runnable r=runnable;
      if (r != null) {
        r.run();
      }
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
);
}"
96326,"public void popupMenuWillBecomeInvisible(PopupMenuEvent e){
  hiddenDialog.setVisible(false);
  hiddenDialog.toBack();
}","public void popupMenuWillBecomeInvisible(PopupMenuEvent e){
  hiddenDialog.setVisible(false);
  hiddenDialog.toBack();
  Runnable r=runnable;
  if (r != null) {
    r.run();
  }
}"
96327,"public void setIcon_(final File iconFile){
  dispatch(new Runnable(){
    @Override public void run(){
      final Image trayImage=new ImageIcon(iconFile.getAbsolutePath()).getImage();
      trayImage.flush();
      if (trayIcon == null) {
        trayIcon=new TrayIcon(trayImage);
        trayIcon.addMouseListener(new MouseAdapter(){
          @Override public void mousePressed(          MouseEvent e){
            Dimension size=_native.getPreferredSize();
            Point point=e.getPoint();
            Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
            int x=point.x;
            int y=point.y;
            if (y < bounds.y) {
              y=bounds.y;
            }
 else             if (y + size.height > bounds.y + bounds.height) {
              y-=size.height;
            }
            if (x < bounds.x) {
              x=bounds.x;
            }
 else             if (x + size.width > bounds.x + bounds.width) {
              x-=size.width;
            }
            ((JPopupMenu)_native).setInvoker(_native);
            _native.setLocation(x,y);
            _native.setVisible(true);
            _native.setFocusable(true);
            _native.requestFocusInWindow();
          }
        }
);
        try {
          tray.add(trayIcon);
        }
 catch (        AWTException e) {
          dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
 else {
        trayIcon.setImage(trayImage);
      }
    }
  }
);
}","public void setIcon_(final File iconFile){
  dispatch(new Runnable(){
    @Override public void run(){
      final Image trayImage=new ImageIcon(iconFile.getAbsolutePath()).getImage();
      trayImage.flush();
      if (trayIcon == null) {
        trayIcon=new TrayIcon(trayImage);
        JPopupMenu popupMenu=(JPopupMenu)_native;
        popupMenu.pack();
        popupMenu.setFocusable(true);
        trayIcon.addMouseListener(new MouseAdapter(){
          @Override public void mousePressed(          MouseEvent e){
            Dimension size=_native.getPreferredSize();
            Point point=e.getPoint();
            Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
            int x=point.x;
            int y=point.y;
            if (y < bounds.y) {
              y=bounds.y;
            }
 else             if (y + size.height > bounds.y + bounds.height) {
              y-=size.height;
            }
            if (x < bounds.x) {
              x=bounds.x;
            }
 else             if (x + size.width > bounds.x + bounds.width) {
              x-=size.width;
            }
            SwingSystemTrayMenuWindowsPopup popupMenu=(SwingSystemTrayMenuWindowsPopup)_native;
            popupMenu.doShow(x,y);
          }
        }
);
        try {
          tray.add(trayIcon);
          ((SwingSystemTrayMenuWindowsPopup)_native).setIcon(iconFile);
        }
 catch (        AWTException e) {
          dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
 else {
        ((SwingSystemTrayMenuWindowsPopup)_native).setIcon(iconFile);
        trayIcon.setImage(trayImage);
      }
    }
  }
);
}"
96328,"@Override public void run(){
  final Image trayImage=new ImageIcon(iconFile.getAbsolutePath()).getImage();
  trayImage.flush();
  if (trayIcon == null) {
    trayIcon=new TrayIcon(trayImage);
    trayIcon.addMouseListener(new MouseAdapter(){
      @Override public void mousePressed(      MouseEvent e){
        Dimension size=_native.getPreferredSize();
        Point point=e.getPoint();
        Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
        int x=point.x;
        int y=point.y;
        if (y < bounds.y) {
          y=bounds.y;
        }
 else         if (y + size.height > bounds.y + bounds.height) {
          y-=size.height;
        }
        if (x < bounds.x) {
          x=bounds.x;
        }
 else         if (x + size.width > bounds.x + bounds.width) {
          x-=size.width;
        }
        ((JPopupMenu)_native).setInvoker(_native);
        _native.setLocation(x,y);
        _native.setVisible(true);
        _native.setFocusable(true);
        _native.requestFocusInWindow();
      }
    }
);
    try {
      tray.add(trayIcon);
    }
 catch (    AWTException e) {
      dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"",e);
    }
  }
 else {
    trayIcon.setImage(trayImage);
  }
}","@Override public void run(){
  final Image trayImage=new ImageIcon(iconFile.getAbsolutePath()).getImage();
  trayImage.flush();
  if (trayIcon == null) {
    trayIcon=new TrayIcon(trayImage);
    JPopupMenu popupMenu=(JPopupMenu)_native;
    popupMenu.pack();
    popupMenu.setFocusable(true);
    trayIcon.addMouseListener(new MouseAdapter(){
      @Override public void mousePressed(      MouseEvent e){
        Dimension size=_native.getPreferredSize();
        Point point=e.getPoint();
        Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
        int x=point.x;
        int y=point.y;
        if (y < bounds.y) {
          y=bounds.y;
        }
 else         if (y + size.height > bounds.y + bounds.height) {
          y-=size.height;
        }
        if (x < bounds.x) {
          x=bounds.x;
        }
 else         if (x + size.width > bounds.x + bounds.width) {
          x-=size.width;
        }
        SwingSystemTrayMenuWindowsPopup popupMenu=(SwingSystemTrayMenuWindowsPopup)_native;
        popupMenu.doShow(x,y);
      }
    }
);
    try {
      tray.add(trayIcon);
      ((SwingSystemTrayMenuWindowsPopup)_native).setIcon(iconFile);
    }
 catch (    AWTException e) {
      dorkbox.systemTray.SystemTray.logger.error(""String_Node_Str"",e);
    }
  }
 else {
    ((SwingSystemTrayMenuWindowsPopup)_native).setIcon(iconFile);
    trayIcon.setImage(trayImage);
  }
}"
96329,"@Override public void mousePressed(MouseEvent e){
  Dimension size=_native.getPreferredSize();
  Point point=e.getPoint();
  Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
  int x=point.x;
  int y=point.y;
  if (y < bounds.y) {
    y=bounds.y;
  }
 else   if (y + size.height > bounds.y + bounds.height) {
    y-=size.height;
  }
  if (x < bounds.x) {
    x=bounds.x;
  }
 else   if (x + size.width > bounds.x + bounds.width) {
    x-=size.width;
  }
  ((JPopupMenu)_native).setInvoker(_native);
  _native.setLocation(x,y);
  _native.setVisible(true);
  _native.setFocusable(true);
  _native.requestFocusInWindow();
}","@Override public void mousePressed(MouseEvent e){
  Dimension size=_native.getPreferredSize();
  Point point=e.getPoint();
  Rectangle bounds=ScreenUtil.getScreenBoundsAt(point);
  int x=point.x;
  int y=point.y;
  if (y < bounds.y) {
    y=bounds.y;
  }
 else   if (y + size.height > bounds.y + bounds.height) {
    y-=size.height;
  }
  if (x < bounds.x) {
    x=bounds.x;
  }
 else   if (x + size.width > bounds.x + bounds.width) {
    x-=size.width;
  }
  SwingSystemTrayMenuWindowsPopup popupMenu=(SwingSystemTrayMenuWindowsPopup)_native;
  popupMenu.doShow(x,y);
}"
96330,"SwingSystemTrayMenuWindowsPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  this.hiddenDialog=new JDialog((Frame)null);
  this.hiddenDialog.setEnabled(false);
  this.hiddenDialog.setUndecorated(true);
  this.hiddenDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  this.hiddenDialog.setSize(1,1);
  this.hiddenDialog.addWindowFocusListener(new WindowFocusListener(){
    @Override public void windowLostFocus(    WindowEvent we){
      SwingSystemTrayMenuWindowsPopup.this.setVisible(false);
    }
    @Override public void windowGainedFocus(    WindowEvent we){
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") SwingSystemTrayMenuWindowsPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  this.hiddenDialog=new JDialog((Frame)null,""String_Node_Str"");
  this.hiddenDialog.setUndecorated(true);
  this.hiddenDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  this.hiddenDialog.setAlwaysOnTop(true);
  this.hiddenDialog.getContentPane().setLayout(null);
  if (OS.javaVersion >= 7) {
    try {
      Class<? extends JDialog> hiddenDialogClass=this.hiddenDialog.getClass();
      Method[] methods=hiddenDialogClass.getMethods();
      for (      Method method : methods) {
        if (method.getName().equals(""String_Node_Str"")) {
          Class<Enum> cl=(Class<Enum>)Class.forName(""String_Node_Str"");
          method.invoke(this.hiddenDialog,Enum.valueOf(cl,""String_Node_Str""));
          break;
        }
      }
    }
 catch (    Exception e) {
      SystemTray.logger.error(""String_Node_Str"");
    }
  }
  this.hiddenDialog.pack();
  this.hiddenDialog.setBounds(0,0,0,0);
  addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      hiddenDialog.setVisible(false);
      hiddenDialog.toBack();
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
);
  this.hiddenDialog.addWindowFocusListener(new WindowFocusListener(){
    @Override public void windowLostFocus(    WindowEvent we){
      SwingSystemTrayMenuWindowsPopup.this.setVisible(false);
    }
    @Override public void windowGainedFocus(    WindowEvent we){
    }
  }
);
}"
96331,"public void close(){
  this.hiddenDialog.setVisible(false);
  this.hiddenDialog.dispatchEvent(new WindowEvent(this.hiddenDialog,WindowEvent.WINDOW_CLOSING));
}","void close(){
  this.hiddenDialog.setVisible(false);
  this.hiddenDialog.dispatchEvent(new WindowEvent(this.hiddenDialog,WindowEvent.WINDOW_CLOSING));
}"
96332,"public AppIndicatorTray(final SystemTray systemTray){
  super(systemTray);
  if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_GTK_STATUSICON) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ImageUtils.determineIconSize(SystemTray.TYPE_APP_INDICATOR);
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
    }
  }
);
  Gtk.waitForStartup();
}","public AppIndicatorTray(final SystemTray systemTray){
  super(systemTray);
  if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_GTK_STATUSICON) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ImageUtils.determineIconSize();
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      File image=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
      String id=System.nanoTime() + ""String_Node_Str"";
      appIndicator=AppIndicator.app_indicator_new(id,image.getAbsolutePath(),AppIndicator.CATEGORY_APPLICATION_STATUS);
    }
  }
);
  Gtk.waitForStartup();
}"
96333,"public GtkSystemTray(final SystemTray systemTray){
  super(systemTray);
  if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_APP_INDICATOR) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ImageUtils.determineIconSize(SystemTray.TYPE_GTK_STATUSICON);
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      trayIcon=trayIcon_;
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(_native,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (SystemTray.isJavaFxLoaded) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
}","public GtkSystemTray(final SystemTray systemTray){
  super(systemTray);
  if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_APP_INDICATOR) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ImageUtils.determineIconSize();
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      trayIcon=trayIcon_;
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(_native,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  Gtk.waitForStartup();
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (SystemTray.isJavaFxLoaded) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
}"
96334,"AdjustedJMenu(final SwingSystemTrayLinuxMenuPopup mainPopup){
  this.mainPopup=mainPopup;
}","AdjustedJMenu(final SwingSystemTrayMenuPopup mainPopup){
  this.mainPopup=mainPopup;
}"
96335,"@Override public void run(){
  _native.setVisible(false);
  if (_native instanceof SwingSystemTrayMenuWindowsPopup) {
    ((SwingSystemTrayMenuWindowsPopup)_native).close();
  }
 else   if (_native instanceof SwingSystemTrayLinuxMenuPopup) {
    ((SwingSystemTrayLinuxMenuPopup)_native).close();
  }
  SwingMenu parent=(SwingMenu)getParent();
  if (parent != null) {
    parent._native.remove(_native);
  }
}","@Override public void run(){
  _native.setVisible(false);
  if (_native instanceof SwingSystemTrayMenuWindowsPopup) {
    ((SwingSystemTrayMenuWindowsPopup)_native).close();
  }
 else   if (_native instanceof SwingSystemTrayMenuPopup) {
    ((SwingSystemTrayMenuPopup)_native).close();
  }
  SwingMenu parent=(SwingMenu)getParent();
  if (parent != null) {
    parent._native.remove(_native);
  }
}"
96336,"@Override public final void remove(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      _native.setVisible(false);
      if (_native instanceof SwingSystemTrayMenuWindowsPopup) {
        ((SwingSystemTrayMenuWindowsPopup)_native).close();
      }
 else       if (_native instanceof SwingSystemTrayLinuxMenuPopup) {
        ((SwingSystemTrayLinuxMenuPopup)_native).close();
      }
      SwingMenu parent=(SwingMenu)getParent();
      if (parent != null) {
        parent._native.remove(_native);
      }
    }
  }
);
}","@Override public final void remove(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      _native.setVisible(false);
      if (_native instanceof SwingSystemTrayMenuWindowsPopup) {
        ((SwingSystemTrayMenuWindowsPopup)_native).close();
      }
 else       if (_native instanceof SwingSystemTrayMenuPopup) {
        ((SwingSystemTrayMenuPopup)_native).close();
      }
      SwingMenu parent=(SwingMenu)getParent();
      if (parent != null) {
        parent._native.remove(_native);
      }
    }
  }
);
}"
96337,"/** 
 * @param systemTray the system tray (which is the object that sits in the system tray)
 * @param parent the parent of this menu, null if the parent is the system tray
 */
public SwingMenu(final SystemTray systemTray,final Menu parent){
  super(systemTray,parent);
  try {
    SwingUtil.invokeAndWait(new Runnable(){
      @Override public void run(){
        if (parent != null) {
          if (OS.isLinux()) {
            _native=new AdjustedJMenu((SwingSystemTrayLinuxMenuPopup)((SwingMenu)systemTray.getMenu())._native);
          }
 else {
            _native=new AdjustedJMenu(null);
          }
          ((SwingMenu)parent)._native.add(_native);
        }
 else {
          if (OS.isLinux()) {
            _native=new SwingSystemTrayLinuxMenuPopup();
          }
 else {
            _native=new SwingSystemTrayMenuWindowsPopup();
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    SystemTray.logger.error(""String_Node_Str"",e);
  }
}","/** 
 * @param systemTray the system tray (which is the object that sits in the system tray)
 * @param parent the parent of this menu, null if the parent is the system tray
 */
public SwingMenu(final SystemTray systemTray,final Menu parent){
  super(systemTray,parent);
  try {
    SwingUtil.invokeAndWait(new Runnable(){
      @Override public void run(){
        if (parent != null) {
          if (OS.isWindows()) {
            _native=new AdjustedJMenu(null);
          }
 else {
            _native=new AdjustedJMenu((SwingSystemTrayMenuPopup)((SwingMenu)systemTray.getMenu())._native);
          }
          ((SwingMenu)parent)._native.add(_native);
        }
 else {
          if (OS.isWindows()) {
            _native=new SwingSystemTrayMenuWindowsPopup();
          }
 else {
            _native=new SwingSystemTrayMenuPopup();
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    SystemTray.logger.error(""String_Node_Str"",e);
  }
}"
96338,"/** 
 * Creates a new system tray handler class.
 */
public SwingSystemTray(final dorkbox.systemTray.SystemTray systemTray){
  super(systemTray,null);
  ImageUtils.determineIconSize(dorkbox.systemTray.SystemTray.TYPE_SWING);
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray=SystemTray.getSystemTray();
    }
  }
);
}","/** 
 * Creates a new system tray handler class.
 */
public SwingSystemTray(final dorkbox.systemTray.SystemTray systemTray){
  super(systemTray,null);
  ImageUtils.determineIconSize();
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray=SystemTray.getSystemTray();
    }
  }
);
}"
96339,"/** 
 * @param trayType LINUX_GTK = 1; LINUX_APP_INDICATOR = 2; SWING_INDICATOR = 3;
 */
public static void determineIconSize(int trayType){
  int scalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      String windowsVersion=""String_Node_Str"";
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            int beginIndex=output.indexOf(""String_Node_Str"") + 7;
            windowsVersion=output.substring(beginIndex,beginIndex + 6);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
      if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=8;
      }
 else {
        scalingFactor=8;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"",windowsVersion);
      }
    }
 else {
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
            scalingFactor=Integer.parseInt(value);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
  if (scalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * scalingFactor;
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
    if (SystemTray.DEBUG) {
      SystemTray.logger.debug(""String_Node_Str"",scalingFactor,TRAY_SIZE);
    }
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
}","public static void determineIconSize(){
  int scalingFactor=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      String windowsVersion=""String_Node_Str"";
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            int beginIndex=output.indexOf(""String_Node_Str"") + 7;
            windowsVersion=output.substring(beginIndex,beginIndex + 6);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
      if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=1;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=2;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=4;
      }
 else       if (windowsVersion.startsWith(""String_Node_Str"")) {
        scalingFactor=8;
      }
 else {
        scalingFactor=8;
      }
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"",windowsVersion);
      }
    }
 else     if (OS.isLinux()) {
      try {
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
        PrintStream outputStream=new PrintStream(byteArrayOutputStream);
        final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
        shellVersion.setExecutable(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.addArgument(""String_Node_Str"");
        shellVersion.start();
        String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
        if (!output.isEmpty()) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.debug(""String_Node_Str"",output);
          }
          if (output.contains(""String_Node_Str"")) {
            String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
            scalingFactor=Integer.parseInt(value);
          }
        }
      }
 catch (      Throwable e) {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"",e);
        }
      }
    }
 else     if (OS.isMacOsX()) {
      scalingFactor=8;
    }
  }
  if (scalingFactor > 1) {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE * scalingFactor;
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
    if (SystemTray.DEBUG) {
      SystemTray.logger.debug(""String_Node_Str"",scalingFactor,TRAY_SIZE);
    }
  }
 else {
    TRAY_SIZE=SystemTray.DEFAULT_TRAY_SIZE;
    ENTRY_SIZE=SystemTray.DEFAULT_MENU_SIZE;
  }
}"
96340,"public static void dispatch(final Runnable runnable){
  org.eclipse.swt.widgets.Display.getCurrent().asyncExec(runnable);
}","public static void dispatch(final Runnable runnable){
  org.eclipse.swt.widgets.Display.getCurrent().syncExec(runnable);
}"
96341,"@Override public void run(){
synchronized (menuEntries) {
    MenuEntry menuEntry=get(menuText);
    if (menuEntry == null) {
      hasValue.set(false);
    }
 else {
      remove(menuEntry);
    }
  }
}","@Override public void run(){
synchronized (menuEntries) {
    MenuEntry menuEntry=get(menuText);
    if (menuEntry != null) {
      remove(menuEntry);
    }
  }
}"
96342,"/** 
 * This removes a menu entry or sub-menu (via the text label) from the dropdown menu.
 * @param menuText This is the label for the menu entry or sub-menu to remove
 */
public void remove(final String menuText){
  final AtomicBoolean hasValue=new AtomicBoolean(true);
  dispatchAndWait(new Runnable(){
    @Override public void run(){
synchronized (menuEntries) {
        MenuEntry menuEntry=get(menuText);
        if (menuEntry == null) {
          hasValue.set(false);
        }
 else {
          remove(menuEntry);
        }
      }
    }
  }
);
  if (!hasValue.get()) {
    throw new NullPointerException(""String_Node_Str"" + menuText + ""String_Node_Str"");
  }
}","/** 
 * This removes a menu entry or sub-menu (via the text label) from the dropdown menu.
 * @param menuText This is the label for the menu entry or sub-menu to remove
 */
public void remove(final String menuText){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
synchronized (menuEntries) {
        MenuEntry menuEntry=get(menuText);
        if (menuEntry != null) {
          remove(menuEntry);
        }
      }
    }
  }
);
}"
96343,"/** 
 * Deletes the menu, and unreferences everything in it. ALSO recreates ONLY the menu object.
 */
void deleteMenu(){
  if (_native != null) {
synchronized (menuEntries) {
      for (int i=0; i < menuEntries.size(); i++) {
        MenuEntry menuEntry__=menuEntries.get(i);
        if (menuEntry__ instanceof GtkEntry) {
          GtkEntry entry=(GtkEntry)menuEntry__;
          Gobject.g_object_force_floating(entry._native);
          Gtk.gtk_container_remove(_native,entry._native);
        }
 else         if (menuEntry__ instanceof GtkMenu) {
          GtkMenu subMenu=(GtkMenu)menuEntry__;
          Gobject.g_object_force_floating(subMenu.menuEntry._native);
          Gtk.gtk_container_remove(_native,subMenu.menuEntry._native);
        }
      }
      Gtk.gtk_widget_destroy(_native);
    }
  }
  if (getParent() != null) {
    ((GtkMenu)getParent()).deleteMenu();
  }
  _native=Gtk.gtk_menu_new();
  if (menuEntry != null) {
    Gtk.gtk_menu_item_set_submenu(menuEntry._native,_native);
  }
}","/** 
 * Deletes the menu, and unreferences everything in it. ALSO recreates ONLY the menu object.
 */
void deleteMenu(){
  if (_native != null && !obliterateInProgress) {
synchronized (menuEntries) {
      for (int i=0; i < menuEntries.size(); i++) {
        MenuEntry menuEntry__=menuEntries.get(i);
        if (menuEntry__ instanceof GtkEntry) {
          GtkEntry entry=(GtkEntry)menuEntry__;
          Gobject.g_object_force_floating(entry._native);
          Gtk.gtk_container_remove(_native,entry._native);
        }
 else         if (menuEntry__ instanceof GtkMenu) {
          GtkMenu subMenu=(GtkMenu)menuEntry__;
          Gobject.g_object_force_floating(subMenu.menuEntry._native);
          Gtk.gtk_container_remove(_native,subMenu.menuEntry._native);
        }
      }
      Gtk.gtk_widget_destroy(_native);
    }
  }
  if (getParent() != null) {
    ((GtkMenu)getParent()).deleteMenu();
  }
  _native=Gtk.gtk_menu_new();
  if (menuEntry != null) {
    Gtk.gtk_menu_item_set_submenu(menuEntry._native,_native);
  }
}"
96344,"/** 
 * Completely obliterates the menu, no possible way to reconstruct it.
 */
void obliterateMenu(){
  if (_native != null) {
synchronized (menuEntries) {
      for (int i=0; i < menuEntries.size(); i++) {
        MenuEntry menuEntry__=menuEntries.get(i);
        if (menuEntry__ instanceof GtkEntry) {
          ((GtkEntry)menuEntry__).removePrivate();
        }
 else         if (menuEntry__ instanceof GtkMenu) {
          ((GtkMenu)menuEntry__).removePrivate();
        }
      }
      menuEntries.clear();
      Gtk.gtk_widget_destroy(_native);
    }
  }
}","/** 
 * Completely obliterates the menu, no possible way to reconstruct it.
 */
void obliterateMenu(){
  if (_native != null && !obliterateInProgress) {
    obliterateInProgress=true;
synchronized (menuEntries) {
      for (int i=0; i < menuEntries.size(); i++) {
        MenuEntry menuEntry__=menuEntries.get(i);
        if (menuEntry__ instanceof GtkEntry) {
          ((GtkEntry)menuEntry__).removePrivate();
        }
 else         if (menuEntry__ instanceof GtkMenu) {
          ((GtkMenu)menuEntry__).removePrivate();
        }
      }
      menuEntries.clear();
      Gtk.gtk_widget_destroy(_native);
    }
    obliterateInProgress=false;
  }
}"
96345,"void createMenu(){
  if (getParent() != null) {
    ((GtkMenu)getParent()).createMenu();
  }
  boolean hasImages=false;
synchronized (menuEntries) {
    for (int i=0; i < menuEntries.size(); i++) {
      MenuEntry menuEntry__=menuEntries.get(i);
      hasImages|=menuEntry__.hasImage();
    }
    for (int i=0; i < menuEntries.size(); i++) {
      MenuEntry menuEntry__=menuEntries.get(i);
      if (menuEntry__ instanceof GtkEntry) {
        GtkEntry entry=(GtkEntry)menuEntry__;
        entry.setSpacerImage(hasImages);
        Gtk.gtk_menu_shell_append(this._native,entry._native);
        Gobject.g_object_ref_sink(entry._native);
      }
 else       if (menuEntry__ instanceof GtkMenu) {
        GtkMenu subMenu=(GtkMenu)menuEntry__;
        Gtk.gtk_menu_shell_append(this._native,subMenu.menuEntry._native);
        Gobject.g_object_ref_sink(subMenu.menuEntry._native);
        if (subMenu.getParent() != GtkMenu.this) {
          subMenu.createMenu();
        }
      }
    }
    onMenuAdded(_native);
    Gtk.gtk_widget_show_all(_native);
  }
}","void createMenu(){
  if (obliterateInProgress) {
    return;
  }
  if (getParent() != null) {
    ((GtkMenu)getParent()).createMenu();
  }
  boolean hasImages=false;
synchronized (menuEntries) {
    for (int i=0; i < menuEntries.size(); i++) {
      MenuEntry menuEntry__=menuEntries.get(i);
      hasImages|=menuEntry__.hasImage();
    }
    for (int i=0; i < menuEntries.size(); i++) {
      MenuEntry menuEntry__=menuEntries.get(i);
      if (menuEntry__ instanceof GtkEntry) {
        GtkEntry entry=(GtkEntry)menuEntry__;
        entry.setSpacerImage(hasImages);
        Gtk.gtk_menu_shell_append(this._native,entry._native);
        Gobject.g_object_ref_sink(entry._native);
      }
 else       if (menuEntry__ instanceof GtkMenu) {
        GtkMenu subMenu=(GtkMenu)menuEntry__;
        Gtk.gtk_menu_shell_append(this._native,subMenu.menuEntry._native);
        Gobject.g_object_ref_sink(subMenu.menuEntry._native);
        if (subMenu.getParent() != GtkMenu.this) {
          subMenu.createMenu();
        }
      }
    }
    onMenuAdded(_native);
    Gtk.gtk_widget_show_all(_native);
  }
}"
96346,"/** 
 * Necessary to guarantee all updates occur on the dispatch thread
 */
protected void dispatchAndWait(final Runnable runnable){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      try {
        runnable.run();
      }
  finally {
        countDownLatch.countDown();
      }
    }
  }
);
  try {
    if (!countDownLatch.await(TIMEOUT,TimeUnit.SECONDS)) {
      throw new RuntimeException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    SystemTray.logger.error(""String_Node_Str"",new Exception());
  }
}","/** 
 * Necessary to guarantee all updates occur on the dispatch thread
 */
protected void dispatchAndWait(final Runnable runnable){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      try {
        runnable.run();
      }
  finally {
        countDownLatch.countDown();
      }
    }
  }
);
  try {
    if (!countDownLatch.await(TIMEOUT,TimeUnit.SECONDS)) {
      if (SystemTray.DEBUG) {
        SystemTray.logger.error(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    SystemTray.logger.error(""String_Node_Str"",new Exception());
  }
}"
96347,"public void shutdown(){
  dispatch(new Runnable(){
    @Override public void run(){
      obliterateMenu();
      Gtk.shutdownGui();
    }
  }
);
}","public void shutdown(){
  dispatchAndWait(new Runnable(){
    @Override public void run(){
      obliterateMenu();
      Gtk.shutdownGui();
    }
  }
);
}"
96348,"@Override public void setVisible(boolean makeVisible){
  this.hiddenDialog.setVisible(makeVisible);
  this.hiddenDialog.setEnabled(false);
  this.hiddenDialog.setUndecorated(true);
  super.setVisible(makeVisible);
}","@Override public void setVisible(boolean makeVisible){
  this.hiddenDialog.setVisible(makeVisible);
  this.hiddenDialog.setEnabled(false);
  super.setVisible(makeVisible);
}"
96349,"/** 
 * @param systemTray the system tray (which is the object that sits in the system tray)
 * @param parent the parent of this menu, null if the parent is the system tray
 */
public SwingMenu(final SystemTray systemTray,final Menu parent){
  super(systemTray,parent);
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      if (parent != null) {
        _native=new AdjustedJMenu();
        ((SwingMenu)parent)._native.add(_native);
      }
 else {
        _native=new SwingSystemTrayMenuPopup();
      }
    }
  }
);
}","/** 
 * @param systemTray the system tray (which is the object that sits in the system tray)
 * @param parent the parent of this menu, null if the parent is the system tray
 */
public SwingMenu(final SystemTray systemTray,final Menu parent){
  super(systemTray,parent);
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      if (parent != null) {
        _native=new AdjustedJMenu((SwingSystemTrayMenuPopup)((SwingMenu)systemTray.getMenu())._native);
        ((SwingMenu)parent)._native.add(_native);
      }
 else {
        _native=new SwingSystemTrayMenuPopup();
      }
    }
  }
);
}"
96350,"/** 
 * Creates a new system tray handler class.
 */
public SwingSystemTray(final dorkbox.systemTray.SystemTray systemTray){
  super(systemTray,null);
  _native=new SwingSystemTrayMenuPopup();
  ImageUtils.determineIconSize(dorkbox.systemTray.SystemTray.TYPE_SWING);
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray=SystemTray.getSystemTray();
    }
  }
);
}","/** 
 * Creates a new system tray handler class.
 */
public SwingSystemTray(final dorkbox.systemTray.SystemTray systemTray){
  super(systemTray,null);
  ImageUtils.determineIconSize(dorkbox.systemTray.SystemTray.TYPE_SWING);
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray=SystemTray.getSystemTray();
    }
  }
);
}"
96351,"public SwingSystemTrayMenuPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  this.timer=new DelayTimer(""String_Node_Str"",true,new Runnable(){
    @Override public void run(){
      SwingUtil.invokeLater(new Runnable(){
        @Override public void run(){
          Point location=MouseInfo.getPointerInfo().getLocation();
          Point menuLocation=getLocationOnScreen();
          Dimension size=getSize();
          if (location.x >= menuLocation.x && location.x < menuLocation.x + size.width && location.y >= menuLocation.y && location.y < menuLocation.y + size.height) {
            SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
          }
 else           if (mouseClickLocation != null && location.x >= mouseClickLocation.x - MOVEMENT_DELTA && location.x < mouseClickLocation.x + MOVEMENT_DELTA && location.y >= mouseClickLocation.y - MOVEMENT_DELTA && location.y < mouseClickLocation.y + MOVEMENT_DELTA) {
            SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
          }
 else {
            setVisible(false);
          }
        }
      }
);
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent event){
      SwingSystemTrayMenuPopup.this.timer.delay(SwingSystemTrayMenuPopup.this.timer.getDelay());
    }
  }
);
}","public SwingSystemTrayMenuPopup(){
  super();
  setFocusable(true);
  setBorder(new EmptyBorder(1,1,1,1));
  trackedMenus.add(this);
  this.timer=new DelayTimer(""String_Node_Str"",true,new Runnable(){
    @Override public void run(){
      SwingUtil.invokeLater(new Runnable(){
        @Override public void run(){
          Point location=MouseInfo.getPointerInfo().getLocation();
synchronized (trackedMenus) {
            for (            JPopupMenu trackedMenu : trackedMenus) {
              Point menuLocation=trackedMenu.getLocationOnScreen();
              Dimension size=trackedMenu.getSize();
              if (location.x >= menuLocation.x && location.x < menuLocation.x + size.width && location.y >= menuLocation.y && location.y < menuLocation.y + size.height) {
                SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
                return;
              }
            }
          }
          if (mouseClickLocation != null && location.x >= mouseClickLocation.x - MOVEMENT_DELTA && location.x < mouseClickLocation.x + MOVEMENT_DELTA && location.y >= mouseClickLocation.y - MOVEMENT_DELTA && location.y < mouseClickLocation.y + MOVEMENT_DELTA) {
            SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
            return;
          }
          setVisible(false);
        }
      }
);
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent event){
      SwingSystemTrayMenuPopup.this.timer.delay(SwingSystemTrayMenuPopup.this.timer.getDelay());
    }
  }
);
}"
96352,"@Override public void run(){
  Point location=MouseInfo.getPointerInfo().getLocation();
  Point menuLocation=getLocationOnScreen();
  Dimension size=getSize();
  if (location.x >= menuLocation.x && location.x < menuLocation.x + size.width && location.y >= menuLocation.y && location.y < menuLocation.y + size.height) {
    SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
  }
 else   if (mouseClickLocation != null && location.x >= mouseClickLocation.x - MOVEMENT_DELTA && location.x < mouseClickLocation.x + MOVEMENT_DELTA && location.y >= mouseClickLocation.y - MOVEMENT_DELTA && location.y < mouseClickLocation.y + MOVEMENT_DELTA) {
    SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
  }
 else {
    setVisible(false);
  }
}","@Override public void run(){
  Point location=MouseInfo.getPointerInfo().getLocation();
synchronized (trackedMenus) {
    for (    JPopupMenu trackedMenu : trackedMenus) {
      Point menuLocation=trackedMenu.getLocationOnScreen();
      Dimension size=trackedMenu.getSize();
      if (location.x >= menuLocation.x && location.x < menuLocation.x + size.width && location.y >= menuLocation.y && location.y < menuLocation.y + size.height) {
        SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
        return;
      }
    }
  }
  if (mouseClickLocation != null && location.x >= mouseClickLocation.x - MOVEMENT_DELTA && location.x < mouseClickLocation.x + MOVEMENT_DELTA && location.y >= mouseClickLocation.y - MOVEMENT_DELTA && location.y < mouseClickLocation.y + MOVEMENT_DELTA) {
    SwingSystemTrayMenuPopup.this.timer.delay(POPUP_HIDE_DELAY);
    return;
  }
  setVisible(false);
}"
96353,"private static void init(){
  if (systemTray != null) {
    return;
  }
  if (GraphicsEnvironment.isHeadless()) {
    logger.error(""String_Node_Str"");
    throw new HeadlessException();
  }
  Class<? extends SystemTray> trayType=null;
  boolean isKDE=false;
  if (DEBUG) {
    logger.debug(""String_Node_Str"",isJavaFxLoaded);
    logger.debug(""String_Node_Str"",isSwtLoaded);
  }
  if (FORCE_TRAY_TYPE != TYPE_SWING && OS.isLinux()) {
    if (isSwtLoaded) {
      String swt_gtk3=System.getProperty(""String_Node_Str"");
      boolean isSwt_GTK3=swt_gtk3 != null && !swt_gtk3.equals(""String_Node_Str"");
      if (!isSwt_GTK3) {
        String property=System.getProperty(""String_Node_Str"");
        isSwt_GTK3=property != null && !property.startsWith(""String_Node_Str"");
      }
      if (isSwt_GTK3 && FORCE_GTK2) {
        logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (!isSwt_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
 else     if (isJavaFxLoaded) {
      boolean isJFX_GTK3=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
      if (isJFX_GTK3 && FORCE_GTK2) {
        if (OS.javaVersion == 9) {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (!isJFX_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
  }
  if (DEBUG) {
switch (FORCE_TRAY_TYPE) {
case 1:
      logger.debug(""String_Node_Str"");
    break;
case 2:
  logger.debug(""String_Node_Str"");
break;
case 3:
logger.debug(""String_Node_Str"");
break;
default :
logger.debug(""String_Node_Str"");
break;
}
logger.debug(""String_Node_Str"",FORCE_GTK2);
}
if (FORCE_TRAY_TYPE != TYPE_SWING && OS.isLinux()) {
if (Gtk.isGtk2 || AppIndicator.isVersion3) {
if (DEBUG) {
logger.debug(""String_Node_Str"");
}
}
if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_GTK_STATUSICON) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
 else if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_APP_INDICATOR) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
String XDG=System.getenv(""String_Node_Str"");
boolean isReallyGnome=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isReallyGnome=output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (isReallyGnome) {
if (DEBUG) {
logger.error(""String_Node_Str"");
}
XDG=""String_Node_Str"";
}
if (DEBUG) {
logger.debug(""String_Node_Str"",XDG);
}
if (trayType == null) {
if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
boolean isNewXFCE=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isNewXFCE=output.contains(""String_Node_Str"") || output.contains(""String_Node_Str"") || output.contains(""String_Node_Str"")|| output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (DEBUG) {
logger.error(""String_Node_Str"",isNewXFCE);
}
if (isNewXFCE) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
isKDE=true;
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
String GDM=System.getenv(""String_Node_Str"");
if (DEBUG) {
logger.debug(""String_Node_Str"",GDM);
}
if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
trayType=null;
GnomeShellExtension.SHELL_RESTART_COMMAND=""String_Node_Str"";
}
}
}
if (isReallyGnome) {
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
shellVersion.setExecutable(""String_Node_Str"");
shellVersion.addArgument(""String_Node_Str"");
shellVersion.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
if (!output.isEmpty()) {
if (DEBUG) {
logger.info(""String_Node_Str"");
}
GnomeShellExtension.install(output);
if (trayType == null) {
trayType=GtkSystemTray.class;
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
if (trayType == null) {
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
  trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
  if (DEBUG) {
    logger.error(""String_Node_Str"",e);
  }
 else {
    logger.error(""String_Node_Str"");
  }
}
break;
}
}
  finally {
IO.closeQuietly(bin);
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
if (trayType == null) {
trayType=GtkSystemTray.class;
logger.error(""String_Node_Str"" + ""String_Node_Str"");
}
}
if (OS.isWindows()) {
WindowsSystemTraySwing.fix();
}
if (trayType == null && java.awt.SystemTray.isSupported()) {
try {
java.awt.SystemTray.getSystemTray();
trayType=SwingSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
 else {
logger.error(""String_Node_Str"");
}
}
}
if (trayType == null) {
logger.error(""String_Node_Str"");
systemTray=null;
}
 else {
SystemTray systemTray_=null;
CacheUtil.setUniqueCachePerRun=isKDE;
CacheUtil.tempDir=""String_Node_Str"";
try {
if (OS.isLinux() && trayType == AppIndicatorTray.class && Gtk.isGtk2 && AppIndicator.isVersion3) {
try {
trayType=GtkSystemTray.class;
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}
}
systemTray_=(SystemTray)trayType.getConstructors()[0].newInstance();
logger.info(""String_Node_Str"",trayType.getSimpleName());
}
 catch (Exception e) {
logger.error(""String_Node_Str"" + trayType.getSimpleName() + ""String_Node_Str"",e);
}
systemTray=systemTray_;
if (ENABLE_SHUTDOWN_HOOK) {
if (isJavaFxLoaded) {
JavaFX.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
 else if (isSwtLoaded) {
Swt.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
}
}
}","private static void init(){
  if (systemTray != null) {
    return;
  }
  if (GraphicsEnvironment.isHeadless()) {
    logger.error(""String_Node_Str"");
    throw new HeadlessException();
  }
  Class<? extends SystemTray> trayType=null;
  boolean isKDE=false;
  if (DEBUG) {
    logger.debug(""String_Node_Str"",isJavaFxLoaded);
    logger.debug(""String_Node_Str"",isSwtLoaded);
  }
  if (FORCE_TRAY_TYPE != TYPE_SWING && OS.isLinux()) {
    if (isSwtLoaded) {
      String swt_gtk3=System.getProperty(""String_Node_Str"");
      boolean isSwt_GTK3=swt_gtk3 != null && !swt_gtk3.equals(""String_Node_Str"");
      if (!isSwt_GTK3) {
        String property=System.getProperty(""String_Node_Str"");
        isSwt_GTK3=property != null && !property.startsWith(""String_Node_Str"");
      }
      if (isSwt_GTK3 && FORCE_GTK2) {
        logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (!isSwt_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
 else     if (isJavaFxLoaded) {
      boolean isJFX_GTK3=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
      if (isJFX_GTK3 && FORCE_GTK2) {
        if (OS.javaVersion == 9) {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (!isJFX_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
  }
  if (DEBUG) {
switch (FORCE_TRAY_TYPE) {
case 1:
      logger.debug(""String_Node_Str"");
    break;
case 2:
  logger.debug(""String_Node_Str"");
break;
case 3:
logger.debug(""String_Node_Str"");
break;
default :
logger.debug(""String_Node_Str"");
break;
}
logger.debug(""String_Node_Str"",FORCE_GTK2);
}
if (FORCE_TRAY_TYPE != TYPE_SWING && OS.isLinux()) {
if (Gtk.isGtk2 || AppIndicator.isVersion3) {
if (DEBUG) {
logger.debug(""String_Node_Str"");
}
}
if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_GTK_STATUSICON) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
 else if (SystemTray.FORCE_TRAY_TYPE == SystemTray.TYPE_APP_INDICATOR) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
String XDG=System.getenv(""String_Node_Str"");
boolean isReallyGnome=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isReallyGnome=output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (isReallyGnome) {
if (DEBUG) {
logger.error(""String_Node_Str"");
}
XDG=""String_Node_Str"";
}
if (DEBUG) {
logger.debug(""String_Node_Str"",XDG);
}
if (trayType == null) {
if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
boolean isNewXFCE=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isNewXFCE=output.contains(""String_Node_Str"") || output.contains(""String_Node_Str"") || output.contains(""String_Node_Str"")|| output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (DEBUG) {
logger.error(""String_Node_Str"",isNewXFCE);
}
if (isNewXFCE) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
isKDE=true;
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
String GDM=System.getenv(""String_Node_Str"");
if (DEBUG) {
logger.debug(""String_Node_Str"",GDM);
}
if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
trayType=null;
GnomeShellExtension.SHELL_RESTART_COMMAND=""String_Node_Str"";
}
}
}
if (isReallyGnome) {
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
shellVersion.setExecutable(""String_Node_Str"");
shellVersion.addArgument(""String_Node_Str"");
shellVersion.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
if (!output.isEmpty()) {
if (DEBUG) {
logger.debug(""String_Node_Str"");
}
GnomeShellExtension.install(output);
if (trayType == null) {
trayType=GtkSystemTray.class;
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
if (trayType == null) {
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
  trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
  if (DEBUG) {
    logger.error(""String_Node_Str"",e);
  }
 else {
    logger.error(""String_Node_Str"");
  }
}
break;
}
}
  finally {
IO.closeQuietly(bin);
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
if (trayType == null) {
trayType=GtkSystemTray.class;
logger.error(""String_Node_Str"" + ""String_Node_Str"");
}
}
if (OS.isWindows()) {
WindowsSystemTraySwing.fix();
}
if (trayType == null && java.awt.SystemTray.isSupported()) {
try {
java.awt.SystemTray.getSystemTray();
trayType=SwingSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
 else {
logger.error(""String_Node_Str"");
}
}
}
if (trayType == null) {
logger.error(""String_Node_Str"");
systemTray=null;
}
 else {
SystemTray systemTray_=null;
CacheUtil.setUniqueCachePerRun=isKDE;
CacheUtil.tempDir=""String_Node_Str"";
try {
if (OS.isLinux() && trayType == AppIndicatorTray.class && Gtk.isGtk2 && AppIndicator.isVersion3) {
try {
trayType=GtkSystemTray.class;
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}
}
systemTray_=(SystemTray)trayType.getConstructors()[0].newInstance();
logger.info(""String_Node_Str"",trayType.getSimpleName());
}
 catch (Exception e) {
logger.error(""String_Node_Str"" + trayType.getSimpleName() + ""String_Node_Str"",e);
}
systemTray=systemTray_;
if (ENABLE_SHUTDOWN_HOOK) {
if (isJavaFxLoaded) {
JavaFX.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
 else if (isSwtLoaded) {
Swt.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
}
}
}"
96354,"/** 
 * Changes the tray icon used. Because the cross-platform, underlying system uses a file path to load icons for the system tray, this will copy the contents of the imageStream to a temporary location on disk.
 * @param imageStream the InputStream of the icon to use
 */
public void setIcon(InputStream imageStream){
  setIcon_(ImageUtils.resizeAndCache(ImageUtils.SIZE,imageStream));
}","/** 
 * Changes the tray icon used. Because the cross-platform, underlying system uses a file path to load icons for the system tray, this will copy the contents of the imageStream to a temporary location on disk.
 * @param imageStream the InputStream of the icon to use
 */
public void setIcon(InputStream imageStream){
  setIcon_(ImageUtils.resizeAndCache(ImageUtils.TRAY_SIZE,imageStream));
}"
96355,"public static void install(final String shellVersionString) throws IOException {
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  boolean hasTopIcons=output.contains(""String_Node_Str"");
  boolean hasSystemTray=output.contains(UID);
  if (hasTopIcons) {
    return;
  }
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  String versionOutput=shellVersionString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  final int indexOf=versionOutput.indexOf('.');
  final int nextIndexOf=versionOutput.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    versionOutput=versionOutput.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + versionOutput + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
  finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      throw new RuntimeException(msg);
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
  finally {
    IO.close(outputWriter,logger);
  }
  InputStream reader=null;
  FileOutputStream fileOutputStream=null;
  try {
    reader=GnomeShellExtension.class.getResourceAsStream(""String_Node_Str"");
    fileOutputStream=new FileOutputStream(extensionFile);
    IO.copyStream(reader,fileOutputStream);
  }
  finally {
    IO.close(reader,logger);
    IO.close(fileOutputStream,logger);
  }
  if (!hasSystemTray) {
    logger.debug(""String_Node_Str"");
    final StringBuilder stringBuilder=new StringBuilder(output);
    int extensionIndex=output.indexOf(""String_Node_Str"");
    if (extensionIndex > 0) {
      stringBuilder.delete(extensionIndex,stringBuilder.length());
    }
    extensionIndex=output.indexOf(""String_Node_Str"");
    if (extensionIndex > 0) {
      stringBuilder.delete(0,extensionIndex);
    }
    logger.info(""String_Node_Str"",stringBuilder.toString());
    if (stringBuilder.length() > 2) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(""String_Node_Str"").append(UID).append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"");
    final ShellProcessBuilder setGsettings=new ShellProcessBuilder(outputStream);
    setGsettings.setExecutable(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(stringBuilder.toString());
    setGsettings.start();
  }
  if (ENABLE_SHELL_RESTART) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",SHELL_RESTART_COMMAND);
      return;
    }
    logger.info(""String_Node_Str"");
    final ShellProcessBuilder restartShell=new ShellProcessBuilder();
    restartShell.addArgument(SHELL_RESTART_COMMAND);
    restartShell.start();
  }
}","public static void install(final String shellVersionString) throws IOException {
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
  PrintStream outputStream=new PrintStream(byteArrayOutputStream);
  final ShellProcessBuilder gsettings=new ShellProcessBuilder(outputStream);
  gsettings.setExecutable(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.addArgument(""String_Node_Str"");
  gsettings.start();
  String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
  boolean hasTopIcons=output.contains(""String_Node_Str"");
  boolean hasSystemTray=output.contains(UID);
  if (hasTopIcons) {
    return;
  }
  String userHome=System.getProperty(""String_Node_Str"");
  final File file=new File(userHome + ""String_Node_Str"" + UID);
  final File metaDatafile=new File(file,""String_Node_Str"");
  final File extensionFile=new File(file,""String_Node_Str"");
  String versionOutput=shellVersionString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  final int indexOf=versionOutput.indexOf('.');
  final int nextIndexOf=versionOutput.indexOf('.',indexOf + 1);
  if (indexOf < nextIndexOf) {
    versionOutput=versionOutput.substring(0,nextIndexOf);
  }
  String metadata=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + versionOutput + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ ""String_Node_Str""+ SystemTray.getVersion()+ ""String_Node_Str""+ ""String_Node_Str"";
  if (hasSystemTray) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    StringBuilder builder=new StringBuilder(256);
    BufferedReader bin=null;
    try {
      bin=new BufferedReader(new FileReader(metaDatafile));
      String line;
      while ((line=bin.readLine()) != null) {
        builder.append(line).append(""String_Node_Str"");
      }
    }
  finally {
      IO.close(bin,logger);
    }
    if (metadata.equals(builder.toString())) {
      if (!SystemTray.DEBUG) {
        return;
      }
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  if (!file.isDirectory()) {
    final boolean mkdirs=file.mkdirs();
    if (!mkdirs) {
      final String msg=""String_Node_Str"" + file;
      logger.error(msg);
      throw new RuntimeException(msg);
    }
  }
  BufferedWriter outputWriter=null;
  try {
    outputWriter=new BufferedWriter(new FileWriter(metaDatafile,false));
    outputWriter.write(metadata);
    outputWriter.flush();
    outputWriter.close();
  }
  finally {
    IO.close(outputWriter,logger);
  }
  InputStream reader=null;
  FileOutputStream fileOutputStream=null;
  try {
    reader=GnomeShellExtension.class.getResourceAsStream(""String_Node_Str"");
    fileOutputStream=new FileOutputStream(extensionFile);
    IO.copyStream(reader,fileOutputStream);
  }
  finally {
    IO.close(reader,logger);
    IO.close(fileOutputStream,logger);
  }
  if (!hasSystemTray) {
    logger.debug(""String_Node_Str"");
    final StringBuilder stringBuilder=new StringBuilder(output);
    int extensionIndex=output.indexOf(""String_Node_Str"");
    if (extensionIndex > 0) {
      stringBuilder.delete(extensionIndex,stringBuilder.length());
    }
    extensionIndex=output.indexOf(""String_Node_Str"");
    if (extensionIndex > 0) {
      stringBuilder.delete(0,extensionIndex);
    }
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",stringBuilder.toString());
    }
    if (stringBuilder.length() > 2) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(""String_Node_Str"").append(UID).append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"");
    final ShellProcessBuilder setGsettings=new ShellProcessBuilder(outputStream);
    setGsettings.setExecutable(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(""String_Node_Str"");
    setGsettings.addArgument(stringBuilder.toString());
    setGsettings.start();
  }
  if (ENABLE_SHELL_RESTART) {
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"",SHELL_RESTART_COMMAND);
      return;
    }
    if (SystemTray.DEBUG) {
      logger.debug(""String_Node_Str"");
    }
    final ShellProcessBuilder restartShell=new ShellProcessBuilder();
    restartShell.addArgument(SHELL_RESTART_COMMAND);
    restartShell.start();
  }
}"
96356,"@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.SIZE,imageStream));
  }
}","@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}"
96357,"@Override @Deprecated public void addMenuEntry(final String menuText,final InputStream imageStream,final SystemTrayMenuAction callback){
  if (imageStream == null) {
    addMenuEntry_(menuText,null,callback);
  }
 else {
    addMenuEntry_(menuText,ImageUtils.resizeAndCache(ImageUtils.SIZE,imageStream),callback);
  }
}","@Override @Deprecated public void addMenuEntry(final String menuText,final InputStream imageStream,final SystemTrayMenuAction callback){
  if (imageStream == null) {
    addMenuEntry_(menuText,null,callback);
  }
 else {
    addMenuEntry_(menuText,ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream),callback);
  }
}"
96358,"@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.SIZE,imageStream));
  }
}","@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}"
96359,"@Override @Deprecated public void addMenuEntry(final String menuText,final InputStream imageStream,final SystemTrayMenuAction callback){
  if (imageStream == null) {
    addMenuEntry_(menuText,null,callback);
  }
 else {
    addMenuEntry_(menuText,ImageUtils.resizeAndCache(ImageUtils.SIZE,imageStream),callback);
  }
}","@Override @Deprecated public void addMenuEntry(final String menuText,final InputStream imageStream,final SystemTrayMenuAction callback){
  if (imageStream == null) {
    addMenuEntry_(menuText,null,callback);
  }
 else {
    addMenuEntry_(menuText,ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream),callback);
  }
}"
96360,"/** 
 * @param trayType LINUX_GTK = 1; LINUX_APP_INDICATOR = 2; SWING_INDICATOR = 3;
 */
public static void determineIconSize(int trayType){
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      SIZE=SystemTray.DEFAULT_WINDOWS_SIZE;
    }
 else {
      if (trayType == SystemTray.TYPE_SWING || trayType == SystemTray.TYPE_GTK_STATUSICON) {
        SIZE=SystemTray.DEFAULT_LINUX_SIZE;
      }
 else {
        int uiScalingFactor=0;
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.info(""String_Node_Str"",output);
            }
            if (output.startsWith(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 1,output.length() - 1);
              uiScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        if (uiScalingFactor > 1) {
          SIZE=SystemTray.DEFAULT_LINUX_SIZE * uiScalingFactor;
        }
 else {
          SIZE=SystemTray.DEFAULT_LINUX_SIZE;
        }
        if (SystemTray.DEBUG) {
          SystemTray.logger.info(""String_Node_Str"",uiScalingFactor,SIZE);
        }
      }
    }
  }
 else {
    if (OS.isWindows()) {
      SIZE=SystemTray.DEFAULT_WINDOWS_SIZE;
    }
 else {
      SIZE=SystemTray.DEFAULT_LINUX_SIZE;
    }
  }
}","/** 
 * @param trayType LINUX_GTK = 1; LINUX_APP_INDICATOR = 2; SWING_INDICATOR = 3;
 */
public static void determineIconSize(int trayType){
  int trayScale=0;
  int menuScale=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      if (trayType == SystemTray.TYPE_SWING || trayType == SystemTray.TYPE_GTK_STATUSICON) {
        trayScale=SystemTray.DEFAULT_LINUX_SIZE;
        menuScale=SystemTray.DEFAULT_MENU_SIZE;
      }
 else {
        int uiScalingFactor=0;
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
              uiScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        if (uiScalingFactor > 1) {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE * uiScalingFactor;
          menuScale=SystemTray.DEFAULT_MENU_SIZE * uiScalingFactor;
        }
 else {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE;
          menuScale=SystemTray.DEFAULT_MENU_SIZE;
        }
        if (SystemTray.DEBUG) {
          SystemTray.logger.debug(""String_Node_Str"",uiScalingFactor,trayScale);
        }
      }
    }
  }
 else {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      trayScale=SystemTray.DEFAULT_LINUX_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
  }
  TRAY_SIZE=trayScale;
  ENTRY_SIZE=menuScale;
}"
96361,"public GtkSystemTray(){
  super();
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      trayIcon=trayIcon_;
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(getMenu(),null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  super.waitForStartup();
  ImageUtils.determineIconSize(SystemTray.TYPE_GTKSTATUSICON);
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
    }
  }
);
}","public GtkSystemTray(){
  super();
  Gtk.startGui();
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      trayIcon=trayIcon_;
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(getMenu(),null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
    }
  }
);
  super.waitForStartup();
  ImageUtils.determineIconSize(SystemTray.TYPE_GTKSTATUSICON);
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      if (SystemTray.isJavaFxLoaded) {
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      }
    }
  }
);
}"
96362,"@Override protected void setIcon_(final String iconPath){
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_from_file(trayIcon,iconPath);
      if (!isActive) {
        isActive=true;
        Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
        Gtk.gtk_status_icon_set_visible(trayIcon,true);
      }
    }
  }
);
}","@Override protected void setIcon_(final String iconPath){
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_from_file(trayIcon,iconPath);
      if (!isActive) {
        isActive=true;
        Gtk.gtk_status_icon_set_visible(trayIcon,true);
      }
    }
  }
);
}"
96363,"@Override public void run(){
  Gtk.gtk_status_icon_set_from_file(trayIcon,iconPath);
  if (!isActive) {
    isActive=true;
    Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
    Gtk.gtk_status_icon_set_visible(trayIcon,true);
  }
}","@Override public void run(){
  Gtk.gtk_status_icon_set_from_file(trayIcon,iconPath);
  if (!isActive) {
    isActive=true;
    Gtk.gtk_status_icon_set_visible(trayIcon,true);
  }
}"
96364,"public GtkSystemTray(){
  super();
  Gtk.startGui();
  final CountDownLatch blockUntilStarted=new CountDownLatch(1);
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      trayIcon=trayIcon_;
      Gtk.gtk_status_icon_set_title(trayIcon_,""String_Node_Str"");
      final GEventCallback gtkCallback2=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(getMenu(),null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon_,""String_Node_Str"",gtkCallback2,null,0);
      gtkCallbacks.add(gtkCallback2);
      gtkCallbacks.add(button_press_event);
      blockUntilStarted.countDown();
    }
  }
);
  if (SystemTray.isJavaFxLoaded) {
    if (!JavaFX.isEventThread()) {
      try {
        blockUntilStarted.await(10,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (SystemTray.isSwtLoaded) {
    if (SystemTray.FORCE_LINUX_TYPE != SystemTray.LINUX_GTK) {
      try {
        blockUntilStarted.await(10,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    try {
      blockUntilStarted.await(10,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","public GtkSystemTray(){
  super();
  Gtk.startGui();
  final CountDownLatch blockUntilStarted=new CountDownLatch(1);
  dispatch(new Runnable(){
    @Override public void run(){
      final Pointer trayIcon_=Gtk.gtk_status_icon_new();
      Gtk.gtk_status_icon_set_visible(trayIcon_,false);
      trayIcon=trayIcon_;
    }
  }
);
  dispatch(new Runnable(){
    @Override public void run(){
      Gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
      Gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
      final GEventCallback gtkCallback=new GEventCallback(){
        @Override public void callback(        Pointer notUsed,        final GdkEventButton event){
          if (event.type == 4) {
            Gtk.gtk_menu_popup(getMenu(),null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
          }
        }
      }
;
      final NativeLong button_press_event=Gobject.g_signal_connect_object(trayIcon,""String_Node_Str"",gtkCallback,null,0);
      gtkCallbacks.add(gtkCallback);
      gtkCallbacks.add(button_press_event);
      blockUntilStarted.countDown();
    }
  }
);
  if (SystemTray.isJavaFxLoaded) {
    if (!JavaFX.isEventThread()) {
      try {
        blockUntilStarted.await(10,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (SystemTray.isSwtLoaded) {
    if (SystemTray.FORCE_LINUX_TYPE != SystemTray.LINUX_GTK) {
      try {
        blockUntilStarted.await(10,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    try {
      blockUntilStarted.await(10,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
96365,"private static void init(){
  if (systemTray != null) {
    return;
  }
  if (GraphicsEnvironment.isHeadless()) {
    logger.error(""String_Node_Str"");
    throw new HeadlessException();
  }
  Class<? extends SystemTray> trayType=null;
  if (FORCE_LINUX_TYPE != SWING_INDICATOR && OS.isLinux()) {
    if (isSwtLoaded) {
      boolean isSwt_GTK3=!System.getProperty(""String_Node_Str"").equals(""String_Node_Str"");
      if (!isSwt_GTK3) {
        isSwt_GTK3=!System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"");
      }
      if (isSwt_GTK3 && FORCE_GTK2) {
        logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (!isSwt_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
 else     if (isJavaFxLoaded) {
      boolean isJFX_GTK3=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
      if (isJFX_GTK3 && FORCE_GTK2) {
        if (OS.javaVersion == 9) {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (!isJFX_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
  }
  if (DEBUG) {
switch (FORCE_LINUX_TYPE) {
case 1:
      logger.debug(""String_Node_Str"");
    break;
case 2:
  logger.debug(""String_Node_Str"");
break;
case 3:
logger.debug(""String_Node_Str"");
break;
default :
logger.debug(""String_Node_Str"");
break;
}
logger.debug(""String_Node_Str"",FORCE_GTK2);
}
if (OS.isWindows()) {
TRAY_SIZE-=4;
}
if (FORCE_LINUX_TYPE != SWING_INDICATOR && OS.isLinux()) {
if (Gtk.isGtk2 || AppIndicator.isVersion3) {
if (DEBUG) {
logger.trace(""String_Node_Str"");
}
}
if (SystemTray.FORCE_LINUX_TYPE == SystemTray.LINUX_GTK) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
 else if (SystemTray.FORCE_LINUX_TYPE == SystemTray.LINUX_APP_INDICATOR) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
if (trayType == null) {
String XDG=System.getenv(""String_Node_Str"");
boolean isReallyGnome=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isReallyGnome=output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (isReallyGnome) {
if (DEBUG) {
logger.error(""String_Node_Str"");
}
XDG=""String_Node_Str"";
}
if (DEBUG) {
logger.debug(""String_Node_Str"",XDG);
}
if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
isKDE=true;
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
String GDM=System.getenv(""String_Node_Str"");
if (DEBUG) {
logger.debug(""String_Node_Str"",GDM);
}
if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
trayType=null;
GnomeShellExtension.SHELL_RESTART_COMMAND=""String_Node_Str"";
}
}
if (trayType == null) {
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
shellVersion.setExecutable(""String_Node_Str"");
shellVersion.addArgument(""String_Node_Str"");
shellVersion.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
if (!output.isEmpty()) {
if (DEBUG) {
logger.info(""String_Node_Str"");
}
GnomeShellExtension.install(logger,output);
trayType=GtkSystemTray.class;
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
trayType=null;
}
}
}
if (trayType == null) {
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
  trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
  if (DEBUG) {
    logger.error(""String_Node_Str"",e);
  }
 else {
    logger.error(""String_Node_Str"");
  }
}
break;
}
}
  finally {
if (bin != null) {
try {
  bin.close();
}
 catch (Exception ignored) {
}
bin=null;
}
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
 finally {
if (bin != null) {
try {
bin.close();
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
}
}
if (trayType == null) {
trayType=GtkSystemTray.class;
logger.error(""String_Node_Str"" + ""String_Node_Str"");
}
}
if (trayType == null && java.awt.SystemTray.isSupported()) {
try {
java.awt.SystemTray.getSystemTray();
trayType=SwingSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
 else {
logger.error(""String_Node_Str"");
}
}
}
if (trayType == null) {
logger.error(""String_Node_Str"");
systemTray=null;
}
 else {
SystemTray systemTray_=null;
try {
ImageUtil.init();
if (OS.isLinux() && trayType == AppIndicatorTray.class && Gtk.isGtk2 && AppIndicator.isVersion3) {
try {
trayType=GtkSystemTray.class;
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}
}
systemTray_=(SystemTray)trayType.getConstructors()[0].newInstance();
logger.info(""String_Node_Str"",trayType.getSimpleName());
}
 catch (NoSuchAlgorithmException e) {
logger.error(""String_Node_Str"");
}
catch (Exception e) {
logger.error(""String_Node_Str"" + trayType.getSimpleName() + ""String_Node_Str"",e);
}
systemTray=systemTray_;
if (ENABLE_SHUTDOWN_HOOK) {
if (isJavaFxLoaded) {
JavaFX.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
 else if (isSwtLoaded) {
Swt.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
}
}
}","private static void init(){
  if (systemTray != null) {
    return;
  }
  if (GraphicsEnvironment.isHeadless()) {
    logger.error(""String_Node_Str"");
    throw new HeadlessException();
  }
  Class<? extends SystemTray> trayType=null;
  if (DEBUG) {
    logger.debug(""String_Node_Str"",isJavaFxLoaded);
    logger.debug(""String_Node_Str"",isSwtLoaded);
  }
  if (FORCE_LINUX_TYPE != SWING_INDICATOR && OS.isLinux()) {
    if (isSwtLoaded) {
      boolean isSwt_GTK3=!System.getProperty(""String_Node_Str"").equals(""String_Node_Str"");
      if (!isSwt_GTK3) {
        isSwt_GTK3=!System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"");
      }
      if (isSwt_GTK3 && FORCE_GTK2) {
        logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (!isSwt_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
 else     if (isJavaFxLoaded) {
      boolean isJFX_GTK3=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
      if (isJFX_GTK3 && FORCE_GTK2) {
        if (OS.javaVersion == 9) {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (!isJFX_GTK3 && !FORCE_GTK2) {
        if (DEBUG) {
          logger.debug(""String_Node_Str"");
        }
        FORCE_GTK2=true;
      }
    }
  }
  if (DEBUG) {
switch (FORCE_LINUX_TYPE) {
case 1:
      logger.debug(""String_Node_Str"");
    break;
case 2:
  logger.debug(""String_Node_Str"");
break;
case 3:
logger.debug(""String_Node_Str"");
break;
default :
logger.debug(""String_Node_Str"");
break;
}
logger.debug(""String_Node_Str"",FORCE_GTK2);
}
if (OS.isWindows()) {
TRAY_SIZE-=4;
}
if (FORCE_LINUX_TYPE != SWING_INDICATOR && OS.isLinux()) {
if (Gtk.isGtk2 || AppIndicator.isVersion3) {
if (DEBUG) {
logger.trace(""String_Node_Str"");
}
}
if (SystemTray.FORCE_LINUX_TYPE == SystemTray.LINUX_GTK) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
 else if (SystemTray.FORCE_LINUX_TYPE == SystemTray.LINUX_APP_INDICATOR) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
String XDG=System.getenv(""String_Node_Str"");
boolean isReallyGnome=false;
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shell=new ShellProcessBuilder(outputStream);
shell.setExecutable(""String_Node_Str"");
shell.addArgument(""String_Node_Str"");
shell.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
isReallyGnome=output.contains(""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
if (isReallyGnome) {
if (DEBUG) {
logger.error(""String_Node_Str"");
}
XDG=""String_Node_Str"";
}
if (DEBUG) {
logger.debug(""String_Node_Str"",XDG);
}
if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e1) {
if (DEBUG) {
logger.error(""String_Node_Str"",e1);
}
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
isKDE=true;
try {
trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(XDG)) {
String GDM=System.getenv(""String_Node_Str"");
if (DEBUG) {
logger.debug(""String_Node_Str"",GDM);
}
if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
try {
trayType=GtkSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
 else if (""String_Node_Str"".equalsIgnoreCase(GDM)) {
trayType=null;
GnomeShellExtension.SHELL_RESTART_COMMAND=""String_Node_Str"";
}
}
if (isReallyGnome) {
try {
ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
PrintStream outputStream=new PrintStream(byteArrayOutputStream);
final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
shellVersion.setExecutable(""String_Node_Str"");
shellVersion.addArgument(""String_Node_Str"");
shellVersion.start();
String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
if (!output.isEmpty()) {
if (DEBUG) {
logger.info(""String_Node_Str"");
}
GnomeShellExtension.install(output);
if (trayType == null) {
trayType=GtkSystemTray.class;
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
if (trayType == null) {
BufferedReader bin=null;
try {
File proc=new File(""String_Node_Str"");
File[] listFiles=proc.listFiles();
if (listFiles != null) {
for (File procs : listFiles) {
String name=procs.getName();
if (!Character.isDigit(name.charAt(0))) {
continue;
}
File status=new File(procs,""String_Node_Str"");
if (!status.canRead()) {
continue;
}
try {
bin=new BufferedReader(new FileReader(status));
String readLine=bin.readLine();
if (readLine != null && readLine.contains(""String_Node_Str"")) {
try {
  trayType=AppIndicatorTray.class;
}
 catch (Throwable e) {
  if (DEBUG) {
    logger.error(""String_Node_Str"",e);
  }
 else {
    logger.error(""String_Node_Str"");
  }
}
break;
}
}
  finally {
if (bin != null) {
try {
  bin.close();
}
 catch (Exception ignored) {
}
bin=null;
}
}
}
}
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
 finally {
if (bin != null) {
try {
bin.close();
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
}
}
}
}
if (trayType == null) {
trayType=GtkSystemTray.class;
logger.error(""String_Node_Str"" + ""String_Node_Str"");
}
}
if (trayType == null && java.awt.SystemTray.isSupported()) {
try {
java.awt.SystemTray.getSystemTray();
trayType=SwingSystemTray.class;
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
 else {
logger.error(""String_Node_Str"");
}
}
}
if (trayType == null) {
logger.error(""String_Node_Str"");
systemTray=null;
}
 else {
SystemTray systemTray_=null;
try {
ImageUtil.init();
if (OS.isLinux() && trayType == AppIndicatorTray.class && Gtk.isGtk2 && AppIndicator.isVersion3) {
try {
trayType=GtkSystemTray.class;
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
 catch (Throwable e) {
if (DEBUG) {
logger.error(""String_Node_Str"",e);
}
logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}
}
systemTray_=(SystemTray)trayType.getConstructors()[0].newInstance();
logger.info(""String_Node_Str"",trayType.getSimpleName());
}
 catch (NoSuchAlgorithmException e) {
logger.error(""String_Node_Str"");
}
catch (Exception e) {
logger.error(""String_Node_Str"" + trayType.getSimpleName() + ""String_Node_Str"",e);
}
systemTray=systemTray_;
if (ENABLE_SHUTDOWN_HOOK) {
if (isJavaFxLoaded) {
JavaFX.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
 else if (isSwtLoaded) {
Swt.onShutdown(new Runnable(){
@Override public void run(){
if (systemTray != null) {
systemTray.shutdown();
}
}
}
);
}
}
}
}"
96366,"/** 
 * @param trayType LINUX_GTK = 1; LINUX_APP_INDICATOR = 2; SWING_INDICATOR = 3;
 */
public static void determineIconSize(int trayType){
  int trayScale=0;
  int menuScale=0;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      if (trayType == SystemTray.TYPE_SWING || trayType == SystemTray.TYPE_GTK_STATUSICON) {
        trayScale=SystemTray.DEFAULT_LINUX_SIZE;
        menuScale=SystemTray.DEFAULT_MENU_SIZE;
      }
 else {
        int uiScalingFactor=0;
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
              uiScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        if (uiScalingFactor > 1) {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE * uiScalingFactor;
          menuScale=SystemTray.DEFAULT_MENU_SIZE * uiScalingFactor;
        }
 else {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE;
          menuScale=SystemTray.DEFAULT_MENU_SIZE;
        }
        if (SystemTray.DEBUG) {
          SystemTray.logger.debug(""String_Node_Str"",uiScalingFactor,trayScale);
        }
      }
    }
  }
 else {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      trayScale=SystemTray.DEFAULT_LINUX_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
  }
  TRAY_SIZE=trayScale;
  ENTRY_SIZE=menuScale;
}","/** 
 * @param trayType LINUX_GTK = 1; LINUX_APP_INDICATOR = 2; SWING_INDICATOR = 3;
 */
public static void determineIconSize(int trayType){
  int trayScale;
  int menuScale;
  if (SystemTray.AUTO_TRAY_SIZE) {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      if (trayType == SystemTray.TYPE_SWING || trayType == SystemTray.TYPE_GTK_STATUSICON) {
        trayScale=SystemTray.DEFAULT_LINUX_SIZE;
        menuScale=SystemTray.DEFAULT_MENU_SIZE;
      }
 else {
        if (SystemTray.DEBUG) {
          SystemTray.logger.error(""String_Node_Str"");
        }
        int uiScalingFactor=0;
        try {
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(8196);
          PrintStream outputStream=new PrintStream(byteArrayOutputStream);
          final ShellProcessBuilder shellVersion=new ShellProcessBuilder(outputStream);
          shellVersion.setExecutable(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.addArgument(""String_Node_Str"");
          shellVersion.start();
          String output=ShellProcessBuilder.getOutput(byteArrayOutputStream);
          if (!output.isEmpty()) {
            if (SystemTray.DEBUG) {
              SystemTray.logger.debug(""String_Node_Str"",output);
            }
            if (output.contains(""String_Node_Str"")) {
              String value=output.substring(output.indexOf(""String_Node_Str"") + 7,output.length() - 1);
              uiScalingFactor=Integer.parseInt(value);
            }
          }
        }
 catch (        Throwable e) {
          if (SystemTray.DEBUG) {
            SystemTray.logger.error(""String_Node_Str"",e);
          }
        }
        if (uiScalingFactor > 1) {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE * uiScalingFactor;
          menuScale=SystemTray.DEFAULT_MENU_SIZE * uiScalingFactor;
        }
 else {
          trayScale=SystemTray.DEFAULT_LINUX_SIZE;
          menuScale=SystemTray.DEFAULT_MENU_SIZE;
        }
        if (SystemTray.DEBUG) {
          SystemTray.logger.debug(""String_Node_Str"",uiScalingFactor,trayScale);
        }
      }
    }
  }
 else {
    if (OS.isWindows()) {
      trayScale=SystemTray.DEFAULT_WINDOWS_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
 else {
      trayScale=SystemTray.DEFAULT_LINUX_SIZE;
      menuScale=SystemTray.DEFAULT_MENU_SIZE;
    }
  }
  TRAY_SIZE=trayScale;
  ENTRY_SIZE=menuScale;
}"
96367,"/** 
 * Resizes the image (as a FILE on disk, or as a RESOURCE name), saves it as a file on disk. This file will be OVER-WRITTEN by any operation that calls this method.
 * @return the file string on disk that is the resized icon
 */
@SuppressWarnings(""String_Node_Str"") private static String resizeFile(final int size,final String fileName) throws IOException {
  FileInputStream fileInputStream=new FileInputStream(fileName);
  Dimension imageSize=getImageSize(fileInputStream);
  if (size == ((int)imageSize.getWidth()) && size == ((int)imageSize.getHeight())) {
    return fileName;
  }
  File newFile=new File(TEMP_DIR,""String_Node_Str"").getAbsoluteFile();
  Image image;
  File iconTest=new File(fileName);
  if (iconTest.isFile() && iconTest.canRead()) {
    final String absolutePath=iconTest.getAbsolutePath();
    image=new ImageIcon(absolutePath).getImage().getScaledInstance(size,-1,Image.SCALE_SMOOTH);
    image.flush();
  }
 else {
    final URL systemResource=LocationResolver.getResource(fileName);
    image=new ImageIcon(systemResource).getImage().getScaledInstance(size,-1,Image.SCALE_SMOOTH);
    image.flush();
  }
  image=new ImageIcon(image).getImage();
  image.flush();
  newFile.getParentFile().mkdirs();
  newFile.delete();
  String extension=FileUtil.getExtension(fileName);
  if (extension.equals(""String_Node_Str"")) {
    extension=""String_Node_Str"";
  }
  BufferedImage bufferedImage=getBufferedImage(image);
  ImageIO.write(bufferedImage,extension,newFile);
  return newFile.getAbsolutePath();
}","/** 
 * Resizes the image (as a FILE on disk, or as a RESOURCE name), saves it as a file on disk. This file will be OVER-WRITTEN by any operation that calls this method.
 * @return the file string on disk that is the resized icon
 */
@SuppressWarnings(""String_Node_Str"") private static String resizeFile(final int size,final String fileName) throws IOException {
  FileInputStream fileInputStream=new FileInputStream(fileName);
  Dimension imageSize=getImageSize(fileInputStream);
  if (size == ((int)imageSize.getWidth()) && size == ((int)imageSize.getHeight())) {
    return fileName;
  }
  File newFile=new File(TEMP_DIR,""String_Node_Str"" + FileUtil.getExtension(fileName)).getAbsoluteFile();
  Image image;
  File iconTest=new File(fileName);
  if (iconTest.isFile() && iconTest.canRead()) {
    final String absolutePath=iconTest.getAbsolutePath();
    image=new ImageIcon(absolutePath).getImage().getScaledInstance(size,-1,Image.SCALE_SMOOTH);
    image.flush();
  }
 else {
    final URL systemResource=LocationResolver.getResource(fileName);
    image=new ImageIcon(systemResource).getImage().getScaledInstance(size,-1,Image.SCALE_SMOOTH);
    image.flush();
  }
  image=new ImageIcon(image).getImage();
  image.flush();
  newFile.getParentFile().mkdirs();
  newFile.delete();
  String extension=FileUtil.getExtension(fileName);
  if (extension.equals(""String_Node_Str"")) {
    extension=""String_Node_Str"";
  }
  BufferedImage bufferedImage=getBufferedImage(image);
  ImageIO.write(bufferedImage,extension,newFile);
  return newFile.getAbsolutePath();
}"
96368,"/** 
 * Specifies the new image to set for a menu entry, NULL to delete the image This method **DOES NOT CACHE** the result, so multiple lookups for the same inputStream result in new files every time. This is also NOT RECOMMENDED, but is provided for simplicity.
 * @param imageStream the InputStream of the image to use
 */
@Deprecated void setImage(InputStream imageStream);","/** 
 * Specifies the new image to set for a menu entry, NULL to delete the image This method **DOES NOT CACHE** the result, so multiple lookups for the same inputStream result in new files every time. This is also NOT RECOMMENDED, but is provided for simplicity.
 * @param imageStream the InputStream of the image to use
 */
void setImage(InputStream imageStream);"
96369,"private void setImage_(final File imagePath){
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (image != null) {
        Gtk.gtk_widget_destroy(image);
        image=null;
      }
      Gtk.gtk_widget_show_all(menuItem);
      if (imagePath != null) {
        image=Gtk.gtk_image_new_from_file(imagePath.getAbsolutePath());
        Gtk.gtk_image_menu_item_set_image(menuItem,image);
        Gobject.g_object_ref_sink(image);
        Gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
      }
      Gtk.gtk_widget_show_all(menuItem);
    }
  }
);
}","private void setImage_(final File imageFile){
  hasLegitIcon=imageFile != null;
  Gtk.dispatch(new Runnable(){
    @Override public void run(){
      if (image != null) {
        Gtk.gtk_widget_destroy(image);
        image=null;
        Gtk.gtk_widget_show_all(menuItem);
      }
      if (hasLegitIcon) {
        image=Gtk.gtk_image_new_from_file(imageFile.getAbsolutePath());
        Gtk.gtk_image_menu_item_set_image(menuItem,image);
        Gobject.g_object_ref_sink(image);
        Gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
      }
      Gtk.gtk_widget_show_all(menuItem);
    }
  }
);
}"
96370,"/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuEntry(final String label,final File imagePath,final SystemTrayMenuAction callback,final GtkTypeSystemTray parent){
  this.parent=parent;
  this.text=label;
  this.callback=callback;
  menuItem=Gtk.gtk_image_menu_item_new_with_label(label);
  if (imagePath != null) {
    image=Gtk.gtk_image_new_from_file(imagePath.getAbsolutePath());
    Gtk.gtk_image_menu_item_set_image(menuItem,image);
    Gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  nativeLong=Gobject.g_signal_connect_object(menuItem,""String_Node_Str"",this,null,0);
}","/** 
 * called from inside dispatch thread. ONLY creates the menu item, but DOES NOT attach it! this is a FLOATING reference. See: https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#floating-ref
 */
GtkMenuEntry(final String label,final File imagePath,final SystemTrayMenuAction callback,final GtkTypeSystemTray parent){
  this.parent=parent;
  this.text=label;
  this.callback=callback;
  menuItem=Gtk.gtk_image_menu_item_new_with_label(label);
  if (transparentIcon == null) {
    transparentIcon=ImageUtils.getTransparentImage(ImageUtils.ENTRY_SIZE);
  }
  hasLegitIcon=imagePath != null;
  if (hasLegitIcon) {
    image=Gtk.gtk_image_new_from_file(imagePath.getAbsolutePath());
    Gtk.gtk_image_menu_item_set_image(menuItem,image);
    Gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  nativeLong=Gobject.g_signal_connect_object(menuItem,""String_Node_Str"",this,null,0);
}"
96371,"@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}","@Override public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}"
96372,"void createMenu(){
  if (connectionStatusItem != null) {
    Gtk.gtk_menu_shell_append(this.menu,this.connectionStatusItem);
    Gobject.g_object_ref_sink(connectionStatusItem);
  }
synchronized (menuEntries) {
    for (int i=0; i < menuEntries.size(); i++) {
      GtkMenuEntry menuEntry__=(GtkMenuEntry)menuEntries.get(i);
      Gtk.gtk_menu_shell_append(this.menu,menuEntry__.menuItem);
      Gobject.g_object_ref_sink(menuEntry__.menuItem);
    }
    onMenuAdded(menu);
    Gtk.gtk_widget_show_all(menu);
  }
}","void createMenu(){
  if (connectionStatusItem != null) {
    Gtk.gtk_menu_shell_append(this.menu,this.connectionStatusItem);
    Gobject.g_object_ref_sink(connectionStatusItem);
  }
  boolean hasImages=false;
synchronized (menuEntries) {
    for (int i=0; i < menuEntries.size(); i++) {
      GtkMenuEntry menuEntry__=(GtkMenuEntry)menuEntries.get(i);
      hasImages|=menuEntry__.hasImage();
    }
    for (int i=0; i < menuEntries.size(); i++) {
      GtkMenuEntry menuEntry__=(GtkMenuEntry)menuEntries.get(i);
      menuEntry__.setSpacerImage(hasImages);
      Gtk.gtk_menu_shell_append(this.menu,menuEntry__.menuItem);
      Gobject.g_object_ref_sink(menuEntry__.menuItem);
    }
    onMenuAdded(menu);
    Gtk.gtk_widget_show_all(menu);
  }
}"
96373,"private void setImageIcon(final File imagePath){
  if (imagePath != null) {
    ImageIcon origIcon=new ImageIcon(imagePath.getAbsolutePath());
    menuItem.setIcon(origIcon);
  }
 else {
    menuItem.setIcon(null);
  }
}","private void setImageIcon(final File imagePath){
  if (imagePath != null) {
    hasLegitIcon=true;
    ImageIcon origIcon=new ImageIcon(imagePath.getAbsolutePath());
    menuItem.setIcon(origIcon);
  }
 else {
    hasLegitIcon=false;
    menuItem.setIcon(null);
  }
}"
96374,"SwingMenuEntry(final SwingSystemTrayMenuPopup parentMenu,final String label,final File imagePath,final SystemTrayMenuAction callback,final SystemTray systemTray){
  this.parent=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  swingCallback=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      handle();
    }
  }
;
  menuItem=new JMenuItem(label);
  menuItem.addActionListener(swingCallback);
  if (imagePath != null) {
    setImageIcon(imagePath);
  }
  parentMenu.add(menuItem);
}","SwingMenuEntry(final SwingSystemTrayMenuPopup parentMenu,final String label,final File imagePath,final SystemTrayMenuAction callback,final SystemTray systemTray){
  this.parent=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  swingCallback=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      handle();
    }
  }
;
  menuItem=new JMenuItem(label);
  menuItem.addActionListener(swingCallback);
  if (imagePath != null) {
    hasLegitIcon=true;
    setImageIcon(imagePath);
  }
  parentMenu.add(menuItem);
}"
96375,"@Override @Deprecated public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}","@Override public void setImage(final InputStream imageStream){
  if (imageStream == null) {
    setImage_(null);
  }
 else {
    setImage_(ImageUtils.resizeAndCache(ImageUtils.ENTRY_SIZE,imageStream));
  }
}"
96376,"private void setImage_(final String imagePath){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      if (imagePath != null && !imagePath.isEmpty()) {
        menuItem.setIcon(new ImageIcon(imagePath));
      }
 else {
        menuItem.setIcon(null);
      }
    }
  }
);
}","private void setImage_(final String imagePath){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      setImageIcon(imagePath);
    }
  }
);
}"
96377,"SwingMenuEntry(final SwingSystemTrayMenuPopup parentMenu,final String label,final String imagePath,final SystemTrayMenuAction callback,final SystemTray systemTray){
  this.parent=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  swingCallback=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      handle();
    }
  }
;
  menuItem=new JMenuItem(label);
  menuItem.addActionListener(swingCallback);
  if (imagePath != null && !imagePath.isEmpty()) {
    menuItem.setIcon(new ImageIcon(imagePath));
  }
  parentMenu.add(menuItem);
}","SwingMenuEntry(final SwingSystemTrayMenuPopup parentMenu,final String label,final String imagePath,final SystemTrayMenuAction callback,final SystemTray systemTray){
  this.parent=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  swingCallback=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      handle();
    }
  }
;
  menuItem=new JMenuItem(label);
  menuItem.addActionListener(swingCallback);
  if (imagePath != null && !imagePath.isEmpty()) {
    setImageIcon(imagePath);
  }
  parentMenu.add(menuItem);
}"
96378,public void createTrayFailed();,void createTrayFailed();
96379,"public static SystemTray create(String appName){
  if (trayType != null) {
    try {
      SystemTray newInstance=trayType.newInstance();
      if (newInstance != null) {
        newInstance.setAppName(appName);
      }
      return newInstance;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","public static SystemTray create(String appName){
  if (trayType != null) {
    try {
      SystemTray newInstance=trayType.newInstance();
      if (newInstance != null) {
        newInstance.setAppName(appName);
      }
      return newInstance;
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  return null;
}"
96380,"@Override public synchronized void setIcon(final String iconName){
  libgtk.gdk_threads_enter();
  libappindicator.app_indicator_set_icon(this.appIndicator,iconPath(iconName));
  libgtk.gdk_threads_leave();
}","@Override public synchronized void setIcon(final String iconName){
  gtk.gdk_threads_enter();
  appindicator.app_indicator_set_icon(this.appIndicator,iconPath(iconName));
  gtk.gdk_threads_leave();
}"
96381,"/** 
 * Called inside the gdk_threads block. MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu
 */
protected void onMenuAdded(final Pointer menu){
  libappindicator.app_indicator_set_menu(this.appIndicator,menu);
}","/** 
 * Called inside the gdk_threads block. MUST BE AFTER THE ITEM IS ADDED/CHANGED from the menu
 */
protected void onMenuAdded(final Pointer menu){
  appindicator.app_indicator_set_menu(this.appIndicator,menu);
}"
96382,"@Override public synchronized void shutdown(){
  libgtk.gdk_threads_enter();
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  Pointer p=this.appIndicator.getPointer();
  libgobject.g_object_unref(p);
  this.appIndicator=null;
  super.shutdown();
}","@Override public synchronized void shutdown(){
  gtk.gdk_threads_enter();
  appindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  Pointer p=this.appIndicator.getPointer();
  gobject.g_object_unref(p);
  this.appIndicator=null;
  super.shutdown();
}"
96383,"public AppIndicatorTray(String iconName){
  libgtk.gdk_threads_enter();
  String icon_name=iconPath(iconName);
  this.appIndicator=libappindicator.app_indicator_new(System.nanoTime() + ""String_Node_Str"",icon_name,AppIndicator.CATEGORY_APPLICATION_STATUS);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  libgtk.gdk_threads_leave();
  GtkSupport.startGui();
}","public AppIndicatorTray(String iconName){
  gtk.gdk_threads_enter();
  String icon_name=iconPath(iconName);
  this.appIndicator=appindicator.app_indicator_new(System.nanoTime() + ""String_Node_Str"",icon_name,AppIndicator.CATEGORY_APPLICATION_STATUS);
  appindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  gtk.gdk_threads_leave();
  GtkSupport.startGui();
}"
96384,"GtkMenuEntry(final Pointer parentMenu,final String label,final String imagePath,final SystemTrayMenuAction callback,final GtkTypeSystemTray systemTray){
  this.parentMenu=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  gtkCallback=new Gobject.GCallback(){
    @Override public int callback(    Pointer instance,    Pointer data){
      handle();
      return Gtk.TRUE;
    }
  }
;
  menuItem=libgtk.gtk_image_menu_item_new_with_label(label);
  if (imagePath != null && !imagePath.isEmpty()) {
    image=libgtk.gtk_image_new_from_file(imagePath);
    libgtk.gtk_image_menu_item_set_image(menuItem,image);
    libgtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  nativeLong=libgobject.g_signal_connect_data(menuItem,""String_Node_Str"",gtkCallback,null,null,0);
}","GtkMenuEntry(final Pointer parentMenu,final String label,final String imagePath,final SystemTrayMenuAction callback,final GtkTypeSystemTray systemTray){
  this.parentMenu=parentMenu;
  this.text=label;
  this.callback=callback;
  this.systemTray=systemTray;
  gtkCallback=new Gobject.GCallback(){
    @Override public int callback(    Pointer instance,    Pointer data){
      handle();
      return Gtk.TRUE;
    }
  }
;
  menuItem=gtk.gtk_image_menu_item_new_with_label(label);
  if (imagePath != null && !imagePath.isEmpty()) {
    image=gtk.gtk_image_new_from_file(imagePath);
    gtk.gtk_image_menu_item_set_image(menuItem,image);
    gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  nativeLong=gobject.g_signal_connect_data(menuItem,""String_Node_Str"",gtkCallback,null,null,0);
}"
96385,"void removePrivate(){
  libgobject.g_signal_handler_disconnect(menuItem,nativeLong);
  libgtk.gtk_menu_shell_deactivate(parentMenu,menuItem);
  if (image != null) {
    libgtk.gtk_widget_destroy(image);
  }
  libgtk.gtk_widget_destroy(menuItem);
}","void removePrivate(){
  gobject.g_signal_handler_disconnect(menuItem,nativeLong);
  gtk.gtk_menu_shell_deactivate(parentMenu,menuItem);
  if (image != null) {
    gtk.gtk_widget_destroy(image);
  }
  gtk.gtk_widget_destroy(menuItem);
}"
96386,"/** 
 * This is ONLY called via systray.menuEntry.remove() !!
 */
public void remove(){
  libgtk.gdk_threads_enter();
  removePrivate();
  systemTray.deleteMenu();
  systemTray.createMenu();
  libgtk.gdk_threads_leave();
}","/** 
 * This is ONLY called via systray.menuEntry.remove() !!
 */
public void remove(){
  gtk.gdk_threads_enter();
  removePrivate();
  systemTray.deleteMenu();
  systemTray.createMenu();
  gtk.gdk_threads_leave();
}"
96387,"@Override public void setText(final String newText){
  this.text=newText;
  libgtk.gdk_threads_enter();
  libgtk.gtk_menu_item_set_label(menuItem,newText);
  libgtk.gtk_widget_show_all(parentMenu);
  libgtk.gdk_threads_leave();
}","@Override public void setText(final String newText){
  this.text=newText;
  gtk.gdk_threads_enter();
  gtk.gtk_menu_item_set_label(menuItem,newText);
  gtk.gtk_widget_show_all(parentMenu);
  gtk.gdk_threads_leave();
}"
96388,"@Override public void setImage(final String imagePath){
  libgtk.gdk_threads_enter();
  if (imagePath != null && !imagePath.isEmpty()) {
    if (image != null) {
      libgtk.gtk_widget_destroy(image);
    }
    libgtk.gtk_widget_show_all(parentMenu);
    libgtk.gdk_threads_leave();
    libgtk.gdk_threads_enter();
    image=libgtk.gtk_image_new_from_file(imagePath);
    libgtk.gtk_image_menu_item_set_image(menuItem,image);
    libgtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  libgtk.gtk_widget_show_all(parentMenu);
  libgtk.gdk_threads_leave();
}","@Override public void setImage(final String imagePath){
  gtk.gdk_threads_enter();
  if (imagePath != null && !imagePath.isEmpty()) {
    if (image != null) {
      gtk.gtk_widget_destroy(image);
    }
    gtk.gtk_widget_show_all(parentMenu);
    image=gtk.gtk_image_new_from_file(imagePath);
    gtk.gtk_image_menu_item_set_image(menuItem,image);
    gtk.gtk_image_menu_item_set_always_show_image(menuItem,Gtk.TRUE);
  }
  gtk.gdk_threads_leave();
  gtk.gtk_widget_show_all(parentMenu);
}"
96389,"@Override public synchronized void setIcon(final String iconName){
  libgtk.gdk_threads_enter();
  libgtk.gtk_status_icon_set_from_file(trayIcon,iconPath(iconName));
  libgtk.gdk_threads_leave();
}","@Override public synchronized void setIcon(final String iconName){
  gtk.gdk_threads_enter();
  gtk.gtk_status_icon_set_from_file(trayIcon,iconPath(iconName));
  gtk.gdk_threads_leave();
}"
96390,"@Override public void callback(Pointer notUsed,final Gtk.GdkEventButton event){
  if (event.type == 4) {
    libgtk.gtk_menu_popup(menu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
  }
}","@Override public void callback(Pointer notUsed,final Gtk.GdkEventButton event){
  if (event.type == 4) {
    gtk.gtk_menu_popup(menu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
  }
}"
96391,"public GtkSystemTray(String iconName){
  super();
  libgtk.gdk_threads_enter();
  final Pointer trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
  libgtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
  this.trayIcon=trayIcon;
  libgtk.gtk_status_icon_set_from_file(trayIcon,iconPath(iconName));
  this.gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer notUsed,    final Gtk.GdkEventButton event){
      if (event.type == 4) {
        libgtk.gtk_menu_popup(menu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
      }
    }
  }
;
  button_press_event=libgobject.g_signal_connect_data(trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  libgtk.gtk_status_icon_set_visible(trayIcon,true);
  libgtk.gdk_threads_leave();
  GtkSupport.startGui();
}","public GtkSystemTray(String iconName){
  super();
  gtk.gdk_threads_enter();
  final Pointer trayIcon=gtk.gtk_status_icon_new();
  gtk.gtk_status_icon_set_title(trayIcon,""String_Node_Str"");
  gtk.gtk_status_icon_set_name(trayIcon,""String_Node_Str"");
  this.trayIcon=trayIcon;
  gtk.gtk_status_icon_set_from_file(trayIcon,iconPath(iconName));
  this.gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer notUsed,    final Gtk.GdkEventButton event){
      if (event.type == 4) {
        gtk.gtk_menu_popup(menu,null,null,Gtk.gtk_status_icon_position_menu,trayIcon,0,event.time);
      }
    }
  }
;
  button_press_event=gobject.g_signal_connect_data(trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  gtk.gtk_status_icon_set_visible(trayIcon,true);
  gtk.gdk_threads_leave();
  GtkSupport.startGui();
}"
96392,"@SuppressWarnings(""String_Node_Str"") @Override public synchronized void shutdown(){
  libgtk.gdk_threads_enter();
  libgtk.gtk_status_icon_set_visible(this.trayIcon,false);
  libgobject.g_object_unref(this.trayIcon);
  this.trayIcon=null;
  super.shutdown();
}","@SuppressWarnings(""String_Node_Str"") @Override public synchronized void shutdown(){
  gtk.gdk_threads_enter();
  gtk.gtk_status_icon_set_visible(this.trayIcon,false);
  gobject.g_object_unref(this.trayIcon);
  this.trayIcon=null;
  super.shutdown();
}"
96393,"@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  aiclass.fallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  libgtk.gdk_threads_leave();
  if (!useSWT) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        AppIndicatorTray.this.blockUntilStarted.countDown();
        libgtk.gtk_main();
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}","@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  aiclass.fallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  libgtk.gdk_threads_leave();
  this.active=true;
}"
96394,"@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtil.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  libgtk.gdk_threads_leave();
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
    }
  }
);
  if (!useSWT) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        GtkSystemTray.this.blockUntilStarted.countDown();
        libgtk.gtk_main();
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}","@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtil.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  libgtk.gdk_threads_leave();
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
    }
  }
);
  this.active=true;
}"
96395,"public SystemTrayMenuPopup(){
  super();
  this.timer=new DelayTimer(""String_Node_Str"",true,new DelayTimer.Callback(){
    @Override public void execute(){
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          Point location=MouseInfo.getPointerInfo().getLocation();
          Point locationOnScreen=getLocationOnScreen();
          Dimension size=getSize();
          if (location.x >= locationOnScreen.x && location.x < locationOnScreen.x + size.width && location.y >= locationOnScreen.y && location.y < locationOnScreen.y + size.height) {
            SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
          }
 else {
            setVisible(false);
          }
        }
      }
);
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent event){
      SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
    }
  }
);
}","public SystemTrayMenuPopup(){
  super();
  this.timer=new DelayTimer(""String_Node_Str"",true,new DelayTimer.Callback(){
    @Override public void execute(){
      SwingUtil.invokeLater(new Runnable(){
        @Override public void run(){
          Point location=MouseInfo.getPointerInfo().getLocation();
          Point locationOnScreen=getLocationOnScreen();
          Dimension size=getSize();
          if (location.x >= locationOnScreen.x && location.x < locationOnScreen.x + size.width && location.y >= locationOnScreen.y && location.y < locationOnScreen.y + size.height) {
            SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
          }
 else {
            setVisible(false);
          }
        }
      }
);
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent event){
      SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
    }
  }
);
}"
96396,"@Override public void execute(){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      Point location=MouseInfo.getPointerInfo().getLocation();
      Point locationOnScreen=getLocationOnScreen();
      Dimension size=getSize();
      if (location.x >= locationOnScreen.x && location.x < locationOnScreen.x + size.width && location.y >= locationOnScreen.y && location.y < locationOnScreen.y + size.height) {
        SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
      }
 else {
        setVisible(false);
      }
    }
  }
);
}","@Override public void execute(){
  SwingUtil.invokeLater(new Runnable(){
    @Override public void run(){
      Point location=MouseInfo.getPointerInfo().getLocation();
      Point locationOnScreen=getLocationOnScreen();
      Dimension size=getSize();
      if (location.x >= locationOnScreen.x && location.x < locationOnScreen.x + size.width && location.y >= locationOnScreen.y && location.y < locationOnScreen.y + size.height) {
        SystemTrayMenuPopup.this.timer.delay(SystemTrayMenuPopup.this.timer.getDelay());
      }
 else {
        setVisible(false);
      }
    }
  }
);
}"
96397,"@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  this.appIndicator.write();
  Pointer p=this.appIndicator.getPointer();
  libgobject.g_object_unref(p);
  this.active=false;
  this.appIndicator=null;
  this.widgets.clear();
  libgobject.g_object_unref(this.menu);
  this.menu=null;
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.connectionStatusItem=null;
  super.removeTray();
}","@Override public void removeTray(){
  libgtk.gdk_threads_enter();
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  this.appIndicator.write();
  Pointer p=this.appIndicator.getPointer();
  libgobject.g_object_unref(p);
  this.active=false;
  this.appIndicator=null;
  this.widgets.clear();
  libgobject.g_object_unref(this.menu);
  this.menu=null;
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.connectionStatusItem=null;
  libgtk.gtk_main_quit();
  libgtk.gdk_threads_leave();
  super.removeTray();
}"
96398,"/** 
 * Will update an already existing menu entry (or add a new one, if it doesn't exist)
 */
@Override public void updateMenuEntry(String origMenuText,String newMenuText,final SystemTrayMenuAction newCallback){
synchronized (this.menuEntries) {
    MenuEntry menuEntry=this.menuEntries.get(origMenuText);
    if (menuEntry != null) {
      libgtk.gtk_menu_item_set_label(menuEntry.dashboardItem,newMenuText);
      Gobject.GCallback gtkCallback=new Gobject.GCallback(){
        @Override public void callback(        Pointer instance,        Pointer data){
          AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
            @Override public void run(){
              newCallback.onClick(AppIndicatorTray.this);
            }
          }
);
        }
      }
;
      libgobject.g_signal_connect_data(menuEntry.dashboardItem,""String_Node_Str"",gtkCallback,null,null,0);
      libgtk.gtk_widget_show_all(menuEntry.dashboardItem);
    }
 else {
      addMenuEntry(origMenuText,newCallback);
    }
  }
}","/** 
 * Will update an already existing menu entry (or add a new one, if it doesn't exist)
 */
@Override public void updateMenuEntry(String origMenuText,String newMenuText,final SystemTrayMenuAction newCallback){
synchronized (this.menuEntries) {
    MenuEntry menuEntry=this.menuEntries.get(origMenuText);
    if (menuEntry != null) {
      libgtk.gdk_threads_enter();
      libgtk.gtk_menu_item_set_label(menuEntry.dashboardItem,newMenuText);
      menuEntry.gtkCallback=new Gobject.GCallback(){
        @Override public void callback(        Pointer instance,        Pointer data){
          AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
            @Override public void run(){
              newCallback.onClick(AppIndicatorTray.this);
            }
          }
);
        }
      }
;
      libgobject.g_signal_connect_data(menuEntry.dashboardItem,""String_Node_Str"",menuEntry.gtkCallback,null,null,0);
      libgtk.gtk_widget_show_all(menuEntry.dashboardItem);
      libgtk.gdk_threads_leave();
    }
 else {
      addMenuEntry(origMenuText,newCallback);
    }
  }
}"
96399,"/** 
 * Will add a new menu entry, or update one if it already exists
 */
@Override public void addMenuEntry(String menuText,final SystemTrayMenuAction callback){
synchronized (this.menuEntries) {
    MenuEntry menuEntry=this.menuEntries.get(menuText);
    if (menuEntry == null) {
      Pointer dashboardItem=libgtk.gtk_menu_item_new_with_label(menuText);
      Gobject.GCallback gtkCallback=new Gobject.GCallback(){
        @Override public void callback(        Pointer instance,        Pointer data){
          AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
            @Override public void run(){
              callback.onClick(AppIndicatorTray.this);
            }
          }
);
        }
      }
;
      libgobject.g_signal_connect_data(dashboardItem,""String_Node_Str"",gtkCallback,null,null,0);
      libgtk.gtk_menu_shell_append(this.menu,dashboardItem);
      libgtk.gtk_widget_show_all(dashboardItem);
      menuEntry=new MenuEntry();
      menuEntry.dashboardItem=dashboardItem;
      this.menuEntries.put(menuText,menuEntry);
    }
 else {
      updateMenuEntry(menuText,menuText,callback);
    }
  }
}","/** 
 * Will add a new menu entry, or update one if it already exists
 */
@Override public void addMenuEntry(String menuText,final SystemTrayMenuAction callback){
synchronized (this.menuEntries) {
    MenuEntry menuEntry=this.menuEntries.get(menuText);
    if (menuEntry == null) {
      libgtk.gdk_threads_enter();
      Pointer dashboardItem=libgtk.gtk_menu_item_new_with_label(menuText);
      Gobject.GCallback gtkCallback=new Gobject.GCallback(){
        @Override public void callback(        Pointer instance,        Pointer data){
          AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
            @Override public void run(){
              callback.onClick(AppIndicatorTray.this);
            }
          }
);
        }
      }
;
      libgobject.g_signal_connect_data(dashboardItem,""String_Node_Str"",gtkCallback,null,null,0);
      libgtk.gtk_menu_shell_append(this.menu,dashboardItem);
      libgtk.gtk_widget_show_all(dashboardItem);
      libgtk.gdk_threads_leave();
      menuEntry=new MenuEntry();
      menuEntry.dashboardItem=dashboardItem;
      menuEntry.gtkCallback=gtkCallback;
      this.menuEntries.put(menuText,menuEntry);
    }
 else {
      updateMenuEntry(menuText,menuText,callback);
    }
  }
}"
96400,"@Override public void createTray(String iconName){
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  aiclass.fallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  if (!GtkSupport.usesSwtMainLoop) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        AppIndicatorTray.this.blockUntilStarted.countDown();
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.setDaemon(true);
    gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}","@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  aiclass.fallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  libgtk.gdk_threads_leave();
  if (!useSWT) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        AppIndicatorTray.this.blockUntilStarted.countDown();
        libgtk.gtk_main();
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}"
96401,"@Override public void setStatus(String infoString,String iconName){
  if (this.connectionStatusItem == null) {
    this.connectionStatusItem=libgtk.gtk_menu_item_new_with_label(infoString);
    this.widgets.add(this.connectionStatusItem);
    libgtk.gtk_widget_set_sensitive(this.connectionStatusItem,Gtk.FALSE);
    libgtk.gtk_menu_shell_append(this.menu,this.connectionStatusItem);
  }
 else {
    libgtk.gtk_menu_item_set_label(this.connectionStatusItem,infoString);
  }
  libgtk.gtk_widget_show_all(this.connectionStatusItem);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
}","@Override public void setStatus(String infoString,String iconName){
  libgtk.gdk_threads_enter();
  if (this.connectionStatusItem == null) {
    this.connectionStatusItem=libgtk.gtk_menu_item_new_with_label(infoString);
    this.widgets.add(this.connectionStatusItem);
    libgtk.gtk_widget_set_sensitive(this.connectionStatusItem,Gtk.FALSE);
    libgtk.gtk_menu_shell_append(this.menu,this.connectionStatusItem);
  }
 else {
    libgtk.gtk_menu_item_set_label(this.connectionStatusItem,infoString);
  }
  libgtk.gtk_widget_show_all(this.connectionStatusItem);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libgtk.gdk_threads_leave();
}"
96402,"@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libgtk.gtk_status_icon_set_visible(this.trayIcon,false);
  libgobject.g_object_unref(this.trayIcon);
  this.active=false;
  this.trayIcon=null;
  this.widgets.clear();
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.jmenu.setVisible(false);
  this.jmenu.setEnabled(false);
  this.jmenu=null;
  this.connectionStatusItem=null;
  super.removeTray();
}","@Override public void removeTray(){
  libgtk.gdk_threads_enter();
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libgtk.gtk_status_icon_set_visible(this.trayIcon,false);
  libgobject.g_object_unref(this.trayIcon);
  this.active=false;
  this.trayIcon=null;
  this.widgets.clear();
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.jmenu.setVisible(false);
  this.jmenu.setEnabled(false);
  this.jmenu=null;
  this.connectionStatusItem=null;
  libgtk.gtk_main_quit();
  libgtk.gdk_threads_leave();
  super.removeTray();
}"
96403,"/** 
 * Will update an already existing menu entry (or add a new one, if it doesn't exist)
 */
@Override public void updateMenuEntry(final String origMenuText,final String newMenuText,final SystemTrayMenuAction newCallback){
  Runnable doRun=new Runnable(){
    @Override public void run(){
      Map<String,JMenuItem> menuEntries2=GtkSystemTray.this.menuEntries;
synchronized (menuEntries2) {
        JMenuItem menuEntry=menuEntries2.get(origMenuText);
        if (menuEntry != null) {
          ActionListener[] actionListeners=menuEntry.getActionListeners();
          for (          ActionListener l : actionListeners) {
            menuEntry.removeActionListener(l);
          }
          menuEntry.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              GtkSystemTray.this.callbackExecutor.execute(new Runnable(){
                @Override public void run(){
                  newCallback.onClick(GtkSystemTray.this);
                }
              }
);
            }
          }
);
          menuEntry.setText(newMenuText);
          menuEntry.revalidate();
        }
 else {
          addMenuEntry(origMenuText,newCallback);
        }
      }
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    doRun.run();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(doRun);
    }
 catch (    InvocationTargetException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Will update an already existing menu entry (or add a new one, if it doesn't exist)
 */
@Override public void updateMenuEntry(final String origMenuText,final String newMenuText,final SystemTrayMenuAction newCallback){
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      Map<String,JMenuItem> menuEntries2=GtkSystemTray.this.menuEntries;
synchronized (menuEntries2) {
        JMenuItem menuEntry=menuEntries2.get(origMenuText);
        if (menuEntry != null) {
          ActionListener[] actionListeners=menuEntry.getActionListeners();
          for (          ActionListener l : actionListeners) {
            menuEntry.removeActionListener(l);
          }
          menuEntry.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              GtkSystemTray.this.callbackExecutor.execute(new Runnable(){
                @Override public void run(){
                  newCallback.onClick(GtkSystemTray.this);
                }
              }
);
            }
          }
);
          menuEntry.setText(newMenuText);
          menuEntry.revalidate();
        }
 else {
          addMenuEntry(origMenuText,newCallback);
        }
      }
    }
  }
);
}"
96404,"/** 
 * Will add a new menu entry, or update one if it already exists
 */
@Override public void addMenuEntry(final String menuText,final SystemTrayMenuAction callback){
  Runnable doRun=new Runnable(){
    @Override public void run(){
      Map<String,JMenuItem> menuEntries2=GtkSystemTray.this.menuEntries;
synchronized (menuEntries2) {
        JMenuItem menuEntry=menuEntries2.get(menuText);
        if (menuEntry == null) {
          SystemTrayMenuPopup menu=GtkSystemTray.this.jmenu;
          menuEntry=new JMenuItem(menuText);
          menuEntry.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              GtkSystemTray.this.callbackExecutor.execute(new Runnable(){
                @Override public void run(){
                  callback.onClick(GtkSystemTray.this);
                }
              }
);
            }
          }
);
          menu.add(menuEntry);
          menuEntries2.put(menuText,menuEntry);
        }
 else {
          updateMenuEntry(menuText,menuText,callback);
        }
      }
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    doRun.run();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(doRun);
    }
 catch (    InvocationTargetException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Will add a new menu entry, or update one if it already exists
 */
@Override public void addMenuEntry(final String menuText,final SystemTrayMenuAction callback){
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      Map<String,JMenuItem> menuEntries2=GtkSystemTray.this.menuEntries;
synchronized (menuEntries2) {
        JMenuItem menuEntry=menuEntries2.get(menuText);
        if (menuEntry == null) {
          SystemTrayMenuPopup menu=GtkSystemTray.this.jmenu;
          menuEntry=new JMenuItem(menuText);
          menuEntry.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              GtkSystemTray.this.callbackExecutor.execute(new Runnable(){
                @Override public void run(){
                  callback.onClick(GtkSystemTray.this);
                }
              }
);
            }
          }
);
          menu.add(menuEntry);
          menuEntries2.put(menuText,menuEntry);
        }
 else {
          updateMenuEntry(menuText,menuText,callback);
        }
      }
    }
  }
);
}"
96405,"@Override public void callback(Pointer instance,final GdkEventButton event){
  if (event.type == 4) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        if (GtkSystemTray.this.jmenu.isVisible()) {
          GtkSystemTray.this.jmenu.setVisible(false);
        }
 else {
          int iconX=(int)(event.x_root - event.x);
          int iconY=(int)(event.y_root - event.y);
          Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
          iconX-=size.width / 2;
          if (iconY > 240) {
            iconY-=size.height;
          }
 else {
            iconY+=ICON_SIZE;
          }
          GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
          GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
          GtkSystemTray.this.jmenu.setVisible(true);
        }
      }
    }
);
  }
}","@Override public void callback(Pointer instance,final GdkEventButton event){
  if (event.type == 4) {
    SwingUtil.invokeLater(new Runnable(){
      @Override public void run(){
        if (GtkSystemTray.this.jmenu.isVisible()) {
          GtkSystemTray.this.jmenu.setVisible(false);
        }
 else {
          int iconX=(int)(event.x_root - event.x);
          int iconY=(int)(event.y_root - event.y);
          Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
          iconX-=size.width / 2;
          if (iconY > 240) {
            iconY-=size.height;
          }
 else {
            iconY+=ICON_SIZE;
          }
          GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
          GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
          GtkSystemTray.this.jmenu.setVisible(true);
        }
      }
    }
);
  }
}"
96406,"@Override public void createTray(String iconName){
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  if (!GtkSupport.usesSwtMainLoop) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        GtkSystemTray.this.blockUntilStarted.countDown();
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.setDaemon(true);
    gtkUpdateThread.start();
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    logger.error(""String_Node_Str"",e);
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}","@Override public void createTray(String iconName){
  libgtk.gdk_threads_enter();
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtil.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  libgtk.gdk_threads_leave();
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
    }
  }
);
  if (!useSWT) {
    Thread gtkUpdateThread=new Thread(){
      @Override public void run(){
        GtkSystemTray.this.blockUntilStarted.countDown();
        libgtk.gtk_main();
      }
    }
;
    gtkUpdateThread.setName(""String_Node_Str"");
    gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException ignored) {
  }
}"
96407,"@Override public void setStatus(final String infoString,String iconName){
  Runnable doRun=new Runnable(){
    @Override public void run(){
      if (GtkSystemTray.this.connectionStatusItem == null) {
        GtkSystemTray.this.connectionStatusItem=new JMenuItem(infoString);
        GtkSystemTray.this.connectionStatusItem.setEnabled(false);
        GtkSystemTray.this.jmenu.add(GtkSystemTray.this.connectionStatusItem);
      }
 else {
        GtkSystemTray.this.connectionStatusItem.setText(infoString);
      }
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    doRun.run();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(doRun);
    }
 catch (    InvocationTargetException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  libgtk.gtk_status_icon_set_from_file(GtkSystemTray.this.trayIcon,iconPath(iconName));
}","@Override public void setStatus(final String infoString,String iconName){
  SwingUtil.invokeAndWait(new Runnable(){
    @Override public void run(){
      if (GtkSystemTray.this.connectionStatusItem == null) {
        GtkSystemTray.this.connectionStatusItem=new JMenuItem(infoString);
        GtkSystemTray.this.connectionStatusItem.setEnabled(false);
        GtkSystemTray.this.jmenu.add(GtkSystemTray.this.connectionStatusItem);
      }
 else {
        GtkSystemTray.this.connectionStatusItem.setText(infoString);
      }
    }
  }
);
  libgtk.gdk_threads_enter();
  libgtk.gtk_status_icon_set_from_file(GtkSystemTray.this.trayIcon,iconPath(iconName));
  libgtk.gdk_threads_leave();
}"
96408,public abstract void removeTray();,"public void removeTray(){
  SystemTray.this.callbackExecutor.shutdown();
}"
96409,"@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  this.appIndicator.write();
  Pointer p=this.appIndicator.getPointer();
  libgobject.g_object_unref(p);
  this.active=false;
  this.appIndicator=null;
  this.widgets.clear();
  libgobject.g_object_unref(this.menu);
  this.menu=null;
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.connectionStatusItem=null;
}","@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_PASSIVE);
  this.appIndicator.write();
  Pointer p=this.appIndicator.getPointer();
  libgobject.g_object_unref(p);
  this.active=false;
  this.appIndicator=null;
  this.widgets.clear();
  libgobject.g_object_unref(this.menu);
  this.menu=null;
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.connectionStatusItem=null;
  super.removeTray();
}"
96410,"@Override public void createTray(String iconName){
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  AppIndicator.Fallback replacementFallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.fallback=replacementFallback;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  if (!GtkSupport.usesSwtMainLoop) {
    this.gtkUpdateThread=new Thread(){
      @Override public void run(){
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    this.gtkUpdateThread.setName(""String_Node_Str"");
    this.gtkUpdateThread.setDaemon(true);
    this.gtkUpdateThread.start();
  }
  this.active=true;
}","@Override public void createTray(String iconName){
  this.appIndicator=libappindicator.app_indicator_new(this.appName,""String_Node_Str"",AppIndicator.CATEGORY_APPLICATION_STATUS);
  AppIndicator.AppIndicatorClassStruct aiclass=new AppIndicator.AppIndicatorClassStruct(this.appIndicator.parent.g_type_instance.g_class);
  AppIndicator.Fallback replacementFallback=new AppIndicator.Fallback(){
    @Override public Pointer callback(    final AppIndicator.AppIndicatorInstanceStruct self){
      AppIndicatorTray.this.callbackExecutor.execute(new Runnable(){
        @Override public void run(){
          logger.warn(""String_Node_Str"");
          if (AppIndicatorTray.this.failureCallback != null) {
            AppIndicatorTray.this.failureCallback.createTrayFailed();
          }
        }
      }
);
      return null;
    }
  }
;
  aiclass.fallback=replacementFallback;
  aiclass.write();
  this.menu=libgtk.gtk_menu_new();
  libappindicator.app_indicator_set_menu(this.appIndicator,this.menu);
  libappindicator.app_indicator_set_icon_full(this.appIndicator,iconPath(iconName),this.appName);
  libappindicator.app_indicator_set_status(this.appIndicator,AppIndicator.STATUS_ACTIVE);
  if (!GtkSupport.usesSwtMainLoop) {
    this.gtkUpdateThread=new Thread(){
      @Override public void run(){
        AppIndicatorTray.this.blockUntilStarted.countDown();
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    this.gtkUpdateThread.setName(""String_Node_Str"");
    this.gtkUpdateThread.setDaemon(true);
    this.gtkUpdateThread.start();
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException e) {
  }
}"
96411,"@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libgtk.gtk_status_icon_set_visible(this.trayIcon,false);
  libgobject.g_object_unref(this.trayIcon);
  this.active=false;
  this.trayIcon=null;
  this.widgets.clear();
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.jmenu.setVisible(false);
  this.jmenu.setEnabled(false);
  this.jmenu=null;
  this.connectionStatusItem=null;
}","@Override public void removeTray(){
  for (  Pointer widget : this.widgets) {
    libgtk.gtk_widget_destroy(widget);
  }
  libgtk.gtk_status_icon_set_visible(this.trayIcon,false);
  libgobject.g_object_unref(this.trayIcon);
  this.active=false;
  this.trayIcon=null;
  this.widgets.clear();
synchronized (this.menuEntries) {
    this.menuEntries.clear();
  }
  this.jmenu.setVisible(false);
  this.jmenu.setEnabled(false);
  this.jmenu=null;
  this.connectionStatusItem=null;
  super.removeTray();
}"
96412,"@Override public void createTray(String iconName){
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  if (!GtkSupport.usesSwtMainLoop) {
    this.gtkUpdateThread=new Thread(){
      @Override public void run(){
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    this.gtkUpdateThread.setName(""String_Node_Str"");
    this.gtkUpdateThread.setDaemon(true);
    this.gtkUpdateThread.start();
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    logger.error(""String_Node_Str"",e);
  }
  this.active=true;
}","@Override public void createTray(String iconName){
  this.trayIcon=libgtk.gtk_status_icon_new();
  libgtk.gtk_status_icon_set_from_file(this.trayIcon,iconPath(iconName));
  libgtk.gtk_status_icon_set_tooltip(this.trayIcon,this.appName);
  libgtk.gtk_status_icon_set_visible(this.trayIcon,true);
  Gobject.GEventCallback gtkCallback=new Gobject.GEventCallback(){
    @Override public void callback(    Pointer instance,    final GdkEventButton event){
      if (event.type == 4) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (GtkSystemTray.this.jmenu.isVisible()) {
              GtkSystemTray.this.jmenu.setVisible(false);
            }
 else {
              int iconX=(int)(event.x_root - event.x);
              int iconY=(int)(event.y_root - event.y);
              Dimension size=GtkSystemTray.this.jmenu.getPreferredSize();
              iconX-=size.width / 2;
              if (iconY > 240) {
                iconY-=size.height;
              }
 else {
                iconY+=ICON_SIZE;
              }
              GtkSystemTray.this.jmenu.setInvoker(GtkSystemTray.this.jmenu);
              GtkSystemTray.this.jmenu.setLocation(iconX,iconY);
              GtkSystemTray.this.jmenu.setVisible(true);
            }
          }
        }
);
      }
    }
  }
;
  libgobject.g_signal_connect_data(this.trayIcon,""String_Node_Str"",gtkCallback,null,null,0);
  if (!GtkSupport.usesSwtMainLoop) {
    this.gtkUpdateThread=new Thread(){
      @Override public void run(){
        GtkSystemTray.this.blockUntilStarted.countDown();
        try {
          libgtk.gtk_main();
        }
 catch (        Throwable t) {
          logger.warn(""String_Node_Str"",t);
        }
      }
    }
;
    this.gtkUpdateThread.setName(""String_Node_Str"");
    this.gtkUpdateThread.setDaemon(true);
    this.gtkUpdateThread.start();
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        GtkSystemTray.this.jmenu=new SystemTrayMenuPopup();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    logger.error(""String_Node_Str"",e);
  }
  try {
    this.blockUntilStarted.await();
    this.active=true;
  }
 catch (  InterruptedException e) {
  }
}"
96413,"@Override public void removeTray(){
  Runnable doRun=new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray.remove(SwingSystemTray.this.trayIcon);
      SwingSystemTray.this.menuEntries.clear();
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    doRun.run();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(doRun);
    }
 catch (    InvocationTargetException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","@Override public void removeTray(){
  Runnable doRun=new Runnable(){
    @Override public void run(){
      SwingSystemTray.this.tray.remove(SwingSystemTray.this.trayIcon);
      SwingSystemTray.this.menuEntries.clear();
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    doRun.run();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(doRun);
    }
 catch (    InvocationTargetException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  super.removeTray();
}"
96414,"public Project(ProjectInfo projInfo,Task rootTask){
  setId(rootTask.getId());
  setName(rootTask.getName());
  setCompletionDate(rootTask.getCompletionDate());
  setDeferDate(rootTask.getDeferDate());
  setDueDate(rootTask.getDueDate());
  setFlagged(rootTask.isFlagged());
  setNote(rootTask.getNote());
  setRank(rootTask.getRank());
  setSequential(rootTask.isSequential());
  status=projInfo.getStatus();
  for (  Task childOfRootTask : new LinkedList<>(rootTask.getTasks())) {
    add(childOfRootTask);
  }
  rootTask.setIsProjectTask(true);
  rootTask.setParent(this);
}","public Project(ProjectInfo projInfo,Task rootTask){
  setId(rootTask.getId());
  setName(rootTask.getName());
  setCompletionDate(rootTask.getCompletionDate());
  setDeferDate(rootTask.getDeferDate());
  setDueDate(rootTask.getDueDate());
  setFlagged(rootTask.isFlagged());
  setNote(rootTask.getNote());
  setRank(rootTask.getRank());
  setSequential(rootTask.isSequential());
  status=projInfo.getStatus();
  singleActionList=projInfo.isSingleActionList();
  for (  Task childOfRootTask : new LinkedList<>(rootTask.getTasks())) {
    add(childOfRootTask);
  }
  rootTask.setIsProjectTask(true);
  rootTask.setParent(this);
}"
96415,"@Override @ExprAttribute(help=""String_Node_Str"") public boolean isAvailable(){
  boolean available=!isCompleted() && !isBlocked();
  if (available && parent != null) {
    available=available && parent.isAvailable();
  }
  if (available && context != null) {
    available=available && context.isAvailable();
  }
  return available;
}","@Override @ExprAttribute(help=""String_Node_Str"") public boolean isAvailable(){
  boolean available=!isCompleted() && !isBlocked();
  if (available && parent != null) {
    available=available && parent.isAvailable();
  }
  if (available && isProject) {
    if (((Project)parent).getUncompletedTaskCount() == 0 && !((Project)parent).isSingleActionList()) {
      available=true;
    }
 else {
      available=false;
    }
  }
  if (available && context != null) {
    available=available && context.isAvailable();
  }
  return available;
}"
96416,"@Override @JsonIgnore public List<Node> getProjectPath(){
  if (parent != null) {
    return getProjectPath(parent);
  }
 else   if (project != null) {
    return getProjectPath(project);
  }
 else {
    LinkedList<Node> result=new LinkedList<>();
    result.add(this);
    return result;
  }
}","@Override @JsonIgnore public List<Node> getProjectPath(){
  if (parent != null) {
    return getProjectPath(parent);
  }
 else {
    LinkedList<Node> result=new LinkedList<>();
    result.add(this);
    return result;
  }
}"
96417,"@Test public void testProjectMode() throws Exception {
  OFExport ofExport=new OFExport();
  ofExport.getProjectRoot().add(f1);
  ofExport.setFormat(""String_Node_Str"");
  ofExport.process();
  StringWriter out=new StringWriter();
  ofExport.write(out);
  Diff.diff(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},out.toString().split(""String_Node_Str""));
}","@Test public void testProjectMode() throws Exception {
  OFExport ofExport=new OFExport();
  ofExport.getProjectRoot().add(f1);
  ofExport.setFormat(""String_Node_Str"");
  ofExport.process();
  StringWriter out=new StringWriter();
  ofExport.write(out);
  Diff.diff(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},out.toString().split(""String_Node_Str""));
}"
96418,"@Test public void testProjectMode() throws Exception {
  OFExport ofExport=new OFExport();
  ofExport.getProjectRoot().add(f1);
  ofExport.setFormat(""String_Node_Str"");
  ofExport.process();
  StringWriter out=new StringWriter();
  ofExport.write(out);
  Diff.diff(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},out.toString().split(""String_Node_Str""));
}","@Test public void testProjectMode() throws Exception {
  OFExport ofExport=new OFExport();
  ofExport.getProjectRoot().add(f1);
  ofExport.setFormat(""String_Node_Str"");
  ofExport.process();
  StringWriter out=new StringWriter();
  ofExport.write(out);
  Diff.diff(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},out.toString().split(""String_Node_Str""));
}"
96419,"@Override public Node getSample(){
  if (!onService.get()) {
    cameraTransform=new CameraTransformer();
    camera=new PerspectiveCamera(true);
    camera.setNearClip(0.1);
    camera.setFarClip(100000.0);
    camera.setTranslateZ(-50);
    camera.setVerticalFieldOfView(false);
    camera.setFieldOfView(42);
    cameraTransform.setTranslate(0,0,0);
    cameraTransform.getChildren().add(camera);
    cameraTransform.ry.setAngle(-45.0);
    cameraTransform.rx.setAngle(-10.0);
    PointLight light=new PointLight(Color.GAINSBORO);
    AmbientLight amb=new AmbientLight(Color.WHITE);
    amb.getScope().add(cameraTransform);
    cameraTransform.getChildren().addAll(light);
    light.translateXProperty().bind(camera.translateXProperty());
    light.translateYProperty().bind(camera.translateYProperty());
    light.translateZProperty().bind(camera.translateZProperty());
    sceneLight1=new PointLight();
    sceneLight1.setTranslateX(500);
    sceneLight2=new PointLight();
    sceneLight2.setTranslateX(-500);
    light1Group=new Group(sceneLight1);
    light2Group=new Group(sceneLight2);
    lightingGroup=new Group(light1Group,light2Group);
    root=new Group(lightingGroup);
    sceneLight1.getScope().add(root);
    sceneLight2.getScope().add(root);
    subScene=new SubScene(root,sceneWidth,sceneHeight,true,SceneAntialiasing.BALANCED);
    subScene.setFill(Color.TRANSPARENT);
    subScene.setCamera(camera);
    subScene.setFocusTraversable(false);
    rotateY=new Rotate(0,0,0,0,Rotate.Y_AXIS);
    mainPane=new StackPane();
    mainPane.setPrefSize(sceneWidth,sceneHeight);
    mainPane.setMaxSize(StackPane.USE_COMPUTED_SIZE,StackPane.USE_COMPUTED_SIZE);
    mainPane.setMinSize(sceneWidth,sceneHeight);
    mainPane.getChildren().add(subScene);
    mainPane.setPickOnBounds(false);
    service=new Service<Void>(){
      @Override protected Task<Void> createTask(){
        return new Task<Void>(){
          @Override protected Void call() throws Exception {
            createMesh();
            return null;
          }
        }
;
      }
      @Override protected void failed(){
        super.failed();
        getException().printStackTrace(System.err);
      }
    }
;
    progressBar=new ProgressBar();
    progressBar.prefWidthProperty().bind(mainPane.widthProperty().divide(2d));
    progressBar.setProgress(-1);
    mainPane.getChildren().add(progressBar);
    group=new Group();
    group.getChildren().add(cameraTransform);
    root.getChildren().add(group);
    service.setOnSucceeded(e -> {
      onService.set(false);
      System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - time));
      addMeshAndListeners();
      mainPane.getChildren().remove(progressBar);
      if (model != null && model instanceof Shape3D) {
        material=(PhongMaterial)((Shape3D)model).getMaterial();
      }
 else {
        if (model != null && model instanceof Group) {
          material=(PhongMaterial)((Shape3D)((Group)model).getChildren().filtered(t -> t instanceof Shape3D).get(0)).getMaterial();
        }
      }
      if (model != null) {
        group.getChildren().add(model);
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      if (controlPanel != null && ((ControlPanel)controlPanel).getPanes().filtered(t -> t.getText().contains(""String_Node_Str"")).isEmpty()) {
        ((ControlPanel)controlPanel).getPanes().add(0,ControlFactory.buildSceneAndLightCategory(mainPane.visibleProperty(),sceneLight1.lightOnProperty(),sceneLight2.lightOnProperty(),sceneLight1.colorProperty(),sceneLight2.colorProperty(),sceneLight1.translateXProperty(),sceneLight2.translateXProperty(),light1Group.rotateProperty(),light2Group.rotateProperty(),light1Group.rotationAxisProperty(),light1Group.rotationAxisProperty()));
      }
    }
);
    subScene.widthProperty().bind(mainPane.widthProperty());
    subScene.heightProperty().bind(mainPane.heightProperty());
    subScene.setOnKeyPressed(event -> {
      double change=10.0;
      if (event.isShiftDown()) {
        change=50.0;
      }
      KeyCode keycode=event.getCode();
      if (keycode == KeyCode.W) {
        camera.setTranslateZ(camera.getTranslateZ() + change);
      }
      if (keycode == KeyCode.S) {
        camera.setTranslateZ(camera.getTranslateZ() - change);
      }
      if (keycode == KeyCode.A) {
        camera.setTranslateX(camera.getTranslateX() - change);
      }
      if (keycode == KeyCode.D) {
        camera.setTranslateX(camera.getTranslateX() + change);
      }
    }
);
    subScene.setOnMousePressed((    MouseEvent me) -> {
      mousePosX=me.getSceneX();
      mousePosY=me.getSceneY();
      mouseOldX=me.getSceneX();
      mouseOldY=me.getSceneY();
      PickResult pr=me.getPickResult();
      if (pr != null && pr.getIntersectedNode() != null && pr.getIntersectedNode() instanceof Sphere && pr.getIntersectedNode().getId().equals(""String_Node_Str"")) {
        distance=pr.getIntersectedDistance();
        s=(Sphere)pr.getIntersectedNode();
        isPicking.set(true);
        vecIni=unProjectDirection(mousePosX,mousePosY,subScene.getWidth(),subScene.getHeight());
      }
    }
);
    subScene.setOnMouseDragged((    MouseEvent me) -> {
      mouseOldX=mousePosX;
      mouseOldY=mousePosY;
      mousePosX=me.getSceneX();
      mousePosY=me.getSceneY();
      mouseDeltaX=(mousePosX - mouseOldX);
      mouseDeltaY=(mousePosY - mouseOldY);
      if (isPicking.get()) {
        double modifier=(me.isControlDown() ? 0.01 : me.isAltDown() ? 1.0 : 0.1) * (30d / camera.getFieldOfView());
        modifier*=(30d / camera.getFieldOfView());
        vecPos=unProjectDirection(mousePosX,mousePosY,subScene.getWidth(),subScene.getHeight());
        Point3D p=new Point3D(distance * (vecPos.x - vecIni.x),distance * (vecPos.y - vecIni.y),distance * (vecPos.z - vecIni.z));
        s.getTransforms().add(new Translate(modifier * p.getX(),modifier * p.getY(),modifier * p.getZ()));
        vecIni=vecPos;
      }
 else {
        double modifier=10.0;
        double modifierFactor=0.1;
        if (me.isControlDown()) {
          modifier=0.1;
        }
        if (me.isShiftDown()) {
          modifier=50.0;
        }
        if (me.isPrimaryButtonDown()) {
          cameraTransform.ry.setAngle(((cameraTransform.ry.getAngle() + mouseDeltaX * modifierFactor * modifier* 2.0) % 360 + 540) % 360 - 180);
          cameraTransform.rx.setAngle(((cameraTransform.rx.getAngle() - mouseDeltaY * modifierFactor * modifier* 2.0) % 360 + 540) % 360 - 180);
        }
 else         if (me.isSecondaryButtonDown()) {
          double z=camera.getTranslateZ();
          double newZ=z + mouseDeltaX * modifierFactor * modifier;
          camera.setTranslateZ(newZ);
        }
 else         if (me.isMiddleButtonDown()) {
          cameraTransform.t.setX(cameraTransform.t.getX() + mouseDeltaX * modifierFactor * modifier* 0.3);
          cameraTransform.t.setY(cameraTransform.t.getY() + mouseDeltaY * modifierFactor * modifier* 0.3);
        }
      }
    }
);
    subScene.setOnMouseReleased((    MouseEvent me) -> {
      if (isPicking.get()) {
        isPicking.set(false);
      }
    }
);
    onService.set(true);
    System.out.println(""String_Node_Str"");
    time=System.currentTimeMillis();
    service.start();
  }
  mainPane.sceneProperty().addListener(i -> {
    if (mainPane.getScene() != null) {
      mainPane.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED,e -> {
        if (e.getPickResult() != null) {
          System.out.println(e.getPickResult().getIntersectedNode() + ""String_Node_Str"" + e.getPickResult().getIntersectedNode().getTypeSelector());
        }
      }
);
    }
  }
);
  return mainPane;
}","@Override public Node getSample(){
  if (!onService.get()) {
    cameraTransform=new CameraTransformer();
    camera=new PerspectiveCamera(true);
    camera.setNearClip(0.1);
    camera.setFarClip(100000.0);
    camera.setTranslateZ(-50);
    camera.setVerticalFieldOfView(false);
    camera.setFieldOfView(42);
    cameraTransform.setTranslate(0,0,0);
    cameraTransform.getChildren().add(camera);
    cameraTransform.ry.setAngle(-45.0);
    cameraTransform.rx.setAngle(-10.0);
    PointLight light=new PointLight(Color.GAINSBORO);
    AmbientLight amb=new AmbientLight(Color.WHITE);
    amb.getScope().add(cameraTransform);
    cameraTransform.getChildren().addAll(light);
    light.translateXProperty().bind(camera.translateXProperty());
    light.translateYProperty().bind(camera.translateYProperty());
    light.translateZProperty().bind(camera.translateZProperty());
    sceneLight1=new PointLight();
    sceneLight1.setTranslateX(500);
    sceneLight2=new PointLight();
    sceneLight2.setTranslateX(-500);
    light1Group=new Group(sceneLight1);
    light2Group=new Group(sceneLight2);
    lightingGroup=new Group(light1Group,light2Group);
    root=new Group(lightingGroup);
    sceneLight1.getScope().add(root);
    sceneLight2.getScope().add(root);
    subScene=new SubScene(root,sceneWidth,sceneHeight,true,SceneAntialiasing.BALANCED);
    subScene.setFill(Color.TRANSPARENT);
    subScene.setCamera(camera);
    subScene.setFocusTraversable(false);
    rotateY=new Rotate(0,0,0,0,Rotate.Y_AXIS);
    mainPane=new StackPane();
    mainPane.setPrefSize(sceneWidth,sceneHeight);
    mainPane.setMaxSize(StackPane.USE_COMPUTED_SIZE,StackPane.USE_COMPUTED_SIZE);
    mainPane.setMinSize(sceneWidth,sceneHeight);
    mainPane.getChildren().add(subScene);
    mainPane.setPickOnBounds(false);
    service=new Service<Void>(){
      @Override protected Task<Void> createTask(){
        return new Task<Void>(){
          @Override protected Void call() throws Exception {
            createMesh();
            return null;
          }
        }
;
      }
      @Override protected void failed(){
        super.failed();
        getException().printStackTrace(System.err);
      }
    }
;
    progressBar=new ProgressBar();
    progressBar.prefWidthProperty().bind(mainPane.widthProperty().divide(2d));
    progressBar.setProgress(-1);
    mainPane.getChildren().add(progressBar);
    group=new Group();
    group.getChildren().add(cameraTransform);
    root.getChildren().add(group);
    service.setOnSucceeded(e -> {
      onService.set(false);
      System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - time));
      addMeshAndListeners();
      mainPane.getChildren().remove(progressBar);
      if (model != null && model instanceof Shape3D) {
        material=(PhongMaterial)((Shape3D)model).getMaterial();
      }
 else {
        if (model != null && model instanceof Group) {
          if (!((Group)model).getChildren().filtered(isShape -> isShape instanceof Shape3D).isEmpty()) {
            material=(PhongMaterial)((Shape3D)((Group)model).getChildren().filtered(t -> t instanceof Shape3D).get(0)).getMaterial();
          }
        }
      }
      if (model != null) {
        group.getChildren().add(model);
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      if (controlPanel != null && ((ControlPanel)controlPanel).getPanes().filtered(t -> t.getText().contains(""String_Node_Str"")).isEmpty()) {
        ((ControlPanel)controlPanel).getPanes().add(0,ControlFactory.buildSceneAndLightCategory(mainPane.visibleProperty(),sceneLight1.lightOnProperty(),sceneLight2.lightOnProperty(),sceneLight1.colorProperty(),sceneLight2.colorProperty(),sceneLight1.translateXProperty(),sceneLight2.translateXProperty(),light1Group.rotateProperty(),light2Group.rotateProperty(),light1Group.rotationAxisProperty(),light1Group.rotationAxisProperty()));
      }
    }
);
    subScene.widthProperty().bind(mainPane.widthProperty());
    subScene.heightProperty().bind(mainPane.heightProperty());
    subScene.setOnKeyPressed(event -> {
      double change=10.0;
      if (event.isShiftDown()) {
        change=50.0;
      }
      KeyCode keycode=event.getCode();
      if (keycode == KeyCode.W) {
        camera.setTranslateZ(camera.getTranslateZ() + change);
      }
      if (keycode == KeyCode.S) {
        camera.setTranslateZ(camera.getTranslateZ() - change);
      }
      if (keycode == KeyCode.A) {
        camera.setTranslateX(camera.getTranslateX() - change);
      }
      if (keycode == KeyCode.D) {
        camera.setTranslateX(camera.getTranslateX() + change);
      }
    }
);
    subScene.setOnMousePressed((    MouseEvent me) -> {
      mousePosX=me.getSceneX();
      mousePosY=me.getSceneY();
      mouseOldX=me.getSceneX();
      mouseOldY=me.getSceneY();
      PickResult pr=me.getPickResult();
      if (pr != null && pr.getIntersectedNode() != null && pr.getIntersectedNode() instanceof Sphere && pr.getIntersectedNode().getId().equals(""String_Node_Str"")) {
        distance=pr.getIntersectedDistance();
        s=(Sphere)pr.getIntersectedNode();
        isPicking.set(true);
        vecIni=unProjectDirection(mousePosX,mousePosY,subScene.getWidth(),subScene.getHeight());
      }
    }
);
    subScene.setOnMouseDragged((    MouseEvent me) -> {
      mouseOldX=mousePosX;
      mouseOldY=mousePosY;
      mousePosX=me.getSceneX();
      mousePosY=me.getSceneY();
      mouseDeltaX=(mousePosX - mouseOldX);
      mouseDeltaY=(mousePosY - mouseOldY);
      if (isPicking.get()) {
        double modifier=(me.isControlDown() ? 0.01 : me.isAltDown() ? 1.0 : 0.1) * (30d / camera.getFieldOfView());
        modifier*=(30d / camera.getFieldOfView());
        vecPos=unProjectDirection(mousePosX,mousePosY,subScene.getWidth(),subScene.getHeight());
        Point3D p=new Point3D(distance * (vecPos.x - vecIni.x),distance * (vecPos.y - vecIni.y),distance * (vecPos.z - vecIni.z));
        s.getTransforms().add(new Translate(modifier * p.getX(),modifier * p.getY(),modifier * p.getZ()));
        vecIni=vecPos;
      }
 else {
        double modifier=10.0;
        double modifierFactor=0.1;
        if (me.isControlDown()) {
          modifier=0.1;
        }
        if (me.isShiftDown()) {
          modifier=50.0;
        }
        if (me.isPrimaryButtonDown()) {
          cameraTransform.ry.setAngle(((cameraTransform.ry.getAngle() + mouseDeltaX * modifierFactor * modifier* 2.0) % 360 + 540) % 360 - 180);
          cameraTransform.rx.setAngle(((cameraTransform.rx.getAngle() - mouseDeltaY * modifierFactor * modifier* 2.0) % 360 + 540) % 360 - 180);
        }
 else         if (me.isSecondaryButtonDown()) {
          double z=camera.getTranslateZ();
          double newZ=z + mouseDeltaX * modifierFactor * modifier;
          camera.setTranslateZ(newZ);
        }
 else         if (me.isMiddleButtonDown()) {
          cameraTransform.t.setX(cameraTransform.t.getX() + mouseDeltaX * modifierFactor * modifier* 0.3);
          cameraTransform.t.setY(cameraTransform.t.getY() + mouseDeltaY * modifierFactor * modifier* 0.3);
        }
      }
    }
);
    subScene.setOnMouseReleased((    MouseEvent me) -> {
      if (isPicking.get()) {
        isPicking.set(false);
      }
    }
);
    onService.set(true);
    System.out.println(""String_Node_Str"");
    time=System.currentTimeMillis();
    service.start();
  }
  mainPane.sceneProperty().addListener(i -> {
    if (mainPane.getScene() != null) {
      mainPane.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED,e -> {
        if (e.getPickResult() != null) {
          System.out.println(e.getPickResult().getIntersectedNode() + ""String_Node_Str"" + e.getPickResult().getIntersectedNode().getTypeSelector());
        }
      }
);
    }
  }
);
  return mainPane;
}"
96420,"private void createCameraView(){
  cameraView=new CameraView(subScene);
  cameraView.setFitWidth(250);
  cameraView.setFitHeight(200);
  cameraView.setFirstPersonNavigationEabled(true);
  cameraView.setFocusTraversable(true);
  cameraView.getCamera().setTranslateZ(-2500);
  cameraView.getCamera().setTranslateX(500);
  StackPane.setAlignment(cameraView,Pos.BOTTOM_RIGHT);
  StackPane.setMargin(cameraView,new Insets(10));
  mainPane.getChildren().add(cameraView);
  cameraView.startViewing();
}","private void createCameraView(){
  cameraView=new CameraView(subScene);
  cameraView.setFitWidth(250);
  cameraView.setFitHeight(200);
  cameraView.setFirstPersonNavigationEabled(true);
  cameraView.setFocusTraversable(true);
  cameraView.getCamera().setTranslateZ(-2500);
  cameraView.getCamera().setTranslateX(500);
  StackPane.setAlignment(cameraView,Pos.BOTTOM_RIGHT);
  StackPane.setMargin(cameraView,new Insets(20));
  mainPane.getChildren().add(cameraView);
  cameraView.startViewing();
}"
96421,"@Override public void start(final Stage s) throws Exception {
  Application.setUserAgentStylesheet(GLASS_BLACK_SMOKE);
  stage=s;
  stage.getIcons().add(new Image(getClass().getResource(""String_Node_Str"").toExternalForm()));
  projectsMap=new SampleScanner().discoverSamples();
  buildProjectTree(null);
  leftSideContent=new VBox();
  leftSideContent.setAlignment(Pos.TOP_CENTER);
  leftSideContent.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  leftSideContent.setSpacing(3);
  leftSideContent.setPadding(new Insets(3));
  leftSideContent.getStyleClass().add(""String_Node_Str"");
  rightSideContent=new VBox();
  rightSideContent.getStyleClass().add(""String_Node_Str"");
  centerContent=new StackPane();
  centerContent.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  searchBar=new TextField();
  searchBar.setPrefSize(USE_COMPUTED_SIZE,USE_PREF_SIZE);
  searchBar.textProperty().addListener((  Observable o) -> {
    buildProjectTree(searchBar.getText());
  }
);
  contentTree=new TreeView<>(root);
  contentTree.getStyleClass().add(""String_Node_Str"");
  contentTree.setShowRoot(false);
  contentTree.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  contentTree.setCellFactory(new Callback<TreeView<FXyzSample>,TreeCell<FXyzSample>>(){
    @Override public TreeCell<FXyzSample> call(    TreeView<FXyzSample> param){
      return new TreeCell<FXyzSample>(){
        @Override protected void updateItem(        FXyzSample item,        boolean empty){
          super.updateItem(item,empty);
          if (empty) {
            setText(""String_Node_Str"");
          }
 else {
            setText(item.getSampleName());
          }
        }
      }
;
    }
  }
);
  contentTree.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<TreeItem<FXyzSample>>(){
    @Override public void changed(    ObservableValue<? extends TreeItem<FXyzSample>> observable,    TreeItem<FXyzSample> oldValue,    TreeItem<FXyzSample> newSample){
      if (newSample == null) {
        return;
      }
 else       if (newSample.getValue() instanceof EmptySample) {
        FXyzSample selectedSample=newSample.getValue();
        Project selectedProject=projectsMap.get(selectedSample.getSampleName());
        System.out.println(selectedProject);
        if (selectedProject != null) {
          changeToWelcomePage(selectedProject.getWelcomePage());
        }
        return;
      }
      selectedSample=newSample.getValue();
      changeContent();
    }
  }
);
  leftSideContent.getChildren().addAll(searchBar,contentTree);
  VBox.setVgrow(contentTree,Priority.ALWAYS);
  client=new HiddenSidesClient();
  client.setContent(centerContent);
  client.setLeft(leftSideContent);
  client.setRight(rightSideContent);
  client.setTriggerDistance(15);
  frame=new SimpleWindowFrame(stage,1280,800);
  frame.setIconImage(new Image(getClass().getResource(""String_Node_Str"").toExternalForm()));
  frame.setText(""String_Node_Str"");
  frame.setRootContent(client);
  frame.getPinRelease().setOnMouseEntered(e -> {
    if (client.getPinnedSide() != null) {
      client.setPinnedSide(null);
      frame.getPinRelease().toBack();
    }
  }
);
  List<TreeItem<FXyzSample>> projects=contentTree.getRoot().getChildren();
  if (!projects.isEmpty()) {
    TreeItem<FXyzSample> firstProject=projects.get(0);
    contentTree.getSelectionModel().select(firstProject);
  }
 else {
    changeToWelcomePage(null);
  }
  Scene scene=new Scene(frame,1280,800);
  scene.setFill(Color.TRANSPARENT);
  this.stage.setScene(scene);
  this.stage.initStyle(StageStyle.TRANSPARENT);
  this.stage.show();
  System.err.println(contentTree.getRoot().getChildren());
}","@Override public void start(final Stage s) throws Exception {
  Application.setUserAgentStylesheet(GLASS_BLACK_SMOKE);
  stage=s;
  stage.getIcons().add(new Image(getClass().getResource(""String_Node_Str"").toExternalForm()));
  projectsMap=new SampleScanner().discoverSamples();
  buildProjectTree(null);
  leftSideContent=new VBox();
  leftSideContent.setAlignment(Pos.TOP_CENTER);
  leftSideContent.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  leftSideContent.setSpacing(3);
  leftSideContent.setPadding(new Insets(3));
  leftSideContent.getStyleClass().add(""String_Node_Str"");
  contentControls=new VBox();
  contentControls.getStyleClass().add(""String_Node_Str"");
  contentControls.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  centerContent=new StackPane();
  centerContent.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  searchBar=new TextField();
  searchBar.setFocusTraversable(false);
  searchBar.setPrefSize(USE_COMPUTED_SIZE,USE_PREF_SIZE);
  searchBar.textProperty().addListener((  Observable o) -> {
    buildProjectTree(searchBar.getText());
  }
);
  searchBar.setOnMouseEntered(e -> {
    if (client.getPinnedSide() == null) {
      client.setPinnedSide(Side.LEFT);
    }
  }
);
  searchBar.setOnAction(a -> {
    client.setPinnedSide(null);
  }
);
  contentTree=new TreeView<>(root);
  contentTree.getStyleClass().add(""String_Node_Str"");
  contentTree.setShowRoot(false);
  contentTree.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  contentTree.setCellFactory(new Callback<TreeView<FXyzSample>,TreeCell<FXyzSample>>(){
    @Override public TreeCell<FXyzSample> call(    TreeView<FXyzSample> param){
      return new TreeCell<FXyzSample>(){
        @Override protected void updateItem(        FXyzSample item,        boolean empty){
          super.updateItem(item,empty);
          if (empty) {
            setText(""String_Node_Str"");
          }
 else {
            setText(item.getSampleName());
          }
        }
      }
;
    }
  }
);
  contentTree.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<TreeItem<FXyzSample>>(){
    @Override public void changed(    ObservableValue<? extends TreeItem<FXyzSample>> observable,    TreeItem<FXyzSample> oldValue,    TreeItem<FXyzSample> newSample){
      if (newSample == null) {
        return;
      }
 else       if (newSample.getValue() instanceof EmptySample) {
        FXyzSample selectedSample=newSample.getValue();
        Project selectedProject=projectsMap.get(selectedSample.getSampleName());
        System.out.println(selectedProject);
        if (selectedProject != null) {
          changeToWelcomePage(selectedProject.getWelcomePage());
        }
        return;
      }
      selectedSample=newSample.getValue();
      changeContent();
    }
  }
);
  contentTree.setFocusTraversable(false);
  leftSideContent.getChildren().addAll(searchBar,contentTree);
  VBox.setVgrow(contentTree,Priority.ALWAYS);
  client=new HiddenSidesClient();
  client.setContent(centerContent);
  client.setLeft(leftSideContent);
  client.setTriggerDistance(20);
  frame=new SimpleWindowFrame(stage,1280,800);
  frame.setIconImage(new Image(getClass().getResource(""String_Node_Str"").toExternalForm()));
  frame.setText(""String_Node_Str"");
  frame.setRootContent(client);
  List<TreeItem<FXyzSample>> projects=contentTree.getRoot().getChildren();
  if (!projects.isEmpty()) {
    TreeItem<FXyzSample> firstProject=projects.get(0);
    contentTree.getSelectionModel().select(firstProject);
  }
 else {
    changeToWelcomePage(null);
  }
  Scene scene=new Scene(frame,1200,768);
  scene.setFill(Color.TRANSPARENT);
  this.stage.setScene(scene);
  this.stage.initStyle(StageStyle.TRANSPARENT);
  this.stage.show();
  System.err.println(contentTree.getRoot().getChildren());
}"
96422,"protected void changeContent(){
  if (selectedSample == null) {
    return;
  }
  rightSideContent.getChildren().clear();
  if (!centerContent.getChildren().isEmpty()) {
    centerContent.getChildren().clear();
  }
  updateContent();
}","protected void changeContent(){
  if (selectedSample == null) {
    return;
  }
  contentControls.getChildren().clear();
  if (!centerContent.getChildren().isEmpty()) {
    centerContent.getChildren().clear();
  }
  updateContent();
}"
96423,"private void updateContent(){
  centerContent.getChildren().addAll(buildSampleContent(selectedSample));
  centerContent.toBack();
  Node controls=selectedSample.getControlPanel();
  if (controls != null) {
    VBox.setVgrow(controls,Priority.ALWAYS);
    rightSideContent.getChildren().addAll(controls);
    client.setPinnedSide(Side.RIGHT);
    frame.getPinRelease().toFront();
    System.out.println(client.getRight().getOnMouseReleased());
  }
 else {
    frame.getPinRelease().toBack();
  }
}","private void updateContent(){
  HBox cPane=new HBox();
  cPane.setPrefSize(USE_COMPUTED_SIZE,USE_COMPUTED_SIZE);
  Node content=buildSampleContent(selectedSample);
  HBox.setHgrow(content,Priority.ALWAYS);
  Node controls=selectedSample.getControlPanel();
  if (controls != null) {
    contentControls.getChildren().add(controls);
    VBox.setVgrow(controls,Priority.ALWAYS);
  }
  cPane.getChildren().addAll(content,contentControls);
  centerContent.getChildren().addAll(cPane);
  centerContent.toBack();
}"
96424,"private void initWindowControls(){
  sceneProperty().addListener(i -> {
    if (getScene() != null) {
      getScene().setOnMousePressed(e -> {
        mOX=mX;
        mOY=mY;
        mX=e.getSceneX();
        mY=e.getSceneY();
        mDX=mX - mOX;
        mDY=mY - mOY;
      }
);
    }
  }
);
  headerSpacer.setOnMouseDragged((e) -> {
    stage.setX(e.getScreenX() - mX);
    stage.setY(e.getScreenY() - mY);
  }
);
  southEastResize.setOnMouseEntered(e -> e.consume());
  southEastResize.setOnMouseExited(e -> e.consume());
  southEastResize.setOnMousePressed((e) -> {
    dragOffsetX=(getTranslateX() + getWidth() - e.getScreenX());
    dragOffsetY=(getTranslateY() + getHeight() - e.getScreenY());
  }
);
  southEastResize.setOnMouseDragged((e) -> {
    double x=e.getScreenX() + dragOffsetX, y=e.getScreenY() + dragOffsetY;
    double w=x - getTranslateX();
    double h=y - getTranslateY();
    setPrefWidth(Math.max(stageMinWidth,w));
    setPrefHeight(Math.max(stageMinHeight,h));
    Platform.runLater(() -> stage.sizeToScene());
  }
);
}","private void initWindowControls(){
  sceneProperty().addListener(i -> {
    if (getScene() != null) {
      getScene().setOnMousePressed(e -> {
        mOX=mX;
        mOY=mY;
        mX=e.getSceneX();
        mY=e.getSceneY();
        mDX=mX - mOX;
        mDY=mY - mOY;
      }
);
    }
  }
);
  headerBar.setOnMouseDragged((e) -> {
    stage.setX(e.getScreenX() - mX);
    stage.setY(e.getScreenY() - mY);
  }
);
}"
96425,"public SimpleWindowFrame(Stage stage,double minWidth,double minHeight){
  try {
    FXMLLoader loader=new FXMLLoader(this.getClass().getResource(""String_Node_Str""));
    loader.setController(SimpleWindowFrame.this);
    loader.setRoot(SimpleWindowFrame.this);
    loader.load();
  }
 catch (  IOException ex) {
    Logger.getLogger(CustomWindow.class.getName()).log(Level.SEVERE,null,ex);
  }
  this.stage=stage;
  this.stageMinWidth=minWidth;
  this.stageMinHeight=minHeight;
  initWindowControls();
  minimize.setOnAction(a -> {
    stage.setIconified(true);
  }
);
  maximize.setOnAction(a -> {
    if (!stage.isMaximized()) {
      stage.setMaximized(true);
    }
 else {
      stage.setMaximized(false);
    }
  }
);
  exit.setOnAction(a -> Platform.exit());
  pinRelease.toBack();
}","public SimpleWindowFrame(Stage stage,double minWidth,double minHeight){
  try {
    FXMLLoader loader=new FXMLLoader(this.getClass().getResource(""String_Node_Str""));
    loader.setController(SimpleWindowFrame.this);
    loader.setRoot(SimpleWindowFrame.this);
    loader.load();
  }
 catch (  IOException ex) {
    Logger.getLogger(CustomWindow.class.getName()).log(Level.SEVERE,null,ex);
  }
  this.stage=stage;
  this.stageMinWidth=minWidth;
  this.stageMinHeight=minHeight;
  initWindowControls();
  minimize.setOnAction(a -> {
    stage.setIconified(true);
  }
);
  maximize.setOnAction(a -> {
    if (!stage.isMaximized()) {
      stage.setMaximized(true);
    }
 else {
      stage.setMaximized(false);
    }
  }
);
  exit.setOnAction(a -> Platform.exit());
}"
96426,"public ControlPanel(ControlCategory cat){
  this();
  this.accordion.getPanes().add(cat);
  this.getChildren().add(accordion);
}","public ControlPanel(ControlCategory cat){
  this();
  this.accordion.getPanes().add(cat);
  this.getChildren().add(accordion);
  this.getStyleClass().clear();
}"
96427,"@Test public void testNoJMXBindingNameConflictsOnMultiServicesUsingSameConnect() throws Exception {
  GatewayConfigurationBuilder configBuilder=new GatewayConfigurationBuilder();
  GatewayConfiguration gatewayConfiguration=configBuilder.service().name(""String_Node_Str"").accept(FRONTEND_URI_1).connect(BACKEND_URI_1).type(PROXY).done().service().accept(FRONTEND_URI_2).connect(BACKEND_URI_1).type(PROXY).done().done();
  Gateway gateway=new Gateway();
  try {
    gateway.start(gatewayConfiguration);
  }
  finally {
    gateway.stop();
  }
}","@Test public void testNoJMXBindingNameConflictsOnMultiServicesUsingSameConnect() throws Exception {
  GatewayConfigurationBuilder configBuilder=new GatewayConfigurationBuilder();
  GatewayConfiguration gatewayConfiguration=configBuilder.service().name(""String_Node_Str"").accept(FRONTEND_URI_1).connect(BACKEND_URI_1).type(PROXY).done().service().accept(FRONTEND_URI_2).connect(BACKEND_URI_1).type(PROXY).done().done();
  Gateway gateway=new Gateway();
  try {
    gateway.start(gatewayConfiguration);
  }
  finally {
    Thread.sleep(500);
    gateway.stop();
  }
}"
96428,"@Specification(""String_Node_Str"") @ScriptProperty(""String_Node_Str"") @Test public void sessionWhichHasClosedShouldBeRemovedFromCurrentSessionCountAndActiveSessions() throws Exception {
  k3po.finish();
  Thread.sleep(1000);
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  ObjectName summaryBeansObjectNamePattern=new ObjectName(""String_Node_Str"" + ECHO_WSN_SERVICE + ""String_Node_Str"");
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(summaryBeansObjectNamePattern,null);
  assertEquals(1,mbeanNames.size());
  ObjectName summaryBean=mbeanNames.iterator().next();
  assertEquals(Long.valueOf(1),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  assertEquals(Long.valueOf(0),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  mbeanNames=mbeanServerConn.queryNames(ObjectName.getInstance(""String_Node_Str""),null);
  assertEquals(""String_Node_Str"",0,mbeanNames.size());
}","@Specification(""String_Node_Str"") @ScriptProperty(""String_Node_Str"") @Test public void sessionWhichHasClosedShouldBeRemovedFromCurrentSessionCountAndActiveSessions() throws Exception {
  k3po.finish();
  Thread.sleep(1000);
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  ObjectName summaryBeansObjectNamePattern=new ObjectName(""String_Node_Str"" + ECHO_WSN_SERVICE + ""String_Node_Str"");
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(summaryBeansObjectNamePattern,null);
  assertEquals(1,mbeanNames.size());
  ObjectName summaryBean=mbeanNames.iterator().next();
  assertEquals(Long.valueOf(1),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  assertEquals(Long.valueOf(0),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  long startTime=currentTimeMillis();
  int sessionsCount=1;
  while (sessionsCount > 0 && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    mbeanNames=mbeanServerConn.queryNames(ObjectName.getInstance(""String_Node_Str""),null);
    sessionsCount=mbeanNames.size();
  }
  assertEquals(""String_Node_Str"",0,sessionsCount);
}"
96429,"@Specification({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void sessionAttributePrincipalsShouldListUserPrincipals() throws Exception {
  k3po.finish();
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(ObjectName.getInstance(""String_Node_Str""),null);
  for (  ObjectName name : mbeanNames) {
    String principals=(String)mbeanServerConn.getAttribute(name,""String_Node_Str"");
    System.out.println(format(""String_Node_Str"",name,principals));
    assertTrue(format(""String_Node_Str"",name,principals),principals.contains(""String_Node_Str""));
    assertTrue(format(""String_Node_Str"",name,principals),principals.contains(""String_Node_Str""));
  }
}","@Specification({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @Test public void sessionAttributePrincipalsShouldListUserPrincipals() throws Exception {
  k3po.finish();
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(ObjectName.getInstance(""String_Node_Str""),null);
  long startTime=currentTimeMillis();
  boolean gotAllPrincipals=false;
  while (!gotAllPrincipals && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    gotAllPrincipals=true;
    for (    ObjectName name : mbeanNames) {
      if (mbeanServerConn.getAttribute(name,""String_Node_Str"") == null) {
        gotAllPrincipals=false;
        break;
      }
    }
  }
  assertTrue(""String_Node_Str"",gotAllPrincipals);
  for (  ObjectName name : mbeanNames) {
    String principals=(String)mbeanServerConn.getAttribute(name,""String_Node_Str"");
    System.out.println(format(""String_Node_Str"",name,principals));
    assertTrue(format(""String_Node_Str"",name,principals),principals.contains(""String_Node_Str""));
    assertTrue(format(""String_Node_Str"",name,principals),principals.contains(""String_Node_Str""));
  }
  shouldCloseSessionsByRolePrincipal(""String_Node_Str"");
}"
96430,"public void deregister(final AbstractNioChannel<?> channel){
  registerTask(new Runnable(){
    @Override public void run(){
      SelectionKey key=channel.channel.keyFor(selector);
      if (key != null) {
        key.cancel();
        increaseCancelledKeys();
        try {
          selector.selectNow();
        }
 catch (        IOException e) {
        }
        if (wakenUp.compareAndSet(false,true)) {
          selector.wakeup();
        }
      }
    }
  }
);
}","public void deregister(final AbstractNioChannel<?> channel){
  if (channel instanceof NioChildDatagramChannel) {
    return;
  }
  registerTask(new Runnable(){
    @Override public void run(){
      SelectionKey key=channel.channel.keyFor(selector);
      if (key != null) {
        key.cancel();
        increaseCancelledKeys();
        try {
          selector.selectNow();
        }
 catch (        IOException e) {
        }
        if (wakenUp.compareAndSet(false,true)) {
          selector.wakeup();
        }
      }
    }
  }
);
}"
96431,"public void register(final AbstractNioChannel<?> channel){
  registerTask(new Runnable(){
    @Override public void run(){
      try {
        int interestOps=channel.getInternalInterestOps();
        interestOps|=SelectionKey.OP_WRITE;
        channel.setInternalInterestOps(interestOps);
        ReadDispatcher readDispatcher=channel instanceof NioSocketChannel ? new TcpReadDispatcher((NioSocketChannel)channel) : new UdpReadDispatcher((NioDatagramChannel)channel);
        channel.channel.register(selector,interestOps,readDispatcher);
      }
 catch (      ClosedChannelException e) {
        close(channel,succeededFuture(channel));
      }
    }
  }
);
}","public void register(final AbstractNioChannel<?> channel){
  if (channel instanceof NioChildDatagramChannel) {
    return;
  }
  registerTask(new Runnable(){
    @Override public void run(){
      try {
        int interestOps=channel.getInternalInterestOps();
        interestOps|=SelectionKey.OP_WRITE;
        channel.setInternalInterestOps(interestOps);
        ReadDispatcher readDispatcher=channel instanceof NioSocketChannel ? new TcpReadDispatcher((NioSocketChannel)channel) : new UdpReadDispatcher((NioDatagramChannel)channel);
        channel.channel.register(selector,interestOps,readDispatcher);
      }
 catch (      ClosedChannelException e) {
        close(channel,succeededFuture(channel));
      }
    }
  }
);
}"
96432,"@Test public void shouldLogMessageIncludingSession() throws Exception {
  IoSession session=context.mock(IoSession.class,""String_Node_Str"");
  new DefaultExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),session);
  expectedPatterns=Arrays.asList(""String_Node_Str"");
}","@Test public void shouldLogMessageIncludingSession() throws Exception {
  IoSession session=context.mock(IoSession.class,""String_Node_Str"");
  new DefaultExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),session);
  checkLogMessageRule.setExpectedPatterns(Arrays.asList(""String_Node_Str""));
}"
96433,"public HttpProxyLoggingWarnIT(String serviceName,String expectedMessage){
  this.serviceName=serviceName;
  this.expectedMessage=expectedMessage;
  this.chain=RuleChain.outerRule(new MethodExecutionTrace()).around(robot).around(checkLogMessageRule).around(getGatewayRule());
}","public HttpProxyLoggingWarnIT(String serviceName,String expectedMessage){
  this.serviceName=serviceName;
  this.expectedMessage=expectedMessage;
  this.chain=RuleChain.outerRule(new MethodExecutionTrace()).around(getGatewayRule()).around(checkLogMessageRule).around(robot);
}"
96434,"@Specification(""String_Node_Str"") @Test public void sendHttp_1_0_Request() throws Exception {
  robot.finish();
  expectedPatterns=new ArrayList<String>(Arrays.asList(new String[]{expectedMessage}));
}","@Specification(""String_Node_Str"") @Test public void sendHttp_1_0_Request() throws Exception {
  robot.finish();
  checkLogMessageRule.setExpectedPatterns(Arrays.asList(new String[]{expectedMessage}));
}"
96435,"@Specification(""String_Node_Str"") @Test public void testRequestWithRCWithFailingFormat() throws Exception {
  task.run();
  k3po.finish();
  expectedPatterns=new ArrayList<>(Arrays.asList(new String[]{""String_Node_Str""}));
}","@Specification(""String_Node_Str"") @Test public void testRequestWithRCWithFailingFormat() throws Exception {
  task.run();
  k3po.finish();
  checkLogMessageRule.setExpectedPatterns(new ArrayList<>(Arrays.asList(new String[]{""String_Node_Str""})));
}"
96436,"@Override protected void doSessionOpened(IoSessionEx session) throws Exception {
  writeStringMessageToSession(""String_Node_Str"" + counter,session);
  InetSocketAddress socketAddress=(InetSocketAddress)session.getLocalAddress();
  expectedPatterns=Arrays.asList(String.format(""String_Node_Str"",session.getId(),socketAddress.getPort()));
}","@Override protected void doSessionOpened(IoSessionEx session) throws Exception {
  writeStringMessageToSession(""String_Node_Str"" + counter,session);
  InetSocketAddress socketAddress=(InetSocketAddress)session.getLocalAddress();
  checkLogMessageRule.setExpectedPatterns(Arrays.asList(String.format(""String_Node_Str"",session.getId(),socketAddress.getPort())));
}"
96437,"@Test @Specification({""String_Node_Str""}) public void exceptionMonitorShouldLogMessage() throws Exception {
  k3po.start();
  k3po.awaitBarrier(""String_Node_Str"");
  connectTo8080(new IoHandlerAdapter<IoSessionEx>(){
    private int counter=1;
    private DataMatcher dataMatch=new DataMatcher(""String_Node_Str"" + counter);
    @Override protected void doSessionOpened(    IoSessionEx session) throws Exception {
      writeStringMessageToSession(""String_Node_Str"" + counter,session);
      InetSocketAddress socketAddress=(InetSocketAddress)session.getLocalAddress();
      expectedPatterns=Arrays.asList(String.format(""String_Node_Str"",session.getId(),socketAddress.getPort()));
    }
    @Override protected void doMessageReceived(    IoSessionEx session,    Object message) throws Exception {
      String decoded=new String(((IoBuffer)message).array());
      if (dataMatch.addFragment(decoded) && counter < 2) {
        counter++;
        writeStringMessageToSession(""String_Node_Str"" + counter,session);
        dataMatch=new DataMatcher(""String_Node_Str"" + counter);
      }
    }
  }
);
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void exceptionMonitorShouldLogMessage() throws Exception {
  k3po.start();
  k3po.awaitBarrier(""String_Node_Str"");
  connectTo8080(new IoHandlerAdapter<IoSessionEx>(){
    private int counter=1;
    private DataMatcher dataMatch=new DataMatcher(""String_Node_Str"" + counter);
    @Override protected void doSessionOpened(    IoSessionEx session) throws Exception {
      writeStringMessageToSession(""String_Node_Str"" + counter,session);
      InetSocketAddress socketAddress=(InetSocketAddress)session.getLocalAddress();
      checkLogMessageRule.setExpectedPatterns(Arrays.asList(String.format(""String_Node_Str"",session.getId(),socketAddress.getPort())));
    }
    @Override protected void doMessageReceived(    IoSessionEx session,    Object message) throws Exception {
      String decoded=new String(((IoBuffer)message).array());
      if (dataMatch.addFragment(decoded) && counter < 2) {
        counter++;
        writeStringMessageToSession(""String_Node_Str"" + counter,session);
        dataMatch=new DataMatcher(""String_Node_Str"" + counter);
      }
    }
  }
);
  k3po.finish();
}"
96438,"@Test public void shouldLogMessageIncludingNullSession() throws Exception {
  new TransportExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),null);
  expectedPatterns=Arrays.asList(""String_Node_Str"");
}","@Test public void shouldLogMessageIncludingNullSession() throws Exception {
  new TransportExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),null);
  checkLogMessageRule.setExpectedPatterns(Arrays.asList(""String_Node_Str""));
}"
96439,"@Test public void shouldLogMessageIncludingSession() throws Exception {
  IoSessionEx session=context.mock(IoSessionEx.class,""String_Node_Str"");
  IoServiceEx service=context.mock(IoServiceEx.class,""String_Node_Str"");
  TransportMetadata metadata=context.mock(TransportMetadata.class,""String_Node_Str"");
  ResourceAddressFactory addressFactory=ResourceAddressFactory.newResourceAddressFactory();
  String addressURI=""String_Node_Str"";
  SocketAddress address=addressFactory.newResourceAddress(addressURI);
  Subject subject=new Subject();
  context.checking(new Expectations(){
{
      allowing(session).getService();
      will(returnValue(service));
      oneOf(session).getId();
      will(returnValue(TEST_SESSION_NUMBER));
      oneOf(service).getTransportMetadata();
      will(returnValue(metadata));
      oneOf(session).getTransportMetadata();
      will(returnValue(metadata));
      allowing(metadata).getName();
      will(returnValue(""String_Node_Str""));
      oneOf(session).getAttribute(with(any(Object.class)));
      will(returnValue(null));
      oneOf(session).getLocalAddress();
      will(returnValue(address));
      oneOf(session).getRemoteAddress();
      will(returnValue(address));
      oneOf(session).getSubject();
      will(returnValue(subject));
      oneOf(session).setAttribute(with(any(Object.class)),with(any(String.class)));
    }
  }
);
  new TransportExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),session);
  expectedPatterns=Arrays.asList(""String_Node_Str"");
}","@Test public void shouldLogMessageIncludingSession() throws Exception {
  IoSessionEx session=context.mock(IoSessionEx.class,""String_Node_Str"");
  IoServiceEx service=context.mock(IoServiceEx.class,""String_Node_Str"");
  TransportMetadata metadata=context.mock(TransportMetadata.class,""String_Node_Str"");
  ResourceAddressFactory addressFactory=ResourceAddressFactory.newResourceAddressFactory();
  String addressURI=""String_Node_Str"";
  SocketAddress address=addressFactory.newResourceAddress(addressURI);
  Subject subject=new Subject();
  context.checking(new Expectations(){
{
      allowing(session).getService();
      will(returnValue(service));
      oneOf(session).getId();
      will(returnValue(TEST_SESSION_NUMBER));
      oneOf(service).getTransportMetadata();
      will(returnValue(metadata));
      oneOf(session).getTransportMetadata();
      will(returnValue(metadata));
      allowing(metadata).getName();
      will(returnValue(""String_Node_Str""));
      oneOf(session).getAttribute(with(any(Object.class)));
      will(returnValue(null));
      oneOf(session).getLocalAddress();
      will(returnValue(address));
      oneOf(session).getRemoteAddress();
      will(returnValue(address));
      oneOf(session).getSubject();
      will(returnValue(subject));
      oneOf(session).setAttribute(with(any(Object.class)),with(any(String.class)));
    }
  }
);
  new TransportExceptionMonitor().exceptionCaught(new NullPointerException(EXCEPTION_MESSAGE),session);
  checkLogMessageRule.setExpectedPatterns(Arrays.asList(""String_Node_Str""));
}"
96440,"private boolean isChunked(HttpRequestMessage httpRequest) throws ProtocolDecoderException {
  String transferEncoding=httpRequest.getHeader(""String_Node_Str"");
  if (transferEncoding != null) {
    int semicolonAt=transferEncoding.indexOf(';');
    if (semicolonAt != -1) {
      transferEncoding=transferEncoding.substring(0,semicolonAt);
    }
    if (""String_Node_Str"".equalsIgnoreCase(transferEncoding)) {
      return true;
    }
    throw new ProtocolDecoderException(""String_Node_Str"" + transferEncoding);
  }
  return false;
}","private boolean isChunked(HttpRequestMessage httpRequest) throws ProtocolDecoderException {
  String transferEncoding=httpRequest.getHeader(""String_Node_Str"");
  if (transferEncoding != null) {
    int semicolonAt=transferEncoding.indexOf(';');
    if (semicolonAt != -1) {
      transferEncoding=transferEncoding.substring(0,semicolonAt);
    }
    if (""String_Node_Str"".equalsIgnoreCase(transferEncoding)) {
      return true;
    }
  }
  return false;
}"
96441,"@Ignore(""String_Node_Str"") @Test @Specification({""String_Node_Str""}) public void serverShouldSend501ToUnknownTransferEncoding() throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  final IoHandler acceptHandler=new IoHandlerAdapter<HttpAcceptSession>(){
    @Override protected void doSessionOpened(    HttpAcceptSession session) throws Exception {
      latch.countDown();
      session.setStatus(HttpStatus.SUCCESS_OK);
      session.close(true);
    }
  }
;
  acceptor.bind(HTTP_ADDRESS,acceptHandler);
  k3po.finish();
  assertTrue(latch.await(4,SECONDS));
}","@Test @Specification({""String_Node_Str""}) public void serverShouldSend501ToUnknownTransferEncoding() throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  final IoHandler acceptHandler=new IoHandlerAdapter<HttpAcceptSession>(){
    @Override protected void doSessionOpened(    HttpAcceptSession session) throws Exception {
      latch.countDown();
      session.setStatus(HttpStatus.SERVER_NOT_IMPLEMENTED);
      session.close(true);
    }
  }
;
  acceptor.bind(HTTP_ADDRESS,acceptHandler);
  k3po.finish();
  assertTrue(latch.await(4,SECONDS));
}"
96442,"/** 
 * <p> Launch the in-process Gateway. </p>
 * @throws Exception
 */
@Override public void launch() throws Exception {
  if (baseGateway != null) {
    baseGateway.launch();
  }
  if (gateway != null) {
    throw new GatewayAlreadyRunningException(""String_Node_Str"");
  }
  Properties configuration=getProperties();
  if (configuration == null) {
    throw new Exception(""String_Node_Str"");
  }
  String bypassPlatformCheckStr=configuration.getProperty(BYPASS_PLATFORM_CHECK_PROPERTY);
  boolean bypassPlatformCheck=bypassPlatformCheckStr != null && !bypassPlatformCheckStr.equalsIgnoreCase(""String_Node_Str"") && !bypassPlatformCheckStr.equalsIgnoreCase(""String_Node_Str"") && !bypassPlatformCheckStr.equalsIgnoreCase(""String_Node_Str"");
  if (!bypassPlatformCheck && !supportedJavaVersion(1,8,""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String gatewayHomeProperty=configuration.getProperty(GATEWAY_HOME_PROPERTY);
  if (gatewayHomeProperty == null) {
    throw new IllegalArgumentException(GATEWAY_HOME_PROPERTY + ""String_Node_Str"");
  }
  File homeDir=new File(gatewayHomeProperty);
  if (!homeDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_HOME_PROPERTY + ""String_Node_Str"" + homeDir.getAbsolutePath());
  }
  String gatewayConfigDirectoryProperty=configuration.getProperty(GATEWAY_CONFIG_DIRECTORY_PROPERTY);
  File configDir=(gatewayConfigDirectoryProperty != null) ? new File(gatewayConfigDirectoryProperty) : new File(homeDir,DEFAULT_CONFIG_DIRECTORY);
  if (!configDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_CONFIG_DIRECTORY_PROPERTY + ""String_Node_Str"" + configDir.getAbsolutePath());
  }
  configuration.setProperty(GATEWAY_CONFIG_DIRECTORY_PROPERTY,configDir.toString());
  String gatewayTempDirectoryProperty=configuration.getProperty(GATEWAY_TEMP_DIRECTORY_PROPERTY);
  File tempDir=(gatewayTempDirectoryProperty != null) ? new File(gatewayTempDirectoryProperty) : new File(homeDir,DEFAULT_TEMP_DIRECTORY);
  if (!tempDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_TEMP_DIRECTORY_PROPERTY + ""String_Node_Str"" + tempDir.getAbsolutePath());
  }
  String gatewayLogDirectoryProperty=configuration.getProperty(GATEWAY_LOG_DIRECTORY_PROPERTY);
  File logDir=(gatewayLogDirectoryProperty != null) ? new File(gatewayLogDirectoryProperty) : new File(homeDir,DEFAULT_LOG_DIRECTORY);
  if (!logDir.exists()) {
    logDir.mkdir();
  }
  if (!logDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_LOG_DIRECTORY_PROPERTY + ""String_Node_Str"" + logDir.getAbsolutePath());
  }
  configuration.setProperty(GATEWAY_LOG_DIRECTORY_PROPERTY,logDir.toString());
  File gatewayConfigFile;
  String gatewayConfigProperty=configuration.getProperty(GATEWAY_CONFIG_PROPERTY);
  try {
    URL configURL=new URL(gatewayConfigProperty);
    String path=configURL.getPath();
    ReadableByteChannel rbc=Channels.newChannel(configURL.openStream());
    final File configFile=new File(configDir,path.substring(path.lastIndexOf('/') + 1));
    try (FileOutputStream fos=new FileOutputStream(configFile)){
      fos.getChannel().transferFrom(rbc,0,Long.MAX_VALUE);
    }
     configuration.setProperty(Gateway.GATEWAY_CONFIG_PROPERTY,configFile.getPath());
    gatewayConfigProperty=configuration.getProperty(GATEWAY_CONFIG_PROPERTY);
  }
 catch (  MalformedURLException e1) {
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + gatewayConfigProperty,e);
  }
  if (gatewayConfigProperty != null) {
    gatewayConfigFile=new File(gatewayConfigProperty);
    if (!gatewayConfigFile.isFile() || !gatewayConfigFile.canRead()) {
      throw new IllegalArgumentException(GATEWAY_CONFIG_PROPERTY + ""String_Node_Str"" + gatewayConfigFile.getAbsolutePath());
    }
  }
 else {
    gatewayConfigFile=new File(configDir,DEFAULT_GATEWAY_CONFIG_XML);
    if (!gatewayConfigFile.exists()) {
      gatewayConfigFile=new File(configDir,DEFAULT_GATEWAY_CONFIG_MINIMAL_XML);
    }
    if (!gatewayConfigFile.isFile() || !gatewayConfigFile.canRead()) {
      throw new IllegalArgumentException(GATEWAY_CONFIG_PROPERTY + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  String gatewayWebDirectoryProperty=configuration.getProperty(GATEWAY_WEB_DIRECTORY_PROPERTY);
  File webRootDir=(gatewayWebDirectoryProperty != null) ? new File(gatewayWebDirectoryProperty) : new File(homeDir,DEFAULT_WEB_DIRECTORY);
  if (!webRootDir.exists()) {
    webRootDir.mkdir();
  }
  if (!webRootDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_WEB_DIRECTORY_PROPERTY + ""String_Node_Str"" + webRootDir.getAbsolutePath());
  }
  String overrideLogging=configuration.getProperty(OVERRIDE_LOGGING);
  if ((overrideLogging == null) || !Boolean.parseBoolean(overrideLogging)) {
    configureLogging(configDir,configuration);
  }
  duplicateJarFinder.findDuplicateJars();
  displayVersionInfo();
  LOGGER.info(""String_Node_Str"" + gatewayConfigFile.getCanonicalPath());
  GatewayObserver gatewayObserver=GatewayObserver.newInstance();
  GatewayConfigParser parser=new GatewayConfigParser(configuration);
  GatewayConfigDocument config=parser.parse(gatewayConfigFile);
  GatewayContextResolver resolver=new GatewayContextResolver(configDir,webRootDir,tempDir,jmxMBeanServer);
  gatewayObserver.initingGateway(configuration,resolver.getInjectables());
  GatewayContext context=resolver.resolve(config,configuration);
  gateway=new Launcher(gatewayObserver);
  try {
    gateway.init(context);
  }
 catch (  Exception e) {
    LOGGER.error(String.format(""String_Node_Str"",e));
    throw e;
  }
}","/** 
 * <p> Launch the in-process Gateway. </p>
 * @throws Exception
 */
@Override public void launch() throws Exception {
  if (baseGateway != null) {
    baseGateway.launch();
  }
  if (gateway != null) {
    throw new GatewayAlreadyRunningException(""String_Node_Str"");
  }
  Properties configuration=getProperties();
  if (configuration == null) {
    throw new Exception(""String_Node_Str"");
  }
  if (!supportedJavaVersion(1,8,""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String gatewayHomeProperty=configuration.getProperty(GATEWAY_HOME_PROPERTY);
  if (gatewayHomeProperty == null) {
    throw new IllegalArgumentException(GATEWAY_HOME_PROPERTY + ""String_Node_Str"");
  }
  File homeDir=new File(gatewayHomeProperty);
  if (!homeDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_HOME_PROPERTY + ""String_Node_Str"" + homeDir.getAbsolutePath());
  }
  String gatewayConfigDirectoryProperty=configuration.getProperty(GATEWAY_CONFIG_DIRECTORY_PROPERTY);
  File configDir=(gatewayConfigDirectoryProperty != null) ? new File(gatewayConfigDirectoryProperty) : new File(homeDir,DEFAULT_CONFIG_DIRECTORY);
  if (!configDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_CONFIG_DIRECTORY_PROPERTY + ""String_Node_Str"" + configDir.getAbsolutePath());
  }
  configuration.setProperty(GATEWAY_CONFIG_DIRECTORY_PROPERTY,configDir.toString());
  String gatewayTempDirectoryProperty=configuration.getProperty(GATEWAY_TEMP_DIRECTORY_PROPERTY);
  File tempDir=(gatewayTempDirectoryProperty != null) ? new File(gatewayTempDirectoryProperty) : new File(homeDir,DEFAULT_TEMP_DIRECTORY);
  if (!tempDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_TEMP_DIRECTORY_PROPERTY + ""String_Node_Str"" + tempDir.getAbsolutePath());
  }
  String gatewayLogDirectoryProperty=configuration.getProperty(GATEWAY_LOG_DIRECTORY_PROPERTY);
  File logDir=(gatewayLogDirectoryProperty != null) ? new File(gatewayLogDirectoryProperty) : new File(homeDir,DEFAULT_LOG_DIRECTORY);
  if (!logDir.exists()) {
    logDir.mkdir();
  }
  if (!logDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_LOG_DIRECTORY_PROPERTY + ""String_Node_Str"" + logDir.getAbsolutePath());
  }
  configuration.setProperty(GATEWAY_LOG_DIRECTORY_PROPERTY,logDir.toString());
  File gatewayConfigFile;
  String gatewayConfigProperty=configuration.getProperty(GATEWAY_CONFIG_PROPERTY);
  try {
    URL configURL=new URL(gatewayConfigProperty);
    String path=configURL.getPath();
    ReadableByteChannel rbc=Channels.newChannel(configURL.openStream());
    final File configFile=new File(configDir,path.substring(path.lastIndexOf('/') + 1));
    try (FileOutputStream fos=new FileOutputStream(configFile)){
      fos.getChannel().transferFrom(rbc,0,Long.MAX_VALUE);
    }
     configuration.setProperty(Gateway.GATEWAY_CONFIG_PROPERTY,configFile.getPath());
    gatewayConfigProperty=configuration.getProperty(GATEWAY_CONFIG_PROPERTY);
  }
 catch (  MalformedURLException e1) {
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + gatewayConfigProperty,e);
  }
  if (gatewayConfigProperty != null) {
    gatewayConfigFile=new File(gatewayConfigProperty);
    if (!gatewayConfigFile.isFile() || !gatewayConfigFile.canRead()) {
      throw new IllegalArgumentException(GATEWAY_CONFIG_PROPERTY + ""String_Node_Str"" + gatewayConfigFile.getAbsolutePath());
    }
  }
 else {
    gatewayConfigFile=new File(configDir,DEFAULT_GATEWAY_CONFIG_XML);
    if (!gatewayConfigFile.exists()) {
      gatewayConfigFile=new File(configDir,DEFAULT_GATEWAY_CONFIG_MINIMAL_XML);
    }
    if (!gatewayConfigFile.isFile() || !gatewayConfigFile.canRead()) {
      throw new IllegalArgumentException(GATEWAY_CONFIG_PROPERTY + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  String gatewayWebDirectoryProperty=configuration.getProperty(GATEWAY_WEB_DIRECTORY_PROPERTY);
  File webRootDir=(gatewayWebDirectoryProperty != null) ? new File(gatewayWebDirectoryProperty) : new File(homeDir,DEFAULT_WEB_DIRECTORY);
  if (!webRootDir.exists()) {
    webRootDir.mkdir();
  }
  if (!webRootDir.isDirectory()) {
    throw new IllegalArgumentException(GATEWAY_WEB_DIRECTORY_PROPERTY + ""String_Node_Str"" + webRootDir.getAbsolutePath());
  }
  String overrideLogging=configuration.getProperty(OVERRIDE_LOGGING);
  if ((overrideLogging == null) || !Boolean.parseBoolean(overrideLogging)) {
    configureLogging(configDir,configuration);
  }
  duplicateJarFinder.findDuplicateJars();
  displayVersionInfo();
  LOGGER.info(""String_Node_Str"" + gatewayConfigFile.getCanonicalPath());
  GatewayObserver gatewayObserver=GatewayObserver.newInstance();
  GatewayConfigParser parser=new GatewayConfigParser(configuration);
  GatewayConfigDocument config=parser.parse(gatewayConfigFile);
  GatewayContextResolver resolver=new GatewayContextResolver(configDir,webRootDir,tempDir,jmxMBeanServer);
  gatewayObserver.initingGateway(configuration,resolver.getInjectables());
  GatewayContext context=resolver.resolve(config,configuration);
  gateway=new Launcher(gatewayObserver);
  try {
    gateway.init(context);
  }
 catch (  Exception e) {
    LOGGER.error(String.format(""String_Node_Str"",e));
    throw e;
  }
}"
96443,"private void appendScriptedOptions(File helpScript,Options all_opt){
  try {
    if (helpScript != null && helpScript.exists()) {
      InputStreamReader input_opt;
      input_opt=new InputStreamReader(new FileInputStream(helpScript));
      CSVReader script_options=new CSVReader(input_opt);
      String[] nextLine;
      while ((nextLine=script_options.readNext()) != null) {
        Option o=new Option(null,nextLine[0],Boolean.parseBoolean(nextLine[1]),nextLine[2]);
        all_opt.addOption(o);
      }
      script_options.close();
    }
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}","private void appendScriptedOptions(File helpScript,Options all_opt){
  try {
    if (helpScript != null && helpScript.exists()) {
      InputStreamReader input_opt;
      input_opt=new InputStreamReader(new FileInputStream(helpScript));
      CSVReader script_options=new CSVReader(input_opt);
      String[] nextLine;
      while ((nextLine=script_options.readNext()) != null) {
        if (nextLine.length >= 3) {
          Option o=new Option(null,nextLine[0],Boolean.parseBoolean(nextLine[1]),nextLine[2]);
          all_opt.addOption(o);
        }
      }
      script_options.close();
    }
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}"
96444,"private void writeArgsFile(String pathToArgsFile) throws IOException {
  FileWriter fw=new FileWriter(new File(pathToArgsFile));
  fw.write(""String_Node_Str"");
  fw.flush();
  fw.close();
}","private void writeArgsFile(String pathToArgsFile) throws IOException {
  FileWriter fw=new FileWriter(new File(pathToArgsFile));
  fw.write(""String_Node_Str"");
  fw.write(""String_Node_Str"");
  fw.write(""String_Node_Str"");
  fw.flush();
  fw.close();
}"
96445,"@Override public void doSessionClosed(final SessionManagementBean sessionBean) throws Exception {
  if (sessionBean != null) {
    sessionBean.doSessionClosed();
  }
}","@Override public void doSessionClosed(final SessionManagementBean sessionBean) throws Exception {
  if (sessionBean != null) {
    sessionBean.doSessionClosed();
    sessionBean.doSessionClosedListeners();
  }
}"
96446,"@Specification(""String_Node_Str"") @ScriptProperty(""String_Node_Str"") @Test public void getActiveSessionCountFromJmx() throws Exception {
  k3po.finish();
  Thread.sleep(1000);
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  ObjectName summaryBeansObjectNamePattern=new ObjectName(""String_Node_Str"" + ECHO_WSN_SERVICE + ""String_Node_Str"");
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(summaryBeansObjectNamePattern,null);
  assertEquals(1,mbeanNames.size());
  ObjectName summaryBean=mbeanNames.iterator().next();
  assertEquals(Long.valueOf(1),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  assertEquals(Long.valueOf(0),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
}","@Specification(""String_Node_Str"") @ScriptProperty(""String_Node_Str"") @Test public void getActiveSessionCountFromJmx() throws Exception {
  k3po.finish();
  Thread.sleep(1000);
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  ObjectName summaryBeansObjectNamePattern=new ObjectName(""String_Node_Str"" + ECHO_WSN_SERVICE + ""String_Node_Str"");
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(summaryBeansObjectNamePattern,null);
  assertEquals(1,mbeanNames.size());
  ObjectName summaryBean=mbeanNames.iterator().next();
  assertEquals(Long.valueOf(1),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  assertEquals(Long.valueOf(0),(Long)mbeanServerConn.getAttribute(summaryBean,""String_Node_Str""));
  mbeanNames=mbeanServerConn.queryNames(ObjectName.getInstance(""String_Node_Str""),null);
  for (  ObjectName name : mbeanNames) {
    fail(""String_Node_Str"" + name);
  }
}"
96447,"private void appendScriptedOptions(File helpScript,Options all_opt){
  try {
    if (helpScript != null && helpScript.exists()) {
      InputStreamReader input_opt;
      input_opt=new InputStreamReader(new FileInputStream(helpScript));
      CSVReader script_options=new CSVReader(input_opt);
      String[] nextLine;
      while ((nextLine=script_options.readNext()) != null) {
        Option o=new Option(null,nextLine[0],Boolean.parseBoolean(nextLine[1]),nextLine[2]);
        all_opt.addOption(o);
      }
      script_options.close();
    }
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}","private void appendScriptedOptions(File helpScript,Options all_opt){
  try {
    if (helpScript != null && helpScript.exists()) {
      InputStreamReader input_opt;
      input_opt=new InputStreamReader(new FileInputStream(helpScript));
      CSVReader script_options=new CSVReader(input_opt);
      String[] nextLine;
      while ((nextLine=script_options.readNext()) != null) {
        if (nextLine.length >= 3) {
          Option o=new Option(null,nextLine[0],Boolean.parseBoolean(nextLine[1]),nextLine[2]);
          all_opt.addOption(o);
        }
      }
      script_options.close();
    }
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}"
96448,"@Override protected void doMessageReceived(final IoSessionEx session,Object message) throws Exception {
  DefaultHttpSession httpSession=HTTP_SESSION_KEY.get(session);
  HttpMessage httpMessage=(HttpMessage)message;
switch (httpMessage.getKind()) {
case RESPONSE:
    HttpResponseMessage httpResponse=(HttpResponseMessage)httpMessage;
  HttpStatus httpStatus=httpResponse.getStatus();
httpSession.setStatus(httpStatus);
httpSession.setReason(httpResponse.getReason());
httpSession.setVersion(httpResponse.getVersion());
httpSession.setReadHeaders(httpResponse.getHeaders());
httpSession.getResponseFuture().setReady();
switch (httpStatus) {
case INFO_SWITCHING_PROTOCOLS:
httpSession.close(false);
break;
case SUCCESS_OK:
switch (httpSession.getMethod()) {
case HEAD:
httpSession.close(false);
break;
default :
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
}
break;
case REDIRECT_MOVED_PERMANENTLY:
case REDIRECT_FOUND:
if (shouldFollowRedirects(httpSession)) {
if (httpResponse.isComplete()) {
followRedirect(httpSession,session);
}
break;
}
case SUCCESS_NO_CONTENT:
case REDIRECT_NOT_MODIFIED:
httpSession.close(false);
break;
case CLIENT_UNAUTHORIZED:
String authenticate=getAuthentication(httpSession,(HttpResponseMessage)httpMessage,SERVER);
if (authenticate != null) {
authenticate(httpSession,session,authenticate,SERVER);
}
 else {
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
}
break;
default :
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
break;
}
break;
case CONTENT:
HttpContentMessage httpContent=(HttpContentMessage)httpMessage;
switch (httpSession.getStatus()) {
case REDIRECT_MOVED_PERMANENTLY:
case REDIRECT_FOUND:
if (shouldFollowRedirects(httpSession) && httpContent.isComplete()) {
followRedirect(httpSession,session);
}
break;
default :
fireContentReceived(httpSession,httpContent);
break;
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + httpMessage.getKind());
}
}","@Override protected void doMessageReceived(final IoSessionEx session,Object message) throws Exception {
  DefaultHttpSession httpSession=HTTP_SESSION_KEY.get(session);
  HttpMessage httpMessage=(HttpMessage)message;
switch (httpMessage.getKind()) {
case RESPONSE:
    HttpResponseMessage httpResponse=(HttpResponseMessage)httpMessage;
  HttpStatus httpStatus=httpResponse.getStatus();
httpSession.setStatus(httpStatus);
httpSession.setReason(httpResponse.getReason());
httpSession.setVersion(httpResponse.getVersion());
httpSession.setReadHeaders(httpResponse.getHeaders());
httpSession.getResponseFuture().setReady();
switch (httpStatus) {
case INFO_SWITCHING_PROTOCOLS:
httpSession.close(false);
break;
case SUCCESS_OK:
switch (httpSession.getMethod()) {
case HEAD:
httpSession.close(false);
break;
default :
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
}
break;
case REDIRECT_MOVED_PERMANENTLY:
case REDIRECT_FOUND:
case REDIRECT_MULTIPLE_CHOICES:
case REDIRECT_SEE_OTHER:
case REDIRECT_NOT_MODIFIED:
case REDIRECT_USE_PROXY:
case REDIRECT_TEMPORARY:
doRedirectReceived(session,httpSession,httpResponse);
break;
case SUCCESS_NO_CONTENT:
httpSession.close(false);
break;
case CLIENT_UNAUTHORIZED:
String authenticate=getAuthentication(httpSession,(HttpResponseMessage)httpMessage,SERVER);
if (authenticate != null) {
authenticate(httpSession,session,authenticate,SERVER);
}
 else {
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
}
break;
default :
HttpContentMessage httpContent=httpResponse.getContent();
if (httpContent == null) {
IoBufferAllocatorEx<? extends HttpBuffer> allocator=httpSession.getBufferAllocator();
httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),true);
}
fireContentReceived(httpSession,httpContent);
break;
}
break;
case CONTENT:
HttpContentMessage httpContent=(HttpContentMessage)httpMessage;
switch (httpSession.getStatus()) {
case REDIRECT_MOVED_PERMANENTLY:
case REDIRECT_FOUND:
case REDIRECT_MULTIPLE_CHOICES:
case REDIRECT_SEE_OTHER:
case REDIRECT_NOT_MODIFIED:
case REDIRECT_USE_PROXY:
case REDIRECT_TEMPORARY:
doRedirectReceived(session,httpSession,httpContent);
break;
default :
fireContentReceived(httpSession,httpContent);
break;
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + httpMessage.getKind());
}
}"
96449,"@Specification({""String_Node_Str""}) @Test public void shouldNotThrowNullPointerExceptionWhenCloseSessionsIsExecuted() throws Exception {
  k3po.finish();
  ObjectName echoServiceMbeanName=null;
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(null,null);
  String MBeanPrefix=""String_Node_Str"" + ECHO_WS_SERVICE + ""String_Node_Str"";
  for (  ObjectName name : mbeanNames) {
    if (name.toString().indexOf(MBeanPrefix) > 0) {
      echoServiceMbeanName=name;
      break;
    }
  }
  long startTime=currentTimeMillis();
  Long numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  while (numberOfCurrentSessions < 1 && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  }
  assertEquals(""String_Node_Str"",(Long)1L,numberOfCurrentSessions);
  ObjectName targetService=new ObjectName(echoServiceMbeanName.toString());
  Object[] params={""String_Node_Str"",""String_Node_Str""};
  String[] signature={String.class.getName(),String.class.getName()};
  mbeanServerConn.invoke(targetService,""String_Node_Str"",params,signature);
  startTime=currentTimeMillis();
  numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  while (numberOfCurrentSessions > 1 && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  }
  assertEquals(""String_Node_Str"",(Long)0L,numberOfCurrentSessions);
  MemoryAppender.assertLogMessages(null,Arrays.asList(""String_Node_Str""),null,Arrays.asList(NullPointerException.class),null,false);
}","@Specification({""String_Node_Str""}) @Test public void shouldNotThrowNullPointerExceptionWhenCloseSessionsIsExecuted() throws Exception {
  k3po.finish();
  ObjectName echoServiceMbeanName=null;
  MBeanServerConnection mbeanServerConn=jmxConnection.getConnection();
  Set<ObjectName> mbeanNames=mbeanServerConn.queryNames(null,null);
  String MBeanPrefix=""String_Node_Str"" + ECHO_WS_SERVICE + ""String_Node_Str"";
  for (  ObjectName name : mbeanNames) {
    if (name.toString().indexOf(MBeanPrefix) > 0) {
      echoServiceMbeanName=name;
      break;
    }
  }
  long startTime=currentTimeMillis();
  Long numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  while (numberOfCurrentSessions < 1 && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  }
  assertEquals(""String_Node_Str"",(Long)1L,numberOfCurrentSessions);
  ObjectName targetService=new ObjectName(echoServiceMbeanName.toString());
  Object[] params={""String_Node_Str"",""String_Node_Str""};
  String[] signature={String.class.getName(),String.class.getName()};
  mbeanServerConn.invoke(targetService,""String_Node_Str"",params,signature);
  startTime=currentTimeMillis();
  numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  while (numberOfCurrentSessions > 0 && (currentTimeMillis() - startTime) < 10000) {
    Thread.sleep(500);
    numberOfCurrentSessions=(Long)mbeanServerConn.getAttribute(echoServiceMbeanName,""String_Node_Str"");
  }
  assertEquals(""String_Node_Str"",(Long)0L,numberOfCurrentSessions);
  MemoryAppender.assertLogMessages(null,Arrays.asList(""String_Node_Str""),null,Arrays.asList(NullPointerException.class),null,false);
}"
96450,"@Test public void testDefaultConnectOptions() throws Exception {
  final String sslCipherValue=""String_Node_Str"";
  GatewayConfiguration gc=new GatewayConfigurationBuilder().serviceDefaults().connectOption(""String_Node_Str"",sslCipherValue).connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").done().service().type(""String_Node_Str"").name(""String_Node_Str"").accept(""String_Node_Str"").done().done();
  Gateway gateway=new Gateway();
  GatewayContext gatewayContext=gateway.createGatewayContext(gc);
  ServiceContext service=(ServiceContext)gatewayContext.getServices().toArray()[0];
  ConnectOptionsContext connectOptionsContext=service.getConnectOptionsContext();
  Map<String,Object> connectOptionsMap=connectOptionsContext.asOptionsMap();
  Assert.assertNotNull(((String[])connectOptionsMap.get(""String_Node_Str""))[0]);
  String[] sslProtocols=(String[])connectOptionsMap.get(""String_Node_Str"");
  Assert.assertTrue(""String_Node_Str"".equals(sslProtocols[0]));
  Assert.assertTrue(""String_Node_Str"".equals(connectOptionsMap.get(""String_Node_Str"")));
  final String trim=connectOptionsMap.get(""String_Node_Str"").toString().trim();
  Assert.assertTrue(""String_Node_Str"".equals(trim));
  Assert.assertFalse((Boolean)connectOptionsMap.get(""String_Node_Str""));
  Assert.assertEquals(5,connectOptionsMap.get(""String_Node_Str"" + HTTP_KEEP_ALIVE_TIMEOUT_KEY));
  Assert.assertFalse((Boolean)connectOptionsMap.get(""String_Node_Str"" + HTTP_KEEP_ALIVE));
  Assert.assertEquals(7,connectOptionsMap.get(""String_Node_Str""));
}","@Test public void testDefaultConnectOptions() throws Exception {
  final String sslCipherValue=""String_Node_Str"";
  GatewayConfiguration gc=new GatewayConfigurationBuilder().serviceDefaults().connectOption(""String_Node_Str"",sslCipherValue).connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").connectOption(""String_Node_Str"",""String_Node_Str"").done().service().type(""String_Node_Str"").name(""String_Node_Str"").accept(""String_Node_Str"").done().done();
  Gateway gateway=new Gateway();
  GatewayContext gatewayContext=gateway.createGatewayContext(gc);
  ServiceContext service=(ServiceContext)gatewayContext.getServices().toArray()[0];
  ConnectOptionsContext connectOptionsContext=service.getConnectOptionsContext();
  Map<String,Object> connectOptionsMap=connectOptionsContext.asOptionsMap();
  Assert.assertNotNull(((String[])connectOptionsMap.get(""String_Node_Str""))[0]);
  String[] sslProtocols=(String[])connectOptionsMap.get(""String_Node_Str"");
  Assert.assertTrue(""String_Node_Str"".equals(sslProtocols[0]));
  Assert.assertTrue(""String_Node_Str"".equals(connectOptionsMap.get(""String_Node_Str"")));
  Assert.assertEquals(""String_Node_Str"",connectOptionsMap.get(""String_Node_Str"").toString().trim());
  Assert.assertFalse((Boolean)connectOptionsMap.get(""String_Node_Str""));
  Assert.assertEquals(5,connectOptionsMap.get(""String_Node_Str"" + HTTP_KEEP_ALIVE_TIMEOUT_KEY));
  Assert.assertFalse((Boolean)connectOptionsMap.get(""String_Node_Str"" + HTTP_KEEP_ALIVE));
  Assert.assertEquals(7,connectOptionsMap.get(""String_Node_Str""));
}"
96451,"@Override public void doSessionClosed(ManagementContext managementContext,ServiceManagementBean serviceBean,long sessionId,ManagementSessionType managementSessionType) throws Exception {
  SessionManagementBean sessionBean=serviceBean.removeSessionManagementBean(sessionId);
  if (sessionBean != null) {
    managementContext.removeSessionManagementBean(sessionBean);
    managementContext.getManagementSessionStrategy().doSessionClosed(sessionBean);
  }
  super.doSessionClosed(managementContext,serviceBean,sessionId,managementSessionType);
}","@Override public void doSessionClosed(ManagementContext managementContext,ServiceManagementBean serviceBean,long sessionId,ManagementSessionType managementSessionType) throws Exception {
  SessionManagementBean sessionBean=serviceBean.removeSessionManagementBean(sessionId);
  if (sessionBean != null) {
    managementContext.getManagementSessionStrategy().doSessionClosed(sessionBean);
  }
  super.doSessionClosed(managementContext,serviceBean,sessionId,managementSessionType);
}"
96452,"@Override public void doSessionClosed(SessionManagementBean sessionBean) throws Exception {
  SessionMXBean sessionMxBean=managementServiceHandler.getSessionMXBean(sessionBean.getId());
  Map<String,String> userPrincipals=sessionBean.getUserPrincipalMap();
  if (userPrincipals != null) {
    Map<String,Map<String,String>> userData=new HashMap<>();
    userData.put(sessionMxBean.getObjectName().toString(),userPrincipals);
    Notification n2=new Notification(SESSION_CLOSED,sessionMxBean,managementServiceHandler.nextNotificationSequenceNumber(),System.currentTimeMillis(),""String_Node_Str"");
    n2.setUserData(userData);
    sendNotification(n2);
  }
}","@Override public void doSessionClosed(SessionManagementBean sessionBean) throws Exception {
  SessionMXBean sessionMxBean=managementServiceHandler.removeSessionMXBean(sessionBean);
  Map<String,String> userPrincipals=sessionBean.getUserPrincipalMap();
  if (userPrincipals != null) {
    Map<String,Map<String,String>> userData=new HashMap<>();
    userData.put(sessionMxBean.getObjectName().toString(),userPrincipals);
    Notification n2=new Notification(SESSION_CLOSED,sessionMxBean,managementServiceHandler.nextNotificationSequenceNumber(),System.currentTimeMillis(),""String_Node_Str"");
    n2.setUserData(userData);
    sendNotification(n2);
  }
}"
96453,"/** 
 * Parses a GatewayVersion from a String
 * @param version
 * @return
 * @throws Exception
 */
public static GatewayVersion parseGatewayVersion(String version) throws Exception {
  if (""String_Node_Str"".equals(version)) {
    return new GatewayVersion(0,0,0);
  }
 else {
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(version);
    if (matcher.matches()) {
      int major=Integer.parseInt(matcher.group(""String_Node_Str""));
      int minor=Integer.parseInt(matcher.group(""String_Node_Str""));
      int patch=Integer.parseInt(matcher.group(""String_Node_Str""));
      return new GatewayVersion(major,minor,patch);
    }
 else {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",regex));
    }
  }
}","/** 
 * Parses a GatewayVersion from a String
 * @param version
 * @return
 * @throws Exception
 */
public static GatewayVersion parseGatewayVersion(String version) throws Exception {
  if (""String_Node_Str"".equals(version)) {
    return new GatewayVersion(0,0,0);
  }
 else {
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(version);
    if (matcher.matches()) {
      int major=Integer.parseInt(matcher.group(""String_Node_Str""));
      int minor=Integer.parseInt(matcher.group(""String_Node_Str""));
      int patch=Integer.parseInt(matcher.group(""String_Node_Str""));
      String rc=matcher.group(""String_Node_Str"");
      return new GatewayVersion(major,minor,patch,rc);
    }
 else {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",regex));
    }
  }
}"
96454,"@Override public String toString(){
  return format(""String_Node_Str"",major,minor,patch);
}","@Override public String toString(){
  if (rc.equals(RELEASE_GA)) {
    return format(""String_Node_Str"",major,minor,patch);
  }
 else {
    return format(""String_Node_Str"",major,minor,patch,rc);
  }
}"
96455,"public GatewayVersion(int major,int minor,int patch){
  this.major=major;
  this.minor=minor;
  this.patch=patch;
}","public GatewayVersion(int major,int minor,int patch){
  this(major,minor,patch,RELEASE_GA);
}"
96456,"@Override public int compareTo(GatewayVersion o){
  int result;
  if (this.major != o.major) {
    result=(this.major > o.major ? 1 : -1);
  }
 else   if (this.minor != o.minor) {
    result=(this.minor > o.minor ? 1 : -1);
  }
 else   if (this.patch != o.patch) {
    result=(this.patch > o.patch ? 1 : -1);
  }
 else {
    result=0;
  }
  return result;
}","@Override public int compareTo(GatewayVersion o){
  int result;
  if (this.major != o.major) {
    result=this.major > o.major ? 1 : -1;
  }
 else   if (this.minor != o.minor) {
    result=this.minor > o.minor ? 1 : -1;
  }
 else   if (this.patch != o.patch) {
    result=this.patch > o.patch ? 1 : -1;
  }
 else   if (!this.rc.equals(o.rc)) {
    result=RELEASE_GA.equals(this.rc) ? 1 : (RELEASE_GA.equals(o.rc) ? -1 : this.rc.compareTo(o.rc));
  }
 else {
    result=0;
  }
  return result;
}"
96457,"@Before public void init() throws Exception {
  middle=new GatewayVersion(3,1,3);
  high1=parseGatewayVersion(""String_Node_Str"");
  high2=parseGatewayVersion(""String_Node_Str"");
  high3=parseGatewayVersion(""String_Node_Str"");
  low1=parseGatewayVersion(""String_Node_Str"");
  low2=parseGatewayVersion(""String_Node_Str"");
  low3=parseGatewayVersion(""String_Node_Str"");
  equal=parseGatewayVersion(""String_Node_Str"");
}","@Before public void init() throws Exception {
  middle=new GatewayVersion(3,1,3);
  high1=parseGatewayVersion(""String_Node_Str"");
  high2=parseGatewayVersion(""String_Node_Str"");
  high3=parseGatewayVersion(""String_Node_Str"");
  low1=parseGatewayVersion(""String_Node_Str"");
  low2=parseGatewayVersion(""String_Node_Str"");
  low3=parseGatewayVersion(""String_Node_Str"");
  equal=parseGatewayVersion(""String_Node_Str"");
  rc1=new GatewayVersion(3,1,3,""String_Node_Str"");
  rc2=parseGatewayVersion(""String_Node_Str"");
  equalrc1=parseGatewayVersion(""String_Node_Str"");
}"
96458,"@Test public void testVersioncompareTo(){
  assertTrue(middle.compareTo(high1) < 0);
  assertTrue(middle.compareTo(high2) < 0);
  assertTrue(middle.compareTo(high3) < 0);
  assertTrue(middle.compareTo(low1) > 0);
  assertTrue(middle.compareTo(low2) > 0);
  assertTrue(middle.compareTo(low3) > 0);
  assertTrue(middle.compareTo(equal) == 0);
  assertTrue(middle.compareTo(middle) == 0);
}","@Test public void testVersioncompareTo(){
  assertTrue(middle.compareTo(high1) < 0);
  assertTrue(middle.compareTo(high2) < 0);
  assertTrue(middle.compareTo(high3) < 0);
  assertTrue(middle.compareTo(low1) > 0);
  assertTrue(middle.compareTo(low2) > 0);
  assertTrue(middle.compareTo(low3) > 0);
  assertTrue(middle.compareTo(equal) == 0);
  assertTrue(middle.compareTo(middle) == 0);
  assertTrue(rc1.compareTo(middle) < 0);
  assertTrue(rc2.compareTo(middle) < 0);
  assertTrue(rc2.compareTo(rc1) > 0);
  assertTrue(rc2.compareTo(low3) > 0);
}"
96459,"@Test public void testEqual(){
  assertFalse(middle.equals(high1));
  assertFalse(middle.equals(high2));
  assertFalse(middle.equals(high3));
  assertFalse(middle.equals(low1));
  assertFalse(middle.equals(low2));
  assertFalse(middle.equals(low3));
  assertFalse(middle.equals(null));
  assertTrue(middle.equals(middle));
  assertTrue(middle.equals(equal));
}","@Test public void testEqual(){
  assertFalse(middle.equals(high1));
  assertFalse(middle.equals(high2));
  assertFalse(middle.equals(high3));
  assertFalse(middle.equals(low1));
  assertFalse(middle.equals(low2));
  assertFalse(middle.equals(low3));
  assertFalse(middle.equals(null));
  assertTrue(middle.equals(middle));
  assertTrue(middle.equals(equal));
  assertTrue(rc1.equals(equalrc1));
}"
96460,"@Test public void testListenerNotNotifiedOnLowerVersion(){
  service.addListener(listener);
  GatewayVersion latestVersion=new GatewayVersion(-1,0,12);
  service.setLatestGatewayVersion(latestVersion);
  assertTrue(""String_Node_Str"",listener.notifiedEvents.size() == 0);
}","@Test public void testListenerNotNotifiedOnLowerVersion(){
  service.addListener(listener);
  GatewayVersion latestVersion=new GatewayVersion(-1,0,12);
  service.setLatestGatewayVersion(latestVersion);
  assertTrue(""String_Node_Str"",listener.notifiedEvents.size() == 0);
  latestVersion=new GatewayVersion(5,0,0,""String_Node_Str"");
  service.setLatestGatewayVersion(latestVersion);
  assertTrue(""String_Node_Str"",listener.notifiedEvents.size() == 0);
}"
96461,"@Override protected void setOptions(WsResourceAddress address,ResourceOptions options,Object qualifier){
  options.setOption(SUPPORTED_PROTOCOLS,removeStringArrayElement(options.getOption(SUPPORTED_PROTOCOLS),""String_Node_Str""));
  options.setOption(EXTENSIONS,removeStringListElement(options.getOption(EXTENSIONS),""String_Node_Str""));
  super.setOptions(address,options,qualifier);
}","@Override protected void setOptions(WsResourceAddress address,ResourceOptions options,Object qualifier){
  options.setOption(SUPPORTED_PROTOCOLS,removeStringArrayElement(options.getOption(SUPPORTED_PROTOCOLS),""String_Node_Str""));
  super.setOptions(address,options,qualifier);
}"
96462,"@Before public void before(){
  addressFactorySpi=new WseResourceAddressFactorySpi();
  addressURI=""String_Node_Str"";
  options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",FALSE);
  options.put(""String_Node_Str"",TRUE);
  options.put(""String_Node_Str"",asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  options.put(""String_Node_Str"",1024);
  options.put(""String_Node_Str"",SECONDS.toMillis(5));
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",""String_Node_Str"");
}","@Before public void before(){
  addressFactorySpi=new WseResourceAddressFactorySpi();
  addressURI=""String_Node_Str"";
  options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",FALSE);
  options.put(""String_Node_Str"",TRUE);
  options.put(""String_Node_Str"",asList(""String_Node_Str"",""String_Node_Str""));
  options.put(""String_Node_Str"",1024);
  options.put(""String_Node_Str"",SECONDS.toMillis(5));
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",""String_Node_Str"");
}"
96463,"@Override protected void setOptions(WsResourceAddress address,ResourceOptions options,Object qualifier){
  options.setOption(SUPPORTED_PROTOCOLS,removeStringArrayElement(options.getOption(SUPPORTED_PROTOCOLS),""String_Node_Str""));
  super.setOptions(address,options,qualifier);
}","@Override protected void setOptions(WsResourceAddress address,ResourceOptions options,Object qualifier){
  options.setOption(SUPPORTED_PROTOCOLS,removeStringArrayElement(options.getOption(SUPPORTED_PROTOCOLS),""String_Node_Str""));
  options.setOption(EXTENSIONS,removeStringListElement(options.getOption(EXTENSIONS),""String_Node_Str""));
  super.setOptions(address,options,qualifier);
}"
96464,"@Before public void before(){
  addressFactorySpi=new WseResourceAddressFactorySpi();
  addressURI=""String_Node_Str"";
  options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",FALSE);
  options.put(""String_Node_Str"",TRUE);
  options.put(""String_Node_Str"",asList(""String_Node_Str"",""String_Node_Str""));
  options.put(""String_Node_Str"",1024);
  options.put(""String_Node_Str"",SECONDS.toMillis(5));
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",""String_Node_Str"");
}","@Before public void before(){
  addressFactorySpi=new WseResourceAddressFactorySpi();
  addressURI=""String_Node_Str"";
  options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",FALSE);
  options.put(""String_Node_Str"",TRUE);
  options.put(""String_Node_Str"",asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  options.put(""String_Node_Str"",1024);
  options.put(""String_Node_Str"",SECONDS.toMillis(5));
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  options.put(""String_Node_Str"",""String_Node_Str"");
}"
96465,"private void doUpgrade(final HttpConnectSession httpSession){
  String upgradeHeader=httpSession.getReadHeader(HttpHeaders.HEADER_UPGRADE);
  if (upgradeHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!upgradeHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",upgradeHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String key=httpSession.getWriteHeader(""String_Node_Str"");
  if (!WsUtils.acceptHash(key).equals(wsAcceptHeader)) {
    logger.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",key,wsAcceptHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String connectionHeader=httpSession.getReadHeader(HttpHeaders.HEADER_CONNECTION);
  if (connectionHeader == null || !connectionHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}","private void doUpgrade(final HttpConnectSession httpSession){
  String upgradeHeader=httpSession.getReadHeader(HttpHeaders.HEADER_UPGRADE);
  if (upgradeHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!upgradeHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",upgradeHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String httpConnectionHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (httpConnectionHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!httpConnectionHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",httpConnectionHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String key=httpSession.getWriteHeader(""String_Node_Str"");
  if (!WsUtils.acceptHash(key).equals(wsAcceptHeader)) {
    logger.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",key,wsAcceptHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String connectionHeader=httpSession.getReadHeader(HttpHeaders.HEADER_CONNECTION);
  if (connectionHeader == null || !connectionHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}"
96466,"@Test @Ignore(""String_Node_Str"" + ""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderConnectionNotUpgrade() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderConnectionNotUpgrade() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}"
96467,"private void doUpgrade(final HttpConnectSession httpSession){
  String upgradeHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (upgradeHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!upgradeHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",upgradeHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String key=httpSession.getWriteHeader(""String_Node_Str"");
  if (!WsUtils.acceptHash(key).equals(wsAcceptHeader)) {
    logger.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",key,wsAcceptHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}","private void doUpgrade(final HttpConnectSession httpSession){
  String upgradeHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (upgradeHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!upgradeHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",upgradeHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String connectionHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (connectionHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
 else   if (!connectionHeader.equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(format(""String_Node_Str"",connectionHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String key=httpSession.getWriteHeader(""String_Node_Str"");
  if (!WsUtils.acceptHash(key).equals(wsAcceptHeader)) {
    logger.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",key,wsAcceptHeader));
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}"
96468,"@Test @Ignore(""String_Node_Str"" + ""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderConnectionNotUpgrade() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderConnectionNotUpgrade() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}"
96469,"@Test @Ignore(""String_Node_Str"" + ""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderUpgradeNotWebSocket() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldFailConnectionWhenResponseHeaderUpgradeNotWebSocket() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      never(handler).sessionCreated(with(any(IoSessionEx.class)));
      never(handler).sessionOpened(with(any(IoSessionEx.class)));
      never(handler).exceptionCaught(with(any(IoSessionEx.class)),with(any(Throwable.class)));
      never(handler).sessionClosed(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertFalse(connectFuture.isConnected());
  k3po.finish();
}"
96470,"/** 
 * Given an incoming namespace, return the translator pipeline to translate a document with that namespace up to the 'current' format.
 * @param ns
 * @return
 */
@Override public GatewayConfigTranslator getTranslator(GatewayConfigNamespace ns){
  GatewayConfigTranslatorPipeline result=null;
  if (ns.equals(GatewayConfigNamespace.SEPTEMBER_2014)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator september2014Translator=new September2014ToNovember2015Translator();
    result.addTranslator(september2014Translator);
    GatewayConfigTranslator november2015Validator=new November2015Validator();
    result.addTranslator(november2015Validator);
  }
  if (ns.equals(GatewayConfigNamespace.CURRENT_NS)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator november2015Validator=new November2015Validator();
    result.addTranslator(november2015Validator);
  }
  return result;
}","/** 
 * Given an incoming namespace, return the translator pipeline to translate a document with that namespace up to the 'current' format.
 * @param ns
 * @return
 */
@Override public GatewayConfigTranslator getTranslator(GatewayConfigNamespace ns){
  GatewayConfigTranslatorPipeline result=null;
  if (ns.equals(GatewayConfigNamespace.SEPTEMBER_2014)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator september2014Translator=new September2014ToNovember2015Translator();
    result.addTranslator(september2014Translator);
    ns=GatewayConfigNamespace.NOVEMBER_2015;
  }
  if (ns.equals(GatewayConfigNamespace.NOVEMBER_2015)) {
    if (result == null) {
      result=new GatewayConfigTranslatorPipeline();
    }
    GatewayConfigTranslator november2015Validator=new November2015ToJune2016Translator();
    result.addTranslator(november2015Validator);
    ns=GatewayConfigNamespace.CURRENT_NS;
  }
  if (ns.equals(GatewayConfigNamespace.CURRENT_NS)) {
    if (result == null) {
      result=new GatewayConfigTranslatorPipeline();
    }
    GatewayConfigTranslator june2016Validator=new June2016Validator();
    result.addTranslator(june2016Validator);
  }
  return result;
}"
96471,"public September2014ToNovember2015Translator(){
  super();
  addTranslator(new AddDirectoryServiceLocationVisitor());
  addTranslator(new NamespaceVisitor(GatewayConfigNamespace.CURRENT_NS));
}","public September2014ToNovember2015Translator(){
  super();
  addTranslator(new AddDirectoryServiceLocationVisitor());
  addTranslator(new NamespaceVisitor(GatewayConfigNamespace.NOVEMBER_2015));
}"
96472,"@SuppressWarnings(""String_Node_Str"") private Collection<ServiceContext> resolveServices(ServiceRegistry serviceRegistry,File webDir,File tempDir,ServiceType[] serviceConfigs,SecurityContext securityContext,RealmsContext realmsContext,ClusterContext clusterContext,ServiceDefaultsType defaultServiceConfig,SchedulerProvider schedulerProvider,Map<String,Object> dependencyContexts,Properties configuration,TransportFactory transportFactory,ServiceFactory serviceFactory,ResourceAddressFactory resourceAddressFactory,ServiceDefaultsType serviceDefaults) throws Exception {
  Collection<ServiceContext> serviceContexts=new HashSet<>();
  Map<String,String> serviceDefaultsMimeMappings=new HashMap<>();
  serviceDefaultsMimeMappings.putAll(defaultMimeMappings);
  if (defaultServiceConfig != null) {
    for (    MimeMappingType mimeMappingType : defaultServiceConfig.getMimeMappingArray()) {
      serviceDefaultsMimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
  }
  List<Map<String,Map<String,CrossSiteConstraintContext>>> authorityToSetOfAcceptConstraintsByURI=new ArrayList<>();
  for (  ServiceType serviceConfig : serviceConfigs) {
    String serviceName=serviceConfig.getName();
    String serviceDescription=serviceConfig.getDescription();
    String[] acceptStrings=serviceConfig.getAcceptArray();
    String[] balanceStrings=serviceConfig.getBalanceArray();
    String[] connectStrings=serviceConfig.getConnectArray();
    String serviceType=serviceConfig.getType();
    Service serviceInstance;
    Class<? extends Service> serviceClass;
    if (serviceType.startsWith(SERVICE_TYPE_CLASS_PREFIX)) {
      String className=serviceType.substring(SERVICE_TYPE_CLASS_PREFIX.length());
      try {
        Class<?> clazz=Class.forName(className);
        if (!Service.class.isAssignableFrom(clazz)) {
          throw new IllegalArgumentException(""String_Node_Str"" + className);
        }
        serviceClass=(Class<? extends Service>)clazz;
        serviceInstance=serviceClass.newInstance();
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + className);
      }
    }
 else {
      serviceInstance=serviceFactory.newService(serviceType);
      if (serviceInstance == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + serviceType);
      }
    }
    ServicePropertiesType propertiesType=serviceConfig.getProperties();
    DefaultServiceProperties properties=parsePropertiesType(propertiesType);
    Collection<String> acceptURIs=resolveURIs(acceptStrings);
    Collection<String> balanceURIs=resolveURIs(balanceStrings);
    Collection<String> connectURIs=resolveURIs(connectStrings);
    String acceptProperty=properties.get(""String_Node_Str"");
    if (acceptProperty != null) {
      acceptProperty=acceptProperty.trim();
      acceptProperty=resolveURI(getCanonicalURI(acceptProperty,false));
      properties.put(""String_Node_Str"",acceptProperty);
    }
    String connectProperty=properties.get(""String_Node_Str"");
    if (connectProperty != null) {
      connectProperty=connectProperty.trim();
      properties.remove(""String_Node_Str"");
      connectURIs.add(resolveURI(getCanonicalURI(connectProperty,true)));
    }
    Collection<String> requireRolesCollection=new LinkedList<>();
    for (    AuthorizationConstraintType authConstraint : serviceConfig.getAuthorizationConstraintArray()) {
      Collections.addAll(requireRolesCollection,authConstraint.getRequireRoleArray());
    }
    String[] requireRoles=requireRolesCollection.toArray(new String[requireRolesCollection.size()]);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.putAll(serviceDefaultsMimeMappings);
    for (    MimeMappingType mimeMappingType : serviceConfig.getMimeMappingArray()) {
      mimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
    Map<String,Map<String,CrossSiteConstraintContext>> acceptConstraintsByURI=new HashMap<>();
    for (    String acceptURI : acceptURIs) {
      int wildcardOriginCount=0;
      CrossSiteConstraintType[] crossSiteConstraints=serviceConfig.getCrossSiteConstraintArray();
      for (      CrossSiteConstraintType crossSiteConstraint : crossSiteConstraints) {
        String allowOrigin=(String)crossSiteConstraint.getAllowOrigin();
        String allowMethods=crossSiteConstraint.getAllowMethods();
        String allowHeaders=crossSiteConstraint.getAllowHeaders();
        BigInteger maximumAgeBigInt=crossSiteConstraint.getMaximumAge();
        Integer maximumAge=(maximumAgeBigInt == null) ? null : maximumAgeBigInt.intValue();
        if (allowOrigin == null) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        if (""String_Node_Str"".equals(allowOrigin)) {
          wildcardOriginCount++;
        }
 else {
          String allowOriginURI=getCanonicalURI(allowOrigin,false);
          allowOrigin=allowOriginURI;
          String allowOriginScheme=getScheme(allowOriginURI);
          if (!""String_Node_Str"".equals(allowOriginScheme) && !""String_Node_Str"".equals(allowOriginScheme)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPath(allowOriginURI) != null && getQuery(allowOriginURI) != null || getFragment(allowOriginURI) != null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPort(allowOriginURI) == -1) {
            if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else             if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"" + allowOriginScheme + ""String_Node_Str"");
            }
          }
        }
        if (allowMethods != null) {
          String[] allowMethodsArray=allowMethods.split(""String_Node_Str"");
          for (          String allowMethod : allowMethodsArray) {
            HttpMethod.valueOf(allowMethod);
          }
        }
 else {
          allowMethods=""String_Node_Str"";
        }
        Map<String,CrossSiteConstraintContext> acceptConstraints=acceptConstraintsByURI.get(acceptURI);
        if (acceptConstraints == null) {
          acceptConstraints=new HashMap<>();
          acceptConstraintsByURI.put(acceptURI,acceptConstraints);
        }
        authorityToSetOfAcceptConstraintsByURI.add(acceptConstraintsByURI);
        CrossSiteConstraintContext acceptConstraint=new DefaultCrossSiteConstraintContext(allowOrigin,allowMethods,allowHeaders,maximumAge);
        CrossSiteConstraintContext oldAcceptConstraint=acceptConstraints.put(allowOrigin,acceptConstraint);
        if (oldAcceptConstraint != null) {
          throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str""+ allowOrigin);
        }
      }
      if (wildcardOriginCount > 0 && crossSiteConstraints.length > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      String host=getHost(acceptURI);
      if (host == null || host.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      if (requireRolesCollection.contains(""String_Node_Str"") && requireRolesCollection.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
    }
    RealmContext serviceRealmContext=null;
    final String realmName=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      serviceRealmContext=realmsContext.getRealmContext(realmName);
      if (serviceRealmContext == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + realmName + ""String_Node_Str"");
      }
    }
    ServiceAcceptOptionsType acceptOptions=serviceConfig.getAcceptOptions();
    ServiceAcceptOptionsType defaultOptionsConfig=(defaultServiceConfig != null) ? defaultServiceConfig.getAcceptOptions() : null;
    AcceptOptionsContext acceptOptionsContext=new DefaultAcceptOptionsContext(acceptOptions,defaultOptionsConfig);
    ServiceConnectOptionsType connectOptions=serviceConfig.getConnectOptions();
    ServiceConnectOptionsType defaultConnectOptions=(serviceDefaults == null) ? ServiceConnectOptionsType.Factory.newInstance() : serviceDefaults.getConnectOptions();
    ConnectOptionsContext connectOptionsContext=new DefaultConnectOptionsContext(connectOptions,defaultConnectOptions);
    Key encryptionKey=null;
    if (serviceRealmContext == null && requireRolesCollection.size() > 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + serviceDescription + ""String_Node_Str"");
    }
    DefaultServiceContext serviceContext=new DefaultServiceContext(serviceType,serviceName,serviceDescription,serviceInstance,webDir,tempDir,balanceURIs,acceptURIs,connectURIs,properties,requireRoles,mimeMappings,acceptConstraintsByURI,clusterContext,acceptOptionsContext,connectOptionsContext,serviceRealmContext,encryptionKey,schedulerProvider,supportsAccepts(serviceType),supportsConnects(serviceType),supportsMimeMappings(serviceType),InternalSystemProperty.TCP_PROCESSOR_COUNT.getIntProperty(configuration),transportFactory,resourceAddressFactory);
    serviceContexts.add(serviceContext);
    for (    String acceptURI : acceptURIs) {
      String authority=getAuthority(acceptURI);
      if (authority.indexOf(':') == -1) {
        SchemeConfig schemeConfig=supplySchemeConfig(getScheme(acceptURI));
        authority+=""String_Node_Str"" + schemeConfig.getDefaultPort();
        acceptURI=getScheme(acceptURI) + ""String_Node_Str"" + authority+ getPath(acceptURI);
      }
      serviceRegistry.register(acceptURI,serviceContext);
    }
  }
  for (  ServiceContext ctxt : serviceContexts) {
    ctxt.setListsOfAcceptConstraintsByURI(authorityToSetOfAcceptConstraintsByURI);
  }
  return serviceContexts;
}","@SuppressWarnings(""String_Node_Str"") private Collection<ServiceContext> resolveServices(ServiceRegistry serviceRegistry,File webDir,File tempDir,ServiceType[] serviceConfigs,SecurityContext securityContext,RealmsContext realmsContext,ClusterContext clusterContext,ServiceDefaultsType defaultServiceConfig,SchedulerProvider schedulerProvider,Map<String,Object> dependencyContexts,Properties configuration,TransportFactory transportFactory,ServiceFactory serviceFactory,ResourceAddressFactory resourceAddressFactory,ServiceDefaultsType serviceDefaults) throws Exception {
  Collection<ServiceContext> serviceContexts=new HashSet<>();
  Map<String,String> serviceDefaultsMimeMappings=new HashMap<>();
  serviceDefaultsMimeMappings.putAll(defaultMimeMappings);
  if (defaultServiceConfig != null) {
    for (    MimeMappingType mimeMappingType : defaultServiceConfig.getMimeMappingArray()) {
      serviceDefaultsMimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
  }
  List<Map<String,Map<String,CrossSiteConstraintContext>>> authorityToSetOfAcceptConstraintsByURI=new ArrayList<>();
  for (  ServiceType serviceConfig : serviceConfigs) {
    String serviceName=serviceConfig.getName();
    String serviceDescription=serviceConfig.getDescription();
    String[] acceptStrings=serviceConfig.getAcceptArray();
    String[] balanceStrings=serviceConfig.getBalanceArray();
    String[] connectStrings=serviceConfig.getConnectArray();
    String serviceType=serviceConfig.getType();
    Service serviceInstance;
    Class<? extends Service> serviceClass;
    if (serviceType.startsWith(SERVICE_TYPE_CLASS_PREFIX)) {
      String className=serviceType.substring(SERVICE_TYPE_CLASS_PREFIX.length());
      try {
        Class<?> clazz=Class.forName(className);
        if (!Service.class.isAssignableFrom(clazz)) {
          throw new IllegalArgumentException(""String_Node_Str"" + className);
        }
        serviceClass=(Class<? extends Service>)clazz;
        serviceInstance=serviceClass.newInstance();
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + className);
      }
    }
 else {
      serviceInstance=serviceFactory.newService(serviceType);
      if (serviceInstance == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + serviceType);
      }
    }
    ServicePropertiesType propertiesType=serviceConfig.getProperties();
    DefaultServiceProperties properties=parsePropertiesType(propertiesType);
    Collection<String> acceptURIs=resolveURIs(acceptStrings);
    Collection<String> balanceURIs=resolveURIs(balanceStrings);
    Collection<String> connectURIs=resolveURIs(connectStrings);
    String acceptProperty=properties.get(""String_Node_Str"");
    if (acceptProperty != null) {
      acceptProperty=acceptProperty.trim();
      acceptProperty=resolveURI(getCanonicalURI(acceptProperty,false));
      properties.put(""String_Node_Str"",acceptProperty);
    }
    String connectProperty=properties.get(""String_Node_Str"");
    if (connectProperty != null) {
      connectProperty=connectProperty.trim();
      properties.remove(""String_Node_Str"");
      connectURIs.add(resolveURI(getCanonicalURI(connectProperty,true)));
    }
    Collection<String> requireRolesCollection=new LinkedList<>();
    for (    AuthorizationConstraintType authConstraint : serviceConfig.getAuthorizationConstraintArray()) {
      Collections.addAll(requireRolesCollection,authConstraint.getRequireRoleArray());
    }
    RealmContext realmContext=null;
    String name=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      realmContext=realmsContext.getRealmContext(name);
      if (realmContext != null) {
        if (requireRolesCollection.isEmpty()) {
          Collections.addAll(requireRolesCollection,""String_Node_Str"");
        }
      }
    }
    String[] requireRoles=requireRolesCollection.toArray(new String[requireRolesCollection.size()]);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.putAll(serviceDefaultsMimeMappings);
    for (    MimeMappingType mimeMappingType : serviceConfig.getMimeMappingArray()) {
      mimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
    Map<String,Map<String,CrossSiteConstraintContext>> acceptConstraintsByURI=new HashMap<>();
    for (    String acceptURI : acceptURIs) {
      int wildcardOriginCount=0;
      CrossSiteConstraintType[] crossSiteConstraints=serviceConfig.getCrossSiteConstraintArray();
      for (      CrossSiteConstraintType crossSiteConstraint : crossSiteConstraints) {
        String allowOrigin=(String)crossSiteConstraint.getAllowOrigin();
        String allowMethods=crossSiteConstraint.getAllowMethods();
        String allowHeaders=crossSiteConstraint.getAllowHeaders();
        BigInteger maximumAgeBigInt=crossSiteConstraint.getMaximumAge();
        Integer maximumAge=(maximumAgeBigInt == null) ? null : maximumAgeBigInt.intValue();
        if (allowOrigin == null) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        if (""String_Node_Str"".equals(allowOrigin)) {
          wildcardOriginCount++;
        }
 else {
          String allowOriginURI=getCanonicalURI(allowOrigin,false);
          allowOrigin=allowOriginURI;
          String allowOriginScheme=getScheme(allowOriginURI);
          if (!""String_Node_Str"".equals(allowOriginScheme) && !""String_Node_Str"".equals(allowOriginScheme)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPath(allowOriginURI) != null && getQuery(allowOriginURI) != null || getFragment(allowOriginURI) != null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPort(allowOriginURI) == -1) {
            if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else             if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"" + allowOriginScheme + ""String_Node_Str"");
            }
          }
        }
        if (allowMethods != null) {
          String[] allowMethodsArray=allowMethods.split(""String_Node_Str"");
          for (          String allowMethod : allowMethodsArray) {
            HttpMethod.valueOf(allowMethod);
          }
        }
 else {
          allowMethods=""String_Node_Str"";
        }
        Map<String,CrossSiteConstraintContext> acceptConstraints=acceptConstraintsByURI.get(acceptURI);
        if (acceptConstraints == null) {
          acceptConstraints=new HashMap<>();
          acceptConstraintsByURI.put(acceptURI,acceptConstraints);
        }
        authorityToSetOfAcceptConstraintsByURI.add(acceptConstraintsByURI);
        CrossSiteConstraintContext acceptConstraint=new DefaultCrossSiteConstraintContext(allowOrigin,allowMethods,allowHeaders,maximumAge);
        CrossSiteConstraintContext oldAcceptConstraint=acceptConstraints.put(allowOrigin,acceptConstraint);
        if (oldAcceptConstraint != null) {
          throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str""+ allowOrigin);
        }
      }
      if (wildcardOriginCount > 0 && crossSiteConstraints.length > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      String host=getHost(acceptURI);
      if (host == null || host.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      if (requireRolesCollection.contains(""String_Node_Str"") && requireRolesCollection.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
    }
    RealmContext serviceRealmContext=null;
    final String realmName=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      serviceRealmContext=realmsContext.getRealmContext(realmName);
      if (serviceRealmContext == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + realmName + ""String_Node_Str"");
      }
    }
    ServiceAcceptOptionsType acceptOptions=serviceConfig.getAcceptOptions();
    ServiceAcceptOptionsType defaultOptionsConfig=(defaultServiceConfig != null) ? defaultServiceConfig.getAcceptOptions() : null;
    AcceptOptionsContext acceptOptionsContext=new DefaultAcceptOptionsContext(acceptOptions,defaultOptionsConfig);
    ServiceConnectOptionsType connectOptions=serviceConfig.getConnectOptions();
    ServiceConnectOptionsType defaultConnectOptions=(serviceDefaults == null) ? ServiceConnectOptionsType.Factory.newInstance() : serviceDefaults.getConnectOptions();
    ConnectOptionsContext connectOptionsContext=new DefaultConnectOptionsContext(connectOptions,defaultConnectOptions);
    Key encryptionKey=null;
    if (serviceRealmContext == null && requireRolesCollection.size() > 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + serviceDescription + ""String_Node_Str"");
    }
    DefaultServiceContext serviceContext=new DefaultServiceContext(serviceType,serviceName,serviceDescription,serviceInstance,webDir,tempDir,balanceURIs,acceptURIs,connectURIs,properties,requireRoles,mimeMappings,acceptConstraintsByURI,clusterContext,acceptOptionsContext,connectOptionsContext,serviceRealmContext,encryptionKey,schedulerProvider,supportsAccepts(serviceType),supportsConnects(serviceType),supportsMimeMappings(serviceType),InternalSystemProperty.TCP_PROCESSOR_COUNT.getIntProperty(configuration),transportFactory,resourceAddressFactory);
    serviceContexts.add(serviceContext);
    for (    String acceptURI : acceptURIs) {
      String authority=getAuthority(acceptURI);
      if (authority.indexOf(':') == -1) {
        SchemeConfig schemeConfig=supplySchemeConfig(getScheme(acceptURI));
        authority+=""String_Node_Str"" + schemeConfig.getDefaultPort();
        acceptURI=getScheme(acceptURI) + ""String_Node_Str"" + authority+ getPath(acceptURI);
      }
      serviceRegistry.register(acceptURI,serviceContext);
    }
  }
  for (  ServiceContext ctxt : serviceContexts) {
    ctxt.setListsOfAcceptConstraintsByURI(authorityToSetOfAcceptConstraintsByURI);
  }
  return serviceContexts;
}"
96473,"/** 
 * Given an incoming namespace, return the translator pipeline to translate a document with that namespace up to the 'current' format.
 * @param ns
 * @return
 */
@Override public GatewayConfigTranslator getTranslator(GatewayConfigNamespace ns){
  GatewayConfigTranslatorPipeline result=null;
  if (ns.equals(GatewayConfigNamespace.SEPTEMBER_2014)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator september2014Translator=new September2014ToNovember2015Translator();
    result.addTranslator(september2014Translator);
    ns=GatewayConfigNamespace.NOVEMBER_2015;
  }
  if (ns.equals(GatewayConfigNamespace.NOVEMBER_2015)) {
    if (result == null) {
      result=new GatewayConfigTranslatorPipeline();
    }
    GatewayConfigTranslator november2015Validator=new November2015ToJune2016Translator();
    result.addTranslator(november2015Validator);
    ns=GatewayConfigNamespace.CURRENT_NS;
  }
  if (ns.equals(GatewayConfigNamespace.CURRENT_NS)) {
    if (result == null) {
      result=new GatewayConfigTranslatorPipeline();
    }
    GatewayConfigTranslator june2016Validator=new June2016Validator();
    result.addTranslator(june2016Validator);
  }
  return result;
}","/** 
 * Given an incoming namespace, return the translator pipeline to translate a document with that namespace up to the 'current' format.
 * @param ns
 * @return
 */
@Override public GatewayConfigTranslator getTranslator(GatewayConfigNamespace ns){
  GatewayConfigTranslatorPipeline result=null;
  if (ns.equals(GatewayConfigNamespace.SEPTEMBER_2014)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator september2014Translator=new September2014ToNovember2015Translator();
    result.addTranslator(september2014Translator);
    GatewayConfigTranslator november2015Validator=new November2015Validator();
    result.addTranslator(november2015Validator);
  }
  if (ns.equals(GatewayConfigNamespace.CURRENT_NS)) {
    result=new GatewayConfigTranslatorPipeline();
    GatewayConfigTranslator november2015Validator=new November2015Validator();
    result.addTranslator(november2015Validator);
  }
  return result;
}"
96474,"public September2014ToNovember2015Translator(){
  super();
  addTranslator(new AddDirectoryServiceLocationVisitor());
  addTranslator(new NamespaceVisitor(GatewayConfigNamespace.NOVEMBER_2015));
}","public September2014ToNovember2015Translator(){
  super();
  addTranslator(new AddDirectoryServiceLocationVisitor());
  addTranslator(new NamespaceVisitor(GatewayConfigNamespace.CURRENT_NS));
}"
96475,"@SuppressWarnings(""String_Node_Str"") private Collection<ServiceContext> resolveServices(ServiceRegistry serviceRegistry,File webDir,File tempDir,ServiceType[] serviceConfigs,SecurityContext securityContext,RealmsContext realmsContext,ClusterContext clusterContext,ServiceDefaultsType defaultServiceConfig,SchedulerProvider schedulerProvider,Map<String,Object> dependencyContexts,Properties configuration,TransportFactory transportFactory,ServiceFactory serviceFactory,ResourceAddressFactory resourceAddressFactory,ServiceDefaultsType serviceDefaults) throws Exception {
  Collection<ServiceContext> serviceContexts=new HashSet<>();
  Map<String,String> serviceDefaultsMimeMappings=new HashMap<>();
  serviceDefaultsMimeMappings.putAll(defaultMimeMappings);
  if (defaultServiceConfig != null) {
    for (    MimeMappingType mimeMappingType : defaultServiceConfig.getMimeMappingArray()) {
      serviceDefaultsMimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
  }
  List<Map<String,Map<String,CrossSiteConstraintContext>>> authorityToSetOfAcceptConstraintsByURI=new ArrayList<>();
  for (  ServiceType serviceConfig : serviceConfigs) {
    String serviceName=serviceConfig.getName();
    String serviceDescription=serviceConfig.getDescription();
    String[] acceptStrings=serviceConfig.getAcceptArray();
    String[] balanceStrings=serviceConfig.getBalanceArray();
    String[] connectStrings=serviceConfig.getConnectArray();
    String serviceType=serviceConfig.getType();
    Service serviceInstance;
    Class<? extends Service> serviceClass;
    if (serviceType.startsWith(SERVICE_TYPE_CLASS_PREFIX)) {
      String className=serviceType.substring(SERVICE_TYPE_CLASS_PREFIX.length());
      try {
        Class<?> clazz=Class.forName(className);
        if (!Service.class.isAssignableFrom(clazz)) {
          throw new IllegalArgumentException(""String_Node_Str"" + className);
        }
        serviceClass=(Class<? extends Service>)clazz;
        serviceInstance=serviceClass.newInstance();
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + className);
      }
    }
 else {
      serviceInstance=serviceFactory.newService(serviceType);
      if (serviceInstance == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + serviceType);
      }
    }
    ServicePropertiesType propertiesType=serviceConfig.getProperties();
    DefaultServiceProperties properties=parsePropertiesType(propertiesType);
    Collection<String> acceptURIs=resolveURIs(acceptStrings);
    Collection<String> balanceURIs=resolveURIs(balanceStrings);
    Collection<String> connectURIs=resolveURIs(connectStrings);
    String acceptProperty=properties.get(""String_Node_Str"");
    if (acceptProperty != null) {
      acceptProperty=acceptProperty.trim();
      acceptProperty=resolveURI(getCanonicalURI(acceptProperty,false));
      properties.put(""String_Node_Str"",acceptProperty);
    }
    String connectProperty=properties.get(""String_Node_Str"");
    if (connectProperty != null) {
      connectProperty=connectProperty.trim();
      properties.remove(""String_Node_Str"");
      connectURIs.add(resolveURI(getCanonicalURI(connectProperty,true)));
    }
    Collection<String> requireRolesCollection=new LinkedList<>();
    for (    AuthorizationConstraintType authConstraint : serviceConfig.getAuthorizationConstraintArray()) {
      Collections.addAll(requireRolesCollection,authConstraint.getRequireRoleArray());
    }
    RealmContext realmContext=null;
    String name=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      realmContext=realmsContext.getRealmContext(name);
      if (realmContext != null) {
        if (requireRolesCollection.isEmpty()) {
          Collections.addAll(requireRolesCollection,""String_Node_Str"");
        }
      }
    }
    String[] requireRoles=requireRolesCollection.toArray(new String[requireRolesCollection.size()]);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.putAll(serviceDefaultsMimeMappings);
    for (    MimeMappingType mimeMappingType : serviceConfig.getMimeMappingArray()) {
      mimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
    Map<String,Map<String,CrossSiteConstraintContext>> acceptConstraintsByURI=new HashMap<>();
    for (    String acceptURI : acceptURIs) {
      int wildcardOriginCount=0;
      CrossSiteConstraintType[] crossSiteConstraints=serviceConfig.getCrossSiteConstraintArray();
      for (      CrossSiteConstraintType crossSiteConstraint : crossSiteConstraints) {
        String allowOrigin=(String)crossSiteConstraint.getAllowOrigin();
        String allowMethods=crossSiteConstraint.getAllowMethods();
        String allowHeaders=crossSiteConstraint.getAllowHeaders();
        BigInteger maximumAgeBigInt=crossSiteConstraint.getMaximumAge();
        Integer maximumAge=(maximumAgeBigInt == null) ? null : maximumAgeBigInt.intValue();
        if (allowOrigin == null) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        if (""String_Node_Str"".equals(allowOrigin)) {
          wildcardOriginCount++;
        }
 else {
          String allowOriginURI=getCanonicalURI(allowOrigin,false);
          allowOrigin=allowOriginURI;
          String allowOriginScheme=getScheme(allowOriginURI);
          if (!""String_Node_Str"".equals(allowOriginScheme) && !""String_Node_Str"".equals(allowOriginScheme)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPath(allowOriginURI) != null && getQuery(allowOriginURI) != null || getFragment(allowOriginURI) != null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPort(allowOriginURI) == -1) {
            if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else             if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"" + allowOriginScheme + ""String_Node_Str"");
            }
          }
        }
        if (allowMethods != null) {
          String[] allowMethodsArray=allowMethods.split(""String_Node_Str"");
          for (          String allowMethod : allowMethodsArray) {
            HttpMethod.valueOf(allowMethod);
          }
        }
 else {
          allowMethods=""String_Node_Str"";
        }
        Map<String,CrossSiteConstraintContext> acceptConstraints=acceptConstraintsByURI.get(acceptURI);
        if (acceptConstraints == null) {
          acceptConstraints=new HashMap<>();
          acceptConstraintsByURI.put(acceptURI,acceptConstraints);
        }
        authorityToSetOfAcceptConstraintsByURI.add(acceptConstraintsByURI);
        CrossSiteConstraintContext acceptConstraint=new DefaultCrossSiteConstraintContext(allowOrigin,allowMethods,allowHeaders,maximumAge);
        CrossSiteConstraintContext oldAcceptConstraint=acceptConstraints.put(allowOrigin,acceptConstraint);
        if (oldAcceptConstraint != null) {
          throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str""+ allowOrigin);
        }
      }
      if (wildcardOriginCount > 0 && crossSiteConstraints.length > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      String host=getHost(acceptURI);
      if (host == null || host.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      if (requireRolesCollection.contains(""String_Node_Str"") && requireRolesCollection.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
    }
    RealmContext serviceRealmContext=null;
    final String realmName=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      serviceRealmContext=realmsContext.getRealmContext(realmName);
      if (serviceRealmContext == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + realmName + ""String_Node_Str"");
      }
    }
    ServiceAcceptOptionsType acceptOptions=serviceConfig.getAcceptOptions();
    ServiceAcceptOptionsType defaultOptionsConfig=(defaultServiceConfig != null) ? defaultServiceConfig.getAcceptOptions() : null;
    AcceptOptionsContext acceptOptionsContext=new DefaultAcceptOptionsContext(acceptOptions,defaultOptionsConfig);
    ServiceConnectOptionsType connectOptions=serviceConfig.getConnectOptions();
    ServiceConnectOptionsType defaultConnectOptions=(serviceDefaults == null) ? ServiceConnectOptionsType.Factory.newInstance() : serviceDefaults.getConnectOptions();
    ConnectOptionsContext connectOptionsContext=new DefaultConnectOptionsContext(connectOptions,defaultConnectOptions);
    Key encryptionKey=null;
    if (serviceRealmContext == null && requireRolesCollection.size() > 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + serviceDescription + ""String_Node_Str"");
    }
    DefaultServiceContext serviceContext=new DefaultServiceContext(serviceType,serviceName,serviceDescription,serviceInstance,webDir,tempDir,balanceURIs,acceptURIs,connectURIs,properties,requireRoles,mimeMappings,acceptConstraintsByURI,clusterContext,acceptOptionsContext,connectOptionsContext,serviceRealmContext,encryptionKey,schedulerProvider,supportsAccepts(serviceType),supportsConnects(serviceType),supportsMimeMappings(serviceType),InternalSystemProperty.TCP_PROCESSOR_COUNT.getIntProperty(configuration),transportFactory,resourceAddressFactory);
    serviceContexts.add(serviceContext);
    for (    String acceptURI : acceptURIs) {
      String authority=getAuthority(acceptURI);
      if (authority.indexOf(':') == -1) {
        SchemeConfig schemeConfig=supplySchemeConfig(getScheme(acceptURI));
        authority+=""String_Node_Str"" + schemeConfig.getDefaultPort();
        acceptURI=getScheme(acceptURI) + ""String_Node_Str"" + authority+ getPath(acceptURI);
      }
      serviceRegistry.register(acceptURI,serviceContext);
    }
  }
  for (  ServiceContext ctxt : serviceContexts) {
    ctxt.setListsOfAcceptConstraintsByURI(authorityToSetOfAcceptConstraintsByURI);
  }
  return serviceContexts;
}","@SuppressWarnings(""String_Node_Str"") private Collection<ServiceContext> resolveServices(ServiceRegistry serviceRegistry,File webDir,File tempDir,ServiceType[] serviceConfigs,SecurityContext securityContext,RealmsContext realmsContext,ClusterContext clusterContext,ServiceDefaultsType defaultServiceConfig,SchedulerProvider schedulerProvider,Map<String,Object> dependencyContexts,Properties configuration,TransportFactory transportFactory,ServiceFactory serviceFactory,ResourceAddressFactory resourceAddressFactory,ServiceDefaultsType serviceDefaults) throws Exception {
  Collection<ServiceContext> serviceContexts=new HashSet<>();
  Map<String,String> serviceDefaultsMimeMappings=new HashMap<>();
  serviceDefaultsMimeMappings.putAll(defaultMimeMappings);
  if (defaultServiceConfig != null) {
    for (    MimeMappingType mimeMappingType : defaultServiceConfig.getMimeMappingArray()) {
      serviceDefaultsMimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
  }
  List<Map<String,Map<String,CrossSiteConstraintContext>>> authorityToSetOfAcceptConstraintsByURI=new ArrayList<>();
  for (  ServiceType serviceConfig : serviceConfigs) {
    String serviceName=serviceConfig.getName();
    String serviceDescription=serviceConfig.getDescription();
    String[] acceptStrings=serviceConfig.getAcceptArray();
    String[] balanceStrings=serviceConfig.getBalanceArray();
    String[] connectStrings=serviceConfig.getConnectArray();
    String serviceType=serviceConfig.getType();
    Service serviceInstance;
    Class<? extends Service> serviceClass;
    if (serviceType.startsWith(SERVICE_TYPE_CLASS_PREFIX)) {
      String className=serviceType.substring(SERVICE_TYPE_CLASS_PREFIX.length());
      try {
        Class<?> clazz=Class.forName(className);
        if (!Service.class.isAssignableFrom(clazz)) {
          throw new IllegalArgumentException(""String_Node_Str"" + className);
        }
        serviceClass=(Class<? extends Service>)clazz;
        serviceInstance=serviceClass.newInstance();
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + className);
      }
    }
 else {
      serviceInstance=serviceFactory.newService(serviceType);
      if (serviceInstance == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + serviceType);
      }
    }
    ServicePropertiesType propertiesType=serviceConfig.getProperties();
    DefaultServiceProperties properties=parsePropertiesType(propertiesType);
    Collection<String> acceptURIs=resolveURIs(acceptStrings);
    Collection<String> balanceURIs=resolveURIs(balanceStrings);
    Collection<String> connectURIs=resolveURIs(connectStrings);
    String acceptProperty=properties.get(""String_Node_Str"");
    if (acceptProperty != null) {
      acceptProperty=acceptProperty.trim();
      acceptProperty=resolveURI(getCanonicalURI(acceptProperty,false));
      properties.put(""String_Node_Str"",acceptProperty);
    }
    String connectProperty=properties.get(""String_Node_Str"");
    if (connectProperty != null) {
      connectProperty=connectProperty.trim();
      properties.remove(""String_Node_Str"");
      connectURIs.add(resolveURI(getCanonicalURI(connectProperty,true)));
    }
    Collection<String> requireRolesCollection=new LinkedList<>();
    for (    AuthorizationConstraintType authConstraint : serviceConfig.getAuthorizationConstraintArray()) {
      Collections.addAll(requireRolesCollection,authConstraint.getRequireRoleArray());
    }
    String[] requireRoles=requireRolesCollection.toArray(new String[requireRolesCollection.size()]);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.putAll(serviceDefaultsMimeMappings);
    for (    MimeMappingType mimeMappingType : serviceConfig.getMimeMappingArray()) {
      mimeMappings.put(mimeMappingType.getExtension().toLowerCase(),mimeMappingType.getMimeType());
    }
    Map<String,Map<String,CrossSiteConstraintContext>> acceptConstraintsByURI=new HashMap<>();
    for (    String acceptURI : acceptURIs) {
      int wildcardOriginCount=0;
      CrossSiteConstraintType[] crossSiteConstraints=serviceConfig.getCrossSiteConstraintArray();
      for (      CrossSiteConstraintType crossSiteConstraint : crossSiteConstraints) {
        String allowOrigin=(String)crossSiteConstraint.getAllowOrigin();
        String allowMethods=crossSiteConstraint.getAllowMethods();
        String allowHeaders=crossSiteConstraint.getAllowHeaders();
        BigInteger maximumAgeBigInt=crossSiteConstraint.getMaximumAge();
        Integer maximumAge=(maximumAgeBigInt == null) ? null : maximumAgeBigInt.intValue();
        if (allowOrigin == null) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        if (""String_Node_Str"".equals(allowOrigin)) {
          wildcardOriginCount++;
        }
 else {
          String allowOriginURI=getCanonicalURI(allowOrigin,false);
          allowOrigin=allowOriginURI;
          String allowOriginScheme=getScheme(allowOriginURI);
          if (!""String_Node_Str"".equals(allowOriginScheme) && !""String_Node_Str"".equals(allowOriginScheme)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPath(allowOriginURI) != null && getQuery(allowOriginURI) != null || getFragment(allowOriginURI) != null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          if (getPort(allowOriginURI) == -1) {
            if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else             if (""String_Node_Str"".equals(allowOriginScheme)) {
              allowOrigin+=""String_Node_Str"";
            }
 else {
              throw new IllegalArgumentException(""String_Node_Str"" + allowOriginScheme + ""String_Node_Str"");
            }
          }
        }
        if (allowMethods != null) {
          String[] allowMethodsArray=allowMethods.split(""String_Node_Str"");
          for (          String allowMethod : allowMethodsArray) {
            HttpMethod.valueOf(allowMethod);
          }
        }
 else {
          allowMethods=""String_Node_Str"";
        }
        Map<String,CrossSiteConstraintContext> acceptConstraints=acceptConstraintsByURI.get(acceptURI);
        if (acceptConstraints == null) {
          acceptConstraints=new HashMap<>();
          acceptConstraintsByURI.put(acceptURI,acceptConstraints);
        }
        authorityToSetOfAcceptConstraintsByURI.add(acceptConstraintsByURI);
        CrossSiteConstraintContext acceptConstraint=new DefaultCrossSiteConstraintContext(allowOrigin,allowMethods,allowHeaders,maximumAge);
        CrossSiteConstraintContext oldAcceptConstraint=acceptConstraints.put(allowOrigin,acceptConstraint);
        if (oldAcceptConstraint != null) {
          throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str""+ allowOrigin);
        }
      }
      if (wildcardOriginCount > 0 && crossSiteConstraints.length > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      String host=getHost(acceptURI);
      if (host == null || host.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
      if (requireRolesCollection.contains(""String_Node_Str"") && requireRolesCollection.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + acceptURI + ""String_Node_Str"");
      }
    }
    RealmContext serviceRealmContext=null;
    final String realmName=serviceConfig.getRealmName();
    if (serviceConfig.isSetRealmName()) {
      serviceRealmContext=realmsContext.getRealmContext(realmName);
      if (serviceRealmContext == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + realmName + ""String_Node_Str"");
      }
    }
    ServiceAcceptOptionsType acceptOptions=serviceConfig.getAcceptOptions();
    ServiceAcceptOptionsType defaultOptionsConfig=(defaultServiceConfig != null) ? defaultServiceConfig.getAcceptOptions() : null;
    AcceptOptionsContext acceptOptionsContext=new DefaultAcceptOptionsContext(acceptOptions,defaultOptionsConfig);
    ServiceConnectOptionsType connectOptions=serviceConfig.getConnectOptions();
    ServiceConnectOptionsType defaultConnectOptions=(serviceDefaults == null) ? ServiceConnectOptionsType.Factory.newInstance() : serviceDefaults.getConnectOptions();
    ConnectOptionsContext connectOptionsContext=new DefaultConnectOptionsContext(connectOptions,defaultConnectOptions);
    Key encryptionKey=null;
    if (serviceRealmContext == null && requireRolesCollection.size() > 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + serviceDescription + ""String_Node_Str"");
    }
    DefaultServiceContext serviceContext=new DefaultServiceContext(serviceType,serviceName,serviceDescription,serviceInstance,webDir,tempDir,balanceURIs,acceptURIs,connectURIs,properties,requireRoles,mimeMappings,acceptConstraintsByURI,clusterContext,acceptOptionsContext,connectOptionsContext,serviceRealmContext,encryptionKey,schedulerProvider,supportsAccepts(serviceType),supportsConnects(serviceType),supportsMimeMappings(serviceType),InternalSystemProperty.TCP_PROCESSOR_COUNT.getIntProperty(configuration),transportFactory,resourceAddressFactory);
    serviceContexts.add(serviceContext);
    for (    String acceptURI : acceptURIs) {
      String authority=getAuthority(acceptURI);
      if (authority.indexOf(':') == -1) {
        SchemeConfig schemeConfig=supplySchemeConfig(getScheme(acceptURI));
        authority+=""String_Node_Str"" + schemeConfig.getDefaultPort();
        acceptURI=getScheme(acceptURI) + ""String_Node_Str"" + authority+ getPath(acceptURI);
      }
      serviceRegistry.register(acceptURI,serviceContext);
    }
  }
  for (  ServiceContext ctxt : serviceContexts) {
    ctxt.setListsOfAcceptConstraintsByURI(authorityToSetOfAcceptConstraintsByURI);
  }
  return serviceContexts;
}"
96476,"@Override public void visit(Element element) throws Exception {
  Element typeElement=element.getChild(REALM,namespace);
  if (typeElement != null) {
    element.removeChildren(CONSTRAINT,namespace);
    element.removeChildren(AUTH_CONSTRAINT,namespace);
  }
}","@Override public void visit(Element element){
  Element typeElement=element.getChild(REALM,namespace);
  if (typeElement != null) {
    element.removeChildren(CONSTRAINT,namespace);
    element.removeChildren(AUTH_CONSTRAINT,namespace);
  }
}"
96477,"@Override public void translate(Document dom) throws Exception {
  Element root=dom.getRootElement();
  namespace=root.getNamespace();
  List<Element> children=dom.getRootElement().getChildren(SERVICE_NODE,namespace);
  for (  Element child : children) {
    visit(child);
  }
}","@Override public void translate(Document dom){
  Element root=dom.getRootElement();
  namespace=root.getNamespace();
  List<Element> children=dom.getRootElement().getChildren(SERVICE_NODE,namespace);
  for (  Element child : children) {
    visit(child);
  }
}"
96478,"public void setRemoteAddress(ResourceAddress newConnectAddress){
  this.localRemoteAddress=newConnectAddress;
}","public void setRemoteAddress(ResourceAddress redirectRemoteAddress){
  this.redirectRemoteAddress=redirectRemoteAddress;
}"
96479,"@Override public ResourceAddress getRemoteAddress(){
  return (localRemoteAddress == null) ? super.getRemoteAddress() : localRemoteAddress;
}","@Override public ResourceAddress getRemoteAddress(){
  return (this.redirectRemoteAddress != null) ? this.redirectRemoteAddress : super.getRemoteAddress();
}"
96480,"@Override public ResourceAddress getLocalAddress(){
  return super.getLocalAddress();
}","@Override public ResourceAddress getLocalAddress(){
  return (this.redirectlocalAddress != null) ? this.redirectlocalAddress : super.getLocalAddress();
}"
96481,"public IoSessionEx setParent(IoSessionEx newParent){
  return super.setParent(newParent);
}","public IoSessionEx setParent(IoSessionEx newParent){
  this.setLocalAddress(LOCAL_ADDRESS.get(newParent));
  upgradeFuture.setSession(newParent);
  if (!SslUtils.isSecure(newParent) && secure) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  return super.setParent(newParent);
}"
96482,"@Override protected void doSessionClosed(IoSessionEx session) throws Exception {
  DefaultHttpSession httpSession=HTTP_SESSION_KEY.remove(session);
  boolean connectionClose=hasCloseHeader(httpSession.getReadHeaders(HttpHeaders.HEADER_CONNECTION));
  if (!httpSession.isClosing() && !connectionClose) {
    httpSession.setStatus(HttpStatus.SERVER_GATEWAY_TIMEOUT);
    httpSession.reset(new IOException(""String_Node_Str"").fillInStackTrace());
    return;
  }
  if (connectionClose && !httpSession.isClosing()) {
    httpSession.getProcessor().remove(httpSession);
  }
  if (!session.isClosing()) {
    IoFilterChain filterChain=session.getFilterChain();
    removeBridgeFilters(filterChain);
  }
}","@Override protected void doSessionClosed(IoSessionEx session) throws Exception {
  DefaultHttpSession httpSession=HTTP_SESSION_KEY.remove(session);
  if (httpSession != null) {
    boolean connectionClose=hasCloseHeader(httpSession.getReadHeaders(HttpHeaders.HEADER_CONNECTION));
    if (!httpSession.isClosing() && !connectionClose) {
      httpSession.setStatus(HttpStatus.SERVER_GATEWAY_TIMEOUT);
      httpSession.reset(new IOException(""String_Node_Str"").fillInStackTrace());
      return;
    }
    if (connectionClose && !httpSession.isClosing()) {
      httpSession.getProcessor().remove(httpSession);
    }
    if (!session.isClosing()) {
      IoFilterChain filterChain=session.getFilterChain();
      removeBridgeFilters(filterChain);
    }
  }
}"
96483,"private DefaultConnectFuture followRedirect(DefaultHttpSession httpSession,IoSessionEx session){
  String location=httpSession.getReadHeader(""String_Node_Str"");
  ResourceAddress newConnectAddress=addressFactory.newResourceAddress(location.replaceFirst(""String_Node_Str"",""String_Node_Str""),new HttpRedirectResourceOptions(httpSession));
  DefaultConnectFuture connectFuture=new DefaultConnectFuture();
  HTTP_SESSION_KEY.remove(session);
  connectFuture.addListener(future -> session.close(false));
  httpSession.setRemoteAddress(newConnectAddress);
  schedulerProvider.submit(() -> {
    final HttpSessionFactory httpSessionFactory=new RedirectSessionFactory(httpSession);
    connectInternal0(connectFuture,newConnectAddress,httpSessionFactory);
  }
);
  return connectFuture;
}","private DefaultConnectFuture followRedirect(DefaultHttpSession httpSession,IoSessionEx session){
  String location=httpSession.getReadHeader(""String_Node_Str"");
  ResourceAddress newConnectAddress=addressFactory.newResourceAddress(location.replaceFirst(""String_Node_Str"",""String_Node_Str""),new HttpRedirectResourceOptions(httpSession));
  DefaultConnectFuture connectFuture=new DefaultConnectFuture();
  HTTP_SESSION_KEY.remove(session);
  connectFuture.addListener(future -> session.close(false));
  httpSession.setRemoteAddress(newConnectAddress);
  final HttpSessionFactory httpSessionFactory=new RedirectSessionFactory(httpSession);
  connectInternal0(connectFuture,newConnectAddress,httpSessionFactory);
  return connectFuture;
}"
96484,"public DefaultUpgradeFuture(IoSession session){
  super(session);
}","public DefaultUpgradeFuture(IoSession session){
  super(session);
  this.setSession(session);
}"
96485,"@Ignore(""String_Node_Str"") @Specification(""String_Node_Str"") @Test public void verifyPrincipalNameLoggedInLayersAboveHttp() throws Exception {
  k3po.finish();
  expectedPatterns=new ArrayList<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str""}));
  forbiddenPatterns=new ArrayList<>(Arrays.asList(new String[]{TEST_PRINCIPAL_PASS}));
}","@Specification(""String_Node_Str"") @Test public void verifyPrincipalNameLoggedInLayersAboveHttp() throws Exception {
  k3po.finish();
  expectedPatterns=new ArrayList<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str"",""String_Node_Str"" + TEST_PRINCIPAL_NAME + ""String_Node_Str""+ TEST_PRINCIPAL_NAME+ ""String_Node_Str""}));
  forbiddenPatterns=new ArrayList<>(Arrays.asList(new String[]{TEST_PRINCIPAL_PASS}));
}"
96486,"/** 
 * Converts a location in the gateway configuration file into a file relative to a specified root directory.
 * @param rootDir the root directory
 * @param location the location (either a file:// URI or a location relative the root directory
 * @return the file corresponding to the location
 */
private File toFile(File rootDir,String location){
  File locationFile=null;
  if (location != null) {
    URI locationURI=URI.create(location);
    locationFile=new File(locationURI.getPath());
    if (locationURI.getScheme() == null) {
      locationFile=new File(rootDir,location);
    }
 else     if (!""String_Node_Str"".equals(locationURI.getScheme())) {
      throw new IllegalArgumentException(""String_Node_Str"" + location);
    }
  }
  return locationFile;
}","/** 
 * Converts a location in the gateway configuration file into a file relative to a specified root directory.
 * @param rootDir the root directory
 * @param location the location (either a file:// URI or a location relative the root directory
 * @return the file corresponding to the location
 */
private File toFile(File rootDir,String location){
  File locationFile=rootDir;
  if (location != null) {
    URI locationURI=URI.create(location);
    locationFile=new File(locationURI.getPath());
    if (locationURI.getScheme() == null) {
      locationFile=new File(rootDir,location);
    }
 else     if (!""String_Node_Str"".equals(locationURI.getScheme())) {
      throw new IllegalArgumentException(""String_Node_Str"" + location);
    }
  }
  return locationFile;
}"
96487,"@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderOrigin() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderOrigin() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  Thread.sleep(100);
  k3po.finish();
}"
96488,"@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRandomCaseRequestHeaders() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRandomCaseRequestHeaders() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96489,"@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRandomCaseResponseHeaders() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRandomCaseResponseHeaders() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96490,"@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderSecWebSocketExtensions() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderSecWebSocketExtensions() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96491,"@Test @Specification({""String_Node_Str""}) public void shouldEstablishMultipleConnections() throws Exception {
  final IoHandler handler1=context.mock(IoHandler.class,""String_Node_Str"");
  final IoHandler handler2=context.mock(IoHandler.class,""String_Node_Str"");
  context.checking(new Expectations(){
{
      oneOf(handler1).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler1).sessionOpened(with(any(IoSessionEx.class)));
      oneOf(handler2).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler2).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture1=connector.connect(""String_Node_Str"",null,handler1);
  connectFuture1.awaitUninterruptibly();
  assertTrue(connectFuture1.isConnected());
  ConnectFuture connectFuture2=connector.connect(""String_Node_Str"",null,handler2);
  connectFuture2.awaitUninterruptibly();
  assertTrue(connectFuture2.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldEstablishMultipleConnections() throws Exception {
  final IoHandler handler1=context.mock(IoHandler.class,""String_Node_Str"");
  final IoHandler handler2=context.mock(IoHandler.class,""String_Node_Str"");
  context.checking(new Expectations(){
{
      oneOf(handler1).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler1).sessionOpened(with(any(IoSessionEx.class)));
      oneOf(handler2).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler2).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture1=connector.connect(""String_Node_Str"",null,handler1);
  connectFuture1.awaitUninterruptibly();
  assertTrue(connectFuture1.isConnected());
  ConnectFuture connectFuture2=connector.connect(""String_Node_Str"",null,handler2);
  connectFuture2.awaitUninterruptibly();
  assertTrue(connectFuture2.isConnected());
  k3po.finish();
}"
96492,"@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnection() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Specification({""String_Node_Str""}) public void shouldEstablishConnection() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  Thread.sleep(100);
  k3po.finish();
}"
96493,"@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderSecWebSocketProtocol() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] protocols={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",protocols,null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithRequestHeaderSecWebSocketProtocol() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] protocols={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",protocols,null,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96494,"@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithSomeExtensionsNegotiated() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWithSomeExtensionsNegotiated() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96495,"@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWhenOrderOfExtensionsNegotiatedChanged() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      oneOf(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}","@Test @Ignore(""String_Node_Str"") @Specification({""String_Node_Str""}) public void shouldEstablishConnectionWhenOrderOfExtensionsNegotiatedChanged() throws Exception {
  final IoHandler handler=context.mock(IoHandler.class);
  context.checking(new Expectations(){
{
      oneOf(handler).sessionCreated(with(any(IoSessionEx.class)));
      atMost(1).of(handler).sessionOpened(with(any(IoSessionEx.class)));
    }
  }
);
  String[] extensions={""String_Node_Str"",""String_Node_Str""};
  ConnectFuture connectFuture=connector.connect(""String_Node_Str"",null,extensions,handler);
  connectFuture.awaitUninterruptibly();
  assertTrue(connectFuture.isConnected());
  k3po.finish();
}"
96496,"@Override public boolean commit() throws LoginException {
  if (super.commit()) {
    subject.getPrincipals().add(unixPrincipal);
    return true;
  }
 else   return false;
}","@Override public boolean commit() throws LoginException {
  if (super.commit()) {
    subject.getPrincipals().add(unixPrincipal);
    return true;
  }
  return false;
}"
96497,"@Override protected Bindings<HttpBinding> initBindings(){
  return new HttpBindings(){
    @Override protected HttpBinding bindAdditionalAddressesIfNecessary(    HttpBinding newHttpBinding){
      HttpBinding httpBinding=addBinding0(newHttpBinding);
      if (httpBinding == null) {
        ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
        HttpAcceptor.this.bind(resourcesAddress,httpResourcesHandler,null);
      }
      return httpBinding;
    }
    protected boolean unbindAdditionalAddressesIfNecessary(    ResourceAddress address,    HttpBinding newHttpBinding){
      ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
      if (newHttpBinding.size() == 1 && newHttpBinding.get(resourcesAddress.getResource().getPath()) != null) {
        HttpAcceptor.this.unbind(resourcesAddress);
        return true;
      }
      return false;
    }
    private ResourceAddress getResourcesAddress(    HttpBinding newHttpBinding){
      ResourceAddress bindAddress=newHttpBinding.bindAddress();
      String location=bindAddress.getExternalURI();
      String resourcesURI=URIUtils.resolve(location,""String_Node_Str"");
      ResourceOptions options=ResourceOptions.FACTORY.newResourceOptions();
      options.setOption(TRANSPORT_URI,bindAddress.getOption(TRANSPORT_URI));
      options.setOption(TRANSPORT,bindAddress.getOption(TRANSPORT));
      options.setOption(TEMP_DIRECTORY,bindAddress.getOption(TEMP_DIRECTORY));
      options.setOption(NEXT_PROTOCOL,bindAddress.getOption(NEXT_PROTOCOL));
      options.setOption(ORIGIN_SECURITY,bindAddress.getOption(ORIGIN_SECURITY));
      options.setOption(GATEWAY_ORIGIN_SECURITY,bindAddress.getOption(GATEWAY_ORIGIN_SECURITY));
      options.setOption(BALANCE_ORIGINS,bindAddress.getOption(BALANCE_ORIGINS));
      return addressFactory.newResourceAddress(resourcesURI,options);
    }
  }
;
}","@Override protected Bindings<HttpBinding> initBindings(){
  return new HttpBindings(){
    @Override protected HttpBinding bindAdditionalAddressesIfNecessary(    HttpBinding newHttpBinding){
      HttpBinding httpBinding=addBinding0(newHttpBinding);
      if (httpBinding == null) {
        ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
        HttpAcceptor.this.bind(resourcesAddress,httpResourcesHandler,null);
      }
      return httpBinding;
    }
    @Override protected boolean unbindAdditionalAddressesIfNecessary(    ResourceAddress address,    HttpBinding newHttpBinding){
      ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
      if (newHttpBinding.size() == 1 && newHttpBinding.get(resourcesAddress.getResource().getPath()) != null) {
        HttpAcceptor.this.unbind(resourcesAddress);
        return true;
      }
      return false;
    }
    private ResourceAddress getResourcesAddress(    HttpBinding newHttpBinding){
      ResourceAddress bindAddress=newHttpBinding.bindAddress();
      String location=bindAddress.getExternalURI();
      String resourcesURI=URIUtils.resolve(location,""String_Node_Str"");
      ResourceOptions options=ResourceOptions.FACTORY.newResourceOptions();
      options.setOption(TRANSPORT_URI,bindAddress.getOption(TRANSPORT_URI));
      options.setOption(TRANSPORT,bindAddress.getOption(TRANSPORT));
      options.setOption(TEMP_DIRECTORY,bindAddress.getOption(TEMP_DIRECTORY));
      options.setOption(NEXT_PROTOCOL,bindAddress.getOption(NEXT_PROTOCOL));
      options.setOption(ORIGIN_SECURITY,bindAddress.getOption(ORIGIN_SECURITY));
      options.setOption(GATEWAY_ORIGIN_SECURITY,bindAddress.getOption(GATEWAY_ORIGIN_SECURITY));
      options.setOption(BALANCE_ORIGINS,bindAddress.getOption(BALANCE_ORIGINS));
      return addressFactory.newResourceAddress(resourcesURI,options);
    }
  }
;
}"
96498,"protected boolean unbindAdditionalAddressesIfNecessary(ResourceAddress address,HttpBinding newHttpBinding){
  ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
  if (newHttpBinding.size() == 1 && newHttpBinding.get(resourcesAddress.getResource().getPath()) != null) {
    HttpAcceptor.this.unbind(resourcesAddress);
    return true;
  }
  return false;
}","@Override protected boolean unbindAdditionalAddressesIfNecessary(ResourceAddress address,HttpBinding newHttpBinding){
  ResourceAddress resourcesAddress=getResourcesAddress(newHttpBinding);
  if (newHttpBinding.size() == 1 && newHttpBinding.get(resourcesAddress.getResource().getPath()) != null) {
    HttpAcceptor.this.unbind(resourcesAddress);
    return true;
  }
  return false;
}"
96499,"static HttpRequestMessage asElevatedRequest(IoSession ioSession) throws Exception {
  DefaultHttpSession session=(DefaultHttpSession)ioSession;
  HttpRequestMessage req=new HttpRequestMessage();
  req.setVersion(session.getVersion());
  req.setMethod(session.getMethod());
  req.setParameters(session.getParameters());
  req.setRequestURI(session.getRequestURI());
  req.setSecure(session.isSecure());
  req.setCookies(session.getReadCookies());
  String contentLengthStr=session.getReadHeader(""String_Node_Str"");
  if (contentLengthStr != null && !""String_Node_Str"".equals(contentLengthStr)) {
    IoBufferAllocatorEx<? extends HttpBuffer> allocator=session.getBufferAllocator();
    HttpContentMessage httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),false);
    req.setContent(httpContent);
  }
  Map<String,List<String>> requestHeaders=new HashMap<>(session.getReadHeaders());
  req.setHeaders(requestHeaders);
  HttpUtils.restrictHeaders(req,HTTPXE_ENVELOPE_HEADERS);
  DefaultHttpSession httpSession=session;
  Map<String,List<String>> sessionHeaders=new HashMap<>(httpSession.getReadHeaders());
  sessionHeaders.put(HEADER_CONTENT_TYPE,asList(CONTENT_TYPE_APPLICATION_X_MESSAGE_HTTP));
  httpSession.setReadHeaders(sessionHeaders);
  return req;
}","static HttpRequestMessage asElevatedRequest(IoSession ioSession) throws Exception {
  DefaultHttpSession session=(DefaultHttpSession)ioSession;
  HttpRequestMessage req=new HttpRequestMessage();
  req.setVersion(session.getVersion());
  req.setMethod(session.getMethod());
  req.setParameters(session.getParameters());
  req.setRequestURI(session.getRequestURI());
  req.setSecure(session.isSecure());
  req.setCookies(session.getReadCookies());
  String contentLengthStr=session.getReadHeader(""String_Node_Str"");
  if (contentLengthStr != null && !""String_Node_Str"".equals(contentLengthStr)) {
    IoBufferAllocatorEx<? extends HttpBuffer> allocator=session.getBufferAllocator();
    HttpContentMessage httpContent=new HttpContentMessage(allocator.wrap(allocator.allocate(0)),false);
    req.setContent(httpContent);
  }
  Map<String,List<String>> requestHeaders=new HashMap<>(session.getReadHeaders());
  req.setHeaders(requestHeaders);
  HttpUtils.restrictHeaders(req,HTTPXE_ENVELOPE_HEADERS);
  req.setSubject(session.getSubject());
  req.setLoginContext(session.getLoginContext());
  DefaultHttpSession httpSession=session;
  Map<String,List<String>> sessionHeaders=new HashMap<>(httpSession.getReadHeaders());
  sessionHeaders.put(HEADER_CONTENT_TYPE,asList(CONTENT_TYPE_APPLICATION_X_MESSAGE_HTTP));
  httpSession.setReadHeaders(sessionHeaders);
  return req;
}"
96500,"private static ResourceAddress httpAddress(){
  ResourceAddressFactory addressFactory=ResourceAddressFactory.newResourceAddressFactory();
  String address=""String_Node_Str"";
  return addressFactory.newResourceAddress(URI.create(address));
}","private static ResourceAddress httpAddress(){
  ResourceAddressFactory addressFactory=ResourceAddressFactory.newResourceAddressFactory();
  String address=""String_Node_Str"";
  return addressFactory.newResourceAddress(address);
}"
96501,"private void validateMessageSize(long messageSize) throws ProtocolDecoderException {
  if (maxMessageSize > 0 && (messageSize < 0 || messageSize > maxMessageSize)) {
    throw new ProtocolDecoderException(String.format(""String_Node_Str"",messageSize,maxMessageSize));
  }
}","private void validateMessageSize(long messageSize) throws WSMessageTooLongException {
  if (maxMessageSize > 0 && (messageSize < 0 || messageSize > maxMessageSize)) {
    throw new WSMessageTooLongException(String.format(""String_Node_Str"",messageSize,maxMessageSize));
  }
}"
96502,"@Override protected Object doFilterWriteWsClose(final NextFilter nextFilter,final IoSession session,WriteRequest writeRequest,WsCloseMessage message) throws Exception {
  if (!session.isConnected()) {
    if (logger != null && logger.isTraceEnabled()) {
      logger.trace(format(""String_Node_Str""));
    }
    nextFilter.filterClose(session);
    return null;
  }
  if (sentCloseFrame.compareAndSet(false,true)) {
    if (receivedCloseFrame.get() == false) {
      if (logger != null && logger.isTraceEnabled()) {
        logger.trace(format(""String_Node_Str"",closeTimeout));
      }
      closeNextFilter=nextFilter;
      closeSession=session;
      closeFuture=scheduler.schedule(WsCloseFilter.this,closeTimeout,TimeUnit.MILLISECONDS);
      WriteFuture writeFuture=writeRequest.getFuture();
      writeFuture.addListener(new IoFutureListener<WriteFuture>(){
        @Override public void operationComplete(        WriteFuture future){
          if (future.isWritten()) {
            session.suspendWrite();
          }
 else {
            if (logger != null && logger.isTraceEnabled()) {
              logger.trace(format(""String_Node_Str"",future.getException()));
            }
            nextFilter.filterClose(session);
          }
        }
      }
);
    }
 else {
      if (logger != null && logger.isTraceEnabled()) {
        logger.trace(format(""String_Node_Str"",message));
      }
    }
    return message;
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(format(""String_Node_Str"",message));
    }
  }
  return null;
}","@Override protected Object doFilterWriteWsClose(final NextFilter nextFilter,final IoSession session,WriteRequest writeRequest,WsCloseMessage message) throws Exception {
  if (!session.isConnected()) {
    if (logger != null && logger.isTraceEnabled()) {
      logger.trace(format(""String_Node_Str""));
    }
    nextFilter.filterClose(session);
    return null;
  }
  if (sentCloseFrame.compareAndSet(false,true)) {
    if (receivedCloseFrame.get() == false) {
      if (logger != null && logger.isTraceEnabled()) {
        logger.trace(format(""String_Node_Str"",message,closeTimeout));
      }
      closeNextFilter=nextFilter;
      closeSession=session;
      closeFuture=scheduler.schedule(WsCloseFilter.this,closeTimeout,TimeUnit.MILLISECONDS);
      WriteFuture writeFuture=writeRequest.getFuture();
      writeFuture.addListener(new IoFutureListener<WriteFuture>(){
        @Override public void operationComplete(        WriteFuture future){
          if (future.isWritten()) {
            session.suspendWrite();
          }
 else {
            if (logger != null && logger.isTraceEnabled()) {
              logger.trace(format(""String_Node_Str"",future.getException()));
            }
            nextFilter.filterClose(session);
          }
        }
      }
);
    }
 else {
      if (logger != null && logger.isTraceEnabled()) {
        logger.trace(format(""String_Node_Str"",message));
      }
    }
    return message;
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(format(""String_Node_Str"",message));
    }
  }
  return null;
}"
96503,"@Override public void filterClose(final NextFilter nextFilter,final IoSession session) throws Exception {
  if (timedOut.get() == true) {
    nextFilter.filterClose(session);
    return;
  }
  if (!session.isConnected()) {
    if (logger != null && logger.isTraceEnabled()) {
      logger.trace(format(""String_Node_Str""));
    }
    nextFilter.filterClose(session);
    return;
  }
  if (sentCloseFrame.get() == false) {
    WsnSession wsnSession=SESSION_KEY.get(session);
    Throwable cause=wsnSession == null ? null : wsnSession.getCloseException();
    WsCloseMessage closeMessage;
    if (cause != null && cause instanceof ProtocolDecoderException) {
      closeMessage=WsCloseMessage.PROTOCOL_ERROR;
    }
 else {
      closeMessage=WsCloseMessage.NORMAL_CLOSE;
    }
    WriteFutureEx writeFuture=new DefaultWriteFutureEx(session);
    WriteRequestEx writeRequest=new DefaultWriteRequestEx(closeMessage,writeFuture);
    if (receivedCloseFrame.get() == true) {
      writeFuture.addListener(new IoFutureListener<WriteFuture>(){
        @Override public void operationComplete(        WriteFuture future){
          if (future.isWritten()) {
            if (closeFuture != null && closeFuture.isDone() == false) {
              closeFuture.cancel(true);
            }
            nextFilter.filterClose(session);
          }
 else {
            if (logger != null && logger.isTraceEnabled()) {
              logger.trace(format(""String_Node_Str"",future.getException()));
            }
            nextFilter.filterClose(session);
          }
        }
      }
);
    }
    super.filterWrite(nextFilter,session,writeRequest);
  }
 else {
    if (receivedCloseFrame.get() == true) {
      if (closeFuture != null && closeFuture.isDone() == false) {
        closeFuture.cancel(true);
      }
      nextFilter.filterClose(session);
    }
  }
}","@Override public void filterClose(final NextFilter nextFilter,final IoSession session) throws Exception {
  if (timedOut.get() == true) {
    nextFilter.filterClose(session);
    return;
  }
  if (!session.isConnected()) {
    if (logger != null && logger.isTraceEnabled()) {
      logger.trace(format(""String_Node_Str""));
    }
    nextFilter.filterClose(session);
    return;
  }
  if (sentCloseFrame.get() == false) {
    WsnSession wsnSession=SESSION_KEY.get(session);
    Throwable cause=wsnSession == null ? null : wsnSession.getCloseException();
    WsCloseMessage closeMessage;
    if (cause != null) {
      if (cause instanceof WSMessageTooLongException) {
        closeMessage=WsCloseMessage.MESSAGE_TOO_LONG_ERROR;
      }
 else       if (cause instanceof ProtocolDecoderException) {
        closeMessage=WsCloseMessage.PROTOCOL_ERROR;
      }
 else {
        closeMessage=WsCloseMessage.NORMAL_CLOSE;
      }
    }
 else {
      closeMessage=WsCloseMessage.NORMAL_CLOSE;
    }
    WriteFutureEx writeFuture=new DefaultWriteFutureEx(session);
    WriteRequestEx writeRequest=new DefaultWriteRequestEx(closeMessage,writeFuture);
    if (receivedCloseFrame.get() == true) {
      writeFuture.addListener(new IoFutureListener<WriteFuture>(){
        @Override public void operationComplete(        WriteFuture future){
          if (future.isWritten()) {
            if (closeFuture != null && closeFuture.isDone() == false) {
              closeFuture.cancel(true);
            }
            nextFilter.filterClose(session);
          }
 else {
            if (logger != null && logger.isTraceEnabled()) {
              logger.trace(format(""String_Node_Str"",future.getException()));
            }
            nextFilter.filterClose(session);
          }
        }
      }
);
    }
    super.filterWrite(nextFilter,session,writeRequest);
  }
 else {
    if (receivedCloseFrame.get() == true) {
      if (closeFuture != null && closeFuture.isDone() == false) {
        closeFuture.cancel(true);
      }
      nextFilter.filterClose(session);
    }
  }
}"
96504,"void managementServicesChanged(String changeType,String instanceKey,Collection<URI> managementServiceAccepts);","void managementServicesChanged(String changeType,String instanceKey,Collection<String> managementServiceAccepts);"
96505,"void balancerMapChanged(String changeType,URI balancerURI,Collection<URI> balanceeURIs);","void balancerMapChanged(String changeType,String balancerURI,Collection<String> balanceeURIs);"
96506,"/** 
 * Create a descriptive string for the type of connection that this session has been created on. This is generally just used in the Command Center. The following is the same as the insides of ResourceAddress.getProtocol(), which is private. NOTE: we're using BridgeSession.LOCAL_ADDRESS.get(session) to retrieve the address to send to management.
 */
public static String getSessionTypeName(ResourceAddress address){
  URI externalURI=address.getExternalURI();
  return externalURI.getScheme();
}","/** 
 * Create a descriptive string for the type of connection that this session has been created on. This is generally just used in the Command Center. The following is the same as the insides of ResourceAddress.getProtocol(), which is private. NOTE: we're using BridgeSession.LOCAL_ADDRESS.get(session) to retrieve the address to send to management.
 */
public static String getSessionTypeName(ResourceAddress address){
  String externalURI=address.getExternalURI();
  return URIUtils.getScheme(externalURI);
}"
96507,"@Override public String getCrossSiteConstraints(){
  Map<URI,? extends Map<String,? extends CrossSiteConstraintContext>> crossSiteConstraints=serviceContext.getCrossSiteConstraints();
  JSONArray jsonConstraints=new JSONArray();
  if ((crossSiteConstraints != null) && !crossSiteConstraints.isEmpty()) {
    Collection<? extends Map<String,? extends CrossSiteConstraintContext>> crossSiteConstraintsValues=crossSiteConstraints.values();
    if ((crossSiteConstraintsValues != null) && !crossSiteConstraintsValues.isEmpty()) {
      Map<String,? extends CrossSiteConstraintContext> constraintMap=crossSiteConstraintsValues.iterator().next();
      Collection<? extends CrossSiteConstraintContext> constraints=constraintMap.values();
      for (      CrossSiteConstraintContext constraint : constraints) {
        JSONObject jsonObj=new JSONObject();
        String allowHeaders=constraint.getAllowHeaders();
        String allowMethods=constraint.getAllowMethods();
        String allowOrigin=constraint.getAllowOrigin();
        Integer maxAge=constraint.getMaximumAge();
        try {
          jsonObj.put(""String_Node_Str"",allowOrigin);
          jsonObj.put(""String_Node_Str"",allowMethods);
          if (allowHeaders != null) {
            jsonObj.put(""String_Node_Str"",allowHeaders);
          }
          if (maxAge != null) {
            jsonObj.put(""String_Node_Str"",maxAge);
          }
          jsonConstraints.put(jsonObj);
        }
 catch (        Exception ex) {
        }
      }
    }
  }
  return jsonConstraints.toString();
}","@Override public String getCrossSiteConstraints(){
  Map<String,? extends Map<String,? extends CrossSiteConstraintContext>> crossSiteConstraints=serviceContext.getCrossSiteConstraints();
  JSONArray jsonConstraints=new JSONArray();
  if ((crossSiteConstraints != null) && !crossSiteConstraints.isEmpty()) {
    Collection<? extends Map<String,? extends CrossSiteConstraintContext>> crossSiteConstraintsValues=crossSiteConstraints.values();
    if ((crossSiteConstraintsValues != null) && !crossSiteConstraintsValues.isEmpty()) {
      Map<String,? extends CrossSiteConstraintContext> constraintMap=crossSiteConstraintsValues.iterator().next();
      Collection<? extends CrossSiteConstraintContext> constraints=constraintMap.values();
      for (      CrossSiteConstraintContext constraint : constraints) {
        JSONObject jsonObj=new JSONObject();
        String allowHeaders=constraint.getAllowHeaders();
        String allowMethods=constraint.getAllowMethods();
        String allowOrigin=constraint.getAllowOrigin();
        Integer maxAge=constraint.getMaximumAge();
        try {
          jsonObj.put(""String_Node_Str"",allowOrigin);
          jsonObj.put(""String_Node_Str"",allowMethods);
          if (allowHeaders != null) {
            jsonObj.put(""String_Node_Str"",allowHeaders);
          }
          if (maxAge != null) {
            jsonObj.put(""String_Node_Str"",maxAge);
          }
          jsonConstraints.put(jsonObj);
        }
 catch (        Exception ex) {
        }
      }
    }
  }
  return jsonConstraints.toString();
}"
96508,"@Override public String getAccepts(){
  if (serviceContext.supportsAccepts()) {
    Collection<URI> accepts=serviceContext.getAccepts();
    return accepts == null ? ""String_Node_Str"" : new JSONArray(accepts).toString();
  }
 else {
    return null;
  }
}","@Override public String getAccepts(){
  if (serviceContext.supportsAccepts()) {
    Collection<String> accepts=serviceContext.getAccepts();
    return accepts == null ? ""String_Node_Str"" : new JSONArray(accepts).toString();
  }
 else {
    return null;
  }
}"
96509,"@Override public String getConnects(){
  if (serviceContext.supportsConnects()) {
    Collection<URI> connects=serviceContext.getConnects();
    return connects == null ? ""String_Node_Str"" : new JSONArray(connects).toString();
  }
 else {
    return null;
  }
}","@Override public String getConnects(){
  if (serviceContext.supportsConnects()) {
    Collection<String> connects=serviceContext.getConnects();
    return connects == null ? ""String_Node_Str"" : new JSONArray(connects).toString();
  }
 else {
    return null;
  }
}"
96510,"@Override public String getBalances(){
  Collection<URI> balances=serviceContext.getBalances();
  return balances == null ? ""String_Node_Str"" : new JSONArray(balances).toString();
}","@Override public String getBalances(){
  Collection<String> balances=serviceContext.getBalances();
  return balances == null ? ""String_Node_Str"" : new JSONArray(balances).toString();
}"
96511,"@Override public String getConnectOptions(){
  if (serviceContext.supportsConnects()) {
    ConnectOptionsContext context=serviceContext.getConnectOptionsContext();
    JSONObject jsonOptions=new JSONObject();
    try {
      if (context != null) {
        Map<String,Object> connectOptions=context.asOptionsMap();
        String[] sslCiphersArray=(String[])connectOptions.remove(""String_Node_Str"");
        if (sslCiphersArray != null) {
          List<String> sslCiphers=Arrays.asList(sslCiphersArray);
          if (sslCiphers.size() > 0) {
            jsonOptions.put(""String_Node_Str"",sslCiphers);
          }
        }
        String[] sslProtocolsArray=(String[])connectOptions.remove(""String_Node_Str"");
        if (sslProtocolsArray != null) {
          List<String> sslProtocols=Arrays.asList(sslProtocolsArray);
          if (sslProtocols.size() > 0) {
            jsonOptions.put(""String_Node_Str"",sslProtocols);
          }
        }
        connectOptions.remove(WS_PROTOCOL_VERSION);
        String wsVersion=(String)connectOptions.remove(""String_Node_Str"");
        if (wsVersion != null) {
          jsonOptions.put(""String_Node_Str"",wsVersion);
        }
        URI pipeTransport=(URI)connectOptions.remove(""String_Node_Str"");
        if (pipeTransport != null) {
          jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
        }
        URI tcpTransport=(URI)connectOptions.remove(""String_Node_Str"");
        if (tcpTransport != null) {
          jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
        }
        URI sslTransport=(URI)connectOptions.remove(""String_Node_Str"");
        if (sslTransport != null) {
          jsonOptions.put(""String_Node_Str"",sslTransport.toString());
        }
        URI httpTransport=(URI)connectOptions.remove(""String_Node_Str"");
        if (httpTransport != null) {
          jsonOptions.put(""String_Node_Str"",httpTransport.toString());
        }
        Long inactivityTimeout=(Long)connectOptions.remove(INACTIVITY_TIMEOUT);
        if (inactivityTimeout != null) {
          jsonOptions.put(""String_Node_Str"",inactivityTimeout);
        }
        Boolean sslEncryptionEnabled=(Boolean)connectOptions.remove(SSL_ENCRYPTION_ENABLED);
        if ((sslEncryptionEnabled != null) && Boolean.FALSE.equals(sslEncryptionEnabled)) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
        String udpInterface=(String)connectOptions.remove(""String_Node_Str"");
        if (udpInterface != null) {
          jsonOptions.put(""String_Node_Str"",udpInterface);
        }
        Integer httpKeepaliveTimeout=(Integer)connectOptions.remove(HTTP_KEEP_ALIVE_TIMEOUT_KEY);
        if (httpKeepaliveTimeout != null) {
          jsonOptions.put(""String_Node_Str"",httpKeepaliveTimeout);
        }
        Boolean httpKeepalive=(Boolean)connectOptions.remove(HTTP_KEEP_ALIVE);
        if (httpKeepalive != null) {
          if (Boolean.FALSE.equals(httpKeepalive)) {
            jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
        for (        Entry<String,Object> entry : connectOptions.entrySet()) {
          String key=entry.getKey();
          Object value=entry.getValue();
          if (value instanceof String[]) {
            jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
          }
 else {
            jsonOptions.put(key,value);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
    return jsonOptions.toString();
  }
 else {
    return null;
  }
}","@Override public String getConnectOptions(){
  if (serviceContext.supportsConnects()) {
    ConnectOptionsContext context=serviceContext.getConnectOptionsContext();
    JSONObject jsonOptions=new JSONObject();
    try {
      if (context != null) {
        Map<String,Object> connectOptions=context.asOptionsMap();
        String[] sslCiphersArray=(String[])connectOptions.remove(""String_Node_Str"");
        if (sslCiphersArray != null) {
          List<String> sslCiphers=Arrays.asList(sslCiphersArray);
          if (sslCiphers.size() > 0) {
            jsonOptions.put(""String_Node_Str"",sslCiphers);
          }
        }
        String[] sslProtocolsArray=(String[])connectOptions.remove(""String_Node_Str"");
        if (sslProtocolsArray != null) {
          List<String> sslProtocols=Arrays.asList(sslProtocolsArray);
          if (sslProtocols.size() > 0) {
            jsonOptions.put(""String_Node_Str"",sslProtocols);
          }
        }
        connectOptions.remove(WS_PROTOCOL_VERSION);
        String wsVersion=(String)connectOptions.remove(""String_Node_Str"");
        if (wsVersion != null) {
          jsonOptions.put(""String_Node_Str"",wsVersion);
        }
        String pipeTransport=(String)connectOptions.remove(""String_Node_Str"");
        if (pipeTransport != null) {
          jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
        }
        String tcpTransport=(String)connectOptions.remove(""String_Node_Str"");
        if (tcpTransport != null) {
          jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
        }
        String sslTransport=(String)connectOptions.remove(""String_Node_Str"");
        if (sslTransport != null) {
          jsonOptions.put(""String_Node_Str"",sslTransport.toString());
        }
        String httpTransport=(String)connectOptions.remove(""String_Node_Str"");
        if (httpTransport != null) {
          jsonOptions.put(""String_Node_Str"",httpTransport.toString());
        }
        Long inactivityTimeout=(Long)connectOptions.remove(INACTIVITY_TIMEOUT);
        if (inactivityTimeout != null) {
          jsonOptions.put(""String_Node_Str"",inactivityTimeout);
        }
        Boolean sslEncryptionEnabled=(Boolean)connectOptions.remove(SSL_ENCRYPTION_ENABLED);
        if ((sslEncryptionEnabled != null) && Boolean.FALSE.equals(sslEncryptionEnabled)) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
        String udpInterface=(String)connectOptions.remove(""String_Node_Str"");
        if (udpInterface != null) {
          jsonOptions.put(""String_Node_Str"",udpInterface);
        }
        Integer httpKeepaliveTimeout=(Integer)connectOptions.remove(HTTP_KEEP_ALIVE_TIMEOUT_KEY);
        if (httpKeepaliveTimeout != null) {
          jsonOptions.put(""String_Node_Str"",httpKeepaliveTimeout);
        }
        Boolean httpKeepalive=(Boolean)connectOptions.remove(HTTP_KEEP_ALIVE);
        if (httpKeepalive != null) {
          if (Boolean.FALSE.equals(httpKeepalive)) {
            jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
        for (        Entry<String,Object> entry : connectOptions.entrySet()) {
          String key=entry.getKey();
          Object value=entry.getValue();
          if (value instanceof String[]) {
            jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
          }
 else {
            jsonOptions.put(key,value);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
    return jsonOptions.toString();
  }
 else {
    return null;
  }
}"
96512,"@Override public String getAcceptOptions(){
  if (serviceContext.supportsAccepts()) {
    AcceptOptionsContext context=serviceContext.getAcceptOptionsContext();
    JSONObject jsonOptions=new JSONObject();
    JSONObject jsonObj;
    try {
      if (context != null) {
        Map<String,Object> acceptOptions=context.asOptionsMap();
        Map<String,String> binds=context.getBinds();
        if ((binds != null) && !binds.isEmpty()) {
          jsonObj=new JSONObject();
          for (          String key : binds.keySet()) {
            jsonObj.put(key,binds.get(key));
          }
          jsonOptions.put(""String_Node_Str"",jsonObj);
        }
        String[] sslCiphers=(String[])acceptOptions.remove(""String_Node_Str"");
        if (sslCiphers != null) {
          String cipherString=Utils.asCommaSeparatedString(asList(sslCiphers));
          if (cipherString != null && cipherString.length() > 0) {
            jsonOptions.put(""String_Node_Str"",cipherString);
          }
        }
        boolean isSslEncryptionEnabled=(Boolean)acceptOptions.remove(""String_Node_Str"");
        jsonOptions.put(""String_Node_Str"",isSslEncryptionEnabled ? ""String_Node_Str"" : ""String_Node_Str"");
        boolean wantClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
        boolean needClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
        if (needClientAuth) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (wantClientAuth) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
        acceptOptions.remove(SUPPORTED_PROTOCOLS);
        jsonOptions.put(""String_Node_Str"",acceptOptions.remove(""String_Node_Str""));
        Long wsInactivityTimeout=(Long)acceptOptions.remove(""String_Node_Str"");
        if (wsInactivityTimeout != null) {
          jsonOptions.put(""String_Node_Str"",wsInactivityTimeout);
        }
        Integer httpKeepAlive=(Integer)acceptOptions.remove(""String_Node_Str"");
        if (httpKeepAlive != null) {
          jsonOptions.put(""String_Node_Str"",httpKeepAlive);
        }
        URI pipeTransport=(URI)acceptOptions.remove(""String_Node_Str"");
        if (pipeTransport != null) {
          jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
        }
        URI tcpTransport=(URI)acceptOptions.remove(""String_Node_Str"");
        if (tcpTransport != null) {
          jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
        }
        URI sslTransport=(URI)acceptOptions.remove(""String_Node_Str"");
        if (sslTransport != null) {
          jsonOptions.put(""String_Node_Str"",sslTransport.toString());
        }
        URI httpTransport=(URI)acceptOptions.remove(""String_Node_Str"");
        if (httpTransport != null) {
          jsonOptions.put(""String_Node_Str"",httpTransport.toString());
        }
        long tcpMaxOutboundRate=(Long)acceptOptions.remove(""String_Node_Str"");
        jsonOptions.put(""String_Node_Str"",tcpMaxOutboundRate);
        for (        Entry<String,Object> entry : acceptOptions.entrySet()) {
          String key=entry.getKey();
          if (key.startsWith(""String_Node_Str"") && (key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str""))) {
            continue;
          }
          Object value=entry.getValue();
          if (value instanceof String[]) {
            jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
          }
 else {
            jsonOptions.put(key,value);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
    return jsonOptions.toString();
  }
 else {
    return null;
  }
}","@Override public String getAcceptOptions(){
  if (serviceContext.supportsAccepts()) {
    AcceptOptionsContext context=serviceContext.getAcceptOptionsContext();
    JSONObject jsonOptions=new JSONObject();
    JSONObject jsonObj;
    try {
      if (context != null) {
        Map<String,Object> acceptOptions=context.asOptionsMap();
        Map<String,String> binds=context.getBinds();
        if ((binds != null) && !binds.isEmpty()) {
          jsonObj=new JSONObject();
          for (          String key : binds.keySet()) {
            jsonObj.put(key,binds.get(key));
          }
          jsonOptions.put(""String_Node_Str"",jsonObj);
        }
        String[] sslCiphers=(String[])acceptOptions.remove(""String_Node_Str"");
        if (sslCiphers != null) {
          String cipherString=Utils.asCommaSeparatedString(asList(sslCiphers));
          if (cipherString != null && cipherString.length() > 0) {
            jsonOptions.put(""String_Node_Str"",cipherString);
          }
        }
        boolean isSslEncryptionEnabled=(Boolean)acceptOptions.remove(""String_Node_Str"");
        jsonOptions.put(""String_Node_Str"",isSslEncryptionEnabled ? ""String_Node_Str"" : ""String_Node_Str"");
        boolean wantClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
        boolean needClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
        if (needClientAuth) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (wantClientAuth) {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
        }
        acceptOptions.remove(SUPPORTED_PROTOCOLS);
        jsonOptions.put(""String_Node_Str"",acceptOptions.remove(""String_Node_Str""));
        Long wsInactivityTimeout=(Long)acceptOptions.remove(""String_Node_Str"");
        if (wsInactivityTimeout != null) {
          jsonOptions.put(""String_Node_Str"",wsInactivityTimeout);
        }
        Integer httpKeepAlive=(Integer)acceptOptions.remove(""String_Node_Str"");
        if (httpKeepAlive != null) {
          jsonOptions.put(""String_Node_Str"",httpKeepAlive);
        }
        String pipeTransport=(String)acceptOptions.remove(""String_Node_Str"");
        if (pipeTransport != null) {
          jsonOptions.put(""String_Node_Str"",pipeTransport);
        }
        String tcpTransport=(String)acceptOptions.remove(""String_Node_Str"");
        if (tcpTransport != null) {
          jsonOptions.put(""String_Node_Str"",tcpTransport);
        }
        String sslTransport=(String)acceptOptions.remove(""String_Node_Str"");
        if (sslTransport != null) {
          jsonOptions.put(""String_Node_Str"",sslTransport);
        }
        String httpTransport=(String)acceptOptions.remove(""String_Node_Str"");
        if (httpTransport != null) {
          jsonOptions.put(""String_Node_Str"",httpTransport);
        }
        long tcpMaxOutboundRate=(Long)acceptOptions.remove(""String_Node_Str"");
        jsonOptions.put(""String_Node_Str"",tcpMaxOutboundRate);
        for (        Entry<String,Object> entry : acceptOptions.entrySet()) {
          String key=entry.getKey();
          if (key.startsWith(""String_Node_Str"") && (key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str""))) {
            continue;
          }
          Object value=entry.getValue();
          if (value instanceof String[]) {
            jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
          }
 else {
            jsonOptions.put(key,value);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
    return jsonOptions.toString();
  }
 else {
    return null;
  }
}"
96513,"@Override public String getConnectOptions(){
  ConnectOptionsContext context=serviceDefaultsContext.getConnectOptionsContext();
  JSONObject jsonOptions=new JSONObject();
  try {
    if (context != null) {
      Map<String,Object> connectOptions=context.asOptionsMap();
      String[] sslCiphersArray=(String[])connectOptions.remove(""String_Node_Str"");
      if (sslCiphersArray != null) {
        List<String> sslCiphers=Arrays.asList(sslCiphersArray);
        if (sslCiphers.size() > 0) {
          jsonOptions.put(""String_Node_Str"",sslCiphers);
        }
      }
      String wsVersion=(String)connectOptions.remove(""String_Node_Str"");
      if (wsVersion != null) {
        jsonOptions.put(""String_Node_Str"",wsVersion);
      }
      URI pipeTransport=(URI)connectOptions.remove(""String_Node_Str"");
      if (pipeTransport != null) {
        jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
      }
      URI tcpTransport=(URI)connectOptions.remove(""String_Node_Str"");
      if (tcpTransport != null) {
        jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
      }
      URI sslTransport=(URI)connectOptions.remove(""String_Node_Str"");
      if (sslTransport != null) {
        jsonOptions.put(""String_Node_Str"",sslTransport.toString());
      }
      URI httpTransport=(URI)connectOptions.remove(""String_Node_Str"");
      if (httpTransport != null) {
        jsonOptions.put(""String_Node_Str"",httpTransport.toString());
      }
      for (      Entry<String,Object> entry : connectOptions.entrySet()) {
        String key=entry.getKey();
        Object value=entry.getValue();
        if (value instanceof String[]) {
          jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
        }
 else {
          jsonOptions.put(key,value);
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return jsonOptions.toString();
}","@Override public String getConnectOptions(){
  ConnectOptionsContext context=serviceDefaultsContext.getConnectOptionsContext();
  JSONObject jsonOptions=new JSONObject();
  try {
    if (context != null) {
      Map<String,Object> connectOptions=context.asOptionsMap();
      String[] sslCiphersArray=(String[])connectOptions.remove(""String_Node_Str"");
      if (sslCiphersArray != null) {
        List<String> sslCiphers=Arrays.asList(sslCiphersArray);
        if (sslCiphers.size() > 0) {
          jsonOptions.put(""String_Node_Str"",sslCiphers);
        }
      }
      String wsVersion=(String)connectOptions.remove(""String_Node_Str"");
      if (wsVersion != null) {
        jsonOptions.put(""String_Node_Str"",wsVersion);
      }
      String pipeTransport=(String)connectOptions.remove(""String_Node_Str"");
      if (pipeTransport != null) {
        jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
      }
      String tcpTransport=(String)connectOptions.remove(""String_Node_Str"");
      if (tcpTransport != null) {
        jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
      }
      String sslTransport=(String)connectOptions.remove(""String_Node_Str"");
      if (sslTransport != null) {
        jsonOptions.put(""String_Node_Str"",sslTransport.toString());
      }
      String httpTransport=(String)connectOptions.remove(""String_Node_Str"");
      if (httpTransport != null) {
        jsonOptions.put(""String_Node_Str"",httpTransport.toString());
      }
      for (      Entry<String,Object> entry : connectOptions.entrySet()) {
        String key=entry.getKey();
        Object value=entry.getValue();
        if (value instanceof String[]) {
          jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
        }
 else {
          jsonOptions.put(key,value);
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return jsonOptions.toString();
}"
96514,"@Override public String getAcceptOptions(){
  JSONObject jsonOptions=new JSONObject();
  JSONObject jsonObj;
  AcceptOptionsContext context=serviceDefaultsContext.getAcceptOptionsContext();
  try {
    if (context != null) {
      Map<String,Object> acceptOptions=context.asOptionsMap();
      Map<String,String> binds=context.getBinds();
      if ((binds != null) && !binds.isEmpty()) {
        jsonObj=new JSONObject();
        for (        String key : binds.keySet()) {
          jsonObj.put(key,binds.get(key));
        }
        jsonOptions.put(""String_Node_Str"",jsonObj);
      }
      String[] sslCiphers=(String[])acceptOptions.remove(""String_Node_Str"");
      if (sslCiphers != null && sslCiphers.length > 0) {
        jsonOptions.put(""String_Node_Str"",Utils.asCommaSeparatedString(asList(sslCiphers)));
      }
      boolean isSslEncryptionEnabled=(Boolean)acceptOptions.remove(""String_Node_Str"");
      jsonOptions.put(""String_Node_Str"",isSslEncryptionEnabled ? ""String_Node_Str"" : ""String_Node_Str"");
      boolean wantClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
      boolean needClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
      if (needClientAuth) {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (wantClientAuth) {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
      jsonOptions.put(""String_Node_Str"",acceptOptions.remove(""String_Node_Str""));
      Integer httpKeepAlive=(Integer)acceptOptions.remove(""String_Node_Str"");
      if (httpKeepAlive != null) {
        jsonOptions.put(""String_Node_Str"",httpKeepAlive);
      }
      URI pipeTransport=(URI)acceptOptions.remove(""String_Node_Str"");
      if (pipeTransport != null) {
        jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
      }
      URI tcpTransport=(URI)acceptOptions.remove(""String_Node_Str"");
      if (tcpTransport != null) {
        jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
      }
      URI sslTransport=(URI)acceptOptions.remove(""String_Node_Str"");
      if (sslTransport != null) {
        jsonOptions.put(""String_Node_Str"",sslTransport.toString());
      }
      URI httpTransport=(URI)acceptOptions.remove(""String_Node_Str"");
      if (httpTransport != null) {
        jsonOptions.put(""String_Node_Str"",httpTransport.toString());
      }
      long tcpMaxOutboundRate=(Long)acceptOptions.remove(""String_Node_Str"");
      jsonOptions.put(""String_Node_Str"",tcpMaxOutboundRate);
      for (      Entry<String,Object> entry : acceptOptions.entrySet()) {
        String key=entry.getKey();
        if (key.startsWith(""String_Node_Str"") && (key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str""))) {
          continue;
        }
        Object value=entry.getValue();
        if (value instanceof String[]) {
          jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
        }
 else {
          jsonOptions.put(key,value);
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return jsonOptions.toString();
}","@Override public String getAcceptOptions(){
  JSONObject jsonOptions=new JSONObject();
  JSONObject jsonObj;
  AcceptOptionsContext context=serviceDefaultsContext.getAcceptOptionsContext();
  try {
    if (context != null) {
      Map<String,Object> acceptOptions=context.asOptionsMap();
      Map<String,String> binds=context.getBinds();
      if ((binds != null) && !binds.isEmpty()) {
        jsonObj=new JSONObject();
        for (        String key : binds.keySet()) {
          jsonObj.put(key,binds.get(key));
        }
        jsonOptions.put(""String_Node_Str"",jsonObj);
      }
      String[] sslCiphers=(String[])acceptOptions.remove(""String_Node_Str"");
      if (sslCiphers != null && sslCiphers.length > 0) {
        jsonOptions.put(""String_Node_Str"",Utils.asCommaSeparatedString(asList(sslCiphers)));
      }
      boolean isSslEncryptionEnabled=(Boolean)acceptOptions.remove(""String_Node_Str"");
      jsonOptions.put(""String_Node_Str"",isSslEncryptionEnabled ? ""String_Node_Str"" : ""String_Node_Str"");
      boolean wantClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
      boolean needClientAuth=(Boolean)acceptOptions.remove(""String_Node_Str"");
      if (needClientAuth) {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (wantClientAuth) {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        jsonOptions.put(""String_Node_Str"",""String_Node_Str"");
      }
      jsonOptions.put(""String_Node_Str"",acceptOptions.remove(""String_Node_Str""));
      Integer httpKeepAlive=(Integer)acceptOptions.remove(""String_Node_Str"");
      if (httpKeepAlive != null) {
        jsonOptions.put(""String_Node_Str"",httpKeepAlive);
      }
      String pipeTransport=(String)acceptOptions.remove(""String_Node_Str"");
      if (pipeTransport != null) {
        jsonOptions.put(""String_Node_Str"",pipeTransport.toString());
      }
      String tcpTransport=(String)acceptOptions.remove(""String_Node_Str"");
      if (tcpTransport != null) {
        jsonOptions.put(""String_Node_Str"",tcpTransport.toString());
      }
      String sslTransport=(String)acceptOptions.remove(""String_Node_Str"");
      if (sslTransport != null) {
        jsonOptions.put(""String_Node_Str"",sslTransport.toString());
      }
      String httpTransport=(String)acceptOptions.remove(""String_Node_Str"");
      if (httpTransport != null) {
        jsonOptions.put(""String_Node_Str"",httpTransport.toString());
      }
      long tcpMaxOutboundRate=(Long)acceptOptions.remove(""String_Node_Str"");
      jsonOptions.put(""String_Node_Str"",tcpMaxOutboundRate);
      for (      Entry<String,Object> entry : acceptOptions.entrySet()) {
        String key=entry.getKey();
        if (key.startsWith(""String_Node_Str"") && (key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str"") || key.endsWith(""String_Node_Str""))) {
          continue;
        }
        Object value=entry.getValue();
        if (value instanceof String[]) {
          jsonOptions.put(key,Utils.asCommaSeparatedString(asList((String[])value)));
        }
 else {
          jsonOptions.put(key,value);
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return jsonOptions.toString();
}"
96515,"@Override public void entryAdded(EntryEvent<MemberId,Collection<URI>> event){
  MemberId memberId=event.getKey();
  String instanceKey=clusterContext.getInstanceKey(memberId);
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.managementServicesChanged(""String_Node_Str"",instanceKey,event.getValue());
  }
}","@Override public void entryAdded(EntryEvent<MemberId,Collection<String>> event){
  MemberId memberId=event.getKey();
  String instanceKey=clusterContext.getInstanceKey(memberId);
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.managementServicesChanged(""String_Node_Str"",instanceKey,event.getValue());
  }
}"
96516,"@Override public void memberRemoved(MemberId removedMember){
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<MemberId,Collection<URI>> managementServiceUriMap=factory.getMap(ManagementService.MANAGEMENT_SERVICE_MAP_NAME);
  managementServiceUriMap.remove(removedMember);
}","@Override public void memberRemoved(MemberId removedMember){
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<MemberId,Collection<String>> managementServiceUriMap=factory.getMap(ManagementService.MANAGEMENT_SERVICE_MAP_NAME);
  managementServiceUriMap.remove(removedMember);
}"
96517,"@Override public String getClusterMembers(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Collection<MemberId> memberIds=clusterContext.getMemberIds();
  Map<MemberId,Map<URI,List<URI>>> memberIdBalancerMap=factory.getMap(HttpBalancerService.MEMBERID_BALANCER_MAP_NAME);
  JSONObject jsonObj=new JSONObject();
  try {
    for (    MemberId memberId : memberIds) {
      String instanceKey=clusterContext.getInstanceKey(memberId);
      Map<URI,List<URI>> balancerURIMap=memberIdBalancerMap.get(memberId);
      if (balancerURIMap != null) {
        JSONObject uriMap=new JSONObject();
        for (        URI balancerURI : balancerURIMap.keySet()) {
          List<URI> balanceeURIs=balancerURIMap.get(balancerURI);
          JSONArray jsonArray=new JSONArray();
          for (          URI balanceeURI : balanceeURIs) {
            jsonArray.put(balanceeURI.toString());
          }
          uriMap.put(balancerURI.toString(),jsonArray);
        }
        jsonObj.put(instanceKey,uriMap);
      }
 else {
        jsonObj.put(instanceKey,JSONObject.NULL);
      }
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}","@Override public String getClusterMembers(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Collection<MemberId> memberIds=clusterContext.getMemberIds();
  Map<MemberId,Map<String,List<String>>> memberIdBalancerMap=factory.getMap(HttpBalancerService.MEMBERID_BALANCER_MAP_NAME);
  JSONObject jsonObj=new JSONObject();
  try {
    for (    MemberId memberId : memberIds) {
      String instanceKey=clusterContext.getInstanceKey(memberId);
      Map<String,List<String>> balancerURIMap=memberIdBalancerMap.get(memberId);
      if (balancerURIMap != null) {
        JSONObject uriMap=new JSONObject();
        for (        String balancerURI : balancerURIMap.keySet()) {
          List<String> balanceeURIs=balancerURIMap.get(balancerURI);
          JSONArray jsonArray=new JSONArray();
          for (          String balanceeURI : balanceeURIs) {
            jsonArray.put(balanceeURI);
          }
          uriMap.put(balancerURI,jsonArray);
        }
        jsonObj.put(instanceKey,uriMap);
      }
 else {
        jsonObj.put(instanceKey,JSONObject.NULL);
      }
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}"
96518,"@Override public String getClusterBalancerMap(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<URI,Collection<URI>> balancers=factory.getMap(HttpBalancerService.BALANCER_MAP_NAME);
  if ((balancers == null) || balancers.isEmpty()) {
    return ""String_Node_Str"";
  }
  JSONObject jsonObj=new JSONObject();
  try {
    for (    URI uri : balancers.keySet()) {
      Collection<URI> balancees=balancers.get(uri);
      if (balancees != null && balancees.size() > 0) {
        JSONArray jsonArray=new JSONArray();
        for (        URI balanceeURI : balancees) {
          jsonArray.put(balanceeURI.toString());
        }
        jsonObj.put(uri.toString(),jsonArray);
      }
 else {
        jsonObj.put(uri.toString(),JSONObject.NULL);
      }
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}","@Override public String getClusterBalancerMap(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<String,Collection<String>> balancers=factory.getMap(HttpBalancerService.BALANCER_MAP_NAME);
  if ((balancers == null) || balancers.isEmpty()) {
    return ""String_Node_Str"";
  }
  JSONObject jsonObj=new JSONObject();
  try {
    for (    String uri : balancers.keySet()) {
      Collection<String> balancees=balancers.get(uri);
      if (balancees != null && balancees.size() > 0) {
        JSONArray jsonArray=new JSONArray();
        for (        String balanceeURI : balancees) {
          jsonArray.put(balanceeURI);
        }
        jsonObj.put(uri,jsonArray);
      }
 else {
        jsonObj.put(uri,JSONObject.NULL);
      }
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}"
96519,"public void entryRemoved(EntryEvent<MemberId,Collection<URI>> event){
}","public void entryRemoved(EntryEvent<MemberId,Collection<String>> event){
}"
96520,"public void entryUpdated(EntryEvent<MemberId,Collection<URI>> event){
}","public void entryUpdated(EntryEvent<MemberId,Collection<String>> event){
}"
96521,"@Override public void balancerEntryAdded(URI balancerURI,Collection<URI> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}","@Override public void balancerEntryAdded(String balancerURI,Collection<String> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}"
96522,"@Override public String getManagementServiceMap(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<MemberId,Collection<URI>> managementServices=factory.getMap(ManagementService.MANAGEMENT_SERVICE_MAP_NAME);
  if ((managementServices == null) || managementServices.isEmpty()) {
    return ""String_Node_Str"";
  }
  JSONObject jsonObj=new JSONObject();
  try {
    for (    MemberId member : managementServices.keySet()) {
      String instanceKey=clusterContext.getInstanceKey(member);
      JSONArray jsonArray=new JSONArray();
      Collection<URI> acceptURIs=managementServices.get(member);
      if (acceptURIs != null) {
        for (        URI acceptURI : acceptURIs) {
          jsonArray.put(acceptURI.toString());
        }
      }
      jsonObj.put(instanceKey,jsonArray);
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}","@Override public String getManagementServiceMap(){
  if (clusterContext == null) {
    return ""String_Node_Str"";
  }
  CollectionsFactory factory=clusterContext.getCollectionsFactory();
  Map<MemberId,Collection<String>> managementServices=factory.getMap(ManagementService.MANAGEMENT_SERVICE_MAP_NAME);
  if ((managementServices == null) || managementServices.isEmpty()) {
    return ""String_Node_Str"";
  }
  JSONObject jsonObj=new JSONObject();
  try {
    for (    MemberId member : managementServices.keySet()) {
      String instanceKey=clusterContext.getInstanceKey(member);
      JSONArray jsonArray=new JSONArray();
      Collection<String> acceptURIs=managementServices.get(member);
      if (acceptURIs != null) {
        for (        String acceptURI : acceptURIs) {
          jsonArray.put(acceptURI);
        }
      }
      jsonObj.put(instanceKey,jsonArray);
    }
  }
 catch (  JSONException ex) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return jsonObj.toString();
}"
96523,"@Override public void balancerEntryRemoved(URI balancerURI,Collection<URI> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}","@Override public void balancerEntryRemoved(String balancerURI,Collection<String> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}"
96524,"public void entryEvicted(EntryEvent<MemberId,Collection<URI>> event){
}","public void entryEvicted(EntryEvent<MemberId,Collection<String>> event){
}"
96525,"@Override public void balancerEntryUpdated(URI balancerURI,Collection<URI> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}","@Override public void balancerEntryUpdated(String balancerURI,Collection<String> balanceeURIs){
  for (  ClusterManagementListener listener : clusterManagementListeners) {
    listener.balancerMapChanged(""String_Node_Str"",balancerURI,balanceeURIs);
  }
}"
96526,"@Test(expected=IllegalArgumentException.class) public void shouldNotUsePathInPipeURL() throws Exception {
  addressFactorySpi.newResourceAddress(""String_Node_Str"");
}","@Test public void shouldNotUsePathInPipeURL() throws Exception {
  expectedException.expect(IllegalArgumentException.class);
  expectedException.expectMessage(""String_Node_Str"" + ""String_Node_Str"");
  addressFactorySpi.newResourceAddress(""String_Node_Str"");
}"
96527,"@Test(expected=IllegalArgumentException.class) public void shouldNotUsePathInPipeURL() throws Exception {
  addressFactorySpi.newResourceAddress(URI.create(""String_Node_Str""));
}","@Test public void shouldNotUsePathInPipeURL() throws Exception {
  expectedException.expect(IllegalArgumentException.class);
  expectedException.expectMessage(""String_Node_Str"" + ""String_Node_Str"");
  addressFactorySpi.newResourceAddress(URI.create(""String_Node_Str""));
}"
96528,"@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  idleTracker.removeSession(session);
  if (session.isIoRegistered()) {
    session.getProcessor().remove(session);
  }
 else {
    session.setClosedReceived();
  }
}","@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  idleTracker.removeSession(session);
  if (session.isIoRegistered()) {
    if (currentThread() == session.getIoThread()) {
      session.getProcessor().remove(session);
    }
 else {
      session.getIoExecutor().execute(new Runnable(){
        @Override public void run(){
          session.getProcessor().remove(session);
        }
      }
);
    }
  }
 else {
    session.setClosedReceived();
  }
}"
96529,"@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  session.getProcessor().remove(session);
  idleTracker.removeSession(session);
}","@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  idleTracker.removeSession(session);
  if (session.isIoRegistered()) {
    session.getProcessor().remove(session);
  }
 else {
    session.setClosedReceived();
  }
}"
96530,"@Override protected void setIoAlignment0(Thread ioThread,Executor ioExecutor){
  NioSocketChannel channel=(NioSocketChannel)getChannel();
  if (ioExecutor == NO_EXECUTOR) {
    channel.setWorker(null);
  }
 else {
    NioWorker newWorker=((WorkerExecutor)ioExecutor).worker;
    channel.setWorker(newWorker);
  }
}","@Override protected void setIoAlignment0(Thread ioThread,Executor ioExecutor){
  NioSocketChannel channel=(NioSocketChannel)getChannel();
  if (ioExecutor == NO_EXECUTOR) {
    channel.setWorker(null);
  }
 else   if (isClosedReceived()) {
    getProcessor().remove(this);
  }
 else {
    NioWorker newWorker=((WorkerExecutor)ioExecutor).worker;
    channel.setWorker(newWorker);
  }
}"
96531,"@Test @Specification(""String_Node_Str"") @Ignore(""String_Node_Str"") public void clientAbruptlyClosesUpstream() throws Exception {
  final AtomicLong timeToClose=new AtomicLong(0);
  CountDownLatch closed=new CountDownLatch(1);
  acceptor.bind(""String_Node_Str"",new IoHandlerAdapter<IoSession>(){
    @Override protected void doSessionOpened(    IoSession session) throws Exception {
      final long start=currentTimeMillis();
      session.getCloseFuture().addListener(new IoFutureListener<IoFuture>(){
        @Override public void operationComplete(        IoFuture future){
          timeToClose.set(currentTimeMillis() - start);
          closed.countDown();
        }
      }
);
    }
  }
);
  k3po.finish();
  assertTrue(""String_Node_Str"",closed.await(4,SECONDS));
  assertTrue(format(""String_Node_Str"",timeToClose.get()),timeToClose.get() < 4000);
}","@Test @Specification(""String_Node_Str"") public void clientAbruptlyClosesUpstream() throws Exception {
  final AtomicLong timeToClose=new AtomicLong(0);
  CountDownLatch closed=new CountDownLatch(1);
  acceptor.bind(""String_Node_Str"",new IoHandlerAdapter<IoSession>(){
    @Override protected void doSessionOpened(    IoSession session) throws Exception {
      final long start=currentTimeMillis();
      session.getCloseFuture().addListener(new IoFutureListener<IoFuture>(){
        @Override public void operationComplete(        IoFuture future){
          timeToClose.set(currentTimeMillis() - start);
          closed.countDown();
        }
      }
);
    }
  }
);
  k3po.finish();
  assertTrue(""String_Node_Str"",closed.await(4,SECONDS));
  assertTrue(format(""String_Node_Str"",timeToClose.get()),timeToClose.get() < 4000);
}"
96532,"@Override protected void doMessageReceived(IoSessionEx session,Object message) throws Exception {
  IoFilterChain chain=((BridgeSession)session).getParent().getFilterChain();
  if (chain.contains(HttpAcceptFilter.SUBJECT_SECURITY.filterName())) {
    failures.incrementAndGet();
  }
  checkpoint();
  session.close(false).addListener(new IoFutureListener<CloseFuture>(){
    @Override public void operationComplete(    CloseFuture future){
      checkpoint();
    }
  }
);
}","@Override protected void doMessageReceived(final IoSessionEx session,Object message) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  DefaultHttpSession httpSession=(DefaultHttpSession)session;
  IoBufferAllocatorEx<?> allocator=httpSession.getBufferAllocator();
  httpSession.setStatus(HttpStatus.SUCCESS_OK);
  httpSession.setVersion(HttpVersion.HTTP_1_1);
  httpSession.setWriteHeader(""String_Node_Str"",""String_Node_Str"");
  httpSession.write(allocator.wrap(ByteBuffer.wrap(""String_Node_Str"".getBytes()))).addListener(new IoFutureListener<IoFuture>(){
    @Override public void operationComplete(    IoFuture future){
      BridgeSession bridgeSession=(BridgeSession)session;
      URI uriConnectURI=URI.create(connectURI);
      assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.REMOTE_ADDRESS.get(bridgeSession).getResource());
      assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.LOCAL_ADDRESS.get(bridgeSession).getResource());
      assertEquals(""String_Node_Str"",BridgeSession.REMOTE_ADDRESS.get(bridgeSession).getTransport().getResource().getPort(),BridgeSession.REMOTE_ADDRESS.get(bridgeSession.getParent()).getResource().getPort());
      checkpoint();
    }
  }
);
}"
96533,"@Test public void shouldConstructCorrectLocalAndRemoteAddressesForHttpAcceptAndConnectSessions(){
  final String connectURI=""String_Node_Str"";
  final TransportTestIoHandlerAdapter connectHandler=new TransportTestIoHandlerAdapter(1){
    @Override protected void doSessionCreated(    IoSessionEx session) throws Exception {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
    }
    @Override protected void doSessionOpened(    IoSessionEx session) throws Exception {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
    }
    @Override protected void doMessageReceived(    IoSessionEx session,    Object message) throws Exception {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      BridgeSession bridgeSession=(BridgeSession)session;
      URI uriConnectURI=URI.create(connectURI);
      assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.REMOTE_ADDRESS.get(bridgeSession).getResource());
      assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.LOCAL_ADDRESS.get(bridgeSession).getResource());
      assertEquals(""String_Node_Str"",BridgeSession.LOCAL_ADDRESS.get(bridgeSession).getTransport().getResource().getPort(),BridgeSession.LOCAL_ADDRESS.get(bridgeSession.getParent()).getResource().getPort());
      checkpoint();
    }
    @Override public String getCheckpointFailureMessage(){
      return ""String_Node_Str"";
    }
  }
;
  final TransportTestIoHandlerAdapter acceptHandler=new TransportTestIoHandlerAdapter(1){
    @Override protected void doMessageReceived(    final IoSessionEx session,    Object message) throws Exception {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      DefaultHttpSession httpSession=(DefaultHttpSession)session;
      IoBufferAllocatorEx<?> allocator=httpSession.getBufferAllocator();
      httpSession.setStatus(HttpStatus.SUCCESS_OK);
      httpSession.setVersion(HttpVersion.HTTP_1_1);
      httpSession.setWriteHeader(""String_Node_Str"",""String_Node_Str"");
      httpSession.write(allocator.wrap(ByteBuffer.wrap(""String_Node_Str"".getBytes()))).addListener(new IoFutureListener<IoFuture>(){
        @Override public void operationComplete(        IoFuture future){
          BridgeSession bridgeSession=(BridgeSession)session;
          URI uriConnectURI=URI.create(connectURI);
          assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.REMOTE_ADDRESS.get(bridgeSession).getResource());
          assertEquals(""String_Node_Str"" + connectURI,uriConnectURI,BridgeSession.LOCAL_ADDRESS.get(bridgeSession).getResource());
          assertEquals(""String_Node_Str"",BridgeSession.REMOTE_ADDRESS.get(bridgeSession).getTransport().getResource().getPort(),BridgeSession.REMOTE_ADDRESS.get(bridgeSession.getParent()).getResource().getPort());
          checkpoint();
        }
      }
);
    }
    @Override public String getCheckpointFailureMessage(){
      return ""String_Node_Str"";
    }
  }
;
  Map<String,Object> bindOptions=new HashMap<>();
  final Map<String,Object> connectOptions=Collections.emptyMap();
  httpConnectorToAcceptor(connectURI,connectHandler,acceptHandler,STANDARD_REQUEST_INITIALIZER,bindOptions,connectOptions);
}","@Test public void shouldConstructCorrectLocalAndRemoteAddressesForHttpAcceptAndConnectSessions(){
  helperConstructLocalRemoteAddressesForAcceptAndConnectSessions(null,null);
}"
96534,"@Override protected void doSessionCreated(IoSessionEx session) throws Exception {
}","@Override protected void doSessionCreated(IoSessionEx session) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
}"
96535,"@Override protected void consume(DefaultHttpSession session){
  if (session.isReadSuspended()) {
    return;
  }
  IoBufferEx buffer=session.getCurrentReadRequest();
  if (buffer != null && buffer.hasRemaining()) {
    session.setCurrentReadRequest(null);
    IoFilterChain filterChain=session.getFilterChain();
    filterChain.fireMessageReceived(buffer);
  }
}","@Override protected void consume(DefaultHttpSession session){
  if (session.isReadSuspended()) {
    return;
  }
  Queue<IoBufferEx> deferredReads=session.getDeferredReads();
  IoBufferEx buffer;
  while ((buffer=deferredReads.poll()) != null) {
    if (buffer.hasRemaining()) {
      IoFilterChain filterChain=session.getFilterChain();
      filterChain.fireMessageReceived(buffer);
    }
  }
}"
96536,"private void fireContentReceived(DefaultHttpSession session,HttpContentMessage content) throws Exception {
  IoBufferEx buffer=content.asBuffer();
  if (buffer != null && buffer.hasRemaining()) {
    if (!session.isIoRegistered() || session.isReadSuspended()) {
      IoBufferEx currentBuffer=session.getCurrentReadRequest();
      if (currentBuffer != null) {
        throw new Exception(""String_Node_Str"");
      }
      session.setCurrentReadRequest(buffer);
    }
 else {
      IoFilterChain filterChain=session.getFilterChain();
      filterChain.fireMessageReceived(buffer);
    }
  }
}","private void fireContentReceived(DefaultHttpSession session,HttpContentMessage content) throws Exception {
  IoBufferEx buffer=content.asBuffer();
  if (buffer != null && buffer.hasRemaining()) {
    if (!session.isIoRegistered() || session.isReadSuspended()) {
      session.addDeferredRead(buffer);
    }
 else {
      IoFilterChain filterChain=session.getFilterChain();
      filterChain.fireMessageReceived(buffer);
    }
  }
}"
96537,"public final T newResourceAddress(URI location,ResourceOptions options,Object qualifier){
  URI external=location;
  if (location.getPort() == -1) {
    location=modifyURIPort(location,getSchemePort());
  }
  String transportName=getTransportName();
  if (!transportName.equals(getSchemeName())) {
    location=modifyURIScheme(location,transportName);
  }
  List<T> addresses=newResourceAddresses0(external,location,options);
  T alternate=null;
  for (int i=addresses.size() - 1; i >= 0; i--) {
    T address=addresses.get(i);
    if (alternate != null) {
      ResourceOptions newOptions=ResourceOptions.FACTORY.newResourceOptions(options);
      newOptions.setOption(ALTERNATE,alternate);
      setOptions(address,location,newOptions,qualifier);
    }
 else {
      setOptions(address,location,options,qualifier);
    }
    URI resource=address.getResource();
    if (!transportName.equals(resource.getScheme())) {
      throw new IllegalArgumentException(format(""String_Node_Str"",transportName,resource));
    }
    alternate=address;
  }
  return addresses.get(0);
}","public final T newResourceAddress(URI location,ResourceOptions options,Object qualifier){
  URI external=location;
  if (location.getPort() == -1) {
    location=modifyURIPort(location,getSchemePort());
  }
  String transportName=getTransportName();
  if (!transportName.equals(getSchemeName())) {
    location=modifyURIScheme(location,transportName);
  }
  List<T> addresses=newResourceAddresses0(external,location,options);
  T alternate=null;
  for (int i=addresses.size() - 1; i >= 0; i--) {
    T address=addresses.get(i);
    if (alternate != null) {
      ResourceOptions newOptions=ResourceOptions.FACTORY.newResourceOptions(options);
      newOptions.setOption(ALTERNATE,alternate);
      setOptions(address,location,newOptions,qualifier);
    }
 else {
      setOptions(address,location,options,qualifier);
    }
    URI resource=address.getResource();
    if (!transportName.equals(resource.getScheme())) {
      throw new IllegalArgumentException(format(""String_Node_Str"",transportName,resource));
    }
    alternate=address;
  }
  if (addresses.size() == 0) {
    throw new IllegalArgumentException(format(""String_Node_Str"",location));
  }
  return addresses.get(0);
}"
96538,"@Override protected void consume(DefaultHttpSession session){
  IoBufferEx buffer=session.getCurrentReadRequest();
  if (buffer != null && buffer.hasRemaining()) {
    session.setCurrentReadRequest(null);
    IoFilterChain filterChain=session.getFilterChain();
    filterChain.fireMessageReceived(buffer);
  }
}","@Override protected void consume(DefaultHttpSession session){
  if (session.isReadSuspended()) {
    return;
  }
  IoBufferEx buffer=session.getCurrentReadRequest();
  if (buffer != null && buffer.hasRemaining()) {
    session.setCurrentReadRequest(null);
    IoFilterChain filterChain=session.getFilterChain();
    filterChain.fireMessageReceived(buffer);
  }
}"
96539,"public void attachReader(final HttpSession newReader){
  if (Thread.currentThread() == getIoThread()) {
    attachReader0(newReader);
  }
 else {
    if (ALIGN_UPSTREAM) {
      final Thread ioThread=getIoThread();
      final Executor ioExecutor=getIoExecutor();
      newReader.setIoAlignment(NO_THREAD,NO_EXECUTOR);
      ioExecutor.execute(new Runnable(){
        @Override public void run(){
          newReader.setIoAlignment(ioThread,ioExecutor);
          attachReader0(newReader);
        }
      }
);
    }
 else {
      getIoExecutor().execute(new Runnable(){
        @Override public void run(){
          attachReader0(newReader);
        }
      }
);
    }
  }
}","public void attachReader(final HttpSession newReader){
  if (Thread.currentThread() == getIoThread()) {
    attachReader0(newReader);
  }
 else {
    if (ALIGN_UPSTREAM) {
      final Thread ioThread=getIoThread();
      final Executor ioExecutor=getIoExecutor();
      newReader.suspendRead();
      newReader.setIoAlignment(NO_THREAD,NO_EXECUTOR);
      ioExecutor.execute(new Runnable(){
        @Override public void run(){
          newReader.setIoAlignment(ioThread,ioExecutor);
          attachReader0(newReader);
          newReader.resumeRead();
        }
      }
);
    }
 else {
      getIoExecutor().execute(new Runnable(){
        @Override public void run(){
          attachReader0(newReader);
        }
      }
);
    }
  }
}"
96540,"private boolean checkReaderOrder(HttpAcceptSession session){
  if (validateSequenceNo) {
    return isOutOfOrder(session,readerSequenceNo);
  }
  return true;
}","private boolean checkReaderOrder(HttpAcceptSession session){
  if (validateSequenceNo) {
    return checkOrder(session,readerSequenceNo);
  }
  return true;
}"
96541,"private void attachWriter0(final HttpSession newWriter){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format(""String_Node_Str"",this.getId(),newWriter));
  }
  reconnecting.set(false);
  if (!getTransportSession().isClosing()) {
    if (!compareAndSetParent(null,newWriter)) {
      cancelTimeout();
      IoSessionEx oldPending=pendingNewWriter.getAndSet(newWriter);
      if (oldPending != null) {
        oldPending.close(false);
      }
      enqueueReconnectRequest();
    }
 else {
      if (newWriter instanceof HttpAcceptSession) {
        HttpAcceptSession newAcceptWriter=(HttpAcceptSession)newWriter;
        if (isLongPollingOutOfOrder(newAcceptWriter) || isWriterOutOfOrder(newAcceptWriter)) {
          closeSession(newAcceptWriter);
          return;
        }
        writeNoop((HttpAcceptSession)newWriter);
      }
      writerSequenceNo++;
      firstWriter=false;
      if (Long.valueOf(0L).equals(newWriter.getAttribute(WsebAcceptor.CLIENT_BUFFER_KEY))) {
        newWriter.suspendWrite();
      }
    }
    if (!isWriteSuspended()) {
      getProcessor().flush(this);
    }
  }
 else {
    if (newWriter != null) {
      newWriter.close(false);
    }
  }
  attachingWrite.set(false);
  if (!isClosing()) {
    try {
      this.startupScheduledCommands();
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
}","private void attachWriter0(final HttpSession newWriter){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format(""String_Node_Str"",this.getId(),newWriter));
  }
  reconnecting.set(false);
  if (!getTransportSession().isClosing()) {
    if (!compareAndSetParent(null,newWriter)) {
      cancelTimeout();
      IoSessionEx oldPending=pendingNewWriter.getAndSet(newWriter);
      if (oldPending != null) {
        oldPending.close(false);
      }
      enqueueReconnectRequest();
    }
 else {
      if (newWriter instanceof HttpAcceptSession) {
        HttpAcceptSession newAcceptWriter=(HttpAcceptSession)newWriter;
        if (!checkLongPollingOrder(newAcceptWriter) || !checkWriterOrder(newAcceptWriter)) {
          return;
        }
        writeNoop((HttpAcceptSession)newWriter);
      }
      writerSequenceNo++;
      firstWriter=false;
      if (Long.valueOf(0L).equals(newWriter.getAttribute(WsebAcceptor.CLIENT_BUFFER_KEY))) {
        newWriter.suspendWrite();
      }
    }
    if (!isWriteSuspended()) {
      getProcessor().flush(this);
    }
  }
 else {
    if (newWriter != null) {
      newWriter.close(false);
    }
  }
  attachingWrite.set(false);
  if (!isClosing()) {
    try {
      this.startupScheduledCommands();
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
}"
96542,"private void attachReader0(final IoSessionEx newReader){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format(""String_Node_Str"",this.getId(),newReader));
  }
  if (newReader instanceof HttpAcceptSession) {
    HttpAcceptSession newAcceptReader=(HttpAcceptSession)newReader;
    if (isReaderOutOfOrder(newAcceptReader)) {
      setCloseException(new IOException(""String_Node_Str"" + session.getMethod()));
      HttpStatus status=HttpStatus.CLIENT_BAD_REQUEST;
      session.setStatus(status);
      session.setWriteHeader(HEADER_CONTENT_LENGTH,""String_Node_Str"");
      session.close(true);
      return;
    }
  }
  readerSequenceNo++;
  readSession.set(newReader);
  if (this.isReadSuspended()) {
    newReader.suspendRead();
  }
}","private void attachReader0(final IoSessionEx newReader){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format(""String_Node_Str"",this.getId(),newReader));
  }
  if (newReader instanceof HttpAcceptSession) {
    HttpAcceptSession newAcceptReader=(HttpAcceptSession)newReader;
    if (!checkReaderOrder(newAcceptReader)) {
      return;
    }
  }
  readerSequenceNo++;
  IoSessionEx oldReader=readSession.get();
  if (oldReader != null && !oldReader.isClosing() && oldReader instanceof HttpAcceptSession) {
    String message=String.format(""String_Node_Str"");
    setCloseException(new IOException(message));
    HttpStatus status=HttpStatus.CLIENT_BAD_REQUEST;
    HttpAcceptSession newAcceptReader=(HttpAcceptSession)newReader;
    newAcceptReader.setStatus(status);
    newAcceptReader.setWriteHeader(HEADER_CONTENT_LENGTH,""String_Node_Str"");
    newAcceptReader.close(true);
    return;
  }
  readSession.set(newReader);
  if (this.isReadSuspended()) {
    newReader.suspendRead();
  }
}"
96543,"@Test @Specification(""String_Node_Str"") public void shouldRejectParallelUpstreamRequest() throws Exception {
  k3po.finish();
}","@Test @Specification(""String_Node_Str"") public void shouldRejectParallelUpstreamRequest() throws Exception {
  k3po.finish();
  throw new Exception(""String_Node_Str"");
}"
96544,"@Test @Specification({""String_Node_Str"",""String_Node_Str""}) public void shouldCloseConnectionWhenUpstreamStatusCodeNot200() throws Exception {
  k3po.finish();
}","@Specification(""String_Node_Str"") void shouldCloseConnectionWhenUpstreamStatusCodeNot200() throws Exception {
  k3po.finish();
}"
96545,"@Override public void init(ServiceContext serviceContext) throws Exception {
  super.init(serviceContext);
  Collection<URI> connectURIs=serviceContext.getConnects();
  if (connectURIs == null || connectURIs.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpProxyServiceHandler handler=getHandler();
  handler.setConnectURIs(connectURIs);
  handler.initServiceConnectManager();
}","@Override public void init(ServiceContext serviceContext) throws Exception {
  super.init(serviceContext);
  Collection<URI> connectURIs=serviceContext.getConnects();
  if (connectURIs == null || connectURIs.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  checkForTrailingSlashes(serviceContext);
  HttpProxyServiceHandler handler=getHandler();
  handler.setConnectURIs(connectURIs);
  handler.initServiceConnectManager();
}"
96546,"@Override public void initializeSession(IoSession session,ConnectFuture future){
  HttpConnectSession connectSession=(HttpConnectSession)session;
  connectSession.setVersion(acceptSession.getVersion());
  connectSession.setMethod(acceptSession.getMethod());
  String acceptPathInfo=acceptSession.getPathInfo().toString();
  if (acceptPathInfo.startsWith(""String_Node_Str"")) {
    acceptPathInfo=acceptPathInfo.substring(1);
  }
  String connectPath=connectSession.getRequestURI().getPath();
  if (!connectPath.endsWith(""String_Node_Str"")) {
    connectPath+=""String_Node_Str"";
  }
  connectSession.setRequestURI(URI.create(connectPath).resolve(acceptPathInfo));
  processRequestHeaders(acceptSession,connectSession);
}","@Override public void initializeSession(IoSession session,ConnectFuture future){
  HttpConnectSession connectSession=(HttpConnectSession)session;
  connectSession.setVersion(acceptSession.getVersion());
  connectSession.setMethod(acceptSession.getMethod());
  URI connectURI=computeConnectPath(connectSession.getRequestURI());
  connectSession.setRequestURI(connectURI);
  processRequestHeaders(acceptSession,connectSession);
}"
96547,"/** 
 * Parses the class path system attribute and the manifest files and if there are duplicate jar a DuplicateJarsException is thrown.
 * @throws IOException
 * @throws DuplicateJarsException
 */
public void findDuplicateJars() throws IOException, DuplicateJarsException {
  Enumeration<URL> manifestURLs=classPathParser.getManifestURLs();
  while (manifestURLs.hasMoreElements()) {
    parseManifestFileFromClassPathEntry(manifestURLs.nextElement());
  }
  checkForDuplicateJars();
}","/** 
 * Parses the class path system attribute and the manifest files and if there are duplicate jar a DuplicateJarsException is thrown.
 * @throws IOException
 * @throws DuplicateJarsException
 */
public void findDuplicateJars() throws IOException, DuplicateJarsException {
  Map<String,List<String>> artifactsToVersion=new HashMap<String,List<String>>();
  Enumeration<URL> manifestURLs=classPathParser.getManifestURLs();
  while (manifestURLs.hasMoreElements()) {
    parseManifestFileFromClassPathEntry(manifestURLs.nextElement(),artifactsToVersion);
  }
  checkForDuplicateJars(artifactsToVersion);
}"
96548,"private void checkForDuplicateJars() throws DuplicateJarsException {
  for (  String artifact : artifactsToVersion.keySet()) {
    List<String> versions=artifactsToVersion.get(artifact);
    if (versions.size() > 1) {
      gatewayLogger.error(CONFLICTING_JARS_LOGGING_MESSAGE,artifact,versions);
      throw new DuplicateJarsException();
    }
  }
}","private void checkForDuplicateJars(Map<String,List<String>> artifactsToVersion) throws DuplicateJarsException {
  for (  String artifact : artifactsToVersion.keySet()) {
    List<String> versions=artifactsToVersion.get(artifact);
    if (versions.size() > 1) {
      gatewayLogger.error(CONFLICTING_JARS_LOGGING_MESSAGE,artifact,versions);
      throw new DuplicateJarsException();
    }
  }
}"
96549,"private void parseManifestFileFromClassPathEntry(URL url) throws IOException {
  Attributes manifestAttributes=classPathParser.getManifestAttributesFromURL(url);
  String version=manifestAttributes.getValue(MANIFEST_VERSION);
  String artifactName=manifestAttributes.getValue(MANIFEST_JAR_NAME);
  if (isKaazingProduct(artifactName)) {
    artifactName=artifactName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    List<String> versionList=artifactsToVersion.get(artifactName);
    if (versionList == null) {
      versionList=new ArrayList<String>();
      artifactsToVersion.put(artifactName,versionList);
    }
    versionList.add(version);
  }
  gatewayLogger.debug(JAR_FILE_WITH_VERSION_LOGGING_MESSAGE,artifactName,version);
}","private void parseManifestFileFromClassPathEntry(URL url,Map<String,List<String>> artifactsToVersion) throws IOException {
  Attributes manifestAttributes=classPathParser.getManifestAttributesFromURL(url);
  String version=manifestAttributes.getValue(MANIFEST_VERSION);
  String artifactName=manifestAttributes.getValue(MANIFEST_JAR_NAME);
  if (isKaazingProduct(artifactName)) {
    artifactName=artifactName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    List<String> versionList=artifactsToVersion.get(artifactName);
    if (versionList == null) {
      versionList=new ArrayList<String>();
      artifactsToVersion.put(artifactName,versionList);
    }
    versionList.add(version);
    gatewayLogger.debug(JAR_FILE_WITH_VERSION_LOGGING_MESSAGE,artifactName,version);
  }
}"
96550,"private void addSystemInfo(GatewayManagementBean gatewayBean){
  final HostManagementBean systemManagementBean=new HostManagementBeanImpl(gatewayBean);
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addSystemManagementBean(systemManagementBean);
  }
  systemManagementBean.managementStrategyChanged();
}","private void addSystemInfo(GatewayManagementBean gatewayBean){
  final HostManagementBean systemManagementBean=new HostManagementBeanImpl(gatewayBean,InternalSystemProperty.MANAGEMENT_SUMMARY_DATA_LIMIT.getIntProperty(configuration));
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addSystemManagementBean(systemManagementBean);
  }
  systemManagementBean.managementStrategyChanged();
}"
96551,"private void addJvmInfo(GatewayManagementBean gatewayBean){
  final JvmManagementBean jvmManagementBean=new JvmManagementBeanImpl(gatewayBean);
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addJvmManagementBean(jvmManagementBean);
  }
  jvmManagementBean.managementStrategyChanged();
}","private void addJvmInfo(GatewayManagementBean gatewayBean){
  final JvmManagementBean jvmManagementBean=new JvmManagementBeanImpl(gatewayBean,InternalSystemProperty.MANAGEMENT_SUMMARY_DATA_LIMIT.getIntProperty(configuration));
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addJvmManagementBean(jvmManagementBean);
  }
  jvmManagementBean.managementStrategyChanged();
}"
96552,"/** 
 * Add a controller management bean for the list of CPUs, and individual CPU management beans for the CPUs/cores in the gateway's system
 */
private void addCpuListInfo(GatewayManagementBean gatewayBean){
  final CpuListManagementBean cpuListManagementBean=new CpuListManagementBeanImpl(gatewayBean);
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addCpuListManagementBean(cpuListManagementBean);
  }
  CpuManagementBean[] cpuManagementBeans=cpuListManagementBean.getCpuManagementBeans();
  String hostAndPid=gatewayBean.getHostAndPid();
  for (int i=0; i < cpuManagementBeans.length; i++) {
    for (    ManagementServiceHandler handler : managementServiceHandlers) {
      handler.addCpuManagementBean(cpuManagementBeans[i],hostAndPid);
    }
  }
  cpuListManagementBean.managementStrategyChanged();
}","/** 
 * Add a controller management bean for the list of CPUs, and individual CPU management beans for the CPUs/cores in the gateway's system
 */
private void addCpuListInfo(GatewayManagementBean gatewayBean){
  final CpuListManagementBean cpuListManagementBean=new CpuListManagementBeanImpl(gatewayBean,InternalSystemProperty.MANAGEMENT_SUMMARY_DATA_LIMIT.getIntProperty(configuration));
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addCpuListManagementBean(cpuListManagementBean);
  }
  CpuManagementBean[] cpuManagementBeans=cpuListManagementBean.getCpuManagementBeans();
  String hostAndPid=gatewayBean.getHostAndPid();
  for (int i=0; i < cpuManagementBeans.length; i++) {
    for (    ManagementServiceHandler handler : managementServiceHandlers) {
      handler.addCpuManagementBean(cpuManagementBeans[i],hostAndPid);
    }
  }
  cpuListManagementBean.managementStrategyChanged();
}"
96553,"/** 
 * Add management beans for the entire set of NICs on the gateway's host system.
 */
private void addNicListInfo(GatewayManagementBean gatewayBean){
  final NicListManagementBean nicListManagementBean=new NicListManagementBeanImpl(gatewayBean);
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addNicListManagementBean(nicListManagementBean);
  }
  NicManagementBean[] nicManagementBeans=nicListManagementBean.getNicManagementBeans();
  String hostAndPid=gatewayBean.getHostAndPid();
  for (int i=0; i < nicManagementBeans.length; i++) {
    for (    ManagementServiceHandler handler : managementServiceHandlers) {
      handler.addNicManagementBean(nicManagementBeans[i],hostAndPid);
    }
  }
  nicListManagementBean.managementStrategyChanged();
}","/** 
 * Add management beans for the entire set of NICs on the gateway's host system.
 */
private void addNicListInfo(GatewayManagementBean gatewayBean){
  final NicListManagementBean nicListManagementBean=new NicListManagementBeanImpl(gatewayBean,InternalSystemProperty.MANAGEMENT_SUMMARY_DATA_LIMIT.getIntProperty(configuration));
  for (  ManagementServiceHandler handler : managementServiceHandlers) {
    handler.addNicListManagementBean(nicListManagementBean);
  }
  NicManagementBean[] nicManagementBeans=nicListManagementBean.getNicManagementBeans();
  String hostAndPid=gatewayBean.getHostAndPid();
  for (int i=0; i < nicManagementBeans.length; i++) {
    for (    ManagementServiceHandler handler : managementServiceHandlers) {
      handler.addNicManagementBean(nicManagementBeans[i],hostAndPid);
    }
  }
  nicListManagementBean.managementStrategyChanged();
}"
96554,"public AbstractSystemManagementBean(ManagementContext managementContext,SummaryManagementInterval summaryInterval,String[] summaryDataFields,SummaryManagementInterval gatherInterval,String dataTypeStr,String schedulerName){
  super(managementContext,summaryInterval,summaryDataFields);
  this.dataTypeStr=dataTypeStr;
  this.summaryDataList=new AtomicReference<>(new JSONArray());
  this.schedulerName=schedulerName;
  this.gatherInterval=gatherInterval;
  managementContext.addManagementStrategyChangeListener(this);
}","public AbstractSystemManagementBean(ManagementContext managementContext,SummaryManagementInterval summaryInterval,String[] summaryDataFields,SummaryManagementInterval gatherInterval,String dataTypeStr,int summaryDataLimit,String schedulerName){
  super(managementContext,summaryInterval,summaryDataFields);
  this.dataTypeStr=dataTypeStr;
  if (summaryDataLimit > 0) {
    this.summaryDataList=new ArrayBlockingQueue<JSONObject>(summaryDataLimit);
  }
 else {
    this.summaryDataList=null;
  }
  this.schedulerName=schedulerName;
  this.gatherInterval=gatherInterval;
  managementContext.addManagementStrategyChangeListener(this);
}"
96555,"public String getSummaryData(){
  JSONArray jsonArray=summaryDataList.getAndSet(new JSONArray());
  return jsonArray.toString();
}","public String getSummaryData(){
  JSONArray jsonArray=new JSONArray();
  if (summaryDataList != null) {
    ArrayList<JSONObject> tmpList=new ArrayList<JSONObject>(summaryDataList.size());
    summaryDataList.drainTo(tmpList);
    for (    JSONObject jsonObject : tmpList) {
      jsonArray.put(jsonObject);
    }
  }
  return jsonArray.toString();
}"
96556,"/** 
 * Do actual gathering of stats now (i.e. as 'execute' rather than 'schedule'). <p/> THIS ROUTINE IS CALLED INITIALLY ON AN IO THREAD, BUT MUST RUN *OFF* THE IO THREAD.
 */
public void gatherStats(){
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      try {
        long readTime=System.currentTimeMillis();
        JSONObject jsonObj=new JSONObject();
        doGatherStats(jsonObj,readTime);
        jsonObj.put(""String_Node_Str"",readTime);
        summaryDataList.get().put(jsonObj);
      }
 catch (      SigarException ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
catch (      JSONException ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
catch (      Exception ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
      markChanged();
      ManagementSystemStrategy systemStrategy=managementContext.getManagementSystemStrategy();
      systemStrategy.continueGatherStats(AbstractSystemManagementBean.this);
    }
  }
);
}","/** 
 * Do actual gathering of stats now (i.e. as 'execute' rather than 'schedule'). <p/> THIS ROUTINE IS CALLED INITIALLY ON AN IO THREAD, BUT MUST RUN *OFF* THE IO THREAD.
 */
public void gatherStats(){
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      try {
        long readTime=System.currentTimeMillis();
        JSONObject jsonObj=new JSONObject();
        doGatherStats(jsonObj,readTime);
        jsonObj.put(""String_Node_Str"",readTime);
        if (summaryDataList != null) {
          if (!summaryDataList.offer(jsonObj)) {
            summaryDataList.poll();
            summaryDataList.offer(jsonObj);
          }
        }
      }
 catch (      SigarException ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
catch (      JSONException ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
catch (      Exception ex) {
        if (!errorShown) {
          logger.warn(""String_Node_Str"" + dataTypeStr,ex);
          errorShown=true;
        }
      }
      markChanged();
      ManagementSystemStrategy systemStrategy=managementContext.getManagementSystemStrategy();
      systemStrategy.continueGatherStats(AbstractSystemManagementBean.this);
    }
  }
);
}"
96557,"public CpuListManagementBeanImpl(GatewayManagementBean gatewayManagementBean){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),CpuManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getCpuListSummaryDataGatherInterval(),""String_Node_Str"",""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
  int numCpus=managementContext.getSystemDataProvider().getNumberOfCpus();
  cpuManagementBeans=new CpuManagementBean[numCpus];
  for (int i=0; i < numCpus; i++) {
    cpuManagementBeans[i]=new CpuManagementBeanImpl(i);
  }
}","public CpuListManagementBeanImpl(GatewayManagementBean gatewayManagementBean,int summaryDataLimit){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),CpuManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getCpuListSummaryDataGatherInterval(),""String_Node_Str"",summaryDataLimit,""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
  int numCpus=managementContext.getSystemDataProvider().getNumberOfCpus();
  cpuManagementBeans=new CpuManagementBean[numCpus];
  for (int i=0; i < numCpus; i++) {
    cpuManagementBeans[i]=new CpuManagementBeanImpl(i);
  }
}"
96558,"public HostManagementBeanImpl(GatewayManagementBean gatewayManagementBean){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),HostManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getSystemSummaryDataGatherInterval(),""String_Node_Str"",""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
}","public HostManagementBeanImpl(GatewayManagementBean gatewayManagementBean,int summaryDataLimit){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),HostManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getSystemSummaryDataGatherInterval(),""String_Node_Str"",summaryDataLimit,""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
}"
96559,"public JvmManagementBeanImpl(GatewayManagementBean gatewayManagementBean){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),JvmManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getJvmSummaryDataGatherInterval(),""String_Node_Str"",""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
}","public JvmManagementBeanImpl(GatewayManagementBean gatewayManagementBean,int summaryDataLimit){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),JvmManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getJvmSummaryDataGatherInterval(),""String_Node_Str"",summaryDataLimit,""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
}"
96560,"public NicListManagementBeanImpl(GatewayManagementBean gatewayManagementBean){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),NicManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getNicListSummaryDataGatherInterval(),""String_Node_Str"",""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
  netInterfaceNames=managementContext.getSystemDataProvider().getNetInterfaceNames();
  nicManagementBeans=new NicManagementBean[netInterfaceNames.length];
  for (int i=0; i < netInterfaceNames.length; i++) {
    nicManagementBeans[i]=new NicManagementBeanImpl(i,netInterfaceNames[i]);
  }
}","public NicListManagementBeanImpl(GatewayManagementBean gatewayManagementBean,int summaryDataLimit){
  super(gatewayManagementBean.getManagementContext(),gatewayManagementBean.getManagementContext().getSystemSummaryDataNotificationInterval(),NicManagementBean.SUMMARY_DATA_FIELD_LIST,gatewayManagementBean.getManagementContext().getNicListSummaryDataGatherInterval(),""String_Node_Str"",summaryDataLimit,""String_Node_Str"");
  this.gatewayManagementBean=gatewayManagementBean;
  netInterfaceNames=managementContext.getSystemDataProvider().getNetInterfaceNames();
  nicManagementBeans=new NicManagementBean[netInterfaceNames.length];
  for (int i=0; i < netInterfaceNames.length; i++) {
    nicManagementBeans[i]=new NicManagementBeanImpl(i,netInterfaceNames[i]);
  }
}"
96561,"@Override public void addNicListManagementBean(final NicListManagementBean managementBean){
  agent.addNicListManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      OID dataOID=((OID)MIBConstants.oidNicListSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidNicListSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}","@Override public void addNicListManagementBean(final NicListManagementBean managementBean){
  agent.addNicListManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    @Override public void run(){
      OID dataOID=((OID)MIBConstants.oidNicListSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidNicListSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}"
96562,"public RequestStatus getStatus(){
  return status;
}","@Override public RequestStatus getStatus(){
  return status;
}"
96563,"public void setGatewayBean(GatewayManagementBean gatewayBean){
  this.gatewayBean=gatewayBean;
}","@Override public void setGatewayBean(GatewayManagementBean gatewayBean){
  this.gatewayBean=gatewayBean;
}"
96564,"public void setQuery(MOQuery query){
  this.query=query;
}","@Override public void setQuery(MOQuery query){
  this.query=query;
}"
96565,"public MOQuery getQuery(){
  return query;
}","@Override public MOQuery getQuery(){
  return query;
}"
96566,"public void completed(){
  completed=true;
}","@Override public void completed(){
  completed=true;
}"
96567,"public VariableBinding getVariableBinding(){
  return vb;
}","@Override public VariableBinding getVariableBinding(){
  return vb;
}"
96568,"public MOInput createMOInput(){
  return new PropertyMOInput(props,SnmpManagementServiceHandler.this);
}","@Override public MOInput createMOInput(){
  return new PropertyMOInput(props,SnmpManagementServiceHandler.this);
}"
96569,"public void processPdu(Request request,MOServer server){
  if (request.getPhase() == Request.PHASE_INIT) {
    request.nextPhase();
  }
  OctetString context=request.getContext();
  SnmpRequest req=(SnmpRequest)request;
  try {
    SubRequestIterator it=(SubRequestIterator)request.iterator();
    while (it.hasNext()) {
      SubRequest sreq=it.nextSubRequest();
      if (!sreq.isComplete()) {
        DefaultMOContextScope scope=(DefaultMOContextScope)sreq.getScope();
        OID lowerBound=(OID)scope.getLowerBound().clone();
        scope.setLowerIncluded(false);
        OID upperBound=lowerBound.nextPeer();
        scope.setUpperBound(upperBound);
        scope.setUpperIncluded(false);
        processNextSubRequest(request,server,context,sreq);
        if (sreq.getStatus().getErrorStatus() == PDU.noError) {
          VariableBinding initialVB=(VariableBinding)sreq.getVariableBinding().clone();
          scope.setLowerIncluded(false);
          boolean first=true;
          while (!sreq.getVariableBinding().getVariable().equals(Null.endOfMibView)) {
            sreq.getStatus().setPhaseComplete(false);
            sreq.getStatus().setProcessed(false);
            sreq.setQuery(null);
            scope.setLowerBound(sreq.getVariableBinding().getOid());
            if (!first) {
              VariableBinding vb=(VariableBinding)sreq.getVariableBinding().clone();
              ((KaazingPDU)req.getResponse()).add(vb);
            }
            first=false;
            processNextSubRequest(request,server,context,sreq);
            if (sreq.getStatus().getErrorStatus() != PDU.noError) {
              break;
            }
          }
          sreq.getVariableBinding().setOid(initialVB.getOid());
          sreq.getVariableBinding().setVariable(initialVB.getVariable());
          sreq.getStatus().setPhaseComplete(true);
          sreq.getStatus().setProcessed(true);
        }
      }
    }
  }
 catch (  NoSuchElementException nsex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}","@Override public void processPdu(Request request,MOServer server){
  if (request.getPhase() == Request.PHASE_INIT) {
    request.nextPhase();
  }
  OctetString context=request.getContext();
  SnmpRequest req=(SnmpRequest)request;
  try {
    SubRequestIterator it=(SubRequestIterator)request.iterator();
    while (it.hasNext()) {
      SubRequest sreq=it.nextSubRequest();
      if (!sreq.isComplete()) {
        DefaultMOContextScope scope=(DefaultMOContextScope)sreq.getScope();
        OID lowerBound=(OID)scope.getLowerBound().clone();
        scope.setLowerIncluded(false);
        OID upperBound=lowerBound.nextPeer();
        scope.setUpperBound(upperBound);
        scope.setUpperIncluded(false);
        processNextSubRequest(request,server,context,sreq);
        if (sreq.getStatus().getErrorStatus() == PDU.noError) {
          VariableBinding initialVB=(VariableBinding)sreq.getVariableBinding().clone();
          scope.setLowerIncluded(false);
          boolean first=true;
          while (!sreq.getVariableBinding().getVariable().equals(Null.endOfMibView)) {
            sreq.getStatus().setPhaseComplete(false);
            sreq.getStatus().setProcessed(false);
            sreq.setQuery(null);
            scope.setLowerBound(sreq.getVariableBinding().getOid());
            if (!first) {
              VariableBinding vb=(VariableBinding)sreq.getVariableBinding().clone();
              ((KaazingPDU)req.getResponse()).add(vb);
            }
            first=false;
            processNextSubRequest(request,server,context,sreq);
            if (sreq.getStatus().getErrorStatus() != PDU.noError) {
              break;
            }
          }
          sreq.getVariableBinding().setOid(initialVB.getOid());
          sreq.getVariableBinding().setVariable(initialVB.getVariable());
          sreq.getStatus().setPhaseComplete(true);
          sreq.getStatus().setProcessed(true);
        }
      }
    }
  }
 catch (  NoSuchElementException nsex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}"
96570,"public Request getRequest(){
  return null;
}","@Override public Request getRequest(){
  return null;
}"
96571,"public void setTargetMO(ManagedObject managedObject){
}","@Override public void setTargetMO(ManagedObject managedObject){
}"
96572,"public boolean hasError(){
  return false;
}","@Override public boolean hasError(){
  return false;
}"
96573,"public int getErrorStatus(){
  return status.getErrorStatus();
}","@Override public int getErrorStatus(){
  return status.getErrorStatus();
}"
96574,"public boolean isComplete(){
  return completed;
}","@Override public boolean isComplete(){
  return completed;
}"
96575,"@Override public void addJvmManagementBean(final JvmManagementBean managementBean){
  agent.addJvmManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      OID dataOID=((OID)MIBConstants.oidJvmSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidJvmSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}","@Override public void addJvmManagementBean(final JvmManagementBean managementBean){
  agent.addJvmManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    @Override public void run(){
      OID dataOID=((OID)MIBConstants.oidJvmSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidJvmSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}"
96576,"public int getIndex(){
  return 0;
}","@Override public int getIndex(){
  return 0;
}"
96577,"/** 
 * Send a notification about the session being opened. We set things up so that this is considered to be a service-level operation, but all the real data is in the session level, so for consistency and locality, we're going to process it in here, though we do check the SERVICE-level notifications-enabled flag.
 */
@Override public void doSessionCreated(final SessionManagementBean sessionBean) throws Exception {
  ServiceManagementBean serviceBean=sessionBean.getServiceManagementBean();
  if (serviceBean.areNotificationsEnabled()) {
    JSONObject sessionData=new JSONObject();
    IoSessionEx session=sessionBean.getSession();
    sessionData.put(""String_Node_Str"",session.getId());
    sessionData.put(""String_Node_Str"",serviceBean.getId());
    sessionData.put(""String_Node_Str"",session.getCreationTime());
    sessionData.put(""String_Node_Str"",session.getLocalAddress());
    sessionData.put(""String_Node_Str"",serviceBean.getSessionRemoteAddress(session));
    ResourceAddress address=BridgeSession.LOCAL_ADDRESS.get(session);
    sessionData.put(""String_Node_Str"",Utils.getSessionTypeName(address));
    sessionData.put(""String_Node_Str"",Utils.getSessionDirection(session));
    Map<String,String> userPrincipals=sessionBean.getUserPrincipalMap();
    if (userPrincipals != null) {
      sessionData.put(""String_Node_Str"",userPrincipals);
    }
    JSONObject protocolAttributes=null;
    if (session instanceof AbstractWsBridgeSession) {
      AbstractWsBridgeSession wsBridgeSession=(AbstractWsBridgeSession)session;
      protocolAttributes=new JSONObject();
      List<ExtensionHeader> extensions=wsBridgeSession.getWsExtensions().asList();
      if (extensions != null && extensions.size() > 0) {
        JSONObject jsonObj=new JSONObject();
        for (        ExtensionHeader extension : extensions) {
          String token=extension.getExtensionToken();
          JSONArray paramsArray=null;
          if (extension.hasParameters()) {
            paramsArray=new JSONArray();
            for (            ExtensionParameter param : extension.getParameters()) {
              String name=param.getName();
              String value=param.getValue();
              if (value == null) {
                paramsArray.put(name.toString());
              }
 else {
                paramsArray.put(name.toString() + ""String_Node_Str"" + value.toString());
              }
            }
          }
          jsonObj.put(token,paramsArray);
        }
        protocolAttributes.put(""String_Node_Str"",jsonObj);
      }
      if (session instanceof WsnSession) {
        WsnSession wsnSession=(WsnSession)session;
        WebSocketWireProtocol protocolVersion=wsnSession.getVersion();
        protocolAttributes.put(""String_Node_Str"",protocolVersion.toString());
      }
 else       if (session instanceof WsebSession) {
        WsebSession wsebSession=(WsebSession)session;
        ResourceAddress readAddr=wsebSession.getReadAddress();
        ResourceAddress writeAddr=wsebSession.getWriteAddress();
        if (readAddr != null) {
          protocolAttributes.put(""String_Node_Str"",readAddr);
        }
        if (writeAddr != null) {
          protocolAttributes.put(""String_Node_Str"",writeAddr);
        }
      }
 else       if (session instanceof WsrSession) {
        WsrSession wsrSession=(WsrSession)session;
        ResourceAddress rtmpAddress=wsrSession.getRtmpAddress();
        protocolAttributes.put(""String_Node_Str"",rtmpAddress);
      }
    }
    if (protocolAttributes != null) {
      sessionData.put(""String_Node_Str"",protocolAttributes);
    }
    OID notificationOID=MIBConstants.oidServiceConnectionNotification;
    VariableBinding[] variables=new VariableBinding[1];
    variables[0]=new VariableBinding(notificationOID,new OctetString(sessionData.toString()));
    sendNotification(notificationOID,variables);
  }
}","/** 
 * Send a notification about the session being opened. We set things up so that this is considered to be a service-level operation, but all the real data is in the session level, so for consistency and locality, we're going to process it in here, though we do check the SERVICE-level notifications-enabled flag.
 */
@Override public void doSessionCreated(final SessionManagementBean sessionBean) throws Exception {
  ServiceManagementBean serviceBean=sessionBean.getServiceManagementBean();
  if (serviceBean.areNotificationsEnabled()) {
    JSONObject sessionData=new JSONObject();
    IoSessionEx session=sessionBean.getSession();
    sessionData.put(""String_Node_Str"",session.getId());
    sessionData.put(""String_Node_Str"",serviceBean.getId());
    sessionData.put(""String_Node_Str"",session.getCreationTime());
    sessionData.put(""String_Node_Str"",session.getLocalAddress());
    sessionData.put(""String_Node_Str"",serviceBean.getSessionRemoteAddress(session));
    ResourceAddress address=BridgeSession.LOCAL_ADDRESS.get(session);
    sessionData.put(""String_Node_Str"",Utils.getSessionTypeName(address));
    sessionData.put(""String_Node_Str"",Utils.getSessionDirection(session));
    Map<String,String> userPrincipals=sessionBean.getUserPrincipalMap();
    if (userPrincipals != null) {
      sessionData.put(""String_Node_Str"",userPrincipals);
    }
    JSONObject protocolAttributes=null;
    if (session instanceof AbstractWsBridgeSession) {
      AbstractWsBridgeSession wsBridgeSession=(AbstractWsBridgeSession)session;
      protocolAttributes=new JSONObject();
      List<WebSocketExtension> extensions=wsBridgeSession.getExtensions();
      if (extensions != null && extensions.size() > 0) {
        JSONObject jsonObj=new JSONObject();
        for (        WebSocketExtension extension : extensions) {
          ExtensionHeader extensionHeader=extension.getExtensionHeader();
          String token=extensionHeader.getExtensionToken();
          JSONArray paramsArray=null;
          if (extensionHeader.hasParameters()) {
            paramsArray=new JSONArray();
            for (            ExtensionParameter param : extensionHeader.getParameters()) {
              String name=param.getName();
              String value=param.getValue();
              if (value == null) {
                paramsArray.put(name.toString());
              }
 else {
                paramsArray.put(name.toString() + ""String_Node_Str"" + value.toString());
              }
            }
          }
          jsonObj.put(token,paramsArray);
        }
        protocolAttributes.put(""String_Node_Str"",jsonObj);
      }
      if (session instanceof WsnSession) {
        WsnSession wsnSession=(WsnSession)session;
        WebSocketWireProtocol protocolVersion=wsnSession.getVersion();
        protocolAttributes.put(""String_Node_Str"",protocolVersion.toString());
      }
 else       if (session instanceof WsebSession) {
        WsebSession wsebSession=(WsebSession)session;
        ResourceAddress readAddr=wsebSession.getReadAddress();
        ResourceAddress writeAddr=wsebSession.getWriteAddress();
        if (readAddr != null) {
          protocolAttributes.put(""String_Node_Str"",readAddr);
        }
        if (writeAddr != null) {
          protocolAttributes.put(""String_Node_Str"",writeAddr);
        }
      }
 else       if (session instanceof WsrSession) {
        WsrSession wsrSession=(WsrSession)session;
        ResourceAddress rtmpAddress=wsrSession.getRtmpAddress();
        protocolAttributes.put(""String_Node_Str"",rtmpAddress);
      }
    }
    if (protocolAttributes != null) {
      sessionData.put(""String_Node_Str"",protocolAttributes);
    }
    OID notificationOID=MIBConstants.oidServiceConnectionNotification;
    VariableBinding[] variables=new VariableBinding[1];
    variables[0]=new VariableBinding(notificationOID,new OctetString(sessionData.toString()));
    sendNotification(notificationOID,variables);
  }
}"
96578,"public void run(){
  OID dataOID=((OID)MIBConstants.oidJvmSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
  OID notificationOID=MIBConstants.oidJvmSummaryDataNotification;
  managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
}","@Override public void run(){
  OID dataOID=((OID)MIBConstants.oidJvmSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
  OID notificationOID=MIBConstants.oidJvmSummaryDataNotification;
  managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
}"
96579,"public SubRequestIterator repetitions(){
  return null;
}","@Override public SubRequestIterator repetitions(){
  return null;
}"
96580,"public Object getUndoValue(){
  return null;
}","@Override public Object getUndoValue(){
  return null;
}"
96581,"public void updateNextRepetition(){
}","@Override public void updateNextRepetition(){
}"
96582,"public void setUserObject(Object userObject){
}","@Override public void setUserObject(Object userObject){
}"
96583,"public void setUndoValue(Object undoInformation){
}","@Override public void setUndoValue(Object undoInformation){
}"
96584,"public void setErrorStatus(int errorStatus){
  status.setErrorStatus(errorStatus);
}","@Override public void setErrorStatus(int errorStatus){
  status.setErrorStatus(errorStatus);
}"
96585,"public boolean isSupported(int pduType){
  return pduType == KaazingPDU.GETSUBTREE;
}","@Override public boolean isSupported(int pduType){
  return pduType == KaazingPDU.GETSUBTREE;
}"
96586,"public Variable getVariable(String name){
  OID oid;
  OctetString context=null;
  int pos=name.indexOf(':');
  if (pos >= 0) {
    context=new OctetString(name.substring(0,pos));
    oid=new OID(name.substring(pos + 1,name.length()));
  }
 else {
    oid=new OID(name);
  }
  final DefaultMOContextScope scope=new DefaultMOContextScope(context,oid,true,oid,true);
  MOQuery query=new DefaultMOQuery(scope,false,this);
  ManagedObject mo=server.lookup(query);
  if (mo != null) {
    final VariableBinding vb=new VariableBinding(oid);
    final RequestStatus status=new RequestStatus();
    SubRequest req=new SubRequest(){
      private boolean completed;
      private MOQuery query;
      public boolean hasError(){
        return false;
      }
      public void setErrorStatus(      int errorStatus){
        status.setErrorStatus(errorStatus);
      }
      public int getErrorStatus(){
        return status.getErrorStatus();
      }
      public RequestStatus getStatus(){
        return status;
      }
      public MOScope getScope(){
        return scope;
      }
      public VariableBinding getVariableBinding(){
        return vb;
      }
      public Request getRequest(){
        return null;
      }
      public Object getUndoValue(){
        return null;
      }
      public void setUndoValue(      Object undoInformation){
      }
      public void completed(){
        completed=true;
      }
      public boolean isComplete(){
        return completed;
      }
      public void setTargetMO(      ManagedObject managedObject){
      }
      public ManagedObject getTargetMO(){
        return null;
      }
      public int getIndex(){
        return 0;
      }
      public void setQuery(      MOQuery query){
        this.query=query;
      }
      public MOQuery getQuery(){
        return query;
      }
      public SubRequestIterator repetitions(){
        return null;
      }
      public void updateNextRepetition(){
      }
      public Object getUserObject(){
        return null;
      }
      public void setUserObject(      Object userObject){
      }
    }
;
    mo.get(req);
    return vb.getVariable();
  }
  return null;
}","@Override public Variable getVariable(String name){
  OID oid;
  OctetString context=null;
  int pos=name.indexOf(':');
  if (pos >= 0) {
    context=new OctetString(name.substring(0,pos));
    oid=new OID(name.substring(pos + 1,name.length()));
  }
 else {
    oid=new OID(name);
  }
  final DefaultMOContextScope scope=new DefaultMOContextScope(context,oid,true,oid,true);
  MOQuery query=new DefaultMOQuery(scope,false,this);
  ManagedObject mo=server.lookup(query);
  if (mo != null) {
    final VariableBinding vb=new VariableBinding(oid);
    final RequestStatus status=new RequestStatus();
    SubRequest req=new SubRequest(){
      private boolean completed;
      private MOQuery query;
      @Override public boolean hasError(){
        return false;
      }
      @Override public void setErrorStatus(      int errorStatus){
        status.setErrorStatus(errorStatus);
      }
      @Override public int getErrorStatus(){
        return status.getErrorStatus();
      }
      @Override public RequestStatus getStatus(){
        return status;
      }
      @Override public MOScope getScope(){
        return scope;
      }
      @Override public VariableBinding getVariableBinding(){
        return vb;
      }
      @Override public Request getRequest(){
        return null;
      }
      @Override public Object getUndoValue(){
        return null;
      }
      @Override public void setUndoValue(      Object undoInformation){
      }
      @Override public void completed(){
        completed=true;
      }
      @Override public boolean isComplete(){
        return completed;
      }
      @Override public void setTargetMO(      ManagedObject managedObject){
      }
      @Override public ManagedObject getTargetMO(){
        return null;
      }
      @Override public int getIndex(){
        return 0;
      }
      @Override public void setQuery(      MOQuery query){
        this.query=query;
      }
      @Override public MOQuery getQuery(){
        return query;
      }
      @Override public SubRequestIterator repetitions(){
        return null;
      }
      @Override public void updateNextRepetition(){
      }
      @Override public Object getUserObject(){
        return null;
      }
      @Override public void setUserObject(      Object userObject){
      }
    }
;
    mo.get(req);
    return vb.getVariable();
  }
  return null;
}"
96587,"public Object getUserObject(){
  return null;
}","@Override public Object getUserObject(){
  return null;
}"
96588,"public MOScope getScope(){
  return scope;
}","@Override public MOScope getScope(){
  return scope;
}"
96589,"public PDU createPDU(Target target){
  return new KaazingPDU();
}","@Override public PDU createPDU(Target target){
  return new KaazingPDU();
}"
96590,"@Override public void addCpuListManagementBean(final CpuListManagementBean managementBean){
  agent.addCpuListManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      OID dataOID=((OID)MIBConstants.oidCpuListSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidCpuListSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}","@Override public void addCpuListManagementBean(final CpuListManagementBean managementBean){
  agent.addCpuListManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    @Override public void run(){
      OID dataOID=((OID)MIBConstants.oidCpuListSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidCpuListSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}"
96591,"public SnmpManagementServiceHandler(ServiceContext serviceContext,ManagementContext managementContext){
  this.serviceContext=serviceContext;
  this.managementContext=managementContext;
  this.managementContext.addGatewayManagementListener(new SNMPGatewayManagementListener());
  this.managementContext.addServiceManagementListener(new SNMPServiceManagementListener());
  this.managementContext.addSessionManagementListener(new SNMPSessionManagementListener());
  transportMapping=new ManagementTransport(managementContext);
  server=new DefaultMOServer();
  MOServer[] moServers=new MOServer[]{server};
  final Properties props=KaazingSNMPAgentProperties.getProperties();
  MOInputFactory configurationFactory=new MOInputFactory(){
    public MOInput createMOInput(){
      return new PropertyMOInput(props,SnmpManagementServiceHandler.this);
    }
  }
;
  MessageDispatcher messageDispatcher=new MessageDispatcherImpl();
  messageDispatcher.addTransportMapping(transportMapping);
  messageDispatcher.addTransportMapping(new ManagementTcpTransport(serviceContext,managementContext));
  messageDispatcher.addTransportMapping(new ManagementUdpTransport(serviceContext,managementContext));
  agent=new KaazingConfigManager(new OctetString(MPv3.createLocalEngineID()),messageDispatcher,null,moServers,null,configurationFactory,new DefaultMOPersistenceProvider(moServers,""String_Node_Str""));
  notifScheduler=serviceContext.getSchedulerProvider().getScheduler(""String_Node_Str"",true);
  summaryDataScheduler=serviceContext.getSchedulerProvider().getScheduler(""String_Node_Str"",false);
  agent.initialize();
  agent.configure();
  agent.launch();
}","public SnmpManagementServiceHandler(ServiceContext serviceContext,ManagementContext managementContext){
  this.serviceContext=serviceContext;
  this.managementContext=managementContext;
  this.managementContext.addGatewayManagementListener(new SNMPGatewayManagementListener());
  this.managementContext.addServiceManagementListener(new SNMPServiceManagementListener());
  this.managementContext.addSessionManagementListener(new SNMPSessionManagementListener());
  transportMapping=new ManagementTransport(managementContext);
  server=new DefaultMOServer();
  MOServer[] moServers=new MOServer[]{server};
  final Properties props=KaazingSNMPAgentProperties.getProperties();
  MOInputFactory configurationFactory=new MOInputFactory(){
    @Override public MOInput createMOInput(){
      return new PropertyMOInput(props,SnmpManagementServiceHandler.this);
    }
  }
;
  MessageDispatcher messageDispatcher=new MessageDispatcherImpl();
  messageDispatcher.addTransportMapping(transportMapping);
  messageDispatcher.addTransportMapping(new ManagementTcpTransport(serviceContext,managementContext));
  messageDispatcher.addTransportMapping(new ManagementUdpTransport(serviceContext,managementContext));
  agent=new KaazingConfigManager(new OctetString(MPv3.createLocalEngineID()),messageDispatcher,null,moServers,null,configurationFactory,new DefaultMOPersistenceProvider(moServers,""String_Node_Str""));
  notifScheduler=serviceContext.getSchedulerProvider().getScheduler(""String_Node_Str"",true);
  summaryDataScheduler=serviceContext.getSchedulerProvider().getScheduler(""String_Node_Str"",false);
  agent.initialize();
  agent.configure();
  agent.launch();
}"
96592,"public ManagedObject getTargetMO(){
  return null;
}","@Override public ManagedObject getTargetMO(){
  return null;
}"
96593,"@Override public void addSystemManagementBean(final HostManagementBean managementBean){
  agent.addSystemManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    public void run(){
      OID dataOID=((OID)MIBConstants.oidSystemSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidSystemSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}","@Override public void addSystemManagementBean(final HostManagementBean managementBean){
  agent.addSystemManagementBean(managementBean);
  managementContext.runManagementTask(new Runnable(){
    @Override public void run(){
      OID dataOID=((OID)MIBConstants.oidSystemSummaryData.clone()).append(managementBean.getGatewayManagementBean().getId());
      OID notificationOID=MIBConstants.oidSystemSummaryDataNotification;
      managementBean.addSummaryDataListener(new SNMPSummaryDataListener(dataOID,notificationOID));
    }
  }
);
}"
96594,"protected void initMessageDispatcherWithMPs(MessageDispatcher mp){
  PDUFactory pduFactory=new PDUFactory(){
    public PDU createPDU(    Target target){
      return new KaazingPDU();
    }
  }
;
  mp.addMessageProcessingModel(new MPv1());
  mp.addMessageProcessingModel(new MPv2c(pduFactory));
  MPv3 mpv3=new MPv3(agent.getContextEngineID().getValue(),pduFactory);
  mp.addMessageProcessingModel(mpv3);
}","protected void initMessageDispatcherWithMPs(MessageDispatcher mp){
  PDUFactory pduFactory=new PDUFactory(){
    @Override public PDU createPDU(    Target target){
      return new KaazingPDU();
    }
  }
;
  mp.addMessageProcessingModel(new MPv1());
  mp.addMessageProcessingModel(new MPv2c(pduFactory));
  MPv3 mpv3=new MPv3(agent.getContextEngineID().getValue(),pduFactory);
  mp.addMessageProcessingModel(mpv3);
}"
96595,"public AbstractWsBridgeSession(IoServiceEx service,IoProcessorEx<S> sIoProcessor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoSessionEx parent,IoBufferAllocatorEx<B> allocator,Direction direction,DefaultLoginResult loginResult){
  super(service,sIoProcessor,localAddress,remoteAddress,parent,allocator,direction);
  this.loginResult=loginResult;
  this.sessionTimeout=new WsSessionTimeoutCommand(this);
}","public AbstractWsBridgeSession(IoServiceEx service,IoProcessorEx<S> sIoProcessor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoSessionEx parent,IoBufferAllocatorEx<B> allocator,Direction direction,DefaultLoginResult loginResult,List<WebSocketExtension> extensions){
  super(service,sIoProcessor,localAddress,remoteAddress,parent,allocator,direction);
  this.loginResult=loginResult;
  this.sessionTimeout=new WsSessionTimeoutCommand(this);
}"
96596,"private <T extends ConnectFuture>IoSessionInitializer<ConnectFuture> createParentInitializer(final ResourceAddress connectAddressNext,final IoHandler handler,final IoSessionInitializer<T> initializer,final DefaultConnectFuture wseConnectFuture){
  final ResourceAddress connectAddress=connectAddressNext.getTransport();
  Protocol protocol=bridgeServiceFactory.getTransportFactory().getProtocol(connectAddress.getResource());
  if (!(protocol instanceof HttpProtocol)) {
    final String message=format(""String_Node_Str"",connectAddressNext);
    if (logger.isInfoEnabled()) {
      logger.info(message);
    }
    throw new RuntimeException(message);
  }
  return new IoSessionInitializer<ConnectFuture>(){
    @Override public void initializeSession(    final IoSession parent,    ConnectFuture future){
      final IoSessionInitializer<T> wseSessionInitializer=new IoSessionInitializer<T>(){
        @Override public void initializeSession(        IoSession session,        T future){
          WsebSession wseSession=(WsebSession)session;
          wseSession.setHandler(handler);
          wseSession.getTransportSession().getFilterChain().fireSessionCreated();
          wseSession.getTransportSession().getFilterChain().fireSessionOpened();
          if (initializer != null) {
            initializer.initializeSession(session,future);
          }
        }
      }
;
      final long sequenceNo=0;
      final HttpSession httpSession=(HttpSession)parent;
      httpSession.setWriteHeader(HEADER_X_ACCEPT_COMMANDS,""String_Node_Str"");
      httpSession.setWriteHeader(HttpHeaders.HEADER_X_SEQUENCE_NO,Long.toString(sequenceNo));
      final IoBufferAllocatorEx<WsBuffer> allocator=new WsebBufferAllocator(httpSession.getBufferAllocator());
      Callable<WsebSession> createSession=new Callable<WsebSession>(){
        @Override public WsebSession call() throws Exception {
          Callable<WsebSession> wseSessionFactory=new Callable<WsebSession>(){
            @Override public WsebSession call() throws Exception {
              WsebSession wsebSession=new WsebSession(httpSession.getIoLayer(),httpSession.getIoThread(),httpSession.getIoExecutor(),WsebConnector.this,getProcessor(),connectAddressNext,connectAddressNext,allocator,null,0,connectAddressNext.getOption(INACTIVITY_TIMEOUT),false,sequenceNo);
              wsebSession.suspendWrite();
              return wsebSession;
            }
          }
;
          return newSession(wseSessionInitializer,wseConnectFuture,wseSessionFactory);
        }
      }
;
      WSE_SESSION_FACTORY_KEY.set(httpSession,createSession);
      WSE_CONNECT_FUTURE_KEY.set(httpSession,wseConnectFuture);
    }
  }
;
}","private <T extends ConnectFuture>IoSessionInitializer<ConnectFuture> createParentInitializer(final ResourceAddress connectAddressNext,final IoHandler handler,final IoSessionInitializer<T> initializer,final DefaultConnectFuture wseConnectFuture){
  final ResourceAddress connectAddress=connectAddressNext.getTransport();
  Protocol protocol=bridgeServiceFactory.getTransportFactory().getProtocol(connectAddress.getResource());
  if (!(protocol instanceof HttpProtocol)) {
    final String message=format(""String_Node_Str"",connectAddressNext);
    if (logger.isInfoEnabled()) {
      logger.info(message);
    }
    throw new RuntimeException(message);
  }
  return new IoSessionInitializer<ConnectFuture>(){
    @Override public void initializeSession(    final IoSession parent,    ConnectFuture future){
      final IoSessionInitializer<T> wseSessionInitializer=new IoSessionInitializer<T>(){
        @Override public void initializeSession(        IoSession session,        T future){
          WsebSession wseSession=(WsebSession)session;
          wseSession.setHandler(handler);
          wseSession.getTransportSession().getFilterChain().fireSessionCreated();
          wseSession.getTransportSession().getFilterChain().fireSessionOpened();
          if (initializer != null) {
            initializer.initializeSession(session,future);
          }
        }
      }
;
      final long sequenceNo=0;
      final HttpSession httpSession=(HttpSession)parent;
      httpSession.setWriteHeader(HEADER_X_ACCEPT_COMMANDS,""String_Node_Str"");
      httpSession.setWriteHeader(HttpHeaders.HEADER_X_SEQUENCE_NO,Long.toString(sequenceNo));
      final IoBufferAllocatorEx<WsBuffer> allocator=new WsebBufferAllocator(httpSession.getBufferAllocator());
      Callable<WsebSession> createSession=new Callable<WsebSession>(){
        @Override public WsebSession call() throws Exception {
          Callable<WsebSession> wseSessionFactory=new Callable<WsebSession>(){
            @Override public WsebSession call() throws Exception {
              WsebSession wsebSession=new WsebSession(httpSession.getIoLayer(),httpSession.getIoThread(),httpSession.getIoExecutor(),WsebConnector.this,getProcessor(),connectAddressNext,connectAddressNext,allocator,null,0,connectAddressNext.getOption(INACTIVITY_TIMEOUT),false,sequenceNo,null);
              wsebSession.suspendWrite();
              return wsebSession;
            }
          }
;
          return newSession(wseSessionInitializer,wseConnectFuture,wseSessionFactory);
        }
      }
;
      WSE_SESSION_FACTORY_KEY.set(httpSession,createSession);
      WSE_CONNECT_FUTURE_KEY.set(httpSession,wseConnectFuture);
    }
  }
;
}"
96597,"@Override public WsebSession call() throws Exception {
  WsebSession wsebSession=new WsebSession(httpSession.getIoLayer(),httpSession.getIoThread(),httpSession.getIoExecutor(),WsebConnector.this,getProcessor(),connectAddressNext,connectAddressNext,allocator,null,0,connectAddressNext.getOption(INACTIVITY_TIMEOUT),false,sequenceNo);
  wsebSession.suspendWrite();
  return wsebSession;
}","@Override public WsebSession call() throws Exception {
  WsebSession wsebSession=new WsebSession(httpSession.getIoLayer(),httpSession.getIoThread(),httpSession.getIoExecutor(),WsebConnector.this,getProcessor(),connectAddressNext,connectAddressNext,allocator,null,0,connectAddressNext.getOption(INACTIVITY_TIMEOUT),false,sequenceNo,null);
  wsebSession.suspendWrite();
  return wsebSession;
}"
96598,"public WsebSession(int ioLayer,Thread ioThread,Executor ioExecutor,IoServiceEx service,IoProcessorEx<WsebSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoBufferAllocatorEx<WsBuffer> allocator,DefaultLoginResult loginResult,int clientIdleTimeout,long inactivityTimeout,boolean validateSequenceNo,long sequenceNo){
  super(ioLayer,ioThread,ioExecutor,service,wsebSessionProcessor,localAddress,remoteAddress,allocator,Direction.BOTH,loginResult);
  this.attachingWrite=new AtomicBoolean(false);
  this.readSession=new AtomicReference<>();
  this.pendingNewWriter=new AtomicReference<>();
  this.timeout=new TimeoutCommand(this);
  this.clientIdleTimeout=clientIdleTimeout;
  this.inactivityTimeout=inactivityTimeout;
  this.validateSequenceNo=validateSequenceNo;
  this.readerSequenceNo=sequenceNo + 1;
  this.writerSequenceNo=sequenceNo + 1;
  this.transportSession=new TransportSession(this,processor);
  transportSession.setHandler(transportHandler);
}","public WsebSession(int ioLayer,Thread ioThread,Executor ioExecutor,IoServiceEx service,IoProcessorEx<WsebSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoBufferAllocatorEx<WsBuffer> allocator,DefaultLoginResult loginResult,int clientIdleTimeout,long inactivityTimeout,boolean validateSequenceNo,long sequenceNo,List<WebSocketExtension> extensions){
  super(ioLayer,ioThread,ioExecutor,service,wsebSessionProcessor,localAddress,remoteAddress,allocator,Direction.BOTH,loginResult,extensions);
  this.attachingWrite=new AtomicBoolean(false);
  this.readSession=new AtomicReference<>();
  this.pendingNewWriter=new AtomicReference<>();
  this.timeout=new TimeoutCommand(this);
  this.clientIdleTimeout=clientIdleTimeout;
  this.inactivityTimeout=inactivityTimeout;
  this.validateSequenceNo=validateSequenceNo;
  this.readerSequenceNo=sequenceNo + 1;
  this.writerSequenceNo=sequenceNo + 1;
  this.transportSession=new TransportSession(this,processor);
  transportSession.setHandler(transportHandler);
}"
96599,"@Override public WsnSession call(){
  URI httpRequestURI=httpUri;
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  IoBufferAllocatorEx<WsBuffer> allocator=wasHixieHandshake ? new WsDraftHixieBufferAllocator(parentAllocator) : new WsBufferAllocator(parentAllocator,false);
  WsnSession newWsnSession=new WsnSession(WsnAcceptor.this,getProcessor(),localAddress,remoteAddress,session,allocator,httpRequestURI,loginContext == null ? new DefaultLoginResult() : loginContext.getLoginResult(),wsVersion);
  IoHandler handler=getHandler(localAddress);
  newWsnSession.setHandler(handler);
  newWsnSession.setBridgeServiceFactory(bridgeServiceFactory);
  newWsnSession.setResourceAddressFactory(resourceAddressFactory);
  newWsnSession.setScheduler(scheduler);
  return newWsnSession;
}","@Override public WsnSession call(){
  URI httpRequestURI=httpUri;
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  IoBufferAllocatorEx<WsBuffer> allocator=wasHixieHandshake ? new WsDraftHixieBufferAllocator(parentAllocator) : new WsBufferAllocator(parentAllocator,false);
  WsnSession newWsnSession=new WsnSession(WsnAcceptor.this,getProcessor(),localAddress,remoteAddress,session,allocator,httpRequestURI,loginContext == null ? new DefaultLoginResult() : loginContext.getLoginResult(),wsVersion,null);
  IoHandler handler=getHandler(localAddress);
  newWsnSession.setHandler(handler);
  newWsnSession.setBridgeServiceFactory(bridgeServiceFactory);
  newWsnSession.setResourceAddressFactory(resourceAddressFactory);
  newWsnSession.setScheduler(scheduler);
  return newWsnSession;
}"
96600,"@Override public WsnSession call() throws Exception {
  final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
  IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
  WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
  return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455);
}","@Override public WsnSession call() throws Exception {
  final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
  IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
  WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
  return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
}"
96601,"protected <T extends ConnectFuture>ConnectFuture wsnConnectInternal(ResourceAddress connectAddress,IoHandler handler,final IoSessionInitializer<T> initializer){
  final DefaultConnectFuture wsnConnectFuture=new DefaultConnectFuture();
  IoFutureListener<ConnectFuture> parentConnectListener=new IoFutureListener<ConnectFuture>(){
    @Override public void operationComplete(    ConnectFuture future){
      if (!future.isConnected()) {
        wsnConnectFuture.setException(future.getException());
      }
 else {
        IoSession httpSession=future.getSession();
        httpSession.getCloseFuture().addListener(new IoFutureListener<CloseFuture>(){
          @Override public void operationComplete(          CloseFuture future){
            HttpConnectSession httpSession=(HttpConnectSession)future.getSession();
            HttpStatus httpStatus=httpSession.getStatus();
switch (httpStatus) {
case INFO_SWITCHING_PROTOCOLS:
              doUpgrade(httpSession);
            break;
default :
          Throwable exception=new ConnectException(String.format(""String_Node_Str"",httpStatus.code(),httpStatus.reason())).fillInStackTrace();
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + exception);
        }
      wsnConnectFuture.setException(exception);
    break;
}
}
private void doUpgrade(final HttpConnectSession httpSession){
final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
  @Override public void operationComplete(  UpgradeFuture future){
    final IoSessionEx parent=(IoSessionEx)future.getSession();
    final Callable<WsnSession> createSession=new Callable<WsnSession>(){
      @Override public WsnSession call() throws Exception {
        Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
          @Override public WsnSession call() throws Exception {
            final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
            IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
            WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
            return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455);
          }
        }
;
        return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
      }
    }
;
    String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
    if (wsAcceptHeader == null) {
      logger.info(""String_Node_Str"");
      wsnConnectFuture.setException(new Exception(""String_Node_Str""));
      return;
    }
    String frameType=httpSession.getReadHeader(""String_Node_Str"");
    if (""String_Node_Str"".equals(frameType)) {
      parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
    }
 else     if (""String_Node_Str"".equals(frameType)) {
      parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
    }
 else {
      parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
    }
    WSN_SESSION_FACTORY_KEY.set(parent,createSession);
    parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
  }
}
);
}
}
);
}
}
}
;
IoSessionInitializer<ConnectFuture> parentInitializer=createParentInitializer(connectAddress,handler,initializer,wsnConnectFuture);
final ResourceAddress createAddress=connectAddress.getTransport();
BridgeConnector connector=bridgeServiceFactory.newBridgeConnector(createAddress);
connector.connect(createAddress,selectConnectHandler(createAddress),parentInitializer).addListener(parentConnectListener);
return wsnConnectFuture;
}","protected <T extends ConnectFuture>ConnectFuture wsnConnectInternal(ResourceAddress connectAddress,IoHandler handler,final IoSessionInitializer<T> initializer){
  final DefaultConnectFuture wsnConnectFuture=new DefaultConnectFuture();
  IoFutureListener<ConnectFuture> parentConnectListener=new IoFutureListener<ConnectFuture>(){
    @Override public void operationComplete(    ConnectFuture future){
      if (!future.isConnected()) {
        wsnConnectFuture.setException(future.getException());
      }
 else {
        IoSession httpSession=future.getSession();
        httpSession.getCloseFuture().addListener(new IoFutureListener<CloseFuture>(){
          @Override public void operationComplete(          CloseFuture future){
            HttpConnectSession httpSession=(HttpConnectSession)future.getSession();
            HttpStatus httpStatus=httpSession.getStatus();
switch (httpStatus) {
case INFO_SWITCHING_PROTOCOLS:
              doUpgrade(httpSession);
            break;
default :
          Throwable exception=new ConnectException(String.format(""String_Node_Str"",httpStatus.code(),httpStatus.reason())).fillInStackTrace();
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + exception);
        }
      wsnConnectFuture.setException(exception);
    break;
}
}
private void doUpgrade(final HttpConnectSession httpSession){
final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
  @Override public void operationComplete(  UpgradeFuture future){
    final IoSessionEx parent=(IoSessionEx)future.getSession();
    final Callable<WsnSession> createSession=new Callable<WsnSession>(){
      @Override public WsnSession call() throws Exception {
        Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
          @Override public WsnSession call() throws Exception {
            final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
            IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
            WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
            return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
          }
        }
;
        return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
      }
    }
;
    String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
    if (wsAcceptHeader == null) {
      logger.info(""String_Node_Str"");
      wsnConnectFuture.setException(new Exception(""String_Node_Str""));
      return;
    }
    String frameType=httpSession.getReadHeader(""String_Node_Str"");
    if (""String_Node_Str"".equals(frameType)) {
      parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
    }
 else     if (""String_Node_Str"".equals(frameType)) {
      parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
    }
 else {
      parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
    }
    WSN_SESSION_FACTORY_KEY.set(parent,createSession);
    parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
  }
}
);
}
}
);
}
}
}
;
IoSessionInitializer<ConnectFuture> parentInitializer=createParentInitializer(connectAddress,handler,initializer,wsnConnectFuture);
final ResourceAddress createAddress=connectAddress.getTransport();
BridgeConnector connector=bridgeServiceFactory.newBridgeConnector(createAddress);
connector.connect(createAddress,selectConnectHandler(createAddress),parentInitializer).addListener(parentConnectListener);
return wsnConnectFuture;
}"
96602,"@Override public void operationComplete(UpgradeFuture future){
  final IoSessionEx parent=(IoSessionEx)future.getSession();
  final Callable<WsnSession> createSession=new Callable<WsnSession>(){
    @Override public WsnSession call() throws Exception {
      Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
          IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
          WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
          return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455);
        }
      }
;
      return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
    }
  }
;
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String frameType=httpSession.getReadHeader(""String_Node_Str"");
  if (""String_Node_Str"".equals(frameType)) {
    parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
  }
 else   if (""String_Node_Str"".equals(frameType)) {
    parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
  }
 else {
    parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
  }
  WSN_SESSION_FACTORY_KEY.set(parent,createSession);
  parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
}","@Override public void operationComplete(UpgradeFuture future){
  final IoSessionEx parent=(IoSessionEx)future.getSession();
  final Callable<WsnSession> createSession=new Callable<WsnSession>(){
    @Override public WsnSession call() throws Exception {
      Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
          IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
          WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
          return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
        }
      }
;
      return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
    }
  }
;
  String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
  if (wsAcceptHeader == null) {
    logger.info(""String_Node_Str"");
    wsnConnectFuture.setException(new Exception(""String_Node_Str""));
    return;
  }
  String frameType=httpSession.getReadHeader(""String_Node_Str"");
  if (""String_Node_Str"".equals(frameType)) {
    parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
  }
 else   if (""String_Node_Str"".equals(frameType)) {
    parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
  }
 else {
    parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
  }
  WSN_SESSION_FACTORY_KEY.set(parent,createSession);
  parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
}"
96603,"private void doUpgrade(final HttpConnectSession httpSession){
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
      if (wsAcceptHeader == null) {
        logger.info(""String_Node_Str"");
        wsnConnectFuture.setException(new Exception(""String_Node_Str""));
        return;
      }
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
 else {
        parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}","private void doUpgrade(final HttpConnectSession httpSession){
  final IoSessionInitializer<? extends IoFuture> wsnSessionInitializer=WSN_SESSION_INITIALIZER_KEY.remove(httpSession);
  final ConnectFuture wsnConnectFuture=WSN_CONNECT_FUTURE_KEY.get(httpSession);
  final ResourceAddress wsnConnectAddress=WSN_CONNECT_ADDRESS_KEY.remove(httpSession);
  UpgradeFuture upgrade=httpSession.upgrade(ioBridgeHandler);
  upgrade.addListener(new IoFutureListener<UpgradeFuture>(){
    @Override public void operationComplete(    UpgradeFuture future){
      final IoSessionEx parent=(IoSessionEx)future.getSession();
      final Callable<WsnSession> createSession=new Callable<WsnSession>(){
        @Override public WsnSession call() throws Exception {
          Callable<WsnSession> wsnSessionFactory=new Callable<WsnSession>(){
            @Override public WsnSession call() throws Exception {
              final ResourceAddress localAddress=resourceAddressFactory.newResourceAddress(wsnConnectAddress,BridgeSession.LOCAL_ADDRESS.get(httpSession));
              IoBufferAllocatorEx<?> parentAllocator=parent.getBufferAllocator();
              WsBufferAllocator wsAllocator=new WsBufferAllocator(parentAllocator);
              return new WsnSession(WsnConnector.this,getProcessor(),localAddress,wsnConnectAddress,parent,wsAllocator,httpSession.getRequestURI(),null,WebSocketWireProtocol.RFC_6455,null);
            }
          }
;
          return newSession(wsnSessionInitializer,wsnConnectFuture,wsnSessionFactory);
        }
      }
;
      String wsAcceptHeader=httpSession.getReadHeader(""String_Node_Str"");
      if (wsAcceptHeader == null) {
        logger.info(""String_Node_Str"");
        wsnConnectFuture.setException(new Exception(""String_Node_Str""));
        return;
      }
      String frameType=httpSession.getReadHeader(""String_Node_Str"");
      if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BINARY);
      }
 else       if (""String_Node_Str"".equals(frameType)) {
        parent.setAttribute(ENCODING_KEY,Encoding.BASE64);
      }
 else {
        parent.setAttribute(ENCODING_KEY,Encoding.TEXT);
      }
      WSN_SESSION_FACTORY_KEY.set(parent,createSession);
      parent.setAttribute(WSN_CONNECT_ADDRESS_KEY,wsnConnectAddress);
    }
  }
);
}"
96604,"public WsnSession(IoServiceEx service,IoProcessorEx<WsnSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoSessionEx parent,IoBufferAllocatorEx<WsBuffer> allocator,URI httpRequestURI,DefaultLoginResult loginResult,WebSocketWireProtocol version){
  super(service,processor,localAddress,remoteAddress,parent,allocator,Direction.BOTH,loginResult);
  this.httpRequestURI=httpRequestURI;
  this.version=version;
  this.sendCloseFrame=new AtomicBoolean();
  this.sendCloseFrame.set(WebSocketWireProtocol.RFC_6455 == version || WebSocketWireProtocol.HYBI_13 == version);
}","public WsnSession(IoServiceEx service,IoProcessorEx<WsnSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoSessionEx parent,IoBufferAllocatorEx<WsBuffer> allocator,URI httpRequestURI,DefaultLoginResult loginResult,WebSocketWireProtocol version,List<WebSocketExtension> extensions){
  super(service,processor,localAddress,remoteAddress,parent,allocator,Direction.BOTH,loginResult,extensions);
  this.httpRequestURI=httpRequestURI;
  this.version=version;
  this.sendCloseFrame=new AtomicBoolean();
  this.sendCloseFrame.set(WebSocketWireProtocol.RFC_6455 == version || WebSocketWireProtocol.HYBI_13 == version);
}"
96605,"@Override public WsrSession call(){
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  WsrSession wsrSession=new WsrSession(session.getIoLayer(),session.getIoThread(),session.getIoExecutor(),WsrAcceptor.this,getProcessor(),localAddress,remoteAddress,wsrAllocator,loginContext.getLoginResult());
  wsrSession.setBridgeServiceFactory(bridgeServiceFactory);
  wsrSession.setResourceAddressFactory(resourceAddressFactory);
  wsrSession.setScheduler(scheduler);
  IoHandler handler=getHandler(localAddress);
  wsrSession.setHandler(handler);
  wsrSession.suspendWrite();
  return wsrSession;
}","@Override public WsrSession call(){
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  WsrSession wsrSession=new WsrSession(session.getIoLayer(),session.getIoThread(),session.getIoExecutor(),WsrAcceptor.this,getProcessor(),localAddress,remoteAddress,wsrAllocator,loginContext.getLoginResult(),negotiated);
  wsrSession.setBridgeServiceFactory(bridgeServiceFactory);
  wsrSession.setResourceAddressFactory(resourceAddressFactory);
  wsrSession.setScheduler(scheduler);
  IoHandler handler=getHandler(localAddress);
  wsrSession.setHandler(handler);
  wsrSession.suspendWrite();
  return wsrSession;
}"
96606,"@Override public void initializeSession(IoSession wsSession,IoFuture future){
  wsSession.setAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY,session.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY));
  wsSession.setAttribute(HTTP_REQUEST_URI_KEY,session.getRequestURL());
  ((AbstractWsBridgeSession)wsSession).setSubject(session.getSubject());
  wsSession.setAttribute(BridgeSession.NEXT_PROTOCOL_KEY,wsProtocol0);
  wsExtensions0.set(wsSession);
}","@Override public void initializeSession(IoSession wsSession,IoFuture future){
  wsSession.setAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY,session.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY));
  wsSession.setAttribute(HTTP_REQUEST_URI_KEY,session.getRequestURL());
  ((AbstractWsBridgeSession)wsSession).setSubject(session.getSubject());
  wsSession.setAttribute(BridgeSession.NEXT_PROTOCOL_KEY,wsProtocol0);
}"
96607,"@Override public WsrSession call(){
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  WsrSession wsrSession=new WsrSession(session.getIoLayer(),session.getIoThread(),session.getIoExecutor(),WsrAcceptor.this,getProcessor(),localAddress,remoteAddress,wsrAllocator,loginContext.getLoginResult(),wsExtensions0);
  wsrSession.setBridgeServiceFactory(bridgeServiceFactory);
  wsrSession.setResourceAddressFactory(resourceAddressFactory);
  wsrSession.setScheduler(scheduler);
  IoHandler handler=getHandler(localAddress);
  wsrSession.setHandler(handler);
  wsrSession.suspendWrite();
  return wsrSession;
}","@Override public WsrSession call(){
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  ResultAwareLoginContext loginContext=(ResultAwareLoginContext)session.getAttribute(HttpLoginSecurityFilter.LOGIN_CONTEXT_KEY);
  WsrSession wsrSession=new WsrSession(session.getIoLayer(),session.getIoThread(),session.getIoExecutor(),WsrAcceptor.this,getProcessor(),localAddress,remoteAddress,wsrAllocator,loginContext.getLoginResult());
  wsrSession.setBridgeServiceFactory(bridgeServiceFactory);
  wsrSession.setResourceAddressFactory(resourceAddressFactory);
  wsrSession.setScheduler(scheduler);
  IoHandler handler=getHandler(localAddress);
  wsrSession.setHandler(handler);
  wsrSession.suspendWrite();
  return wsrSession;
}"
96608,"private void doHandleConnect(final IoSessionEx session,RtmpConnectCommandMessage request) throws Exception {
  RtmpConnectResponseCommandMessage response=new RtmpConnectResponseCommandMessage();
  response.setTransactionId(request.getTransactionId());
  response.setChunkStreamId(COMMAND_STREAM_ID);
  URI rtmpAddress=new URI(request.getTcUrl());
  WsrSession wsrSession=sessionMap.get(rtmpAddress);
  wsrSession.setParent(session);
  SESSION_KEY.set(session,wsrSession);
  final ActiveExtensions extensions=ActiveExtensions.get(wsrSession);
  codec.setExtensions(session,extensions);
  if (session.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY) == null) {
    session.setAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY,wsrSession.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY));
  }
  wsrSession.startupSessionTimeoutCommand();
  RtmpConnectResponseCommandMessage result=new RtmpConnectResponseCommandMessage();
  result.setTransactionId(request.getTransactionId());
  result.setMessageStreamId(request.getMessageStreamId());
  ScheduledFuture<?> timeoutFuture=(ScheduledFuture<?>)wsrSession.removeAttribute(TIMEOUT_FUTURE_KEY);
  if (timeoutFuture != null && !timeoutFuture.isDone()) {
    timeoutFuture.cancel(false);
  }
  wsrSession.clearTimeoutCommand();
  session.write(response);
}","private void doHandleConnect(final IoSessionEx session,RtmpConnectCommandMessage request) throws Exception {
  RtmpConnectResponseCommandMessage response=new RtmpConnectResponseCommandMessage();
  response.setTransactionId(request.getTransactionId());
  response.setChunkStreamId(COMMAND_STREAM_ID);
  URI rtmpAddress=new URI(request.getTcUrl());
  WsrSession wsrSession=sessionMap.get(rtmpAddress);
  wsrSession.setParent(session);
  SESSION_KEY.set(session,wsrSession);
  if (session.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY) == null) {
    session.setAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY,wsrSession.getAttribute(HttpAcceptor.SERVICE_REGISTRATION_KEY));
  }
  wsrSession.startupSessionTimeoutCommand();
  RtmpConnectResponseCommandMessage result=new RtmpConnectResponseCommandMessage();
  result.setTransactionId(request.getTransactionId());
  result.setMessageStreamId(request.getMessageStreamId());
  ScheduledFuture<?> timeoutFuture=(ScheduledFuture<?>)wsrSession.removeAttribute(TIMEOUT_FUTURE_KEY);
  if (timeoutFuture != null && !timeoutFuture.isDone()) {
    timeoutFuture.cancel(false);
  }
  wsrSession.clearTimeoutCommand();
  session.write(response);
}"
96609,"@Override public WsrSession call() throws Exception {
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  WsrSession wsrSession=new WsrSession(WsrConnector.this,getProcessor(),connectAddress,connectAddress,session,wsrAllocator,null,null);
  wsrSession.setRtmpAddress(rtmpAddress);
  wsrSession.suspendWrite();
  return wsrSession;
}","@Override public WsrSession call() throws Exception {
  IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
  WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
  WsrSession wsrSession=new WsrSession(WsrConnector.this,getProcessor(),connectAddress,connectAddress,session,wsrAllocator,null);
  wsrSession.setRtmpAddress(rtmpAddress);
  wsrSession.suspendWrite();
  return wsrSession;
}"
96610,"public void addBridgeFilters(org.apache.mina.core.filterchain.IoFilterChain filterChain){
  if (logger.isTraceEnabled()) {
    filterChain.addFirst(TRACE_LOGGING_FILTER,new ObjectLoggingFilter(logger,WsrProtocol.NAME + ""String_Node_Str""));
  }
 else   if (logger.isDebugEnabled()) {
    filterChain.addFirst(FAULT_LOGGING_FILTER,new ExceptionLoggingFilter(logger,WsrProtocol.NAME + ""String_Node_Str""));
  }
  filterChain.addLast(""String_Node_Str"",codec);
  filterChain.addLast(""String_Node_Str"",new LoggingFilter(""String_Node_Str""));
}","@Override public void addBridgeFilters(org.apache.mina.core.filterchain.IoFilterChain filterChain){
  if (logger.isTraceEnabled()) {
    filterChain.addFirst(TRACE_LOGGING_FILTER,new ObjectLoggingFilter(logger,WsrProtocol.NAME + ""String_Node_Str""));
  }
 else   if (logger.isDebugEnabled()) {
    filterChain.addFirst(FAULT_LOGGING_FILTER,new ExceptionLoggingFilter(logger,WsrProtocol.NAME + ""String_Node_Str""));
  }
  filterChain.addLast(""String_Node_Str"",codec);
  filterChain.addLast(""String_Node_Str"",new LoggingFilter(""String_Node_Str""));
}"
96611,"@Override public void operationComplete(ConnectFuture future){
  ConnectRequest<?> connectRequest=CONNECT_REQUEST_KEY.remove(createSession);
  try {
    final ResourceAddress connectAddress=connectRequest.connectAddress;
    final IoSessionEx session=(IoSessionEx)future.getSession();
    Callable<WsrSession> bridgeSessionFactory=new Callable<WsrSession>(){
      @Override public WsrSession call() throws Exception {
        IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
        WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
        WsrSession wsrSession=new WsrSession(WsrConnector.this,getProcessor(),connectAddress,connectAddress,session,wsrAllocator,null,null);
        wsrSession.setRtmpAddress(rtmpAddress);
        wsrSession.suspendWrite();
        return wsrSession;
      }
    }
;
    WsrSession wsrSession=newSession(connectRequest.initializer,connectRequest.connectFuture,bridgeSessionFactory);
    session.setAttribute(WSR_SESSION_KEY,wsrSession);
  }
 catch (  Exception e) {
    connectRequest.connectFuture.setException(e);
  }
}","@Override public void operationComplete(ConnectFuture future){
  ConnectRequest<?> connectRequest=CONNECT_REQUEST_KEY.remove(createSession);
  try {
    final ResourceAddress connectAddress=connectRequest.connectAddress;
    final IoSessionEx session=(IoSessionEx)future.getSession();
    Callable<WsrSession> bridgeSessionFactory=new Callable<WsrSession>(){
      @Override public WsrSession call() throws Exception {
        IoBufferAllocatorEx<?> parentAllocator=session.getBufferAllocator();
        WsrBufferAllocator wsrAllocator=new WsrBufferAllocator(parentAllocator);
        WsrSession wsrSession=new WsrSession(WsrConnector.this,getProcessor(),connectAddress,connectAddress,session,wsrAllocator,null);
        wsrSession.setRtmpAddress(rtmpAddress);
        wsrSession.suspendWrite();
        return wsrSession;
      }
    }
;
    WsrSession wsrSession=newSession(connectRequest.initializer,connectRequest.connectFuture,bridgeSessionFactory);
    session.setAttribute(WSR_SESSION_KEY,wsrSession);
  }
 catch (  Exception e) {
    connectRequest.connectFuture.setException(e);
  }
}"
96612,"public WsrSession(int ioLayer,Thread parentIoThread,Executor parentIoExecutor,IoServiceEx service,IoProcessorEx<WsrSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoBufferAllocatorEx<WsrBuffer> allocator,DefaultLoginResult loginResult,ActiveExtensions wsExtensions){
  super(ioLayer,parentIoThread,parentIoExecutor,service,processor,localAddress,remoteAddress,allocator,Direction.BOTH,loginResult,wsExtensions);
}","public WsrSession(int ioLayer,Thread parentIoThread,Executor parentIoExecutor,IoServiceEx service,IoProcessorEx<WsrSession> processor,ResourceAddress localAddress,ResourceAddress remoteAddress,IoBufferAllocatorEx<WsrBuffer> allocator,DefaultLoginResult loginResult){
  super(ioLayer,parentIoThread,parentIoExecutor,service,processor,localAddress,remoteAddress,allocator,Direction.BOTH,loginResult);
}"
96613,"public ProtocolDecoder getDecoder(IoSession session){
  return new RtmpChunkDecoder();
}","@Override public ProtocolDecoder getDecoder(IoSession session){
  return new RtmpChunkDecoder();
}"
96614,"public ProtocolEncoder getEncoder(IoSession session){
  IoSessionEx sessionEx=(IoSessionEx)session;
  IoBufferAllocatorEx<?> allocator=sessionEx.getBufferAllocator();
  if (session instanceof BridgeSession) {
    BridgeSession bridgeSession=(BridgeSession)session;
    return new RtmpEncoder(bridgeSession.getMessageEncoder(),allocator);
  }
  return new RtmpEncoder(allocator);
}","@Override public ProtocolEncoder getEncoder(IoSession session){
  IoSessionEx sessionEx=(IoSessionEx)session;
  IoBufferAllocatorEx<?> allocator=sessionEx.getBufferAllocator();
  if (session instanceof BridgeSession) {
    BridgeSession bridgeSession=(BridgeSession)session;
    return new RtmpEncoder(bridgeSession.getMessageEncoder(),allocator);
  }
  return new RtmpEncoder(allocator);
}"
96615,"private void doEncodeData(IoSession session,RtmpDataMessage message,ProtocolEncoderOutput out){
switch (message.getDataKind()) {
case BINARY:
{
      RtmpBinaryDataMessage binaryMessage=(RtmpBinaryDataMessage)message;
      IoBufferEx buf=binaryMessage.getBytes();
      byte[] escapeBytes=null;
      boolean escaping=false;
      if (escapeSequencer != null) {
        escapeBytes=escapeSequencer.getEscapeBytes(buf);
        escaping=escapeBytes.length > 0;
      }
      if (escaping) {
        out.write(RtmpEncodingSupport.doBinaryEscapedEncode(allocator,buf,message,maximumChunkSize,escapeBytes));
      }
 else {
        out.write(RtmpEncodingSupport.doBinaryEncode(allocator,buf,message,maximumChunkSize));
      }
      break;
    }
case SAMPLE_ACCESS:
{
    IoBufferEx buf=allocator.wrap(allocator.allocate(100));
    Amf0Utils.encodeBoolean(buf,false);
    Amf0Utils.encodeBoolean(buf,false);
    buf.flip();
    out.write(doEncodeChunk0(DOWNSTREAM_CHUNKSTREAM_ID,buf,message));
    break;
  }
}
}","private void doEncodeData(IoSession session,RtmpDataMessage message,ProtocolEncoderOutput out){
switch (message.getDataKind()) {
case BINARY:
{
      RtmpBinaryDataMessage binaryMessage=(RtmpBinaryDataMessage)message;
      IoBufferEx buf=binaryMessage.getBytes();
      out.write(RtmpEncodingSupport.doBinaryEncode(allocator,buf,message,maximumChunkSize));
      break;
    }
case SAMPLE_ACCESS:
{
    IoBufferEx buf=allocator.wrap(allocator.allocate(100));
    Amf0Utils.encodeBoolean(buf,false);
    Amf0Utils.encodeBoolean(buf,false);
    buf.flip();
    out.write(doEncodeChunk0(DOWNSTREAM_CHUNKSTREAM_ID,buf,message));
    break;
  }
}
}"
96616,"@Override protected Object doFilterWriteWsText(NextFilter nextFilter,IoSession session,WriteRequest writeRequest,WsTextMessage wsText) throws Exception {
  IoBufferEx buf=wsText.getBytes();
  if (buf.remaining() < CONTROL_BYTES.length) {
    return wsText;
  }
  byte[] leadingBytes=new byte[CONTROL_BYTES.length];
  int pos=buf.position();
  buf.get(leadingBytes);
  buf.position(pos);
  if (Arrays.equals(CONTROL_BYTES,leadingBytes)) {
    nextFilter.filterWrite(session,new DefaultWriteRequestEx(escapeFrame));
  }
  return wsText;
}","@Override protected Object doFilterWriteWsText(NextFilter nextFilter,IoSession session,WriteRequest writeRequest,WsTextMessage wsText) throws Exception {
  IoBufferEx buf=wsText.getBytes();
  if (buf.remaining() < CONTROL_BYTES.length) {
    return wsText;
  }
  int pos=buf.position();
  for (int i=0; i < CONTROL_BYTES.length; i++) {
    if (buf.get(pos + i) != CONTROL_BYTES[i]) {
      return wsText;
    }
  }
  nextFilter.filterWrite(session,new DefaultWriteRequestEx(escapeMessage));
  return wsText;
}"
96617,"@Override public void onPreAdd(IoFilterChain parent,String name,NextFilter nextFilter) throws Exception {
  IoSessionEx sessionEx=(IoSessionEx)parent.getSession();
  IoBufferAllocatorEx<?> allocator=sessionEx.getBufferAllocator();
  emulatedPing=createTextMessage(allocator,EMULATED_PING_FRAME_PAYLOAD);
  emulatedPong=createTextMessage(allocator,EMULATED_PONG_FRAME_PAYLOAD);
  escapeFrame=createTextMessage(allocator,CONTROL_BYTES);
}","@Override public void onPreAdd(IoFilterChain parent,String name,NextFilter nextFilter) throws Exception {
  IoSessionEx sessionEx=(IoSessionEx)parent.getSession();
  IoBufferAllocatorEx<?> allocator=sessionEx.getBufferAllocator();
  emulatedPing=createTextMessage(allocator,EMULATED_PING_FRAME_PAYLOAD);
  emulatedPong=createTextMessage(allocator,EMULATED_PONG_FRAME_PAYLOAD);
  escapeMessage=createTextMessage(allocator,CONTROL_BYTES);
}"
96618,"@Override protected void wsTextReceived(NextFilter nextFilter,IoSession session,WsTextMessage wsText) throws Exception {
  IoBufferEx buf=wsText.getBytes();
  if (buf.remaining() >= CONTROL_BYTES.length) {
  }
  super.messageReceived(nextFilter,session,wsText);
}","@Override protected void wsTextReceived(NextFilter nextFilter,IoSession session,WsTextMessage wsText) throws Exception {
  IoBufferEx buf=wsText.getBytes();
  boolean skip=false;
  if (buf.remaining() == CONTROL_BYTES.length) {
    skip=true;
    int pos=buf.position();
    for (int i=0; i < CONTROL_BYTES.length; i++) {
      if (buf.get(pos + i) != CONTROL_BYTES[i]) {
        skip=false;
        break;
      }
    }
  }
  if (!skip) {
    super.wsTextReceived(nextFilter,session,wsText);
  }
}"
96619,"@Override protected void flushInternal(final WsebSession session){
  final HttpAcceptSession writer=(HttpAcceptSession)session.getWriter();
  if (writer == null || writer.isClosing()) {
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(String.format(""String_Node_Str"" + ""String_Node_Str"",writer,writer == null ? ""String_Node_Str"" : Boolean.valueOf(writer.isClosing())));
    }
    return;
  }
  WriteFuture lastWrite=null;
  IoFilterChain filterChain=session.getFilterChain();
  WriteRequest currentWriteRequest=session.getCurrentWriteRequest();
  if (currentWriteRequest != null) {
    session.setCurrentWriteRequest(null);
  }
  final WriteRequestQueue writeRequestQueue=session.getWriteRequestQueue();
  Long clientBuffer=(Long)writer.getAttribute(WsebAcceptor.CLIENT_BUFFER_KEY);
  do {
    WriteRequest request=currentWriteRequest;
    if (request == null) {
      request=writeRequestQueue.poll(session);
      if (request == null) {
        if (session.isClosing() || writer.isClosing()) {
          break;
        }
        if (lastWrite != null) {
          lastWrite.addListener(CHECK_INITIAL_PADDING);
        }
 else {
          checkInitialPadding(writer);
        }
        checkBuffer(writer,session);
        break;
      }
    }
 else {
      currentWriteRequest=null;
    }
    if (WsebSession.isReconnectRequest(request)) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(String.format(""String_Node_Str"",writer.getId()));
      }
      session.detachWriter(writer);
      boolean attached=session.attachPendingWriter();
      if (!attached) {
        session.scheduleTimeout(scheduler);
      }
      break;
    }
    Object message=request.getMessage();
    if (message instanceof IoBufferEx) {
      IoBufferEx buf=(IoBufferEx)message;
      try {
        if (writer.isClosing()) {
          session.setCurrentWriteRequest(request);
          break;
        }
        int remaining=buf.remaining();
        if (remaining == 0) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        if (buf instanceof WsBuffer) {
          WsBuffer wsBuffer=(WsBuffer)buf;
          WsMessage wsebMessage=wsBuffer.getMessage();
          if (wsebMessage == null) {
            WsMessage newWsebMessage;
            if (wsBuffer.getKind() == WsBuffer.Kind.TEXT) {
              newWsebMessage=new WsTextMessage(buf);
            }
 else {
              newWsebMessage=new WsBinaryMessage(buf);
            }
            if (wsBuffer.isAutoCache()) {
              newWsebMessage.initCache();
            }
            boolean wasUpdated=wsBuffer.setMessage(newWsebMessage);
            wsebMessage=wasUpdated ? newWsebMessage : wsBuffer.getMessage();
          }
          lastWrite=flushNowInternal(writer,wsebMessage,wsBuffer,filterChain,request);
        }
 else {
          lastWrite=flushNowInternal(writer,new WsBinaryMessage(buf),buf,filterChain,request);
        }
        int written=remaining;
        session.increaseWrittenBytes(written,System.currentTimeMillis());
        if (!session.isReconnecting()) {
          boolean checkBlockPadding=(writer.getAttribute(WsebAcceptor.CLIENT_BLOCK_PADDING_KEY) != null);
          if (checkBlockPadding) {
            checkBufferPadding(writer,session);
          }
 else {
            if (clientBuffer != null) {
              checkBuffer(writer,session);
            }
          }
        }
      }
 catch (      Exception e) {
        request.getFuture().setException(e);
      }
    }
 else     if (WsebSession.isPingRequest(request) || WsebSession.isPongRequest(request)) {
      boolean ping=WsebSession.isPingRequest(request);
      if (LOGGER.isDebugEnabled()) {
        String poing=ping ? ""String_Node_Str"" : ""String_Node_Str"";
        LOGGER.debug(String.format(""String_Node_Str"",poing,session,poing));
      }
      try {
        if (writer.isClosing()) {
          break;
        }
        IoBufferAllocatorEx<?> allocator=session.getBufferAllocator();
        IoBufferEx emptyBuf=allocator.wrap(allocator.allocate(0));
        emptyBuf.mark();
        WsMessage emptyPoing=ping ? new WsPingMessage(emptyBuf) : new WsPongMessage(emptyBuf);
        writer.write(emptyPoing);
      }
  finally {
        session.setCurrentWriteRequest(null);
      }
      break;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + message.getClass().getName() + ""String_Node_Str"");
    }
  }
 while (true);
}","@Override protected void flushInternal(final WsebSession session){
  final HttpAcceptSession writer=(HttpAcceptSession)session.getWriter();
  if (writer == null || writer.isClosing()) {
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(String.format(""String_Node_Str"" + ""String_Node_Str"",writer,writer == null ? ""String_Node_Str"" : Boolean.valueOf(writer.isClosing())));
    }
    return;
  }
  WriteFuture lastWrite=null;
  IoFilterChain filterChain=session.getFilterChain();
  WriteRequest currentWriteRequest=session.getCurrentWriteRequest();
  if (currentWriteRequest != null) {
    session.setCurrentWriteRequest(null);
  }
  final WriteRequestQueue writeRequestQueue=session.getWriteRequestQueue();
  Long clientBuffer=(Long)writer.getAttribute(WsebAcceptor.CLIENT_BUFFER_KEY);
  do {
    WriteRequest request=currentWriteRequest;
    if (request == null) {
      request=writeRequestQueue.poll(session);
      if (request == null) {
        if (session.isClosing() || writer.isClosing()) {
          break;
        }
        if (lastWrite != null) {
          lastWrite.addListener(CHECK_INITIAL_PADDING);
        }
 else {
          checkInitialPadding(writer);
        }
        checkBuffer(writer,session);
        break;
      }
    }
 else {
      currentWriteRequest=null;
    }
    if (WsebSession.isReconnectRequest(request)) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(String.format(""String_Node_Str"",writer.getId()));
      }
      session.detachWriter(writer);
      boolean attached=session.attachPendingWriter();
      if (!attached) {
        session.scheduleTimeout(scheduler);
      }
      break;
    }
    Object message=request.getMessage();
    if (message instanceof IoBufferEx) {
      IoBufferEx buf=(IoBufferEx)message;
      try {
        if (writer.isClosing()) {
          session.setCurrentWriteRequest(request);
          break;
        }
        int remaining=buf.remaining();
        if (remaining == 0) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        if (buf instanceof WsBuffer) {
          WsBuffer wsBuffer=(WsBuffer)buf;
          WsMessage wsebMessage=wsBuffer.getMessage();
          if (wsebMessage == null) {
            WsMessage newWsebMessage;
            if (wsBuffer.getKind() == WsBuffer.Kind.TEXT) {
              newWsebMessage=new WsTextMessage(buf);
            }
 else {
              newWsebMessage=new WsBinaryMessage(buf);
            }
            if (wsBuffer.isAutoCache()) {
              newWsebMessage.initCache();
            }
            boolean wasUpdated=wsBuffer.setMessage(newWsebMessage);
            wsebMessage=wasUpdated ? newWsebMessage : wsBuffer.getMessage();
          }
          lastWrite=flushNowInternal(writer,wsebMessage,wsBuffer,filterChain,request);
        }
 else {
          lastWrite=flushNowInternal(writer,new WsBinaryMessage(buf),buf,filterChain,request);
        }
        int written=remaining;
        session.increaseWrittenBytes(written,System.currentTimeMillis());
        if (!session.isReconnecting()) {
          boolean checkBlockPadding=(writer.getAttribute(WsebAcceptor.CLIENT_BLOCK_PADDING_KEY) != null);
          if (checkBlockPadding) {
            checkBufferPadding(writer,session);
          }
 else {
            if (clientBuffer != null) {
              checkBuffer(writer,session);
            }
          }
        }
      }
 catch (      Exception e) {
        request.getFuture().setException(e);
      }
    }
 else     if (WsebSession.isPingRequest(request) || WsebSession.isPongRequest(request)) {
      boolean ping=WsebSession.isPingRequest(request);
      if (LOGGER.isDebugEnabled()) {
        String poing=ping ? ""String_Node_Str"" : ""String_Node_Str"";
        LOGGER.debug(String.format(""String_Node_Str"",poing,session,poing));
      }
      try {
        if (writer.isClosing()) {
          break;
        }
        IoBufferAllocatorEx<?> allocator=session.getBufferAllocator();
        IoBufferEx emptyBuf=allocator.wrap(allocator.allocate(0));
        emptyBuf.mark();
        WsMessage emptyPoing=ping ? new WsPingMessage(emptyBuf) : new WsPongMessage(emptyBuf);
        writer.write(emptyPoing);
      }
  finally {
        session.setCurrentWriteRequest(null);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + message.getClass().getName() + ""String_Node_Str"");
    }
  }
 while (true);
}"
96620,"@Specification(""String_Node_Str"") @Test(timeout=15000) public void testEchoInactiveTimeoutShouldCloseConnection() throws Exception {
  robot.finish();
}","@Specification(""String_Node_Str"") @Test(timeout=15000) public void testEchoInactiveTimeoutShouldCloseConnection() throws Exception {
  k3po.finish();
}"
96621,"@Specification(""String_Node_Str"") @Test(timeout=15000) public void testEchoInactiveTimeoutShouldNotPingOldClient() throws Exception {
  robot.finish();
}","@Specification(""String_Node_Str"") @Test(timeout=15000) public void testEchoInactiveTimeoutShouldNotPingOldClient() throws Exception {
  k3po.finish();
}"
96622,"/** 
 * Method instantiating a monitoring entity factory builder and building an actual monitoring entity factory based on the AGRONA_ENABLED parameter The monitoring entity factory builder is initialized here and not in the constructor in order to have the configuration Properties object injected
 */
private void buildMonitoringEntityFactory(){
  MonitoringEntityFactoryBuilder factoryBuilder;
  if (InternalSystemProperty.AGRONA_ENABLED.getBooleanProperty(configuration)) {
    factoryBuilder=new AgronaMonitoringEntityFactoryBuilder();
  }
 else {
    factoryBuilder=new DefaultMonitoringEntityFactoryBuilderStub();
  }
  monitoringEntityFactory=factoryBuilder.build();
}","/** 
 * Method instantiating a monitoring entity factory builder and building an actual monitoring entity factory The monitoring entity factory builder is initialized here and not in the constructor in order to have the configuration Properties object injected
 */
private void buildMonitoringEntityFactory(){
  MonitoringEntityFactoryInjector monitoringEntityFactoryInjector=new MonitoringEntityFactoryInjectorImpl(configuration);
  monitoringEntityFactory=monitoringEntityFactoryInjector.makeMonitoringEntityFactory();
}"
96623,"@Override public LongMonitoringCounter incrementByValue(long value){
  return null;
}","@Override public LongMonitoringCounter incrementByValue(long value){
  return this;
}"
96624,"@Override public LongMonitoringCounter decrement(){
  return null;
}","@Override public LongMonitoringCounter decrement(){
  return this;
}"
96625,"@Override public LongMonitoringCounter setValue(long value){
  return null;
}","@Override public LongMonitoringCounter setValue(long value){
  return this;
}"
96626,"@Override public LongMonitoringCounter increment(){
  return null;
}","@Override public LongMonitoringCounter increment(){
  return this;
}"
96627,"@Override public LongMonitoringCounter reset(){
  return null;
}","@Override public LongMonitoringCounter reset(){
  return this;
}"
96628,"@Override public LongMonitoringCounter decrementByValue(long value){
  return null;
}","@Override public LongMonitoringCounter decrementByValue(long value){
  return this;
}"
96629,"@Override public ManagementFilter getManagementFilter(ServiceContext serviceContext){
  ManagementFilter managementFilter=managementFilters.get(serviceContext);
  if (managementFilter == null) {
    ServiceManagementBean serviceBean=serviceManagementBeans.get(serviceContext);
    buildMonitoringEntityFactory();
    managementFilter=addManagementFilter(serviceContext,serviceBean);
  }
  return managementFilter;
}","@Override public ManagementFilter getManagementFilter(ServiceContext serviceContext){
  ManagementFilter managementFilter=managementFilters.get(serviceContext);
  if (managementFilter == null) {
    ServiceManagementBean serviceBean=serviceManagementBeans.get(serviceContext);
    managementFilter=addManagementFilter(serviceContext,serviceBean);
  }
  return managementFilter;
}"
96630,"@Resource(name=""String_Node_Str"") public void setConfiguration(Properties configuration){
  this.configuration=configuration;
}","@Resource(name=""String_Node_Str"") public void setConfiguration(Properties configuration){
  this.configuration=configuration;
  buildMonitoringEntityFactory();
}"
96631,"@Override protected void removeInternal(SslSession session){
  try {
    IoSession parent=session.getParent();
    IoFilterChain filterChain=parent.getFilterChain();
    Entry entry=filterChain.getEntry(SslFilter.class);
    if (entry != null) {
      SslFilter sslFilter=(SslFilter)entry.getFilter();
      if (parent.getWrittenBytes() > 0L && sslFilter.isSslStarted(parent)) {
        sslFilter.stopSsl(parent);
        return;
      }
    }
  }
 catch (  SSLException e) {
    logger.debug(""String_Node_Str"",e);
  }
  super.removeInternal(session);
}","@Override protected void removeInternal(SslSession session){
  super.removeInternal(session);
}"
96632,"@Override protected void doSessionClosed(IoSessionEx session) throws Exception {
  SslSession sslSession=(SslSession)session.removeAttribute(SESSION_KEY);
  if (sslSession != null && !sslSession.isClosing()) {
    sslSession.reset(new Exception(""String_Node_Str"").fillInStackTrace());
  }
}","@Override protected void doSessionClosed(IoSessionEx session) throws Exception {
  SslSession sslSession=(SslSession)session.removeAttribute(SESSION_KEY);
  if (sslSession != null) {
    if (!sslSession.isClosing()) {
      sslSession.reset(new Exception(""String_Node_Str"").fillInStackTrace());
    }
 else {
      sslSession.getProcessor().remove(sslSession);
    }
  }
}"
96633,"@Override protected void doMessageReceived(final IoSessionEx session,Object message) throws Exception {
  if (message == SslFilter.SESSION_SECURED) {
    IoFilterChain filterChain=session.getFilterChain();
    removeFilter(filterChain,certificateSelection);
    IoSession sslSession=(IoSession)session.getAttribute(SESSION_KEY);
    assert(sslSession == null);
    IoSession newSslSession=createSslSession(session);
    session.setAttribute(SESSION_KEY,newSslSession);
  }
 else   if (message == SslFilter.SESSION_UNSECURED) {
    session.close(false);
  }
 else {
    IoSession sslSession=(IoSession)session.getAttribute(SESSION_KEY);
    assert(sslSession != null);
    IoFilterChain filterChain=sslSession.getFilterChain();
    filterChain.fireMessageReceived(message);
  }
}","@Override protected void doMessageReceived(final IoSessionEx session,Object message) throws Exception {
  if (message == SslFilter.SESSION_SECURED) {
    IoFilterChain filterChain=session.getFilterChain();
    removeFilter(filterChain,certificateSelection);
    IoSession sslSession=(IoSession)session.getAttribute(SESSION_KEY);
    assert(sslSession == null);
    IoSession newSslSession=createSslSession(session);
    session.setAttribute(SESSION_KEY,newSslSession);
  }
 else   if (message == SslFilter.SESSION_UNSECURED) {
    SslSession sslSession=(SslSession)session.removeAttribute(SESSION_KEY);
    if (sslSession != null && !sslSession.isClosing()) {
      sslSession.getProcessor().remove(sslSession);
    }
  }
 else {
    IoSession sslSession=(IoSession)session.getAttribute(SESSION_KEY);
    assert(sslSession != null);
    IoFilterChain filterChain=sslSession.getFilterChain();
    filterChain.fireMessageReceived(message);
  }
}"
96634,"@Test public void testNoJMXBindingNameConflictsOnMultiServicesUsingSameAccept() throws Exception {
  boolean correctPath=false;
  GatewayConfigurationBuilder configBuilder=new GatewayConfigurationBuilder();
  GatewayConfiguration gatewayConfiguration=configBuilder.service().accept(FRONTEND_URI_1).connect(BACKEND_URI_1).type(PROXY).done().service().name(""String_Node_Str"").accept(FRONTEND_URI_1).connect(BACKEND_URI_2).type(PROXY).done().done();
  Gateway gateway=new Gateway();
  try {
    gateway.start(gatewayConfiguration);
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),e.getMessage().contains(""String_Node_Str""));
    correctPath=true;
  }
 finally {
    gateway.stop();
  }
  Assert.assertTrue(""String_Node_Str"",correctPath);
}","@Test public void testNoJMXBindingNameConflictsOnMultiServicesUsingSameAccept() throws Exception {
  boolean correctPath=false;
  GatewayConfigurationBuilder configBuilder=new GatewayConfigurationBuilder();
  GatewayConfiguration gatewayConfiguration=configBuilder.service().accept(FRONTEND_URI_1).connect(BACKEND_URI_1).type(PROXY).done().service().name(""String_Node_Str"").accept(FRONTEND_URI_1).connect(BACKEND_URI_2).type(PROXY).done().done();
  Gateway gateway=new Gateway();
  try {
    gateway.start(gatewayConfiguration);
  }
 catch (  Exception e) {
    e.printStackTrace(System.out);
    System.out.println(e.getMessage());
    String message=e.getMessage();
    Assert.assertTrue(""String_Node_Str"" + message,(message != null && message.contains(""String_Node_Str"")));
    correctPath=true;
  }
 finally {
    gateway.stop();
  }
  Assert.assertTrue(""String_Node_Str"",correctPath);
}"
96635,"public CollectionView(TiViewProxy proxy,Activity activity){
  super(proxy);
  sections=new ArrayList<CollectionSectionProxy>();
  itemTypeCount=new AtomicInteger(CUSTOM_TEMPLATE_ITEM_TYPE);
  templatesByBinding=new HashMap<String,CollectionViewTemplate>();
  defaultTemplateBinding=UIModule.LIST_ITEM_TEMPLATE_DEFAULT;
  caseInsensitive=true;
  HashMap<String,Integer> preloadMarker=((CollectionViewProxy)proxy).getPreloadMarker();
  if (preloadMarker != null) {
    setMarker(preloadMarker);
  }
 else {
    resetMarker();
  }
  if (proxy.getProperty(""String_Node_Str"") != null) {
    useSwipe=TiConvert.toBoolean(proxy.getProperty(""String_Node_Str""));
  }
  if (inflater == null) {
    inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  }
  try {
    if (useSwipe) {
      layout_swipe_refresh=TiRHelper.getResource(""String_Node_Str"");
      color1=TiRHelper.getResource(""String_Node_Str"");
      color2=TiRHelper.getResource(""String_Node_Str"");
      color3=TiRHelper.getResource(""String_Node_Str"");
      color4=TiRHelper.getResource(""String_Node_Str"");
      layout=(CollectionSwipeRefreshLayout)inflater.inflate(layout_swipe_refresh,null,false);
      layout.setOnRefreshListener(new OnRefreshListener(){
        @Override public void onRefresh(){
          if (viewProxy.hasListeners(""String_Node_Str"")) {
            viewProxy.fireEvent(""String_Node_Str"",null);
          }
        }
      }
);
    }
    listItemId=TiRHelper.getResource(""String_Node_Str"");
    listContentId=TiRHelper.getResource(""String_Node_Str"");
    isCheck=TiRHelper.getResource(""String_Node_Str"");
    hasChild=TiRHelper.getResource(""String_Node_Str"");
    disclosure=TiRHelper.getResource(""String_Node_Str"");
    accessory=TiRHelper.getResource(""String_Node_Str"");
  }
 catch (  ResourceNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",Log.DEBUG_MODE);
  }
  ListViewWrapper wrapper=new ListViewWrapper(activity);
  wrapper.setFocusable(false);
  wrapper.setFocusableInTouchMode(false);
  listView=new GridView(activity);
  listView.setNumColumns(GridView.AUTO_FIT);
  listView.setColumnWidth(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setVerticalSpacing(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setHorizontalSpacing(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
  wrapper.addView(listView);
  adapter=new TiBaseAdapter(activity);
  listView.setCacheColorHint(Color.TRANSPARENT);
  getLayoutParams().autoFillsHeight=true;
  getLayoutParams().autoFillsWidth=true;
  listView.setFocusable(true);
  listView.setFocusableInTouchMode(true);
  listView.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
  this.wrapper=wrapper;
  if (useSwipe) {
    layout.setNativeView(wrapper);
    layout.addView(wrapper);
    setNativeView(layout);
  }
 else {
    setNativeView(wrapper);
  }
}","public CollectionView(TiViewProxy proxy,Activity activity){
  super(proxy);
  final TiViewProxy viewProxy=proxy;
  sections=new ArrayList<CollectionSectionProxy>();
  itemTypeCount=new AtomicInteger(CUSTOM_TEMPLATE_ITEM_TYPE);
  templatesByBinding=new HashMap<String,CollectionViewTemplate>();
  defaultTemplateBinding=UIModule.LIST_ITEM_TEMPLATE_DEFAULT;
  caseInsensitive=true;
  HashMap<String,Integer> preloadMarker=((CollectionViewProxy)proxy).getPreloadMarker();
  if (preloadMarker != null) {
    setMarker(preloadMarker);
  }
 else {
    resetMarker();
  }
  if (proxy.getProperty(""String_Node_Str"") != null) {
    useSwipe=TiConvert.toBoolean(proxy.getProperty(""String_Node_Str""));
  }
  if (inflater == null) {
    inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  }
  try {
    if (useSwipe) {
      layout_swipe_refresh=TiRHelper.getResource(""String_Node_Str"");
      color1=TiRHelper.getResource(""String_Node_Str"");
      color2=TiRHelper.getResource(""String_Node_Str"");
      color3=TiRHelper.getResource(""String_Node_Str"");
      color4=TiRHelper.getResource(""String_Node_Str"");
      layout=(CollectionSwipeRefreshLayout)inflater.inflate(layout_swipe_refresh,null,false);
      layout.setOnRefreshListener(new OnRefreshListener(){
        @Override public void onRefresh(){
          if (viewProxy.hasListeners(""String_Node_Str"")) {
            viewProxy.fireEvent(""String_Node_Str"",null);
          }
        }
      }
);
    }
    listItemId=TiRHelper.getResource(""String_Node_Str"");
    listContentId=TiRHelper.getResource(""String_Node_Str"");
    isCheck=TiRHelper.getResource(""String_Node_Str"");
    hasChild=TiRHelper.getResource(""String_Node_Str"");
    disclosure=TiRHelper.getResource(""String_Node_Str"");
    accessory=TiRHelper.getResource(""String_Node_Str"");
  }
 catch (  ResourceNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",Log.DEBUG_MODE);
  }
  ListViewWrapper wrapper=new ListViewWrapper(activity);
  wrapper.setFocusable(false);
  wrapper.setFocusableInTouchMode(false);
  listView=new GridView(activity);
  listView.setNumColumns(GridView.AUTO_FIT);
  listView.setColumnWidth(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setVerticalSpacing(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setHorizontalSpacing(TiConvert.toInt(proxy.getProperty(""String_Node_Str"")));
  listView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
  wrapper.addView(listView);
  adapter=new TiBaseAdapter(activity);
  listView.setCacheColorHint(Color.TRANSPARENT);
  getLayoutParams().autoFillsHeight=true;
  getLayoutParams().autoFillsWidth=true;
  listView.setFocusable(true);
  listView.setFocusableInTouchMode(true);
  listView.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
  this.wrapper=wrapper;
  if (useSwipe) {
    layout.setNativeView(wrapper);
    layout.addView(wrapper);
    setNativeView(layout);
  }
 else {
    setNativeView(wrapper);
  }
}"
96636,"public T getItem(int position){
  if (position >= dataList.size()) {
    if (bottomReachedCallback != null) {
      bottomReachedCallback.bottomReached();
    }
  }
  return dataList.get(position);
}","public T getItem(int position){
  if (position >= dataList.size()) {
    if (bottomReachedCallback != null) {
      bottomReachedCallback.bottomReached();
    }
  }
  if (position < 0 || position >= dataList.size())   return null;
  return dataList.get(position);
}"
96637,"public KeyFile fromXml(byte[] inputBytes){
  try {
    ByteArrayInputStream inputStream=new ByteArrayInputStream(inputBytes);
    return parser.fromXml(inputStream,KeyFile.class);
  }
 catch (  DataBindingException e) {
    return new KeyFile(false);
  }
}","public KeyFile fromXml(byte[] inputBytes){
  try {
    ByteArrayInputStream inputStream=new ByteArrayInputStream(inputBytes);
    return parser.fromXml(inputStream,KeyFile.class);
  }
 catch (  KeePassDatabaseUnreadableException e) {
    return new KeyFile(false);
  }
}"
96638,"private byte[] marshallXml(KeePassFile keePassFile,KeePassHeader header){
  ProtectedStringCrypto protectedStringCrypto=Salsa20.createInstance(header.getProtectedStreamKey());
  new ProtectedValueProcessor().processProtectedValues(new EncryptionStrategy(protectedStringCrypto),keePassFile);
  return new KeePassDatabaseXmlParser().toXml(keePassFile).toByteArray();
}","private byte[] marshallXml(KeePassFile keePassFile,KeePassHeader header){
  KeePassFile clonedKeePassFile=new GroupZipper(keePassFile).cloneKeePassFile();
  ProtectedStringCrypto protectedStringCrypto=Salsa20.createInstance(header.getProtectedStreamKey());
  new ProtectedValueProcessor().processProtectedValues(new EncryptionStrategy(protectedStringCrypto),clonedKeePassFile);
  return new KeePassDatabaseXmlParser().toXml(keePassFile).toByteArray();
}"
96639,"@Override public Group next(){
  if (canDown()) {
    return down().getNode();
  }
  if (canRight()) {
    return right().getNode();
  }
  return getNextRightNode(parent);
}","@Override public Group next(){
  if (isFirst) {
    isFirst=false;
    return getNode();
  }
  if (canDown()) {
    return down().getNode();
  }
  if (canRight()) {
    return right().getNode();
  }
  return getNextRightNode(parent);
}"
96640,"/** 
 * Replaces the current node with the given one. <p> Can be used to modify the tree.
 * @param group the replacement node
 * @return
 */
public GroupZipper replace(Group group){
  parent.getNode().getGroups().set(index,group);
  return this;
}","/** 
 * Replaces the current node with the given one. <p> Can be used to modify the tree.
 * @param group the replacement node
 * @return
 */
public GroupZipper replace(Group group){
  if (parent == null) {
    node=group;
  }
 else {
    parent.getNode().getGroups().set(index,group);
  }
  return this;
}"
96641,"@Override public boolean hasNext(){
  if (canDown() || canRight()) {
    return true;
  }
  return canGoRightAtAnyLevel(parent);
}","@Override public boolean hasNext(){
  if (isFirst) {
    return true;
  }
  if (canDown() || canRight()) {
    return true;
  }
  return canGoRightAtAnyLevel(parent);
}"
96642,"private Group getNextRightNode(GroupZipper parent){
  if (parent == null) {
    return null;
  }
  if (parent.canRight()) {
    return parent.right().getNode();
  }
 else {
    return getNextRightNode(parent);
  }
}","private Group getNextRightNode(GroupZipper parent){
  if (parent == null) {
    return null;
  }
  if (parent.canRight()) {
    return up().right().getNode();
  }
 else {
    return getNextRightNode(up());
  }
}"
96643,"/** 
 * Navigates up the tree to the parent node of the current node. <p> If the current node has no parent an exception will be thrown.
 * @return
 * @throws RuntimeException if the current node has no parent node
 */
public GroupZipper up(){
  if (!canUp()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return parent;
}","/** 
 * Navigates up the tree to the parent node of the current node. <p> If the current node has no parent an exception will be thrown.
 * @return
 * @throws RuntimeException if the current node has no parent node
 */
public GroupZipper up(){
  if (!canUp()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.index=parent.index;
  this.node=parent.node;
  this.parent=parent.parent;
  return this;
}"
96644,"@Test public void shouldIterateThroughAllGroups(){
  KeePassFile keePassFile=createTreeStructure();
  GroupZipper zipper=new GroupZipper(keePassFile);
  Iterator<Group> iter=zipper.iterator();
  List<Group> visitedGroups=new ArrayList<Group>();
  while (iter.hasNext()) {
    Group group=iter.next();
    visitedGroups.add(group);
  }
  Assert.assertEquals(5,visitedGroups.size());
}","@Test public void shouldIterateThroughAllGroups(){
  KeePassFile keePassFile=createTreeStructure();
  GroupZipper zipper=new GroupZipper(keePassFile);
  Iterator<Group> iter=zipper.iterator();
  List<Group> visitedGroups=new ArrayList<Group>();
  while (iter.hasNext()) {
    Group group=iter.next();
    visitedGroups.add(group);
  }
  Assert.assertEquals(6,visitedGroups.size());
}"
96645,"public int getHeaderSize(){
  int size=0;
  for (int i=2; i < 11; i++) {
    byte[] value=getValue(i);
    size+=value.length + SIZE_OF_FIELD_LENGTH_BUFFER;
  }
  size+=getEndOfHeader().length;
  return size;
}","public int getHeaderSize(){
  int size=0;
  for (int i=2; i < 11; i++) {
    byte[] value=getValue(i);
    if (value != null) {
      size+=value.length + SIZE_OF_FIELD_LENGTH_BUFFER;
    }
  }
  size+=getEndOfHeader().length;
  return size;
}"
96646,"public String encrypt(String plainString){
  if (plainString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    byte[] plainStringBytes=plainString.getBytes(ENCODING);
    byte[] encodedText=new byte[plainStringBytes.length];
    salsa20Engine.processBytes(plainStringBytes,0,plainStringBytes.length,encodedText,0);
    byte[] protectedBuffer=Base64.encode(encodedText);
    return new String(protectedBuffer,ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new UnsupportedOperationException(""String_Node_Str"",e);
  }
}","public String encrypt(String plainString){
  if (plainString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    byte[] plainStringBytes=plainString.getBytes(ENCODING);
    byte[] encodedText=new byte[plainStringBytes.length];
    salsa20Engine.update(plainStringBytes,0,plainStringBytes.length,encodedText,0);
    byte[] protectedBuffer=Base64.encode(encodedText);
    return new String(protectedBuffer,ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new UnsupportedOperationException(""String_Node_Str"",e);
  }
catch (  ShortBufferException e) {
    throw new RuntimeException(e);
  }
}"
96647,"private Salsa20(){
}","private Salsa20(){
  Security.addProvider(new BouncyCastleProvider());
}"
96648,"private void initialize(byte[] protectedStreamKey){
  byte[] salsaKey=Sha256.hash(protectedStreamKey);
  salsa20Engine=new Salsa20Engine();
  salsa20Engine.init(true,new ParametersWithIV(new KeyParameter(salsaKey),Hex.decode(SALSA20IV)));
}","private void initialize(byte[] protectedStreamKey){
  byte[] salsaKey=Sha256.hash(protectedStreamKey);
  try {
    salsa20Engine=Cipher.getInstance(SALSA20,BouncyCastleProvider.PROVIDER_NAME);
    salsa20Engine.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(salsaKey,SALSA20),new IvParameterSpec(Hex.decode(SALSA20IV)));
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + SALSA20 + ""String_Node_Str"",e);
  }
}"
96649,"public String decrypt(String protectedString){
  if (protectedString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  byte[] protectedBuffer=Base64.decode(protectedString.getBytes());
  byte[] plainText=new byte[protectedBuffer.length];
  salsa20Engine.processBytes(protectedBuffer,0,protectedBuffer.length,plainText,0);
  try {
    return new String(plainText,ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new UnsupportedOperationException(""String_Node_Str"",e);
  }
}","public String decrypt(String protectedString){
  if (protectedString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  byte[] protectedBuffer=Base64.decode(protectedString.getBytes());
  byte[] plainText=new byte[protectedBuffer.length];
  try {
    salsa20Engine.update(protectedBuffer,0,protectedBuffer.length,plainText,0);
    return new String(plainText,ENCODING);
  }
 catch (  ShortBufferException e) {
    throw new RuntimeException(e);
  }
catch (  UnsupportedEncodingException e) {
    throw new UnsupportedOperationException(""String_Node_Str"",e);
  }
}"
96650,"private void decryptAndSetValues(Entry entry,ProtectedStringCrypto protectedStringCrypto){
  List<Property> properties=entry.getProperties();
  for (  Property property : properties) {
    PropertyValue propertyValue=property.getPropertyValue();
    if (propertyValue.isProtected()) {
      String decrypted=protectedStringCrypto.decrypt(propertyValue.getValue());
      propertyValue.setValue(decrypted);
    }
  }
}","private void decryptAndSetValues(Entry entry,ProtectedStringCrypto protectedStringCrypto){
  List<Property> properties=entry.getProperties();
  for (  Property property : properties) {
    PropertyValue propertyValue=property.getPropertyValue();
    if (!propertyValue.getValue().isEmpty() && propertyValue.isProtected()) {
      String decrypted=protectedStringCrypto.decrypt(propertyValue.getValue());
      propertyValue.setValue(decrypted);
    }
  }
}"
96651,"public Set<Property> getProperties(){
  return properties;
}","public List<Property> getProperties(){
  return properties;
}"
96652,"public void setProperties(Set<Property> properties){
  this.properties=properties;
}","public void setProperties(List<Property> properties){
  this.properties=properties;
}"
96653,"public KeePassFile parse(InputStream inputStream,ProtectedStringCrypto protectedStringCrypto){
  KeePassFile keePassFile=JAXB.unmarshal(inputStream,KeePassFile.class);
  keePassFile.init();
  List<Entry> entries=keePassFile.getEntries();
  for (  Entry entry : entries) {
    decryptAndSetPassword(entry,protectedStringCrypto);
    History history=entry.getHistory();
    for (    Entry historicEntry : history.getHistoricEntries()) {
      decryptAndSetPassword(historicEntry,protectedStringCrypto);
    }
  }
  return keePassFile;
}","public KeePassFile parse(InputStream inputStream,ProtectedStringCrypto protectedStringCrypto){
  KeePassFile keePassFile=JAXB.unmarshal(inputStream,KeePassFile.class);
  keePassFile.init();
  List<Entry> entries=keePassFile.getEntries();
  for (  Entry entry : entries) {
    decryptAndSetValues(entry,protectedStringCrypto);
    History history=entry.getHistory();
    for (    Entry historicEntry : history.getHistoricEntries()) {
      decryptAndSetValues(historicEntry,protectedStringCrypto);
    }
  }
  return keePassFile;
}"
96654,"private Entry createEntry(String uuid,String title,String password){
  Entry entry=new Entry(uuid);
  Set<Property> properties=new HashSet<Property>();
  properties.add(new Property(""String_Node_Str"",title,false));
  properties.add(new Property(""String_Node_Str"",password,false));
  entry.setProperties(properties);
  return entry;
}","private Entry createEntry(String uuid,String title,String password){
  Entry entry=new Entry(uuid);
  List<Property> properties=new ArrayList<Property>();
  properties.add(new Property(""String_Node_Str"",title,false));
  properties.add(new Property(""String_Node_Str"",password,false));
  entry.setProperties(properties);
  return entry;
}"
96655,"private void decryptAndSetPassword(Entry entry,ProtectedStringCrypto protectedStringCrypto){
  if (entry.isPasswordProtected()) {
    String decrypted=protectedStringCrypto.decrypt(entry.getPassword());
    entry.setPassword(decrypted);
  }
}","private void decryptAndSetPassword(Entry entry,ProtectedStringCrypto protectedStringCrypto){
  if (entry != null && !entry.getPassword().isEmpty() && entry.isPasswordProtected()) {
    String decrypted=protectedStringCrypto.decrypt(entry.getPassword());
    entry.setPassword(decrypted);
  }
}"
96656,"public KeePassFile parse(InputStream inputStream,ProtectedStringCrypto protectedStringCrypto){
  KeePassFile keePassFile=JAXB.unmarshal(inputStream,KeePassFile.class);
  keePassFile.init();
  List<Entry> entries=keePassFile.getEntries();
  for (  Entry entry : entries) {
    if (entry.isPasswordProtected()) {
      String decrypted=protectedStringCrypto.decrypt(entry.getPassword());
      entry.setPassword(decrypted);
    }
  }
  return keePassFile;
}","public KeePassFile parse(InputStream inputStream,ProtectedStringCrypto protectedStringCrypto){
  KeePassFile keePassFile=JAXB.unmarshal(inputStream,KeePassFile.class);
  keePassFile.init();
  List<Entry> entries=keePassFile.getEntries();
  for (  Entry entry : entries) {
    decryptAndSetPassword(entry,protectedStringCrypto);
    History history=entry.getHistory();
    for (    Entry historicEntry : history.getHistoricEntries()) {
      decryptAndSetPassword(historicEntry,protectedStringCrypto);
    }
  }
  return keePassFile;
}"
96657,"private Function<Tag.Link,String> renderLinkToHtml(ClassTypeInfo type){
  return link -> {
    ClassTypeInfo rawType=link.getTargetType().getRaw();
    if (rawType.getModule() != null) {
      String label=link.getLabel().trim();
      if (rawType.getKind() == DATA_OBJECT) {
        return ""String_Node_Str"" + rawType.getName() + ""String_Node_Str"";
      }
 else {
        if (type.getKind() == ClassKind.API) {
          Element elt=link.getTargetElement();
          String eltKind=elt.getKind().name();
          String ret=""String_Node_Str"" + rawType.translateName(id);
          if (""String_Node_Str"".equals(eltKind)) {
            ret+=""String_Node_Str"" + elt.getSimpleName().toString();
          }
          if (label.length() > 0) {
            ret+=""String_Node_Str"" + label;
          }
          ret+=""String_Node_Str"";
          return ret;
        }
      }
    }
    return ""String_Node_Str"" + rawType.getName() + ""String_Node_Str"";
  }
;
}","private String renderLinkToHtml(Tag.Link link){
  ClassTypeInfo rawType=link.getTargetType().getRaw();
  if (rawType.getModule() != null) {
    String label=link.getLabel().trim();
    if (rawType.getKind() == DATA_OBJECT) {
      return ""String_Node_Str"" + rawType.getName() + ""String_Node_Str"";
    }
 else {
      if (rawType.getKind() == ClassKind.API) {
        Element elt=link.getTargetElement();
        String eltKind=elt.getKind().name();
        String ret=""String_Node_Str"" + rawType.translateName(id);
        if (""String_Node_Str"".equals(eltKind)) {
          ret+=""String_Node_Str"" + elt.getSimpleName().toString();
        }
        if (label.length() > 0) {
          ret+=""String_Node_Str"" + label;
        }
        ret+=""String_Node_Str"";
        return ret;
      }
    }
  }
  return ""String_Node_Str"" + rawType.getName() + ""String_Node_Str"";
}"
96658,"private void generateDoc(ClassModel model,PrintWriter writer){
  ClassTypeInfo type=model.getType();
  Doc doc=model.getDoc();
  if (doc != null) {
    writer.println(""String_Node_Str"");
    Token.toHtml(doc.getTokens(),""String_Node_Str"",this.renderLinkToHtml(type),""String_Node_Str"",writer);
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.print(""String_Node_Str"");
    writer.print(type.getName());
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
  }
}","private void generateDoc(ClassModel model,PrintWriter writer){
  ClassTypeInfo type=model.getType();
  Doc doc=model.getDoc();
  if (doc != null) {
    writer.println(""String_Node_Str"");
    Token.toHtml(doc.getTokens(),""String_Node_Str"",this::renderLinkToHtml,""String_Node_Str"",writer);
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.print(""String_Node_Str"");
    writer.print(type.getName());
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
  }
}"
96659,"protected void startMethodTemplate(ClassTypeInfo type,MethodInfo method,String deprecated,PrintWriter writer){
  Doc doc=method.getDoc();
  if (doc != null) {
    writer.println(""String_Node_Str"");
    Token.toHtml(doc.getTokens(),""String_Node_Str"",renderLinkToHtml(type),""String_Node_Str"",writer);
    for (    ParamInfo param : method.getParams()) {
      writer.print(""String_Node_Str"");
      writer.print(param.getName());
      writer.print(""String_Node_Str"");
      if (param.getDescription() != null) {
        Token.toHtml(param.getDescription().getTokens(),""String_Node_Str"",renderLinkToHtml(type),""String_Node_Str"",writer);
      }
      writer.println();
    }
    if (!method.getReturnType().getName().equals(""String_Node_Str"")) {
      writer.print(""String_Node_Str"");
      if (method.getReturnDescription() != null) {
        Token.toHtml(method.getReturnDescription().getTokens(),""String_Node_Str"",renderLinkToHtml(type),""String_Node_Str"",writer);
      }
      writer.println();
    }
    if (deprecated != null && deprecated.length() > 0) {
      writer.print(""String_Node_Str"");
      writer.println(deprecated);
    }
    writer.println(""String_Node_Str"");
  }
  if (method.isDeprecated() || deprecated != null && deprecated.length() > 0) {
    writer.println(""String_Node_Str"");
  }
  writer.print(""String_Node_Str"");
  if (method.isStaticMethod()) {
    writer.print(""String_Node_Str"");
  }
  if (method.getTypeParams().size() > 0) {
    writer.print(method.getTypeParams().stream().map(TypeParamInfo::getName).collect(Collectors.joining(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    writer.print(""String_Node_Str"");
  }
  writer.print(method.getReturnType().getSimpleName());
  writer.print(""String_Node_Str"");
  writer.print(method.getName());
  writer.print(""String_Node_Str"");
  writer.print(method.getParams().stream().map(it -> it.getType().getSimpleName() + ""String_Node_Str"" + it.getName()).collect(Collectors.joining(""String_Node_Str"")));
  writer.print(""String_Node_Str"");
}","protected void startMethodTemplate(ClassTypeInfo type,MethodInfo method,String deprecated,PrintWriter writer){
  Doc doc=method.getDoc();
  if (doc != null) {
    writer.println(""String_Node_Str"");
    Token.toHtml(doc.getTokens(),""String_Node_Str"",this::renderLinkToHtml,""String_Node_Str"",writer);
    for (    ParamInfo param : method.getParams()) {
      writer.print(""String_Node_Str"");
      writer.print(param.getName());
      writer.print(""String_Node_Str"");
      if (param.getDescription() != null) {
        Token.toHtml(param.getDescription().getTokens(),""String_Node_Str"",this::renderLinkToHtml,""String_Node_Str"",writer);
      }
      writer.println();
    }
    if (!method.getReturnType().getName().equals(""String_Node_Str"")) {
      writer.print(""String_Node_Str"");
      if (method.getReturnDescription() != null) {
        Token.toHtml(method.getReturnDescription().getTokens(),""String_Node_Str"",this::renderLinkToHtml,""String_Node_Str"",writer);
      }
      writer.println();
    }
    if (deprecated != null && deprecated.length() > 0) {
      writer.print(""String_Node_Str"");
      writer.println(deprecated);
    }
    writer.println(""String_Node_Str"");
  }
  if (method.isDeprecated() || deprecated != null && deprecated.length() > 0) {
    writer.println(""String_Node_Str"");
  }
  writer.print(""String_Node_Str"");
  if (method.isStaticMethod()) {
    writer.print(""String_Node_Str"");
  }
  if (method.getTypeParams().size() > 0) {
    writer.print(method.getTypeParams().stream().map(TypeParamInfo::getName).collect(Collectors.joining(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    writer.print(""String_Node_Str"");
  }
  writer.print(method.getReturnType().getSimpleName());
  writer.print(""String_Node_Str"");
  writer.print(method.getName());
  writer.print(""String_Node_Str"");
  writer.print(method.getParams().stream().map(it -> it.getType().getSimpleName() + ""String_Node_Str"" + it.getName()).collect(Collectors.joining(""String_Node_Str"")));
  writer.print(""String_Node_Str"");
}"
96660,"@Override protected void subscribeActual(CompletableObserver observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(false)) {
        if (ar.succeeded()) {
          try {
            observer.onComplete();
          }
 catch (          Throwable ignore) {
          }
        }
 else {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}","@Override protected void subscribeActual(CompletableObserver observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(true)) {
        if (ar.succeeded()) {
          try {
            observer.onComplete();
          }
 catch (          Throwable ignore) {
          }
        }
 else {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}"
96661,"@Override protected void subscribeActual(MaybeObserver<? super T> observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(false)) {
        if (ar.succeeded()) {
          try {
            T val=ar.result();
            if (val != null) {
              observer.onSuccess(val);
            }
 else {
              observer.onComplete();
            }
          }
 catch (          Throwable ignore) {
          }
        }
 else         if (ar.failed()) {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}","@Override protected void subscribeActual(MaybeObserver<? super T> observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(true)) {
        if (ar.succeeded()) {
          try {
            T val=ar.result();
            if (val != null) {
              observer.onSuccess(val);
            }
 else {
              observer.onComplete();
            }
          }
 catch (          Throwable ignore) {
          }
        }
 else         if (ar.failed()) {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}"
96662,"@Override protected void subscribeActual(@NonNull SingleObserver<? super T> observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(false)) {
        if (ar.succeeded()) {
          try {
            observer.onSuccess(ar.result());
          }
 catch (          Throwable ignore) {
          }
        }
 else         if (ar.failed()) {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}","@Override protected void subscribeActual(@NonNull SingleObserver<? super T> observer){
  AtomicBoolean disposed=new AtomicBoolean();
  observer.onSubscribe(new Disposable(){
    @Override public void dispose(){
      disposed.set(true);
    }
    @Override public boolean isDisposed(){
      return disposed.get();
    }
  }
);
  if (!disposed.get()) {
    method.handle(ar -> {
      if (!disposed.getAndSet(true)) {
        if (ar.succeeded()) {
          try {
            observer.onSuccess(ar.result());
          }
 catch (          Throwable ignore) {
          }
        }
 else         if (ar.failed()) {
          try {
            observer.onError(ar.cause());
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
);
  }
}"
96663,"public static <T>TypeArg<T> unknown(){
  return new TypeArg<>(obj -> (T)obj,obj -> obj);
}","public static <T>TypeArg<T> unknown(){
  return (TypeArg<T>)UNKNOWN;
}"
96664,"public Object unwrap(T o){
  return o != null ? unwrap.apply(o) : null;
}","public <X>X unwrap(T o){
  return o != null ? (X)unwrap.apply(o) : null;
}"
96665,"/** 
 * Create a scheduler for a   {@link Context}, actions are executed on the event loop of this context.
 * @param context the context object
 * @return the scheduler
 */
public static Scheduler scheduler(Context context){
  return new ContextScheduler(context.delegate,false);
}","/** 
 * Create a scheduler for a   {@link Context}, actions are executed on the event loop of this context.
 * @param context the context object
 * @return the scheduler
 */
public static Scheduler scheduler(Context context){
  return new ContextScheduler(context.getDelegate(),false);
}"
96666,"/** 
 * Create a scheduler hook for a   {@link io.vertx.rxjava.core.Context} object.
 * @param context the context object
 * @return the scheduler hook
 */
public static RxJavaSchedulersHook schedulerHook(Context context){
  return io.vertx.rx.java.RxHelper.schedulerHook(context.delegate);
}","/** 
 * Create a scheduler hook for a   {@link io.vertx.rxjava.core.Context} object.
 * @param context the context object
 * @return the scheduler hook
 */
public static RxJavaSchedulersHook schedulerHook(Context context){
  return io.vertx.rx.java.RxHelper.schedulerHook(context.getDelegate());
}"
96667,"/** 
 * Create a scheduler for a   {@link Vertx} object, actions can be blocking, they are not executedon Vertx event loop.
 * @param vertx the vertx object
 * @return the scheduler
 */
public static Scheduler blockingScheduler(Vertx vertx){
  return new ContextScheduler(vertx.delegate.getOrCreateContext(),true);
}","/** 
 * Create a scheduler for a   {@link Vertx} object, actions can be blocking, they are not executedon Vertx event loop.
 * @param vertx the vertx object
 * @return the scheduler
 */
public static Scheduler blockingScheduler(Vertx vertx){
  return new ContextScheduler(vertx.getDelegate().getOrCreateContext(),true);
}"
96668,"public ContextScheduler(Vertx vertx,boolean blocking){
  this.vertx=vertx;
  this.blocking=blocking;
}","public ContextScheduler(Vertx vertx,boolean blocking){
  this.vertx=vertx;
  this.context=vertx.getOrCreateContext();
  this.blocking=blocking;
}"
96669,"public TimedAction(Action0 action,long delayMillis,long periodMillis){
  this.cancelled=false;
  this.action=action;
  this.periodMillis=periodMillis;
  if (delayMillis > 0) {
    id=vertx.setTimer(delayMillis,this);
  }
 else {
    id=-1;
    if (blocking) {
      vertx.executeBlocking(future -> run(),result -> {
      }
);
    }
 else {
      vertx.runOnContext(v -> run());
    }
  }
}","public TimedAction(Action0 action,long delayMillis,long periodMillis){
  this.cancelled=false;
  this.action=action;
  this.periodMillis=periodMillis;
  if (delayMillis > 0) {
    id=vertx.setTimer(delayMillis,this);
  }
 else {
    id=-1;
    if (blocking) {
      vertx.executeBlocking(this::run,result -> {
      }
);
    }
 else {
      context.runOnContext(this::run);
    }
  }
}"
96670,"/** 
 * Create a scheduler for a   {@link Vertx} object.
 * @param vertx the vertx object
 * @return the scheduler
 */
public static Scheduler scheduler(Vertx vertx){
  return new ContextScheduler(vertx);
}","/** 
 * Create a scheduler for a   {@link Vertx} object.
 * @param vertx the vertx object
 * @return the scheduler
 */
public static Scheduler scheduler(io.vertx.rxjava.core.Vertx vertx){
  return new ContextScheduler((Vertx)vertx.getDelegate());
}"
96671,"public void disconnect(String reason){
  this.sendPacket(new DisconnectPacket(reason));
  if (session != null)   session.onDisconnect();
}","public void disconnect(String reason){
  kick(reason);
  this.sendPacket(new DisconnectPacket(reason));
  if (session != null)   session.onDisconnect();
}"
96672,"public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"" + DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}","public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_PROTOCOL + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}"
96673,"public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"" + DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}","public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_PROTOCOL + ""String_Node_Str"";
  name+=""String_Node_Str"" + DragonetVersioning.MINECRAFT_PC_VERSION + ""String_Node_Str""+ DragonetVersioning.MINECRAFT_PE_VERSION+ ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}"
96674,"public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_PROTOCOL + ""String_Node_Str"";
  name+=""String_Node_Str"" + DragonetVersioning.MINECRAFT_PC_VERSION + ""String_Node_Str""+ DragonetVersioning.MINECRAFT_PE_VERSION+ ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}","public RakNetInterface(SessionManager sesMan,String bindAddress,int port){
  this.sesMan=sesMan;
  this.raknetServer=new RakNetServer(port,bindAddress);
  this.handler=new ServerHandler(raknetServer,this);
  String name=""String_Node_Str"";
  name+=sesMan.getServer().getServer().getServerName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_PROTOCOL + ""String_Node_Str"";
  name+=DragonetVersioning.MINECRAFT_PE_VERSION + ""String_Node_Str"";
  name+=""String_Node_Str"";
  this.handler.sendOption(""String_Node_Str"",name);
}"
96675,"/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    ByteArrayOutputStream totalData=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(totalData);
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)0x00);
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockData(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockData(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockSkyLight(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockSkyLight(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockEmittedLight(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockEmittedLight(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0xFF);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x01);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
{
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      NBTOutputStream n=new NBTOutputStream(bos);
      n.writeTag(new CompoundTag());
      writer.switchEndianness();
      writer.writeInt(bos.toByteArray().length);
      writer.write(bos.toByteArray());
      writer.switchEndianness();
    }
    FullChunkPacket packet=new FullChunkPacket();
    packet.chunkX=chunkX;
    packet.chunkZ=chunkZ;
    packet.chunkData=totalData.toByteArray();
    this.getSession().send(packet);
    System.out.println(""String_Node_Str"" + chunkX + ""String_Node_Str""+ chunkZ);
  }
 catch (  IOException e) {
  }
}","/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)(this.getSession().getTranslator().getItemTranslator().translateToPE(chunk.getBlockTypeId(x,y,z)) & 0xFF));
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockData(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockData(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockSkyLight(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockSkyLight(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data;
          data=(byte)((chunk.getBlockEmittedLight(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockEmittedLight(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0xFF);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x01);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
    writer.switchEndianness();
    writer.writeInt(0);
    writer.switchEndianness();
    FullChunkPacket packet=new FullChunkPacket();
    packet.chunkX=chunkX;
    packet.chunkZ=chunkZ;
    packet.chunkData=totalData.toByteArray();
    this.getSession().send(packet);
    totalData.reset();
    System.out.println(""String_Node_Str"" + chunkX + ""String_Node_Str""+ chunkZ);
  }
 catch (  IOException e) {
  }
}"
96676,"public void onTick(){
  if (System.currentTimeMillis() - lastTimeSendOption > 1000) {
    handler.sendOption(""String_Node_Str"",getServerName());
    lastTimeSendOption=System.currentTimeMillis();
  }
  int cnt=0;
  while (cnt < 2400 && handler.handlePacket()) {
    cnt++;
  }
}","public void onTick(){
  if (System.currentTimeMillis() - lastTimeSendOption > 1000) {
    handler.sendOption(""String_Node_Str"",getServerName());
    lastTimeSendOption=System.currentTimeMillis();
  }
  while (handler.handlePacket())   ;
}"
96677,"/** 
 * Wraps <code>bytes</code> into an encapsulated packet and sends it.
 * @param session The Session this packet is being sent from.
 * @param packet The Packet being sent.
 * @param immediate If the packet should be sent immediately (nocompression, skips packet queues)
 */
public void sendPacket(PENetworkClient session,PEPacket packet,boolean immediate){
  if (packet == null)   return;
  System.out.println(""String_Node_Str"" + packet.getClass().getSimpleName());
  if (packet.getData() == null) {
    packet.encode();
  }
  if (!immediate && !(packet instanceof BatchPacket) && (packet.getData().length >= 512)) {
    BatchPacket bp=new BatchPacket();
    bp.packets.add(packet);
    bp.encode();
    sendPacket(session,bp,false);
  }
  EncapsulatedPacket pk=new EncapsulatedPacket();
  pk.buffer=Unpooled.wrappedBuffer(packet.getData());
  pk.messageIndex=0;
  if (packet.getChannel() != NetworkChannel.CHANNEL_NONE) {
    pk.reliability=2;
    pk.orderChannel=packet.getChannel().getAsByte();
    pk.orderIndex=0;
  }
 else {
    pk.reliability=2;
  }
  handler.sendEncapsulated(session.getRaknetSession(),pk,(byte)((byte)0 | (immediate || packet.getChannel() == NetworkChannel.CHANNEL_PRIORITY ? JRakLib.PRIORITY_IMMEDIATE : JRakLib.PRIORITY_NORMAL)));
}","/** 
 * Wraps <code>bytes</code> into an encapsulated packet and sends it.
 * @param session The Session this packet is being sent from.
 * @param packet The Packet being sent.
 * @param immediate If the packet should be sent immediately (nocompression, skips packet queues)
 */
public void sendPacket(PENetworkClient session,PEPacket packet,boolean immediate){
  if (packet == null)   return;
  if (packet.getClass().equals(UpdateBlockPacket.class))   return;
  System.out.println(""String_Node_Str"" + packet.getClass().getSimpleName());
  if (packet.getData() == null) {
    packet.encode();
  }
  if (packet.getData() == null) {
    return;
  }
  if (!(packet instanceof BatchPacket) && (packet.getData().length >= 512)) {
    BatchPacket bp=new BatchPacket();
    bp.packets.add(packet);
    bp.encode();
    sendPacket(session,bp,true);
    return;
  }
  EncapsulatedPacket pk=new EncapsulatedPacket();
  pk.buffer=Unpooled.copiedBuffer(packet.getData());
  pk.messageIndex=0;
  pk.reliability=2;
  handler.sendEncapsulated(session.getRaknetSession(),pk,(byte)((byte)0 | (immediate || packet.isShouldSendImmidate() ? JRakLib.PRIORITY_IMMEDIATE : JRakLib.PRIORITY_NORMAL)));
}"
96678,"public static String dumpHexFromBytes(byte[] bytes){
  StringBuilder sb=new StringBuilder();
  for (  byte b : bytes) {
    sb.append(String.format(""String_Node_Str"",b) + ""String_Node_Str"");
  }
  return sb.toString();
}","public static String dumpHexFromBytes(byte[] bytes){
  StringBuilder sb=new StringBuilder();
  for (  byte b : bytes) {
    sb.append(String.format(""String_Node_Str"",b));
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
96679,"@Override public void encode(){
  try {
    ByteArrayOutputStream packetCombinerData=new ByteArrayOutputStream();
    PEBinaryWriter packetCombiner=new PEBinaryWriter(packetCombinerData);
    for (    PEPacket pk : packets) {
      pk.encode();
      packetCombiner.writeInt(pk.getData().length);
      packetCombiner.write(pk.getData());
    }
    Deflater def=new Deflater(7);
    def.reset();
    def.setInput(packetCombinerData.toByteArray());
    def.finish();
    byte[] deflateBuffer=new byte[65535];
    int size=def.deflate(deflateBuffer);
    deflateBuffer=Arrays.copyOfRange(deflateBuffer,0,size);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(deflateBuffer.length);
    writer.write(deflateBuffer);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}","@Override public void encode(){
  try {
    setShouldSendImmidate(true);
    ByteArrayOutputStream packetCombinerData=new ByteArrayOutputStream();
    PEBinaryWriter packetCombiner=new PEBinaryWriter(packetCombinerData);
    for (    PEPacket pk : packets) {
      pk.encode();
      packetCombiner.writeInt(pk.getData().length);
      packetCombiner.write(pk.getData());
    }
    Deflater def=new Deflater(7);
    def.reset();
    def.setInput(packetCombinerData.toByteArray());
    def.finish();
    byte[] deflateBuffer=new byte[65535];
    int size=def.deflate(deflateBuffer);
    deflateBuffer=Arrays.copyOfRange(deflateBuffer,0,size);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(deflateBuffer.length);
    writer.write(deflateBuffer);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}"
96680,"@Override public void encode(){
  try {
    setChannel(NetworkChannel.CHANNEL_WORLD_CHUNKS);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    writer.writeByte(order != null ? order.getType() : (byte)0);
    writer.writeInt(chunkData.length);
    writer.write(chunkData);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}","@Override public void encode(){
  try {
    setShouldSendImmidate(true);
    setChannel(NetworkChannel.CHANNEL_WORLD_CHUNKS);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    writer.writeByte(order != null ? order.getType() : (byte)0);
    writer.writeInt(chunkData.length);
    writer.write(chunkData);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}"
96681,"@Override public void encode(){
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(this.status);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}","@Override public void encode(){
  setShouldSendImmidate(true);
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(this.status);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}"
96682,"public PEEnchantment(){
}","public PEEnchantment(int id,String name){
  this.id=id;
  this.name=name;
}"
96683,"@Override public Message[] handleSpecific(WindowItemsPacket packet){
  if (packet.windowID != PEWindowConstantID.PLAYER_CRAFTING) {
    return null;
  }
  if (packet.slots.length < 9) {
    emptyCrafting();
    return null;
  }
  ItemStack[] map=new ItemStack[9];
  for (int x=0; x < 3; x++) {
    for (int y=0; y < 3; y++) {
      map[x * 3 + y]=new ItemStack(this.getTranslator().getItemTranslator().translateToPC(packet.slots[x * 3 + y].id & 0xFFFF),packet.slots[x * 3 + y].count & 0xFF,packet.slots[x * 3 + y].meta);
    }
  }
  Recipe recipe=this.getSession().getServer().getCraftingManager().getCraftingRecipe(map);
  if (recipe == null) {
    emptyCrafting();
    return null;
  }
  this.getSession().getPlayer().getInventory().addItem(recipe.getResult());
  this.getSession().getServer().getCraftingManager().removeItems(this.getSession().getPlayer().getInventory().getContents(),recipe);
  emptyCrafting();
  return null;
}","@Override public Message[] handleSpecific(WindowItemsPacket packet){
  if (packet.windowID != PEWindowConstantID.PLAYER_CRAFTING) {
    return null;
  }
  if (packet.slots.length < 9) {
    emptyCrafting();
    return null;
  }
  ItemStack[] map=new ItemStack[9];
  for (int x=0; x < 3; x++) {
    for (int y=0; y < 3; y++) {
      map[x * 3 + y]=new ItemStack(this.getTranslator().getItemTranslator().translateToPC(packet.slots[x * 3 + y].id & 0xFFFF),packet.slots[x * 3 + y].count & 0xFF,packet.slots[x * 3 + y].meta);
    }
  }
  Recipe recipe=this.getSession().getServer().getCraftingManager().getCraftingRecipe(map);
  if (recipe == null) {
    emptyCrafting();
    return null;
  }
  this.getSession().getPlayer().getInventory().addItem(recipe.getResult());
  this.removeItems(this.getSession().getPlayer().getInventory().getContents(),recipe);
  emptyCrafting();
  return null;
}"
96684,"public DragonetServer(GlowServer server){
  INSTANCE=this;
  this.server=server;
  ServerConfig serverConfig=new ServerConfig(server.getConfigDir(),new File(server.getConfigDir(),""String_Node_Str""),new HashMap<ServerConfig.Key,Object>());
  pluginFolder=new File(serverConfig.getString(ServerConfig.Key.PLUGIN_FOLDER));
  this.logger=LoggerFactory.getLogger(""String_Node_Str"");
  this.customMaterialManager=new CustomItemManager(this);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.DRAGONET_VERSION + ""String_Node_Str"");
  this.rhino=new Rhino();
}","public DragonetServer(GlowServer server){
  INSTANCE=this;
  this.server=server;
  ServerConfig serverConfig=new ServerConfig(server.getConfigDir(),new File(server.getConfigDir(),""String_Node_Str""),new HashMap<ServerConfig.Key,Object>());
  pluginFolder=new File(serverConfig.getString(ServerConfig.Key.PLUGIN_FOLDER));
  this.logger=LoggerFactory.getLogger(""String_Node_Str"");
  this.customMaterialManager=new CustomItemManager(this);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.DRAGONET_VERSION + ""String_Node_Str"");
  this.rhino=new Rhino(this.getServer());
}"
96685,"/** 
 * Initialize the server, DO NOT CALL IT YOURSELF. Only called by Glowstone main class.
 */
public void initialize(){
  File fileConfig=new File(this.server.getConfigDir() + File.separator + ""String_Node_Str"");
  if (!fileConfig.exists()) {
    try {
      InputStream inp=DragonetServer.class.getResourceAsStream(""String_Node_Str"");
      try {
        FileOutputStream oup=new FileOutputStream(fileConfig);
        try {
          int data=-1;
          while ((data=inp.read()) != -1) {
            oup.write(data);
          }
        }
  finally {
          oup.close();
        }
      }
  finally {
        inp.close();
      }
    }
 catch (    IOException e) {
    }
  }
  Configuration config=YamlConfiguration.loadConfiguration(fileConfig);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.MINECRAFT_PC_VERSION);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.MINECRAFT_PE_VERSION);
  this.threadPool=Executors.newFixedThreadPool(64);
  String ip=config.getString(""String_Node_Str"",""String_Node_Str"");
  int port=config.getInt(""String_Node_Str"",19132);
  this.logger.info(""String_Node_Str"" + ip + ""String_Node_Str""+ port+ ""String_Node_Str"");
  try {
    this.networkHandler=new NetworkHandler(this,new InetSocketAddress(ip,port));
  }
 catch (  Exception ex) {
    this.getLogger().error(""String_Node_Str"" + port + ""String_Node_Str"");
    this.getLogger().error(""String_Node_Str"");
    this.getServer().shutdown();
    return;
  }
  if (config.getBoolean(""String_Node_Str"",true)) {
    this.getLogger().info(""String_Node_Str"");
    this.addonServer=new DragonetPEAddonServer(this);
    try {
      this.addonServer.initialize();
    }
 catch (    IOException ex) {
      this.getLogger().error(""String_Node_Str"" + this.getNetworkHandler().getUdp().getServerPort() + ""String_Node_Str"");
      this.getLogger().error(""String_Node_Str"");
      this.getServer().shutdown();
      return;
    }
    this.addonSupported=true;
  }
 else {
    this.addonSupported=false;
    this.getLogger().info(""String_Node_Str"");
  }
  for (  Script s : rhino.Scripts) {
    this.getLogger().info(""String_Node_Str"" + s.UID);
    s.runFunction(""String_Node_Str"",new Object[]{});
  }
  this.playerSpawnThreshold=config.getInt(""String_Node_Str"",36);
  this.logger.info(""String_Node_Str"");
}","/** 
 * Initialize the server, DO NOT CALL IT YOURSELF. Only called by Glowstone main class.
 */
public void initialize(){
  File fileConfig=new File(this.server.getConfigDir() + File.separator + ""String_Node_Str"");
  if (!fileConfig.exists()) {
    try {
      InputStream inp=DragonetServer.class.getResourceAsStream(""String_Node_Str"");
      try {
        FileOutputStream oup=new FileOutputStream(fileConfig);
        try {
          int data=-1;
          while ((data=inp.read()) != -1) {
            oup.write(data);
          }
        }
  finally {
          oup.close();
        }
      }
  finally {
        inp.close();
      }
    }
 catch (    IOException e) {
    }
  }
  Configuration config=YamlConfiguration.loadConfiguration(fileConfig);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.MINECRAFT_PC_VERSION);
  this.logger.info(""String_Node_Str"" + DragonetVersioning.MINECRAFT_PE_VERSION);
  this.threadPool=Executors.newFixedThreadPool(64);
  String ip=config.getString(""String_Node_Str"",""String_Node_Str"");
  int port=config.getInt(""String_Node_Str"",19132);
  this.logger.info(""String_Node_Str"" + ip + ""String_Node_Str""+ port+ ""String_Node_Str"");
  try {
    this.networkHandler=new NetworkHandler(this,new InetSocketAddress(ip,port));
  }
 catch (  Exception ex) {
    this.getLogger().error(""String_Node_Str"" + port + ""String_Node_Str"");
    this.getLogger().error(""String_Node_Str"");
    this.getServer().shutdown();
    return;
  }
  if (config.getBoolean(""String_Node_Str"",true)) {
    this.getLogger().info(""String_Node_Str"");
    this.addonServer=new DragonetPEAddonServer(this);
    try {
      this.addonServer.initialize();
    }
 catch (    IOException ex) {
      this.getLogger().error(""String_Node_Str"" + this.getNetworkHandler().getUdp().getServerPort() + ""String_Node_Str"");
      this.getLogger().error(""String_Node_Str"");
      this.getServer().shutdown();
      return;
    }
    this.addonSupported=true;
  }
 else {
    this.addonSupported=false;
    this.getLogger().info(""String_Node_Str"");
  }
  for (  Script s : rhino.getScripts()) {
    this.getLogger().info(""String_Node_Str"" + s.getUID());
    s.runFunction(""String_Node_Str"",new Object[]{s});
  }
  this.playerSpawnThreshold=config.getInt(""String_Node_Str"",36);
  this.logger.info(""String_Node_Str"");
}"
96686,"public DragonetSession(DragonetServer dServer,BaseTranslator translator){
  super(dServer.getServer());
  this.dServer=dServer;
  this.translator=translator;
  this.dServer.getSessionManager().getSessions().put(getSessionKey(),this);
  this.chunkManager=new ClientChunkManager(this);
}","public DragonetSession(DragonetServer dServer,BaseTranslator translator,String sessionKey){
  super(dServer.getServer());
  this.dServer=dServer;
  this.sessionKey=sessionKey;
  this.translator=translator;
  this.dServer.getSessionManager().getSessions().put(getSessionKey(),this);
  this.chunkManager=new ClientChunkManager(this);
}"
96687,"public MCPESession(DragonetServer dServer,PENetworkClient client){
  super(dServer,null);
  this.dServer=dServer;
  this.client=client;
}","public MCPESession(DragonetServer dServer,PENetworkClient client){
  super(dServer,null,""String_Node_Str"" + client.getRemoteAddress().toString());
  this.dServer=dServer;
  this.client=client;
}"
96688,"public PortalSession(String username,String remoteIP,int remotePort,DragonetServer dServer,BaseTranslator translator){
  super(dServer,translator);
}","public PortalSession(String username,String remoteIP,int remotePort,DragonetServer dServer,BaseTranslator translator){
  super(dServer,translator,""String_Node_Str"" + remoteIP + ""String_Node_Str""+ remotePort);
}"
96689,"public PluginAdapter(GlowServer server) throws IllegalStateException {
  this.server=server;
  dataFolder=new File(server.getDragonetServer().getPluginFolder(),this.getName());
  if (dataFolder.isFile()) {
    server.getLogger().warning(""String_Node_Str"" + getName() + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + getName() + ""String_Node_Str"");
  }
  config=new YamlConfiguration();
  try {
    config.load(new File(dataFolder,""String_Node_Str""));
  }
 catch (  IOException ex) {
  }
catch (  InvalidConfigurationException ex) {
  }
}","public PluginAdapter(GlowServer server,String name) throws IllegalStateException {
  this.name=name;
  this.server=server;
  dataFolder=new File(server.getDragonetServer().getPluginFolder(),this.getName().replace(""String_Node_Str"",""String_Node_Str"").concat(""String_Node_Str""));
  if (dataFolder.isFile()) {
    server.getLogger().warning(""String_Node_Str"" + getName() + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + getName() + ""String_Node_Str"");
  }
  config=new YamlConfiguration();
  try {
    config.load(new File(dataFolder,""String_Node_Str""));
  }
 catch (  IOException|InvalidConfigurationException ex) {
  }
  logger=new PluginLogger(this);
}"
96690,"public Script(GlowServer server,File scriptFile){
  super(server);
  name=scriptFile.getName();
  System.out.println((scriptFile == null) + ""String_Node_Str"");
  System.out.println((scriptFile.getName() == null) + ""String_Node_Str"");
  context=new ContextFactory().enterContext();
  scope=context.initStandardObjects();
  Functions.defineFunctions(context,scope);
  fullFilePath=scriptFile.getAbsolutePath();
  file=scriptFile;
  UID=findScriptUID();
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException e) {
  }
  try {
    context.evaluateReader(scope,script,getName(),1,null);
  }
 catch (  IOException e) {
    System.out.println(Arrays.toString(e.getStackTrace()));
  }
}","public Script(GlowServer server,File scriptFile){
  super(server,scriptFile.getName());
  context=new ContextFactory().enterContext();
  scope=context.initStandardObjects();
  Functions.defineFunctions(context,scope);
  fullFilePath=scriptFile.getAbsolutePath();
  file=scriptFile;
  UID=findScriptUID();
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException e) {
  }
  try {
    context.evaluateReader(scope,script,getName(),1,null);
  }
 catch (  IOException e) {
    System.out.println(Arrays.toString(e.getStackTrace()));
  }
}"
96691,"private String findScriptUID(){
  Object name=runFunction(""String_Node_Str"",new Object[]{});
  try {
    if ((String)name == null) {
      throw new ClassCastException();
    }
    return (String)name;
  }
 catch (  ClassCastException e) {
    DragonetServer.instance().getLogger().warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
    DragonetServer.instance().getLogger().warn(""String_Node_Str"");
    return ""String_Node_Str"";
  }
}","private String findScriptUID(){
  Object name=runFunction(""String_Node_Str"",new Object[]{});
  try {
    if ((String)name == null) {
      throw new ClassCastException();
    }
    return (String)name;
  }
 catch (  ClassCastException e) {
    DragonetServer.instance().getLogger().warn(""String_Node_Str"" + this.getName() + ""String_Node_Str"");
    DragonetServer.instance().getLogger().warn(""String_Node_Str"");
    return ""String_Node_Str"";
  }
}"
96692,"@JSFunction public static void registerCommand(final Script script,final String commandName){
  DragonetServer.instance().getServer().getCommandMap().register(commandName,""String_Node_Str"" + script.getName() + ""String_Node_Str""+ commandName+ ""String_Node_Str"",new Command(commandName){
    @Override public boolean execute(    CommandSender cs,    String alias,    String[] args){
      return script.onCommand(cs,this,alias,args);
    }
  }
);
}","@JSFunction public static boolean registerCommand(final Object script,final String commandName){
  if (!Script.class.isInstance(script)) {
    return false;
  }
  DragonetServer.instance().getServer().getCommandMap().register(commandName,""String_Node_Str"" + ((Script)script).getName() + ""String_Node_Str""+ commandName+ ""String_Node_Str"",new Command(commandName){
    @Override public boolean execute(    CommandSender cs,    String alias,    String[] args){
      return ((Script)script).onCommand(cs,this,alias,args);
    }
  }
);
  return true;
}"
96693,"@Override public boolean execute(CommandSender cs,String alias,String[] args){
  return script.onCommand(cs,this,alias,args);
}","@Override public boolean execute(CommandSender cs,String alias,String[] args){
  return ((Script)script).onCommand(cs,this,alias,args);
}"
96694,"@Override public PEPacket[] handleSpecific(EntityEquipmentMessage packet){
  if (!(this.getSession().getPlayer().getWorld().getEntityManager().getEntity(packet.id) instanceof Player)) {
    return null;
  }
switch (packet.slot) {
case 0:
    PlayerEquipmentPacket pkEquipment=new PlayerEquipmentPacket();
  pkEquipment.eid=packet.id;
if (packet.stack != null) {
  pkEquipment.item=(short)(packet.stack.getTypeId() & 0xFFFF);
  pkEquipment.meta=(short)(packet.stack.getDurability() & 0xFFFF);
}
 else {
  pkEquipment.item=0;
  pkEquipment.meta=0;
}
pkEquipment.slot=(byte)0;
return new PEPacket[]{pkEquipment};
}
return null;
}","@Override public PEPacket[] handleSpecific(EntityEquipmentMessage packet){
  if (this.getSession().getPlayer() == null)   return null;
  if (!(this.getSession().getPlayer().getWorld().getEntityManager().getEntity(packet.id) instanceof Player)) {
    return null;
  }
switch (packet.slot) {
case 0:
    PlayerEquipmentPacket pkEquipment=new PlayerEquipmentPacket();
  pkEquipment.eid=packet.id;
if (packet.stack != null) {
  pkEquipment.item=(short)(packet.stack.getTypeId() & 0xFFFF);
  pkEquipment.meta=(short)(packet.stack.getDurability() & 0xFFFF);
}
 else {
  pkEquipment.item=0;
  pkEquipment.meta=0;
}
pkEquipment.slot=(byte)0;
return new PEPacket[]{pkEquipment};
}
return null;
}"
96695,"/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    ByteArrayOutputStream totalData=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(totalData);
    if (writer.getEndianness() == PEBinaryUtils.BIG_ENDIAN) {
      writer.switchEndianness();
    }
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)(this.getSession().getTranslator().getItemTranslator().translateToPE(chunk.getBlockTypeId(x,y,z)) & 0xFF));
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data=0;
          data=(byte)((chunk.getBlockData(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockData(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0xFF);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
    Deflater deflater=new Deflater(7);
    deflater.reset();
    deflater.setInput(totalData.toByteArray());
    deflater.finish();
    byte[] bufferDeflate=new byte[65536];
    int deflatedSize=deflater.deflate(bufferDeflate);
    FullChunkPacket packet=new FullChunkPacket();
    packet.compressedData=ArrayUtils.subarray(bufferDeflate,0,deflatedSize);
    this.getSession().send(packet);
  }
 catch (  IOException e) {
  }
}","/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    ByteArrayOutputStream totalData=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(totalData);
    if (writer.getEndianness() == PEBinaryUtils.BIG_ENDIAN) {
      writer.switchEndianness();
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)(this.getSession().getTranslator().getItemTranslator().translateToPE(chunk.getBlockTypeId(x,y,z)) & 0xFF));
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y+=2) {
          byte data=0;
          data=(byte)((chunk.getBlockData(x,y,z) & 0xF) << 4);
          data|=chunk.getBlockData(x,y + 1,z) & 0xF;
          writer.writeByte(data);
        }
      }
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0xFF);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
    FullChunkPacket packet=new FullChunkPacket();
    packet.chunkX=chunkX;
    packet.chunkZ=chunkZ;
    packet.chunkData=totalData.toByteArray();
    this.getSession().send(packet);
    System.out.println(""String_Node_Str"" + chunkX + ""String_Node_Str""+ chunkZ);
  }
 catch (  IOException e) {
  }
}"
96696,"private void processPacketBuffer(byte[] buffer){
  PEPacket packet=Protocol.decode(buffer);
  if (packet == null) {
    return;
  }
switch (packet.pid()) {
case PEPacketIDs.PING:
    PingPongPacket pkPong=new PingPongPacket();
  pkPong.pingID=((PingPongPacket)packet).pingID;
this.send(pkPong,0);
break;
case PEPacketIDs.CLIENT_CONNECT:
if (this.loginStage != 0) {
break;
}
this.clientSessionID=((ClientConnectPacket)packet).sessionID;
ServerHandshakePacket pkServerHandshake=new ServerHandshakePacket();
pkServerHandshake.addr=this.getAddress().getAddress();
pkServerHandshake.port=(short)(0 & 0xFFFF);
pkServerHandshake.session=this.clientSessionID;
pkServerHandshake.session2=this.clientSessionID + 1000L;
this.loginStage=1;
this.send(pkServerHandshake);
break;
case PEPacketIDs.CLIENT_HANDSHAKE:
if (this.loginStage != 1) {
break;
}
this.loginStage=2;
break;
case PEPacketIDs.LOGIN_PACKET:
if (this.loginStage != 2) {
break;
}
LoginPacket packetLogin=(LoginPacket)packet;
this.username=packetLogin.username;
this.translator=TranslatorProvider.getByPEProtocolID(this,packetLogin.protocol1);
if (!(this.translator instanceof BaseTranslator)) {
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=LoginStatusPacket.LOGIN_FAILED_CLIENT;
this.send(pkLoginStatus);
this.disconnect(""String_Node_Str"");
break;
}
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=0;
this.send(pkLoginStatus);
this.getLogger().info(""String_Node_Str"" + this.username + ""String_Node_Str"");
Matcher matcher=patternUsername.matcher(this.username);
if (!matcher.matches()) {
this.disconnect(""String_Node_Str"");
break;
}
this.loginStage=3;
this.setPlayer(new PlayerProfile(this.username,UUID.nameUUIDFromBytes((""String_Node_Str"" + this.username).getBytes(StandardCharsets.UTF_8))));
break;
case PEPacketIDs.DISCONNECT_PACKET:
this.onDisconnect();
break;
default :
if (this.loginStage != 3) {
break;
}
if (!(this.translator instanceof BaseTranslator)) {
break;
}
this.dServer.getThreadPool().submit(new ProcessPEPacketTask(this,packet));
break;
}
}","private void processPacketBuffer(byte[] buffer){
  PEPacket packet=Protocol.decode(buffer);
  if (packet == null) {
    return;
  }
switch (packet.pid()) {
case PEPacketIDs.PING:
    PingPongPacket pkPong=new PingPongPacket();
  pkPong.pingID=((PingPongPacket)packet).pingID;
this.send(pkPong,0);
break;
case PEPacketIDs.CLIENT_CONNECT:
if (this.loginStage != 0) {
break;
}
this.clientSessionID=((ClientConnectPacket)packet).sessionID;
ServerHandshakePacket pkServerHandshake=new ServerHandshakePacket();
pkServerHandshake.addr=this.getAddress().getAddress();
pkServerHandshake.port=(short)(0 & 0xFFFF);
pkServerHandshake.session=this.clientSessionID;
pkServerHandshake.session2=this.clientSessionID + 1000L;
this.loginStage=1;
this.send(pkServerHandshake);
break;
case PEPacketIDs.CLIENT_HANDSHAKE:
if (this.loginStage != 1) {
break;
}
this.loginStage=2;
break;
case PEPacketIDs.LOGIN_PACKET:
if (this.loginStage != 2) {
break;
}
LoginPacket packetLogin=(LoginPacket)packet;
this.username=packetLogin.username;
this.translator=TranslatorProvider.getByPEProtocolID(this,packetLogin.protocol1);
if (!(this.translator instanceof BaseTranslator)) {
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=LoginStatusPacket.LOGIN_FAILED_CLIENT;
this.send(pkLoginStatus);
this.disconnect(""String_Node_Str"");
break;
}
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=0;
this.send(pkLoginStatus);
this.getLogger().info(""String_Node_Str"" + this.username + ""String_Node_Str"");
Matcher matcher=patternUsername.matcher(this.username);
if (!matcher.matches()) {
this.disconnect(""String_Node_Str"");
break;
}
this.loginStage=3;
this.setPlayer(new PlayerProfile(this.username,UUID.nameUUIDFromBytes((""String_Node_Str"" + this.username).getBytes(StandardCharsets.UTF_8))));
break;
case PEPacketIDs.DISCONNECT_PACKET:
this.onDisconnect();
break;
case PEPacketIDs.BATCH_PACKET:
BatchPacket packetBatch=(BatchPacket)packet;
if (packetBatch.packets == null || packetBatch.packets.isEmpty()) {
return;
}
for (PEPacket pk : packetBatch.packets) {
if (pk.pid() == PEPacketIDs.LOGIN_PACKET) {
if (this.loginStage != 2) {
break;
}
LoginPacket packetLogin1=(LoginPacket)pk;
this.username=packetLogin1.username;
this.translator=TranslatorProvider.getByPEProtocolID(this,packetLogin1.protocol1);
if (!(this.translator instanceof BaseTranslator)) {
LoginStatusPacket pkLoginStatus1=new LoginStatusPacket();
pkLoginStatus1.status=LoginStatusPacket.LOGIN_FAILED_CLIENT;
this.send(pkLoginStatus1);
this.disconnect(""String_Node_Str"");
break;
}
LoginStatusPacket pkLoginStatus1=new LoginStatusPacket();
pkLoginStatus1.status=0;
this.send(pkLoginStatus1);
this.getLogger().info(""String_Node_Str"" + this.username + ""String_Node_Str"");
Matcher matcher1=patternUsername.matcher(this.username);
if (!matcher1.matches()) {
this.disconnect(""String_Node_Str"");
break;
}
this.loginStage=3;
this.setPlayer(new PlayerProfile(this.username,UUID.nameUUIDFromBytes((""String_Node_Str"" + this.username).getBytes(StandardCharsets.UTF_8))));
continue;
}
if (!(this.translator instanceof BaseTranslator)) {
break;
}
this.dServer.getThreadPool().submit(new ProcessPEPacketTask(this,pk));
}
break;
default :
if (this.loginStage != 3) {
break;
}
if (!(this.translator instanceof BaseTranslator)) {
break;
}
this.dServer.getThreadPool().submit(new ProcessPEPacketTask(this,packet));
break;
}
}"
96697,"public void processDataPacket(RaknetDataPacket dataPacket){
  this.lastPacketReceived=System.currentTimeMillis();
  if (dataPacket.getSequenceNumber() - this.lastSequenceNum > 1) {
    for (int i=this.lastSequenceNum + 1; i < dataPacket.getSequenceNumber(); i++) {
      this.queueNACK.add(i);
    }
  }
  this.lastSequenceNum=dataPacket.getSequenceNumber();
  this.queueACK.add(dataPacket.getSequenceNumber());
  if (dataPacket.getEncapsulatedPackets().isEmpty()) {
    return;
  }
  for (  EncapsulatedPacket epacket : dataPacket.getEncapsulatedPackets()) {
    if (epacket.hasSplit) {
      System.out.println(""String_Node_Str"" + epacket.splitID + ""String_Node_Str""+ epacket.splitIndex+ ""String_Node_Str""+ epacket.splitCount);
      if (epacket.splitIndex == epacket.splitCount - 1) {
        if (splits.containsKey((Integer)epacket.splitID)) {
          splits.get((Integer)epacket.splitID).write(epacket.buffer);
          byte[] buff=splits.get((Integer)epacket.splitID).toByteArray();
          splits.remove((Integer)epacket.splitID);
          processPacketBuffer(buff);
        }
      }
 else {
        try {
          if (epacket.splitIndex == 0) {
            ByteArrayOutputStream oup=new ByteArrayOutputStream();
            oup.write(epacket.buffer);
            splits.put((Integer)epacket.splitID,oup);
          }
 else {
            if (splits.containsKey((Integer)epacket.splitID)) {
              splits.get((Integer)epacket.splitID).write(epacket.buffer);
            }
          }
        }
 catch (        IOException ex) {
        }
      }
      continue;
    }
    processPacketBuffer(epacket.buffer);
  }
}","public void processDataPacket(RaknetDataPacket dataPacket){
  this.lastPacketReceived=System.currentTimeMillis();
  if (dataPacket.getSequenceNumber() - this.lastSequenceNum > 1) {
    for (int i=this.lastSequenceNum + 1; i < dataPacket.getSequenceNumber(); i++) {
      this.queueNACK.add(i);
    }
  }
  this.lastSequenceNum=dataPacket.getSequenceNumber();
  this.queueACK.add(dataPacket.getSequenceNumber());
  if (dataPacket.getEncapsulatedPackets().isEmpty()) {
    return;
  }
  for (  EncapsulatedPacket epacket : dataPacket.getEncapsulatedPackets()) {
    if (epacket.hasSplit) {
      System.out.println(""String_Node_Str"" + epacket.splitID + ""String_Node_Str""+ epacket.splitIndex+ ""String_Node_Str""+ epacket.splitCount);
      if (epacket.splitIndex == epacket.splitCount - 1) {
        if (splits.containsKey((Integer)epacket.splitID)) {
          try {
            splits.get((Integer)epacket.splitID).write(epacket.buffer);
          }
 catch (          IOException ex) {
            ex.printStackTrace();
          }
          byte[] buff=splits.get((Integer)epacket.splitID).toByteArray();
          splits.remove((Integer)epacket.splitID);
          splitCounter.remove((Integer)epacket.splitID);
          processPacketBuffer(buff);
        }
      }
 else {
        try {
          if (epacket.splitIndex == 0) {
            ByteArrayOutputStream oup=new ByteArrayOutputStream();
            oup.write(epacket.buffer);
            splits.put((Integer)epacket.splitID,oup);
            splitCounter.put((Integer)epacket.splitID,-1);
          }
 else {
            if (splits.containsKey((Integer)epacket.splitID) && (splitCounter.get((Integer)epacket.splitID) < epacket.splitIndex)) {
              splits.get((Integer)epacket.splitID).write(epacket.buffer);
              splitCounter.put((Integer)epacket.splitID,epacket.splitIndex);
            }
          }
        }
 catch (        IOException ex) {
        }
      }
      continue;
    }
    processPacketBuffer(epacket.buffer);
  }
}"
96698,"@Override public void encode(){
}","@Override public void encode(){
  try {
    ByteArrayOutputStream packetCombiner=new ByteArrayOutputStream();
    for (    PEPacket pk : packets) {
      pk.encode();
      packetCombiner.write(pk.getData());
    }
    Deflater def=new Deflater(7);
    def.reset();
    def.setInput(packetCombiner.toByteArray());
    def.finish();
    byte[] deflateBuffer=new byte[65535];
    int size=def.deflate(deflateBuffer);
    deflateBuffer=Arrays.copyOfRange(deflateBuffer,0,size);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(deflateBuffer.length);
    writer.write(deflateBuffer);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}"
96699,"@Override public void decode(){
  try {
    packets=new ArrayList<>();
    PEBinaryReader reader=new PEBinaryReader(new ByteArrayInputStream(this.getData()));
    reader.readByte();
    int size=reader.readInt();
    System.out.println(""String_Node_Str"" + (this.getData().length - 5) + ""String_Node_Str""+ size);
    byte[] payload=reader.read(size);
    Inflater inf=new Inflater();
    inf.setInput(payload);
    byte[] decompressedPayload=new byte[1024 * 1024 * 64];
    inf.end();
    int decompressedSize=0;
    try {
      decompressedSize=inf.inflate(decompressedPayload);
    }
 catch (    DataFormatException ex) {
      ex.printStackTrace();
      this.setLength(reader.totallyRead());
      return;
    }
    System.out.println(""String_Node_Str"" + decompressedSize);
    decompressedPayload=Arrays.copyOfRange(decompressedPayload,0,decompressedSize);
    int offset=0;
    while (offset < decompressedSize) {
      PEPacket pk=Protocol.decode(Arrays.copyOfRange(decompressedPayload,offset,decompressedSize));
      if (pk == null || pk.getLength() == 0) {
        packets.clear();
        return;
      }
      offset+=pk.getLength();
      packets.add(pk);
    }
    this.setLength(reader.totallyRead());
  }
 catch (  IOException e) {
  }
}","@Override public void decode(){
  try {
    packets=new ArrayList<>();
    PEBinaryReader reader=new PEBinaryReader(new ByteArrayInputStream(this.getData()));
    reader.readByte();
    int size=reader.readInt();
    byte[] payload=reader.read(size);
    Inflater inf=new Inflater();
    inf.setInput(payload);
    byte[] decompressedPayload=new byte[1024 * 1024 * 64];
    int decompressedSize=0;
    try {
      decompressedSize=inf.inflate(decompressedPayload);
    }
 catch (    DataFormatException ex) {
      this.setLength(reader.totallyRead());
      return;
    }
    inf.end();
    int offset=0;
    while (offset < decompressedSize) {
      PEPacket pk=Protocol.decode(Arrays.copyOfRange(decompressedPayload,offset,decompressedSize));
      if (pk == null || pk.getLength() == 0) {
        packets.clear();
        return;
      }
      offset+=pk.getLength();
      packets.add(pk);
    }
    this.setLength(reader.totallyRead());
  }
 catch (  IOException e) {
  }
}"
96700,"@Override public void encode(){
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.write(this.compressedData);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}","@Override public void encode(){
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(bos);
    writer.writeByte((byte)(this.pid() & 0xFF));
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    writer.writeInt(chunkData.length);
    writer.write(chunkData);
    this.setData(bos.toByteArray());
  }
 catch (  IOException e) {
  }
}"
96701,"@Override public PEPacket[] translateToPE(Message message){
  if (mapToPE.containsKey(message.getClass())) {
    return mapToPE.get(message.getClass()).handle(message);
  }
 else {
    return null;
  }
}","@Override public PEPacket[] translateToPE(Message message){
  if (mapToPE.containsKey(message.getClass())) {
    return mapToPE.get(message.getClass()).handle(message);
  }
 else {
    System.out.println(""String_Node_Str"" + message.getClass().getSimpleName());
    return null;
  }
}"
96702,"@Override public Message[] translateToPC(PEPacket packet){
  if (packet instanceof BatchPacket) {
    BatchPacket pkBatch=(BatchPacket)packet;
    if (pkBatch.packets == null || pkBatch.packets.isEmpty()) {
      return null;
    }
    ArrayList<Message> msgs=new ArrayList<>();
    for (    PEPacket subPacket : pkBatch.packets) {
      Message[] ret=this.translateToPC(subPacket);
      if (ret != null) {
        msgs.addAll(Arrays.asList(ret));
      }
    }
    return msgs.toArray(new Message[0]);
  }
  if (mapToPC.containsKey(packet.getClass())) {
    return mapToPC.get(packet.getClass()).handle(packet);
  }
 else {
    return null;
  }
}","@Override public Message[] translateToPC(PEPacket packet){
  if (mapToPC.containsKey(packet.getClass())) {
    return mapToPC.get(packet.getClass()).handle(packet);
  }
 else {
    System.out.println(""String_Node_Str"" + packet.getClass().getSimpleName());
    return null;
  }
}"
96703,"public String readString(int lenLen) throws IOException {
  falloc(lenLen);
  int length=(int)readNat(lenLen);
  falloc(length);
  this.totallyRead+=length;
  return new String(read(length),""String_Node_Str"");
}","public String readString(int lenLen) throws IOException {
  falloc(lenLen);
  int length=(int)readNat(lenLen);
  falloc(length);
  return new String(read(length),""String_Node_Str"");
}"
96704,"public long readNat(int length) throws IOException {
  falloc(length);
  this.totallyRead+=length;
  return PEBinaryUtils.read(read(length),0,length,endianness);
}","public long readNat(int length) throws IOException {
  falloc(length);
  return PEBinaryUtils.read(read(length),0,length,endianness);
}"
96705,"public long readLong() throws IOException {
  falloc(8);
  this.totallyRead+=8;
  return readNat(8);
}","public long readLong() throws IOException {
  falloc(8);
  return readNat(8);
}"
96706,"public short readShort() throws IOException {
  falloc(2);
  this.totallyRead+=2;
  return (short)(readNat(2) & 0xFFFF);
}","public short readShort() throws IOException {
  falloc(2);
  return (short)(readNat(2) & 0xFFFF);
}"
96707,"public double readDouble() throws IOException {
  falloc(8);
  this.totallyRead+=8;
  ByteBuffer bb=ByteBuffer.wrap(read(8));
  return bb.getDouble();
}","public double readDouble() throws IOException {
  falloc(8);
  ByteBuffer bb=ByteBuffer.wrap(read(8));
  return bb.getDouble();
}"
96708,"public float readFloat() throws IOException {
  falloc(4);
  this.totallyRead+=4;
  ByteBuffer bb=ByteBuffer.wrap(read(4));
  return bb.getFloat();
}","public float readFloat() throws IOException {
  falloc(4);
  ByteBuffer bb=ByteBuffer.wrap(read(4));
  return bb.getFloat();
}"
96709,"public byte readByte() throws IOException {
  falloc(1);
  this.totallyRead+=1;
  return (byte)is.read();
}","public byte readByte() throws IOException {
  falloc(1);
  totallyRead+=1;
  return (byte)is.read();
}"
96710,"public int readInt() throws IOException {
  falloc(4);
  this.totallyRead+=4;
  return (int)(readNat(4) & 0xFFFFFFFF);
}","public int readInt() throws IOException {
  falloc(4);
  return (int)(readNat(4) & 0xFFFFFFFF);
}"
96711,"public int readTriad() throws IOException {
  falloc(3);
  this.totallyRead+=3;
  this.endianness=!this.endianness;
  int triad=(int)(readNat(3) & 0xFFFFFF);
  this.endianness=!this.endianness;
  return triad;
}","public int readTriad() throws IOException {
  falloc(3);
  this.endianness=!this.endianness;
  int triad=(int)(readNat(3) & 0xFFFFFF);
  this.endianness=!this.endianness;
  return triad;
}"
96712,"public static BaseTranslator getByPEProtocolID(DragonetSession session,int protocolID){
switch (protocolID) {
case 24:
    return new Translator_v0_11(session);
default :
  return null;
}
}","public static BaseTranslator getByPEProtocolID(DragonetSession session,int protocolID){
switch (protocolID) {
case 23:
case 24:
    return new Translator_v0_11(session);
default :
  return null;
}
}"
96713,"@Override public void handle(GlowSession session,BlockPlacementMessage message){
  final GlowPlayer player=session.getPlayer();
  if (player == null) {
    return;
  }
  Action action=Action.RIGHT_CLICK_BLOCK;
  GlowBlock clicked=player.getWorld().getBlockAt(message.getX(),message.getY(),message.getZ());
  org.dragonet.DragonetServer.instance().getRhino().useItem(message.getX(),message.getY(),message.getZ(),""String_Node_Str"",player.getWorld().getBlockAt(message.getX(),message.getY(),message.getZ()).getType().name(),player);
  if (message.getDirection() == -1) {
    BlockPlacementMessage previous=session.getPreviousPlacement();
    if (previous == null || !previous.getHeldItem().equals(message.getHeldItem())) {
      action=Action.RIGHT_CLICK_AIR;
      clicked=null;
    }
 else {
      session.setPreviousPlacement(null);
      return;
    }
  }
  session.setPreviousPlacement(message);
  Vector clickedLoc=new Vector(message.getCursorX(),message.getCursorY(),message.getCursorZ());
  BlockFace face=convertFace(message.getDirection());
  ItemStack holding=player.getItemInHand();
  if (!Objects.equals(holding,message.getHeldItem())) {
    return;
  }
  if (clicked != null && clicked.getType() == Material.AIR) {
    player.sendBlockChange(clicked.getLocation(),Material.AIR,(byte)0);
    return;
  }
  PlayerInteractEvent event=EventFactory.onPlayerInteract(player,action,clicked,face);
  boolean useInteractedBlock=event.useInteractedBlock() != Event.Result.DENY;
  if (useInteractedBlock && clicked != null && (!player.isSneaking() || holding == null)) {
    BlockType blockType=ItemTable.instance().getBlock(clicked.getType());
    useInteractedBlock=blockType.blockInteract(player,clicked,face,clickedLoc);
  }
 else {
    useInteractedBlock=false;
  }
  if (selectResult(event.useItemInHand(),!useInteractedBlock) && holding != null) {
    ItemType type=ItemTable.instance().getItem(holding.getType());
    if (clicked == null) {
      type.rightClickAir(player,holding);
    }
 else {
      type.rightClickBlock(player,clicked,face,holding,clickedLoc);
    }
  }
  if (clicked != null) {
    revert(player,clicked);
    revert(player,clicked.getRelative(face));
  }
  if (holding != null) {
    if (holding.getType().getMaxDurability() > 0 && holding.getDurability() > holding.getType().getMaxDurability()) {
      holding.setAmount(holding.getAmount() - 1);
      holding.setDurability((short)0);
    }
    if (holding.getAmount() <= 0) {
      holding=null;
    }
  }
  player.setItemInHand(holding);
}","@Override public void handle(GlowSession session,BlockPlacementMessage message){
  final GlowPlayer player=session.getPlayer();
  if (player == null) {
    return;
  }
  Action action=Action.RIGHT_CLICK_BLOCK;
  GlowBlock clicked=player.getWorld().getBlockAt(message.getX(),message.getY(),message.getZ());
  if (message.getDirection() == -1) {
    BlockPlacementMessage previous=session.getPreviousPlacement();
    if (previous == null || !previous.getHeldItem().equals(message.getHeldItem())) {
      action=Action.RIGHT_CLICK_AIR;
      clicked=null;
    }
 else {
      session.setPreviousPlacement(null);
      return;
    }
  }
  session.setPreviousPlacement(message);
  Vector clickedLoc=new Vector(message.getCursorX(),message.getCursorY(),message.getCursorZ());
  BlockFace face=convertFace(message.getDirection());
  ItemStack holding=player.getItemInHand();
  if (!Objects.equals(holding,message.getHeldItem())) {
    return;
  }
  if (clicked != null && clicked.getType() == Material.AIR) {
    player.sendBlockChange(clicked.getLocation(),Material.AIR,(byte)0);
    return;
  }
  PlayerInteractEvent event=EventFactory.onPlayerInteract(player,action,clicked,face);
  boolean useInteractedBlock=event.useInteractedBlock() != Event.Result.DENY;
  if (useInteractedBlock && clicked != null && (!player.isSneaking() || holding == null)) {
    BlockType blockType=ItemTable.instance().getBlock(clicked.getType());
    useInteractedBlock=blockType.blockInteract(player,clicked,face,clickedLoc);
  }
 else {
    useInteractedBlock=false;
  }
  if (selectResult(event.useItemInHand(),!useInteractedBlock) && holding != null) {
    ItemType type=ItemTable.instance().getItem(holding.getType());
    if (clicked == null) {
      type.rightClickAir(player,holding);
    }
 else {
      type.rightClickBlock(player,clicked,face,holding,clickedLoc);
    }
  }
  if (clicked != null) {
    revert(player,clicked);
    revert(player,clicked.getRelative(face));
  }
  if (holding != null) {
    if (holding.getType().getMaxDurability() > 0 && holding.getDurability() > holding.getType().getMaxDurability()) {
      holding.setAmount(holding.getAmount() - 1);
      holding.setDurability((short)0);
    }
    if (holding.getAmount() <= 0) {
      holding=null;
    }
  }
  player.setItemInHand(holding);
}"
96714,"@Override public void handle(GlowSession session,DiggingMessage message){
  final GlowPlayer player=session.getPlayer();
  GlowWorld world=player.getWorld();
  GlowBlock block=world.getBlockAt(message.getX(),message.getY(),message.getZ());
  BlockFace face=BlockPlacementHandler.convertFace(message.getFace());
  ItemStack holding=player.getItemInHand();
  boolean blockBroken=false;
  boolean revert=false;
  if (message.getState() == DiggingMessage.START_DIGGING) {
    org.dragonet.DragonetServer.instance().getRhino().useItem(message.getX(),message.getY(),message.getZ(),face.name(),player.getWorld().getBlockAt(message.getX(),message.getY(),message.getZ()).getType().name(),player);
    Action action=Action.LEFT_CLICK_BLOCK;
    Block eventBlock=block;
    if (player.getLocation().distanceSquared(block.getLocation()) > 36 || block.getTypeId() == 0) {
      action=Action.LEFT_CLICK_AIR;
      eventBlock=null;
    }
    PlayerInteractEvent interactEvent=EventFactory.onPlayerInteract(player,action,eventBlock,face);
    if (!BlockPlacementHandler.selectResult(interactEvent.useItemInHand(),true)) {
      revert=true;
    }
 else {
      boolean instaBreak=player.getGameMode() == GameMode.CREATIVE;
      BlockDamageEvent damageEvent=new BlockDamageEvent(player,block,player.getItemInHand(),instaBreak);
      if (player.getGameMode() == GameMode.CREATIVE && holding != null && EnchantmentTarget.WEAPON.includes(holding.getType())) {
        damageEvent.setCancelled(true);
      }
      EventFactory.callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        revert=true;
      }
 else {
        blockBroken=damageEvent.getInstaBreak() || instaBreak;
      }
    }
  }
 else   if (message.getState() == DiggingMessage.FINISH_DIGGING) {
    blockBroken=true;
  }
 else   if (message.getState() == DiggingMessage.STATE_DROP_ITEM) {
    player.dropItemInHand(false);
    return;
  }
 else   if (message.getState() == DiggingMessage.STATE_DROP_ITEMSTACK) {
    player.dropItemInHand(true);
    return;
  }
 else {
    return;
  }
  if (blockBroken) {
    BlockBreakEvent breakEvent=EventFactory.callEvent(new BlockBreakEvent(block,player));
    if (breakEvent.isCancelled()) {
      BlockPlacementHandler.revert(player,block);
      return;
    }
    BlockType blockType=ItemTable.instance().getBlock(block.getType());
    if (blockType != null) {
      blockType.blockDestroy(player,block,face);
    }
    if (!block.isEmpty() && !block.isLiquid() && player.getGameMode() != GameMode.CREATIVE) {
      for (      ItemStack drop : block.getDrops(holding)) {
        GlowItem item=world.dropItemNaturally(block.getLocation(),drop);
        item.setPickupDelay(30);
        item.setBias(player);
      }
    }
    world.playEffectExceptTo(block.getLocation(),Effect.STEP_SOUND,block.getTypeId(),64,player);
    block.setType(Material.AIR);
  }
 else   if (revert) {
    BlockPlacementHandler.revert(player,block);
  }
}","@Override public void handle(GlowSession session,DiggingMessage message){
  final GlowPlayer player=session.getPlayer();
  GlowWorld world=player.getWorld();
  GlowBlock block=world.getBlockAt(message.getX(),message.getY(),message.getZ());
  BlockFace face=BlockPlacementHandler.convertFace(message.getFace());
  ItemStack holding=player.getItemInHand();
  boolean blockBroken=false;
  boolean revert=false;
  if (message.getState() == DiggingMessage.START_DIGGING) {
    Action action=Action.LEFT_CLICK_BLOCK;
    Block eventBlock=block;
    if (player.getLocation().distanceSquared(block.getLocation()) > 36 || block.getTypeId() == 0) {
      action=Action.LEFT_CLICK_AIR;
      eventBlock=null;
    }
    PlayerInteractEvent interactEvent=EventFactory.onPlayerInteract(player,action,eventBlock,face);
    if (!BlockPlacementHandler.selectResult(interactEvent.useItemInHand(),true)) {
      revert=true;
    }
 else {
      boolean instaBreak=player.getGameMode() == GameMode.CREATIVE;
      BlockDamageEvent damageEvent=new BlockDamageEvent(player,block,player.getItemInHand(),instaBreak);
      if (player.getGameMode() == GameMode.CREATIVE && holding != null && EnchantmentTarget.WEAPON.includes(holding.getType())) {
        damageEvent.setCancelled(true);
      }
      EventFactory.callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        revert=true;
      }
 else {
        blockBroken=damageEvent.getInstaBreak() || instaBreak;
      }
    }
  }
 else   if (message.getState() == DiggingMessage.FINISH_DIGGING) {
    blockBroken=true;
  }
 else   if (message.getState() == DiggingMessage.STATE_DROP_ITEM) {
    player.dropItemInHand(false);
    return;
  }
 else   if (message.getState() == DiggingMessage.STATE_DROP_ITEMSTACK) {
    player.dropItemInHand(true);
    return;
  }
 else {
    return;
  }
  if (blockBroken) {
    BlockBreakEvent breakEvent=EventFactory.callEvent(new BlockBreakEvent(block,player));
    if (breakEvent.isCancelled()) {
      BlockPlacementHandler.revert(player,block);
      return;
    }
    BlockType blockType=ItemTable.instance().getBlock(block.getType());
    if (blockType != null) {
      blockType.blockDestroy(player,block,face);
    }
    if (!block.isEmpty() && !block.isLiquid() && player.getGameMode() != GameMode.CREATIVE) {
      for (      ItemStack drop : block.getDrops(holding)) {
        GlowItem item=world.dropItemNaturally(block.getLocation(),drop);
        item.setPickupDelay(30);
        item.setBias(player);
      }
    }
    world.playEffectExceptTo(block.getLocation(),Effect.STEP_SOUND,block.getTypeId(),64,player);
    block.setType(Material.AIR);
  }
 else   if (revert) {
    BlockPlacementHandler.revert(player,block);
  }
}"
96715,"public static void setArea(String worldName,int x1,int y1,int z1,int x2,int y2,int z2,String materialName,byte data){
  for (int x=x1; x < x2; x++) {
    for (int y=y1; y < y2; y++) {
      for (int z=z1; z < z2; z++) {
        setBlock.setBlock(worldName,x,y,z,materialName,data);
      }
    }
  }
}","public static void setArea(String worldName,int x1,int y1,int z1,int x2,int y2,int z2,String materialName,int tileData){
  for (int x=x1; x < x2; x++) {
    for (int y=y1; y < y2; y++) {
      for (int z=z1; z < z2; z++) {
        setBlock.setBlock(worldName,x,y,z,materialName,java.lang.Byte.parseByte(tileData + ""String_Node_Str""));
      }
    }
  }
}"
96716,"public static void setBlock(String worldName,int x,int y,int z,String tileName,byte tileData){
  org.dragonet.DragonetServer.instance().getServer().getWorld(worldName).getBlockAt(x,y,z).setType(Material.getMaterial(tileName));
  org.dragonet.DragonetServer.instance().getServer().getWorld(worldName).getBlockAt(x,y,z).setData(tileData);
}","public static void setBlock(String worldName,int x,int y,int z,String tileName,int tileData){
  org.dragonet.DragonetServer.instance().getServer().getWorld(worldName).getBlockAt(x,y,z).setType(Material.getMaterial(tileName));
  org.dragonet.DragonetServer.instance().getServer().getWorld(worldName).getBlockAt(x,y,z).setData(java.lang.Byte.parseByte(tileData + ""String_Node_Str""));
}"
96717,"public static void banPlayer(Player plr){
  if (!plr.isBanned()) {
    org.dragonet.DragonetServer.instance().getServer().getBanList(BanList.Type.NAME).addBan(plr.getName(),""String_Node_Str"",null,null);
  }
 else {
    org.dragonet.DragonetServer.instance().getLogger().warn(""String_Node_Str"" + plr.getName() + ""String_Node_Str"");
  }
}","public static void banPlayer(Object player,String reason){
  Player plr=(Player)player;
  if (!plr.isBanned()) {
    org.dragonet.DragonetServer.instance().getServer().getBanList(BanList.Type.NAME).addBan(plr.getName(),reason,null,null);
  }
 else {
    org.dragonet.DragonetServer.instance().getLogger().warn(""String_Node_Str"" + plr.getName() + ""String_Node_Str"");
  }
}"
96718,"public static void clearInventory(Player plr){
  plr.getInventory().clear();
}","public static void clearInventory(Object plr){
  try {
    ((Player)plr).getInventory().clear();
  }
 catch (  ClassCastException cce) {
    org.dragonet.DragonetServer.instance().getLogger().warn(""String_Node_Str"");
  }
}"
96719,"public static void stopServer(){
  org.dragonet.DragonetServer.instance().getServer().savePlayers();
  for (  Player plr : org.dragonet.DragonetServer.instance().getServer().getOnlinePlayers()) {
    plr.kickPlayer(""String_Node_Str"");
  }
  org.dragonet.DragonetServer.instance().getServer().shutdown();
}","public static void stopServer(String msg){
  org.dragonet.DragonetServer.instance().getServer().savePlayers();
  for (  Player plr : org.dragonet.DragonetServer.instance().getServer().getOnlinePlayers()) {
    plr.kickPlayer(msg);
  }
  org.dragonet.DragonetServer.instance().getServer().shutdown();
}"
96720,"public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name);
  }
}","public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name + ""String_Node_Str""+ s.fileContents+ ""String_Node_Str"");
  }
}"
96721,"public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
  }
  finally {
    Context.exit();
  }
}","public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
    System.out.println(Context.jsToJava(result,int.class));
  }
  finally {
    Context.exit();
  }
}"
96722,"public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name + ""String_Node_Str""+ s.fileContents+ ""String_Node_Str"");
  }
}","public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name);
  }
}"
96723,"public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
    System.out.println(Context.jsToJava(result,int.class));
  }
  finally {
    Context.exit();
  }
}","public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
  }
  finally {
    Context.exit();
  }
}"
96724,"public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name + ""String_Node_Str""+ s.fileContents+ ""String_Node_Str"");
  }
}","public void startJSInterpreter(){
  Scripts=loadJSFiles();
  for (  Script s : Scripts) {
    System.out.println(""String_Node_Str"" + s.name);
  }
}"
96725,"public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
    System.out.println(Context.jsToJava(result,int.class));
  }
  finally {
    Context.exit();
  }
}","public void runFunction(String func){
  BufferedReader script=null;
  try {
    script=new BufferedReader(new FileReader(this.getFile()));
  }
 catch (  IOException IOe) {
    System.out.println(Arrays.toString(IOe.getStackTrace()));
  }
  Context context=Context.enter();
  try {
    ScriptableObject scope=context.initStandardObjects();
    try {
      context.evaluateReader(scope,script,""String_Node_Str"",1,null);
    }
 catch (    IOException IOe) {
      System.out.println(Arrays.toString(IOe.getStackTrace()));
    }
    Function fct=(Function)scope.get(func,scope);
    Object result=fct.call(context,scope,scope,new Object[]{2,3});
  }
  finally {
    Context.exit();
  }
}"
96726,"public ItemTranslator_v0_10_0(){
  itemMap_PC_to_PE.put(1,1);
  itemMap_PC_to_PE.put(2,2);
  itemMap_PC_to_PE.put(3,3);
  for (int i=8; i <= 11; i++) {
    itemMap_PC_to_PE.put(i,i);
  }
}","public ItemTranslator_v0_10_0(){
  itemMap_PC_to_PE.put(8,8);
  itemMap_PC_to_PE.put(9,9);
  itemMap_PC_to_PE.put(10,10);
  itemMap_PC_to_PE.put(11,11);
}"
96727,"/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    ByteArrayOutputStream totalData=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(totalData);
    if (writer.getEndianness() == PEBinaryUtils.BIG_ENDIAN) {
      writer.switchEndianness();
    }
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)(this.getSession().getTranslator().getItemTranslator().translateToPE(chunk.getBlockTypeId(x,y,z)) & 0xFF));
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    writer.write(new byte[16384]);
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0xF0);
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x11);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
    Deflater deflater=new Deflater(2);
    deflater.reset();
    deflater.setInput(totalData.toByteArray());
    deflater.finish();
    byte[] bufferDeflate=new byte[65536];
    int deflatedSize=deflater.deflate(bufferDeflate);
    FullChunkPacket packet=new FullChunkPacket();
    packet.compressedData=ArrayUtils.subarray(bufferDeflate,0,deflatedSize);
    this.getSession().send(packet);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Send a single chunk to the client
 * @param chunkX The chunk X coordinate
 * @param chunkZ The chunk Z coordinate
 */
private synchronized void sendChunk(int chunkX,int chunkZ){
  try {
    if (!this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).isLoaded()) {
      this.getSession().getPlayer().getWorld().loadChunk(chunkX,chunkZ,true);
    }
    GlowChunkSnapshot chunk=this.getSession().getPlayer().getWorld().getChunkAt(chunkX,chunkZ).getChunkSnapshot();
    ByteArrayOutputStream totalData=new ByteArrayOutputStream();
    PEBinaryWriter writer=new PEBinaryWriter(totalData);
    if (writer.getEndianness() == PEBinaryUtils.BIG_ENDIAN) {
      writer.switchEndianness();
    }
    writer.writeInt(chunkX);
    writer.writeInt(chunkZ);
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        for (int y=0; y < 128; y++) {
          if (chunk.getBlockTypeId(x,y,z) != 0) {
            writer.writeByte((byte)(this.getSession().getTranslator().getItemTranslator().translateToPE(chunk.getBlockTypeId(x,y,z)) & 0xFF));
          }
 else {
            writer.writeByte((byte)0x00);
          }
        }
      }
    }
    writer.write(new byte[16384]);
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0xF0);
    }
    for (int i=0; i < 16384; i++) {
      writer.writeByte((byte)0x11);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
    }
    for (int i=0; i < 256; i++) {
      writer.writeByte((byte)0x00);
      writer.writeByte((byte)0x85);
      writer.writeByte((byte)0xB2);
      writer.writeByte((byte)0x4A);
    }
    Deflater deflater=new Deflater(2);
    deflater.reset();
    deflater.setInput(totalData.toByteArray());
    deflater.finish();
    byte[] bufferDeflate=new byte[65536];
    int deflatedSize=deflater.deflate(bufferDeflate);
    FullChunkPacket packet=new FullChunkPacket();
    packet.compressedData=ArrayUtils.subarray(bufferDeflate,0,deflatedSize);
    this.getSession().send(packet);
  }
 catch (  IOException e) {
  }
}"
96728,"/** 
 * Trigger a chunk tick update
 */
public void onTick(){
  this.autoPrepareChunks();
  this.unloadFarChunks();
  this.sendChunks();
}","/** 
 * Trigger a chunk tick update
 */
public void onTick(){
  if (this.getSession().getPlayer() == null) {
    return;
  }
  if (this.lastWorld == null) {
    this.lastWorld=this.getSession().getPlayer().getWorld().getName();
  }
  if (!this.lastWorld.equalsIgnoreCase(this.getSession().getPlayer().getWorld().getName())) {
    for (    ChunkLocation loc : this.chunksLoaded) {
      this.unloadChunk(loc.getX(),loc.getZ());
    }
    this.chunksLoaded.clear();
    this.chunksQueue.clear();
  }
  this.autoPrepareChunks();
  this.unloadFarChunks();
  this.sendChunks();
}"
96729,"/** 
 * Unload the chunks that distance > 8
 */
public synchronized void unloadFarChunks(){
  if (!(this.getSession().getPlayer() instanceof GlowPlayer)) {
    return;
  }
  ChunkLocation playerChunk=new ChunkLocation(this.getSession().getPlayer().getLocation().getBlockX() / 16,this.getSession().getPlayer().getLocation().getBlockZ() / 16);
  ArrayList<ChunkLocation> toUnload=new ArrayList<>();
  for (  ChunkLocation loc : this.chunksLoaded) {
    if (loc.distanceTo(playerChunk) > 16) {
      toUnload.add(loc);
      System.out.println(""String_Node_Str"" + playerChunk.toString() + ""String_Node_Str""+ loc.toString()+ ""String_Node_Str""+ loc.distanceTo(playerChunk));
    }
  }
  UnloadChunkPacket pkUnloadChunk;
  for (  ChunkLocation locUnload : toUnload) {
    pkUnloadChunk=new UnloadChunkPacket();
    pkUnloadChunk.x=locUnload.getX();
    pkUnloadChunk.z=locUnload.getZ();
    this.getSession().send(pkUnloadChunk);
  }
  this.chunksLoaded.removeAll(toUnload);
}","/** 
 * Unload the chunks that distance > 8
 */
public synchronized void unloadFarChunks(){
  if (!(this.getSession().getPlayer() instanceof GlowPlayer)) {
    return;
  }
  ChunkLocation playerChunk=new ChunkLocation(this.getSession().getPlayer().getLocation().getBlockX() / 16,this.getSession().getPlayer().getLocation().getBlockZ() / 16);
  ArrayList<ChunkLocation> toUnload=new ArrayList<>();
  for (  ChunkLocation loc : this.chunksLoaded) {
    if (loc.distanceTo(playerChunk) > 16) {
      toUnload.add(loc);
      System.out.println(""String_Node_Str"" + playerChunk.toString() + ""String_Node_Str""+ loc.toString()+ ""String_Node_Str""+ loc.distanceTo(playerChunk));
    }
  }
  for (  ChunkLocation locUnload : toUnload) {
    this.unloadChunk(locUnload.getX(),locUnload.getZ());
  }
  this.chunksLoaded.removeAll(toUnload);
}"
96730,"/** 
 * Disconnects the session with the specified reason. This causes a KickMessage to be sent. When it has been delivered, the channel is closed.
 * @param reason The reason for disconnection.
 * @param overrideKick Whether to skip the kick event.
 */
@Override public void disconnect(String reason,boolean overrideKick){
  if (player != null && !overrideKick) {
    PlayerKickEvent event=EventFactory.onPlayerKick(player,reason);
    if (event.isCancelled()) {
      return;
    }
    reason=event.getReason();
    if (event.getLeaveMessage() != null) {
      this.getServer().broadcastMessage(event.getLeaveMessage());
    }
  }
  if (player != null) {
    GlowServer.logger.info(player.getName() + ""String_Node_Str"" + reason);
  }
 else {
    GlowServer.logger.info(""String_Node_Str"" + this.remoteIP + ""String_Node_Str""+ this.remotePort+ ""String_Node_Str""+ reason);
  }
  this.send(new KickMessage(reason));
  this.statusActive=false;
  this.getServer().getSessionRegistry().remove(this);
  this.dServer.getNetworkHandler().removeSession(this);
}","/** 
 * Disconnects the session with the specified reason. This causes a KickMessage to be sent. When it has been delivered, the channel is closed.
 * @param reason The reason for disconnection.
 * @param overrideKick Whether to skip the kick event.
 */
@Override public void disconnect(String reason,boolean overrideKick){
  if (player != null && !overrideKick) {
    PlayerKickEvent event=EventFactory.onPlayerKick(player,reason);
    if (event.isCancelled()) {
      return;
    }
    reason=event.getReason();
    if (event.getLeaveMessage() != null) {
      this.getServer().broadcastMessage(event.getLeaveMessage());
    }
  }
  if (player != null) {
    GlowServer.logger.info(player.getName() + ""String_Node_Str"" + reason);
    this.player.remove();
  }
 else {
    GlowServer.logger.info(""String_Node_Str"" + this.remoteIP + ""String_Node_Str""+ this.remotePort+ ""String_Node_Str""+ reason);
  }
  this.send(new KickMessage(reason));
  this.statusActive=false;
  this.dServer.getNetworkHandler().removeSession(this);
  this.getServer().getSessionRegistry().remove((GlowSession)this);
  if (this.player != null) {
    this.player.getWorld().getRawPlayers().remove(this.player);
  }
  this.player=null;
}"
96731,"public void processDataPacket(RaknetDataPacket dataPacket){
  this.lastPacketReceived=System.currentTimeMillis();
  if (dataPacket.getSequenceNumber() - this.lastSequenceNum > 1) {
    for (int i=this.lastSequenceNum + 1; i < dataPacket.getSequenceNumber(); i++) {
      this.queueNACK.add(i);
    }
  }
  this.lastSequenceNum=dataPacket.getSequenceNumber();
  this.queueACK.add(dataPacket.getSequenceNumber());
  if (dataPacket.getEncapsulatedPackets().isEmpty()) {
    return;
  }
  for (  EncapsulatedPacket epacket : dataPacket.getEncapsulatedPackets()) {
    PEPacket packet=PEPacket.fromBinary(epacket.buffer);
    if (packet == null) {
      continue;
    }
switch (packet.pid()) {
case PEPacketIDs.PING:
      PingPongPacket pkPong=new PingPongPacket();
    pkPong.pingID=((PingPongPacket)packet).pingID;
  this.send(pkPong,0);
break;
case PEPacketIDs.CLIENT_CONNECT:
if (this.loginStage != 0) {
break;
}
this.clientSessionID=((ClientConnectPacket)packet).sessionID;
ServerHandshakePacket pkServerHandshake=new ServerHandshakePacket();
pkServerHandshake.port=(short)(this.remotePort & 0xFFFF);
pkServerHandshake.session=this.clientSessionID;
pkServerHandshake.session2=0x04440BA9L;
this.loginStage=1;
this.send(pkServerHandshake);
break;
case PEPacketIDs.CLIENT_HANDSHAKE:
if (this.loginStage != 1) {
break;
}
this.loginStage=2;
break;
case PEPacketIDs.LOGIN_PACKET:
if (this.loginStage != 2) {
break;
}
LoginPacket packetLogin=(LoginPacket)packet;
this.username=packetLogin.username;
this.translator=TranslatorProvider.getByPEProtocolID(this,packetLogin.protocol1);
if (!(this.translator instanceof BaseTranslator)) {
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=2;
this.send(pkLoginStatus);
this.disconnect(""String_Node_Str"");
break;
}
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=0;
this.send(pkLoginStatus);
this.getLogger().info(""String_Node_Str"");
Matcher matcher=patternUsername.matcher(this.username);
if (!matcher.matches()) {
this.disconnect(""String_Node_Str"");
break;
}
this.loginStage=3;
this.setPlayer(new PlayerProfile(this.username,UUID.nameUUIDFromBytes((""String_Node_Str"" + this.username).getBytes(StandardCharsets.UTF_8))));
break;
case PEPacketIDs.CLIENT_DISCONNECT:
this.statusActive=false;
break;
default :
if (this.loginStage != 3) {
break;
}
if (!(this.translator instanceof BaseTranslator)) {
break;
}
this.dServer.getThreadPool().submit(new ProcessPEPacketTask(this,packet));
break;
}
}
}","public void processDataPacket(RaknetDataPacket dataPacket){
  this.lastPacketReceived=System.currentTimeMillis();
  if (dataPacket.getSequenceNumber() - this.lastSequenceNum > 1) {
    for (int i=this.lastSequenceNum + 1; i < dataPacket.getSequenceNumber(); i++) {
      this.queueNACK.add(i);
    }
  }
  this.lastSequenceNum=dataPacket.getSequenceNumber();
  this.queueACK.add(dataPacket.getSequenceNumber());
  if (dataPacket.getEncapsulatedPackets().isEmpty()) {
    return;
  }
  for (  EncapsulatedPacket epacket : dataPacket.getEncapsulatedPackets()) {
    PEPacket packet=PEPacket.fromBinary(epacket.buffer);
    if (packet == null) {
      continue;
    }
switch (packet.pid()) {
case PEPacketIDs.PING:
      PingPongPacket pkPong=new PingPongPacket();
    pkPong.pingID=((PingPongPacket)packet).pingID;
  this.send(pkPong,0);
break;
case PEPacketIDs.CLIENT_CONNECT:
if (this.loginStage != 0) {
break;
}
this.clientSessionID=((ClientConnectPacket)packet).sessionID;
ServerHandshakePacket pkServerHandshake=new ServerHandshakePacket();
pkServerHandshake.port=(short)(this.remotePort & 0xFFFF);
pkServerHandshake.session=this.clientSessionID;
pkServerHandshake.session2=0x04440BA9L;
this.loginStage=1;
this.send(pkServerHandshake);
break;
case PEPacketIDs.CLIENT_HANDSHAKE:
if (this.loginStage != 1) {
break;
}
this.loginStage=2;
break;
case PEPacketIDs.LOGIN_PACKET:
if (this.loginStage != 2) {
break;
}
LoginPacket packetLogin=(LoginPacket)packet;
this.username=packetLogin.username;
this.translator=TranslatorProvider.getByPEProtocolID(this,packetLogin.protocol1);
if (!(this.translator instanceof BaseTranslator)) {
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=2;
this.send(pkLoginStatus);
this.disconnect(""String_Node_Str"");
break;
}
LoginStatusPacket pkLoginStatus=new LoginStatusPacket();
pkLoginStatus.status=0;
this.send(pkLoginStatus);
this.getLogger().info(""String_Node_Str"");
Matcher matcher=patternUsername.matcher(this.username);
if (!matcher.matches()) {
this.disconnect(""String_Node_Str"");
break;
}
this.loginStage=3;
this.setPlayer(new PlayerProfile(this.username,UUID.nameUUIDFromBytes((""String_Node_Str"" + this.username).getBytes(StandardCharsets.UTF_8))));
break;
case PEPacketIDs.CLIENT_DISCONNECT:
this.onDisconnect();
break;
default :
if (this.loginStage != 3) {
break;
}
if (!(this.translator instanceof BaseTranslator)) {
break;
}
this.dServer.getThreadPool().submit(new ProcessPEPacketTask(this,packet));
break;
}
}
}"
96732,"public synchronized void removeSession(DragonetSession session){
  this.sessions.remove(session);
}","public synchronized void removeSession(DragonetSession session){
  this.sessions.remove(session.getAddress().toString());
}"
96733,"public ItemTranslator_v0_10_0(){
  for (int i=0; i <= 24; i++) {
    itemMap_PC_to_PE.put(i,i);
  }
  itemMap_PC_to_PE.put(26,26);
  itemMap_PC_to_PE.put(27,27);
  itemMap_PC_to_PE.put(31,31);
  itemMap_PC_to_PE.put(50,50);
}","public ItemTranslator_v0_10_0(){
  for (int i=0; i <= 24; i++) {
    itemMap_PC_to_PE.put(i,i);
  }
}"
96734,"/** 
 * Translate a PC block/item into PE block/item
 * @param itemPC PC Item ID
 * @return PE Item ID
 */
@Override public int translateToPE(int itemPC){
  if (itemPC >= 8 && itemPC <= 11) {
    return itemPC;
  }
 else {
    return DEFAULT_BLOCK_TO_PE;
  }
}","/** 
 * Translate a PC block/item into PE block/item
 * @param itemPC PC Item ID
 * @return PE Item ID
 */
@Override public int translateToPE(int itemPC){
  if (itemMap_PC_to_PE.containsKey(itemPC)) {
    return itemMap_PC_to_PE.get(itemPC);
  }
 else {
    return DEFAULT_BLOCK_TO_PE;
  }
}"
96735,"@Override public PEPacket[] translateToPE(Message message){
  if (message.getClass().getSimpleName().contains(""String_Node_Str"") || message.getClass().getSimpleName().contains(""String_Node_Str"") || message.getClass().getSimpleName().contains(""String_Node_Str"")) {
    System.out.print(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  if (message instanceof ChatMessage) {
    String msg=((ChatMessage)message).text.asPlaintext();
    MessagePacket pkMessage=new MessagePacket();
    pkMessage.sender=""String_Node_Str"";
    pkMessage.message=msg;
    return new PEPacket[]{pkMessage};
  }
  if (message instanceof RelativeEntityPositionMessage) {
    RelativeEntityPositionMessage msgRelativeEntityPosition=((RelativeEntityPositionMessage)message);
    Entity entity=this.getSession().getPlayer().getWorld().getEntityManager().getEntity(msgRelativeEntityPosition.id);
    if (entity instanceof GlowPlayer) {
      boolean isTeleport=Math.sqrt(msgRelativeEntityPosition.deltaX ^ 2 + msgRelativeEntityPosition.deltaY ^ 2 + msgRelativeEntityPosition.deltaZ ^ 2) > 2;
      MovePlayerPacket pkMovePlayer=new MovePlayerPacket(msgRelativeEntityPosition.id,(float)entity.getLocation().getX(),(float)entity.getLocation().getY(),(float)entity.getLocation().getZ(),entity.getLocation().getYaw(),entity.getLocation().getPitch(),entity.getLocation().getYaw(),isTeleport);
      return new PEPacket[]{pkMovePlayer};
    }
 else {
      return null;
    }
  }
  if (message instanceof SpawnPlayerMessage) {
    SpawnPlayerMessage msgSpawnPlayer=(SpawnPlayerMessage)message;
    AddPlayerPacket pkAddPlayer=new AddPlayerPacket();
    pkAddPlayer.clientID=0;
    pkAddPlayer.eid=msgSpawnPlayer.getId();
    pkAddPlayer.username=this.getSession().getServer().getPlayer(msgSpawnPlayer.getUuid()).getDisplayName();
    pkAddPlayer.x=(float)msgSpawnPlayer.getX();
    pkAddPlayer.y=(float)msgSpawnPlayer.getY();
    pkAddPlayer.z=(float)msgSpawnPlayer.getZ();
    pkAddPlayer.yaw=(msgSpawnPlayer.getRotation() % 360 + 360) % 360;
    pkAddPlayer.pitch=msgSpawnPlayer.getPitch();
    pkAddPlayer.unknown1=0;
    pkAddPlayer.unknown2=0;
    pkAddPlayer.metadata=EntityMetaData.getMetaDataFromPlayer((GlowPlayer)this.getSession().getPlayer().getWorld().getEntityManager().getEntity(msgSpawnPlayer.getId()));
    return new PEPacket[]{pkAddPlayer};
  }
  if (message instanceof StateChangeMessage) {
    if (((StateChangeMessage)message).reason == StateChangeMessage.Reason.GAMEMODE.ordinal()) {
      StartGamePacket pkStartGame=new StartGamePacket();
      pkStartGame.eid=this.getSession().getPlayer().getEntityId();
      pkStartGame.gamemode=((int)((StateChangeMessage)message).value) & 0x1;
      pkStartGame.seed=0;
      pkStartGame.generator=1;
      pkStartGame.spawnX=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockX();
      pkStartGame.spawnY=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockY();
      pkStartGame.spawnZ=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockZ();
      pkStartGame.x=(float)this.getSession().getPlayer().getLocation().getX();
      pkStartGame.y=(float)this.getSession().getPlayer().getLocation().getY();
      pkStartGame.z=(float)this.getSession().getPlayer().getLocation().getZ();
      return new PEPacket[]{pkStartGame};
    }
  }
  if (message instanceof OpenWindowMessage) {
    OpenWindowMessage msgOpenWindow=(OpenWindowMessage)message;
    byte typePE=InventoryType.PEInventory.toPEInventory(InventoryType.PCInventory.fromString(msgOpenWindow.type),msgOpenWindow.slots);
    if (typePE == (byte)0xFF) {
      CloseWindowMessage msgCloseWindow=new CloseWindowMessage(msgOpenWindow.id);
      this.getSession().messageReceived(msgCloseWindow);
      return null;
    }
    WindowOpenPacket pkOpenWindow=new WindowOpenPacket();
    pkOpenWindow.windowID=(byte)(msgOpenWindow.id & 0xFF);
    pkOpenWindow.type=typePE;
    pkOpenWindow.slots=(byte)(msgOpenWindow.slots & 0xFFFF);
    pkOpenWindow.x=this.getSession().getPlayer().getLocation().getBlockX();
    pkOpenWindow.y=this.getSession().getPlayer().getLocation().getBlockY();
    pkOpenWindow.z=this.getSession().getPlayer().getLocation().getBlockZ();
    this.cachedWindowType[msgOpenWindow.id & 0xFF]=typePE;
    return new PEPacket[]{pkOpenWindow};
  }
  if (message instanceof SetWindowContentsMessage) {
    SetWindowContentsMessage msgWindowContents=(SetWindowContentsMessage)message;
    if (msgWindowContents.id == 0) {
      WindowItemsPacket pkInventory=new WindowItemsPacket();
      pkInventory.windowID=PEWindowConstantID.PLAYER_INVENTORY;
      pkInventory.slots=new PEInventorySlot[InventoryType.SlotSize.PLAYER];
      for (int i=9; i <= 44; i++) {
        if (msgWindowContents.items[i] != null) {
          pkInventory.slots[i - 9]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkInventory.slots[i - 9]=new PEInventorySlot();
        }
      }
      pkInventory.hotbar=new PEInventorySlot[9];
      for (int i=36; i <= 44; i++) {
        if (msgWindowContents.items[i] != null) {
          pkInventory.hotbar[i - 36]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkInventory.hotbar[i - 36]=new PEInventorySlot();
        }
      }
      WindowItemsPacket pkArmorInv=new WindowItemsPacket();
      pkArmorInv.windowID=PEWindowConstantID.PLAYER_ARMOR;
      pkArmorInv.slots=new PEInventorySlot[4];
      for (int i=5; i <= 8; i++) {
        if (msgWindowContents.items[i] != null) {
          pkArmorInv.slots[i - 5]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkArmorInv.slots[i - 5]=new PEInventorySlot();
        }
      }
      if (this.getSession().getSentAndReceivedChunks() != -1) {
        this.getSession().getQueueAfterChunkSent().add(pkInventory);
        this.getSession().getQueueAfterChunkSent().add(pkArmorInv);
      }
 else {
        return new PEPacket[]{pkInventory,pkArmorInv};
      }
      return null;
    }
    System.out.println(""String_Node_Str"" + msgWindowContents.id + ""String_Node_Str""+ msgWindowContents.items.length+ ""String_Node_Str"");
  }
  if (message instanceof SetWindowSlotMessage) {
    SetWindowSlotMessage msgSetSlot=(SetWindowSlotMessage)message;
    if (this.cachedWindowType[msgSetSlot.id & 0xFF] == -1) {
      return null;
    }
    int targetSlot=msgSetSlot.slot;
    WindowSetSlotPacket pkSetSlot=new WindowSetSlotPacket();
    pkSetSlot.windowID=(byte)(msgSetSlot.id & 0xFF);
    pkSetSlot.slot=(short)(targetSlot & 0xFFFF);
    pkSetSlot.item=new PEInventorySlot((short)(msgSetSlot.item.getTypeId() & 0xFFFF),(byte)(msgSetSlot.item.getAmount() & 0xFF),msgSetSlot.item.getDurability());
    return new PEPacket[]{pkSetSlot};
  }
  if (message instanceof CloseWindowMessage) {
    CloseWindowMessage msgCloseWindow=(CloseWindowMessage)message;
    if (msgCloseWindow.id != 0) {
      this.cachedWindowType[msgCloseWindow.id & 0xFF]=-1;
    }
    WindowClosePacket pkCloseWindow=new WindowClosePacket();
    pkCloseWindow.windowID=(byte)(msgCloseWindow.id & 0xFF);
    return new PEPacket[]{pkCloseWindow};
  }
  return null;
}","@Override public PEPacket[] translateToPE(Message message){
  if (message.getClass().getSimpleName().contains(""String_Node_Str"") || message.getClass().getSimpleName().contains(""String_Node_Str"") || message.getClass().getSimpleName().contains(""String_Node_Str"")) {
    System.out.print(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  if (message instanceof KickMessage) {
    return new PEPacket[]{new DisconnectPacket()};
  }
  if (message instanceof ChatMessage) {
    String msg=((ChatMessage)message).text.asPlaintext();
    MessagePacket pkMessage=new MessagePacket();
    pkMessage.sender=""String_Node_Str"";
    pkMessage.message=msg;
    return new PEPacket[]{pkMessage};
  }
  if (message instanceof RelativeEntityPositionMessage) {
    RelativeEntityPositionMessage msgRelativeEntityPosition=((RelativeEntityPositionMessage)message);
    Entity entity=this.getSession().getPlayer().getWorld().getEntityManager().getEntity(msgRelativeEntityPosition.id);
    if (entity instanceof GlowPlayer) {
      boolean isTeleport=Math.sqrt(msgRelativeEntityPosition.deltaX ^ 2 + msgRelativeEntityPosition.deltaY ^ 2 + msgRelativeEntityPosition.deltaZ ^ 2) > 2;
      MovePlayerPacket pkMovePlayer=new MovePlayerPacket(msgRelativeEntityPosition.id,(float)entity.getLocation().getX(),(float)entity.getLocation().getY(),(float)entity.getLocation().getZ(),entity.getLocation().getYaw(),entity.getLocation().getPitch(),entity.getLocation().getYaw(),isTeleport);
      return new PEPacket[]{pkMovePlayer};
    }
 else {
      return null;
    }
  }
  if (message instanceof SpawnPlayerMessage) {
    SpawnPlayerMessage msgSpawnPlayer=(SpawnPlayerMessage)message;
    AddPlayerPacket pkAddPlayer=new AddPlayerPacket();
    pkAddPlayer.clientID=0;
    pkAddPlayer.eid=msgSpawnPlayer.getId();
    pkAddPlayer.username=this.getSession().getServer().getPlayer(msgSpawnPlayer.getUuid()).getDisplayName();
    pkAddPlayer.x=(float)msgSpawnPlayer.getX();
    pkAddPlayer.y=(float)msgSpawnPlayer.getY();
    pkAddPlayer.z=(float)msgSpawnPlayer.getZ();
    pkAddPlayer.yaw=(msgSpawnPlayer.getRotation() % 360 + 360) % 360;
    pkAddPlayer.pitch=msgSpawnPlayer.getPitch();
    pkAddPlayer.unknown1=0;
    pkAddPlayer.unknown2=0;
    pkAddPlayer.metadata=EntityMetaData.getMetaDataFromPlayer((GlowPlayer)this.getSession().getPlayer().getWorld().getEntityManager().getEntity(msgSpawnPlayer.getId()));
    return new PEPacket[]{pkAddPlayer};
  }
  if (message instanceof StateChangeMessage) {
    if (((StateChangeMessage)message).reason == StateChangeMessage.Reason.GAMEMODE.ordinal()) {
      StartGamePacket pkStartGame=new StartGamePacket();
      pkStartGame.eid=this.getSession().getPlayer().getEntityId();
      pkStartGame.gamemode=((int)((StateChangeMessage)message).value) & 0x1;
      pkStartGame.seed=0;
      pkStartGame.generator=1;
      pkStartGame.spawnX=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockX();
      pkStartGame.spawnY=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockY();
      pkStartGame.spawnZ=this.getSession().getPlayer().getWorld().getSpawnLocation().getBlockZ();
      pkStartGame.x=(float)this.getSession().getPlayer().getLocation().getX();
      pkStartGame.y=(float)this.getSession().getPlayer().getLocation().getY();
      pkStartGame.z=(float)this.getSession().getPlayer().getLocation().getZ();
      return new PEPacket[]{pkStartGame};
    }
  }
  if (message instanceof OpenWindowMessage) {
    OpenWindowMessage msgOpenWindow=(OpenWindowMessage)message;
    byte typePE=InventoryType.PEInventory.toPEInventory(InventoryType.PCInventory.fromString(msgOpenWindow.type),msgOpenWindow.slots);
    if (typePE == (byte)0xFF) {
      CloseWindowMessage msgCloseWindow=new CloseWindowMessage(msgOpenWindow.id);
      this.getSession().messageReceived(msgCloseWindow);
      return null;
    }
    WindowOpenPacket pkOpenWindow=new WindowOpenPacket();
    pkOpenWindow.windowID=(byte)(msgOpenWindow.id & 0xFF);
    pkOpenWindow.type=typePE;
    pkOpenWindow.slots=(byte)(msgOpenWindow.slots & 0xFFFF);
    pkOpenWindow.x=this.getSession().getPlayer().getLocation().getBlockX();
    pkOpenWindow.y=this.getSession().getPlayer().getLocation().getBlockY();
    pkOpenWindow.z=this.getSession().getPlayer().getLocation().getBlockZ();
    this.cachedWindowType[msgOpenWindow.id & 0xFF]=typePE;
    return new PEPacket[]{pkOpenWindow};
  }
  if (message instanceof SetWindowContentsMessage) {
    SetWindowContentsMessage msgWindowContents=(SetWindowContentsMessage)message;
    if (msgWindowContents.id == 0) {
      WindowItemsPacket pkInventory=new WindowItemsPacket();
      pkInventory.windowID=PEWindowConstantID.PLAYER_INVENTORY;
      pkInventory.slots=new PEInventorySlot[InventoryType.SlotSize.PLAYER];
      for (int i=9; i <= 44; i++) {
        if (msgWindowContents.items[i] != null) {
          pkInventory.slots[i - 9]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkInventory.slots[i - 9]=new PEInventorySlot();
        }
      }
      pkInventory.hotbar=new PEInventorySlot[9];
      for (int i=36; i <= 44; i++) {
        if (msgWindowContents.items[i] != null) {
          pkInventory.hotbar[i - 36]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkInventory.hotbar[i - 36]=new PEInventorySlot();
        }
      }
      WindowItemsPacket pkArmorInv=new WindowItemsPacket();
      pkArmorInv.windowID=PEWindowConstantID.PLAYER_ARMOR;
      pkArmorInv.slots=new PEInventorySlot[4];
      for (int i=5; i <= 8; i++) {
        if (msgWindowContents.items[i] != null) {
          pkArmorInv.slots[i - 5]=new PEInventorySlot((short)(msgWindowContents.items[i].getTypeId() & 0xFFFF),(byte)(msgWindowContents.items[i].getAmount() & 0xFF),msgWindowContents.items[i].getDurability());
        }
 else {
          pkArmorInv.slots[i - 5]=new PEInventorySlot();
        }
      }
      if (this.getSession().getSentAndReceivedChunks() != -1) {
        this.getSession().getQueueAfterChunkSent().add(pkInventory);
        this.getSession().getQueueAfterChunkSent().add(pkArmorInv);
      }
 else {
        return new PEPacket[]{pkInventory,pkArmorInv};
      }
      return null;
    }
    System.out.println(""String_Node_Str"" + msgWindowContents.id + ""String_Node_Str""+ msgWindowContents.items.length+ ""String_Node_Str"");
  }
  if (message instanceof SetWindowSlotMessage) {
    SetWindowSlotMessage msgSetSlot=(SetWindowSlotMessage)message;
    if (this.cachedWindowType[msgSetSlot.id & 0xFF] == -1) {
      return null;
    }
    int targetSlot=msgSetSlot.slot;
    WindowSetSlotPacket pkSetSlot=new WindowSetSlotPacket();
    pkSetSlot.windowID=(byte)(msgSetSlot.id & 0xFF);
    pkSetSlot.slot=(short)(targetSlot & 0xFFFF);
    pkSetSlot.item=new PEInventorySlot((short)(msgSetSlot.item.getTypeId() & 0xFFFF),(byte)(msgSetSlot.item.getAmount() & 0xFF),msgSetSlot.item.getDurability());
    return new PEPacket[]{pkSetSlot};
  }
  if (message instanceof CloseWindowMessage) {
    CloseWindowMessage msgCloseWindow=(CloseWindowMessage)message;
    if (msgCloseWindow.id != 0) {
      this.cachedWindowType[msgCloseWindow.id & 0xFF]=-1;
    }
    WindowClosePacket pkCloseWindow=new WindowClosePacket();
    pkCloseWindow.windowID=(byte)(msgCloseWindow.id & 0xFF);
    return new PEPacket[]{pkCloseWindow};
  }
  return null;
}"
96736,"@SuppressWarnings(""String_Node_Str"") @Override public void init(final NamedList configuration){
  ResultSetLang.init();
  final NamedList configurationByQueryType=(NamedList)configuration.get(""String_Node_Str"");
  contentTypeChoiceStrategies.put(Query.QueryTypeSelect,contentTypeChoiceStrategy(Query.QueryTypeSelect,configurationByQueryType,selectContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeAsk,contentTypeChoiceStrategy(Query.QueryTypeAsk,configurationByQueryType,askContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeDescribe,contentTypeChoiceStrategy(Query.QueryTypeDescribe,configurationByQueryType,describeContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeConstruct,contentTypeChoiceStrategy(Query.QueryTypeConstruct,configurationByQueryType,constructContentTypes));
  contentTypeRewrites.put(WebContent.contentTypeResultsXML,""String_Node_Str"");
  writers.put(Query.QueryTypeAsk,new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      final Boolean askResult=response.getBooleanArg(Names.QUERY_RESULT);
      if (WebContent.contentTypeTextCSV.equals(contentType) || WebContent.contentTypeTextPlain.equals(contentType)) {
        ResultSetFormatter.outputAsCSV(askResult);
      }
 else       if (WebContent.contentTypeTextTSV.equals(contentType)) {
        ResultSetFormatter.outputAsTSV(askResult);
      }
 else       if (ResultSetLang.SPARQLResultSetXML.getHeaderString().equals(contentType)) {
        ResultSetFormatter.outputAsXML(askResult);
      }
 else       if (ResultSetLang.SPARQLResultSetJSON.getHeaderString().equals(contentType)) {
        ResultSetFormatter.outputAsJSON(askResult);
      }
    }
  }
);
  compositeWriters.put(""String_Node_Str"",new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType) throws IOException {
      final HybridXMLWriter xmlw=new HybridXMLWriter(writer,(SolrQueryRequest)response.get(Names.SOLR_REQUEST),(SolrQueryResponse)response.get(Names.SOLR_RESPONSE));
      xmlw.writeResponse();
    }
  }
);
  writers.put(Query.QueryTypeSelect,new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      ResultSetMgr.write(new WriterOutputStream(writer,CharacterSet.UTF_8),(ResultSet)response.get(Names.QUERY_RESULT),RDFLanguages.contentTypeToLang(contentType));
    }
  }
);
  final WriterStrategy modelResponseWriter=new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      RDFDataMgr.write(new WriterOutputStream(writer,CharacterSet.UTF_8),(Model)response.get(Names.QUERY_RESULT),RDFLanguages.contentTypeToLang(contentType));
    }
  }
;
  writers.put(Query.QueryTypeDescribe,modelResponseWriter);
  writers.put(Query.QueryTypeConstruct,modelResponseWriter);
}","@SuppressWarnings(""String_Node_Str"") @Override public void init(final NamedList configuration){
  ResultSetLang.init();
  final NamedList configurationByQueryType=(NamedList)configuration.get(""String_Node_Str"");
  contentTypeChoiceStrategies.put(Query.QueryTypeSelect,contentTypeChoiceStrategy(Query.QueryTypeSelect,configurationByQueryType,selectContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeAsk,contentTypeChoiceStrategy(Query.QueryTypeAsk,configurationByQueryType,askContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeDescribe,contentTypeChoiceStrategy(Query.QueryTypeDescribe,configurationByQueryType,describeContentTypes));
  contentTypeChoiceStrategies.put(Query.QueryTypeConstruct,contentTypeChoiceStrategy(Query.QueryTypeConstruct,configurationByQueryType,constructContentTypes));
  contentTypeRewrites.put(WebContent.contentTypeResultsXML,""String_Node_Str"");
  writers.put(Query.QueryTypeAsk,new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      final Boolean askResult=response.getBooleanArg(Names.QUERY_RESULT);
      if (WebContent.contentTypeTextCSV.equals(contentType) || WebContent.contentTypeTextPlain.equals(contentType)) {
        ResultSetFormatter.outputAsCSV(new WriterOutputStream(writer,CharacterSet.UTF_8),askResult);
      }
 else       if (WebContent.contentTypeTextTSV.equals(contentType)) {
        ResultSetFormatter.outputAsTSV(new WriterOutputStream(writer,CharacterSet.UTF_8),askResult);
      }
 else       if (ResultSetLang.SPARQLResultSetXML.getHeaderString().equals(contentType)) {
        ResultSetFormatter.outputAsXML(new WriterOutputStream(writer,CharacterSet.UTF_8),askResult);
      }
 else       if (ResultSetLang.SPARQLResultSetJSON.getHeaderString().equals(contentType)) {
        ResultSetFormatter.outputAsJSON(new WriterOutputStream(writer,CharacterSet.UTF_8),askResult);
      }
    }
  }
);
  compositeWriters.put(""String_Node_Str"",new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType) throws IOException {
      final HybridXMLWriter xmlw=new HybridXMLWriter(writer,(SolrQueryRequest)response.get(Names.SOLR_REQUEST),(SolrQueryResponse)response.get(Names.SOLR_RESPONSE));
      xmlw.writeResponse();
    }
  }
);
  writers.put(Query.QueryTypeSelect,new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      ResultSetMgr.write(new WriterOutputStream(writer,CharacterSet.UTF_8),(ResultSet)response.get(Names.QUERY_RESULT),RDFLanguages.contentTypeToLang(contentType));
    }
  }
);
  final WriterStrategy modelResponseWriter=new WriterStrategy(){
    @Override public void doWrite(    final NamedList response,    final Writer writer,    final String contentType){
      RDFDataMgr.write(new WriterOutputStream(writer,CharacterSet.UTF_8),(Model)response.get(Names.QUERY_RESULT),RDFLanguages.contentTypeToLang(contentType));
    }
  }
;
  writers.put(Query.QueryTypeDescribe,modelResponseWriter);
  writers.put(Query.QueryTypeConstruct,modelResponseWriter);
}"
96737,"private Path filePath(final String fileName){
  return Paths.get(workspaceDir(),projectName,fileName);
}","private Path filePath(final String fileName){
  return workspacePath().resolve(projectName).resolve(fileName);
}"
96738,"private void createJavaProjectIfNotExists(final String projectName){
  final Path projectFilePath=Paths.get(workspaceDir(),projectName,""String_Node_Str"");
  if (!Files.isRegularFile(projectFilePath,LinkOption.NOFOLLOW_LINKS)) {
    newJavaProject(projectName);
  }
}","private void createJavaProjectIfNotExists(final String projectName){
  final Path projectFilePath=workspacePath().resolve(projectName).resolve(""String_Node_Str"");
  if (!Files.isRegularFile(projectFilePath,LinkOption.NOFOLLOW_LINKS)) {
    newJavaProject(projectName);
  }
}"
96739,"GwtDisplayDevice(){
  canvas=Canvas.createIfSupported();
  if (canvas == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  canvas.setCoordinateSpaceWidth(800);
  canvas.setCoordinateSpaceHeight(600);
  RootPanel.get().add(canvas);
  canvas.setFocus(true);
  boolean webgl2=WebGL20.isSupported();
  if (!webgl2 && !WebGL10.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  context=webgl2 ? WebGL20.createContext(canvas) : WebGL10.createContext(canvas);
  if (!webgl2)   if (!OES_vertex_array_object.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  WebGL10.glViewport(0,0,800,600);
  WebGL10.glClearColor(0,0,0,1);
  WebGL10.glClear(WebGL10.GL_COLOR_BUFFER_BIT);
  StyleElement style=Document.get().createStyleElement();
  style.setInnerHTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Document.get().getHead().appendChild(style);
  canvas.addKeyDownHandler(event -> checkRequestFullscreen());
  canvas.addKeyUpHandler(event -> checkRequestFullscreen());
  canvas.addKeyPressHandler(event -> checkRequestFullscreen());
  canvas.addMouseWheelHandler(event -> checkRequestFullscreen());
  canvas.addMouseMoveHandler(event -> checkRequestFullscreen());
  canvas.addMouseDownHandler(event -> checkRequestFullscreen());
  canvas.addMouseUpHandler(event -> checkRequestFullscreen());
  canvas.addTouchStartHandler(event -> checkRequestFullscreen());
  canvas.addTouchEndHandler(event -> checkRequestFullscreen());
  canvas.addTouchMoveHandler(event -> checkRequestFullscreen());
  canvas.addTouchCancelHandler(event -> checkRequestFullscreen());
  canvas.addFocusHandler(event -> focus=true);
  canvas.addBlurHandler(event -> focus=false);
  hookFocusCallbacks(this);
}","GwtDisplayDevice(){
  canvas=Canvas.createIfSupported();
  if (canvas == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  canvas.setCoordinateSpaceWidth(800);
  canvas.setCoordinateSpaceHeight(600);
  RootPanel.get().add(canvas);
  canvas.setFocus(true);
  boolean webgl2=WebGL20.isSupported();
  if (!webgl2 && !WebGL10.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  context=webgl2 ? WebGL20.createContext(canvas) : WebGL10.createContext(canvas);
  if (!webgl2)   if (!OES_vertex_array_object.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  WebGL10.glViewport(0,0,800,600);
  WebGL10.glClearColor(0,0,0,1);
  WebGL10.glClear(WebGL10.GL_COLOR_BUFFER_BIT);
  StyleElement style=Document.get().createStyleElement();
  style.setInnerHTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Document.get().getHead().appendChild(style);
  canvas.addKeyDownHandler(event -> checkRequestFullscreen());
  canvas.addKeyUpHandler(event -> checkRequestFullscreen());
  canvas.addKeyPressHandler(event -> checkRequestFullscreen());
  canvas.addMouseWheelHandler(event -> checkRequestFullscreen());
  canvas.addMouseMoveHandler(event -> checkRequestFullscreen());
  canvas.addMouseDownHandler(event -> checkRequestFullscreen());
  canvas.addMouseUpHandler(event -> checkRequestFullscreen());
  canvas.addTouchStartHandler(event -> checkRequestFullscreen());
  canvas.addTouchEndHandler(event -> checkRequestFullscreen());
  canvas.addTouchMoveHandler(event -> checkRequestFullscreen());
  canvas.addTouchCancelHandler(event -> checkRequestFullscreen());
  canvas.addFocusHandler(event -> focus=true);
  canvas.addBlurHandler(event -> focus=false);
  hookFocusCallbacks(this);
}"
96740,"@Override public void savePreferences(String name,JSONObject preferences){
  fileWriter.write(JSON.write(preferences),FilePath.getExternalFile(System.getenv(""String_Node_Str"") + ""String_Node_Str"" + name),false);
}","@Override public void savePreferences(String name,JSONObject preferences){
  fileWriter.write(JSON.write(preferences),FilePath.getExternalFile(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + name),false);
}"
96741,"@Override public JSONObject getPreferences(String name){
  try {
    String json=new String(Files.readAllBytes(Paths.get(System.getenv(""String_Node_Str""),name)));
    return JSON.parse(json);
  }
 catch (  Exception e) {
    return new JSONObject();
  }
}","@Override public JSONObject getPreferences(String name){
  try {
    String json=new String(Files.readAllBytes(Paths.get(System.getProperty(""String_Node_Str""),name)));
    return JSON.parse(json);
  }
 catch (  Exception e) {
    return new JSONObject();
  }
}"
96742,"@Override public void readToALBuffer(AudioFormat format,DirectBuffer data,UniCallback<ALBuffer> onDecoded){
  if (!isSupported(format))   throw new SilenceException(""String_Node_Str"" + format);
  if (format == AudioFormat.WAV)   new Thread(() -> {
    WavReader reader=new WavReader(data);
    ALBuffer alBuffer=new ALBuffer();
    alBuffer.uploadData(new AndroidDirectBuffer(reader.data),reader.alFormat,reader.sampleRate);
    TaskManager.runOnUpdate(() -> onDecoded.invoke(alBuffer));
  }
).start();
 else   if (format == AudioFormat.OGG)   new Thread(() -> {
    OggReader reader=new OggReader(data);
    ALBuffer alBuffer=new ALBuffer();
    alBuffer.uploadData(new AndroidDirectBuffer(reader.getData()),reader.getFormat(),reader.getSampleRate());
    TaskManager.runOnUpdate(() -> onDecoded.invoke(alBuffer));
  }
).start();
}","@Override public void readToALBuffer(AudioFormat format,DirectBuffer data,UniCallback<ALBuffer> onDecoded,UniCallback<Throwable> onError){
  try {
    if (!isSupported(format))     throw new SilenceException(""String_Node_Str"" + format);
    if (format == AudioFormat.WAV)     new Thread(() -> {
      WavReader reader=new WavReader(data);
      ALBuffer alBuffer=new ALBuffer();
      alBuffer.uploadData(new AndroidDirectBuffer(reader.data),reader.alFormat,reader.sampleRate);
      TaskManager.runOnUpdate(() -> onDecoded.invoke(alBuffer));
    }
).start();
 else     if (format == AudioFormat.OGG)     new Thread(() -> {
      OggReader reader=new OggReader(data);
      ALBuffer alBuffer=new ALBuffer();
      alBuffer.uploadData(new AndroidDirectBuffer(reader.getData()),reader.getFormat(),reader.getSampleRate());
      TaskManager.runOnUpdate(() -> onDecoded.invoke(alBuffer));
    }
).start();
  }
 catch (  Throwable e) {
    onError.invoke(e);
  }
}"
96743,"@Override public void setIcon(FilePath filePath,SimpleCallback success){
}","@Override public void setIcon(FilePath filePath,SimpleCallback success,UniCallback<Throwable> error){
}"
96744,"@Override public void readTextFile(FilePath file,UniCallback<String> onComplete){
  new Thread(() -> {
    try (InputStream inputStream=((AndroidFilePath)file).getInputStream();BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
      StringBuilder stringBuilder=new StringBuilder();
      String line=null;
      while ((line=bufferedReader.readLine()) != null)       stringBuilder.append(line).append(""String_Node_Str"");
      TaskManager.runOnUpdate(() -> onComplete.invoke(stringBuilder.toString()));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}","@Override public void readTextFile(FilePath file,UniCallback<String> onComplete,UniCallback<Throwable> onError){
  new Thread(() -> {
    try (InputStream inputStream=((AndroidFilePath)file).getInputStream();BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
      StringBuilder stringBuilder=new StringBuilder();
      String line=null;
      while ((line=bufferedReader.readLine()) != null)       stringBuilder.append(line).append(""String_Node_Str"");
      TaskManager.runOnUpdate(() -> onComplete.invoke(stringBuilder.toString()));
    }
 catch (    Throwable e) {
      onError.invoke(e);
    }
  }
).start();
}"
96745,"@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete){
  new Thread(() -> {
    try {
      InputStream inputStream=((AndroidFilePath)file).getInputStream();
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[4096];
      while (true) {
        int n=inputStream.read(buffer);
        if (n < 0)         break;
        outputStream.write(buffer,0,n);
      }
      inputStream.close();
      byte[] bytes=outputStream.toByteArray();
      DirectBuffer directBuffer=new AndroidDirectBuffer(bytes.length);
      for (int i=0; i < bytes.length; i++)       directBuffer.writeByte(i,bytes[i]);
      TaskManager.runOnUpdate(() -> onComplete.invoke(directBuffer));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}","@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete,UniCallback<Throwable> onError){
  new Thread(() -> {
    try {
      InputStream inputStream=((AndroidFilePath)file).getInputStream();
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[4096];
      while (true) {
        int n=inputStream.read(buffer);
        if (n < 0)         break;
        outputStream.write(buffer,0,n);
      }
      inputStream.close();
      byte[] bytes=outputStream.toByteArray();
      DirectBuffer directBuffer=new AndroidDirectBuffer(bytes.length);
      for (int i=0; i < bytes.length; i++)       directBuffer.writeByte(i,bytes[i]);
      TaskManager.runOnUpdate(() -> onComplete.invoke(directBuffer));
    }
 catch (    Throwable e) {
      onError.invoke(e);
    }
  }
).start();
}"
96746,"@Override public void readImage(DirectBuffer memory,UniCallback<Image> uniCallback){
  new Thread(() -> {
    Bitmap bitmap=BitmapFactory.decodeStream(new DirectBufferInputStream(memory));
    if (bitmap == null)     throw new SilenceException(new IOException(""String_Node_Str""));
    Image image=new Image(bitmap.getWidth(),bitmap.getHeight());
    for (int x=0; x < image.getWidth(); x++)     for (int y=0; y < image.getHeight(); y++) {
      int pixel=bitmap.getPixel(x,y);
      float a=android.graphics.Color.alpha(pixel) / 255f;
      float r=android.graphics.Color.red(pixel) / 255f;
      float g=android.graphics.Color.green(pixel) / 255f;
      float b=android.graphics.Color.blue(pixel) / 255f;
      image.setPixel(x,y,new Color(r,g,b,a));
    }
    bitmap.recycle();
    bitmap=null;
    TaskManager.runOnUpdate(() -> uniCallback.invoke(image));
  }
).start();
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> uniCallback,UniCallback<Throwable> onError){
  new Thread(() -> {
    try {
      Bitmap bitmap=BitmapFactory.decodeStream(new DirectBufferInputStream(memory));
      if (bitmap == null)       throw new SilenceException(new IOException(""String_Node_Str""));
      Image image=new Image(bitmap.getWidth(),bitmap.getHeight());
      for (int x=0; x < image.getWidth(); x++)       for (int y=0; y < image.getHeight(); y++) {
        int pixel=bitmap.getPixel(x,y);
        float a=android.graphics.Color.alpha(pixel) / 255f;
        float r=android.graphics.Color.red(pixel) / 255f;
        float g=android.graphics.Color.green(pixel) / 255f;
        float b=android.graphics.Color.blue(pixel) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
      bitmap.recycle();
      bitmap=null;
      TaskManager.runOnUpdate(() -> uniCallback.invoke(image));
    }
 catch (    Throwable e) {
      onError.invoke(e);
    }
  }
).start();
}"
96747,"@Override public void readToALBuffer(AudioFormat format,DirectBuffer data,UniCallback<ALBuffer> onDecoded){
  if (!isSupported(format))   throw new SilenceException(""String_Node_Str"" + format + ""String_Node_Str"");
  AudioDecoder.decodeAudio(((ArrayBufferView)data.nativeBuffer()).buffer(),alBufferID -> onDecoded.invoke(new ALBuffer(alBufferID)),reason -> {
    throw new SilenceException(""String_Node_Str"" + reason);
  }
);
}","@Override public void readToALBuffer(AudioFormat format,DirectBuffer data,UniCallback<ALBuffer> onDecoded,UniCallback<Throwable> onError){
  try {
    if (!isSupported(format))     throw new SilenceException(""String_Node_Str"" + format + ""String_Node_Str"");
    AudioDecoder.decodeAudio(((ArrayBufferView)data.nativeBuffer()).buffer(),alBufferID -> onDecoded.invoke(new ALBuffer(alBufferID)),reason -> {
      throw new SilenceException(""String_Node_Str"" + reason);
    }
);
  }
 catch (  Throwable e) {
    onError.invoke(e);
  }
}"
96748,"@Override public void readTextFile(FilePath file,UniCallback<String> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.Default);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(request.getResponseText());
  }
);
  request.send();
}","@Override public void readTextFile(FilePath file,UniCallback<String> onComplete,UniCallback<Throwable> onError){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.Default);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE) {
      if (request.getStatus() == 200)       onComplete.invoke(request.getResponseText());
 else       onError.invoke(new SilenceException(""String_Node_Str"" + request.getStatusText()));
    }
  }
);
  request.send();
}"
96749,"@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.ArrayBuffer);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(new GwtDirectBuffer(request.getResponseArrayBuffer()));
  }
);
  request.send();
}","@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete,UniCallback<Throwable> onError){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.ArrayBuffer);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE) {
      if (request.getStatus() == 200)       onComplete.invoke(new GwtDirectBuffer(request.getResponseArrayBuffer()));
 else       onError.invoke(new SilenceException(""String_Node_Str"" + request.getStatusText()));
    }
  }
);
  request.send();
}"
96750,"@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete){
  getImage(((ArrayBufferView)memory.nativeBuffer()).buffer(),onComplete);
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete,UniCallback<Throwable> onError){
  getImage(((ArrayBufferView)memory.nativeBuffer()).buffer(),onComplete,e -> onError.invoke(new SilenceException(e)));
}"
96751,"private native void getImage(ArrayBuffer memory,UniCallback<Image> onComplete);","private native void getImage(ArrayBuffer memory,UniCallback<Image> onComplete,UniCallback<String> onError);"
96752,"private AABB getAABB(CollisionComponent3D e){
  AABB aabb;
  if (aabbMap.containsKey(e.id))   aabb=aabbMap.get(e.id);
 else {
    aabb=AABB.create(e);
    aabbMap.put(e.id,aabb);
  }
  Cuboid bounds=e.polyhedron.getBounds();
  aabb.min.set(bounds.getPosition()).subtract(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(bounds.getPosition()).add(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  return aabb;
}","private AABB getAABB(CollisionComponent3D e){
  AABB aabb;
  if (aabbMap.containsKey(e.id))   aabb=aabbMap.get(e.id);
 else {
    aabb=AABB.create(e);
    aabbMap.put(e.id,aabb);
  }
  Cuboid bounds=e.polyhedron.getBounds();
  aabb.min.set(bounds.position).subtract(bounds.width / 2,bounds.height / 2,bounds.thickness / 2);
  aabb.max.set(bounds.position).add(bounds.width / 2,bounds.height / 2,bounds.thickness / 2);
  return aabb;
}"
96753,"@Override public List<CollisionComponent3D> retrieve(Polyhedron bounds){
  retrieveList.clear();
  AABB aabb=new AABB();
  aabb.min.set(bounds.getPosition()).subtract(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(bounds.getPosition()).add(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  queryNode(aabb,root);
  return retrieveList;
}","@Override public List<CollisionComponent3D> retrieve(Cuboid bounds){
  retrieveList.clear();
  AABB aabb=new AABB();
  aabb.min.set(bounds.position).subtract(bounds.width / 2,bounds.height / 2,bounds.thickness / 2);
  aabb.max.set(bounds.position).add(bounds.width / 2,bounds.height / 2,bounds.thickness / 2);
  queryNode(aabb,root);
  return retrieveList;
}"
96754,"public static AABB create(CollisionComponent3D entity){
  Cuboid bounds=entity.polyhedron.getBounds();
  return new AABB(bounds.getPosition().subtract(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2),bounds.getWidth(),bounds.getHeight(),bounds.getThickness());
}","public static AABB create(CollisionComponent3D entity){
  Cuboid bounds=entity.polyhedron.getBounds();
  return new AABB(bounds.position.subtract(bounds.width / 2,bounds.height / 2,bounds.thickness / 2),bounds.width,bounds.height,bounds.thickness);
}"
96755,List<CollisionComponent3D> retrieve(Polyhedron polyhedron);,"default List<CollisionComponent3D> retrieve(Polyhedron polyhedron){
  return retrieve(polyhedron.getBounds());
}"
96756,"public void rotate(float angle,float originX,float originY){
  rotation+=angle;
  if (angle == 0 || this instanceof Circle)   return;
  for (  Vector2 vertex : vertices)   vertex.subtract(originX,originY).rotate(angle).add(originX,originY);
}","public void rotate(float angle,float originX,float originY){
  rotation+=angle;
  if (angle == 0)   return;
  for (  Vector2 vertex : vertices)   vertex.subtract(originX,originY).rotate(angle).add(originX,originY);
}"
96757,"public void render(Sprite sprite,Transform transform,Color tint,float opacity){
  Texture texture=sprite.getCurrentFrame();
  if (currentTexture == null || texture.getID() != currentTexture.getID()) {
    flush();
    texture.bind(0);
    program.setUniform(""String_Node_Str"",0);
    currentTexture=texture;
  }
  tempCol.set(tint).a*=opacity;
  final float tw=texture.getWidth() / 2;
  final float th=texture.getHeight() / 2;
  renderer.flushOnOverflow(6);
  renderer.vertex(tempVec.set(-1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
}","public void render(Sprite sprite,Transform transform,Color tint,float opacity){
  Texture texture=sprite.getCurrentFrame();
  if (currentTexture == null || texture.getID() != currentTexture.getID()) {
    flush();
    texture.bind(0);
    program.setUniform(""String_Node_Str"",0);
  }
  currentTexture=texture;
  tempCol.set(tint).a*=opacity;
  final float tw=texture.getWidth() / 2;
  final float th=texture.getHeight() / 2;
  renderer.flushOnOverflow(6);
  renderer.vertex(tempVec.set(-1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
}"
96758,"private void updateSources(float deltaTime){
  Iterator<PlayingSource> iterator=playingSources.keySet().iterator();
  while (iterator.hasNext()) {
    PlayingSource playingSource=iterator.next();
    ALSource source=playingSource.alSource;
    AudioSource audioSource=playingSources.get(playingSource);
    if (source.getState() != ALSource.State.PLAYING) {
      source.attachBuffer(null);
      iterator.remove();
      sourcesPool.push(source);
      playingSourcesPool.push(playingSource);
      continue;
    }
    if (audioSource.updated) {
      source.pause();
      source.setParameter(AL_POSITION,audioSource.position);
      source.setParameter(AL_VELOCITY,audioSource.velocity);
      source.setParameter(AL_DIRECTION,audioSource.direction);
      audioSource.updated=false;
      source.play();
    }
  }
}","private void updateSources(float deltaTime){
  Iterator<PlayingSource> iterator=playingSources.keySet().iterator();
  while (iterator.hasNext()) {
    PlayingSource playingSource=iterator.next();
    ALSource source=playingSource.alSource;
    AudioSource audioSource=playingSources.get(playingSource);
    ALSource.State state=source.getState();
    if (state != ALSource.State.PLAYING && state != ALSource.State.LOOPING) {
      source.attachBuffer(null);
      iterator.remove();
      sourcesPool.push(source);
      playingSourcesPool.push(playingSource);
      continue;
    }
    if (audioSource.updated) {
      source.pause();
      source.setParameter(AL_POSITION,audioSource.position);
      source.setParameter(AL_VELOCITY,audioSource.velocity);
      source.setParameter(AL_DIRECTION,audioSource.direction);
      audioSource.updated=false;
      source.play();
    }
  }
}"
96759,"@Override public void setIcon(FilePath filePath,SimpleCallback success){
}","@Override public void setIcon(FilePath filePath){
}"
96760,"@Override public boolean exists(){
  try {
    return getInputStream() != null;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","@Override public boolean exists(){
  try {
    AssetFileDescriptor desc=assetManager.openFd(path);
    desc.close();
  }
 catch (  Exception e) {
    return true;
  }
  return false;
}"
96761,"@Override public boolean isDirectory(){
  return !isFile();
}","@Override public boolean isDirectory(){
  return exists;
}"
96762,"public void end(){
  renderer.end();
}","public void end(){
  renderer.end();
  currentTexture=null;
}"
96763,"public void begin(){
  renderer.begin(Primitive.TRIANGLES);
}","public void begin(){
  program.use();
  program.applyToRenderer(renderer);
  renderer.begin(Primitive.TRIANGLES);
}"
96764,"public void render(Sprite sprite,Transform transform,Color tint,float opacity){
  Texture texture=sprite.getCurrentFrame();
  if (currentTexture == null || texture.getID() != currentTexture.getID()) {
    flush();
    texture.bind(0);
    program.setUniform(""String_Node_Str"",0);
    currentTexture=texture;
  }
  tempCol.set(tint).a*=opacity;
  final float tw=texture.getWidth() / 2;
  final float th=texture.getHeight() / 2;
  renderer.vertex(tempVec.set(-1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
}","public void render(Sprite sprite,Transform transform,Color tint,float opacity){
  Texture texture=sprite.getCurrentFrame();
  if (currentTexture == null || texture.getID() != currentTexture.getID()) {
    flush();
    texture.bind(0);
    program.setUniform(""String_Node_Str"",0);
    currentTexture=texture;
  }
  tempCol.set(tint).a*=opacity;
  final float tw=texture.getWidth() / 2;
  final float th=texture.getHeight() / 2;
  renderer.flushOnOverflow(6);
  renderer.vertex(tempVec.set(-1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,-1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMinV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMaxU(),currentTexture.getMaxV());
  renderer.color(tempCol);
  renderer.vertex(tempVec.set(-1,1,0).scale(tw,th,0).multiply(transform.matrix));
  renderer.texCoord(currentTexture.getMinU(),currentTexture.getMaxV());
  renderer.color(tempCol);
}"
96765,"public AndroidDisplayDevice(){
  this.startTime=SystemClock.elapsedRealtimeNanos();
  this.activity=AndroidLauncher.instance;
  this.surfaceView=activity.surfaceView;
}","public AndroidDisplayDevice(){
  this.startTime=SystemClock.elapsedRealtimeNanos();
  this.activity=AndroidLauncher.instance;
  this.surfaceView=activity.surfaceView;
  setSize(800,600);
}"
96766,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  instance=this;
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  surfaceView=new GLSurfaceView(this);
  surfaceView.setEGLContextClientVersion(3);
  surfaceView.setPreserveEGLContextOnPause(true);
  surfaceView.setRenderer(renderer=new AndroidWindow(this::launchGame));
  setContentView(surfaceView);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  instance=this;
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  surfaceView=new GLSurfaceView(this);
  surfaceView.setEGLContextClientVersion(3);
  surfaceView.setPreserveEGLContextOnPause(true);
  surfaceView.setRenderer(renderer=new AndroidWindow(this::launchGame));
  setContentView(surfaceView);
}"
96767,"private boolean onTouch(View v,MotionEvent e){
  final int action=e.getActionMasked();
switch (action) {
case MotionEvent.ACTION_DOWN:
    surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,true,e.getX(),e.getY()));
  break;
case MotionEvent.ACTION_UP:
surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,false,e.getX(),e.getY()));
break;
case MotionEvent.ACTION_POINTER_DOWN:
case MotionEvent.ACTION_POINTER_UP:
{
final int index=e.getActionIndex();
final int finger=index + 1;
if (finger < FINGER_1 || finger > FINGER_9) break;
final boolean isDown=action == MotionEvent.ACTION_POINTER_DOWN;
surfaceView.queueEvent(() -> postTouchEvent(finger,isDown,e.getX(),e.getY()));
}
break;
case MotionEvent.ACTION_MOVE:
for (int i=0; i < e.getPointerCount(); i++) {
final int finger=i + 1;
if (finger < FINGER_0 || finger > FINGER_9) break;
surfaceView.queueEvent(() -> postTouchEvent(finger,true,e.getX(finger - 1),e.getY(finger - 1)));
}
for (int i=e.getPointerCount(); i < FINGER_9; i++) {
final int finger=i + 1;
surfaceView.queueEvent(() -> postTouchEvent(finger,false,0,0));
}
break;
}
return true;
}","private boolean onTouch(View v,MotionEvent e){
  final int action=e.getActionMasked();
switch (action) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_UP:
{
      final boolean down=action == ACTION_DOWN;
      final float x=e.getX();
      final float y=e.getY();
      surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,down,x,y));
      break;
    }
case MotionEvent.ACTION_POINTER_DOWN:
case MotionEvent.ACTION_POINTER_UP:
{
    final int index=e.getActionIndex();
    final int finger=index + 1;
    if (finger < FINGER_1 || finger > FINGER_9)     break;
    final float x=e.getX();
    final float y=e.getY();
    final boolean isDown=action == MotionEvent.ACTION_POINTER_DOWN;
    surfaceView.queueEvent(() -> postTouchEvent(finger,isDown,x,y));
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  for (int i=0; i < e.getPointerCount(); i++) {
    final int finger=i + 1;
    if (finger < FINGER_0 || finger > FINGER_9)     break;
    final float x=e.getX(i);
    final float y=e.getY(i);
    surfaceView.queueEvent(() -> postTouchEvent(finger,true,x,y));
  }
  for (int i=e.getPointerCount(); i < FINGER_9; i++) {
    final int finger=i + 1;
    surfaceView.queueEvent(() -> postTouchEvent(finger,false,0,0));
  }
  break;
}
}
return true;
}"
96768,"@Override public void glClear(int flags){
  IGraphicsDevice.super.glClear(flags);
  GLES30.glClear(flags);
}","@Override public void glClear(int flags){
  Data.renderCallsThisFrame=0;
  GLES30.glClear(flags);
}"
96769,"@Override public void glDrawArrays(int primitive,int offset,int vertexCount){
  IGraphicsDevice.super.glDrawArrays(primitive,offset,vertexCount);
  GLES30.glDrawArrays(primitive,offset,vertexCount);
}","@Override public void glDrawArrays(int primitive,int offset,int vertexCount){
  Data.renderCallsThisFrame++;
  Data.totalRenderCalls++;
  GLES30.glDrawArrays(primitive,offset,vertexCount);
}"
96770,"@Override public void glDrawElements(int primitive,int vertexCount,int type,int offset){
  IGraphicsDevice.super.glDrawElements(primitive,vertexCount,type,offset);
  GLES30.glDrawElements(primitive,vertexCount,type,offset);
}","@Override public void glDrawElements(int primitive,int vertexCount,int type,int offset){
  Data.renderCallsThisFrame++;
  Data.totalRenderCalls++;
  GLES30.glDrawElements(primitive,vertexCount,type,offset);
}"
96771,"public void onFocusLost(){
  pausedSources.clear();
  for (  int source : sources) {
    if (AL.alIsSource(source) != 0) {
      pausedSources.add(source);
      alSourcePause(source);
    }
  }
}","public void onFocusLost(){
  pausedSources.clear();
  for (  int source : sources) {
    AL.alGetSourcei(source,AL_SOURCE_STATE,temp);
    if (temp.get(0) == AL_PLAYING || temp.get(0) == AL_LOOPING) {
      pausedSources.add(source);
      alSourcePause(source);
    }
  }
}"
96772,"@Override public void readImage(DirectBuffer memory,UniCallback<Image> uniCallback){
  new Thread(() -> {
    Bitmap bitmap=BitmapFactory.decodeStream(new DirectBufferInputStream(memory));
    if (bitmap == null)     throw new SilenceException(new IOException(""String_Node_Str""));
    Image image=new Image(bitmap.getWidth(),bitmap.getHeight());
    for (int x=0; x < image.getWidth(); x++)     for (int y=0; y < image.getHeight(); y++)     image.setPixel(x,y,new Color(bitmap.getPixel(x,y)));
    bitmap.recycle();
    bitmap=null;
    TaskManager.runOnUpdate(() -> uniCallback.invoke(image));
  }
).start();
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> uniCallback){
  new Thread(() -> {
    Bitmap bitmap=BitmapFactory.decodeStream(new DirectBufferInputStream(memory));
    if (bitmap == null)     throw new SilenceException(new IOException(""String_Node_Str""));
    Image image=new Image(bitmap.getWidth(),bitmap.getHeight());
    for (int x=0; x < image.getWidth(); x++)     for (int y=0; y < image.getHeight(); y++) {
      int rgba=bitmap.getPixel(x,y);
      float r=((rgba & 0x00FF0000) >> 16) / 255f;
      float g=((rgba & 0x0000FF00) >> 8) / 255f;
      float b=(rgba & 0x000000FF) / 255f;
      float a=((rgba & 0xFF000000) >> 24) / 255f;
      image.setPixel(x,y,new Color(r,g,b,a));
    }
    bitmap.recycle();
    bitmap=null;
    TaskManager.runOnUpdate(() -> uniCallback.invoke(image));
  }
).start();
}"
96773,"private static void jsLoadedCallback(ImageData pixels,int width,int height,int oWidth,int oHeight,UniCallback<Image> onComplete){
  Image image=new Image(width,height,oWidth,oHeight);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,1 - (pixels.getAlphaAt(x,y) / 255f)));
  }
  onComplete.invoke(image);
}","private static void jsLoadedCallback(ImageData pixels,int width,int height,int oWidth,int oHeight,UniCallback<Image> onComplete){
  Image image=new Image(width,height,oWidth,oHeight);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,pixels.getAlphaAt(x,y) / 255f));
  }
  onComplete.invoke(image);
}"
96774,"@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    for (int y=0; y < image.getHeight(); y++) {
      for (int x=0; x < image.getWidth(); x++) {
        int start=4 * (y * image.getWidth() + x);
        float r=(imageBuffer.get(start) & 0xff) / 255f;
        float g=(imageBuffer.get(start + 1) & 0xff) / 255f;
        float b=(imageBuffer.get(start + 2) & 0xff) / 255f;
        float a=1 - (imageBuffer.get(start + 3) & 0xff) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    TaskManager.runOnUpdate(() -> onComplete.invoke(image));
  }
).start();
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    for (int y=0; y < image.getHeight(); y++) {
      for (int x=0; x < image.getWidth(); x++) {
        int start=4 * (y * image.getWidth() + x);
        float r=(imageBuffer.get(start) & 0xff) / 255f;
        float g=(imageBuffer.get(start + 1) & 0xff) / 255f;
        float b=(imageBuffer.get(start + 2) & 0xff) / 255f;
        float a=(imageBuffer.get(start + 3) & 0xff) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    TaskManager.runOnUpdate(() -> onComplete.invoke(image));
  }
).start();
}"
96775,"private boolean onTouch(View v,MotionEvent e){
  final int action=e.getActionMasked();
switch (action) {
case MotionEvent.ACTION_DOWN:
    surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,true,e.getX(),e.getY()));
  break;
case MotionEvent.ACTION_UP:
surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,false,e.getX(),e.getY()));
break;
case MotionEvent.ACTION_POINTER_DOWN:
case MotionEvent.ACTION_POINTER_UP:
{
final int index=e.getActionIndex();
final int finger=index + 1;
if (finger < FINGER_1 || finger > FINGER_9) break;
final boolean isDown=action == MotionEvent.ACTION_POINTER_DOWN;
surfaceView.queueEvent(() -> postTouchEvent(finger,isDown,e.getX(),e.getY()));
}
break;
case MotionEvent.ACTION_MOVE:
for (int i=0; i < e.getPointerCount(); i++) {
final int finger=i + 1;
if (finger < FINGER_1 || finger > FINGER_9) break;
surfaceView.queueEvent(() -> postTouchEvent(finger,true,e.getX(finger - 1),e.getY(finger - 1)));
}
for (int i=e.getPointerCount(); i < FINGER_9; i++) {
final int finger=i + 1;
surfaceView.queueEvent(() -> postTouchEvent(finger,false,0,0));
}
break;
}
return true;
}","private boolean onTouch(View v,MotionEvent e){
  final int action=e.getActionMasked();
switch (action) {
case MotionEvent.ACTION_DOWN:
    surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,true,e.getX(),e.getY()));
  break;
case MotionEvent.ACTION_UP:
surfaceView.queueEvent(() -> postTouchEvent(FINGER_0,false,e.getX(),e.getY()));
break;
case MotionEvent.ACTION_POINTER_DOWN:
case MotionEvent.ACTION_POINTER_UP:
{
final int index=e.getActionIndex();
final int finger=index + 1;
if (finger < FINGER_1 || finger > FINGER_9) break;
final boolean isDown=action == MotionEvent.ACTION_POINTER_DOWN;
surfaceView.queueEvent(() -> postTouchEvent(finger,isDown,e.getX(),e.getY()));
}
break;
case MotionEvent.ACTION_MOVE:
for (int i=0; i < e.getPointerCount(); i++) {
final int finger=i + 1;
if (finger < FINGER_0 || finger > FINGER_9) break;
surfaceView.queueEvent(() -> postTouchEvent(finger,true,e.getX(finger - 1),e.getY(finger - 1)));
}
for (int i=e.getPointerCount(); i < FINGER_9; i++) {
final int finger=i + 1;
surfaceView.queueEvent(() -> postTouchEvent(finger,false,0,0));
}
break;
}
return true;
}"
96776,"@Override public void readTextFile(FilePath file,OnComplete<String> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.Default);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(request.getResponseText());
  }
);
  request.send();
}","@Override public void readTextFile(FilePath file,UniCallback<String> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.Default);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(request.getResponseText());
  }
);
  request.send();
}"
96777,"@Override public void readBinaryFile(FilePath file,OnComplete<DirectBuffer> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.ArrayBuffer);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(new GwtDirectBuffer(request.getResponseArrayBuffer()));
  }
);
  request.send();
}","@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete){
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",file.getAbsolutePath());
  request.setResponseType(XMLHttpRequest.ResponseType.ArrayBuffer);
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     onComplete.invoke(new GwtDirectBuffer(request.getResponseArrayBuffer()));
  }
);
  request.send();
}"
96778,"private static void jsLoadedCallback(ImageData pixels,int width,int height,int oWidth,int oHeight,OnComplete onComplete){
  Image image=new Image(width,height,oWidth,oHeight);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,1 - (pixels.getAlphaAt(x,y) / 255f)));
  }
  onComplete.invoke(image);
}","private static void jsLoadedCallback(ImageData pixels,int width,int height,int oWidth,int oHeight,UniCallback<Image> onComplete){
  Image image=new Image(width,height,oWidth,oHeight);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,1 - (pixels.getAlphaAt(x,y) / 255f)));
  }
  onComplete.invoke(image);
}"
96779,"@Override public void readImage(DirectBuffer memory,OnComplete onComplete){
  getImage(((ArrayBufferView)memory.nativeBuffer()).buffer(),onComplete);
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete){
  getImage(((ArrayBufferView)memory.nativeBuffer()).buffer(),onComplete);
}"
96780,"private native void getImage(ArrayBuffer memory,OnComplete onComplete);","private native void getImage(ArrayBuffer memory,UniCallback<Image> onComplete);"
96781,"@Override public void readTextFile(FilePath file,OnComplete<String> onComplete){
  new Thread(() -> {
    try (InputStream inputStream=((LwjglFilePath)file).getInputStream();BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
      StringBuilder stringBuilder=new StringBuilder();
      String line=null;
      while ((line=bufferedReader.readLine()) != null)       stringBuilder.append(line).append(""String_Node_Str"");
      TaskManager.runOnUpdate(() -> onComplete.invoke(stringBuilder.toString()));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}","@Override public void readTextFile(FilePath file,UniCallback<String> onComplete){
  new Thread(() -> {
    try (InputStream inputStream=((LwjglFilePath)file).getInputStream();BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
      StringBuilder stringBuilder=new StringBuilder();
      String line=null;
      while ((line=bufferedReader.readLine()) != null)       stringBuilder.append(line).append(""String_Node_Str"");
      TaskManager.runOnUpdate(() -> onComplete.invoke(stringBuilder.toString()));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}"
96782,"@Override public void readBinaryFile(FilePath file,OnComplete<DirectBuffer> onComplete){
  new Thread(() -> {
    try {
      InputStream inputStream=((LwjglFilePath)file).getInputStream();
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[4096];
      while (true) {
        int n=inputStream.read(buffer);
        if (n < 0)         break;
        outputStream.write(buffer,0,n);
      }
      inputStream.close();
      byte[] bytes=outputStream.toByteArray();
      DirectBuffer directBuffer=new LwjglDirectBuffer(bytes.length);
      for (int i=0; i < bytes.length; i++)       directBuffer.writeByte(i,bytes[i]);
      TaskManager.runOnUpdate(() -> onComplete.invoke(directBuffer));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}","@Override public void readBinaryFile(FilePath file,UniCallback<DirectBuffer> onComplete){
  new Thread(() -> {
    try {
      InputStream inputStream=((LwjglFilePath)file).getInputStream();
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[4096];
      while (true) {
        int n=inputStream.read(buffer);
        if (n < 0)         break;
        outputStream.write(buffer,0,n);
      }
      inputStream.close();
      byte[] bytes=outputStream.toByteArray();
      DirectBuffer directBuffer=new LwjglDirectBuffer(bytes.length);
      for (int i=0; i < bytes.length; i++)       directBuffer.writeByte(i,bytes[i]);
      TaskManager.runOnUpdate(() -> onComplete.invoke(directBuffer));
    }
 catch (    Exception e) {
      SilenceEngine.log.getRootLogger().error(e);
    }
  }
).start();
}"
96783,"@Override public void readImage(DirectBuffer memory,OnComplete onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    for (int y=0; y < image.getHeight(); y++) {
      for (int x=0; x < image.getWidth(); x++) {
        int start=4 * (y * image.getWidth() + x);
        float r=(imageBuffer.get(start) & 0xff) / 255f;
        float g=(imageBuffer.get(start + 1) & 0xff) / 255f;
        float b=(imageBuffer.get(start + 2) & 0xff) / 255f;
        float a=1 - (imageBuffer.get(start + 3) & 0xff) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    TaskManager.runOnUpdate(() -> onComplete.invoke(image));
  }
).start();
}","@Override public void readImage(DirectBuffer memory,UniCallback<Image> onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    for (int y=0; y < image.getHeight(); y++) {
      for (int x=0; x < image.getWidth(); x++) {
        int start=4 * (y * image.getWidth() + x);
        float r=(imageBuffer.get(start) & 0xff) / 255f;
        float g=(imageBuffer.get(start + 1) & 0xff) / 255f;
        float b=(imageBuffer.get(start + 2) & 0xff) / 255f;
        float a=1 - (imageBuffer.get(start + 3) & 0xff) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    TaskManager.runOnUpdate(() -> onComplete.invoke(image));
  }
).start();
}"
96784,"private static void update(float deltaTime){
  while (!updateTasks.isEmpty()) {
    Task task;
    if ((task=updateTasks.poll()) != null)     task.perform();
  }
}","private static void update(float deltaTime){
  while (!updateTasks.isEmpty()) {
    SimpleCallback task;
    if ((task=updateTasks.poll()) != null)     task.invoke();
  }
}"
96785,"public static void runOnRender(Task task){
  renderTasks.add(task);
  checkInitialized();
}","public static void runOnRender(SimpleCallback task){
  renderTasks.add(task);
  checkInitialized();
}"
96786,"public static void runOnUpdate(Task task){
  updateTasks.add(task);
  checkInitialized();
}","public static void runOnUpdate(SimpleCallback task){
  updateTasks.add(task);
  checkInitialized();
}"
96787,"private static void render(float delta){
  while (!renderTasks.isEmpty()) {
    Task task;
    if ((task=renderTasks.poll()) != null)     task.perform();
  }
}","private static void render(float delta){
  while (!renderTasks.isEmpty()) {
    SimpleCallback task;
    if ((task=renderTasks.poll()) != null)     task.invoke();
  }
}"
96788,"@Override public int read() throws IOException {
  if (index >= directBuffer.sizeBytes())   return -1;
  return directBuffer.readByte(index++);
}","@Override public int read() throws IOException {
  if (index >= directBuffer.sizeBytes())   return -1;
  return directBuffer.readByte(index++) & 0xFF;
}"
96789,"/** 
 * Method borrowed from LWJGL 3 demos, this converts stereo and mono data samples to the internal format of OpenAL.
 * @param samples The ByteBuffer of audio samples
 * @param stereo  Whether to convert to stereo audio
 * @return The ByteBuffer containing fixed samples.
 */
static ByteBuffer convertAudioBytes(ByteBuffer samples,boolean stereo){
  ByteBuffer dest=ByteBuffer.allocateDirect(samples.capacity());
  dest.order(ByteOrder.nativeOrder());
  if (stereo) {
    ShortBuffer dest_short=dest.asShortBuffer();
    ShortBuffer src_short=samples.asShortBuffer();
    while (src_short.hasRemaining())     dest_short.put(src_short.get());
  }
 else {
    while (samples.hasRemaining())     dest.put(samples.get());
  }
  dest.rewind();
  return dest;
}","/** 
 * Method borrowed from LWJGL 3 demos, this converts stereo and mono data samples to the internal format of OpenAL.
 * @param samples        The ByteBuffer of audio samples
 * @param twoByteSamples Whether the samples are shorts or bytes
 * @return The ByteBuffer containing fixed samples.
 */
private static ByteBuffer convertAudioBytes(ByteBuffer samples,boolean twoByteSamples){
  ByteBuffer dest=ByteBuffer.allocateDirect(samples.capacity());
  dest.order(ByteOrder.nativeOrder());
  if (twoByteSamples) {
    ShortBuffer dest_short=dest.asShortBuffer();
    ShortBuffer src_short=samples.asShortBuffer();
    while (src_short.hasRemaining())     dest_short.put(src_short.get());
  }
 else {
    while (samples.hasRemaining())     dest.put(samples.get());
  }
  dest.rewind();
  return dest;
}"
96790,"public void play(Sound sound,AudioSource source,boolean loop){
  ALSource alSource=sourcesPool.pop();
  source.update();
  alSource.attachBuffer(sound.buffer);
  alSource.setParameter(AL_POSITION,source.position);
  alSource.setParameter(AL_VELOCITY,source.velocity);
  alSource.setParameter(AL_DIRECTION,source.direction);
  alSource.setParameter(AL_LOOPING,loop);
  alSource.play();
  PlayingSource playingSource=playingSourcesPool.pop();
  playingSource.sound=sound;
  playingSource.alSource=alSource;
  playingSources.put(playingSource,source);
}","public void play(Sound sound,AudioSource source,boolean loop){
  ALSource alSource=sourcesPool.pop();
  source.update();
  alSource.attachBuffer(sound.buffer);
  alSource.setParameter(AL_POSITION,source.position);
  alSource.setParameter(AL_VELOCITY,source.velocity);
  alSource.setParameter(AL_DIRECTION,source.direction);
  alSource.setParameter(AL_LOOPING,loop);
  source.updated=false;
  alSource.play();
  PlayingSource playingSource=playingSourcesPool.pop();
  playingSource.sound=sound;
  playingSource.alSource=alSource;
  playingSources.put(playingSource,source);
}"
96791,"private void updateSources(float deltaTime){
  for (  PlayingSource playingSource : playingSources.keySet()) {
    ALSource source=playingSource.alSource;
    AudioSource audioSource=playingSources.get(playingSource);
    if (audioSource.updated) {
      source.setParameter(AL_POSITION,audioSource.position);
      source.setParameter(AL_VELOCITY,audioSource.velocity);
      source.setParameter(AL_DIRECTION,audioSource.direction);
      audioSource.updated=false;
    }
    if (source.getState() != ALSource.State.PLAYING) {
      playingSources.remove(playingSource);
      sourcesPool.push(source);
      playingSourcesPool.push(playingSource);
    }
  }
}","private void updateSources(float deltaTime){
  Iterator<PlayingSource> iterator=playingSources.keySet().iterator();
  while (iterator.hasNext()) {
    PlayingSource playingSource=iterator.next();
    ALSource source=playingSource.alSource;
    AudioSource audioSource=playingSources.get(playingSource);
    if (source.getState() != ALSource.State.PLAYING) {
      source.attachBuffer(null);
      iterator.remove();
      sourcesPool.push(source);
      playingSourcesPool.push(playingSource);
      continue;
    }
    if (audioSource.updated) {
      source.pause();
      source.setParameter(AL_POSITION,audioSource.position);
      source.setParameter(AL_VELOCITY,audioSource.velocity);
      source.setParameter(AL_DIRECTION,audioSource.direction);
      audioSource.updated=false;
      source.play();
    }
  }
}"
96792,"/** 
 * Attaches an ALBuffer to this source. The buffer contains the audio samples that this source should play.
 * @param buffer The ALBuffer containing the sound samples to be played.
 * @throws ALException.InvalidValue If the buffer is already disposed.
 */
public void attachBuffer(ALBuffer buffer){
  setParameter(AL_BUFFER,buffer.getID());
}","/** 
 * Attaches an ALBuffer to this source. The buffer contains the audio samples that this source should play.
 * @param buffer The ALBuffer containing the sound samples to be played.
 * @throws ALException.InvalidValue If the buffer is already disposed.
 */
public void attachBuffer(ALBuffer buffer){
  setParameter(AL_BUFFER,buffer == null ? 0 : buffer.getID());
}"
96793,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void processHandlers(){
  while (!eventHandlersQueue.isEmpty()) {
    EventHandlerQueueObject object=eventHandlersQueue.remove();
switch (object.eventType) {
case UPDATE:
      if (object.action == EventQueueAction.ADD_HANDLER)       updateEventHandlers.add((IUpdateEventHandler)object.handler);
 else       updateEventHandlers.remove(object.handler);
    break;
case RENDER:
  if (object.action == EventQueueAction.ADD_HANDLER)   renderEventHandlers.add((IRenderEventHandler)object.handler);
 else   renderEventHandlers.remove(object.handler);
break;
case RESIZE:
if (object.action == EventQueueAction.ADD_HANDLER) resizeEventHandlers.add((IResizeEventHandler)object.handler);
 else resizeEventHandlers.remove(object.handler);
break;
case DISPOSE:
if (object.action == EventQueueAction.ADD_HANDLER) disposeEventHandlers.add((IDisposeEventHandler)object.handler);
 else disposeEventHandlers.remove(object.handler);
break;
}
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void processHandlers(){
  while (!eventHandlersQueue.isEmpty()) {
    EventHandlerQueueObject object=eventHandlersQueue.poll();
    if (object == null)     break;
switch (object.eventType) {
case UPDATE:
      if (object.action == EventQueueAction.ADD_HANDLER)       updateEventHandlers.add((IUpdateEventHandler)object.handler);
 else       updateEventHandlers.remove(object.handler);
    break;
case RENDER:
  if (object.action == EventQueueAction.ADD_HANDLER)   renderEventHandlers.add((IRenderEventHandler)object.handler);
 else   renderEventHandlers.remove(object.handler);
break;
case RESIZE:
if (object.action == EventQueueAction.ADD_HANDLER) resizeEventHandlers.add((IResizeEventHandler)object.handler);
 else resizeEventHandlers.remove(object.handler);
break;
case DISPOSE:
if (object.action == EventQueueAction.ADD_HANDLER) disposeEventHandlers.add((IDisposeEventHandler)object.handler);
 else disposeEventHandlers.remove(object.handler);
break;
}
}
}"
96794,"@Override public void performLoopFrame(){
  float currTime=(float)TimeUtils.currentTime();
  float elapsedTime=currTime - prevTime;
  prevTime=currTime;
  SilenceEngine.eventManager.raiseUpdateEvent(elapsedTime);
  GLContext.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  SilenceEngine.eventManager.raiseRenderEvent(elapsedTime);
}","@Override public void performLoopFrame(){
  if (prevTime == 0)   prevTime=(int)TimeUtils.currentTime();
  float currTime=(float)TimeUtils.currentTime();
  float elapsedTime=currTime - prevTime;
  prevTime=currTime;
  SilenceEngine.eventManager.raiseUpdateEvent(elapsedTime);
  GLContext.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  SilenceEngine.eventManager.raiseRenderEvent(elapsedTime);
}"
96795,"public static void start(){
  SilenceEngine.log=new GwtLogDevice();
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
}","public static void start(){
  SilenceEngine.log=new GwtLogDevice();
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
  Game.INSTANCE.init();
  AnimationScheduler.get().requestAnimationFrame(GwtRuntime::frameLoop);
}"
96796,"@Override public void setSize(int width,int height){
  canvas.setCoordinateSpaceWidth(width);
  canvas.setCoordinateSpaceHeight(height);
}","@Override public void setSize(int width,int height){
  canvas.setCoordinateSpaceWidth(width);
  canvas.setCoordinateSpaceHeight(height);
  Game.INSTANCE.resized();
}"
96797,"@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen)   context.requestFullscreen();
 else   WebGLContext.exitFullscreen();
}","@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen)   context.requestFullscreen();
 else   WebGLContext.exitFullscreen();
  Game.INSTANCE.resized();
}"
96798,"/** 
 * Constructs an instance of FilePath by taking a path string, and a type.
 * @param path The path string of the path
 * @param type The type of the file, one of {@link Type#EXTERNAL} or {@link Type#RESOURCE}.
 */
protected GwtFilePath(String path,Type type){
  super(path,type);
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",getPath());
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     size=Integer.parseInt(request.getResponseHeader(""String_Node_Str""));
  }
);
  request.send();
  exists=request.getStatus() != 404;
}","/** 
 * Constructs an instance of FilePath by taking a path string, and a type.
 * @param path The path string of the path
 * @param type The type of the file, one of {@link Type#EXTERNAL} or {@link Type#RESOURCE}.
 */
protected GwtFilePath(String path,Type type){
  super(path,type);
  XMLHttpRequest request=XMLHttpRequest.create();
  request.open(""String_Node_Str"",getPath());
  request.setOnReadyStateChange(xhr -> {
    if (request.getReadyState() == XMLHttpRequest.DONE)     try {
      size=Integer.parseInt(request.getResponseHeader(""String_Node_Str""));
    }
 catch (    Exception e) {
      size=0;
    }
  }
);
  request.send();
  exists=request.getStatus() != 404;
}"
96799,"@Override public void centerOnScreen(){
  VideoMode mode=Monitor.getPrimaryMonitor().getVideoMode();
  Vector2 windowPosition=window.getPosition();
  windowPosition.x=(mode.getWidth() - windowPosition.x) / 2;
  windowPosition.y=(mode.getHeight() - windowPosition.y) / 2;
  window.setPosition(windowPosition);
}","@Override public void centerOnScreen(){
  VideoMode mode=Monitor.getPrimaryMonitor().getVideoMode();
  Vector2 windowPosition=window.getSize();
  windowPosition.x=(mode.getWidth() - windowPosition.x) / 2;
  windowPosition.y=(mode.getHeight() - windowPosition.y) / 2;
  window.setPosition(windowPosition);
}"
96800,"public LwjglDisplayDevice(){
  Window.setHint(GLFW.GLFW_OPENGL_PROFILE,GLFW.GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT,GLFW.GLFW_TRUE);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR,3);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MINOR,2);
  window=new Window(800,600,""String_Node_Str"");
  window.show();
}","public LwjglDisplayDevice(){
  GLFW3.init();
  GLFW3.setSwapInterval(1);
  Window.setHint(GLFW.GLFW_OPENGL_PROFILE,GLFW.GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT,GLFW.GLFW_TRUE);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR,3);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MINOR,2);
  window=new Window(800,600,""String_Node_Str"");
  centerOnScreen();
  window.show();
  window.setSizeCallback((window1,width,height) -> Game.INSTANCE.resized());
}"
96801,"@Override public void readImage(DirectBuffer memory,OnComplete onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    FloatBuffer pixels=imageBuffer.asFloatBuffer();
    for (int x=0; x < image.getWidth(); x++) {
      for (int y=0; y < image.getHeight(); y++) {
        int start=y * height.get(0) + x;
        float r=pixels.get(start);
        float g=pixels.get(start + 1);
        float b=pixels.get(start + 2);
        float a=pixels.get(start + 3);
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    onComplete.invoke(image);
  }
).start();
}","@Override public void readImage(DirectBuffer memory,OnComplete onComplete){
  new Thread(() -> {
    IntBuffer width=BufferUtils.createIntBuffer(1);
    IntBuffer height=BufferUtils.createIntBuffer(1);
    IntBuffer components=BufferUtils.createIntBuffer(1);
    ByteBuffer imageBuffer=stbi_load_from_memory((ByteBuffer)memory.nativeBuffer(),width,height,components,4);
    if (imageBuffer == null)     throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
    Image image=new Image(width.get(0),height.get(0));
    for (int y=0; y < image.getHeight(); y++) {
      for (int x=0; x < image.getWidth(); x++) {
        int start=4 * (y * image.getWidth() + x);
        float r=(imageBuffer.get(start) & 0xff) / 255f;
        float g=(imageBuffer.get(start + 1) & 0xff) / 255f;
        float b=(imageBuffer.get(start + 2) & 0xff) / 255f;
        float a=1 - (imageBuffer.get(start + 3) & 0xff) / 255f;
        image.setPixel(x,y,new Color(r,g,b,a));
      }
    }
    stbi_image_free(imageBuffer);
    onComplete.invoke(image);
  }
).start();
}"
96802,"public static void start(){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
}","public static void start(){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
  Window window=((LwjglDisplayDevice)SilenceEngine.display).window;
  Game.INSTANCE.init();
  while (!window.shouldClose()) {
    GLFW3.pollEvents();
    SilenceEngine.gameLoop.performLoopFrame();
    window.swapBuffers();
  }
  Game.INSTANCE.dispose();
  ((LwjglDisplayDevice)SilenceEngine.display).cleanUp();
}"
96803,"public void setMonitor(Monitor monitor,VideoMode videoMode){
  this.monitor=monitor;
  glfwSetWindowMonitor(handle,monitor.getHandle(),0,0,videoMode.getWidth(),videoMode.getHeight(),videoMode.getRefreshRate());
}","public void setMonitor(Monitor monitor){
  setMonitor(monitor,monitor.getVideoMode());
}"
96804,"public GwtAudioDevice(){
  try {
    context=ALContext.create();
  }
 catch (  AudioContextException e) {
    SilenceEngine.log.getRootLogger().error(e);
  }
}","public GwtAudioDevice(){
  try {
    context=ALContext.create();
    AL.setCurrentContext(context);
  }
 catch (  AudioContextException e) {
    SilenceEngine.log.getRootLogger().error(e);
  }
}"
96805,"public static void start(){
  SilenceEngine.log=new GwtLogDevice();
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
  Game.INSTANCE.init();
  AnimationScheduler.get().requestAnimationFrame(GwtRuntime::frameLoop);
}","public static void start(){
  SilenceEngine.log=new GwtLogDevice();
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
  Game.INSTANCE.init();
  SilenceEngine.display.setFullscreen(false);
  AnimationScheduler.get().requestAnimationFrame(GwtRuntime::frameLoop);
}"
96806,"public GwtDisplayDevice(){
  canvas=Canvas.createIfSupported();
  if (canvas == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  canvas.setCoordinateSpaceWidth(800);
  canvas.setCoordinateSpaceHeight(600);
  RootPanel.get().add(canvas);
  boolean webgl2=WebGL20.isSupported();
  if (!webgl2 && !WebGL10.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  context=webgl2 ? WebGL20.createContext(canvas) : WebGL10.createContext(canvas);
  WebGL10.glViewport(0,0,800,600);
  WebGL10.glClearColor(0,0,0,1);
  WebGL10.glClear(WebGL10.GL_COLOR_BUFFER_BIT);
  StyleElement style=Document.get().createStyleElement();
  style.setInnerHTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Document.get().getHead().appendChild(style);
}","public GwtDisplayDevice(){
  canvas=Canvas.createIfSupported();
  if (canvas == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  canvas.setCoordinateSpaceWidth(800);
  canvas.setCoordinateSpaceHeight(600);
  RootPanel.get().add(canvas);
  canvas.setFocus(true);
  boolean webgl2=WebGL20.isSupported();
  if (!webgl2 && !WebGL10.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  context=webgl2 ? WebGL20.createContext(canvas) : WebGL10.createContext(canvas);
  if (!webgl2)   if (!OES_vertex_array_object.isSupported())   throw new UnsupportedOperationException(""String_Node_Str"");
  WebGL10.glViewport(0,0,800,600);
  WebGL10.glClearColor(0,0,0,1);
  WebGL10.glClear(WebGL10.GL_COLOR_BUFFER_BIT);
  StyleElement style=Document.get().createStyleElement();
  style.setInnerHTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Document.get().getHead().appendChild(style);
  canvas.addKeyDownHandler(event -> checkRequestFullscreen());
  canvas.addKeyUpHandler(event -> checkRequestFullscreen());
  canvas.addKeyPressHandler(event -> checkRequestFullscreen());
  canvas.addMouseWheelHandler(event -> checkRequestFullscreen());
  canvas.addMouseMoveHandler(event -> checkRequestFullscreen());
  canvas.addMouseDownHandler(event -> checkRequestFullscreen());
  canvas.addMouseUpHandler(event -> checkRequestFullscreen());
  canvas.addTouchStartHandler(event -> checkRequestFullscreen());
  canvas.addTouchEndHandler(event -> checkRequestFullscreen());
  canvas.addTouchMoveHandler(event -> checkRequestFullscreen());
  canvas.addTouchCancelHandler(event -> checkRequestFullscreen());
}"
96807,"@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen)   context.requestFullscreen();
 else   WebGLContext.exitFullscreen();
  Game.INSTANCE.resized();
}","@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen) {
    fullScreenRequested=true;
  }
 else {
    WebGLContext.exitFullscreen();
    fullScreenRequested=false;
  }
  Game.INSTANCE.resized();
  canvas.setFocus(true);
}"
96808,"@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen)   window.setMonitor(Monitor.getPrimaryMonitor());
 else   window.setMonitor(null);
}","@Override public void setFullscreen(boolean fullscreen){
  if (fullscreen) {
    this.fullscreen=true;
    window.setMonitor(Monitor.getPrimaryMonitor());
  }
 else {
    window.setMonitor(null);
    window.setSize(windowWidth,windowHeight);
    window.setPosition(windowPositionX,windowPositionY);
    this.fullscreen=false;
  }
}"
96809,"public LwjglDisplayDevice(){
  GLFW3.init();
  GLFW3.setSwapInterval(1);
  Window.setHint(GLFW.GLFW_OPENGL_PROFILE,GLFW.GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT,GLFW.GLFW_TRUE);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR,3);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MINOR,2);
  window=new Window(800,600,""String_Node_Str"");
  centerOnScreen();
  window.show();
  window.setSizeCallback((window1,width,height) -> Game.INSTANCE.resized());
}","public LwjglDisplayDevice(){
  GLFW3.init();
  GLFW3.setSwapInterval(1);
  Window.setHint(GLFW.GLFW_OPENGL_PROFILE,GLFW.GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT,GLFW.GLFW_TRUE);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR,3);
  Window.setHint(GLFW.GLFW_CONTEXT_VERSION_MINOR,2);
  windowWidth=800;
  windowHeight=600;
  window=new Window(windowWidth,windowHeight,""String_Node_Str"");
  centerOnScreen();
  window.show();
  window.makeCurrent();
  window.setPositionCallback((window1,xPos,yPos) -> {
    if (!fullscreen) {
      windowPositionX=xPos;
      windowPositionY=yPos;
    }
  }
);
  window.setSizeCallback((window1,width,height) -> {
    if (!fullscreen) {
      windowWidth=width;
      windowHeight=height;
    }
    Game.INSTANCE.resized();
  }
);
}"
96810,"@Override public void setPosition(int x,int y){
  window.setPosition(x,y);
}","@Override public void setPosition(int x,int y){
  window.setPosition(x,y);
  windowPositionX=x;
  windowPositionY=y;
}"
96811,"@Override public void setSize(int width,int height){
  window.setSize(width,height);
}","@Override public void setSize(int width,int height){
  window.setSize(width,height);
  if (!fullscreen) {
    windowWidth=width;
    windowHeight=height;
  }
}"
96812,"@Override public void centerOnScreen(){
  VideoMode mode=Monitor.getPrimaryMonitor().getVideoMode();
  Vector2 windowPosition=window.getSize();
  windowPosition.x=(mode.getWidth() - windowPosition.x) / 2;
  windowPosition.y=(mode.getHeight() - windowPosition.y) / 2;
  window.setPosition(windowPosition);
}","@Override public void centerOnScreen(){
  VideoMode mode=Monitor.getPrimaryMonitor().getVideoMode();
  Vector2 windowPosition=window.getSize();
  windowPosition.x=(mode.getWidth() - windowPosition.x) / 2;
  windowPosition.y=(mode.getHeight() - windowPosition.y) / 2;
  window.setPosition(windowPosition);
  windowPositionX=(int)windowPosition.x;
  windowPositionY=(int)windowPosition.y;
}"
96813,"public void setMonitor(Monitor monitor){
  setMonitor(monitor,monitor.getVideoMode());
}","public void setMonitor(Monitor monitor){
  setMonitor(monitor,monitor == null ? null : monitor.getVideoMode());
}"
96814,"@Override public DirectBuffer writeInt(int byteIndex,int value){
  view.setInt32(byteIndex,value);
  return this;
}","@Override public DirectBuffer writeInt(int byteIndex,int value){
  view.setInt32(byteIndex,value,littleEndian);
  return this;
}"
96815,"public GwtDirectBuffer(int sizeInBytes){
  super(sizeInBytes);
  buffer=ArrayBufferNative.create(sizeInBytes);
  view=DataViewNative.create(buffer);
}","public GwtDirectBuffer(int sizeInBytes){
  super(sizeInBytes);
  if (!endiannness) {
    littleEndian=getEndianness();
    endiannness=true;
  }
  buffer=ArrayBufferNative.create(sizeInBytes);
  view=DataViewNative.create(buffer);
}"
96816,"@Override public DirectBuffer writeFloat(int byteIndex,float value){
  view.setFloat32(byteIndex,value);
  return this;
}","@Override public DirectBuffer writeFloat(int byteIndex,float value){
  view.setFloat32(byteIndex,value,littleEndian);
  return this;
}"
96817,"@Override public DirectBuffer writeLong(int byteIndex,long value){
  view.setUint32(byteIndex,value);
  return this;
}","@Override public DirectBuffer writeLong(int byteIndex,long value){
  view.setUint32(byteIndex,value,littleEndian);
  return this;
}"
96818,"@Override public long readLong(int byteIndex){
  return view.getUint32(byteIndex);
}","@Override public long readLong(int byteIndex){
  return view.getUint32(byteIndex,littleEndian);
}"
96819,"@Override public short readShort(int byteIndex){
  return view.getInt16(byteIndex);
}","@Override public short readShort(int byteIndex){
  return view.getInt16(byteIndex,littleEndian);
}"
96820,"@Override public double readDouble(int byteIndex){
  return view.getFloat64(byteIndex);
}","@Override public double readDouble(int byteIndex){
  return view.getFloat64(byteIndex,littleEndian);
}"
96821,"@Override public float readFloat(int byteIndex){
  return view.getFloat32(byteIndex);
}","@Override public float readFloat(int byteIndex){
  return view.getFloat32(byteIndex,littleEndian);
}"
96822,"@Override public DirectBuffer writeShort(int byteIndex,short value){
  view.setInt16(byteIndex,value);
  return this;
}","@Override public DirectBuffer writeShort(int byteIndex,short value){
  view.setInt16(byteIndex,value,littleEndian);
  return this;
}"
96823,"@Override public int readInt(int byteIndex){
  return view.getInt32(byteIndex);
}","@Override public int readInt(int byteIndex){
  return view.getInt32(byteIndex,littleEndian);
}"
96824,"@Override public DirectBuffer writeDouble(int byteIndex,double value){
  view.setFloat64(byteIndex,value);
  return this;
}","@Override public DirectBuffer writeDouble(int byteIndex,double value){
  view.setFloat64(byteIndex,value,littleEndian);
  return this;
}"
96825,"@Override public void glTexImage2D(int target,int level,int internalFormat,int width,int height,int border,int format,int type,DirectBuffer pixels){
  WebGL10.glTexImage2D(target,level,internalFormat,width,height,border,format,type,(ArrayBufferView)pixels.nativeBuffer());
}","@Override public void glTexImage2D(int target,int level,int internalFormat,int width,int height,int border,int format,int type,DirectBuffer pixels){
  ArrayBufferView arrayBufferView=null;
switch (type) {
case GL_FLOAT:
    arrayBufferView=Float32ArrayNative.create(((ArrayBufferView)pixels.nativeBuffer()).buffer());
  break;
case GL_UNSIGNED_BYTE:
arrayBufferView=Uint8ArrayNative.create(((ArrayBufferView)pixels.nativeBuffer()).buffer());
break;
}
WebGL10.glTexImage2D(target,level,internalFormat,width,height,border,format,type,arrayBufferView);
}"
96826,"@Override public int glGetShaderi(int shader,int param){
  return WebGL10.glGetShaderParameter(shader,param);
}","@Override public int glGetShaderi(int shader,int param){
  if (param == GL_SHADER_TYPE)   return WebGL10.<Integer>glGetShaderParameter(shader,param);
 else   return WebGL10.<Boolean>glGetShaderParameter(shader,param) ? Constants.GL_TRUE : Constants.GL_FALSE;
}"
96827,"@Override public int glGetProgrami(int program,int param){
  return WebGL10.glGetProgramParameter(program,param);
}","@Override public int glGetProgrami(int program,int param){
  if (param == GL_LINK_STATUS || param == GL_DELETE_STATUS || param == GL_VALIDATE_STATUS)   return WebGL10.<Boolean>glGetProgramParameter(program,param) ? GL_TRUE : GL_FALSE;
  return WebGL10.<Integer>glGetProgramParameter(program,param);
}"
96828,"private static void jsLoadedCallback(ImageData pixels,int width,int height,OnComplete onComplete){
  Image image=new Image(width,height);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,pixels.getAlphaAt(x,y) / 255f));
  }
  onComplete.invoke(image);
}","private static void jsLoadedCallback(ImageData pixels,int width,int height,OnComplete onComplete){
  Image image=new Image(width,height);
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++)     image.setPixel(x,y,new Color(pixels.getRedAt(x,y) / 255f,pixels.getGreenAt(x,y) / 255f,pixels.getBlueAt(x,y) / 255f,1 - (pixels.getAlphaAt(x,y) / 255f)));
  }
  onComplete.invoke(image);
}"
96829,"public static void start(Game game){
  SilenceEngine.log=new GwtLogDevice();
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
  SilenceEngine.audio=new GwtAudioDevice();
  game.init();
  SilenceEngine.display.setFullscreen(false);
  AnimationScheduler.get().requestAnimationFrame(GwtRuntime::frameLoop);
}","public static void start(Game game){
  SilenceEngine.log=new GwtLogDevice();
  GWT.setUncaughtExceptionHandler(new UnwrappingExceptionHandler());
  SilenceEngine.display=new GwtDisplayDevice();
  SilenceEngine.input=new GwtInputDevice();
  SilenceEngine.io=new GwtIODevice();
  SilenceEngine.graphics=new GwtGraphicsDevice();
  SilenceEngine.audio=new GwtAudioDevice();
  SilenceEngine.display.setIcon(FilePath.getResourceFile(""String_Node_Str""));
  game.init();
  SilenceEngine.display.setFullscreen(false);
  AnimationScheduler.get().requestAnimationFrame(GwtRuntime::frameLoop);
}"
96830,"public static void start(Game game){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
  SilenceEngine.audio=new LwjglAudioDevice();
  if (SilenceEngine.display.getPlatform() == SilenceEngine.Platform.MACOSX)   System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Window window=((LwjglDisplayDevice)SilenceEngine.display).window;
  game.init();
  SilenceEngine.eventManager.raiseResizeEvent();
  while (!window.shouldClose()) {
    GLFW3.pollEvents();
    SilenceEngine.gameLoop.performLoopFrame();
    window.swapBuffers();
  }
  SilenceEngine.eventManager.raiseDisposeEvent();
}","public static void start(Game game){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
  SilenceEngine.audio=new LwjglAudioDevice();
  if (SilenceEngine.display.getPlatform() == SilenceEngine.Platform.MACOSX)   System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Window window=((LwjglDisplayDevice)SilenceEngine.display).window;
  SilenceEngine.display.setIcon(FilePath.getResourceFile(""String_Node_Str""));
  game.init();
  SilenceEngine.eventManager.raiseResizeEvent();
  while (!window.shouldClose()) {
    GLFW3.pollEvents();
    SilenceEngine.gameLoop.performLoopFrame();
    window.swapBuffers();
  }
  SilenceEngine.eventManager.raiseDisposeEvent();
}"
96831,"public GwtInputDevice(){
  createKeyMapping();
  createMouseMapping();
  Canvas canvas=((GwtDisplayDevice)SilenceEngine.display).canvas;
  canvas.addKeyDownHandler(event -> postKeyEvent(getKeyCode(event.getNativeKeyCode()),true));
  canvas.addKeyUpHandler(event -> postKeyEvent(getKeyCode(event.getNativeKeyCode()),false));
  canvas.addMouseDownHandler(event -> postMouseEvent(getMouseCode(event.getNativeButton()),true));
  canvas.addMouseUpHandler(event -> postMouseEvent(getMouseCode(event.getNativeButton()),false));
  canvas.addMouseMoveHandler(event -> {
    int x=event.getClientX();
    int y=event.getClientY();
    Mouse.dx=x - Mouse.x;
    Mouse.dy=y - Mouse.y;
    Mouse.x=x;
    Mouse.y=y;
  }
);
  canvas.addMouseWheelHandler(event -> {
    int dsy=event.getDeltaY();
    Mouse.deltaScrollY=dsy > 0 ? 1 : dsy == 0 ? 0 : -1;
    Mouse.deltaScrollX=0;
  }
);
  canvas.addTouchStartHandler(event -> postTouchEvents(event.getTargetTouches(),true));
  canvas.addTouchMoveHandler(event -> postTouchEvents(event.getTargetTouches(),true));
  canvas.addTouchEndHandler(event -> postTouchEvents(event.getTargetTouches(),false));
  canvas.addTouchCancelHandler(event -> postTouchEvents(event.getTargetTouches(),false));
}","public GwtInputDevice(){
  createKeyMapping();
  createMouseMapping();
  Canvas canvas=((GwtDisplayDevice)SilenceEngine.display).canvas;
  canvas.addKeyDownHandler(event -> postKeyEvent(getKeyCode(event.getNativeKeyCode()),true));
  canvas.addKeyUpHandler(event -> postKeyEvent(getKeyCode(event.getNativeKeyCode()),false));
  canvas.addMouseDownHandler(event -> postMouseEvent(getMouseCode(event.getNativeButton()),true));
  canvas.addMouseUpHandler(event -> postMouseEvent(getMouseCode(event.getNativeButton()),false));
  canvas.addMouseMoveHandler(event -> {
    int x=event.getX();
    int y=event.getY();
    Mouse.dx=x - Mouse.x;
    Mouse.dy=y - Mouse.y;
    Mouse.x=x;
    Mouse.y=y;
  }
);
  canvas.addMouseWheelHandler(event -> {
    int dsy=event.getDeltaY();
    Mouse.deltaScrollY=dsy > 0 ? 1 : dsy == 0 ? 0 : -1;
    Mouse.deltaScrollX=0;
  }
);
  canvas.addTouchStartHandler(event -> postTouchEvents(event.getTargetTouches(),true));
  canvas.addTouchMoveHandler(event -> postTouchEvents(event.getTargetTouches(),true));
  canvas.addTouchEndHandler(event -> postTouchEvents(event.getTargetTouches(),false));
  canvas.addTouchCancelHandler(event -> postTouchEvents(event.getTargetTouches(),false));
}"
96832,"/** 
 * Checks for collisions between every component in the scene that belongs to the registered types registered using the register() method.
 */
public void checkCollisions(){
  if (scene.entities.size() == 0) {
    childrenInScene=0;
    return;
  }
  if (scene.entities.size() != childrenInScene) {
    entities.clear();
    broadphase.clear();
    childrenInScene=0;
    for (    Entity2D entity : scene.entities) {
      CollisionComponent2D component=entity.getComponent(CollisionComponent2D.class);
      if (component != null) {
        broadphase.insert(component);
        entities.add(entity);
      }
      childrenInScene++;
    }
  }
  for (  Entity2D entity : entities) {
    TransformComponent2D transform=entity.getComponent(TransformComponent2D.class);
    CollisionComponent2D collision=entity.getComponent(CollisionComponent2D.class);
    if (transform.transformed) {
      broadphase.remove(collision);
      broadphase.insert(collision);
    }
  }
  for (  CollisionTag type1 : collisionMap.keySet()) {
    for (    Entity2D entity : entities) {
      CollisionComponent2D collision=entity.getComponent(CollisionComponent2D.class);
      if (type1 == collision.tag) {
        List<CollisionComponent2D> collidables=broadphase.retrieve(collision);
        for (        CollisionTag type2 : collisionMap.get(type1)) {
          for (          CollisionComponent2D collidable : collidables)           if (collidable.tag == type2)           if (collision.polygon.intersects(collidable.polygon))           collision.callback.handleCollision(collision.entity);
        }
      }
    }
  }
}","/** 
 * Checks for collisions between every component in the scene that belongs to the registered types registered using the register() method.
 */
public void checkCollisions(){
  if (scene.entities.size() == 0) {
    childrenInScene=0;
    return;
  }
  if (scene.numEntities() != childrenInScene) {
    entities.clear();
    broadphase.clear();
    childrenInScene=0;
    updateEntities(scene.entities);
  }
  for (  Entity2D entity : entities) {
    TransformComponent2D transform=entity.getComponent(TransformComponent2D.class);
    for (    IComponent2D component : entity.getComponents()) {
      if (component instanceof CollisionComponent2D) {
        CollisionComponent2D collision=(CollisionComponent2D)component;
        if (transform.transformed) {
          broadphase.remove(collision);
          broadphase.insert(collision);
        }
      }
    }
  }
  for (  CollisionTag type1 : collisionMap.keySet()) {
    for (    Entity2D entity : entities) {
      CollisionComponent2D collision=entity.getComponent(CollisionComponent2D.class);
      if (type1 == collision.tag) {
        List<CollisionComponent2D> collidables=broadphase.retrieve(collision);
        for (        CollisionTag type2 : collisionMap.get(type1)) {
          for (          CollisionComponent2D collidable : collidables)           if (collidable.tag == type2)           if (collision.polygon.intersects(collidable.polygon))           collision.callback.handleCollision(collision.entity,collidable);
        }
      }
    }
  }
}"
96833,"/** 
 * Checks for collisions between every component in the scene that belongs to the registered types registered using the register() method.
 */
public void checkCollisions(){
  if (scene.entities.size() == 0) {
    childrenInScene=0;
    return;
  }
  if (scene.entities.size() != childrenInScene) {
    entities.clear();
    broadphase.clear();
    childrenInScene=0;
    for (    Entity3D entity : scene.entities) {
      CollisionComponent3D component=entity.getComponent(CollisionComponent3D.class);
      if (component != null) {
        broadphase.insert(component);
        entities.add(entity);
      }
      childrenInScene++;
    }
  }
  for (  Entity3D entity : entities) {
    TransformComponent3D transform=entity.getComponent(TransformComponent3D.class);
    CollisionComponent3D collision=entity.getComponent(CollisionComponent3D.class);
    if (transform.transformed) {
      broadphase.remove(collision);
      broadphase.insert(collision);
    }
  }
  for (  CollisionTag type1 : collisionMap.keySet()) {
    for (    Entity3D entity : entities) {
      CollisionComponent3D collision=entity.getComponent(CollisionComponent3D.class);
      if (type1 == collision.tag) {
        List<CollisionComponent3D> collidables=broadphase.retrieve(collision);
        for (        CollisionTag type2 : collisionMap.get(type1)) {
          for (          CollisionComponent3D collidable : collidables)           if (collidable.tag == type2)           if (collision.polyhedron.intersects(collidable.polyhedron))           collision.callback.handleCollision(collision.entity);
        }
      }
    }
  }
}","/** 
 * Checks for collisions between every component in the scene that belongs to the registered types registered using the register() method.
 */
public void checkCollisions(){
  if (scene.entities.size() == 0) {
    childrenInScene=0;
    return;
  }
  if (scene.numEntities() != childrenInScene) {
    entities.clear();
    broadphase.clear();
    childrenInScene=0;
    updateEntities(scene.entities);
  }
  for (  Entity3D entity : entities) {
    TransformComponent3D transform=entity.getComponent(TransformComponent3D.class);
    for (    IComponent3D component : entity.getComponents()) {
      if (component instanceof CollisionComponent3D) {
        CollisionComponent3D collision=(CollisionComponent3D)component;
        if (transform.transformed) {
          broadphase.remove(collision);
          broadphase.insert(collision);
        }
      }
    }
  }
  for (  CollisionTag type1 : collisionMap.keySet()) {
    for (    Entity3D entity : entities) {
      CollisionComponent3D collision=entity.getComponent(CollisionComponent3D.class);
      if (type1 == collision.tag) {
        List<CollisionComponent3D> collidables=broadphase.retrieve(collision);
        for (        CollisionTag type2 : collisionMap.get(type1)) {
          for (          CollisionComponent3D collidable : collidables)           if (collidable.tag == type2)           if (collision.polyhedron.intersects(collidable.polyhedron))           collision.callback.handleCollision(collision.entity,collidable);
        }
      }
    }
  }
}"
96834,"public Vector3 rotate(Vector3 axis,float angle){
  Quaternion temp=Quaternion.REUSABLE_STACK.pop();
  temp.set(axis,angle);
  temp.multiply(this,this);
  Quaternion.REUSABLE_STACK.push(temp);
  return this;
}","public Vector3 rotate(Vector3 rotation){
  Quaternion temp=Quaternion.REUSABLE_STACK.pop();
  temp.set(rotation.x,rotation.y,rotation.z);
  temp.multiply(this,this);
  Quaternion.REUSABLE_STACK.push(temp);
  return this;
}"
96835,"public void scale(float sx,float sy){
  for (  Vector2 v : vertices)   v.scale(sx,sy);
}","public void scale(float sx,float sy){
  for (  Vector2 v : vertices)   v.scale(sx,sy);
  scaleX*=sx;
  scaleY*=sy;
}"
96836,"public Polygon(){
  this.vertices=new ArrayList<>();
  this.position=new Vector2();
  this.center=new Vector2();
  clearVertices();
}","public Polygon(){
  this.vertices=new ArrayList<>();
  this.position=new Vector2();
  this.center=new Vector2();
  scaleX=scaleY=1;
  clearVertices();
}"
96837,"public void setScale(Vector2 scale){
  this.scale.set(scale);
}","public void setScale(Vector2 scale){
  scale(scale.x / scaleX,scale.y / scaleY);
}"
96838,void handleCollision(Entity2D other);,"void handleCollision(Entity2D other,CollisionComponent2D component);"
96839,"@Override public void update(float deltaTime){
  polygon.setPosition(entity.position);
  polygon.setRotation(entity.rotation);
  polygon.setScale(entity.scale);
}","@Override public void update(float deltaTime){
  Vector2 tPosition=Vector2.REUSABLE_STACK.pop();
  Vector2 tScale=Vector2.REUSABLE_STACK.pop();
  float rotation=0;
  tPosition.set(entity.position);
  tScale.set(entity.scale);
  rotation+=entity.rotation;
  Entity2D parent=entity.parent;
  while (parent != null) {
    rotation+=parent.rotation;
    tScale.scale(parent.scale.x,parent.scale.y);
    tPosition.rotate(parent.rotation).add(parent.position);
    parent=parent.parent;
  }
  polygon.setCenter(tPosition);
  polygon.setScale(tScale);
  polygon.setRotation(rotation);
  Vector2.REUSABLE_STACK.push(tPosition);
  Vector2.REUSABLE_STACK.push(tScale);
}"
96840,"public GwtInputDevice(){
  createKeyMapping();
  createMouseMapping();
  Canvas canvas=((GwtDisplayDevice)SilenceEngine.display).canvas;
  canvas.addKeyDownHandler(event -> {
    postKeyEvent(getKeyCode(event.getNativeKeyCode()),true);
    event.preventDefault();
  }
);
  canvas.addKeyUpHandler(event -> {
    postKeyEvent(getKeyCode(event.getNativeKeyCode()),false);
    event.preventDefault();
  }
);
  canvas.addMouseDownHandler(event -> {
    postMouseEvent(getMouseCode(event.getNativeButton()),true);
    event.preventDefault();
  }
);
  canvas.addMouseUpHandler(event -> {
    postMouseEvent(getMouseCode(event.getNativeButton()),false);
    event.preventDefault();
  }
);
  canvas.addMouseMoveHandler(event -> {
    int x=event.getX();
    int y=event.getY();
    Mouse.dx=x - Mouse.x;
    Mouse.dy=y - Mouse.y;
    Mouse.x=x;
    Mouse.y=y;
    event.preventDefault();
  }
);
  canvas.addMouseWheelHandler(event -> {
    int dsy=event.getDeltaY();
    Mouse.deltaScrollY=dsy > 0 ? 1 : dsy == 0 ? 0 : -1;
    Mouse.deltaScrollX=0;
    event.preventDefault();
  }
);
  canvas.addTouchStartHandler(event -> {
    postTouchEvents(event.getTargetTouches(),true);
    event.preventDefault();
  }
);
  canvas.addTouchMoveHandler(event -> {
    postTouchEvents(event.getTargetTouches(),true);
    event.preventDefault();
  }
);
  canvas.addTouchEndHandler(event -> {
    postTouchEvents(event.getTargetTouches(),false);
    event.preventDefault();
  }
);
  canvas.addTouchCancelHandler(event -> {
    postTouchEvents(event.getTargetTouches(),false);
    event.preventDefault();
  }
);
  preventContextMenu(canvas.getCanvasElement());
}","public GwtInputDevice(){
  createKeyMapping();
  createMouseMapping();
  Canvas canvas=((GwtDisplayDevice)SilenceEngine.display).canvas;
  canvas.addKeyDownHandler(event -> {
    postKeyEvent(getKeyCode(event.getNativeKeyCode()),true);
    event.preventDefault();
  }
);
  canvas.addKeyUpHandler(event -> {
    postKeyEvent(getKeyCode(event.getNativeKeyCode()),false);
    event.preventDefault();
  }
);
  canvas.addMouseDownHandler(event -> {
    postMouseEvent(getMouseCode(event.getNativeButton()),true);
    canvas.setFocus(true);
    event.preventDefault();
  }
);
  canvas.addMouseUpHandler(event -> {
    postMouseEvent(getMouseCode(event.getNativeButton()),false);
    event.preventDefault();
  }
);
  canvas.addMouseMoveHandler(event -> {
    int x=event.getX();
    int y=event.getY();
    Mouse.dx=x - Mouse.x;
    Mouse.dy=y - Mouse.y;
    Mouse.x=x;
    Mouse.y=y;
    event.preventDefault();
  }
);
  canvas.addMouseWheelHandler(event -> {
    int dsy=event.getDeltaY();
    Mouse.deltaScrollY=dsy > 0 ? 1 : dsy == 0 ? 0 : -1;
    Mouse.deltaScrollX=0;
    event.preventDefault();
  }
);
  canvas.addTouchStartHandler(event -> {
    postTouchEvents(event.getTargetTouches(),true);
    event.preventDefault();
  }
);
  canvas.addTouchMoveHandler(event -> {
    postTouchEvents(event.getTargetTouches(),true);
    event.preventDefault();
  }
);
  canvas.addTouchEndHandler(event -> {
    postTouchEvents(event.getTargetTouches(),false);
    event.preventDefault();
  }
);
  canvas.addTouchCancelHandler(event -> {
    postTouchEvents(event.getTargetTouches(),false);
    event.preventDefault();
  }
);
  preventContextMenu(canvas.getCanvasElement());
}"
96841,"@Override public int getWidth(){
  return (int)window.getPosition().x;
}","@Override public int getWidth(){
  return (int)window.getSize().x;
}"
96842,"@Override public int getHeight(){
  return (int)window.getPosition().y;
}","@Override public int getHeight(){
  return (int)window.getSize().y;
}"
96843,"public static void start(Game game){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
  SilenceEngine.audio=new LwjglAudioDevice();
  Window window=((LwjglDisplayDevice)SilenceEngine.display).window;
  game.init();
  while (!window.shouldClose()) {
    GLFW3.pollEvents();
    SilenceEngine.gameLoop.performLoopFrame();
    window.swapBuffers();
  }
  SilenceEngine.eventManager.raiseDisposeEvent();
}","public static void start(Game game){
  SilenceEngine.log=new LwjglLogDevice();
  SilenceEngine.io=new LwjglIODevice();
  SilenceEngine.display=new LwjglDisplayDevice();
  SilenceEngine.input=new LwjglInputDevice();
  SilenceEngine.graphics=new LwjglGraphicsDevice();
  SilenceEngine.audio=new LwjglAudioDevice();
  if (SilenceEngine.display.getPlatform() == SilenceEngine.Platform.MACOSX)   System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Window window=((LwjglDisplayDevice)SilenceEngine.display).window;
  game.init();
  while (!window.shouldClose()) {
    GLFW3.pollEvents();
    SilenceEngine.gameLoop.performLoopFrame();
    window.swapBuffers();
  }
  SilenceEngine.eventManager.raiseDisposeEvent();
}"
96844,"private String getIDEPath() throws IOException {
  URL url=Lwjgl3ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new IOException(""String_Node_Str"");
  String urlString=url.toString();
  return URLDecoder.decode(urlString.substring(urlString.indexOf('/') + 1),""String_Node_Str"");
}","private String getIDEPath() throws IOException {
  URL url=Lwjgl3ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new IOException(""String_Node_Str"");
  String urlString=url.toString();
  SilenceEngine.Platform platform=SilenceEngine.getPlatform();
  if (platform == SilenceEngine.Platform.WINDOWS_32 || platform == SilenceEngine.Platform.WINDOWS_64)   return URLDecoder.decode(urlString.substring(urlString.indexOf('/') + 1),""String_Node_Str"");
 else   return ""String_Node_Str"" + URLDecoder.decode(urlString.substring(urlString.indexOf('/') + 1),""String_Node_Str"");
}"
96845,"/** 
 * Returns the extension of the file represented by this FilePath.
 * @return The extension of the file without the leading dot.
 */
public String getExtension(){
  String[] parts=getPath().split(""String_Node_Str"");
  return parts.length > 1 ? parts[1] : ""String_Node_Str"";
}","/** 
 * Returns the extension of the file represented by this FilePath.
 * @return The extension of the file without the leading dot.
 */
public String getExtension(){
  if (isDirectory())   return ""String_Node_Str"";
  String[] parts=getPath().split(""String_Node_Str"");
  return parts.length > 1 ? parts[1] : ""String_Node_Str"";
}"
96846,"private String getIDEPath() throws IOException {
  URL url=ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new IOException(""String_Node_Str"");
  String urlString=url.toString();
  return urlString.substring(urlString.indexOf('/') + 1);
}","private String getIDEPath() throws IOException {
  URL url=ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new IOException(""String_Node_Str"");
  String urlString=url.toString();
  return URLDecoder.decode(urlString.substring(urlString.indexOf('/') + 1),""String_Node_Str"");
}"
96847,"private List<JarEntry> getJarEntries() throws IOException {
  URL url=ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new SilenceException(""String_Node_Str"");
  String jarUrl=url.toString();
  String jarPath=jarUrl.substring(jarUrl.indexOf('/') + 1,jarUrl.indexOf('!'));
  JarFile jarFile=new JarFile(new File(jarPath));
  List<JarEntry> entries=jarFile.stream().filter(e -> e.getName().startsWith(path)).collect(Collectors.toList());
  jarFile.close();
  if (entries != null)   return entries;
  throw new IOException(""String_Node_Str"" + getPath() + ""String_Node_Str""+ jarPath);
}","private List<JarEntry> getJarEntries() throws IOException {
  URL url=ResourceFilePath.class.getClassLoader().getResource(getPath());
  if (url == null)   throw new SilenceException(""String_Node_Str"");
  String jarUrl=url.toString();
  String jarPath=URLDecoder.decode(jarUrl.substring(jarUrl.indexOf('/') + 1,jarUrl.indexOf('!')),""String_Node_Str"");
  JarFile jarFile=new JarFile(new File(jarPath));
  List<JarEntry> entries=jarFile.stream().filter(e -> e.getName().startsWith(path)).collect(Collectors.toList());
  jarFile.close();
  if (entries != null)   return entries;
  throw new IOException(""String_Node_Str"" + getPath() + ""String_Node_Str""+ jarPath);
}"
96848,"@Override public List<FilePath> listFiles() throws IOException {
  if (!isDirectory())   throw new SilenceException(""String_Node_Str"");
  if (!exists())   throw new SilenceException(""String_Node_Str"");
  if (getResourceType() == ResourceType.FILE)   return FilePath.getExternalFile(getIDEPath()).listFiles();
  List<FilePath> filePaths=new ArrayList<>();
  List<JarEntry> entries=getJarEntries();
  entries.forEach(e -> filePaths.add(FilePath.getResourceFile(e.getName())));
  return Collections.unmodifiableList(filePaths);
}","@Override public List<FilePath> listFiles() throws IOException {
  if (!isDirectory())   throw new SilenceException(""String_Node_Str"");
  if (!exists())   throw new SilenceException(""String_Node_Str"");
  List<FilePath> filePaths=new ArrayList<>();
  if (getResourceType() == ResourceType.FILE) {
    File file=new File(getIDEPath());
    File[] children=file.listFiles();
    if (children != null)     for (    File child : children)     filePaths.add(new ResourceFilePath(path + SEPARATOR + child.getPath().replace(file.getPath(),""String_Node_Str"")));
  }
 else {
    List<JarEntry> entries=getJarEntries();
    entries.forEach(e -> filePaths.add(FilePath.getResourceFile(e.getName())));
  }
  return Collections.unmodifiableList(filePaths);
}"
96849,"public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(indices.get(0)).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    int i : indices) {
      Sprite sprite=sprites.get(i);
      Vector2 position=positions.get(i);
      Texture t=sprite.getTexture();
      if (t.getID() != texture.getID()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin(Primitive.TRIANGLES);
      }
      batcher.vertex(temp.set(-t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMaxV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
      batcher.color(sprite.getTint());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  indices.clear();
  positions.forEach(Vector2.REUSABLE_STACK::push);
  positions.clear();
  originalTexture.bind();
}","public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(indices.get(0)).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    int i : indices) {
      Sprite sprite=sprites.get(i);
      Vector2 position=positions.get(i);
      Texture t=sprite.getTexture();
      if (t.getID() != texture.getID()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin(Primitive.TRIANGLES);
      }
      float width=t.getWidth() * sprite.getScaleX();
      float height=t.getHeight() * sprite.getScaleY();
      batcher.vertex(temp.set(-t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMinU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMaxU(),t.getMaxV());
      batcher.color(sprite.getTint());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(width / 2,height / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
      batcher.color(sprite.getTint());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  indices.clear();
  positions.forEach(Vector2.REUSABLE_STACK::push);
  positions.clear();
  originalTexture.bind();
}"
96850,"/** 
 * This method returns the current gamma ramp of the specified monitor.
 * @return The current GammaRamp, or <code>null</code> if an error occurred.
 */
public GammaRamp getGammaRamp(){
  GLFWGammaRamp gammaRamp=glfwGetGammaRamp(handle);
  if (gammaRamp.address() == 0)   return null;
  int byteBufferSize=gammaRamp.size() * Short.BYTES;
  ShortBuffer rBuffer=gammaRamp.red(byteBufferSize);
  ShortBuffer gBuffer=gammaRamp.green(byteBufferSize);
  ShortBuffer bBuffer=gammaRamp.blue(byteBufferSize);
  short[] red=new short[gammaRamp.size()];
  short[] green=new short[gammaRamp.size()];
  short[] blue=new short[gammaRamp.size()];
  int i=0;
  while (rBuffer.hasRemaining())   red[i++]=rBuffer.get();
  i=0;
  while (gBuffer.hasRemaining())   green[i++]=gBuffer.get();
  i=0;
  while (bBuffer.hasRemaining())   blue[i++]=bBuffer.get();
  return new GammaRamp(red,green,blue);
}","/** 
 * This method returns the current gamma ramp of the specified monitor.
 * @return The current GammaRamp, or <code>null</code> if an error occurred.
 */
public GammaRamp getGammaRamp(){
  GLFWGammaRamp gammaRamp=glfwGetGammaRamp(handle);
  if (gammaRamp.address() == 0)   return null;
  int shortBufferSize=gammaRamp.size();
  ShortBuffer rBuffer=gammaRamp.red(shortBufferSize);
  ShortBuffer gBuffer=gammaRamp.green(shortBufferSize);
  ShortBuffer bBuffer=gammaRamp.blue(shortBufferSize);
  short[] red=new short[gammaRamp.size()];
  short[] green=new short[gammaRamp.size()];
  short[] blue=new short[gammaRamp.size()];
  int i=0;
  while (rBuffer.hasRemaining())   red[i++]=rBuffer.get();
  i=0;
  while (gBuffer.hasRemaining())   green[i++]=gBuffer.get();
  i=0;
  while (bBuffer.hasRemaining())   blue[i++]=bBuffer.get();
  return new GammaRamp(red,green,blue);
}"
96851,"private void sortSprites(){
  indices.sort((i,j) -> sprites.get(i).getTexture().getID() < sprites.get(j).getTexture().getID() ? 1 : -1);
}","private void sortSprites(){
  indices.sort((i,j) -> sprites.get(i).getTexture().getID() - sprites.get(j).getTexture().getID());
}"
96852,"private void asyncLoadResources(){
  loaderWindow.makeCurrent();
  for (  FilePath path : toBeLoaded.keySet()) {
    Class<?> clazz=toBeLoaded.get(path);
    loadHelpers.get(clazz).load(path,this);
  }
}","private void asyncLoadResources(){
  loaderWindow.makeCurrent();
  for (  FilePath path : toBeLoaded.keySet()) {
    Class<?> clazz=toBeLoaded.get(path);
    loadHelpers.get(clazz).load(path,this);
  }
  GL11.glFinish();
  GLError.check();
  GL11.glFlush();
  GLError.check();
}"
96853,"public void parse(Node node,FilePath path){
  Element element=(Element)node;
  firstGID=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  try {
    if (element.hasAttribute(""String_Node_Str"")) {
      path=path.getParent().getChild(element.getAttribute(""String_Node_Str""));
      Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(path.getInputStream());
      node=document.getElementsByTagName(""String_Node_Str"").item(0);
      element=(Element)node;
    }
  }
 catch (  Exception e) {
    SilenceException.reThrow(e);
  }
  tileWidth=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  tileHeight=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  margin=element.hasAttribute(""String_Node_Str"") ? Integer.parseInt(element.getAttribute(""String_Node_Str"")) : 0;
  spacing=element.hasAttribute(""String_Node_Str"") ? Integer.parseInt(element.getAttribute(""String_Node_Str"")) : 0;
  name=element.getAttribute(""String_Node_Str"");
  NodeList nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    Element childElement=(Element)nodes.item(0);
    tileOffset.x=Float.parseFloat(childElement.getAttribute(""String_Node_Str""));
    tileOffset.y=Float.parseFloat(childElement.getAttribute(""String_Node_Str""));
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    Node terrain=nodes.item(0);
    while (terrain != null) {
      TmxTerrain terrainType=new TmxTerrain();
      terrainType.parse(terrain);
      terrainTypes.add(terrainType);
      terrain=terrain.getNextSibling();
    }
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    image=new TmxImage();
    image.parse(nodes.item(0),path);
  }
  int tileCount=(image.getWidth() / tileWidth) * (image.getHeight() / tileHeight);
  for (int tID=tiles.size(); tID < tileCount; tID++) {
    TmxTile tile=new TmxTile(tID);
    tiles.add(tile);
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    Node tileNode=nodes.item(0);
    while (tileNode != null) {
      TmxTile tile=new TmxTile();
      tile.parse(tileNode);
      tiles.get(tile.getID()).parse(tileNode);
      tileNode=tileNode.getNextSibling();
    }
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    properties.parse(nodes.item(0));
  }
}","public void parse(Node node,FilePath path){
  Element element=(Element)node;
  firstGID=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  try {
    if (element.hasAttribute(""String_Node_Str"")) {
      path=path.getParent().getChild(element.getAttribute(""String_Node_Str""));
      Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(path.getInputStream());
      node=document.getElementsByTagName(""String_Node_Str"").item(0);
      element=(Element)node;
    }
  }
 catch (  Exception e) {
    SilenceException.reThrow(e);
  }
  tileWidth=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  tileHeight=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  margin=element.hasAttribute(""String_Node_Str"") ? Integer.parseInt(element.getAttribute(""String_Node_Str"")) : 0;
  spacing=element.hasAttribute(""String_Node_Str"") ? Integer.parseInt(element.getAttribute(""String_Node_Str"")) : 0;
  name=element.getAttribute(""String_Node_Str"");
  NodeList nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    Element childElement=(Element)nodes.item(0);
    tileOffset.x=Float.parseFloat(childElement.getAttribute(""String_Node_Str""));
    tileOffset.y=Float.parseFloat(childElement.getAttribute(""String_Node_Str""));
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    Node terrain=nodes.item(0);
    while (terrain != null) {
      TmxTerrain terrainType=new TmxTerrain();
      terrainType.parse(terrain);
      terrainTypes.add(terrainType);
      terrain=terrain.getNextSibling();
    }
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    image=new TmxImage();
    image.parse(nodes.item(0),path);
  }
  int tileCount=(image.getWidth() / tileWidth) * (image.getHeight() / tileHeight);
  for (int tID=tiles.size(); tID < tileCount; tID++) {
    TmxTile tile=new TmxTile(tID);
    tiles.add(tile);
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    for (int i=0; i < nodes.getLength(); i++) {
      Node tileNode=nodes.item(i);
      TmxTile tile=new TmxTile();
      tile.parse(tileNode);
      tiles.get(tile.getID()).parse(tileNode);
    }
  }
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    properties.parse(nodes.item(0));
  }
}"
96854,"public void parse(Node node){
  Element element=(Element)node;
  id=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  NodeList nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0)   properties.parse(nodes.item(0));
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    animated=true;
    Node frameNode=nodes.item(0).getFirstChild();
    while (frameNode != null) {
      Element frame=(Element)frameNode;
      int tileID=Integer.parseInt(frame.getAttribute(""String_Node_Str""));
      int duration=Integer.parseInt(frame.getAttribute(""String_Node_Str""));
      TmxAnimationFrame animation=new TmxAnimationFrame(tileID,totalDuration);
      frames.add(animation);
      totalDuration+=duration;
      frameNode=frameNode.getNextSibling();
    }
  }
}","public void parse(Node node){
  Element element=(Element)node;
  id=Integer.parseInt(element.getAttribute(""String_Node_Str""));
  NodeList nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0)   properties.parse(nodes.item(0));
  nodes=element.getElementsByTagName(""String_Node_Str"");
  if (nodes.getLength() > 0) {
    animated=true;
    NodeList tiles=((Element)nodes.item(0)).getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < tiles.getLength(); i++) {
      Element frame=(Element)tiles.item(i);
      int tileID=Integer.parseInt(frame.getAttribute(""String_Node_Str""));
      int duration=Integer.parseInt(frame.getAttribute(""String_Node_Str""));
      TmxAnimationFrame animation=new TmxAnimationFrame(tileID,duration);
      frames.add(animation);
      totalDuration+=duration;
    }
  }
}"
96855,"private ResourceLoader(){
  textures=new HashMap<>();
  fonts=new HashMap<>();
  sounds=new HashMap<>();
  models=new HashMap<>();
  texturesToLoad=new HashMap<>();
  fontsToLoad=new HashMap<>();
  soundsToLoad=new HashMap<>();
  modelsToLoad=new HashMap<>();
  numLoaded=0;
  setLogo(""String_Node_Str"");
  setRenderProgressCallback(this::defaultRenderProgressCallback);
}","private ResourceLoader(){
  textures=new HashMap<>();
  fonts=new HashMap<>();
  sounds=new HashMap<>();
  models=new HashMap<>();
  texturesToLoad=new HashMap<>();
  fontsToLoad=new HashMap<>();
  soundsToLoad=new HashMap<>();
  modelsToLoad=new HashMap<>();
  numLoaded=0;
  setRenderProgressCallback(this::defaultRenderProgressCallback);
}"
96856,"public void startLoading(){
  smoothedProgress=0;
  numLoaded=0;
  fileInfo=""String_Node_Str"";
  Display.setHints();
  loaderWindow=new Window(Display.getWindow());
  Thread loadingThread=new Thread(this::loadResources);
  loadingThread.start();
  float progress;
  while ((progress=updateProgress()) != 100) {
    SilenceEngine.graphics.beginFrame();
    GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
    SilenceEngine.graphics.getGraphics2D().getCamera().initProjection(Display.getWidth(),Display.getHeight());
    renderProgressCallback.invoke(SilenceEngine.graphics.getBatcher(),progress,fileInfo);
    SilenceEngine.graphics.endFrame();
    sleep(1000 / Game.getTargetUPS());
  }
  loaderWindow.destroy();
  Window.setDefaultHints();
}","public void startLoading(){
  smoothedProgress=0;
  numLoaded=0;
  fileInfo=""String_Node_Str"";
  if (logo == null)   setLogo(""String_Node_Str"");
  Display.setHints();
  loaderWindow=new Window(Display.getWindow());
  Thread loadingThread=new Thread(this::loadResources);
  loadingThread.start();
  float progress;
  while ((progress=updateProgress()) != 100) {
    SilenceEngine.graphics.beginFrame();
    GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
    SilenceEngine.graphics.getGraphics2D().getCamera().initProjection(Display.getWidth(),Display.getHeight());
    renderProgressCallback.invoke(SilenceEngine.graphics.getBatcher(),progress,fileInfo);
    SilenceEngine.graphics.endFrame();
    sleep(1000 / Game.getTargetUPS());
  }
  loaderWindow.destroy();
  Window.setDefaultHints();
}"
96857,"public static Texture fromColor(Color c,int width,int height){
  ByteBuffer buffer=BufferUtils.createByteBuffer(width * height * 4);
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      buffer.put((byte)(c.getR() * 255f)).put((byte)(c.getG() * 255f)).put((byte)(c.getB() * 255f)).put((byte)(c.getA() * 255f));
    }
  }
  buffer.flip();
  return fromByteBuffer(buffer,width,height);
}","public static Texture fromColor(Color c,int width,int height){
  ByteBuffer buffer=BufferUtils.createByteBuffer(width * height * 4);
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      buffer.put((byte)(c.getR() * 255f)).put((byte)(c.getG() * 255f)).put((byte)(c.getB() * 255f)).put((byte)(c.getA() * 255f));
    }
  }
  buffer.flip();
  return fromByteBuffer(buffer,width,height,4);
}"
96858,"public static Texture fromInputStream(InputStream stream){
  ByteBuffer imageBuffer=FileUtils.readToByteBuffer(stream);
  IntBuffer width=BufferUtils.createIntBuffer(1);
  IntBuffer height=BufferUtils.createIntBuffer(1);
  IntBuffer components=BufferUtils.createIntBuffer(1);
  if (stbi_info_from_memory(imageBuffer,width,height,components) == NULL)   throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
  return fromByteBuffer(stbi_load_from_memory(imageBuffer,width,height,components,0),width.get(),height.get());
}","public static Texture fromInputStream(InputStream stream){
  ByteBuffer imageBuffer=FileUtils.readToByteBuffer(stream);
  IntBuffer width=BufferUtils.createIntBuffer(1);
  IntBuffer height=BufferUtils.createIntBuffer(1);
  IntBuffer components=BufferUtils.createIntBuffer(1);
  ByteBuffer image=stbi_load_from_memory(imageBuffer,width,height,components,0);
  if (image == null)   throw new SilenceException(""String_Node_Str"" + stbi_failure_reason());
  Texture texture=fromByteBuffer(image,width.get(),height.get(),components.get());
  stbi_image_free(image);
  return texture;
}"
96859,"public static Texture fromByteBuffer(ByteBuffer buffer,int width,int height){
  Texture texture=new Texture();
  texture.bind();
  texture.setFilter(GL_LINEAR_MIPMAP_LINEAR,GL_LINEAR);
  texture.image2d(buffer,GL_UNSIGNED_BYTE,GL_RGBA,width,height,GL_RGBA8);
  texture.generateMipMaps();
  return texture;
}","public static Texture fromByteBuffer(ByteBuffer buffer,int width,int height,int components){
  Texture texture=new Texture();
  texture.bind();
  texture.setFilter(GL_LINEAR_MIPMAP_LINEAR,GL_LINEAR);
  texture.image2d(buffer,GL_UNSIGNED_BYTE,components == 4 ? GL_RGBA : GL_RGB,width,height,GL_RGBA8);
  texture.generateMipMaps();
  return texture;
}"
96860,"public static Texture fromBufferedImage(BufferedImage img){
  ByteBuffer buffer=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight() * 4);
  for (int y=0; y < img.getHeight(); y++) {
    for (int x=0; x < img.getWidth(); x++) {
      int pixel=img.getRGB(x,y);
      buffer.put((byte)((pixel >> 16) & 0xFF));
      buffer.put((byte)((pixel >> 8) & 0xFF));
      buffer.put((byte)(pixel & 0xFF));
      buffer.put((byte)((pixel >> 24) & 0xFF));
    }
  }
  buffer.rewind();
  return fromByteBuffer(buffer,img.getWidth(),img.getHeight());
}","public static Texture fromBufferedImage(BufferedImage img){
  ByteBuffer buffer=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight() * 4);
  for (int y=0; y < img.getHeight(); y++) {
    for (int x=0; x < img.getWidth(); x++) {
      int pixel=img.getRGB(x,y);
      buffer.put((byte)((pixel >> 16) & 0xFF));
      buffer.put((byte)((pixel >> 8) & 0xFF));
      buffer.put((byte)(pixel & 0xFF));
      buffer.put((byte)((pixel >> 24) & 0xFF));
    }
  }
  buffer.rewind();
  return fromByteBuffer(buffer,img.getWidth(),img.getHeight(),4);
}"
96861,"public static ByteBuffer readToByteBuffer(InputStream inputStream){
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  byte[] buffer=new byte[4096];
  int count=0;
  while (count != -1) {
    try {
      count=inputStream.read(buffer,0,buffer.length);
      outputStream.write(buffer,0,buffer.length);
    }
 catch (    IOException e) {
      SilenceException.reThrow(e);
    }
  }
  ByteBuffer byteBuffer=BufferUtils.createByteBuffer(outputStream.size());
  byteBuffer.put(outputStream.toByteArray()).flip();
  return byteBuffer;
}","public static ByteBuffer readToByteBuffer(InputStream inputStream){
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  byte[] buffer=new byte[4096];
  try {
    while (true) {
      int n=inputStream.read(buffer);
      if (n < 0)       break;
      outputStream.write(buffer,0,n);
    }
    inputStream.close();
  }
 catch (  Exception e) {
    SilenceException.reThrow(e);
  }
  byte[] bytes=outputStream.toByteArray();
  ByteBuffer byteBuffer=BufferUtils.createByteBuffer(bytes.length);
  byteBuffer.put(bytes).flip();
  return byteBuffer;
}"
96862,"public Animation set(Animation other){
  clearFrames();
  for (int i=0; i < other.frames.size(); i++) {
    addFrame(other.frames.get(i),other.frameLengths.get(i),TimeUtils.getDefaultTimeUnit());
  }
  currentFrame=other.currentFrame;
  setStartCallback(other.startCallback);
  setPauseCallback(other.pauseCallback);
  setResumeCallback(other.resumeCallback);
  setEndCallback(other.endCallback);
  return this;
}","public Animation set(Animation other){
  clearFrames();
  for (int i=0; i < other.frames.size(); i++) {
    addFrame(other.frames.get(i),other.frameLengths.get(i),TimeUtils.getDefaultTimeUnit());
  }
  currentFrame=other.currentFrame;
  time=other.time;
  setStartCallback(other.startCallback);
  setPauseCallback(other.pauseCallback);
  setResumeCallback(other.resumeCallback);
  setEndCallback(other.endCallback);
  return this;
}"
96863,"public Animation clearFrames(){
  frames.clear();
  frameLengths.clear();
  currentFrame=0;
  return this;
}","public Animation clearFrames(){
  frames.clear();
  frameLengths.clear();
  currentFrame=0;
  time=0;
  return this;
}"
96864,"public Sprite setAnimation(Animation animation){
  this.animation=animation.copy();
  return this;
}","public Sprite setAnimation(Animation animation){
  this.animation.set(animation);
  return this;
}"
96865,"public Sprite copy(){
  return new Sprite().set(this);
}","public Sprite copy(){
  return new Sprite(this);
}"
96866,"public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(indices.get(0)).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    int i : indices) {
      Sprite sprite=sprites.get(i);
      Vector2 position=positions.get(i);
      Texture t=sprite.getTexture();
      if (t.getId() != texture.getId()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin(Primitive.TRIANGLES);
      }
      batcher.vertex(temp.set(-texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMaxV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  indices.clear();
  positions.clear();
  originalTexture.bind();
}","public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(indices.get(0)).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    int i : indices) {
      Sprite sprite=sprites.get(i);
      Vector2 position=positions.get(i);
      Texture t=sprite.getTexture();
      if (t.getId() != texture.getId()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin(Primitive.TRIANGLES);
      }
      batcher.vertex(temp.set(-t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMinV());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
      batcher.vertex(temp.set(t.getWidth() / 2,-t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMinV());
      batcher.vertex(temp.set(t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMaxU(),t.getMaxV());
      batcher.vertex(temp.set(-t.getWidth() / 2,t.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(t.getWidth() / 2,t.getHeight() / 2));
      batcher.texCoord(t.getMinU(),t.getMaxV());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  indices.clear();
  positions.clear();
  originalTexture.bind();
}"
96867,"/** 
 * Constructs a Entity2D to use a Polygon that can be used to perform collisions.
 * @param sprite  The sprite to use for this entity.
 * @param polygon The collision mask.
 */
public Entity2D(Sprite sprite,Polygon polygon){
  this.sprite=new Sprite(Sprite.EMPTY);
  setSprite(sprite);
  this.polygon=polygon;
  position=new Vector2();
  velocity=new Vector2();
  depth=0;
  id=IDGenerator.generate();
}","/** 
 * Constructs a Entity2D to use a Polygon that can be used to perform collisions.
 * @param sprite  The sprite to use for this entity.
 * @param polygon The collision mask.
 */
public Entity2D(Sprite sprite,Polygon polygon){
  this.sprite=sprite.copy();
  this.polygon=polygon;
  position=new Vector2();
  velocity=new Vector2();
  depth=0;
  id=IDGenerator.generate();
}"
96868,"public void init(){
  Display.setTitle(""String_Node_Str"");
  playerTexture=Texture.fromColor(Color.DARK_RED,48,48);
  boxTexture=Texture.fromColor(Color.CORN_FLOWER_BLUE,48,48);
  GL3Context.clearColor(Color.DARK_SLATE_GRAY);
  cam=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
  scene=new Scene2D();
  for (int i=0; i < 20; i++) {
    scene.addChild(new Box(new Vector2(48 * i,0)));
    scene.addChild(new Box(new Vector2(0,48 * i)));
    scene.addChild(new Box(new Vector2(48 * i,48 * 19)));
    scene.addChild(new Box(new Vector2(48 * 19,48 * i)));
  }
  scene.addChild(new Player(new Vector2(Display.getWidth() / 2 - 24,Display.getHeight() / 2 - 24)));
  collider=new SceneCollider2D(new DynamicTree2D());
  collider.setScene(scene);
  collider.register(Player.class,Box.class);
  System.out.println(scene.getEntities().size());
}","public void init(){
  Display.setTitle(""String_Node_Str"");
  playerTexture=Texture.fromColor(Color.DARK_RED,48,48);
  boxTexture=Texture.fromColor(Color.CORN_FLOWER_BLUE,48,48);
  boxSprite=new Sprite(boxTexture);
  playerSprite=new Sprite(playerTexture);
  GL3Context.clearColor(Color.DARK_SLATE_GRAY);
  cam=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
  scene=new Scene2D();
  for (int i=0; i < 20; i++) {
    scene.addChild(new Box(new Vector2(48 * i,0)));
    scene.addChild(new Box(new Vector2(0,48 * i)));
    scene.addChild(new Box(new Vector2(48 * i,48 * 19)));
    scene.addChild(new Box(new Vector2(48 * 19,48 * i)));
  }
  scene.addChild(new Player(new Vector2(Display.getWidth() / 2 - 24,Display.getHeight() / 2 - 24)));
  collider=new SceneCollider2D(new DynamicTree2D());
  collider.setScene(scene);
  collider.register(Player.class,Box.class);
  System.out.println(scene.getEntities().size());
}"
96869,"public Player(Vector2 position){
  super(new Sprite(playerTexture),new Rectangle(48,48));
  setPosition(position);
}","public Player(Vector2 position){
  super(boxSprite,new Rectangle(48,48));
  setPosition(position);
  setSprite(playerSprite);
}"
96870,"public Box(Vector2 position){
  super(new Sprite(boxTexture),new Rectangle(48,48));
  setPosition(position);
}","public Box(Vector2 position){
  super(boxSprite,new Rectangle(48,48));
  setPosition(position);
}"
96871,"@Override public void init(){
  Display.setVSync(false);
  camera=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
  texture1=Texture.fromResource(""String_Node_Str"");
  texture2=Texture.fromResource(""String_Node_Str"");
  sprites=new ArrayList<>();
  positions=new ArrayList<>();
  timer=new GameTimer(0.5,TimeUtils.Unit.SECONDS);
  timer.setCallback(() -> {
    defineSprites();
    timer.start();
  }
);
  timer.start();
}","@Override public void init(){
  Display.setVSync(false);
  camera=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
  texture1=Texture.fromResource(""String_Node_Str"");
  texture2=Texture.fromResource(""String_Node_Str"");
  sprite1=new Sprite(texture1);
  sprite2=new Sprite(texture2);
  sprites=new ArrayList<>();
  positions=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    sprites.add(new Sprite(i % 2 == 0 ? texture1 : texture2,MathUtils.random_range(1,3),MathUtils.random_range(1,3),MathUtils.random(360)));
    positions.add(new Vector2());
  }
  defineSprites();
  timer=new GameTimer(0.5,TimeUtils.Unit.SECONDS);
  timer.setCallback(() -> {
    defineSprites();
    timer.start();
  }
);
  timer.start();
}"
96872,"private void defineSprites(){
  sprites.clear();
  positions.clear();
  for (int i=0; i < 10; i++) {
    sprites.add(new Sprite(i % 2 == 0 ? texture1 : texture2,MathUtils.random_range(1,3),MathUtils.random_range(1,3),MathUtils.random(360)));
  }
  for (int y=0; y < 2; y++) {
    for (int x=0; x < 5; x++)     positions.add(new Vector2(Display.getWidth() / 5 * x,Display.getHeight() / 2 * y));
  }
}","private void defineSprites(){
  for (int i=0; i < 10; i++) {
    sprites.get(i).set((MathUtils.random_range(0,2) == 0) ? sprite1 : sprite2).setScaleX(MathUtils.random_range(1,3)).setScaleY(MathUtils.random_range(1,3)).setRotation(MathUtils.random(360));
  }
  int i=0;
  for (int y=0; y < 2; y++) {
    for (int x=0; x < 5; x++, i++)     positions.get(i).set(Display.getWidth() / 5 * x,Display.getHeight() / 2 * y);
  }
}"
96873,"public void flush(){
  sortMeshes();
  final int numFacesPerBatch=50000;
  int faceCountInBatch=0;
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Material originalMaterial=SilenceEngine.graphics.getCurrentMaterial();
  Texture originalTexture=Texture.CURRENT;
  Material material=meshes.get(0).getMaterial();
  material.getDiffuseMap().bind();
  SilenceEngine.graphics.useMaterial(material);
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  if (transform != null)   batcher.applyTransform(transform);
  batcher.begin();
{
    for (int i=0; i < meshes.size(); i++) {
      Mesh mesh=meshes.get(i);
      if (!mesh.getMaterial().equals(material) || faceCountInBatch > numFacesPerBatch) {
        batcher.end();
        material=mesh.getMaterial();
        material.getDiffuseMap().bind();
        SilenceEngine.graphics.useMaterial(material);
        if (transform != null)         batcher.applyTransform(transform);
        batcher.begin();
        faceCountInBatch=0;
      }
      Transform transform=transforms.get(i);
      Color color=mesh.getMaterial().getDiffuse();
      for (      Face face : mesh.getFaces()) {
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.x)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.x));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.x));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.y)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.y));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.y));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.z)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.z));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.z));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        faceCountInBatch++;
      }
    }
  }
  batcher.end();
  Vector3.REUSABLE_STACK.push(temp);
  originalTexture.bind();
  SilenceEngine.graphics.useMaterial(originalMaterial);
}","public void flush(){
  sortMeshes();
  final int numFacesPerBatch=50000;
  int faceCountInBatch=0;
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Material originalMaterial=SilenceEngine.graphics.getCurrentMaterial();
  Texture originalTexture=Texture.CURRENT;
  Material material=meshes.get(indices.get(0)).getMaterial();
  material.getDiffuseMap().bind();
  SilenceEngine.graphics.useMaterial(material);
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  if (transform != null)   batcher.applyTransform(transform);
  batcher.begin();
{
    for (    int i : indices) {
      Mesh mesh=meshes.get(i);
      if (!mesh.getMaterial().equals(material) || faceCountInBatch > numFacesPerBatch) {
        batcher.end();
        material=mesh.getMaterial();
        material.getDiffuseMap().bind();
        SilenceEngine.graphics.useMaterial(material);
        if (transform != null)         batcher.applyTransform(transform);
        batcher.begin();
        faceCountInBatch=0;
      }
      Transform transform=transforms.get(i);
      Color color=mesh.getMaterial().getDiffuse();
      for (      Face face : mesh.getFaces()) {
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.x)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.x));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.x));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.y)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.y));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.y));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        batcher.vertex(temp.set(mesh.getVertices().get((int)face.vertexIndex.z)).multiplySelf(transform.getMatrix()));
        batcher.normal(mesh.getNormals().get((int)face.normalIndex.z));
        batcher.texCoord(mesh.getTexcoords().get((int)face.texcoordIndex.z));
        batcher.color(color.x,color.y,color.z,mesh.getMaterial().getDissolve());
        faceCountInBatch++;
      }
    }
  }
  batcher.end();
  Vector3.REUSABLE_STACK.push(temp);
  originalTexture.bind();
  SilenceEngine.graphics.useMaterial(originalMaterial);
  meshes.clear();
  transforms.clear();
  indices.clear();
}"
96874,"private void sortMeshes(){
  meshes.sort((m1,m2) -> m1.getMaterial().equals(m2.getMaterial()) ? -1 : 0);
}","private void sortMeshes(){
  indices.sort((i,j) -> meshes.get(i).getMaterial().equals(meshes.get(j).getMaterial()) ? -1 : 1);
}"
96875,"public ModelBatch(){
  meshes=new ArrayList<>();
  transforms=new ArrayList<>();
}","public ModelBatch(){
  meshes=new ArrayList<>();
  transforms=new ArrayList<>();
  indices=new ArrayList<>();
}"
96876,"public void addMesh(Mesh mesh,Transform transform){
  meshes.add(mesh);
  transforms.add(transform);
}","public void addMesh(Mesh mesh,Transform transform){
  meshes.add(mesh);
  transforms.add(transform);
  indices.add(meshes.size() - 1);
}"
96877,"public void begin(Transform transform){
  if (active)   throw new SilenceException(""String_Node_Str"");
  meshes.clear();
  transforms.clear();
  this.transform=transform;
  active=true;
}","public void begin(Transform transform){
  if (active)   throw new SilenceException(""String_Node_Str"");
  meshes.clear();
  transforms.clear();
  indices.clear();
  this.transform=transform;
  active=true;
}"
96878,"/** 
 * Flushes the data collected to the GPU.
 */
public void flush(){
  if (vertexCount == 0)   return;
  fillBuffers();
  unmapBuffers();
  Program.CURRENT.prepareFrame();
  vBuffer.flip();
  cBuffer.flip();
  tBuffer.flip();
  nBuffer.flip();
  vao.bind();
  vao.enableAttributeArray(vertexLocation);
  vao.enableAttributeArray(colorLocation);
  vao.enableAttributeArray(texCoordLocation);
  vao.enableAttributeArray(normalLocation);
  GL3Context.drawArrays(vao,beginMode,0,vertexCount);
  vao.disableAttributeArray(vertexLocation);
  vao.disableAttributeArray(colorLocation);
  vao.disableAttributeArray(texCoordLocation);
  vao.disableAttributeArray(normalLocation);
  GL3Context.bindVertexArray(null);
  vBuffer.clear();
  cBuffer.clear();
  tBuffer.clear();
  nBuffer.clear();
  vertexCount=0;
  colorCount=0;
  texCoordCount=0;
  normalCount=0;
  if (active) {
    mapBuffers();
  }
}","/** 
 * Flushes the data collected to the GPU.
 */
public void flush(){
  if (vertexCount == 0)   return;
  fillBuffers();
  unmapBuffers();
  Program.CURRENT.prepareFrame();
  vBuffer.flip();
  cBuffer.flip();
  tBuffer.flip();
  nBuffer.flip();
  vao.bind();
  vao.enableAttributeArray(vertexLocation);
  vao.enableAttributeArray(colorLocation);
  vao.enableAttributeArray(texCoordLocation);
  vao.enableAttributeArray(normalLocation);
  GL3Context.drawArrays(vao,beginMode,0,vertexCount);
  vao.disableAttributeArray(vertexLocation);
  vao.disableAttributeArray(colorLocation);
  vao.disableAttributeArray(texCoordLocation);
  vao.disableAttributeArray(normalLocation);
  GL3Context.bindVertexArray(null);
  vBuffer.clear();
  cBuffer.clear();
  tBuffer.clear();
  nBuffer.clear();
  vertexCount=0;
  colorCount=0;
  texCoordCount=0;
  normalCount=0;
  mapBuffers();
}"
96879,"/** 
 * Ends the batcher by flushing all the data to the OpenGL
 */
public void end(){
  if (!active)   throw new IllegalStateException(""String_Node_Str"");
  active=false;
  flush();
  transform.reset();
}","/** 
 * Ends the batcher by flushing all the data to the OpenGL
 */
public void end(){
  if (!active)   throw new IllegalStateException(""String_Node_Str"");
  active=false;
  flush();
  unmapBuffers();
  transform.reset();
}"
96880,"public void addMesh(Mesh mesh,Transform transform){
  if (mesh.getNumberOfVertices() <= 900 || !mesh.prefersStatic()) {
    meshes.add(mesh);
    transforms.add(transform);
    indices.add(meshes.size() - 1);
  }
 else {
    staticMeshes.add(SilenceEngine.graphics.getStaticMesh(mesh));
    staticMeshTransforms.add(transform);
    staticMeshIndices.add(staticMeshes.size() - 1);
  }
}","public void addMesh(Mesh mesh,Transform transform){
  if (mesh.getNumberOfVertices() <= 900 && !mesh.prefersStatic()) {
    meshes.add(mesh);
    transforms.add(transform);
    indices.add(meshes.size() - 1);
  }
 else {
    staticMeshes.add(SilenceEngine.graphics.getStaticMesh(mesh));
    staticMeshTransforms.add(transform);
    staticMeshIndices.add(staticMeshes.size() - 1);
  }
}"
96881,"private void sortSprites(){
  sprites.sort((s1,s2) -> s1.getTexture().getId() < s2.getTexture().getId() ? 1 : -1);
}","private void sortSprites(){
  indices.sort((i,j) -> sprites.get(i).getTexture().getId() < sprites.get(j).getTexture().getId() ? 1 : -1);
}"
96882,"public void addSprite(Sprite sprite,Vector2 position){
  sprites.add(sprite);
  spritePositionMap.put(sprite.getID(),position);
}","public void addSprite(Sprite sprite,Vector2 position){
  sprites.add(sprite);
  positions.add(position);
  indices.add(sprites.size() - 1);
}"
96883,"public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(0).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    Sprite sprite : sprites) {
      Texture t=sprite.getTexture();
      if (t.getId() != texture.getId()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin();
      }
      Vector2 position=spritePositionMap.get(sprite.getID());
      batcher.vertex(temp.set(-texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMaxV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  spritePositionMap.clear();
  originalTexture.bind();
}","public void flush(){
  if (sprites.size() == 0)   return;
  sortSprites();
  Batcher batcher=SilenceEngine.graphics.getBatcher();
  Texture originalTexture=Texture.CURRENT;
  Texture texture=sprites.get(indices.get(0)).getTexture();
  texture.bind();
  Vector2 temp=Vector2.REUSABLE_STACK.pop();
  batcher.begin(Primitive.TRIANGLES);
{
    for (    int i : indices) {
      Sprite sprite=sprites.get(i);
      Vector2 position=positions.get(i);
      Texture t=sprite.getTexture();
      if (t.getId() != texture.getId()) {
        batcher.end();
        texture=t;
        t.bind();
        batcher.begin(Primitive.TRIANGLES);
      }
      batcher.vertex(temp.set(-texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
      batcher.vertex(temp.set(texture.getWidth() / 2,-texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMinV());
      batcher.vertex(temp.set(texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMaxU(),texture.getMaxV());
      batcher.vertex(temp.set(-texture.getWidth() / 2,texture.getHeight() / 2).rotateSelf(sprite.getRotation()).scaleSelf(sprite.getScaleX(),sprite.getScaleY()).addSelf(position).addSelf(texture.getWidth() / 2,texture.getHeight() / 2));
      batcher.texCoord(texture.getMinU(),texture.getMaxV());
    }
  }
  batcher.end();
  Vector2.REUSABLE_STACK.push(temp);
  sprites.clear();
  indices.clear();
  positions.clear();
  originalTexture.bind();
}"
96884,"public SpriteBatch(){
  sprites=new ArrayList<>();
  spritePositionMap=new HashMap<>();
  active=false;
}","public SpriteBatch(){
  sprites=new ArrayList<>();
  indices=new ArrayList<>();
  positions=new ArrayList<>();
  active=false;
}"
96885,"public void begin(){
  if (active)   throw new SilenceException(""String_Node_Str"");
  sprites.clear();
  active=true;
}","public void begin(){
  if (active)   throw new SilenceException(""String_Node_Str"");
  sprites.clear();
  indices.clear();
  positions.clear();
  active=true;
}"
96886,"/** 
 * Deletes the file resolved by this FilePath instance.
 * @throws IOException      If an I/O error occurs.
 * @throws SilenceException If this file is a resource, or if this doesn't exist.
 */
public void delete() throws IOException {
  if (getType() == Type.RESOURCE)   throw new SilenceException(""String_Node_Str"");
  if (!exists())   throw new SilenceException(""String_Node_Str"");
  Files.delete(Paths.get(path));
}","/** 
 * Deletes the file resolved by this FilePath instance.
 * @return True if the attempt is successful or false otherwise.
 * @throws IOException      If an I/O error occurs.
 * @throws SilenceException If this file is a resource, or if this doesn't exist.
 */
public boolean delete() throws IOException {
  if (getType() == Type.RESOURCE)   throw new SilenceException(""String_Node_Str"");
  if (!exists())   throw new SilenceException(""String_Node_Str"");
  return Files.deleteIfExists(Paths.get(path));
}"
96887,"public Vector3 multiplySelf(Matrix4 m){
  float rx=x * m.get(0,0) + y * m.get(0,1) + z * m.get(0,2) + 1 * m.get(0,3);
  float ry=x * m.get(1,0) + y * m.get(1,1) + z * m.get(1,2) + 1 * m.get(1,3);
  float rz=x * m.get(2,0) + y * m.get(2,1) + z * m.get(2,2) + 1 * m.get(2,3);
  return set(rx,ry,rz);
}","public Vector3 multiplySelf(Matrix4 m){
  float rx=x * m.get(0,0) + y * m.get(1,0) + z * m.get(2,0) + 1 * m.get(3,0);
  float ry=x * m.get(0,1) + y * m.get(1,1) + z * m.get(2,1) + 1 * m.get(3,1);
  float rz=x * m.get(0,2) + y * m.get(1,2) + z * m.get(2,2) + 1 * m.get(3,2);
  return set(rx,ry,rz);
}"
96888,"public void copyTo(FilePath path) throws IOException {
  byte[] buffer=new byte[1024];
  int length;
  try (InputStream inputStream=getInputStream();OutputStream outputStream=path.getOutputStream()){
    while ((length=inputStream.read(buffer)) > 0) {
      outputStream.write(buffer,0,length);
    }
  }
 }","public void copyTo(FilePath path) throws IOException {
  if (isDirectory() && path.isFile())   throw new SilenceException(""String_Node_Str"");
  if (isFile() && path.isDirectory())   throw new SilenceException(""String_Node_Str"");
  if (!exists())   throw new SilenceException(""String_Node_Str"");
  byte[] buffer=new byte[1024];
  int length;
  try (InputStream inputStream=getInputStream();OutputStream outputStream=path.getOutputStream()){
    while ((length=inputStream.read(buffer)) > 0) {
      outputStream.write(buffer,0,length);
    }
  }
 }"
96889,"public FilePath getParent() throws IOException {
  String[] parts=path.split(""String_Node_Str"");
  String path=parts[0];
  for (int i=1; i < parts.length - 1; i++)   path+=""String_Node_Str"" + parts[i] + ""String_Node_Str"";
  return new FilePath(path + ""String_Node_Str"",type);
}","public FilePath getParent() throws IOException {
  String[] parts=path.split(""String_Node_Str"" + SEPARATOR);
  String path=parts[0];
  for (int i=1; i < parts.length - 1; i++)   path+=SEPARATOR + parts[i] + SEPARATOR;
  return new FilePath(path + SEPARATOR,type);
}"
96890,"public boolean isDirectory(){
  if (!exists())   return false;
  if (getType() == Type.EXTERNAL)   return Files.isDirectory(Paths.get(path));
 else {
    boolean isDirectory=false;
    try {
      File file=new File(FilePath.class.getProtectionDomain().getCodeSource().getLocation().getPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      if (file.isFile()) {
        JarFile jarFile=new JarFile(file);
        isDirectory=jarFile.stream().filter(e -> e.getName().startsWith(path)).count() > 1;
        jarFile.close();
      }
 else {
        try {
          isDirectory=Files.isDirectory(Paths.get(FilePath.class.getClassLoader().getResource(path).toURI()));
        }
 catch (        FileSystemNotFoundException fsnfe) {
          isDirectory=path.endsWith(""String_Node_Str"");
        }
catch (        Exception e) {
          SilenceException.reThrow(e);
        }
      }
    }
 catch (    Exception e) {
      SilenceException.reThrow(e);
    }
    return isDirectory;
  }
}","public boolean isDirectory(){
  if (!exists())   return false;
  if (getType() == Type.EXTERNAL)   return Files.isDirectory(Paths.get(path));
 else {
    boolean isDirectory=false;
    try {
      File file=new File(FilePath.class.getProtectionDomain().getCodeSource().getLocation().getPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      if (file.isFile()) {
        JarFile jarFile=new JarFile(file);
        isDirectory=jarFile.stream().filter(e -> e.getName().startsWith(path)).count() > 1;
        jarFile.close();
      }
 else {
        URL url=FilePath.class.getClassLoader().getResource(path);
        if (url == null) {
          isDirectory=new File(file,path).isDirectory();
        }
 else {
          final Map<String,String> env=new HashMap<>();
          final String[] array=url.toURI().toString().split(""String_Node_Str"");
          Path path;
          if (array[0].startsWith(""String_Node_Str"") || array[0].startsWith(""String_Node_Str"")) {
            final FileSystem fs=FileSystems.newFileSystem(URI.create(array[0]),env);
            path=fs.getPath(array[1]);
            isDirectory=Files.isDirectory(path);
            fs.close();
          }
 else {
            path=Paths.get(url.toURI());
            isDirectory=Files.isDirectory(path);
          }
        }
      }
    }
 catch (    Exception e) {
      SilenceException.reThrow(e);
    }
    return isDirectory;
  }
}"
96891,"public void moveTo(FilePath path) throws IOException {
  if (getType() == Type.RESOURCE || path.getType() == Type.EXTERNAL)   throw new SilenceException(""String_Node_Str"");
  Files.move(Paths.get(this.path),Paths.get(path.getPath()));
}","public void moveTo(FilePath path) throws IOException {
  if (getType() == Type.RESOURCE || path.getType() == Type.RESOURCE)   throw new SilenceException(""String_Node_Str"");
  Files.move(Paths.get(this.path),Paths.get(path.getPath()));
}"
96892,"public void drawString(Batcher b,String text,float x,float y,Color col){
  Texture current=Texture.CURRENT;
  b.begin(Primitive.TRIANGLES);
{
    float startX=x;
    Texture page=null;
    for (    char ch : text.toCharArray()) {
      FontChar c=chars[(int)ch];
      if (ch == '\n') {
        y+=fontMetrics.getHeight();
        x=startX;
        continue;
      }
      Texture charPage=fontTexture[chars[ch].page];
      if (page == null || page != charPage) {
        b.flush();
        page=charPage;
        page.bind();
      }
      float minU=c.x / page.getWidth();
      float maxU=(c.x + c.w) / page.getWidth();
      float minV=c.y / page.getHeight();
      float maxV=(c.y + c.h) / page.getHeight();
      b.vertex(x - c.padding,y);
      b.color(col);
      b.texCoord(minU,minV);
      b.vertex(x + chars[ch].w - c.padding,y);
      b.color(col);
      b.texCoord(maxU,minV);
      b.vertex(x - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(minU,maxV);
      b.vertex(x + chars[ch].w - c.padding,y);
      b.color(col);
      b.texCoord(maxU,minV);
      b.vertex(x - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(minU,maxV);
      b.vertex(x + chars[ch].w - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(maxU,maxV);
      x+=c.advance;
    }
  }
  b.end();
  current.bind();
}","public void drawString(Batcher b,String text,float x,float y,Color col){
  if (text == null || text.equals(""String_Node_Str""))   return;
  Texture current=Texture.CURRENT;
  b.begin(Primitive.TRIANGLES);
{
    float startX=x;
    Texture page=null;
    for (    char ch : text.toCharArray()) {
      FontChar c=chars[(int)ch];
      if (ch == '\n') {
        y+=fontMetrics.getHeight();
        x=startX;
        continue;
      }
      Texture charPage=fontTexture[chars[ch].page];
      if (page == null || page != charPage) {
        b.flush();
        page=charPage;
        page.bind();
      }
      float minU=c.x / page.getWidth();
      float maxU=(c.x + c.w) / page.getWidth();
      float minV=c.y / page.getHeight();
      float maxV=(c.y + c.h) / page.getHeight();
      b.vertex(x - c.padding,y);
      b.color(col);
      b.texCoord(minU,minV);
      b.vertex(x + chars[ch].w - c.padding,y);
      b.color(col);
      b.texCoord(maxU,minV);
      b.vertex(x - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(minU,maxV);
      b.vertex(x + chars[ch].w - c.padding,y);
      b.color(col);
      b.texCoord(maxU,minV);
      b.vertex(x - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(minU,maxV);
      b.vertex(x + chars[ch].w - c.padding,y + chars[ch].h);
      b.color(col);
      b.texCoord(maxU,maxV);
      x+=c.advance;
    }
  }
  b.end();
  current.bind();
}"
96893,"public GammaRamp getGammaRamp(){
  ByteBuffer gammaRamp=glfwGetGammaRamp(handle);
  GLFWgammaramp ramp=new GLFWgammaramp(gammaRamp);
  int byteBufferSize=ramp.getSize() * Short.BYTES / Byte.BYTES;
  ShortBuffer rBuffer=ramp.getRed(byteBufferSize).asShortBuffer();
  ShortBuffer gBuffer=ramp.getGreen(byteBufferSize).asShortBuffer();
  ShortBuffer bBuffer=ramp.getBlue(byteBufferSize).asShortBuffer();
  short[] red=new short[ramp.getSize()];
  short[] green=new short[ramp.getSize()];
  short[] blue=new short[ramp.getSize()];
  int i=0;
  while (rBuffer.hasRemaining())   red[i++]=rBuffer.get();
  i=0;
  while (gBuffer.hasRemaining())   green[i++]=gBuffer.get();
  i=0;
  while (bBuffer.hasRemaining())   blue[i++]=bBuffer.get();
  return new GammaRamp(red,green,blue,ramp.getSize());
}","public GammaRamp getGammaRamp(){
  ByteBuffer gammaRamp=glfwGetGammaRamp(handle);
  GLFWgammaramp ramp=new GLFWgammaramp(gammaRamp);
  int byteBufferSize=ramp.getSize() * Short.BYTES;
  ShortBuffer rBuffer=ramp.getRed(byteBufferSize).asShortBuffer();
  ShortBuffer gBuffer=ramp.getGreen(byteBufferSize).asShortBuffer();
  ShortBuffer bBuffer=ramp.getBlue(byteBufferSize).asShortBuffer();
  short[] red=new short[ramp.getSize()];
  short[] green=new short[ramp.getSize()];
  short[] blue=new short[ramp.getSize()];
  int i=0;
  while (rBuffer.hasRemaining())   red[i++]=rBuffer.get();
  i=0;
  while (gBuffer.hasRemaining())   green[i++]=gBuffer.get();
  i=0;
  while (bBuffer.hasRemaining())   blue[i++]=bBuffer.get();
  return new GammaRamp(red,green,blue,ramp.getSize());
}"
96894,"public void setGammaRamp(GammaRamp gammaRamp){
  GLFWgammaramp ramp=new GLFWgammaramp();
  ByteBuffer rBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES / Byte.BYTES);
  ByteBuffer gBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES / Byte.BYTES);
  ByteBuffer bBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES / Byte.BYTES);
  rBuffer.asShortBuffer().put(gammaRamp.getRed()).flip();
  gBuffer.asShortBuffer().put(gammaRamp.getGreen()).flip();
  bBuffer.asShortBuffer().put(gammaRamp.getBlue()).flip();
  ramp.setRed(rBuffer);
  ramp.setGreen(gBuffer);
  ramp.setBlue(bBuffer);
  ramp.setSize(gammaRamp.getSize());
  ByteBuffer buffer=ramp.buffer();
  glfwSetGammaRamp(handle,buffer);
}","public void setGammaRamp(GammaRamp gammaRamp){
  GLFWgammaramp ramp=new GLFWgammaramp();
  ByteBuffer rBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES);
  ByteBuffer gBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES);
  ByteBuffer bBuffer=BufferUtils.createByteBuffer(gammaRamp.getSize() * Short.BYTES);
  rBuffer.asShortBuffer().put(gammaRamp.getRed()).flip();
  gBuffer.asShortBuffer().put(gammaRamp.getGreen()).flip();
  bBuffer.asShortBuffer().put(gammaRamp.getBlue()).flip();
  ramp.setRed(rBuffer);
  ramp.setGreen(gBuffer);
  ramp.setBlue(bBuffer);
  ramp.setSize(gammaRamp.getSize());
  ByteBuffer buffer=ramp.buffer();
  glfwSetGammaRamp(handle,buffer);
}"
96895,"public FPSCamera move(Vector3 dir,float amount){
  Vector3 deltaMove=position.add(dir.normalizeSelf().scaleSelf(amount));
  deltaMove.y=0;
  position=position.add(deltaMove);
  return this;
}","public FPSCamera move(Vector3 dir,float amount){
  position.addSelf(dir.normalize().scale(amount));
  return this;
}"
96896,"public void apply(){
  super.apply();
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  mView.initIdentity().multiplySelf(TransformUtils.createTranslation(temp.set(position).negateSelf())).multiplySelf(TransformUtils.createRotation(rotation));
  Vector3.REUSABLE_STACK.push(temp);
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}","public void apply(){
  super.apply();
  Vector3 tempVec3=Vector3.REUSABLE_STACK.pop();
  mView.initIdentity().multiplySelf(TransformUtils.createTranslation(tempVec3.set(position).negateSelf())).multiplySelf(TransformUtils.createRotation(rotation));
  Vector3.REUSABLE_STACK.push(tempVec3);
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}"
96897,"public Vector3 getUp(){
  return rotation.multiply(Vector3.AXIS_Y);
}","public Vector3 getUp(){
  return rotation.multiply(Vector3.AXIS_Y,up);
}"
96898,"public FPSCamera moveDown(float amount){
  return move(getUp().negate(),amount);
}","public FPSCamera moveDown(float amount){
  return move(getUp().negateSelf(),amount);
}"
96899,"public void setPosition(Vector3 position){
  this.position.set(position);
}","public FPSCamera setPosition(Vector3 position){
  this.position.set(position);
  return this;
}"
96900,"public Vector3 getRight(){
  return rotation.multiply(Vector3.AXIS_X);
}","public Vector3 getRight(){
  return rotation.multiply(Vector3.AXIS_X,right);
}"
96901,"public FPSCamera(float fovy,float aspect,float zNear,float zFar){
  mProj=TransformUtils.createPerspective(fovy,aspect,zNear,zFar).copy();
  mView=new Matrix4();
  position=new Vector3(0,0,1);
  rotation=new Quaternion();
}","public FPSCamera(float fovy,float aspect,float zNear,float zFar){
  mProj=TransformUtils.createPerspective(fovy,aspect,zNear,zFar).copy();
  mView=new Matrix4();
  position=new Vector3(0,0,1);
  rotation=new Quaternion();
  forward=new Vector3();
  right=new Vector3();
  up=new Vector3();
}"
96902,"public FPSCamera rotateX(float angle){
  Quaternion xRot=new Quaternion(Vector3.AXIS_X,angle);
  rotation=rotation.multiply(xRot);
  return this;
}","public FPSCamera rotateX(float angle){
  angleX+=angle;
  if (angleX < -ANGLE_LIMIT_X || angleX > ANGLE_LIMIT_X) {
    angleX-=angle;
    return this;
  }
  Quaternion tempQuat=Quaternion.REUSABLE_STACK.pop();
  Quaternion xRot=tempQuat.set(Vector3.AXIS_X,angle);
  rotation.multiplySelf(xRot);
  Quaternion.REUSABLE_STACK.push(tempQuat);
  return this;
}"
96903,"public FPSCamera rotateY(float angle){
  Quaternion yRot=new Quaternion(Vector3.AXIS_Y,angle);
  rotation=yRot.multiply(rotation);
  return this;
}","public FPSCamera rotateY(float angle){
  Quaternion tempQuat=Quaternion.REUSABLE_STACK.pop();
  Quaternion yRot=tempQuat.set(Vector3.AXIS_Y,angle);
  rotation.set(yRot.multiplySelf(rotation));
  Quaternion.REUSABLE_STACK.push(tempQuat);
  return this;
}"
96904,"public Vector3 getForward(){
  return rotation.multiply(Vector3.AXIS_Z.negate());
}","public Vector3 getForward(){
  return rotation.multiply(Vector3.AXIS_Z.negate(),forward);
}"
96905,"public ResourceLoader setLogo(Texture logo){
  logo.dispose();
  this.logo=logo;
  return instance;
}","public ResourceLoader setLogo(Texture logo){
  if (this.logo != null)   this.logo.dispose();
  this.logo=logo;
  return instance;
}"
96906,"public void init(){
  ResourceLoader loader=ResourceLoader.getInstance();
  int fontID1=loader.defineFont(""String_Node_Str"",TrueTypeFont.STYLE_NORMAL,24);
  int fontID2=loader.defineFont(""String_Node_Str"",TrueTypeFont.STYLE_ITALIC | TrueTypeFont.STYLE_BOLD,48);
  int textureID=loader.defineTexture(""String_Node_Str"");
  loader.startLoading();
  texture=loader.getTexture(textureID);
  font1=loader.getFont(fontID1);
  font2=loader.getFont(fontID2);
  cam=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
}","public void init(){
  ResourceLoader loader=ResourceLoader.getInstance();
  loader.setRenderProgressCallback(this::customProgressRenderCallback);
  int fontID1=loader.defineFont(""String_Node_Str"",TrueTypeFont.STYLE_NORMAL,24);
  int fontID2=loader.defineFont(""String_Node_Str"",TrueTypeFont.STYLE_ITALIC | TrueTypeFont.STYLE_BOLD,48);
  int textureID=loader.defineTexture(""String_Node_Str"");
  loader.startLoading();
  texture=loader.getTexture(textureID);
  font1=loader.getFont(fontID1);
  font2=loader.getFont(fontID2);
  cam=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
}"
96907,"/** 
 * Invoke the callback with the Game's Batcher and progress using the String provided.
 */
private void invokeRenderProgressCallback(String info){
  renderProgressCallback.invoke(Game.getBatcher(),updateProgress(),info);
}","/** 
 * Invoke the callback with the Game's Batcher and progress using the String provided.
 */
private void invokeRenderProgressCallback(String info){
  renderProgressCallback.invoke(Game.getBatcher(),updateProgress(),info);
  System.out.println(info);
}"
96908,"public void startLoading(){
  boolean recreateDisplay=Display.isResizable();
  if (recreateDisplay)   Display.setResizable(false);
  invokeRenderProgressCallback(""String_Node_Str"");
  for (  String texName : texturesToLoad.keySet()) {
    textures.put(texturesToLoad.get(texName),Texture.fromResource(texName));
    numLoaded++;
    invokeRenderProgressCallback(texName);
  }
  for (  String fontName : fontsToLoad.keySet()) {
    String[] parts=fontName.split(""String_Node_Str"");
    TrueTypeFont font;
    int style=Integer.parseInt(parts[1]);
    int size=Integer.parseInt(parts[2]);
    if (parts[0].endsWith(""String_Node_Str"")) {
      InputStream ttfStream=FileUtils.getResource(parts[0]);
      font=new TrueTypeFont(ttfStream,style,size,true);
    }
 else {
      font=new TrueTypeFont(parts[0],style,size);
    }
    fonts.put(fontsToLoad.get(fontName),font);
    numLoaded++;
    invokeRenderProgressCallback(fontName);
  }
  for (  String soundName : soundsToLoad.keySet()) {
    sounds.put(soundsToLoad.get(soundName),new Sound(soundName));
    numLoaded++;
    invokeRenderProgressCallback(soundName);
  }
  for (  String modelName : modelsToLoad.keySet()) {
    models.put(modelsToLoad.get(modelName),Model.load(modelName));
    numLoaded++;
    invokeRenderProgressCallback(modelName);
  }
  invokeRenderProgressCallback(""String_Node_Str"");
  if (recreateDisplay)   Display.setResizable(true);
}","public void startLoading(){
  if (texturesToLoad.size() + soundsToLoad.size() + fontsToLoad.size()+ modelsToLoad.size() == 0)   return;
  renderedProgress=0;
  numLoaded=0;
  boolean recreateDisplay=Display.isResizable() && !Display.isFullScreen();
  if (recreateDisplay)   Display.setResizable(false);
  invokeRenderProgressCallback(""String_Node_Str"");
  for (  String texName : texturesToLoad.keySet()) {
    textures.put(texturesToLoad.get(texName),Texture.fromResource(texName));
    numLoaded++;
    invokeRenderProgressCallback(texName);
  }
  for (  String fontName : fontsToLoad.keySet()) {
    String[] parts=fontName.split(""String_Node_Str"");
    TrueTypeFont font;
    int style=Integer.parseInt(parts[1]);
    int size=Integer.parseInt(parts[2]);
    if (parts[0].endsWith(""String_Node_Str"")) {
      InputStream ttfStream=FileUtils.getResource(parts[0]);
      font=new TrueTypeFont(ttfStream,style,size,true);
    }
 else {
      font=new TrueTypeFont(parts[0],style,size);
    }
    fonts.put(fontsToLoad.get(fontName),font);
    numLoaded++;
    invokeRenderProgressCallback(fontName);
  }
  for (  String soundName : soundsToLoad.keySet()) {
    sounds.put(soundsToLoad.get(soundName),new Sound(soundName));
    numLoaded++;
    invokeRenderProgressCallback(soundName);
  }
  for (  String modelName : modelsToLoad.keySet()) {
    models.put(modelsToLoad.get(modelName),Model.load(modelName));
    numLoaded++;
    invokeRenderProgressCallback(modelName);
  }
  invokeRenderProgressCallback(""String_Node_Str"");
  if (recreateDisplay)   Display.setResizable(true);
}"
96909,"public Vector2 rotateSelf(float angle){
  angle=(float)Math.toRadians(angle);
  return set(x * (float)Math.cos(angle) - y * (float)Math.sin(angle),x * (float)Math.sin(angle) + y * (float)Math.cos(angle));
}","public Vector2 rotateSelf(float angle){
  float cos=MathUtils.cos(angle);
  float sin=MathUtils.sin(angle);
  return set(x * cos - y * sin,x * sin + y * cos);
}"
96910,"public void rotate(float angle){
  if (angle == 0 || this instanceof Circle)   return;
  float width=maxX - minX;
  float height=maxY - minY;
  float originX=width / 2;
  float originY=height / 2;
  minX=minY=Float.POSITIVE_INFINITY;
  maxX=maxY=Float.NEGATIVE_INFINITY;
  for (  Vector2 vertex : vertices) {
    vertex.subtractSelf(originX,originY).rotateSelf(angle).addSelf(originX,originY);
    minX=Math.min(vertex.x,minX);
    minY=Math.min(vertex.y,minY);
    maxX=Math.max(vertex.x,maxX);
    maxY=Math.max(vertex.y,maxY);
  }
  rotation+=angle;
  updateBounds();
}","public void rotate(float angle,float originX,float originY){
  if (angle == 0 || this instanceof Circle)   return;
  for (  Vector2 vertex : vertices)   vertex.subtractSelf(originX,originY).rotateSelf(angle).addSelf(originX,originY);
  rotation+=angle;
}"
96911,"public void scale(float sx,float sy){
  minX=minY=Float.POSITIVE_INFINITY;
  maxX=maxY=Float.NEGATIVE_INFINITY;
  for (  Vector2 v : vertices) {
    v.scaleSelf(sx,sy);
    minX=Math.min(minX,v.x);
    minY=Math.min(minY,v.y);
    maxX=Math.max(maxX,v.x);
    maxY=Math.max(maxY,v.y);
  }
  updateBounds();
}","public void scale(float sx,float sy){
  vertices.forEach(v -> v.scaleSelf(sx,sy));
}"
96912,"public void setRotation(float rotation){
  rotate(rotation - this.rotation);
}","public void setRotation(float rotation){
  if (this.rotation == rotation)   return;
  rotate(rotation - this.rotation);
}"
96913,"private void updateBounds(){
  if (bounds == null)   bounds=new Rectangle();
  bounds.set(position.getX() + minX,position.getY() + minY,maxX - minX,maxY - minY);
}","private void updateBounds(){
  if (bounds == null)   bounds=new Rectangle();
  float minX, minY, maxX, maxY;
  minX=minY=Float.POSITIVE_INFINITY;
  maxX=maxY=Float.NEGATIVE_INFINITY;
  for (  Vector2 vertex : vertices) {
    minX=Math.min(minX,vertex.x);
    minY=Math.min(minY,vertex.y);
    maxX=Math.max(maxX,vertex.x);
    maxY=Math.max(maxY,vertex.y);
  }
  bounds.set(position.getX() + minX,position.getY() + minY,maxX - minX,maxY - minY);
}"
96914,"public void removeChild(SceneNode child){
  if (child.getParent() != this)   throw new SilenceException(""String_Node_Str"");
  if (children == null)   return;
  child.destroy();
  children.remove(child);
  child.setParent(null);
}","public void removeChild(SceneNode child){
  if (child.getParent() != this)   throw new SilenceException(""String_Node_Str"");
  if (children == null)   return;
  if (!child.isDestroyed())   child.destroy();
  children.remove(child);
  child.setParent(null);
}"
96915,"/** 
 * Sets the state of fullscreen of the Display.
 * @param fullScreen If true, window will be made fullscreen
 */
public static void setFullScreen(boolean fullScreen){
  if (Display.fullScreen == fullScreen)   return;
  Display.fullScreen=fullScreen;
  if (fullScreen) {
    VideoMode videoMode=Monitor.getPrimaryMonitor().getVideoMode();
    oldWidth=width;
    oldHeight=height;
    oldPosX=posX;
    oldPosY=posY;
    width=videoMode.getWidth();
    height=videoMode.getHeight();
  }
 else {
    width=oldWidth;
    height=oldHeight;
    posX=oldPosX;
    posY=oldPosY;
  }
  Window fsDisplayWindow=createWindow(width,height,title,fullScreen ? Monitor.getPrimaryMonitor() : null,displayWindow,true,resizable);
  displayWindow.destroy();
  displayWindow=fsDisplayWindow;
  setPosition(posX,posY);
  show();
  update();
}","/** 
 * Sets the state of fullscreen of the Display.
 * @param fullScreen If true, window will be made fullscreen
 */
public static void setFullScreen(boolean fullScreen){
  if (Display.fullScreen == fullScreen)   return;
  Display.fullScreen=fullScreen;
  if (fullScreen) {
    VideoMode videoMode=Monitor.getPrimaryMonitor().getVideoMode();
    oldWidth=width;
    oldHeight=height;
    oldPosX=posX;
    oldPosY=posY;
    width=videoMode.getWidth();
    height=videoMode.getHeight();
  }
 else {
    width=oldWidth;
    height=oldHeight;
    posX=oldPosX;
    posY=oldPosY;
  }
  Window fsDisplayWindow=createWindow(width,height,title,fullScreen ? Monitor.getPrimaryMonitor() : null,displayWindow,false,resizable);
  displayWindow.destroy();
  displayWindow=fsDisplayWindow;
  setPosition(posX,posY);
  setSize(width,height);
  hide();
  show();
  update();
}"
96916,"/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static Window createWindow(int width,int height,String title,Monitor monitor,Window parent,boolean visible,boolean resizable){
  if (Game.getBatcher() != null)   Game.getBatcher().dispose();
  Window.setHint(GLFW_SAMPLES,4);
  if (System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
    Window.setHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    Window.setHint(GLFW_CONTEXT_VERSION_MINOR,2);
  }
 else {
    Window.setHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    Window.setHint(GLFW_CONTEXT_VERSION_MINOR,3);
  }
  Window.setHint(GLFW_OPENGL_FORWARD_COMPAT,true);
  Window.setHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW_VISIBLE,visible);
  Window.setHint(GLFW_RESIZABLE,resizable);
  if (Game.development) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Window.setHint(GLFW_OPENGL_DEBUG_CONTEXT,true);
  }
  Window window=new Window(width,height,title,monitor,parent);
  window.makeCurrent();
  glfwSwapInterval(vSync ? 1 : 0);
  Game.setBatcher(new Batcher());
  window.setSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
);
  window.setKeyCallback(Keyboard::glfwKeyCallback);
  window.setPositionCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
);
  window.setCursorPositionCallback(Mouse::glfwCursorCallback);
  window.setScrollCallback(Mouse::glfwScrollCallback);
  window.setMouseButtonCallback(Mouse::glfwMouseButtonCallback);
  Display.dirty=true;
  Window.setDefaultHints();
  return window;
}","/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static Window createWindow(int width,int height,String title,Monitor monitor,Window parent,boolean visible,boolean resizable){
  if (Game.getBatcher() != null)   Game.getBatcher().dispose();
  Window.setHint(GLFW_SAMPLES,4);
  if (System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
    Window.setHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    Window.setHint(GLFW_CONTEXT_VERSION_MINOR,2);
  }
 else {
    Window.setHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    Window.setHint(GLFW_CONTEXT_VERSION_MINOR,3);
  }
  Window.setHint(GLFW_OPENGL_FORWARD_COMPAT,true);
  Window.setHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  Window.setHint(GLFW_VISIBLE,visible);
  Window.setHint(GLFW_RESIZABLE,resizable);
  width=MathUtils.clamp(width,2,Integer.MAX_VALUE);
  height=MathUtils.clamp(height,2,Integer.MAX_VALUE);
  if (Game.development) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Window.setHint(GLFW_OPENGL_DEBUG_CONTEXT,true);
  }
  Window window=new Window(width,height,title,monitor,parent);
  window.makeCurrent();
  glfwSwapInterval(vSync ? 1 : 0);
  Game.setBatcher(new Batcher());
  window.setSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
);
  window.setKeyCallback(Keyboard::glfwKeyCallback);
  window.setPositionCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
);
  window.setCursorPositionCallback(Mouse::glfwCursorCallback);
  window.setScrollCallback(Mouse::glfwScrollCallback);
  window.setMouseButtonCallback(Mouse::glfwMouseButtonCallback);
  Display.dirty=true;
  Window.setDefaultHints();
  return window;
}"
96917,"@Override public void init(){
  Logger.log(""String_Node_Str"" + getPlatform());
  if (getPlatform() == Platform.MACOSX) {
    Logger.log(""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  Logger.log(""String_Node_Str"");
  NativesLoader.loadLWJGL();
  Logger.log(""String_Node_Str"" + Sys.getVersion() + ""String_Node_Str"");
  if (glfwInit() != GL_TRUE)   throw new SilenceException(""String_Node_Str"");
  graphics=new GraphicsEngine();
  audio=new AudioEngine();
  collision=new CollisionEngine();
  input=new InputEngine();
  graphics.init();
  audio.init();
  collision.init();
  input.init();
  Logger.log(""String_Node_Str"" + getVersion() + ""String_Node_Str"");
}","@Override public void init(){
  Logger.log(""String_Node_Str"" + getPlatform());
  if (getPlatform() == Platform.MACOSX) {
    Logger.log(""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  Logger.log(""String_Node_Str"");
  NativesLoader.loadLWJGL();
  Logger.log(""String_Node_Str"" + Sys.getVersion() + ""String_Node_Str"");
  if (!GLFW3.init())   throw new SilenceException(""String_Node_Str"");
  graphics=new GraphicsEngine();
  audio=new AudioEngine();
  collision=new CollisionEngine();
  input=new InputEngine();
  graphics.init();
  audio.init();
  collision.init();
  input.init();
  Logger.log(""String_Node_Str"" + getVersion() + ""String_Node_Str"");
}"
96918,"@Override public void dispose(){
  audio.dispose();
  collision.dispose();
  input.dispose();
  graphics.dispose();
  Logger.log(""String_Node_Str"");
  glfwTerminate();
  Logger.log(""String_Node_Str"" + getVersion() + ""String_Node_Str"");
}","@Override public void dispose(){
  audio.dispose();
  collision.dispose();
  input.dispose();
  graphics.dispose();
  Logger.log(""String_Node_Str"");
  GLFW3.terminate();
  Logger.log(""String_Node_Str"" + getVersion() + ""String_Node_Str"");
}"
96919,"public boolean isPrimary(){
  return monitors.get(0).equals(this);
}","public boolean isPrimary(){
  return getMonitors().get(0).equals(this);
}"
96920,"private static Window createWindow(int width,int height,String title,Monitor monitor,Window share){
  if (Game.getBatcher() != null)   Game.getBatcher().dispose();
  setHints();
  Window window=new Window(width,height,title,monitor,share);
  window.makeCurrent();
  setCallbacks(window);
  clearHints();
  dirty=true;
  Game.setBatcher(new Batcher());
  return window;
}","private static Window createWindow(int width,int height,String title,Monitor monitor,Window share){
  if (Game.getBatcher() != null)   Game.getBatcher().dispose();
  setHints();
  Window window=new Window(width,height,title,monitor,share);
  window.makeCurrent();
  setCallbacks(window);
  clearHints();
  window.setPosition(posX,posY);
  dirty=true;
  Game.setBatcher(new Batcher());
  return window;
}"
96921,"public static void setResizable(boolean resizable){
  if (Display.resizable == resizable)   return;
  Window resizableWindow=createWindow(width,height,getTitle(),monitor,displayWindow);
  displayWindow.destroy();
  displayWindow=resizableWindow;
  displayWindow.show();
  displayWindow.makeCurrent();
  Display.resizable=resizable;
  dirty=true;
}","public static void setResizable(boolean resizable){
  if (Display.resizable == resizable)   return;
  Display.resizable=resizable;
  Window resizableWindow=createWindow(width,height,getTitle(),monitor,displayWindow);
  displayWindow.destroy();
  displayWindow=resizableWindow;
  displayWindow.makeCurrent();
  dirty=true;
  hide();
  show();
  update();
}"
96922,"/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  instance=this;
  SilenceEngine.getInstance().init();
  Logger.log(""String_Node_Str"");
  init();
  Runtime.getRuntime().gc();
  Logger.log(""String_Node_Str"");
  final double frameTime=1.0 / targetUPS;
  final double maxFrameSkips=10;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  int skippedFrames=0;
  previousTime=TimeUtils.currentTime();
  running=true;
  while (true) {
    SilenceEngine.getInstance().beginFrame();
    if (Display.isCloseRequested() || !isRunning())     break;
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      Graphics2D.getInstance().getCamera().initProjection(Display.getWidth(),Display.getHeight());
      resize();
      if (gameState != null)       gameState.resize();
    }
    currentTime=TimeUtils.currentTime();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime && skippedFrames < maxFrameSkips) {
      SilenceEngine.input.beginFrame();
{
        update((float)frameTime);
        if (gameState != null)         gameState.update((float)frameTime);
        GameTimer.updateTimers((float)frameTime);
      }
      SilenceEngine.input.endFrame();
      updatesProcessed++;
      lag-=frameTime;
      skippedFrames++;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    float lagOffset=(float)(lag / frameTime);
    render(lagOffset,batcher);
    if (gameState != null)     gameState.render(lagOffset,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    SilenceEngine.getInstance().endFrame();
    Display.update();
    skippedFrames=0;
    previousTime=currentTime;
  }
  Game.end();
}","/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  instance=this;
  SilenceEngine.getInstance().init();
  Logger.log(""String_Node_Str"");
  init();
  Runtime.getRuntime().gc();
  Logger.log(""String_Node_Str"");
  final double frameTime=1.0 / targetUPS;
  final double maxFrameSkips=10;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  int skippedFrames=0;
  previousTime=TimeUtils.currentTime();
  running=true;
  while (true) {
    SilenceEngine.getInstance().beginFrame();
    if (Display.isCloseRequested() || !isRunning()) {
      Game.end();
      break;
    }
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      Graphics2D.getInstance().getCamera().initProjection(Display.getWidth(),Display.getHeight());
      resize();
      if (gameState != null)       gameState.resize();
    }
    currentTime=TimeUtils.currentTime();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime && skippedFrames < maxFrameSkips) {
      SilenceEngine.input.beginFrame();
{
        update((float)frameTime);
        if (gameState != null)         gameState.update((float)frameTime);
        GameTimer.updateTimers((float)frameTime);
      }
      SilenceEngine.input.endFrame();
      updatesProcessed++;
      lag-=frameTime;
      skippedFrames++;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    float lagOffset=(float)(lag / frameTime);
    render(lagOffset,batcher);
    if (gameState != null)     gameState.render(lagOffset,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    SilenceEngine.getInstance().endFrame();
    Display.update();
    skippedFrames=0;
    previousTime=currentTime;
  }
  Game.end();
}"
96923,"public Quaternion slerpSelf(Quaternion target,float alpha){
  final float dot=dot(target);
  float scale1, scale2;
  if ((1 - dot) > 0.1) {
    float angle=MathUtils.acos(dot);
    float sinAngle=1f / MathUtils.sin(angle);
    scale1=MathUtils.sin((1f - alpha) * angle) * sinAngle;
    scale2=MathUtils.sin((alpha * angle)) * sinAngle;
  }
 else {
    scale1=1f - alpha;
    scale2=alpha;
  }
  if (dot < 0.f)   scale2=-scale2;
  x=(scale1 * x) + (scale2 * target.x);
  y=(scale1 * y) + (scale2 * target.y);
  z=(scale1 * z) + (scale2 * target.z);
  w=(scale1 * w) + (scale2 * target.w);
  return this;
}","public Quaternion slerpSelf(Quaternion target,float alpha){
  final float dot=dot(target);
  float scale1, scale2;
  if ((1 - dot) > 0.1)   return lerpSelf(target,alpha);
  scale1=1f - alpha;
  scale2=alpha;
  if (dot < 0.f)   scale2=-scale2;
  x=(scale1 * x) + (scale2 * target.x);
  y=(scale1 * y) + (scale2 * target.y);
  z=(scale1 * z) + (scale2 * target.z);
  w=(scale1 * w) + (scale2 * target.w);
  return this;
}"
96924,"public void normal(Vector3 n){
  normal(n.getX(),n.getY(),n.getZ(),1);
}","public void normal(Vector3 n){
  normal(n.getX(),n.getY(),n.getZ(),0);
}"
96925,"private AABB getAABB(Entity3D e){
  AABB aabb;
  if (aabbMap.containsKey(e.getID()))   aabb=aabbMap.get(e.getID());
 else {
    aabb=AABB.create(e);
    aabbMap.put(e.getID(),aabb);
  }
  Cuboid bounds=e.getBounds();
  aabb.min.set(e.getPosition()).subtractSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(aabb.min).addSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  return aabb;
}","private AABB getAABB(Entity3D e){
  AABB aabb;
  if (aabbMap.containsKey(e.getID()))   aabb=aabbMap.get(e.getID());
 else {
    aabb=AABB.create(e);
    aabbMap.put(e.getID(),aabb);
  }
  Cuboid bounds=e.getBounds();
  aabb.min.set(e.getPosition()).subtractSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(e.getPosition()).addSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  return aabb;
}"
96926,"@Override public List<Entity3D> retrieve(Polyhedron bounds){
  retrieveList.clear();
  AABB aabb=new AABB();
  aabb.min.set(bounds.getPosition()).subtractSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(aabb.min).addSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  queryNode(aabb,root);
  return retrieveList;
}","@Override public List<Entity3D> retrieve(Polyhedron bounds){
  retrieveList.clear();
  AABB aabb=new AABB();
  aabb.min.set(bounds.getPosition()).subtractSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  aabb.max.set(bounds.getPosition()).addSelf(bounds.getWidth() / 2,bounds.getHeight() / 2,bounds.getThickness() / 2);
  queryNode(aabb,root);
  return retrieveList;
}"
96927,"public void alignNextTo(Entity3D other){
  Vector3 tCenter=getPosition();
  Vector3 oCenter=other.getPosition();
  Vector3 direction=Vector3.REUSABLE_STACK.pop();
  direction.set(tCenter).subtractSelf(oCenter).normalizeSelf();
  setPosition(position.addSelf(direction));
  Collision3D.Response response=new Collision3D.Response();
  Collision3D.testPolyhedronCollision(polyhedron,other.polyhedron,response);
  setPosition(position.subtractSelf(response.getMinimumTranslationVector()));
  Vector3.REUSABLE_STACK.push(direction);
}","public void alignNextTo(Entity3D other){
  Collision3D.Response response=new Collision3D.Response();
  boolean intersection;
  do {
    response.clear();
    Collision3D.testPolyhedronCollision(polyhedron,other.polyhedron,response);
    intersection=response.getOverlapDistance() != 0;
    Vector3 mtv=response.getMinimumTranslationVector();
    setPosition(position.subtractSelf(mtv));
  }
 while (intersection);
}"
96928,"public static boolean isSeparatingAxis(Polyhedron a,Polyhedron b,Vector3 axis,Response response){
  if (response == null)   response=tmpResponse.clear();
  axis.x=(axis.x == -0f) ? -1 : axis.x;
  axis.y=(axis.y == -0f) ? -1 : axis.y;
  axis.z=(axis.z == -0f) ? -1 : axis.z;
  Vector3 tmpOffset=Vector3.REUSABLE_STACK.pop();
  Vector2 tmpRangeA=Vector2.REUSABLE_STACK.pop();
  Vector2 tmpRangeB=Vector2.REUSABLE_STACK.pop();
  Vector3 offset=tmpOffset.set(b.getPosition()).subtractSelf(a.getPosition());
  float projectedOffset=offset.dot(axis);
  Vector2 rangeA=flattenPoints(a.getVertices(),axis,tmpRangeA);
  Vector2 rangeB=flattenPoints(b.getVertices(),axis,tmpRangeB);
  rangeB.addSelf(projectedOffset,projectedOffset);
  if (rangeA.x > rangeB.y || rangeB.x > rangeA.y) {
    Vector3.REUSABLE_STACK.push(tmpOffset);
    Vector2.REUSABLE_STACK.push(tmpRangeA);
    Vector2.REUSABLE_STACK.push(tmpRangeB);
    return true;
  }
  float overlap;
  if (rangeA.x < rangeB.x) {
    response.aInB=false;
    if (rangeA.y < rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.bInA=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
 else {
    response.bInA=false;
    if (rangeA.y > rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.aInB=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
  overlap=Math.abs(overlap);
  if (overlap < response.overlap) {
    response.overlap=overlap;
    response.overlapN.set(axis.normalizeSelf());
    if (overlap < 0)     response.overlapN.negateSelf();
  }
  Vector3.REUSABLE_STACK.push(tmpOffset);
  Vector2.REUSABLE_STACK.push(tmpRangeA);
  Vector2.REUSABLE_STACK.push(tmpRangeB);
  return false;
}","public static boolean isSeparatingAxis(Polyhedron a,Polyhedron b,Vector3 axis,Response response){
  if (response == null)   response=tmpResponse.clear();
  Vector3 tmpOffset=Vector3.REUSABLE_STACK.pop();
  Vector2 tmpRangeA=Vector2.REUSABLE_STACK.pop();
  Vector2 tmpRangeB=Vector2.REUSABLE_STACK.pop();
  Vector3 offset=tmpOffset.set(b.getPosition()).subtractSelf(a.getPosition());
  float projectedOffset=offset.dot(axis);
  Vector2 rangeA=flattenPoints(a.getVertices(),axis,tmpRangeA);
  Vector2 rangeB=flattenPoints(b.getVertices(),axis,tmpRangeB);
  rangeB.addSelf(projectedOffset,projectedOffset);
  if (rangeA.x > rangeB.y || rangeB.x > rangeA.y) {
    Vector3.REUSABLE_STACK.push(tmpOffset);
    Vector2.REUSABLE_STACK.push(tmpRangeA);
    Vector2.REUSABLE_STACK.push(tmpRangeB);
    return true;
  }
  float overlap;
  if (rangeA.x < rangeB.x) {
    response.aInB=false;
    if (rangeA.y < rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.bInA=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
 else {
    response.bInA=false;
    if (rangeA.y > rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.aInB=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
  overlap=Math.abs(overlap);
  if (overlap < response.overlap) {
    response.overlap=overlap;
    response.overlapN.set(axis.normalizeSelf());
    if (overlap < 0)     response.overlapN.negateSelf();
  }
  Vector3.REUSABLE_STACK.push(tmpOffset);
  Vector2.REUSABLE_STACK.push(tmpRangeA);
  Vector2.REUSABLE_STACK.push(tmpRangeB);
  return false;
}"
96929,"/** 
 * Rotates the entity by a specified angle
 * @param rx The angle to rate with on X-axis (in degrees)
 * @param ry The angle to rate with on Y-axis (in degrees)
 * @param rz The angle to rate with on Z-axis (in degrees)
 */
public void rotate(float rx,float ry,float rz){
  polyhedron.rotate(rx,ry,rz);
  getLocalTransform().reset().translate(getPosition()).rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}","/** 
 * Rotates the entity by a specified angle
 * @param rx The angle to rate with on X-axis (in degrees)
 * @param ry The angle to rate with on Y-axis (in degrees)
 * @param rz The angle to rate with on Z-axis (in degrees)
 */
public void rotate(float rx,float ry,float rz){
  polyhedron.rotate(rx,ry,rz);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}"
96930,"/** 
 * Sets the position of this entity
 * @param position The new position as a Vector3
 */
public void setPosition(Vector3 position){
  this.position=position;
  polyhedron.setPosition(position);
  getLocalTransform().reset().translate(getPosition()).rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY());
}","/** 
 * Sets the position of this entity
 * @param position The new position as a Vector3
 */
public void setPosition(Vector3 position){
  this.position=position;
  polyhedron.setPosition(position);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}"
96931,"/** 
 * Prepares this Entity3D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector3.ZERO)   return;
  position.addSelf(velocity);
  polyhedron.setPosition(position);
  getLocalTransform().reset().translate(getPosition()).rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY());
}","/** 
 * Prepares this Entity3D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector3.ZERO)   return;
  position.addSelf(velocity);
  polyhedron.setPosition(position);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}"
96932,"public Cuboid(Vector3 min,Vector3 max){
  this();
  Vector3 size=max.subtract(min);
  width=size.x;
  height=size.y;
  thickness=size.z;
  setPosition(min.add(max).scale(0.5f));
  updateVertices();
}","public Cuboid(Vector3 min,Vector3 max){
  this();
  Vector3 size=max.subtract(min);
  width=size.x;
  height=size.y;
  thickness=size.z;
  setPosition(min.add(max).scaleSelf(0.5f));
  updateVertices();
}"
96933,"public float getThickness(){
  return getBounds().getThickness();
}","public float getThickness(){
  return maxZ - minZ;
}"
96934,"public float getWidth(){
  return getBounds().getWidth();
}","public float getWidth(){
  return maxX - minX;
}"
96935,"public float getHeight(){
  return getBounds().getHeight();
}","public float getHeight(){
  return maxY - minY;
}"
96936,"public FPSCamera move(Vector3 dir,float amount){
  Vector3 deltaMove=position.add(dir.normalize().scale(amount));
  deltaMove.y=0;
  position=position.add(deltaMove);
  return this;
}","public FPSCamera move(Vector3 dir,float amount){
  Vector3 deltaMove=position.add(dir.normalizeSelf().scaleSelf(amount));
  deltaMove.y=0;
  position=position.add(deltaMove);
  return this;
}"
96937,"public void apply(){
  super.apply();
  mView.initIdentity().multiply(TransformUtils.createTranslation(position.negate())).multiply(TransformUtils.createRotation(rotation));
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}","public void apply(){
  super.apply();
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  mView.initIdentity().multiply(TransformUtils.createTranslation(temp.set(position).negateSelf())).multiply(TransformUtils.createRotation(rotation));
  Vector3.REUSABLE_STACK.push(temp);
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}"
96938,"public void setPosition(Vector3 position){
  this.position=position;
}","public void setPosition(Vector3 position){
  this.position.set(position);
}"
96939,"public void apply(){
  super.apply();
  mView.initIdentity().multiply(TransformUtils.createTranslation(tempVec3.set(position).negateSelf())).multiply(TransformUtils.createRotation(rotation));
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}","public void apply(){
  super.apply();
  Vector3 tempVec3=Vector3.REUSABLE_STACK.pop();
  mView.initIdentity().multiply(TransformUtils.createTranslation(tempVec3.set(position).negateSelf())).multiply(TransformUtils.createRotation(rotation));
  Vector3.REUSABLE_STACK.push(tempVec3);
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}"
96940,"public PerspCam lookAt(Vector3 point){
  Vector3 forward=point.subtract(position).normalizeSelf();
  Vector3 up=Vector3.AXIS_Y;
  Vector3 negativeZ=tempVec.set(Vector3.AXIS_Z).negateSelf();
  float dot=negativeZ.dot(forward);
  if (Math.abs(dot + 1) < 0.000001f) {
    rotation.set(up.x,up.y,up.z,(float)Math.PI);
    return this;
  }
  if (Math.abs(dot - 1) < 0.000001f) {
    rotation.set();
    return this;
  }
  float rotAngle=MathUtils.acos(dot);
  Vector3 rotAxis=negativeZ.crossSelf(forward).normalizeSelf();
  rotation.set(rotAxis,rotAngle);
  return this;
}","public PerspCam lookAt(Vector3 point){
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  Vector3 forward=temp.set(point).subtractSelf(position).normalizeSelf();
  Vector3 up=Vector3.AXIS_Y;
  Vector3 negativeZ=tempVec.set(Vector3.AXIS_Z).negateSelf();
  float dot=negativeZ.dot(forward);
  if (Math.abs(dot + 1) < 0.000001f) {
    rotation.set(up.x,up.y,up.z,(float)Math.PI);
    return this;
  }
  if (Math.abs(dot - 1) < 0.000001f) {
    rotation.set();
    return this;
  }
  float rotAngle=MathUtils.acos(dot);
  Vector3 rotAxis=negativeZ.crossSelf(forward).normalizeSelf();
  rotation.set(rotAxis,rotAngle);
  Vector3.REUSABLE_STACK.push(temp);
  return this;
}"
96941,"public void setPosition(Vector3 position){
  this.position=position;
}","public void setPosition(Vector3 position){
  this.position.set(position);
}"
96942,"/** 
 * Rotates the entity by a specified angle
 * @param angle The angle to rate with (in degrees)
 */
public void rotate(float angle){
  polygon.rotate(angle);
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}","/** 
 * Rotates the entity by a specified angle
 * @param angle The angle to rate with (in degrees)
 */
public void rotate(float angle){
  polygon.rotate(angle);
  getLocalTransform().reset().translate(tempVec2.set(getPosition()).subtractSelf(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
96943,"/** 
 * Sets the position of this entity
 * @param position The new position as a Vector2
 */
public void setPosition(Vector2 position){
  this.position=position;
  polygon.setPosition(position);
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}","/** 
 * Sets the position of this entity
 * @param position The new position as a Vector2
 */
public void setPosition(Vector2 position){
  this.position.set(position);
  polygon.setPosition(position);
  getLocalTransform().reset().translate(tempVec2.set(getPosition()).subtractSelf(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
96944,"/** 
 * Sets the velocity of this entity
 * @param velocity The velocity as a Vector2
 */
public void setVelocity(Vector2 velocity){
  this.velocity=velocity;
}","/** 
 * Sets the velocity of this entity
 * @param velocity The velocity as a Vector2
 */
public void setVelocity(Vector2 velocity){
  this.velocity.set(velocity);
}"
96945,"/** 
 * Sets the center position of this entity. Note that the same rotation is also applied to the polygon this entity is using.
 * @param center The new center position
 */
public void setCenter(Vector2 center){
  polygon.setCenter(center);
  position=polygon.getPosition();
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}","/** 
 * Sets the center position of this entity. Note that the same rotation is also applied to the polygon this entity is using.
 * @param center The new center position
 */
public void setCenter(Vector2 center){
  polygon.setCenter(center);
  position.set(polygon.getPosition());
  getLocalTransform().reset().translate(tempVec2.set(getPosition()).subtractSelf(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
96946,"/** 
 * Sets the rotation of this entity. Note that the same rotation is also applied to the polygon this entity is using.
 * @param rotation The amount of rotation (in degrees)
 */
public void setRotation(float rotation){
  polygon.setRotation(rotation);
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}","/** 
 * Sets the rotation of this entity. Note that the same rotation is also applied to the polygon this entity is using.
 * @param rotation The amount of rotation (in degrees)
 */
public void setRotation(float rotation){
  polygon.setRotation(rotation);
  getLocalTransform().reset().translate(tempVec2.set(getPosition()).subtractSelf(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
96947,"public void alignNextTo(Entity2D other){
  Vector2 tCenter=getCenter();
  Vector2 oCenter=other.getCenter();
  Vector2 direction=tCenter.subtract(oCenter).normalizeSelf();
  setCenter(direction.addSelf(getCenter()));
  Collision2D.Response response=new Collision2D.Response();
  Collision2D.testPolygonCollision(polygon,other.getPolygon(),response);
  setPosition(position.subtract(response.getMinimumTranslationVector()));
}","public void alignNextTo(Entity2D other){
  Vector2 tCenter=getCenter();
  Vector2 oCenter=other.getCenter();
  Vector2 direction=tCenter.subtract(oCenter).normalizeSelf();
  setCenter(direction.addSelf(getCenter()));
  Collision2D.Response response=new Collision2D.Response();
  Collision2D.testPolygonCollision(polygon,other.getPolygon(),response);
  setPosition(tempVec2.set(position).subtractSelf(response.getMinimumTranslationVector()));
}"
96948,"/** 
 * Prepares this Entity2D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector2.ZERO)   return;
  position=position.add(velocity);
  polygon.setPosition(position);
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}","/** 
 * Prepares this Entity2D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector2.ZERO)   return;
  setPosition(tempVec2.set(position).addSelf(velocity));
  getLocalTransform().reset().translate(tempVec2.set(getPosition()).subtractSelf(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
96949,"public Vector2(Vector4 v){
  x=v.x;
  y=v.y;
}","public Vector2(Vector4 v){
  this(v.x,v.y);
}"
96950,"public void render(float delta,Batcher batcher){
  RenderUtils.fillPolygon(batcher,getPolygon(),getVelocity().scale(delta),color);
  RenderUtils.tracePolygon(batcher,getPolygon(),getVelocity().scale(delta),Color.GREEN);
}","public void render(float delta,Batcher batcher){
  RenderUtils.fillPolygon(batcher,getPolygon(),temp.set(getVelocity()),color);
  RenderUtils.tracePolygon(batcher,getPolygon(),temp.set(getVelocity()),Color.GREEN);
}"
96951,"public void render(float delta,Batcher batcher){
  cam.apply();
  scene.render(delta,batcher);
  RenderUtils.tracePolyhedron(batcher,entity.getPolyhedron());
}","public void render(float delta,Batcher batcher){
  cam.apply();
  scene.render(delta,batcher);
}"
96952,"public static void fillPolygon(Batcher b,Polygon polygon,Vector2 position,Color color){
  b.begin(Primitive.TRIANGLE_FAN);
{
    for (    Vector2 vertex : polygon.getVertices()) {
      b.vertex(tempVec2.set(vertex).addSelf(polygon.getPosition().addSelf(position)));
      b.color(color);
    }
  }
  b.end();
}","public static void fillPolygon(Batcher b,Polygon polygon,Vector2 position,Color color){
  b.begin(Primitive.TRIANGLE_FAN);
{
    for (    Vector2 vertex : polygon.getVertices()) {
      b.vertex(tempVec2.set(vertex).addSelf(polygon.getPosition()).addSelf(position));
      b.color(color);
    }
  }
  b.end();
}"
96953,"public static void tracePolygon(Batcher b,Polygon polygon,Vector2 position,Color color){
  b.begin(Primitive.LINE_LOOP);
{
    for (    Vector2 vertex : polygon.getVertices()) {
      b.vertex(tempVec2.set(vertex).addSelf(polygon.getPosition().addSelf(position)));
      b.color(color);
    }
  }
  b.end();
}","public static void tracePolygon(Batcher b,Polygon polygon,Vector2 position,Color color){
  b.begin(Primitive.LINE_LOOP);
{
    for (    Vector2 vertex : polygon.getVertices()) {
      b.vertex(tempVec2.set(vertex).addSelf(polygon.getPosition()).addSelf(position));
      b.color(color);
    }
  }
  b.end();
}"
96954,"public Vector3 multiply(Vector3 v,Vector3 dest){
  Vector3 tempVec3=Vector3.REUSABLE_STACK.pop();
  Quaternion temp1=Quaternion.REUSABLE_STACK.pop();
  Quaternion temp2=Quaternion.REUSABLE_STACK.pop();
  Quaternion temp3=Quaternion.REUSABLE_STACK.pop();
  Vector3 vn=tempVec3.set(v).normalizeSelf();
  Quaternion q1=temp1.set(this).conjugateSelf();
  Quaternion qv=temp2.set(vn.x,vn.y,vn.z,1);
  qv=temp3.set(this).multiplySelf(qv);
  qv.multiplySelf(q1);
  dest.set(qv.x,qv.y,qv.z).normalizeSelf().scaleSelf(v.length());
  Vector3.REUSABLE_STACK.push(tempVec3);
  Quaternion.REUSABLE_STACK.push(temp1);
  Quaternion.REUSABLE_STACK.push(temp2);
  Quaternion.REUSABLE_STACK.push(temp3);
  return dest;
}","public Vector3 multiply(Vector3 v,Vector3 dest){
  Vector3 temp=Vector3.REUSABLE_STACK.pop();
  Quaternion temp1=Quaternion.REUSABLE_STACK.pop();
  Quaternion temp2=Quaternion.REUSABLE_STACK.pop();
  Quaternion temp3=Quaternion.REUSABLE_STACK.pop();
  v=temp.set(v).normalizeSelf();
  Quaternion q1=temp1.set(this).conjugateSelf();
  Quaternion qv=temp2.set(v.x,v.y,v.z,1);
  Quaternion q=this;
  Quaternion res=temp3.set(q).multiplySelf(qv.multiplySelf(q1));
  dest.x=res.x;
  dest.y=res.y;
  dest.z=res.z;
  Vector3.REUSABLE_STACK.push(temp);
  Quaternion.REUSABLE_STACK.push(temp1);
  Quaternion.REUSABLE_STACK.push(temp2);
  Quaternion.REUSABLE_STACK.push(temp3);
  return dest;
}"
96955,"/** 
 * Rotates the entity by a specified angle
 * @param rx The angle to rate with on X-axis (in degrees)
 * @param ry The angle to rate with on Y-axis (in degrees)
 * @param rz The angle to rate with on Z-axis (in degrees)
 */
public void rotate(float rx,float ry,float rz){
  polyhedron.rotate(rx,ry,rz);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}","/** 
 * Rotates the entity by a specified angle
 * @param rx The angle to rate with on X-axis (in degrees)
 * @param ry The angle to rate with on Y-axis (in degrees)
 * @param rz The angle to rate with on Z-axis (in degrees)
 */
public void rotate(float rx,float ry,float rz){
  polyhedron.rotate(rx,ry,rz);
  updateTransforms();
}"
96956,"/** 
 * Sets the y-coordinate of the position
 * @param y The y-coordinate of the position
 */
public void setY(float y){
  position.setY(y);
  polyhedron.setPosition(position);
}","/** 
 * Sets the y-coordinate of the position
 * @param y The y-coordinate of the position
 */
public void setY(float y){
  position.setY(y);
  polyhedron.setPosition(position);
  updateTransforms();
}"
96957,"/** 
 * Sets the x-coordinate of the position
 * @param x The x-coordinate of the position
 */
public void setX(float x){
  position.setX(x);
  polyhedron.setPosition(position);
}","/** 
 * Sets the x-coordinate of the position
 * @param x The x-coordinate of the position
 */
public void setX(float x){
  position.setX(x);
  polyhedron.setPosition(position);
  updateTransforms();
}"
96958,"/** 
 * Sets the z-coordinate of the position
 * @param z The z-coordinate of the position
 */
public void setZ(float z){
  position.setZ(z);
  polyhedron.setPosition(position);
}","/** 
 * Sets the z-coordinate of the position
 * @param z The z-coordinate of the position
 */
public void setZ(float z){
  position.setZ(z);
  polyhedron.setPosition(position);
  updateTransforms();
}"
96959,"/** 
 * Sets the position of this entity
 * @param position The new position as a Vector3
 */
public void setPosition(Vector3 position){
  this.position=position;
  polyhedron.setPosition(position);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}","/** 
 * Sets the position of this entity
 * @param position The new position as a Vector3
 */
public void setPosition(Vector3 position){
  this.position.set(position);
  polyhedron.setPosition(position);
  updateTransforms();
}"
96960,"/** 
 * Prepares this Entity3D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector3.ZERO)   return;
  position.addSelf(velocity);
  polyhedron.setPosition(position);
  getLocalTransform().reset().rotate(Vector3.AXIS_X,polyhedron.getRotationX()).rotate(Vector3.AXIS_Z,polyhedron.getRotationZ()).rotate(Vector3.AXIS_Y,polyhedron.getRotationY()).translate(getPosition());
}","/** 
 * Prepares this Entity3D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  if (isDestroyed())   return;
  update(delta);
  if (velocity == Vector3.ZERO)   return;
  position.addSelf(velocity);
  polyhedron.setPosition(position);
  updateTransforms();
}"
96961,"public void setPosition(Vector3 position){
  this.position=position;
  if (bounds != null)   bounds.setPosition(position);
}","public void setPosition(Vector3 position){
  this.position.set(position);
  if (bounds != null)   bounds.setPosition(position);
}"
96962,"@Override public void checkCollisions(){
  if (scene.getChildren().size() != childrenInScene) {
    entities.clear();
    quadTree.clear();
    childrenInScene=0;
    for (    SceneNode child : scene.getChildren()) {
      if (child instanceof Entity2D) {
        Entity2D entity=(Entity2D)child;
        quadTree.insert(entity);
        entities.add(entity);
      }
      childrenInScene++;
    }
  }
  for (  Entity2D entity : entities) {
    if (entity.getVelocity() != Vector2.ZERO) {
      quadTree.remove(entity);
      quadTree.insert(entity);
    }
  }
  for (  Class<? extends Entity2D> class1 : collisionMap.keySet())   for (  Entity2D entity : entities)   if (class1.isInstance(entity)) {
    List<Entity2D> collidables=quadTree.retrieve(entity);
    for (    Entity2D entity2 : collidables)     if (collisionMap.get(class1).isInstance(entity2))     if (entity.getPolygon().intersects(entity2.getPolygon()))     entity.collision(entity2);
  }
}","@Override public void checkCollisions(){
  if (scene.getChildren().size() != childrenInScene) {
    entities.clear();
    quadTree.clear();
    childrenInScene=0;
    for (    SceneNode child : scene.getChildren()) {
      if (child instanceof Entity2D) {
        Entity2D entity=(Entity2D)child;
        quadTree.insert(entity);
        entities.add(entity);
      }
      childrenInScene++;
    }
  }
  for (  Entity2D entity : entities) {
    if (entity.getVelocity() != Vector2.ZERO) {
      quadTree.remove(entity);
      quadTree.insert(entity);
    }
  }
  for (  Class<? extends Entity2D> class1 : collisionMap.keySet())   for (  Entity2D entity : entities)   if (class1.isInstance(entity)) {
    List<Entity2D> collidables=quadTree.retrieve(entity);
    for (    Entity2D entity2 : collidables)     if (collisionMap.get(class1).isInstance(entity2))     if (entity != entity2)     if (entity.getPolygon().intersects(entity2.getPolygon()))     entity.collision(entity2);
  }
}"
96963,"public boolean isBInsideA(){
  return bInA;
}","public boolean isBInsideA(){
  return bInA && intersection;
}"
96964,"public Vector2 getOverlapAxis(){
  return overlapN;
}","public Vector2 getOverlapAxis(){
  return intersection ? overlapN : Vector2.ZERO;
}"
96965,"public boolean isAInsideB(){
  return aInB;
}","public boolean isAInsideB(){
  return aInB && intersection;
}"
96966,"public static boolean testPolygonCollision(Polygon a,Polygon b,Response response){
  if (response == null)   response=tmpResponse.clear();
  for (int i=0; i < a.vertexCount(); i++) {
    Vector2 e1=a.getVertex(i);
    Vector2 e2=a.getVertex((i + 1) % a.vertexCount());
    Vector2 edge=e2.subtract(e1);
    Vector2 normal=edge.perpendicular().normalize();
    if (isSeparatingAxis(a,b,normal,response))     return false;
  }
  for (int i=0; i < b.vertexCount(); i++) {
    Vector2 e1=b.getVertex(i);
    Vector2 e2=b.getVertex((i + 1) % b.vertexCount());
    Vector2 edge=e2.subtract(e1);
    Vector2 normal=edge.perpendicular().normalize();
    if (isSeparatingAxis(a,b,normal,response))     return false;
  }
  response.a=a;
  response.b=b;
  response.overlapV=response.overlapN.scale(response.overlap);
  return true;
}","public static boolean testPolygonCollision(Polygon a,Polygon b,Response response){
  if (response == null)   response=tmpResponse.clear();
  for (int i=0; i < a.vertexCount(); i++) {
    Vector2 e1=a.getVertex(i);
    Vector2 e2=a.getVertex((i + 1) % a.vertexCount());
    Vector2 edge=e2.subtract(e1);
    Vector2 normal=edge.perpendicular().normalize();
    if (isSeparatingAxis(a,b,normal,response))     return false;
  }
  for (int i=0; i < b.vertexCount(); i++) {
    Vector2 e1=b.getVertex(i);
    Vector2 e2=b.getVertex((i + 1) % b.vertexCount());
    Vector2 edge=e2.subtract(e1);
    Vector2 normal=edge.perpendicular().normalize();
    if (isSeparatingAxis(a,b,normal,response))     return false;
  }
  response.a=a;
  response.b=b;
  response.overlapV=response.overlapN.scale(response.overlap);
  response.intersection=true;
  return true;
}"
96967,"public Response clear(){
  aInB=true;
  bInA=true;
  overlap=Float.MAX_VALUE;
  return this;
}","public Response clear(){
  aInB=true;
  bInA=true;
  intersection=false;
  overlap=Float.MAX_VALUE;
  return this;
}"
96968,"public float getOverlapDistance(){
  return overlap;
}","public float getOverlapDistance(){
  return intersection ? overlap : 0;
}"
96969,"public Vector2 getMinimumTranslationVector(){
  return overlapV;
}","public Vector2 getMinimumTranslationVector(){
  return intersection ? overlapV : Vector2.ZERO;
}"
96970,"public boolean isBInsideA(){
  return bInA;
}","public boolean isBInsideA(){
  return bInA && intersection;
}"
96971,"public Vector3 getOverlapAxis(){
  return overlapN;
}","public Vector3 getOverlapAxis(){
  return intersection ? overlapN : Vector3.ZERO;
}"
96972,"public boolean isAInsideB(){
  return aInB;
}","public boolean isAInsideB(){
  return aInB && intersection;
}"
96973,"public Response clear(){
  aInB=true;
  bInA=true;
  overlap=Float.MAX_VALUE;
  return this;
}","public Response clear(){
  aInB=true;
  bInA=true;
  intersection=false;
  overlap=Float.POSITIVE_INFINITY;
  return this;
}"
96974,"public static boolean isSeparatingAxis(Polyhedron a,Polyhedron b,Vector3 axis,Response response){
  if (response == null)   response=tmpResponse.clear();
  Vector3 offset=b.getPosition().subtract(a.getPosition());
  float projectedOffset=offset.dot(axis);
  Vector2 rangeA=flattenPoints(a.getVertices(),axis);
  Vector2 rangeB=flattenPoints(b.getVertices(),axis);
  rangeB=rangeB.add(projectedOffset,projectedOffset);
  if (rangeA.x > rangeB.y || rangeB.x > rangeA.y)   return true;
  float overlap=0;
  if (rangeA.x < rangeB.x) {
    response.aInB=false;
    if (rangeA.y < rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.bInA=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
 else {
    response.bInA=false;
    if (rangeA.y > rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.aInB=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
  overlap=Math.abs(overlap);
  if (overlap < response.overlap) {
    response.overlap=overlap;
    response.overlapN.set(axis.normalize());
    if (overlap < 0)     response.overlapN=response.overlapN.negate();
  }
  return false;
}","public static boolean isSeparatingAxis(Polyhedron a,Polyhedron b,Vector3 axis,Response response){
  if (response == null)   response=tmpResponse.clear();
  axis.x=(axis.x == -0f) ? -1 : axis.x;
  axis.y=(axis.y == -0f) ? -1 : axis.y;
  axis.z=(axis.z == -0f) ? -1 : axis.z;
  Vector3 offset=b.getPosition().subtract(a.getPosition());
  float projectedOffset=offset.dot(axis);
  Vector2 rangeA=flattenPoints(a.getVertices(),axis);
  Vector2 rangeB=flattenPoints(b.getVertices(),axis);
  rangeB=rangeB.add(projectedOffset,projectedOffset);
  if (rangeA.x > rangeB.y || rangeB.x > rangeA.y)   return true;
  float overlap;
  if (rangeA.x < rangeB.x) {
    response.aInB=false;
    if (rangeA.y < rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.bInA=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
 else {
    response.bInA=false;
    if (rangeA.y > rangeB.y) {
      overlap=rangeA.y - rangeB.x;
      response.aInB=false;
    }
 else {
      float option1=rangeA.y - rangeB.x;
      float option2=rangeB.y - rangeA.x;
      overlap=option1 < option2 ? option1 : -option2;
    }
  }
  overlap=Math.abs(overlap);
  if (overlap < response.overlap) {
    response.overlap=overlap;
    response.overlapN.set(axis.normalize());
    if (overlap < 0)     response.overlapN=response.overlapN.negate();
  }
  return false;
}"
96975,"public float getOverlapDistance(){
  return overlap;
}","public float getOverlapDistance(){
  return intersection ? overlap : 0;
}"
96976,"public Vector3 getMinimumTranslationVector(){
  return overlapV;
}","public Vector3 getMinimumTranslationVector(){
  return intersection ? overlapV : Vector3.ZERO;
}"
96977,"private void rotate(Vector3 axis,float angle){
  minX=minY=minZ=Float.POSITIVE_INFINITY;
  maxX=maxY=maxZ=Float.NEGATIVE_INFINITY;
  for (  Vector3 v : vertices) {
    v.set(v.rotate(axis,angle).scale(2));
    minX=Math.min(minX,v.x);
    minY=Math.min(minY,v.y);
    minZ=Math.min(minZ,v.z);
    maxX=Math.max(maxX,v.x);
    maxY=Math.max(maxY,v.y);
    maxZ=Math.max(maxZ,v.z);
  }
  bounds=new Cuboid(new Vector3(minX / 2,minY / 2,minZ / 2).add(position),new Vector3(maxX / 2,maxY / 2,maxZ / 2).add(position));
}","private void rotate(Vector3 axis,float angle){
  minX=minY=minZ=Float.POSITIVE_INFINITY;
  maxX=maxY=maxZ=Float.NEGATIVE_INFINITY;
  for (  Vector3 v : vertices) {
    v.set(v.rotate(axis.normalize(),angle));
    minX=Math.min(minX,v.x);
    minY=Math.min(minY,v.y);
    minZ=Math.min(minZ,v.z);
    maxX=Math.max(maxX,v.x);
    maxY=Math.max(maxY,v.y);
    maxZ=Math.max(maxZ,v.z);
  }
  bounds=new Cuboid(new Vector3(minX / 2,minY / 2,minZ / 2).add(position),new Vector3(maxX / 2,maxY / 2,maxZ / 2).add(position));
}"
96978,"private void updateVertices(){
  clearVertices();
  final int bandPower=6;
  final int bandPoints=(int)Math.pow(2,bandPower);
  final int bandMask=bandPoints - 2;
  final int sectionsInBand=(bandPoints / 2) - 1;
  final int totalPoints=sectionsInBand * bandPoints;
  final float sectionArc=6.28f / sectionsInBand;
  final float radius=-this.radius;
  float xAngle;
  float yAngle;
  for (int i=0; i < totalPoints; i++) {
    xAngle=(float)(i & 1) + (i >> bandPower);
    yAngle=(float)((i & bandMask) >> 1) + ((i >> bandPower) * sectionsInBand);
    xAngle*=sectionArc / 2f;
    yAngle*=sectionArc * -1;
    float x=(float)(radius * Math.sin(xAngle) * Math.sin(yAngle));
    float y=(float)(radius * Math.cos(xAngle));
    float z=(float)(radius * Math.sin(xAngle) * Math.cos(yAngle));
    addVertex(new Vector3(x,y,z));
  }
}","private void updateVertices(){
  clearVertices();
  final int bandPower=6;
  final int bandPoints=(int)Math.pow(2,bandPower);
  final int bandMask=bandPoints - 2;
  final int sectionsInBand=(bandPoints / 2) - 1;
  final int totalPoints=sectionsInBand * bandPoints;
  final float sectionArc=6.28f / sectionsInBand;
  final float diameter=-(2 * this.radius);
  float xAngle;
  float yAngle;
  for (int i=0; i < totalPoints; i++) {
    xAngle=(float)(i & 1) + (i >> bandPower);
    yAngle=(float)((i & bandMask) >> 1) + ((i >> bandPower) * sectionsInBand);
    xAngle*=sectionArc / 2f;
    yAngle*=sectionArc * -1;
    float x=(float)(diameter * Math.sin(xAngle) * Math.sin(yAngle));
    float y=(float)(diameter * Math.cos(xAngle));
    float z=(float)(diameter * Math.sin(xAngle) * Math.cos(yAngle));
    addVertex(new Vector3(x,y,z));
  }
}"
96979,"public Vector4 multiply(Vector4 v){
  return new Vector4().setX(m[0][0] * v.getX()).setY(m[0][1] * v.getY()).setZ(m[0][2] * v.getZ()).setW(m[0][3] * v.getW());
}","public Vector4 multiply(Vector4 v){
  float X=v.x;
  float Y=v.y;
  float Z=v.z;
  float W=1;
  float A=m[0][0], B=m[0][1], C=m[0][2], D=m[0][3];
  float E=m[1][0], F=m[1][1], G=m[1][2], H=m[1][3];
  float I=m[2][0], J=m[2][1], K=m[2][2], L=m[2][3];
  float M=m[3][0], N=m[3][1], O=m[3][2], P=m[3][3];
  return new Vector4(A * X + B * Y + C * Z + D * W,E * X + F * Y + G * Z + H * W,I * X + J * Y + K * Z + L * W,M * X + N * Y + O * Z + P * W);
}"
96980,"public Vector3 multiply(Vector3 v){
  Vector3 vn=v.normalize();
  Quaternion q1=conjugate();
  Quaternion qv=new Quaternion(vn.x,vn.y,vn.z,1);
  qv=this.multiply(qv);
  qv=qv.multiply(q1);
  return new Vector3(qv.x,qv.y,qv.z);
}","public Vector3 multiply(Vector3 v){
  Vector3 vn=v.normalize();
  Quaternion q1=conjugate();
  Quaternion qv=new Quaternion(vn.x,vn.y,vn.z,1);
  qv=this.multiply(qv);
  qv=qv.multiply(q1);
  return new Vector3(qv.x,qv.y,qv.z).normalize().scale(v.length());
}"
96981,"public void init(){
  camera=new PerspCam().initProjection(70,Display.getAspectRatio(),0.01f,1000f);
  camera.setPosition(new Vector3(-2,-2,5));
  camera.lookAt(Vector3.ZERO);
  cube=new Cuboid(new Vector3(),1,1,1);
  sphere=new Sphere(new Vector3(),1);
}","public void init(){
  ResourceLoader loader=ResourceLoader.getInstance();
  int fontID=loader.defineFont(""String_Node_Str"",TrueTypeFont.STYLE_NORMAL,16);
  loader.startLoading();
  hudFont=loader.getFont(fontID);
  camera=new PerspCam().initProjection(70,Display.getAspectRatio(),0.01f,1000f);
  camera.setPosition(new Vector3(-2,-2,5));
  camera.lookAt(Vector3.ZERO);
  hudCam=new OrthoCam().initProjection(Display.getWidth(),Display.getHeight());
  cube=new Cuboid(new Vector3(),1,1,1);
  sphere=new Sphere(new Vector3(),1);
}"
96982,"public void render(float delta,Batcher batcher){
  camera.apply();
  if (!sphere.intersects(cube)) {
    RenderUtils.fillPolyhedron(batcher,cube,Color.BLUE);
    RenderUtils.fillPolyhedron(batcher,sphere,Color.DARK_RED);
  }
 else {
    Collision3D.Response response=Collision3D.getResponse();
    batcher.begin(Primitive.LINES);
{
      batcher.vertex(cube.getPosition());
      batcher.color(Color.RED);
      batcher.vertex(cube.getPosition().add(response.getMinimumTranslationVector()));
      batcher.color(Color.RED);
    }
    batcher.end();
  }
  RenderUtils.tracePolyhedron(batcher,cube,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,sphere,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,cube.getBounds(),Color.WHITE);
  RenderUtils.tracePolyhedron(batcher,sphere.getBounds(),Color.WHITE);
}","public void render(float delta,Batcher batcher){
  camera.apply();
  boolean intersects=sphere.intersects(cube);
  Collision3D.Response response=Collision3D.getResponse();
  if (!intersects) {
    RenderUtils.fillPolyhedron(batcher,cube,Color.BLUE);
    RenderUtils.fillPolyhedron(batcher,sphere,Color.DARK_RED);
  }
 else {
    batcher.begin(Primitive.LINES);
{
      batcher.vertex(cube.getPosition());
      batcher.color(Color.RED);
      batcher.vertex(cube.getPosition().subtract(response.getMinimumTranslationVector()));
      batcher.color(Color.RED);
    }
    batcher.end();
  }
  RenderUtils.tracePolyhedron(batcher,cube,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,sphere,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,cube.getBounds(),Color.WHITE);
  RenderUtils.tracePolyhedron(batcher,sphere.getBounds(),Color.WHITE);
  hudCam.apply();
  hudFont.drawString(batcher,""String_Node_Str"" + intersects,10,10);
  hudFont.drawString(batcher,""String_Node_Str"" + response.isAInsideB(),10,10);
  hudFont.drawString(batcher,""String_Node_Str"" + response.isBInsideA(),10,14);
  hudFont.drawString(batcher,""String_Node_Str"" + response.getOverlapDistance(),10,16);
  hudFont.drawString(batcher,""String_Node_Str"" + response.getOverlapAxis(),10,18);
  hudFont.drawString(batcher,""String_Node_Str"" + response.getMinimumTranslationVector(),10,20);
}"
96983,"public OggReader(InputStream is){
  decodeToPCM(is);
}","/** 
 * Constructs an OGG reader to read from an InputStream.
 * @param is The InputStream to load the sound samples from.
 */
public OggReader(InputStream is){
  decodeToPCM(is);
}"
96984,"public WaveReader(String filename){
  this(FileUtils.getResource(filename));
}","/** 
 * Constructs a WaveReader that reads samples from a wave file.
 * @param filename The filename of the wav file resource.
 */
public WaveReader(String filename){
  this(FileUtils.getResource(filename));
}"
96985,"private void updateVertices(){
  clearVertices();
  final int bandPower=5;
  final int bandPoints=(int)Math.pow(2,bandPower);
  final int bandMask=bandPoints - 2;
  final int sectionsInBand=(bandPoints / 2) - 1;
  final int totalPoints=sectionsInBand * bandPoints;
  final float sectionArc=6.28f / sectionsInBand;
  final float radius=-this.radius;
  float xAngle;
  float yAngle;
  for (int i=0; i < totalPoints; i++) {
    xAngle=(float)(i & 1) + (i >> bandPower);
    yAngle=(float)((i & bandMask) >> 1) + ((i >> bandPower) * sectionsInBand);
    xAngle*=sectionArc / 2f;
    yAngle*=sectionArc * -1;
    float x=(float)(radius * Math.sin(xAngle) * Math.sin(yAngle));
    float y=(float)(radius * Math.cos(xAngle));
    float z=(float)(radius * Math.sin(xAngle) * Math.cos(yAngle));
    addVertex(new Vector3(x,y,z));
  }
}","private void updateVertices(){
  clearVertices();
  final int bandPower=6;
  final int bandPoints=(int)Math.pow(2,bandPower);
  final int bandMask=bandPoints - 2;
  final int sectionsInBand=(bandPoints / 2) - 1;
  final int totalPoints=sectionsInBand * bandPoints;
  final float sectionArc=6.28f / sectionsInBand;
  final float radius=-this.radius;
  float xAngle;
  float yAngle;
  for (int i=0; i < totalPoints; i++) {
    xAngle=(float)(i & 1) + (i >> bandPower);
    yAngle=(float)((i & bandMask) >> 1) + ((i >> bandPower) * sectionsInBand);
    xAngle*=sectionArc / 2f;
    yAngle*=sectionArc * -1;
    float x=(float)(radius * Math.sin(xAngle) * Math.sin(yAngle));
    float y=(float)(radius * Math.cos(xAngle));
    float z=(float)(radius * Math.sin(xAngle) * Math.cos(yAngle));
    addVertex(new Vector3(x,y,z));
  }
}"
96986,"/** 
 * Uploads the data collected to the OpenGL buffers.
 */
private void uploadData(){
  vboVert.bind();
  vboVert.uploadSubData(vBuffer,0);
  vao.pointAttribute(vertexLocation,4,GL_FLOAT,vboVert);
  vboCol.bind();
  vboCol.uploadSubData(cBuffer,0);
  vao.pointAttribute(colorLocation,4,GL_FLOAT,vboCol);
  vboTex.bind();
  vboTex.uploadSubData(tBuffer,0);
  vao.pointAttribute(texCoordLocation,2,GL_FLOAT,vboTex);
  vboNorm.bind();
  vboNorm.uploadSubData(nBuffer,0);
  vao.pointAttribute(normalLocation,4,GL_FLOAT,vboNorm);
}","/** 
 * Uploads the data collected to the OpenGL buffers.
 */
private void uploadData(){
  vboVert.bind();
  vboVert.uploadData(vBuffer,GL_STREAM_DRAW);
  vao.pointAttribute(vertexLocation,4,GL_FLOAT,vboVert);
  vboCol.bind();
  vboCol.uploadData(cBuffer,GL_STREAM_DRAW);
  vao.pointAttribute(colorLocation,4,GL_FLOAT,vboCol);
  vboTex.bind();
  vboTex.uploadData(tBuffer,GL_STREAM_DRAW);
  vao.pointAttribute(texCoordLocation,2,GL_FLOAT,vboTex);
  vboNorm.bind();
  vboNorm.uploadData(nBuffer,GL_STREAM_DRAW);
  vao.pointAttribute(normalLocation,4,GL_FLOAT,vboNorm);
}"
96987,"public void update(float delta){
  if (Keyboard.isClicked(Keyboard.KEY_ESCAPE))   end();
  cube.getPosition().x=(float)Math.sin(TimeUtils.currentSeconds()) * 2;
  cube.getPosition().y=cube.getPosition().x;
  cube.getPosition().z=cube.getPosition().x;
  sphere.getPosition().x=-cube.getPosition().x;
  sphere.getPosition().y=-cube.getPosition().y;
  sphere.getPosition().z=-cube.getPosition().z;
  if (Keyboard.isPressed(Keyboard.KEY_W))   camera.moveForward(delta);
  if (Keyboard.isPressed(Keyboard.KEY_S))   camera.moveBackward(delta);
  if (Keyboard.isPressed(Keyboard.KEY_A))   camera.moveLeft(delta);
  if (Keyboard.isPressed(Keyboard.KEY_D))   camera.moveRight(delta);
  if (Keyboard.isPressed(Keyboard.KEY_Q))   camera.moveUp(delta);
  if (Keyboard.isPressed(Keyboard.KEY_E))   camera.moveDown(delta);
  if (Keyboard.isPressed(Keyboard.KEY_UP))   camera.rotateX(1);
  if (Keyboard.isPressed(Keyboard.KEY_DOWN))   camera.rotateX(-1);
  if (Keyboard.isPressed(Keyboard.KEY_LEFT))   camera.rotateY(1);
  if (Keyboard.isPressed(Keyboard.KEY_RIGHT))   camera.rotateY(-1);
}","public void update(float delta){
  if (Keyboard.isClicked(Keyboard.KEY_ESCAPE))   end();
  if (!Keyboard.isPressed(Keyboard.KEY_SPACE)) {
    float movement=(float)Math.sin(TimeUtils.currentSeconds()) * 2;
    cube.getPosition().x=movement;
    cube.getPosition().y=movement;
    cube.getPosition().z=movement;
    sphere.getPosition().x=-movement;
    sphere.getPosition().y=-movement;
    sphere.getPosition().z=-movement;
  }
  if (Keyboard.isPressed(Keyboard.KEY_W))   camera.moveForward(delta);
  if (Keyboard.isPressed(Keyboard.KEY_S))   camera.moveBackward(delta);
  if (Keyboard.isPressed(Keyboard.KEY_A))   camera.moveLeft(delta);
  if (Keyboard.isPressed(Keyboard.KEY_D))   camera.moveRight(delta);
  if (Keyboard.isPressed(Keyboard.KEY_Q))   camera.moveUp(delta);
  if (Keyboard.isPressed(Keyboard.KEY_E))   camera.moveDown(delta);
  if (Keyboard.isPressed(Keyboard.KEY_UP))   camera.rotateX(1);
  if (Keyboard.isPressed(Keyboard.KEY_DOWN))   camera.rotateX(-1);
  if (Keyboard.isPressed(Keyboard.KEY_LEFT))   camera.rotateY(1);
  if (Keyboard.isPressed(Keyboard.KEY_RIGHT))   camera.rotateY(-1);
}"
96988,"public void render(float delta,Batcher batcher){
  camera.apply();
  if (!sphere.intersects(cube)) {
    RenderUtils.fillPolyhedron(batcher,cube,Color.CORN_FLOWER_BLUE);
    RenderUtils.fillPolyhedron(batcher,sphere,Color.INDIAN_RED);
  }
  RenderUtils.tracePolyhedron(batcher,cube,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,sphere,Color.GREEN);
}","public void render(float delta,Batcher batcher){
  camera.apply();
  if (!sphere.intersects(cube)) {
    RenderUtils.fillPolyhedron(batcher,cube,Color.BLUE);
    RenderUtils.fillPolyhedron(batcher,sphere,Color.DARK_RED);
  }
  RenderUtils.tracePolyhedron(batcher,cube,Color.GREEN);
  RenderUtils.tracePolyhedron(batcher,sphere,Color.GREEN);
}"
96989,"public static void tracePolyhedron(Batcher b,Polyhedron polyhedron,Vector3 position,Color color){
  b.begin(Primitive.LINE_STRIP);
{
    for (    Vector3 vertex : polyhedron.getVertices()) {
      b.vertex(vertex.add(polyhedron.getPosition().add(position)));
      b.color(color);
    }
  }
  b.end();
}","public static void tracePolyhedron(Batcher b,Polyhedron polyhedron,Vector3 position,Color color){
  b.begin(Primitive.LINE_STRIP);
{
    Vector3 v1;
    Vector3 v2;
    Vector3 v3;
    for (int v=0; v < polyhedron.vertexCount() - 2; v++) {
      if ((v & 1) != 0) {
        v1=polyhedron.getVertex(v);
        v2=polyhedron.getVertex(v + 1);
        v3=polyhedron.getVertex(v + 2);
      }
 else {
        v1=polyhedron.getVertex(v);
        v2=polyhedron.getVertex(v + 2);
        v3=polyhedron.getVertex(v + 1);
      }
      v1=v1.add(polyhedron.getPosition()).add(position);
      v2=v2.add(polyhedron.getPosition()).add(position);
      v3=v3.add(polyhedron.getPosition()).add(position);
      b.vertex(v1);
      b.color(color);
      b.vertex(v2);
      b.color(color);
      b.vertex(v3);
      b.color(color);
    }
  }
  b.end();
}"
96990,"public void dispose(){
  for (  int id : textures.keySet())   textures.get(id).dispose();
  for (  int id : fonts.keySet())   fonts.get(id).dispose();
}","public void dispose(){
  for (  int id : textures.keySet())   textures.get(id).dispose();
  for (  int id : fonts.keySet())   fonts.get(id).dispose();
  for (  int id : sounds.keySet())   sounds.get(id).dispose();
}"
96991,"public void rotate(float angle){
  angle=(float)Math.toRadians(angle);
  if (angle == 0 || this instanceof Circle)   return;
  float s=(float)Math.sin(angle);
  float c=(float)Math.cos(angle);
  float width=maxX - minX;
  float height=maxY - minY;
  float originX=width / 2;
  float originY=height / 2;
  float minX, maxX, minY, maxY;
  minX=minY=Float.POSITIVE_INFINITY;
  maxX=maxY=Float.NEGATIVE_INFINITY;
  for (  Vector2 vertex : vertices) {
    Vector2 v=vertex.subtract(originX,originY);
    float xNew=v.getX() * c - v.getY() * s;
    float yNew=v.getX() * s + v.getY() * c;
    vertex.setX(xNew + originX);
    vertex.setY(yNew + originY);
    minX=Math.min(xNew + originX,minX);
    minY=Math.min(yNew + originY,minY);
    maxX=Math.max(xNew + originX,maxX);
    maxY=Math.max(yNew + originY,maxY);
  }
  rotation+=angle;
  bounds=new Rectangle(position.getX() + minX,position.getY() + minY,maxX - minX,maxY - minY);
}","public void rotate(float angle){
  angle=(float)Math.toRadians(angle);
  if (angle == 0 || this instanceof Circle)   return;
  float s=(float)Math.sin(angle);
  float c=(float)Math.cos(angle);
  float width=maxX - minX;
  float height=maxY - minY;
  float originX=width / 2;
  float originY=height / 2;
  float minX, maxX, minY, maxY;
  minX=minY=Float.POSITIVE_INFINITY;
  maxX=maxY=Float.NEGATIVE_INFINITY;
  for (  Vector2 vertex : vertices) {
    Vector2 v=vertex.subtract(originX,originY);
    float xNew=v.getX() * c - v.getY() * s;
    float yNew=v.getX() * s + v.getY() * c;
    vertex.setX(xNew + originX);
    vertex.setY(yNew + originY);
    minX=Math.min(xNew + originX,minX);
    minY=Math.min(yNew + originY,minY);
    maxX=Math.max(xNew + originX,maxX);
    maxY=Math.max(yNew + originY,maxY);
  }
  rotation+=Math.toDegrees(angle);
  bounds=new Rectangle(position.getX() + minX,position.getY() + minY,maxX - minX,maxY - minY);
}"
96992,"public Vector2 rotate(float angle){
  return null;
}","public Vector2 rotate(float angle){
  angle=(float)Math.toRadians(angle);
  return new Vector2(x * (float)Math.cos(angle) - y * (float)Math.sin(angle),x * (float)Math.sin(angle) + y * (float)Math.cos(angle));
}"
96993,"public void update(float delta){
  transform.rotate(Vector3.AXIS_Y,4 * delta);
  if (Keyboard.isPressed(Keyboard.KEY_ESCAPE))   end();
  float speed=2 * delta;
  if (Keyboard.isPressed(Keyboard.KEY_W))   perspCam.moveForward(speed);
  if (Keyboard.isPressed(Keyboard.KEY_S))   perspCam.moveBackward(speed);
  if (Keyboard.isPressed(Keyboard.KEY_A))   perspCam.moveLeft(speed);
  if (Keyboard.isPressed(Keyboard.KEY_D))   perspCam.moveRight(speed);
  if (Keyboard.isPressed(Keyboard.KEY_Q))   perspCam.moveUp(speed);
  if (Keyboard.isPressed(Keyboard.KEY_E))   perspCam.moveDown(speed);
  if (Keyboard.isPressed(Keyboard.KEY_UP))   perspCam.rotateX(1);
  if (Keyboard.isPressed(Keyboard.KEY_DOWN))   perspCam.rotateX(-1);
  if (Keyboard.isPressed(Keyboard.KEY_LEFT))   perspCam.rotateY(1);
  if (Keyboard.isPressed(Keyboard.KEY_RIGHT))   perspCam.rotateY(-1);
  if (Keyboard.isPressed(Keyboard.KEY_SPACE)) {
    perspCam.rotateX(-Mouse.getDY() * speed);
    perspCam.rotateY(-Mouse.getDX() * speed);
  }
}","public void update(float delta){
  transform.rotate(Vector3.AXIS_Y,60 * delta);
  if (Keyboard.isPressed(Keyboard.KEY_ESCAPE))   end();
  float speed=2 * delta;
  if (Keyboard.isPressed(Keyboard.KEY_W))   perspCam.moveForward(speed);
  if (Keyboard.isPressed(Keyboard.KEY_S))   perspCam.moveBackward(speed);
  if (Keyboard.isPressed(Keyboard.KEY_A))   perspCam.moveLeft(speed);
  if (Keyboard.isPressed(Keyboard.KEY_D))   perspCam.moveRight(speed);
  if (Keyboard.isPressed(Keyboard.KEY_Q))   perspCam.moveUp(speed);
  if (Keyboard.isPressed(Keyboard.KEY_E))   perspCam.moveDown(speed);
  if (Keyboard.isPressed(Keyboard.KEY_UP))   perspCam.rotateX(1);
  if (Keyboard.isPressed(Keyboard.KEY_DOWN))   perspCam.rotateX(-1);
  if (Keyboard.isPressed(Keyboard.KEY_LEFT))   perspCam.rotateY(1);
  if (Keyboard.isPressed(Keyboard.KEY_RIGHT))   perspCam.rotateY(-1);
  if (Keyboard.isPressed(Keyboard.KEY_SPACE)) {
    perspCam.rotateX(-Mouse.getDY() * speed);
    perspCam.rotateY(-Mouse.getDX() * speed);
  }
}"
96994,"public void update(float delta){
  rotation+=(float)(4.0 * delta);
  float z=-Math.abs((float)Math.sin(rotation));
  getLocalTransform().reset().rotate(Vector3.AXIS_Z,rotation).translate(new Vector3(position.getX(),position.getY(),z));
}","public void update(float delta){
  rotation+=60 * delta;
  float z=-Math.abs((float)Math.sin(TimeUtils.currentSeconds()));
  getLocalTransform().reset().rotate(Vector3.AXIS_Z,rotation).translate(new Vector3(position.getX(),position.getY(),z));
}"
96995,"/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible,boolean resizable){
  glfwWindowHint(GLFW_SAMPLES,4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  glfwWindowHint(GLFW_RESIZABLE,resizable ? GL_TRUE : GL_FALSE);
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  GL3Context.enable(GL_BLEND);
  GL3Context.blendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  GL3Context.enable(GL_DEPTH_TEST);
  GL3Context.viewport(0,0,width,height);
  if (Game.getBatcher() == null)   Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback((win,key,scanCode,action,mods) -> Keyboard.setKey(key,action != GLFW_RELEASE)));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback((win,xPos,yPos) -> {
    mouseDX=(int)xPos - mouseX;
    mouseDY=(int)yPos - mouseY;
    mouseX=(int)xPos;
    mouseY=(int)yPos;
  }
));
  return window;
}","/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible,boolean resizable){
  glfwWindowHint(GLFW_SAMPLES,4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  glfwWindowHint(GLFW_RESIZABLE,resizable ? GL_TRUE : GL_FALSE);
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  GL3Context.enable(GL_BLEND);
  GL3Context.blendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  GL3Context.viewport(0,0,width,height);
  if (Game.getBatcher() == null)   Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback((win,key,scanCode,action,mods) -> Keyboard.setKey(key,action != GLFW_RELEASE)));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback((win,xPos,yPos) -> {
    mouseDX=(int)xPos - mouseX;
    mouseDY=(int)yPos - mouseY;
    mouseX=(int)xPos;
    mouseY=(int)yPos;
  }
));
  return window;
}"
96996,"public void prepareFrame(){
  Batcher batcher=Game.getBatcher();
  setUniform(""String_Node_Str"",Texture.getActiveUnit());
  setUniform(""String_Node_Str"",batcher.getTransform().getMatrix());
  setUniform(""String_Node_Str"",BaseCamera.projection);
  setUniform(""String_Node_Str"",BaseCamera.view);
  batcher.setVertexLocation(0);
  batcher.setColorLocation(1);
  batcher.setTexCoordLocation(2);
  batcher.setNormalLocation(3);
}","public void prepareFrame(){
  Batcher batcher=Game.getBatcher();
  GL3Context.enable(GL11.GL_BLEND);
  GL3Context.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  setUniform(""String_Node_Str"",Texture.getActiveUnit());
  setUniform(""String_Node_Str"",batcher.getTransform().getMatrix());
  setUniform(""String_Node_Str"",BaseCamera.projection);
  setUniform(""String_Node_Str"",BaseCamera.view);
  batcher.setVertexLocation(0);
  batcher.setColorLocation(1);
  batcher.setTexCoordLocation(2);
  batcher.setNormalLocation(3);
}"
96997,"public void apply(){
  BaseCamera.projection=mProj;
  BaseCamera.view=mView;
}","public void apply(){
  BaseCamera.projection=mProj;
  BaseCamera.view=mView;
  GL3Context.disable(GL11.GL_DEPTH_TEST);
}"
96998,"public void apply(){
  mView=TransformUtils.createRotation(rotation);
  mView=TransformUtils.createTranslation(position.negate()).multiply(mView);
  BaseCamera.projection=mProj;
  BaseCamera.view=mView;
}","public void apply(){
  mView=TransformUtils.createRotation(rotation);
  mView=TransformUtils.createTranslation(position.negate()).multiply(mView);
  BaseCamera.projection=mProj;
  BaseCamera.view=mView;
  GL3Context.enable(GL11.GL_DEPTH_TEST);
}"
96999,"private void createSet(){
  BufferedImage tmp=new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=tmp.createGraphics();
  g2d.setFont(awtFont);
  if (antiAlias)   g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  fontMetrics=g2d.getFontMetrics();
  int textureWidth=0;
  int textureHeight=0;
  int positionX=0;
  int positionY=0;
  for (int i=0; i < STANDARD_CHARACTERS; i++) {
    char ch=(char)i;
    chars[i]=new FontChar();
    if (positionX + fontMetrics.charWidth(ch) > 512) {
      textureHeight+=fontMetrics.getHeight();
      positionX=0;
      positionY=textureHeight;
    }
    textureWidth=Math.max(textureWidth,positionX);
    chars[i].x=positionX;
    chars[i].y=positionY;
    chars[i].w=fontMetrics.stringWidth(""String_Node_Str"" + ch) - fontMetrics.charWidth('_');
    chars[i].h=fontMetrics.getHeight();
    positionX+=chars[i].w + 5;
  }
  g2d.dispose();
  BufferedImage texImage=new BufferedImage(textureWidth,textureHeight,BufferedImage.TYPE_INT_ARGB);
  g2d=texImage.createGraphics();
  g2d.setFont(awtFont);
  g2d.setColor(java.awt.Color.BLACK);
  if (antiAlias)   g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < STANDARD_CHARACTERS; i++) {
    g2d.drawString(String.valueOf((char)i),chars[i].x,chars[i].y + fontMetrics.getAscent());
  }
  g2d.dispose();
  fontTexture=Texture.fromBufferedImage(texImage);
}","private void createSet(){
  BufferedImage tmp=new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=tmp.createGraphics();
  g2d.setFont(awtFont);
  if (antiAlias)   g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  fontMetrics=g2d.getFontMetrics();
  int textureWidth=0;
  int textureHeight=0;
  int positionX=0;
  int positionY=0;
  for (int i=0; i < STANDARD_CHARACTERS; i++) {
    char ch=(char)i;
    chars[i]=new FontChar();
    if (positionX + fontMetrics.charWidth(ch) > 512) {
      textureHeight+=fontMetrics.getHeight() + 16;
      positionX=0;
      positionY=textureHeight;
    }
    textureWidth=Math.max(textureWidth,positionX);
    chars[i].x=positionX;
    chars[i].y=positionY;
    chars[i].w=fontMetrics.stringWidth(""String_Node_Str"" + ch) - fontMetrics.charWidth('_');
    chars[i].h=fontMetrics.getHeight();
    positionX+=chars[i].w + 5;
  }
  g2d.dispose();
  BufferedImage texImage=new BufferedImage(textureWidth,textureHeight,BufferedImage.TYPE_INT_ARGB);
  g2d=texImage.createGraphics();
  g2d.setFont(awtFont);
  g2d.setColor(java.awt.Color.BLACK);
  if (antiAlias)   g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < STANDARD_CHARACTERS; i++) {
    g2d.drawString(String.valueOf((char)i),chars[i].x,chars[i].y + fontMetrics.getAscent());
  }
  g2d.dispose();
  fontTexture=Texture.fromBufferedImage(texImage);
}"
97000,"/** 
 * Constructs a Entity2D to use a Polygon that can be used to perform collisions.
 * @param polygon The collision mask.
 */
public Entity2D(Polygon polygon){
  this.polygon=polygon;
}","/** 
 * Constructs a Entity2D to use a Polygon that can be used to perform collisions.
 * @param polygon The collision mask.
 */
public Entity2D(Polygon polygon){
  this();
  this.polygon=polygon;
}"
