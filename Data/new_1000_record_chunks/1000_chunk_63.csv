record_number,buggy_code,fixed_code
62001,"@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62002,"@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,0);
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}","@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,Optional.of(0));
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}"
62003,"private int getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return 0;
  }
  return (int)(channelConfiguration.getTtlMillis() / 1000);
}","private Optional<Integer> getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return Optional.absent();
  }
  Long ttlMillis=channelConfiguration.getTtlMillis();
  return ttlMillis == null ? Optional.<Integer>absent() : Optional.of((int)(ttlMillis / 1000));
}"
62004,"@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  int ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}","@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  Optional<Integer> ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}"
62005,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,int ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,ttlSeconds,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,Optional<Integer> ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=createColumn(columnValue,ttlSeconds,columnName);
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}"
62006,"@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62007,"@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62008,"@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62009,"@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62010,"@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,0);
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}","@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,Optional.of(0));
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}"
62011,"private int getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return 0;
  }
  return (int)(channelConfiguration.getTtlMillis() / 1000);
}","private Optional<Integer> getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return Optional.absent();
  }
  Long ttlMillis=channelConfiguration.getTtlMillis();
  return ttlMillis == null ? Optional.<Integer>absent() : Optional.of((int)(ttlMillis / 1000));
}"
62012,"@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  int ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}","@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  Optional<Integer> ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}"
62013,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,int ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,ttlSeconds,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,Optional<Integer> ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=createColumn(columnValue,ttlSeconds,columnName);
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}"
62014,"@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62015,"@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62016,"@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62017,"@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62018,"@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,0);
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}","@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,Optional.of(0));
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}"
62019,"private int getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return 0;
  }
  return (int)(channelConfiguration.getTtlMillis() / 1000);
}","private Optional<Integer> getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return Optional.absent();
  }
  Long ttlMillis=channelConfiguration.getTtlMillis();
  return ttlMillis == null ? Optional.<Integer>absent() : Optional.of((int)(ttlMillis / 1000));
}"
62020,"@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  int ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}","@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  Optional<Integer> ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}"
62021,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,int ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,ttlSeconds,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,Optional<Integer> ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=createColumn(columnValue,ttlSeconds,columnName);
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}"
62022,"@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62023,"@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62024,"@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62025,"@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=NoSuchChannelException.class) public void testInsertWithMissingChannel() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
62026,"@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,0);
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}","@Test public void testInsert() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  ValueInsertionResult expected=new ValueInsertionResult(DATA_HUB_KEY,null,null);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  ValueInsertionResult result=testClass.write(CHANNEL_NAME,value,Optional.of(0));
  assertEquals(expected,result);
  verify(mutator).insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column);
}"
62027,"@Override public String prevKey(String channelName,String currentRowKey){
  DateTime date=formatter.parseDateTime(currentRowKey);
  date=date.minusDays(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}","@Override public String prevKey(String channelName,String currentRowKey){
  String datePart=stripPrefix(channelName,currentRowKey);
  DateTime date=formatter.parseDateTime(datePart);
  date=date.minusHours(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}"
62028,"@Override public String nextKey(String channelName,String currentRowKey){
  DateTime date=formatter.parseDateTime(currentRowKey);
  date=date.plusDays(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}","@Override public String nextKey(String channelName,String currentRowKey){
  String datePart=stripPrefix(channelName,currentRowKey);
  DateTime date=formatter.parseDateTime(datePart);
  date=date.plusHours(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}"
62029,"@Override public String prevKey(String channelName,String currentRowKey){
  DateTime date=formatter.parseDateTime(currentRowKey);
  date=date.minusDays(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}","@Override public String prevKey(String channelName,String currentRowKey){
  String datePart=stripPrefix(channelName,currentRowKey);
  DateTime date=formatter.parseDateTime(datePart);
  date=date.minusHours(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}"
62030,"@Override public String nextKey(String channelName,String currentRowKey){
  DateTime date=formatter.parseDateTime(currentRowKey);
  date=date.plusDays(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}","@Override public String nextKey(String channelName,String currentRowKey){
  String datePart=stripPrefix(channelName,currentRowKey);
  DateTime date=formatter.parseDateTime(datePart);
  date=date.plusHours(1);
  return addPrefix(channelName,formatter.print(date.getMillis()));
}"
62031,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonLatestRows=excludeLatestChannelItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonLatestRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonPointerRows=excludeChannelPointerItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonPointerRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62032,"@Override public boolean apply(Row<String,String,DataHubCompositeValue> input){
  return !CHANNELS_LATEST_ROW_KEY.equals(input.getKey());
}","@Override public boolean apply(Row<String,String,DataHubCompositeValue> input){
  return !Arrays.asList(CHANNELS_LATEST_ROW_KEY,CHANNELS_FIRST_ROW_KEY).contains(input.getKey());
}"
62033,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonLatestRows=excludeLatestChannelItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonLatestRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonPointerRows=excludeChannelPointerItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonPointerRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62034,"@Override public boolean apply(Row<String,String,DataHubCompositeValue> input){
  return !CHANNELS_LATEST_ROW_KEY.equals(input.getKey());
}","@Override public boolean apply(Row<String,String,DataHubCompositeValue> input){
  return !Arrays.asList(CHANNELS_LATEST_ROW_KEY,CHANNELS_FIRST_ROW_KEY).contains(input.getKey());
}"
62035,"private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.getAndAdd(1));
}","private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.addAndGet(1));
}"
62036,"private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.getAndAdd(1));
}","private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.addAndGet(1));
}"
62037,"private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.getAndAdd(1));
}","private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.addAndGet(1));
}"
62038,"private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.getAndAdd(1));
}","private DataHubKey createKeyWithCollision(Date keyDate,AtomicNumber sequenceNumber){
  return new DataHubKey(keyDate,(short)sequenceNumber.addAndGet(1));
}"
62039,"@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Linked<ChannelConfiguration> createChannel(ChannelCreationRequest channelCreationRequest){
  String channelName=channelCreationRequest.getName();
  ChannelConfiguration channelConfiguration=channelDao.createChannel(channelName);
  return linked(channelConfiguration).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelConfiguration)).withLink(""String_Node_Str"",linkBuilder.buildLatestUri(channelName)).withLink(""String_Node_Str"",linkBuilder.buildWsLinkFor(channelName)).build();
}","@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response createChannel(ChannelCreationRequest channelCreationRequest){
  String channelName=channelCreationRequest.getName();
  if (channelName == null || Strings.isNullOrEmpty(channelName.trim())) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  ChannelConfiguration channelConfiguration=channelDao.createChannel(channelName);
  URI channelUri=linkBuilder.buildChannelUri(channelConfiguration);
  return Response.ok(linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",linkBuilder.buildLatestUri(channelName)).withLink(""String_Node_Str"",linkBuilder.buildWsLinkFor(channelName)).build()).build();
}"
62040,"@Test public void testChannelCreation() throws Exception {
  String channelName=""String_Node_Str"";
  ChannelCreationRequest channelCreationRequest=new ChannelCreationRequest(channelName);
  Date date=new Date();
  ChannelConfiguration channelConfiguration=new ChannelConfiguration(channelName,date);
  String channelUri=""String_Node_Str"";
  String latestUri=""String_Node_Str"";
  String wsUri=""String_Node_Str"";
  Linked<ChannelConfiguration> expected=Linked.linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",latestUri).withLink(""String_Node_Str"",wsUri).build();
  UriInfo uriInfo=mock(UriInfo.class);
  ChannelDao dao=mock(ChannelDao.class);
  ChannelHypermediaLinkBuilder linkBuilder=mock(ChannelHypermediaLinkBuilder.class);
  when(uriInfo.getRequestUri()).thenReturn(URI.create(""String_Node_Str""));
  when(dao.channelExists(channelName)).thenReturn(false);
  when(dao.createChannel(channelName)).thenReturn(channelConfiguration);
  when(linkBuilder.buildChannelUri(channelConfiguration)).thenReturn(URI.create(channelUri));
  when(linkBuilder.buildLatestUri(channelName)).thenReturn(URI.create(latestUri));
  when(linkBuilder.buildWsLinkFor(channelName)).thenReturn(URI.create(wsUri));
  ChannelResource testClass=new ChannelResource(dao,linkBuilder);
  Linked<ChannelConfiguration> result=testClass.createChannel(channelCreationRequest);
  verify(dao).createChannel(channelName);
  assertEquals(expected,result);
}","@Test public void testChannelCreation() throws Exception {
  String channelName=""String_Node_Str"";
  ChannelCreationRequest channelCreationRequest=new ChannelCreationRequest(channelName);
  Date date=new Date();
  ChannelConfiguration channelConfiguration=new ChannelConfiguration(channelName,date);
  String channelUri=""String_Node_Str"";
  String latestUri=""String_Node_Str"";
  String wsUri=""String_Node_Str"";
  Linked<ChannelConfiguration> expected=Linked.linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",latestUri).withLink(""String_Node_Str"",wsUri).build();
  UriInfo uriInfo=mock(UriInfo.class);
  ChannelDao dao=mock(ChannelDao.class);
  ChannelHypermediaLinkBuilder linkBuilder=mock(ChannelHypermediaLinkBuilder.class);
  when(uriInfo.getRequestUri()).thenReturn(URI.create(""String_Node_Str""));
  when(dao.channelExists(channelName)).thenReturn(false);
  when(dao.createChannel(channelName)).thenReturn(channelConfiguration);
  when(linkBuilder.buildChannelUri(channelConfiguration)).thenReturn(URI.create(channelUri));
  when(linkBuilder.buildLatestUri(channelName)).thenReturn(URI.create(latestUri));
  when(linkBuilder.buildWsLinkFor(channelName)).thenReturn(URI.create(wsUri));
  ChannelResource testClass=new ChannelResource(dao,linkBuilder);
  Response response=testClass.createChannel(channelCreationRequest);
  verify(dao).createChannel(channelName);
  assertEquals(200,response.getStatus());
  assertEquals(expected,response.getEntity());
}"
62041,"@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Linked<ChannelConfiguration> createChannel(ChannelCreationRequest channelCreationRequest){
  String channelName=channelCreationRequest.getName();
  ChannelConfiguration channelConfiguration=channelDao.createChannel(channelName);
  return linked(channelConfiguration).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelConfiguration)).withLink(""String_Node_Str"",linkBuilder.buildLatestUri(channelName)).withLink(""String_Node_Str"",linkBuilder.buildWsLinkFor(channelName)).build();
}","@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response createChannel(ChannelCreationRequest channelCreationRequest){
  String channelName=channelCreationRequest.getName();
  if (channelName == null || Strings.isNullOrEmpty(channelName.trim())) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  ChannelConfiguration channelConfiguration=channelDao.createChannel(channelName);
  URI channelUri=linkBuilder.buildChannelUri(channelConfiguration);
  return Response.ok(linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",linkBuilder.buildLatestUri(channelName)).withLink(""String_Node_Str"",linkBuilder.buildWsLinkFor(channelName)).build()).build();
}"
62042,"@Test public void testChannelCreation() throws Exception {
  String channelName=""String_Node_Str"";
  ChannelCreationRequest channelCreationRequest=new ChannelCreationRequest(channelName);
  Date date=new Date();
  ChannelConfiguration channelConfiguration=new ChannelConfiguration(channelName,date);
  String channelUri=""String_Node_Str"";
  String latestUri=""String_Node_Str"";
  String wsUri=""String_Node_Str"";
  Linked<ChannelConfiguration> expected=Linked.linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",latestUri).withLink(""String_Node_Str"",wsUri).build();
  UriInfo uriInfo=mock(UriInfo.class);
  ChannelDao dao=mock(ChannelDao.class);
  ChannelHypermediaLinkBuilder linkBuilder=mock(ChannelHypermediaLinkBuilder.class);
  when(uriInfo.getRequestUri()).thenReturn(URI.create(""String_Node_Str""));
  when(dao.channelExists(channelName)).thenReturn(false);
  when(dao.createChannel(channelName)).thenReturn(channelConfiguration);
  when(linkBuilder.buildChannelUri(channelConfiguration)).thenReturn(URI.create(channelUri));
  when(linkBuilder.buildLatestUri(channelName)).thenReturn(URI.create(latestUri));
  when(linkBuilder.buildWsLinkFor(channelName)).thenReturn(URI.create(wsUri));
  ChannelResource testClass=new ChannelResource(dao,linkBuilder);
  Linked<ChannelConfiguration> result=testClass.createChannel(channelCreationRequest);
  verify(dao).createChannel(channelName);
  assertEquals(expected,result);
}","@Test public void testChannelCreation() throws Exception {
  String channelName=""String_Node_Str"";
  ChannelCreationRequest channelCreationRequest=new ChannelCreationRequest(channelName);
  Date date=new Date();
  ChannelConfiguration channelConfiguration=new ChannelConfiguration(channelName,date);
  String channelUri=""String_Node_Str"";
  String latestUri=""String_Node_Str"";
  String wsUri=""String_Node_Str"";
  Linked<ChannelConfiguration> expected=Linked.linked(channelConfiguration).withLink(""String_Node_Str"",channelUri).withLink(""String_Node_Str"",latestUri).withLink(""String_Node_Str"",wsUri).build();
  UriInfo uriInfo=mock(UriInfo.class);
  ChannelDao dao=mock(ChannelDao.class);
  ChannelHypermediaLinkBuilder linkBuilder=mock(ChannelHypermediaLinkBuilder.class);
  when(uriInfo.getRequestUri()).thenReturn(URI.create(""String_Node_Str""));
  when(dao.channelExists(channelName)).thenReturn(false);
  when(dao.createChannel(channelName)).thenReturn(channelConfiguration);
  when(linkBuilder.buildChannelUri(channelConfiguration)).thenReturn(URI.create(channelUri));
  when(linkBuilder.buildLatestUri(channelName)).thenReturn(URI.create(latestUri));
  when(linkBuilder.buildWsLinkFor(channelName)).thenReturn(URI.create(wsUri));
  ChannelResource testClass=new ChannelResource(dao,linkBuilder);
  Response response=testClass.createChannel(channelCreationRequest);
  verify(dao).createChannel(channelName);
  assertEquals(200,response.getStatus());
  assertEquals(expected,response.getEntity());
}"
62043,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,rows.getList());
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonLatestRows=excludeLatestChannelItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonLatestRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62044,"private List<Row<String,String,DataHubCompositeValue>> getSortedRows(final boolean reversed,List<Row<String,String,DataHubCompositeValue>> rowsList){
  return Ordering.from(new Comparator<Row<String,String,DataHubCompositeValue>>(){
    @Override public int compare(    Row<String,String,DataHubCompositeValue> o1,    Row<String,String,DataHubCompositeValue> o2){
      String key1=o1.getKey();
      String key2=o2.getKey();
      return reversed ? key2.compareTo(key1) : key1.compareTo(key2);
    }
  }
).sortedCopy(rowsList);
}","private List<Row<String,String,DataHubCompositeValue>> getSortedRows(final boolean reversed,Iterable<Row<String,String,DataHubCompositeValue>> rowsList){
  return Ordering.from(new Comparator<Row<String,String,DataHubCompositeValue>>(){
    @Override public int compare(    Row<String,String,DataHubCompositeValue> o1,    Row<String,String,DataHubCompositeValue> o2){
      String key1=o1.getKey();
      String key2=o2.getKey();
      return reversed ? key2.compareTo(key1) : key1.compareTo(key2);
    }
  }
).sortedCopy(rowsList);
}"
62045,"@Before public void setup(){
  channelName=""String_Node_Str"";
  keyRenderer=new DataHubKeyRenderer();
  targetKey=new DataHubKey(new Date(555L),(short)1);
  expectedPrevious=new DataHubKey(new Date(554L),(short)0);
  expectedNext=new DataHubKey(new Date(556L),(short)0);
  connector=mock(CassandraConnector.class);
  hector=mock(HectorFactoryWrapper.class);
  keyspace=mock(Keyspace.class);
  rangeQuery=mock(RangeSlicesQuery.class);
  queryResult=mock(QueryResult.class);
  orderedRows=mock(OrderedRows.class);
  column=mock(HColumn.class);
  previousColumn=mock(HColumn.class);
  nextColumn=mock(HColumn.class);
  row=mock(Row.class);
  row1=mock(Row.class);
  row2=mock(Row.class);
  columnSlice=mock(ColumnSlice.class);
  columnSlice1=mock(ColumnSlice.class);
  columnSlice2=mock(ColumnSlice.class);
  when(connector.getKeyspace()).thenReturn(keyspace);
  when(hector.createRangeSlicesQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(rangeQuery);
  when(rangeQuery.setColumnFamily(channelName)).thenReturn(rangeQuery);
  when(rangeQuery.execute()).thenReturn(queryResult);
  when(row1.getKey()).thenReturn(""String_Node_Str"");
  when(row2.getKey()).thenReturn(""String_Node_Str"");
  when(row.getColumnSlice()).thenReturn(columnSlice);
  when(row1.getColumnSlice()).thenReturn(columnSlice1);
  when(row2.getColumnSlice()).thenReturn(columnSlice2);
}","@Before public void setup(){
  channelName=""String_Node_Str"";
  keyRenderer=new DataHubKeyRenderer();
  targetKey=new DataHubKey(new Date(555L),(short)1);
  expectedPrevious=new DataHubKey(new Date(554L),(short)0);
  expectedNext=new DataHubKey(new Date(556L),(short)0);
  connector=mock(CassandraConnector.class);
  hector=mock(HectorFactoryWrapper.class);
  keyspace=mock(Keyspace.class);
  rangeQuery=mock(RangeSlicesQuery.class);
  queryResult=mock(QueryResult.class);
  orderedRows=mock(OrderedRows.class);
  column=mock(HColumn.class);
  previousColumn=mock(HColumn.class);
  nextColumn=mock(HColumn.class);
  row=mock(Row.class);
  latestItemRow=mock(Row.class);
  row1=mock(Row.class);
  row2=mock(Row.class);
  columnSlice=mock(ColumnSlice.class);
  columnSlice1=mock(ColumnSlice.class);
  columnSlice2=mock(ColumnSlice.class);
  when(connector.getKeyspace()).thenReturn(keyspace);
  when(hector.createRangeSlicesQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(rangeQuery);
  when(rangeQuery.setColumnFamily(channelName)).thenReturn(rangeQuery);
  when(rangeQuery.execute()).thenReturn(queryResult);
  when(row1.getKey()).thenReturn(""String_Node_Str"");
  when(row2.getKey()).thenReturn(""String_Node_Str"");
  when(row.getColumnSlice()).thenReturn(columnSlice);
  when(latestItemRow.getKey()).thenReturn(CHANNELS_LATEST_ROW_KEY);
  when(row1.getColumnSlice()).thenReturn(columnSlice1);
  when(row2.getColumnSlice()).thenReturn(columnSlice2);
}"
62046,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,rows.getList());
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  Iterable<Row<String,String,DataHubCompositeValue>> nonLatestRows=excludeLatestChannelItemRow(rows.getList());
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(reversed,nonLatestRows);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62047,"private List<Row<String,String,DataHubCompositeValue>> getSortedRows(final boolean reversed,List<Row<String,String,DataHubCompositeValue>> rowsList){
  return Ordering.from(new Comparator<Row<String,String,DataHubCompositeValue>>(){
    @Override public int compare(    Row<String,String,DataHubCompositeValue> o1,    Row<String,String,DataHubCompositeValue> o2){
      String key1=o1.getKey();
      String key2=o2.getKey();
      return reversed ? key2.compareTo(key1) : key1.compareTo(key2);
    }
  }
).sortedCopy(rowsList);
}","private List<Row<String,String,DataHubCompositeValue>> getSortedRows(final boolean reversed,Iterable<Row<String,String,DataHubCompositeValue>> rowsList){
  return Ordering.from(new Comparator<Row<String,String,DataHubCompositeValue>>(){
    @Override public int compare(    Row<String,String,DataHubCompositeValue> o1,    Row<String,String,DataHubCompositeValue> o2){
      String key1=o1.getKey();
      String key2=o2.getKey();
      return reversed ? key2.compareTo(key1) : key1.compareTo(key2);
    }
  }
).sortedCopy(rowsList);
}"
62048,"@Before public void setup(){
  channelName=""String_Node_Str"";
  keyRenderer=new DataHubKeyRenderer();
  targetKey=new DataHubKey(new Date(555L),(short)1);
  expectedPrevious=new DataHubKey(new Date(554L),(short)0);
  expectedNext=new DataHubKey(new Date(556L),(short)0);
  connector=mock(CassandraConnector.class);
  hector=mock(HectorFactoryWrapper.class);
  keyspace=mock(Keyspace.class);
  rangeQuery=mock(RangeSlicesQuery.class);
  queryResult=mock(QueryResult.class);
  orderedRows=mock(OrderedRows.class);
  column=mock(HColumn.class);
  previousColumn=mock(HColumn.class);
  nextColumn=mock(HColumn.class);
  row=mock(Row.class);
  row1=mock(Row.class);
  row2=mock(Row.class);
  columnSlice=mock(ColumnSlice.class);
  columnSlice1=mock(ColumnSlice.class);
  columnSlice2=mock(ColumnSlice.class);
  when(connector.getKeyspace()).thenReturn(keyspace);
  when(hector.createRangeSlicesQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(rangeQuery);
  when(rangeQuery.setColumnFamily(channelName)).thenReturn(rangeQuery);
  when(rangeQuery.execute()).thenReturn(queryResult);
  when(row1.getKey()).thenReturn(""String_Node_Str"");
  when(row2.getKey()).thenReturn(""String_Node_Str"");
  when(row.getColumnSlice()).thenReturn(columnSlice);
  when(row1.getColumnSlice()).thenReturn(columnSlice1);
  when(row2.getColumnSlice()).thenReturn(columnSlice2);
}","@Before public void setup(){
  channelName=""String_Node_Str"";
  keyRenderer=new DataHubKeyRenderer();
  targetKey=new DataHubKey(new Date(555L),(short)1);
  expectedPrevious=new DataHubKey(new Date(554L),(short)0);
  expectedNext=new DataHubKey(new Date(556L),(short)0);
  connector=mock(CassandraConnector.class);
  hector=mock(HectorFactoryWrapper.class);
  keyspace=mock(Keyspace.class);
  rangeQuery=mock(RangeSlicesQuery.class);
  queryResult=mock(QueryResult.class);
  orderedRows=mock(OrderedRows.class);
  column=mock(HColumn.class);
  previousColumn=mock(HColumn.class);
  nextColumn=mock(HColumn.class);
  row=mock(Row.class);
  latestItemRow=mock(Row.class);
  row1=mock(Row.class);
  row2=mock(Row.class);
  columnSlice=mock(ColumnSlice.class);
  columnSlice1=mock(ColumnSlice.class);
  columnSlice2=mock(ColumnSlice.class);
  when(connector.getKeyspace()).thenReturn(keyspace);
  when(hector.createRangeSlicesQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(rangeQuery);
  when(rangeQuery.setColumnFamily(channelName)).thenReturn(rangeQuery);
  when(rangeQuery.execute()).thenReturn(queryResult);
  when(row1.getKey()).thenReturn(""String_Node_Str"");
  when(row2.getKey()).thenReturn(""String_Node_Str"");
  when(row.getColumnSlice()).thenReturn(columnSlice);
  when(latestItemRow.getKey()).thenReturn(CHANNELS_LATEST_ROW_KEY);
  when(row1.getColumnSlice()).thenReturn(columnSlice1);
  when(row2.getColumnSlice()).thenReturn(columnSlice2);
}"
62049,"@Override public Optional<LinkedDataHubCompositeValue> getValue(String channelName,DataHubKey key){
  return Optional.fromNullable(channelValues.getIfPresent(key));
}","@Override public Optional<LinkedDataHubCompositeValue> getValue(String channelName,DataHubKey key){
  return Optional.fromNullable(channelValues.getIfPresent(new DataHubChannelValueKey(key,channelName)));
}"
62050,"@Override public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey key=latestPerChannel.get(channelName);
  return Optional.fromNullable(key);
}","@Override public Optional<DataHubKey> findLatestId(String channelName){
  DataHubChannelValueKey key=latestPerChannel.get(channelName);
  return optionalFromCompositeKey(key);
}"
62051,"@Override public ValueInsertionResult insert(String channelName,String contentType,byte[] data){
  Lock lock=writeLocks.get(channelName);
  lock.lock();
  try {
    DataHubKey oldLastKey=latestPerChannel.get(channelName);
    short newSequence=(oldLastKey == null) ? ((short)0) : (short)(oldLastKey.getSequence() + 1);
    DataHubKey newKey=new DataHubKey(timeProvider.getDate(),newSequence);
    DataHubCompositeValue dataHubCompositeValue=new DataHubCompositeValue(contentType,data);
    LinkedDataHubCompositeValue newLinkedValue=new LinkedDataHubCompositeValue(dataHubCompositeValue,Optional.fromNullable(oldLastKey),Optional.<DataHubKey>absent());
    channelValues.put(newKey,newLinkedValue);
    linkOldPreviousToNew(oldLastKey,newKey);
    latestPerChannel.put(channelName,newKey);
    return new ValueInsertionResult(newKey);
  }
  finally {
    lock.unlock();
  }
}","@Override public ValueInsertionResult insert(String channelName,String contentType,byte[] data){
  Lock lock=writeLocks.get(channelName);
  lock.lock();
  try {
    DataHubChannelValueKey oldLastKey=latestPerChannel.get(channelName);
    short newSequence=(oldLastKey == null) ? ((short)0) : (short)(oldLastKey.sequence + 1);
    DataHubKey newKey=new DataHubKey(timeProvider.getDate(),newSequence);
    DataHubChannelValueKey newDataHubChannelValueKey=new DataHubChannelValueKey(newKey,channelName);
    DataHubCompositeValue dataHubCompositeValue=new DataHubCompositeValue(contentType,data);
    LinkedDataHubCompositeValue newLinkedValue=new LinkedDataHubCompositeValue(dataHubCompositeValue,optionalFromCompositeKey(oldLastKey),Optional.<DataHubKey>absent());
    channelValues.put(newDataHubChannelValueKey,newLinkedValue);
    linkOldPreviousToNew(oldLastKey,newDataHubChannelValueKey);
    latestPerChannel.put(channelName,newDataHubChannelValueKey);
    return new ValueInsertionResult(newKey);
  }
  finally {
    lock.unlock();
  }
}"
62052,"private void linkOldPreviousToNew(DataHubKey oldLastKey,DataHubKey newKey){
  if (oldLastKey != null) {
    LinkedDataHubCompositeValue previousLinkedValue=channelValues.getIfPresent(oldLastKey);
    if (previousLinkedValue != null) {
      channelValues.put(oldLastKey,new LinkedDataHubCompositeValue(previousLinkedValue.getValue(),previousLinkedValue.getPrevious(),Optional.of(newKey)));
    }
  }
}","private void linkOldPreviousToNew(DataHubChannelValueKey oldLastKey,DataHubChannelValueKey newKey){
  if (oldLastKey != null) {
    LinkedDataHubCompositeValue previousLinkedValue=channelValues.getIfPresent(oldLastKey);
    if (previousLinkedValue != null) {
      channelValues.put(oldLastKey,new LinkedDataHubCompositeValue(previousLinkedValue.getValue(),previousLinkedValue.getPrevious(),Optional.of(new DataHubKey(newKey.date,newKey.sequence))));
    }
  }
}"
62053,"@Test public void testFindLatestId() throws Exception {
  InMemoryChannelDao testClass=new InMemoryChannelDao(mock(TimeProvider.class));
  testClass.createChannel(""String_Node_Str"");
  assertFalse(testClass.findLatestId(""String_Node_Str"").isPresent());
  ValueInsertionResult insertionResult=testClass.insert(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"".getBytes());
  assertEquals(insertionResult.getKey(),testClass.findLatestId(""String_Node_Str"").get());
}","@Test public void testFindLatestId() throws Exception {
  InMemoryChannelDao testClass=new InMemoryChannelDao(new TimeProvider());
  testClass.createChannel(""String_Node_Str"");
  assertFalse(testClass.findLatestId(""String_Node_Str"").isPresent());
  ValueInsertionResult insertionResult=testClass.insert(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"".getBytes());
  assertEquals(insertionResult.getKey(),testClass.findLatestId(""String_Node_Str"").get());
}"
62054,"private void insertChannelMetadata(ChannelConfiguration channelConfig){
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","private void insertChannelMetadata(ChannelConfiguration channelConfig){
  connector.createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62055,"public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  QueryResult<HColumn<String,DataHubCompositeValue>> queryResult=query.setColumnFamily(channelName).setKey(rowKey).setName(keyRenderer.keyToString(key)).execute();
  HColumn<String,DataHubCompositeValue> column=queryResult.get();
  return column == null ? null : column.getValue();
}","public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    return executeQuery(channelName,key,query,rowKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62056,"public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
  return Optional.fromNullable(lastUpdatedKey);
}","public Optional<DataHubKey> findLatestId(String channelName){
  try {
    DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
    return Optional.fromNullable(lastUpdatedKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62057,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      throw new NoSuchChannelException(""String_Node_Str"" + channelName,e);
    }
    throw e;
  }
  return new ValueInsertionResult(key);
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key);
}"
62058,"@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62059,"@Test public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(null);
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  Optional<DataHubKey> result=testClass.findLatestId(channelName);
  assertEquals(Optional.absent(),result);
}","@Test(expected=NoSuchChannelException.class) public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getLastUpdatedKey(channelName)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  testClass.findLatestId(channelName);
}"
62060,"private void insertChannelMetadata(ChannelConfiguration channelConfig){
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","private void insertChannelMetadata(ChannelConfiguration channelConfig){
  connector.createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62061,"public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  QueryResult<HColumn<String,DataHubCompositeValue>> queryResult=query.setColumnFamily(channelName).setKey(rowKey).setName(keyRenderer.keyToString(key)).execute();
  HColumn<String,DataHubCompositeValue> column=queryResult.get();
  return column == null ? null : column.getValue();
}","public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    return executeQuery(channelName,key,query,rowKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62062,"public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
  return Optional.fromNullable(lastUpdatedKey);
}","public Optional<DataHubKey> findLatestId(String channelName){
  try {
    DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
    return Optional.fromNullable(lastUpdatedKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62063,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      throw new NoSuchChannelException(""String_Node_Str"" + channelName,e);
    }
    throw e;
  }
  return new ValueInsertionResult(key);
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key);
}"
62064,"@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62065,"@Test public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(null);
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  Optional<DataHubKey> result=testClass.findLatestId(channelName);
  assertEquals(Optional.absent(),result);
}","@Test(expected=NoSuchChannelException.class) public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getLastUpdatedKey(channelName)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  testClass.findLatestId(channelName);
}"
62066,"private void insertChannelMetadata(ChannelConfiguration channelConfig){
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","private void insertChannelMetadata(ChannelConfiguration channelConfig){
  connector.createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62067,"public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  QueryResult<HColumn<String,DataHubCompositeValue>> queryResult=query.setColumnFamily(channelName).setKey(rowKey).setName(keyRenderer.keyToString(key)).execute();
  HColumn<String,DataHubCompositeValue> column=queryResult.get();
  return column == null ? null : column.getValue();
}","public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    return executeQuery(channelName,key,query,rowKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62068,"public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
  return Optional.fromNullable(lastUpdatedKey);
}","public Optional<DataHubKey> findLatestId(String channelName){
  try {
    DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
    return Optional.fromNullable(lastUpdatedKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62069,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      throw new NoSuchChannelException(""String_Node_Str"" + channelName,e);
    }
    throw e;
  }
  return new ValueInsertionResult(key);
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key);
}"
62070,"@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62071,"@Test public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(null);
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  Optional<DataHubKey> result=testClass.findLatestId(channelName);
  assertEquals(Optional.absent(),result);
}","@Test(expected=NoSuchChannelException.class) public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getLastUpdatedKey(channelName)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  testClass.findLatestId(channelName);
}"
62072,"private void insertChannelMetadata(ChannelConfiguration channelConfig){
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","private void insertChannelMetadata(ChannelConfiguration channelConfig){
  connector.createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  StringSerializer keySerializer=StringSerializer.get();
  Mutator<String> mutator=connector.buildMutator(keySerializer);
  HColumn<String,ChannelConfiguration> column=hector.createColumn(channelConfig.getName(),channelConfig,StringSerializer.get(),channelConfigSerializer);
  mutator.insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62073,"public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  QueryResult<HColumn<String,DataHubCompositeValue>> queryResult=query.setColumnFamily(channelName).setKey(rowKey).setName(keyRenderer.keyToString(key)).execute();
  HColumn<String,DataHubCompositeValue> column=queryResult.get();
  return column == null ? null : column.getValue();
}","public DataHubCompositeValue read(String channelName,DataHubKey key){
  Keyspace keyspace=connector.getKeyspace();
  ColumnQuery<String,String,DataHubCompositeValue> query=hector.createColumnQuery(keyspace,StringSerializer.get(),StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    return executeQuery(channelName,key,query,rowKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62074,"public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
  return Optional.fromNullable(lastUpdatedKey);
}","public Optional<DataHubKey> findLatestId(String channelName){
  try {
    DataHubKey lastUpdatedKey=channelsCollection.getLastUpdatedKey(channelName);
    return Optional.fromNullable(lastUpdatedKey);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
}"
62075,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      throw new NoSuchChannelException(""String_Node_Str"" + channelName,e);
    }
    throw e;
  }
  return new ValueInsertionResult(key);
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey();
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,channelName,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key);
}"
62076,"@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}","@Test public void testCreateChannel() throws Exception {
  String channelName=""String_Node_Str"";
  final Date creationDate=new Date(99999);
  ChannelConfiguration expected=new ChannelConfiguration(channelName,creationDate);
  HColumn<String,ChannelConfiguration> column=new HColumnImpl<String,ChannelConfiguration>(StringSerializer.get(),mock(Serializer.class));
  when(connector.buildMutator(StringSerializer.get())).thenReturn(mutator);
  when(hector.createColumn(channelName,expected,StringSerializer.get(),valueSerializer)).thenReturn(column);
  when(timeProvider.getDate()).thenReturn(creationDate);
  CassandraChannelsCollection testClass=new CassandraChannelsCollection(connector,valueSerializer,hector,timeProvider,keyRenderer);
  ChannelConfiguration result=testClass.createChannel(channelName);
  assertEquals(expected,result);
  verify(connector).createColumnFamily(CHANNELS_COLUMN_FAMILY_NAME);
  verify(connector).createColumnFamily(channelName);
  verify(mutator).insert(CHANNELS_ROW_KEY,CHANNELS_COLUMN_FAMILY_NAME,column);
}"
62077,"@Test public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(null);
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  Optional<DataHubKey> result=testClass.findLatestId(channelName);
  assertEquals(Optional.absent(),result);
}","@Test(expected=NoSuchChannelException.class) public void testFindLatestId_channelNotFound() throws Exception {
  String channelName=""String_Node_Str"";
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  when(channelsCollection.getLastUpdatedKey(channelName)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueReader testClass=new CassandraValueReader(null,null,null,channelsCollection,null);
  testClass.findLatestId(channelName);
}"
62078,"@Override public Optional<LinkedDataHubCompositeValue> getValue(String channelName,DataHubKey key){
  return Optional.fromNullable(channelValues.getIfPresent(key));
}","@Override public Optional<LinkedDataHubCompositeValue> getValue(String channelName,DataHubKey key){
  return Optional.fromNullable(channelValues.getIfPresent(new DataHubChannelValueKey(key,channelName)));
}"
62079,"@Override public Optional<DataHubKey> findLatestId(String channelName){
  DataHubKey key=latestPerChannel.get(channelName);
  return Optional.fromNullable(key);
}","@Override public Optional<DataHubKey> findLatestId(String channelName){
  DataHubChannelValueKey key=latestPerChannel.get(channelName);
  return optionalFromCompositeKey(key);
}"
62080,"@Override public ValueInsertionResult insert(String channelName,String contentType,byte[] data){
  Lock lock=writeLocks.get(channelName);
  lock.lock();
  try {
    DataHubKey oldLastKey=latestPerChannel.get(channelName);
    short newSequence=(oldLastKey == null) ? ((short)0) : (short)(oldLastKey.getSequence() + 1);
    DataHubKey newKey=new DataHubKey(timeProvider.getDate(),newSequence);
    DataHubCompositeValue dataHubCompositeValue=new DataHubCompositeValue(contentType,data);
    LinkedDataHubCompositeValue newLinkedValue=new LinkedDataHubCompositeValue(dataHubCompositeValue,Optional.fromNullable(oldLastKey),Optional.<DataHubKey>absent());
    channelValues.put(newKey,newLinkedValue);
    linkOldPreviousToNew(oldLastKey,newKey);
    latestPerChannel.put(channelName,newKey);
    return new ValueInsertionResult(newKey);
  }
  finally {
    lock.unlock();
  }
}","@Override public ValueInsertionResult insert(String channelName,String contentType,byte[] data){
  Lock lock=writeLocks.get(channelName);
  lock.lock();
  try {
    DataHubChannelValueKey oldLastKey=latestPerChannel.get(channelName);
    short newSequence=(oldLastKey == null) ? ((short)0) : (short)(oldLastKey.sequence + 1);
    DataHubKey newKey=new DataHubKey(timeProvider.getDate(),newSequence);
    DataHubChannelValueKey newDataHubChannelValueKey=new DataHubChannelValueKey(newKey,channelName);
    DataHubCompositeValue dataHubCompositeValue=new DataHubCompositeValue(contentType,data);
    LinkedDataHubCompositeValue newLinkedValue=new LinkedDataHubCompositeValue(dataHubCompositeValue,optionalFromCompositeKey(oldLastKey),Optional.<DataHubKey>absent());
    channelValues.put(newDataHubChannelValueKey,newLinkedValue);
    linkOldPreviousToNew(oldLastKey,newDataHubChannelValueKey);
    latestPerChannel.put(channelName,newDataHubChannelValueKey);
    return new ValueInsertionResult(newKey);
  }
  finally {
    lock.unlock();
  }
}"
62081,"private void linkOldPreviousToNew(DataHubKey oldLastKey,DataHubKey newKey){
  if (oldLastKey != null) {
    LinkedDataHubCompositeValue previousLinkedValue=channelValues.getIfPresent(oldLastKey);
    if (previousLinkedValue != null) {
      channelValues.put(oldLastKey,new LinkedDataHubCompositeValue(previousLinkedValue.getValue(),previousLinkedValue.getPrevious(),Optional.of(newKey)));
    }
  }
}","private void linkOldPreviousToNew(DataHubChannelValueKey oldLastKey,DataHubChannelValueKey newKey){
  if (oldLastKey != null) {
    LinkedDataHubCompositeValue previousLinkedValue=channelValues.getIfPresent(oldLastKey);
    if (previousLinkedValue != null) {
      channelValues.put(oldLastKey,new LinkedDataHubCompositeValue(previousLinkedValue.getValue(),previousLinkedValue.getPrevious(),Optional.of(new DataHubKey(newKey.date,newKey.sequence))));
    }
  }
}"
62082,"@Test public void testFindLatestId() throws Exception {
  InMemoryChannelDao testClass=new InMemoryChannelDao(mock(TimeProvider.class));
  testClass.createChannel(""String_Node_Str"");
  assertFalse(testClass.findLatestId(""String_Node_Str"").isPresent());
  ValueInsertionResult insertionResult=testClass.insert(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"".getBytes());
  assertEquals(insertionResult.getKey(),testClass.findLatestId(""String_Node_Str"").get());
}","@Test public void testFindLatestId() throws Exception {
  InMemoryChannelDao testClass=new InMemoryChannelDao(new TimeProvider());
  testClass.createChannel(""String_Node_Str"");
  assertFalse(testClass.findLatestId(""String_Node_Str"").isPresent());
  ValueInsertionResult insertionResult=testClass.insert(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"".getBytes());
  assertEquals(insertionResult.getKey(),testClass.findLatestId(""String_Node_Str"").get());
}"
62083,"@Override protected void configureServlets(){
  Properties properties=loadProperties();
  Names.bindProperties(binder(),properties);
  bind(CassandraChannelDao.class).asEagerSingleton();
  bind(SubscriptionDispatcher.class).in(Singleton.class);
  bind(JettyWebSocketServlet.class).in(Singleton.class);
  bind(CassandraConnectorFactory.class).in(Singleton.class);
  bind(DataHubKeyRenderer.class).in(Singleton.class);
  bind(DataHubKeyGenerator.class).in(Singleton.class);
  bind(new TypeLiteral<Serializer<ChannelConfiguration>>(){
  }
).toInstance(jacksonHectorSerializer);
  bind(new TypeLiteral<RowKeyStrategy<String,DataHubKey,DataHubCompositeValue>>(){
  }
).to(YearMonthDayRowKeyStrategy.class);
  bind(ChannelDao.class).to(CassandraChannelDao.class).in(Singleton.class);
  serveRegex(""String_Node_Str"").with(JettyWebSocketServlet.class);
  serve(""String_Node_Str"").with(GuiceContainer.class,JERSEY_PROPERTIES);
}","@Override protected void configureServlets(){
  Properties properties=loadProperties();
  Names.bindProperties(binder(),properties);
  bind(CassandraChannelDao.class).asEagerSingleton();
  bind(ChannelLockExecutor.class).in(Singleton.class);
  bind(SubscriptionDispatcher.class).in(Singleton.class);
  bind(SubscriptionRoster.class).in(Singleton.class);
  bind(JettyWebSocketServlet.class).in(Singleton.class);
  bind(CassandraConnectorFactory.class).in(Singleton.class);
  bind(DataHubKeyRenderer.class).in(Singleton.class);
  bind(DataHubKeyGenerator.class).in(Singleton.class);
  bind(new TypeLiteral<Serializer<ChannelConfiguration>>(){
  }
).toInstance(jacksonHectorSerializer);
  bind(new TypeLiteral<RowKeyStrategy<String,DataHubKey,DataHubCompositeValue>>(){
  }
).to(YearMonthDayRowKeyStrategy.class);
  bind(ChannelDao.class).to(CassandraChannelDao.class).in(Singleton.class);
  serveRegex(""String_Node_Str"").with(JettyWebSocketServlet.class);
  serve(""String_Node_Str"").with(GuiceContainer.class,JERSEY_PROPERTIES);
}"
62084,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> rowsList=rows.getList();
  if (reversed) {
    rowsList=Lists.reverse(rowsList);
  }
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : rowsList) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(rows,reversed);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62085,"@GET public Response getValue(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") String id){
  DataHubKey key=keyRenderer.fromString(id);
  Optional<LinkedDataHubCompositeValue> optionalResult=channelDao.getValue(channelName,key);
  if (!optionalResult.isPresent()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  LinkedDataHubCompositeValue columnValue=optionalResult.get();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  String contentType=columnValue.getContentType();
  if (!isNullOrEmpty(contentType)) {
    builder.type(contentType);
  }
  builder.entity(columnValue.getData());
  builder.header(CREATION_DATE_HEADER.getHeaderName(),dateTimeFormatter.print(new DateTime(key.getDate())));
  addPreviousLink(columnValue,builder);
  addNextLink(columnValue,builder);
  return builder.build();
}","@GET public Response getValue(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") String id){
  DataHubKey key=keyRenderer.fromString(id);
  Optional<LinkedDataHubCompositeValue> optionalResult=channelDao.getValue(channelName,key);
  if (!optionalResult.isPresent()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  LinkedDataHubCompositeValue compositeValue=optionalResult.get();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  String contentType=compositeValue.getContentType();
  if (!isNullOrEmpty(contentType)) {
    builder.type(contentType);
  }
  builder.entity(compositeValue.getData());
  builder.header(CREATION_DATE_HEADER.getHeaderName(),dateTimeFormatter.print(new DateTime(key.getDate())));
  addPreviousLink(compositeValue,builder);
  addNextLink(compositeValue,builder);
  return builder.build();
}"
62086,"@Inject public SingleChannelResource(ChannelDao channelDao,SubscriptionDispatcher subscriptionDispatcher,ChannelHypermediaLinkBuilder linkBuilder){
  this.channelDao=channelDao;
  this.linkBuilder=linkBuilder;
  this.subscriptionDispatcher=subscriptionDispatcher;
}","@Inject public SingleChannelResource(ChannelDao channelDao,ChannelHypermediaLinkBuilder linkBuilder,ChannelLockExecutor channelLockExecutor,SubscriptionDispatcher subscriptionDispatcher){
  this.channelDao=channelDao;
  this.linkBuilder=linkBuilder;
  this.channelLockExecutor=channelLockExecutor;
  this.subscriptionDispatcher=subscriptionDispatcher;
}"
62087,"@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@HeaderParam(""String_Node_Str"") String contentType,@PathParam(""String_Node_Str"") String channelName,byte[] data){
  if (!channelDao.channelExists(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ValueInsertionResult insertionResult=channelDao.insert(channelName,contentType,data);
  URI payloadUri=linkBuilder.buildItemUri(insertionResult.getKey());
  subscriptionDispatcher.dispatch(channelName,payloadUri);
  Linked<ValueInsertionResult> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelName)).withLink(""String_Node_Str"",payloadUri).build();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  builder.entity(linkedResult);
  builder.location(payloadUri);
  return builder.build();
}","@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@HeaderParam(""String_Node_Str"") final String contentType,@PathParam(""String_Node_Str"") final String channelName,final byte[] data) throws ExecutionException, InterruptedException {
  if (!channelDao.channelExists(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  Callable<ValueInsertionResult> task=new WriteAndDispatch(channelName,contentType,data);
  ValueInsertionResult insertionResult=channelLockExecutor.execute(channelName,task);
  URI payloadUri=linkBuilder.buildItemUri(insertionResult.getKey());
  Linked<ValueInsertionResult> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelName)).withLink(""String_Node_Str"",payloadUri).build();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  builder.entity(linkedResult);
  builder.location(payloadUri);
  return builder.build();
}"
62088,"@OnWebSocketConnect public void onConnect(final Session session){
  remoteAddress=session.getRemoteAddress().toString();
  channelName=extractChannelName(session);
  URI requestUri=session.getUpgradeRequest().getRequestURI();
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ requestUri);
  endpointSender=new JettyWebsocketEndpointSender(remoteAddress,session.getRemote());
  subscriptionDispatcher.subscribe(channelName,endpointSender);
}","@OnWebSocketConnect public void onConnect(final Session session){
  URI requestUri=session.getUpgradeRequest().getRequestURI();
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ requestUri);
  remoteAddress=session.getRemoteAddress().toString();
  channelName=extractChannelName(session);
  endpointSender=new JettyWebsocketEndpointSender(remoteAddress,session.getRemote());
  WebSocketEventSubscription subscription=subscriptions.subscribe(channelName,endpointSender);
  new Thread(new SubscriptionDispatchWorker(subscription)).start();
}"
62089,"@OnWebSocketClose public void onDisconnect(int statusCode,String reason){
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
  subscriptionDispatcher.unsubscribe(channelName,endpointSender);
}","@OnWebSocketClose public void onDisconnect(int statusCode,String reason){
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
  Optional<WebSocketEventSubscription> optionalSubscription=subscriptions.findSubscriptionForConsumer(channelName,endpointSender);
  if (!optionalSubscription.isPresent()) {
    logger.warn(""String_Node_Str"" + channelName + ""String_Node_Str""+ endpointSender);
    return;
  }
  WebSocketEventSubscription subscription=optionalSubscription.get();
  subscription.getQueue().add(WebsocketEvent.SHUTDOWN);
  subscriptions.unsubscribe(channelName,subscription);
}"
62090,"@Inject public DataHubWebSocket(SubscriptionDispatcher subscriptionDispatcher){
  this.subscriptionDispatcher=subscriptionDispatcher;
}","@Inject public DataHubWebSocket(SubscriptionRoster subscriptions){
  this.subscriptions=subscriptions;
}"
62091,"@Inject public JettyWebSocketServlet(SubscriptionDispatcher subscriptionDispatcher){
  this.creator=new CustomWebSocketCreator(subscriptionDispatcher);
}","@Inject public JettyWebSocketServlet(SubscriptionRoster subscriptions){
  this.creator=new CustomWebSocketCreator(subscriptions);
}"
62092,"public CustomWebSocketCreator(SubscriptionDispatcher subscriptionDispatcher){
  this.subscriptionDispatcher=subscriptionDispatcher;
}","public CustomWebSocketCreator(SubscriptionRoster subscriptions){
  this.subscriptions=subscriptions;
}"
62093,"@Override public Object createWebSocket(UpgradeRequest req,UpgradeResponse resp){
  return new DataHubWebSocket(subscriptionDispatcher);
}","@Override public Object createWebSocket(UpgradeRequest req,UpgradeResponse resp){
  return new DataHubWebSocket(subscriptions);
}"
62094,"@Override protected void configureServlets(){
  Properties properties=loadProperties();
  Names.bindProperties(binder(),properties);
  bind(CassandraChannelDao.class).asEagerSingleton();
  bind(SubscriptionDispatcher.class).in(Singleton.class);
  bind(JettyWebSocketServlet.class).in(Singleton.class);
  bind(CassandraConnectorFactory.class).in(Singleton.class);
  bind(DataHubKeyRenderer.class).in(Singleton.class);
  bind(DataHubKeyGenerator.class).in(Singleton.class);
  bind(new TypeLiteral<Serializer<ChannelConfiguration>>(){
  }
).toInstance(jacksonHectorSerializer);
  bind(new TypeLiteral<RowKeyStrategy<String,DataHubKey,DataHubCompositeValue>>(){
  }
).to(YearMonthDayRowKeyStrategy.class);
  bind(ChannelDao.class).to(CassandraChannelDao.class).in(Singleton.class);
  serveRegex(""String_Node_Str"").with(JettyWebSocketServlet.class);
  serve(""String_Node_Str"").with(GuiceContainer.class,JERSEY_PROPERTIES);
}","@Override protected void configureServlets(){
  Properties properties=loadProperties();
  Names.bindProperties(binder(),properties);
  bind(CassandraChannelDao.class).asEagerSingleton();
  bind(ChannelLockExecutor.class).in(Singleton.class);
  bind(SubscriptionDispatcher.class).in(Singleton.class);
  bind(SubscriptionRoster.class).in(Singleton.class);
  bind(JettyWebSocketServlet.class).in(Singleton.class);
  bind(CassandraConnectorFactory.class).in(Singleton.class);
  bind(DataHubKeyRenderer.class).in(Singleton.class);
  bind(DataHubKeyGenerator.class).in(Singleton.class);
  bind(new TypeLiteral<Serializer<ChannelConfiguration>>(){
  }
).toInstance(jacksonHectorSerializer);
  bind(new TypeLiteral<RowKeyStrategy<String,DataHubKey,DataHubCompositeValue>>(){
  }
).to(YearMonthDayRowKeyStrategy.class);
  bind(ChannelDao.class).to(CassandraChannelDao.class).in(Singleton.class);
  serveRegex(""String_Node_Str"").with(JettyWebSocketServlet.class);
  serve(""String_Node_Str"").with(GuiceContainer.class,JERSEY_PROPERTIES);
}"
62095,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> rowsList=rows.getList();
  if (reversed) {
    rowsList=Lists.reverse(rowsList);
  }
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : rowsList) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,final boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> sortedRows=getSortedRows(rows,reversed);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : sortedRows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62096,"@GET public Response getValue(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") String id){
  DataHubKey key=keyRenderer.fromString(id);
  Optional<LinkedDataHubCompositeValue> optionalResult=channelDao.getValue(channelName,key);
  if (!optionalResult.isPresent()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  LinkedDataHubCompositeValue columnValue=optionalResult.get();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  String contentType=columnValue.getContentType();
  if (!isNullOrEmpty(contentType)) {
    builder.type(contentType);
  }
  builder.entity(columnValue.getData());
  builder.header(CREATION_DATE_HEADER.getHeaderName(),dateTimeFormatter.print(new DateTime(key.getDate())));
  addPreviousLink(columnValue,builder);
  addNextLink(columnValue,builder);
  return builder.build();
}","@GET public Response getValue(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") String id){
  DataHubKey key=keyRenderer.fromString(id);
  Optional<LinkedDataHubCompositeValue> optionalResult=channelDao.getValue(channelName,key);
  if (!optionalResult.isPresent()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  LinkedDataHubCompositeValue compositeValue=optionalResult.get();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  String contentType=compositeValue.getContentType();
  if (!isNullOrEmpty(contentType)) {
    builder.type(contentType);
  }
  builder.entity(compositeValue.getData());
  builder.header(CREATION_DATE_HEADER.getHeaderName(),dateTimeFormatter.print(new DateTime(key.getDate())));
  addPreviousLink(compositeValue,builder);
  addNextLink(compositeValue,builder);
  return builder.build();
}"
62097,"@Inject public SingleChannelResource(ChannelDao channelDao,SubscriptionDispatcher subscriptionDispatcher,ChannelHypermediaLinkBuilder linkBuilder){
  this.channelDao=channelDao;
  this.linkBuilder=linkBuilder;
  this.subscriptionDispatcher=subscriptionDispatcher;
}","@Inject public SingleChannelResource(ChannelDao channelDao,ChannelHypermediaLinkBuilder linkBuilder,ChannelLockExecutor channelLockExecutor,SubscriptionDispatcher subscriptionDispatcher){
  this.channelDao=channelDao;
  this.linkBuilder=linkBuilder;
  this.channelLockExecutor=channelLockExecutor;
  this.subscriptionDispatcher=subscriptionDispatcher;
}"
62098,"@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@HeaderParam(""String_Node_Str"") String contentType,@PathParam(""String_Node_Str"") String channelName,byte[] data){
  if (!channelDao.channelExists(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ValueInsertionResult insertionResult=channelDao.insert(channelName,contentType,data);
  URI payloadUri=linkBuilder.buildItemUri(insertionResult.getKey());
  subscriptionDispatcher.dispatch(channelName,payloadUri);
  Linked<ValueInsertionResult> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelName)).withLink(""String_Node_Str"",payloadUri).build();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  builder.entity(linkedResult);
  builder.location(payloadUri);
  return builder.build();
}","@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@HeaderParam(""String_Node_Str"") final String contentType,@PathParam(""String_Node_Str"") final String channelName,final byte[] data) throws ExecutionException, InterruptedException {
  if (!channelDao.channelExists(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  Callable<ValueInsertionResult> task=new WriteAndDispatch(channelName,contentType,data);
  ValueInsertionResult insertionResult=channelLockExecutor.execute(channelName,task);
  URI payloadUri=linkBuilder.buildItemUri(insertionResult.getKey());
  Linked<ValueInsertionResult> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",linkBuilder.buildChannelUri(channelName)).withLink(""String_Node_Str"",payloadUri).build();
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  builder.entity(linkedResult);
  builder.location(payloadUri);
  return builder.build();
}"
62099,"@OnWebSocketConnect public void onConnect(final Session session){
  remoteAddress=session.getRemoteAddress().toString();
  channelName=extractChannelName(session);
  URI requestUri=session.getUpgradeRequest().getRequestURI();
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ requestUri);
  endpointSender=new JettyWebsocketEndpointSender(remoteAddress,session.getRemote());
  subscriptionDispatcher.subscribe(channelName,endpointSender);
}","@OnWebSocketConnect public void onConnect(final Session session){
  URI requestUri=session.getUpgradeRequest().getRequestURI();
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ requestUri);
  remoteAddress=session.getRemoteAddress().toString();
  channelName=extractChannelName(session);
  endpointSender=new JettyWebsocketEndpointSender(remoteAddress,session.getRemote());
  WebSocketEventSubscription subscription=subscriptions.subscribe(channelName,endpointSender);
  new Thread(new SubscriptionDispatchWorker(subscription)).start();
}"
62100,"@OnWebSocketClose public void onDisconnect(int statusCode,String reason){
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
  subscriptionDispatcher.unsubscribe(channelName,endpointSender);
}","@OnWebSocketClose public void onDisconnect(int statusCode,String reason){
  logger.info(""String_Node_Str"" + remoteAddress + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
  Optional<WebSocketEventSubscription> optionalSubscription=subscriptions.findSubscriptionForConsumer(channelName,endpointSender);
  if (!optionalSubscription.isPresent()) {
    logger.warn(""String_Node_Str"" + channelName + ""String_Node_Str""+ endpointSender);
    return;
  }
  WebSocketEventSubscription subscription=optionalSubscription.get();
  subscription.getQueue().add(WebsocketEvent.SHUTDOWN);
  subscriptions.unsubscribe(channelName,subscription);
}"
62101,"@Inject public DataHubWebSocket(SubscriptionDispatcher subscriptionDispatcher){
  this.subscriptionDispatcher=subscriptionDispatcher;
}","@Inject public DataHubWebSocket(SubscriptionRoster subscriptions){
  this.subscriptions=subscriptions;
}"
62102,"@Inject public JettyWebSocketServlet(SubscriptionDispatcher subscriptionDispatcher){
  this.creator=new CustomWebSocketCreator(subscriptionDispatcher);
}","@Inject public JettyWebSocketServlet(SubscriptionRoster subscriptions){
  this.creator=new CustomWebSocketCreator(subscriptions);
}"
62103,"public CustomWebSocketCreator(SubscriptionDispatcher subscriptionDispatcher){
  this.subscriptionDispatcher=subscriptionDispatcher;
}","public CustomWebSocketCreator(SubscriptionRoster subscriptions){
  this.subscriptions=subscriptions;
}"
62104,"@Override public Object createWebSocket(UpgradeRequest req,UpgradeResponse resp){
  return new DataHubWebSocket(subscriptionDispatcher);
}","@Override public Object createWebSocket(UpgradeRequest req,UpgradeResponse resp){
  return new DataHubWebSocket(subscriptions);
}"
62105,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : rows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> rowsList=rows.getList();
  ListIterator<Row<String,String,DataHubCompositeValue>> rowIterator=rowsList.listIterator(reversed ? rowsList.size() : 0);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  while (canIterate(reversed,rowIterator)) {
    Row<String,String,DataHubCompositeValue> row=getRow(reversed,rowIterator);
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62106,"private Optional<DataHubKey> queryAndFindResult(String channelName,DataHubKey key,DataHubKey maxKey,boolean reversed){
  QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult=queryRange(channelName,key,maxKey,reversed);
  return findFirstDifferentResult(key,queryResult);
}","private Optional<DataHubKey> queryAndFindResult(String channelName,DataHubKey key,DataHubKey maxKey,boolean reversed){
  QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult=queryRange(channelName,key,maxKey,reversed);
  return findFirstDifferentResult(key,queryResult,reversed);
}"
62107,"private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  String inputKeyString=keyRenderer.keyToString(inputKey);
  for (  Row<String,String,DataHubCompositeValue> row : rows) {
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}","private Optional<DataHubKey> findFirstDifferentResult(DataHubKey inputKey,QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult,boolean reversed){
  OrderedRows<String,String,DataHubCompositeValue> rows=queryResult.get();
  List<Row<String,String,DataHubCompositeValue>> rowsList=rows.getList();
  ListIterator<Row<String,String,DataHubCompositeValue>> rowIterator=rowsList.listIterator(reversed ? rowsList.size() : 0);
  String inputKeyString=keyRenderer.keyToString(inputKey);
  while (canIterate(reversed,rowIterator)) {
    Row<String,String,DataHubCompositeValue> row=getRow(reversed,rowIterator);
    ColumnSlice<String,DataHubCompositeValue> columnSlice=row.getColumnSlice();
    Optional<DataHubKey> rowResult=findItemInRow(inputKeyString,columnSlice);
    if (rowResult.isPresent()) {
      return rowResult;
    }
  }
  return Optional.absent();
}"
62108,"private Optional<DataHubKey> queryAndFindResult(String channelName,DataHubKey key,DataHubKey maxKey,boolean reversed){
  QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult=queryRange(channelName,key,maxKey,reversed);
  return findFirstDifferentResult(key,queryResult);
}","private Optional<DataHubKey> queryAndFindResult(String channelName,DataHubKey key,DataHubKey maxKey,boolean reversed){
  QueryResult<OrderedRows<String,String,DataHubCompositeValue>> queryResult=queryRange(channelName,key,maxKey,reversed);
  return findFirstDifferentResult(key,queryResult,reversed);
}"
62109,"public DemoDataGenerator(Context context){
  this.context=context;
  List<String> names=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<String> empty=new LinkedList<String>();
  empty.add(null);
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.HOUR_OF_DAY,18);
  cal.set(Calendar.MINUTE,0);
  for (int i=0; i < 5000; i++) {
    cal.add(Calendar.HOUR,random.nextInt(2) * (-1));
    cal.add(Calendar.MINUTE,random.nextInt(30));
    dates.add(cal.getTime());
  }
}","public DemoDataGenerator(Context context){
  this.context=context;
  List<String> names=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<String> empty=new LinkedList<String>();
  empty.add(null);
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),names));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  apps.add(new AppMock(new Application(""String_Node_Str"",false),empty));
  Date date=new Date();
  Calendar cal=Calendar.getInstance();
  cal.setTimeInMillis(date.getTime());
  cal.set(Calendar.HOUR_OF_DAY,18);
  cal.set(Calendar.MINUTE,0);
  for (int i=0; i < notificationsAmount; i++) {
    cal.add(Calendar.HOUR,random.nextInt(2) * (-1));
    cal.add(Calendar.MINUTE,random.nextInt(30));
    if (dayToSkip != null && !dayToSkip.contains(cal.get(Calendar.DAY_OF_MONTH))) {
      dates.add(cal.getTime());
      Log.d(""String_Node_Str"",cal.getTime().toString());
    }
 else {
      i--;
    }
  }
}"
62110,"public void Generate(boolean emptyFirst){
  if (!hasGenerated) {
    try {
      ApplicationDao daoApp=getDatabaseHelper().getApplicationDao();
      NotificationItemDao daoNtf=getDatabaseHelper().getNotificationDao();
      if (emptyFirst) {
        TableUtils.clearTable(getDatabaseHelper().getConnectionSource(),Application.class);
        TableUtils.clearTable(getDatabaseHelper().getConnectionSource(),NotificationItem.class);
      }
      for (      AppMock app : apps) {
        daoApp.create(app.application);
      }
      for (int i=0; i < 5000; i++) {
        AppMock a=GenerateApplication();
        NotificationItem ntf=new NotificationItem(a.application.getPackageName(),dates.get(i),GenerateApplicationMessage(a));
        daoNtf.create(ntf);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
    this.close();
  }
 else {
    hasGenerated=true;
  }
}","public void Generate(boolean emptyFirst){
  if (!hasGenerated) {
    try {
      ApplicationDao daoApp=getDatabaseHelper().getApplicationDao();
      NotificationItemDao daoNtf=getDatabaseHelper().getNotificationDao();
      if (emptyFirst) {
        TableUtils.clearTable(getDatabaseHelper().getConnectionSource(),Application.class);
        TableUtils.clearTable(getDatabaseHelper().getConnectionSource(),NotificationItem.class);
      }
      for (      AppMock app : apps) {
        daoApp.create(app.application);
      }
      for (int i=0; i < notificationsAmount; i++) {
        AppMock a=GenerateApplication();
        NotificationItem ntf=new NotificationItem(a.application.getPackageName(),dates.get(i),GenerateApplicationMessage(a));
        daoNtf.create(ntf);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
    this.close();
  }
 else {
    hasGenerated=true;
  }
}"
62111,"@Override public void onResume(){
  super.onResume();
  ListView listHistory=(ListView)this.getActivity().findViewById(R.id.list_view_history);
  try {
    List<NotificationDateView> rawData=this.getChartData(getResources().getInteger(R.integer.chart_items));
    ArrayList<String> xVals=new ArrayList<String>(rawData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(rawData.size());
    for (int i=0; i < rawData.size(); i++) {
      Date currentDate=rawData.get(i).Date;
      xVals.add(i,getDateFormat().format(currentDate));
      yVals.add(i,new BarEntry(rawData.get(i).Notifications.floatValue(),i,currentDate));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (currentSelectedDate != null) {
    showDayListView(currentSelectedDate);
    chart.highlightValue(selectedXIndex,selectedDataSetIndex);
  }
 else {
    listHistory.setAdapter(new NotificationAppViewAdapter(this.getActivity(),new LinkedList<NotificationAppView>()));
  }
  try {
    ListView listView=(ListView)getActivity().findViewById(R.id.list_view_history);
    TextView textView=(TextView)getActivity().findViewById(R.id.history_empty);
    if (getDatabaseHelper().getApplicationDao().queryForEq(Application.FIELD_IGNORE,false).size() > 0) {
      listView.setVisibility(View.VISIBLE);
      textView.setVisibility(View.GONE);
    }
 else {
      listView.setVisibility(View.GONE);
      textView.setVisibility(View.VISIBLE);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","@Override public void onResume(){
  super.onResume();
  ListView listHistory=(ListView)this.getActivity().findViewById(R.id.list_view_history);
  try {
    List<NotificationDateView> rawData=this.getChartData(getResources().getInteger(R.integer.chart_items));
    List<NotificationDateView> finalData=new ArrayList<NotificationDateView>();
    for (int i=0; i < rawData.size(); i++) {
      finalData.add(finalData.size(),rawData.get(i));
      if (i < rawData.size() - 1) {
        Calendar nextRawDate=Calendar.getInstance();
        nextRawDate.setTime(rawData.get(i + 1).Date);
        nextRawDate.set(Calendar.HOUR_OF_DAY,0);
        nextRawDate.set(Calendar.MINUTE,0);
        nextRawDate.set(Calendar.SECOND,0);
        nextRawDate.set(Calendar.MILLISECOND,0);
        Calendar nextCalendarDate=Calendar.getInstance();
        nextCalendarDate.setTime(rawData.get(i).Date);
        nextCalendarDate.add(Calendar.DAY_OF_YEAR,1);
        nextCalendarDate.set(Calendar.HOUR_OF_DAY,0);
        nextCalendarDate.set(Calendar.MINUTE,0);
        nextCalendarDate.set(Calendar.SECOND,0);
        nextCalendarDate.set(Calendar.MILLISECOND,0);
        while (!nextCalendarDate.equals(nextRawDate)) {
          NotificationDateView emptyEntry=new NotificationDateView();
          emptyEntry.Date=nextCalendarDate.getTime();
          finalData.add(finalData.size(),emptyEntry);
          nextCalendarDate.add(Calendar.DAY_OF_YEAR,1);
        }
      }
    }
    ArrayList<String> xVals=new ArrayList<String>(finalData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(finalData.size());
    for (int i=0; i < finalData.size(); i++) {
      Date currentDate=finalData.get(i).Date;
      xVals.add(i,getDateFormat().format(currentDate));
      yVals.add(i,new BarEntry(finalData.get(i).Notifications.floatValue(),i,currentDate));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (currentSelectedDate != null) {
    showDayListView(currentSelectedDate);
    chart.highlightValue(selectedXIndex,selectedDataSetIndex);
  }
 else {
    listHistory.setAdapter(new NotificationAppViewAdapter(this.getActivity(),new LinkedList<NotificationAppView>()));
  }
  try {
    ListView listView=(ListView)getActivity().findViewById(R.id.list_view_history);
    TextView textView=(TextView)getActivity().findViewById(R.id.history_empty);
    if (getDatabaseHelper().getApplicationDao().queryForEq(Application.FIELD_IGNORE,false).size() > 0) {
      listView.setVisibility(View.VISIBLE);
      textView.setVisibility(View.GONE);
    }
 else {
      listView.setVisibility(View.GONE);
      textView.setVisibility(View.VISIBLE);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}"
62112,"/** 
 * enables intercept touchevents
 */
public void enableScroll(){
  ViewParent parent=getParent();
  parent.requestDisallowInterceptTouchEvent(false);
}","/** 
 * enables intercept touchevents
 */
public void enableScroll(){
  ViewParent parent=getParent();
  try {
    parent.requestDisallowInterceptTouchEvent(false);
  }
 catch (  NullPointerException e) {
  }
}"
62113,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_history,container,false);
  ListView listHistory=(ListView)view.findViewById(R.id.list_view_history);
  listHistory.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent intent=new Intent(getActivity(),AppDetail.class);
      NotificationAppView clickedApp=(NotificationAppView)adapterView.getAdapter().getItem(i);
      intent.putExtra(Intent.EXTRA_SUBJECT,clickedApp.AppName);
      startActivity(intent);
    }
  }
);
  BarChart chart=new BarChart(getActivity());
  chart.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,((int)getResources().getDimension(R.dimen.bar_chart_height))));
  chart.setDrawBarShadow(false);
  chart.setDrawLegend(false);
  chart.setDescription(""String_Node_Str"");
  chart.setDrawGridBackground(false);
  chart.setDrawHorizontalGrid(false);
  chart.setDrawVerticalGrid(false);
  chart.setPaint(paintWhite,Chart.PAINT_XLABEL);
  chart.setDrawXLabels(true);
  chart.setDrawYLabels(false);
  chart.setValueFormatter(new ValueFormatter(){
    @Override public String getFormattedValue(    float value){
      return Integer.toString((int)value);
    }
  }
);
  chart.setOnChartValueSelectedListener(new OnChartValueSelectedListener(){
    @Override public void onValueSelected(    Entry e,    int dataSetIndex){
      showDayListView((Date)e.getData());
    }
    @Override public void onNothingSelected(){
    }
  }
);
  chart.setValueTextColor(Color.WHITE);
  try {
    List<NotificationDateView> rawData=this.getChartData(14);
    ArrayList<String> xVals=new ArrayList<String>(rawData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(rawData.size());
    for (int i=0; i < rawData.size(); i++) {
      Date currentDate=rawData.get(i).Date;
      xVals.add(i,dateFormat.format(currentDate));
      yVals.add(i,new BarEntry(rawData.get(i).Notifications.floatValue(),i,currentDate));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
    listHistory.addHeaderView(chart,null,false);
    listHistory.setBackgroundColor(getResources().getColor(android.R.color.holo_green_dark));
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_history,container,false);
  ListView listHistory=(ListView)view.findViewById(R.id.list_view_history);
  listHistory.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent intent=new Intent(getActivity(),AppDetail.class);
      NotificationAppView clickedApp=(NotificationAppView)adapterView.getAdapter().getItem(i);
      intent.putExtra(Intent.EXTRA_SUBJECT,clickedApp.AppName);
      startActivity(intent);
    }
  }
);
  BarChart chart=new BarChart(getActivity());
  chart.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,((int)getResources().getDimension(R.dimen.bar_chart_height))));
  chart.setDrawBarShadow(false);
  chart.setDrawLegend(false);
  chart.setDescription(""String_Node_Str"");
  chart.setDrawGridBackground(false);
  chart.setDrawHorizontalGrid(false);
  chart.setDrawVerticalGrid(false);
  chart.setPaint(paintWhite,Chart.PAINT_XLABEL);
  chart.setDrawXLabels(true);
  chart.setDrawYLabels(false);
  chart.setValueFormatter(new ValueFormatter(){
    @Override public String getFormattedValue(    float value){
      return Integer.toString((int)value);
    }
  }
);
  chart.setOnChartValueSelectedListener(new OnChartValueSelectedListener(){
    @Override public void onValueSelected(    Entry e,    int dataSetIndex){
      showDayListView((Date)e.getData());
    }
    @Override public void onNothingSelected(){
    }
  }
);
  chart.setValueTextColor(Color.WHITE);
  try {
    List<NotificationDateView> rawData=this.getChartData(14);
    ArrayList<String> xVals=new ArrayList<String>(rawData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(rawData.size());
    for (int i=0; i < rawData.size(); i++) {
      Date currentDate=rawData.get(i).Date;
      xVals.add(i,dateFormat.format(currentDate));
      yVals.add(i,new BarEntry(rawData.get(i).Notifications.floatValue(),i,currentDate));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
    listHistory.addHeaderView(chart,null,false);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return view;
}"
62114,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  historyPagerAdapter=new HistoryPagerAdapter(getFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setOffscreenPageLimit(3);
  mViewPager.setAdapter(historyPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      getActionBar().setSelectedNavigationItem(position);
    }
  }
);
  ActionBar actionBar=getActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  ActionBar.TabListener tabListener=new ActionBar.TabListener(){
    @Override public void onTabSelected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
      setCurrentItem(tab.getPosition());
    }
    @Override public void onTabUnselected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
    }
    @Override public void onTabReselected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
    }
  }
;
  ActionBar.Tab tabDaily=actionBar.newTab().setText(R.string.history_daily).setTabListener(tabListener);
  ActionBar.Tab tabWeekly=actionBar.newTab().setText(R.string.history_weekly).setTabListener(tabListener);
  ActionBar.Tab tabMonthly=actionBar.newTab().setText(R.string.history_monthly).setTabListener(tabListener);
  actionBar.addTab(tabDaily);
  actionBar.addTab(tabWeekly);
  actionBar.addTab(tabMonthly);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  ActionBar.TabListener tabListener=new ActionBar.TabListener(){
    @Override public void onTabSelected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
      int position=tab.getPosition();
      if (position == 0) {
        fragmentTransaction.replace(R.id.frame_layout,dailyFrag);
      }
 else       if (position == 1) {
        fragmentTransaction.replace(R.id.frame_layout,weeklyFrag);
      }
 else       if (position == 2) {
        fragmentTransaction.replace(R.id.frame_layout,monthlyFrag);
      }
    }
    @Override public void onTabUnselected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
    }
    @Override public void onTabReselected(    ActionBar.Tab tab,    FragmentTransaction fragmentTransaction){
    }
  }
;
  ActionBar.Tab tabDaily=actionBar.newTab().setText(R.string.history_daily).setTabListener(tabListener);
  ActionBar.Tab tabWeekly=actionBar.newTab().setText(R.string.history_weekly).setTabListener(tabListener);
  ActionBar.Tab tabMonthly=actionBar.newTab().setText(R.string.history_monthly).setTabListener(tabListener);
  actionBar.addTab(tabDaily);
  actionBar.addTab(tabWeekly);
  actionBar.addTab(tabMonthly);
}"
62115,"@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  setCurrentItem(tab.getPosition());
}","@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  int position=tab.getPosition();
  if (position == 0) {
    fragmentTransaction.replace(R.id.frame_layout,dailyFrag);
  }
 else   if (position == 1) {
    fragmentTransaction.replace(R.id.frame_layout,weeklyFrag);
  }
 else   if (position == 2) {
    fragmentTransaction.replace(R.id.frame_layout,monthlyFrag);
  }
}"
62116,"public HistoryViewPagerActivity(){
  super(R.layout.viewpager_history);
}","public HistoryViewPagerActivity(){
  super(R.layout.viewpager_history);
  dailyFrag=new HistoryDailyFragment();
  weeklyFrag=new HistoryWeeklyFragment();
  monthlyFrag=new HistoryMonthlyFragment();
}"
62117,"public HistoryFragment(int layoutId){
  this.layoutId=layoutId;
}","public HistoryFragment(){
  this.layoutId=R.layout.fragment_history;
  this.paintWhite.setColor(Color.WHITE);
}"
62118,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layoutId,container,false);
  ListView listHistory=(ListView)view.findViewById(R.id.list_view_history);
  listHistory.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent intent=new Intent(getActivity(),AppDetail.class);
      NotificationAppView clickedApp=(NotificationAppView)adapterView.getAdapter().getItem(i);
      intent.putExtra(Intent.EXTRA_SUBJECT,clickedApp.AppName);
      startActivity(intent);
    }
  }
);
  BarChart chart=(BarChart)inflater.inflate(R.layout.list_header_barchart,listHistory);
  chart.setDrawBarShadow(false);
  chart.setDrawLegend(false);
  chart.setDescription(""String_Node_Str"");
  chart.setDrawGridBackground(false);
  chart.setDrawHorizontalGrid(false);
  chart.setDrawVerticalGrid(false);
  chart.setDrawXLabels(true);
  chart.setValueFormatter(new ValueFormatter(){
    @Override public String getFormattedValue(    float value){
      return Integer.toString((int)value);
    }
  }
);
  chart.setValueTextColor(Color.WHITE);
  try {
    List<NotificationDayView> rawData=getDatabaseHelper().getNotificationDao().getSummaryLastDays(14);
    ArrayList<String> xVals=new ArrayList<String>(rawData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(rawData.size());
    for (int i=0; i < rawData.size(); i++) {
      xVals.add(i,dateFormat.format(rawData.get(i).Date));
      yVals.add(i,new BarEntry(rawData.get(i).Notifications.floatValue(),i));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
    listHistory.addHeaderView(chart,null,false);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layoutId,container,false);
  ListView listHistory=(ListView)view.findViewById(R.id.list_view_history);
  listHistory.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent intent=new Intent(getActivity(),AppDetail.class);
      NotificationAppView clickedApp=(NotificationAppView)adapterView.getAdapter().getItem(i);
      intent.putExtra(Intent.EXTRA_SUBJECT,clickedApp.AppName);
      startActivity(intent);
    }
  }
);
  View header=inflater.inflate(R.layout.list_header_barchart,listHistory,false);
  BarChart chart=(BarChart)header.findViewById(R.id.chart);
  chart.setDrawBarShadow(false);
  chart.setDrawLegend(false);
  chart.setDescription(""String_Node_Str"");
  chart.setDrawGridBackground(false);
  chart.setDrawHorizontalGrid(false);
  chart.setDrawVerticalGrid(false);
  chart.setPaint(paintWhite,Chart.PAINT_XLABEL);
  chart.setDrawXLabels(true);
  chart.setDrawYLabels(false);
  chart.setValueFormatter(new ValueFormatter(){
    @Override public String getFormattedValue(    float value){
      return Integer.toString((int)value);
    }
  }
);
  chart.setOnChartValueSelectedListener(new OnChartValueSelectedListener(){
    @Override public void onValueSelected(    Entry e,    int dataSetIndex){
      showDayListView((Date)e.getData());
    }
    @Override public void onNothingSelected(){
    }
  }
);
  chart.setValueTextColor(Color.WHITE);
  try {
    List<NotificationDayView> rawData=getDatabaseHelper().getNotificationDao().getSummaryLastDays(14);
    ArrayList<String> xVals=new ArrayList<String>(rawData.size());
    ArrayList<BarEntry> yVals=new ArrayList<BarEntry>(rawData.size());
    for (int i=0; i < rawData.size(); i++) {
      Date currentDate=rawData.get(i).Date;
      xVals.add(i,dateFormat.format(currentDate));
      yVals.add(i,new BarEntry(rawData.get(i).Notifications.floatValue(),i,currentDate));
    }
    BarDataSet dataSet=new BarDataSet(yVals,""String_Node_Str"");
    BarData data=new BarData(xVals,dataSet);
    chart.setData(data);
    listHistory.addHeaderView(chart,null,false);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return view;
}"
62119,"@Override public List<NotificationAppView> getOverviewWeek(Date date) throws SQLException {
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  String dateString=df.format(date);
  String rawQuery=""String_Node_Str"" + NotificationItem.FIELD_PACKAGE_NAME + ""String_Node_Str""+ NotificationItem.FIELD_TABLE_NAME+ ""String_Node_Str""+ NotificationItem.FIELD_DATE+ ""String_Node_Str""+ dateString+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ Application.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ Application.FIELD_TABLE_NAME+ ""String_Node_Str""+ Application.FIELD_IGNORE+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_PACKAGE_NAME;
  return this.getOverviewGeneric(rawQuery);
}","@Override public List<NotificationAppView> getOverviewWeek(Date date) throws SQLException {
  Calendar cal=Calendar.getInstance();
  cal.setFirstDayOfWeek(Calendar.MONDAY);
  cal.setTime(date);
  cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
  Date firstDayOfWeek=cal.getTime();
  cal.add(Calendar.DATE,6);
  Date lastDayOfWeek=cal.getTime();
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  String dateStringFirstDay=df.format(firstDayOfWeek);
  String dateStringLastDay=df.format(lastDayOfWeek);
  String rawQuery=""String_Node_Str"" + NotificationItem.FIELD_PACKAGE_NAME + ""String_Node_Str""+ NotificationItem.FIELD_TABLE_NAME+ ""String_Node_Str""+ NotificationItem.FIELD_DATE+ ""String_Node_Str""+ dateStringFirstDay+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_DATE+ ""String_Node_Str""+ dateStringLastDay+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ Application.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ Application.FIELD_TABLE_NAME+ ""String_Node_Str""+ Application.FIELD_IGNORE+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_PACKAGE_NAME;
  return this.getOverviewGeneric(rawQuery);
}"
62120,"@Override public List<NotificationDayView> getSummaryLastDays() throws SQLException {
  LinkedList<NotificationDayView> list=new LinkedList<NotificationDayView>();
  GenericRawResults<String[]> rawResults=this.queryRaw(""String_Node_Str"" + NotificationItem.FIELD_DATE + ""String_Node_Str""+ NotificationItem.FIELD_TABLE_NAME+ ""String_Node_Str""+ NotificationItem.FIELD_DATE+ ""String_Node_Str"");
  List<String[]> results=rawResults.getResults();
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  for (int i=0; i < results.size(); i++) {
    try {
      Date date=formatter.parse(results.get(i)[0]);
      Integer notifications=Integer.parseInt(results.get(i)[1]);
      list.add(new NotificationDayView(date,notifications));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  return list;
}","@Override public List<NotificationDayView> getSummaryLastDays() throws SQLException {
  LinkedList<NotificationDayView> list=new LinkedList<NotificationDayView>();
  GenericRawResults<String[]> rawResults=this.queryRaw(""String_Node_Str"" + NotificationItem.FIELD_DATE + ""String_Node_Str""+ NotificationItem.FIELD_TABLE_NAME+ ""String_Node_Str""+ NotificationItem.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ Application.FIELD_PACKAGE_NAME+ ""String_Node_Str""+ Application.FIELD_TABLE_NAME+ ""String_Node_Str""+ Application.FIELD_IGNORE+ ""String_Node_Str""+ ""String_Node_Str""+ NotificationItem.FIELD_DATE+ ""String_Node_Str"");
  List<String[]> results=rawResults.getResults();
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  for (int i=0; i < results.size(); i++) {
    try {
      Date date=formatter.parse(results.get(i)[0]);
      Integer notifications=Integer.parseInt(results.get(i)[1]);
      list.add(new NotificationDayView(date,notifications));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  return list;
}"
62121,"/** 
 * Try to resolve an artifact from all configured resolver plugins and repositories
 * @param artifactReference reference of the artifact inside the repository
 * @param repositoryURL     the repository's URL
 * @param repositoryType    the type of the repository
 * @param credentials       the credentials to retrieve the artifact
 * @return the artifact's path downloaded locally, null if artifact cannot be resolved
 */
public String resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials){
  if (""String_Node_Str"".equals(repositoryType)) {
    return null;
  }
  for (  IConfigurableArtifactResolver configurableArtifactResolver : registeredResolvers.values()) {
    String resolvedArtifact=configurableArtifactResolver.resolveArtifact(artifactReference,repositoryURL,repositoryType,credentials);
    if (resolvedArtifact != null) {
      return resolvedArtifact;
    }
  }
  for (  Map<String,IArtifactResolver> resolverMap : resolverRegistry.getInstancesByPlugins().values()) {
    for (    IArtifactResolver resolver : resolverMap.values()) {
      String resolvedArtifact=resolver.resolveArtifact(artifactReference,repositoryURL,repositoryType,credentials);
      if (resolvedArtifact != null) {
        return resolvedArtifact;
      }
    }
  }
  return null;
}","/** 
 * Try to resolve an artifact from all configured resolver plugins and repositories This can be ignored with a4c_ignore.
 * @param artifactReference reference of the artifact inside the repository
 * @param repositoryURL     the repository's URL
 * @param repositoryType    the type of the repository
 * @param credentials       the credentials to retrieve the artifact
 * @return the artifact's path downloaded locally, null if artifact cannot be resolved
 */
public String resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials){
  if (""String_Node_Str"".equals(repositoryType)) {
    return ""String_Node_Str"";
  }
  for (  IConfigurableArtifactResolver configurableArtifactResolver : registeredResolvers.values()) {
    String resolvedArtifact=configurableArtifactResolver.resolveArtifact(artifactReference,repositoryURL,repositoryType,credentials);
    if (resolvedArtifact != null) {
      return resolvedArtifact;
    }
  }
  for (  Map<String,IArtifactResolver> resolverMap : resolverRegistry.getInstancesByPlugins().values()) {
    for (    IArtifactResolver resolver : resolverMap.values()) {
      String resolvedArtifact=resolver.resolveArtifact(artifactReference,repositoryURL,repositoryType,credentials);
      if (resolvedArtifact != null) {
        return resolvedArtifact;
      }
    }
  }
  return null;
}"
62122,"@Override public void process(Csar csar,Topology topology,ReplaceNodeOperation operation){
  Map<String,NodeTemplate> nodeTemplates=TopologyUtils.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyUtils.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  nodeTemplates.remove(oldNodeTemplate.getName());
  workflowBuilderService.removeNode(topology,csar,oldNodeTemplate.getName());
  NodeType newType=toscaTypeSearchService.find(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=TemplateBuilder.buildNodeTemplate(newType,oldNodeTemplate,false);
  newNodeTemplate.setName(operation.getNodeName());
  newNodeTemplate.setTags(oldNodeTemplate.getTags());
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  updateRelationshipsCapabilitiesRelationships(topology,newNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology,csar);
  workflowBuilderService.addNode(topologyContext,oldNodeTemplate.getName());
  safe(newNodeTemplate.getRelationships()).forEach((relationshipId,relationshipTemplate) -> workflowBuilderService.addRelationship(topologyContext,newNodeTemplate.getName(),relationshipId));
  TopologyUtils.getTargetRelationships(oldNodeTemplate.getName(),nodeTemplates).forEach(relationshipEntry -> workflowBuilderService.addRelationship(topologyContext,relationshipEntry.getSource().getName(),relationshipEntry.getRelationshipId()));
  if (!operation.isSkipAutoCompletion()) {
    danglingRequirementService.addDanglingRequirements(topology,topologyContext,newNodeTemplate,null);
  }
}","@Override public void process(Csar csar,Topology topology,ReplaceNodeOperation operation){
  Map<String,NodeTemplate> nodeTemplates=TopologyUtils.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyUtils.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  nodeTemplates.remove(oldNodeTemplate.getName());
  workflowBuilderService.removeNode(topology,csar,oldNodeTemplate.getName());
  NodeType newType=toscaTypeSearchService.findOrFail(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=TemplateBuilder.buildNodeTemplate(newType,oldNodeTemplate,false);
  newNodeTemplate.setName(operation.getNodeName());
  newNodeTemplate.setTags(oldNodeTemplate.getTags());
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  updateRelationshipsCapabilitiesRelationships(topology,newNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology,csar);
  workflowBuilderService.addNode(topologyContext,oldNodeTemplate.getName());
  safe(newNodeTemplate.getRelationships()).forEach((relationshipId,relationshipTemplate) -> workflowBuilderService.addRelationship(topologyContext,newNodeTemplate.getName(),relationshipId));
  TopologyUtils.getTargetRelationships(oldNodeTemplate.getName(),nodeTemplates).forEach(relationshipEntry -> workflowBuilderService.addRelationship(topologyContext,relationshipEntry.getSource().getName(),relationshipEntry.getRelationshipId()));
  if (!operation.isSkipAutoCompletion()) {
    danglingRequirementService.addDanglingRequirements(topology,topologyContext,newNodeTemplate,null);
  }
}"
62123,"@SneakyThrows(IOException.class) private void updateGitLocation(GitLocation newGitLocation){
  Path tempPath=tempDirPath.resolve(UUID.randomUUID().toString());
  GitLocation previousLocation=gitLocationDao.findById(newGitLocation.getId());
  if (previousLocation != null) {
    FileUtil.copy(localGitManager.getLocalGitPath(previousLocation),tempPath);
    localGitManager.deleteLocalGit(previousLocation);
  }
  localGitManager.checkout(newGitLocation);
  gitLocationDao.save(newGitLocation);
  if (tempPath != null) {
    User currentUser=AuthorizationUtil.getCurrentUser();
    FileUtil.copy(tempPath,localGitManager.getLocalGitPath(newGitLocation),true);
    localGitManager.commitAndPush(newGitLocation,currentUser.getUsername(),currentUser.getEmail(),""String_Node_Str"");
    FileUtil.delete(tempPath);
  }
}","@SneakyThrows(IOException.class) private void updateGitLocation(GitLocation newGitLocation){
  Path tempPath=tempDirPath.resolve(UUID.randomUUID().toString());
  GitLocation previousLocation=gitLocationDao.findById(newGitLocation.getId());
  if (previousLocation != null) {
    FileUtil.copy(localGitManager.getLocalGitPath(previousLocation),tempPath);
    localGitManager.deleteLocalGit(previousLocation);
  }
  localGitManager.checkout(newGitLocation);
  gitLocationDao.save(newGitLocation);
  if (Files.exists(tempPath)) {
    User currentUser=AuthorizationUtil.getCurrentUser();
    FileUtil.copy(tempPath,localGitManager.getLocalGitPath(newGitLocation),true);
    localGitManager.commitAndPush(newGitLocation,currentUser.getUsername(),currentUser.getEmail(),""String_Node_Str"");
    FileUtil.delete(tempPath);
  }
}"
62124,"@Override public void process(Topology topology,FlowExecutionContext context){
  EnvironmentContext environmentContext=context.getEnvironmentContext().orElseThrow(() -> new IllegalArgumentException(""String_Node_Str""));
  ApplicationEnvironment environment=environmentContext.getEnvironment();
  Map<String,Location> locations=(Map<String,Location>)context.getExecutionCache().get(FlowExecutionContext.DEPLOYMENT_LOCATIONS_MAP_CACHE_KEY);
  AlienContextVariables alienContextVariables=new AlienContextVariables();
  alienContextVariables.setApplicationEnvironment(environment);
  alienContextVariables.setLocation(locations.values().stream().findFirst().get());
  alienContextVariables.setApplication(environmentContext.getApplication());
  Properties appVarProps=quickFileStorageService.loadApplicationVariables(environmentContext.getApplication().getId());
  Properties envTypeVarProps=quickFileStorageService.loadEnvironmentTypeVariables(topology.getId(),environment.getEnvironmentType());
  Properties envVarProps=quickFileStorageService.loadEnvironmentVariables(topology.getId(),environment.getId());
  Map<String,Object> inputsMappingsMap=quickFileStorageService.loadInputsMappingFile(topology.getId());
  InputsMappingFileVariableResolver.InputsResolvingResult inputsResolvingResult=InputsMappingFileVariableResolver.configure(appVarProps,envTypeVarProps,envVarProps,alienContextVariables).resolve(inputsMappingsMap,topology.getInputs());
  if (CollectionUtils.isNotEmpty(inputsResolvingResult.getMissingVariables())) {
    context.log().error(new MissingVariablesTask(inputsResolvingResult.getMissingVariables()));
  }
  if (CollectionUtils.isNotEmpty(inputsResolvingResult.getUnresolved())) {
    context.log().error(new UnresolvablePredefinedInputsTask(inputsResolvingResult.getUnresolved()));
  }
  Map<String,ConstraintUtil.ConstraintInformation> violations=Maps.newHashMap();
  Map<String,ConstraintUtil.ConstraintInformation> typesViolations=Maps.newHashMap();
  for (  Map.Entry<String,PropertyValue> entry : safe(inputsResolvingResult.getResolved()).entrySet()) {
    try {
      ConstraintPropertyService.checkPropertyConstraint(entry.getKey(),entry.getValue(),topology.getInputs().get(entry.getKey()));
    }
 catch (    ConstraintViolationException e) {
      violations.put(entry.getKey(),e.getConstraintInformation());
    }
catch (    ConstraintValueDoNotMatchPropertyTypeException e) {
      typesViolations.put(entry.getKey(),e.getConstraintInformation());
    }
  }
  if (MapUtils.isNotEmpty(violations)) {
    context.log().error(new PredefinedInputsConstraintViolationTask(violations,TaskCode.PREDEFINED_INPUTS_CONSTRAINT_VIOLATION));
  }
  if (MapUtils.isNotEmpty(typesViolations)) {
    context.log().error(new PredefinedInputsConstraintViolationTask(typesViolations,TaskCode.PREDEFINED_INPUTS_TYPE_VIOLATION));
  }
  PreconfiguredInputsConfiguration preconfiguredInputsConfiguration=new PreconfiguredInputsConfiguration(environment.getTopologyVersion(),environment.getId());
  preconfiguredInputsConfiguration.setInputs(inputsResolvingResult.getResolved());
  inputsResolvingResult.getUnresolved().forEach(unresolved -> preconfiguredInputsConfiguration.getInputs().put(unresolved,null));
  preconfiguredInputsConfiguration.setLastUpdateDate(new Date());
  preconfiguredInputsConfiguration.setCreationDate(new Date());
  context.saveConfiguration(preconfiguredInputsConfiguration);
}","@Override public void process(Topology topology,FlowExecutionContext context){
  EnvironmentContext environmentContext=context.getEnvironmentContext().orElseThrow(() -> new IllegalArgumentException(""String_Node_Str""));
  ApplicationEnvironment environment=environmentContext.getEnvironment();
  Map<String,Location> locations=(Map<String,Location>)context.getExecutionCache().get(FlowExecutionContext.DEPLOYMENT_LOCATIONS_MAP_CACHE_KEY);
  AlienContextVariables alienContextVariables=new AlienContextVariables();
  alienContextVariables.setApplicationEnvironment(environment);
  alienContextVariables.setLocation(locations.values().stream().findFirst().get());
  alienContextVariables.setApplication(environmentContext.getApplication());
  Properties appVarProps=quickFileStorageService.loadApplicationVariables(environmentContext.getApplication().getId());
  Properties envTypeVarProps=quickFileStorageService.loadEnvironmentTypeVariables(topology.getId(),environment.getEnvironmentType());
  Properties envVarProps=quickFileStorageService.loadEnvironmentVariables(topology.getId(),environment.getId());
  Map<String,Object> inputsMappingsMap=quickFileStorageService.loadInputsMappingFile(topology.getId());
  InputsMappingFileVariableResolver.InputsResolvingResult inputsResolvingResult=InputsMappingFileVariableResolver.configure(appVarProps,envTypeVarProps,envVarProps,alienContextVariables).resolve(inputsMappingsMap,topology.getInputs());
  if (CollectionUtils.isNotEmpty(inputsResolvingResult.getMissingVariables())) {
    context.log().error(new MissingVariablesTask(inputsResolvingResult.getMissingVariables()));
  }
  if (CollectionUtils.isNotEmpty(inputsResolvingResult.getUnresolved())) {
    context.log().error(new UnresolvablePredefinedInputsTask(inputsResolvingResult.getUnresolved()));
  }
  Map<String,ConstraintUtil.ConstraintInformation> violations=Maps.newHashMap();
  Map<String,ConstraintUtil.ConstraintInformation> typesViolations=Maps.newHashMap();
  for (  Map.Entry<String,PropertyValue> entry : safe(inputsResolvingResult.getResolved()).entrySet()) {
    try {
      ConstraintPropertyService.checkPropertyConstraint(entry.getKey(),entry.getValue(),topology.getInputs().get(entry.getKey()));
    }
 catch (    ConstraintViolationException e) {
      violations.put(entry.getKey(),getConstraintInformation(e.getMessage(),e.getConstraintInformation()));
    }
catch (    ConstraintValueDoNotMatchPropertyTypeException e) {
      typesViolations.put(entry.getKey(),getConstraintInformation(e.getMessage(),e.getConstraintInformation()));
    }
  }
  if (MapUtils.isNotEmpty(violations)) {
    context.log().error(new PredefinedInputsConstraintViolationTask(violations,TaskCode.PREDEFINED_INPUTS_CONSTRAINT_VIOLATION));
  }
  if (MapUtils.isNotEmpty(typesViolations)) {
    context.log().error(new PredefinedInputsConstraintViolationTask(typesViolations,TaskCode.PREDEFINED_INPUTS_TYPE_VIOLATION));
  }
  PreconfiguredInputsConfiguration preconfiguredInputsConfiguration=new PreconfiguredInputsConfiguration(environment.getTopologyVersion(),environment.getId());
  preconfiguredInputsConfiguration.setInputs(inputsResolvingResult.getResolved());
  inputsResolvingResult.getUnresolved().forEach(unresolved -> preconfiguredInputsConfiguration.getInputs().put(unresolved,null));
  preconfiguredInputsConfiguration.setLastUpdateDate(new Date());
  preconfiguredInputsConfiguration.setCreationDate(new Date());
  context.saveConfiguration(preconfiguredInputsConfiguration);
}"
62125,"public InputsResolvingResult resolve(Map<String,Object> inputMappingMap,Map<String,PropertyDefinition> inputsDefinition){
  Map<String,PropertyValue> resolved=Maps.newHashMap();
  MapPropertySource inputMappingMapPropertySource=new MapPropertySource(""String_Node_Str"",inputMappingMap);
  getPropertySources().addFirst(inputMappingMapPropertySource);
  Set<String> missingVariables=Sets.newHashSet();
  Set<String> unresolvableInputs=Sets.newHashSet();
  try {
    for (    String propertyName : inputMappingMapPropertySource.getPropertyNames()) {
      Object resolvedPropertyValue=null;
      try {
        resolvedPropertyValue=resolve(propertyName,Object.class);
      }
 catch (      UnknownVariableException e) {
        missingVariables.add(e.getVariableName());
        unresolvableInputs.add(propertyName);
        continue;
      }
catch (      IllegalArgumentException e) {
        Matcher matcher=VARIABLE_NAME_IN_EXCEPTION_PATTERN.matcher(e.getMessage());
        if (matcher.matches()) {
          missingVariables.add(matcher.group(1));
          unresolvableInputs.add(propertyName);
        }
 else {
          throw new RuntimeException(e);
        }
        continue;
      }
      PropertyDefinition propertyDefinition=inputsDefinition.get(propertyName);
      PropertyValue convertedPropertyValue;
      if (resolvedPropertyValue != null && propertyDefinition != null) {
        convertedPropertyValue=converter.toPropertyValue(resolvedPropertyValue,propertyDefinition);
        if (convertedPropertyValue != null) {
          resolved.put(propertyName,convertedPropertyValue);
        }
      }
    }
  }
  finally {
    getPropertySources().remove(inputMappingMapPropertySource.getName());
  }
  return new InputsResolvingResult(resolved,unresolvableInputs,missingVariables);
}","public InputsResolvingResult resolve(Map<String,Object> inputMappingMap,Map<String,PropertyDefinition> inputsDefinition){
  Map<String,PropertyValue> resolved=Maps.newHashMap();
  MapPropertySource inputMappingMapPropertySource=new MapPropertySource(""String_Node_Str"",inputMappingMap);
  getPropertySources().addFirst(inputMappingMapPropertySource);
  Set<String> missingVariables=Sets.newHashSet();
  Set<String> unresolvableInputs=Sets.newHashSet();
  try {
    for (    String propertyName : inputMappingMapPropertySource.getPropertyNames()) {
      Object resolvedPropertyValue=null;
      try {
        resolvedPropertyValue=resolve(propertyName,Object.class);
      }
 catch (      UnknownVariableException e) {
        missingVariables.add(e.getVariableName());
        unresolvableInputs.add(propertyName);
        continue;
      }
catch (      IllegalArgumentException e) {
        Matcher matcher=VARIABLE_NAME_IN_EXCEPTION_PATTERN.matcher(e.getMessage());
        if (matcher.matches()) {
          missingVariables.add(matcher.group(1));
          unresolvableInputs.add(propertyName);
        }
 else {
          throw new RuntimeException(e);
        }
        continue;
      }
      PropertyDefinition propertyDefinition=inputsDefinition.get(propertyName);
      PropertyValue convertedPropertyValue;
      if (resolvedPropertyValue != null && propertyDefinition != null) {
        try {
          convertedPropertyValue=converter.toPropertyValue(resolvedPropertyValue,propertyDefinition);
        }
 catch (        IllegalStateException e) {
          convertedPropertyValue=toDefaultType(resolvedPropertyValue);
        }
        if (convertedPropertyValue != null) {
          resolved.put(propertyName,convertedPropertyValue);
        }
      }
    }
  }
  finally {
    getPropertySources().remove(inputMappingMapPropertySource.getName());
  }
  return new InputsResolvingResult(resolved,unresolvableInputs,missingVariables);
}"
62126,"@SuppressWarnings(""String_Node_Str"") public PropertyValue toPropertyValue(Object resolvedPropertyValue,PropertyDefinition propertyDefinition){
  if (resolvedPropertyValue == null) {
    return null;
  }
  if (ToscaTypes.isSimple(propertyDefinition.getType())) {
    return new ScalarPropertyValue(resolvedPropertyValue.toString());
  }
switch (propertyDefinition.getType()) {
case ToscaTypes.MAP:
    if (resolvedPropertyValue instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
      Map<String,Object> resultMap=Maps.newHashMap();
      map.forEach((key,value) -> resultMap.put(key,toPropertyValue(value,propertyDefinition.getEntrySchema())));
      return new ComplexPropertyValue(resultMap);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + Map.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
    }
case ToscaTypes.LIST:
  if (resolvedPropertyValue instanceof Collection) {
    List list=(List)resolvedPropertyValue;
    List resultList=new LinkedList();
    for (    Object item : list) {
      resultList.add(toPropertyValue(item,propertyDefinition.getEntrySchema()));
    }
    return new ListPropertyValue(resultList);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + Collection.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
  }
default :
DataType dataType=findDataType(propertyDefinition.getType());
if (dataType == null) {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
if (dataType.isDeriveFromSimpleType()) {
return new ScalarPropertyValue(resolvedPropertyValue.toString());
}
 else if (resolvedPropertyValue instanceof Map) {
Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
return new ComplexPropertyValue(map);
}
 else {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
}
}","@SuppressWarnings(""String_Node_Str"") public PropertyValue toPropertyValue(Object resolvedPropertyValue,PropertyDefinition propertyDefinition){
  if (resolvedPropertyValue == null) {
    return null;
  }
  if (ToscaTypes.isSimple(propertyDefinition.getType())) {
    return new ScalarPropertyValue(resolvedPropertyValue.toString());
  }
switch (propertyDefinition.getType()) {
case ToscaTypes.MAP:
    if (resolvedPropertyValue instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
      Map<String,Object> resultMap=Maps.newHashMap();
      map.forEach((key,value) -> resultMap.put(key,toPropertyValue(value,propertyDefinition.getEntrySchema())));
      return new ComplexPropertyValue(resultMap);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + Map.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
    }
case ToscaTypes.LIST:
  if (resolvedPropertyValue instanceof Collection) {
    List list=(List)resolvedPropertyValue;
    List resultList=new LinkedList();
    for (    Object item : list) {
      resultList.add(toPropertyValue(item,propertyDefinition.getEntrySchema()));
    }
    return new ListPropertyValue(resultList);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + Collection.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
  }
default :
DataType dataType=findDataType(propertyDefinition.getType());
if (dataType == null) {
throw new NotFoundException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
if (dataType.isDeriveFromSimpleType()) {
return new ScalarPropertyValue(resolvedPropertyValue.toString());
}
 else if (resolvedPropertyValue instanceof Map) {
Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
return new ComplexPropertyValue(map);
}
 else {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
}
}
}"
62127,"/** 
 * Check the constraints on an unwrapped property value (basically a string, map or list) and get events through the given consumer parameter when missing properties on complex data type are found. Note that the property value cannot be null and the required characteristic of the initial property definition will NOT be checked.
 * @param propertyName The name of the property.
 * @param propertyValue The value of the property to check.
 * @param propertyDefinition The property definition that defines the property to check.
 * @param missingPropertyConsumer A consumer to receive events when a required property is not defined on a complex type sub-field.
 * @throws ConstraintValueDoNotMatchPropertyTypeException In case the value type doesn't match the type of the property as defined.
 * @throws ConstraintViolationException In case the value doesn't match one of the constraints defined on the property.
 */
public static void checkPropertyConstraint(String propertyName,Object propertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  Object value=propertyValue;
  if (propertyValue instanceof PropertyValue) {
    value=((PropertyValue)propertyValue).getValue();
  }
  boolean isTypeDerivedFromPrimitive=false;
  DataType dataType=null;
  String typeName=propertyDefinition.getType();
  if (!ToscaTypes.isPrimitive(typeName)) {
    dataType=ToscaContext.get(DataType.class,typeName);
    if (dataType instanceof PrimitiveDataType) {
      isTypeDerivedFromPrimitive=true;
    }
  }
  if (value instanceof String) {
    if (ToscaTypes.isSimple(typeName)) {
      checkSimplePropertyConstraint(propertyName,(String)value,propertyDefinition);
    }
 else     if (isTypeDerivedFromPrimitive) {
      checkComplexPropertyDerivedFromPrimitiveTypeConstraints(propertyName,(String)value,propertyDefinition,dataType);
    }
 else {
      throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + value.getClass().getName());
    }
  }
 else   if (value instanceof Map) {
    if (ToscaTypes.MAP.equals(typeName)) {
      checkMapPropertyConstraint(propertyName,(Map<String,Object>)value,propertyDefinition,missingPropertyConsumer);
    }
 else {
      checkDataTypePropertyConstraint(propertyName,(Map<String,Object>)value,propertyDefinition,missingPropertyConsumer);
    }
  }
 else   if (value instanceof List) {
    if (ToscaTypes.RANGE.equals(typeName)) {
      checkRangePropertyConstraint(propertyName,(List<Object>)value,propertyDefinition);
    }
 else {
      checkListPropertyConstraint(propertyName,(List<Object>)value,propertyDefinition,missingPropertyConsumer);
    }
  }
 else {
    throw new InvalidArgumentException(""String_Node_Str"" + value.getClass().getName());
  }
}","/** 
 * Check the constraints on an unwrapped property value (basically a string, map or list) and get events through the given consumer parameter when missing properties on complex data type are found. Note that the property value cannot be null and the required characteristic of the initial property definition will NOT be checked.
 * @param propertyName The name of the property.
 * @param propertyValue The value of the property to check.
 * @param propertyDefinition The property definition that defines the property to check.
 * @param missingPropertyConsumer A consumer to receive events when a required property is not defined on a complex type sub-field.
 * @throws ConstraintValueDoNotMatchPropertyTypeException In case the value type doesn't match the type of the property as defined.
 * @throws ConstraintViolationException In case the value doesn't match one of the constraints defined on the property.
 */
public static void checkPropertyConstraint(String propertyName,Object propertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  Object value=propertyValue;
  if (propertyValue instanceof PropertyValue) {
    value=((PropertyValue)propertyValue).getValue();
  }
  boolean isTypeDerivedFromPrimitive=false;
  DataType dataType=null;
  String typeName=propertyDefinition.getType();
  if (!ToscaTypes.isPrimitive(typeName)) {
    dataType=ToscaContext.get(DataType.class,typeName);
    if (dataType instanceof PrimitiveDataType) {
      isTypeDerivedFromPrimitive=true;
    }
  }
  if (value instanceof String) {
    if (ToscaTypes.isSimple(typeName)) {
      checkSimplePropertyConstraint(propertyName,(String)value,propertyDefinition);
    }
 else     if (isTypeDerivedFromPrimitive) {
      checkComplexPropertyDerivedFromPrimitiveTypeConstraints(propertyName,(String)value,propertyDefinition,dataType);
    }
 else {
      throwConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType(),propertyName,propertyDefinition.getType(),value);
    }
  }
 else   if (value instanceof Map) {
    if (ToscaTypes.MAP.equals(typeName)) {
      checkMapPropertyConstraint(propertyName,(Map<String,Object>)value,propertyDefinition,missingPropertyConsumer);
    }
 else {
      checkDataTypePropertyConstraint(propertyName,(Map<String,Object>)value,propertyDefinition,missingPropertyConsumer);
    }
  }
 else   if (value instanceof List) {
    if (ToscaTypes.RANGE.equals(typeName)) {
      checkRangePropertyConstraint(propertyName,(List<Object>)value,propertyDefinition);
    }
 else {
      checkListPropertyConstraint(propertyName,(List<Object>)value,propertyDefinition,missingPropertyConsumer);
    }
  }
 else {
    throw new InvalidArgumentException(""String_Node_Str"" + value.getClass().getName());
  }
}"
62128,"private static void checkListPropertyConstraint(String propertyName,List<Object> listPropertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  if (!ToscaTypes.LIST.equals(propertyDefinition.getType())) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType());
  }
  PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
  if (entrySchema == null) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
  }
  checkLengthConstraints(propertyDefinition.getConstraints(),listPropertyValue);
  for (int i=0; i < listPropertyValue.size(); i++) {
    checkPropertyConstraint(propertyName + ""String_Node_Str"" + String.valueOf(i)+ ""String_Node_Str"",listPropertyValue.get(i),entrySchema,missingPropertyConsumer);
  }
}","private static void checkListPropertyConstraint(String propertyName,List<Object> listPropertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  if (!ToscaTypes.LIST.equals(propertyDefinition.getType())) {
    throwConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType(),propertyName,ToscaTypes.LIST,null);
  }
  PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
  if (entrySchema == null) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
  }
  checkLengthConstraints(propertyDefinition.getConstraints(),listPropertyValue);
  for (int i=0; i < listPropertyValue.size(); i++) {
    checkPropertyConstraint(propertyName + ""String_Node_Str"" + String.valueOf(i)+ ""String_Node_Str"",listPropertyValue.get(i),entrySchema,missingPropertyConsumer);
  }
}"
62129,"private static void checkMapPropertyConstraint(String propertyName,Map<String,Object> mapPropertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  if (!ToscaTypes.MAP.equals(propertyDefinition.getType())) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType());
  }
  PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
  if (entrySchema == null) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
  }
  checkLengthConstraints(propertyDefinition.getConstraints(),mapPropertyValue);
  for (  Map.Entry<String,Object> complexPropertyValueEntry : mapPropertyValue.entrySet()) {
    checkPropertyConstraint(propertyName + ""String_Node_Str"" + complexPropertyValueEntry.getKey(),complexPropertyValueEntry.getValue(),entrySchema,missingPropertyConsumer);
  }
}","private static void checkMapPropertyConstraint(String propertyName,Map<String,Object> mapPropertyValue,PropertyDefinition propertyDefinition,Consumer<String> missingPropertyConsumer) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  if (!ToscaTypes.MAP.equals(propertyDefinition.getType())) {
    throwConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType(),propertyName,ToscaTypes.MAP,null);
  }
  PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
  if (entrySchema == null) {
    throw new ConstraintValueDoNotMatchPropertyTypeException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
  }
  checkLengthConstraints(propertyDefinition.getConstraints(),mapPropertyValue);
  for (  Map.Entry<String,Object> complexPropertyValueEntry : mapPropertyValue.entrySet()) {
    checkPropertyConstraint(propertyName + ""String_Node_Str"" + complexPropertyValueEntry.getKey(),complexPropertyValueEntry.getValue(),entrySchema,missingPropertyConsumer);
  }
}"
62130,"@Override protected void processNodeOperation(Csar csar,Topology topology,AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (AlienUtils.safe(sourceNode.getRelationships()).containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Map<String,NodeTemplate> nodeTemplates=TopologyUtils.getNodeTemplates(topology);
  TopologyUtils.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  RelationshipType indexedRelationshipType=toscaTypeSearchService.find(RelationshipType.class,operation.getRelationshipType(),operation.getRelationshipVersion());
  if (indexedRelationshipType == null) {
    throw new NotFoundException(RelationshipType.class.getName(),operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion(),""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  TemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology,csar);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
}","@Override protected void processNodeOperation(Csar csar,Topology topology,AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (AlienUtils.safe(sourceNode.getRelationships()).containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Map<String,NodeTemplate> nodeTemplates=TopologyUtils.getNodeTemplates(topology);
  TopologyUtils.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  RelationshipType indexedRelationshipType=toscaTypeSearchService.find(RelationshipType.class,operation.getRelationshipType(),operation.getRelationshipVersion());
  if (indexedRelationshipType == null) {
    throw new NotFoundException(RelationshipType.class.getName(),operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion(),""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  NodeTemplate newSourceNode=topology.getNodeTemplates().get(sourceNode.getName());
  if (sourceNode != newSourceNode) {
    sourceNode=newSourceNode;
  }
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  TemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology,csar);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
}"
62131,"protected boolean doMergeNode(Topology topology,FlowExecutionContext context,String templateId,NodePropsOverride nodePropsOverride){
  final ConfigChanged configChanged=new ConfigChanged();
  T template=getTemplates(topology).get(templateId);
  NodeType nodeType=ToscaContext.get(NodeType.class,template.getType());
  template.setProperties(mergeProperties(nodePropsOverride.getProperties(),template.getProperties(),nodeType.getProperties(),propertyName -> {
    configChanged.changed=true;
    context.log().info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ getSubject()+ ""String_Node_Str""+ templateId+ ""String_Node_Str"");
  }
));
  return configChanged.changed;
}","protected boolean doMergeNode(Topology topology,FlowExecutionContext context,String templateId,NodePropsOverride nodePropsOverride){
  final ConfigChanged configChanged=new ConfigChanged();
  U template=getTemplates(topology).get(templateId);
  T toscaType=ToscaContext.get(getToscaTypeClass(),template.getType());
  template.setProperties(mergeProperties(nodePropsOverride.getProperties(),template.getProperties(),toscaType.getProperties(),propertyName -> {
    configChanged.changed=true;
    context.log().info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ getSubject()+ ""String_Node_Str""+ templateId+ ""String_Node_Str"");
  }
));
  return configChanged.changed;
}"
62132,"abstract Map<String,T> getTemplates(Topology topology);","abstract Map<String,U> getTemplates(Topology topology);"
62133,"/** 
 * Utility method to configure the application endpoint whatever security implementation is defined.
 * @param httpSecurity The http security object to configure.
 * @throws Exception see httpSecurity.authorizeRequests()
 */
public static void configure(HttpSecurity httpSecurity,LogoutSuccessHandler successLogoutHandler) throws Exception {
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAnyAuthority(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.formLogin().defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll();
  if (successLogoutHandler == null) {
    httpSecurity.logout().logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"");
  }
 else {
    httpSecurity.getConfigurer(LogoutConfigurer.class).logoutSuccessHandler(successLogoutHandler);
  }
  httpSecurity.exceptionHandling().accessDeniedHandler(accessDeniedHandler);
  httpSecurity.exceptionHandling().authenticationEntryPoint(new FailureAuthenticationEntryPoint());
  httpSecurity.csrf().disable();
}","/** 
 * Utility method to configure the application endpoint whatever security implementation is defined.
 * @param httpSecurity The http security object to configure.
 * @throws Exception see httpSecurity.authorizeRequests()
 */
public static void configure(HttpSecurity httpSecurity,LogoutSuccessHandler successLogoutHandler) throws Exception {
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAnyAuthority(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.formLogin().defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll();
  if (successLogoutHandler == null) {
    httpSecurity.logout().logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"");
  }
 else {
    httpSecurity.getConfigurer(LogoutConfigurer.class).logoutSuccessHandler(successLogoutHandler);
  }
  httpSecurity.exceptionHandling().accessDeniedHandler(accessDeniedHandler);
  httpSecurity.exceptionHandling().authenticationEntryPoint(new FailureAuthenticationEntryPoint());
  httpSecurity.csrf().disable();
}"
62134,"public void deleteAllByTopologyVersionId(String versionId){
  List<Path> paths=localGitRepositoryPathResolver.findAllLocalDeploymentConfigGitPath();
  for (  Path path : paths) {
    try {
      RepositoryManager.dropStash(path,""String_Node_Str"" + versionId);
      RepositoryManager.deleteBranch(path,versionId,false);
    }
 catch (    GitException e) {
      log.error(""String_Node_Str"" + versionId + ""String_Node_Str"",e);
    }
  }
}","public void deleteAllByTopologyVersionId(String applicationId,String versionId){
  List<Path> paths=localGitRepositoryPathResolver.findAllEnvironmentSetupLocalPath(applicationId);
  for (  Path path : paths) {
    try {
      RepositoryManager.dropStash(path,""String_Node_Str"" + versionId);
      RepositoryManager.deleteBranch(path,versionId,false);
    }
 catch (    GitException e) {
      log.error(""String_Node_Str"" + versionId + ""String_Node_Str"",e);
    }
  }
}"
62135,"public void deleteAllByEnvironmentId(String environmentId){
  Path path=localGitRepositoryPathResolver.findLocalPathRelatedToEnvironment(environmentId);
  deleteDirectory(path);
}","public void deleteAllByEnvironmentId(String applicationId,String environmentId){
  Path path=localGitRepositoryPathResolver.findEnvironmentSetupLocalPath(applicationId,environmentId);
  deleteDirectory(path);
}"
62136,"/** 
 * Called after yaml parsing.
 */
private void finalizeParsedWorkflows(TopologyContext topologyContext,Node node){
  if (MapUtils.isEmpty(topologyContext.getTopology().getWorkflows())) {
    return;
  }
  normalizeWorkflowNames(topologyContext.getTopology().getWorkflows());
  for (  Workflow wf : topologyContext.getTopology().getWorkflows().values()) {
    wf.setStandard(WorkflowUtils.isStandardWorkflow(wf));
    if (wf.getSteps() != null) {
      for (      WorkflowStep step : wf.getSteps().values()) {
        if (step.getOnSuccess() != null) {
          Iterator<String> followingIds=step.getOnSuccess().iterator();
          while (followingIds.hasNext()) {
            String followingId=followingIds.next();
            WorkflowStep followingStep=wf.getSteps().get(followingId);
            if (followingStep == null) {
              followingIds.remove();
              ParsingContextExecution.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.UNKNWON_WORKFLOW_STEP,null,node.getStartMark(),null,node.getEndMark(),followingId));
            }
 else {
              followingStep.addPreceding(step.getName());
            }
          }
        }
      }
    }
    WorkflowUtils.fillHostId(wf,topologyContext);
    int errorCount=workflowBuilderService.validateWorkflow(topologyContext,wf);
    if (errorCount > 0) {
      processWorkflowErrors(wf,wf.getErrors(),node);
    }
  }
}","/** 
 * Called after yaml parsing.
 */
private void finalizeParsedWorkflows(TopologyContext topologyContext,Node node){
  if (MapUtils.isEmpty(topologyContext.getTopology().getWorkflows())) {
    return;
  }
  normalizeWorkflowNames(topologyContext.getTopology().getWorkflows());
  for (  Workflow wf : topologyContext.getTopology().getWorkflows().values()) {
    wf.setStandard(WorkflowUtils.isStandardWorkflow(wf));
    if (wf.getSteps() != null) {
      for (      WorkflowStep step : wf.getSteps().values()) {
        if (step.getOnSuccess() != null) {
          Iterator<String> followingIds=step.getOnSuccess().iterator();
          while (followingIds.hasNext()) {
            String followingId=followingIds.next();
            WorkflowStep followingStep=wf.getSteps().get(followingId);
            if (followingStep == null) {
              followingIds.remove();
              ParsingContextExecution.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.UNKNWON_WORKFLOW_STEP,null,node.getStartMark(),null,node.getEndMark(),followingId));
            }
 else {
              followingStep.addPreceding(step.getName());
            }
          }
        }
      }
    }
    try {
      WorkflowUtils.fillHostId(wf,topologyContext);
    }
 catch (    NotFoundException e) {
      log.trace(""String_Node_Str"",e);
    }
    int errorCount=workflowBuilderService.validateWorkflow(topologyContext,wf);
    if (errorCount > 0) {
      processWorkflowErrors(wf,wf.getErrors(),node);
    }
  }
}"
62137,"/** 
 * To filter the confidential parameters inside the request body
 * @param original A json string of request body
 * @param method A method to be audited
 * @return A new string already formatting the filtered parameters
 * @throws IOException
 */
private String filterRequestBody(String original,final Method method) throws IOException {
  if (StringUtils.isEmpty(original)) {
    return original;
  }
  Map<String,Object> body=JsonUtil.toMap(original);
  for (  String filteredParameter : method.getBodyHiddenFields()) {
    body.computeIfPresent(filteredParameter,(k,v) -> String.join(""String_Node_Str"",Collections.nCopies(10,AuditConfiguration.FORMATTER)));
  }
  return JsonUtil.toString(body);
}","/** 
 * To filter the confidential parameters inside the request body
 * @param original A json string of request body
 * @param method A method to be audited
 * @return A new string already formatting the filtered parameters
 * @throws IOException
 */
private String filterRequestBody(String original,final Method method) throws IOException {
  if (StringUtils.isEmpty(original) || ArrayUtils.isEmpty(method.getBodyHiddenFields())) {
    return original;
  }
  Map<String,Object> body=JsonUtil.toMap(original);
  for (  String filteredParameter : method.getBodyHiddenFields()) {
    body.computeIfPresent(filteredParameter,(k,v) -> String.join(""String_Node_Str"",Collections.nCopies(10,AuditConfiguration.FORMATTER)));
  }
  return JsonUtil.toString(body);
}"
62138,"/** 
 * Utility method to configure the application endpoint whatever security implementation is defined.
 * @param httpSecurity The http security object to configure.
 * @throws Exception see httpSecurity.authorizeRequests()
 */
public static void configure(HttpSecurity httpSecurity,LogoutSuccessHandler successLogoutHandler) throws Exception {
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAnyAuthority(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.formLogin().defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll();
  if (successLogoutHandler == null) {
    httpSecurity.logout().logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"");
  }
 else {
    httpSecurity.getConfigurer(LogoutConfigurer.class).logoutSuccessHandler(successLogoutHandler);
  }
  httpSecurity.exceptionHandling().accessDeniedHandler(accessDeniedHandler);
  httpSecurity.exceptionHandling().authenticationEntryPoint(new FailureAuthenticationEntryPoint());
  httpSecurity.csrf().disable();
}","/** 
 * Utility method to configure the application endpoint whatever security implementation is defined.
 * @param httpSecurity The http security object to configure.
 * @throws Exception see httpSecurity.authorizeRequests()
 */
public static void configure(HttpSecurity httpSecurity,LogoutSuccessHandler successLogoutHandler) throws Exception {
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAnyAuthority(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").permitAll();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
  httpSecurity.authorizeRequests().antMatchers(""String_Node_Str"").hasAuthority(""String_Node_Str"");
  httpSecurity.formLogin().defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll();
  if (successLogoutHandler == null) {
    httpSecurity.logout().logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"");
  }
 else {
    httpSecurity.getConfigurer(LogoutConfigurer.class).logoutSuccessHandler(successLogoutHandler);
  }
  httpSecurity.exceptionHandling().accessDeniedHandler(accessDeniedHandler);
  httpSecurity.exceptionHandling().authenticationEntryPoint(new FailureAuthenticationEntryPoint());
  httpSecurity.csrf().disable();
}"
62139,"/** 
 * Launch a given workflow.
 */
public synchronized void launchWorkflow(SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials,String applicationEnvironmentId,String workflowName,Map<String,Object> params,IPaaSCallback<?> iPaaSCallback){
  Deployment deployment=deploymentService.getActiveDeploymentOrFail(applicationEnvironmentId);
  DeploymentTopology deploymentTopology=deploymentRuntimeStateService.getRuntimeTopologyFromEnvironment(deployment.getEnvironmentId());
  IOrchestratorPlugin orchestratorPlugin=orchestratorPluginService.getOrFail(deployment.getOrchestratorId());
  PaaSDeploymentContext deploymentContext=new PaaSDeploymentContext(deployment,deploymentTopology,secretProviderConfigurationAndCredentials);
  orchestratorPlugin.launchWorkflow(deploymentContext,workflowName,params,iPaaSCallback);
}","/** 
 * Launch a given workflow.
 */
public synchronized void launchWorkflow(SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials,String applicationEnvironmentId,String workflowName,Map<String,Object> params,IPaaSCallback<?> iPaaSCallback){
  Deployment deployment=deploymentService.getActiveDeploymentOrFail(applicationEnvironmentId);
  DeploymentTopology deploymentTopology=deploymentRuntimeStateService.getRuntimeTopologyFromEnvironment(deployment.getEnvironmentId());
  IOrchestratorPlugin orchestratorPlugin=orchestratorPluginService.getOrFail(deployment.getOrchestratorId());
  final DeploymentTopology topology=alienMonitorDao.findById(DeploymentTopology.class,deployment.getId());
  Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(topology);
  Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
  PaaSDeploymentContext deploymentContext=new PaaSDeploymentContext(deployment,deploymentTopology,secretProviderService.generateSecretConfiguration(locations,secretProviderConfigurationAndCredentials.getSecretProviderConfiguration().getPluginName(),secretProviderConfigurationAndCredentials.getCredentials()));
  orchestratorPlugin.launchWorkflow(deploymentContext,workflowName,params,iPaaSCallback);
}"
62140,"public SecretProviderConfigurationAndCredentials generateSecretConfiguration(SecretProviderConfiguration locationConfiguration,Object credentials){
  if (credentials == null) {
    return null;
  }
  ISecretProvider secretProvider=this.getPluginBean(locationConfiguration.getPluginName());
  Object configuration=this.getPluginConfiguration(locationConfiguration.getPluginName(),locationConfiguration.getConfiguration());
  SecretAuthResponse authResponse=secretProvider.auth(configuration,this.getCredentials(locationConfiguration.getPluginName(),configuration,credentials));
  SecretProviderConfigurationAndCredentials result=new SecretProviderConfigurationAndCredentials();
  SecretProviderConfiguration secretProviderConfiguration=new SecretProviderConfiguration();
  secretProviderConfiguration.setPluginName(locationConfiguration.getPluginName());
  secretProviderConfiguration.setConfiguration(authResponse.getConfiguration());
  result.setSecretProviderConfiguration(secretProviderConfiguration);
  result.setCredentials(authResponse.getCredentials());
  return result;
}","/** 
 * Generate a token wrapped in an instance of SecretProviderConfigurationAndCredentials by authenticating the credentials (username, password) with ldap
 * @param locationConfiguration
 * @param credentials
 * @return SecretProviderConfigurationAndCredentials wrapping a token
 */
private SecretProviderConfigurationAndCredentials generateSecretConfiguration(SecretProviderConfiguration locationConfiguration,Object credentials){
  if (credentials == null) {
    return null;
  }
  ISecretProvider secretProvider=this.getPluginBean(locationConfiguration.getPluginName());
  Object configuration=this.getPluginConfiguration(locationConfiguration.getPluginName(),locationConfiguration.getConfiguration());
  SecretAuthResponse authResponse=secretProvider.auth(configuration,this.getCredentials(locationConfiguration.getPluginName(),configuration,credentials));
  SecretProviderConfigurationAndCredentials result=new SecretProviderConfigurationAndCredentials();
  SecretProviderConfiguration secretProviderConfiguration=new SecretProviderConfiguration();
  secretProviderConfiguration.setPluginName(locationConfiguration.getPluginName());
  secretProviderConfiguration.setConfiguration(authResponse.getConfiguration());
  result.setSecretProviderConfiguration(secretProviderConfiguration);
  result.setCredentials(authResponse.getCredentials());
  return result;
}"
62141,"private PaaSTopologyDeploymentContext saveDeploymentTopologyAndGenerateDeploymentContext(final SecretProviderCredentials secretProviderCredentials,final DeploymentTopology deploymentTopology,final Deployment deployment,final Map<String,Location> locations){
  String deploymentTopologyId=deploymentTopology.getId();
  deploymentTopology.setId(deployment.getId());
  deploymentTopology.setDeployed(true);
  alienMonitorDao.save(deploymentTopology);
  deploymentTopology.setId(deploymentTopologyId);
  SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials=generateSecretConfiguration(locations,secretProviderCredentials);
  PaaSTopologyDeploymentContext deploymentContext=deploymentContextService.buildTopologyDeploymentContext(secretProviderConfigurationAndCredentials,deployment,locations,deploymentTopology);
  serviceResourceRelationshipService.process(deploymentContext);
  artifactProcessorService.processArtifacts(deploymentContext);
  return deploymentContext;
}","private PaaSTopologyDeploymentContext saveDeploymentTopologyAndGenerateDeploymentContext(final SecretProviderCredentials secretProviderCredentials,final DeploymentTopology deploymentTopology,final Deployment deployment,final Map<String,Location> locations){
  String deploymentTopologyId=deploymentTopology.getId();
  deploymentTopology.setId(deployment.getId());
  deploymentTopology.setDeployed(true);
  alienMonitorDao.save(deploymentTopology);
  deploymentTopology.setId(deploymentTopologyId);
  SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials=secretProviderService.generateSecretConfiguration(locations,secretProviderCredentials);
  PaaSTopologyDeploymentContext deploymentContext=deploymentContextService.buildTopologyDeploymentContext(secretProviderConfigurationAndCredentials,deployment,locations,deploymentTopology);
  serviceResourceRelationshipService.process(deploymentContext);
  artifactProcessorService.processArtifacts(deploymentContext);
  return deploymentContext;
}"
62142,"private void doScale(final String nodeTemplateId,final int instances,final IPaaSCallback<Object> callback,final Deployment deployment,final DeploymentTopology topology,SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials){
  NodeTemplate nodeTemplate=TopologyUtils.getNodeTemplate(topology,nodeTemplateId);
  Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(topology);
  Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
  secretProviderConfigurationAndCredentials=deployService.generateSecretConfiguration(locations,secretProviderConfigurationAndCredentials.getSecretProviderConfiguration().getPluginName(),secretProviderConfigurationAndCredentials.getCredentials());
  Capability clusterControllerCapability=NodeTemplateUtils.getCapabilityByType(nodeTemplate,AlienCapabilityTypes.CLUSTER_CONTROLLER);
  if (clusterControllerCapability == null) {
    doScaleNode(nodeTemplateId,instances,callback,deployment,topology,nodeTemplate,secretProviderConfigurationAndCredentials);
  }
 else {
    triggerClusterManagerScaleOperation(nodeTemplateId,instances,callback,deployment,topology,clusterControllerCapability,secretProviderConfigurationAndCredentials);
  }
}","private void doScale(final String nodeTemplateId,final int instances,final IPaaSCallback<Object> callback,final Deployment deployment,final DeploymentTopology topology,SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials){
  NodeTemplate nodeTemplate=TopologyUtils.getNodeTemplate(topology,nodeTemplateId);
  Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(topology);
  Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
  secretProviderConfigurationAndCredentials=secretProviderService.generateSecretConfiguration(locations,secretProviderConfigurationAndCredentials.getSecretProviderConfiguration().getPluginName(),secretProviderConfigurationAndCredentials.getCredentials());
  Capability clusterControllerCapability=NodeTemplateUtils.getCapabilityByType(nodeTemplate,AlienCapabilityTypes.CLUSTER_CONTROLLER);
  if (clusterControllerCapability == null) {
    doScaleNode(nodeTemplateId,instances,callback,deployment,topology,nodeTemplate,secretProviderConfigurationAndCredentials);
  }
 else {
    triggerClusterManagerScaleOperation(nodeTemplateId,instances,callback,deployment,topology,clusterControllerCapability,secretProviderConfigurationAndCredentials);
  }
}"
62143,"/** 
 * Build the deployment context from an operation execution request
 * @param request the operation execution request
 * @return the deployment context
 */
public PaaSTopologyDeploymentContext buildPaaSTopologyDeploymentContext(OperationExecRequest request){
  Deployment deployment=deploymentService.getActiveDeploymentOrFail(request.getApplicationEnvironmentId());
  DeploymentTopology deploymentTopology=deploymentRuntimeStateService.getRuntimeTopologyFromEnvironment(deployment.getEnvironmentId());
  Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(deploymentTopology);
  Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
  SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials=deployService.generateSecretConfiguration(locations,request.getSecretProviderPluginName(),request.getSecretProviderCredentials());
  return deploymentContextService.buildTopologyDeploymentContext(secretProviderConfigurationAndCredentials,deployment,deploymentTopologyService.getLocations(deploymentTopology),deploymentTopology);
}","/** 
 * Build the deployment context from an operation execution request
 * @param request the operation execution request
 * @return the deployment context
 */
public PaaSTopologyDeploymentContext buildPaaSTopologyDeploymentContext(OperationExecRequest request){
  Deployment deployment=deploymentService.getActiveDeploymentOrFail(request.getApplicationEnvironmentId());
  DeploymentTopology deploymentTopology=deploymentRuntimeStateService.getRuntimeTopologyFromEnvironment(deployment.getEnvironmentId());
  Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(deploymentTopology);
  Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
  SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials=secretProviderService.generateSecretConfiguration(locations,request.getSecretProviderPluginName(),request.getSecretProviderCredentials());
  return deploymentContextService.buildTopologyDeploymentContext(secretProviderConfigurationAndCredentials,deployment,deploymentTopologyService.getLocations(deploymentTopology),deploymentTopology);
}"
62144,"private void undeploy(SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials,final Deployment deployment){
  deploymentLockService.doWithDeploymentWriteLock(deployment.getOrchestratorDeploymentId(),() -> {
    log.info(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
    IOrchestratorPlugin orchestratorPlugin=orchestratorPluginService.getOrFail(deployment.getOrchestratorId());
    DeploymentTopology deployedTopology=deploymentRuntimeStateService.getRuntimeTopology(deployment.getId());
    PaaSDeploymentContext deploymentContext=new PaaSDeploymentContext(deployment,deployedTopology,secretProviderConfigurationAndCredentials);
    orchestratorPlugin.undeploy(deploymentContext,new IPaaSCallback<ResponseEntity>(){
      @Override public void onSuccess(      ResponseEntity data){
        deploymentService.markUndeployed(deployment);
        log.info(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
      }
      @Override public void onFailure(      Throwable throwable){
        log.warn(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
      }
    }
);
    return null;
  }
);
}","private void undeploy(SecretProviderConfigurationAndCredentials secretProviderConfigurationAndCredentials,final Deployment deployment){
  deploymentLockService.doWithDeploymentWriteLock(deployment.getOrchestratorDeploymentId(),() -> {
    log.info(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
    IOrchestratorPlugin orchestratorPlugin=orchestratorPluginService.getOrFail(deployment.getOrchestratorId());
    DeploymentTopology deployedTopology=deploymentRuntimeStateService.getRuntimeTopology(deployment.getId());
    Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(deployedTopology);
    Map<String,Location> locations=deploymentTopologyService.getLocations(locationIds);
    final SecretProviderConfigurationAndCredentials authResponse=secretProviderService.generateSecretConfiguration(locations,secretProviderConfigurationAndCredentials.getSecretProviderConfiguration().getPluginName(),secretProviderConfigurationAndCredentials.getCredentials());
    PaaSDeploymentContext deploymentContext=new PaaSDeploymentContext(deployment,deployedTopology,authResponse);
    orchestratorPlugin.undeploy(deploymentContext,new IPaaSCallback<ResponseEntity>(){
      @Override public void onSuccess(      ResponseEntity data){
        deploymentService.markUndeployed(deployment);
        log.info(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
      }
      @Override public void onFailure(      Throwable throwable){
        log.warn(""String_Node_Str"",deployment.getId(),deployment.getOrchestratorId());
      }
    }
);
    return null;
  }
);
}"
62145,"/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 * @param topologyPath if the new topology must be created inside this directory to have all its artifacts
 */
@SneakyThrows public synchronized void importNewArchive(Csar csar,Topology topology,Path topologyPath){
  ArchiveRoot archiveRoot=new ArchiveRoot();
  archiveRoot.setArchive(csar);
  archiveRoot.setTopology(topology);
  publisher.publishEvent(new BeforeArchiveIndexed(this,archiveRoot));
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology,csar));
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  csar.setDependencies(topology.getDependencies());
  csarService.save(csar);
  topologyServiceCore.save(topology);
  if (topologyPath == null) {
    archiveRepositry.storeCSAR(csar,yaml);
  }
 else {
    Files.write(topologyPath.resolve(csar.getYamlFilePath()),yaml.getBytes(Charset.forName(""String_Node_Str"")));
    archiveRepositry.storeCSAR(csar,topologyPath);
  }
  topologySubstitutionService.updateSubstitutionType(topology,archiveRoot.getArchive());
  publisher.publishEvent(new AfterArchiveIndexed(this,archiveRoot));
}","/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 * @param topologyPath if the new topology must be created inside this directory to have all its artifacts
 */
@SneakyThrows public synchronized void importNewArchive(Csar csar,Topology topology,Path topologyPath){
  ArchiveRoot archiveRoot=new ArchiveRoot();
  archiveRoot.setArchive(csar);
  archiveRoot.setTopology(topology);
  csar.setHasTopology(true);
  publisher.publishEvent(new BeforeArchiveIndexed(this,archiveRoot));
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology,csar));
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  csar.setDependencies(topology.getDependencies());
  csarService.save(csar);
  topologyServiceCore.save(topology);
  if (topologyPath == null) {
    archiveRepositry.storeCSAR(csar,yaml);
  }
 else {
    Files.write(topologyPath.resolve(csar.getYamlFilePath()),yaml.getBytes(Charset.forName(""String_Node_Str"")));
    archiveRepositry.storeCSAR(csar,topologyPath);
  }
  topologySubstitutionService.updateSubstitutionType(topology,archiveRoot.getArchive());
  publisher.publishEvent(new AfterArchiveIndexed(this,archiveRoot));
}"
62146,"private void assertPropMapContains(Map<String,PropertyValue> map,Map<String,AbstractPropertyValue> expectedMap){
  map=safe(map);
  for (  Entry<String,AbstractPropertyValue> entry : expectedMap.entrySet()) {
    assertEquals(entry.getValue(),map.get(entry.getKey()));
  }
}","private void assertPropMapContains(Map<String,AbstractPropertyValue> map,Map<String,AbstractPropertyValue> expectedMap){
  map=safe(map);
  for (  Entry<String,AbstractPropertyValue> entry : expectedMap.entrySet()) {
    assertEquals(entry.getValue(),map.get(entry.getKey()));
  }
}"
62147,"private void execute(List<ITopologyModifier> modifiers,FlowExecutionContext context){
  for (int i=0; i < modifiers.size(); i++) {
    modifiers.get(i).process(context.getTopology(),context);
    if (!context.log().isValid()) {
      return;
    }
  }
}","private void execute(List<ITopologyModifier> modifiers,FlowExecutionContext context){
  for (int i=0; i < modifiers.size(); i++) {
    long start=System.currentTimeMillis();
    modifiers.get(i).process(context.getTopology(),context);
    log.info(""String_Node_Str"" + modifiers.get(i).getClass().getSimpleName() + ""String_Node_Str""+ (System.currentTimeMillis() - start));
    if (!context.log().isValid()) {
      return;
    }
  }
}"
62148,"@Override public void process(Topology topology,FlowExecutionContext context){
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,this.getClass().getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=getUserMatches(matchingConfiguration);
  Map<String,V> matchesById=getMatchesById(context);
  Map<String,T> topologyTemplateMap=getTopologyTemplates(topology);
  Map<String,T> originalTemplates=Maps.newHashMap();
  for (  Map.Entry<String,String> substitutedNodeEntry : lastUserSubstitutions.entrySet()) {
    String templateId=substitutedNodeEntry.getKey();
    String matchedLocationResourceId=substitutedNodeEntry.getValue();
    originalTemplates.put(templateId,topologyTemplateMap.get(templateId));
    processReplacement(topology,topologyTemplateMap,matchesById,templateId,matchedLocationResourceId);
  }
  context.getExecutionCache().put(getOriginalTemplateCacheKey(),originalTemplates);
}","@Override public void process(Topology topology,FlowExecutionContext context){
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,this.getClass().getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=getUserMatches(matchingConfiguration);
  Map<String,V> matchesById=getMatchesById(context);
  Map<String,T> topologyTemplateMap=getTopologyTemplates(topology);
  Map<String,T> originalTemplates=Maps.newHashMap();
  Map<String,T> replacedTemplates=Maps.newHashMap();
  for (  Map.Entry<String,String> substitutedNodeEntry : lastUserSubstitutions.entrySet()) {
    String templateId=substitutedNodeEntry.getKey();
    String matchedLocationResourceId=substitutedNodeEntry.getValue();
    originalTemplates.put(templateId,topologyTemplateMap.get(templateId));
    processReplacement(topology,topologyTemplateMap,matchesById,templateId,matchedLocationResourceId);
    replacedTemplates.put(templateId,topologyTemplateMap.get(templateId));
  }
  context.getExecutionCache().put(getOriginalTemplateCacheKey(),originalTemplates);
  context.getExecutionCache().put(getReplacedTemplateCacheKey(),replacedTemplates);
}"
62149,"private void fillDTOWithNodesSubstitutionConfiguration(FlowExecutionContext executionContext,DeploymentTopology deploymentTopology,DeploymentTopologyDTO deploymentTopologyDTO,DeploymentMatchingConfiguration matchingConfiguration,DeploymentSubstitutionConfiguration substitutionConfiguration){
  deploymentTopology.setOriginalNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_ORIGINAL_NODES));
  deploymentTopology.setSubstitutedNodes(matchingConfiguration.getMatchedLocationResources());
  Map<String,LocationResourceTemplate> allLocationResourcesTemplates=(Map<String,LocationResourceTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHED_NODE_LOCATION_TEMPLATES_BY_ID_MAP);
  Map<String,LocationResourceTemplate> substitutedLocationResourceTemplate=Maps.newHashMap();
  matchingConfiguration.getMatchedLocationResources().values().forEach((locationResourceId) -> substitutedLocationResourceTemplate.put(locationResourceId,safe(allLocationResourcesTemplates).get(locationResourceId)));
  deploymentTopologyDTO.setLocationResourceTemplates(substitutedLocationResourceTemplate);
  substitutionConfiguration.setAvailableSubstitutions((Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP));
  substitutionConfiguration.setSubstitutionsTemplates(allLocationResourcesTemplates);
  substitutionConfiguration.getSubstitutionTypes().addFrom(locationResourceService.getLocationResourceTypes(safe(substitutionConfiguration.getSubstitutionsTemplates()).values()));
  enrichSubstitutionTypesWithServicesDependencies(safe(substitutionConfiguration.getSubstitutionsTemplates()).values(),substitutionConfiguration.getSubstitutionTypes());
}","private void fillDTOWithNodesSubstitutionConfiguration(FlowExecutionContext executionContext,DeploymentTopology deploymentTopology,DeploymentTopologyDTO deploymentTopologyDTO,DeploymentMatchingConfiguration matchingConfiguration,DeploymentSubstitutionConfiguration substitutionConfiguration){
  deploymentTopology.setOriginalNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_ORIGINAL_NODES));
  deploymentTopology.setSubstitutedNodes(matchingConfiguration.getMatchedLocationResources());
  deploymentTopology.setMatchReplacedNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_REPLACED_NODES));
  Map<String,LocationResourceTemplate> allLocationResourcesTemplates=(Map<String,LocationResourceTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHED_NODE_LOCATION_TEMPLATES_BY_ID_MAP);
  Map<String,LocationResourceTemplate> substitutedLocationResourceTemplate=Maps.newHashMap();
  matchingConfiguration.getMatchedLocationResources().values().forEach((locationResourceId) -> substitutedLocationResourceTemplate.put(locationResourceId,safe(allLocationResourcesTemplates).get(locationResourceId)));
  deploymentTopologyDTO.setLocationResourceTemplates(substitutedLocationResourceTemplate);
  substitutionConfiguration.setAvailableSubstitutions((Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP));
  substitutionConfiguration.setSubstitutionsTemplates(allLocationResourcesTemplates);
  substitutionConfiguration.getSubstitutionTypes().addFrom(locationResourceService.getLocationResourceTypes(safe(substitutionConfiguration.getSubstitutionsTemplates()).values()));
  enrichSubstitutionTypesWithServicesDependencies(safe(substitutionConfiguration.getSubstitutionsTemplates()).values(),substitutionConfiguration.getSubstitutionTypes());
}"
62150,"private void execute(List<ITopologyModifier> modifiers,FlowExecutionContext context){
  for (int i=0; i < modifiers.size(); i++) {
    modifiers.get(i).process(context.getTopology(),context);
    if (!context.log().isValid()) {
      return;
    }
  }
}","private void execute(List<ITopologyModifier> modifiers,FlowExecutionContext context){
  for (int i=0; i < modifiers.size(); i++) {
    long start=System.currentTimeMillis();
    modifiers.get(i).process(context.getTopology(),context);
    log.info(""String_Node_Str"" + modifiers.get(i).getClass().getSimpleName() + ""String_Node_Str""+ (System.currentTimeMillis() - start));
    if (!context.log().isValid()) {
      return;
    }
  }
}"
62151,"@Override public void process(Topology topology,FlowExecutionContext context){
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,this.getClass().getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=getUserMatches(matchingConfiguration);
  Map<String,V> matchesById=getMatchesById(context);
  Map<String,T> topologyTemplateMap=getTopologyTemplates(topology);
  Map<String,T> originalTemplates=Maps.newHashMap();
  for (  Map.Entry<String,String> substitutedNodeEntry : lastUserSubstitutions.entrySet()) {
    String templateId=substitutedNodeEntry.getKey();
    String matchedLocationResourceId=substitutedNodeEntry.getValue();
    originalTemplates.put(templateId,topologyTemplateMap.get(templateId));
    processReplacement(topology,topologyTemplateMap,matchesById,templateId,matchedLocationResourceId);
  }
  context.getExecutionCache().put(getOriginalTemplateCacheKey(),originalTemplates);
}","@Override public void process(Topology topology,FlowExecutionContext context){
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,this.getClass().getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=getUserMatches(matchingConfiguration);
  Map<String,V> matchesById=getMatchesById(context);
  Map<String,T> topologyTemplateMap=getTopologyTemplates(topology);
  Map<String,T> originalTemplates=Maps.newHashMap();
  Map<String,T> replacedTemplates=Maps.newHashMap();
  for (  Map.Entry<String,String> substitutedNodeEntry : lastUserSubstitutions.entrySet()) {
    String templateId=substitutedNodeEntry.getKey();
    String matchedLocationResourceId=substitutedNodeEntry.getValue();
    originalTemplates.put(templateId,topologyTemplateMap.get(templateId));
    processReplacement(topology,topologyTemplateMap,matchesById,templateId,matchedLocationResourceId);
    replacedTemplates.put(templateId,topologyTemplateMap.get(templateId));
  }
  context.getExecutionCache().put(getOriginalTemplateCacheKey(),originalTemplates);
  context.getExecutionCache().put(getReplacedTemplateCacheKey(),replacedTemplates);
}"
62152,"private void fillDTOWithNodesSubstitutionConfiguration(FlowExecutionContext executionContext,DeploymentTopology deploymentTopology,DeploymentTopologyDTO deploymentTopologyDTO,DeploymentMatchingConfiguration matchingConfiguration,DeploymentSubstitutionConfiguration substitutionConfiguration){
  deploymentTopology.setOriginalNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_ORIGINAL_NODES));
  deploymentTopology.setSubstitutedNodes(matchingConfiguration.getMatchedLocationResources());
  Map<String,LocationResourceTemplate> allLocationResourcesTemplates=(Map<String,LocationResourceTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHED_NODE_LOCATION_TEMPLATES_BY_ID_MAP);
  Map<String,LocationResourceTemplate> substitutedLocationResourceTemplate=Maps.newHashMap();
  matchingConfiguration.getMatchedLocationResources().values().forEach((locationResourceId) -> substitutedLocationResourceTemplate.put(locationResourceId,safe(allLocationResourcesTemplates).get(locationResourceId)));
  deploymentTopologyDTO.setLocationResourceTemplates(substitutedLocationResourceTemplate);
  substitutionConfiguration.setAvailableSubstitutions((Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP));
  substitutionConfiguration.setSubstitutionsTemplates(allLocationResourcesTemplates);
  substitutionConfiguration.getSubstitutionTypes().addFrom(locationResourceService.getLocationResourceTypes(safe(substitutionConfiguration.getSubstitutionsTemplates()).values()));
  enrichSubstitutionTypesWithServicesDependencies(safe(substitutionConfiguration.getSubstitutionsTemplates()).values(),substitutionConfiguration.getSubstitutionTypes());
}","private void fillDTOWithNodesSubstitutionConfiguration(FlowExecutionContext executionContext,DeploymentTopology deploymentTopology,DeploymentTopologyDTO deploymentTopologyDTO,DeploymentMatchingConfiguration matchingConfiguration,DeploymentSubstitutionConfiguration substitutionConfiguration){
  deploymentTopology.setOriginalNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_ORIGINAL_NODES));
  deploymentTopology.setSubstitutedNodes(matchingConfiguration.getMatchedLocationResources());
  deploymentTopology.setMatchReplacedNodes((Map<String,NodeTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHING_REPLACED_NODES));
  Map<String,LocationResourceTemplate> allLocationResourcesTemplates=(Map<String,LocationResourceTemplate>)executionContext.getExecutionCache().get(FlowExecutionContext.MATCHED_NODE_LOCATION_TEMPLATES_BY_ID_MAP);
  Map<String,LocationResourceTemplate> substitutedLocationResourceTemplate=Maps.newHashMap();
  matchingConfiguration.getMatchedLocationResources().values().forEach((locationResourceId) -> substitutedLocationResourceTemplate.put(locationResourceId,safe(allLocationResourcesTemplates).get(locationResourceId)));
  deploymentTopologyDTO.setLocationResourceTemplates(substitutedLocationResourceTemplate);
  substitutionConfiguration.setAvailableSubstitutions((Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP));
  substitutionConfiguration.setSubstitutionsTemplates(allLocationResourcesTemplates);
  substitutionConfiguration.getSubstitutionTypes().addFrom(locationResourceService.getLocationResourceTypes(safe(substitutionConfiguration.getSubstitutionsTemplates()).values()));
  enrichSubstitutionTypesWithServicesDependencies(safe(substitutionConfiguration.getSubstitutionsTemplates()).values(),substitutionConfiguration.getSubstitutionTypes());
}"
62153,"@Override protected boolean typeSpecificMatching(NodeTemplate abstractTemplate,LocationResourceTemplate candidate,NodeType candidateType,LocationResources locationResources,MatchingConfiguration matchingConfiguration){
  for (  Entry<String,Capability> candidateCapability : safe(candidate.getTemplate().getCapabilities()).entrySet()) {
    MatchingFilterDefinition configuredFilterDefinition=matchingConfiguration == null ? null : matchingConfiguration.getCapabilities().get(candidateCapability.getKey());
    Map<String,List<IMatchPropertyConstraint>> configuredFilters=configuredFilterDefinition == null ? null : configuredFilterDefinition.getProperties();
    CapabilityType capabilityType=locationResources.getCapabilityTypes().get(candidateCapability.getValue().getType());
    Capability templateCapability=safe(abstractTemplate.getCapabilities()).get(candidateCapability.getKey());
    if (templateCapability != null && !isValidTemplatePropertiesMatch(templateCapability.getProperties(),candidateCapability.getValue().getProperties(),capabilityType.getProperties(),configuredFilters)) {
      return false;
    }
  }
  return true;
}","@Override protected boolean typeSpecificMatching(NodeTemplate abstractTemplate,LocationResourceTemplate candidate,NodeType candidateType,LocationResources locationResources,MatchingConfiguration matchingConfiguration){
  for (  Entry<String,Capability> candidateCapability : safe(candidate.getTemplate().getCapabilities()).entrySet()) {
    MatchingFilterDefinition configuredFilterDefinition=matchingConfiguration == null ? null : safe(matchingConfiguration.getCapabilities()).get(candidateCapability.getKey());
    Map<String,List<IMatchPropertyConstraint>> configuredFilters=configuredFilterDefinition == null ? null : configuredFilterDefinition.getProperties();
    CapabilityType capabilityType=locationResources.getCapabilityTypes().get(candidateCapability.getValue().getType());
    Capability templateCapability=safe(abstractTemplate.getCapabilities()).get(candidateCapability.getKey());
    if (templateCapability != null && !isValidTemplatePropertiesMatch(templateCapability.getProperties(),candidateCapability.getValue().getProperties(),capabilityType.getProperties(),configuredFilters)) {
      return false;
    }
  }
  return true;
}"
62154,"/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node for which to configure property.
 * @param propertyName The id of the property to set value.
 * @param propertyValue the value of the property.
 * @return The flow execution context.
 */
public FlowExecutionContext updateProperty(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String propertyName,Object propertyValue){
  FlowExecutionContext executionContext=new FlowExecutionContext(alienDAO,topology,new EnvironmentContext(application,environment));
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(nodeId,propertyName,propertyValue);
  flowExecutor.execute(topology,modifierList,executionContext);
  return executionContext;
}","/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node for which to configure property.
 * @param propertyName The id of the property to set value.
 * @param propertyValue the value of the property.
 * @return The flow execution context.
 */
public FlowExecutionContext updateProperty(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String propertyName,Object propertyValue){
  FlowExecutionContext executionContext=new FlowExecutionContext(deploymentConfigurationDao,topology,new EnvironmentContext(application,environment));
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(nodeId,propertyName,propertyValue);
  flowExecutor.execute(topology,modifierList,executionContext);
  return executionContext;
}"
62155,"/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node to substitute at matching phase.
 * @param resourceTemplateId The id of the location resource to substitute.
 * @return The flow execution context.
 */
public FlowExecutionContext updateSubstitution(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String resourceTemplateId){
  FlowExecutionContext executionContext=new FlowExecutionContext(alienDAO,topology,new EnvironmentContext(application,environment));
  SetMatchedPolicyModifier setMatchedPolicyModifier=new SetMatchedPolicyModifier(nodeId,resourceTemplateId);
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(setMatchedPolicyModifier);
  flowExecutor.execute(topology,modifierList,executionContext);
  if (!setMatchedPolicyModifier.isExecuted()) {
    throw new NotFoundException(""String_Node_Str"" + resourceTemplateId + ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
  }
  return executionContext;
}","/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node to substitute at matching phase.
 * @param resourceTemplateId The id of the location resource to substitute.
 * @return The flow execution context.
 */
public FlowExecutionContext updateSubstitution(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String resourceTemplateId){
  FlowExecutionContext executionContext=new FlowExecutionContext(deploymentConfigurationDao,topology,new EnvironmentContext(application,environment));
  SetMatchedPolicyModifier setMatchedPolicyModifier=new SetMatchedPolicyModifier(nodeId,resourceTemplateId);
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(setMatchedPolicyModifier);
  flowExecutor.execute(topology,modifierList,executionContext);
  if (!setMatchedPolicyModifier.isExecuted()) {
    throw new NotFoundException(""String_Node_Str"" + resourceTemplateId + ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
  }
  return executionContext;
}"
62156,"public void onCopyConfiguration(OnDeploymentConfigCopyEvent onDeploymentConfigCopyEvent){
  ApplicationEnvironment source=onDeploymentConfigCopyEvent.getSourceEnvironment();
  ApplicationEnvironment target=onDeploymentConfigCopyEvent.getTargetEnvironment();
  DeploymentMatchingConfiguration sourceConfiguration=alienDAO.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(source.getTopologyVersion(),source.getId()));
  DeploymentMatchingConfiguration targetConfiguration=alienDAO.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(target.getTopologyVersion(),target.getId()));
  if (sourceConfiguration == null || MapUtils.isEmpty(sourceConfiguration.getLocationGroups()) || targetConfiguration == null || MapUtils.isEmpty(targetConfiguration.getLocationGroups())) {
    return;
  }
  Topology topology=topologyServiceCore.getOrFail(Csar.createId(target.getApplicationId(),target.getTopologyVersion()));
  if (MapUtils.isNotEmpty(topology.getNodeTemplates())) {
    Application application=applicationService.getOrFail(target.getApplicationId());
    FlowExecutionContext executionContext=new FlowExecutionContext(alienDAO,topology,new EnvironmentContext(application,target));
    flowExecutor.execute(topology,getMatchingFlow(),executionContext);
    Map<String,Set<String>> locResTemplateIdsPerNodeIds=(Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP);
    Map<String,String> validOnNewEnvSubstitutedNodes=safe(sourceConfiguration.getMatchedLocationResources()).entrySet().stream().filter(entry -> locResTemplateIdsPerNodeIds.containsKey(entry.getKey()) && locResTemplateIdsPerNodeIds.get(entry.getKey()).contains(entry.getValue())).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    if (MapUtils.isNotEmpty(validOnNewEnvSubstitutedNodes)) {
      if (targetConfiguration.getMatchedLocationResources() == null) {
        targetConfiguration.setMatchedLocationResources(Maps.newHashMap());
      }
      validOnNewEnvSubstitutedNodes.forEach((key,value) -> {
        targetConfiguration.getMatchedLocationResources().put(key,value);
        targetConfiguration.getMatchedNodesConfiguration().put(key,safe(sourceConfiguration.getMatchedNodesConfiguration()).get(key));
      }
);
      alienDAO.save(targetConfiguration);
    }
  }
}","public void onCopyConfiguration(OnDeploymentConfigCopyEvent onDeploymentConfigCopyEvent){
  ApplicationEnvironment source=onDeploymentConfigCopyEvent.getSourceEnvironment();
  ApplicationEnvironment target=onDeploymentConfigCopyEvent.getTargetEnvironment();
  DeploymentMatchingConfiguration sourceConfiguration=deploymentConfigurationDao.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(source.getTopologyVersion(),source.getId()));
  DeploymentMatchingConfiguration targetConfiguration=deploymentConfigurationDao.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(target.getTopologyVersion(),target.getId()));
  if (sourceConfiguration == null || MapUtils.isEmpty(sourceConfiguration.getLocationGroups()) || targetConfiguration == null || MapUtils.isEmpty(targetConfiguration.getLocationGroups())) {
    return;
  }
  Topology topology=topologyServiceCore.getOrFail(Csar.createId(target.getApplicationId(),target.getTopologyVersion()));
  if (MapUtils.isNotEmpty(topology.getNodeTemplates())) {
    Application application=applicationService.getOrFail(target.getApplicationId());
    FlowExecutionContext executionContext=new FlowExecutionContext(deploymentConfigurationDao,topology,new EnvironmentContext(application,target));
    flowExecutor.execute(topology,getMatchingFlow(),executionContext);
    Map<String,Set<String>> locResTemplateIdsPerNodeIds=(Map<String,Set<String>>)executionContext.getExecutionCache().get(FlowExecutionContext.SELECTED_MATCH_NODE_LOCATION_TEMPLATE_BY_NODE_ID_MAP);
    Map<String,String> validOnNewEnvSubstitutedNodes=safe(sourceConfiguration.getMatchedLocationResources()).entrySet().stream().filter(entry -> locResTemplateIdsPerNodeIds.containsKey(entry.getKey()) && locResTemplateIdsPerNodeIds.get(entry.getKey()).contains(entry.getValue())).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    if (MapUtils.isNotEmpty(validOnNewEnvSubstitutedNodes)) {
      if (targetConfiguration.getMatchedLocationResources() == null) {
        targetConfiguration.setMatchedLocationResources(Maps.newHashMap());
      }
      validOnNewEnvSubstitutedNodes.forEach((key,value) -> {
        targetConfiguration.getMatchedLocationResources().put(key,value);
        targetConfiguration.getMatchedNodesConfiguration().put(key,safe(sourceConfiguration.getMatchedNodesConfiguration()).get(key));
      }
);
      deploymentConfigurationDao.save(targetConfiguration);
    }
  }
}"
62157,"public void processTopologyComposition(Topology topology){
  Deque<CompositionCouple> stack=new ArrayDeque<CompositionCouple>();
  recursivelyBuildSubstitutionStack(topology,stack,""String_Node_Str"");
  if (!stack.isEmpty()) {
    Iterator<CompositionCouple> compositionIterator=stack.descendingIterator();
    while (compositionIterator.hasNext()) {
      processComposition(compositionIterator.next());
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",topology.getId(),stack.size()));
    }
    TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
    workflowBuilderService.reinitWorkflow(INSTALL,topologyContext);
    workflowBuilderService.reinitWorkflow(UNINSTALL,topologyContext);
  }
}","public void processTopologyComposition(Topology topology){
  Deque<CompositionCouple> stack=new ArrayDeque<CompositionCouple>();
  recursivelyBuildSubstitutionStack(topology,stack,""String_Node_Str"");
  if (!stack.isEmpty()) {
    Iterator<CompositionCouple> compositionIterator=stack.descendingIterator();
    while (compositionIterator.hasNext()) {
      processComposition(compositionIterator.next());
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",topology.getId(),stack.size()));
    }
    TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
    workflowBuilderService.reinitWorkflow(INSTALL,topologyContext);
    workflowBuilderService.reinitWorkflow(START,topologyContext);
    workflowBuilderService.reinitWorkflow(STOP,topologyContext);
    workflowBuilderService.reinitWorkflow(UNINSTALL,topologyContext);
  }
}"
62158,"@SuppressWarnings(""String_Node_Str"") public PropertyValue toPropertyValue(Object resolvedPropertyValue,PropertyDefinition propertyDefinition){
  if (resolvedPropertyValue == null) {
    return null;
  }
  if (ToscaTypes.isSimple(propertyDefinition.getType())) {
    return new ScalarPropertyValue(resolvedPropertyValue.toString());
  }
switch (propertyDefinition.getType()) {
case ToscaTypes.MAP:
    if (resolvedPropertyValue instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
      Map<String,Object> finalMap=Maps.newHashMap();
      map.forEach((key,value) -> finalMap.put(key,toPropertyValue(value,propertyDefinition.getEntrySchema())));
      return new ComplexPropertyValue(finalMap);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + Map.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
    }
case ToscaTypes.LIST:
  if (resolvedPropertyValue instanceof Collection) {
    List list=(List)resolvedPropertyValue;
    List finalList=new LinkedList();
    for (    Object item : list) {
      finalList.add(toPropertyValue(item,propertyDefinition.getEntrySchema()));
    }
    return new ListPropertyValue(finalList);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + Collection.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
  }
default :
DataType dataType=findDataType(propertyDefinition.getType());
if (dataType == null) {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
if (dataType.isDeriveFromSimpleType()) {
return new ScalarPropertyValue(resolvedPropertyValue.toString());
}
 else if (resolvedPropertyValue instanceof Map) {
return new ComplexPropertyValue((Map<String,Object>)resolvedPropertyValue);
}
 else {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
}
}","@SuppressWarnings(""String_Node_Str"") public PropertyValue toPropertyValue(Object resolvedPropertyValue,PropertyDefinition propertyDefinition){
  if (resolvedPropertyValue == null) {
    return null;
  }
  if (ToscaTypes.isSimple(propertyDefinition.getType())) {
    return new ScalarPropertyValue(resolvedPropertyValue.toString());
  }
switch (propertyDefinition.getType()) {
case ToscaTypes.MAP:
    if (resolvedPropertyValue instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
      Map<String,Object> resultMap=Maps.newHashMap();
      map.forEach((key,value) -> resultMap.put(key,toPropertyValue(value,propertyDefinition.getEntrySchema())));
      return new ComplexPropertyValue(resultMap);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + Map.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
    }
case ToscaTypes.LIST:
  if (resolvedPropertyValue instanceof Collection) {
    List list=(List)resolvedPropertyValue;
    List resultList=new LinkedList();
    for (    Object item : list) {
      resultList.add(toPropertyValue(item,propertyDefinition.getEntrySchema()));
    }
    return new ListPropertyValue(resultList);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + Collection.class.getSimpleName() + ""String_Node_Str""+ resolvedPropertyValue.getClass().getName()+ ""String_Node_Str"");
  }
default :
DataType dataType=findDataType(propertyDefinition.getType());
if (dataType == null) {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
if (dataType.isDeriveFromSimpleType()) {
return new ScalarPropertyValue(resolvedPropertyValue.toString());
}
 else if (resolvedPropertyValue instanceof Map) {
Map<String,Object> map=(Map<String,Object>)resolvedPropertyValue;
Map<String,Object> resultMap=Maps.newHashMap();
map.forEach((key,value) -> {
PropertyDefinition entryDefinition=dataType.getProperties().get(key);
if (entryDefinition == null) {
  throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str""+ key+ ""String_Node_Str"");
}
resultMap.put(key,toPropertyValue(value,entryDefinition));
}
);
return new ComplexPropertyValue(resultMap);
}
 else {
throw new IllegalStateException(""String_Node_Str"" + propertyDefinition.getType() + ""String_Node_Str"");
}
}
}"
62159,"public void validateNodeTemplate(List<PropertiesTask> toReturnTaskList,NodeType relatedIndexedNodeType,NodeTemplate nodeTemplate,String nodeTempalteName,boolean skipInputProperties){
  PropertiesTask task=new PropertiesTask();
  task.setNodeTemplateName(nodeTempalteName);
  task.setComponent(relatedIndexedNodeType);
  task.setCode(TaskCode.PROPERTIES);
  task.setProperties(Maps.newHashMap());
  if (MapUtils.isNotEmpty(nodeTemplate.getProperties())) {
    addRequiredPropertyIdToTaskProperties(null,nodeTemplate.getProperties(),relatedIndexedNodeType.getProperties(),task,skipInputProperties);
  }
  for (  Map.Entry<String,RelationshipTemplate> relationshipEntry : safe(nodeTemplate.getRelationships()).entrySet()) {
    RelationshipTemplate relationship=relationshipEntry.getValue();
    if (relationship.getProperties() == null || relationship.getProperties().isEmpty()) {
      continue;
    }
    addRequiredPropertyIdToTaskProperties(""String_Node_Str"" + relationshipEntry.getKey() + ""String_Node_Str"",relationship.getProperties(),getRelationshipPropertyDefinition(nodeTemplate),task,skipInputProperties);
  }
  for (  Map.Entry<String,Capability> capabilityEntry : safe(nodeTemplate.getCapabilities()).entrySet()) {
    Capability capability=capabilityEntry.getValue();
    if (capability.getProperties() == null || capability.getProperties().isEmpty()) {
      continue;
    }
    addRequiredPropertyIdToTaskProperties(""String_Node_Str"" + capabilityEntry.getKey() + ""String_Node_Str"",capability.getProperties(),getCapabilitiesPropertyDefinition(nodeTemplate),task,skipInputProperties);
    if (capability.getType().equals(NormativeCapabilityTypes.SCALABLE)) {
      Map<String,AbstractPropertyValue> scalableProperties=capability.getProperties();
      verifyScalableProperties(scalableProperties,toReturnTaskList,nodeTempalteName,skipInputProperties);
    }
  }
  if (MapUtils.isNotEmpty(task.getProperties())) {
    toReturnTaskList.add(task);
  }
}","public void validateNodeTemplate(List<PropertiesTask> toReturnTaskList,NodeType relatedIndexedNodeType,NodeTemplate nodeTemplate,String nodeTempalteName,boolean skipInputProperties){
  PropertiesTask task=new PropertiesTask();
  task.setNodeTemplateName(nodeTempalteName);
  task.setComponent(relatedIndexedNodeType);
  task.setCode(TaskCode.PROPERTIES);
  task.setProperties(Maps.newHashMap());
  if (MapUtils.isNotEmpty(nodeTemplate.getProperties())) {
    addRequiredPropertyIdToTaskProperties(null,nodeTemplate.getProperties(),relatedIndexedNodeType.getProperties(),task,skipInputProperties);
  }
  for (  Map.Entry<String,RelationshipTemplate> relationshipEntry : safe(nodeTemplate.getRelationships()).entrySet()) {
    RelationshipTemplate relationship=relationshipEntry.getValue();
    if (relationship.getProperties() == null || relationship.getProperties().isEmpty()) {
      continue;
    }
    addRequiredPropertyIdToTaskProperties(""String_Node_Str"" + relationshipEntry.getKey() + ""String_Node_Str"",relationship.getProperties(),safe(ToscaContext.getOrFail(RelationshipType.class,relationshipEntry.getValue().getType()).getProperties()),task,skipInputProperties);
  }
  for (  Map.Entry<String,Capability> capabilityEntry : safe(nodeTemplate.getCapabilities()).entrySet()) {
    Capability capability=capabilityEntry.getValue();
    if (capability.getProperties() == null || capability.getProperties().isEmpty()) {
      continue;
    }
    addRequiredPropertyIdToTaskProperties(""String_Node_Str"" + capabilityEntry.getKey() + ""String_Node_Str"",capability.getProperties(),safe(ToscaContext.getOrFail(CapabilityType.class,capabilityEntry.getValue().getType()).getProperties()),task,skipInputProperties);
    if (capability.getType().equals(NormativeCapabilityTypes.SCALABLE)) {
      Map<String,AbstractPropertyValue> scalableProperties=capability.getProperties();
      verifyScalableProperties(scalableProperties,toReturnTaskList,nodeTempalteName,skipInputProperties);
    }
  }
  if (MapUtils.isNotEmpty(task.getProperties())) {
    toReturnTaskList.add(task);
  }
}"
62160,"private void updateApplicationTopology(PaaSInstancePersistentResourceMonitorEvent persistentResourceEvent,final Map<String,Object> persistentProperties){
  Deployment deployment=deploymentService.get(persistentResourceEvent.getDeploymentId());
  String deploymentTopologyId=DeploymentTopology.generateId(deployment.getVersionId(),deployment.getEnvironmentId());
  String topologyId=deployment.getSourceId() + ""String_Node_Str"" + deployment.getVersionId();
  Topology topology=topoServiceCore.getOrFail(topologyId);
  NodeTemplate nodeTemplate;
  try {
    nodeTemplate=TopologyUtils.getNodeTemplate(topology,persistentResourceEvent.getNodeTemplateId());
  }
 catch (  NotFoundException e) {
    log.warn(""String_Node_Str"",persistentResourceEvent.getNodeTemplateId(),e);
    return;
  }
  for (  String propertyName : persistentProperties.keySet()) {
    Object propertyValue=persistentProperties.get(propertyName);
    AbstractPropertyValue abstractPropertyValue=nodeTemplate.getProperties().get(propertyName);
    if (abstractPropertyValue != null && abstractPropertyValue instanceof FunctionPropertyValue) {
      FunctionPropertyValue function=(FunctionPropertyValue)abstractPropertyValue;
      if (function.getFunction().equals(ToscaFunctionConstants.GET_INPUT) && propertyValue instanceof String) {
        DeploymentInputs deploymentInputs=alienDAO.findById(DeploymentInputs.class,AbstractDeploymentConfig.generateId(deployment.getVersionId(),deployment.getEnvironmentId()));
        log.info(""String_Node_Str"",deploymentInputs.getId(),function.getTemplateName());
        log.debug(""String_Node_Str"",propertyName,persistentResourceEvent.getPersistentProperties().get(propertyName),propertyValue);
        deploymentInputs.getInputs().put(function.getTemplateName(),new ScalarPropertyValue((String)propertyValue));
        alienDAO.save(deploymentInputs);
      }
 else {
        log.warn(""String_Node_Str"");
        return;
      }
    }
 else {
      DeploymentMatchingConfiguration matchingConfiguration=alienDAO.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(deployment.getVersionId(),deployment.getEnvironmentId()));
      log.info(""String_Node_Str"",propertyName,matchingConfiguration.getId(),persistentResourceEvent.getNodeTemplateId());
      log.debug(""String_Node_Str"",persistentResourceEvent.getPersistentProperties().get(propertyName),propertyValue);
      matchingConfiguration.getMatchedNodesConfiguration().get(persistentResourceEvent.getNodeTemplateId()).getProperties().put(propertyName,getPropertyValue(propertyValue));
      alienDAO.save(matchingConfiguration);
    }
  }
}","private void updateApplicationTopology(PaaSInstancePersistentResourceMonitorEvent persistentResourceEvent,final Map<String,Object> persistentProperties){
  Deployment deployment=deploymentService.get(persistentResourceEvent.getDeploymentId());
  String topologyId=deployment.getSourceId() + ""String_Node_Str"" + deployment.getVersionId();
  Topology topology=topoServiceCore.getOrFail(topologyId);
  NodeTemplate nodeTemplate;
  try {
    nodeTemplate=TopologyUtils.getNodeTemplate(topology,persistentResourceEvent.getNodeTemplateId());
  }
 catch (  NotFoundException e) {
    log.warn(""String_Node_Str"",persistentResourceEvent.getNodeTemplateId(),e);
    return;
  }
  for (  String propertyName : persistentProperties.keySet()) {
    Object propertyValue=persistentProperties.get(propertyName);
    AbstractPropertyValue abstractPropertyValue=nodeTemplate.getProperties().get(propertyName);
    if (abstractPropertyValue != null && abstractPropertyValue instanceof FunctionPropertyValue) {
      FunctionPropertyValue function=(FunctionPropertyValue)abstractPropertyValue;
      if (function.getFunction().equals(ToscaFunctionConstants.GET_INPUT) && propertyValue instanceof String) {
        DeploymentInputs deploymentInputs=alienDAO.findById(DeploymentInputs.class,AbstractDeploymentConfig.generateId(deployment.getVersionId(),deployment.getEnvironmentId()));
        log.info(""String_Node_Str"",deploymentInputs.getId(),function.getTemplateName());
        log.debug(""String_Node_Str"",propertyName,persistentResourceEvent.getPersistentProperties().get(propertyName),propertyValue);
        deploymentInputs.getInputs().put(function.getTemplateName(),new ScalarPropertyValue((String)propertyValue));
        alienDAO.save(deploymentInputs);
      }
 else {
        log.warn(""String_Node_Str"");
        return;
      }
    }
 else {
      DeploymentMatchingConfiguration matchingConfiguration=alienDAO.findById(DeploymentMatchingConfiguration.class,AbstractDeploymentConfig.generateId(deployment.getVersionId(),deployment.getEnvironmentId()));
      log.info(""String_Node_Str"",propertyName,matchingConfiguration.getId(),persistentResourceEvent.getNodeTemplateId());
      log.debug(""String_Node_Str"",persistentResourceEvent.getPersistentProperties().get(propertyName),propertyValue);
      matchingConfiguration.getMatchedNodesConfiguration().get(persistentResourceEvent.getNodeTemplateId()).getProperties().put(propertyName,getPropertyValue(propertyValue));
      alienDAO.save(matchingConfiguration);
    }
  }
}"
62161,"@When(""String_Node_Str"") public void updateState(String message,Float percent) throws Throwable {
  MaintenanceUpdateDTO updateDTO=new MaintenanceUpdateDTO(message,percent);
  Context.getInstance().registerRestResponse(getRestClientInstance().putJSon(""String_Node_Str"",Context.getJsonMapper().writeValueAsString(updateDTO)));
}","@When(""String_Node_Str"") public void updateState(String message,Integer percent) throws Throwable {
  MaintenanceUpdateDTO updateDTO=new MaintenanceUpdateDTO(message,percent);
  Context.getInstance().registerRestResponse(getRestClientInstance().putJSon(""String_Node_Str"",Context.getJsonMapper().writeValueAsString(updateDTO)));
}"
62162,"private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  if (propertyValue == null) {
    nodePropsOverride.getProperties().remove(propertyName);
  }
 else {
    nodePropsOverride.getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  }
  context.saveConfiguration(matchingConfiguration);
}","private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  if (propertyValue == null) {
    nodePropsOverride.getProperties().remove(propertyName);
  }
 else {
    ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
    nodePropsOverride.getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  }
  context.saveConfiguration(matchingConfiguration);
}"
62163,"private boolean mergeNode(Topology topology,FlowExecutionContext context,String nodeTemplateId,NodePropsOverride nodePropsOverride){
  if (nodePropsOverride == null) {
    return false;
  }
  final ConfigChanged configChanged=new ConfigChanged();
  NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeTemplateId);
  nodeTemplate.setProperties(mergeProperties(nodePropsOverride.getProperties(),nodeTemplate.getProperties(),s -> {
    configChanged.changed=true;
    context.getLog().info(""String_Node_Str"" + s + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
  }
));
  Iterator<Entry<String,NodeCapabilitiesPropsOverride>> capabilitiesOverrideIter=safe(nodePropsOverride.getCapabilities()).entrySet().iterator();
  while (capabilitiesOverrideIter.hasNext()) {
    Entry<String,NodeCapabilitiesPropsOverride> capabilityProperties=capabilitiesOverrideIter.next();
    Capability capability=safe(nodeTemplate.getCapabilities()).get(capabilityProperties.getKey());
    if (capability == null) {
      configChanged.changed=true;
      capabilitiesOverrideIter.remove();
    }
 else {
      capability.setProperties(mergeProperties(capability.getProperties(),capabilityProperties.getValue().getProperties(),s -> {
        configChanged.changed=true;
        context.getLog().info(""String_Node_Str"" + s + ""String_Node_Str""+ capabilityProperties.getKey()+ ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
      }
));
    }
  }
  return configChanged.changed;
}","private boolean mergeNode(Topology topology,FlowExecutionContext context,String nodeTemplateId,NodePropsOverride nodePropsOverride){
  if (nodePropsOverride == null) {
    return false;
  }
  final ConfigChanged configChanged=new ConfigChanged();
  NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeTemplateId);
  nodeTemplate.setProperties(mergeProperties(nodePropsOverride.getProperties(),nodeTemplate.getProperties(),s -> {
    configChanged.changed=true;
    context.getLog().info(""String_Node_Str"" + s + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
  }
));
  Iterator<Entry<String,NodeCapabilitiesPropsOverride>> capabilitiesOverrideIter=safe(nodePropsOverride.getCapabilities()).entrySet().iterator();
  while (capabilitiesOverrideIter.hasNext()) {
    Entry<String,NodeCapabilitiesPropsOverride> overrideCapabilityProperties=capabilitiesOverrideIter.next();
    Capability capability=safe(nodeTemplate.getCapabilities()).get(overrideCapabilityProperties.getKey());
    if (capability == null) {
      configChanged.changed=true;
      capabilitiesOverrideIter.remove();
    }
 else {
      capability.setProperties(mergeProperties(overrideCapabilityProperties.getValue().getProperties(),capability.getProperties(),s -> {
        configChanged.changed=true;
        context.getLog().info(""String_Node_Str"" + s + ""String_Node_Str""+ overrideCapabilityProperties.getKey()+ ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
      }
));
    }
  }
  return configChanged.changed;
}"
62164,"private List<ITopologyModifier> getModifierListWithSelectionAction(String nodeId,Optional<String> optionalCapabilityName,String propertyName,Object propertyValue){
  List<ITopologyModifier> modifierList=flowExecutor.getDefaultFlowModifiers();
  for (int i=0; i < modifierList.size(); i++) {
    if (modifierList.get(i) == postMatchingNodeSetupModifier) {
      modifierList.add(i + 1,new SetMatchedNodePropertyModifier(propertyService,nodeId,optionalCapabilityName,propertyName,propertyValue));
      return modifierList;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","private List<ITopologyModifier> getModifierListWithSelectionAction(String nodeId,Optional<String> optionalCapabilityName,String propertyName,Object propertyValue){
  List<ITopologyModifier> modifierList=flowExecutor.getDefaultFlowModifiers();
  for (int i=0; i < modifierList.size(); i++) {
    if (modifierList.get(i) == postMatchingNodeSetupModifier) {
      modifierList.add(i,new SetMatchedNodePropertyModifier(propertyService,nodeId,optionalCapabilityName,propertyName,propertyValue));
      return modifierList;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
62165,"private void setNodeCapabilityProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,String capabilityName,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
  if (locationResourceCapability == null) {
    throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(CapabilityType.class,locationResourceCapability.getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  AbstractPropertyValue originalNodePropertyValue=safe(nodeTemplate.getCapabilities().get(capabilityName).getProperties()).get(propertyName);
  ensureNotSet(originalNodePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  propertyService.setCapabilityPropertyValue(nodeTemplate.getCapabilities().get(capabilityName),propertyDefinition,propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  if (nodePropsOverride.getCapabilities().get(capabilityName) == null) {
    nodePropsOverride.getCapabilities().put(capabilityName,new NodeCapabilitiesPropsOverride());
  }
  nodePropsOverride.getCapabilities().get(capabilityName).getProperties().put(propertyName,nodeTemplate.getCapabilities().get(capabilityName).getProperties().get(propertyName));
  context.saveConfiguration(matchingConfiguration);
}","private void setNodeCapabilityProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,String capabilityName,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
  if (locationResourceCapability == null) {
    throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(CapabilityType.class,locationResourceCapability.getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  AbstractPropertyValue originalNodePropertyValue=safe(nodeTemplate.getCapabilities().get(capabilityName).getProperties()).get(propertyName);
  ensureNotSet(originalNodePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  if (nodePropsOverride.getCapabilities().get(capabilityName) == null) {
    nodePropsOverride.getCapabilities().put(capabilityName,new NodeCapabilitiesPropsOverride());
  }
  nodePropsOverride.getCapabilities().get(capabilityName).getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  context.saveConfiguration(matchingConfiguration);
}"
62166,"private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  propertyService.setPropertyValue(nodeTemplate,propertyDefinition,propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  nodePropsOverride.getProperties().put(propertyName,nodeTemplate.getProperties().get(propertyName));
  context.saveConfiguration(matchingConfiguration);
}","private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  nodePropsOverride.getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  context.saveConfiguration(matchingConfiguration);
}"
62167,"private void setNodeCapabilityProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,String capabilityName,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
  if (locationResourceCapability == null) {
    throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(CapabilityType.class,locationResourceCapability.getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  AbstractPropertyValue originalNodePropertyValue=safe(nodeTemplate.getCapabilities().get(capabilityName).getProperties()).get(propertyName);
  ensureNotSet(originalNodePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  if (nodePropsOverride.getCapabilities().get(capabilityName) == null) {
    nodePropsOverride.getCapabilities().put(capabilityName,new NodeCapabilitiesPropsOverride());
  }
  nodePropsOverride.getCapabilities().get(capabilityName).getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  context.saveConfiguration(matchingConfiguration);
}","private void setNodeCapabilityProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,String capabilityName,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
  if (locationResourceCapability == null) {
    throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(CapabilityType.class,locationResourceCapability.getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  AbstractPropertyValue originalNodePropertyValue=safe(nodeTemplate.getCapabilities().get(capabilityName).getProperties()).get(propertyName);
  ensureNotSet(originalNodePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  if (propertyValue == null && nodePropsOverride.getCapabilities().get(capabilityName) != null) {
    nodePropsOverride.getCapabilities().get(capabilityName).getProperties().remove(propertyName);
  }
 else {
    ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
    if (nodePropsOverride.getCapabilities().get(capabilityName) == null) {
      nodePropsOverride.getCapabilities().put(capabilityName,new NodeCapabilitiesPropsOverride());
    }
    nodePropsOverride.getCapabilities().get(capabilityName).getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  }
  context.saveConfiguration(matchingConfiguration);
}"
62168,"private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  nodePropsOverride.getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  context.saveConfiguration(matchingConfiguration);
}","private void setNodeProperty(FlowExecutionContext context,LocationResourceTemplate locationResourceTemplate,NodeTemplate nodeTemplate,DeploymentMatchingConfiguration matchingConfiguration) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  PropertyDefinition propertyDefinition=ToscaContext.getOrFail(NodeType.class,locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
  if (propertyDefinition == null) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
  }
  AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
  ensureNotSet(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
  ensureNotSet(nodeTemplate.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
  NodePropsOverride nodePropsOverride=getNodePropsOverride(matchingConfiguration);
  ConstraintPropertyService.checkPropertyConstraint(propertyName,propertyValue,propertyDefinition);
  if (propertyValue == null) {
    nodePropsOverride.getProperties().remove(propertyName);
  }
 else {
    nodePropsOverride.getProperties().put(propertyName,PropertyService.asPropertyValue(propertyValue));
  }
  context.saveConfiguration(matchingConfiguration);
}"
62169,"@Override public void process(Topology topology,FlowExecutionContext context){
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,NodeMatchingConfigAutoSelectModifier.class.getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=matchingConfiguration.getMatchedLocationResources();
  Map<String,Set<String>> locResTemplateIdsPerNodeIds=(Map<String,Set<String>>)context.getExecutionCache().get(FlowExecutionContext.MATCHED_LOCATION_RESOURCE_TEMPLATE_IDS_PER_NODE);
  Set<String> nodeAvailableSubstitutions=locResTemplateIdsPerNodeIds.get(nodeId);
  for (  String matchedLRTId : safe(nodeAvailableSubstitutions)) {
    if (matchedLRTId.equals(locationResourceTemplateId)) {
      lastUserSubstitutions.put(nodeId,locationResourceTemplateId);
      context.saveConfiguration(matchingConfiguration);
      return;
    }
  }
  throw new NotFoundException(""String_Node_Str"" + locationResourceTemplateId + ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
}","@Override public void process(Topology topology,FlowExecutionContext context){
  executed=true;
  Optional<DeploymentMatchingConfiguration> configurationOptional=context.getConfiguration(DeploymentMatchingConfiguration.class,NodeMatchingConfigAutoSelectModifier.class.getSimpleName());
  if (!configurationOptional.isPresent()) {
    context.log().error(new LocationPolicyTask());
    return;
  }
  DeploymentMatchingConfiguration matchingConfiguration=configurationOptional.get();
  Map<String,String> lastUserSubstitutions=matchingConfiguration.getMatchedLocationResources();
  Map<String,Set<String>> locResTemplateIdsPerNodeIds=(Map<String,Set<String>>)context.getExecutionCache().get(FlowExecutionContext.MATCHED_LOCATION_RESOURCE_TEMPLATE_IDS_PER_NODE);
  Set<String> nodeAvailableSubstitutions=locResTemplateIdsPerNodeIds.get(nodeId);
  for (  String matchedLRTId : safe(nodeAvailableSubstitutions)) {
    if (matchedLRTId.equals(locationResourceTemplateId)) {
      lastUserSubstitutions.put(nodeId,locationResourceTemplateId);
      context.saveConfiguration(matchingConfiguration);
      return;
    }
  }
  throw new NotFoundException(""String_Node_Str"" + locationResourceTemplateId + ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
}"
62170,"/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node to substitute at matching phase.
 * @param locationResourceTemplateId The id of the location resources to substitute.
 * @return The flow execution context.
 */
public FlowExecutionContext updateSubstitution(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String locationResourceTemplateId){
  FlowExecutionContext executionContext=new FlowExecutionContext(alienDAO,topology,new EnvironmentContext(application,environment));
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(nodeId,locationResourceTemplateId);
  flowExecutor.execute(topology,modifierList,executionContext);
  return executionContext;
}","/** 
 * Execute the deployment flow with a modification of changing the substitution for one of the nodes.
 * @param application The application for which to execute the deployment flow.
 * @param environment The environment for which to execute the deployment flow.
 * @param topology The topology linked to the specified environment.
 * @param nodeId The id of the node to substitute at matching phase.
 * @param locationResourceTemplateId The id of the location resources to substitute.
 * @return The flow execution context.
 */
public FlowExecutionContext updateSubstitution(Application application,ApplicationEnvironment environment,Topology topology,String nodeId,String locationResourceTemplateId){
  FlowExecutionContext executionContext=new FlowExecutionContext(alienDAO,topology,new EnvironmentContext(application,environment));
  SetMatchedNodeModifier setMatchedNodeModifier=new SetMatchedNodeModifier(nodeId,locationResourceTemplateId);
  List<ITopologyModifier> modifierList=getModifierListWithSelectionAction(setMatchedNodeModifier);
  flowExecutor.execute(topology,modifierList,executionContext);
  if (!setMatchedNodeModifier.isExecuted()) {
    throw new NotFoundException(""String_Node_Str"" + locationResourceTemplateId + ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
  }
  return executionContext;
}"
62171,"private List<ITopologyModifier> getModifierListWithSelectionAction(String nodeId,String locationResourceTemplateId){
  List<ITopologyModifier> modifierList=flowExecutor.getDefaultFlowModifiers();
  for (int i=0; i < modifierList.size(); i++) {
    if (modifierList.get(i) == nodeMatchingConfigAutoSelectModifier) {
      modifierList.add(i + 1,new SetMatchedNodeModifier(nodeId,locationResourceTemplateId));
      return modifierList;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","private List<ITopologyModifier> getModifierListWithSelectionAction(SetMatchedNodeModifier matchedNodeModifier){
  List<ITopologyModifier> modifierList=flowExecutor.getDefaultFlowModifiers();
  for (int i=0; i < modifierList.size(); i++) {
    if (modifierList.get(i) == nodeMatchingConfigAutoSelectModifier) {
      modifierList.add(i + 1,matchedNodeModifier);
      return modifierList;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
62172,"private void processLocationResourceTemplateSubstitution(String nodeId,String locationResourceTemplateId,Topology topology){
  NodeTemplate locationNode=locationResourceService.getOrFail(locationResourceTemplateId).getTemplate();
  NodeTemplate abstractTopologyNode=topology.getNodeTemplates().put(nodeId,locationNode);
  locationNode.setName(abstractTopologyNode.getName());
  locationNode.setRelationships(abstractTopologyNode.getRelationships());
  locationNode.setProperties(CollectionUtils.merge(abstractTopologyNode.getProperties(),locationNode.getProperties(),false));
  for (  Map.Entry<String,Capability> locationCapabilityEntry : safe(locationNode.getCapabilities()).entrySet()) {
    Capability locationCapability=locationCapabilityEntry.getValue();
    Capability abstractCapability=safe(abstractTopologyNode.getCapabilities()).get(locationCapabilityEntry.getKey());
    if (abstractCapability != null && MapUtils.isNotEmpty(abstractCapability.getProperties())) {
      locationCapability.setProperties(CollectionUtils.merge(abstractCapability.getProperties(),locationCapability.getProperties(),false));
    }
  }
}","private void processLocationResourceTemplateSubstitution(String nodeId,String locationResourceTemplateId,Topology topology){
  NodeTemplate locationNode=locationResourceService.getOrFail(locationResourceTemplateId).getTemplate();
  NodeTemplate abstractTopologyNode=topology.getNodeTemplates().put(nodeId,locationNode);
  locationNode.setName(abstractTopologyNode.getName());
  locationNode.setRelationships(abstractTopologyNode.getRelationships());
  Set<String> topologyNotMergedProps=Sets.newHashSet();
  locationNode.setProperties(CollectionUtils.merge(abstractTopologyNode.getProperties(),locationNode.getProperties(),true,topologyNotMergedProps));
  for (  Map.Entry<String,Capability> locationCapabilityEntry : safe(locationNode.getCapabilities()).entrySet()) {
    Capability locationCapability=locationCapabilityEntry.getValue();
    Capability abstractCapability=safe(abstractTopologyNode.getCapabilities()).get(locationCapabilityEntry.getKey());
    if (abstractCapability != null && MapUtils.isNotEmpty(abstractCapability.getProperties())) {
      locationCapability.setProperties(CollectionUtils.merge(abstractCapability.getProperties(),locationCapability.getProperties(),true,topologyNotMergedProps));
    }
  }
}"
62173,"public DeploymentConfiguration getDeploymentConfiguration(DeploymentTopology deploymentTopology){
  DeploymentSubstitutionConfiguration substitutionConfiguration=getAvailableNodeSubstitutions(deploymentTopology);
  Map<String,Set<String>> availableSubstitutions=substitutionConfiguration.getAvailableSubstitutions();
  Map<String,String> existingSubstitutions=deploymentTopology.getSubstitutedNodes();
  if (availableSubstitutions.size() != existingSubstitutions.size()) {
    updateDeploymentTopology(deploymentTopology);
  }
  return new DeploymentConfiguration(deploymentTopology,substitutionConfiguration);
}","public DeploymentConfiguration getDeploymentConfiguration(DeploymentTopology deploymentTopology){
  DeploymentSubstitutionConfiguration substitutionConfiguration=getAvailableNodeSubstitutions(deploymentTopology);
  Map<String,Set<String>> availableSubstitutions=substitutionConfiguration.getAvailableSubstitutions();
  Map<String,String> existingSubstitutions=deploymentTopology.getSubstitutedNodes();
  if (substitutionsHaveChanged(existingSubstitutions,availableSubstitutions)) {
    updateDeploymentTopology(deploymentTopology);
  }
  return new DeploymentConfiguration(deploymentTopology,substitutionConfiguration);
}"
62174,"@Before public void init() throws IOException {
  thrownException=null;
  GetMultipleDataResult<Application> apps=alienDAO.search(Application.class,""String_Node_Str"",null,100);
  for (  Application application : apps.getData()) {
    applicationService.delete(application.getId());
  }
  FacetedSearchResult<Topology> searchResult=catalogService.search(Topology.class,""String_Node_Str"",100,null);
  Topology[] topologies=searchResult.getData();
  for (  Topology topology : topologies) {
    csarService.forceDeleteCsar(topology.getId());
  }
  topologyIds.clear();
  editionContextManager.clearCache();
}","@Before public void init() throws IOException {
  thrownException=null;
  GetMultipleDataResult<Application> apps=alienDAO.search(Application.class,""String_Node_Str"",null,100);
  for (  Application application : apps.getData()) {
    applicationService.delete(application.getId());
  }
  FacetedSearchResult<Topology> searchResult=catalogService.search(Topology.class,""String_Node_Str"",100,null);
  Topology[] topologies=searchResult.getData();
  for (  Topology topology : topologies) {
    try {
      csarService.forceDeleteCsar(topology.getId());
    }
 catch (    NotFoundException e) {
      alienDAO.delete(Topology.class,topology.getId());
    }
  }
  topologyIds.clear();
  editionContextManager.clearCache();
}"
62175,"private ApplicationTopologyVersion createTopologyVersion(String applicationId,String version,String qualifier,String description,Topology topology){
  String delegateType=ArchiveDelegateType.APPLICATION.toString();
  Csar csar=new Csar(applicationId,version);
  csar.setWorkspace(APP_WORKSPACE_PREFIX + ""String_Node_Str"" + applicationId);
  csar.setDelegateId(applicationId);
  csar.setDelegateType(delegateType);
  topology.setArchiveName(csar.getName());
  topology.setArchiveVersion(csar.getVersion());
  topology.setWorkspace(csar.getWorkspace());
  if (!VersionUtil.isSnapshot(version)) {
    checkTopologyReleasable(topology);
  }
  archiveIndexer.importNewArchive(csar,topology);
  ApplicationTopologyVersion applicationTopologyVersion=new ApplicationTopologyVersion();
  applicationTopologyVersion.setArchiveId(csar.getId());
  applicationTopologyVersion.setQualifier(qualifier);
  applicationTopologyVersion.setDescription(description);
  return applicationTopologyVersion;
}","@SneakyThrows private ApplicationTopologyVersion createTopologyVersion(String applicationId,String version,String qualifier,String description,Topology topology){
  Path originalTopologyArchive=archiveRepositry.getExpandedCSAR(topology.getArchiveName(),topology.getArchiveVersion());
  String delegateType=ArchiveDelegateType.APPLICATION.toString();
  Csar csar=new Csar(applicationId,version);
  csar.setWorkspace(APP_WORKSPACE_PREFIX + ""String_Node_Str"" + applicationId);
  csar.setDelegateId(applicationId);
  csar.setDelegateType(delegateType);
  ArtifactUtil.changeTopologyArtifactReferences(topology,csar);
  topology.setArchiveName(csar.getName());
  topology.setArchiveVersion(csar.getVersion());
  topology.setWorkspace(csar.getWorkspace());
  if (!VersionUtil.isSnapshot(version)) {
    checkTopologyReleasable(topology);
  }
  Path newTopologyTempPath=Files.createTempDirectory(tempDirPath,""String_Node_Str"");
  ArtifactUtil.copyCsarArtifacts(originalTopologyArchive,newTopologyTempPath);
  archiveIndexer.importNewArchive(csar,topology,newTopologyTempPath);
  ApplicationTopologyVersion applicationTopologyVersion=new ApplicationTopologyVersion();
  applicationTopologyVersion.setArchiveId(csar.getId());
  applicationTopologyVersion.setQualifier(qualifier);
  applicationTopologyVersion.setDescription(description);
  return applicationTopologyVersion;
}"
62176,"/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 */
public synchronized void importNewArchive(Csar csar,Topology topology){
  ArchiveRoot archiveRoot=new ArchiveRoot();
  archiveRoot.setArchive(csar);
  archiveRoot.setTopology(topology);
  publisher.publishEvent(new BeforeArchiveIndexed(this,archiveRoot));
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  csarService.save(csar);
  topologyServiceCore.save(topology);
  archiveRepositry.storeCSAR(csar,yaml);
  publisher.publishEvent(new AfterArchiveIndexed(this,archiveRoot));
}","/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 * @param topologyPath if the new topology must be created inside this directory to have all its artifacts
 */
@SneakyThrows public synchronized void importNewArchive(Csar csar,Topology topology,Path topologyPath){
  ArchiveRoot archiveRoot=new ArchiveRoot();
  archiveRoot.setArchive(csar);
  archiveRoot.setTopology(topology);
  publisher.publishEvent(new BeforeArchiveIndexed(this,archiveRoot));
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  csarService.save(csar);
  topologyServiceCore.save(topology);
  if (topologyPath == null) {
    archiveRepositry.storeCSAR(csar,yaml);
  }
 else {
    Files.write(topologyPath.resolve(csar.getYamlFilePath()),yaml.getBytes(Charset.forName(""String_Node_Str"")));
    archiveRepositry.storeCSAR(csar,topologyPath);
  }
  publisher.publishEvent(new AfterArchiveIndexed(this,archiveRoot));
}"
62177,"@Override public Topology createTopologyAsTemplate(String name,String description,String version,String workspace,String fromTopologyId){
  NameValidationUtils.validate(""String_Node_Str"",name);
  Csar csar=new Csar(name,StringUtils.isNotBlank(version) ? version : VersionUtil.DEFAULT_VERSION_NAME);
  csar.setWorkspace(workspace);
  csar.setDelegateType(ArchiveDelegateType.CATALOG.toString());
  if (description == null) {
    csar.setDescription(""String_Node_Str"");
  }
 else {
    csar.setDescription(""String_Node_Str"" + description);
  }
  Topology topology;
  if (fromTopologyId != null) {
    topology=alienDAO.findById(Topology.class,fromTopologyId);
  }
 else {
    topology=new Topology();
  }
  topology.setDescription(description);
  topology.setArchiveName(csar.getName());
  topology.setArchiveVersion(csar.getVersion());
  topology.setWorkspace(csar.getWorkspace());
  csar.setDependencies(topology.getDependencies());
  archiveIndexer.importNewArchive(csar,topology);
  return topology;
}","@Override public Topology createTopologyAsTemplate(String name,String description,String version,String workspace,String fromTopologyId){
  NameValidationUtils.validate(""String_Node_Str"",name);
  Csar csar=new Csar(name,StringUtils.isNotBlank(version) ? version : VersionUtil.DEFAULT_VERSION_NAME);
  csar.setWorkspace(workspace);
  csar.setDelegateType(ArchiveDelegateType.CATALOG.toString());
  if (description == null) {
    csar.setDescription(""String_Node_Str"");
  }
 else {
    csar.setDescription(""String_Node_Str"" + description);
  }
  Topology topology;
  if (fromTopologyId != null) {
    topology=alienDAO.findById(Topology.class,fromTopologyId);
  }
 else {
    topology=new Topology();
  }
  topology.setDescription(description);
  topology.setArchiveName(csar.getName());
  topology.setArchiveVersion(csar.getVersion());
  topology.setWorkspace(csar.getWorkspace());
  csar.setDependencies(topology.getDependencies());
  archiveIndexer.importNewArchive(csar,topology,null);
  return topology;
}"
62178,"/** 
 * Create a new version for an application. The new application version can be created from an exiting application version of not. When created from an existing application version all topology versions from the original version will be created in the new application version.
 * @param applicationId The id of the application for which to create the version.
 * @param version The new version.
 * @param description The description.
 * @param originalId The version (application version or topology) from witch to create the new application version.
 * @param originalIsAppVersion True if the originalId is the id of an application version id, false if it is the id of a topology id.
 */
public ApplicationVersion createApplicationVersion(String applicationId,String version,String description,String originalId,boolean originalIsAppVersion){
  if (isVersionNameExist(applicationId,version)) {
    throw new AlreadyExistException(""String_Node_Str"" + version + ""String_Node_Str""+ applicationId+ ""String_Node_Str"");
  }
  ApplicationVersion appVersion=new ApplicationVersion();
  appVersion.setDelegateId(applicationId);
  appVersion.setVersion(version);
  appVersion.setNestedVersion(VersionUtil.parseVersion(version));
  appVersion.setReleased(!VersionUtil.isSnapshot(version));
  appVersion.setDescription(description);
  appVersion.setTopologyVersions(Maps.newHashMap());
  if (originalIsAppVersion && originalId != null) {
    ApplicationVersion originalAppVersion=getOrFail(originalId);
    if (!applicationId.equals(originalAppVersion.getApplicationId())) {
      throw new AuthorizationServiceException(""String_Node_Str"");
    }
    importTopologiesFromPreviousVersion(appVersion,originalAppVersion);
  }
 else {
    Topology topology;
    if (originalId == null) {
      topology=new Topology();
    }
 else {
      try {
        topology=getTemplateTopology(originalId);
      }
 catch (      NotFoundException|AccessDeniedException e) {
        topology=new Topology();
      }
    }
    ApplicationTopologyVersion applicationTopologyVersion=createTopologyVersion(applicationId,version,null,""String_Node_Str"",topology);
    appVersion.getTopologyVersions().put(version,applicationTopologyVersion);
  }
  alienDAO.save(appVersion);
  return appVersion;
}","/** 
 * Create a new version for an application. The new application version can be created from an exiting application version of not. When created from an existing application version all topology versions from the original version will be created in the new application version.
 * @param applicationId The id of the application for which to create the version.
 * @param version The new version.
 * @param description The description.
 * @param originalId The version (application version or topology) from witch to create the new application version.
 * @param originalIsAppVersion True if the originalId is the id of an application version id, false if it is the id of a topology id.
 */
public ApplicationVersion createApplicationVersion(String applicationId,String version,String description,String originalId,boolean originalIsAppVersion){
  if (isVersionNameExist(applicationId,version)) {
    throw new AlreadyExistException(""String_Node_Str"" + version + ""String_Node_Str""+ applicationId+ ""String_Node_Str"");
  }
  ApplicationVersion appVersion=new ApplicationVersion();
  appVersion.setDelegateId(applicationId);
  appVersion.setVersion(version);
  appVersion.setNestedVersion(VersionUtil.parseVersion(version));
  appVersion.setReleased(!VersionUtil.isSnapshot(version));
  appVersion.setDescription(description);
  appVersion.setTopologyVersions(Maps.newHashMap());
  if (originalIsAppVersion && originalId != null) {
    ApplicationVersion originalAppVersion=getOrFail(originalId);
    if (!applicationId.equals(originalAppVersion.getApplicationId())) {
      throw new AuthorizationServiceException(""String_Node_Str"");
    }
    importTopologiesFromPreviousVersion(appVersion,originalAppVersion);
  }
 else {
    Topology topology;
    if (originalId == null) {
      topology=new Topology();
    }
 else {
      topology=getTemplateTopology(originalId);
    }
    ApplicationTopologyVersion applicationTopologyVersion=createTopologyVersion(applicationId,version,null,""String_Node_Str"",topology);
    appVersion.getTopologyVersions().put(version,applicationTopologyVersion);
  }
  alienDAO.save(appVersion);
  return appVersion;
}"
62179,"/** 
 * Generate resources related to a csar list
 * @param csars
 * @return
 */
public List<Usage> generateCsarsInfo(Csar[] csars){
  String resourceName;
  String resourceId;
  List<Usage> resourceList=Lists.newArrayList();
  for (  Csar csar : csars) {
    if (ArchiveDelegateType.APPLICATION.toString().equals(csar.getDelegateType())) {
      Application application=applicationService.checkAndGetApplication(csar.getDelegateId());
      resourceName=application.getName();
      resourceId=csar.getDelegateId();
    }
 else {
      resourceName=csar.getName();
      resourceId=csar.getId();
    }
    Usage temp=new Usage(resourceName,Csar.class.getSimpleName().toLowerCase(),resourceId,csar.getWorkspace());
    resourceList.add(temp);
  }
  return resourceList;
}","/** 
 * Generate resources related to a csar list
 * @param csars
 * @return
 */
public List<Usage> generateCsarsInfo(Csar[] csars){
  String resourceName;
  String resourceId;
  List<Usage> resourceList=Lists.newArrayList();
  for (  Csar csar : csars) {
    if (ArchiveDelegateType.APPLICATION.toString().equals(csar.getDelegateType())) {
      Application application=applicationService.checkAndGetApplication(csar.getDelegateId());
      resourceName=application.getName();
    }
 else {
      resourceName=csar.getName();
    }
    Usage temp=new Usage(resourceName,Csar.class.getSimpleName().toLowerCase(),csar.getId(),csar.getWorkspace());
    resourceList.add(temp);
  }
  return resourceList;
}"
62180,"@Then(""String_Node_Str"") public void I_should_have_a_delete_csar_response_with_related_resources(DataTable usageDT) throws Throwable {
  RestResponse<?> restResponse=JsonUtil.read(Context.getInstance().getRestResponse());
  Assert.assertNotNull(restResponse);
  List<Usage> resultData=JsonUtil.toList(JsonUtil.toString(restResponse.getData()),Usage.class);
  boolean isPresent;
  for (  Usage usage : resultData) {
    isPresent=false;
    for (    DataTableRow row : usageDT.getGherkinRows()) {
      if (usage.getResourceName().equals(row.getCells().get(0)) && usage.getResourceType().equals(row.getCells().get(1))) {
        Assert.assertTrue(usage.getResourceName() + ""String_Node_Str"" + usage.getResourceType(),true);
        isPresent=true;
        break;
      }
    }
    if (!isPresent) {
      Assert.assertFalse(""String_Node_Str"" + usage.getResourceName() + ""String_Node_Str""+ usage.getResourceType(),true);
    }
  }
}","@Then(""String_Node_Str"") public void I_should_have_a_delete_csar_response_with_related_resources(DataTable usageDT) throws Throwable {
  RestResponse<?> restResponse=JsonUtil.read(Context.getInstance().getRestResponse());
  Assert.assertNotNull(restResponse);
  List<Usage> resultData=JsonUtil.toList(JsonUtil.toString(restResponse.getData()),Usage.class);
  boolean isPresent;
  for (  Usage usage : resultData) {
    isPresent=false;
    for (    DataTableRow row : usageDT.getGherkinRows()) {
      if (usage.getResourceName().equals(row.getCells().get(0)) && usage.getResourceType().equals(row.getCells().get(1))) {
        isPresent=true;
        break;
      }
    }
    if (!isPresent) {
      Assert.assertFalse(""String_Node_Str"" + usage.getResourceName() + ""String_Node_Str""+ usage.getResourceType(),true);
    }
  }
}"
62181,"@ToscaContextual public void updateSubstitutionType(final Topology topology,Csar csar){
  if (topology.getSubstitutionMapping() == null || topology.getSubstitutionMapping().getSubstitutionType() == null) {
    return;
  }
  NodeType nodeType=ToscaContext.getOrFail(NodeType.class,topology.getSubstitutionMapping().getSubstitutionType());
  if (csar.getDependencies().add(csarDependencyLoader.buildDependencyBean(nodeType.getArchiveName(),nodeType.getArchiveVersion()))) {
    csarService.save(csar);
  }
  NodeType substituteNodeType=buildSubstituteNodeType(topology,csar,nodeType);
  substituteNodeType.setProperties(topology.getInputs());
  fillSubstituteAttributesFromTypeAtttributes(topology,substituteNodeType);
  fillSubstituteAttributesFromOutputProperties(topology,substituteNodeType);
  fillAttributesFromOutputCapabilitiesProperties(topology,substituteNodeType);
  fillCapabilities(topology,substituteNodeType);
  fillRequirements(topology,substituteNodeType);
  indexerService.indexInheritableElement(csar.getName(),csar.getVersion(),substituteNodeType,csar.getDependencies());
  publisher.publishEvent(new SubstitutionTypeChangedEvent(this,topology,substituteNodeType));
}","@ToscaContextual public void updateSubstitutionType(final Topology topology,Csar csar){
  if (topology.getSubstitutionMapping() == null || topology.getSubstitutionMapping().getSubstitutionType() == null) {
    return;
  }
  NodeType nodeType=ToscaContext.getOrFail(NodeType.class,topology.getSubstitutionMapping().getSubstitutionType());
  if (csar.getDependencies().add(csarDependencyLoader.buildDependencyBean(nodeType.getArchiveName(),nodeType.getArchiveVersion()))) {
    Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getName(),csar.getVersion());
    String hash=FileUtil.deepSHA1(archiveGitPath);
    csar.setHash(hash);
    csarService.save(csar);
  }
  NodeType substituteNodeType=buildSubstituteNodeType(topology,csar,nodeType);
  substituteNodeType.setProperties(topology.getInputs());
  fillSubstituteAttributesFromTypeAtttributes(topology,substituteNodeType);
  fillSubstituteAttributesFromOutputProperties(topology,substituteNodeType);
  fillAttributesFromOutputCapabilitiesProperties(topology,substituteNodeType);
  fillCapabilities(topology,substituteNodeType);
  fillRequirements(topology,substituteNodeType);
  indexerService.indexInheritableElement(csar.getName(),csar.getVersion(),substituteNodeType,csar.getDependencies());
  publisher.publishEvent(new SubstitutionTypeChangedEvent(this,topology,substituteNodeType));
}"
62182,"private void fillRequirements(Topology topology,NodeType substituteNodeType){
  if (topology.getSubstitutionMapping().getRequirements() != null) {
    for (    Map.Entry<String,SubstitutionTarget> e : topology.getSubstitutionMapping().getRequirements().entrySet()) {
      String key=e.getKey();
      String nodeName=e.getValue().getNodeTemplateName();
      String requirementName=e.getValue().getTargetId();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      RequirementDefinition requirementDefinition=IndexedModelUtils.getRequirementDefinitionById(nodeTemplateType.getRequirements(),requirementName);
      requirementDefinition.setId(key);
      substituteNodeType.getRequirements().add(requirementDefinition);
    }
  }
}","private void fillRequirements(Topology topology,NodeType substituteNodeType){
  if (topology.getSubstitutionMapping().getRequirements() != null) {
    for (    Map.Entry<String,SubstitutionTarget> e : topology.getSubstitutionMapping().getRequirements().entrySet()) {
      String key=e.getKey();
      String nodeName=e.getValue().getNodeTemplateName();
      String requirementName=e.getValue().getTargetId();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      RequirementDefinition requirementDefinition=IndexedModelUtils.getRequirementDefinitionById(nodeTemplateType.getRequirements(),requirementName);
      requirementDefinition=CloneUtil.clone(requirementDefinition);
      requirementDefinition.setId(key);
      substituteNodeType.getRequirements().add(requirementDefinition);
    }
  }
}"
62183,"private void fillCapabilities(Topology topology,NodeType substituteNodeType){
  if (topology.getSubstitutionMapping().getCapabilities() != null) {
    for (    Map.Entry<String,SubstitutionTarget> e : topology.getSubstitutionMapping().getCapabilities().entrySet()) {
      String key=e.getKey();
      String nodeName=e.getValue().getNodeTemplateName();
      String capabilityName=e.getValue().getTargetId();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      CapabilityDefinition capabilityDefinition=IndexedModelUtils.getCapabilityDefinitionById(nodeTemplateType.getCapabilities(),capabilityName);
      capabilityDefinition.setId(key);
      substituteNodeType.getCapabilities().add(capabilityDefinition);
    }
  }
}","private void fillCapabilities(Topology topology,NodeType substituteNodeType){
  if (topology.getSubstitutionMapping().getCapabilities() != null) {
    for (    Map.Entry<String,SubstitutionTarget> e : topology.getSubstitutionMapping().getCapabilities().entrySet()) {
      String key=e.getKey();
      String nodeName=e.getValue().getNodeTemplateName();
      String capabilityName=e.getValue().getTargetId();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      CapabilityDefinition capabilityDefinition=IndexedModelUtils.getCapabilityDefinitionById(nodeTemplateType.getCapabilities(),capabilityName);
      capabilityDefinition=CloneUtil.clone(capabilityDefinition);
      capabilityDefinition.setId(key);
      substituteNodeType.getCapabilities().add(capabilityDefinition);
    }
  }
}"
62184,"@Override public Map<String,Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate,String type){
  Map<String,Capability> capabilities=nodeTemplate.getCapabilities();
  if (capabilities == null) {
    return Collections.emptyMap();
  }
  Map<String,Capability> targetCapabilitiesMatch=Maps.newHashMap();
  for (  Map.Entry<String,Capability> capabilityEntry : capabilities.entrySet()) {
    String capabilityTypeName=capabilityEntry.getKey();
    CapabilityType capabilityType=toscaContextFinder.find(CapabilityType.class,capabilityTypeName);
    if (ToscaNormativeUtil.isFromType(type,capabilityType)) {
      targetCapabilitiesMatch.put(capabilityTypeName,capabilityEntry.getValue());
    }
  }
  return targetCapabilitiesMatch;
}","@Override public Map<String,Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate,String type){
  Map<String,Capability> capabilities=nodeTemplate.getCapabilities();
  if (capabilities == null) {
    return Collections.emptyMap();
  }
  Map<String,Capability> targetCapabilitiesMatch=Maps.newHashMap();
  for (  Map.Entry<String,Capability> capabilityEntry : capabilities.entrySet()) {
    String capabilityTypeName=capabilityEntry.getValue().getType();
    CapabilityType capabilityType=toscaContextFinder.find(CapabilityType.class,capabilityTypeName);
    if (ToscaNormativeUtil.isFromType(type,capabilityType)) {
      targetCapabilitiesMatch.put(capabilityEntry.getKey(),capabilityEntry.getValue());
    }
  }
  return targetCapabilitiesMatch;
}"
62185,"private void addCapabilityToNodeTemplateAndToscaContext(String type,String... derivedFrom){
  CapabilityType capabilityType=new CapabilityType();
  capabilityType.setDerivedFrom(Arrays.asList(derivedFrom));
  capabilityType.setElementId(type);
  capabilityTypeByTypeName.put(type,capabilityType);
  Capability capability=new Capability();
  capability.setType(type);
  nodeTemplate.getCapabilities().put(type,capability);
}","private void addCapabilityToNodeTemplateAndToscaContext(String name,String type,String... derivedFrom){
  CapabilityType capabilityType=new CapabilityType();
  capabilityType.setDerivedFrom(Arrays.asList(derivedFrom));
  capabilityType.setElementId(type);
  capabilityTypeByTypeName.put(type,capabilityType);
  Capability capability=new Capability();
  capability.setType(type);
  nodeTemplate.getCapabilities().put(name,capability);
}"
62186,"@Before public void setUp() throws Exception {
  service=new CapabilityMatcherService();
  service.setToscaContextFinder(toscaContextFinder);
  nodeTemplate=new NodeTemplate();
  nodeTemplate.setCapabilities(Maps.newHashMap());
  capabilityTypeByTypeName=Maps.newHashMap();
  addCapabilityToNodeTemplateAndToscaContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addCapabilityToNodeTemplateAndToscaContext(""String_Node_Str"");
  Mockito.when(toscaContextFinder.find(Mockito.any(),Mockito.anyString())).then(invocationOnMock -> capabilityTypeByTypeName.get(invocationOnMock.getArguments()[1]));
}","@Before public void setUp() throws Exception {
  service=new CapabilityMatcherService();
  service.setToscaContextFinder(toscaContextFinder);
  nodeTemplate=new NodeTemplate();
  nodeTemplate.setCapabilities(Maps.newHashMap());
  capabilityTypeByTypeName=Maps.newHashMap();
  addCapabilityToNodeTemplateAndToscaContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addCapabilityToNodeTemplateAndToscaContext(""String_Node_Str"",""String_Node_Str"");
  Mockito.when(toscaContextFinder.find(Mockito.any(),Mockito.anyString())).then(invocationOnMock -> capabilityTypeByTypeName.get(invocationOnMock.getArguments()[1]));
}"
62187,"private static void injectInputIntoOperations(String name,AbstractPropertyValue value,Map<String,Operation> operations){
  if (MapUtils.isEmpty(operations)) {
    return;
  }
  if (value != null && !(value instanceof ScalarPropertyValue)) {
    return;
  }
  String inputName=name.toUpperCase();
  operations.forEach((operationName,operation) -> {
    if (operation.getInputParameters() == null) {
      operation.setInputParameters(Maps.newHashMap());
    }
    operation.getInputParameters().putIfAbsent(inputName,value);
  }
);
}","private static void injectInputIntoOperations(String name,AbstractPropertyValue value,Map<String,Operation> operations){
  if (MapUtils.isEmpty(operations)) {
    return;
  }
  if (value != null && !(value instanceof ScalarPropertyValue)) {
    return;
  }
 else   if (value == null) {
    value=new ScalarPropertyValue();
  }
  String inputName=name.toUpperCase();
  AbstractPropertyValue finalValue=value;
  operations.forEach((operationName,operation) -> {
    if (operation.getInputParameters() == null) {
      operation.setInputParameters(Maps.newHashMap());
    }
    operation.getInputParameters().putIfAbsent(inputName,finalValue);
  }
);
}"
62188,"/** 
 * Set the value for the size (maximum number of elements to return in the request).
 * @param size Maximum number of elements to return in the request. If null will be set to 50. Cannot be more than 100.
 */
public void setSize(Integer size){
  if (size == null) {
    this.size=Constants.DEFAULT_ES_SEARCH_SIZE;
  }
 else   if (size > Constants.MAX_ES_SEARCH_SIZE) {
    this.size=Constants.MAX_ES_SEARCH_SIZE;
  }
 else {
    this.size=size;
  }
}","/** 
 * Set the value for the size (maximum number of elements to return in the request).
 * @param size Maximum number of elements to return in the request. If null will be set to 50. Cannot be more than 100.
 */
public void setSize(Integer size){
  if (size == null) {
    this.size=AlienConstants.DEFAULT_ES_SEARCH_SIZE;
  }
 else   if (size > AlienConstants.MAX_ES_SEARCH_SIZE) {
    this.size=AlienConstants.MAX_ES_SEARCH_SIZE;
  }
 else {
    this.size=size;
  }
}"
62189,"/** 
 * Set the value for the size (maximum number of elements to return in the request).
 * @param size Maximum number of elements to return in the request. If null will be set to 50. Cannot be more than 100.
 */
public void setSize(Integer size){
  if (size == null) {
    this.size=Constants.DEFAULT_ES_SEARCH_SIZE;
  }
 else   if (size > Constants.MAX_ES_SEARCH_SIZE) {
    this.size=Constants.MAX_ES_SEARCH_SIZE;
  }
 else {
    this.size=size;
  }
}","/** 
 * Set the value for the size (maximum number of elements to return in the request).
 * @param size Maximum number of elements to return in the request. If null will be set to 50. Cannot be more than 100.
 */
public void setSize(Integer size){
  if (size == null) {
    this.size=AlienConstants.DEFAULT_ES_SEARCH_SIZE;
  }
 else   if (size > AlienConstants.MAX_ES_SEARCH_SIZE) {
    this.size=AlienConstants.MAX_ES_SEARCH_SIZE;
  }
 else {
    this.size=size;
  }
}"
62190,"/** 
 * Delete a version and the related topologies.
 * @param id The id of the version to delete.
 */
public boolean delete(String id){
  ApplicationEnvironment environmentToDelete=getOrFail(id);
  boolean isDeployed=isDeployed(id);
  if (isDeployed) {
    throw new DeleteDeployedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  deploymentTopologyService.deleteByEnvironmentId(id);
  applicationContext.publishEvent(new BeforeEnvironmentDeletedEvent(this,environmentToDelete.getId()));
  alienDAO.delete(ApplicationEnvironment.class,id);
  applicationContext.publishEvent(new DeleteEnvironmentEvent(this,environmentToDelete,deploymentService.getAllOrchestratorIdsAndOrchestratorDeploymentId(id)));
  return true;
}","/** 
 * Delete a version and the related topologies.
 * @param id The id of the version to delete.
 */
public boolean delete(String id){
  ApplicationEnvironment applicationEnvironment=getOrFail(id);
  boolean isDeployed=isDeployed(id);
  if (isDeployed) {
    throw new DeleteDeployedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  publisher.publishEvent(new BeforeApplicationEnvironmentDeleted(this,applicationEnvironment.getApplicationId(),applicationEnvironment.getId()));
  alienDAO.delete(ApplicationEnvironment.class,id);
  publisher.publishEvent(new AfterApplicationEnvironmentDeleted(this,applicationEnvironment.getApplicationId(),applicationEnvironment.getId()));
  return true;
}"
62191,"@Override public String parse(Node node,ParsingContextExecution context){
  ArchiveRoot archiveRoot=(ArchiveRoot)context.getParent();
  String toscaDefinitionVersion=ParserUtils.getScalar(node,context);
  if (toscaDefinitionVersion != null) {
    CSARDependency dependency=ToscaNormativeImports.IMPORTS.get(toscaDefinitionVersion);
    if (dependency != null) {
      Set<CSARDependency> dependencies=archiveRoot.getArchive().getDependencies();
      if (dependencies == null) {
        dependencies=new HashSet<>();
        archiveRoot.getArchive().setDependencies(dependencies);
      }
      ToscaContext.get().addDependency(dependency);
      dependencies.add(dependency);
    }
  }
  return toscaDefinitionVersion;
}","@Override public String parse(Node node,ParsingContextExecution context){
  ArchiveRoot archiveRoot=(ArchiveRoot)context.getParent();
  String toscaDefinitionVersion=ParserUtils.getScalar(node,context);
  if (toscaDefinitionVersion != null) {
    CSARDependency dependency=ToscaNormativeImports.IMPORTS.get(toscaDefinitionVersion);
    if (dependency != null) {
      if (ToscaNormativeImports.TOSCA_NORMATIVE_TYPES.equals(dependency.getName())) {
        if (recursiveCall.get() == null) {
          recursiveCall.set(true);
        }
 else {
          return toscaDefinitionVersion;
        }
      }
      Set<CSARDependency> dependencies=archiveRoot.getArchive().getDependencies();
      if (dependencies == null) {
        dependencies=new HashSet<>();
        archiveRoot.getArchive().setDependencies(dependencies);
      }
      ToscaContext.get().addDependency(dependency);
      dependencies.add(dependency);
      recursiveCall.remove();
    }
  }
  return toscaDefinitionVersion;
}"
62192,"/** 
 * Deployment configuration has been changed, in this case must re-synchronize the deployment topology
 * @param deploymentTopology the deployment topology to update
 */
public void updateDeploymentTopology(DeploymentTopology deploymentTopology){
  ApplicationEnvironment environment=appEnvironmentServices.getOrFail(deploymentTopology.getEnvironmentId());
  Topology topology=topologyServiceCore.getOrFail(deploymentTopology.getInitialTopologyId());
  doUpdateDeploymentTopology(deploymentTopology,topology);
}","/** 
 * Deployment configuration has been changed, in this case must re-synchronize the deployment topology
 * @param deploymentTopology the deployment topology to update
 */
public void updateDeploymentTopology(DeploymentTopology deploymentTopology){
  Topology topology=topologyServiceCore.getOrFail(deploymentTopology.getInitialTopologyId());
  doUpdateDeploymentTopology(deploymentTopology,topology);
}"
62193,"/** 
 * Compute a list of transitive dependency conflicts from the Context.
 * @param context the EditionContext of the Topology being built.
 * @return a list of dependency conflicts.
 */
private List<DependencyConflictDTO> getDependencyConflictDTOs(EditionContext context){
  final Set<CSARDependency> dependencies=context.getToscaContext().getDependencies();
  Map<CSARDependency,Set<CSARDependency>> dependencyConflictMap=new HashMap<>();
  dependencies.forEach(source -> {
    final Set<CSARDependency> transitives=Optional.ofNullable(ToscaContext.get().getArchive(source.getName(),source.getVersion()).getDependencies()).orElse(Collections.emptySet()).stream().filter((o) -> !dependencies.contains(o)).collect(Collectors.toSet());
    if (!transitives.isEmpty()) {
      dependencyConflictMap.put(source,transitives);
    }
  }
);
  final ArrayList<DependencyConflictDTO> dependencyConflicts=new ArrayList<>();
  dependencyConflictMap.forEach((source,conflicts) -> conflicts.forEach(conflict -> {
    String actualVersion=dependencies.stream().filter(d -> d.getName().equals(conflict.getName())).findFirst().map(CSARDependency::getVersion).orElse(""String_Node_Str"");
    dependencyConflicts.add(new DependencyConflictDTO(source.getName(),conflict.getName() + ""String_Node_Str"" + conflict.getVersion(),actualVersion));
  }
));
  return dependencyConflicts;
}","/** 
 * Compute a list of transitive dependency conflicts from the Context.
 * @param context the EditionContext of the Topology being built.
 * @return a list of dependency conflicts.
 */
private List<DependencyConflictDTO> getDependencyConflictDTOs(EditionContext context){
  final Set<CSARDependency> dependencies=context.getToscaContext().getDependencies();
  Map<CSARDependency,Set<CSARDependency>> dependencyConflictMap=new HashMap<>();
  dependencies.forEach(source -> {
    final Set<CSARDependency> transitives=Optional.ofNullable(ToscaContext.get().getArchive(source.getName(),source.getVersion()).getDependencies()).orElse(Collections.emptySet()).stream().filter(o -> !dependencies.contains(o)).collect(Collectors.toSet());
    if (!transitives.isEmpty()) {
      dependencyConflictMap.put(source,transitives);
    }
  }
);
  final ArrayList<DependencyConflictDTO> dependencyConflicts=new ArrayList<>();
  dependencyConflictMap.forEach((source,conflicts) -> conflicts.forEach(conflict -> {
    String actualVersion=dependencies.stream().filter(d -> d.getName().equals(conflict.getName())).findFirst().map(CSARDependency::getVersion).orElse(""String_Node_Str"");
    dependencyConflicts.add(new DependencyConflictDTO(source.getName(),conflict.getName() + ""String_Node_Str"" + conflict.getVersion(),actualVersion));
  }
));
  return dependencyConflicts;
}"
62194,"/** 
 * Handle group roles on the targeted application
 * @param applicationId
 * @param groupId
 */
private void handleRemoveGrpRoleOnApplication(String applicationId,String groupId){
  Application application=applicationService.getOrFail(applicationId);
  Set<String> applicationRoles=application.getGroupRoles() != null ? application.getGroupRoles().get(groupId) : new HashSet<>();
  List<Set<String>> environmentRoles=Arrays.stream(applicationEnvironmentService.getByApplicationId(applicationId)).map(applicationEnvironment -> (applicationEnvironment.getGroupRoles() != null ? applicationEnvironment.getGroupRoles().get(groupId) : null)).filter(roles -> roles != null).collect(Collectors.toList());
  if (mustRemoveApplicationUserRole(applicationRoles,environmentRoles)) {
    resourceRoleService.removeGroupRole(application,groupId,ApplicationRole.APPLICATION_USER.toString());
  }
}","/** 
 * Handle group roles on the targeted application
 * @param applicationId
 * @param groupId
 */
private void handleRemoveGrpRoleOnApplication(String applicationId,String groupId){
  Application application=applicationService.getOrFail(applicationId);
  Set<String> applicationRoles=application.getGroupRoles() != null ? application.getGroupRoles().get(groupId) : new HashSet<>();
  List<Set<String>> environmentRoles=Arrays.stream(applicationEnvironmentService.getByApplicationId(applicationId)).map(applicationEnvironment -> applicationEnvironment.getGroupRoles() != null ? applicationEnvironment.getGroupRoles().get(groupId) : null).filter(roles -> roles != null).collect(Collectors.toList());
  if (mustRemoveApplicationUserRole(applicationRoles,environmentRoles)) {
    resourceRoleService.removeGroupRole(application,groupId,ApplicationRole.APPLICATION_USER.toString());
  }
}"
62195,"/** 
 * Handle remove roles on the targeted application
 * @param applicationId
 * @param username
 */
private void handleRemoveUserRoleOnApplication(String applicationId,String username){
  Application application=applicationService.getOrFail(applicationId);
  Set<String> applicationRoles=application.getUserRoles() != null ? application.getUserRoles().get(username) : new HashSet<>();
  List<Set<String>> environmentRoles=Arrays.stream(applicationEnvironmentService.getByApplicationId(applicationId)).map(applicationEnvironment -> (applicationEnvironment.getUserRoles() != null ? applicationEnvironment.getUserRoles().get(username) : null)).filter(roles -> roles != null).collect(Collectors.toList());
  if (mustRemoveApplicationUserRole(applicationRoles,environmentRoles)) {
    resourceRoleService.removeUserRole(application,username,ApplicationRole.APPLICATION_USER.toString());
  }
}","/** 
 * Handle remove roles on the targeted application
 * @param applicationId
 * @param username
 */
private void handleRemoveUserRoleOnApplication(String applicationId,String username){
  Application application=applicationService.getOrFail(applicationId);
  Set<String> applicationRoles=application.getUserRoles() != null ? application.getUserRoles().get(username) : new HashSet<>();
  List<Set<String>> environmentRoles=Arrays.stream(applicationEnvironmentService.getByApplicationId(applicationId)).map(applicationEnvironment -> applicationEnvironment.getUserRoles() != null ? applicationEnvironment.getUserRoles().get(username) : null).filter(roles -> roles != null).collect(Collectors.toList());
  if (mustRemoveApplicationUserRole(applicationRoles,environmentRoles)) {
    resourceRoleService.removeUserRole(application,username,ApplicationRole.APPLICATION_USER.toString());
  }
}"
62196,"/** 
 * Refresh the documentation
 */
public void refresh(){
  List plugins=Orderings.pluginOrdering().sortedCopy(this.documentationPluginsManager.documentationPlugins());
  log.info(""String_Node_Str"",Integer.valueOf(plugins.size()));
  Iterator var3=plugins.iterator();
  while (var3.hasNext()) {
    DocumentationPlugin each=(DocumentationPlugin)var3.next();
    DocumentationType documentationType=each.getDocumentationType();
    if (each.isEnabled()) {
      this.scanDocumentation(this.buildContext(each));
    }
 else {
      log.info(""String_Node_Str"",documentationType.getName(),documentationType.getVersion());
    }
  }
}","/** 
 * Refresh the documentation
 */
public void refresh(){
  List plugins=Orderings.pluginOrdering().sortedCopy(this.documentationPluginsManager.documentationPlugins());
  logger.info(""String_Node_Str"",Integer.valueOf(plugins.size()));
  Iterator var3=plugins.iterator();
  while (var3.hasNext()) {
    DocumentationPlugin each=(DocumentationPlugin)var3.next();
    DocumentationType documentationType=each.getDocumentationType();
    if (each.isEnabled()) {
      this.scanDocumentation(this.buildContext(each));
    }
 else {
      logger.info(""String_Node_Str"",documentationType.getName(),documentationType.getVersion());
    }
  }
}"
62197,"private void fillAttributesFromOutputCapabilitiesProperties(Topology topology,NodeType substituteNodeType){
  Map<String,IValue> attributes=substituteNodeType.getAttributes();
  Map<String,Map<String,Set<String>>> outputCapabilityProperties=topology.getOutputCapabilityProperties();
  if (outputCapabilityProperties != null) {
    for (    Map.Entry<String,Map<String,Set<String>>> ocpe : outputCapabilityProperties.entrySet()) {
      String nodeName=ocpe.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      for (      Map.Entry<String,Set<String>> cpe : ocpe.getValue().entrySet()) {
        String capabilityName=cpe.getKey();
        String capabilityTypeName=nodeTemplate.getCapabilities().get(capabilityName).getType();
        CapabilityType capabilityType=ToscaContext.getOrFail(CapabilityType.class,capabilityTypeName);
        for (        String propertyName : cpe.getValue()) {
          PropertyDefinition pd=capabilityType.getProperties().get(propertyName);
          if (pd != null && !attributes.containsKey(propertyName)) {
            attributes.put(propertyName,pd);
          }
        }
      }
    }
  }
}","private void fillAttributesFromOutputCapabilitiesProperties(Topology topology,NodeType substituteNodeType){
  Map<String,Map<String,Set<String>>> outputCapabilityProperties=topology.getOutputCapabilityProperties();
  if (outputCapabilityProperties != null) {
    for (    Map.Entry<String,Map<String,Set<String>>> ocpe : outputCapabilityProperties.entrySet()) {
      String nodeName=ocpe.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      for (      Map.Entry<String,Set<String>> cpe : ocpe.getValue().entrySet()) {
        String capabilityName=cpe.getKey();
        String capabilityTypeName=nodeTemplate.getCapabilities().get(capabilityName).getType();
        CapabilityType capabilityType=ToscaContext.getOrFail(CapabilityType.class,capabilityTypeName);
        for (        String propertyName : cpe.getValue()) {
          PropertyDefinition pd=capabilityType.getProperties().get(propertyName);
          addAttributeFromPropertyDefinition(pd,propertyName,substituteNodeType);
        }
      }
    }
  }
}"
62198,"private void fillSubstituteAttributesFromOutputProperties(Topology topology,NodeType substituteNodeType){
  Map<String,IValue> attributes=substituteNodeType.getAttributes();
  Map<String,Set<String>> outputProperties=topology.getOutputProperties();
  if (outputProperties != null) {
    for (    Map.Entry<String,Set<String>> ope : outputProperties.entrySet()) {
      String nodeName=ope.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      for (      String propertyName : ope.getValue()) {
        PropertyDefinition pd=nodeTemplateType.getProperties().get(propertyName);
        if (pd != null && !attributes.containsKey(propertyName)) {
          if (ToscaType.isSimple(pd.getType())) {
            AttributeDefinition attributeDefinition=new AttributeDefinition();
            attributeDefinition.setType(pd.getType());
            attributeDefinition.setDescription(pd.getDescription());
            if (pd.getDefault() != null && pd.getDefault() instanceof ScalarPropertyValue) {
              attributeDefinition.setDefault(((ScalarPropertyValue)pd.getDefault()).getValue());
            }
            attributes.put(propertyName,attributeDefinition);
          }
        }
      }
    }
  }
}","private void fillSubstituteAttributesFromOutputProperties(Topology topology,NodeType substituteNodeType){
  Map<String,Set<String>> outputProperties=topology.getOutputProperties();
  if (outputProperties != null) {
    for (    Map.Entry<String,Set<String>> ope : outputProperties.entrySet()) {
      String nodeName=ope.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      for (      String propertyName : ope.getValue()) {
        PropertyDefinition pd=nodeTemplateType.getProperties().get(propertyName);
        addAttributeFromPropertyDefinition(pd,propertyName,substituteNodeType);
      }
    }
  }
}"
62199,"private void fillSubstituteAttributesFromOutputProperties(Topology topology,NodeType substituteNodeType){
  Map<String,IValue> attributes=substituteNodeType.getAttributes();
  Map<String,Set<String>> outputProperties=topology.getOutputProperties();
  if (outputProperties != null) {
    for (    Map.Entry<String,Set<String>> ope : outputProperties.entrySet()) {
      String nodeName=ope.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      for (      String propertyName : ope.getValue()) {
        PropertyDefinition pd=nodeTemplateType.getProperties().get(propertyName);
        if (ToscaType.isSimple(pd.getType())) {
          AttributeDefinition attributeDefinition=new AttributeDefinition();
          attributeDefinition.setType(pd.getType());
          attributeDefinition.setDescription(pd.getDescription());
          if (pd.getDefault() != null && pd.getDefault() instanceof ScalarPropertyValue) {
            attributeDefinition.setDefault(((ScalarPropertyValue)pd.getDefault()).getValue());
          }
          if (pd != null && !attributes.containsKey(propertyName)) {
            attributes.put(propertyName,pd);
          }
        }
      }
    }
  }
}","private void fillSubstituteAttributesFromOutputProperties(Topology topology,NodeType substituteNodeType){
  Map<String,IValue> attributes=substituteNodeType.getAttributes();
  Map<String,Set<String>> outputProperties=topology.getOutputProperties();
  if (outputProperties != null) {
    for (    Map.Entry<String,Set<String>> ope : outputProperties.entrySet()) {
      String nodeName=ope.getKey();
      NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeName);
      NodeType nodeTemplateType=ToscaContext.getOrFail(NodeType.class,nodeTemplate.getType());
      for (      String propertyName : ope.getValue()) {
        PropertyDefinition pd=nodeTemplateType.getProperties().get(propertyName);
        if (pd != null && !attributes.containsKey(propertyName)) {
          if (ToscaType.isSimple(pd.getType())) {
            AttributeDefinition attributeDefinition=new AttributeDefinition();
            attributeDefinition.setType(pd.getType());
            attributeDefinition.setDescription(pd.getDescription());
            if (pd.getDefault() != null && pd.getDefault() instanceof ScalarPropertyValue) {
              attributeDefinition.setDefault(((ScalarPropertyValue)pd.getDefault()).getValue());
            }
            attributes.put(propertyName,attributeDefinition);
          }
        }
      }
    }
  }
}"
62200,"/** 
 * Delete all environments related to an application
 * @param applicationId The application id
 * @throws alien4cloud.paas.exception.OrchestratorDisabledException
 */
public void deleteByApplication(String applicationId) throws OrchestratorDisabledException {
  List<String> deployedEnvironments=Lists.newArrayList();
  ApplicationEnvironment[] environments=getByApplicationId(applicationId);
  for (  ApplicationEnvironment environment : environments) {
    if (!this.isDeployed(environment.getId())) {
      delete(environment.getId());
    }
 else {
      deployedEnvironments.add(environment.getId());
    }
  }
  if (deployedEnvironments.size() > 0) {
    log.error(""String_Node_Str"",deployedEnvironments.toString());
  }
}","/** 
 * Delete all environments related to an application
 * @param applicationId The application id
 */
public void deleteByApplication(String applicationId){
  List<String> deployedEnvironments=Lists.newArrayList();
  ApplicationEnvironment[] environments=getByApplicationId(applicationId);
  for (  ApplicationEnvironment environment : environments) {
    if (!this.isDeployed(environment.getId())) {
      delete(environment.getId());
    }
 else {
      deployedEnvironments.add(environment.getId());
    }
  }
  if (!deployedEnvironments.isEmpty()) {
    log.error(""String_Node_Str"",deployedEnvironments.toString());
  }
}"
62201,"/** 
 * Get the environment status regarding the linked topology and cloud
 * @param environment to determine the status
 * @return {@link DeploymentStatus}
 * @throws alien4cloud.paas.exception.OrchestratorDisabledException
 */
public DeploymentStatus getStatus(ApplicationEnvironment environment) throws Exception {
  final Deployment deployment=getActiveDeployment(environment.getId());
  if (deployment == null) {
    return DeploymentStatus.UNDEPLOYED;
  }
  final SettableFuture<DeploymentStatus> statusSettableFuture=SettableFuture.create();
  deploymentRuntimeStateService.getDeploymentStatus(deployment,new IPaaSCallback<DeploymentStatus>(){
    @Override public void onSuccess(    DeploymentStatus data){
      statusSettableFuture.set(data);
    }
    @Override public void onFailure(    Throwable throwable){
      statusSettableFuture.setException(throwable);
    }
  }
);
  DeploymentStatus currentStatus=statusSettableFuture.get();
  if (DeploymentStatus.UNDEPLOYED.equals(currentStatus)) {
    deploymentService.markUndeployed(deployment);
  }
  return currentStatus;
}","/** 
 * Get the environment status regarding the linked topology and cloud
 * @param environment to determine the status
 * @return {@link DeploymentStatus}
 * @throws alien4cloud.paas.exception.OrchestratorDisabledException
 */
public DeploymentStatus getStatus(ApplicationEnvironment environment) throws ExecutionException, InterruptedException {
  final Deployment deployment=getActiveDeployment(environment.getId());
  if (deployment == null) {
    return DeploymentStatus.UNDEPLOYED;
  }
  final SettableFuture<DeploymentStatus> statusSettableFuture=SettableFuture.create();
  deploymentRuntimeStateService.getDeploymentStatus(deployment,new IPaaSCallback<DeploymentStatus>(){
    @Override public void onSuccess(    DeploymentStatus data){
      statusSettableFuture.set(data);
    }
    @Override public void onFailure(    Throwable throwable){
      statusSettableFuture.setException(throwable);
    }
  }
);
  DeploymentStatus currentStatus=statusSettableFuture.get();
  if (DeploymentStatus.UNDEPLOYED.equals(currentStatus)) {
    deploymentService.markUndeployed(deployment);
  }
  return currentStatus;
}"
62202,"/** 
 * Delete an existing application from it's id. This method ensures first that there is no running deployment of the application.
 * @param applicationId The id of the application to remove.
 * @return True if the application has been removed, false if not.
 * @throws alien4cloud.paas.exception.OrchestratorDisabledException
 */
public boolean delete(String applicationId) throws OrchestratorDisabledException {
  if (alienDAO.count(Deployment.class,null,fromKeyValueCouples(""String_Node_Str"",applicationId,""String_Node_Str"",null)) > 0) {
    return false;
  }
  applicationVersionService.deleteByApplication(applicationId);
  applicationEnvironmentService.deleteByApplication(applicationId);
  publisher.publishEvent(new BeforeApplicationDeletedEvent(this,applicationId));
  alienDAO.delete(Application.class,applicationId);
  return true;
}","/** 
 * Delete an existing application from it's id. This method ensures first that there is no running deployment of the application.
 * @param applicationId The id of the application to remove.
 * @return True if the application has been removed, false if not.
 */
public boolean delete(String applicationId){
  if (alienDAO.count(Deployment.class,null,fromKeyValueCouples(""String_Node_Str"",applicationId,""String_Node_Str"",null)) > 0) {
    return false;
  }
  applicationVersionService.deleteByApplication(applicationId);
  applicationEnvironmentService.deleteByApplication(applicationId);
  publisher.publishEvent(new BeforeApplicationDeletedEvent(this,applicationId));
  alienDAO.delete(Application.class,applicationId);
  return true;
}"
62203,"private List<CsarDependenciesBean> sort(Map<CSARDependency,CsarDependenciesBean> elements){
  List<CsarDependenciesBean> sortedCsars=Lists.newArrayList();
  List<CsarDependenciesBean> independents=Lists.newArrayList();
  for (  Map.Entry<CSARDependency,CsarDependenciesBean> entry : elements.entrySet()) {
    CsarDependenciesBean csar=entry.getValue();
    if (csar.getDependencies() == null) {
      independents.add(csar);
    }
 else {
      List<CSARDependency> toClears=Lists.newArrayList();
      for (      CSARDependency dependent : csar.getDependencies()) {
        CsarDependenciesBean providedDependency=elements.get(dependent);
        if (providedDependency == null) {
          toClears.add(dependent);
        }
 else {
          providedDependency.getDependents().add(entry.getValue());
        }
      }
      for (      CSARDependency toClear : toClears) {
        csar.getDependencies().remove(toClear);
      }
      if (csar.getDependencies().isEmpty()) {
        independents.add(csar);
      }
    }
  }
  while (independents.size() > 0) {
    CsarDependenciesBean independent=independents.remove(0);
    elements.remove(independent.getSelf());
    sortedCsars.add(independent);
    for (    CsarDependenciesBean dependent : independent.getDependents()) {
      dependent.getDependencies().remove(independent.getSelf());
      if (dependent.getDependencies().isEmpty()) {
        independents.add(dependent);
      }
    }
  }
  if (elements.size() > 0) {
  }
  return sortedCsars;
}","private List<CsarDependenciesBean> sort(Map<CSARDependency,CsarDependenciesBean> elements){
  List<CsarDependenciesBean> sortedCsars=Lists.newArrayList();
  List<CsarDependenciesBean> independents=Lists.newArrayList();
  for (  Map.Entry<CSARDependency,CsarDependenciesBean> entry : elements.entrySet()) {
    CsarDependenciesBean csar=entry.getValue();
    if (csar.getDependencies() == null) {
      independents.add(csar);
    }
 else {
      List<CSARDependency> toClears=Lists.newArrayList();
      for (      CSARDependency dependent : csar.getDependencies()) {
        CsarDependenciesBean providedDependency=elements.get(dependent);
        if (providedDependency == null) {
          toClears.add(dependent);
        }
 else {
          providedDependency.getDependents().add(entry.getValue());
        }
      }
      for (      CSARDependency toClear : toClears) {
        csar.getDependencies().remove(toClear);
      }
      if (csar.getDependencies().isEmpty()) {
        independents.add(csar);
      }
    }
  }
  while (!independents.isEmpty()) {
    CsarDependenciesBean independent=independents.remove(0);
    elements.remove(independent.getSelf());
    sortedCsars.add(independent);
    for (    CsarDependenciesBean dependent : independent.getDependents()) {
      dependent.getDependencies().remove(independent.getSelf());
      if (dependent.getDependencies().isEmpty()) {
        independents.add(dependent);
      }
    }
  }
  if (elements.size() > 0) {
  }
  return sortedCsars;
}"
62204,"private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot,csarGitCheckoutLocation.getSubPath());
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths,parsingResult);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.get(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath(),CSARSource.GIT,AlienConstants.GLOBAL_WORKSPACE_ID);
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  AlreadyExistException e) {
    return parsingResult;
  }
catch (  CSARUsedInActiveDeployment e) {
    return parsingResult;
  }
catch (  ToscaTypeAlreadyDefinedInOtherCSAR e) {
    return parsingResult;
  }
}","private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot,csarGitCheckoutLocation.getSubPath());
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths,parsingResult);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash) && csarService.get(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
        continue;
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath(),CSARSource.GIT,AlienConstants.GLOBAL_WORKSPACE_ID);
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  AlreadyExistException|ToscaTypeAlreadyDefinedInOtherCSAR|CSARUsedInActiveDeployment e) {
    return parsingResult;
  }
}"
62205,"public void updateCapabilityProperty(String environmentId,String nodeTemplateId,String capabilityName,String propertyName,Object propertyValue) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  DeploymentConfiguration deploymentConfiguration=getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  try {
    ToscaContext.init(deploymentTopology.getDependencies());
    NodeTemplate substitutedNode=deploymentTopology.getNodeTemplates().get(nodeTemplateId);
    if (substitutedNode == null) {
      throw new NotFoundException(""String_Node_Str"" + deploymentTopology.getId() + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
    }
    String substitutionId=deploymentTopology.getSubstitutedNodes().get(nodeTemplateId);
    if (substitutionId == null) {
      throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str""+ deploymentTopology.getId()+ ""String_Node_Str"");
    }
    LocationResourceTemplate locationResourceTemplate=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionsTemplates().get(substitutionId);
    Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
    if (locationResourceCapability == null) {
      throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
    }
    CapabilityType capabilityType=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionTypes().getCapabilityTypes().get(locationResourceCapability.getType());
    PropertyDefinition propertyDefinition=capabilityType.getProperties().get(propertyName);
    if (propertyDefinition == null) {
      throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
    }
    AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
    buildConstaintException(locationResourcePropertyValue,propertyDefinition,""String_Node_Str"",propertyName,propertyValue);
    AbstractPropertyValue originalNodePropertyValue=deploymentTopology.getOriginalNodes().get(nodeTemplateId).getCapabilities().get(capabilityName).getProperties().get(propertyName);
    buildConstaintException(originalNodePropertyValue,propertyDefinition,""String_Node_Str"",propertyName,propertyValue);
    propertyService.setCapabilityPropertyValue(substitutedNode.getCapabilities().get(capabilityName),propertyDefinition,propertyName,propertyValue);
    alienDAO.save(deploymentTopology);
  }
  finally {
    ToscaContext.destroy();
  }
}","public void updateCapabilityProperty(String environmentId,String nodeTemplateId,String capabilityName,String propertyName,Object propertyValue) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  DeploymentConfiguration deploymentConfiguration=getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  try {
    ToscaContext.init(deploymentTopology.getDependencies());
    NodeTemplate substitutedNode=deploymentTopology.getNodeTemplates().get(nodeTemplateId);
    if (substitutedNode == null) {
      throw new NotFoundException(""String_Node_Str"" + deploymentTopology.getId() + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
    }
    String substitutionId=deploymentTopology.getSubstitutedNodes().get(nodeTemplateId);
    if (substitutionId == null) {
      throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str""+ deploymentTopology.getId()+ ""String_Node_Str"");
    }
    LocationResourceTemplate locationResourceTemplate=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionsTemplates().get(substitutionId);
    Capability locationResourceCapability=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName);
    if (locationResourceCapability == null) {
      throw new NotFoundException(""String_Node_Str"" + capabilityName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
    }
    CapabilityType capabilityType=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionTypes().getCapabilityTypes().get(locationResourceCapability.getType());
    PropertyDefinition propertyDefinition=capabilityType.getProperties().get(propertyName);
    if (propertyDefinition == null) {
      throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ capabilityName+ ""String_Node_Str""+ locationResourceCapability.getType()+ ""String_Node_Str"");
    }
    AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getCapabilities().get(capabilityName).getProperties().get(propertyName);
    buildConstaintException(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
    AbstractPropertyValue originalNodePropertyValue=deploymentTopology.getOriginalNodes().get(nodeTemplateId).getCapabilities().get(capabilityName).getProperties().get(propertyName);
    buildConstaintException(originalNodePropertyValue,""String_Node_Str"",propertyName,propertyValue);
    propertyService.setCapabilityPropertyValue(substitutedNode.getCapabilities().get(capabilityName),propertyDefinition,propertyName,propertyValue);
    alienDAO.save(deploymentTopology);
  }
  finally {
    ToscaContext.destroy();
  }
}"
62206,"/** 
 * Check that the property is not already defined in a source
 * @param sourcePropertyValue null or an already defined Property Value.
 * @param messageSource The named source to add in the exception message in case of failure.
 */
private void buildConstaintException(AbstractPropertyValue sourcePropertyValue,PropertyDefinition propertyDefinition,String messageSource,String propertyName,Object propertyValue) throws ConstraintViolationException {
  if (sourcePropertyValue != null) {
    try {
      EqualConstraint constraint=new EqualConstraint();
      if (sourcePropertyValue instanceof ScalarPropertyValue) {
        constraint.setEqual(((ScalarPropertyValue)sourcePropertyValue).getValue());
      }
      ConstraintUtil.ConstraintInformation information=ConstraintUtil.getConstraintInformation(constraint);
      throw new ConstraintViolationException(""String_Node_Str"" + messageSource + ""String_Node_Str"",null,information);
    }
 catch (    IntrospectionException e) {
      log.info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue+ ""String_Node_Str"",e);
      throw new ConstraintTechnicalException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue+ ""String_Node_Str"",e);
    }
  }
}","/** 
 * Check that the property is not already defined in a source
 * @param sourcePropertyValue null or an already defined Property Value.
 * @param messageSource The named source to add in the exception message in case of failure.
 */
private void buildConstaintException(AbstractPropertyValue sourcePropertyValue,String messageSource,String propertyName,Object propertyValue) throws ConstraintViolationException {
  if (sourcePropertyValue != null) {
    try {
      EqualConstraint constraint=new EqualConstraint();
      if (sourcePropertyValue instanceof ScalarPropertyValue) {
        constraint.setEqual(((ScalarPropertyValue)sourcePropertyValue).getValue());
      }
      ConstraintUtil.ConstraintInformation information=ConstraintUtil.getConstraintInformation(constraint);
      throw new ConstraintViolationException(""String_Node_Str"" + messageSource + ""String_Node_Str"",null,information);
    }
 catch (    IntrospectionException e) {
      log.info(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue+ ""String_Node_Str"",e);
      throw new ConstraintTechnicalException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue+ ""String_Node_Str"",e);
    }
  }
}"
62207,"/** 
 * Deployment configuration has been changed, in this case must re-synchronize the deployment topology
 * @param deploymentTopology the deployment topology to update
 */
public void updateDeploymentTopology(DeploymentTopology deploymentTopology){
  ApplicationEnvironment environment=appEnvironmentServices.getOrFail(deploymentTopology.getEnvironmentId());
  Topology topology=topologyServiceCore.getOrFail(deploymentTopology.getInitialTopologyId());
  doUpdateDeploymentTopology(deploymentTopology,topology,environment);
}","/** 
 * Deployment configuration has been changed, in this case must re-synchronize the deployment topology
 * @param deploymentTopology the deployment topology to update
 */
public void updateDeploymentTopology(DeploymentTopology deploymentTopology){
  ApplicationEnvironment environment=appEnvironmentServices.getOrFail(deploymentTopology.getEnvironmentId());
  Topology topology=topologyServiceCore.getOrFail(deploymentTopology.getInitialTopologyId());
  doUpdateDeploymentTopology(deploymentTopology,topology);
}"
62208,"private DeploymentTopology generateDeploymentTopology(String id,ApplicationEnvironment environment,Topology topology,DeploymentTopology deploymentTopology){
  deploymentTopology.setVersionId(environment.getCurrentVersionId());
  deploymentTopology.setEnvironmentId(environment.getId());
  deploymentTopology.setInitialTopologyId(topology.getId());
  deploymentTopology.setId(id);
  doUpdateDeploymentTopology(deploymentTopology,topology,environment);
  return deploymentTopology;
}","private DeploymentTopology generateDeploymentTopology(String id,ApplicationEnvironment environment,Topology topology,DeploymentTopology deploymentTopology){
  deploymentTopology.setVersionId(environment.getCurrentVersionId());
  deploymentTopology.setEnvironmentId(environment.getId());
  deploymentTopology.setInitialTopologyId(topology.getId());
  deploymentTopology.setId(id);
  doUpdateDeploymentTopology(deploymentTopology,topology);
  return deploymentTopology;
}"
62209,"/** 
 * Update the value of a property.
 * @param environmentId The id of the environment for which to update the deployment topology.
 * @param nodeTemplateId The id of the node template to update (this must be a substituted node).
 * @param propertyName The name of the property for which to update the value.
 * @param propertyValue The new value of the property.
 */
public void updateProperty(String environmentId,String nodeTemplateId,String propertyName,Object propertyValue) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  DeploymentConfiguration deploymentConfiguration=getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  try {
    ToscaContext.init(deploymentTopology.getDependencies());
    NodeTemplate substitutedNode=deploymentTopology.getNodeTemplates().get(nodeTemplateId);
    if (substitutedNode == null) {
      throw new NotFoundException(""String_Node_Str"" + deploymentTopology.getId() + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
    }
    String substitutionId=deploymentTopology.getSubstitutedNodes().get(nodeTemplateId);
    if (substitutionId == null) {
      throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str""+ deploymentTopology.getId()+ ""String_Node_Str"");
    }
    LocationResourceTemplate locationResourceTemplate=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionsTemplates().get(substitutionId);
    PropertyDefinition propertyDefinition=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionTypes().getNodeTypes().get(locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
    if (propertyDefinition == null) {
      throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
    }
    AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
    buildConstaintException(locationResourcePropertyValue,propertyDefinition,""String_Node_Str"",propertyName,propertyValue);
    NodeTemplate originalNode=deploymentTopology.getOriginalNodes().get(nodeTemplateId);
    buildConstaintException(originalNode.getProperties().get(propertyName),propertyDefinition,""String_Node_Str"",propertyName,propertyValue);
    propertyService.setPropertyValue(substitutedNode,propertyDefinition,propertyName,propertyValue);
    alienDAO.save(deploymentTopology);
  }
  finally {
    ToscaContext.destroy();
  }
}","/** 
 * Update the value of a property.
 * @param environmentId The id of the environment for which to update the deployment topology.
 * @param nodeTemplateId The id of the node template to update (this must be a substituted node).
 * @param propertyName The name of the property for which to update the value.
 * @param propertyValue The new value of the property.
 */
public void updateProperty(String environmentId,String nodeTemplateId,String propertyName,Object propertyValue) throws ConstraintViolationException, ConstraintValueDoNotMatchPropertyTypeException {
  DeploymentConfiguration deploymentConfiguration=getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  try {
    ToscaContext.init(deploymentTopology.getDependencies());
    NodeTemplate substitutedNode=deploymentTopology.getNodeTemplates().get(nodeTemplateId);
    if (substitutedNode == null) {
      throw new NotFoundException(""String_Node_Str"" + deploymentTopology.getId() + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str"");
    }
    String substitutionId=deploymentTopology.getSubstitutedNodes().get(nodeTemplateId);
    if (substitutionId == null) {
      throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str""+ deploymentTopology.getId()+ ""String_Node_Str"");
    }
    LocationResourceTemplate locationResourceTemplate=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionsTemplates().get(substitutionId);
    PropertyDefinition propertyDefinition=deploymentConfiguration.getAvailableSubstitutions().getSubstitutionTypes().getNodeTypes().get(locationResourceTemplate.getTemplate().getType()).getProperties().get(propertyName);
    if (propertyDefinition == null) {
      throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateId+ ""String_Node_Str""+ locationResourceTemplate.getTemplate().getType()+ ""String_Node_Str"");
    }
    AbstractPropertyValue locationResourcePropertyValue=locationResourceTemplate.getTemplate().getProperties().get(propertyName);
    buildConstaintException(locationResourcePropertyValue,""String_Node_Str"",propertyName,propertyValue);
    NodeTemplate originalNode=deploymentTopology.getOriginalNodes().get(nodeTemplateId);
    buildConstaintException(originalNode.getProperties().get(propertyName),""String_Node_Str"",propertyName,propertyValue);
    propertyService.setPropertyValue(substitutedNode,propertyDefinition,propertyName,propertyValue);
    alienDAO.save(deploymentTopology);
  }
  finally {
    ToscaContext.destroy();
  }
}"
62210,"private void doUpdateDeploymentTopology(DeploymentTopology deploymentTopology,Topology topology,ApplicationEnvironment environment){
  Map<String,NodeTemplate> previousNodeTemplates=deploymentTopology.getNodeTemplates();
  ReflectionUtil.mergeObject(topology,deploymentTopology,""String_Node_Str"");
  topologyCompositionService.processTopologyComposition(deploymentTopology);
  deploymentInputService.processInputProperties(deploymentTopology);
  deploymentInputService.processProviderDeploymentProperties(deploymentTopology);
  deploymentNodeSubstitutionService.processNodesSubstitution(deploymentTopology,previousNodeTemplates);
  save(deploymentTopology);
}","private void doUpdateDeploymentTopology(DeploymentTopology deploymentTopology,Topology topology){
  Map<String,NodeTemplate> previousNodeTemplates=deploymentTopology.getNodeTemplates();
  ReflectionUtil.mergeObject(topology,deploymentTopology,""String_Node_Str"");
  topologyCompositionService.processTopologyComposition(deploymentTopology);
  deploymentInputService.processInputProperties(deploymentTopology);
  deploymentInputService.processProviderDeploymentProperties(deploymentTopology);
  deploymentNodeSubstitutionService.processNodesSubstitution(deploymentTopology,previousNodeTemplates);
  save(deploymentTopology);
}"
62211,"private Map<String,AbstractPropertyValue> getInitialCapabilityProperties(String capabilityName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getCapabilities() != null && nodeTemplate.getCapabilities().get(capabilityName) != null) {
    if (nodeTemplate.getCapabilities().get(capabilityName).getProperties() != null) {
      properties=nodeTemplate.getCapabilities().get(capabilityName).getProperties();
    }
  }
  return properties;
}","private Map<String,AbstractPropertyValue> getInitialCapabilityProperties(String capabilityName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getCapabilities() != null && nodeTemplate.getCapabilities().get(capabilityName) != null && nodeTemplate.getCapabilities().get(capabilityName).getProperties() != null) {
    properties=nodeTemplate.getCapabilities().get(capabilityName).getProperties();
  }
  return properties;
}"
62212,"private Map<String,AbstractPropertyValue> getInitialRequirementProperties(String requirementName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getRequirements() != null && nodeTemplate.getRequirements().get(requirementName) != null) {
    if (nodeTemplate.getRequirements().get(requirementName).getProperties() != null) {
      properties=nodeTemplate.getRequirements().get(requirementName).getProperties();
    }
  }
  return properties;
}","private Map<String,AbstractPropertyValue> getInitialRequirementProperties(String requirementName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getRequirements() != null && nodeTemplate.getRequirements().get(requirementName) != null && nodeTemplate.getRequirements().get(requirementName).getProperties() != null) {
    properties=nodeTemplate.getRequirements().get(requirementName).getProperties();
  }
  return properties;
}"
62213,"private Map<String,AbstractPropertyValue> getInitialRelationshipProperties(String relationShipName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getRelationships() != null && nodeTemplate.getRelationships().get(relationShipName) != null) {
    if (nodeTemplate.getRelationships().get(relationShipName).getProperties() != null) {
      properties=nodeTemplate.getRelationships().get(relationShipName).getProperties();
    }
  }
  return properties;
}","private Map<String,AbstractPropertyValue> getInitialRelationshipProperties(String relationShipName,NodeTemplate nodeTemplate){
  Map<String,AbstractPropertyValue> properties=Maps.newHashMap();
  if (nodeTemplate.getRelationships() != null && nodeTemplate.getRelationships().get(relationShipName) != null && nodeTemplate.getRelationships().get(relationShipName).getProperties() != null) {
    properties=nodeTemplate.getRelationships().get(relationShipName).getProperties();
  }
  return properties;
}"
62214,"/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param candidateType The type of the candidate node.
 * @param candidate The candidate location resource.
 * @return True if the candidate type matches the node template type, false if not.
 */
private boolean isCandidateTypeValid(NodeTemplate nodeTemplate,LocationResourceTemplate candidate,NodeType candidateType){
  return candidateType.getElementId().equals(nodeTemplate.getType()) || (candidateType.getDerivedFrom() != null && candidateType.getDerivedFrom().contains(nodeTemplate.getType()));
}","/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param candidateType The type of the candidate node.
 * @return True if the candidate type matches the node template type, false if not.
 */
private boolean isCandidateTypeValid(NodeTemplate nodeTemplate,NodeType candidateType){
  return candidateType.getElementId().equals(nodeTemplate.getType()) || (candidateType.getDerivedFrom() != null && candidateType.getDerivedFrom().contains(nodeTemplate.getType()));
}"
62215,"private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,NodeType candidateType,Map<String,CapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  if (matchingConfiguration.getCapabilities() == null) {
    return true;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    FilterDefinition filterDefinition=new FilterDefinition();
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    CapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (templateCapability != null && !isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}","private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,NodeType candidateType,Map<String,CapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  if (matchingConfiguration.getCapabilities() == null) {
    return true;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    CapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (templateCapability != null && !isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}"
62216,"/** 
 * Match a node against the on demand resources provided by a location.
 * @param nodeTemplate The node template to match.
 * @param nodeType The node type that defines the type of the node template to match.
 * @param locationResources The resources configured for the location against which we are matching the nodes.
 */
private List<LocationResourceTemplate> matchedOnDemands(NodeTemplate nodeTemplate,NodeType nodeType,LocationResources locationResources,Map<String,MatchingConfiguration> matchingConfigurations){
  List<LocationResourceTemplate> matchingResults=Lists.newArrayList();
  List<LocationResourceTemplate> candidates=locationResources.getNodeTemplates();
  for (  LocationResourceTemplate candidate : candidates) {
    String candidateTypeName=candidate.getTemplate().getType();
    NodeType candidateType=locationResources.getNodeTypes().get(candidateTypeName);
    if (isValidCandidate(nodeTemplate,nodeType,candidate,candidateType,locationResources.getCapabilityTypes(),matchingConfigurations)) {
      matchingResults.add(candidate);
    }
  }
  return matchingResults;
}","/** 
 * Match a node against the on demand resources provided by a location.
 * @param nodeTemplate The node template to match.
 * @param nodeType The node type that defines the type of the node template to match.
 * @param locationResources The resources configured for the location against which we are matching the nodes.
 */
private List<LocationResourceTemplate> matchedOnDemands(NodeTemplate nodeTemplate,NodeType nodeType,LocationResources locationResources,Map<String,MatchingConfiguration> matchingConfigurations){
  List<LocationResourceTemplate> matchingResults=Lists.newArrayList();
  List<LocationResourceTemplate> candidates=locationResources.getNodeTemplates();
  for (  LocationResourceTemplate candidate : candidates) {
    String candidateTypeName=candidate.getTemplate().getType();
    NodeType candidateType=locationResources.getNodeTypes().get(candidateTypeName);
    if (isValidCandidate(nodeTemplate,candidate,candidateType,locationResources.getCapabilityTypes(),matchingConfigurations)) {
      matchingResults.add(candidate);
    }
  }
  return matchingResults;
}"
62217,"/** 
 * Add filters from the matching configuration to the node filter that will be applied for matching only if a value is specified on the configuration template.
 * @param nodeTemplateValues The properties values from the node template to match.
 * @param sourceFilters The filtering map (based on constraints) from matching configuration.
 * @param propertyValues The values defined on the Location Template.
 * @param propertyDefinitions The properties definitions associated with the node.
 */
private boolean isTemplatePropertiesMatchCandidateFilter(Map<String,AbstractPropertyValue> nodeTemplateValues,Map<String,List<IMatchPropertyConstraint>> sourceFilters,Map<String,AbstractPropertyValue> propertyValues,Map<String,PropertyDefinition> propertyDefinitions){
  for (  Map.Entry<String,List<IMatchPropertyConstraint>> filterEntry : sourceFilters.entrySet()) {
    AbstractPropertyValue candidatePropertyValue=propertyValues.get(filterEntry.getKey());
    AbstractPropertyValue templatePropertyValue=nodeTemplateValues.get(filterEntry.getKey());
    if (candidatePropertyValue != null && candidatePropertyValue instanceof ScalarPropertyValue && templatePropertyValue != null && templatePropertyValue instanceof ScalarPropertyValue) {
      try {
        IPropertyType<?> toscaType=ToscaType.fromYamlTypeName(propertyDefinitions.get(filterEntry.getKey()).getType());
        for (        IMatchPropertyConstraint constraint : filterEntry.getValue()) {
          constraint.setConstraintValue(toscaType,((ScalarPropertyValue)candidatePropertyValue).getValue());
          try {
            constraint.validate(toscaType,((ScalarPropertyValue)templatePropertyValue).getValue());
          }
 catch (          ConstraintViolationException e) {
            return false;
          }
        }
      }
 catch (      ConstraintValueDoNotMatchPropertyTypeException e) {
        log.debug(""String_Node_Str"",e);
      }
    }
  }
  return true;
}","/** 
 * Add filters ent/ICSARRepositorySearchService.java from the matching configuration to the node filter that will be applied for matching only if a value is specified on the configuration template.
 * @param nodeTemplateValues The properties values from the node template to match.
 * @param sourceFilters The filtering map (based on constraints) from matching configuration.
 * @param propertyValues The values defined on the Location Template.
 * @param propertyDefinitions The properties definitions associated with the node.
 */
private boolean isTemplatePropertiesMatchCandidateFilter(Map<String,AbstractPropertyValue> nodeTemplateValues,Map<String,List<IMatchPropertyConstraint>> sourceFilters,Map<String,AbstractPropertyValue> propertyValues,Map<String,PropertyDefinition> propertyDefinitions){
  for (  Map.Entry<String,List<IMatchPropertyConstraint>> filterEntry : sourceFilters.entrySet()) {
    AbstractPropertyValue candidatePropertyValue=propertyValues.get(filterEntry.getKey());
    AbstractPropertyValue templatePropertyValue=nodeTemplateValues.get(filterEntry.getKey());
    if (candidatePropertyValue != null && candidatePropertyValue instanceof ScalarPropertyValue && templatePropertyValue != null && templatePropertyValue instanceof ScalarPropertyValue) {
      try {
        IPropertyType<?> toscaType=ToscaType.fromYamlTypeName(propertyDefinitions.get(filterEntry.getKey()).getType());
        for (        IMatchPropertyConstraint constraint : filterEntry.getValue()) {
          constraint.setConstraintValue(toscaType,((ScalarPropertyValue)candidatePropertyValue).getValue());
          try {
            constraint.validate(toscaType,((ScalarPropertyValue)templatePropertyValue).getValue());
          }
 catch (          ConstraintViolationException e) {
            return false;
          }
        }
      }
 catch (      ConstraintValueDoNotMatchPropertyTypeException e) {
        log.debug(""String_Node_Str"",e);
      }
    }
  }
  return true;
}"
62218,"/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param nodeType The type of the node template to match.
 * @param candidateType The type of the candidate node.
 * @param candidate The candidate location resource.
 * @param capabilityTypes Map of capability types that may be used by the candidateType.
 * @return True if the candidate is a valid match for the node template.
 */
private boolean isValidCandidate(NodeTemplate nodeTemplate,NodeType nodeType,LocationResourceTemplate candidate,NodeType candidateType,Map<String,CapabilityType> capabilityTypes,Map<String,MatchingConfiguration> matchingConfigurations){
  if (!isCandidateTypeValid(nodeTemplate,candidate,candidateType)) {
    return false;
  }
  if (matchingConfigurations == null) {
    return false;
  }
  MatchingConfiguration matchingConfiguration=matchingConfigurations.get(candidateType.getElementId());
  if (matchingConfiguration == null) {
    return true;
  }
  return isTemplatePropertiesMatchCandidateFilters(nodeTemplate,matchingConfiguration,candidate,candidateType,capabilityTypes);
}","/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param candidateType The type of the candidate node.
 * @param candidate The candidate location resource.
 * @param capabilityTypes Map of capability types that may be used by the candidateType.
 * @return True if the candidate is a valid match for the node template.
 */
private boolean isValidCandidate(NodeTemplate nodeTemplate,LocationResourceTemplate candidate,NodeType candidateType,Map<String,CapabilityType> capabilityTypes,Map<String,MatchingConfiguration> matchingConfigurations){
  if (!isCandidateTypeValid(nodeTemplate,candidateType)) {
    return false;
  }
  if (matchingConfigurations == null) {
    return false;
  }
  MatchingConfiguration matchingConfiguration=matchingConfigurations.get(candidateType.getElementId());
  if (matchingConfiguration == null) {
    return true;
  }
  return isTemplatePropertiesMatchCandidateFilters(nodeTemplate,matchingConfiguration,candidate,candidateType,capabilityTypes);
}"
62219,"@Override public long getFileLength(String id){
  File f=resolveFile(id).toFile();
  try {
  }
  finally {
  }
  return resolveFile(id).toFile().length();
}","@Override public long getFileLength(String id){
  return resolveFile(id).toFile().length();
}"
62220,"@SneakyThrows private boolean isToscaFile(Path path){
  if (isYamlFile(path.getFileName())) {
    if (readFirstLine(path).startsWith(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","@SneakyThrows private boolean isToscaFile(Path path){
  if (isYamlFile(path.getFileName()) && readFirstLine(path).startsWith(""String_Node_Str"")) {
    return true;
  }
  return false;
}"
62221,"/** 
 * Update the deployment topology's input and save it. This should always be called when the deployment setup has changed
 * @param deploymentTopology the the deployment topology
 */
public void updateDeploymentTopologyInputsAndSave(DeploymentTopology deploymentTopology){
  ApplicationEnvironment environment=appEnvironmentServices.getOrFail(deploymentTopology.getEnvironmentId());
  Topology topology=topologyServiceCore.getOrFail(deploymentTopology.getInitialTopologyId());
  deploymentInputService.processInputProperties(deploymentTopology);
  deploymentInputService.processProviderDeploymentProperties(deploymentTopology);
  save(deploymentTopology);
}","/** 
 * Update the deployment topology's input and save it. This should always be called when the deployment setup has changed
 * @param deploymentTopology the the deployment topology
 */
public void updateDeploymentTopologyInputsAndSave(DeploymentTopology deploymentTopology){
  deploymentInputService.processInputProperties(deploymentTopology);
  deploymentInputService.processProviderDeploymentProperties(deploymentTopology);
  save(deploymentTopology);
}"
62222,"private boolean mustRemoveApplicationUserRole(Set<String> applicationRoles,List<Set<String>> allEnvironmentRoles){
  if (applicationRoles == null || applicationRoles.isEmpty()) {
    return false;
  }
  int appUserCount=applicationRoles.contains(ApplicationRole.APPLICATION_USER.toString()) ? 1 : 0;
  if (applicationRoles.size() > appUserCount) {
    return false;
  }
  for (  Set<String> environmentRoles : allEnvironmentRoles) {
    if (environmentRoles != null && environmentRoles.size() > 0) {
      return false;
    }
  }
  return true;
}","private boolean mustRemoveApplicationUserRole(Set<String> applicationRoles,List<Set<String>> allEnvironmentRoles){
  if (applicationRoles == null || applicationRoles.isEmpty()) {
    return false;
  }
  int appUserCount=applicationRoles.contains(ApplicationRole.APPLICATION_USER.toString()) ? 1 : 0;
  if (applicationRoles.size() > appUserCount) {
    return false;
  }
  for (  Set<String> environmentRoles : allEnvironmentRoles) {
    if (environmentRoles != null && !environmentRoles.isEmpty()) {
      return false;
    }
  }
  return true;
}"
62223,"@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  RelationshipType indexedRelationshipType=toscaTypeFinder.findElement(RelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeOrSubstitutionNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    NodeActivityStep deletedSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.DELETED);
    AbstractStep targetStep=null;
    if (targetIsNative) {
      targetStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      targetStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STOPPING);
    }
    WorkflowUtils.linkSteps(deletedSourceStep,targetStep);
  }
 else   if (WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.CONNECTS_TO)) {
    String volumeId=nodeId;
    NodeActivityStep targetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STOPPING);
    NodeActivityStep sourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.STOPPED);
    WorkflowUtils.linkSteps(sourceStep,targetStep);
  }
}","@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  RelationshipType indexedRelationshipType=toscaTypeFinder.findElement(RelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeOrSubstitutionNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    NodeActivityStep deletedSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.DELETED);
    AbstractStep targetStep=null;
    if (targetIsNative) {
      targetStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      targetStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STOPPING);
    }
    WorkflowUtils.linkSteps(deletedSourceStep,targetStep);
  }
 else   if (WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.CONNECTS_TO)) {
    NodeActivityStep targetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STOPPING);
    NodeActivityStep sourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.STOPPED);
    WorkflowUtils.linkSteps(sourceStep,targetStep);
  }
}"
62224,"@Override public CSARDependency parse(Node node,ParsingContextExecution context){
  String valueAsString=scalarParser.parse(node,context);
  if (valueAsString == null || valueAsString.trim().isEmpty()) {
    return null;
  }
  if (valueAsString.contains(""String_Node_Str"")) {
    String[] dependencyStrs=valueAsString.split(""String_Node_Str"");
    if (dependencyStrs.length == 2) {
      String dependencyName=dependencyStrs[0];
      String dependencyVersion=dependencyStrs[1];
      String currentArchiveVersion=context.<ArchiveRoot>getRootObj().getArchive().getVersion();
      CSARDependency dependency=new CSARDependency(dependencyName,dependencyVersion);
      Csar csar=ToscaContext.get().getArchive(dependency.getName(),dependency.getVersion());
      log.debug(""String_Node_Str"",dependency.getName(),dependency.getVersion(),csar);
      if (csar == null) {
        context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.MISSING_DEPENDENCY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),valueAsString));
      }
 else {
        if (!VersionUtil.isSnapshot(currentArchiveVersion) && VersionUtil.isSnapshot(dependencyVersion)) {
          context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.ERROR,ErrorCode.SNAPSHOT_DEPENDENCY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),valueAsString));
        }
        dependency.setHash(csar.getHash());
        ToscaContext.get().addDependency(dependency);
      }
      return dependency;
    }
    context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.SYNTAX_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
  }
 else {
    throw new NotSupportedException(""String_Node_Str"");
  }
  return null;
}","@Override public CSARDependency parse(Node node,ParsingContextExecution context){
  String valueAsString=scalarParser.parse(node,context);
  if (valueAsString == null || valueAsString.trim().isEmpty()) {
    return null;
  }
  if (valueAsString.contains(""String_Node_Str"")) {
    String[] dependencyStrs=valueAsString.split(""String_Node_Str"");
    if (dependencyStrs.length == 2) {
      String dependencyName=dependencyStrs[0];
      String dependencyVersion=dependencyStrs[1];
      String currentArchiveVersion=context.<ArchiveRoot>getRootObj().getArchive().getVersion();
      CSARDependency dependency=new CSARDependency(dependencyName,dependencyVersion);
      Csar csar=ToscaContext.get().getArchive(dependency.getName(),dependency.getVersion());
      log.debug(""String_Node_Str"",dependency.getName(),dependency.getVersion(),csar);
      if (csar == null) {
        context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.MISSING_DEPENDENCY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),valueAsString));
        return null;
      }
 else {
        if (!VersionUtil.isSnapshot(currentArchiveVersion) && VersionUtil.isSnapshot(dependencyVersion)) {
          context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.ERROR,ErrorCode.SNAPSHOT_DEPENDENCY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),valueAsString));
        }
        dependency.setHash(csar.getHash());
        ToscaContext.get().addDependency(dependency);
        return dependency;
      }
    }
    context.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.SYNTAX_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
  }
 else {
    throw new NotSupportedException(""String_Node_Str"");
  }
  return null;
}"
62225,"@Override public void process(AbstractArtifact instance){
  ArchiveRoot archiveRoot=ParsingContextExecution.getRootObj();
  if (StringUtils.isBlank(instance.getArchiveName())) {
    instance.setArchiveName(archiveRoot.getArchive().getName());
    instance.setArchiveVersion(archiveRoot.getArchive().getVersion());
  }
  Node node=ParsingContextExecution.getObjectToNodeMap().get(instance);
  if (instance.getArtifactType() == null) {
    instance.setArtifactType(getArtifactTypeByExtension(instance.getArtifactRef(),node,archiveRoot));
  }
 else {
    referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getArtifactType(),ArtifactType.class));
  }
  if (instance.getArtifactRepository() != null) {
    RepositoryDefinition repositoryDefinition=archiveRoot.getRepositories() != null ? archiveRoot.getRepositories().get(instance.getArtifactRepository()) : null;
    if (repositoryDefinition == null) {
      ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.UNKNOWN_REPOSITORY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),instance.getArtifactRepository()));
    }
 else {
      instance.setRepositoryURL(repositoryDefinition.getUrl());
      instance.setRepositoryCredential(repositoryDefinition.getCredential() != null ? repositoryDefinition.getCredential().getValue() : null);
      instance.setRepositoryName(repositoryDefinition.getId());
      instance.setArtifactRepository(repositoryDefinition.getType());
    }
  }
}","@Override public void process(AbstractArtifact instance){
  ArchiveRoot archiveRoot=ParsingContextExecution.getRootObj();
  if (StringUtils.isBlank(instance.getArchiveName())) {
    instance.setArchiveName(archiveRoot.getArchive().getName());
    instance.setArchiveVersion(archiveRoot.getArchive().getVersion());
  }
  Node node=ParsingContextExecution.getObjectToNodeMap().get(instance);
  if (instance.getArtifactType() == null) {
    instance.setArtifactType(getArtifactTypeByExtension(instance.getArtifactRef(),node,archiveRoot));
  }
 else {
    referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance,instance.getArtifactType(),ArtifactType.class));
  }
  if (instance.getArtifactRepository() != null) {
    RepositoryDefinition repositoryDefinition=archiveRoot.getRepositories() != null ? archiveRoot.getRepositories().get(instance.getArtifactRepository()) : null;
    if (repositoryDefinition == null) {
      ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.UNKNOWN_REPOSITORY,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),instance.getArtifactRepository()));
    }
 else {
      instance.setRepositoryURL(repositoryDefinition.getUrl());
      instance.setRepositoryCredential(repositoryDefinition.getCredential() != null ? repositoryDefinition.getCredential().getValue() : null);
      instance.setRepositoryName(repositoryDefinition.getId());
      instance.setArtifactRepository(repositoryDefinition.getType());
    }
  }
}"
62226,"@Override public void process(Map.Entry<String,Capability> instance){
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getValue().getType(),CapabilityType.class));
  CapabilityType capabilityType=ToscaContext.get(CapabilityType.class,instance.getValue().getType());
  if (capabilityType == null) {
    return;
  }
  propertyValueChecker.checkProperties(capabilityType,instance.getValue().getProperties(),instance.getKey());
}","@Override public void process(Map.Entry<String,Capability> instance){
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getValue(),instance.getValue().getType(),CapabilityType.class));
  CapabilityType capabilityType=ToscaContext.get(CapabilityType.class,instance.getValue().getType());
  if (capabilityType == null) {
    return;
  }
  propertyValueChecker.checkProperties(capabilityType,instance.getValue().getProperties(),instance.getKey());
}"
62227,"@Override public void process(final NodeTemplate instance){
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getType(),NodeType.class));
  final NodeType nodeType=ToscaContext.get(NodeType.class,instance.getType());
  if (nodeType == null) {
    return;
  }
  safe(instance.getArtifacts()).values().forEach(artifactPostProcessor);
  safe(instance.getInterfaces()).values().stream().flatMap(anInterface -> safe(anInterface.getOperations()).values().stream()).map(Operation::getImplementationArtifact).filter(Objects::nonNull).forEach(artifactPostProcessor);
  NodeTemplate tempObject=NodeTemplateBuilder.buildNodeTemplate(nodeType,instance,false);
  safe(instance.getCapabilities()).keySet().forEach(s -> {
    if (!safe(tempObject.getCapabilities()).containsKey(s)) {
      Node node=ParsingContextExecution.getObjectToNodeMap().get(s);
      ParsingContextExecution.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.UNKNOWN_CAPABILITY,null,node.getStartMark(),null,node.getEndMark(),s));
    }
  }
);
  instance.setAttributes(tempObject.getAttributes());
  instance.setCapabilities(tempObject.getCapabilities());
  instance.setProperties(tempObject.getProperties());
  instance.setRequirements(tempObject.getRequirements());
  instance.setArtifacts(tempObject.getArtifacts());
  instance.setInterfaces(tempObject.getInterfaces());
  safe(instance.getCapabilities()).entrySet().forEach(capabilityPostProcessor);
  safe(instance.getRequirements()).entrySet().forEach(requirementPostProcessor);
  propertyValueChecker.checkProperties(nodeType,instance.getProperties(),instance.getName());
}","@Override public void process(final NodeTemplate instance){
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance,instance.getType(),NodeType.class));
  final NodeType nodeType=ToscaContext.get(NodeType.class,instance.getType());
  if (nodeType == null) {
    return;
  }
  safe(instance.getArtifacts()).values().forEach(artifactPostProcessor);
  safe(instance.getInterfaces()).values().stream().flatMap(anInterface -> safe(anInterface.getOperations()).values().stream()).map(Operation::getImplementationArtifact).filter(Objects::nonNull).forEach(artifactPostProcessor);
  NodeTemplate tempObject=NodeTemplateBuilder.buildNodeTemplate(nodeType,instance,false);
  safe(instance.getCapabilities()).keySet().forEach(s -> {
    if (!safe(tempObject.getCapabilities()).containsKey(s)) {
      Node node=ParsingContextExecution.getObjectToNodeMap().get(s);
      ParsingContextExecution.getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.UNKNOWN_CAPABILITY,null,node.getStartMark(),null,node.getEndMark(),s));
    }
  }
);
  instance.setAttributes(tempObject.getAttributes());
  instance.setCapabilities(tempObject.getCapabilities());
  instance.setProperties(tempObject.getProperties());
  instance.setRequirements(tempObject.getRequirements());
  instance.setArtifacts(tempObject.getArtifacts());
  instance.setInterfaces(tempObject.getInterfaces());
  safe(instance.getCapabilities()).entrySet().forEach(capabilityPostProcessor);
  safe(instance.getRequirements()).entrySet().forEach(requirementPostProcessor);
  propertyValueChecker.checkProperties(nodeType,instance.getProperties(),instance.getName());
}"
62228,"private String buildRelationShipTemplateName(RelationshipTemplate relationshipTemplate){
  String value=relationshipTemplate.getType();
  if (value.contains(""String_Node_Str"")) {
    value=value.substring(value.lastIndexOf(""String_Node_Str"") + 1);
  }
  value=StringUtils.uncapitalize(value);
  value=value + StringUtils.capitalize(relationshipTemplate.getTarget());
  return value;
}","private String buildRelationShipTemplateName(RelationshipTemplate relationshipTemplate){
  String value=relationshipTemplate.getType();
  if (value == null) {
    return value;
  }
  if (value.contains(""String_Node_Str"")) {
    value=value.substring(value.lastIndexOf(""String_Node_Str"") + 1);
  }
  value=StringUtils.uncapitalize(value);
  value=value + StringUtils.capitalize(relationshipTemplate.getTarget());
  return value;
}"
62229,"@Override public void process(TypeReference typeReference){
  for (  Class<? extends AbstractInheritableToscaType> clazz : typeReference.classes) {
    AbstractInheritableToscaType reference=ToscaContext.get(clazz,typeReference.getKey());
    if (reference != null) {
      return;
    }
  }
  Node node=ParsingContextExecution.getObjectToNodeMap().get(typeReference.getKey());
  if (node == null) {
    log.info(""String_Node_Str"");
  }
 else {
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.TYPE_NOT_FOUND,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),typeReference.getKey()));
  }
}","@Override public void process(TypeReference typeReference){
  for (  Class<? extends AbstractInheritableToscaType> clazz : typeReference.classes) {
    AbstractInheritableToscaType reference=ToscaContext.get(clazz,typeReference.getKey());
    if (reference != null) {
      return;
    }
  }
  Node node=ParsingContextExecution.getObjectToNodeMap().get(typeReference.getKey());
  if (node == null) {
    node=ParsingContextExecution.getObjectToNodeMap().get(typeReference.getParent());
    if (node == null) {
      log.info(""String_Node_Str"");
    }
 else {
      ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.TYPE_NOT_FOUND,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),typeReference.getKey()));
    }
  }
 else {
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.TYPE_NOT_FOUND,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),typeReference.getKey()));
  }
}"
62230,"public TypeReference(String key,Class<? extends AbstractInheritableToscaType>... classes){
  this.key=key;
  this.classes=classes;
}","public TypeReference(Object parent,String key,Class<? extends AbstractInheritableToscaType>... classes){
  this.key=key;
  this.classes=classes;
}"
62231,"public void process(NodeType nodeTemplateType,Map.Entry<String,RelationshipTemplate> instance){
  RelationshipTemplate relationshipTemplate=instance.getValue();
  if (relationshipTemplate.getTarget() == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(instance);
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_TARGET_NODE_TEMPLATE_NAME_REQUIRED,null,node.getStartMark(),null,node.getEndMark(),null));
  }
  RelationshipType relationshipType=ToscaContext.get(RelationshipType.class,relationshipTemplate.getType());
  propertyValueChecker.checkProperties(relationshipType,relationshipTemplate.getProperties(),instance.getKey());
  RequirementDefinition rd=getRequirementDefinitionByName(nodeTemplateType,relationshipTemplate.getRequirementName());
  if (rd == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate.getRequirementName());
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getRequirementName()));
    return;
  }
  if (relationshipTemplate.getType() == null) {
    relationshipTemplate.setType(rd.getRelationshipType());
  }
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(relationshipTemplate.getType(),RelationshipType.class));
  relationshipTemplate.setRequirementType(rd.getType());
  ArchiveRoot archiveRoot=(ArchiveRoot)ParsingContextExecution.getRoot().getWrappedInstance();
  NodeTemplate targetNodeTemplate=archiveRoot.getTopology().getNodeTemplates().get(relationshipTemplate.getTarget());
  if (targetNodeTemplate == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate.getTarget());
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_TARGET_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getTarget()));
    return;
  }
  String capabilityType=relationshipTemplate.getTargetedCapabilityName();
  Capability capability=null;
  if (capabilityType == null) {
    if (targetNodeTemplate.getCapabilities() != null) {
      capability=targetNodeTemplate.getCapabilities().get(relationshipTemplate.getRequirementName());
      if (capability != null) {
        relationshipTemplate.setTargetedCapabilityName(rd.getId());
      }
    }
  }
 else {
    Map.Entry<String,Capability> capabilityEntry=getCapabilityByType(targetNodeTemplate,capabilityType);
    if (capabilityEntry != null) {
      capability=capabilityEntry.getValue();
      relationshipTemplate.setTargetedCapabilityName(capabilityEntry.getKey());
    }
  }
  if (capability == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate);
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_CAPABILITY_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getRequirementName()));
    return;
  }
  RelationshipType indexedRelationshipType=ToscaContext.get(RelationshipType.class,relationshipTemplate.getType());
  if (indexedRelationshipType == null) {
    return;
  }
  Map<String,AbstractPropertyValue> properties=Maps.newLinkedHashMap();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),relationshipTemplate.getProperties(),false);
  relationshipTemplate.setProperties(properties);
  relationshipTemplate.setAttributes(indexedRelationshipType.getAttributes());
  safe(instance.getValue().getArtifacts()).values().forEach(artifactPostProcessor);
  Map<String,DeploymentArtifact> mergedArtifacts=instance.getValue().getArtifacts();
  if (mergedArtifacts == null) {
    mergedArtifacts=new HashMap<>();
  }
  mergedArtifacts.putAll(safe(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setArtifacts(mergedArtifacts);
  for (  Interface anInterface : safe(instance.getValue().getInterfaces()).values()) {
    safe(anInterface.getOperations()).values().stream().map(Operation::getImplementationArtifact).filter(Objects::nonNull).forEach(artifactPostProcessor);
  }
}","public void process(NodeType nodeTemplateType,Map.Entry<String,RelationshipTemplate> instance){
  RelationshipTemplate relationshipTemplate=instance.getValue();
  if (relationshipTemplate.getTarget() == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(instance);
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_TARGET_NODE_TEMPLATE_NAME_REQUIRED,null,node.getStartMark(),null,node.getEndMark(),null));
  }
  RelationshipType relationshipType=ToscaContext.get(RelationshipType.class,relationshipTemplate.getType());
  propertyValueChecker.checkProperties(relationshipType,relationshipTemplate.getProperties(),instance.getKey());
  RequirementDefinition rd=getRequirementDefinitionByName(nodeTemplateType,relationshipTemplate.getRequirementName());
  if (rd == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate.getRequirementName());
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getRequirementName()));
    return;
  }
  if (relationshipTemplate.getType() == null) {
    relationshipTemplate.setType(rd.getRelationshipType());
  }
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(relationshipTemplate,relationshipTemplate.getType(),RelationshipType.class));
  relationshipTemplate.setRequirementType(rd.getType());
  ArchiveRoot archiveRoot=(ArchiveRoot)ParsingContextExecution.getRoot().getWrappedInstance();
  NodeTemplate targetNodeTemplate=archiveRoot.getTopology().getNodeTemplates().get(relationshipTemplate.getTarget());
  if (targetNodeTemplate == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate.getTarget());
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_TARGET_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getTarget()));
    return;
  }
  String capabilityType=relationshipTemplate.getTargetedCapabilityName();
  Capability capability=null;
  if (capabilityType == null) {
    if (targetNodeTemplate.getCapabilities() != null) {
      capability=targetNodeTemplate.getCapabilities().get(relationshipTemplate.getRequirementName());
      if (capability != null) {
        relationshipTemplate.setTargetedCapabilityName(rd.getId());
      }
    }
  }
 else {
    Map.Entry<String,Capability> capabilityEntry=getCapabilityByType(targetNodeTemplate,capabilityType);
    if (capabilityEntry != null) {
      capability=capabilityEntry.getValue();
      relationshipTemplate.setTargetedCapabilityName(capabilityEntry.getKey());
    }
  }
  if (capability == null) {
    Node node=ParsingContextExecution.getObjectToNodeMap().get(relationshipTemplate);
    ParsingContextExecution.getParsingErrors().add(new ParsingError(ErrorCode.REQUIREMENT_CAPABILITY_NOT_FOUND,null,node.getStartMark(),null,node.getEndMark(),relationshipTemplate.getRequirementName()));
    return;
  }
  RelationshipType indexedRelationshipType=ToscaContext.get(RelationshipType.class,relationshipTemplate.getType());
  if (indexedRelationshipType == null) {
    return;
  }
  Map<String,AbstractPropertyValue> properties=Maps.newLinkedHashMap();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),relationshipTemplate.getProperties(),false);
  relationshipTemplate.setProperties(properties);
  relationshipTemplate.setAttributes(indexedRelationshipType.getAttributes());
  safe(instance.getValue().getArtifacts()).values().forEach(artifactPostProcessor);
  Map<String,DeploymentArtifact> mergedArtifacts=instance.getValue().getArtifacts();
  if (mergedArtifacts == null) {
    mergedArtifacts=new HashMap<>();
  }
  mergedArtifacts.putAll(safe(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setArtifacts(mergedArtifacts);
  for (  Interface anInterface : safe(instance.getValue().getInterfaces()).values()) {
    safe(anInterface.getOperations()).values().stream().map(Operation::getImplementationArtifact).filter(Objects::nonNull).forEach(artifactPostProcessor);
  }
}"
62232,"@Override public void process(Map.Entry<String,Requirement> instance){
  String definitionVersion=ParsingContextExecution.getDefinitionVersion();
switch (definitionVersion) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    capabilityOrNodeReferencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getValue().getType()));
  break;
default :
capabilityReferencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getValue().getType()));
break;
}
CapabilityType capabilityType=ToscaContext.get(CapabilityType.class,instance.getValue().getType());
propertyValueChecker.checkProperties(capabilityType,instance.getValue().getProperties(),instance.getKey());
}","@Override public void process(Map.Entry<String,Requirement> instance){
  String definitionVersion=ParsingContextExecution.getDefinitionVersion();
switch (definitionVersion) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    capabilityOrNodeReferencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance,instance.getValue().getType()));
  break;
default :
capabilityReferencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance,instance.getValue().getType()));
break;
}
CapabilityType capabilityType=ToscaContext.get(CapabilityType.class,instance.getValue().getType());
propertyValueChecker.checkProperties(capabilityType,instance.getValue().getProperties(),instance.getKey());
}"
62233,"@Override public void process(SubstitutionMapping instance){
  if (instance == null) {
    return;
  }
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getSubstitutionType().getElementId(),NodeType.class));
  NodeType nodeType=ToscaContext.get(NodeType.class,instance.getSubstitutionType().getElementId());
  instance.setSubstitutionType(nodeType);
}","@Override public void process(SubstitutionMapping instance){
  if (instance == null) {
    return;
  }
  referencePostProcessor.process(new ReferencePostProcessor.TypeReference(instance.getSubstitutionType(),instance.getSubstitutionType().getElementId(),NodeType.class));
  NodeType nodeType=ToscaContext.get(NodeType.class,instance.getSubstitutionType().getElementId());
  instance.setSubstitutionType(nodeType);
}"
62234,"@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
      String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
      if (csarAuthorizationFilter == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        csarAuthorizationFilter.checkReadAccess(new Csar(csarName,csarVersion));
      }
      return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}","@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
      String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
      if (csarAuthorizationFilter == null || csarService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        csarAuthorizationFilter.checkReadAccess(csarService.getOrFail(csarName,csarVersion));
      }
      return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}"
62235,"@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
  String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
  if (csarAuthorizationFilter == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    csarAuthorizationFilter.checkReadAccess(new Csar(csarName,csarVersion));
  }
  return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
}","@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
  String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
  if (csarAuthorizationFilter == null || csarService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    csarAuthorizationFilter.checkReadAccess(csarService.getOrFail(csarName,csarVersion));
  }
  return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
}"
62236,"@PreDestroy public void unregister(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(null);
}","@PreDestroy public void unregister(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(null);
  configuration.setCsarService(null);
}"
62237,"@PostConstruct public void register(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(csarAuthorizationFilter);
}","@PostConstruct public void register(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(csarAuthorizationFilter);
  configuration.setCsarService(csarService);
}"
62238,"/** 
 * Search for nodeTypes given some filters. Apply AND filter strategy when multiple values for a filter key.
 */
public List<SuggestionsTask> searchForNodeTypes(Map<String,Map<String,Set<String>>> nodeTemplatesToFilters,Map<String,NodeType> toExcludeIndexedNodeTypes) throws IOException {
  if (nodeTemplatesToFilters == null || nodeTemplatesToFilters.isEmpty()) {
    return null;
  }
  List<SuggestionsTask> toReturnTasks=Lists.newArrayList();
  for (  Map.Entry<String,Map<String,Set<String>>> nodeTemplatesToFiltersEntry : nodeTemplatesToFilters.entrySet()) {
    Map<String,String[]> formattedFilters=Maps.newHashMap();
    Map<String,FilterValuesStrategy> filterValueStrategy=Maps.newHashMap();
    NodeType[] data=null;
    if (nodeTemplatesToFiltersEntry.getValue() != null) {
      for (      Map.Entry<String,Set<String>> filterEntry : nodeTemplatesToFiltersEntry.getValue().entrySet()) {
        formattedFilters.put(filterEntry.getKey(),filterEntry.getValue().toArray(new String[filterEntry.getValue().size()]));
        filterValueStrategy.put(filterEntry.getKey(),FilterValuesStrategy.AND);
      }
      formattedFilters.put(""String_Node_Str"",ArrayUtils.toArray(""String_Node_Str""));
      GetMultipleDataResult<NodeType> searchResult=alienDAO.search(NodeType.class,null,formattedFilters,filterValueStrategy,20);
      data=getIndexedNodeTypesFromSearchResponse(searchResult,toExcludeIndexedNodeTypes.get(nodeTemplatesToFiltersEntry.getKey()));
    }
    TaskCode taskCode=data == null || data.length < 1 ? TaskCode.IMPLEMENT : TaskCode.REPLACE;
    SuggestionsTask task=new SuggestionsTask();
    task.setNodeTemplateName(nodeTemplatesToFiltersEntry.getKey());
    task.setComponent(toExcludeIndexedNodeTypes.get(nodeTemplatesToFiltersEntry.getKey()));
    task.setCode(taskCode);
    task.setSuggestedNodeTypes(data);
    toReturnTasks.add(task);
  }
  return toReturnTasks;
}","/** 
 * Search for nodeTypes given some filters. Apply AND filter strategy when multiple values for a filter key.
 */
public List<SuggestionsTask> searchForNodeTypes(String workspace,Map<String,Map<String,Set<String>>> nodeTemplatesToFilters,Map<String,NodeType> toExcludeIndexedNodeTypes) throws IOException {
  if (nodeTemplatesToFilters == null || nodeTemplatesToFilters.isEmpty()) {
    return null;
  }
  List<SuggestionsTask> toReturnTasks=Lists.newArrayList();
  for (  Map.Entry<String,Map<String,Set<String>>> nodeTemplatesToFiltersEntry : nodeTemplatesToFilters.entrySet()) {
    Map<String,String[]> formattedFilters=Maps.newHashMap();
    Map<String,FilterValuesStrategy> filterValueStrategy=Maps.newHashMap();
    NodeType[] data=null;
    if (nodeTemplatesToFiltersEntry.getValue() != null) {
      for (      Map.Entry<String,Set<String>> filterEntry : nodeTemplatesToFiltersEntry.getValue().entrySet()) {
        formattedFilters.put(filterEntry.getKey(),filterEntry.getValue().toArray(new String[filterEntry.getValue().size()]));
        filterValueStrategy.put(filterEntry.getKey(),FilterValuesStrategy.AND);
      }
      formattedFilters.put(""String_Node_Str"",ArrayUtils.toArray(""String_Node_Str""));
      formattedFilters.put(""String_Node_Str"",ArrayUtils.toArray(workspace,""String_Node_Str""));
      GetMultipleDataResult<NodeType> searchResult=alienDAO.search(NodeType.class,null,formattedFilters,filterValueStrategy,20);
      data=getIndexedNodeTypesFromSearchResponse(searchResult,toExcludeIndexedNodeTypes.get(nodeTemplatesToFiltersEntry.getKey()));
    }
    TaskCode taskCode=data == null || data.length < 1 ? TaskCode.IMPLEMENT : TaskCode.REPLACE;
    SuggestionsTask task=new SuggestionsTask();
    task.setNodeTemplateName(nodeTemplatesToFiltersEntry.getKey());
    task.setComponent(toExcludeIndexedNodeTypes.get(nodeTemplatesToFiltersEntry.getKey()));
    task.setCode(taskCode);
    task.setSuggestedNodeTypes(data);
    toReturnTasks.add(task);
  }
  return toReturnTasks;
}"
62239,"/** 
 * Find replacements nodes for a node template
 * @param nodeTemplateName the node to search for replacements
 * @param topology the topology
 * @return all possible replacement types for this node
 */
@SneakyThrows(IOException.class) public NodeType[] findReplacementForNode(String nodeTemplateName,Topology topology){
  NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeTemplateName);
  Map<String,Map<String,Set<String>>> nodeTemplatesToFilters=Maps.newHashMap();
  Entry<String,NodeTemplate> nodeTempEntry=Maps.immutableEntry(nodeTemplateName,nodeTemplate);
  NodeType indexedNodeType=toscaTypeSearchService.getRequiredElementInDependencies(NodeType.class,nodeTemplate.getType(),topology.getDependencies());
  processNodeTemplate(topology,nodeTempEntry,nodeTemplatesToFilters);
  List<SuggestionsTask> topoTasks=searchForNodeTypes(nodeTemplatesToFilters,MapUtil.newHashMap(new String[]{nodeTemplateName},new NodeType[]{indexedNodeType}));
  if (CollectionUtils.isEmpty(topoTasks)) {
    return null;
  }
  return topoTasks.get(0).getSuggestedNodeTypes();
}","/** 
 * Find replacements nodes for a node template
 * @param nodeTemplateName the node to search for replacements
 * @param topology the topology
 * @return all possible replacement types for this node
 */
@SneakyThrows(IOException.class) public NodeType[] findReplacementForNode(String nodeTemplateName,Topology topology){
  NodeTemplate nodeTemplate=topology.getNodeTemplates().get(nodeTemplateName);
  Map<String,Map<String,Set<String>>> nodeTemplatesToFilters=Maps.newHashMap();
  Entry<String,NodeTemplate> nodeTempEntry=Maps.immutableEntry(nodeTemplateName,nodeTemplate);
  NodeType indexedNodeType=toscaTypeSearchService.getRequiredElementInDependencies(NodeType.class,nodeTemplate.getType(),topology.getDependencies());
  processNodeTemplate(topology,nodeTempEntry,nodeTemplatesToFilters);
  List<SuggestionsTask> topoTasks=searchForNodeTypes(topology.getWorkspace(),nodeTemplatesToFilters,MapUtil.newHashMap(new String[]{nodeTemplateName},new NodeType[]{indexedNodeType}));
  if (CollectionUtils.isEmpty(topoTasks)) {
    return null;
  }
  return topoTasks.get(0).getSuggestedNodeTypes();
}"
62240,"/** 
 * Find replacements components for abstract nodes in a Topology
 */
@SneakyThrows({IOException.class}) public List<SuggestionsTask> findReplacementForAbstracts(Topology topology){
  Map<String,NodeType> nodeTempNameToAbstractIndexedNodeTypes=topologyServiceCore.getIndexedNodeTypesFromTopology(topology,true,true,true);
  Map<String,Map<String,Set<String>>> nodeTemplatesToFilters=Maps.newHashMap();
  for (  Map.Entry<String,NodeType> idntEntry : nodeTempNameToAbstractIndexedNodeTypes.entrySet()) {
    topologyService.processNodeTemplate(topology,Maps.immutableEntry(idntEntry.getKey(),topology.getNodeTemplates().get(idntEntry.getKey())),nodeTemplatesToFilters);
  }
  return topologyService.searchForNodeTypes(nodeTemplatesToFilters,nodeTempNameToAbstractIndexedNodeTypes);
}","/** 
 * Find replacements components for abstract nodes in a Topology
 */
@SneakyThrows({IOException.class}) public List<SuggestionsTask> findReplacementForAbstracts(Topology topology){
  Map<String,NodeType> nodeTempNameToAbstractIndexedNodeTypes=topologyServiceCore.getIndexedNodeTypesFromTopology(topology,true,true,true);
  Map<String,Map<String,Set<String>>> nodeTemplatesToFilters=Maps.newHashMap();
  for (  Map.Entry<String,NodeType> idntEntry : nodeTempNameToAbstractIndexedNodeTypes.entrySet()) {
    topologyService.processNodeTemplate(topology,Maps.immutableEntry(idntEntry.getKey(),topology.getNodeTemplates().get(idntEntry.getKey())),nodeTemplatesToFilters);
  }
  return topologyService.searchForNodeTypes(topology.getWorkspace(),nodeTemplatesToFilters,nodeTempNameToAbstractIndexedNodeTypes);
}"
62241,"@Override public void process(ReplaceNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  NodeType newType=toscaTypeSearchService.find(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=topologyService.buildNodeTemplate(topology.getDependencies(),newType,null);
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  workflowBuilderService.removeNode(topology,oldNodeTemplate.getName(),oldNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  workflowBuilderService.addNode(workflowBuilderService.buildTopologyContext(topology),oldNodeTemplate.getName(),newNodeTemplate);
}","@Override public void process(ReplaceNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  NodeType newType=toscaTypeSearchService.find(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=NodeTemplateBuilder.buildNodeTemplate(newType,oldNodeTemplate,false);
  newNodeTemplate.setName(operation.getNodeName());
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  workflowBuilderService.removeNode(topology,oldNodeTemplate.getName(),oldNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  workflowBuilderService.addNode(workflowBuilderService.buildTopologyContext(topology),oldNodeTemplate.getName(),newNodeTemplate);
}"
62242,"@Override public void save(Csar csar){
  csar.setImportDate(new Date());
  Set<CSARDependency> mergedDependencies=null;
  if (csar.getDependencies() != null) {
    mergedDependencies=Sets.newHashSet(csar.getDependencies());
    for (    CSARDependency dependency : csar.getDependencies()) {
      Csar dependencyCsar=get(dependency.getName(),dependency.getVersion());
      if (dependencyCsar != null && dependencyCsar.getDependencies() != null) {
        mergedDependencies.addAll(dependencyCsar.getDependencies());
      }
    }
  }
  csar.setDependencies(mergedDependencies,true);
  this.csarDAO.save(csar);
}","@Override public void save(Csar csar){
  csar.setImportDate(new Date());
  Set<CSARDependency> mergedDependencies=null;
  if (csar.getDependencies() != null) {
    mergedDependencies=Sets.newHashSet(csar.getDependencies());
    for (    CSARDependency dependency : csar.getDependencies()) {
      Csar dependencyCsar=get(dependency.getName(),dependency.getVersion());
      if (dependencyCsar != null && dependencyCsar.getDependencies() != null) {
        mergedDependencies.addAll(dependencyCsar.getDependencies());
      }
    }
  }
  csar.setDependencies(mergedDependencies);
  this.csarDAO.save(csar);
}"
62243,"private void doSave() throws IOException {
  EditionContext context=EditionContextManager.get();
  if (context.getLastOperationIndex() <= context.getLastSavedOperationIndex()) {
    return;
  }
  StringBuilder commitMessage=new StringBuilder();
  for (int i=context.getLastSavedOperationIndex() + 1; i <= context.getLastOperationIndex(); i++) {
    AbstractEditorOperation operation=context.getOperations().get(i);
    IEditorOperationProcessor<?> processor=(IEditorOperationProcessor)processorMap.get(operation.getClass());
    if (processor instanceof IEditorCommitableProcessor) {
      ((IEditorCommitableProcessor)processor).beforeCommit(operation);
    }
    commitMessage.append(operation.getAuthor()).append(""String_Node_Str"").append(operation.commitMessage()).append(""String_Node_Str"");
  }
  saveYamlFile();
  Topology topology=EditionContextManager.getTopology();
  topologyServiceCore.save(topology);
  topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
  repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage.toString());
  context.setOperations(Lists.newArrayList(context.getOperations().subList(context.getLastOperationIndex() + 1,context.getOperations().size())));
  context.setLastOperationIndex(-1);
}","private void doSave() throws IOException {
  EditionContext context=EditionContextManager.get();
  if (context.getLastOperationIndex() <= context.getLastSavedOperationIndex()) {
    return;
  }
  StringBuilder commitMessage=new StringBuilder();
  for (int i=context.getLastSavedOperationIndex() + 1; i <= context.getLastOperationIndex(); i++) {
    AbstractEditorOperation operation=context.getOperations().get(i);
    IEditorOperationProcessor<?> processor=(IEditorOperationProcessor)processorMap.get(operation.getClass());
    if (processor instanceof IEditorCommitableProcessor) {
      ((IEditorCommitableProcessor)processor).beforeCommit(operation);
    }
    commitMessage.append(operation.getAuthor()).append(""String_Node_Str"").append(operation.commitMessage()).append(""String_Node_Str"");
  }
  saveYamlFile();
  Topology topology=EditionContextManager.getTopology();
  topologyServiceCore.save(topology);
  topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
  csarService.setDependencies(topology.getId(),topology.getDependencies());
  repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage.toString());
  context.setOperations(Lists.newArrayList(context.getOperations().subList(context.getLastOperationIndex() + 1,context.getOperations().size())));
  context.setLastOperationIndex(-1);
}"
62244,"/** 
 * Override the content of an archive from a full exising archive.
 * @param topologyId The if of the topology to process.
 * @param inputStream The input stream of the file that contains the archive.
 */
public void override(String topologyId,InputStream inputStream) throws IOException {
  Path tempPath=null;
  try {
    initContext(topologyId,(String)null);
    tempPath=Files.createTempFile(tempUploadDir,null,null);
    Files.copy(inputStream,tempPath,StandardCopyOption.REPLACE_EXISTING);
    topologyUploadService.processTopology(tempPath,EditionContextManager.get().getTopology().getWorkspace());
    FileUtil.delete(EditionContextManager.get().getLocalGitPath(),EditionContextManager.get().getLocalGitPath().resolve(""String_Node_Str""));
    if (isZipFile(tempPath)) {
      FileUtil.unzip(tempPath,EditionContextManager.get().getLocalGitPath());
    }
 else {
      Path targetPath=EditionContextManager.get().getLocalGitPath().resolve(tempPath.getFileName());
      Files.copy(tempPath,targetPath,StandardCopyOption.REPLACE_EXISTING);
    }
    Topology topology=EditionContextManager.getTopology();
    String commitMessage=AuthorizationUtil.getCurrentUser().getUserId() + ""String_Node_Str"";
    topologyServiceCore.save(topology);
    topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
    repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage);
  }
  finally {
    EditionContextManager.get().setCurrentOperation(null);
    editionContextManager.destroy();
  }
}","/** 
 * Override the content of an archive from a full exising archive.
 * @param topologyId The if of the topology to process.
 * @param inputStream The input stream of the file that contains the archive.
 */
public void override(String topologyId,InputStream inputStream) throws IOException {
  Path tempPath=null;
  try {
    initContext(topologyId,(String)null);
    tempPath=Files.createTempFile(tempUploadDir,null,null);
    Files.copy(inputStream,tempPath,StandardCopyOption.REPLACE_EXISTING);
    topologyUploadService.processTopology(tempPath,EditionContextManager.get().getTopology().getWorkspace());
    FileUtil.delete(EditionContextManager.get().getLocalGitPath(),EditionContextManager.get().getLocalGitPath().resolve(""String_Node_Str""));
    if (isZipFile(tempPath)) {
      FileUtil.unzip(tempPath,EditionContextManager.get().getLocalGitPath());
    }
 else {
      Path targetPath=EditionContextManager.get().getLocalGitPath().resolve(tempPath.getFileName());
      Files.copy(tempPath,targetPath,StandardCopyOption.REPLACE_EXISTING);
    }
    Topology topology=EditionContextManager.getTopology();
    String commitMessage=AuthorizationUtil.getCurrentUser().getUserId() + ""String_Node_Str"";
    topologyServiceCore.save(topology);
    csarService.setDependencies(topology.getId(),topology.getDependencies());
    topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
    repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage);
  }
  finally {
    EditionContextManager.get().setCurrentOperation(null);
    editionContextManager.destroy();
  }
}"
62245,"@Override public void process(ChangeDependencyVersionOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Set<CSARDependency> topologyDependencies=Sets.newHashSet(topology.getDependencies());
  Iterator<CSARDependency> topologyDependencyIterator=topologyDependencies.iterator();
  while (topologyDependencyIterator.hasNext()) {
    CSARDependency dependency=topologyDependencyIterator.next();
    if (dependency.getName().equals(operation.getDependencyName())) {
      topologyDependencyIterator.remove();
    }
  }
  CSARDependency newDependency=new CSARDependency(operation.getDependencyName(),operation.getDependencyVersion());
  topologyDependencies.add(newDependency);
  topology.setDependencies(topologyDependencies);
  ToscaContext.get().updateDependency(newDependency);
  Set<CSARDependency> dependencies=Sets.newHashSet(newDependency);
  List<AbstractEditorOperation> recoveringOperations=recoveryHelperService.buildRecoveryOperations(topology,dependencies);
  recoveryHelperService.processRecoveryOperations(topology,recoveringOperations);
  topologyService.rebuildDependencies(topology);
  csarService.setDependencies(topology.getId(),topology.getDependencies());
}","@Override public void process(ChangeDependencyVersionOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Set<CSARDependency> topologyDependencies=Sets.newHashSet(topology.getDependencies());
  Iterator<CSARDependency> topologyDependencyIterator=topologyDependencies.iterator();
  while (topologyDependencyIterator.hasNext()) {
    CSARDependency dependency=topologyDependencyIterator.next();
    if (dependency.getName().equals(operation.getDependencyName())) {
      topologyDependencyIterator.remove();
    }
  }
  CSARDependency newDependency=new CSARDependency(operation.getDependencyName(),operation.getDependencyVersion());
  topologyDependencies.add(newDependency);
  topology.setDependencies(topologyDependencies);
  ToscaContext.get().updateDependency(newDependency);
  Set<CSARDependency> dependencies=Sets.newHashSet(newDependency);
  List<AbstractEditorOperation> recoveringOperations=recoveryHelperService.buildRecoveryOperations(topology,dependencies);
  recoveryHelperService.processRecoveryOperations(topology,recoveringOperations);
  topologyService.rebuildDependencies(topology);
}"
62246,"@Override public void process(AddNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (!TopologyUtils.isValidNodeName(operation.getNodeName())) {
    throw new InvalidNodeNameException(""String_Node_Str"");
  }
  topologyService.isUniqueNodeTemplateName(topology,operation.getNodeName());
  String[] splittedId=operation.getIndexedNodeTypeId().split(""String_Node_Str"");
  NodeType indexedNodeType=searchService.find(NodeType.class,splittedId[0],splittedId[1]);
  if (indexedNodeType == null) {
    throw new NotFoundException(NodeType.class.getName(),operation.getIndexedNodeTypeId(),""String_Node_Str"");
  }
  if (indexedNodeType.getSubstitutionTopologyId() != null) {
    if (indexedNodeType.getSubstitutionTopologyId().equals(topology.getId())) {
      throw new CyclicReferenceException(""String_Node_Str"");
    }
    topologyCompositionService.recursivelyDetectTopologyCompositionCyclicReference(topology.getId(),indexedNodeType.getSubstitutionTopologyId());
  }
  if (topology.getNodeTemplates() == null) {
    topology.setNodeTemplates(new HashMap<>());
  }
  log.debug(""String_Node_Str"",operation.getNodeName());
  Set<CSARDependency> oldDependencies=topology.getDependencies();
  indexedNodeType=topologyService.loadType(topology,indexedNodeType);
  NodeTemplate nodeTemplate=topologyService.buildNodeTemplate(topology.getDependencies(),indexedNodeType,null);
  nodeTemplate.setName(operation.getNodeName());
  topology.getNodeTemplates().put(operation.getNodeName(),nodeTemplate);
  log.debug(""String_Node_Str"" + operation.getNodeName() + ""String_Node_Str""+ operation.getIndexedNodeTypeId()+ ""String_Node_Str""+ topology.getId()+ ""String_Node_Str"");
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addNode(topologyContext,operation.getNodeName(),nodeTemplate);
  if (!Objects.equals(topology.getDependencies(),oldDependencies)) {
    csarService.setDependencies(topology.getId(),topology.getDependencies());
  }
}","@Override public void process(AddNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (!TopologyUtils.isValidNodeName(operation.getNodeName())) {
    throw new InvalidNodeNameException(""String_Node_Str"");
  }
  topologyService.isUniqueNodeTemplateName(topology,operation.getNodeName());
  String[] splittedId=operation.getIndexedNodeTypeId().split(""String_Node_Str"");
  NodeType indexedNodeType=searchService.find(NodeType.class,splittedId[0],splittedId[1]);
  if (indexedNodeType == null) {
    throw new NotFoundException(NodeType.class.getName(),operation.getIndexedNodeTypeId(),""String_Node_Str"");
  }
  if (indexedNodeType.getSubstitutionTopologyId() != null) {
    if (indexedNodeType.getSubstitutionTopologyId().equals(topology.getId())) {
      throw new CyclicReferenceException(""String_Node_Str"");
    }
    topologyCompositionService.recursivelyDetectTopologyCompositionCyclicReference(topology.getId(),indexedNodeType.getSubstitutionTopologyId());
  }
  if (topology.getNodeTemplates() == null) {
    topology.setNodeTemplates(new HashMap<>());
  }
  log.debug(""String_Node_Str"",operation.getNodeName());
  indexedNodeType=topologyService.loadType(topology,indexedNodeType);
  NodeTemplate nodeTemplate=topologyService.buildNodeTemplate(topology.getDependencies(),indexedNodeType,null);
  nodeTemplate.setName(operation.getNodeName());
  topology.getNodeTemplates().put(operation.getNodeName(),nodeTemplate);
  log.debug(""String_Node_Str"" + operation.getNodeName() + ""String_Node_Str""+ operation.getIndexedNodeTypeId()+ ""String_Node_Str""+ topology.getId()+ ""String_Node_Str"");
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addNode(topologyContext,operation.getNodeName(),nodeTemplate);
}"
62247,"@Override public void process(ReplaceNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Set<CSARDependency> oldDependencies=topology.getDependencies();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  NodeType newType=searchService.find(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=topologyService.buildNodeTemplate(topology.getDependencies(),newType,null);
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  workflowBuilderService.removeNode(topology,oldNodeTemplate.getName(),oldNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  workflowBuilderService.addNode(workflowBuilderService.buildTopologyContext(topology),oldNodeTemplate.getName(),newNodeTemplate);
  if (!Objects.equals(topology.getDependencies(),oldDependencies)) {
    csarService.setDependencies(topology.getId(),topology.getDependencies());
  }
}","@Override public void process(ReplaceNodeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  NodeTemplate oldNodeTemplate=TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getNodeName(),nodeTemplates);
  String[] splittedId=operation.getNewTypeId().split(""String_Node_Str"");
  NodeType newType=searchService.find(NodeType.class,splittedId[0],splittedId[1]);
  newType=topologyService.loadType(topology,newType);
  NodeTemplate newNodeTemplate=topologyService.buildNodeTemplate(topology.getDependencies(),newType,null);
  newNodeTemplate.setName(oldNodeTemplate.getName());
  newNodeTemplate.setRelationships(oldNodeTemplate.getRelationships());
  nodeTemplates.put(oldNodeTemplate.getName(),newNodeTemplate);
  topologyService.unloadType(topology,oldNodeTemplate.getType());
  workflowBuilderService.removeNode(topology,oldNodeTemplate.getName(),oldNodeTemplate);
  if (topology.getSubstitutionMapping() != null) {
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getCapabilities());
    removeNodeTemplateSubstitutionTargetMapEntry(oldNodeTemplate.getName(),topology.getSubstitutionMapping().getRequirements());
  }
  log.debug(""String_Node_Str"",oldNodeTemplate.getName(),oldNodeTemplate.getName(),operation.getNewTypeId(),topology.getId());
  workflowBuilderService.addNode(workflowBuilderService.buildTopologyContext(topology),oldNodeTemplate.getName(),newNodeTemplate);
}"
62248,"@Override protected void processNodeOperation(AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Topology topology=EditionContextManager.getTopology();
  Set<CSARDependency> oldDependencies=topology.getDependencies();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  RelationshipType indexedRelationshipType=searchService.find(RelationshipType.class,operation.getRelationshipType(),operation.getRelationshipVersion());
  if (indexedRelationshipType == null) {
    throw new NotFoundException(RelationshipType.class.getName(),operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion(),""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  if (relationships.containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
  if (!Objects.equals(topology.getDependencies(),oldDependencies)) {
    csarService.setDependencies(topology.getId(),topology.getDependencies());
  }
}","@Override protected void processNodeOperation(AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  RelationshipType indexedRelationshipType=searchService.find(RelationshipType.class,operation.getRelationshipType(),operation.getRelationshipVersion());
  if (indexedRelationshipType == null) {
    throw new NotFoundException(RelationshipType.class.getName(),operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion(),""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  if (relationships.containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
}"
62249,"@Override public void process(AddSubstitutionTypeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (Objects.equals(EditionContextManager.getCsar().getDelegateType(),ArchiveDelegateType.APPLICATION)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (topology.getSubstitutionMapping() == null) {
    topology.setSubstitutionMapping(new SubstitutionMapping());
  }
  NodeType nodeType=csarRepoSearchService.getElementInDependencies(NodeType.class,operation.getElementId(),topology.getDependencies());
  if (nodeType == null) {
    nodeType=csarRepoSearchService.findMostRecent(NodeType.class,operation.getElementId());
    Set<CSARDependency> oldDependencies=topology.getDependencies();
    topologyService.loadType(topology,nodeType);
    if (!Objects.equals(topology.getDependencies(),oldDependencies)) {
      csarService.setDependencies(topology.getId(),topology.getDependencies());
    }
  }
  topology.getSubstitutionMapping().setSubstitutionType(nodeType);
}","@Override public void process(AddSubstitutionTypeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (Objects.equals(EditionContextManager.getCsar().getDelegateType(),ArchiveDelegateType.APPLICATION)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (topology.getSubstitutionMapping() == null) {
    topology.setSubstitutionMapping(new SubstitutionMapping());
  }
  NodeType nodeType=csarRepoSearchService.getElementInDependencies(NodeType.class,operation.getElementId(),topology.getDependencies());
  if (nodeType == null) {
    nodeType=csarRepoSearchService.findMostRecent(NodeType.class,operation.getElementId());
    Set<CSARDependency> oldDependencies=topology.getDependencies();
    topologyService.loadType(topology,nodeType);
  }
  topology.getSubstitutionMapping().setSubstitutionType(nodeType);
}"
62250,"@Override public void process(RemoveSubstitutionTypeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (topology.getSubstitutionMapping() == null || topology.getSubstitutionMapping().getSubstitutionType() == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
  NodeType substitutionType=topology.getSubstitutionMapping().getSubstitutionType();
  Csar csar=EditionContextManager.getCsar();
  Topology[] topologies=getTopologiesUsing(csar.getName(),csar.getName(),csar.getVersion());
  if (ArrayUtils.isNotEmpty(topologies)) {
    throw new DeleteReferencedObjectException(""String_Node_Str"");
  }
  Set<CSARDependency> oldDependencies=topology.getDependencies();
  topologyService.unloadType(topology,new String[]{substitutionType.getElementId()});
  if (!Objects.equals(topology.getDependencies(),oldDependencies)) {
    csarService.setDependencies(topology.getId(),topology.getDependencies());
  }
  topology.setSubstitutionMapping(null);
}","@Override public void process(RemoveSubstitutionTypeOperation operation){
  Topology topology=EditionContextManager.getTopology();
  if (topology.getSubstitutionMapping() == null || topology.getSubstitutionMapping().getSubstitutionType() == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
  NodeType substitutionType=topology.getSubstitutionMapping().getSubstitutionType();
  Csar csar=EditionContextManager.getCsar();
  Topology[] topologies=getTopologiesUsing(csar.getName(),csar.getName(),csar.getVersion());
  if (ArrayUtils.isNotEmpty(topologies)) {
    throw new DeleteReferencedObjectException(""String_Node_Str"");
  }
  topologyService.unloadType(topology,new String[]{substitutionType.getElementId()});
  topology.setSubstitutionMapping(null);
}"
62251,"/** 
 * Merge the given dependencies with the current ones.
 * @param dependencies
 */
public void setDependencies(Set<CSARDependency> dependencies,boolean override){
  if (override) {
    this.dependencies=dependencies;
  }
 else {
    setDependencies(dependencies);
  }
}","/** 
 * Merge the given dependencies with the current ones.
 * @param dependencies
 */
public void setDependencies(Set<CSARDependency> dependencies){
  this.dependencies=dependencies;
}"
62252,"@Override public void checkWriteAccess(Csar csar){
  if (toscaTypeSearchService.hasTypes(csar.getName(),csar.getVersion())) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER);
  }
  if (catalogService.exists(csar.getId())) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT);
  }
}","@Override public void checkWriteAccess(Csar csar){
  if (toscaTypeSearchService.hasTypes(csar.getName(),csar.getVersion())) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER);
  }
  if (topologyCatalogService.exists(csar.getId())) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT);
  }
}"
62253,"/** 
 * Get the path of the expended directory in which the CSAR is stored.
 * @param name The name of the csar.
 * @param version The version of the CSAR
 * @return The path to the expended csar file.
 */
Path getExpandedCSAR(String name,String version);","/** 
 * Get the path of the expanded directory in which the CSAR is stored.
 * @param name The name of the csar.
 * @param version The version of the CSAR
 * @return The path to the expended csar file.
 */
Path getExpandedCSAR(String name,String version);"
62254,"private void doSave() throws IOException {
  EditionContext context=EditionContextManager.get();
  if (context.getLastOperationIndex() <= context.getLastSavedOperationIndex()) {
    return;
  }
  StringBuilder commitMessage=new StringBuilder();
  for (int i=context.getLastSavedOperationIndex() + 1; i <= context.getLastOperationIndex(); i++) {
    AbstractEditorOperation operation=context.getOperations().get(i);
    IEditorOperationProcessor<?> processor=(IEditorOperationProcessor)processorMap.get(operation.getClass());
    if (processor instanceof IEditorCommitableProcessor) {
      ((IEditorCommitableProcessor)processor).beforeCommit(operation);
    }
    commitMessage.append(operation.getAuthor()).append(""String_Node_Str"").append(operation.commitMessage()).append(""String_Node_Str"");
  }
  saveYamlFile();
  Topology topology=EditionContextManager.getTopology();
  topologyServiceCore.save(topology);
  topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
  csarService.setDependencies(topology.getId(),topology.getDependencies());
  repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage.toString());
  context.setOperations(Lists.newArrayList(context.getOperations().subList(context.getLastOperationIndex() + 1,context.getOperations().size())));
  context.setLastOperationIndex(-1);
}","private void doSave() throws IOException {
  EditionContext context=EditionContextManager.get();
  if (context.getLastOperationIndex() <= context.getLastSavedOperationIndex()) {
    return;
  }
  StringBuilder commitMessage=new StringBuilder();
  for (int i=context.getLastSavedOperationIndex() + 1; i <= context.getLastOperationIndex(); i++) {
    AbstractEditorOperation operation=context.getOperations().get(i);
    IEditorOperationProcessor<?> processor=(IEditorOperationProcessor)processorMap.get(operation.getClass());
    if (processor instanceof IEditorCommitableProcessor) {
      ((IEditorCommitableProcessor)processor).beforeCommit(operation);
    }
    commitMessage.append(operation.getAuthor()).append(""String_Node_Str"").append(operation.commitMessage()).append(""String_Node_Str"");
  }
  saveYamlAndZipFile();
  Topology topology=EditionContextManager.getTopology();
  topologyServiceCore.save(topology);
  topologySubstitutionServive.updateSubstitutionType(topology,EditionContextManager.getCsar());
  csarService.setDependencies(topology.getId(),topology.getDependencies());
  repositoryService.commit(EditionContextManager.get().getCsar(),commitMessage.toString());
  context.setOperations(Lists.newArrayList(context.getOperations().subList(context.getLastOperationIndex() + 1,context.getOperations().size())));
  context.setLastOperationIndex(-1);
}"
62255,"@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
      if (editorService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        editorService.checkAuthorization(csarId);
      }
      String[] splitted=csarId.split(""String_Node_Str"");
      return chain.resolveResource(request,splitted[0] + ""String_Node_Str"" + splitted[1]+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}","@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
      String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
      if (csarAuthorizationFilter == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        csarAuthorizationFilter.checkReadAccess(new Csar(csarName,csarVersion));
      }
      return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}"
62256,"@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
  if (editorService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    editorService.checkAuthorization(csarId);
  }
  String[] splitted=csarId.split(""String_Node_Str"");
  return chain.resolveResource(request,splitted[0] + ""String_Node_Str"" + splitted[1]+ ""String_Node_Str""+ requestPath,locations);
}","@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarName=(String)uriTemplateVars.get(""String_Node_Str"");
  String csarVersion=(String)uriTemplateVars.get(""String_Node_Str"");
  if (csarAuthorizationFilter == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    csarAuthorizationFilter.checkReadAccess(new Csar(csarName,csarVersion));
  }
  return chain.resolveResource(request,csarName + ""String_Node_Str"" + csarVersion+ ""String_Node_Str""+ requestPath,locations);
}"
62257,"@PreDestroy public void unregister(){
  log.info(""String_Node_Str"");
  configuration.setEditorService(null);
}","@PreDestroy public void unregister(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(null);
}"
62258,"@PostConstruct public void register(){
  log.info(""String_Node_Str"");
  configuration.setEditorService(editorService);
}","@PostConstruct public void register(){
  log.info(""String_Node_Str"");
  configuration.setCsarAuthorizationFilter(csarAuthorizationFilter);
}"
62259,"/** 
 * Pull modifications from the git repository.
 * @param csar The concerned archive.
 * @param username The username of the git repository, null if none.
 * @param password The password of the git repository, null if none.
 * @param remoteBranch The name of the remote branch to pull from.
 */
public void pull(Csar csar,String username,String password,String remoteBranch){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  RepositoryManager.pull(archiveGitPath,username,password,remoteBranch);
}","/** 
 * Pull modifications from the git repository.
 * @param csar The concerned archive.
 * @param username The username of the git repository, null if none.
 * @param password The password of the git repository, null if none.
 * @param remoteBranch The name of the remote branch to pull from.
 */
public void pull(Csar csar,String username,String password,String remoteBranch){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getName(),csar.getVersion());
  RepositoryManager.pull(archiveGitPath,username,password,remoteBranch);
}"
62260,"/** 
 * Get the url of the remote git repository.
 * @param csar The concerned archive.
 * @param remoteName The name of the remote
 * @return The url corresponding to the remote name.
 */
public String getRemoteUrl(Csar csar,String remoteName){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  return RepositoryManager.getRemoteUrl(archiveGitPath,remoteName);
}","/** 
 * Get the url of the remote git repository.
 * @param csar The concerned archive.
 * @param remoteName The name of the remote
 * @return The url corresponding to the remote name.
 */
public String getRemoteUrl(Csar csar,String remoteName){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getName(),csar.getVersion());
  return RepositoryManager.getRemoteUrl(archiveGitPath,remoteName);
}"
62261,"/** 
 * Push modifications to git repository.
 * @param csar The concerned archive.
 * @param username The username of the git repository, null if none.
 * @param password The password of the git repository, null if none.
 * @param remoteBranch The name of the remote branch to push to.
 */
public void push(Csar csar,String username,String password,String remoteBranch){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  RepositoryManager.push(archiveGitPath,username,password,remoteBranch);
}","/** 
 * Push modifications to git repository.
 * @param csar The concerned archive.
 * @param username The username of the git repository, null if none.
 * @param password The password of the git repository, null if none.
 * @param remoteBranch The name of the remote branch to push to.
 */
public void push(Csar csar,String username,String password,String remoteBranch){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getName(),csar.getVersion());
  RepositoryManager.push(archiveGitPath,username,password,remoteBranch);
}"
62262,"/** 
 * Set a remote repository.
 * @param csar The archive for which to set the remote.
 * @param remoteName The remote name.
 * @param remoteUrl The repository url.
 */
public void setRemote(Csar csar,String remoteName,String remoteUrl){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  RepositoryManager.setRemote(archiveGitPath,remoteName,remoteUrl);
}","/** 
 * Set a remote repository.
 * @param csar The archive for which to set the remote.
 * @param remoteName The remote name.
 * @param remoteUrl The repository url.
 */
public void setRemote(Csar csar,String remoteName,String remoteUrl){
  Path archiveGitPath=csarRepositry.getExpandedCSAR(csar.getName(),csar.getVersion());
  RepositoryManager.setRemote(archiveGitPath,remoteName,remoteUrl);
}"
62263,"private void loadArchives(Path rootDirectory){
  if (!Files.exists(rootDirectory) || !Files.isDirectory(rootDirectory)) {
    log.warn(""String_Node_Str"",rootDirectory.toString());
    return;
  }
  SecurityContextImpl adminContext=new SecurityContextImpl();
  Set<SimpleGrantedAuthority> authorities=Sets.newHashSet();
  authorities.add(new SimpleGrantedAuthority(Role.ADMIN.name()));
  UsernamePasswordAuthenticationToken auth=new UsernamePasswordAuthenticationToken(""String_Node_Str"",""String_Node_Str"",authorities);
  adminContext.setAuthentication(auth);
  SecurityContextHolder.setContext(adminContext);
  try {
    List<Path> archives=FileUtil.listFiles(rootDirectory,""String_Node_Str"");
    Collections.sort(archives);
    for (    Path archive : archives) {
      try {
        log.debug(""String_Node_Str"",archive.toString());
        csarUploadService.upload(archive,CSARSource.ALIEN);
      }
 catch (      CSARVersionAlreadyExistsException e) {
        log.debug(""String_Node_Str"",archive.toString(),e);
      }
catch (      CSARUsedInActiveDeployment e) {
        log.debug(""String_Node_Str"",archive.toString(),e);
      }
catch (      ParsingException e) {
        log.error(""String_Node_Str"",archive.toString(),e);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    SecurityContextHolder.clearContext();
  }
}","private void loadArchives(Path rootDirectory){
  if (!Files.exists(rootDirectory) || !Files.isDirectory(rootDirectory)) {
    log.warn(""String_Node_Str"",rootDirectory.toString());
    return;
  }
  SecurityContextImpl adminContext=new SecurityContextImpl();
  Set<SimpleGrantedAuthority> authorities=Sets.newHashSet();
  authorities.add(new SimpleGrantedAuthority(Role.ADMIN.name()));
  UsernamePasswordAuthenticationToken auth=new UsernamePasswordAuthenticationToken(""String_Node_Str"",""String_Node_Str"",authorities);
  adminContext.setAuthentication(auth);
  SecurityContextHolder.setContext(adminContext);
  try {
    List<Path> archives=FileUtil.listFiles(rootDirectory,""String_Node_Str"");
    Collections.sort(archives);
    for (    Path archive : archives) {
      try {
        log.debug(""String_Node_Str"",archive.toString());
        csarUploadService.upload(archive,CSARSource.ALIEN);
      }
 catch (      AlreadyExistException e) {
        log.debug(""String_Node_Str"",archive.toString(),e);
      }
catch (      CSARUsedInActiveDeployment e) {
        log.debug(""String_Node_Str"",archive.toString(),e);
      }
catch (      ParsingException e) {
        log.error(""String_Node_Str"",archive.toString(),e);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    SecurityContextHolder.clearContext();
  }
}"
62264,"private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot,csarGitCheckoutLocation.getSubPath());
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths,parsingResult);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.get(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath(),CSARSource.GIT);
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  CSARVersionAlreadyExistsException e) {
    return parsingResult;
  }
catch (  CSARUsedInActiveDeployment e) {
    return parsingResult;
  }
}","private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot,csarGitCheckoutLocation.getSubPath());
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths,parsingResult);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.get(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath(),CSARSource.GIT);
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  AlreadyExistException e) {
    return parsingResult;
  }
catch (  CSARUsedInActiveDeployment e) {
    return parsingResult;
  }
}"
62265,"private void indexArchive(PluginArchive pluginArchive,Orchestrator orchestrator,Location location){
  ArchiveRoot archive=pluginArchive.getArchive();
  injectWorkSpace(archive.getNodeTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getArtifactTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getCapabilityTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getRelationshipTypes().values(),orchestrator,location);
  List<ParsingError> parsingErrors=Lists.newArrayList();
  try {
    archiveIndexer.importArchive(archive,CSARSource.ORCHESTRATOR,pluginArchive.getArchiveFilePath(),parsingErrors);
  }
 catch (  CSARVersionAlreadyExistsException e) {
    log.info(""String_Node_Str"");
  }
catch (  CSARUsedInActiveDeployment e) {
    log.info(""String_Node_Str"" + e.getMessage());
  }
  publishLocationTypeIndexedEvent(archive.getNodeTypes().values(),orchestrator,location);
}","private void indexArchive(PluginArchive pluginArchive,Orchestrator orchestrator,Location location){
  ArchiveRoot archive=pluginArchive.getArchive();
  injectWorkSpace(archive.getNodeTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getArtifactTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getCapabilityTypes().values(),orchestrator,location);
  injectWorkSpace(archive.getRelationshipTypes().values(),orchestrator,location);
  List<ParsingError> parsingErrors=Lists.newArrayList();
  try {
    archiveIndexer.importArchive(archive,CSARSource.ORCHESTRATOR,pluginArchive.getArchiveFilePath(),parsingErrors);
  }
 catch (  AlreadyExistException e) {
    log.info(""String_Node_Str"");
  }
catch (  CSARUsedInActiveDeployment e) {
    log.info(""String_Node_Str"" + e.getMessage());
  }
  publishLocationTypeIndexedEvent(archive.getNodeTypes().values(),orchestrator,location);
}"
62266,"/** 
 * Index archives defined at the orchestrator level by a plugin.
 * @param orchestratorFactory The orchestrator factory.
 * @param orchestratorInstance The instance of the orchestrator (created by the factory).
 */
public void indexOrchestratorArchives(IOrchestratorPluginFactory<IOrchestratorPlugin<?>,?> orchestratorFactory,IOrchestratorPlugin<Object> orchestratorInstance){
  for (  PluginArchive pluginArchive : orchestratorInstance.pluginArchives()) {
    try {
      archiveIndexer.importArchive(pluginArchive.getArchive(),CSARSource.ORCHESTRATOR,pluginArchive.getArchiveFilePath(),Lists.<ParsingError>newArrayList());
      publishLocationTypeIndexedEvent(pluginArchive.getArchive().getNodeTypes().values(),orchestratorFactory,null);
    }
 catch (    CSARVersionAlreadyExistsException e) {
      log.info(""String_Node_Str"" + e.getMessage());
    }
catch (    CSARUsedInActiveDeployment e) {
      log.info(""String_Node_Str"" + e.getMessage());
    }
  }
}","/** 
 * Index archives defined at the orchestrator level by a plugin.
 * @param orchestratorFactory The orchestrator factory.
 * @param orchestratorInstance The instance of the orchestrator (created by the factory).
 */
public void indexOrchestratorArchives(IOrchestratorPluginFactory<IOrchestratorPlugin<?>,?> orchestratorFactory,IOrchestratorPlugin<Object> orchestratorInstance){
  for (  PluginArchive pluginArchive : orchestratorInstance.pluginArchives()) {
    try {
      archiveIndexer.importArchive(pluginArchive.getArchive(),CSARSource.ORCHESTRATOR,pluginArchive.getArchiveFilePath(),Lists.<ParsingError>newArrayList());
      publishLocationTypeIndexedEvent(pluginArchive.getArchive().getNodeTypes().values(),orchestratorFactory,null);
    }
 catch (    AlreadyExistException e) {
      log.info(""String_Node_Str"" + e.getMessage());
    }
catch (    CSARUsedInActiveDeployment e) {
      log.info(""String_Node_Str"" + e.getMessage());
    }
  }
}"
62267,"@SuppressWarnings(""String_Node_Str"") private <V extends AbstractInheritableToscaType>void fillType(TypeMap typeMap,Topology topology,AbstractTemplate template,IPaaSTemplate<V> paaSTemplate,Class<V> clazz){
  V indexedToscaElement=getToscaType(template.getType(),typeMap,topology.getDependencies(),clazz);
  paaSTemplate.setIndexedToscaElement(indexedToscaElement);
  List<String> derivedFroms=indexedToscaElement.getDerivedFrom();
  List<V> derivedFromTypes=Lists.newArrayList();
  if (derivedFroms != null) {
    for (    String derivedFrom : derivedFroms) {
      derivedFromTypes.add(getToscaType(derivedFrom,typeMap,topology.getDependencies(),clazz));
    }
  }
  paaSTemplate.setDerivedFroms(derivedFromTypes);
  try {
    Path csarPath=repository.getCSAR(indexedToscaElement.getArchiveName(),indexedToscaElement.getArchiveVersion());
    paaSTemplate.setCsarPath(csarPath);
  }
 catch (  CSARVersionNotFoundException e) {
    log.debug(""String_Node_Str"" + indexedToscaElement + ""String_Node_Str""+ paaSTemplate);
  }
}","@SuppressWarnings(""String_Node_Str"") private <V extends AbstractInheritableToscaType>void fillType(TypeMap typeMap,Topology topology,AbstractTemplate template,IPaaSTemplate<V> paaSTemplate,Class<V> clazz){
  V indexedToscaElement=getToscaType(template.getType(),typeMap,topology.getDependencies(),clazz);
  paaSTemplate.setIndexedToscaElement(indexedToscaElement);
  List<String> derivedFroms=indexedToscaElement.getDerivedFrom();
  List<V> derivedFromTypes=Lists.newArrayList();
  if (derivedFroms != null) {
    for (    String derivedFrom : derivedFroms) {
      derivedFromTypes.add(getToscaType(derivedFrom,typeMap,topology.getDependencies(),clazz));
    }
  }
  paaSTemplate.setDerivedFroms(derivedFromTypes);
  try {
    Path csarPath=repository.getCSAR(indexedToscaElement.getWorkspace(),indexedToscaElement.getArchiveName(),indexedToscaElement.getArchiveVersion());
    paaSTemplate.setCsarPath(csarPath);
  }
 catch (  AlreadyExistException e) {
    log.debug(""String_Node_Str"" + indexedToscaElement + ""String_Node_Str""+ paaSTemplate);
  }
}"
62268,"/** 
 * Upload a TOSCA archive and index its components.
 * @param path The archive path.
 * @param csarSource The source of the upload.
 * @return The Csar object from the parsing.
 * @throws ParsingException
 * @throws CSARVersionAlreadyExistsException
 * @throws CSARUsedInActiveDeployment
 */
@ToscaContextual public ParsingResult<Csar> upload(Path path,CSARSource csarSource) throws ParsingException, CSARVersionAlreadyExistsException, CSARUsedInActiveDeployment {
  ParsingResult<ArchiveRoot> parsingResult=parser.parseWithExistingContext(path);
  final ArchiveRoot archiveRoot=parsingResult.getResult();
  if (archiveRoot.hasToscaTopologyTemplate()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT,Role.ADMIN);
  }
  if (archiveRoot.hasToscaTypes()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER,Role.ADMIN);
  }
  if (parsingResult.hasError(ParsingErrorLevel.ERROR)) {
    return toSimpleResult(parsingResult);
  }
  archiveIndexer.importArchive(archiveRoot,csarSource,path,parsingResult.getContext().getParsingErrors());
  try {
    suggestionService.postProcessSuggestionFromArchive(parsingResult);
    suggestionService.setAllSuggestionIdOnPropertyDefinition();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return toSimpleResult(parsingResult);
}","/** 
 * Upload a TOSCA archive and index its components.
 * @param path The archive path.
 * @param csarSource The source of the upload.
 * @return The Csar object from the parsing.
 * @throws ParsingException
 * @throws CSARUsedInActiveDeployment
 */
@ToscaContextual public ParsingResult<Csar> upload(Path path,CSARSource csarSource) throws ParsingException, CSARUsedInActiveDeployment {
  ParsingResult<ArchiveRoot> parsingResult=parser.parseWithExistingContext(path);
  final ArchiveRoot archiveRoot=parsingResult.getResult();
  if (archiveRoot.hasToscaTopologyTemplate()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT,Role.ADMIN);
  }
  if (archiveRoot.hasToscaTypes()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER,Role.ADMIN);
  }
  if (parsingResult.hasError(ParsingErrorLevel.ERROR)) {
    return toSimpleResult(parsingResult);
  }
  archiveIndexer.importArchive(archiveRoot,csarSource,path,parsingResult.getContext().getParsingErrors());
  try {
    suggestionService.postProcessSuggestionFromArchive(parsingResult);
    suggestionService.setAllSuggestionIdOnPropertyDefinition();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return toSimpleResult(parsingResult);
}"
62269,"@Override @Before public void before() throws Exception {
  super.before();
  saveDataToES(true);
}","@Override @Before public void before() throws Exception {
  super.before();
  saveDataToES();
}"
62270,"private void saveDataToES(boolean refresh) throws IOException, IndexingServiceException {
  testDataList.clear();
  Path path=Paths.get(""String_Node_Str"");
  FacetedSearchResult res=jsonMapper.readValue(path.toFile(),FacetedSearchResult.class);
  Object[] data=res.getData();
  for (  Object element : data) {
    String serializeDatum=jsonMapper.writeValueAsString(element);
    NodeType indexedNodeType=jsonMapper.readValue(serializeDatum,NodeType.class);
    String typeName=MappingBuilder.indexTypeFromClass(NodeType.class);
    dao.save(indexedNodeType);
    assertDocumentExisit(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,typeName,indexedNodeType.getId(),true);
    testDataList.add(indexedNodeType);
    for (    CapabilityDefinition capaDef : indexedNodeType.getCapabilities()) {
      if (capaDef.getType().equals(""String_Node_Str"")) {
        jndiTestDataList.add(indexedNodeType);
      }
    }
  }
  refresh();
}","private void saveDataToES() throws IOException, IndexingServiceException {
  testDataList.clear();
  Path path=Paths.get(""String_Node_Str"");
  FacetedSearchResult res=jsonMapper.readValue(path.toFile(),FacetedSearchResult.class);
  Object[] data=res.getData();
  for (  Object element : data) {
    String serializeDatum=jsonMapper.writeValueAsString(element);
    NodeType indexedNodeType=jsonMapper.readValue(serializeDatum,NodeType.class);
    indexedNodeType.setWorkspace(AlienConstants.GLOBAL_WORKSPACE_ID);
    String typeName=MappingBuilder.indexTypeFromClass(NodeType.class);
    dao.save(indexedNodeType);
    assertDocumentExisit(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,typeName,indexedNodeType.getId(),true);
    testDataList.add(indexedNodeType);
    for (    CapabilityDefinition capaDef : indexedNodeType.getCapabilities()) {
      if (capaDef.getType().equals(""String_Node_Str"")) {
        jndiTestDataList.add(indexedNodeType);
      }
    }
  }
  refresh();
}"
62271,"@Test public void testScoreService() throws InterruptedException {
  NodeType indexedNodeType=new NodeType();
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String mordor100Id=indexedNodeType.getId();
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String mordor101Id=indexedNodeType.getId();
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String isengard100Id=indexedNodeType.getId();
  Topology topology=new Topology();
  topology.setId(""String_Node_Str"");
  topology.setNodeTemplates(MapUtil.newHashMap(new String[]{""String_Node_Str""},new NodeTemplate[]{new NodeTemplate(indexedNodeType.getId(),null,null,null,null,null,null,null)}));
  dao.save(topology);
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(null);
  dao.save(indexedNodeType);
  String osgiliath100Id=indexedNodeType.getId();
  scoreService.run();
  GetMultipleDataResult data=dao.search(NodeType.class,""String_Node_Str"",null,Constants.DEFAULT_ES_SEARCH_SIZE);
  Assert.assertEquals(4,data.getData().length);
  Assert.assertEquals(isengard100Id,((NodeType)data.getData()[0]).getId());
  Assert.assertEquals(1011,((NodeType)data.getData()[0]).getAlienScore());
  Assert.assertEquals(mordor101Id,((NodeType)data.getData()[1]).getId());
  Assert.assertEquals(1010,((NodeType)data.getData()[1]).getAlienScore());
  Assert.assertEquals(osgiliath100Id,((NodeType)data.getData()[2]).getId());
  Assert.assertEquals(1000,((NodeType)data.getData()[2]).getAlienScore());
  Assert.assertEquals(mordor100Id,((NodeType)data.getData()[3]).getId());
  Assert.assertEquals(10,((NodeType)data.getData()[3]).getAlienScore());
}","@Test public void testScoreService() throws InterruptedException {
  NodeType indexedNodeType=new NodeType();
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setWorkspace(AlienConstants.GLOBAL_WORKSPACE_ID);
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String mordor100Id=indexedNodeType.getId();
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String mordor101Id=indexedNodeType.getId();
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(Lists.newArrayList(""String_Node_Str""));
  dao.save(indexedNodeType);
  String isengard100Id=indexedNodeType.getId();
  Topology topology=new Topology();
  topology.setId(""String_Node_Str"");
  topology.setArchiveName(""String_Node_Str"");
  topology.setArchiveVersion(""String_Node_Str"");
  topology.setWorkspace(AlienConstants.GLOBAL_WORKSPACE_ID);
  topology.setNodeTemplates(MapUtil.newHashMap(new String[]{""String_Node_Str""},new NodeTemplate[]{new NodeTemplate(indexedNodeType.getId(),null,null,null,null,null,null,null)}));
  dao.save(topology);
  indexedNodeType.setElementId(""String_Node_Str"");
  indexedNodeType.setArchiveName(""String_Node_Str"");
  indexedNodeType.setArchiveVersion(""String_Node_Str"");
  indexedNodeType.setCreationDate(new Date());
  indexedNodeType.setLastUpdateDate(new Date());
  indexedNodeType.setDefaultCapabilities(null);
  dao.save(indexedNodeType);
  String osgiliath100Id=indexedNodeType.getId();
  scoreService.run();
  GetMultipleDataResult data=dao.search(NodeType.class,""String_Node_Str"",null,Constants.DEFAULT_ES_SEARCH_SIZE);
  Assert.assertEquals(4,data.getData().length);
  Assert.assertEquals(isengard100Id,((NodeType)data.getData()[0]).getId());
  Assert.assertEquals(1011,((NodeType)data.getData()[0]).getAlienScore());
  Assert.assertEquals(mordor101Id,((NodeType)data.getData()[1]).getId());
  Assert.assertEquals(1010,((NodeType)data.getData()[1]).getAlienScore());
  Assert.assertEquals(osgiliath100Id,((NodeType)data.getData()[2]).getId());
  Assert.assertEquals(1000,((NodeType)data.getData()[2]).getAlienScore());
  Assert.assertEquals(mordor100Id,((NodeType)data.getData()[3]).getId());
  Assert.assertEquals(10,((NodeType)data.getData()[3]).getAlienScore());
}"
62272,"public static NodeType createIndexedNodeType(String id,String archiveName,String archiveVersion,String description,List<CapabilityDefinition> capabilities,List<RequirementDefinition> requirements,List<String> derivedFroms,List<String> defaultCapabilities,List<Tag> tags,Date creationDate,Date lastUpdateDate){
  NodeType nodeType=new NodeType();
  nodeType.setElementId(id);
  nodeType.setArchiveName(archiveName);
  nodeType.setArchiveVersion(archiveVersion);
  nodeType.setCapabilities(capabilities);
  nodeType.setDescription(description);
  nodeType.setDefaultCapabilities(defaultCapabilities);
  nodeType.setRequirements(requirements);
  nodeType.setDerivedFrom(derivedFroms);
  nodeType.setTags(tags);
  nodeType.setCreationDate(creationDate);
  nodeType.setLastUpdateDate(lastUpdateDate);
  return nodeType;
}","public static NodeType createIndexedNodeType(String id,String archiveName,String archiveVersion,String description,List<CapabilityDefinition> capabilities,List<RequirementDefinition> requirements,List<String> derivedFroms,List<String> defaultCapabilities,List<Tag> tags,Date creationDate,Date lastUpdateDate){
  NodeType nodeType=new NodeType();
  nodeType.setElementId(id);
  nodeType.setArchiveName(archiveName);
  nodeType.setArchiveVersion(archiveVersion);
  nodeType.setWorkspace(AlienConstants.GLOBAL_WORKSPACE_ID);
  nodeType.setCapabilities(capabilities);
  nodeType.setDescription(description);
  nodeType.setDefaultCapabilities(defaultCapabilities);
  nodeType.setRequirements(requirements);
  nodeType.setDerivedFrom(derivedFroms);
  nodeType.setTags(tags);
  nodeType.setCreationDate(creationDate);
  nodeType.setLastUpdateDate(lastUpdateDate);
  return nodeType;
}"
62273,"private void resetRemovedArtifact(IArtifact artifact,String removedFilePath){
  if (artifact.getArtifactRepository() == null) {
    if (removedFilePath.equals(artifact.getArtifactRef())) {
      artifact.setArtifactRef(null);
    }
  }
}","private void resetRemovedArtifact(IArtifact artifact,String removedFilePath){
  if (artifact != null && artifact.getArtifactRepository() == null) {
    if (removedFilePath.equals(artifact.getArtifactRef())) {
      artifact.setArtifactRef(null);
    }
  }
}"
62274,"/** 
 * Update the name and description of an application.
 * @param applicationId The application id.
 * @param newName The new name for the application.
 * @param newDescription The new description for the application.
 */
public void update(String applicationId,String newName,String newDescription){
  Application application=getOrFail(applicationId);
  AuthorizationUtil.checkAuthorizationForApplication(application,ApplicationRole.APPLICATION_MANAGER);
  if (application.getName() == null || application.getName().isEmpty()) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  if (!application.getName().equals(newName)) {
    checkApplicationName(newName);
  }
  application.setName(newName);
  application.setDescription(newDescription);
  application.setLastUpdateDate(new Date());
  alienDAO.save(application);
}","/** 
 * Update the name and description of an application.
 * @param applicationId The application id.
 * @param newName The new name for the application.
 * @param newDescription The new description for the application.
 */
public void update(String applicationId,String newName,String newDescription){
  Application application=getOrFail(applicationId);
  AuthorizationUtil.checkAuthorizationForApplication(application,ApplicationRole.APPLICATION_MANAGER);
  if (newName != null && !newName.isEmpty() && !application.getName().equals(newName)) {
    checkApplicationName(newName);
    application.setName(newName);
  }
  if (newDescription != null) {
    application.setDescription(newDescription);
  }
  application.setLastUpdateDate(new Date());
  alienDAO.save(application);
}"
62275,"@Override @SneakyThrows public void beforeCommit(T operation){
  Path targetPath=EditionContextManager.get().getLocalGitPath().resolve(operation.getPath());
  Files.createDirectories(targetPath.getParent());
  try (InputStream inputStream=artifactRepository.getFile(operation.getTempFileId())){
    Files.copy(inputStream,targetPath,StandardCopyOption.REPLACE_EXISTING);
  }
   FileProcessorHelper.getFileTreeNode(operation.getPath()).setArtifactId(null);
  artifactRepository.deleteFile(operation.getTempFileId());
}","@Override @SneakyThrows public void beforeCommit(T operation){
  try {
    TreeNode fileTreeNode=FileProcessorHelper.getFileTreeNode(operation.getPath());
    Path targetPath=EditionContextManager.get().getLocalGitPath().resolve(operation.getPath());
    Files.createDirectories(targetPath.getParent());
    try (InputStream inputStream=artifactRepository.getFile(operation.getTempFileId())){
      Files.copy(inputStream,targetPath,StandardCopyOption.REPLACE_EXISTING);
    }
     artifactRepository.deleteFile(operation.getTempFileId());
    fileTreeNode.setArtifactId(null);
  }
 catch (  NotFoundException e) {
    log.debug(""String_Node_Str"",e);
  }
}"
62276,"/** 
 * Initialize the dao after being loaded by spring (Create the indexes).
 */
@PostConstruct public void initEnvironment(){
  try {
    getMappingBuilder().initialize(""String_Node_Str"");
    getMappingBuilder().initialize(""String_Node_Str"");
  }
 catch (  IntrospectionException|IOException e) {
    throw new IndexingServiceException(""String_Node_Str"",e);
  }
  setJsonMapper(ElasticSearchMapper.getInstance());
  initIndices(TOSCA_ELEMENT_INDEX,null,CapabilityType.class,ArtifactType.class,RelationshipType.class,NodeType.class,DataType.class,PrimitiveDataType.class);
  initIndices(TOSCA_ELEMENT_INDEX,null,AbstractInstantiableToscaType.class,AbstractToscaType.class);
  initIndice(Application.class);
  initIndice(ApplicationVersion.class);
  initIndice(ApplicationEnvironment.class);
  initIndice(Topology.class);
  initIndice(Csar.class);
  initIndice(Repository.class);
  initIndice(Plugin.class);
  initIndice(PluginConfiguration.class);
  initIndice(MetaPropConfiguration.class);
  initIndice(Orchestrator.class);
  initIndice(OrchestratorConfiguration.class);
  initIndice(Location.class);
  initIndice(LocationResourceTemplate.class);
  initIndice(Deployment.class);
  initIndice(CsarGitRepository.class);
  initIndice(DeploymentTopology.class);
  initIndices(SUGGESTION_INDEX,null,AbstractSuggestionEntry.class,SuggestionEntry.class,SimpleSuggestionEntry.class);
  initCompleted();
}","/** 
 * Initialize the dao after being loaded by spring (Create the indexes).
 */
@PostConstruct public void initEnvironment(){
  try {
    getMappingBuilder().initialize(""String_Node_Str"");
    getMappingBuilder().initialize(""String_Node_Str"");
    getMappingBuilder().parseClassMapping(AbstractToscaType.class,""String_Node_Str"");
  }
 catch (  IntrospectionException|IOException e) {
    throw new IndexingServiceException(""String_Node_Str"",e);
  }
  setJsonMapper(ElasticSearchMapper.getInstance());
  initIndices(TOSCA_ELEMENT_INDEX,null,CapabilityType.class,ArtifactType.class,RelationshipType.class,NodeType.class,DataType.class,PrimitiveDataType.class);
  initIndices(TOSCA_ELEMENT_INDEX,null,AbstractInstantiableToscaType.class,AbstractToscaType.class);
  initIndice(Application.class);
  initIndice(ApplicationVersion.class);
  initIndice(ApplicationEnvironment.class);
  initIndice(Topology.class);
  initIndice(Csar.class);
  initIndice(Repository.class);
  initIndice(Plugin.class);
  initIndice(PluginConfiguration.class);
  initIndice(MetaPropConfiguration.class);
  initIndice(Orchestrator.class);
  initIndice(OrchestratorConfiguration.class);
  initIndice(Location.class);
  initIndice(LocationResourceTemplate.class);
  initIndice(Deployment.class);
  initIndice(CsarGitRepository.class);
  initIndice(DeploymentTopology.class);
  initIndices(SUGGESTION_INDEX,null,AbstractSuggestionEntry.class,SuggestionEntry.class,SimpleSuggestionEntry.class);
  initCompleted();
}"
62277,"/** 
 * Delete an archive an all its registered / saved elements Abort the deletion if the archive is used by some resources
 * @param csar
 * @return A List of {@link Usage} representing the resources using this archive.
 */
public List<Usage> deleteCsarWithElements(Csar csar){
  List<Usage> relatedResourceList=getCsarRelatedResourceList(csar);
  if (relatedResourceList.isEmpty()) {
    indexerService.deleteElements(csar.getName(),csar.getVersion(),csar.getHash());
    csarDAO.delete(Csar.class,csar.getId());
    alienRepository.removeCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  }
  return relatedResourceList;
}","/** 
 * Delete an archive an all its registered / saved elements Abort the deletion if the archive is used by some resources
 * @param csar
 * @return A List of {@link Usage} representing the resources using this archive.
 */
public List<Usage> deleteCsarWithElements(Csar csar){
  List<Usage> relatedResourceList=getCsarRelatedResourceList(csar);
  if (relatedResourceList.isEmpty()) {
    deleteCsar(csar);
  }
  return relatedResourceList;
}"
62278,"private void deleteCsar(Csar csar){
  csarDAO.delete(Topology.class,csar.getId());
  indexerService.deleteElements(csar.getName(),csar.getVersion(),csar.getWorkspace());
  csarDAO.delete(Csar.class,csar.getId());
  alienRepository.removeCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
}","private void deleteCsar(Csar csar){
  csarDAO.delete(Topology.class,csar.getId());
  indexerService.deleteElements(csar.getName(),csar.getVersion(),csar.getWorkspace());
  csarDAO.delete(Csar.class,csar.getId());
  if (csarDAO.buildQuery(Csar.class).setFilters(singleKeyFilter(""String_Node_Str"",csar.getWorkspace())).count() == 0) {
    alienRepository.removeWorkspace(csar.getWorkspace());
  }
 else {
    alienRepository.removeCSAR(csar.getWorkspace(),csar.getName(),csar.getVersion());
  }
}"
62279,"@Override public void removeCSAR(String workspace,String name,String version){
  Path csarDirectoryPath=rootPath.resolve(name).resolve(version);
  if (Files.isDirectory(csarDirectoryPath)) {
    FileSystemUtils.deleteRecursively(csarDirectoryPath.toFile());
  }
}","@Override public void removeCSAR(String workspace,String name,String version){
  Path csarDirectoryPath=rootPath.resolve(workspace).resolve(name).resolve(version);
  if (Files.isDirectory(csarDirectoryPath)) {
    FileSystemUtils.deleteRecursively(csarDirectoryPath.toFile());
  }
}"
62280,"/** 
 * Create if not exist indices. A TTL can be defined for all indices under this index (ESearch TTL notation)
 * @param indexName The index to initialize
 * @param classes An array of classes to map to this index.
 */
@SneakyThrows({IOException.class,IntrospectionException.class}) public void initIndices(String indexName,String ttl,Class<?>... classes){
  if (indexExist(indexName)) {
    addToMappedClasses(indexName,classes);
  }
 else {
    CreateIndexRequestBuilder createIndexRequestBuilder=esClient.getClient().admin().indices().prepareCreate(indexName);
    for (    Class<?> clazz : classes) {
      String typeName=addToMappedClasses(indexName,clazz);
      String typeMapping=mappingBuilder.getMapping(clazz);
      Map<String,Object> typesMap=JsonUtil.toMap(typeMapping);
      addAlienScore(typesMap);
      addTTL(typesMap,ttl);
      String mapping=jsonMapper.writeValueAsString(typesMap);
      createIndexRequestBuilder.addMapping(typeName,mapping);
    }
    try {
      final CreateIndexResponse createResponse=createIndexRequestBuilder.execute().actionGet();
      if (!createResponse.isAcknowledged()) {
        throw new IndexingServiceException(""String_Node_Str"" + indexName + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",indexName);
    }
  }
}","/** 
 * Create if not exist indices. A TTL can be defined for all indices under this index (ESearch TTL notation)
 * @param indexName The index to initialize
 * @param classes An array of classes to map to this index.
 */
@SneakyThrows({IOException.class,IntrospectionException.class}) public void initIndices(String indexName,String ttl,Class<?>... classes){
  if (indexExist(indexName)) {
    addToMappedClasses(indexName,classes);
  }
 else {
    CreateIndexRequestBuilder createIndexRequestBuilder=esClient.getClient().admin().indices().prepareCreate(indexName);
    for (    Class<?> clazz : classes) {
      String typeName=addToMappedClasses(indexName,clazz);
      if (Modifier.isAbstract(clazz.getModifiers())) {
        continue;
      }
      String typeMapping=mappingBuilder.getMapping(clazz);
      Map<String,Object> typesMap=JsonUtil.toMap(typeMapping);
      addAlienScore(typesMap);
      addTTL(typesMap,ttl);
      String mapping=jsonMapper.writeValueAsString(typesMap);
      createIndexRequestBuilder.addMapping(typeName,mapping);
    }
    try {
      final CreateIndexResponse createResponse=createIndexRequestBuilder.execute().actionGet();
      if (!createResponse.isAcknowledged()) {
        throw new IndexingServiceException(""String_Node_Str"" + indexName + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",indexName);
    }
  }
}"
62281,"/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 */
public synchronized void importNewArchive(Csar csar,Topology topology){
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  csarService.save(csar);
  topologyServiceCore.save(topology);
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  archiveRepositry.storeCSAR(csar,yaml);
}","/** 
 * <p> Import a new empty archive with a topology. </p> <p> Note: this archive is not created from parsing but from alien4cloud API. This service will index the archive and topology as well as initialize the file repository and tosca yaml. </p> <p> This method cannot be used to override a topology, even a SNAPSHOT as any update to a topology from the API MUST be done through the editor. </p>
 * @param csar The archive to be imported.
 * @param topology The topology to be part of the topology.
 */
public synchronized void importNewArchive(Csar csar,Topology topology){
  ensureUniqueness(csar.getName(),csar.getVersion());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  if (csar.getYamlFilePath() == null) {
    csar.setYamlFilePath(""String_Node_Str"");
  }
  String yaml=exportService.getYaml(csar,topology);
  csarService.save(csar);
  topologyServiceCore.save(topology);
  archiveRepositry.storeCSAR(csar,yaml);
}"
62282,"@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absEditorRepo=prefix.concat(safeGetRealPath(editorRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absEditorRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String topologyId=(String)uriTemplateVars.get(""String_Node_Str"");
      if (editorService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        editorService.checkAuthorization(topologyId);
      }
      return chain.resolveResource(request,topologyId + ""String_Node_Str"" + requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}","@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
      if (editorService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        editorService.checkAuthorization(csarId);
      }
      String[] splitted=csarId.split(""String_Node_Str"");
      return chain.resolveResource(request,splitted[2] + ""String_Node_Str"" + splitted[0]+ ""String_Node_Str""+ splitted[1]+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}"
62283,"@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String topologyId=(String)uriTemplateVars.get(""String_Node_Str"");
  if (editorService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    editorService.checkAuthorization(topologyId);
  }
  return chain.resolveResource(request,topologyId + ""String_Node_Str"" + requestPath,locations);
}","@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
  if (editorService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    editorService.checkAuthorization(csarId);
  }
  String[] splitted=csarId.split(""String_Node_Str"");
  return chain.resolveResource(request,splitted[2] + ""String_Node_Str"" + splitted[0]+ ""String_Node_Str""+ splitted[1]+ ""String_Node_Str""+ requestPath,locations);
}"
62284,"/** 
 * Perform validation of a Tosca archive.
 * @param archiveRoot The archive to validate and post process.
 */
public void process(ArchiveRoot archiveRoot){
  String archiveName=archiveRoot.getArchive().getName();
  String archiveVersion=archiveRoot.getArchive().getVersion();
  if (archiveName == null) {
    archiveRoot.getArchive().setName(ParsingContextExecution.getFileName());
  }
  if (archiveVersion == null) {
    archiveRoot.getArchive().setVersion(""String_Node_Str"");
  }
  archiveRoot.getArchive().setWorkspace(""String_Node_Str"");
  ToscaContext.get().register(archiveRoot);
  doProcess(archiveRoot);
  archiveRoot.getArchive().setName(archiveName);
  archiveRoot.getArchive().setVersion(archiveVersion);
}","/** 
 * Perform validation of a Tosca archive.
 * @param archiveRoot The archive to validate and post process.
 */
public void process(ArchiveRoot archiveRoot){
  String archiveName=archiveRoot.getArchive().getName();
  String archiveVersion=archiveRoot.getArchive().getVersion();
  archiveRoot.getArchive().setYamlFilePath(ParsingContextExecution.getFileName());
  if (archiveName == null) {
    archiveRoot.getArchive().setName(ParsingContextExecution.getFileName());
  }
  if (archiveVersion == null) {
    archiveRoot.getArchive().setVersion(""String_Node_Str"");
  }
  archiveRoot.getArchive().setWorkspace(""String_Node_Str"");
  ToscaContext.get().register(archiveRoot);
  doProcess(archiveRoot);
  archiveRoot.getArchive().setName(archiveName);
  archiveRoot.getArchive().setVersion(archiveVersion);
}"
62285,"@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
      if (editorService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        editorService.checkAuthorization(csarId);
      }
      String[] splitted=csarId.split(""String_Node_Str"");
      return chain.resolveResource(request,splitted[2] + ""String_Node_Str"" + splitted[0]+ ""String_Node_Str""+ splitted[1]+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}","@Override public void addResourceHandlers(ResourceHandlerRegistry registry){
  String prefix=""String_Node_Str"";
  String absToscaRepo=prefix.concat(safeGetRealPath(toscaRepo)).concat(""String_Node_Str"");
  String absPluginUi=prefix.concat(safeGetRealPath(pluginsUi)).concat(""String_Node_Str"");
  log.info(""String_Node_Str"",absToscaRepo);
  log.info(""String_Node_Str"",absPluginUi);
  registry.addResourceHandler(""String_Node_Str"").addResourceLocations(absToscaRepo).resourceChain(false).addResolver(new ResourceResolver(){
    @Override public Resource resolveResource(    HttpServletRequest request,    String requestPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      log.debug(""String_Node_Str"");
      ServletWebRequest webRequest=new ServletWebRequest(request);
      Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
      String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
      if (editorService == null) {
        throw new NotFoundException(""String_Node_Str"");
      }
 else {
        editorService.checkAuthorization(csarId);
      }
      String[] splitted=csarId.split(""String_Node_Str"");
      return chain.resolveResource(request,splitted[0] + ""String_Node_Str"" + splitted[1]+ ""String_Node_Str""+ requestPath,locations);
    }
    @Override public String resolveUrlPath(    String resourceUrlPath,    List<? extends Resource> locations,    ResourceResolverChain chain){
      return chain.resolveUrlPath(resourceUrlPath,locations);
    }
  }
);
  registry.addResourceHandler(PLUGIN_STATIC_ENDPOINT + ""String_Node_Str"").addResourceLocations(absPluginUi);
}"
62286,"@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
  if (editorService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    editorService.checkAuthorization(csarId);
  }
  String[] splitted=csarId.split(""String_Node_Str"");
  return chain.resolveResource(request,splitted[2] + ""String_Node_Str"" + splitted[0]+ ""String_Node_Str""+ splitted[1]+ ""String_Node_Str""+ requestPath,locations);
}","@Override public Resource resolveResource(HttpServletRequest request,String requestPath,List<? extends Resource> locations,ResourceResolverChain chain){
  log.debug(""String_Node_Str"");
  ServletWebRequest webRequest=new ServletWebRequest(request);
  Map uriTemplateVars=(Map)webRequest.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE,0);
  String csarId=(String)uriTemplateVars.get(""String_Node_Str"");
  if (editorService == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
 else {
    editorService.checkAuthorization(csarId);
  }
  String[] splitted=csarId.split(""String_Node_Str"");
  return chain.resolveResource(request,splitted[0] + ""String_Node_Str"" + splitted[1]+ ""String_Node_Str""+ requestPath,locations);
}"
62287,"/** 
 * Create a new version for an application/topology template based on an existing topology.
 * @param delegateId The id of the application/topology template for which to create the version.
 * @param topologyToCloneId The id of the topology to clone for the version's topology.
 * @param version The number version of the new application version.
 */
public V createVersion(String delegateId,String topologyToCloneId,String version,String description,Topology providedTopology){
  if (isVersionNameExist(delegateId,version)) {
    throw new AlreadyExistException(""String_Node_Str"" + version + ""String_Node_Str"");
  }
  VersionUtil.parseVersion(version);
  V appVersion=buildVersionImplem();
  appVersion.setId(UUID.randomUUID().toString());
  appVersion.setDelegateId(delegateId);
  appVersion.setVersion(version);
  appVersion.setLatest(true);
  appVersion.setSnapshot(VersionUtil.isSnapshot(version));
  appVersion.setReleased(!VersionUtil.isSnapshot(version));
  appVersion.setDescription(description);
  Topology topology=null;
  if (providedTopology != null) {
    topology=providedTopology;
  }
 else {
    if (topologyToCloneId != null) {
      topology=alienDAO.findById(Topology.class,topologyToCloneId);
    }
 else {
      topology=new Topology();
    }
    topology.setId(UUID.randomUUID().toString());
  }
  topology.setDelegateId(delegateId);
  topology.setDelegateType(getDelegateClass().getSimpleName().toLowerCase());
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  if (!VersionUtil.isSnapshot(version)) {
    checkTopologyReleasable(topology);
  }
  topologyServiceCore.save(topology);
  appVersion.setTopologyId(topology.getId());
  alienDAO.save(appVersion);
  return appVersion;
}","/** 
 * Create a new version for an application/topology template based on an existing topology.
 * @param delegateId The id of the application/topology template for which to create the version.
 * @param topologyToCloneId The id of the topology to clone for the version's topology.
 * @param version The number version of the new application version.
 */
public V createVersion(String delegateId,String topologyToCloneId,String version,String description,Topology providedTopology){
  if (isVersionNameExist(delegateId,version)) {
    throw new AlreadyExistException(""String_Node_Str"" + version + ""String_Node_Str"");
  }
  VersionUtil.parseVersion(version);
  V appVersion=buildVersionImplem();
  appVersion.setId(UUID.randomUUID().toString());
  appVersion.setDelegateId(delegateId);
  appVersion.setVersion(version);
  appVersion.setLatest(true);
  appVersion.setSnapshot(VersionUtil.isSnapshot(version));
  appVersion.setReleased(!VersionUtil.isSnapshot(version));
  appVersion.setDescription(description);
  Topology topology=null;
  if (providedTopology != null) {
    topology=providedTopology;
  }
 else {
    if (topologyToCloneId != null) {
      topology=alienDAO.findById(Topology.class,topologyToCloneId);
    }
 else {
      topology=new Topology();
    }
    topology.setId(UUID.randomUUID().toString());
  }
  workflowBuilderService.initWorkflows(workflowBuilderService.buildTopologyContext(topology));
  if (!VersionUtil.isSnapshot(version)) {
    checkTopologyReleasable(topology);
  }
  topologyServiceCore.save(topology);
  appVersion.setTopologyId(topology.getId());
  alienDAO.save(appVersion);
  return appVersion;
}"
62288,"/** 
 * Initialize the dao after being loaded by spring (Create the indexes).
 */
@PostConstruct public void initEnvironment(){
  try {
    getMappingBuilder().initialize(""String_Node_Str"");
  }
 catch (  IntrospectionException|IOException e) {
    throw new IndexingServiceException(""String_Node_Str"",e);
  }
  setJsonMapper(ElasticSearchMapper.getInstance());
  initIndices(TOSCA_ELEMENT_INDEX,null,CapabilityType.class,ArtifactType.class,RelationshipType.class,NodeType.class,DataType.class,PrimitiveDataType.class);
  initIndices(TOSCA_ELEMENT_INDEX,null,AbstractInstantiableToscaType.class,AbstractToscaType.class);
  initIndice(Application.class);
  initIndice(ApplicationVersion.class);
  initIndice(ApplicationEnvironment.class);
  initIndice(Topology.class);
  initIndice(Csar.class);
  initIndice(Repository.class);
  initIndice(Plugin.class);
  initIndice(PluginConfiguration.class);
  initIndice(TopologyTemplate.class);
  initIndice(TopologyTemplateVersion.class);
  initIndice(MetaPropConfiguration.class);
  initIndice(Orchestrator.class);
  initIndice(OrchestratorConfiguration.class);
  initIndice(Location.class);
  initIndice(LocationResourceTemplate.class);
  initIndice(Deployment.class);
  initIndice(CsarGitRepository.class);
  initIndice(DeploymentTopology.class);
  initIndices(SUGGESTION_INDEX,null,AbstractSuggestionEntry.class,SuggestionEntry.class,SimpleSuggestionEntry.class);
  initCompleted();
}","/** 
 * Initialize the dao after being loaded by spring (Create the indexes).
 */
@PostConstruct public void initEnvironment(){
  try {
    getMappingBuilder().initialize(""String_Node_Str"");
  }
 catch (  IntrospectionException|IOException e) {
    throw new IndexingServiceException(""String_Node_Str"",e);
  }
  setJsonMapper(ElasticSearchMapper.getInstance());
  initIndices(TOSCA_ELEMENT_INDEX,null,CapabilityType.class,ArtifactType.class,RelationshipType.class,NodeType.class,DataType.class,PrimitiveDataType.class);
  initIndices(TOSCA_ELEMENT_INDEX,null,AbstractInstantiableToscaType.class,AbstractToscaType.class);
  initIndice(Application.class);
  initIndice(ApplicationVersion.class);
  initIndice(ApplicationEnvironment.class);
  initIndice(Topology.class);
  initIndice(Csar.class);
  initIndice(Repository.class);
  initIndice(Plugin.class);
  initIndice(PluginConfiguration.class);
  initIndice(MetaPropConfiguration.class);
  initIndice(Orchestrator.class);
  initIndice(OrchestratorConfiguration.class);
  initIndice(Location.class);
  initIndice(LocationResourceTemplate.class);
  initIndice(Deployment.class);
  initIndice(CsarGitRepository.class);
  initIndice(DeploymentTopology.class);
  initIndices(SUGGESTION_INDEX,null,AbstractSuggestionEntry.class,SuggestionEntry.class,SimpleSuggestionEntry.class);
  initCompleted();
}"
62289,"/** 
 * Check that the user has enough rights for a given topology.
 * @param topology The topology for which to check roles.
 * @param applicationRoles The roles required to edit the topology for an application.
 */
public void checkAuthorizations(Topology topology,ApplicationRole... applicationRoles){
  if (topology.getDelegateType().equals(Application.class.getSimpleName().toLowerCase())) {
    String applicationId=topology.getDelegateId();
    Application application=appService.getOrFail(applicationId);
    AuthorizationUtil.checkAuthorizationForApplication(application,applicationRoles);
  }
 else {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT);
  }
}","/** 
 * Check that the user has enough rights for a given topology.
 * @param topology The topology for which to check roles.
 * @param applicationRoles The roles required to edit the topology for an application.
 */
public void checkAuthorizations(Topology topology,ApplicationRole... applicationRoles){
}"
62290,"/** 
 * Get the delegates version of a topology.
 * @param topology the topology
 * @return The application version associated with the environment.
 */
private AbstractTopologyVersion getApplicationVersion(Topology topology){
  if (topology.getDelegateType().equalsIgnoreCase(Application.class.getSimpleName())) {
    return applicationVersionService.getByTopologyId(topology.getId());
  }
 else   if (topology.getDelegateType().equalsIgnoreCase(TopologyTemplate.class.getSimpleName())) {
    return topologyTemplateVersionService.getByTopologyId(topology.getId());
  }
  return null;
}","/** 
 * Get the delegates version of a topology.
 * @param topology the topology
 * @return The application version associated with the environment.
 */
private AbstractTopologyVersion getApplicationVersion(Topology topology){
  return null;
}"
62291,"@Override public String toString(){
  return comparable.toString();
}","@Override public String toString(){
  if (qualifier == null) {
    return getMajorVersion() + ""String_Node_Str"" + getMinorVersion()+ ""String_Node_Str""+ getIncrementalVersion()+ ""String_Node_Str""+ getBuildNumber();
  }
  return getMajorVersion() + ""String_Node_Str"" + getMinorVersion()+ ""String_Node_Str""+ getIncrementalVersion()+ ""String_Node_Str""+ getBuildNumber()+ ""String_Node_Str""+ getQualifier();
}"
62292,"/** 
 * Get a cloud service archive, or fail with   {@link NotFoundException} if not found
 * @param name The name of the archive.
 * @param version The version of the archive.
 * @return The {@link Csar Cloud Service Archive} if found in the repository.
 */
public Csar getOrFail(String name,String version){
  return getOrFail(new Csar(name,version).getId());
}","/** 
 * Get a cloud service archive, or fail with   {@link NotFoundException} if not found
 * @param name The name of the archive.
 * @param version The version of the archive.
 * @return The {@link Csar Cloud Service Archive} if found in the repository.
 */
public Csar getOrFail(String name,String version){
  Csar csar=searchService.getArchive(name,version);
  if (csar == null) {
    throw new NotFoundException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str"");
  }
  return csar;
}"
62293,"@Override protected void processNodeOperation(AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  String relationshipId=operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion();
  IndexedRelationshipType indexedRelationshipType=alienDAO.findById(IndexedRelationshipType.class,relationshipId);
  if (indexedRelationshipType == null) {
    throw new NotFoundException(IndexedRelationshipType.class.getName(),relationshipId,""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  if (relationships.containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationshipTemplate.setInterfaces(indexedRelationshipType.getInterfaces());
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
}","@Override protected void processNodeOperation(AddRelationshipOperation operation,NodeTemplate sourceNode){
  if (operation.getRelationshipName() == null || operation.getRelationshipName().isEmpty()) {
    throw new InvalidNameException(""String_Node_Str"",operation.getRelationshipName(),""String_Node_Str"");
  }
  if (sourceNode.getRequirements() == null || sourceNode.getRequirements().get(operation.getRequirementName()) == null) {
    throw new NotFoundException(""String_Node_Str"" + operation.getRequirementName() + ""String_Node_Str""+ operation.getNodeName());
  }
  Topology topology=EditionContextManager.getTopology();
  Map<String,NodeTemplate> nodeTemplates=TopologyServiceCore.getNodeTemplates(topology);
  TopologyServiceCore.getNodeTemplate(topology.getId(),operation.getTarget(),nodeTemplates);
  IndexedRelationshipType indexedRelationshipType=searchService.find(IndexedRelationshipType.class,operation.getRelationshipType(),operation.getRelationshipVersion());
  if (indexedRelationshipType == null) {
    throw new NotFoundException(IndexedRelationshipType.class.getName(),operation.getRelationshipType() + ""String_Node_Str"" + operation.getRelationshipVersion(),""String_Node_Str"");
  }
  boolean upperBoundReachedSource=topologyRequirementBoundsValidationServices.isRequirementUpperBoundReachedForSource(sourceNode,operation.getRequirementName(),topology.getDependencies());
  if (upperBoundReachedSource) {
    throw new RequirementBoundException(operation.getNodeName(),operation.getRequirementName());
  }
  boolean upperBoundReachedTarget=topologyCapabilityBoundsValidationServices.isCapabilityUpperBoundReachedForTarget(operation.getTarget(),nodeTemplates,operation.getTargetedCapabilityName(),topology.getDependencies());
  if (upperBoundReachedTarget) {
    throw new CapabilityBoundException(operation.getTarget(),operation.getTargetedCapabilityName());
  }
  topologyService.loadType(topology,indexedRelationshipType);
  Map<String,RelationshipTemplate> relationships=sourceNode.getRelationships();
  if (relationships == null) {
    relationships=Maps.newHashMap();
    sourceNode.setRelationships(relationships);
  }
  if (relationships.containsKey(operation.getRelationshipName())) {
    throw new AlreadyExistException(""String_Node_Str"" + operation.getRelationshipName() + ""String_Node_Str""+ operation.getNodeName());
  }
  RelationshipTemplate relationshipTemplate=new RelationshipTemplate();
  relationshipTemplate.setName(operation.getRelationshipName());
  relationshipTemplate.setTarget(operation.getTarget());
  relationshipTemplate.setTargetedCapabilityName(operation.getTargetedCapabilityName());
  relationshipTemplate.setRequirementName(operation.getRequirementName());
  relationshipTemplate.setRequirementType(sourceNode.getRequirements().get(operation.getRequirementName()).getType());
  relationshipTemplate.setType(indexedRelationshipType.getElementId());
  relationshipTemplate.setArtifacts(newLinkedHashMap(indexedRelationshipType.getArtifacts()));
  relationshipTemplate.setAttributes(newLinkedHashMap(indexedRelationshipType.getAttributes()));
  Map<String,AbstractPropertyValue> properties=new LinkedHashMap<String,AbstractPropertyValue>();
  NodeTemplateBuilder.fillProperties(properties,indexedRelationshipType.getProperties(),null);
  relationshipTemplate.setProperties(properties);
  relationshipTemplate.setInterfaces(indexedRelationshipType.getInterfaces());
  relationships.put(operation.getRelationshipName(),relationshipTemplate);
  WorkflowsBuilderService.TopologyContext topologyContext=workflowBuilderService.buildTopologyContext(topology);
  workflowBuilderService.addRelationship(topologyContext,operation.getNodeName(),operation.getRelationshipName());
  log.debug(""String_Node_Str"" + topology.getId() + ""String_Node_Str""+ operation.getNodeName()+ ""String_Node_Str""+ operation.getRelationshipName()+ ""String_Node_Str"");
}"
62294,"private void checkVersionParsing(String version,Integer major,Integer minor,Integer incremental,Integer buildnumber,String qualifier){
  Version artifactVersion=newArtifactVersion(version);
  String parsed=""String_Node_Str"" + version + ""String_Node_Str""+ artifactVersion.getMajorVersion()+ ""String_Node_Str""+ artifactVersion.getMinorVersion()+ ""String_Node_Str""+ artifactVersion.getIncrementalVersion()+ ""String_Node_Str""+ artifactVersion.getBuildNumber()+ ""String_Node_Str""+ artifactVersion.getQualifier()+ ""String_Node_Str"";
  assertEquals(parsed + ""String_Node_Str"",major,artifactVersion.getMajorVersion());
  assertEquals(parsed + ""String_Node_Str"",minor,artifactVersion.getMinorVersion());
  assertEquals(parsed + ""String_Node_Str"",incremental,artifactVersion.getIncrementalVersion());
  assertEquals(parsed + ""String_Node_Str"",buildnumber,artifactVersion.getBuildNumber());
  assertEquals(parsed + ""String_Node_Str"",qualifier,artifactVersion.getQualifier());
  assertEquals(""String_Node_Str"" + version + ""String_Node_Str"",version,artifactVersion.toString());
}","private void checkVersionParsing(String version,Integer major,Integer minor,Integer incremental,Integer buildnumber,String qualifier){
  Version artifactVersion=newArtifactVersion(version);
  String parsed=""String_Node_Str"" + version + ""String_Node_Str""+ artifactVersion.getMajorVersion()+ ""String_Node_Str""+ artifactVersion.getMinorVersion()+ ""String_Node_Str""+ artifactVersion.getIncrementalVersion()+ ""String_Node_Str""+ artifactVersion.getBuildNumber()+ ""String_Node_Str""+ artifactVersion.getQualifier()+ ""String_Node_Str"";
  assertEquals(parsed + ""String_Node_Str"",major,artifactVersion.getMajorVersion());
  assertEquals(parsed + ""String_Node_Str"",minor,artifactVersion.getMinorVersion());
  assertEquals(parsed + ""String_Node_Str"",incremental,artifactVersion.getIncrementalVersion());
  assertEquals(parsed + ""String_Node_Str"",buildnumber,artifactVersion.getBuildNumber());
  assertEquals(parsed + ""String_Node_Str"",qualifier,artifactVersion.getQualifier());
}"
62295,"@Override public IESSearchQueryBuilderHelper prepareSearch(){
  super.prepareSearch(indices);
  super.searchRequestBuilder.setTypes(esTypes);
  return this;
}","@Override public IESSearchQueryBuilderHelper prepareSearch(){
  super.prepareSearch(indices);
  super.searchRequestBuilder.setTypes(esTypes);
  super.searchRequestBuilder.setQuery(queryBuilder);
  return this;
}"
62296,"Path resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);","/** 
 * Resolve an artifact, try to download the artifact if possible and return the path to the downloaded artifact
 * @param artifactReference reference of the artifact
 * @param repositoryURL url of the repository
 * @param repositoryType type of the repository, it corresponds to the resolver type, normally the plugin will resolve artifact only of type defined ingetResolverType
 * @param credentials the credentials to connect to the repository
 * @return the path to the downloaded artifact
 */
Path resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);"
62297,"ValidationResult canHandleArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);","/** 
 * Check if the resolver can handle the particular artifact
 * @param artifactReference reference of the artifact
 * @param repositoryURL url of the repository
 * @param repositoryType type of the repository, it corresponds to the resolver type, normally the plugin will resolve artifact only of type defined ingetResolverType
 * @param credentials the credentials to connect to the repository
 * @return the validation result
 */
ValidationResult canHandleArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);"
62298,String getResolverType();,"/** 
 * The type of the resolver, this is useful to distinguish different types of resolver for example git, http, maven, make sure to not having multiple resolver plugins with the same resolver type
 * @return the type of the resolver
 */
String getResolverType();"
62299,T getConfiguration();,"/** 
 * Get the configuration of the artifact resolver
 * @return the configuration of the resolver
 */
T getConfiguration();"
62300,"Path resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);","/** 
 * Resolve an artifact, try to download the artifact if possible and return the path to the downloaded artifact
 * @param artifactReference reference of the artifact
 * @param repositoryURL url of the repository
 * @param repositoryType type of the repository, it corresponds to the resolver type, normally the plugin will resolve artifact only of type defined ingetResolverType
 * @param credentials the credentials to connect to the repository
 * @return the path to the downloaded artifact
 */
Path resolveArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);"
62301,"ValidationResult canHandleArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);","/** 
 * Check if the resolver can handle the particular artifact
 * @param artifactReference reference of the artifact
 * @param repositoryURL url of the repository
 * @param repositoryType type of the repository, it corresponds to the resolver type, normally the plugin will resolve artifact only of type defined ingetResolverType
 * @param credentials the credentials to connect to the repository
 * @return the validation result
 */
ValidationResult canHandleArtifact(String artifactReference,String repositoryURL,String repositoryType,Map<String,Object> credentials);"
62302,void setConfiguration(T configuration);,"/** 
 * Set the configuration of the artifact resolver
 * @param configuration the configuration of the resolver
 */
void setConfiguration(T configuration);"
62303,IConfigurableArtifactResolver<T> newInstance();,"/** 
 * Create new instance of   {@link IConfigurableArtifactResolver}
 * @return a newly created {@link IConfigurableArtifactResolver}
 */
IConfigurableArtifactResolver<T> newInstance();"
62304,Class<T> getResolverConfigurationType();,"/** 
 * The resolver's configuration type
 * @return the type of the configuration
 */
Class<T> getResolverConfigurationType();"
62305,String getResolverType();,"/** 
 * Get the resolver type which the   {@link IConfigurableArtifactResolver} can manage
 * @return the resolver's type
 */
String getResolverType();"
62306,"protected EsQueryBuilderHelper(QueryHelper.QueryBuilderHelper from,Class<T> clazz){
  super(from);
  this.clazz=clazz;
  this.indices=clazz == null ? getAllIndexes() : new String[]{getIndexForType(clazz)};
  this.requestedTypes=getRequestedTypes(clazz);
  this.esTypes=getTypesStrings(requestedTypes);
}","protected EsQueryBuilderHelper(QueryHelper.QueryBuilderHelper from,Class<T> clazz){
  super(from);
  this.clazz=clazz;
  this.indices=clazz == null ? getAllIndexes() : new String[]{getIndexForType(clazz)};
  this.requestedTypes=getRequestedTypes(clazz);
  this.esTypes=getTypesStrings(requestedTypes);
  super.types(requestedTypes);
}"
62307,"/** 
 * Convert a SearchResponse into a list of objects (json deserialization.)
 * @param searchResponse The actual search response from elastic-search.
 * @param clazz          The type of objects to de-serialize.
 * @return A list of instances that contains de-serialized data.
 */
@SneakyThrows({IOException.class}) public <T>List<T> toGetListOfData(SearchResponse searchResponse,Class<T> clazz){
  if (!somethingFound(searchResponse)) {
    return null;
  }
  List<T> result=new ArrayList<>();
  for (int i=0; i < searchResponse.getHits().getHits().length; i++) {
    result.add(getJsonMapper().readValue(searchResponse.getHits().getAt(i).getSourceAsString(),clazz));
  }
  return result;
}","/** 
 * Convert a SearchResponse into a list of objects (json deserialization.)
 * @param searchResponse The actual search response from elastic-search.
 * @param clazz The type of objects to de-serialize.
 * @return A list of instances that contains de-serialized data.
 */
@SneakyThrows({IOException.class}) public <T>List<T> toGetListOfData(SearchResponse searchResponse,Class<T> clazz){
  if (!somethingFound(searchResponse)) {
    return null;
  }
  List<T> result=new ArrayList<>();
  for (int i=0; i < searchResponse.getHits().getHits().length; i++) {
    result.add(getJsonMapper().readValue(searchResponse.getHits().getAt(i).getSourceAsString(),clazz));
  }
  return result;
}"
62308,"private Map<String,FacetedSearchFacet[]> parseAggregationCounts(SearchResponse searchResponse){
  List<Aggregation> internalAggregationsList=null;
  if (searchResponse.getAggregations() == null) {
    return null;
  }
  if (searchResponse.getAggregations().get(""String_Node_Str"") != null) {
    Global globalAggregation=searchResponse.getAggregations().get(""String_Node_Str"");
    Aggregations aggregations=globalAggregation.getAggregations();
    internalAggregationsList=aggregations.asList();
  }
  if (internalAggregationsList != null && internalAggregationsList.size() > 0) {
    Map<String,FacetedSearchFacet[]> finalResults=new HashMap();
    for (    Aggregation termsAgg : internalAggregationsList) {
      InternalTerms internalTerms=(InternalTerms)termsAgg;
      List<FacetedSearchFacet> facetedSearchFacets=new ArrayList<>();
      for (      Terms.Bucket entry : internalTerms.getBuckets()) {
        facetedSearchFacets.add(new FacetedSearchFacet(entry.getKey(),entry.getDocCount()));
      }
      finalResults.put(internalTerms.getName(),facetedSearchFacets.toArray(new FacetedSearchFacet[facetedSearchFacets.size()]));
    }
    return finalResults;
  }
  return null;
}","private Map<String,FacetedSearchFacet[]> parseAggregationCounts(SearchResponse searchResponse){
  if (searchResponse.getAggregations() == null) {
    return null;
  }
  List<Aggregation> internalAggregationsList=searchResponse.getAggregations().asList();
  if (internalAggregationsList.size() == 0) {
    return null;
  }
  Map<String,FacetedSearchFacet[]> finalResults=Maps.newHashMap();
  for (  Aggregation termsAgg : internalAggregationsList) {
    InternalTerms internalTerms=(InternalTerms)termsAgg;
    List<FacetedSearchFacet> facetedSearchFacets=Lists.newArrayList();
    for (    Terms.Bucket entry : internalTerms.getBuckets()) {
      facetedSearchFacets.add(new FacetedSearchFacet(entry.getKey(),entry.getDocCount()));
    }
    finalResults.put(internalTerms.getName(),facetedSearchFacets.toArray(new FacetedSearchFacet[facetedSearchFacets.size()]));
  }
  return finalResults;
}"
62309,"/** 
 * Convert a SearchResponse into a   {@link GetMultipleDataResult} including json deserialization.
 * @param searchResponse The actual search response from elastic-search.
 * @param from           The start index of the search request.
 * @return A {@link GetMultipleDataResult} instance that contains de-serialized data.
 */
@SuppressWarnings(""String_Node_Str"") @SneakyThrows({IOException.class}) public <T>GetMultipleDataResult<T> toGetMultipleDataResult(Class<T> clazz,SearchResponse searchResponse,int from){
  if (!somethingFound(searchResponse)) {
    return new GetMultipleDataResult<T>(new String[0],(T[])Array.newInstance(clazz,0));
  }
  GetMultipleDataResult<T> finalResponse=new GetMultipleDataResult<T>();
  fillMultipleDataResult(clazz,searchResponse,finalResponse,from,true);
  return finalResponse;
}","/** 
 * Convert a SearchResponse into a   {@link GetMultipleDataResult} including json deserialization.
 * @param searchResponse The actual search response from elastic-search.
 * @param from The start index of the search request.
 * @return A {@link GetMultipleDataResult} instance that contains de-serialized data.
 */
@SuppressWarnings(""String_Node_Str"") @SneakyThrows({IOException.class}) public <T>GetMultipleDataResult<T> toGetMultipleDataResult(Class<T> clazz,SearchResponse searchResponse,int from){
  if (!somethingFound(searchResponse)) {
    return new GetMultipleDataResult<T>(new String[0],(T[])Array.newInstance(clazz,0));
  }
  GetMultipleDataResult<T> finalResponse=new GetMultipleDataResult<T>();
  fillMultipleDataResult(clazz,searchResponse,finalResponse,from,true);
  return finalResponse;
}"
62310,"/** 
 * This utility method returns an ordered   {@link alien4cloud.model.components.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,new Comparator<IndexedInheritableToscaElement>(){
    @Override public int compare(    IndexedInheritableToscaElement left,    IndexedInheritableToscaElement right){
      return elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId()));
    }
  }
);
  return orderedElements;
}","/** 
 * This utility method returns an ordered   {@link alien4cloud.model.components.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,(left,right) -> elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId())));
  return orderedElements;
}"
62311,"/** 
 * Dispatch an event to the registered listener.
 * @param listener The listener to which to send the event.
 * @param event The event to dispatch.
 * @param retry The current retry index (0 for first dispatch)
 */
@SneakyThrows private void dispatchEvent(IPaasEventListener listener,AbstractMonitorEvent event,int retry){
  try {
    if (listener.canHandle(event)) {
      listener.eventHappened(event);
    }
  }
 catch (  RuntimeException e) {
    log.error(""String_Node_Str"",event.toString(),listener.toString(),retry,MAX_LISTENER_RETRY,e);
    if (retry < MAX_LISTENER_RETRY) {
      Thread.sleep(LISTENER_FAIL_RETRY_SLEEP_MS);
      dispatchEvent(listener,event,retry + 1);
    }
  }
}","/** 
 * Dispatch an event to the registered listener.
 * @param listener The listener to which to send the event.
 * @param event The event to dispatch.
 * @param retry The current retry index (0 for first dispatch)
 */
@SneakyThrows private void dispatchEvent(IPaasEventListener listener,AbstractMonitorEvent event,int retry){
  try {
    if (listener.canHandle(event)) {
      listener.eventHappened(event);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",event.toString(),listener.toString(),retry,MAX_LISTENER_RETRY,e);
    if (retry < MAX_LISTENER_RETRY) {
      Thread.sleep(LISTENER_FAIL_RETRY_SLEEP_MS);
      dispatchEvent(listener,event,retry + 1);
    }
  }
}"
62312,"/** 
 * Link the plugin against alien components that may need to use it.
 * @param plugin The plugin to link.
 * @param managedPlugin The managed plugin related to the plugin.
 * @param componentDescriptors The map of component descriptors.
 */
private void link(Plugin plugin,ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  Map<String,IPluginLoadingCallback> beans=alienContext.getBeansOfType(IPluginLoadingCallback.class);
  for (  IPluginLoadingCallback callback : beans.values()) {
    callback.onPluginLoaded(managedPlugin);
  }
  for (  PluginLinker linker : linkers) {
    Map<String,?> instancesToLink=managedPlugin.getPluginContext().getBeansOfType(linker.linkedType);
    for (    Entry<String,?> instanceToLink : instancesToLink.entrySet()) {
      linker.linker.link(plugin.getId(),instanceToLink.getKey(),instanceToLink.getValue());
      PluginComponentDescriptor componentDescriptor=componentDescriptors.get(instanceToLink.getKey());
      if (componentDescriptor == null) {
        componentDescriptor=new PluginComponentDescriptor();
        componentDescriptor.setBeanName(instanceToLink.getKey());
        componentDescriptor.setName(instanceToLink.getKey());
      }
      componentDescriptor.setType(linker.linkedType.getSimpleName());
    }
  }
  for (  PluginComponentDescriptor componentDescriptor : componentDescriptors.values()) {
    if (componentDescriptor.getType() == null) {
      componentDescriptor.setType(UNKNOWN_PLUGIN_COMPONENT_TYPE);
    }
  }
}","/** 
 * Link the plugin against alien components that may need to use it.
 * @param plugin The plugin to link.
 * @param managedPlugin The managed plugin related to the plugin.
 * @param componentDescriptors The map of component descriptors.
 */
private void link(Plugin plugin,ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  for (  IPluginLoadingCallback callback : SpringUtils.getBeansOfType(alienContext,IPluginLoadingCallback.class)) {
    callback.onPluginLoaded(managedPlugin);
  }
  for (  PluginLinker linker : linkers) {
    Map<String,?> instancesToLink=managedPlugin.getPluginContext().getBeansOfType(linker.linkedType);
    for (    Entry<String,?> instanceToLink : instancesToLink.entrySet()) {
      linker.linker.link(plugin.getId(),instanceToLink.getKey(),instanceToLink.getValue());
      PluginComponentDescriptor componentDescriptor=componentDescriptors.get(instanceToLink.getKey());
      if (componentDescriptor == null) {
        componentDescriptor=new PluginComponentDescriptor();
        componentDescriptor.setBeanName(instanceToLink.getKey());
        componentDescriptor.setName(instanceToLink.getKey());
      }
      componentDescriptor.setType(linker.linkedType.getSimpleName());
    }
  }
  for (  PluginComponentDescriptor componentDescriptor : componentDescriptors.values()) {
    if (componentDescriptor.getType() == null) {
      componentDescriptor.setType(UNKNOWN_PLUGIN_COMPONENT_TYPE);
    }
  }
}"
62313,"private void unloadPlugin(String pluginId,boolean disable,boolean remove){
  ManagedPlugin managedPlugin=pluginContexts.get(pluginId);
  Path pluginPath;
  Path pluginUiPath;
  if (managedPlugin != null) {
    Map<String,IPluginLoadingCallback> beans=alienContext.getBeansOfType(IPluginLoadingCallback.class);
    for (    IPluginLoadingCallback callback : beans.values()) {
      callback.onPluginClosed(managedPlugin);
    }
    managedPlugin.getPluginContext().stop();
    managedPlugin.getPluginContext().destroy();
    pluginPath=managedPlugin.getPluginPath();
    pluginUiPath=managedPlugin.getPluginUiPath();
  }
 else {
    Plugin plugin=alienDAO.findById(Plugin.class,pluginId);
    pluginPath=getPluginPath(plugin.getPluginPathId());
    pluginUiPath=getPluginUiPath(plugin.getPluginPathId());
  }
  for (  PluginLinker linker : linkers) {
    linker.linker.unlink(pluginId);
  }
  if (remove) {
    alienDAO.delete(Plugin.class,pluginId);
    alienDAO.delete(PluginConfiguration.class,pluginId);
    try {
      FileUtil.delete(pluginPath);
      FileUtil.delete(getPluginZipFilePath(pluginId));
      FileUtil.delete(pluginUiPath);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + pluginId + ""String_Node_Str"",e);
    }
  }
 else   if (disable) {
    disablePlugin(pluginId);
  }
  pluginContexts.remove(pluginId);
}","private void unloadPlugin(String pluginId,boolean disable,boolean remove){
  ManagedPlugin managedPlugin=pluginContexts.get(pluginId);
  Path pluginPath;
  Path pluginUiPath;
  if (managedPlugin != null) {
    for (    IPluginLoadingCallback callback : SpringUtils.getBeansOfType(alienContext,IPluginLoadingCallback.class)) {
      callback.onPluginClosed(managedPlugin);
    }
    managedPlugin.getPluginContext().stop();
    managedPlugin.getPluginContext().destroy();
    pluginPath=managedPlugin.getPluginPath();
    pluginUiPath=managedPlugin.getPluginUiPath();
  }
 else {
    Plugin plugin=alienDAO.findById(Plugin.class,pluginId);
    pluginPath=getPluginPath(plugin.getPluginPathId());
    pluginUiPath=getPluginUiPath(plugin.getPluginPathId());
  }
  for (  PluginLinker linker : linkers) {
    linker.linker.unlink(pluginId);
  }
  if (remove) {
    alienDAO.delete(Plugin.class,pluginId);
    alienDAO.delete(PluginConfiguration.class,pluginId);
    try {
      FileUtil.delete(pluginPath);
      FileUtil.delete(getPluginZipFilePath(pluginId));
      FileUtil.delete(pluginUiPath);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + pluginId + ""String_Node_Str"",e);
    }
  }
 else   if (disable) {
    disablePlugin(pluginId);
  }
  pluginContexts.remove(pluginId);
}"
62314,"/** 
 * Initialize the plugins for alien.
 * @throws IOException In case we fail to iterate over the plugin directory.
 */
public void initialize() throws IOException {
  if (linkers == null) {
    linkers=Lists.newArrayList();
    Map<String,IPluginLinker> pluginLinkers=alienContext.getBeansOfType(IPluginLinker.class);
    for (    IPluginLinker linker : pluginLinkers.values()) {
      linkers.add(new PluginLinker(linker,getLinkedType(linker)));
    }
  }
  Path path=FileSystems.getDefault().getPath(pluginsWorkDirectory);
  if (!Files.exists(path)) {
    Files.createDirectories(path);
    log.info(""String_Node_Str"" + path.toAbsolutePath().toString() + ""String_Node_Str"");
  }
  log.info(""String_Node_Str"");
  GetMultipleDataResult<Plugin> results=alienDAO.find(Plugin.class,MapUtil.newHashMap(new String[]{""String_Node_Str""},new String[][]{{""String_Node_Str""}}),Integer.MAX_VALUE);
  loadPlugins(results.getData());
  log.info(""String_Node_Str"",results.getData().length);
}","/** 
 * Initialize the plugins for alien.
 * @throws IOException In case we fail to iterate over the plugin directory.
 */
public void initialize() throws IOException {
  if (linkers == null) {
    linkers=Lists.newArrayList();
    for (    IPluginLinker linker : SpringUtils.getBeansOfType(alienContext,IPluginLinker.class)) {
      linkers.add(new PluginLinker(linker,getLinkedType(linker)));
    }
  }
  Path path=FileSystems.getDefault().getPath(pluginsWorkDirectory);
  if (!Files.exists(path)) {
    Files.createDirectories(path);
    log.info(""String_Node_Str"" + path.toAbsolutePath().toString() + ""String_Node_Str"");
  }
  log.info(""String_Node_Str"");
  GetMultipleDataResult<Plugin> results=alienDAO.find(Plugin.class,MapUtil.newHashMap(new String[]{""String_Node_Str""},new String[][]{{""String_Node_Str""}}),Integer.MAX_VALUE);
  loadPlugins(results.getData());
  log.info(""String_Node_Str"",results.getData().length);
}"
62315,"public OperationParameterDeserializer(){
  super(IValue.class);
  addToRegistry(""String_Node_Str"",PropertyDefinition.class);
  addToRegistry(""String_Node_Str"",FunctionPropertyValue.class);
  addToRegistry(""String_Node_Str"",ConcatPropertyValue.class);
  addToRegistry(""String_Node_Str"",ScalarPropertyValue.class);
}","public OperationParameterDeserializer(){
  super(IValue.class);
  addToRegistry(""String_Node_Str"",PropertyDefinition.class);
  addToRegistry(""String_Node_Str"",FunctionPropertyValue.class);
  addToRegistry(""String_Node_Str"",ConcatPropertyValue.class);
  addToRegistry(""String_Node_Str"",JsonNodeType.STRING.toString(),ScalarPropertyValue.class);
  addToRegistry(""String_Node_Str"",JsonNodeType.ARRAY.toString(),ListPropertyValue.class);
  addToRegistry(""String_Node_Str"",JsonNodeType.OBJECT.toString(),ComplexPropertyValue.class);
  setValueStringClass(ScalarPropertyValue.class);
}"
62316,"public static boolean isValidNodeName(String name){
  return Pattern.matches(TopologyService.NODE_NAME_REGEX,name);
}","public static boolean isValidNodeName(String name){
  return TopologyService.NODE_NAME_PATTERN.matcher(name).matches();
}"
62317,"/** 
 * Rename the node template with an invalid name on the topology.
 * @param topology
 * @param parsedArchive
 */
public static void normalizeAllNodeTemplateName(Topology topology,ParsingResult<ArchiveRoot> parsedArchive){
  if (topology.getNodeTemplates() != null && !topology.getNodeTemplates().isEmpty()) {
    Map<String,NodeTemplate> nodeTemplates=Maps.newHashMap(topology.getNodeTemplates());
    for (    Map.Entry<String,NodeTemplate> nodeEntry : nodeTemplates.entrySet()) {
      String nodeName=nodeEntry.getKey();
      if (!isValidNodeName(nodeName)) {
        String newName=nodeName.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        newName=StringUtils.stripAccents(newName);
        if (topology.getNodeTemplates().containsKey(newName)) {
          int i=1;
          while (topology.getNodeTemplates().containsKey(newName + i)) {
            i++;
          }
          newName=newName + i;
        }
        renameNodeTemplate(topology,nodeName,newName);
        if (parsedArchive != null) {
          parsedArchive.getContext().getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.INVALID_NODE_TEMPLATE_NAME,nodeName,null,nodeName,null,newName));
        }
      }
    }
  }
}","/** 
 * In alien 4 Cloud we try Rename the node template with an invalid name on the topology.
 * @param topology
 * @param parsedArchive
 */
public static void normalizeAllNodeTemplateName(Topology topology,ParsingResult<ArchiveRoot> parsedArchive){
  if (topology.getNodeTemplates() != null && !topology.getNodeTemplates().isEmpty()) {
    Map<String,NodeTemplate> nodeTemplates=Maps.newHashMap(topology.getNodeTemplates());
    for (    Map.Entry<String,NodeTemplate> nodeEntry : nodeTemplates.entrySet()) {
      String nodeName=nodeEntry.getKey();
      if (!isValidNodeName(nodeName)) {
        String newName=StringUtils.stripAccents(nodeName);
        newName=TopologyService.NODE_NAME_REPLACE_PATTERN.matcher(newName).replaceAll(""String_Node_Str"");
        if (topology.getNodeTemplates().containsKey(newName)) {
          int i=1;
          while (topology.getNodeTemplates().containsKey(newName + i)) {
            i++;
          }
          newName=newName + i;
        }
        renameNodeTemplate(topology,nodeName,newName);
        if (parsedArchive != null) {
          parsedArchive.getContext().getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.INVALID_NODE_TEMPLATE_NAME,nodeName,null,nodeName,null,newName));
        }
      }
    }
  }
}"
62318,"public static String formatPropertyValue(boolean appendLf,int indentLevel,AbstractPropertyValue propertyValue){
  if (propertyValue instanceof PropertyValue) {
    return formatValue(appendLf,indentLevel,((PropertyValue)propertyValue).getValue());
  }
 else {
    throw new NotSupportedException(""String_Node_Str"");
  }
}","public static String formatPropertyValue(boolean appendLf,int indentLevel,AbstractPropertyValue propertyValue){
  if (propertyValue instanceof PropertyValue) {
    return formatValue(appendLf,indentLevel,((PropertyValue)propertyValue).getValue());
  }
 else   if (propertyValue instanceof FunctionPropertyValue) {
    return formatFunctionPropertyValue(appendLf,indentLevel,((FunctionPropertyValue)propertyValue));
  }
 else {
    throw new NotSupportedException(""String_Node_Str"");
  }
}"
62319,"public String getCsvToString(Collection<?> list,boolean renderScalar){
  StringBuilder sb=new StringBuilder();
  boolean isFirst=true;
  if (list != null) {
    for (    Object o : list) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      if (renderScalar) {
        sb.append(ToscaPropertySerializerUtils.renderScalar(o.toString()));
      }
 else {
        sb.append(o.toString());
      }
    }
  }
  return sb.toString();
}","public static String getCsvToString(Collection<?> list,boolean renderScalar){
  StringBuilder sb=new StringBuilder();
  boolean isFirst=true;
  if (list != null) {
    for (    Object o : list) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      if (renderScalar) {
        sb.append(ToscaPropertySerializerUtils.renderScalar(o.toString()));
      }
 else {
        sb.append(o.toString());
      }
    }
  }
  return sb.toString();
}"
62320,"/** 
 * This utility method returns an ordered   {@link alien4cloud.component.model.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,new Comparator<IndexedInheritableToscaElement>(){
    @Override public int compare(    IndexedInheritableToscaElement left,    IndexedInheritableToscaElement right){
      return elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId()));
    }
  }
);
  return orderedElements;
}","/** 
 * This utility method returns an ordered   {@link alien4cloud.model.components.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,new Comparator<IndexedInheritableToscaElement>(){
    @Override public int compare(    IndexedInheritableToscaElement left,    IndexedInheritableToscaElement right){
      return elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId()));
    }
  }
);
  return orderedElements;
}"
62321,"public PropertyValue getDefault(){
  return this.defaultValue;
}","@ObjectField(enabled=false) public PropertyValue getDefault(){
  return this.defaultValue;
}"
62322,"/** 
 * This utility method returns an ordered   {@link alien4cloud.component.model.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,new Comparator<IndexedInheritableToscaElement>(){
    @Override public int compare(    IndexedInheritableToscaElement left,    IndexedInheritableToscaElement right){
      return elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId()));
    }
  }
);
  return orderedElements;
}","/** 
 * This utility method returns an ordered   {@link alien4cloud.model.components.IndexedInheritableToscaElement} collection. The parent elements will be beforethe children elements This utility method returns an ordered  {@link IndexedInheritableToscaElement} collection. The parent elements will be before the children elements
 * @param elementsByIdMap map of {@link IndexedInheritableToscaElement} by id
 * @return
 */
public static <T extends IndexedInheritableToscaElement>List<T> orderByDerivedFromHierarchy(final Map<String,T> elementsByIdMap){
  if (elementsByIdMap == null) {
    return null;
  }
  List<T> orderedElements=new ArrayList<T>(elementsByIdMap.values());
  final Map<String,Integer> elementsLevelMap=Maps.newHashMap();
  for (  IndexedInheritableToscaElement element : orderedElements) {
    IndexedInheritableToscaElement parent=element;
    int levelCount=0;
    while (true) {
      if (parent.getDerivedFrom() == null || parent.getDerivedFrom().isEmpty()) {
        break;
      }
      IndexedInheritableToscaElement oldParent=parent;
      parent=elementsByIdMap.get(parent.getDerivedFrom().get(0));
      if (parent == null) {
        break;
      }
      if (oldParent.equals(parent)) {
        throw new IndexingServiceException(parent.getElementId() + ""String_Node_Str"");
      }
      levelCount++;
    }
    elementsLevelMap.put(element.getElementId(),levelCount);
  }
  Collections.sort(orderedElements,new Comparator<IndexedInheritableToscaElement>(){
    @Override public int compare(    IndexedInheritableToscaElement left,    IndexedInheritableToscaElement right){
      return elementsLevelMap.get(left.getElementId()).compareTo(elementsLevelMap.get(right.getElementId()));
    }
  }
);
  return orderedElements;
}"
62323,"public PropertyValue getDefault(){
  return this.defaultValue;
}","@ObjectField(enabled=false) public PropertyValue getDefault(){
  return this.defaultValue;
}"
62324,"private void validateType(PropertyDefinition propertyDefinition,ParsingContextExecution context,Node node){
  String propertyType=propertyDefinition.getType();
  if (propertyType == null) {
    context.getParsingErrors().add(new ParsingError(ErrorCode.VALIDATION_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
  }
 else   if (!ToscaType.isSimple(propertyType)) {
    if (ToscaType.LIST.equals(propertyType) || ToscaType.MAP.equals(propertyType)) {
      PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
      if (entrySchema == null) {
        context.getParsingErrors().add(new ParsingError(ErrorCode.VALIDATION_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"" + propertyType + ""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
      }
 else {
        validateType(entrySchema,context,node);
      }
    }
 else {
      ArchiveRoot archiveRoot=(ArchiveRoot)context.getRoot().getWrappedInstance();
      if (!archiveRoot.getDataTypes().containsKey(propertyType)) {
        if (!searchService.isElementExistInDependencies(IndexedDataType.class,propertyType,archiveRoot.getArchive().getDependencies())) {
          context.getParsingErrors().add(new ParsingError(ErrorCode.VALIDATION_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"" + propertyType + ""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
        }
      }
    }
  }
}","private void validateType(PropertyDefinition propertyDefinition,ParsingContextExecution context,Node node){
  String propertyType=propertyDefinition.getType();
  if (propertyType == null) {
    context.getParsingErrors().add(new ParsingError(ErrorCode.VALIDATION_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
  }
 else   if (!ToscaType.isSimple(propertyType)) {
    if (ToscaType.LIST.equals(propertyType) || ToscaType.MAP.equals(propertyType)) {
      PropertyDefinition entrySchema=propertyDefinition.getEntrySchema();
      if (entrySchema == null) {
        context.getParsingErrors().add(new ParsingError(ErrorCode.VALIDATION_ERROR,""String_Node_Str"",node.getStartMark(),""String_Node_Str"" + propertyType + ""String_Node_Str"",node.getEndMark(),""String_Node_Str""));
      }
    }
 else {
      ArchiveRoot archiveRoot=(ArchiveRoot)context.getRoot().getWrappedInstance();
      if (!archiveRoot.getDataTypes().containsKey(propertyType)) {
        if (!searchService.isElementExistInDependencies(IndexedDataType.class,propertyType,archiveRoot.getArchive().getDependencies())) {
          context.getParsingErrors().add(new ParsingError(ErrorCode.TYPE_NOT_FOUND,""String_Node_Str"",node.getStartMark(),""String_Node_Str"" + propertyType + ""String_Node_Str"",node.getEndMark(),propertyType));
        }
      }
    }
  }
}"
62325,"public void isUniqueNodeTemplateName(String topologyId,String newNodeTemplateName,Map<String,NodeTemplate> nodeTemplates){
  if (nodeTemplates.containsKey(newNodeTemplateName.toLowerCase())) {
    log.debug(""String_Node_Str"",newNodeTemplateName);
    throw new AlreadyExistException(""String_Node_Str"" + newNodeTemplateName + ""String_Node_Str""+ topologyId+ ""String_Node_Str"");
  }
}","public void isUniqueNodeTemplateName(String topologyId,String newNodeTemplateName,Map<String,NodeTemplate> nodeTemplates){
  if (nodeTemplates.containsKey(newNodeTemplateName)) {
    log.debug(""String_Node_Str"",newNodeTemplateName);
    throw new AlreadyExistException(""String_Node_Str"" + newNodeTemplateName + ""String_Node_Str""+ topologyId+ ""String_Node_Str"");
  }
}"
62326,"/** 
 * Query for all locations given an orchestrator
 * @param orchestratorId Id of the orchestrators for which to get locations.
 * @return An array that contains all locations for the given orchestrators.
 */
public Location[] getOrchestratorLocations(String orchestratorId){
  GetMultipleDataResult<Location> locations=alienDAO.search(Location.class,null,MapUtil.newHashMap(array(""String_Node_Str""),(String[][])arOfArray(array(orchestratorId))),Integer.MAX_VALUE);
  return locations.getData();
}","/** 
 * Query for all locations given an orchestrator
 * @param orchestratorId Id of the orchestrators for which to get locations.
 * @return An array that contains all locations for the given orchestrators.
 */
public Location[] getOrchestratorLocations(String orchestratorId){
  GetMultipleDataResult<Location> locations=alienDAO.search(Location.class,null,MapUtil.newHashMap(array(""String_Node_Str""),AlienUtils.<String>arOfArray(array(orchestratorId))),Integer.MAX_VALUE);
  return locations.getData();
}"
62327,"/** 
 * Rename the node template with an invalid name on the topology.
 * @param topology
 * @param parsedArchive
 */
public static void normalizeAllNodeTemplateName(Topology topology,ParsingResult<ArchiveRoot> parsedArchive){
  if (topology.getNodeTemplates() != null && !topology.getNodeTemplates().isEmpty()) {
    Map<String,NodeTemplate> nodeTemplates=Maps.newHashMap(topology.getNodeTemplates());
    for (    Map.Entry<String,NodeTemplate> nodeEntry : nodeTemplates.entrySet()) {
      String nodeName=nodeEntry.getKey();
      if (!isValidNodeName(nodeName)) {
        String newName=nodeName.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        newName=StringUtils.stripAccents(newName);
        if (nodeTemplates.containsKey(newName)) {
          int i=1;
          while (nodeTemplates.containsKey(newName + ""String_Node_Str"" + i)) {
            i++;
          }
          newName=newName + ""String_Node_Str"" + i;
        }
        renameNodeTemplate(topology,nodeName,newName);
        parsedArchive.getContext().getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.INVALID_NODE_TEMPLATE_NAME,nodeName,null,nodeName,null,newName));
      }
    }
  }
}","/** 
 * Rename the node template with an invalid name on the topology.
 * @param topology
 * @param parsedArchive
 */
public static void normalizeAllNodeTemplateName(Topology topology,ParsingResult<ArchiveRoot> parsedArchive){
  if (topology.getNodeTemplates() != null && !topology.getNodeTemplates().isEmpty()) {
    Map<String,NodeTemplate> nodeTemplates=Maps.newHashMap(topology.getNodeTemplates());
    for (    Map.Entry<String,NodeTemplate> nodeEntry : nodeTemplates.entrySet()) {
      String nodeName=nodeEntry.getKey();
      if (!isValidNodeName(nodeName)) {
        String newName=nodeName.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        newName=StringUtils.stripAccents(newName);
        if (topology.getNodeTemplates().containsKey(newName)) {
          int i=1;
          while (topology.getNodeTemplates().containsKey(newName + i)) {
            i++;
          }
          newName=newName + i;
        }
        renameNodeTemplate(topology,nodeName,newName);
        if (parsedArchive != null) {
          parsedArchive.getContext().getParsingErrors().add(new ParsingError(ParsingErrorLevel.WARNING,ErrorCode.INVALID_NODE_TEMPLATE_NAME,nodeName,null,nodeName,null,newName));
        }
      }
    }
  }
}"
62328,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  lock.lock();
  Object target=obj;
  try {
    ProxyRegistry proxyRegistry=overridableCandidates.get(obj);
    if (proxyRegistry != null) {
      if (log.isDebugEnabled()) {
        if (proxyRegistry.target != proxyRegistry.original) {
          log.debug(""String_Node_Str"",method);
        }
 else {
          log.debug(""String_Node_Str"",method);
        }
      }
      target=proxyRegistry.target;
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"",method);
      }
    }
  }
  finally {
    lock.unlock();
  }
  Object result=ReflectionUtils.invokeMethod(method,target,args);
  return result;
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  lock.lock();
  Object target=obj;
  try {
    ProxyRegistry proxyRegistry=overridableCandidates.get(obj);
    if (proxyRegistry != null) {
      if (log.isDebugEnabled()) {
        if (proxyRegistry.target != proxyRegistry.original) {
          log.debug(""String_Node_Str"",method);
        }
 else {
          log.debug(""String_Node_Str"",method);
        }
      }
      target=proxyRegistry.target;
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"",method);
      }
    }
  }
  finally {
    lock.unlock();
  }
  Object result=null;
  try {
    result=ReflectionUtils.invokeMethod(method,target,args);
  }
 catch (  Exception e) {
    try {
      ReflectionUtils.handleReflectionException(e);
    }
 catch (    UndeclaredThrowableException ute) {
      throw ute.getUndeclaredThrowable();
    }
  }
  return result;
}"
62329,"/** 
 * Update one property for a given @{IndexedRelationshipType} of a   {@link NodeTemplate}
 * @param topologyId The id of the topology that contains the node template for which to update a property.
 * @param nodeTemplateName The name of the node template for which to update a property.
 * @param updatePropertyRequest The key and value of the property to update. When value is null => ""reset"" (load the default value).
 * @return a void rest response that contains no data if successful and an error if something goes wrong.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<ConstraintInformation> updateRelationshipPropertyValue(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String relationshipName,@RequestBody UpdateIndexedTypePropertyRequest updatePropertyRequest){
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  String propertyName=updatePropertyRequest.getPropertyName();
  String propertyValue=updatePropertyRequest.getPropertyValue();
  String relationshipType=updatePropertyRequest.getType();
  Map<String,IndexedRelationshipType> relationshipTypes=topologyServiceCore.getIndexedRelationshipTypesFromTopology(topology);
  if (!relationshipTypes.get(relationshipType).getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str""+ relationshipType+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",propertyName,relationshipType,nodeTemplateName,topology.getId(),relationshipTypes.get(relationshipType).getProperties().get(propertyName),propertyValue);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,RelationshipTemplate> relationships=nodeTemplate.getRelationships();
  try {
    propertyService.setPropertyValue(relationships.get(relationshipName).getProperties(),relationshipTypes.get(relationshipType).getProperties().get(propertyName),propertyName,propertyValue);
  }
 catch (  ConstraintValueDoNotMatchPropertyTypeException|ConstraintViolationException e) {
    return RestConstraintValidator.fromException(e,propertyName,propertyValue);
  }
  topologyServiceCore.save(topology);
  return RestResponseBuilder.<ConstraintInformation>builder().build();
}","/** 
 * Update one property for a given @{IndexedRelationshipType} of a   {@link NodeTemplate}
 * @param topologyId The id of the topology that contains the node template for which to update a property.
 * @param nodeTemplateName The name of the node template for which to update a property.
 * @param updatePropertyRequest The key and value of the property to update. When value is null => ""reset"" (load the default value).
 * @return a void rest response that contains no data if successful and an error if something goes wrong.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<ConstraintInformation> updateRelationshipPropertyValue(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String relationshipName,@RequestBody UpdateIndexedTypePropertyRequest updatePropertyRequest){
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  String propertyName=updatePropertyRequest.getPropertyName();
  Object propertyValue=updatePropertyRequest.getPropertyValue();
  String relationshipType=updatePropertyRequest.getType();
  Map<String,IndexedRelationshipType> relationshipTypes=topologyServiceCore.getIndexedRelationshipTypesFromTopology(topology);
  if (!relationshipTypes.get(relationshipType).getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str""+ relationshipType+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",propertyName,relationshipType,nodeTemplateName,topology.getId(),relationshipTypes.get(relationshipType).getProperties().get(propertyName),propertyValue);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,RelationshipTemplate> relationships=nodeTemplate.getRelationships();
  try {
    propertyService.setPropertyValue(relationships.get(relationshipName).getProperties(),relationshipTypes.get(relationshipType).getProperties().get(propertyName),propertyName,propertyValue);
  }
 catch (  ConstraintValueDoNotMatchPropertyTypeException|ConstraintViolationException e) {
    return RestConstraintValidator.fromException(e,propertyName,propertyValue);
  }
  topologyServiceCore.save(topology);
  return RestResponseBuilder.<ConstraintInformation>builder().build();
}"
62330,"/** 
 * Update one property for a given @{IndexedCapabilityType} of a   {@link NodeTemplate}
 * @param topologyId The id of the topology that contains the node template for which to update a property.
 * @param nodeTemplateName The name of the node template for which to update a property.
 * @param capabilityId The name of the capability.
 * @param updatePropertyRequest The key and value of the property to update. When value is null => ""reset"" (load the default value).
 * @return a void rest response that contains no data if successful and an error if something goes wrong.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<ConstraintInformation> updateCapabilityPropertyValue(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String capabilityId,@RequestBody UpdateIndexedTypePropertyRequest updatePropertyRequest){
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  String propertyName=updatePropertyRequest.getPropertyName();
  String propertyValue=updatePropertyRequest.getPropertyValue();
  String capabilityType=updatePropertyRequest.getType();
  Map<String,IndexedCapabilityType> capabilityTypes=topologyServiceCore.getIndexedCapabilityTypesFromTopology(topology);
  if (!capabilityTypes.get(capabilityType).getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str""+ capabilityType+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",propertyName,capabilityType,nodeTemplateName,topology.getId(),capabilityTypes.get(capabilityType).getProperties().get(propertyName),propertyValue);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,Capability> capabilities=nodeTemplate.getCapabilities();
  try {
    propertyService.setPropertyValue(capabilities.get(capabilityId).getProperties(),capabilityTypes.get(capabilityType).getProperties().get(propertyName),propertyName,propertyValue);
  }
 catch (  ConstraintValueDoNotMatchPropertyTypeException|ConstraintViolationException e) {
    return RestConstraintValidator.fromException(e,propertyName,propertyValue);
  }
  topologyServiceCore.save(topology);
  return RestResponseBuilder.<ConstraintInformation>builder().build();
}","/** 
 * Update one property for a given @{IndexedCapabilityType} of a   {@link NodeTemplate}
 * @param topologyId The id of the topology that contains the node template for which to update a property.
 * @param nodeTemplateName The name of the node template for which to update a property.
 * @param capabilityId The name of the capability.
 * @param updatePropertyRequest The key and value of the property to update. When value is null => ""reset"" (load the default value).
 * @return a void rest response that contains no data if successful and an error if something goes wrong.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<ConstraintInformation> updateCapabilityPropertyValue(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String capabilityId,@RequestBody UpdateIndexedTypePropertyRequest updatePropertyRequest){
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  String propertyName=updatePropertyRequest.getPropertyName();
  Object propertyValue=updatePropertyRequest.getPropertyValue();
  String capabilityType=updatePropertyRequest.getType();
  Map<String,IndexedCapabilityType> capabilityTypes=topologyServiceCore.getIndexedCapabilityTypesFromTopology(topology);
  if (!capabilityTypes.get(capabilityType).getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str""+ capabilityType+ ""String_Node_Str"");
  }
  log.debug(""String_Node_Str"",propertyName,capabilityType,nodeTemplateName,topology.getId(),capabilityTypes.get(capabilityType).getProperties().get(propertyName),propertyValue);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,Capability> capabilities=nodeTemplate.getCapabilities();
  try {
    propertyService.setPropertyValue(capabilities.get(capabilityId).getProperties(),capabilityTypes.get(capabilityType).getProperties().get(propertyName),propertyName,propertyValue);
  }
 catch (  ConstraintValueDoNotMatchPropertyTypeException|ConstraintViolationException e) {
    return RestConstraintValidator.fromException(e,propertyName,propertyValue);
  }
  topologyServiceCore.save(topology);
  return RestResponseBuilder.<ConstraintInformation>builder().build();
}"
62331,"@When(""String_Node_Str"") public void I_update_the_node_template_s_capability_of_type_s_property_to(String nodeTempName,String capabilityName,String capabilityType,String propertyName,String propertyValue) throws Throwable {
  String topologyId=Context.getInstance().getTopologyId();
  UpdateIndexedTypePropertyRequest req=new UpdateIndexedTypePropertyRequest(propertyName,propertyValue,capabilityType);
  String json=jsonMapper.writeValueAsString(req);
  Context.getInstance().registerRestResponse(Context.getRestClientInstance().postJSon(""String_Node_Str"" + topologyId + ""String_Node_Str""+ nodeTempName+ ""String_Node_Str""+ capabilityName+ ""String_Node_Str"",json));
}","@When(""String_Node_Str"") public void I_update_the_node_template_s_capability_of_type_s_property_to(String nodeTempName,String capabilityName,String capabilityType,String propertyName,Object propertyValue) throws Throwable {
  String topologyId=Context.getInstance().getTopologyId();
  UpdateIndexedTypePropertyRequest req=new UpdateIndexedTypePropertyRequest(propertyName,propertyValue,capabilityType);
  String json=jsonMapper.writeValueAsString(req);
  Context.getInstance().registerRestResponse(Context.getRestClientInstance().postJSon(""String_Node_Str"" + topologyId + ""String_Node_Str""+ nodeTempName+ ""String_Node_Str""+ capabilityName+ ""String_Node_Str"",json));
}"
62332,"@When(""String_Node_Str"") public void I_update_the_property_of_the_relationship_into_from_the_node_template(String propertyName,String relationshipName,String newValue,String nodeTemplateName) throws Throwable {
  String topologyId=Context.getInstance().getTopologyId();
  UpdateIndexedTypePropertyRequest updatePropertyRequest=new UpdateIndexedTypePropertyRequest();
  updatePropertyRequest.setPropertyName(propertyName);
  updatePropertyRequest.setPropertyValue(newValue);
  updatePropertyRequest.setType(""String_Node_Str"");
  String json=jsonMapper.writeValueAsString(updatePropertyRequest);
  Context.getInstance().registerRestResponse(Context.getRestClientInstance().postJSon(""String_Node_Str"" + topologyId + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str""+ relationshipName+ ""String_Node_Str"",json));
}","@When(""String_Node_Str"") public void I_update_the_property_of_the_relationship_into_from_the_node_template(String propertyName,String relationshipName,String newValue,String nodeTemplateName) throws Throwable {
  UpdateIndexedTypePropertyRequest updatePropertyRequest=new UpdateIndexedTypePropertyRequest();
  updatePropertyRequest.setPropertyValue(newValue);
  updatePropertyRequest.setType(""String_Node_Str"");
  updateRelationshipProperty(updatePropertyRequest,propertyName,relationshipName,nodeTemplateName);
}"
62333,"public void generateId(){
  this.id=generateId(esIndex,esType,targetElementId,targetProperty);
}","public static String generateId(String esIndex,String esType,String targetElementId,String targetProperty){
  return esIndex + ""String_Node_Str"" + esType+ ""String_Node_Str""+ targetElementId+ ""String_Node_Str""+ targetProperty;
}"
62334,"private void checkProperty(String nodePrefix,String propertyName,String propertyTextValue,Class<? extends IndexedInheritableToscaElement> type,String elementId,ParsingContext context){
  SuggestionEntry suggestionEntry=getSuggestionEntry(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,type.getSimpleName().toLowerCase(),elementId,propertyName);
  if (suggestionEntry != null) {
    PriorityQueue<SuggestionService.MatchedSuggestion> similarValues=getJarowinklerMatchedSuggestions(suggestionEntry.getSuggestions(),propertyTextValue,0.8);
    if (!similarValues.isEmpty()) {
      SuggestionService.MatchedSuggestion mostMatched=similarValues.poll();
      if (!mostMatched.getValue().equals(propertyTextValue)) {
        ParsingErrorLevel level;
        if (mostMatched.getPriority() == 1.0) {
          level=ParsingErrorLevel.WARNING;
        }
 else {
          level=ParsingErrorLevel.INFO;
          addSuggestionValueToSuggestionEntry(suggestionEntry.getId(),propertyTextValue);
        }
        context.getParsingErrors().add(new ParsingError(level,ErrorCode.POTENTIAL_BAD_PROPERTY_VALUE,null,null,null,null,""String_Node_Str"" + nodePrefix + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ mostMatched.getValue()+ ""String_Node_Str""+ propertyTextValue+ ""String_Node_Str""));
      }
    }
 else {
      addSuggestionValueToSuggestionEntry(suggestionEntry.getId(),propertyTextValue);
    }
  }
}","private SuggestionEntry checkProperty(String nodePrefix,String propertyName,String propertyTextValue,Class<? extends IndexedInheritableToscaElement> type,String elementId,ParsingContext context){
  SuggestionEntry suggestionEntry=getSuggestionEntry(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,type.getSimpleName().toLowerCase(),elementId,propertyName);
  if (suggestionEntry != null) {
    PriorityQueue<SuggestionService.MatchedSuggestion> similarValues=getJaroWinklerMatchedSuggestions(suggestionEntry.getSuggestions(),propertyTextValue,0.8);
    if (!similarValues.isEmpty()) {
      SuggestionService.MatchedSuggestion mostMatched=similarValues.poll();
      if (!mostMatched.getValue().equals(propertyTextValue)) {
        ParsingErrorLevel level;
        if (mostMatched.getPriority() == 1.0) {
          level=ParsingErrorLevel.WARNING;
        }
 else {
          level=ParsingErrorLevel.INFO;
          addSuggestionValueToSuggestionEntry(suggestionEntry.getId(),propertyTextValue);
        }
        context.getParsingErrors().add(new ParsingError(level,ErrorCode.POTENTIAL_BAD_PROPERTY_VALUE,null,null,null,null,""String_Node_Str"" + nodePrefix + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ mostMatched.getValue()+ ""String_Node_Str""+ propertyTextValue+ ""String_Node_Str""));
      }
    }
 else {
      addSuggestionValueToSuggestionEntry(suggestionEntry.getId(),propertyTextValue);
    }
  }
  return suggestionEntry;
}"
62335,"/** 
 * Iterate on default suggestions to update all assosiate property definition.
 */
public void setAllSuggestionIdOnPropertyDefinition(){
  List<SuggestionEntry> suggestionEntries=getAllSuggestionEntries();
  if (suggestionEntries != null && !suggestionEntries.isEmpty()) {
    for (    SuggestionEntry suggestionEntry : suggestionEntries) {
      setSuggestionIdOnPropertyDefinition(suggestionEntry);
    }
  }
}","/** 
 * Iterate on default suggestions to update all associate property definition.
 */
public void setAllSuggestionIdOnPropertyDefinition(){
  List<SuggestionEntry> suggestionEntries=getAllSuggestionEntries();
  if (suggestionEntries != null && !suggestionEntries.isEmpty()) {
    for (    SuggestionEntry suggestionEntry : suggestionEntries) {
      setSuggestionIdOnPropertyDefinition(suggestionEntry);
    }
  }
}"
62336,"/** 
 * This method load the defaults suggestions to ES.
 * @throws IOException
 */
@PostConstruct public void loadDefaultSuggestions() throws IOException {
  try (InputStream input=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"")){
    SuggestionEntry[] suggestions=YamlParserUtil.parse(input,SuggestionEntry[].class);
    for (    SuggestionEntry suggestionEntry : suggestions) {
      suggestionEntry.generateId();
      if (!isSuggestionExist(suggestionEntry)) {
        alienDAO.save(suggestionEntry);
      }
    }
  }
 }","/** 
 * This method load the defaults suggestions to ES.
 * @throws IOException
 */
@PostConstruct public void loadDefaultSuggestions() throws IOException {
  try (InputStream input=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"")){
    SuggestionEntry[] suggestions=YamlParserUtil.parse(input,SuggestionEntry[].class);
    for (    SuggestionEntry suggestionEntry : suggestions) {
      if (!isSuggestionExist(suggestionEntry)) {
        alienDAO.save(suggestionEntry);
      }
    }
  }
 }"
62337,"/** 
 * Get all suggestionEntry
 * @return all suggestion entries
 */
public List<SuggestionEntry> getAllSuggestionEntries(){
  return alienDAO.customFindAll(SuggestionEntry.class,null);
}","/** 
 * Get all suggestionEntries, attention this method do not return suggested values
 * @return all suggestion entries without their values
 */
private List<SuggestionEntry> getAllSuggestionEntries(){
  GetMultipleDataResult<SuggestionEntry> result=alienDAO.search(SuggestionEntry.class,null,null,FetchContext.SUMMARY,0,Integer.MAX_VALUE);
  if (result.getData() != null && result.getData().length > 0) {
    return Arrays.asList(result.getData());
  }
 else {
    return new ArrayList<>();
  }
}"
62338,"private void checkPropertyConstraints(String prefix,Class<? extends IndexedInheritableToscaElement> type,String elementId,String propertyName,List<PropertyConstraint> constraints,ParsingContext context){
  if (constraints != null && !constraints.isEmpty()) {
    for (    PropertyConstraint propertyConstraint : constraints) {
      if (propertyConstraint instanceof EqualConstraint) {
        EqualConstraint equalConstraint=(EqualConstraint)propertyConstraint;
        String valueToCheck=equalConstraint.getEqual();
        checkProperty(prefix,propertyName,valueToCheck,type,elementId,context);
      }
 else       if (propertyConstraint instanceof ValidValuesConstraint) {
        ValidValuesConstraint validValuesConstraint=(ValidValuesConstraint)propertyConstraint;
        if (validValuesConstraint.getValidValues() != null && !validValuesConstraint.getValidValues().isEmpty()) {
          for (          String valueToCheck : validValuesConstraint.getValidValues()) {
            checkProperty(prefix,propertyName,valueToCheck,type,elementId,context);
          }
        }
      }
    }
  }
}","private void checkPropertyConstraints(String prefix,Class<? extends IndexedInheritableToscaElement> type,String elementId,String propertyName,List<PropertyConstraint> constraints,ParsingContext context){
  if (constraints != null && !constraints.isEmpty()) {
    for (    PropertyConstraint propertyConstraint : constraints) {
      if (propertyConstraint instanceof EqualConstraint) {
        EqualConstraint equalConstraint=(EqualConstraint)propertyConstraint;
        String valueToCheck=equalConstraint.getEqual();
        if (checkProperty(prefix,propertyName,valueToCheck,type,elementId,context) == null) {
          createSuggestionEntry(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,IndexedCapabilityType.class,Sets.newHashSet(valueToCheck),elementId,propertyName);
        }
      }
 else       if (propertyConstraint instanceof ValidValuesConstraint) {
        ValidValuesConstraint validValuesConstraint=(ValidValuesConstraint)propertyConstraint;
        if (validValuesConstraint.getValidValues() != null && !validValuesConstraint.getValidValues().isEmpty()) {
          SuggestionEntry foundSuggestion=null;
          for (          String valueToCheck : validValuesConstraint.getValidValues()) {
            foundSuggestion=checkProperty(prefix,propertyName,valueToCheck,type,elementId,context);
            if (foundSuggestion == null) {
              break;
            }
          }
          if (foundSuggestion == null) {
            createSuggestionEntry(ElasticSearchDAO.TOSCA_ELEMENT_INDEX,IndexedCapabilityType.class,Sets.newHashSet(validValuesConstraint.getValidValues()),elementId,propertyName);
          }
        }
      }
    }
  }
}"
62339,"/** 
 * Upload a TOSCA archive and index its components.
 * @param path The archive path.
 * @return The Csar object from the parsing.
 * @throws ParsingException
 * @throws CSARVersionAlreadyExistsException
 */
public ParsingResult<Csar> upload(Path path) throws ParsingException, CSARVersionAlreadyExistsException {
  ParsingResult<ArchiveRoot> parsingResult=parser.parse(path);
  final ArchiveRoot archiveRoot=parsingResult.getResult();
  if (archiveRoot.hasToscaTopologyTemplate()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT,Role.ADMIN);
  }
  if (archiveRoot.hasToscaTypes()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER,Role.ADMIN);
  }
  if (ArchiveUploadService.hasError(parsingResult,null)) {
    if (ArchiveUploadService.hasError(parsingResult,ParsingErrorLevel.ERROR)) {
      return toSimpleResult(parsingResult);
    }
  }
  archiveIndexer.importArchive(archiveRoot,path,parsingResult.getContext().getParsingErrors());
  suggestionService.postProcessSuggestionFromArchive(parsingResult);
  suggestionService.setAllSuggestionIdOnPropertyDefinition();
  return toSimpleResult(parsingResult);
}","/** 
 * Upload a TOSCA archive and index its components.
 * @param path The archive path.
 * @return The Csar object from the parsing.
 * @throws ParsingException
 * @throws CSARVersionAlreadyExistsException
 */
public ParsingResult<Csar> upload(Path path) throws ParsingException, CSARVersionAlreadyExistsException {
  ParsingResult<ArchiveRoot> parsingResult=parser.parse(path);
  final ArchiveRoot archiveRoot=parsingResult.getResult();
  if (archiveRoot.hasToscaTopologyTemplate()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.ARCHITECT,Role.ADMIN);
  }
  if (archiveRoot.hasToscaTypes()) {
    AuthorizationUtil.checkHasOneRoleIn(Role.COMPONENTS_MANAGER,Role.ADMIN);
  }
  if (ArchiveUploadService.hasError(parsingResult,null)) {
    if (ArchiveUploadService.hasError(parsingResult,ParsingErrorLevel.ERROR)) {
      return toSimpleResult(parsingResult);
    }
  }
  archiveIndexer.importArchive(archiveRoot,path,parsingResult.getContext().getParsingErrors());
  try {
    suggestionService.postProcessSuggestionFromArchive(parsingResult);
    suggestionService.setAllSuggestionIdOnPropertyDefinition();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
  return toSimpleResult(parsingResult);
}"
62340,"private RequirementDefinition getRequirementDefinitionByNameInHierarchy(IndexedNodeType indexedNodeType,String name,ArchiveRoot archiveRoot){
  RequirementDefinition rd=getRequirementDefinitionByName(indexedNodeType,name);
  if (rd != null) {
    return rd;
  }
  List<String> derivedFrom=indexedNodeType.getDerivedFrom();
  if (derivedFrom == null) {
    return null;
  }
  Map<String,IndexedNodeType> hierarchy=Maps.newHashMap();
  for (  String parentId : derivedFrom) {
    IndexedNodeType parentType=ToscaParsingUtil.getNodeTypeFromArchiveOrDependencies(parentId,archiveRoot,searchService);
    hierarchy.put(parentType.getId(),parentType);
  }
  List<IndexedNodeType> hierarchyList=IndexedModelUtils.orderByDerivedFromHierarchy(hierarchy);
  Collections.reverse(hierarchyList);
  for (  IndexedNodeType parentType : hierarchyList) {
    rd=getRequirementDefinitionByName(parentType,name);
    if (rd != null) {
      return rd;
    }
  }
  return null;
}","private RequirementDefinition getRequirementDefinitionByNameInHierarchy(IndexedNodeType indexedNodeType,String name,ArchiveRoot archiveRoot){
  RequirementDefinition rd=getRequirementDefinitionByName(indexedNodeType,name);
  if (rd != null) {
    return rd;
  }
  List<String> derivedFrom=indexedNodeType.getDerivedFrom();
  if (derivedFrom == null) {
    return null;
  }
  Map<String,IndexedNodeType> hierarchy=Maps.newHashMap();
  for (  String parentId : derivedFrom) {
    IndexedNodeType parentType=ToscaParsingUtil.getNodeTypeFromArchiveOrDependencies(parentId,archiveRoot,searchService);
    hierarchy.put(parentType.getElementId(),parentType);
  }
  List<IndexedNodeType> hierarchyList=IndexedModelUtils.orderByDerivedFromHierarchy(hierarchy);
  Collections.reverse(hierarchyList);
  for (  IndexedNodeType parentType : hierarchyList) {
    rd=getRequirementDefinitionByName(parentType,name);
    if (rd != null) {
      return rd;
    }
  }
  return null;
}"
62341,"private <T extends IndexedInheritableToscaElement>void mergeHierarchy(T indexedElement,ArchiveRoot archiveRoot){
  List<String> derivedFrom=indexedElement.getDerivedFrom();
  if (derivedFrom == null) {
    return;
  }
  Map<String,T> hierarchy=Maps.newHashMap();
  for (  String parentId : derivedFrom) {
    T parentElement=(T)ToscaParsingUtil.getElementFromArchiveOrDependencies(indexedElement.getClass(),parentId,archiveRoot,searchService);
    hierarchy.put(parentElement.getId(),parentElement);
  }
  List<T> hierarchyList=IndexedModelUtils.orderByDerivedFromHierarchy(hierarchy);
  hierarchyList.add(indexedElement);
  for (int i=0; i < hierarchyList.size() - 1; i++) {
    T from=hierarchyList.get(i);
    T to=hierarchyList.get(i + 1);
    if (Objects.equal(to.getArchiveName(),archiveRoot.getArchive().getName()) && Objects.equal(to.getArchiveVersion(),archiveRoot.getArchive().getVersion())) {
      IndexedModelUtils.mergeInheritableIndex(from,to);
    }
  }
}","private <T extends IndexedInheritableToscaElement>void mergeHierarchy(T indexedElement,ArchiveRoot archiveRoot){
  List<String> derivedFrom=indexedElement.getDerivedFrom();
  if (derivedFrom == null) {
    return;
  }
  Map<String,T> hierarchy=Maps.newHashMap();
  for (  String parentId : derivedFrom) {
    T parentElement=(T)ToscaParsingUtil.getElementFromArchiveOrDependencies(indexedElement.getClass(),parentId,archiveRoot,searchService);
    hierarchy.put(parentElement.getElementId(),parentElement);
  }
  List<T> hierarchyList=IndexedModelUtils.orderByDerivedFromHierarchy(hierarchy);
  hierarchyList.add(indexedElement);
  for (int i=0; i < hierarchyList.size() - 1; i++) {
    T from=hierarchyList.get(i);
    T to=hierarchyList.get(i + 1);
    if (Objects.equal(to.getArchiveName(),archiveRoot.getArchive().getName()) && Objects.equal(to.getArchiveVersion(),archiveRoot.getArchive().getVersion())) {
      IndexedModelUtils.mergeInheritableIndex(from,to);
    }
  }
}"
62342,"@Override public void registerStompEndpoints(StompEndpointRegistry registry){
  registry.addEndpoint(""String_Node_Str"").withSockJS().setSessionCookieNeeded(true);
  registry.addEndpoint(""String_Node_Str"").withSockJS().setSessionCookieNeeded(true);
}","@Override public void registerStompEndpoints(StompEndpointRegistry registry){
  registry.addEndpoint(""String_Node_Str"").withSockJS().setSessionCookieNeeded(true);
  registry.addEndpoint(""String_Node_Str"").withSockJS().setSessionCookieNeeded(true);
  registry.addEndpoint(""String_Node_Str"").withSockJS().setSessionCookieNeeded(true);
}"
62343,"/** 
 * Get the audit configuration, this method will cache the configuration in memory
 * @return the audit configuration
 */
public synchronized AuditConfiguration getAuditConfiguration(){
  if (this.auditConfiguration == null) {
    this.auditConfiguration=alienDAO.customFind(AuditConfiguration.class,null);
  }
  return this.auditConfiguration;
}","/** 
 * Get the audit configuration, this method will cache the configuration in memory
 * @return the audit configuration
 */
public synchronized AuditConfiguration getAuditConfiguration(){
  if (this.auditConfiguration == null) {
    this.auditConfiguration=alienDAO.findById(AuditConfiguration.class,AuditConfiguration.ID);
  }
  return this.auditConfiguration;
}"
62344,"public Method getAuditedMethod(HandlerMethod controllerMethod){
  RequestMapping methodMapping=AnnotationUtils.findAnnotation(controllerMethod.getMethod(),RequestMapping.class);
  RequestMapping controllerMapping=AnnotationUtils.findAnnotation(controllerMethod.getMethod().getDeclaringClass(),RequestMapping.class);
  String contextPath=null;
  String httpMethod=null;
  if (controllerMapping != null) {
    contextPath=getRequestMappingPath(controllerMapping);
    httpMethod=getRequestMappingMethod(controllerMapping);
    if (methodMapping != null) {
      String methodContextPath=getRequestMappingPath(methodMapping);
      String methodHttpMethod=getRequestMappingMethod(methodMapping);
      if (contextPath == null) {
        contextPath=methodContextPath;
      }
 else       if (methodContextPath != null) {
        contextPath+=methodContextPath;
      }
      if (httpMethod == null) {
        httpMethod=methodHttpMethod;
      }
    }
  }
 else   if (methodMapping != null) {
    contextPath=getRequestMappingPath(methodMapping);
    httpMethod=getRequestMappingMethod(methodMapping);
  }
  if (contextPath == null || httpMethod == null) {
    return null;
  }
  Audit audit=getAuditAnnotation(controllerMethod);
  return new Method(contextPath,httpMethod,getAuditCategoryName(controllerMethod,audit),getAuditActionName(controllerMethod,audit));
}","public Method getAuditedMethod(HandlerMethod controllerMethod){
  RequestMapping methodMapping=AnnotationUtils.findAnnotation(controllerMethod.getMethod(),RequestMapping.class);
  RequestMapping controllerMapping=AnnotationUtils.findAnnotation(controllerMethod.getMethod().getDeclaringClass(),RequestMapping.class);
  String httpMethod=null;
  if (controllerMapping != null) {
    httpMethod=getRequestMappingMethod(controllerMapping);
    if (methodMapping != null) {
      String methodHttpMethod=getRequestMappingMethod(methodMapping);
      if (httpMethod == null) {
        httpMethod=methodHttpMethod;
      }
    }
  }
 else   if (methodMapping != null) {
    httpMethod=getRequestMappingMethod(methodMapping);
  }
  if (httpMethod == null) {
    return null;
  }
  Audit audit=getAuditAnnotation(controllerMethod);
  return new Method(httpMethod,getAuditCategoryName(controllerMethod,audit),getAuditActionName(controllerMethod,audit));
}"
62345,"@JsonIgnore public void setAuditedMethodsMap(Map<Method,Boolean> auditedMethodsMap){
  auditedMethods=Sets.newHashSet();
  if (auditedMethodsMap == null) {
    return;
  }
  for (  Map.Entry<Method,Boolean> auditedMethodsMapEntry : auditedMethodsMap.entrySet()) {
    auditedMethods.add(new AuditedMethod(auditedMethodsMapEntry.getKey().getPath(),auditedMethodsMapEntry.getKey().getMethod(),auditedMethodsMapEntry.getKey().getCategory(),auditedMethodsMapEntry.getKey().getAction(),auditedMethodsMapEntry.getValue()));
  }
}","@JsonIgnore public void setAuditedMethodsMap(Map<Method,Boolean> auditedMethodsMap){
  auditedMethods=Sets.newHashSet();
  if (auditedMethodsMap == null) {
    return;
  }
  for (  Map.Entry<Method,Boolean> auditedMethodsMapEntry : auditedMethodsMap.entrySet()) {
    auditedMethods.add(new AuditedMethod(auditedMethodsMapEntry.getKey().getMethod(),auditedMethodsMapEntry.getKey().getCategory(),auditedMethodsMapEntry.getKey().getAction(),auditedMethodsMapEntry.getValue()));
  }
}"
62346,"@JsonIgnore public Map<Method,Boolean> getAuditedMethodsMap(){
  Map<Method,Boolean> methodsMap=Maps.newHashMap();
  if (auditedMethods == null) {
    return methodsMap;
  }
  for (  AuditedMethod auditedMethod : auditedMethods) {
    methodsMap.put(new Method(auditedMethod.getPath(),auditedMethod.getMethod(),auditedMethod.getCategory(),auditedMethod.getAction()),auditedMethod.isEnabled());
  }
  return methodsMap;
}","@JsonIgnore public Map<Method,Boolean> getAuditedMethodsMap(){
  Map<Method,Boolean> methodsMap=Maps.newHashMap();
  if (auditedMethods == null) {
    return methodsMap;
  }
  for (  AuditedMethod auditedMethod : auditedMethods) {
    methodsMap.put(new Method(auditedMethod.getMethod(),auditedMethod.getCategory(),auditedMethod.getAction()),auditedMethod.isEnabled());
  }
  return methodsMap;
}"
62347,"public AuditedMethod(String path,String method,String category,String action,boolean enabled){
  super(path,method,category,action);
  this.enabled=enabled;
}","public AuditedMethod(String method,String category,String action,boolean enabled){
  super(method,category,action);
  this.enabled=enabled;
}"
62348,"@PostConstruct private void postConstruct(){
  AuditConfiguration auditConfiguration=auditService.getAuditConfiguration();
  Map<Method,Boolean> allAvailableMethodsForAudit=getAllAvailableMethodsForAudit();
  if (auditConfiguration == null) {
    log.info(""String_Node_Str"");
    auditConfiguration=new AuditConfiguration();
  }
 else {
    log.info(""String_Node_Str"");
    Map<Method,Boolean> existingMethodsMap=auditConfiguration.getAuditedMethodsMap();
    for (    Map.Entry<Method,Boolean> methodEntry : allAvailableMethodsForAudit.entrySet()) {
      Boolean existingMethodEnabled=existingMethodsMap.get(methodEntry.getKey());
      if (existingMethodEnabled != null) {
        methodEntry.setValue(existingMethodEnabled);
      }
    }
  }
  auditConfiguration.setAuditedMethodsMap(allAvailableMethodsForAudit);
  auditService.saveAuditConfiguration(auditConfiguration);
}","@PostConstruct private void postConstruct(){
  AuditConfiguration auditConfiguration=auditService.getAuditConfiguration();
  Map<Method,Boolean> allAvailableMethodsForAudit=getAllAvailableMethodsForAudit();
  if (auditConfiguration == null) {
    log.info(""String_Node_Str"");
    auditConfiguration=new AuditConfiguration();
    auditConfiguration.setId(AuditConfiguration.ID);
  }
 else {
    log.info(""String_Node_Str"");
    Map<Method,Boolean> existingMethodsMap=auditConfiguration.getAuditedMethodsMap();
    for (    Map.Entry<Method,Boolean> methodEntry : allAvailableMethodsForAudit.entrySet()) {
      Boolean existingMethodEnabled=existingMethodsMap.get(methodEntry.getKey());
      if (existingMethodEnabled != null) {
        methodEntry.setValue(existingMethodEnabled);
      }
    }
  }
  auditConfiguration.setAuditedMethodsMap(allAvailableMethodsForAudit);
  auditService.saveAuditConfiguration(auditConfiguration);
}"
62349,"private AuditTrace getAuditTrace(HttpServletRequest request,HttpServletResponse response,HandlerMethod method,User user,boolean requestContainsJson) throws IOException {
  Audit audit=auditService.getAuditAnnotation(method);
  AuditTrace auditTrace=new AuditTrace();
  auditTrace.setTimestamp(System.currentTimeMillis());
  auditTrace.setAction(auditService.getAuditActionName(method,audit));
  ApiOperation apiDoc=getApiDoc(method);
  if (apiDoc != null) {
    auditTrace.setActionDescription(apiDoc.value());
  }
  auditTrace.setCategory(auditService.getAuditCategoryName(method,audit));
  auditTrace.setUserName(user.getUsername());
  auditTrace.setUserFirstName(user.getFirstName());
  auditTrace.setUserLastName(user.getLastName());
  auditTrace.setUserEmail(user.getEmail());
  auditTrace.setPath(request.getRequestURI());
  auditTrace.setMethod(request.getMethod());
  auditTrace.setRequestParameters(request.getParameterMap());
  auditTrace.setSourceIp(request.getRemoteAddr());
  if (requestContainsJson) {
    auditTrace.setRequestBody(StreamUtils.copyToString(request.getInputStream(),Charsets.UTF_8));
  }
  auditTrace.setResponseStatus(response.getStatus());
  return auditTrace;
}","private AuditTrace getAuditTrace(HttpServletRequest request,HttpServletResponse response,HandlerMethod method,User user,boolean requestContainsJson) throws IOException {
  Audit audit=auditService.getAuditAnnotation(method);
  AuditTrace auditTrace=new AuditTrace();
  auditTrace.setTimestamp(System.currentTimeMillis());
  auditTrace.setAction(auditService.getAuditActionName(method,audit));
  ApiOperation apiDoc=getApiDoc(method);
  if (apiDoc != null) {
    auditTrace.setActionDescription(apiDoc.value());
  }
  auditTrace.setCategory(auditService.getAuditCategoryName(method,audit));
  auditTrace.setUserName(user.getUsername());
  auditTrace.setUserFirstName(user.getFirstName());
  auditTrace.setUserLastName(user.getLastName());
  auditTrace.setUserEmail(user.getEmail());
  auditTrace.setPath(request.getRequestURI());
  auditTrace.setVersion(getApiVersion(request.getRequestURI()));
  auditTrace.setUserAgent(request.getHeader(HttpHeaders.USER_AGENT));
  auditTrace.setAlien4CloudUI(!Strings.isNullOrEmpty(request.getHeader(A4C_UI_HEADER)));
  auditTrace.setMethod(request.getMethod());
  auditTrace.setRequestParameters(request.getParameterMap());
  auditTrace.setSourceIp(request.getRemoteAddr());
  if (requestContainsJson) {
    auditTrace.setRequestBody(StreamUtils.copyToString(request.getInputStream(),Charsets.UTF_8));
  }
  auditTrace.setResponseStatus(response.getStatus());
  return auditTrace;
}"
62350,"@Override public void filter(List<ILocationMatch> toFilter,Topology topology){
  artifactsElector.setDependencies(topology.getDependencies());
  for (  Entry<String,NodeTemplate> entry : topology.getNodeTemplates().entrySet()) {
    artifactsElector.setTemplate(entry.getValue());
    filterWith(toFilter,artifactsElector);
  }
}","@Override public void filter(List<ILocationMatch> toFilter,Topology topology){
  NodeMatchContext nodeMatchContext=new NodeMatchContext();
  nodeMatchContext.topology=topology;
  for (  Entry<String,NodeTemplate> entry : topology.getNodeTemplates().entrySet()) {
    nodeMatchContext.template=entry.getValue();
    for (Iterator<ILocationMatch> it=toFilter.iterator(); it.hasNext(); ) {
      nodeMatchContext.locationMatch=it.next();
      if (!artifactsElector.isEligible(nodeMatchContext)) {
        it.remove();
      }
    }
  }
}"
62351,"private boolean areRelationshipsArtifactSupported(ILocationMatch locationMatch,NodeTemplate nodeTemplate){
  if (MapUtils.isNotEmpty(nodeTemplate.getRelationships())) {
    for (    RelationshipTemplate relTemplate : nodeTemplate.getRelationships().values()) {
      if (!isEligible(relTemplate,locationMatch)) {
        return false;
      }
    }
  }
  return true;
}","private boolean areRelationshipsArtifactSupported(LocationMatchNodeFilter.NodeMatchContext matchContext){
  if (MapUtils.isNotEmpty(matchContext.getTemplate().getRelationships())) {
    for (    RelationshipTemplate relTemplate : matchContext.getTemplate().getRelationships().values()) {
      if (!isEligible(relTemplate,matchContext)) {
        return false;
      }
    }
  }
  return true;
}"
62352,"private boolean isEligible(AbstractTemplate template,ILocationMatch locationMatch){
  if (template == null) {
    return true;
  }
  IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(locationMatch.getOrchestrator());
  if (orchestratorFactory.getArtifactSupport() == null || ArrayUtils.isEmpty(orchestratorFactory.getArtifactSupport().getTypes())) {
    return true;
  }
  String[] supportedArtifacts=orchestratorFactory.getArtifactSupport().getTypes();
  IndexedArtifactToscaElement indexedArtifactToscaElement=csarSearchService.getRequiredElementInDependencies(IndexedArtifactToscaElement.class,template.getType(),dependencies);
  if (MapUtils.isNotEmpty(indexedArtifactToscaElement.getInterfaces())) {
    for (    Interface interfaz : indexedArtifactToscaElement.getInterfaces().values()) {
      for (      Operation operation : interfaz.getOperations().values()) {
        if (operation.getImplementationArtifact() != null) {
          String artifactTypeString=operation.getImplementationArtifact().getArtifactType();
          IndexedArtifactType artifactType=csarSearchService.getRequiredElementInDependencies(IndexedArtifactType.class,artifactTypeString,dependencies);
          if (!isFromOneOfTypes(supportedArtifacts,artifactType)) {
            return false;
          }
        }
      }
    }
  }
  return true;
}","private boolean isEligible(AbstractTemplate template,LocationMatchNodeFilter.NodeMatchContext matchContext){
  if (template == null) {
    return true;
  }
  ArtifactSupport artifactSupport=matchContext.getArtifactSupport();
  if (artifactSupport == null || ArrayUtils.isEmpty(artifactSupport.getTypes())) {
    return true;
  }
  String[] supportedArtifacts=artifactSupport.getTypes();
  IndexedArtifactToscaElement indexedArtifactToscaElement=matchContext.getElement(IndexedArtifactToscaElement.class,template.getType());
  if (MapUtils.isNotEmpty(indexedArtifactToscaElement.getInterfaces())) {
    for (    Interface interfaz : indexedArtifactToscaElement.getInterfaces().values()) {
      for (      Operation operation : interfaz.getOperations().values()) {
        if (operation.getImplementationArtifact() != null) {
          String artifactTypeString=operation.getImplementationArtifact().getArtifactType();
          IndexedArtifactType artifactType=matchContext.getElement(IndexedArtifactType.class,artifactTypeString);
          if (!isFromOneOfTypes(supportedArtifacts,artifactType)) {
            return false;
          }
        }
      }
    }
  }
  return true;
}"
62353,"private void createLocation(Orchestrator orchestrator,Location location,String infrastructureType){
  ensureNameUnicityAndSave(location);
  location.setInfrastructureType(infrastructureType);
  Set<CSARDependency> dependencies=locationArchiveIndexer.indexArchives(orchestrator,location);
  location.setDependencies(dependencies);
  alienDAO.save(location);
  autoConfigure(orchestrator,location);
  try {
    locationResourceService.getLocationResourcesFromOrchestrator(location);
  }
 catch (  NotFoundException e) {
    delete(location.getId());
    throw new MissingCSARDependencies(e.getMessage());
  }
}","private void createLocation(Orchestrator orchestrator,Location location,String infrastructureType){
  ensureNameUnicityAndSave(location);
  location.setInfrastructureType(infrastructureType);
  Set<CSARDependency> dependencies=locationArchiveIndexer.indexArchives(orchestrator,location);
  location.setDependencies(dependencies);
  alienDAO.save(location);
  autoConfigure(orchestrator,location);
  try {
    locationResourceService.getLocationResourcesFromOrchestrator(location);
  }
 catch (  NotFoundException e) {
    delete(location.getId());
    throw new MissingCSARDependenciesException(e.getMessage());
  }
}"
62354,"private List<PluginArchive> parseArchives(){
  List<PluginArchive> archives=Lists.newArrayList();
  addToAchive(archives,""String_Node_Str"");
  addToAchive(archives,""String_Node_Str"");
  return archives;
}","private List<PluginArchive> parseArchives() throws ParsingException {
  List<PluginArchive> archives=Lists.newArrayList();
  addToAchive(archives,""String_Node_Str"");
  addToAchive(archives,""String_Node_Str"");
  return archives;
}"
62355,"private void addToAchive(List<PluginArchive> archives,String path){
  Path archivePath=selfContext.getPluginPath().resolve(path);
  try {
    ParsingResult<ArchiveRoot> result=archiveParser.parseDir(archivePath);
    PluginArchive pluginArchive=new PluginArchive(result.getResult(),archivePath);
    archives.add(pluginArchive);
  }
 catch (  ParsingException e) {
    log.error(""String_Node_Str"",e);
  }
}","private void addToAchive(List<PluginArchive> archives,String path) throws ParsingException {
  Path archivePath=selfContext.getPluginPath().resolve(path);
  ParsingResult<ArchiveRoot> result=archiveParser.parseDir(archivePath);
  PluginArchive pluginArchive=new PluginArchive(result.getResult(),archivePath);
  archives.add(pluginArchive);
}"
62356,"@Override public List<PluginArchive> pluginArchives(){
  return archives;
}","@Override public List<PluginArchive> pluginArchives() throws PluginParseException {
  if (archives == null) {
    try {
      archives=parseArchives();
    }
 catch (    ParsingException e) {
      log.error(e.getMessage());
      throw new PluginParseException(e.getMessage());
    }
  }
  return archives;
}"
62357,"@ExceptionHandler(value=MissingCSARDependencies.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public RestResponse<Void> MissingCSARDependenciesExceptionHandler(MissingCSARDependencies e){
  log.error(""String_Node_Str"" + e.getMessage());
  return RestResponseBuilder.<Void>builder().error(RestErrorBuilder.builder(RestErrorCode.CSAR_PARSING_ERROR).message(e.getMessage()).build()).build();
}","@ExceptionHandler(value=MissingCSARDependenciesException.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public RestResponse<Void> MissingCSARDependenciesExceptionHandler(MissingCSARDependenciesException e){
  log.error(""String_Node_Str"" + e.getMessage());
  return RestResponseBuilder.<Void>builder().error(RestErrorBuilder.builder(RestErrorCode.CSAR_PARSING_ERROR).message(e.getMessage()).build()).build();
}"
62358,"/** 
 * Inject input artifacts in the corresponding nodes.
 */
public void processInputArtifacts(DeploymentTopology topology){
  if (topology.getInputArtifacts() != null && !topology.getInputArtifacts().isEmpty()) {
    Map<String,List<DeploymentArtifact>> artifactMap=Maps.newHashMap();
    for (    NodeTemplate nodeTemplate : topology.getNodeTemplates().values()) {
      if (nodeTemplate.getArtifacts() != null && !nodeTemplate.getArtifacts().isEmpty()) {
        for (        DeploymentArtifact da : nodeTemplate.getArtifacts().values()) {
          String inputArtifactId=InputArtifactUtil.getInputArtifactId(da);
          if (inputArtifactId != null) {
            List<DeploymentArtifact> das=artifactMap.get(inputArtifactId);
            if (das == null) {
              das=Lists.newArrayList();
              artifactMap.put(inputArtifactId,das);
            }
            das.add(da);
          }
        }
      }
    }
    for (    Map.Entry<String,DeploymentArtifact> e : topology.getInputArtifacts().entrySet()) {
      List<DeploymentArtifact> nodeArtifacts=artifactMap.get(e.getKey());
      if (nodeArtifacts != null) {
        for (        DeploymentArtifact nodeArtifact : nodeArtifacts) {
          nodeArtifact.setArtifactRef(e.getValue().getArtifactRef());
          nodeArtifact.setArtifactName(e.getValue().getArtifactName());
        }
      }
    }
  }
}","/** 
 * Inject input artifacts in the corresponding nodes.
 */
public void processInputArtifacts(DeploymentTopology topology){
  if (topology.getInputArtifacts() != null && !topology.getInputArtifacts().isEmpty()) {
    Map<String,List<DeploymentArtifact>> artifactMap=Maps.newHashMap();
    for (    NodeTemplate nodeTemplate : topology.getNodeTemplates().values()) {
      if (nodeTemplate.getArtifacts() != null && !nodeTemplate.getArtifacts().isEmpty()) {
        for (        DeploymentArtifact da : nodeTemplate.getArtifacts().values()) {
          String inputArtifactId=InputArtifactUtil.getInputArtifactId(da);
          if (inputArtifactId != null) {
            List<DeploymentArtifact> das=artifactMap.get(inputArtifactId);
            if (das == null) {
              das=Lists.newArrayList();
              artifactMap.put(inputArtifactId,das);
            }
            das.add(da);
          }
        }
      }
    }
    for (    Map.Entry<String,DeploymentArtifact> e : topology.getInputArtifacts().entrySet()) {
      List<DeploymentArtifact> nodeArtifacts=artifactMap.get(e.getKey());
      if (nodeArtifacts != null) {
        for (        DeploymentArtifact nodeArtifact : nodeArtifacts) {
          nodeArtifact.setArtifactRef(e.getValue().getArtifactRef());
          nodeArtifact.setArtifactName(e.getValue().getArtifactName());
          nodeArtifact.setArtifactRepository(ArtifactRepositoryConstants.ALIEN_ARTIFACT_REPOSITORY);
        }
      }
    }
  }
}"
62359,"@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<TopologyDTO> resetDeploymentArtifact(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String artifactId) throws IOException {
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,DeploymentArtifact> artifacts=nodeTemplate.getArtifacts();
  if (artifacts == null) {
    throw new NotFoundException(""String_Node_Str"" + artifactId + ""String_Node_Str"");
  }
  DeploymentArtifact artifact=artifacts.get(artifactId);
  if (artifact == null) {
    throw new NotFoundException(""String_Node_Str"" + artifactId + ""String_Node_Str"");
  }
  String oldArtifactId=artifact.getArtifactRef();
  if (ArtifactRepositoryConstants.ALIEN_ARTIFACT_REPOSITORY.equals(artifact.getArtifactRepository())) {
    artifactRepository.deleteFile(oldArtifactId);
  }
  IndexedNodeType indexedNodeType=csarRepoSearch.getElementInDependencies(IndexedNodeType.class,nodeTemplate.getType(),topology.getDependencies());
  DeploymentArtifact baseArtifact=indexedNodeType.getArtifacts().get(artifactId);
  if (baseArtifact != null) {
    artifact.setArtifactRepository(null);
    artifact.setArtifactRef(baseArtifact.getArtifactRef());
    artifact.setArtifactName(baseArtifact.getArtifactName());
    topologyServiceCore.save(topology);
  }
 else {
    log.warn(""String_Node_Str"" + artifactId + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str"");
  }
  return RestResponseBuilder.<TopologyDTO>builder().data(topologyService.buildTopologyDTO(topology)).build();
}","@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") public RestResponse<TopologyDTO> resetDeploymentArtifact(@PathVariable String topologyId,@PathVariable String nodeTemplateName,@PathVariable String artifactId) throws IOException {
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  topologyService.checkEditionAuthorizations(topology);
  topologyService.throwsErrorIfReleased(topology);
  Map<String,NodeTemplate> nodeTemplates=topologyServiceCore.getNodeTemplates(topology);
  NodeTemplate nodeTemplate=topologyServiceCore.getNodeTemplate(topologyId,nodeTemplateName,nodeTemplates);
  Map<String,DeploymentArtifact> artifacts=nodeTemplate.getArtifacts();
  if (artifacts == null) {
    throw new NotFoundException(""String_Node_Str"" + artifactId + ""String_Node_Str"");
  }
  DeploymentArtifact artifact=artifacts.get(artifactId);
  if (artifact == null) {
    throw new NotFoundException(""String_Node_Str"" + artifactId + ""String_Node_Str"");
  }
  String oldArtifactId=artifact.getArtifactRef();
  if (ArtifactRepositoryConstants.ALIEN_ARTIFACT_REPOSITORY.equals(artifact.getArtifactRepository()) && StringUtils.isNotBlank(oldArtifactId)) {
    artifactRepository.deleteFile(oldArtifactId);
  }
  IndexedNodeType indexedNodeType=csarRepoSearch.getElementInDependencies(IndexedNodeType.class,nodeTemplate.getType(),topology.getDependencies());
  DeploymentArtifact baseArtifact=indexedNodeType.getArtifacts().get(artifactId);
  if (baseArtifact != null) {
    artifact.setArtifactRepository(null);
    artifact.setArtifactRef(baseArtifact.getArtifactRef());
    artifact.setArtifactName(baseArtifact.getArtifactName());
    topologyServiceCore.save(topology);
  }
 else {
    log.warn(""String_Node_Str"" + artifactId + ""String_Node_Str""+ nodeTemplateName+ ""String_Node_Str"");
  }
  return RestResponseBuilder.<TopologyDTO>builder().data(topologyService.buildTopologyDTO(topology)).build();
}"
62360,"private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    FilterDefinition filterDefinition=new FilterDefinition();
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    IndexedCapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (templateCapability != null && !isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}","private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  if (matchingConfiguration.getCapabilities() == null) {
    return true;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    FilterDefinition filterDefinition=new FilterDefinition();
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    IndexedCapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (templateCapability != null && !isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}"
62361,"/** 
 * Disable an orchestrator.
 * @param orchestrator The orchestrator to disable.
 * @param force If true the orchestrator is disabled even if some deployments are currently running.
 */
public synchronized List<Usage> disable(Orchestrator orchestrator,boolean force){
  if (!force) {
    QueryHelper.SearchQueryHelperBuilder searchQueryHelperBuilder=queryHelper.buildSearchQuery(alienDAO.getIndexForType(Deployment.class)).types(Deployment.class).filters(MapUtil.newHashMap(new String[]{""String_Node_Str"",""String_Node_Str""},new String[][]{new String[]{orchestrator.getId()},new String[]{null}})).fieldSort(""String_Node_Str"",true);
    GetMultipleDataResult<Object> result=alienDAO.search(searchQueryHelperBuilder,0,1);
    if (result.getData().length > 0) {
      List<Usage> usages=generateDeploymentUsages(result.getData());
      return usages;
    }
  }
  try {
    IOrchestratorPlugin orchestratorInstance=orchestratorPluginService.unregister(orchestrator.getId());
    if (orchestratorInstance != null) {
      IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(orchestrator);
      orchestratorFactory.destroy(orchestratorInstance);
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
  return null;
}","/** 
 * Disable an orchestrator.
 * @param orchestrator The orchestrator to disable.
 * @param force        If true the orchestrator is disabled even if some deployments are currently running.
 */
public synchronized List<Usage> disable(Orchestrator orchestrator,boolean force){
  if (!force) {
    QueryHelper.SearchQueryHelperBuilder searchQueryHelperBuilder=queryHelper.buildSearchQuery(alienDAO.getIndexForType(Deployment.class)).types(Deployment.class).filters(MapUtil.newHashMap(new String[]{""String_Node_Str"",""String_Node_Str""},new String[][]{new String[]{orchestrator.getId()},new String[]{null}})).fieldSort(""String_Node_Str"",true);
    GetMultipleDataResult<Object> result=alienDAO.search(searchQueryHelperBuilder,0,1);
    if (result.getData().length > 0) {
      List<Usage> usages=generateDeploymentUsages(result.getData());
      return usages;
    }
  }
  try {
    IOrchestratorPlugin orchestratorInstance=orchestratorPluginService.unregister(orchestrator.getId());
    if (orchestratorInstance != null) {
      IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(orchestrator);
      orchestratorFactory.destroy(orchestratorInstance);
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
  return null;
}"
62362,"@Override public void run(){
  try {
    load(orchestrator);
  }
 catch (  AlreadyExistException e) {
    log.info(""String_Node_Str"",orchestrator.getId());
  }
catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
}","@Override public void run(){
  try {
    load(orchestrator);
  }
 catch (  AlreadyExistException e) {
    log.info(""String_Node_Str"",orchestrator.getId());
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
}"
62363,"/** 
 * Initialize all orchestrator that have a non-disabled state. Note: Each orchestrator initialization is down in it's own thread so it doesn't impact application startup or other orchestrator connection.
 * @param callback the callback to be executed when initialize finish
 */
public ListenableFuture<?> initialize(FutureCallback callback){
  ListeningExecutorService executorService=MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());
  try {
    List<ListenableFuture<?>> futures=new ArrayList<>();
    final List<Orchestrator> enabledOrchestratorList=orchestratorService.getAllEnabledOrchestrators();
    if (enabledOrchestratorList == null || enabledOrchestratorList.isEmpty()) {
      return Futures.immediateFuture(null);
    }
    log.info(""String_Node_Str"");
    for (    final Orchestrator orchestrator : enabledOrchestratorList) {
      ListenableFuture<?> future=executorService.submit(new Runnable(){
        @Override public void run(){
          try {
            load(orchestrator);
          }
 catch (          AlreadyExistException e) {
            log.info(""String_Node_Str"",orchestrator.getId());
          }
catch (          Throwable t) {
            log.error(""String_Node_Str"",t);
            orchestrator.setState(OrchestratorState.DISABLED);
            alienDAO.save(orchestrator);
          }
        }
      }
);
      futures.add(future);
    }
    ListenableFuture<?> combinedFuture=Futures.allAsList(futures);
    if (callback != null) {
      Futures.addCallback(combinedFuture,callback);
    }
    Futures.addCallback(combinedFuture,new FutureCallback<Object>(){
      @Override public void onSuccess(      Object result){
        log.info(""String_Node_Str"",enabledOrchestratorList.size());
      }
      @Override public void onFailure(      Throwable t){
        log.error(""String_Node_Str"",t);
      }
    }
);
    return combinedFuture;
  }
  finally {
    executorService.shutdown();
  }
}","/** 
 * Initialize all orchestrator that have a non-disabled state. Note: Each orchestrator initialization is down in it's own thread so it doesn't impact application startup or other orchestrator connection.
 * @param callback the callback to be executed when initialize finish
 */
public ListenableFuture<?> initialize(FutureCallback callback){
  ListeningExecutorService executorService=MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());
  try {
    List<ListenableFuture<?>> futures=new ArrayList<>();
    final List<Orchestrator> enabledOrchestratorList=orchestratorService.getAllEnabledOrchestrators();
    if (enabledOrchestratorList == null || enabledOrchestratorList.isEmpty()) {
      return Futures.immediateFuture(null);
    }
    log.info(""String_Node_Str"");
    for (    final Orchestrator orchestrator : enabledOrchestratorList) {
      ListenableFuture<?> future=executorService.submit(new Runnable(){
        @Override public void run(){
          try {
            load(orchestrator);
          }
 catch (          AlreadyExistException e) {
            log.info(""String_Node_Str"",orchestrator.getId());
          }
catch (          Exception e) {
            log.error(""String_Node_Str"",e);
            orchestrator.setState(OrchestratorState.DISABLED);
            alienDAO.save(orchestrator);
          }
        }
      }
);
      futures.add(future);
    }
    ListenableFuture<?> combinedFuture=Futures.allAsList(futures);
    if (callback != null) {
      Futures.addCallback(combinedFuture,callback);
    }
    Futures.addCallback(combinedFuture,new FutureCallback<Object>(){
      @Override public void onSuccess(      Object result){
        log.info(""String_Node_Str"",enabledOrchestratorList.size());
      }
      @Override public void onFailure(      Throwable t){
        log.error(""String_Node_Str"",t);
      }
    }
);
    return combinedFuture;
  }
  finally {
    executorService.shutdown();
  }
}"
62364,"/** 
 * Parse an attribute value that can be :   {@link ConcatPropertyValue} / {@link AttributeDefinition}
 * @param attributeId
 * @param attributeValue
 * @param topology
 * @param runtimeInformations
 * @param currentInstance
 * @param basePaaSTemplate
 * @param builtPaaSTemplates
 * @return
 */
public static String parseAttribute(String attributeId,IValue attributeValue,Topology topology,Map<String,Map<String,InstanceInformation>> runtimeInformations,String currentInstance,IPaaSTemplate<? extends IndexedToscaElement> basePaaSTemplate,Map<String,PaaSNodeTemplate> builtPaaSTemplates){
  if (attributeValue == null) {
    return null;
  }
  if (attributeValue instanceof AttributeDefinition) {
    String runtimeAttributeValue=extractRuntimeInformationAttribute(runtimeInformations,currentInstance,Lists.newArrayList(basePaaSTemplate),attributeId);
    if (runtimeAttributeValue != null) {
      if (!runtimeAttributeValue.contains(""String_Node_Str"") && !runtimeAttributeValue.equals(""String_Node_Str"") && !runtimeAttributeValue.equals(null)) {
        return runtimeAttributeValue;
      }
    }
    return ((AttributeDefinition)attributeValue).getDefault();
  }
  if (attributeValue instanceof ConcatPropertyValue) {
    StringBuilder evaluatedAttribute=new StringBuilder();
    ConcatPropertyValue concatPropertyValue=(ConcatPropertyValue)attributeValue;
    for (    IValue concatParam : concatPropertyValue.getParameters()) {
      if (concatParam instanceof ScalarPropertyValue) {
        evaluatedAttribute.append(((ScalarPropertyValue)concatParam).getValue());
      }
 else       if (concatParam instanceof PropertyDefinition) {
        evaluatedAttribute.append(((PropertyDefinition)concatParam).getDefault());
      }
 else       if (concatParam instanceof FunctionPropertyValue) {
        FunctionPropertyValue functionPropertyValue=(FunctionPropertyValue)concatParam;
        List<? extends IPaaSTemplate> paasTemplates=getPaaSTemplatesFromKeyword(basePaaSTemplate,functionPropertyValue.getTemplateName(),builtPaaSTemplates);
switch (functionPropertyValue.getFunction()) {
case ToscaFunctionConstants.GET_ATTRIBUTE:
          evaluatedAttribute.append(extractRuntimeInformationAttribute(runtimeInformations,currentInstance,paasTemplates,functionPropertyValue.getElementNameToFetch()));
        break;
case ToscaFunctionConstants.GET_PROPERTY:
      evaluatedAttribute.append(extractRuntimeInformationProperty(topology,functionPropertyValue.getElementNameToFetch(),paasTemplates));
    break;
case ToscaFunctionConstants.GET_OPERATION_OUTPUT:
  String defaultValue=""String_Node_Str"" + functionPropertyValue.getElementNameToFetch() + ""String_Node_Str"";
evaluatedAttribute.append(extractRuntimeInformationOperationOutput(runtimeInformations,currentInstance,paasTemplates,functionPropertyValue,defaultValue));
default :
log.warn(""String_Node_Str"",functionPropertyValue.getFunction());
}
}
}
return evaluatedAttribute.toString();
}
if (attributeValue instanceof FunctionPropertyValue) {
FunctionPropertyValue function=(FunctionPropertyValue)attributeValue;
switch (function.getFunction()) {
case ToscaFunctionConstants.GET_OPERATION_OUTPUT:
List<? extends IPaaSTemplate> paasTemplates=getPaaSTemplatesFromKeyword(basePaaSTemplate,function.getTemplateName(),builtPaaSTemplates);
return extractRuntimeInformationOperationOutput(runtimeInformations,currentInstance,paasTemplates,function,null);
default :
return null;
}
}
return null;
}","/** 
 * Parse an attribute value that can be :   {@link ConcatPropertyValue} / {@link AttributeDefinition}
 * @param attributeId
 * @param attributeValue
 * @param topology
 * @param runtimeInformations
 * @param currentInstance
 * @param basePaaSTemplate
 * @param builtPaaSTemplates
 * @return
 */
public static String parseAttribute(String attributeId,IValue attributeValue,Topology topology,Map<String,Map<String,InstanceInformation>> runtimeInformations,String currentInstance,IPaaSTemplate<? extends IndexedToscaElement> basePaaSTemplate,Map<String,PaaSNodeTemplate> builtPaaSTemplates){
  if (attributeValue == null) {
    return null;
  }
  if (attributeValue instanceof AttributeDefinition) {
    String runtimeAttributeValue=extractRuntimeInformationAttribute(runtimeInformations,currentInstance,Lists.newArrayList(basePaaSTemplate),attributeId);
    if (runtimeAttributeValue != null) {
      if (!runtimeAttributeValue.contains(""String_Node_Str"") && !runtimeAttributeValue.equals(""String_Node_Str"")) {
        return runtimeAttributeValue;
      }
    }
    return ((AttributeDefinition)attributeValue).getDefault();
  }
  if (attributeValue instanceof ConcatPropertyValue) {
    StringBuilder evaluatedAttribute=new StringBuilder();
    ConcatPropertyValue concatPropertyValue=(ConcatPropertyValue)attributeValue;
    for (    IValue concatParam : concatPropertyValue.getParameters()) {
      if (concatParam instanceof ScalarPropertyValue) {
        evaluatedAttribute.append(((ScalarPropertyValue)concatParam).getValue());
      }
 else       if (concatParam instanceof PropertyDefinition) {
        evaluatedAttribute.append(((PropertyDefinition)concatParam).getDefault());
      }
 else       if (concatParam instanceof FunctionPropertyValue) {
        FunctionPropertyValue functionPropertyValue=(FunctionPropertyValue)concatParam;
        List<? extends IPaaSTemplate> paasTemplates=getPaaSTemplatesFromKeyword(basePaaSTemplate,functionPropertyValue.getTemplateName(),builtPaaSTemplates);
switch (functionPropertyValue.getFunction()) {
case ToscaFunctionConstants.GET_ATTRIBUTE:
          evaluatedAttribute.append(extractRuntimeInformationAttribute(runtimeInformations,currentInstance,paasTemplates,functionPropertyValue.getElementNameToFetch()));
        break;
case ToscaFunctionConstants.GET_PROPERTY:
      evaluatedAttribute.append(extractRuntimeInformationProperty(topology,functionPropertyValue.getElementNameToFetch(),paasTemplates));
    break;
case ToscaFunctionConstants.GET_OPERATION_OUTPUT:
  String defaultValue=""String_Node_Str"" + functionPropertyValue.getElementNameToFetch() + ""String_Node_Str"";
evaluatedAttribute.append(extractRuntimeInformationOperationOutput(runtimeInformations,currentInstance,paasTemplates,functionPropertyValue,defaultValue));
break;
default :
log.warn(""String_Node_Str"",functionPropertyValue.getFunction());
break;
}
}
}
return evaluatedAttribute.toString();
}
if (attributeValue instanceof FunctionPropertyValue) {
FunctionPropertyValue function=(FunctionPropertyValue)attributeValue;
switch (function.getFunction()) {
case ToscaFunctionConstants.GET_OPERATION_OUTPUT:
List<? extends IPaaSTemplate> paasTemplates=getPaaSTemplatesFromKeyword(basePaaSTemplate,function.getTemplateName(),builtPaaSTemplates);
return extractRuntimeInformationOperationOutput(runtimeInformations,currentInstance,paasTemplates,function,null);
default :
return null;
}
}
return null;
}"
62365,"/** 
 * Upload a plugin from a given path.
 * @param uploadedPluginPath The path of the plugin to upload.
 * @throws IOException In case there is an issue with the access to the plugin file.
 * @throws PluginLoadingException
 * @throws AlreadyExistException if a plugin with the same id already exists in the repository
 * @return the uploaded plugin
 * @throws MissingPlugingDescriptorFileException
 */
public Plugin uploadPlugin(Path uploadedPluginPath) throws PluginLoadingException, IOException, MissingPlugingDescriptorFileException {
  FileSystem fs=FileSystems.newFileSystem(uploadedPluginPath,null);
  PluginDescriptor descriptor=null;
  try {
    try {
      descriptor=YamlParserUtil.parseFromUTF8File(fs.getPath(PLUGIN_DESCRIPTOR_FILE),PluginDescriptor.class);
    }
 catch (    IOException e) {
      if (e instanceof NoSuchFileException) {
        throw new MissingPlugingDescriptorFileException();
      }
 else {
        throw e;
      }
    }
    String pluginPathId=getPluginPathId();
    Plugin plugin=new Plugin(descriptor,pluginPathId);
    long count=alienDAO.count(Plugin.class,QueryBuilders.idsQuery(MappingBuilder.indexTypeFromClass(Plugin.class)).ids(plugin.getId()));
    if (count > 0) {
      log.warn(""String_Node_Str"",plugin.getId());
      throw new AlreadyExistException(""String_Node_Str"");
    }
    Path pluginPath=getPluginPath(pluginPathId);
    FileUtil.unzip(uploadedPluginPath,pluginPath);
    Path pluginUiSourcePath=pluginPath.resolve(UI_DIRECTORY);
    Path pluginUiPath=getPluginUiPath(pluginPathId);
    if (Files.exists(pluginUiSourcePath)) {
      FileUtil.copy(pluginUiSourcePath,pluginUiPath);
    }
    loadPlugin(plugin);
    plugin.setConfigurable(isPluginConfigurable(plugin.getId()));
    alienDAO.save(plugin);
    log.info(""String_Node_Str"" + plugin.getId() + ""String_Node_Str"");
    return plugin;
  }
  finally {
    fs.close();
  }
}","/** 
 * Upload a plugin from a given path.
 * @param uploadedPluginPath The path of the plugin to upload.
 * @return the uploaded plugin
 * @throws IOException                           In case there is an issue with the access to the plugin file.
 * @throws PluginLoadingException
 * @throws AlreadyExistException                 if a plugin with the same id already exists in the repository
 * @throws MissingPlugingDescriptorFileException
 */
public Plugin uploadPlugin(Path uploadedPluginPath) throws PluginLoadingException, IOException, MissingPlugingDescriptorFileException {
  FileSystem fs=FileSystems.newFileSystem(uploadedPluginPath,null);
  PluginDescriptor descriptor=null;
  try {
    try {
      descriptor=YamlParserUtil.parseFromUTF8File(fs.getPath(PLUGIN_DESCRIPTOR_FILE),PluginDescriptor.class);
    }
 catch (    IOException e) {
      if (e instanceof NoSuchFileException) {
        throw new MissingPlugingDescriptorFileException();
      }
 else {
        throw e;
      }
    }
    String pluginPathId=getPluginPathId();
    Plugin plugin=new Plugin(descriptor,pluginPathId);
    long count=alienDAO.count(Plugin.class,QueryBuilders.idsQuery(MappingBuilder.indexTypeFromClass(Plugin.class)).ids(plugin.getId()));
    if (count > 0) {
      log.warn(""String_Node_Str"",plugin.getId());
      throw new AlreadyExistException(""String_Node_Str"");
    }
    Path pluginPath=getPluginPath(pluginPathId);
    FileUtil.unzip(uploadedPluginPath,pluginPath);
    Path pluginUiSourcePath=pluginPath.resolve(UI_DIRECTORY);
    Path pluginUiPath=getPluginUiPath(pluginPathId);
    if (Files.exists(pluginUiSourcePath)) {
      FileUtil.copy(pluginUiSourcePath,pluginUiPath);
    }
    loadPlugin(plugin);
    plugin.setConfigurable(isPluginConfigurable(plugin.getId()));
    alienDAO.save(plugin);
    log.info(""String_Node_Str"" + plugin.getId() + ""String_Node_Str"");
    return plugin;
  }
  finally {
    fs.close();
  }
}"
62366,"/** 
 * Link the plugin against alien components that may need to use it.
 * @param plugin The plugin to link.
 * @param managedPlugin The managed plugin related to the plugin.
 * @param componentDescriptors The map of component descriptors.
 */
private void link(Plugin plugin,ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  Map<String,IPluginLoadingCallback> beans=alienContext.getBeansOfType(IPluginLoadingCallback.class);
  for (  IPluginLoadingCallback callback : beans.values()) {
    callback.onPluginLoaded(managedPlugin);
  }
  for (  PluginLinker linker : linkers) {
    Map<String,?> instancesToLink=managedPlugin.getPluginContext().getBeansOfType(linker.linkedType);
    for (    Entry<String,?> instanceToLink : instancesToLink.entrySet()) {
      linker.linker.link(plugin.getId(),instanceToLink.getKey(),instanceToLink.getValue());
      PluginComponentDescriptor componentDescriptor=componentDescriptors.get(instanceToLink.getKey());
      if (componentDescriptor == null) {
        componentDescriptor=new PluginComponentDescriptor();
        componentDescriptor.setBeanName(instanceToLink.getKey());
        componentDescriptor.setName(instanceToLink.getKey());
      }
      componentDescriptor.setType(linker.linkedType.getSimpleName());
    }
  }
  for (  PluginComponentDescriptor componentDescriptor : componentDescriptors.values()) {
    if (componentDescriptor.getType() == null) {
      componentDescriptor.setType(UNKNOWN_PLUGIN_COMPONENT_TYPE);
    }
  }
}","/** 
 * Link the plugin against alien components that may need to use it.
 * @param plugin               The plugin to link.
 * @param managedPlugin        The managed plugin related to the plugin.
 * @param componentDescriptors The map of component descriptors.
 */
private void link(Plugin plugin,ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  Map<String,IPluginLoadingCallback> beans=alienContext.getBeansOfType(IPluginLoadingCallback.class);
  for (  IPluginLoadingCallback callback : beans.values()) {
    callback.onPluginLoaded(managedPlugin);
  }
  for (  PluginLinker linker : linkers) {
    Map<String,?> instancesToLink=managedPlugin.getPluginContext().getBeansOfType(linker.linkedType);
    for (    Entry<String,?> instanceToLink : instancesToLink.entrySet()) {
      linker.linker.link(plugin.getId(),instanceToLink.getKey(),instanceToLink.getValue());
      PluginComponentDescriptor componentDescriptor=componentDescriptors.get(instanceToLink.getKey());
      if (componentDescriptor == null) {
        componentDescriptor=new PluginComponentDescriptor();
        componentDescriptor.setBeanName(instanceToLink.getKey());
        componentDescriptor.setName(instanceToLink.getKey());
      }
      componentDescriptor.setType(linker.linkedType.getSimpleName());
    }
  }
  for (  PluginComponentDescriptor componentDescriptor : componentDescriptors.values()) {
    if (componentDescriptor.getType() == null) {
      componentDescriptor.setType(UNKNOWN_PLUGIN_COMPONENT_TYPE);
    }
  }
}"
62367,"/** 
 * Actually load and link a plugin in Alien 4 Cloud.
 * @param plugin The plugin the load and link.
 * @param pluginPath The path to the directory that contains the un-zipped plugin.
 * @param pluginUiPath The path in which the ui files are located.
 * @throws IOException In case there is an IO issue with the file.
 * @throws ClassNotFoundException If we cannot load the class
 */
private void loadPlugin(Plugin plugin,Path pluginPath,Path pluginUiPath) throws IOException, ClassNotFoundException {
  final List<URL> classPathUrls=Lists.newArrayList();
  pluginPath=pluginPath.toRealPath();
  classPathUrls.add(pluginPath.toUri().toURL());
  Path libPath=pluginPath.resolve(LIB_DIRECTORY);
  if (Files.exists(libPath)) {
    Files.walkFileTree(libPath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        file.endsWith(""String_Node_Str"");
        classPathUrls.add(file.toUri().toURL());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  ClassLoader pluginClassLoader=new PluginClassloader(classPathUrls.toArray(new URL[classPathUrls.size()]),Thread.currentThread().getContextClassLoader());
  AnnotationConfigApplicationContext pluginContext=new AnnotationConfigApplicationContext();
  pluginContext.setParent(alienContext);
  pluginContext.setClassLoader(pluginClassLoader);
  registerDependencies(plugin,pluginContext);
  if (plugin.getDescriptor().getConfigurationClass() != null) {
    pluginContext.register(pluginClassLoader.loadClass(plugin.getDescriptor().getConfigurationClass()));
  }
  ManagedPlugin managedPlugin=new ManagedPlugin(pluginContext,plugin,pluginPath,pluginUiPath);
  pluginContext.getBeanFactory().registerSingleton(""String_Node_Str"",managedPlugin);
  pluginContext.refresh();
  Map<String,PluginComponentDescriptor> componentDescriptors=getPluginComponentDescriptorAsMap(plugin);
  expose(managedPlugin,componentDescriptors);
  link(plugin,managedPlugin,componentDescriptors);
  pluginContexts.put(plugin.getId(),managedPlugin);
}","/** 
 * Actually load and link a plugin in Alien 4 Cloud.
 * @param plugin       The plugin the load and link.
 * @param pluginPath   The path to the directory that contains the un-zipped plugin.
 * @param pluginUiPath The path in which the ui files are located.
 * @throws IOException            In case there is an IO issue with the file.
 * @throws ClassNotFoundException If we cannot load the class
 */
private void loadPlugin(Plugin plugin,Path pluginPath,Path pluginUiPath) throws IOException, ClassNotFoundException {
  final List<URL> classPathUrls=Lists.newArrayList();
  pluginPath=pluginPath.toRealPath();
  classPathUrls.add(pluginPath.toUri().toURL());
  Path libPath=pluginPath.resolve(LIB_DIRECTORY);
  if (Files.exists(libPath)) {
    Files.walkFileTree(libPath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        file.endsWith(""String_Node_Str"");
        classPathUrls.add(file.toUri().toURL());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  ClassLoader pluginClassLoader=new PluginClassloader(classPathUrls.toArray(new URL[classPathUrls.size()]),Thread.currentThread().getContextClassLoader());
  AnnotationConfigApplicationContext pluginContext=new AnnotationConfigApplicationContext();
  pluginContext.setParent(alienContext);
  pluginContext.setClassLoader(pluginClassLoader);
  registerDependencies(plugin,pluginContext);
  if (plugin.getDescriptor().getConfigurationClass() != null) {
    pluginContext.register(pluginClassLoader.loadClass(plugin.getDescriptor().getConfigurationClass()));
  }
  ManagedPlugin managedPlugin=new ManagedPlugin(pluginContext,plugin,pluginPath,pluginUiPath);
  pluginContext.getBeanFactory().registerSingleton(""String_Node_Str"",managedPlugin);
  pluginContext.refresh();
  Map<String,PluginComponentDescriptor> componentDescriptors=getPluginComponentDescriptorAsMap(plugin);
  expose(managedPlugin,componentDescriptors);
  link(plugin,managedPlugin,componentDescriptors);
  pluginContexts.put(plugin.getId(),managedPlugin);
}"
62368,"/** 
 * Initialize the list of exposed beans for the given plugin.
 * @param managedPlugin The plugin for which to configure exposed beans.
 * @param componentDescriptors The components descriptor of the plugin.
 */
private void expose(ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  Map<String,Object> exposedBeans=Maps.newHashMap();
  for (  Entry<String,PluginComponentDescriptor> componentDescriptorEntry : componentDescriptors.entrySet()) {
    String beanName=componentDescriptorEntry.getValue().getBeanName();
    Object bean=managedPlugin.getPluginContext().getBean(beanName);
    if (bean == null) {
      log.warn(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
 else {
      exposedBeans.put(beanName,bean);
    }
  }
  managedPlugin.setExposedBeans(exposedBeans);
}","/** 
 * Initialize the list of exposed beans for the given plugin.
 * @param managedPlugin        The plugin for which to configure exposed beans.
 * @param componentDescriptors The components descriptor of the plugin.
 */
private void expose(ManagedPlugin managedPlugin,Map<String,PluginComponentDescriptor> componentDescriptors){
  Map<String,Object> exposedBeans=Maps.newHashMap();
  for (  Entry<String,PluginComponentDescriptor> componentDescriptorEntry : componentDescriptors.entrySet()) {
    String beanName=componentDescriptorEntry.getValue().getBeanName();
    Object bean=managedPlugin.getPluginContext().getBean(beanName);
    if (bean == null) {
      log.warn(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
 else {
      exposedBeans.put(beanName,bean);
    }
  }
  managedPlugin.setExposedBeans(exposedBeans);
}"
62369,"/** 
 * Delete all archives related to a location, if not exposed or used by another location
 * @param location
 * @return Map of usages per archives if found (that means the deletion wasn't performed successfully), null if everything went well.
 */
public Map<Csar,List<Usage>> deleteArchives(Location location){
  ILocationConfiguratorPlugin configuratorPlugin;
  try {
    IOrchestratorPlugin orchestratorInstance=(IOrchestratorPlugin)orchestratorPluginService.getOrFail(location.getOrchestratorId());
    configuratorPlugin=orchestratorInstance.getConfigurator(location.getInfrastructureType());
  }
 catch (  OrchestratorDisabledException e) {
    IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(orchestratorService.getOrFail(location.getOrchestratorId()));
    IOrchestratorPlugin orchestratorInstance=orchestratorFactory.newInstance();
    configuratorPlugin=orchestratorInstance.getConfigurator(location.getInfrastructureType());
  }
  List<PluginArchive> pluginArchives=configuratorPlugin.pluginArchives();
  if (CollectionUtils.isEmpty(pluginArchives)) {
    return null;
  }
  Set<String> allExposedArchivesIds=getAllExposedArchivesIdsExluding(location);
  Map<Csar,List<Usage>> usages=Maps.newHashMap();
  for (  PluginArchive pluginArchive : pluginArchives) {
    Csar csar=pluginArchive.getArchive().getArchive();
    if (!allExposedArchivesIds.contains(csar.getId())) {
      List<Usage> csarUsage=csarService.deleteCsarWithElements(csar);
      if (CollectionUtils.isNotEmpty(csarUsage)) {
        usages.put(csar,csarUsage);
      }
    }
  }
  return usages.isEmpty() ? null : usages;
}","/** 
 * Delete all archives related to a location, if not exposed or used by another location
 * @param location
 * @return Map of usages per archives if found (that means the deletion wasn't performed successfully), null if everything went well.
 */
public Map<Csar,List<Usage>> deleteArchives(Location location){
  ILocationConfiguratorPlugin configuratorPlugin=getConfiguratorPlugin(location);
  List<PluginArchive> pluginArchives=configuratorPlugin.pluginArchives();
  if (CollectionUtils.isEmpty(pluginArchives)) {
    return null;
  }
  Set<String> allExposedArchivesIds=getAllExposedArchivesIdsExluding(location);
  Map<Csar,List<Usage>> usages=Maps.newHashMap();
  for (  PluginArchive pluginArchive : pluginArchives) {
    Csar csar=pluginArchive.getArchive().getArchive();
    if (!allExposedArchivesIds.contains(csar.getId())) {
      List<Usage> csarUsage=csarService.deleteCsarWithElements(csar);
      if (CollectionUtils.isNotEmpty(csarUsage)) {
        usages.put(csar,csarUsage);
      }
    }
  }
  return usages.isEmpty() ? null : usages;
}"
62370,"private Set<String> getAllExposedArchivesIdsExluding(Location excludedLocation){
  QueryBuilder query=QueryBuilders.boolQuery().mustNot(QueryBuilders.idsQuery(Location.class.getSimpleName().toLowerCase()).ids(excludedLocation.getId()));
  List<Location> locations=alienDAO.customFindAll(Location.class,query);
  Set<String> archiveIds=Sets.newHashSet();
  if (locations != null) {
    for (    Location location : locations) {
      IOrchestratorPlugin orchestratorInstance=(IOrchestratorPlugin)orchestratorPluginService.getOrFail(location.getOrchestratorId());
      ILocationConfiguratorPlugin configuratorPlugin=orchestratorInstance.getConfigurator(location.getInfrastructureType());
      List<PluginArchive> pluginArchives=configuratorPlugin.pluginArchives();
      for (      PluginArchive pluginArchive : pluginArchives) {
        archiveIds.add(pluginArchive.getArchive().getArchive().getId());
      }
    }
  }
  return archiveIds;
}","private Set<String> getAllExposedArchivesIdsExluding(Location excludedLocation){
  QueryBuilder query=QueryBuilders.boolQuery().mustNot(QueryBuilders.idsQuery(Location.class.getSimpleName().toLowerCase()).ids(excludedLocation.getId()));
  List<Location> locations=alienDAO.customFindAll(Location.class,query);
  Set<String> archiveIds=Sets.newHashSet();
  if (locations != null) {
    for (    Location location : locations) {
      ILocationConfiguratorPlugin configuratorPlugin=getConfiguratorPlugin(location);
      List<PluginArchive> pluginArchives=configuratorPlugin.pluginArchives();
      for (      PluginArchive pluginArchive : pluginArchives) {
        archiveIds.add(pluginArchive.getArchive().getArchive().getId());
      }
    }
  }
  return archiveIds;
}"
62371,"private static void checkoutRepository(Git repository,String branch,String username,String password){
  try {
    CheckoutCommand checkoutCommand=repository.checkout();
    checkoutCommand.setName(branch);
    Ref ref=checkoutCommand.call();
    if (ref == null || branch.equals(ref.getName())) {
      FetchCommand fetchCommand=repository.fetch();
      setCredentials(fetchCommand,username,password);
      fetchCommand.call();
      checkoutCommand=repository.checkout();
      checkoutCommand.setName(branch);
      checkoutCommand.call();
    }
  }
 catch (  GitAPIException e) {
    log.error(""String_Node_Str"",e);
    throw new GitException(""String_Node_Str"",e);
  }
}","private static void checkoutRepository(Git repository,String branch,String username,String password){
  try {
    CheckoutCommand checkoutCommand=repository.checkout();
    checkoutCommand.setName(""String_Node_Str"" + branch);
    Ref ref=checkoutCommand.call();
    if (ref == null || branch.equals(ref.getName())) {
      FetchCommand fetchCommand=repository.fetch();
      setCredentials(fetchCommand,username,password);
      fetchCommand.call();
      checkoutCommand=repository.checkout();
      checkoutCommand.setName(""String_Node_Str"" + branch);
      checkoutCommand.call();
    }
  }
 catch (  GitAPIException e) {
    log.error(""String_Node_Str"",e);
    throw new GitException(""String_Node_Str"",e);
  }
}"
62372,"@Then(""String_Node_Str"") public void i_can_find_a_GIT_repository_with_url_usr_pwd_stored_and_locations(String url,String usr,String pwd,boolean stored,List<CsarGitCheckoutLocation> locations) throws Throwable {
  CsarGitRepository csarGitRepository=getCsarGitRepository(url);
  Assert.assertNotNull(csarGitRepository);
  Comparator<CsarGitCheckoutLocation> comparator=new Comparator<CsarGitCheckoutLocation>(){
    @Override public int compare(    CsarGitCheckoutLocation o1,    CsarGitCheckoutLocation o2){
      int bCompare=o1.getBranchId().compareTo(o2.getBranchId());
      if (bCompare != 0) {
        return bCompare;
      }
 else {
        return o1.getSubPath().compareTo(o2.getSubPath());
      }
    }
  }
;
  Assert.assertEquals(usr,csarGitRepository.getUsername());
  Assert.assertEquals(pwd,csarGitRepository.getPassword());
  Assert.assertEquals(stored,csarGitRepository.isStoredLocally());
  Assert.assertEquals(locations.size(),csarGitRepository.getImportLocations().size());
  csarGitRepository.getImportLocations().sort(comparator);
  List<CsarGitCheckoutLocation> expectedlocations=new ArrayList<CsarGitCheckoutLocation>(locations);
  expectedlocations.sort(comparator);
  for (int i=0; i < expectedlocations.size(); i++) {
    CsarGitCheckoutLocation expected=expectedlocations.get(i);
    CsarGitCheckoutLocation actual=csarGitRepository.getImportLocations().get(i);
    Assert.assertEquals(actual.getBranchId(),expected.getBranchId());
    Assert.assertEquals(actual.getSubPath(),expected.getSubPath());
  }
}","@Then(""String_Node_Str"") public void i_can_find_a_GIT_repository_with_url_usr_pwd_stored_and_locations(String url,String usr,String pwd,boolean stored,List<CsarGitCheckoutLocation> locations) throws Throwable {
  CsarGitRepository csarGitRepository=getCsarGitRepository(url);
  Assert.assertNotNull(csarGitRepository);
  Comparator<CsarGitCheckoutLocation> comparator=new Comparator<CsarGitCheckoutLocation>(){
    @Override public int compare(    CsarGitCheckoutLocation o1,    CsarGitCheckoutLocation o2){
      int bCompare=o1.getBranchId().compareTo(o2.getBranchId());
      if (bCompare != 0) {
        return bCompare;
      }
 else {
        return o1.getSubPath().compareTo(o2.getSubPath());
      }
    }
  }
;
  Assert.assertEquals(usr,csarGitRepository.getUsername());
  Assert.assertEquals(pwd,csarGitRepository.getPassword());
  Assert.assertEquals(stored,csarGitRepository.isStoredLocally());
  Assert.assertEquals(locations.size(),csarGitRepository.getImportLocations().size());
  Collections.sort(csarGitRepository.getImportLocations(),comparator);
  List<CsarGitCheckoutLocation> expectedlocations=new ArrayList<CsarGitCheckoutLocation>(locations);
  Collections.sort(expectedlocations,comparator);
  for (int i=0; i < expectedlocations.size(); i++) {
    CsarGitCheckoutLocation expected=expectedlocations.get(i);
    CsarGitCheckoutLocation actual=csarGitRepository.getImportLocations().get(i);
    Assert.assertEquals(actual.getBranchId(),expected.getBranchId());
    Assert.assertEquals(actual.getSubPath(),expected.getSubPath());
  }
}"
62373,"@Then(""String_Node_Str"") public void i_can_find_a_GIT_repository_with_url_usr_pwd_stored_and_locations(String url,String usr,String pwd,boolean stored,List<CsarGitCheckoutLocation> locations) throws Throwable {
  CsarGitRepository csarGitRepository=getCsarGitRepository(url);
  Assert.assertNotNull(csarGitRepository);
  Comparator<CsarGitCheckoutLocation> comparator=new Comparator<CsarGitCheckoutLocation>(){
    @Override public int compare(    CsarGitCheckoutLocation o1,    CsarGitCheckoutLocation o2){
      int bCompare=o1.getBranchId().compareTo(o2.getBranchId());
      if (bCompare != 0) {
        return bCompare;
      }
 else {
        return o1.getSubPath().compareTo(o2.getSubPath());
      }
    }
  }
;
  Assert.assertEquals(usr,csarGitRepository.getUsername());
  Assert.assertEquals(pwd,csarGitRepository.getPassword());
  Assert.assertEquals(stored,csarGitRepository.isStoredLocally());
  Assert.assertEquals(locations.size(),csarGitRepository.getImportLocations().size());
  csarGitRepository.getImportLocations().sort(comparator);
  List<CsarGitCheckoutLocation> expectedlocations=new ArrayList<CsarGitCheckoutLocation>(locations);
  expectedlocations.sort(comparator);
  for (int i=0; i < expectedlocations.size(); i++) {
    CsarGitCheckoutLocation expected=expectedlocations.get(i);
    CsarGitCheckoutLocation actual=csarGitRepository.getImportLocations().get(i);
    Assert.assertEquals(actual.getBranchId(),expected.getBranchId());
    Assert.assertEquals(actual.getSubPath(),expected.getSubPath());
  }
}","@Then(""String_Node_Str"") public void i_can_find_a_GIT_repository_with_url_usr_pwd_stored_and_locations(String url,String usr,String pwd,boolean stored,List<CsarGitCheckoutLocation> locations) throws Throwable {
  CsarGitRepository csarGitRepository=getCsarGitRepository(url);
  Assert.assertNotNull(csarGitRepository);
  Comparator<CsarGitCheckoutLocation> comparator=new Comparator<CsarGitCheckoutLocation>(){
    @Override public int compare(    CsarGitCheckoutLocation o1,    CsarGitCheckoutLocation o2){
      int bCompare=o1.getBranchId().compareTo(o2.getBranchId());
      if (bCompare != 0) {
        return bCompare;
      }
 else {
        return o1.getSubPath().compareTo(o2.getSubPath());
      }
    }
  }
;
  Assert.assertEquals(usr,csarGitRepository.getUsername());
  Assert.assertEquals(pwd,csarGitRepository.getPassword());
  Assert.assertEquals(stored,csarGitRepository.isStoredLocally());
  Assert.assertEquals(locations.size(),csarGitRepository.getImportLocations().size());
  Collections.sort(csarGitRepository.getImportLocations(),comparator);
  List<CsarGitCheckoutLocation> expectedlocations=new ArrayList<CsarGitCheckoutLocation>(locations);
  Collections.sort(expectedlocations,comparator);
  for (int i=0; i < expectedlocations.size(); i++) {
    CsarGitCheckoutLocation expected=expectedlocations.get(i);
    CsarGitCheckoutLocation actual=csarGitRepository.getImportLocations().get(i);
    Assert.assertEquals(actual.getBranchId(),expected.getBranchId());
    Assert.assertEquals(actual.getSubPath(),expected.getSubPath());
  }
}"
62374,"/** 
 * Process the composition: <ul> <li>remove the 'proxy' node from the parent. <li>merge the child topology nodes into the parent nodes. <li> </ul>
 * @param compositionCouple
 */
private void processComposition(CompositionCouple compositionCouple){
  NodeTemplate proxyNodeTemplate=compositionCouple.parent.getNodeTemplates().remove(compositionCouple.nodeName);
  for (  NodeTemplate childNodeTemplate : compositionCouple.child.getNodeTemplates().values()) {
    for (    Entry<String,AbstractPropertyValue> propertyEntry : childNodeTemplate.getProperties().entrySet()) {
      AbstractPropertyValue pValue=propertyEntry.getValue();
      if (pValue instanceof FunctionPropertyValue && ((FunctionPropertyValue)pValue).getFunction().equals(ToscaFunctionConstants.GET_INPUT)) {
        String inputName=((FunctionPropertyValue)pValue).getTemplateName();
        propertyEntry.setValue(proxyNodeTemplate.getProperties().get(inputName));
      }
    }
  }
  if (proxyNodeTemplate.getRelationships() != null) {
    for (    Entry<String,RelationshipTemplate> e : proxyNodeTemplate.getRelationships().entrySet()) {
      String relationShipKey=e.getKey();
      RelationshipTemplate proxyRelationShip=e.getValue();
      String requirementName=proxyRelationShip.getRequirementName();
      SubstitutionTarget substitutionTarget=compositionCouple.child.getSubstitutionMapping().getRequirements().get(requirementName);
      NodeTemplate nodeTemplate=compositionCouple.child.getNodeTemplates().get(substitutionTarget.getNodeTemplateName());
      if (nodeTemplate.getRelationships() == null) {
        Map<String,RelationshipTemplate> relationships=Maps.newHashMap();
        nodeTemplate.setRelationships(relationships);
      }
      nodeTemplate.getRelationships().put(relationShipKey,proxyRelationShip);
      proxyRelationShip.setRequirementName(substitutionTarget.getTargetId());
    }
  }
  for (  NodeTemplate otherNodes : compositionCouple.parent.getNodeTemplates().values()) {
    if (otherNodes.getRelationships() != null) {
      for (      RelationshipTemplate relationshipTemplate : otherNodes.getRelationships().values()) {
        if (relationshipTemplate.getTarget().equals(compositionCouple.nodeName)) {
          SubstitutionTarget st=compositionCouple.child.getSubstitutionMapping().getCapabilities().get(relationshipTemplate.getTargetedCapabilityName());
          relationshipTemplate.setTarget(st.getNodeTemplateName());
          relationshipTemplate.setTargetedCapabilityName(st.getTargetId());
        }
      }
    }
  }
  if (compositionCouple.parent.getOutputAttributes() != null) {
    Set<String> outputAttributes=compositionCouple.parent.getOutputAttributes().remove(compositionCouple.nodeName);
    if (outputAttributes != null) {
      for (      String proxyAttributeName : outputAttributes) {
        sustituteGetAttribute(compositionCouple.child,compositionCouple.parent,proxyAttributeName);
      }
    }
  }
  if (compositionCouple.parent.getSubstitutionMapping() != null) {
    if (compositionCouple.parent.getSubstitutionMapping().getCapabilities() != null) {
      for (      Entry<String,SubstitutionTarget> substitutionCapabilityEntry : compositionCouple.parent.getSubstitutionMapping().getCapabilities().entrySet()) {
        if (substitutionCapabilityEntry.getValue().getNodeTemplateName().equals(compositionCouple.nodeName)) {
          String targetCapability=substitutionCapabilityEntry.getValue().getTargetId();
          substitutionCapabilityEntry.setValue(compositionCouple.child.getSubstitutionMapping().getCapabilities().get(targetCapability));
        }
      }
    }
    if (compositionCouple.parent.getSubstitutionMapping().getRequirements() != null) {
      for (      Entry<String,SubstitutionTarget> e : compositionCouple.parent.getSubstitutionMapping().getRequirements().entrySet()) {
        if (e.getValue().getNodeTemplateName().equals(compositionCouple.nodeName)) {
          String targetCapability=e.getValue().getTargetId();
          e.setValue(compositionCouple.child.getSubstitutionMapping().getRequirements().get(targetCapability));
        }
      }
    }
  }
  compositionCouple.parent.getNodeTemplates().putAll(compositionCouple.child.getNodeTemplates());
}","/** 
 * Process the composition: <ul> <li>remove the 'proxy' node from the parent. <li>merge the child topology nodes into the parent nodes. <li> </ul>
 * @param compositionCouple
 */
private void processComposition(CompositionCouple compositionCouple){
  NodeTemplate proxyNodeTemplate=compositionCouple.parent.getNodeTemplates().remove(compositionCouple.nodeName);
  for (  NodeTemplate childNodeTemplate : compositionCouple.child.getNodeTemplates().values()) {
    for (    Entry<String,AbstractPropertyValue> propertyEntry : childNodeTemplate.getProperties().entrySet()) {
      AbstractPropertyValue pValue=propertyEntry.getValue();
      if (pValue instanceof FunctionPropertyValue && ((FunctionPropertyValue)pValue).getFunction().equals(ToscaFunctionConstants.GET_INPUT)) {
        String inputName=((FunctionPropertyValue)pValue).getTemplateName();
        propertyEntry.setValue(proxyNodeTemplate.getProperties().get(inputName));
      }
    }
    for (    Entry<String,Capability> capabilityEntry : childNodeTemplate.getCapabilities().entrySet()) {
      if (capabilityEntry.getValue().getProperties() != null) {
        for (        Entry<String,AbstractPropertyValue> propertyEntry : capabilityEntry.getValue().getProperties().entrySet()) {
          AbstractPropertyValue pValue=propertyEntry.getValue();
          if (pValue instanceof FunctionPropertyValue && ((FunctionPropertyValue)pValue).getFunction().equals(ToscaFunctionConstants.GET_INPUT)) {
            String inputName=((FunctionPropertyValue)pValue).getTemplateName();
            propertyEntry.setValue(proxyNodeTemplate.getProperties().get(inputName));
          }
        }
      }
    }
  }
  if (proxyNodeTemplate.getRelationships() != null) {
    for (    Entry<String,RelationshipTemplate> e : proxyNodeTemplate.getRelationships().entrySet()) {
      String relationShipKey=e.getKey();
      RelationshipTemplate proxyRelationShip=e.getValue();
      String requirementName=proxyRelationShip.getRequirementName();
      SubstitutionTarget substitutionTarget=compositionCouple.child.getSubstitutionMapping().getRequirements().get(requirementName);
      NodeTemplate nodeTemplate=compositionCouple.child.getNodeTemplates().get(substitutionTarget.getNodeTemplateName());
      if (nodeTemplate.getRelationships() == null) {
        Map<String,RelationshipTemplate> relationships=Maps.newHashMap();
        nodeTemplate.setRelationships(relationships);
      }
      nodeTemplate.getRelationships().put(relationShipKey,proxyRelationShip);
      proxyRelationShip.setRequirementName(substitutionTarget.getTargetId());
    }
  }
  for (  NodeTemplate otherNodes : compositionCouple.parent.getNodeTemplates().values()) {
    if (otherNodes.getRelationships() != null) {
      for (      RelationshipTemplate relationshipTemplate : otherNodes.getRelationships().values()) {
        if (relationshipTemplate.getTarget().equals(compositionCouple.nodeName)) {
          SubstitutionTarget st=compositionCouple.child.getSubstitutionMapping().getCapabilities().get(relationshipTemplate.getTargetedCapabilityName());
          relationshipTemplate.setTarget(st.getNodeTemplateName());
          relationshipTemplate.setTargetedCapabilityName(st.getTargetId());
        }
      }
    }
  }
  if (compositionCouple.parent.getOutputAttributes() != null) {
    Set<String> outputAttributes=compositionCouple.parent.getOutputAttributes().remove(compositionCouple.nodeName);
    if (outputAttributes != null) {
      for (      String proxyAttributeName : outputAttributes) {
        sustituteGetAttribute(compositionCouple.child,compositionCouple.parent,proxyAttributeName);
      }
    }
  }
  if (compositionCouple.parent.getSubstitutionMapping() != null) {
    if (compositionCouple.parent.getSubstitutionMapping().getCapabilities() != null) {
      for (      Entry<String,SubstitutionTarget> substitutionCapabilityEntry : compositionCouple.parent.getSubstitutionMapping().getCapabilities().entrySet()) {
        if (substitutionCapabilityEntry.getValue().getNodeTemplateName().equals(compositionCouple.nodeName)) {
          String targetCapability=substitutionCapabilityEntry.getValue().getTargetId();
          substitutionCapabilityEntry.setValue(compositionCouple.child.getSubstitutionMapping().getCapabilities().get(targetCapability));
        }
      }
    }
    if (compositionCouple.parent.getSubstitutionMapping().getRequirements() != null) {
      for (      Entry<String,SubstitutionTarget> e : compositionCouple.parent.getSubstitutionMapping().getRequirements().entrySet()) {
        if (e.getValue().getNodeTemplateName().equals(compositionCouple.nodeName)) {
          String targetCapability=e.getValue().getTargetId();
          e.setValue(compositionCouple.child.getSubstitutionMapping().getRequirements().get(targetCapability));
        }
      }
    }
  }
  compositionCouple.parent.getNodeTemplates().putAll(compositionCouple.child.getNodeTemplates());
}"
62375,"private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    FilterDefinition filterDefinition=new FilterDefinition();
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    IndexedCapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (!isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}","private boolean isTemplatePropertiesMatchCandidateFilters(NodeTemplate nodeTemplate,MatchingConfiguration matchingConfiguration,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes){
  if (!isTemplatePropertiesMatchCandidateFilter(nodeTemplate.getProperties(),matchingConfiguration.getProperties(),candidate.getTemplate().getProperties(),candidateType.getProperties())) {
    return false;
  }
  for (  Map.Entry<String,MatchingFilterDefinition> capabilityMatchingFilterEntry : matchingConfiguration.getCapabilities().entrySet()) {
    FilterDefinition filterDefinition=new FilterDefinition();
    Capability candidateCapability=candidate.getTemplate().getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    IndexedCapabilityType capabilityType=capabilityTypes.get(candidateCapability.getType());
    Capability templateCapability=nodeTemplate.getCapabilities().get(capabilityMatchingFilterEntry.getKey());
    if (templateCapability != null && !isTemplatePropertiesMatchCandidateFilter(templateCapability.getProperties(),capabilityMatchingFilterEntry.getValue().getProperties(),candidateCapability.getProperties(),capabilityType.getProperties())) {
      return false;
    }
  }
  return true;
}"
62376,"/** 
 * @param wf
 * @param relatedStepId if specified, the step will be added near this one (maybe before)
 * @param before if true, the step will be added before the relatedStepId
 * @param activity
 */
public void addActivity(Workflow wf,String relatedStepId,boolean before,AbstractActivity activity,TopologyContext topologyContext){
  if (WorkflowUtils.isNativeNode(activity.getNodeId(),topologyContext)) {
    throw new BadWorkflowOperationException(""String_Node_Str"");
  }
  if (relatedStepId != null) {
    if (before) {
      insertActivityStep(wf,relatedStepId,activity);
    }
 else {
      appendActivityStep(wf,relatedStepId,activity);
    }
  }
 else {
    addActivityStep(wf,activity.getNodeId(),activity);
  }
}","/** 
 * @param wf
 * @param relatedStepId if specified, the step will be added near this one (maybe before)
 * @param before if true, the step will be added before the relatedStepId
 * @param activity
 */
public void addActivity(Workflow wf,String relatedStepId,boolean before,AbstractActivity activity,TopologyContext topologyContext){
  if (WorkflowUtils.isNativeOrSubstitutionNode(activity.getNodeId(),topologyContext)) {
    throw new BadWorkflowOperationException(""String_Node_Str"");
  }
  if (relatedStepId != null) {
    if (before) {
      insertActivityStep(wf,relatedStepId,activity);
    }
 else {
      appendActivityStep(wf,relatedStepId,activity);
    }
  }
 else {
    addActivityStep(wf,activity.getNodeId(),activity);
  }
}"
62377,"public void addNode(Workflow wf,String nodeId,TopologyContext toscaTypeFinder,boolean isCompute){
  if (WorkflowUtils.isNativeNode(nodeId,toscaTypeFinder)) {
    WorkflowUtils.addDelegateWorkflowStep(wf,nodeId);
  }
 else {
    AbstractStep lastStep=null;
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    if (parentId != null) {
      if (WorkflowUtils.isNativeNode(parentId,toscaTypeFinder)) {
        lastStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,parentId);
      }
 else {
        NodeActivityStep startedStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STARTED);
        if (startedStep != null) {
          lastStep=startedStep;
        }
      }
    }
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.INITIAL);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATE,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURE,toscaTypeFinder,true);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STARTING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.START,toscaTypeFinder,true);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STARTED);
  }
}","public void addNode(Workflow wf,String nodeId,TopologyContext toscaTypeFinder,boolean isCompute){
  if (WorkflowUtils.isNativeOrSubstitutionNode(nodeId,toscaTypeFinder)) {
    WorkflowUtils.addDelegateWorkflowStep(wf,nodeId);
  }
 else {
    AbstractStep lastStep=null;
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    if (parentId != null) {
      if (WorkflowUtils.isNativeOrSubstitutionNode(parentId,toscaTypeFinder)) {
        lastStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,parentId);
      }
 else {
        NodeActivityStep startedStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STARTED);
        if (startedStep != null) {
          lastStep=startedStep;
        }
      }
    }
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.INITIAL);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATE,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CREATED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURE,toscaTypeFinder,true);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.CONFIGURED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STARTING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.START,toscaTypeFinder,true);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STARTED);
  }
}"
62378,"/** 
 */
@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  if (WorkflowUtils.isNativeNode(nodeId,toscaTypeFinder)) {
    return;
  }
  IndexedRelationshipType indexedRelationshipType=toscaTypeFinder.findElement(IndexedRelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    AbstractStep lastStep=null;
    if (targetIsNative) {
      lastStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      lastStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STARTED);
    }
    NodeActivityStep initSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.INITIAL);
    WorkflowUtils.linkSteps(lastStep,initSourceStep);
  }
 else {
    NodeActivityStep configuringTargetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.CONFIGURING);
    NodeActivityStep createdSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.CREATED);
    WorkflowUtils.linkSteps(createdSourceStep,configuringTargetStep);
    NodeActivityStep startedTargetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STARTED);
    NodeActivityStep configuringSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.CONFIGURING);
    WorkflowUtils.linkSteps(startedTargetStep,configuringSourceStep);
  }
}","/** 
 */
@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  if (WorkflowUtils.isNativeOrSubstitutionNode(nodeId,toscaTypeFinder)) {
    return;
  }
  IndexedRelationshipType indexedRelationshipType=toscaTypeFinder.findElement(IndexedRelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeOrSubstitutionNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    AbstractStep lastStep=null;
    if (targetIsNative) {
      lastStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      lastStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STARTED);
    }
    NodeActivityStep initSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.INITIAL);
    WorkflowUtils.linkSteps(lastStep,initSourceStep);
  }
 else {
    NodeActivityStep configuringTargetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.CONFIGURING);
    NodeActivityStep createdSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.CREATED);
    WorkflowUtils.linkSteps(createdSourceStep,configuringTargetStep);
    NodeActivityStep startedTargetStep=WorkflowUtils.getStateStepByNode(wf,targetId,ToscaNodeLifecycleConstants.STARTED);
    NodeActivityStep configuringSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.CONFIGURING);
    WorkflowUtils.linkSteps(startedTargetStep,configuringSourceStep);
  }
}"
62379,"@Override public void addNode(Workflow wf,String nodeId,TopologyContext toscaTypeFinder,boolean isCompute){
  if (WorkflowUtils.isNativeNode(nodeId,toscaTypeFinder)) {
    WorkflowUtils.addDelegateWorkflowStep(wf,nodeId);
  }
 else {
    AbstractStep lastStep=null;
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOPPING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOP,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOPPED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETE,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETED);
  }
}","@Override public void addNode(Workflow wf,String nodeId,TopologyContext toscaTypeFinder,boolean isCompute){
  if (WorkflowUtils.isNativeOrSubstitutionNode(nodeId,toscaTypeFinder)) {
    WorkflowUtils.addDelegateWorkflowStep(wf,nodeId);
  }
 else {
    AbstractStep lastStep=null;
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOPPING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOP,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.STOPPED);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETING);
    lastStep=eventuallyAddStdOperationStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETE,toscaTypeFinder,false);
    lastStep=appendStateStep(wf,lastStep,nodeId,ToscaNodeLifecycleConstants.DELETED);
  }
}"
62380,"@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  IndexedRelationshipType indexedRelationshipType=toscaTypeFinder.findElement(IndexedRelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    NodeActivityStep deletedSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.DELETED);
    AbstractStep targetStep=null;
    if (targetIsNative) {
      targetStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      targetStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STOPPING);
    }
    WorkflowUtils.linkSteps(deletedSourceStep,targetStep);
  }
}","@Override public void addRelationship(Workflow wf,String nodeId,NodeTemplate nodeTemplate,RelationshipTemplate relationshipTemplate,TopologyContext toscaTypeFinder){
  IndexedRelationshipType indexedRelationshipType=toscaTypeFinder.findElement(IndexedRelationshipType.class,relationshipTemplate.getType());
  String targetId=relationshipTemplate.getTarget();
  boolean targetIsNative=WorkflowUtils.isNativeOrSubstitutionNode(targetId,toscaTypeFinder);
  if (targetIsNative || WorkflowUtils.isOfType(indexedRelationshipType,NormativeRelationshipConstants.HOSTED_ON)) {
    String parentId=WorkflowUtils.getParentId(wf,nodeId,toscaTypeFinder);
    NodeActivityStep deletedSourceStep=WorkflowUtils.getStateStepByNode(wf,nodeId,ToscaNodeLifecycleConstants.DELETED);
    AbstractStep targetStep=null;
    if (targetIsNative) {
      targetStep=WorkflowUtils.getDelegateWorkflowStepByNode(wf,targetId);
    }
 else {
      targetStep=WorkflowUtils.getStateStepByNode(wf,parentId,ToscaNodeLifecycleConstants.STOPPING);
    }
    WorkflowUtils.linkSteps(deletedSourceStep,targetStep);
  }
}"
62381,"@Override public ArtifactSupport getArtifactSupport(){
  return new ArtifactSupport(new String[]{""String_Node_Str""});
}","@Override public ArtifactSupport getArtifactSupport(){
  return new ArtifactSupport(new String[]{""String_Node_Str"",""String_Node_Str""});
}"
62382,"@When(""String_Node_Str"") public void I_define_the_property_of_capability_the_node_as_input_property(String propertyId,String capabilityId,String nodeTemplateId,String inputId) throws Throwable {
  String url=String.format(""String_Node_Str"",Context.getInstance().getTopologyId(),nodeTemplateId,capabilityId,propertyId);
  List<NameValuePair> nvps=new ArrayList<NameValuePair>();
  nvps.add(new BasicNameValuePair(""String_Node_Str"",inputId));
  Context.getInstance().registerRestResponse(Context.getRestClientInstance().postUrlEncoded(url,nvps));
}","@When(""String_Node_Str"") public void I_define_the_property_of_capability_the_node_as_input_property(String propertyId,String capabilityId,String nodeTemplateId,String inputId) throws Throwable {
  String url=String.format(""String_Node_Str"",Context.getInstance().getTopologyId(),nodeTemplateId,capabilityId,propertyId);
  List<NameValuePair> nvps=new ArrayList<NameValuePair>();
  nvps.add(new BasicNameValuePair(""String_Node_Str"",inputId));
  String response=Context.getRestClientInstance().postUrlEncoded(url,nvps);
  Context.getInstance().registerRestResponse(response);
}"
62383,"/** 
 * Search in the given path for folders that contains CloudServiceArchives and zip them so they.
 * @param searchPath The path in which to search for archives.
 * @return a list of path that contains archives.
 */
public Set<Path> prepare(Path searchPath,Path zipPath){
  ToscaFinderWalker toscaFinderWalker=new ToscaFinderWalker();
  toscaFinderWalker.zipRootPath=zipPath;
  toscaFinderWalker.rootPath=searchPath;
  try {
    Files.walkFileTree(searchPath,toscaFinderWalker);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
  return toscaFinderWalker.toscaArchives;
}","/** 
 * Search in the given path for folders that contains CloudServiceArchives and zip them so they.
 * @param searchPath The path in which to search for archives.
 * @return a list of path that contains archives.
 */
public Set<Path> prepare(Path searchPath,Path zipPath,String subpath){
  ToscaFinderWalker toscaFinderWalker=new ToscaFinderWalker();
  toscaFinderWalker.zipRootPath=zipPath;
  toscaFinderWalker.rootPath=searchPath;
  toscaFinderWalker.subpath=subpath;
  try {
    Files.walkFileTree(searchPath,toscaFinderWalker);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
  return toscaFinderWalker.toscaArchives;
}"
62384,"private void addToscaArchive(Path path){
  Path relativePath=rootPath.relativize(path);
  Path zipPath=zipRootPath.resolve(relativePath).resolve(""String_Node_Str"");
  try {
    if (Files.exists(zipPath)) {
      FileUtil.delete(zipPath);
    }
    FileUtil.zip(path,zipPath);
    toscaArchives.add(zipPath);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
}","private void addToscaArchive(Path path){
  if (!(Strings.isNullOrEmpty(subpath) || path.endsWith(subpath))) {
    return;
  }
  Path relativePath=rootPath.relativize(path);
  Path zipPath=zipRootPath.resolve(relativePath).resolve(""String_Node_Str"");
  try {
    if (Files.exists(zipPath)) {
      FileUtil.delete(zipPath);
    }
    FileUtil.zip(path,zipPath);
    toscaArchives.add(zipPath);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
}"
62385,"private void validatesRepositoryUrl(String repositoryUrl){
  if (!UrlUtil.isValid(repositoryUrl)) {
    throw new InvalidArgumentException(""String_Node_Str"" + repositoryUrl + ""String_Node_Str"");
  }
  if (alienDAO.customFind(CsarGitRepository.class,QueryBuilders.termQuery(URL_FIELD,repositoryUrl)) != null) {
    throw new AlreadyExistException(""String_Node_Str"" + repositoryUrl + ""String_Node_Str"");
  }
}","private void validatesRepositoryUrl(String repositoryUrl,String id){
  if (!UrlUtil.isValid(repositoryUrl)) {
    throw new InvalidArgumentException(""String_Node_Str"" + repositoryUrl + ""String_Node_Str"");
  }
  CsarGitRepository existingCsarGitRepository=alienDAO.customFind(CsarGitRepository.class,QueryBuilders.termQuery(URL_FIELD,repositoryUrl));
  if (existingCsarGitRepository == null) {
    return;
  }
 else   if (id == null || !id.equals(existingCsarGitRepository.getId())) {
    throw new AlreadyExistException(""String_Node_Str"" + repositoryUrl + ""String_Node_Str"");
  }
}"
62386,"/** 
 * Create a CsarGitRepository in the system to store its informations
 * @param repositoryUrl The unique Git url of the CsarGitRepository
 * @param username The username of the user
 * @param password The password of the user
 * @param importLocations Locations where Csar's files are store
 * @param isStoredLocally The state of the the CsarGitRepository
 * @return The auto-generated id of the CsarGitRepository object
 */
public String create(String repositoryUrl,String username,String password,List<CsarGitCheckoutLocation> importLocations,boolean isStoredLocally){
  validatesRepositoryUrl(repositoryUrl);
  if (importLocations.isEmpty()) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  CsarGitRepository csarGit=new CsarGitRepository();
  csarGit.setId(UUID.randomUUID().toString());
  csarGit.setRepositoryUrl(repositoryUrl);
  csarGit.setUsername(username);
  csarGit.setPassword(password);
  csarGit.setImportLocations(importLocations);
  csarGit.setStoredLocally(isStoredLocally);
  alienDAO.save(csarGit);
  return csarGit.getId();
}","/** 
 * Create a CsarGitRepository in the system to store its informations
 * @param repositoryUrl The unique Git url of the CsarGitRepository
 * @param username The username of the user
 * @param password The password of the user
 * @param importLocations Locations where Csar's files are store
 * @param isStoredLocally The state of the the CsarGitRepository
 * @return The auto-generated id of the CsarGitRepository object
 */
public String create(String repositoryUrl,String username,String password,List<CsarGitCheckoutLocation> importLocations,boolean isStoredLocally){
  validatesRepositoryUrl(repositoryUrl,null);
  if (importLocations.isEmpty()) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  CsarGitRepository csarGit=new CsarGitRepository();
  csarGit.setId(UUID.randomUUID().toString());
  csarGit.setRepositoryUrl(repositoryUrl);
  csarGit.setUsername(username);
  csarGit.setPassword(password);
  csarGit.setImportLocations(importLocations);
  csarGit.setStoredLocally(isStoredLocally);
  alienDAO.save(csarGit);
  return csarGit.getId();
}"
62387,"/** 
 * Update informations for a given CsarGitRepository.
 * @param idOrUrl The id or url of the CsarGitRepository to update.
 * @param repositoryUrl The new url of the CsarGitRepository
 * @param username The username associated to the CsarGitRepository
 * @param password The password associated to the CsarGitRepository
 */
public void update(String idOrUrl,String repositoryUrl,String username,String password){
  CsarGitRepository repositoryToUpdate=getOrFail(idOrUrl);
  if (repositoryUrl != null) {
    validatesRepositoryUrl(repositoryUrl);
    repositoryToUpdate.setRepositoryUrl(repositoryUrl);
  }
  if (username != null) {
    repositoryToUpdate.setUsername(username);
  }
  if (password != null) {
    repositoryToUpdate.setPassword(password);
  }
  alienDAO.save(repositoryToUpdate);
}","/** 
 * Update informations for a given CsarGitRepository.
 * @param idOrUrl The id or url of the CsarGitRepository to update.
 * @param repositoryUrl The new url of the CsarGitRepository
 * @param username The username associated to the CsarGitRepository
 * @param password The password associated to the CsarGitRepository
 */
public void update(String id,String repositoryUrl,String username,String password,List<CsarGitCheckoutLocation> importLocations,boolean isStoredLocally){
  validatesRepositoryUrl(repositoryUrl,id);
  CsarGitRepository repositoryToUpdate=getOrFail(id);
  repositoryToUpdate.setRepositoryUrl(repositoryUrl);
  if (username != null) {
    repositoryToUpdate.setUsername(username);
  }
  if (password != null) {
    repositoryToUpdate.setPassword(password);
  }
  repositoryToUpdate.setStoredLocally(isStoredLocally);
  for (  CsarGitCheckoutLocation location : importLocations) {
    CsarGitCheckoutLocation existingLocation=findLocationIn(location,repositoryToUpdate.getImportLocations());
    if (existingLocation != null) {
      location.setLastImportedHash(existingLocation.getLastImportedHash());
    }
  }
  repositoryToUpdate.setImportLocations(importLocations);
  alienDAO.save(repositoryToUpdate);
}"
62388,"private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot);
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.getIfExists(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath());
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  CSARVersionAlreadyExistsException e) {
    return parsingResult;
  }
}","private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot,csarGitCheckoutLocation.getSubPath());
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.getIfExists(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath());
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  CSARVersionAlreadyExistsException e) {
    return parsingResult;
  }
}"
62389,"public Map<CSARDependency,CsarDependenciesBean> preParsing(Set<Path> paths) throws ParsingException {
  Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=Maps.newHashMap();
  for (  Path path : paths) {
    CsarDependenciesBean csarDepContainer=new CsarDependenciesBean();
    ParsingResult<ArchiveRoot> parsingResult=parser.parse(path);
    csarDepContainer.setPath(path);
    csarDepContainer.setSelf(new CSARDependency(parsingResult.getResult().getArchive().getName(),parsingResult.getResult().getArchive().getVersion()));
    csarDepContainer.setDependencies(parsingResult.getResult().getArchive().getDependencies());
    csarDependenciesBeans.put(csarDepContainer.getSelf(),csarDepContainer);
  }
  return csarDependenciesBeans;
}","public Map<CSARDependency,CsarDependenciesBean> preParsing(Set<Path> paths) throws ParsingException {
  Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=Maps.newHashMap();
  for (  Path path : paths) {
    try {
      ParsingResult<ArchiveRoot> parsingResult=parser.parse(path);
      CsarDependenciesBean csarDepContainer=new CsarDependenciesBean();
      csarDepContainer.setPath(path);
      csarDepContainer.setSelf(new CSARDependency(parsingResult.getResult().getArchive().getName(),parsingResult.getResult().getArchive().getVersion()));
      csarDepContainer.setDependencies(parsingResult.getResult().getArchive().getDependencies());
      csarDependenciesBeans.put(csarDepContainer.getSelf(),csarDepContainer);
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"",e);
    }
  }
  return csarDependenciesBeans;
}"
62390,"/** 
 * Update an existing CsarGit by id
 * @param request The CsarGit data to update
 * @return an empty (void) rest {@link RestResponse}.
 */
@ApiOperation(value=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<Void> update(@ApiParam(value=""String_Node_Str"",required=true) @PathVariable String id,@RequestBody UpdateCsarGitRequest request){
  csarGitRepositoryService.update(id,request.getRepositoryUrl(),request.getUsername(),request.getPassword());
  return RestResponseBuilder.<Void>builder().build();
}","/** 
 * Update an existing CsarGit by id
 * @param request The CsarGit data to update
 * @return an empty (void) rest {@link RestResponse}.
 */
@ApiOperation(value=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<Void> update(@ApiParam(value=""String_Node_Str"",required=true) @PathVariable String id,@RequestBody CreateCsarGitRequest request){
  csarGitRepositoryService.update(id,request.getRepositoryUrl(),request.getUsername(),request.getPassword(),request.getImportLocations(),request.isStoredLocally());
  return RestResponseBuilder.<Void>builder().build();
}"
62391,"private static void checkoutRepository(Git repository,String branch,String username,String password){
  try {
    CheckoutCommand checkoutCommand=repository.checkout();
    checkoutCommand.setName(branch);
    Ref ref=checkoutCommand.call();
    if (branch.equals(ref.getName())) {
      FetchCommand fetchCommand=repository.fetch();
      setCredentials(fetchCommand,username,password);
      fetchCommand.call();
      checkoutCommand=repository.checkout();
      checkoutCommand.setName(branch);
      checkoutCommand.call();
    }
  }
 catch (  GitAPIException e) {
    log.error(""String_Node_Str"",e);
    throw new GitException(""String_Node_Str"",e);
  }
}","private static void checkoutRepository(Git repository,String branch,String username,String password){
  try {
    CheckoutCommand checkoutCommand=repository.checkout();
    checkoutCommand.setName(branch);
    Ref ref=checkoutCommand.call();
    if (ref == null || branch.equals(ref.getName())) {
      FetchCommand fetchCommand=repository.fetch();
      setCredentials(fetchCommand,username,password);
      fetchCommand.call();
      checkoutCommand=repository.checkout();
      checkoutCommand.setName(branch);
      checkoutCommand.call();
    }
  }
 catch (  GitAPIException e) {
    log.error(""String_Node_Str"",e);
    throw new GitException(""String_Node_Str"",e);
  }
}"
62392,"private void addToscaArchive(Path path){
  Path relativePath=rootPath.relativize(path);
  Path zipPath=zipRootPath.resolve(relativePath).resolve(""String_Node_Str"");
  try {
    FileUtil.zip(path,zipPath);
    toscaArchives.add(zipPath);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
}","private void addToscaArchive(Path path){
  Path relativePath=rootPath.relativize(path);
  Path zipPath=zipRootPath.resolve(relativePath).resolve(""String_Node_Str"");
  try {
    if (Files.exists(zipPath)) {
      FileUtil.delete(zipPath);
    }
    FileUtil.zip(path,zipPath);
    toscaArchives.add(zipPath);
  }
 catch (  IOException e) {
    throw new GitException(""String_Node_Str"",e);
  }
}"
62393,"private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot);
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath());
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  CSARVersionAlreadyExistsException e) {
    return parsingResult;
  }
}","private List<ParsingResult<Csar>> processImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation,String gitHash){
  Path archiveZipRoot=tempZipDirPath.resolve(csarGitRepository.getId());
  Path archiveGitRoot=tempDirPath.resolve(csarGitRepository.getId());
  Set<Path> archivePaths=csarFinderService.prepare(archiveGitRoot,archiveZipRoot);
  List<ParsingResult<Csar>> parsingResult=Lists.newArrayList();
  try {
    Map<CSARDependency,CsarDependenciesBean> csarDependenciesBeans=uploadService.preParsing(archivePaths);
    List<CsarDependenciesBean> sorted=sort(csarDependenciesBeans);
    for (    CsarDependenciesBean csarBean : sorted) {
      if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(gitHash)) {
        if (csarService.getIfExists(csarBean.getSelf().getName(),csarBean.getSelf().getVersion()) != null) {
          continue;
        }
      }
      ParsingResult<Csar> result=uploadService.upload(csarBean.getPath());
      parsingResult.add(result);
    }
    return parsingResult;
  }
 catch (  ParsingException e) {
    throw new GitException(""String_Node_Str"",e);
  }
catch (  CSARVersionAlreadyExistsException e) {
    return parsingResult;
  }
}"
62394,"private List<ParsingResult<Csar>> doImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation){
  Git git=null;
  try {
    git=RepositoryManager.cloneOrCheckout(tempDirPath,csarGitRepository.getRepositoryUrl(),csarGitRepository.getUsername(),csarGitRepository.getPassword(),csarGitCheckoutLocation.getBranchId(),csarGitRepository.getId());
    if (csarGitRepository.isStoredLocally()) {
      RepositoryManager.pull(git,csarGitRepository.getUsername(),csarGitRepository.getPassword());
    }
    String hash=RepositoryManager.getLastHash(git);
    if (csarGitCheckoutLocation.getLastImportedHash() != null && csarGitCheckoutLocation.getLastImportedHash().equals(hash)) {
      return null;
    }
    List<ParsingResult<Csar>> results=processImport(csarGitRepository,csarGitCheckoutLocation);
    boolean updateHash=true;
    for (    ParsingResult<Csar> result : results) {
      if (ArchiveUploadService.hasError(result,ParsingErrorLevel.ERROR)) {
        updateHash=false;
      }
    }
    if (updateHash) {
      csarGitCheckoutLocation.setLastImportedHash(hash);
      alienDAO.save(csarGitRepository);
    }
    return results;
  }
  finally {
    if (git != null) {
      git.close();
    }
  }
}","private List<ParsingResult<Csar>> doImport(CsarGitRepository csarGitRepository,CsarGitCheckoutLocation csarGitCheckoutLocation){
  Git git=null;
  try {
    git=RepositoryManager.cloneOrCheckout(tempDirPath,csarGitRepository.getRepositoryUrl(),csarGitRepository.getUsername(),csarGitRepository.getPassword(),csarGitCheckoutLocation.getBranchId(),csarGitRepository.getId());
    if (csarGitRepository.isStoredLocally()) {
      RepositoryManager.pull(git,csarGitRepository.getUsername(),csarGitRepository.getPassword());
    }
    String hash=RepositoryManager.getLastHash(git);
    List<ParsingResult<Csar>> results=processImport(csarGitRepository,csarGitCheckoutLocation,hash);
    if (!Objects.equals(csarGitCheckoutLocation.getLastImportedHash(),hash)) {
      csarGitCheckoutLocation.setLastImportedHash(hash);
      alienDAO.save(csarGitRepository);
    }
    return results;
  }
  finally {
    if (git != null) {
      git.close();
    }
  }
}"
62395,"/** 
 * Update application's deployment setup
 * @param appId The application id.
 * @return nothing if success, error will be handled in global exception strategy
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<?> updateDeploymentSetup(@PathVariable String appId,@PathVariable String environmentId,@RequestBody UpdateDeploymentTopologyRequest updateRequest) throws OrchestratorDisabledException {
  checkAuthorizations(appId,environmentId);
  DeploymentConfiguration deploymentConfiguration=deploymentTopologyService.getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  ReflectionUtil.mergeObject(updateRequest,deploymentTopology);
  try {
    deploymentTopologyValidationService.checkPropertiesContraints(deploymentTopology);
  }
 catch (  ConstraintViolationException e) {
    return RestResponseBuilder.<ConstraintUtil.ConstraintInformation>builder().data(e.getConstraintInformation()).error(RestErrorBuilder.builder(RestErrorCode.PROPERTY_CONSTRAINT_VIOLATION_ERROR).message(e.getMessage()).build()).build();
  }
catch (  ConstraintValueDoNotMatchPropertyTypeException e) {
    return RestResponseBuilder.<ConstraintUtil.ConstraintInformation>builder().data(e.getConstraintInformation()).error(RestErrorBuilder.builder(RestErrorCode.PROPERTY_TYPE_VIOLATION_ERROR).message(e.getMessage()).build()).build();
  }
  deploymentTopologyService.updateDeploymentTopologyInputsAndSave(deploymentTopology);
  return RestResponseBuilder.<DeploymentTopologyDTO>builder().data(buildDeploymentTopologyDTO(deploymentConfiguration)).build();
}","/** 
 * @param appId The application id
 * @param environmentId Id of the environment we want to update
 * @param updateRequest an {@link UpdateDeploymentTopologyRequest} object
 * @return a {@link RestResponse} with:<br>the  {@link DeploymentTopologyDTO} if everithing went well, the <br>Error if not
 * @throws OrchestratorDisabledException
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<?> updateDeploymentSetup(@PathVariable String appId,@PathVariable String environmentId,@RequestBody UpdateDeploymentTopologyRequest updateRequest) throws OrchestratorDisabledException {
  checkAuthorizations(appId,environmentId);
  DeploymentConfiguration deploymentConfiguration=deploymentTopologyService.getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  ReflectionUtil.mergeObject(updateRequest,deploymentTopology);
  try {
    deploymentTopologyValidationService.checkPropertiesContraints(deploymentTopology);
  }
 catch (  ConstraintViolationException e) {
    return RestResponseBuilder.<ConstraintUtil.ConstraintInformation>builder().data(e.getConstraintInformation()).error(RestErrorBuilder.builder(RestErrorCode.PROPERTY_CONSTRAINT_VIOLATION_ERROR).message(e.getMessage()).build()).build();
  }
catch (  ConstraintValueDoNotMatchPropertyTypeException e) {
    return RestResponseBuilder.<ConstraintUtil.ConstraintInformation>builder().data(e.getConstraintInformation()).error(RestErrorBuilder.builder(RestErrorCode.PROPERTY_TYPE_VIOLATION_ERROR).message(e.getMessage()).build()).build();
  }
  deploymentTopologyService.updateDeploymentTopologyInputsAndSave(deploymentTopology);
  return RestResponseBuilder.<DeploymentTopologyDTO>builder().data(buildDeploymentTopologyDTO(deploymentConfiguration)).build();
}"
62396,"/** 
 * Get the list of resources definitions for a given orchestrator.
 * @param location the location.
 * @return A list of resource definitions for the given location.
 */
public LocationResources getLocationResources(Location location){
  List<LocationResourceTemplate> locationResourceTemplates=getResourcesTemplates(location.getId());
  if (locationResourceTemplates == null || locationResourceTemplates.size() == 0) {
    return getLocationResourcesFromOrchestrator(location);
  }
  LocationResources locationResources=new LocationResources(getLocationResourceTypes(locationResourceTemplates));
  setLocationRessource(locationResourceTemplates,locationResources);
  return locationResources;
}","/** 
 * Get the list of resources definitions for a given orchestrator.
 * @param location the location.
 * @return A list of resource definitions for the given location.
 */
public LocationResources getLocationResources(Location location){
  Orchestrator orchestrator=orchestratorService.get(location.getOrchestratorId());
  if (orchestrator != null && orchestratorPluginService.get(orchestrator.getId()) != null) {
    return getLocationResourcesFromOrchestrator(location);
  }
  List<LocationResourceTemplate> locationResourceTemplates=getResourcesTemplates(location.getId());
  LocationResources locationResources=new LocationResources(getLocationResourceTypes(locationResourceTemplates));
  setLocationRessource(locationResourceTemplates,locationResources);
  return locationResources;
}"
62397,"/** 
 * Upload a plugin from a given path.
 * @param uploadedPluginPath The path of the plugin to upload.
 * @throws IOException In case there is an issue with the access to the plugin file.
 * @throws PluginLoadingException
 * @throws AlreadyExistException if a plugin with the same id already exists in the repository
 * @return the uploaded plugin
 * @throws MissingPlugingDescriptorFileException
 */
public Plugin uploadPlugin(Path uploadedPluginPath) throws PluginLoadingException, IOException, MissingPlugingDescriptorFileException {
  FileSystem fs=FileSystems.newFileSystem(uploadedPluginPath,null);
  PluginDescriptor descriptor=null;
  try {
    try {
      descriptor=YamlParserUtil.parseFromUTF8File(fs.getPath(PLUGIN_DESCRIPTOR_FILE),PluginDescriptor.class);
    }
 catch (    IOException e) {
      if (e instanceof NoSuchFileException) {
        throw new MissingPlugingDescriptorFileException();
      }
 else {
        throw e;
      }
    }
    String pluginPathId=getPluginPathId();
    Plugin plugin=new Plugin(descriptor,pluginPathId);
    Path pluginPath=getPluginPath(pluginPathId);
    FileUtil.unzip(uploadedPluginPath,pluginPath);
    Path pluginUiSourcePath=pluginPath.resolve(UI_DIRECTORY);
    Path pluginUiPath=getPluginUiPath(pluginPathId);
    if (Files.exists(pluginUiSourcePath)) {
      FileUtil.copy(pluginUiSourcePath,pluginUiPath);
    }
    long count=alienDAO.count(Plugin.class,QueryBuilders.idsQuery(MappingBuilder.indexTypeFromClass(Plugin.class)).ids(plugin.getId()));
    if (count > 0) {
      log.warn(""String_Node_Str"",plugin.getId());
      throw new AlreadyExistException(""String_Node_Str"");
    }
    loadPlugin(plugin);
    plugin.setConfigurable(isPluginConfigurable(plugin.getId()));
    alienDAO.save(plugin);
    log.info(""String_Node_Str"" + plugin.getId() + ""String_Node_Str"");
    return plugin;
  }
  finally {
    fs.close();
  }
}","/** 
 * Upload a plugin from a given path.
 * @param uploadedPluginPath The path of the plugin to upload.
 * @throws IOException In case there is an issue with the access to the plugin file.
 * @throws PluginLoadingException
 * @throws AlreadyExistException if a plugin with the same id already exists in the repository
 * @return the uploaded plugin
 * @throws MissingPlugingDescriptorFileException
 */
public Plugin uploadPlugin(Path uploadedPluginPath) throws PluginLoadingException, IOException, MissingPlugingDescriptorFileException {
  FileSystem fs=FileSystems.newFileSystem(uploadedPluginPath,null);
  PluginDescriptor descriptor=null;
  try {
    try {
      descriptor=YamlParserUtil.parseFromUTF8File(fs.getPath(PLUGIN_DESCRIPTOR_FILE),PluginDescriptor.class);
    }
 catch (    IOException e) {
      if (e instanceof NoSuchFileException) {
        throw new MissingPlugingDescriptorFileException();
      }
 else {
        throw e;
      }
    }
    String pluginPathId=getPluginPathId();
    Plugin plugin=new Plugin(descriptor,pluginPathId);
    long count=alienDAO.count(Plugin.class,QueryBuilders.idsQuery(MappingBuilder.indexTypeFromClass(Plugin.class)).ids(plugin.getId()));
    if (count > 0) {
      log.warn(""String_Node_Str"",plugin.getId());
      throw new AlreadyExistException(""String_Node_Str"");
    }
    Path pluginPath=getPluginPath(pluginPathId);
    FileUtil.unzip(uploadedPluginPath,pluginPath);
    Path pluginUiSourcePath=pluginPath.resolve(UI_DIRECTORY);
    Path pluginUiPath=getPluginUiPath(pluginPathId);
    if (Files.exists(pluginUiSourcePath)) {
      FileUtil.copy(pluginUiSourcePath,pluginUiPath);
    }
    loadPlugin(plugin);
    plugin.setConfigurable(isPluginConfigurable(plugin.getId()));
    alienDAO.save(plugin);
    log.info(""String_Node_Str"" + plugin.getId() + ""String_Node_Str"");
    return plugin;
  }
  finally {
    fs.close();
  }
}"
62398,"/** 
 * This methods checks all the previously configured substitutions and ensures that they are still related to existing node and matching in the topology.
 * @param deploymentTopology The deployment topology.
 * @param substitutedNodes The previous configuration for substitution nodes.
 * @param availableSubstitutions The substitutions provided by the location's node matching.
 */
private void removeUnsynchronizedSubstitutions(DeploymentTopology deploymentTopology,Map<String,String> substitutedNodes,Map<String,List<LocationResourceTemplate>> availableSubstitutions){
  if (deploymentTopology.getNodeTemplates() == null) {
    substitutedNodes.clear();
    return;
  }
  Iterator<Map.Entry<String,String>> mappingEntryIterator=substitutedNodes.entrySet().iterator();
  while (mappingEntryIterator.hasNext()) {
    Map.Entry<String,String> entry=mappingEntryIterator.next();
    if (deploymentTopology.getNodeTemplates().containsKey(entry.getKey())) {
      List<LocationResourceTemplate> options=availableSubstitutions.get(entry.getKey());
      if (options == null) {
        mappingEntryIterator.remove();
      }
 else {
        List<LocationResourceTemplate> availableSubstitutionsForNode=availableSubstitutions.get(entry.getKey());
        boolean substitutedTemplateExist=false;
        for (        LocationResourceTemplate availableSubstitutionForNode : availableSubstitutionsForNode) {
          if (availableSubstitutionForNode.getId().equals(entry.getValue())) {
            substitutedTemplateExist=true;
            break;
          }
        }
        if (!substitutedTemplateExist) {
          mappingEntryIterator.remove();
        }
      }
    }
 else {
      mappingEntryIterator.remove();
    }
  }
}","/** 
 * This methods checks all the previously configured substitutions and ensures that they are still related to existing node and matching in the topology.
 * @param deploymentTopology The deployment topology.
 * @param substitutedNodes The previous configuration for substitution nodes.
 * @param availableSubstitutions The substitutions provided by the location's node matching.
 */
private void removeUnsynchronizedSubstitutions(DeploymentTopology deploymentTopology,Map<String,String> substitutedNodes,Map<String,List<LocationResourceTemplate>> availableSubstitutions){
  if (deploymentTopology.getNodeTemplates() == null) {
    substitutedNodes.clear();
    return;
  }
  Iterator<Map.Entry<String,String>> mappingEntryIterator=substitutedNodes.entrySet().iterator();
  while (mappingEntryIterator.hasNext()) {
    Map.Entry<String,String> entry=mappingEntryIterator.next();
    if (deploymentTopology.getNodeTemplates().containsKey(entry.getKey())) {
      List<LocationResourceTemplate> availableSubstitutionsForNode=availableSubstitutions.get(entry.getKey());
      if (availableSubstitutionsForNode == null) {
        mappingEntryIterator.remove();
      }
 else {
        boolean substitutedTemplateExist=false;
        for (        LocationResourceTemplate availableSubstitutionForNode : availableSubstitutionsForNode) {
          if (availableSubstitutionForNode.getId().equals(entry.getValue())) {
            substitutedTemplateExist=true;
            break;
          }
        }
        if (!substitutedTemplateExist) {
          mappingEntryIterator.remove();
        }
      }
    }
 else {
      mappingEntryIterator.remove();
    }
  }
}"
62399,"/** 
 * Update node substitution.
 * @param appId id of the application.
 * @param environmentId id of the environment.
 * @return response containing the available substitutions.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<DeploymentTopologyDTO> updateSubstitution(@PathVariable String appId,@PathVariable String environmentId,@PathVariable String nodeId,@RequestParam String locationResourceTemplateId){
  checkAuthorizations(appId,environmentId);
  DeploymentConfiguration deploymentConfiguration=deploymentTopologyService.getDeploymentConfiguration(environmentId);
  DeploymentTopology deploymentTopology=deploymentConfiguration.getDeploymentTopology();
  locationResourceService.getOrFail(locationResourceTemplateId);
  deploymentTopology.getSubstitutedNodes().put(nodeId,locationResourceTemplateId);
  deploymentTopologyService.updateDeploymentTopology(deploymentTopology);
  return RestResponseBuilder.<DeploymentTopologyDTO>builder().data(buildDeploymentTopologyDTO(deploymentConfiguration)).build();
}","/** 
 * Update node substitution.
 * @param appId id of the application.
 * @param environmentId id of the environment.
 * @return response containing the available substitutions.
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @PreAuthorize(""String_Node_Str"") @Audit public RestResponse<DeploymentTopologyDTO> updateSubstitution(@PathVariable String appId,@PathVariable String environmentId,@PathVariable String nodeId,@RequestParam String locationResourceTemplateId){
  checkAuthorizations(appId,environmentId);
  DeploymentConfiguration deploymentConfiguration=deploymentTopologyService.updateSubstitution(environmentId,nodeId,locationResourceTemplateId);
  return RestResponseBuilder.<DeploymentTopologyDTO>builder().data(buildDeploymentTopologyDTO(deploymentConfiguration)).build();
}"
62400,"/** 
 * Process node substitution for the deployment topology
 * @param deploymentTopology the deployment topology to process substitution
 */
public void processNodesSubstitution(DeploymentTopology deploymentTopology,Map<String,NodeTemplate> nodesToMergeProperties){
  if (MapUtils.isEmpty(deploymentTopology.getLocationGroups())) {
    return;
  }
  deploymentTopology.getDependencies().addAll(deploymentTopology.getLocationDependencies());
  Map<String,List<LocationResourceTemplate>> availableSubstitutions=getAvailableSubstitutions(deploymentTopology.getNodeTemplates(),deploymentTopology.getDependencies(),deploymentTopology.getLocationGroups());
  Map<String,Set<String>> availableSubstitutionsIds=Maps.newHashMap();
  for (  Map.Entry<String,List<LocationResourceTemplate>> availableSubstitutionEntry : availableSubstitutions.entrySet()) {
    Set<String> ids=Sets.newHashSet();
    for (    LocationResourceTemplate availableSubstitution : availableSubstitutionEntry.getValue()) {
      ids.add(availableSubstitution.getId());
    }
    availableSubstitutionsIds.put(availableSubstitutionEntry.getKey(),ids);
  }
  Map<String,String> substitutedNodes=deploymentTopology.getSubstitutedNodes();
  removeUnsynchronizedSubstitutions(deploymentTopology,substitutedNodes,availableSubstitutions);
  Iterator<Entry<String,NodeTemplate>> originalNodesIter=deploymentTopology.getOriginalNodes().entrySet().iterator();
  while (originalNodesIter.hasNext()) {
    Entry<String,NodeTemplate> next=originalNodesIter.next();
    if (!availableSubstitutions.containsKey(next.getKey())) {
      originalNodesIter.remove();
    }
  }
  for (  Map.Entry<String,List<LocationResourceTemplate>> entry : availableSubstitutions.entrySet()) {
    if (!substitutedNodes.containsKey(entry.getKey())) {
      deploymentTopology.getOriginalNodes().put(entry.getKey(),deploymentTopology.getNodeTemplates().get(entry.getKey()));
      if (!entry.getValue().isEmpty()) {
        substitutedNodes.put(entry.getKey(),entry.getValue().iterator().next().getId());
      }
    }
  }
  deploymentTopology.setSubstitutedNodes(substitutedNodes);
  for (  Map.Entry<String,String> substitutedNodeEntry : substitutedNodes.entrySet()) {
    NodeTemplate locationNode=locationResourceService.getOrFail(substitutedNodeEntry.getValue()).getTemplate();
    NodeTemplate abstractTopologyNode=deploymentTopology.getNodeTemplates().put(substitutedNodeEntry.getKey(),locationNode);
    NodeTemplate previousNode=null;
    if (nodesToMergeProperties != null) {
      previousNode=nodesToMergeProperties.get(substitutedNodeEntry.getKey());
    }
    locationNode.setName(abstractTopologyNode.getName());
    locationNode.setRelationships(abstractTopologyNode.getRelationships());
    if (MapUtils.isNotEmpty(locationNode.getProperties())) {
      Set<String> keysToConsider=locationNode.getProperties().keySet();
      Map<String,AbstractPropertyValue> mergedProperties=Maps.newLinkedHashMap();
      if (previousNode != null && MapUtils.isNotEmpty(previousNode.getProperties())) {
        PropertyUtil.mergeProperties(previousNode.getProperties(),mergedProperties,keysToConsider);
      }
      if (MapUtils.isNotEmpty(locationNode.getProperties())) {
        PropertyUtil.mergeProperties(locationNode.getProperties(),mergedProperties,keysToConsider);
      }
      if (MapUtils.isNotEmpty(abstractTopologyNode.getProperties())) {
        PropertyUtil.mergeProperties(abstractTopologyNode.getProperties(),mergedProperties,keysToConsider);
      }
      locationNode.setProperties(mergedProperties);
    }
    if (MapUtils.isNotEmpty(locationNode.getCapabilities())) {
      for (      Map.Entry<String,Capability> locationCapabilityEntry : locationNode.getCapabilities().entrySet()) {
        Capability locationCapability=locationCapabilityEntry.getValue();
        if (MapUtils.isEmpty(locationCapability.getProperties())) {
          continue;
        }
        Set<String> keysToConsider=locationCapability.getProperties().keySet();
        Map<String,AbstractPropertyValue> mergedCapabilityProperties=Maps.newLinkedHashMap();
        Capability previousCapability=null;
        if (previousNode != null && MapUtils.isNotEmpty(previousNode.getCapabilities())) {
          previousCapability=previousNode.getCapabilities().get(locationCapabilityEntry.getKey());
        }
        if (previousCapability != null && MapUtils.isNotEmpty(previousCapability.getProperties())) {
          PropertyUtil.mergeProperties(previousCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        }
        PropertyUtil.mergeProperties(locationCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        Capability abstractCapability=null;
        if (MapUtils.isNotEmpty(abstractTopologyNode.getCapabilities())) {
          abstractCapability=abstractTopologyNode.getCapabilities().get(locationCapabilityEntry.getKey());
        }
        if (abstractCapability != null && MapUtils.isNotEmpty(abstractCapability.getProperties())) {
          PropertyUtil.mergeProperties(abstractCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        }
        locationCapability.setProperties(mergedCapabilityProperties);
      }
    }
  }
}","/** 
 * This method updates the node substitution choices and default selections for a given deployment topology.
 * @param deploymentTopology The deployment topology in which to save substitutions / deploymentTopology.getNodeTemplates() are the nodes from the originaltopology.
 * @param nodesToMergeProperties The node that where substituted previously with specific configurations from deployment user.
 */
public void processNodesSubstitution(DeploymentTopology deploymentTopology,Map<String,NodeTemplate> nodesToMergeProperties){
  if (MapUtils.isEmpty(deploymentTopology.getLocationGroups())) {
    return;
  }
  deploymentTopology.getDependencies().addAll(deploymentTopology.getLocationDependencies());
  Map<String,List<LocationResourceTemplate>> availableSubstitutions=getAvailableSubstitutions(deploymentTopology.getNodeTemplates(),deploymentTopology.getDependencies(),deploymentTopology.getLocationGroups());
  Map<String,Set<String>> availableSubstitutionsIds=Maps.newHashMap();
  for (  Map.Entry<String,List<LocationResourceTemplate>> availableSubstitutionEntry : availableSubstitutions.entrySet()) {
    Set<String> ids=Sets.newHashSet();
    for (    LocationResourceTemplate availableSubstitution : availableSubstitutionEntry.getValue()) {
      ids.add(availableSubstitution.getId());
    }
    availableSubstitutionsIds.put(availableSubstitutionEntry.getKey(),ids);
  }
  Map<String,String> substitutedNodes=deploymentTopology.getSubstitutedNodes();
  removeUnsynchronizedSubstitutions(deploymentTopology,substitutedNodes,availableSubstitutions);
  Iterator<Entry<String,NodeTemplate>> originalNodesIter=deploymentTopology.getOriginalNodes().entrySet().iterator();
  while (originalNodesIter.hasNext()) {
    Entry<String,NodeTemplate> next=originalNodesIter.next();
    if (!availableSubstitutions.containsKey(next.getKey())) {
      originalNodesIter.remove();
    }
 else {
      next.setValue(deploymentTopology.getNodeTemplates().get(next.getKey()));
    }
  }
  for (  Map.Entry<String,List<LocationResourceTemplate>> entry : availableSubstitutions.entrySet()) {
    if (!substitutedNodes.containsKey(entry.getKey())) {
      deploymentTopology.getOriginalNodes().put(entry.getKey(),deploymentTopology.getNodeTemplates().get(entry.getKey()));
      if (!entry.getValue().isEmpty()) {
        substitutedNodes.put(entry.getKey(),entry.getValue().iterator().next().getId());
      }
    }
  }
  deploymentTopology.setSubstitutedNodes(substitutedNodes);
  for (  Map.Entry<String,String> substitutedNodeEntry : substitutedNodes.entrySet()) {
    NodeTemplate locationNode=locationResourceService.getOrFail(substitutedNodeEntry.getValue()).getTemplate();
    NodeTemplate abstractTopologyNode=deploymentTopology.getNodeTemplates().put(substitutedNodeEntry.getKey(),locationNode);
    NodeTemplate previousNode=null;
    if (nodesToMergeProperties != null) {
      previousNode=nodesToMergeProperties.get(substitutedNodeEntry.getKey());
    }
    locationNode.setName(abstractTopologyNode.getName());
    locationNode.setRelationships(abstractTopologyNode.getRelationships());
    if (MapUtils.isNotEmpty(locationNode.getProperties())) {
      Set<String> keysToConsider=locationNode.getProperties().keySet();
      Map<String,AbstractPropertyValue> mergedProperties=Maps.newLinkedHashMap();
      if (previousNode != null && MapUtils.isNotEmpty(previousNode.getProperties())) {
        PropertyUtil.mergeProperties(previousNode.getProperties(),mergedProperties,keysToConsider);
      }
      if (MapUtils.isNotEmpty(abstractTopologyNode.getProperties())) {
        PropertyUtil.mergeProperties(abstractTopologyNode.getProperties(),mergedProperties,keysToConsider);
      }
      if (MapUtils.isNotEmpty(locationNode.getProperties())) {
        PropertyUtil.mergeProperties(locationNode.getProperties(),mergedProperties,keysToConsider);
      }
      locationNode.setProperties(mergedProperties);
    }
    if (MapUtils.isNotEmpty(locationNode.getCapabilities())) {
      for (      Map.Entry<String,Capability> locationCapabilityEntry : locationNode.getCapabilities().entrySet()) {
        Capability locationCapability=locationCapabilityEntry.getValue();
        if (MapUtils.isEmpty(locationCapability.getProperties())) {
          continue;
        }
        Set<String> keysToConsider=locationCapability.getProperties().keySet();
        Map<String,AbstractPropertyValue> mergedCapabilityProperties=Maps.newLinkedHashMap();
        Capability previousCapability=null;
        if (previousNode != null && MapUtils.isNotEmpty(previousNode.getCapabilities())) {
          previousCapability=previousNode.getCapabilities().get(locationCapabilityEntry.getKey());
        }
        if (previousCapability != null && MapUtils.isNotEmpty(previousCapability.getProperties())) {
          PropertyUtil.mergeProperties(previousCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        }
        PropertyUtil.mergeProperties(locationCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        Capability abstractCapability=null;
        if (MapUtils.isNotEmpty(abstractTopologyNode.getCapabilities())) {
          abstractCapability=abstractTopologyNode.getCapabilities().get(locationCapabilityEntry.getKey());
        }
        if (abstractCapability != null && MapUtils.isNotEmpty(abstractCapability.getProperties())) {
          PropertyUtil.mergeProperties(abstractCapability.getProperties(),mergedCapabilityProperties,keysToConsider);
        }
        locationCapability.setProperties(mergedCapabilityProperties);
      }
    }
  }
}"
62401,"/** 
 * Get or create if not yet existing the   {@link DeploymentTopology}
 * @param environmentId environment's id
 * @return the existing deployment topology or new created one
 */
private DeploymentTopology getOrCreateDeploymentTopology(String environmentId){
  ApplicationEnvironment environment=appEnvironmentServices.getOrFail(environmentId);
  ApplicationVersion version=applicationVersionService.getOrFail(environment.getCurrentVersionId());
  return getOrCreateDeploymentTopology(environment,version.getTopologyId());
}","/** 
 * Get or create if not yet existing the   {@link DeploymentTopology}. This method will check if the initial topology has been updated, if so it will try to re-synchronize the topology and the deployment topology
 * @param environment the environment
 * @return the related or created deployment topology
 */
private DeploymentTopology getOrCreateDeploymentTopology(ApplicationEnvironment environment,String topologyId){
  String id=DeploymentTopology.generateId(environment.getCurrentVersionId(),environment.getId());
  DeploymentTopology deploymentTopology=alienDAO.findById(DeploymentTopology.class,id);
  Topology topology=topologyServiceCore.getOrFail(topologyId);
  if (deploymentTopology == null) {
    deploymentTopology=generateDeploymentTopology(id,environment,topology,new DeploymentTopology());
  }
 else {
    Map<String,String> locationIds=TopologyLocationUtils.getLocationIds(deploymentTopology);
    boolean locationsInvalid=false;
    Map<String,Location> locations=Maps.newHashMap();
    if (!MapUtils.isEmpty(locationIds)) {
      try {
        locations=getLocations(locationIds);
      }
 catch (      NotFoundException ignored) {
        locationsInvalid=true;
      }
    }
    if (locationsInvalid) {
      deploymentTopology=generateDeploymentTopology(id,environment,topology,new DeploymentTopology());
    }
 else     if (checkIfTopologyOrLocationHasChanged(deploymentTopology,locations.values(),topology)) {
      generateDeploymentTopology(id,environment,topology,deploymentTopology);
    }
  }
  return deploymentTopology;
}"
62402,"@Override public void setConstraintValue(IPropertyType<?> toscaType,String textValue) throws ConstraintValueDoNotMatchPropertyTypeException {
  typed=ConstraintUtil.convert(toscaType,textValue);
}","@Override public void setConstraintValue(IPropertyType<?> toscaType,String textValue) throws ConstraintValueDoNotMatchPropertyTypeException {
  equal=textValue;
  typed=ConstraintUtil.convert(toscaType,textValue);
}"
62403,"public void setTemplateProperty(LocationResourceTemplate resourceTemplate,String propertyName,Object propertyValue){
  Location location=locationService.getOrFail(resourceTemplate.getLocationId());
  IndexedNodeType resourceType=csarRepoSearchService.getRequiredElementInDependencies(IndexedNodeType.class,resourceTemplate.getTemplate().getType(),location.getDependencies());
  if (resourceType.getProperties() == null || !resourceType.getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ resourceType.getElementId()+ ""String_Node_Str"");
  }
  PropertyUtil.setPropertyValue(resourceTemplate.getTemplate(),resourceType.getProperties().get(propertyName),propertyName,propertyValue);
}","public void setTemplateProperty(String resourceId,String propertyName,Object propertyValue) throws ConstraintValueDoNotMatchPropertyTypeException, ConstraintViolationException {
  LocationResourceTemplate resourceTemplate=getOrFail(resourceId);
  Location location=locationService.getOrFail(resourceTemplate.getLocationId());
  IndexedNodeType resourceType=csarRepoSearchService.getRequiredElementInDependencies(IndexedNodeType.class,resourceTemplate.getTemplate().getType(),location.getDependencies());
  if (resourceType.getProperties() == null || !resourceType.getProperties().containsKey(propertyName)) {
    throw new NotFoundException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ resourceType.getElementId()+ ""String_Node_Str"");
  }
  propertyService.setPropertyValue(resourceTemplate.getTemplate(),resourceType.getProperties().get(propertyName),propertyName,propertyValue);
  saveResource(resourceTemplate);
}"
62404,"/** 
 * Load plugins from the initialiaztion plugins folder.
 */
public void loadPlugins(){
  if (alienInitDirectory == null || alienInitDirectory.isEmpty()) {
    log.debug(""String_Node_Str"");
    return;
  }
  if (!Files.exists(alienPluginsInitPath) || !Files.isDirectory(alienPluginsInitPath)) {
    log.warn(""String_Node_Str"",alienPluginsInitPath.toString());
    return;
  }
  try {
    List<Path> plugins=FileUtil.listFiles(alienPluginsInitPath,""String_Node_Str"");
    for (    Path plugin : plugins) {
      try {
        pluginManager.uploadPlugin(plugin);
      }
 catch (      AlreadyExistException e) {
        log.debug(""String_Node_Str"",plugin.toString());
      }
catch (      PluginLoadingException|MissingPlugingDescriptorFileException e) {
        log.error(""String_Node_Str"",plugin.toString(),e);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","/** 
 * Load plugins from the initialiaztion plugins folder.
 */
public void loadPlugins(){
  if (alienInitDirectory == null || alienInitDirectory.isEmpty() || alienPluginsInitPath == null) {
    log.debug(""String_Node_Str"");
    return;
  }
  if (!Files.exists(alienPluginsInitPath) || !Files.isDirectory(alienPluginsInitPath)) {
    log.warn(""String_Node_Str"",alienPluginsInitPath.toString());
    return;
  }
  try {
    List<Path> plugins=FileUtil.listFiles(alienPluginsInitPath,""String_Node_Str"");
    for (    Path plugin : plugins) {
      try {
        pluginManager.uploadPlugin(plugin);
      }
 catch (      AlreadyExistException e) {
        log.debug(""String_Node_Str"",plugin.toString());
      }
catch (      PluginLoadingException|MissingPlugingDescriptorFileException e) {
        log.error(""String_Node_Str"",plugin.toString(),e);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}"
62405,"@Override public <T extends IndexedToscaElement>T getElementInDependencies(Class<T> elementClass,String elementId,Collection<CSARDependency> dependencies){
  if (dependencies == null || dependencies.isEmpty()) {
    return null;
  }
  BoolQueryBuilder boolQueryBuilder=QueryBuilders.boolQuery();
  for (  CSARDependency dependency : dependencies) {
    QueryBuilder idQueryBuilder=QueryBuilders.idsQuery().addIds(elementId + ""String_Node_Str"" + dependency.getVersion());
    QueryBuilder matchArchiveNameQueryBuilder=QueryBuilders.termQuery(""String_Node_Str"",dependency.getName());
    boolQueryBuilder.should(QueryBuilders.boolQuery().must(idQueryBuilder).must(matchArchiveNameQueryBuilder));
  }
  List<T> elements=searchDAO.customFindAll(elementClass,boolQueryBuilder);
  if (elements != null && !elements.isEmpty()) {
    Collections.sort(elements,new Comparator<T>(){
      @Override public int compare(      T left,      T right){
        return VersionUtil.parseVersion(left.getArchiveVersion()).compareTo(VersionUtil.parseVersion(right.getArchiveVersion()));
      }
    }
);
    return elements.get(elements.size() - 1);
  }
 else {
    return null;
  }
}","public <T extends IndexedToscaElement>T getElementInDependencies(Class<T> elementClass,QueryBuilder query,Collection<CSARDependency> dependencies){
  if (dependencies == null || dependencies.isEmpty()) {
    return null;
  }
  BoolQueryBuilder boolQueryBuilder=QueryBuilders.boolQuery();
  for (  CSARDependency dependency : dependencies) {
    QueryBuilder matchArchiveNameQueryBuilder=QueryBuilders.termQuery(""String_Node_Str"",dependency.getName());
    QueryBuilder matchArchiveVersionQueryBuilder=QueryBuilders.termQuery(""String_Node_Str"",dependency.getVersion());
    boolQueryBuilder.should(QueryBuilders.boolQuery().must(query).must(matchArchiveNameQueryBuilder).must(matchArchiveVersionQueryBuilder));
  }
  return getLatestVersionOfElement(elementClass,boolQueryBuilder);
}"
62406,"/** 
 * Get an element from defined dependencies.
 * @param elementClass The element class.
 * @param elementId The TOSCA element id of the element (without archive version).
 * @param dependencies A list of CSAR in which the element may be defined.
 * @return The requested element or null if the element is not found.
 */
<T extends IndexedToscaElement>T getElementInDependencies(Class<T> elementClass,String elementId,Collection<CSARDependency> dependencies);","/** 
 * Get an element matching specified query from given dependencies
 * @param elementClass The element class.
 * @param query query to match element
 * @param dependencies A list of CSAR in which the element may be defined.
 * @param < T > type of the tosca element
 * @return
 */
<T extends IndexedToscaElement>T getElementInDependencies(Class<T> elementClass,QueryBuilder query,Collection<CSARDependency> dependencies);"
62407,"@Override public void storeCSAR(String name,String version,Path tmpPath) throws CSARVersionAlreadyExistsException {
  if (!Files.isReadable(tmpPath)) {
    throw new CSARStorageFailureException(""String_Node_Str"" + tmpPath.toString() + ""String_Node_Str"");
  }
  Path csarDirectoryPath=rootPath.resolve(name).resolve(version);
  String realName=name.concat(""String_Node_Str"").concat(version).concat(""String_Node_Str"" + CSAR_EXTENSION);
  createCSARDirectory(csarDirectoryPath,realName);
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tmpPath);
      log.debug(""String_Node_Str"" + csarDirectoryPath.resolve(realName));
    }
    Path csarTargetPath=csarDirectoryPath.resolve(realName);
    Path expandedPath=csarDirectoryPath.resolve(""String_Node_Str"");
    if (Files.isRegularFile(tmpPath)) {
      Files.copy(tmpPath,csarTargetPath);
      FileUtil.unzip(csarTargetPath,expandedPath);
    }
 else {
      FileUtil.copy(tmpPath,expandedPath,StandardCopyOption.REPLACE_EXISTING);
    }
    DirectoryJSonWalker.directoryJson(expandedPath,csarDirectoryPath.resolve(""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new CSARStorageFailureException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str""+ e.getMessage(),e);
  }
}","@Override public synchronized void storeCSAR(String name,String version,Path tmpPath) throws CSARVersionAlreadyExistsException {
  if (!Files.isReadable(tmpPath)) {
    throw new CSARStorageFailureException(""String_Node_Str"" + tmpPath.toString() + ""String_Node_Str"");
  }
  Path csarDirectoryPath=rootPath.resolve(name).resolve(version);
  String realName=name.concat(""String_Node_Str"").concat(version).concat(""String_Node_Str"" + CSAR_EXTENSION);
  createCSARDirectory(csarDirectoryPath,realName);
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tmpPath);
      log.debug(""String_Node_Str"" + csarDirectoryPath.resolve(realName));
    }
    Path csarTargetPath=csarDirectoryPath.resolve(realName);
    Path expandedPath=csarDirectoryPath.resolve(""String_Node_Str"");
    if (Files.isRegularFile(tmpPath)) {
      Files.copy(tmpPath,csarTargetPath);
      FileUtil.unzip(csarTargetPath,expandedPath);
    }
 else {
      FileUtil.copy(tmpPath,expandedPath,StandardCopyOption.REPLACE_EXISTING);
    }
    DirectoryJSonWalker.directoryJson(expandedPath,csarDirectoryPath.resolve(""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new CSARStorageFailureException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str""+ e.getMessage(),e);
  }
}"
62408,"/** 
 * Disable an orchestrator.
 * @param orchestrator The orchestrator to disable.
 * @param force If true the orchestrator is disabled even if some deployments are currently running.
 */
public synchronized boolean disable(Orchestrator orchestrator,boolean force){
  if (force == false) {
    QueryHelper.SearchQueryHelperBuilder searchQueryHelperBuilder=queryHelper.buildSearchQuery(alienDAO.getIndexForType(Deployment.class)).types(Deployment.class).filters(MapUtil.newHashMap(new String[]{""String_Node_Str"",""String_Node_Str""},new String[][]{new String[]{orchestrator.getId()},new String[]{null}})).fieldSort(""String_Node_Str"",true);
    GetMultipleDataResult<Object> result=alienDAO.search(searchQueryHelperBuilder,0,1);
    if (result.getData().length > 0) {
      return false;
    }
  }
  try {
    IOrchestratorPlugin orchestratorInstance=(IOrchestratorPlugin)orchestratorPluginService.unregister(orchestrator.getId());
    if (orchestratorInstance != null) {
      IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(orchestrator);
      orchestratorFactory.destroy(orchestratorInstance);
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
  return true;
}","/** 
 * Disable an orchestrator.
 * @param orchestrator The orchestrator to disable.
 * @param force If true the orchestrator is disabled even if some deployments are currently running.
 */
public synchronized boolean disable(Orchestrator orchestrator,boolean force){
  if (!force) {
    QueryHelper.SearchQueryHelperBuilder searchQueryHelperBuilder=queryHelper.buildSearchQuery(alienDAO.getIndexForType(Deployment.class)).types(Deployment.class).filters(MapUtil.newHashMap(new String[]{""String_Node_Str"",""String_Node_Str""},new String[][]{new String[]{orchestrator.getId()},new String[]{null}})).fieldSort(""String_Node_Str"",true);
    GetMultipleDataResult<Object> result=alienDAO.search(searchQueryHelperBuilder,0,1);
    if (result.getData().length > 0) {
      return false;
    }
  }
  try {
    IOrchestratorPlugin orchestratorInstance=(IOrchestratorPlugin)orchestratorPluginService.unregister(orchestrator.getId());
    if (orchestratorInstance != null) {
      IOrchestratorPluginFactory orchestratorFactory=orchestratorService.getPluginFactory(orchestrator);
      orchestratorFactory.destroy(orchestratorInstance);
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
  return true;
}"
62409,"@Override public void run(){
  try {
    load(orchestrator);
  }
 catch (  AlreadyExistException e) {
    log.info(""String_Node_Str"",orchestrator.getId());
  }
catch (  Throwable t) {
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
}","@Override public void run(){
  try {
    load(orchestrator);
  }
 catch (  AlreadyExistException e) {
    log.info(""String_Node_Str"",orchestrator.getId());
  }
catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
    orchestrator.setState(OrchestratorState.DISABLED);
    alienDAO.save(orchestrator);
  }
}"
62410,"/** 
 * Initialize all orchestrator that have a non-disabled state. Note: Each orchestrator initialization is down in it's own thread so it doesn't impact application startup or other orchestrator connection.
 * @return a list of futures for those who want to wait for task to be done.
 */
public List<Future<?>> initialize(){
  ExecutorService executorService=Executors.newCachedThreadPool();
  List<Future<?>> futures=new ArrayList<Future<?>>();
  List<Orchestrator> enabledOrchestrators=orchestratorService.getAllEnabledOrchestrators();
  if (enabledOrchestrators == null) {
    return futures;
  }
  for (  final Orchestrator orchestrator : enabledOrchestrators) {
    Future<?> future=executorService.submit(new Runnable(){
      @Override public void run(){
        try {
          load(orchestrator);
        }
 catch (        AlreadyExistException e) {
          log.info(""String_Node_Str"",orchestrator.getId());
        }
catch (        Throwable t) {
          orchestrator.setState(OrchestratorState.DISABLED);
          alienDAO.save(orchestrator);
        }
      }
    }
);
    futures.add(future);
  }
  return futures;
}","/** 
 * Initialize all orchestrator that have a non-disabled state. Note: Each orchestrator initialization is down in it's own thread so it doesn't impact application startup or other orchestrator connection.
 * @return a list of futures for those who want to wait for task to be done.
 */
public List<Future<?>> initialize(){
  ExecutorService executorService=Executors.newCachedThreadPool();
  List<Future<?>> futures=new ArrayList<Future<?>>();
  List<Orchestrator> enabledOrchestrators=orchestratorService.getAllEnabledOrchestrators();
  if (enabledOrchestrators == null) {
    return futures;
  }
  for (  final Orchestrator orchestrator : enabledOrchestrators) {
    Future<?> future=executorService.submit(new Runnable(){
      @Override public void run(){
        try {
          load(orchestrator);
        }
 catch (        AlreadyExistException e) {
          log.info(""String_Node_Str"",orchestrator.getId());
        }
catch (        Throwable t) {
          log.error(""String_Node_Str"",t);
          orchestrator.setState(OrchestratorState.DISABLED);
          alienDAO.save(orchestrator);
        }
      }
    }
);
    futures.add(future);
  }
  return futures;
}"
62411,"@Override public ImplementationArtifact parse(Node node,ParsingContextExecution context){
  if (node instanceof ScalarNode) {
    String artifactReference=((ScalarNode)node).getValue();
    Path artifactPath=Paths.get(artifactReference);
    String extension=Files.getFileExtension(artifactPath.getFileName().toString());
    String type=null;
    if (extension != null) {
      ArchiveRoot archiveRoot=(ArchiveRoot)context.getRoot().getWrappedInstance();
      IndexedArtifactType indexedType=getFromArchiveRoot(archiveRoot,extension);
      if (indexedType == null) {
        GetMultipleDataResult<IndexedArtifactType> artifactType=alienDao.find(IndexedArtifactType.class,MapUtil.newHashMap(new String[]{""String_Node_Str""},new String[][]{new String[]{extension}}),1);
        if (artifactType != null && artifactType.getData() != null && artifactType.getData().length > 0) {
          Set<CSARDependency> archiveDependencies=archiveRoot.getArchive().getDependencies();
          for (          IndexedArtifactType foundType : artifactType.getData()) {
            if (archiveDependencies.contains(new CSARDependency(foundType.getArchiveName(),foundType.getArchiveVersion()))) {
              type=foundType.getElementId();
              break;
            }
          }
        }
        if (type == null) {
          context.getParsingErrors().add(new ParsingError(ErrorCode.UNKNOWN_IMPLEMENTATION_ARTIFACT,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),extension));
          type=""String_Node_Str"";
        }
      }
 else {
        type=indexedType.getElementId();
      }
    }
    ImplementationArtifact artifact=new ImplementationArtifact();
    artifact.setArtifactRef(artifactReference);
    artifact.setArtifactType(type);
    return artifact;
  }
 else {
    ParserUtils.addTypeError(node,context.getParsingErrors(),""String_Node_Str"");
  }
  return null;
}","@Override public ImplementationArtifact parse(Node node,ParsingContextExecution context){
  if (node instanceof ScalarNode) {
    String artifactReference=((ScalarNode)node).getValue();
    Path artifactPath=Paths.get(artifactReference);
    String extension=Files.getFileExtension(artifactPath.getFileName().toString());
    String type=null;
    ArchiveRoot archiveRoot=(ArchiveRoot)context.getRoot().getWrappedInstance();
    IndexedArtifactType indexedType=getFromArchiveRoot(archiveRoot,extension);
    if (indexedType == null) {
      IndexedArtifactType artifactType=repositorySearchService.getElementInDependencies(IndexedArtifactType.class,QueryBuilders.termQuery(""String_Node_Str"",extension),archiveRoot.getArchive().getDependencies());
      if (artifactType != null) {
        type=artifactType.getElementId();
      }
      if (type == null) {
        context.getParsingErrors().add(new ParsingError(ErrorCode.UNKNOWN_IMPLEMENTATION_ARTIFACT,""String_Node_Str"",node.getStartMark(),""String_Node_Str"",node.getEndMark(),extension));
        type=""String_Node_Str"";
      }
    }
 else {
      type=indexedType.getElementId();
    }
    ImplementationArtifact artifact=new ImplementationArtifact();
    artifact.setArtifactRef(artifactReference);
    artifact.setArtifactType(type);
    return artifact;
  }
 else {
    ParserUtils.addTypeError(node,context.getParsingErrors(),""String_Node_Str"");
  }
  return null;
}"
62412,"@Override public Path getCSAR(String name,String version) throws CSARVersionNotFoundException {
  String realName=name.concat(""String_Node_Str"").concat(version).concat(""String_Node_Str"" + CSAR_EXTENSION);
  Path path=rootPath.resolve(name).resolve(version).resolve(realName);
  if (Files.exists(path)) {
    return path;
  }
  throw new CSARVersionNotFoundException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str"");
}","@Override public Path getCSAR(String name,String version) throws CSARVersionNotFoundException {
  Path csarDir=rootPath.resolve(name).resolve(version);
  Path expandedPath=csarDir.resolve(""String_Node_Str"");
  Path zippedPath=csarDir.resolve(name.concat(""String_Node_Str"").concat(version).concat(""String_Node_Str"" + CSAR_EXTENSION));
  if (Files.exists(zippedPath)) {
    return zippedPath;
  }
 else   if (Files.exists(expandedPath)) {
    try {
      FileUtil.zip(expandedPath,zippedPath);
      return zippedPath;
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + expandedPath,e);
      throw new CSARVersionNotFoundException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str"");
    }
  }
  throw new CSARVersionNotFoundException(""String_Node_Str"" + name + ""String_Node_Str""+ version+ ""String_Node_Str"");
}"
62413,"/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param nodeType The type of the node template to match.
 * @param candidateType The type of the candidate node.
 * @param candidate The candidate location resource.
 * @param capabilityTypes Map of capability types that may be used by the candidateType.
 * @return True if the candidate is a valid match for the node template.
 */
private boolean isValidCandidate(NodeTemplate nodeTemplate,IndexedNodeType nodeType,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes,Map<String,MatchingConfiguration> matchingConfigurations){
  if (!isCandidateTypeValid(nodeTemplate,candidate,candidateType)) {
    return false;
  }
  MatchingConfiguration matchingConfiguration=matchingConfigurations.get(nodeType.getElementId());
  if (matchingConfiguration == null) {
    return true;
  }
  return isTemplatePropertiesMatchCandidateFilters(nodeTemplate,matchingConfiguration,candidate,candidateType,capabilityTypes);
}","/** 
 * Checks if the type of a LocationResourceTemplate is matching the expected type.
 * @param nodeTemplate The node template to match.
 * @param nodeType The type of the node template to match.
 * @param candidateType The type of the candidate node.
 * @param candidate The candidate location resource.
 * @param capabilityTypes Map of capability types that may be used by the candidateType.
 * @return True if the candidate is a valid match for the node template.
 */
private boolean isValidCandidate(NodeTemplate nodeTemplate,IndexedNodeType nodeType,LocationResourceTemplate candidate,IndexedNodeType candidateType,Map<String,IndexedCapabilityType> capabilityTypes,Map<String,MatchingConfiguration> matchingConfigurations){
  if (!isCandidateTypeValid(nodeTemplate,candidate,candidateType)) {
    return false;
  }
  MatchingConfiguration matchingConfiguration=matchingConfigurations.get(candidateType.getElementId());
  if (matchingConfiguration == null) {
    return true;
  }
  return isTemplatePropertiesMatchCandidateFilters(nodeTemplate,matchingConfiguration,candidate,candidateType,capabilityTypes);
}"
62414,"@Override public Map<String,String> entries(){
  return new ImmutableMap.Builder<String,String>().putAll(new Protocol.SMTP(this.host,this.port).entries()).put(""String_Node_Str"",Boolean.TRUE.toString()).put(""String_Node_Str"",SSLSocketFactory.class.getName()).put(""String_Node_Str"",Integer.toString(this.port)).put(""String_Node_Str"",""String_Node_Str"").build();
}","@Override public Map<String,String> entries(){
  return new ImmutableMap.Builder<String,String>().put(""String_Node_Str"",Boolean.TRUE.toString()).put(""String_Node_Str"",this.host).put(""String_Node_Str"",Integer.toString(this.port)).put(""String_Node_Str"",Boolean.TRUE.toString()).put(""String_Node_Str"",SSLSocketFactory.class.getName()).put(""String_Node_Str"",Integer.toString(this.port)).put(""String_Node_Str"",""String_Node_Str"").build();
}"
62415,"/** 
 * SMTPS postman can send email through SMTPS wire.
 * @throws Exception If fails
 */
@Test public void sendsEmailToThroughSmtps() throws Exception {
  final String bind=""String_Node_Str"";
  final int received=3;
  final int port=SMTPSTest.port();
  Security.setProperty(""String_Node_Str"",DummySSLSocketFactory.class.getName());
  final GreenMail server=new GreenMail(ServerSetup.SMTPS);
  server.start();
  try {
    new Postman.Default(new SMTPS(new Token(""String_Node_Str"",""String_Node_Str"").access(new Protocol.SMTPS(bind,port)))).send(new Envelope.Safe(new Envelope.MIME().with(new StSender(""String_Node_Str"")).with(new StRecipient(""String_Node_Str"",""String_Node_Str"")).with(new StCC(new InternetAddress(""String_Node_Str""))).with(new StBCC(""String_Node_Str"")).with(new StSubject(""String_Node_Str"")).with(new EnPlain(""String_Node_Str"")).with(new EnHTML(""String_Node_Str""))));
    final MimeMessage[] messages=server.getReceivedMessages();
    MatcherAssert.assertThat(messages.length,Matchers.is(received));
    for (    final Message msg : messages) {
      MatcherAssert.assertThat(msg.getFrom()[0].toString(),Matchers.containsString(""String_Node_Str""));
      MatcherAssert.assertThat(msg.getSubject(),Matchers.containsString(""String_Node_Str""));
    }
  }
  finally {
    server.stop();
  }
}","/** 
 * SMTPS postman can send email through SMTPS wire.
 * @throws Exception If fails
 */
@Test public void sendsEmailToThroughSmtps() throws Exception {
  final String bind=""String_Node_Str"";
  final int received=3;
  final int port=SMTPSTest.port();
  Security.setProperty(""String_Node_Str"",DummySSLSocketFactory.class.getName());
  final GreenMail server=new GreenMail(new ServerSetup(port,bind,ServerSetup.PROTOCOL_SMTPS));
  server.start();
  try {
    new Postman.Default(new SMTPS(new Token(""String_Node_Str"",""String_Node_Str"").access(new Protocol.SMTPS(bind,port)))).send(new Envelope.Safe(new Envelope.MIME().with(new StSender(""String_Node_Str"")).with(new StRecipient(""String_Node_Str"",""String_Node_Str"")).with(new StCC(new InternetAddress(""String_Node_Str""))).with(new StBCC(""String_Node_Str"")).with(new StSubject(""String_Node_Str"")).with(new EnPlain(""String_Node_Str"")).with(new EnHTML(""String_Node_Str""))));
    final MimeMessage[] messages=server.getReceivedMessages();
    MatcherAssert.assertThat(messages.length,Matchers.is(received));
    for (    final Message msg : messages) {
      MatcherAssert.assertThat(msg.getFrom()[0].toString(),Matchers.containsString(""String_Node_Str""));
      MatcherAssert.assertThat(msg.getSubject(),Matchers.containsString(""String_Node_Str""));
    }
  }
  finally {
    server.stop();
  }
}"
62416,"/** 
 * Test for issue #8 (unicode/UTF-8 is broken).
 * @throws Exception Thrown in case of problem of writing a message tostring.
 */
@Test public void handlesUnicodeCorrectly() throws Exception {
  final Envelope.MIME env=new Envelope.MIME().with(new StSender(""String_Node_Str"")).with(new StRecipient(""String_Node_Str"",""String_Node_Str"")).with(new StSubject(""String_Node_Str"")).with(new EnHTML(""String_Node_Str""));
  final ByteArrayOutputStream stream=new ByteArrayOutputStream();
  env.unwrap().writeTo(stream);
  final String msgtxt=stream.toString();
  Assert.assertTrue(msgtxt.contains(""String_Node_Str""));
  Assert.assertTrue(msgtxt.contains(""String_Node_Str""));
  Assert.assertTrue(msgtxt.contains(Joiner.on(""String_Node_Str"").join(""String_Node_Str"",""String_Node_Str"")));
}","/** 
 * Test for issue #8 (unicode/UTF-8 is broken).
 * @throws Exception Thrown in case of problem of writing a message tostring.
 */
@Test public void handlesUnicodeCorrectly() throws Exception {
  final Envelope env=new Envelope.MIME().with(new StSender(""String_Node_Str"")).with(new StRecipient(""String_Node_Str"",""String_Node_Str"")).with(new StSubject(""String_Node_Str"")).with(new EnHTML(""String_Node_Str""));
  final ByteArrayOutputStream stream=new ByteArrayOutputStream();
  env.unwrap().writeTo(stream);
  final String msgtxt=stream.toString();
  Assert.assertTrue(msgtxt.contains(""String_Node_Str""));
  Assert.assertTrue(msgtxt.contains(""String_Node_Str""));
  Assert.assertTrue(msgtxt.contains(Joiner.on(""String_Node_Str"").join(""String_Node_Str"",""String_Node_Str"")));
}"
62417,"@Override public MimeBodyPart part() throws MessagingException {
  final MimeBodyPart mime=new MimeBodyPart();
  mime.setContent(this.text,""String_Node_Str"");
  mime.addHeader(""String_Node_Str"",""String_Node_Str"");
  return mime;
}","@Override public MimeBodyPart part() throws MessagingException {
  final MimeBodyPart mime=new MimeBodyPart();
  final String ctype=""String_Node_Str"";
  mime.setContent(this.text,ctype);
  mime.addHeader(""String_Node_Str"",ctype);
  return mime;
}"
62418,"@Override protected void onOK(){
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      Path backupCopy=null;
      Exception thrown=null;
      try {
        backupCopy=ToolAdapterIO.backupOperator(oldOperatorDescriptor);
        if (newOperatorDescriptor.getSourceProductCount() == 0) {
          Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
        }
        if (!newOperatorDescriptor.isFromPackage()) {
          newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
        }
        FileTemplate template=new FileTemplate(TemplateEngine.createInstance(newOperatorDescriptor,TemplateType.VELOCITY),newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
        template.setContents(templateContent,true);
        newOperatorDescriptor.setTemplate(template);
        java.util.List<ToolParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
        toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
          Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
          if (param.isParameter()) {
            String defaultValueString;
            if (propertyValue.getClass().isArray()) {
              defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.stream((Object[])propertyValue).map(Object::toString).collect(Collectors.toList()));
            }
 else {
              defaultValueString=propertyValue.toString();
            }
            param.setDefaultValue(defaultValueString);
          }
        }
);
        java.util.List<ToolParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
        newOperatorDescriptor.removeParamDescriptors(remParameters);
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        newOperatorDescriptor.setBundles(bundleForm.applyChanges());
        AdapterWatcher.INSTANCE.suspend();
        if (currentOperation != OperationType.NEW) {
          ToolAdapterActionRegistrar.removeOperatorMenu(oldOperatorDescriptor);
        }
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor);
        oldOperatorDescriptor=newOperatorDescriptor;
        AdapterWatcher.INSTANCE.resume();
        ToolAdapterIO.deleteFolder(backupCopy);
        super.setButtonID(ID_OK);
        super.hide();
      }
 catch (      TemplateException tex) {
        logger.warning(tex.getMessage());
        Dialogs.showError(""String_Node_Str"" + tex.toString() + ""String_Node_Str"");
        thrown=tex;
      }
catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(""String_Node_Str"" + e.toString());
        thrown=e;
      }
 finally {
        if (thrown != null) {
          if (backupCopy != null) {
            try {
              ToolAdapterIO.restoreOperator(oldOperatorDescriptor,backupCopy);
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
              Dialogs.showError(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
          }
        }
      }
    }
  }
}","@Override protected void onOK(){
  newOperatorDescriptor.setBundles(bundleForm.applyChanges());
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      Path backupCopy=null;
      Exception thrown=null;
      try {
        backupCopy=ToolAdapterIO.backupOperator(oldOperatorDescriptor);
        if (newOperatorDescriptor.getSourceProductCount() == 0) {
          Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
        }
        if (!newOperatorDescriptor.isFromPackage()) {
          newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
        }
        FileTemplate template=new FileTemplate(TemplateEngine.createInstance(newOperatorDescriptor,TemplateType.VELOCITY),newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
        template.setContents(templateContent,true);
        newOperatorDescriptor.setTemplate(template);
        java.util.List<ToolParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
        toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
          Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
          if (param.isParameter()) {
            String defaultValueString;
            if (propertyValue.getClass().isArray()) {
              defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.stream((Object[])propertyValue).map(Object::toString).collect(Collectors.toList()));
            }
 else {
              defaultValueString=propertyValue.toString();
            }
            param.setDefaultValue(defaultValueString);
          }
        }
);
        java.util.List<ToolParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
        newOperatorDescriptor.removeParamDescriptors(remParameters);
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        AdapterWatcher.INSTANCE.suspend();
        if (currentOperation != OperationType.NEW) {
          ToolAdapterActionRegistrar.removeOperatorMenu(oldOperatorDescriptor);
        }
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor);
        oldOperatorDescriptor=newOperatorDescriptor;
        AdapterWatcher.INSTANCE.resume();
        ToolAdapterIO.deleteFolder(backupCopy);
        super.setButtonID(ID_OK);
        super.hide();
      }
 catch (      TemplateException tex) {
        logger.warning(tex.getMessage());
        Dialogs.showError(""String_Node_Str"" + tex.toString() + ""String_Node_Str"");
        thrown=tex;
      }
catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(""String_Node_Str"" + e.toString());
        thrown=e;
      }
 finally {
        if (thrown != null) {
          if (backupCopy != null) {
            try {
              ToolAdapterIO.restoreOperator(oldOperatorDescriptor,backupCopy);
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
              Dialogs.showError(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
          }
        }
      }
    }
  }
}"
62419,"@Override public void initParameters(){
  String newClassifierName=(String)paramMap.get(""String_Node_Str"");
  if (DialogUtils.contains(classifierNameComboBox,newClassifierName)) {
    classifierNameComboBox.setSelectedItem(newClassifierName);
  }
  String numSamples=String.valueOf(paramMap.get(""String_Node_Str""));
  numTrainSamples.setText(numSamples);
  Boolean eval=(Boolean)(paramMap.get(""String_Node_Str""));
  if (eval != null) {
    evaluateClassifier.setSelected(eval);
  }
  Boolean evalPS=(Boolean)(paramMap.get(""String_Node_Str""));
  if (evalPS != null) {
    evaluateFeaturePowerSet.setSelected(evalPS);
  }
  Integer minPS=(Integer)(paramMap.get(""String_Node_Str""));
  if (minPS != null) {
    minPowerSetSize.setText(String.valueOf(minPS));
  }
  Integer maxPS=(Integer)(paramMap.get(""String_Node_Str""));
  if (maxPS != null) {
    maxPowerSetSize.setText(String.valueOf(maxPS));
  }
  Boolean doQuant=(Boolean)(paramMap.get(""String_Node_Str""));
  if (doQuant != null) {
    doClassValQuantization.setSelected(doQuant);
  }
  minClassValue.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  classValStepSize.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  classLevels.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  final Double minVal=(Double)paramMap.get(""String_Node_Str"");
  final Double stepSize=(Double)paramMap.get(""String_Node_Str"");
  final Integer levels=(Integer)paramMap.get(""String_Node_Str"");
  if (minVal != null && stepSize != null && levels != null) {
    final double maxClassVal=BaseClassifier.getMaxValue(minVal,stepSize,levels);
    maxClassValue.setText(String.valueOf(maxClassVal));
  }
  Boolean trainOnRastersVal=(Boolean)paramMap.get(""String_Node_Str"");
  boolean trainOnRasters=trainOnRastersVal != null && trainOnRastersVal;
  trainOnRasterBtn.setSelected(trainOnRasters);
  String labelSource=(String)paramMap.get(""String_Node_Str"");
  if (labelSource == null || labelSource.equals(BaseClassifier.VectorNodeNameLabelSource)) {
    labelSourceVectorName.setSelected(true);
  }
  boolean doTraining=true;
  enableTraining(doTraining);
  enableTrainOnRaster(doTraining,trainOnRasters);
  enablePowerSet();
  paramMap.put(""String_Node_Str"",null);
  OperatorUIUtils.initParamList(featureBandNames,getFeatures());
}","@Override public void initParameters(){
  String newClassifierName=(String)paramMap.get(""String_Node_Str"");
  if (DialogUtils.contains(classifierNameComboBox,newClassifierName)) {
    classifierNameComboBox.setSelectedItem(newClassifierName);
  }
  String numSamples=String.valueOf(paramMap.get(""String_Node_Str""));
  numTrainSamples.setText(numSamples);
  Boolean eval=(Boolean)(paramMap.get(""String_Node_Str""));
  if (eval != null) {
    evaluateClassifier.setSelected(eval);
  }
  Boolean evalPS=(Boolean)(paramMap.get(""String_Node_Str""));
  if (evalPS != null) {
    evaluateFeaturePowerSet.setSelected(evalPS);
  }
  Integer minPS=(Integer)(paramMap.get(""String_Node_Str""));
  if (minPS != null) {
    minPowerSetSize.setText(String.valueOf(minPS));
  }
  Integer maxPS=(Integer)(paramMap.get(""String_Node_Str""));
  if (maxPS != null) {
    maxPowerSetSize.setText(String.valueOf(maxPS));
  }
  Boolean doQuant=(Boolean)(paramMap.get(""String_Node_Str""));
  if (doQuant != null) {
    doClassValQuantization.setSelected(doQuant);
  }
  minClassValue.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  classValStepSize.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  classLevels.setText(String.valueOf(paramMap.get(""String_Node_Str"")));
  final Double minVal=(Double)paramMap.get(""String_Node_Str"");
  final Double stepSize=(Double)paramMap.get(""String_Node_Str"");
  final Integer levels=(Integer)paramMap.get(""String_Node_Str"");
  if (minVal != null && stepSize != null && levels != null) {
    final double maxClassVal=BaseClassifier.getMaxValue(minVal,stepSize,levels);
    maxClassValue.setText(String.valueOf(maxClassVal));
  }
  Boolean trainOnRastersVal=(Boolean)paramMap.get(""String_Node_Str"");
  boolean trainOnRasters=trainOnRastersVal != null && trainOnRastersVal;
  trainOnRasterBtn.setSelected(trainOnRasters);
  String labelSource=(String)paramMap.get(""String_Node_Str"");
  if (labelSource == null || labelSource.equals(BaseClassifier.VectorNodeNameLabelSource)) {
    labelSourceVectorName.setSelected(true);
  }
  Boolean doLoadClassifierVal=(Boolean)paramMap.get(""String_Node_Str"");
  boolean doTraining=doLoadClassifierVal != null && !doLoadClassifierVal;
  enableTraining(doTraining);
  enableTrainOnRaster(doTraining,trainOnRasters);
  enablePowerSet();
  paramMap.put(""String_Node_Str"",null);
  OperatorUIUtils.initParamList(featureBandNames,getFeatures());
}"
62420,"private void createPanel(){
  final JPanel textPanel=createTextPanel(""String_Node_Str"",getInstructions());
  this.add(textPanel,BorderLayout.NORTH);
  productSetPanel=new ProductSetPanel(SnapApp.getDefault().getAppContext(),null,new FileTable(),false,true);
  this.add(productSetPanel,BorderLayout.CENTER);
}","private void createPanel(){
  final JPanel textPanel=createTextPanel(""String_Node_Str"",getInstructions());
  this.add(textPanel,BorderLayout.NORTH);
  productSetPanel=new ProductSetPanel(SnapApp.getDefault().getAppContext(),null,new FileTable(),true,true);
  this.add(productSetPanel,BorderLayout.CENTER);
}"
62421,"/** 
 * Performs any validation on the user input.
 * @return  <code>true</code> if the input is valid, <code>false</code> otherwise
 */
private boolean validateUserInput(){
  boolean isValid=true;
  if (!operatorDescriptor.isHandlingOutputName()) {
    File productDir=null;
    Object value=form.getPropertyValue(ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE);
    if (value != null && value instanceof File) {
      productDir=((File)value).getParentFile();
      appContext.getPreferences().setPropertyString(SaveProductAsAction.PREFERENCES_KEY_LAST_PRODUCT_DIR,((File)value).getAbsolutePath());
    }
    isValid=(productDir != null) && productDir.exists();
    if (!isValid) {
      warnings.add(""String_Node_Str"");
    }
  }
  List<ToolParameterDescriptor> mandatoryParams=operatorDescriptor.getToolParameterDescriptors().stream().filter(d -> d.isNotEmpty() || d.isNotNull()).collect(Collectors.toList());
  Map<String,Object> parameterMap=parameterSupport.getParameterMap();
  for (  ToolParameterDescriptor mandatoryParam : mandatoryParams) {
    String name=mandatoryParam.getName();
    if (!parameterMap.containsKey(name) || parameterMap.get(name) == null || parameterMap.get(name).toString().isEmpty()) {
      isValid=false;
      warnings.add(String.format(""String_Node_Str"",name));
    }
  }
  if (operatorDescriptor.getSourceProductCount() > 0) {
    Product[] sourceProducts=form.getSourceProducts();
    isValid&=(sourceProducts != null) && sourceProducts.length > 0 && Arrays.stream(sourceProducts).filter(sp -> sp == null).count() == 0;
    if (!isValid) {
      warnings.add(""String_Node_Str"");
    }
  }
  return isValid;
}","/** 
 * Performs any validation on the user input.
 * @return  <code>true</code> if the input is valid, <code>false</code> otherwise
 */
private boolean validateUserInput(){
  boolean isValid=true;
  if (!operatorDescriptor.isHandlingOutputName()) {
    File productDir=null;
    Object value=form.getPropertyValue(ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE);
    if (value != null && value instanceof File) {
      productDir=((File)value).getParentFile();
      appContext.getPreferences().setPropertyString(SaveProductAsAction.PREFERENCES_KEY_LAST_PRODUCT_DIR,((File)value).getAbsolutePath());
    }
    isValid=(productDir != null) && productDir.exists();
    if (!isValid) {
      warnings.add(""String_Node_Str"");
    }
  }
  List<ToolParameterDescriptor> mandatoryParams=operatorDescriptor.getToolParameterDescriptors().stream().filter(d -> d.isNotEmpty() || d.isNotNull()).collect(Collectors.toList());
  Map<String,Object> parameterMap=parameterSupport.getParameterMap();
  for (  ToolParameterDescriptor mandatoryParam : mandatoryParams) {
    String name=mandatoryParam.getName();
    if (!parameterMap.containsKey(name) || parameterMap.get(name) == null || parameterMap.get(name).toString().isEmpty()) {
      isValid=false;
      warnings.add(String.format(""String_Node_Str"",name));
    }
  }
  if (operatorDescriptor.getSourceProductCount() > 0) {
    Product[] sourceProducts=form.getSourceProducts();
    boolean isProdValid=(sourceProducts != null) && sourceProducts.length > 0 && Arrays.stream(sourceProducts).filter(sp -> sp == null).count() == 0;
    if (!isProdValid) {
      warnings.add(""String_Node_Str"");
    }
    isValid&=isProdValid;
  }
  return isValid;
}"
62422,"private void setUIComponentsEnabled(final boolean enable){
  removeButton.setEnabled(enable);
  updateButton.setEnabled(enable);
  repositoryListCombo.setEnabled(enable);
  searchButton.setEnabled(enable);
}","private void setUIComponentsEnabled(final boolean enable){
  removeButton.setEnabled(enable);
  updateButton.setEnabled(enable);
}"
62423,"private JPanel createHeaderPanel(){
  final JPanel headerBar=new JPanel();
  headerBar.setLayout(new GridBagLayout());
  final GridBagConstraints gbc=new GridBagConstraints();
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  updateButton=DialogUtils.createButton(""String_Node_Str"",RESCAN,updateIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  updateButton.setActionCommand(LabelBarProgressMonitor.updateCommand);
  updateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (e.getActionCommand().equals(""String_Node_Str"")) {
        updateButton.setEnabled(false);
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (progMon != null) {
          progMon.setCanceled(true);
        }
      }
 else {
        final RescanOptions dlg=new RescanOptions();
        dlg.show();
        if (dlg.IsOK()) {
          DBScanner.Options options=new DBScanner.Options(dlg.shouldDoRecusive(),dlg.shouldValidateZips(),dlg.shouldDoQuicklooks());
          rescanFolder(options);
        }
      }
    }
  }
);
  headerBar.add(updateButton,gbc);
  headerBar.add(new JLabel(""String_Node_Str""));
  gbc.weightx=99;
  repositoryListCombo=new JComboBox<>();
  repositoryListCombo.setRenderer(new ComboCellRenderer());
  repositoryListCombo.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent event){
      if (event.getStateChange() == ItemEvent.SELECTED) {
        final RepositoryInterface repo=(RepositoryInterface)repositoryListCombo.getSelectedItem();
        dbPane.setRepository(repo);
        SystemUtils.LOG.info(""String_Node_Str"" + repo.getName());
      }
    }
  }
);
  headerBar.add(repositoryListCombo,gbc);
  gbc.weightx=0;
  searchButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",searchIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  searchButton.setActionCommand(LabelBarProgressMonitor.updateCommand);
  searchButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      search();
    }
  }
);
  headerBar.add(searchButton,gbc);
  addButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",addButtonIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      addRepository();
    }
  }
);
  headerBar.add(addButton,gbc);
  removeButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",removeButtonIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      removeRepository();
    }
  }
);
  headerBar.add(removeButton,gbc);
  final JButton helpButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",helpIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  HelpCtx.setHelpIDString(helpButton,helpId);
  helpButton.addActionListener(e -> new HelpCtx(helpId).display());
  headerBar.add(helpButton,gbc);
  return headerBar;
}","private JPanel createHeaderPanel(){
  final JPanel headerBar=new JPanel();
  headerBar.setLayout(new GridBagLayout());
  final GridBagConstraints gbc=new GridBagConstraints();
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  updateButton=DialogUtils.createButton(""String_Node_Str"",RESCAN,updateIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  updateButton.setActionCommand(LabelBarProgressMonitor.updateCommand);
  updateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (e.getActionCommand().equals(""String_Node_Str"")) {
        updateButton.setEnabled(false);
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (progMon != null) {
          progMon.setCanceled(true);
        }
      }
 else {
        final RescanOptions dlg=new RescanOptions();
        dlg.show();
        if (dlg.IsOK()) {
          DBScanner.Options options=new DBScanner.Options(dlg.shouldDoRecusive(),dlg.shouldValidateZips(),dlg.shouldDoQuicklooks());
          rescanFolder(options);
        }
      }
    }
  }
);
  headerBar.add(updateButton,gbc);
  headerBar.add(new JLabel(""String_Node_Str""));
  gbc.weightx=99;
  repositoryListCombo=new JComboBox<>();
  repositoryListCombo.setRenderer(new ComboCellRenderer());
  repositoryListCombo.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent event){
      if (event.getStateChange() == ItemEvent.SELECTED) {
        final RepositoryInterface repo=(RepositoryInterface)repositoryListCombo.getSelectedItem();
        dbPane.setRepository(repo);
        SystemUtils.LOG.info(""String_Node_Str"" + repo.getName());
        searchButton.setEnabled(repo.getName().toLowerCase().contains(""String_Node_Str""));
      }
    }
  }
);
  headerBar.add(repositoryListCombo,gbc);
  gbc.weightx=0;
  searchButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",searchIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  searchButton.setActionCommand(LabelBarProgressMonitor.updateCommand);
  searchButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      search();
    }
  }
);
  headerBar.add(searchButton,gbc);
  addButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",addButtonIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      addRepository();
    }
  }
);
  headerBar.add(addButton,gbc);
  removeButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",removeButtonIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      removeRepository();
    }
  }
);
  headerBar.add(removeButton,gbc);
  final JButton helpButton=DialogUtils.createButton(""String_Node_Str"",""String_Node_Str"",helpIcon,headerBar,DialogUtils.ButtonStyle.Icon);
  HelpCtx.setHelpIDString(helpButton,helpId);
  helpButton.addActionListener(e -> new HelpCtx(helpId).display());
  headerBar.add(helpButton,gbc);
  return headerBar;
}"
62424,"public void itemStateChanged(ItemEvent event){
  if (event.getStateChange() == ItemEvent.SELECTED) {
    final RepositoryInterface repo=(RepositoryInterface)repositoryListCombo.getSelectedItem();
    dbPane.setRepository(repo);
    SystemUtils.LOG.info(""String_Node_Str"" + repo.getName());
  }
}","public void itemStateChanged(ItemEvent event){
  if (event.getStateChange() == ItemEvent.SELECTED) {
    final RepositoryInterface repo=(RepositoryInterface)repositoryListCombo.getSelectedItem();
    dbPane.setRepository(repo);
    SystemUtils.LOG.info(""String_Node_Str"" + repo.getName());
    searchButton.setEnabled(repo.getName().toLowerCase().contains(""String_Node_Str""));
  }
}"
62425,"@Override public void actionPerformed(final ActionEvent event){
  final String[] compatibleProductNames=getCompatibleProducts(product);
  if (compatibleProductNames.length == 0) {
    Dialogs.showError(""String_Node_Str"");
    return;
  }
  final StringSelectorDialog dlg=new StringSelectorDialog(""String_Node_Str"",compatibleProductNames);
  dlg.show();
  if (dlg.IsOK()) {
    try {
      final MetadataElement origAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      final int isPolsar=origAbsRoot.getAttributeInt(AbstractMetadata.polsarData,0);
      final int isCalibrated=origAbsRoot.getAttributeInt(AbstractMetadata.abs_calibration_flag,0);
      final String srcProductName=dlg.getSelectedItem();
      final Product[] products=SnapApp.getDefault().getProductManager().getProducts();
      Product srcProduct=null;
      for (      Product prod : products) {
        if (prod.getDisplayName().equals(srcProductName)) {
          srcProduct=prod;
          break;
        }
      }
      final MetadataElement srcAbsRoot=AbstractMetadata.getAbstractedMetadata(srcProduct);
      final File tmpMetadataFile=new File(SystemUtils.getCacheDir(),srcProduct.getName() + ""String_Node_Str"");
      AbstractMetadataIO.Save(srcProduct,srcAbsRoot,tmpMetadataFile);
      clearProductMetadata(product);
      SnapApp.getDefault().getProductManager().removeProduct(product);
      final MetadataElement destAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      AbstractMetadataIO.Load(product,destAbsRoot,tmpMetadataFile);
      SnapApp.getDefault().getProductManager().addProduct(product);
      ReplaceMetadataOp.resetPolarizations(AbstractMetadata.getAbstractedMetadata(product),isPolsar,isCalibrated);
      tmpMetadataFile.delete();
    }
 catch (    Exception e) {
      Dialogs.showError(""String_Node_Str"" + e.getMessage());
    }
  }
}","@Override public void actionPerformed(final ActionEvent event){
  final String[] compatibleProductNames=getCompatibleProducts(product);
  if (compatibleProductNames.length == 0) {
    Dialogs.showError(""String_Node_Str"");
    return;
  }
  final StringSelectorDialog dlg=new StringSelectorDialog(""String_Node_Str"",compatibleProductNames);
  dlg.show();
  if (dlg.IsOK()) {
    try {
      final MetadataElement origAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      final int isPolsar=origAbsRoot.getAttributeInt(AbstractMetadata.polsarData,0);
      final int isCalibrated=origAbsRoot.getAttributeInt(AbstractMetadata.abs_calibration_flag,0);
      final String srcProductName=dlg.getSelectedItem();
      final Product[] products=SnapApp.getDefault().getProductManager().getProducts();
      Product srcProduct=null;
      for (      Product prod : products) {
        if (prod.getDisplayName().equals(srcProductName)) {
          srcProduct=prod;
          break;
        }
      }
      final MetadataElement srcAbsRoot=AbstractMetadata.getAbstractedMetadata(srcProduct);
      final File tmpMetadataFile=new File(SystemUtils.getCacheDir(),srcProduct.getName() + ""String_Node_Str"");
      AbstractMetadataIO.Save(srcProduct,srcAbsRoot,tmpMetadataFile);
      String origName=product.getName();
      clearProductMetadata(product);
      final MetadataElement destAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      AbstractMetadataIO.Load(product,destAbsRoot,tmpMetadataFile);
      product.setName(origName);
      ReplaceMetadataOp.resetPolarizations(AbstractMetadata.getAbstractedMetadata(product),isPolsar,isCalibrated);
      tmpMetadataFile.delete();
    }
 catch (    Exception e) {
      Dialogs.showError(""String_Node_Str"" + e.getMessage());
    }
  }
}"
62426,"@Override public void actionPerformed(final ActionEvent event){
  final String[] compatibleProductNames=getCompatibleProducts(product);
  if (compatibleProductNames.length == 0) {
    Dialogs.showError(""String_Node_Str"");
    return;
  }
  final StringSelectorDialog dlg=new StringSelectorDialog(""String_Node_Str"",compatibleProductNames);
  dlg.show();
  if (dlg.IsOK()) {
    try {
      final MetadataElement origAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      final int isPolsar=origAbsRoot.getAttributeInt(AbstractMetadata.polsarData,0);
      final int isCalibrated=origAbsRoot.getAttributeInt(AbstractMetadata.abs_calibration_flag,0);
      final String srcProductName=dlg.getSelectedItem();
      final Product[] products=SnapApp.getDefault().getProductManager().getProducts();
      Product srcProduct=null;
      for (      Product prod : products) {
        if (prod.getDisplayName().equals(srcProductName)) {
          srcProduct=prod;
          break;
        }
      }
      final MetadataElement srcAbsRoot=AbstractMetadata.getAbstractedMetadata(srcProduct);
      final File tmpMetadataFile=new File(SystemUtils.getCacheDir(),srcProduct.getName() + ""String_Node_Str"");
      AbstractMetadataIO.Save(srcProduct,srcAbsRoot,tmpMetadataFile);
      clearProductMetadata(product);
      SnapApp.getDefault().getProductManager().removeProduct(product);
      final MetadataElement destAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      AbstractMetadataIO.Load(product,destAbsRoot,tmpMetadataFile);
      SnapApp.getDefault().getProductManager().addProduct(product);
      ReplaceMetadataOp.resetPolarizations(AbstractMetadata.getAbstractedMetadata(product),isPolsar,isCalibrated);
      tmpMetadataFile.delete();
    }
 catch (    Exception e) {
      Dialogs.showError(""String_Node_Str"" + e.getMessage());
    }
  }
}","@Override public void actionPerformed(final ActionEvent event){
  final String[] compatibleProductNames=getCompatibleProducts(product);
  if (compatibleProductNames.length == 0) {
    Dialogs.showError(""String_Node_Str"");
    return;
  }
  final StringSelectorDialog dlg=new StringSelectorDialog(""String_Node_Str"",compatibleProductNames);
  dlg.show();
  if (dlg.IsOK()) {
    try {
      final MetadataElement origAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      final int isPolsar=origAbsRoot.getAttributeInt(AbstractMetadata.polsarData,0);
      final int isCalibrated=origAbsRoot.getAttributeInt(AbstractMetadata.abs_calibration_flag,0);
      final String srcProductName=dlg.getSelectedItem();
      final Product[] products=SnapApp.getDefault().getProductManager().getProducts();
      Product srcProduct=null;
      for (      Product prod : products) {
        if (prod.getDisplayName().equals(srcProductName)) {
          srcProduct=prod;
          break;
        }
      }
      final MetadataElement srcAbsRoot=AbstractMetadata.getAbstractedMetadata(srcProduct);
      final File tmpMetadataFile=new File(SystemUtils.getCacheDir(),srcProduct.getName() + ""String_Node_Str"");
      AbstractMetadataIO.Save(srcProduct,srcAbsRoot,tmpMetadataFile);
      String origName=product.getName();
      clearProductMetadata(product);
      final MetadataElement destAbsRoot=AbstractMetadata.getAbstractedMetadata(product);
      AbstractMetadataIO.Load(product,destAbsRoot,tmpMetadataFile);
      product.setName(origName);
      ReplaceMetadataOp.resetPolarizations(AbstractMetadata.getAbstractedMetadata(product),isPolsar,isCalibrated);
      tmpMetadataFile.delete();
    }
 catch (    Exception e) {
      Dialogs.showError(""String_Node_Str"" + e.getMessage());
    }
  }
}"
62427,"public TemplateParameterEditorDialog(AppContext appContext,String helpID,TemplateParameterDescriptor parameter,PropertyMemberUIWrapper fileWrapper,ToolAdapterOperatorDescriptor parent){
  this(appContext,parameter.getName(),helpID);
  this.parameter=parameter;
  this.parentDescriptor=parent;
  try {
    parameter.setTemplateEngine(parentDescriptor.getTemplateEngine());
  }
 catch (  TemplateException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  this.fakeOperatorDescriptor=new ToolAdapterOperatorDescriptor(""String_Node_Str"",ToolAdapterOp.class);
  for (  ToolParameterDescriptor param : parameter.getParameterDescriptors()) {
    this.fakeOperatorDescriptor.getToolParameterDescriptors().add(new ToolParameterDescriptor(param));
  }
  this.fileWrapper=fileWrapper;
  if (this.fileWrapper.getContext().getPropertySet().getProperty(this.parameter.getName()).getValue() == null) {
    try {
      this.fileWrapper.getContext().getPropertySet().getProperty(this.parameter.getName()).setValue(parameter.getTemplate().getTemplatePath());
    }
 catch (    ValidationException e) {
      e.printStackTrace();
      logger.warning(e.getMessage());
    }
  }
  pcListener=evt -> updateFileAreaContent();
  this.fileWrapper.getContext().addPropertyChangeListener(pcListener);
  setContent(createMainPanel());
  pcListener=evt -> updateFileAreaContent();
}","public TemplateParameterEditorDialog(AppContext appContext,TemplateParameterDescriptor parameter,ToolAdapterOperatorDescriptor parent){
  super(appContext.getApplicationWindow(),parameter.getName(),ID_OK_CANCEL,""String_Node_Str"");
  this.appContext=appContext;
  EscapeAction.register(getJDialog());
  this.fileContentArea=new AutoCompleteTextArea(""String_Node_Str"",10,10);
  this.parameter=parameter;
  this.parentDescriptor=parent;
  try {
    PropertyDescriptor propertyDescriptor=ParameterDescriptorFactory.convert(this.parameter,new ParameterDescriptorFactory().getSourceProductMap());
    DefaultPropertySetDescriptor propertySetDescriptor=new DefaultPropertySetDescriptor();
    propertySetDescriptor.addPropertyDescriptor(propertyDescriptor);
    PropertyContainer paramContainer=PropertyContainer.createMapBacked(new HashMap<>(),propertySetDescriptor);
    this.paramContext=new BindingContext(paramContainer);
  }
 catch (  ConversionException e) {
    logger.warning(e.getMessage());
  }
  try {
    parameter.setTemplateEngine(parentDescriptor.getTemplateEngine());
  }
 catch (  TemplateException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  this.fakeOperatorDescriptor=new ToolAdapterOperatorDescriptor(""String_Node_Str"",ToolAdapterOp.class);
  for (  ToolParameterDescriptor param : parameter.getParameterDescriptors()) {
    this.fakeOperatorDescriptor.getToolParameterDescriptors().add(new ToolParameterDescriptor(param));
  }
  PropertyChangeListener pcListener=evt -> updateFileAreaContent();
  this.paramContext.addPropertyChangeListener(pcListener);
  addComponents();
}"
62428,"public JPanel createParametersPanel(){
  JPanel paramsPanel=new JPanel();
  BoxLayout layout=new BoxLayout(paramsPanel,BoxLayout.PAGE_AXIS);
  paramsPanel.setLayout(layout);
  AbstractButton addParamBut=ToolButtonFactory.createButton(UIUtils.loadImageIcon(""String_Node_Str""),false);
  addParamBut.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(addParamBut);
  paramsTable=new OperatorParametersTable(this.fakeOperatorDescriptor,appContext);
  JScrollPane tableScrollPane=new JScrollPane(paramsTable);
  tableScrollPane.setPreferredSize(new Dimension(500,130));
  tableScrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(tableScrollPane);
  addParamBut.addActionListener((  ActionEvent e) -> paramsTable.addParameterToTable(new ToolParameterDescriptor(""String_Node_Str"",String.class)));
  TitledBorder title=BorderFactory.createTitledBorder(""String_Node_Str"");
  paramsPanel.setBorder(title);
  return paramsPanel;
}","private JPanel createParametersPanel(){
  JPanel paramsPanel=new JPanel();
  BoxLayout layout=new BoxLayout(paramsPanel,BoxLayout.PAGE_AXIS);
  paramsPanel.setLayout(layout);
  AbstractButton addParamBut=ToolButtonFactory.createButton(UIUtils.loadImageIcon(""String_Node_Str""),false);
  addParamBut.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(addParamBut);
  this.paramsTable=new OperatorParametersTable(this.fakeOperatorDescriptor,appContext);
  JScrollPane tableScrollPane=new JScrollPane(paramsTable);
  tableScrollPane.setPreferredSize(new Dimension(500,130));
  tableScrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(tableScrollPane);
  addParamBut.addActionListener((  ActionEvent e) -> paramsTable.addParameterToTable());
  TitledBorder title=BorderFactory.createTitledBorder(""String_Node_Str"");
  paramsPanel.setBorder(title);
  return paramsPanel;
}"
62429,"private void updateFileAreaContent(){
  String result=null;
  try {
    File file=fileWrapper.getContext().getPropertySet().getProperty(this.parameter.getName()).getValue();
    parameter.getTemplate().setFileName(file.getName());
    if (!file.isAbsolute()) {
      file=parameter.getTemplate().getTemplatePath();
    }
    if (file.exists()) {
      result=new String(Files.readAllBytes(file.toPath()));
    }
  }
 catch (  Exception e) {
    logger.warning(e.getMessage());
    showWarningDialog(""String_Node_Str"" + e.getMessage());
  }
  if (result != null) {
    fileContentArea.setText(result);
    fileContentArea.setCaretPosition(0);
  }
 else {
    fileContentArea.setText(EMPTY_FILE_CONTENT);
  }
}","private void updateFileAreaContent(){
  String result=null;
  try {
    File file=getProperty().getValue();
    this.parameter.getTemplate().setFileName(file.getName());
    if (!file.isAbsolute()) {
      file=this.parameter.getTemplate().getTemplatePath();
    }
    if (file.exists()) {
      result=new String(Files.readAllBytes(file.toPath()));
    }
  }
 catch (  Exception e) {
    logger.warning(e.getMessage());
    showWarningDialog(""String_Node_Str"" + e.getMessage());
  }
  if (result != null) {
    this.fileContentArea.setText(result);
    this.fileContentArea.setCaretPosition(0);
  }
 else {
    this.fileContentArea.setText(EMPTY_FILE_CONTENT);
  }
}"
62430,"@Override protected JPanel createParametersPanel(){
  JPanel paramsPanel=new JPanel();
  BoxLayout layout=new BoxLayout(paramsPanel,BoxLayout.PAGE_AXIS);
  paramsPanel.setLayout(layout);
  AbstractButton addParamBut=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addParamBut.setText(""String_Node_Str"");
  addParamBut.setMaximumSize(new Dimension(150,controlHeight));
  addParamBut.setAlignmentX(Component.LEFT_ALIGNMENT);
  addParamBut.setAlignmentY(Component.TOP_ALIGNMENT);
  paramsPanel.add(addParamBut);
  JScrollPane tableScrollPane=new JScrollPane(paramsTable);
  tableScrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(tableScrollPane);
  addParamBut.addActionListener(e -> {
    paramsTable.addParameterToTable(new TemplateParameterDescriptor(""String_Node_Str"",String.class));
    int rowIndex=paramsTable.getRowCount() - 1;
    paramsTable.setRowSelectionInterval(rowIndex,rowIndex);
    paramsTable.setEditingRow(rowIndex);
  }
);
  return paramsPanel;
}","@Override protected JPanel createParametersPanel(){
  JPanel paramsPanel=new JPanel();
  BoxLayout layout=new BoxLayout(paramsPanel,BoxLayout.PAGE_AXIS);
  paramsPanel.setLayout(layout);
  AbstractButton addParamBut=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addParamBut.setText(""String_Node_Str"");
  addParamBut.setMaximumSize(new Dimension(150,controlHeight));
  addParamBut.setAlignmentX(Component.LEFT_ALIGNMENT);
  addParamBut.setAlignmentY(Component.TOP_ALIGNMENT);
  paramsPanel.add(addParamBut);
  JScrollPane tableScrollPane=new JScrollPane(paramsTable);
  tableScrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  paramsPanel.add(tableScrollPane);
  addParamBut.addActionListener(e -> {
    paramsTable.addParameterToTable();
  }
);
  return paramsPanel;
}"
62431,"protected void executeOperator(Product targetProduct,ProgressHandleMonitor pm) throws Exception {
  final TargetProductSelectorModel model=getTargetProductSelector().getModel();
  Operator execOp=null;
  if (targetProduct.getProductReader() instanceof OperatorProductReader) {
    final OperatorProductReader opReader=(OperatorProductReader)targetProduct.getProductReader();
    Operator operator=opReader.getOperatorContext().getOperator();
    boolean autoWriteDisabled=operator.getSpi().getOperatorDescriptor().isAutoWriteDisabled();
    if (autoWriteDisabled) {
      execOp=operator;
    }
  }
  if (execOp == null) {
    WriteOp writeOp=new WriteOp(targetProduct,model.getProductFile(),model.getFormatName());
    writeOp.setDeleteOutputOnFailure(true);
    writeOp.setWriteEntireTileRows(true);
    writeOp.setClearCacheAfterRowWrite(false);
    execOp=writeOp;
  }
  final OperatorExecutor executor=OperatorExecutor.create(execOp);
  executor.execute(SubProgressMonitor.create(pm,95));
}","protected void executeOperator(Product targetProduct,ProgressHandleMonitor pm) throws Exception {
  final TargetProductSelectorModel model=getTargetProductSelector().getModel();
  if (model.getProductName() == null) {
    model.setProductName(targetProduct.getName());
  }
  Operator execOp=null;
  if (targetProduct.getProductReader() instanceof OperatorProductReader) {
    final OperatorProductReader opReader=(OperatorProductReader)targetProduct.getProductReader();
    Operator operator=opReader.getOperatorContext().getOperator();
    boolean autoWriteDisabled=operator.getSpi().getOperatorDescriptor().isAutoWriteDisabled();
    if (autoWriteDisabled) {
      execOp=operator;
    }
  }
  if (execOp == null) {
    WriteOp writeOp=new WriteOp(targetProduct,model.getProductFile(),model.getFormatName());
    writeOp.setDeleteOutputOnFailure(true);
    writeOp.setWriteEntireTileRows(true);
    writeOp.setClearCacheAfterRowWrite(false);
    execOp=writeOp;
  }
  final OperatorExecutor executor=OperatorExecutor.create(execOp);
  SubProgressMonitor pm2=(SubProgressMonitor)SubProgressMonitor.create(pm,95);
  if (execOp instanceof StoredGraphOp) {
    executor.execute(ProgressMonitor.NULL);
    pm2.beginTask(""String_Node_Str"",1);
    pm2.worked(1);
  }
 else {
    executor.execute(pm2);
  }
  pm2.done();
}"
62432,"private void acknowledgeChannel(){
  RasterDataNode channelSource=currentChannelSources[channel];
  final ImageInfoEditorModel3B model=models[channel];
  Continuous1BandGraphicalForm.setDisplayProperties(model,channelSource);
  imageInfoEditor.setModel(model);
  moreOptionsForm.getBindingContext().getBinding(CHANNEL_SOURCE_NAME_PROPERTY).setPropertyValue(channelSource.getName());
  moreOptionsForm.getBindingContext().getBinding(GAMMA_PROPERTY).setPropertyValue(model.getGamma());
}","private void acknowledgeChannel(){
  RasterDataNode channelSource=currentChannelSources[channel];
  final ImageInfoEditorModel3B model=models[channel];
  Continuous1BandGraphicalForm.setDisplayProperties(model,channelSource);
  imageInfoEditor.setModel(model);
  moreOptionsForm.getBindingContext().getBinding(CHANNEL_SOURCE_NAME_PROPERTY).setPropertyValue(channelSource.getName());
  moreOptionsForm.getBindingContext().getBinding(GAMMA_PROPERTY).setPropertyValue(gamma);
}"
62433,"private void createContextForValueEditor() throws Exception {
  PropertyDescriptor property=ParameterDescriptorFactory.convert(this.parameter,new ParameterDescriptorFactory().getSourceProductMap());
  DefaultPropertySetDescriptor propertySetDescriptor=new DefaultPropertySetDescriptor();
  try {
    property.setDefaultValue(this.parameter.getDefaultValue());
  }
 catch (  Exception ex) {
    logger.warning(ex.getMessage());
  }
  propertySetDescriptor.addPropertyDescriptor(property);
  PropertyContainer container=PropertyContainer.createMapBacked(new HashMap<>(),propertySetDescriptor);
  container.getProperty(property.getName()).setValue(this.parameter.getDefaultValue());
  paramContext=new BindingContext(container);
  this.uiWrapper=PropertyMemberUIWrapperFactory.buildPropertyWrapper(""String_Node_Str"",this.parameter,null,paramContext,null);
  this.editorComponent=this.uiWrapper.getUIComponent();
}","private void createContextForValueEditor() throws Exception {
  PropertyDescriptor property=ParameterDescriptorFactory.convert(this.parameter,new ParameterDescriptorFactory().getSourceProductMap());
  DefaultPropertySetDescriptor propertySetDescriptor=new DefaultPropertySetDescriptor();
  try {
    property.setDefaultValue(this.parameter.getDefaultValue());
  }
 catch (  Exception ex) {
    logger.warning(ex.getMessage());
  }
  propertySetDescriptor.addPropertyDescriptor(property);
  PropertyContainer container=PropertyContainer.createMapBacked(new HashMap<>(),propertySetDescriptor);
  container.getProperty(property.getName()).setValueFromText(this.parameter.getDefaultValue());
  paramContext=new BindingContext(container);
  this.uiWrapper=PropertyMemberUIWrapperFactory.buildPropertyWrapper(""String_Node_Str"",this.parameter,null,paramContext,null);
  this.editorComponent=this.uiWrapper.getUIComponent();
}"
62434,"@Override protected boolean verifyUserInput(){
  if (shouldValidate()) {
    File file=newOperatorDescriptor.getMainToolFileLocation();
    if (file == null) {
      Object value=bindingContext.getBinding(ToolAdapterConstants.MAIN_TOOL_FILE_LOCATION).getPropertyValue();
      if (value != null) {
        file=value instanceof File ? (File)value : new File(value.toString());
      }
    }
    if (file == null) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_Tool_Path_Text());
      return false;
    }
    Path toolLocation=newOperatorDescriptor.resolveVariables(newOperatorDescriptor.getMainToolFileLocation()).toPath();
    if (!(Files.exists(toolLocation) && Files.isExecutable(toolLocation))) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_Tool_Path_Text());
      return false;
    }
    File workingDir=newOperatorDescriptor.resolveVariables(newOperatorDescriptor.getWorkingDir());
    if (!(workingDir != null && workingDir.exists() && workingDir.isDirectory())) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_WorkDir_Text());
      return false;
    }
  }
  java.util.List<SystemVariable> variables=newOperatorDescriptor.getVariables();
  if (variables != null) {
    for (    SystemVariable variable : variables) {
      String value=variable.getValue();
      if (value == null || value.isEmpty()) {
        Dialogs.showWarning(String.format(Bundle.MSG_Empty_Variable_Text(),variable.getKey()));
        return false;
      }
    }
  }
  if (shouldValidate()) {
    ParameterDescriptor[] parameterDescriptors=newOperatorDescriptor.getParameterDescriptors();
    if (parameterDescriptors != null && parameterDescriptors.length > 0) {
      for (      ParameterDescriptor parameterDescriptor : parameterDescriptors) {
        Class<?> dataType=parameterDescriptor.getDataType();
        String defaultValue=parameterDescriptor.getDefaultValue();
        if (File.class.isAssignableFrom(dataType) && (parameterDescriptor.isNotNull() || parameterDescriptor.isNotEmpty()) && (defaultValue == null || defaultValue.isEmpty() || !Files.exists(Paths.get(defaultValue)))) {
          Dialogs.showWarning(String.format(Bundle.MSG_Inexistem_Parameter_Value_Text(),parameterDescriptor.getName(),parameterDescriptor.isNotNull() ? ToolAdapterConstants.NOT_NULL : ToolAdapterConstants.NOT_EMPTY));
          return false;
        }
      }
    }
  }
  return true;
}","@Override protected boolean verifyUserInput(){
  varTable.stopVariablesTableEditing();
  paramsTable.stopVariablesTableEditing();
  if (shouldValidate()) {
    File file=newOperatorDescriptor.getMainToolFileLocation();
    if (file == null) {
      Object value=bindingContext.getBinding(ToolAdapterConstants.MAIN_TOOL_FILE_LOCATION).getPropertyValue();
      if (value != null) {
        file=value instanceof File ? (File)value : new File(value.toString());
      }
    }
    if (file == null) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_Tool_Path_Text());
      return false;
    }
    Path toolLocation=newOperatorDescriptor.resolveVariables(newOperatorDescriptor.getMainToolFileLocation()).toPath();
    if (!(Files.exists(toolLocation) && Files.isExecutable(toolLocation))) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_Tool_Path_Text());
      return false;
    }
    File workingDir=newOperatorDescriptor.resolveVariables(newOperatorDescriptor.getWorkingDir());
    if (!(workingDir != null && workingDir.exists() && workingDir.isDirectory())) {
      Dialogs.showWarning(Bundle.MSG_Inexistent_WorkDir_Text());
      return false;
    }
  }
  java.util.List<SystemVariable> variables=newOperatorDescriptor.getVariables();
  if (variables != null) {
    for (    SystemVariable variable : variables) {
      String key=variable.getKey();
      if (key == null || key.isEmpty()) {
        Dialogs.showWarning(String.format(Bundle.MSG_Empty_Variable_Key_Text()));
        return false;
      }
      String value=variable.getValue();
      if (value == null || value.isEmpty()) {
        Dialogs.showWarning(String.format(Bundle.MSG_Empty_Variable_Text(),key));
        return false;
      }
    }
  }
  if (shouldValidate()) {
    ParameterDescriptor[] parameterDescriptors=newOperatorDescriptor.getParameterDescriptors();
    if (parameterDescriptors != null && parameterDescriptors.length > 0) {
      for (      ParameterDescriptor parameterDescriptor : parameterDescriptors) {
        Class<?> dataType=parameterDescriptor.getDataType();
        String defaultValue=parameterDescriptor.getDefaultValue();
        if (File.class.isAssignableFrom(dataType) && (parameterDescriptor.isNotNull() || parameterDescriptor.isNotEmpty()) && (defaultValue == null || defaultValue.isEmpty() || !Files.exists(Paths.get(defaultValue)))) {
          Dialogs.showWarning(String.format(Bundle.MSG_Inexistem_Parameter_Value_Text(),parameterDescriptor.getName(),parameterDescriptor.isNotNull() ? ToolAdapterConstants.NOT_NULL : ToolAdapterConstants.NOT_EMPTY));
          return false;
        }
      }
    }
  }
  return true;
}"
62435,"public SystemDependentVariableEditorDialog(Window parent,SystemDependentVariable variable,String helpID){
  super(parent,String.format(""String_Node_Str"",variable.getKey()),ID_OK_CANCEL,helpID);
  oldVariable=variable;
  newVariable=(SystemDependentVariable)oldVariable.createCopy();
  newVariable.setTransient(true);
  logger=Logger.getLogger(ToolAdapterEditorDialog.class.getName());
  setContent(createPanel());
  EscapeAction.register(getJDialog());
}","public SystemDependentVariableEditorDialog(Window parent,SystemDependentVariable variable,String helpID){
  super(parent,String.format(""String_Node_Str"",variable.getKey()),ID_OK_CANCEL,helpID);
  listeners=new ArrayList<>();
  oldVariable=variable;
  newVariable=(SystemDependentVariable)oldVariable.createCopy();
  newVariable.setTransient(true);
  logger=Logger.getLogger(ToolAdapterEditorDialog.class.getName());
  setContent(createPanel());
  EscapeAction.register(getJDialog());
}"
62436,"@Override protected void onOK(){
  super.onOK();
  oldVariable.setWindows(newVariable.getWindows());
  oldVariable.setLinux(newVariable.getLinux());
  oldVariable.setMacosx(newVariable.getMacosx());
}","@Override protected void onOK(){
  super.onOK();
  oldVariable.setWindows(newVariable.getWindows());
  oldVariable.setLinux(newVariable.getLinux());
  oldVariable.setMacosx(newVariable.getMacosx());
  for (  VariableChangedListener l : listeners) {
    l.variableChanged(null);
  }
}"
62437,"@Override protected JPanel createVariablesPanel(){
  JPanel variablesBorderPanel=new JPanel();
  BoxLayout layout=new BoxLayout(variablesBorderPanel,BoxLayout.PAGE_AXIS);
  variablesBorderPanel.setLayout(layout);
  variablesBorderPanel.setBorder(BorderFactory.createTitledBorder(Bundle.CTL_Panel_SysVar_Border_TitleText()));
  AbstractButton addVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addVariableButton.setText(Bundle.CTL_Button_Add_Variable_Text());
  addVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  addVariableButton.setMaximumSize(new Dimension(150,controlHeight));
  AbstractButton addDependentVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addDependentVariableButton.setText(Bundle.CTL_Button_Add_PDVariable_Text());
  addDependentVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  addDependentVariableButton.setMaximumSize(new Dimension(250,controlHeight));
  JPanel buttonsPannel=new JPanel(new SpringLayout());
  buttonsPannel.add(addVariableButton);
  buttonsPannel.add(addDependentVariableButton);
  SpringUtilities.makeCompactGrid(buttonsPannel,1,2,0,0,0,0);
  buttonsPannel.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(buttonsPannel);
  VariablesTable varTable=new VariablesTable(newOperatorDescriptor.getVariables(),context);
  varTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  varTable.setRowHeight(20);
  JScrollPane scrollPane=new JScrollPane(varTable);
  scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(scrollPane);
  variablesBorderPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  Dimension variablesPanelDimension=new Dimension((formWidth - 3 * DEFAULT_PADDING) / 2 - 2 * DEFAULT_PADDING,130);
  variablesBorderPanel.setMinimumSize(variablesPanelDimension);
  variablesBorderPanel.setMaximumSize(variablesPanelDimension);
  variablesBorderPanel.setPreferredSize(variablesPanelDimension);
  addVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  addDependentVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemDependentVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  return variablesBorderPanel;
}","@Override protected JPanel createVariablesPanel(){
  JPanel variablesBorderPanel=new JPanel();
  BoxLayout layout=new BoxLayout(variablesBorderPanel,BoxLayout.PAGE_AXIS);
  variablesBorderPanel.setLayout(layout);
  variablesBorderPanel.setBorder(BorderFactory.createTitledBorder(Bundle.CTL_Panel_SysVar_Border_TitleText()));
  AbstractButton addVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addVariableButton.setText(Bundle.CTL_Button_Add_Variable_Text());
  addVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  addVariableButton.setMaximumSize(new Dimension(150,controlHeight));
  AbstractButton addDependentVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addDependentVariableButton.setText(Bundle.CTL_Button_Add_PDVariable_Text());
  addDependentVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  addDependentVariableButton.setMaximumSize(new Dimension(250,controlHeight));
  JPanel buttonsPannel=new JPanel(new SpringLayout());
  buttonsPannel.add(addVariableButton);
  buttonsPannel.add(addDependentVariableButton);
  SpringUtilities.makeCompactGrid(buttonsPannel,1,2,0,0,0,0);
  buttonsPannel.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(buttonsPannel);
  varTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  varTable.setRowHeight(20);
  JScrollPane scrollPane=new JScrollPane(varTable);
  scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(scrollPane);
  variablesBorderPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  Dimension variablesPanelDimension=new Dimension((formWidth - 3 * DEFAULT_PADDING) / 2 - 2 * DEFAULT_PADDING,130);
  variablesBorderPanel.setMinimumSize(variablesPanelDimension);
  variablesBorderPanel.setMaximumSize(variablesPanelDimension);
  variablesBorderPanel.setPreferredSize(variablesPanelDimension);
  addVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  addDependentVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemDependentVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  return variablesBorderPanel;
}"
62438,"@Override protected JPanel createVariablesPanel(){
  JPanel variablesBorderPanel=new JPanel();
  BoxLayout layout=new BoxLayout(variablesBorderPanel,BoxLayout.PAGE_AXIS);
  variablesBorderPanel.setLayout(layout);
  AbstractButton addVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addVariableButton.setText(Bundle.CTL_Button_Add_Variable_Text());
  addVariableButton.setMaximumSize(new Dimension(150,controlHeight));
  addVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  AbstractButton addDependentVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addDependentVariableButton.setText(Bundle.CTL_Button_Add_PDVariable_Text());
  addDependentVariableButton.setMaximumSize(new Dimension(250,controlHeight));
  addDependentVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  JPanel buttonsPannel=new JPanel(new SpringLayout());
  buttonsPannel.add(addVariableButton);
  buttonsPannel.add(addDependentVariableButton);
  SpringUtilities.makeCompactGrid(buttonsPannel,1,2,0,0,0,0);
  buttonsPannel.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(buttonsPannel);
  VariablesTable varTable=new VariablesTable(newOperatorDescriptor.getVariables(),context);
  varTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  varTable.setRowHeight(controlHeight);
  int widths[]={controlHeight,(int)(formWidth * 0.3),(int)(formWidth * 0.7) - controlHeight};
  for (int i=0; i < widths.length; i++) {
    varTable.getColumnModel().getColumn(i).setPreferredWidth(widths[i]);
  }
  JScrollPane scrollPane=new JScrollPane(varTable);
  scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(scrollPane);
  variablesBorderPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  Dimension variablesPanelDimension=new Dimension((formWidth - 3 * DEFAULT_PADDING) / 2 - 2 * DEFAULT_PADDING,130);
  variablesBorderPanel.setMinimumSize(variablesPanelDimension);
  variablesBorderPanel.setMaximumSize(variablesPanelDimension);
  variablesBorderPanel.setPreferredSize(variablesPanelDimension);
  addVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  addDependentVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemDependentVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  return variablesBorderPanel;
}","@Override protected JPanel createVariablesPanel(){
  JPanel variablesBorderPanel=new JPanel();
  BoxLayout layout=new BoxLayout(variablesBorderPanel,BoxLayout.PAGE_AXIS);
  variablesBorderPanel.setLayout(layout);
  AbstractButton addVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addVariableButton.setText(Bundle.CTL_Button_Add_Variable_Text());
  addVariableButton.setMaximumSize(new Dimension(150,controlHeight));
  addVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  AbstractButton addDependentVariableButton=ToolButtonFactory.createButton(UIUtils.loadImageIcon(Bundle.Icon_Add()),false);
  addDependentVariableButton.setText(Bundle.CTL_Button_Add_PDVariable_Text());
  addDependentVariableButton.setMaximumSize(new Dimension(250,controlHeight));
  addDependentVariableButton.setAlignmentX(Component.LEFT_ALIGNMENT);
  JPanel buttonsPannel=new JPanel(new SpringLayout());
  buttonsPannel.add(addVariableButton);
  buttonsPannel.add(addDependentVariableButton);
  SpringUtilities.makeCompactGrid(buttonsPannel,1,2,0,0,0,0);
  buttonsPannel.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(buttonsPannel);
  varTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  varTable.setRowHeight(controlHeight);
  int widths[]={controlHeight,(int)(formWidth * 0.3),(int)(formWidth * 0.7) - controlHeight};
  for (int i=0; i < widths.length; i++) {
    varTable.getColumnModel().getColumn(i).setPreferredWidth(widths[i]);
  }
  JScrollPane scrollPane=new JScrollPane(varTable);
  scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
  variablesBorderPanel.add(scrollPane);
  variablesBorderPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  Dimension variablesPanelDimension=new Dimension((formWidth - 3 * DEFAULT_PADDING) / 2 - 2 * DEFAULT_PADDING,130);
  variablesBorderPanel.setMinimumSize(variablesPanelDimension);
  variablesBorderPanel.setMaximumSize(variablesPanelDimension);
  variablesBorderPanel.setPreferredSize(variablesPanelDimension);
  addVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  addDependentVariableButton.addActionListener(e -> {
    newOperatorDescriptor.getVariables().add(new SystemDependentVariable(""String_Node_Str"",""String_Node_Str""));
    varTable.revalidate();
  }
);
  return variablesBorderPanel;
}"
62439,"/** 
 * Constructor.
 */
public SystemDependentVariableCellEditor(Window window,SystemDependentVariable variable,String helpID){
  super(new JTextField());
  setClickCountToStart(CLICK_COUNT_TO_START);
  button=new JButton();
  button.setBackground(Color.white);
  button.setFont(button.getFont().deriveFont(Font.PLAIN));
  button.setBorder(null);
  button.setHorizontalAlignment(SwingConstants.LEFT);
  button.setText(variable.getValue());
  this.variable=variable;
  dialog=new SystemDependentVariableEditorDialog(window,this.variable,helpID);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == CLICK_COUNT_TO_START) {
        dialog.show();
        fireEditingStopped();
      }
    }
  }
);
}","/** 
 * Constructor.
 */
public SystemDependentVariableCellEditor(Window window,SystemDependentVariable variable,String helpID){
  super(new JTextField());
  setClickCountToStart(CLICK_COUNT_TO_START);
  button=new JButton();
  button.setBackground(Color.white);
  button.setFont(button.getFont().deriveFont(Font.PLAIN));
  button.setBorder(null);
  button.setHorizontalAlignment(SwingConstants.LEFT);
  button.setText(variable.getValue());
  this.variable=variable;
  dialog=new SystemDependentVariableEditorDialog(window,this.variable,helpID);
  dialog.addListener(this);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == CLICK_COUNT_TO_START) {
        dialog.show();
        fireEditingStopped();
      }
    }
  }
);
}"
62440,"@Override public TableCellEditor getCellEditor(int row,int column){
switch (column) {
case 0:
case 2:
    return tableRenderer;
case 1:
  return getDefaultEditor(Boolean.class);
default :
return getDefaultEditor(String.class);
}
}","@Override public TableCellEditor getCellEditor(int row,int column){
switch (column) {
case 0:
case 2:
case 3:
    return tableRenderer;
case 1:
  return getDefaultEditor(Boolean.class);
default :
return getDefaultEditor(String.class);
}
}"
62441,"private void tearDown(Throwable throwable,Product result){
  if (operatorTask != null) {
    operatorTask.cancel();
  }
  if (throwable != null) {
    if (result != null) {
      final Dialogs.Answer answer=Dialogs.requestDecision(Bundle.ExecutionFailed_Text(),String.format(Bundle.ExecutionFailed_Message(),throwable.getMessage()),false,null);
      if (answer == Dialogs.Answer.YES) {
        operatorCompleted(result);
      }
    }
  }
}","private void tearDown(Throwable throwable,Product result){
  if (operatorTask != null) {
    operatorTask.cancel();
  }
  if (throwable != null) {
    if (result != null) {
      final Dialogs.Answer answer=Dialogs.requestDecision(Bundle.ExecutionFailed_Text(),String.format(Bundle.ExecutionFailed_Message(),throwable.getMessage()),false,null);
      if (answer == Dialogs.Answer.YES) {
        operatorCompleted(result);
      }
    }
  }
  displayErrorMessage();
}"
62442,"@Override protected void onOK(){
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      super.onOK();
      if (newOperatorDescriptor.getSourceProductCount() == 0) {
        Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
      }
      if (!newOperatorDescriptor.isFromPackage()) {
        newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
      }
      Map<File,String> templates=new HashMap<>();
      newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
      java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
      toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
        Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
        if (param.isTemplateBefore() || param.isTemplateAfter()) {
          final File paramTemplateFile=new File(propertyValue.toString());
          param.setDefaultValue(paramTemplateFile.getName());
          File fileToAdd;
          if (!newOperatorDescriptor.getAlias().equals(oldOperatorDescriptor.getAlias())) {
            File oldFile=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,oldOperatorDescriptor.getAlias());
            fileToAdd=ToolAdapterIO.ensureLocalCopy(oldFile,newOperatorDescriptor.getAlias());
          }
 else {
            fileToAdd=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,newOperatorDescriptor.getAlias());
          }
          try {
            templates.put(fileToAdd,new String(Files.readAllBytes(Paths.get(fileToAdd.toURI()))));
          }
 catch (          IOException e) {
            logger.severe(e.getMessage());
          }
        }
 else {
          String defaultValueString=""String_Node_Str"";
          if (propertyValue.getClass().isArray()) {
            defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.asList((Object[])propertyValue).stream().map(Object::toString).collect(Collectors.toList()));
          }
 else {
            defaultValueString=propertyValue.toString();
          }
          param.setDefaultValue(defaultValueString);
        }
      }
);
      java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
      newOperatorDescriptor.removeParamDescriptors(remParameters);
      try {
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        if (this.currentOperation == OperationType.EDIT) {
          ToolAdapterIO.removeOperator(oldOperatorDescriptor,true);
        }
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
        templates.keySet().stream().forEach(k -> {
          if (!k.exists()) {
            try {
              if (k.createNewFile()) {
                Files.write(Paths.get(k.toURI()),templates.get(k).getBytes(),StandardOpenOption.WRITE);
              }
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
            }
          }
        }
);
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(e.getMessage());
      }
    }
  }
}","@Override protected void onOK(){
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      if (newOperatorDescriptor.getSourceProductCount() == 0) {
        Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
      }
      if (!newOperatorDescriptor.isFromPackage()) {
        newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
      }
      Map<File,String> templates=new HashMap<>();
      newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
      java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
      toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
        Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
        if (param.isTemplateBefore() || param.isTemplateAfter()) {
          final File paramTemplateFile=new File(propertyValue.toString());
          param.setDefaultValue(paramTemplateFile.getName());
          File fileToAdd;
          if (!newOperatorDescriptor.getAlias().equals(oldOperatorDescriptor.getAlias())) {
            File oldFile=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,oldOperatorDescriptor.getAlias());
            fileToAdd=ToolAdapterIO.ensureLocalCopy(oldFile,newOperatorDescriptor.getAlias());
          }
 else {
            fileToAdd=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,newOperatorDescriptor.getAlias());
          }
          try {
            templates.put(fileToAdd,new String(Files.readAllBytes(Paths.get(fileToAdd.toURI()))));
          }
 catch (          IOException e) {
            logger.severe(e.getMessage());
          }
        }
 else {
          String defaultValueString=""String_Node_Str"";
          if (propertyValue.getClass().isArray()) {
            defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.asList((Object[])propertyValue).stream().map(Object::toString).collect(Collectors.toList()));
          }
 else {
            defaultValueString=propertyValue.toString();
          }
          param.setDefaultValue(defaultValueString);
        }
      }
);
      java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
      newOperatorDescriptor.removeParamDescriptors(remParameters);
      try {
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
        templates.keySet().stream().forEach(k -> {
          if (!k.exists()) {
            try {
              if (k.createNewFile()) {
                Files.write(Paths.get(k.toURI()),templates.get(k).getBytes(),StandardOpenOption.WRITE);
              }
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
            }
          }
        }
);
        super.onOK();
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(""String_Node_Str"" + e.toString());
      }
    }
  }
}"
62443,"public static AbstractAdapterEditor createEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex){
  AbstractAdapterEditor dialog;
  if (useTabsForEditorDialog()) {
    dialog=new ToolAdapterTabbedEditorDialog(appContext,parent,operatorDescriptor,newNameIndex);
  }
 else {
    dialog=new ToolAdapterEditorDialog(appContext,parent,operatorDescriptor,newNameIndex);
  }
  return dialog;
}","public static AbstractAdapterEditor createEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex,OperationType operation){
  AbstractAdapterEditor dialog;
  if (useTabsForEditorDialog()) {
    dialog=new ToolAdapterTabbedEditorDialog(appContext,parent,operatorDescriptor,newNameIndex,operation);
  }
 else {
    dialog=new ToolAdapterEditorDialog(appContext,parent,operatorDescriptor,newNameIndex,operation);
  }
  return dialog;
}"
62444,"/** 
 * Constructs a new window for editing the operator
 * @param appContext the application context
 * @param operatorDescriptor the descriptor of the operator to be edited
 * @param newNameIndex an integer value representing the suffix for the new operator name; if this value is less than 1, the editing operation of the current operator is executed; if the value is equal to or greater than 1, the operator is duplicated and the index value is used to compute the name of the new operator
 */
public AbstractAdapterEditor(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex){
  this(appContext,parent,operatorDescriptor);
  this.newNameIndex=newNameIndex;
  this.operatorIsNew=this.newNameIndex >= 1;
  if (this.newNameIndex >= 1) {
    this.newOperatorDescriptor.setName(this.oldOperatorDescriptor.getName() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + this.newNameIndex);
    this.newOperatorDescriptor.setAlias(this.oldOperatorDescriptor.getAlias() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + this.newNameIndex);
  }
  setContent(createMainPanel());
  EscapeAction.register(this.getJDialog());
}","/** 
 * Constructs a new window for editing the operator
 * @param appContext the application context
 * @param operatorDescriptor the descriptor of the operator to be edited
 * @param newNameIndex an integer value representing the suffix for the new operator name; if this value is less than 1, the editing operation of the current operator is executed; if the value is equal to or greater than 1, the operator is duplicated and the index value is used to compute the name of the new operator
 * @param operation is the type of desired operation: NEW/COPY if the operator was not previously registered (so it is a new operator) and EDIT if the operator was registered and the editing operation is requested
 */
public AbstractAdapterEditor(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex,OperationType operation){
  this(appContext,parent,operatorDescriptor);
  this.newNameIndex=newNameIndex;
  this.currentOperation=operation;
  if (this.newNameIndex >= 1) {
    this.newOperatorDescriptor.setName(this.oldOperatorDescriptor.getName() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + this.newNameIndex);
    this.newOperatorDescriptor.setAlias(this.oldOperatorDescriptor.getAlias() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + this.newNameIndex);
  }
  setContent(createMainPanel());
  EscapeAction.register(this.getJDialog());
}"
62445,"@Override protected void onOK(){
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      super.onOK();
      if (newOperatorDescriptor.getSourceProductCount() == 0) {
        Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
      }
      if (!newOperatorDescriptor.isFromPackage()) {
        newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
      }
      Map<File,String> templates=new HashMap<>();
      newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
      java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
      toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
        Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
        if (param.isTemplateBefore() || param.isTemplateAfter()) {
          final File paramTemplateFile=new File(propertyValue.toString());
          param.setDefaultValue(paramTemplateFile.getName());
          File fileToAdd;
          if (!newOperatorDescriptor.getAlias().equals(oldOperatorDescriptor.getAlias())) {
            File oldFile=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,oldOperatorDescriptor.getAlias());
            fileToAdd=ToolAdapterIO.ensureLocalCopy(oldFile,newOperatorDescriptor.getAlias());
          }
 else {
            fileToAdd=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,newOperatorDescriptor.getAlias());
          }
          try {
            templates.put(fileToAdd,new String(Files.readAllBytes(Paths.get(fileToAdd.toURI()))));
          }
 catch (          IOException e) {
            logger.severe(e.getMessage());
          }
        }
 else {
          String defaultValueString=""String_Node_Str"";
          if (propertyValue.getClass().isArray()) {
            defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.asList((Object[])propertyValue).stream().map(Object::toString).collect(Collectors.toList()));
          }
 else {
            defaultValueString=propertyValue.toString();
          }
          param.setDefaultValue(defaultValueString);
        }
      }
);
      java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
      newOperatorDescriptor.removeParamDescriptors(remParameters);
      try {
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        ToolAdapterIO.removeOperator(oldOperatorDescriptor,true);
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
        templates.keySet().stream().forEach(k -> {
          if (!k.exists()) {
            try {
              if (k.createNewFile()) {
                Files.write(Paths.get(k.toURI()),templates.get(k).getBytes(),StandardOpenOption.WRITE);
              }
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
            }
          }
        }
);
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(e.getMessage());
      }
    }
  }
}","@Override protected void onOK(){
  if (!verifyUserInput()) {
    Dialogs.showWarning(Bundle.MSG_Wrong_Value_Text());
    this.getJDialog().requestFocus();
  }
 else {
    String templateContent=this.templateContent.getText();
    if (!resolveTemplateProductCount(templateContent)) {
      Dialogs.showWarning(Bundle.MSG_Wrong_Usage_Array_Text());
      this.getJDialog().requestFocus();
    }
 else {
      super.onOK();
      if (newOperatorDescriptor.getSourceProductCount() == 0) {
        Dialogs.showInformation(""String_Node_Str"",""String_Node_Str"");
      }
      if (!newOperatorDescriptor.isFromPackage()) {
        newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
      }
      Map<File,String> templates=new HashMap<>();
      newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
      java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
      toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
        Object propertyValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
        if (param.isTemplateBefore() || param.isTemplateAfter()) {
          final File paramTemplateFile=new File(propertyValue.toString());
          param.setDefaultValue(paramTemplateFile.getName());
          File fileToAdd;
          if (!newOperatorDescriptor.getAlias().equals(oldOperatorDescriptor.getAlias())) {
            File oldFile=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,oldOperatorDescriptor.getAlias());
            fileToAdd=ToolAdapterIO.ensureLocalCopy(oldFile,newOperatorDescriptor.getAlias());
          }
 else {
            fileToAdd=ToolAdapterIO.ensureLocalCopy(paramTemplateFile,newOperatorDescriptor.getAlias());
          }
          try {
            templates.put(fileToAdd,new String(Files.readAllBytes(Paths.get(fileToAdd.toURI()))));
          }
 catch (          IOException e) {
            logger.severe(e.getMessage());
          }
        }
 else {
          String defaultValueString=""String_Node_Str"";
          if (propertyValue.getClass().isArray()) {
            defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.asList((Object[])propertyValue).stream().map(Object::toString).collect(Collectors.toList()));
          }
 else {
            defaultValueString=propertyValue.toString();
          }
          param.setDefaultValue(defaultValueString);
        }
      }
);
      java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName()) || ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE.equals(param.getName()))).collect(Collectors.toList());
      newOperatorDescriptor.removeParamDescriptors(remParameters);
      try {
        if (rbMenuNew.isSelected()) {
          String customMenuLocationText=customMenuLocation.getText();
          if (customMenuLocationText != null && !customMenuLocationText.isEmpty()) {
            newOperatorDescriptor.setMenuLocation(customMenuLocationText);
          }
        }
        String menuLocation=newOperatorDescriptor.getMenuLocation();
        if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
          newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
        }
        if (this.currentOperation == OperationType.EDIT) {
          ToolAdapterIO.removeOperator(oldOperatorDescriptor,true);
        }
        ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
        templates.keySet().stream().forEach(k -> {
          if (!k.exists()) {
            try {
              if (k.createNewFile()) {
                Files.write(Paths.get(k.toURI()),templates.get(k).getBytes(),StandardOpenOption.WRITE);
              }
            }
 catch (            IOException e) {
              logger.severe(e.getMessage());
            }
          }
        }
);
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        Dialogs.showError(e.getMessage());
      }
    }
  }
}"
62446,"protected JTextArea createTemplateEditorField(){
  boolean useAutocomplete=Boolean.parseBoolean(NbPreferences.forModule(Dialogs.class).get(ToolAdapterOptionsController.PREFERENCE_KEY_AUTOCOMPLETE,""String_Node_Str""));
  if (useAutocomplete) {
    templateContent=new AutoCompleteTextArea(""String_Node_Str"",15,9);
  }
 else {
    templateContent=new JTextArea(""String_Node_Str"",15,9);
  }
  try {
    if (operatorIsNew) {
      if (oldOperatorDescriptor.getTemplateFileLocation() != null) {
        templateContent.setText(ToolAdapterIO.readOperatorTemplate(oldOperatorDescriptor.getName()));
      }
    }
 else {
      templateContent.setText(ToolAdapterIO.readOperatorTemplate(newOperatorDescriptor.getName()));
    }
  }
 catch (  IOException|OperatorException e) {
    logger.warning(e.getMessage());
  }
  templateContent.setInputVerifier(new RequiredFieldValidator(MESSAGE_REQUIRED));
  if (useAutocomplete && templateContent instanceof AutoCompleteTextArea) {
    ((AutoCompleteTextArea)templateContent).setAutoCompleteEntries(getAutocompleteEntries());
    ((AutoCompleteTextArea)templateContent).setTriggerChar('$');
  }
  return templateContent;
}","protected JTextArea createTemplateEditorField(){
  boolean useAutocomplete=Boolean.parseBoolean(NbPreferences.forModule(Dialogs.class).get(ToolAdapterOptionsController.PREFERENCE_KEY_AUTOCOMPLETE,""String_Node_Str""));
  if (useAutocomplete) {
    templateContent=new AutoCompleteTextArea(""String_Node_Str"",15,9);
  }
 else {
    templateContent=new JTextArea(""String_Node_Str"",15,9);
  }
  try {
    if ((currentOperation == OperationType.NEW) || (currentOperation == OperationType.COPY)) {
      if (oldOperatorDescriptor.getTemplateFileLocation() != null) {
        templateContent.setText(ToolAdapterIO.readOperatorTemplate(oldOperatorDescriptor.getName()));
      }
    }
 else {
      templateContent.setText(ToolAdapterIO.readOperatorTemplate(newOperatorDescriptor.getName()));
    }
  }
 catch (  IOException|OperatorException e) {
    logger.warning(e.getMessage());
  }
  templateContent.setInputVerifier(new RequiredFieldValidator(MESSAGE_REQUIRED));
  if (useAutocomplete && templateContent instanceof AutoCompleteTextArea) {
    ((AutoCompleteTextArea)templateContent).setAutoCompleteEntries(getAutocompleteEntries());
    ((AutoCompleteTextArea)templateContent).setTriggerChar('$');
  }
  return templateContent;
}"
62447,"public ToolAdapterEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex){
  super(appContext,parent,operatorDescriptor,newNameIndex);
}","public ToolAdapterEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex,OperationType operation){
  super(appContext,parent,operatorDescriptor,newNameIndex,operation);
}"
62448,"@Override protected void onApply(){
  final Product[] sourceProducts=form.getSourceProducts();
  List<ParameterDescriptor> descriptors=Arrays.stream(operatorDescriptor.getParameterDescriptors()).filter(p -> ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE.equals(p.getName())).collect(Collectors.toList());
  String templateContents=""String_Node_Str"";
  try {
    templateContents=ToolAdapterIO.readOperatorTemplate(operatorDescriptor.getName());
  }
 catch (  IOException ignored) {
  }
  if (Arrays.stream(sourceProducts).anyMatch(p -> p == null)) {
    Dialogs.Answer decision=Dialogs.requestDecision(""String_Node_Str"",Bundle.NoSourceProductWarning_Text(),false,ToolAdapterOptionsController.PREFERENCE_KEY_SHOW_EMPTY_PRODUCT_WARNING);
    if (decision.equals(Dialogs.Answer.NO)) {
      return;
    }
  }
  if (descriptors.size() == 1 && form.getPropertyValue(ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE) == null && templateContents.contains(""String_Node_Str"" + ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE)) {
    Dialogs.showWarning(Bundle.RequiredTargetProductMissingWarning_Text());
  }
 else {
    if (!canApply()) {
      displayWarnings();
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDescriptor,false);
      dialog.getJDialog().addWindowListener(new WindowAdapter(){
        @Override public void windowClosed(        WindowEvent e){
          super.windowClosed(e);
          onOperatorDescriptorChanged(dialog.getUpdatedOperatorDescriptor());
        }
      }
);
      dialog.show();
    }
 else {
      if (validateUserInput()) {
        String productDir=targetProductSelector.getModel().getProductDir().getAbsolutePath();
        appContext.getPreferences().setPropertyString(SaveProductAsAction.PREFERENCES_KEY_LAST_PRODUCT_DIR,productDir);
        Map<String,Product> sourceProductMap=new HashMap<>();
        if (sourceProducts.length > 0) {
          sourceProductMap.put(SOURCE_PRODUCT_FIELD,sourceProducts[0]);
        }
        Operator op=GPF.getDefaultInstance().createOperator(operatorDescriptor.getName(),parameterSupport.getParameterMap(),sourceProductMap,null);
        op.setSourceProducts(sourceProducts);
        operatorTask=new OperatorTask(op,ToolAdapterExecutionDialog.this::operatorCompleted);
        ProgressHandle progressHandle=ProgressHandleFactory.createHandle(this.getTitle());
        String progressPattern=operatorDescriptor.getProgressPattern();
        ((ToolAdapterOp)op).setProgressMonitor(new ProgressWrapper(progressHandle,progressPattern == null || progressPattern.isEmpty(),form.shouldDisplayOutput()));
        ProgressUtils.runOffEventThreadWithProgressDialog(operatorTask,this.getTitle(),progressHandle,true,1,1);
      }
 else {
        if (warnings.size() > 0) {
          displayWarnings();
        }
      }
    }
  }
}","@Override protected void onApply(){
  final Product[] sourceProducts=form.getSourceProducts();
  List<ParameterDescriptor> descriptors=Arrays.stream(operatorDescriptor.getParameterDescriptors()).filter(p -> ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE.equals(p.getName())).collect(Collectors.toList());
  String templateContents=""String_Node_Str"";
  try {
    templateContents=ToolAdapterIO.readOperatorTemplate(operatorDescriptor.getName());
  }
 catch (  IOException ignored) {
  }
  if (Arrays.stream(sourceProducts).anyMatch(p -> p == null)) {
    Dialogs.Answer decision=Dialogs.requestDecision(""String_Node_Str"",Bundle.NoSourceProductWarning_Text(),false,ToolAdapterOptionsController.PREFERENCE_KEY_SHOW_EMPTY_PRODUCT_WARNING);
    if (decision.equals(Dialogs.Answer.NO)) {
      return;
    }
  }
  if (descriptors.size() == 1 && form.getPropertyValue(ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE) == null && templateContents.contains(""String_Node_Str"" + ToolAdapterConstants.TOOL_TARGET_PRODUCT_FILE)) {
    Dialogs.showWarning(Bundle.RequiredTargetProductMissingWarning_Text());
  }
 else {
    if (!canApply()) {
      displayWarnings();
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDescriptor,OperationType.EDIT);
      dialog.getJDialog().addWindowListener(new WindowAdapter(){
        @Override public void windowClosed(        WindowEvent e){
          super.windowClosed(e);
          onOperatorDescriptorChanged(dialog.getUpdatedOperatorDescriptor());
        }
      }
);
      dialog.show();
    }
 else {
      if (validateUserInput()) {
        String productDir=targetProductSelector.getModel().getProductDir().getAbsolutePath();
        appContext.getPreferences().setPropertyString(SaveProductAsAction.PREFERENCES_KEY_LAST_PRODUCT_DIR,productDir);
        Map<String,Product> sourceProductMap=new HashMap<>();
        if (sourceProducts.length > 0) {
          sourceProductMap.put(SOURCE_PRODUCT_FIELD,sourceProducts[0]);
        }
        Operator op=GPF.getDefaultInstance().createOperator(operatorDescriptor.getName(),parameterSupport.getParameterMap(),sourceProductMap,null);
        op.setSourceProducts(sourceProducts);
        operatorTask=new OperatorTask(op,ToolAdapterExecutionDialog.this::operatorCompleted);
        ProgressHandle progressHandle=ProgressHandleFactory.createHandle(this.getTitle());
        String progressPattern=operatorDescriptor.getProgressPattern();
        ((ToolAdapterOp)op).setProgressMonitor(new ProgressWrapper(progressHandle,progressPattern == null || progressPattern.isEmpty(),form.shouldDisplayOutput()));
        ProgressUtils.runOffEventThreadWithProgressDialog(operatorTask,this.getTitle(),progressHandle,true,1,1);
      }
 else {
        if (warnings.size() > 0) {
          displayWarnings();
        }
      }
    }
  }
}"
62449,"public ToolAdapterTabbedEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex){
  super(appContext,parent,operatorDescriptor,newNameIndex);
}","public ToolAdapterTabbedEditorDialog(AppContext appContext,JDialog parent,ToolAdapterOperatorDescriptor operatorDescriptor,int newNameIndex,OperationType operation){
  super(appContext,parent,operatorDescriptor,newNameIndex,operation);
}"
62450,"private JPanel createButtonsPanel(){
  JPanel panel=new JPanel(new SpringLayout());
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_document_new(TangoIcons.Res.R22),Bundle.ToolTipNewOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor newOperatorSpi=new ToolAdapterOperatorDescriptor(ToolAdapterConstants.OPERATOR_NAMESPACE + ""String_Node_Str"",ToolAdapterOp.class,""String_Node_Str"",null,null,null,null,null,null);
    AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),newOperatorSpi,true);
    dialog.show();
    refreshContent();
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_edit_copy(TangoIcons.Res.R22),Bundle.ToolTipCopyOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      String opName=operatorDesc.getName();
      int newNameIndex=0;
      while (GPF.getDefaultInstance().getOperatorSpiRegistry().getOperatorSpi(opName) != null) {
        newNameIndex++;
        opName=operatorDesc.getName() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + newNameIndex;
      }
      ToolAdapterOperatorDescriptor newOperator=new ToolAdapterOperatorDescriptor(operatorDesc,opName,opName);
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),newOperator,newNameIndex);
      dialog.show();
      refreshContent();
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.apps_accessories_text_editor(TangoIcons.Res.R22),Bundle.ToolTipEditOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,false);
      dialog.show();
      refreshContent();
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_edit_clear(TangoIcons.Res.R22),Bundle.ToolTipDeleteOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDescriptor=requestSelection();
    if (operatorDescriptor != null) {
      if (Dialogs.Answer.YES == Dialogs.requestDecision(Bundle.MessageConfirmRemoval_TitleText(),Bundle.MessageConfirmRemoval_Text(),true,Bundle.MessageConfirmRemovalDontAsk_Text())) {
        if (operatorDescriptor.isFromPackage()) {
          Dialogs.showWarning(String.format(Bundle.MessagePackageModules_Text(),operatorDescriptor.getName()));
        }
 else {
          ToolAdapterIO.removeOperator(operatorDescriptor);
        }
        refreshContent();
      }
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_media_playback_start(TangoIcons.Res.R22),Bundle.ToolTipExecuteOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      final ToolAdapterExecutionDialog operatorDialog=new ToolAdapterExecutionDialog(operatorDesc,appContext,operatorDesc.getLabel());
      operatorDialog.show();
    }
  }
));
  makeCompactGrid(panel,1,5,0,0,DEFAULT_PADDING,DEFAULT_PADDING);
  return panel;
}","private JPanel createButtonsPanel(){
  JPanel panel=new JPanel(new SpringLayout());
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_document_new(TangoIcons.Res.R22),Bundle.ToolTipNewOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor newOperatorSpi=new ToolAdapterOperatorDescriptor(ToolAdapterConstants.OPERATOR_NAMESPACE + ""String_Node_Str"",ToolAdapterOp.class,""String_Node_Str"",null,null,null,null,null,null);
    AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),newOperatorSpi,OperationType.NEW);
    dialog.show();
    refreshContent();
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_edit_copy(TangoIcons.Res.R22),Bundle.ToolTipCopyOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      String opName=operatorDesc.getName();
      int newNameIndex=0;
      while (GPF.getDefaultInstance().getOperatorSpiRegistry().getOperatorSpi(opName) != null) {
        newNameIndex++;
        opName=operatorDesc.getName() + ToolAdapterConstants.OPERATOR_GENERATED_NAME_SEPARATOR + newNameIndex;
      }
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,newNameIndex,OperationType.COPY);
      dialog.show();
      refreshContent();
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.apps_accessories_text_editor(TangoIcons.Res.R22),Bundle.ToolTipEditOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,OperationType.EDIT);
      dialog.show();
      refreshContent();
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_edit_clear(TangoIcons.Res.R22),Bundle.ToolTipDeleteOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDescriptor=requestSelection();
    if (operatorDescriptor != null) {
      if (Dialogs.Answer.YES == Dialogs.requestDecision(Bundle.MessageConfirmRemoval_TitleText(),Bundle.MessageConfirmRemoval_Text(),true,Bundle.MessageConfirmRemovalDontAsk_Text())) {
        if (operatorDescriptor.isFromPackage()) {
          Dialogs.showWarning(String.format(Bundle.MessagePackageModules_Text(),operatorDescriptor.getName()));
        }
 else {
          ToolAdapterIO.removeOperator(operatorDescriptor);
        }
        refreshContent();
      }
    }
  }
));
  panel.add(createButton(""String_Node_Str"",TangoIcons.actions_media_playback_start(TangoIcons.Res.R22),Bundle.ToolTipExecuteOperator_Text(),e -> {
    ToolAdapterOperatorDescriptor operatorDesc=requestSelection();
    if (operatorDesc != null) {
      final ToolAdapterExecutionDialog operatorDialog=new ToolAdapterExecutionDialog(operatorDesc,appContext,operatorDesc.getLabel());
      operatorDialog.show();
    }
  }
));
  makeCompactGrid(panel,1,5,0,0,DEFAULT_PADDING,DEFAULT_PADDING);
  return panel;
}"
62451,"private JTable createAdaptersPanel(){
  java.util.List<ToolAdapterOperatorDescriptor> toolboxSpis=new ArrayList<>();
  toolboxSpis.addAll(ToolAdapterRegistry.INSTANCE.getOperatorMap().values().stream().map(e -> (ToolAdapterOperatorDescriptor)e.getOperatorDescriptor()).collect(Collectors.toList()));
  toolboxSpis.sort((o1,o2) -> o1.getAlias().compareTo(o2.getAlias()));
  OperatorsTableModel model=new OperatorsTableModel(toolboxSpis);
  operatorsTable=new JTable(model);
  operatorsTable.getColumnModel().getColumn(0).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.getColumnModel().getColumn(0).setMaxWidth(300);
  operatorsTable.getColumnModel().getColumn(1).setResizable(true);
  operatorsTable.getColumnModel().getColumn(1).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  operatorsTable.addMouseListener(new MouseListener(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        int selectedRow=operatorsTable.getSelectedRow();
        operatorsTable.repaint();
        ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
        AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,false);
        dialog.show();
        refreshContent();
      }
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
    }
  }
);
  return operatorsTable;
}","private JTable createAdaptersPanel(){
  java.util.List<ToolAdapterOperatorDescriptor> toolboxSpis=new ArrayList<>();
  toolboxSpis.addAll(ToolAdapterRegistry.INSTANCE.getOperatorMap().values().stream().map(e -> (ToolAdapterOperatorDescriptor)e.getOperatorDescriptor()).collect(Collectors.toList()));
  toolboxSpis.sort((o1,o2) -> o1.getAlias().compareTo(o2.getAlias()));
  OperatorsTableModel model=new OperatorsTableModel(toolboxSpis);
  operatorsTable=new JTable(model);
  operatorsTable.getColumnModel().getColumn(0).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.getColumnModel().getColumn(0).setMaxWidth(300);
  operatorsTable.getColumnModel().getColumn(1).setResizable(true);
  operatorsTable.getColumnModel().getColumn(1).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  operatorsTable.addMouseListener(new MouseListener(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        int selectedRow=operatorsTable.getSelectedRow();
        operatorsTable.repaint();
        ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
        AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,OperationType.EDIT);
        dialog.show();
        refreshContent();
      }
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
    }
  }
);
  return operatorsTable;
}"
62452,"@Override public void mouseClicked(MouseEvent e){
  if (e.getClickCount() >= 2) {
    int selectedRow=operatorsTable.getSelectedRow();
    operatorsTable.repaint();
    ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
    AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,false);
    dialog.show();
    refreshContent();
  }
}","@Override public void mouseClicked(MouseEvent e){
  if (e.getClickCount() >= 2) {
    int selectedRow=operatorsTable.getSelectedRow();
    operatorsTable.repaint();
    ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
    AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,OperationType.EDIT);
    dialog.show();
    refreshContent();
  }
}"
62453,"private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue0.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}","private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          _MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}"
62454,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue0.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      _MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}"
62455,"private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}","private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}"
62456,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue0.maybeResample(newSourceProduct);
    }
  }
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      _MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
}"
62457,"PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue0.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}","PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          _MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}"
62458,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}"
62459,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    MultiSizeIssue0.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    _MultiSizeIssue.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}"
62460,"@Override public void actionPerformed(ActionEvent actionEvent){
  Product selectedProduct=lkp.lookup(ProductNode.class).getProduct();
  if (MultiSizeIssue0.isMultiSize(selectedProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(selectedProduct);
    if (resampledProduct != null) {
      selectedProduct=resampledProduct;
    }
 else {
      final Band[] bands=selectedProduct.getBands();
      int validBandsCount=0;
      for (      Band band : bands) {
        if (band.getRasterSize().equals(selectedProduct.getSceneRasterSize()) && band.getGeoCoding().equals(selectedProduct.getSceneGeoCoding())) {
          validBandsCount++;
          if (validBandsCount == 2) {
            break;
          }
        }
        if (validBandsCount < 2) {
          Dialogs.showError(""String_Node_Str"");
          return;
        }
      }
    }
  }
  attachPixelGeoCoding(selectedProduct);
}","@Override public void actionPerformed(ActionEvent actionEvent){
  Product selectedProduct=lkp.lookup(ProductNode.class).getProduct();
  if (_MultiSizeIssue.isMultiSize(selectedProduct)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(selectedProduct);
    if (resampledProduct != null) {
      selectedProduct=resampledProduct;
    }
 else {
      final Band[] bands=selectedProduct.getBands();
      int validBandsCount=0;
      for (      Band band : bands) {
        if (band.getRasterSize().equals(selectedProduct.getSceneRasterSize()) && band.getGeoCoding().equals(selectedProduct.getSceneGeoCoding())) {
          validBandsCount++;
          if (validBandsCount == 2) {
            break;
          }
        }
        if (validBandsCount < 2) {
          Dialogs.showError(""String_Node_Str"");
          return;
        }
      }
    }
  }
  attachPixelGeoCoding(selectedProduct);
}"
62461,"private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}","private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}"
62462,"@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}","@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}"
62463,"@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}"
62464,"@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (MultiSizeIssue0.isMultiSize(product)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (_MultiSizeIssue.isMultiSize(product)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}"
62465,"@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}"
62466,"private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (MultiSizeIssue0.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}","private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (_MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}"
62467,"private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}","private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}"
62468,"public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (MultiSizeIssue0.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}","public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (_MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}"
62469,"private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultisizeIssue.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}","private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue0.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}"
62470,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultisizeIssue.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue0.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}"
62471,"private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=MultisizeIssue.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}","private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}"
62472,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultisizeIssue.maybeResample(newSourceProduct);
    }
  }
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue0.maybeResample(newSourceProduct);
    }
  }
}"
62473,"PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultisizeIssue.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}","PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue0.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}"
62474,"/** 
 * @return {@code Boolean.TRUE} on success, {@code Boolean.FALSE} on failure, or {@code null} on cancellation.
 */
public Boolean execute(){
  Product product=productRef.get();
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultisizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return false;
      }
    }
    return exportProduct(product,(String)getValue(PROPERTY_FORMAT_NAME));
  }
 else {
    return true;
  }
}","/** 
 * @return {@code Boolean.TRUE} on success, {@code Boolean.FALSE} on failure, or {@code null} on cancellation.
 */
public Boolean execute(){
  Product product=productRef.get();
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return false;
      }
    }
    return exportProduct(product,(String)getValue(PROPERTY_FORMAT_NAME));
  }
 else {
    return true;
  }
}"
62475,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=MultisizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}"
62476,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    MultisizeIssue.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    MultiSizeIssue0.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}"
62477,"@Override public void actionPerformed(ActionEvent actionEvent){
  Product selectedProduct=lkp.lookup(ProductNode.class).getProduct();
  if (MultisizeIssue.isMultiSize(selectedProduct)) {
    final Product resampledProduct=MultisizeIssue.maybeResample(selectedProduct);
    if (resampledProduct != null) {
      selectedProduct=resampledProduct;
    }
 else {
      final Band[] bands=selectedProduct.getBands();
      int validBandsCount=0;
      for (      Band band : bands) {
        if (band.getRasterSize().equals(selectedProduct.getSceneRasterSize()) && band.getGeoCoding().equals(selectedProduct.getSceneGeoCoding())) {
          validBandsCount++;
          if (validBandsCount == 2) {
            break;
          }
        }
        if (validBandsCount < 2) {
          Dialogs.showError(""String_Node_Str"");
          return;
        }
      }
    }
  }
  attachPixelGeoCoding(selectedProduct);
}","@Override public void actionPerformed(ActionEvent actionEvent){
  Product selectedProduct=lkp.lookup(ProductNode.class).getProduct();
  if (MultiSizeIssue0.isMultiSize(selectedProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(selectedProduct);
    if (resampledProduct != null) {
      selectedProduct=resampledProduct;
    }
 else {
      final Band[] bands=selectedProduct.getBands();
      int validBandsCount=0;
      for (      Band band : bands) {
        if (band.getRasterSize().equals(selectedProduct.getSceneRasterSize()) && band.getGeoCoding().equals(selectedProduct.getSceneGeoCoding())) {
          validBandsCount++;
          if (validBandsCount == 2) {
            break;
          }
        }
        if (validBandsCount < 2) {
          Dialogs.showError(""String_Node_Str"");
          return;
        }
      }
    }
  }
  attachPixelGeoCoding(selectedProduct);
}"
62478,"private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=MultisizeIssue.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}","private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}"
62479,"@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultisizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}","@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}"
62480,"@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultisizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue0.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}"
62481,"@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (MultisizeIssue.isMultiSize(product)) {
    final Product resampledProduct=MultisizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (MultiSizeIssue0.isMultiSize(product)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}"
62482,"@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=MultisizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}"
62483,"private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (MultisizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultisizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}","private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (MultiSizeIssue0.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}"
62484,"private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=MultisizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}","private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}"
62485,"public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (MultisizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultisizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}","public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (MultiSizeIssue0.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue0.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}"
62486,"private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          _MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}","private JPanel createSourceProductsPanel(){
  BorderLayout layout=new BorderLayout();
  final JPanel sourceProductPanel=new JPanel(layout);
  sourceProductPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ListDataListener changeListener=new ListDataListener(){
    @Override public void contentsChanged(    ListDataEvent event){
      final Product[] sourceProducts=sourceProductList.getSourceProducts();
      try {
        binningFormModel.setProperty(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS,sourceProducts);
      }
 catch (      ValidationException e) {
        appContext.handleError(""String_Node_Str"",e);
      }
      if (sourceProducts.length > 0) {
        binningFormModel.useAsContextProduct(sourceProducts[0]);
        return;
      }
      String[] sourceProductPaths=binningFormModel.getSourceProductPaths();
      if (sourceProductPaths != null && sourceProductPaths.length > 0) {
        openFirstProduct(sourceProductPaths);
        return;
      }
      binningFormModel.useAsContextProduct(null);
    }
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
      contentsChanged(e);
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      contentsChanged(e);
    }
  }
;
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setPropertyNameLastOpenInputDir(""String_Node_Str"");
  sourceProductList.setPropertyNameLastOpenedFormat(""String_Node_Str"");
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.setXAxis(false);
  binningFormModel.getBindingContext().bind(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCT_PATHS,sourceProductList);
  JComponent[] panels=sourceProductList.getComponents();
  sourceProductPanel.add(panels[0],BorderLayout.CENTER);
  sourceProductPanel.add(panels[1],BorderLayout.EAST);
  return sourceProductPanel;
}"
62487,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      _MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=binningFormModel.getPropertyValue(BinningFormModel.PROPERTY_KEY_SOURCE_PRODUCTS);
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
  contentsChanged(e);
}"
62488,"private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}","private void maybeCheckForMultisize(Product product){
  final Product resampledProduct=MultiSizeIssue.maybeResample(product);
  if (resampledProduct != null) {
    productListModel.setSelectedItem(resampledProduct);
  }
 else {
    productListModel.setSelectedItem(null);
    for (int i=0; i < getProductCount(); i++) {
      final Object element=productListModel.getElementAt(i);
      if (element != null && element instanceof Product) {
        final Product someProduct=(Product)element;
        if (!someProduct.isMultiSize()) {
          productListModel.setSelectedItem(someProduct);
          break;
        }
      }
    }
  }
}"
62489,"@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      _MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
}","@Override public void intervalAdded(ListDataEvent e){
  final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
  final Product[] newSourceProducts=sourceProductList.getSourceProducts();
  for (  Product newSourceProduct : newSourceProducts) {
    if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
      MultiSizeIssue.maybeResample(newSourceProduct);
    }
  }
}"
62490,"PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          _MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}","PixelExtractionIOForm(final AppContext appContext,PropertyContainer container,ListDataListener changeListener){
  this.appContext=appContext;
  this.container=container;
  context=new BindingContext(container);
  final TableLayout tableLayout=new TableLayout(3);
  tableLayout.setTableAnchor(TableLayout.Anchor.NORTHWEST);
  tableLayout.setTableFill(TableLayout.Fill.HORIZONTAL);
  tableLayout.setTablePadding(4,4);
  tableLayout.setColumnPadding(0,new Insets(3,4,4,4));
  tableLayout.setTableWeightX(0.0);
  tableLayout.setTableWeightY(0.0);
  tableLayout.setColumnWeightX(1,1.0);
  tableLayout.setCellWeightY(0,1,1.0);
  tableLayout.setCellFill(0,1,TableLayout.Fill.BOTH);
  tableLayout.setCellColspan(3,1,2);
  panel=new JPanel(tableLayout);
  sourceProductList=new SourceProductList(appContext);
  sourceProductList.setProductFilter(product -> !product.isMultiSize());
  sourceProductList.setPropertyNameLastOpenedFormat(PROPERTY_NAME_LAST_OPEN_FORMAT);
  sourceProductList.setPropertyNameLastOpenInputDir(PROPERTY_NAME_LAST_OPEN_INPUT_DIR);
  sourceProductList.addChangeListener(changeListener);
  sourceProductList.addChangeListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      final Product[] propertySourceProducts=container.getValue(""String_Node_Str"");
      final Product[] newSourceProducts=sourceProductList.getSourceProducts();
      for (      Product newSourceProduct : newSourceProducts) {
        if ((propertySourceProducts == null || !ArrayUtils.isMemberOf(newSourceProduct,propertySourceProducts)) && newSourceProduct.isMultiSize()) {
          MultiSizeIssue.maybeResample(newSourceProduct);
        }
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
    }
  }
);
  sourceProductList.setXAxis(true);
  context.bind(""String_Node_Str"",sourceProductList);
  JComponent[] components=sourceProductList.getComponents();
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(components[0]);
  panel.add(components[1]);
  panel.add(new JLabel(""String_Node_Str""));
  panel.add(new TimeExtractionPane(container));
  panel.add(new JLabel(""String_Node_Str""));
  JLabel outputDirLabel=new JLabel(""String_Node_Str"");
  panel.add(outputDirLabel);
  outputDirTextField=new JTextField();
  outputDirTextField.setEditable(false);
  outputDirTextField.setPreferredSize(new Dimension(80,outputDirTextField.getPreferredSize().height));
  String path=getDefaultOutputPath(appContext);
  setOutputDirPath(path);
  panel.add(outputDirTextField);
  AbstractButton outputDirChooserButton=createOutputDirChooserButton(container.getProperty(""String_Node_Str""));
  panel.add(outputDirChooserButton);
  JLabel filePrefixLabel=new JLabel(""String_Node_Str"");
  JTextField filePrefixField=createFilePrefixField(container.getProperty(""String_Node_Str""));
  panel.add(filePrefixLabel);
  panel.add(filePrefixField);
}"
62491,"/** 
 * @return {@code Boolean.TRUE} on success, {@code Boolean.FALSE} on failure, or {@code null} on cancellation.
 */
public Boolean execute(){
  Product product=productRef.get();
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return false;
      }
    }
    return exportProduct(product,(String)getValue(PROPERTY_FORMAT_NAME));
  }
 else {
    return true;
  }
}","/** 
 * @return {@code Boolean.TRUE} on success, {@code Boolean.FALSE} on failure, or {@code null} on cancellation.
 */
public Boolean execute(){
  Product product=productRef.get();
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return false;
      }
    }
    return exportProduct(product,(String)getValue(PROPERTY_FORMAT_NAME));
  }
 else {
    return true;
  }
}"
62492,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null) {
    Product product=sceneView.getProduct();
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue.maybeResample(product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
 else {
        return;
      }
    }
    exportMaskPixels(product);
  }
}"
62493,"/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    _MultiSizeIssue.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}","/** 
 * Invoked when a command action is performed.
 * @param event the command event
 */
@Override public void actionPerformed(ActionEvent event){
  final ProductSceneView sceneView=SnapApp.getDefault().getSelectedProductSceneView();
  if (sceneView != null && sceneView.getProduct().isMultiSize()) {
    MultiSizeIssue.maybeResample(sceneView.getProduct());
  }
 else {
    exportTransectPixels();
  }
}"
62494,"private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}","private void copyPixelInfoStringToClipboard(){
  final ProductSceneView view=getCurrentSceneView();
  if (view != null) {
    Product product=view.getProduct();
    if (product != null) {
      if (product.isMultiSize()) {
        final Product resampledProduct=MultiSizeIssue.maybeResample(product);
        if (resampledProduct != null) {
          product=resampledProduct;
        }
 else {
          return;
        }
      }
      SystemUtils.copyToClipboard(product.createPixelInfoString(view.getCurrentPixelX(),view.getCurrentPixelY()));
    }
  }
}"
62495,"@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}","@Override public void actionPerformed(final ActionEvent event){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewHSV(product,HELP_ID);
  }
}"
62496,"@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=_MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (product != null) {
    if (product.isMultiSize()) {
      final Product resampledProduct=MultiSizeIssue.maybeResample(this.product);
      if (resampledProduct != null) {
        product=resampledProduct;
      }
    }
    openProductSceneViewRGB(product,HELP_ID);
  }
}"
62497,"@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (_MultiSizeIssue.isMultiSize(product)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final ProductNodeList<Product> products=new ProductNodeList<>();
  Product[] openedProducts=SnapApp.getDefault().getProductManager().getProducts();
  for (  Product prod : openedProducts) {
    products.add(prod);
  }
  Product product=SnapApp.getDefault().getSelectedProduct(EXPLORER);
  if (product == null) {
    product=products.getAt(0);
  }
  if (MultiSizeIssue.isMultiSize(product)) {
    final Product resampledProduct=MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      product=resampledProduct;
      products.add(resampledProduct);
    }
  }
  Collection<? extends RasterDataNode> selectedRasters=Utilities.actionsGlobalContext().lookupAll(RasterDataNode.class);
  String expression=selectedRasters.stream().map(ProductNode::getName).collect(Collectors.joining(""String_Node_Str""));
  BandMathsDialog bandMathsDialog=new BandMathsDialog(product,products,expression,HELP_ID);
  bandMathsDialog.show();
}"
62498,"@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}","@Override public void actionPerformed(ActionEvent actionEvent){
  final Product product=virtualBand.getProduct();
  if (product != null && product.isMultiSize()) {
    virtualBand=null;
    final Product resampledProduct=MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      final Band band=resampledProduct.getBand(virtualBand.getName());
      if (band instanceof VirtualBand) {
        virtualBand=(VirtualBand)band;
      }
    }
  }
  if (virtualBand != null) {
    PropagateUncertaintyDialog dialog=new PropagateUncertaintyDialog(virtualBand);
    dialog.show();
  }
}"
62499,"private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (_MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}","private static void copyMaskPixel(Mask[] selectedMasks,Product sourceProduct,Product[] maskPixelTargetProducts){
  if (MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
      for (int i=0; i < selectedMasks.length; i++) {
        Mask selectedMask=selectedMasks[i];
        selectedMasks[i]=sourceProduct.getMaskGroup().get(selectedMask.getName());
      }
    }
 else {
      return;
    }
  }
  for (  Product targetProduct : maskPixelTargetProducts) {
    if (sourceProduct.isCompatibleProduct(targetProduct,1.0e-3f)) {
      copyBandData(selectedMasks,targetProduct);
    }
 else {
      reprojectBandData(selectedMasks,sourceProduct,targetProduct);
    }
  }
}"
62500,"private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}","private void checkForMultiSize(Product product){
  if (product != null && product.isMultiSize()) {
    final Product resampledProduct=MultiSizeIssue.maybeResample(product);
    if (resampledProduct != null) {
      selectionChanged(resampledProduct,null,null);
    }
  }
}"
62501,"public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (_MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=_MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}","public static void createSubset(Product sourceProduct,Rectangle bounds){
  if (MultiSizeIssue.isMultiSize(sourceProduct)) {
    final Product resampledProduct=MultiSizeIssue.maybeResample(sourceProduct);
    if (resampledProduct != null) {
      sourceProduct=resampledProduct;
    }
 else {
      return;
    }
  }
  final String subsetName=""String_Node_Str"" + CreateSubsetAction.subsetNumber + ""String_Node_Str""+ sourceProduct.getName();
  final ProductSubsetDef initSubset=new ProductSubsetDef();
  initSubset.setRegion(bounds);
  initSubset.setNodeNames(sourceProduct.getBandNames());
  initSubset.addNodeNames(sourceProduct.getTiePointGridNames());
  initSubset.setIgnoreMetadata(false);
  final ProductSubsetDialog subsetDialog=new ProductSubsetDialog(SnapApp.getDefault().getMainFrame(),sourceProduct,initSubset);
  if (subsetDialog.show() != ProductSubsetDialog.ID_OK) {
    return;
  }
  final ProductSubsetDef subsetDef=subsetDialog.getProductSubsetDef();
  if (subsetDef == null) {
    Dialogs.showInformation(Bundle.CTL_CreateSubsetFromViewAction_Title(),""String_Node_Str"",null);
    return;
  }
  try {
    final Product subset=sourceProduct.createSubset(subsetDef,subsetName,sourceProduct.getDescription());
    SnapApp.getDefault().getProductManager().addProduct(subset);
    CreateSubsetAction.subsetNumber++;
  }
 catch (  Exception e) {
    final String msg=""String_Node_Str"" + e.getMessage();
    SnapApp.getDefault().handleError(msg,e);
  }
}"
62502,"private JTable createAdaptersPanel(){
  java.util.List<ToolAdapterOperatorDescriptor> toolboxSpis=new ArrayList<>();
  toolboxSpis.addAll(ToolAdapterRegistry.INSTANCE.getOperatorMap().values().stream().map(e -> (ToolAdapterOperatorDescriptor)e.getOperatorDescriptor()).collect(Collectors.toList()));
  toolboxSpis.sort((o1,o2) -> o1.getAlias().compareTo(o2.getAlias()));
  OperatorsTableModel model=new OperatorsTableModel(toolboxSpis);
  operatorsTable=new JTable(model);
  operatorsTable.getColumnModel().getColumn(0).setMaxWidth(250);
  operatorsTable.getColumnModel().getColumn(1).setMaxWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  operatorsTable.addMouseListener(new MouseListener(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        int selectedRow=operatorsTable.getSelectedRow();
        operatorsTable.repaint();
        ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
        AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,false);
        dialog.show();
        refreshContent();
      }
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
    }
  }
);
  return operatorsTable;
}","private JTable createAdaptersPanel(){
  java.util.List<ToolAdapterOperatorDescriptor> toolboxSpis=new ArrayList<>();
  toolboxSpis.addAll(ToolAdapterRegistry.INSTANCE.getOperatorMap().values().stream().map(e -> (ToolAdapterOperatorDescriptor)e.getOperatorDescriptor()).collect(Collectors.toList()));
  toolboxSpis.sort((o1,o2) -> o1.getAlias().compareTo(o2.getAlias()));
  OperatorsTableModel model=new OperatorsTableModel(toolboxSpis);
  operatorsTable=new JTable(model);
  operatorsTable.getColumnModel().getColumn(0).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.getColumnModel().getColumn(0).setMaxWidth(300);
  operatorsTable.getColumnModel().getColumn(1).setResizable(true);
  operatorsTable.getColumnModel().getColumn(1).setPreferredWidth(LABEL_COLUMN_WIDTH);
  operatorsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  operatorsTable.addMouseListener(new MouseListener(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        int selectedRow=operatorsTable.getSelectedRow();
        operatorsTable.repaint();
        ToolAdapterOperatorDescriptor operatorDesc=((OperatorsTableModel)operatorsTable.getModel()).getObjectAt(selectedRow);
        AbstractAdapterEditor dialog=AbstractAdapterEditor.createEditorDialog(appContext,getJDialog(),operatorDesc,false);
        dialog.show();
        refreshContent();
      }
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
    }
  }
);
  return operatorsTable;
}"
62503,"private void initialize(ToolAdapterOperatorDescriptor descriptor){
  this.operatorDescriptor=descriptor;
  this.parameterSupport=new OperatorParameterSupport(descriptor);
  form=new ToolExecutionForm(appContext,descriptor,parameterSupport.getPropertySet(),getTargetProductSelector());
  OperatorMenu operatorMenu=new OperatorMenu(this.getJDialog(),descriptor,parameterSupport,appContext,helpID);
  getJDialog().setJMenuBar(operatorMenu.createDefaultMenu());
  EscapeAction.register(getJDialog());
}","private void initialize(ToolAdapterOperatorDescriptor descriptor){
  this.operatorDescriptor=descriptor;
  this.parameterSupport=new OperatorParameterSupport(descriptor);
  form=new ToolExecutionForm(appContext,descriptor,parameterSupport.getPropertySet(),getTargetProductSelector());
  OperatorMenu operatorMenu=new OperatorMenu(this.getJDialog(),descriptor,parameterSupport,appContext,helpID);
  getJDialog().setJMenuBar(operatorMenu.createDefaultMenu());
  EscapeAction.register(getJDialog());
  updatePrimitiveZeroValuesHashMap();
}"
62504,"public synchronized void initProducts(){
  productListModel.removeAllElements();
  for (  Product product : appContext.getProductManager().getProducts()) {
    addProduct(product);
  }
  final Product selectedProduct=appContext.getSelectedProduct();
  if (selectedProduct != null && productFilter.accept(selectedProduct)) {
    productListModel.setSelectedItem(selectedProduct);
  }
  appContext.getProductManager().addListener(productManagerListener);
}","public synchronized void initProducts(){
  productListModel.removeAllElements();
  for (  Product product : appContext.getProductManager().getProducts()) {
    addProduct(product);
  }
  Product selectedProduct=appContext.getSelectedProduct();
  final ProductNode productNode=Utilities.actionsGlobalContext().lookup(ProductNode.class);
  if (productNode != null) {
    selectedProduct=productNode.getProduct();
  }
  if (selectedProduct != null && productFilter.accept(selectedProduct)) {
    productListModel.setSelectedItem(selectedProduct);
  }
  appContext.getProductManager().addListener(productManagerListener);
}"
62505,"private JComponent addBoolPropertyEditor(JPanel parent,String label,String propertyName,Boolean value,int line){
  parent.add(new JLabel(label),getConstraints(line,1,1));
  PropertyDescriptor propertyDescriptor=container.getDescriptor(propertyName);
  CheckBoxEditor boolEditor=new CheckBoxEditor();
  JComponent editorComponent=boolEditor.createEditorComponent(propertyDescriptor,context);
  ((JCheckBox)editorComponent).setSelected(value);
  editorComponent.setPreferredSize(new Dimension(30,30));
  GridBagConstraints constraints=getConstraints(line,0,1);
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_END;
  parent.add(editorComponent,constraints);
  return editorComponent;
}","private JComponent addBoolPropertyEditor(JPanel parent,String label,String propertyName,Boolean value,int line){
  parent.add(new JLabel(label),getConstraints(line,1,1));
  PropertyDescriptor propertyDescriptor=container.getDescriptor(propertyName);
  CheckBoxEditor boolEditor=new CheckBoxEditor();
  JComponent editorComponent=boolEditor.createEditorComponent(propertyDescriptor,valuesContext);
  ((JCheckBox)editorComponent).setSelected(value);
  editorComponent.setPreferredSize(new Dimension(30,30));
  GridBagConstraints constraints=getConstraints(line,0,1);
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_END;
  parent.add(editorComponent,constraints);
  return editorComponent;
}"
62506,"private JComponent addTextPropertyEditor(JPanel parent,String label,String propertyName,String value,int line,boolean isRequired){
  parent.add(new JLabel(label),getConstraints(line,0,1));
  PropertyDescriptor propertyDescriptor=container.getDescriptor(propertyName);
  TextFieldEditor textEditor=new TextFieldEditor();
  JComponent editorComponent=textEditor.createEditorComponent(propertyDescriptor,context);
  ((JTextField)editorComponent).setText(value);
  if (isRequired) {
    editorComponent.setInputVerifier(new RequiredFieldValidator(""String_Node_Str""));
  }
  parent.add(editorComponent,getConstraints(line,1,1));
  return editorComponent;
}","private JComponent addTextPropertyEditor(JPanel parent,String label,String propertyName,String value,int line,boolean isRequired){
  parent.add(new JLabel(label),getConstraints(line,0,1));
  PropertyDescriptor propertyDescriptor=container.getDescriptor(propertyName);
  TextFieldEditor textEditor=new TextFieldEditor();
  JComponent editorComponent=textEditor.createEditorComponent(propertyDescriptor,valuesContext);
  ((JTextField)editorComponent).setText(value);
  if (isRequired) {
    editorComponent.setInputVerifier(new RequiredFieldValidator(""String_Node_Str""));
  }
  parent.add(editorComponent,getConstraints(line,1,1));
  return editorComponent;
}"
62507,"public JPanel createMainPanel(){
  GridBagLayout layout=new GridBagLayout();
  layout.columnWidths=new int[]{100,390};
  mainPanel=new JPanel(layout);
  container=PropertyContainer.createObjectBacked(parameter);
  context=new BindingContext(container);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getName(),0,true);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getAlias(),1,true);
  mainPanel.add(new JLabel(""String_Node_Str""),getConstraints(2,0,1));
  JComboBox comboEditor=new JComboBox(typesMap.keySet().toArray());
  comboEditor.setSelectedItem(typesMap.getKey(parameter.getDataType()));
  comboEditor.addActionListener(e -> {
    JComboBox cb=(JComboBox)e.getSource();
    String typeName=(String)cb.getSelectedItem();
    if (!parameter.getDataType().equals((Class<?>)typesMap.get(typeName))) {
      parameter.setDataType((Class<?>)typesMap.get(typeName));
      try {
        if (editorComponent != null) {
          mainPanel.remove(editorComponent);
        }
        editorComponent=uiWrapper.reloadUIComponent((Class<?>)typesMap.get(typeName));
        if (!(""String_Node_Str"".equals(typeName) || ""String_Node_Str"".equals(typeName))) {
          editorComponent.setInputVerifier(new TypedValueValidator(""String_Node_Str"",parameter.getDataType()));
        }
        mainPanel.add(editorComponent,getConstraints(3,1,1));
        mainPanel.revalidate();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  mainPanel.add(comboEditor,getConstraints(2,1,1));
  mainPanel.add(new JLabel(""String_Node_Str""),getConstraints(3,0,1));
  try {
    editorComponent=uiWrapper.getUIComponent();
    mainPanel.add(editorComponent,getConstraints(3,1,1));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getDescription(),4,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getLabel(),5,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getUnit(),6,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getInterval(),7,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",StringUtils.join(parameter.getValueSet(),""String_Node_Str""),8,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getCondition(),9,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getPattern(),10,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getFormat(),11,false);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isNotNull(),12);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isNotEmpty(),13);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getItemAlias(),14,false);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isDeprecated(),15);
  return mainPanel;
}","public JPanel createMainPanel(){
  GridBagLayout layout=new GridBagLayout();
  layout.columnWidths=new int[]{100,390};
  mainPanel=new JPanel(layout);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getName(),0,true);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getAlias(),1,true);
  mainPanel.add(new JLabel(""String_Node_Str""),getConstraints(2,0,1));
  JComboBox comboEditor=new JComboBox(typesMap.keySet().toArray());
  comboEditor.setSelectedItem(typesMap.getKey(parameter.getDataType()));
  comboEditor.addActionListener(ev -> {
    JComboBox cb=(JComboBox)ev.getSource();
    String typeName=(String)cb.getSelectedItem();
    if (!parameter.getDataType().equals((Class<?>)typesMap.get(typeName))) {
      parameter.setDataType((Class<?>)typesMap.get(typeName));
      parameter.setValueSet(null);
      paramContext.getPropertySet().getProperty(parameter.getName()).getDescriptor().setValueSet(null);
      try {
        valuesContext.getPropertySet().getProperty(""String_Node_Str"").setValue(null);
      }
 catch (      ValidationException e) {
        logger.warning(e.getMessage());
      }
      try {
        if (editorComponent != null) {
          mainPanel.remove(editorComponent);
        }
        editorComponent=uiWrapper.reloadUIComponent((Class<?>)typesMap.get(typeName));
        if (!(""String_Node_Str"".equals(typeName) || ""String_Node_Str"".equals(typeName))) {
          editorComponent.setInputVerifier(new TypedValueValidator(""String_Node_Str"",parameter.getDataType()));
        }
        mainPanel.add(editorComponent,getConstraints(3,1,1));
        mainPanel.revalidate();
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        SnapDialogs.showError(e.getMessage());
      }
    }
  }
);
  mainPanel.add(comboEditor,getConstraints(2,1,1));
  mainPanel.add(new JLabel(""String_Node_Str""),getConstraints(3,0,1));
  try {
    editorComponent=uiWrapper.getUIComponent();
    mainPanel.add(editorComponent,getConstraints(3,1,1));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getDescription(),4,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getLabel(),5,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getUnit(),6,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getInterval(),7,false);
  JComponent valueSetEditor=addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",StringUtils.join(parameter.getValueSet(),ArrayConverter.SEPARATOR),8,false);
  valueSetEditor.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent ev){
      try {
        String newValueSet=((JTextField)valueSetEditor).getText();
        if (newValueSet.isEmpty()) {
          parameter.setValueSet(null);
          valuesContext.getPropertySet().getProperty(""String_Node_Str"").setValue(null);
        }
 else {
          parameter.setValueSet(newValueSet.split(ArrayConverter.SEPARATOR));
          valuesContext.getPropertySet().getProperty(""String_Node_Str"").setValue(newValueSet.split(ArrayConverter.SEPARATOR));
        }
        if (editorComponent != null) {
          mainPanel.remove(editorComponent);
        }
        createContextForValueEditor();
        if (!(File.class.equals(parameter.getDataType()) || parameter.getDataType().isArray())) {
          editorComponent.setInputVerifier(new TypedValueValidator(""String_Node_Str"",parameter.getDataType()));
        }
        mainPanel.add(editorComponent,getConstraints(3,1,1));
        mainPanel.revalidate();
      }
 catch (      Exception e) {
        logger.warning(e.getMessage());
        SnapDialogs.showError(e.getMessage());
      }
    }
  }
);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getCondition(),9,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getPattern(),10,false);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getFormat(),11,false);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isNotNull(),12);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isNotEmpty(),13);
  addTextPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.getItemAlias(),14,false);
  addBoolPropertyEditor(mainPanel,""String_Node_Str"",""String_Node_Str"",parameter.isDeprecated(),15);
  return mainPanel;
}"
62508,"public ToolParameterEditorDialog(AppContext appContext,ToolParameterDescriptor parameter,PropertyMemberUIWrapper uiWrapper){
  super(appContext.getApplicationWindow(),parameter.getName(),ID_OK_CANCEL,helpID);
  this.oldParameter=parameter;
  this.parameter=new ToolParameterDescriptor(parameter);
  this.uiWrapper=uiWrapper;
  setContent(createMainPanel());
  getJDialog().setPreferredSize(new Dimension(500,500));
}","public ToolParameterEditorDialog(AppContext appContext,String title,ToolParameterDescriptor parameter,Object value) throws Exception {
  super(appContext.getApplicationWindow(),parameter.getName(),ID_OK_CANCEL,helpID);
  this.oldParameter=parameter;
  this.parameter=new ToolParameterDescriptor(parameter);
  if (value != null) {
    this.parameter.setDefaultValue(value.toString());
  }
  container=PropertyContainer.createObjectBacked(parameter);
  valuesContext=new BindingContext(container);
  createContextForValueEditor();
  this.logger=Logger.getLogger(ToolAdapterEditorDialog.class.getName());
  setContent(createMainPanel());
  getJDialog().setPreferredSize(new Dimension(500,500));
}"
62509,"protected void onOK(){
  super.onOK();
  if (parameter.getName() != null) {
    oldParameter.setName(parameter.getName());
  }
  if (parameter.getAlias() != null) {
    oldParameter.setAlias(parameter.getAlias());
  }
  if (parameter.getDataType() != null) {
    oldParameter.setDataType(parameter.getDataType());
  }
  if (parameter.getDefaultValue() != null) {
    oldParameter.setDefaultValue(parameter.getDefaultValue());
  }
  if (parameter.getDescription() != null) {
    oldParameter.setDescription(parameter.getDescription());
  }
  if (parameter.getLabel() != null) {
    oldParameter.setLabel(parameter.getLabel());
  }
  if (parameter.getUnit() != null) {
    oldParameter.setUnit(parameter.getUnit());
  }
  if (parameter.getInterval() != null) {
    oldParameter.setInterval(parameter.getInterval());
  }
  if (parameter.getValueSet() != null) {
    oldParameter.setValueSet(parameter.getValueSet());
  }
  if (parameter.getCondition() != null) {
    oldParameter.setCondition(parameter.getCondition());
  }
  if (parameter.getPattern() != null) {
    oldParameter.setPattern(parameter.getPattern());
  }
  if (parameter.getFormat() != null) {
    oldParameter.setFormat(parameter.getFormat());
  }
  oldParameter.setNotNull(parameter.isNotNull());
  oldParameter.setNotEmpty(parameter.isNotEmpty());
  if (parameter.getRasterDataNodeClass() != null) {
    oldParameter.setRasterDataNodeClass(parameter.getRasterDataNodeClass());
  }
  if (parameter.getValidatorClass() != null) {
    oldParameter.setValidatorClass(parameter.getValidatorClass());
  }
  if (parameter.getConverterClass() != null) {
    oldParameter.setConverterClass(parameter.getConverterClass());
  }
  if (parameter.getDomConverterClass() != null) {
    oldParameter.setDomConverterClass(parameter.getDomConverterClass());
  }
  if (parameter.getItemAlias() != null) {
    oldParameter.setItemAlias(parameter.getItemAlias());
  }
  oldParameter.setDeprecated(parameter.isDeprecated());
  oldParameter.setParameterType(parameter.getParameterType());
}","protected void onOK(){
  super.onOK();
  if (parameter.getName() != null) {
    oldParameter.setName(parameter.getName());
  }
  if (parameter.getAlias() != null) {
    oldParameter.setAlias(parameter.getAlias());
  }
  if (parameter.getDataType() != null) {
    oldParameter.setDataType(parameter.getDataType());
  }
  if (paramContext.getBinding(parameter.getName()).getPropertyValue() != null) {
    oldParameter.setDefaultValue(paramContext.getBinding(parameter.getName()).getPropertyValue().toString());
  }
  if (parameter.getDescription() != null) {
    oldParameter.setDescription(parameter.getDescription());
  }
  if (parameter.getLabel() != null) {
    oldParameter.setLabel(parameter.getLabel());
  }
  if (parameter.getUnit() != null) {
    oldParameter.setUnit(parameter.getUnit());
  }
  if (parameter.getInterval() != null) {
    oldParameter.setInterval(parameter.getInterval());
  }
  if (parameter.getValueSet() != null) {
    oldParameter.setValueSet(parameter.getValueSet());
  }
  if (parameter.getCondition() != null) {
    oldParameter.setCondition(parameter.getCondition());
  }
  if (parameter.getPattern() != null) {
    oldParameter.setPattern(parameter.getPattern());
  }
  if (parameter.getFormat() != null) {
    oldParameter.setFormat(parameter.getFormat());
  }
  oldParameter.setNotNull(parameter.isNotNull());
  oldParameter.setNotEmpty(parameter.isNotEmpty());
  if (parameter.getRasterDataNodeClass() != null) {
    oldParameter.setRasterDataNodeClass(parameter.getRasterDataNodeClass());
  }
  if (parameter.getValidatorClass() != null) {
    oldParameter.setValidatorClass(parameter.getValidatorClass());
  }
  if (parameter.getConverterClass() != null) {
    oldParameter.setConverterClass(parameter.getConverterClass());
  }
  if (parameter.getDomConverterClass() != null) {
    oldParameter.setDomConverterClass(parameter.getDomConverterClass());
  }
  if (parameter.getItemAlias() != null) {
    oldParameter.setItemAlias(parameter.getItemAlias());
  }
  oldParameter.setDeprecated(parameter.isDeprecated());
  oldParameter.setParameterType(parameter.getParameterType());
}"
62510,"@Override protected void onOK(){
  if (!verifyUserInput()) {
    this.getJDialog().requestFocus();
  }
 else {
    super.onOK();
    if (!this.operatorIsNew) {
      ToolAdapterActionRegistrar.removeOperatorMenu(oldOperatorDescriptor);
      ToolAdapterIO.removeOperator(oldOperatorDescriptor,false);
    }
    String oldOperatorName=oldOperatorDescriptor.getName();
    if (oldOperatorDescriptor.isSystem() && oldOperatorName.equals(newOperatorDescriptor.getName())) {
      newOperatorDescriptor.setName(newOperatorDescriptor.getName() + ""String_Node_Str"");
      newOperatorDescriptor.setAlias(newOperatorDescriptor.getAlias() + ""String_Node_Str"");
    }
    newOperatorDescriptor.setSystem(false);
    if (!ToolAdapterOperatorDescriptor.SOURCE_PACKAGE.equals(newOperatorDescriptor.getSource())) {
      newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
    }
    newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
    java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
    toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
      if (param.isTemplateBefore() || param.isTemplateAfter()) {
        param.setDefaultValue(ToolAdapterIO.prettifyTemplateParameterPath(new File(paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue().toString()),newOperatorDescriptor.getAlias()).toString());
      }
 else {
        param.setDefaultValue(paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue().toString());
      }
    }
);
    java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName())).collect(Collectors.toList());
    newOperatorDescriptor.removeParamDescriptors(remParameters);
    try {
      String menuLocation=newOperatorDescriptor.getMenuLocation();
      if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
        newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
      }
      String templateContent=this.templateContent.getText();
      int idx=templateContent.lastIndexOf(ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID + ""String_Node_Str"");
      if (idx > 0) {
        String value=templateContent.substring(idx + (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID + ""String_Node_Str"").length(),templateContent.indexOf(""String_Node_Str"",idx));
        int maxNum=Integer.valueOf(value) + 1;
        newOperatorDescriptor.setSourceProductCount(maxNum);
      }
 else {
        idx=templateContent.lastIndexOf(ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE + ""String_Node_Str"");
        if (idx > 0) {
          String value=templateContent.substring(idx + (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE + ""String_Node_Str"").length(),templateContent.indexOf(""String_Node_Str"",idx));
          int maxNum=Integer.valueOf(value) + 1;
          newOperatorDescriptor.setSourceProductCount(maxNum);
        }
      }
      ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
      ToolAdapterActionRegistrar.registerOperatorMenu(newOperatorDescriptor);
    }
 catch (    Exception e) {
      logger.warning(e.getMessage());
      SnapDialogs.showError(e.getMessage());
    }
  }
}","@Override protected void onOK(){
  if (!verifyUserInput()) {
    this.getJDialog().requestFocus();
  }
 else {
    super.onOK();
    if (!this.operatorIsNew) {
      ToolAdapterActionRegistrar.removeOperatorMenu(oldOperatorDescriptor);
      ToolAdapterIO.removeOperator(oldOperatorDescriptor,false);
    }
    String oldOperatorName=oldOperatorDescriptor.getName();
    if (oldOperatorDescriptor.isSystem() && oldOperatorName.equals(newOperatorDescriptor.getName())) {
      newOperatorDescriptor.setName(newOperatorDescriptor.getName() + ""String_Node_Str"");
      newOperatorDescriptor.setAlias(newOperatorDescriptor.getAlias() + ""String_Node_Str"");
    }
    newOperatorDescriptor.setSystem(false);
    if (!ToolAdapterOperatorDescriptor.SOURCE_PACKAGE.equals(newOperatorDescriptor.getSource())) {
      newOperatorDescriptor.setSource(ToolAdapterOperatorDescriptor.SOURCE_USER);
    }
    newOperatorDescriptor.setTemplateFileLocation(newOperatorDescriptor.getAlias() + ToolAdapterConstants.TOOL_VELO_TEMPLATE_SUFIX);
    java.util.List<TemplateParameterDescriptor> toolParameterDescriptors=newOperatorDescriptor.getToolParameterDescriptors();
    toolParameterDescriptors.stream().filter(param -> paramsTable.getBindingContext().getBinding(param.getName()) != null).filter(param -> paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue() != null).forEach(param -> {
      if (param.isTemplateBefore() || param.isTemplateAfter()) {
        param.setDefaultValue(ToolAdapterIO.prettifyTemplateParameterPath(new File(paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue().toString()),newOperatorDescriptor.getAlias()).toString());
      }
 else {
        Object defaultValue=paramsTable.getBindingContext().getBinding(param.getName()).getPropertyValue();
        String defaultValueString=""String_Node_Str"";
        if (defaultValue.getClass().isArray()) {
          defaultValueString=String.join(ArrayConverter.SEPARATOR,Arrays.asList((Object[])defaultValue).stream().map(value -> value.toString()).collect(Collectors.toList()));
        }
 else {
          defaultValueString=defaultValue.toString();
        }
        param.setDefaultValue(defaultValueString);
      }
    }
);
    java.util.List<TemplateParameterDescriptor> remParameters=toolParameterDescriptors.stream().filter(param -> ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID.equals(param.getName())).collect(Collectors.toList());
    newOperatorDescriptor.removeParamDescriptors(remParameters);
    try {
      String menuLocation=newOperatorDescriptor.getMenuLocation();
      if (menuLocation != null && !menuLocation.startsWith(""String_Node_Str"")) {
        newOperatorDescriptor.setMenuLocation(""String_Node_Str"" + menuLocation);
      }
      String templateContent=this.templateContent.getText();
      int idx=templateContent.lastIndexOf(ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID + ""String_Node_Str"");
      if (idx > 0) {
        String value=templateContent.substring(idx + (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_ID + ""String_Node_Str"").length(),templateContent.indexOf(""String_Node_Str"",idx));
        int maxNum=Integer.valueOf(value) + 1;
        newOperatorDescriptor.setSourceProductCount(maxNum);
      }
 else {
        idx=templateContent.lastIndexOf(ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE + ""String_Node_Str"");
        if (idx > 0) {
          String value=templateContent.substring(idx + (ToolAdapterConstants.TOOL_SOURCE_PRODUCT_FILE + ""String_Node_Str"").length(),templateContent.indexOf(""String_Node_Str"",idx));
          int maxNum=Integer.valueOf(value) + 1;
          newOperatorDescriptor.setSourceProductCount(maxNum);
        }
      }
      ToolAdapterIO.saveAndRegisterOperator(newOperatorDescriptor,templateContent);
      ToolAdapterActionRegistrar.registerOperatorMenu(newOperatorDescriptor);
    }
 catch (    Exception e) {
      logger.warning(e.getMessage());
      SnapDialogs.showError(e.getMessage());
    }
  }
}"
62511,"/** 
 * Internal method to handle scaling correctly. This method must not be called by a client. Clients should always use the method </code>worked(int)</code>.
 * @param work the amount of work done
 */
public void internalWorked(final double work){
  currentWork+=work;
  currentWorkUI=(int)(totalWorkUI * currentWork / totalWork);
  if (currentWorkUI > lastWorkUI) {
    runInUI(new Runnable(){
      public void run(){
        if (progressBar != null) {
          final int progress=progressBar.getMinimum() + currentWorkUI;
          progressBar.setValue(progress);
          setVisibility(true);
        }
        lastWorkUI=currentWorkUI;
      }
    }
);
  }
}","/** 
 * Internal method to handle scaling correctly. This method must not be called by a client. Clients should always use the method <code>worked(int)</code>.
 * @param work the amount of work done
 */
public void internalWorked(final double work){
  currentWork+=work;
  currentWorkUI=(int)(totalWorkUI * currentWork / totalWork);
  if (currentWorkUI > lastWorkUI) {
    runInUI(new Runnable(){
      public void run(){
        if (progressBar != null) {
          final int progress=progressBar.getMinimum() + currentWorkUI;
          progressBar.setValue(progress);
          setVisibility(true);
        }
        lastWorkUI=currentWorkUI;
      }
    }
);
  }
}"
62512,"/** 
 * Action factory method used in NetBeans   {@code layer.xml} file, e.g.<p> <pre> &lt;file name=""org-esa-snap-csv-dataio-ExportCSVProduct.instance""&gt; &lt;attr name=""instanceCreate"" methodvalue=""org.openide.awt.Actions.context""/&gt; &lt;attr name=""type"" stringvalue=""org.esa.snap.framework.datamodel.ProductNode""/&gt; &lt;attr name=""delegate"" methodvalue=""ExportProductAction.create""/&gt; &lt;attr name=""selectionType"" stringvalue=""EXACTLY_ONE""/&gt; &lt;attr name=""displayName"" stringvalue=""CSV Product""/&gt; &lt;attr name=""formatName"" stringvalue=""CSV""/&gt; &lt;attr name=""useAllFileFilter"" boolvalue=""true""/&gt; &lt;attr name=""helpId"" stringvalue=""exportCsvProduct""/&gt; &lt;attr name=""ShortDescription"" stringvalue="">Writes a product in CSV format.""/&gt; &lt;/file&gt; </pre>
 * @param configuration Configuration attributes from layer.xml.
 * @return The action.
 * @since SNAP 2
 */
public static ExportProductAction create(Map<String,Object> configuration){
  ExportProductAction exportProductAction=new ExportProductAction();
  exportProductAction.setFormatName((String)configuration.get(PROPERTY_FORMAT_NAME));
  exportProductAction.setHelpCtx((String)configuration.get(""String_Node_Str""));
  exportProductAction.setUseAllFileFilter((Boolean)configuration.get(PROPERTY_USE_ALL_FILE_FILTER));
  return exportProductAction;
}","/** 
 * Action factory method used in NetBeans   {@code layer.xml} file, e.g.<p> <pre> &lt;file name=""org-esa-snap-csv-dataio-ExportCSVProduct.instance""&gt; &lt;attr name=""instanceCreate"" methodvalue=""org.openide.awt.Actions.context""/&gt; &lt;attr name=""type"" stringvalue=""org.esa.snap.framework.datamodel.ProductNode""/&gt; &lt;attr name=""delegate"" methodvalue=""ExportProductAction.create""/&gt; &lt;attr name=""selectionType"" stringvalue=""EXACTLY_ONE""/&gt; &lt;attr name=""displayName"" stringvalue=""CSV Product""/&gt; &lt;attr name=""formatName"" stringvalue=""CSV""/&gt; &lt;attr name=""useAllFileFilter"" boolvalue=""true""/&gt; &lt;attr name=""helpId"" stringvalue=""exportCsvProduct""/&gt; &lt;attr name=""ShortDescription"" stringvalue=""Writes a product in CSV format.""/&gt; &lt;/file&gt; </pre>
 * @param configuration Configuration attributes from layer.xml.
 * @return The action.
 * @since SNAP 2
 */
public static ExportProductAction create(Map<String,Object> configuration){
  ExportProductAction exportProductAction=new ExportProductAction();
  exportProductAction.setFormatName((String)configuration.get(PROPERTY_FORMAT_NAME));
  exportProductAction.setHelpCtx((String)configuration.get(""String_Node_Str""));
  exportProductAction.setUseAllFileFilter((Boolean)configuration.get(PROPERTY_USE_ALL_FILE_FILTER));
  return exportProductAction;
}"
62513,"/** 
 * Sets the filter to be used to filter the displayed bands. <p/>
 * @param displayFilter the filter, can be null
 */
public void setDisplayFilter(DisplayFilter displayFilter){
  if (this.displayFilter != displayFilter) {
    if (this.displayFilter != null) {
      this.displayFilter.removePropertyChangeListener(displayFilterListener);
    }
    this.displayFilter=displayFilter;
    this.displayFilter.addPropertyChangeListener(displayFilterListener);
  }
}","/** 
 * Sets the filter to be used to filter the displayed bands. <p>
 * @param displayFilter the filter, can be null
 */
public void setDisplayFilter(DisplayFilter displayFilter){
  if (this.displayFilter != displayFilter) {
    if (this.displayFilter != null) {
      this.displayFilter.removePropertyChangeListener(displayFilterListener);
    }
    this.displayFilter=displayFilter;
    this.displayFilter.addPropertyChangeListener(displayFilterListener);
  }
}"
62514,"/** 
 * Sets the current help set. If the current help broker is not null, the help set will be assigned to it. Otherwise, a help broker will be created from the given help set. <p/> This method can be used to switch to an other helpset.
 * @param helpSet the help set to be set
 */
private static void set(HelpSet helpSet){
  if (helpBroker == null) {
    helpBroker=new DefaultHelpBroker(helpSet);
  }
  helpBroker.setHelpSet(helpSet);
}","/** 
 * Sets the current help set. If the current help broker is not null, the help set will be assigned to it. Otherwise, a help broker will be created from the given help set. <p> This method can be used to switch to an other helpset.
 * @param helpSet the help set to be set
 */
private static void set(HelpSet helpSet){
  if (helpBroker == null) {
    helpBroker=new DefaultHelpBroker(helpSet);
  }
  helpBroker.setHelpSet(helpSet);
}"
62515,"/** 
 * Adds a new JavaHelp   {@link javax.help.HelpSet} to the existing help.The helpset is as a resource path to the JavaHelp helpset XML file (*.hs). The helpset and associated resources must be accessible by the given class-loader. <p/> Note that you also can add help-set instances directly to the BEAM help system by using the static  {@link HelpSys#add(javax.help.HelpSet)} method.</p> <p/> For more information on the JavaHelp architecture and API please refer to the <a href=""http://java.sun.com/products/javahelp/"">JavaHelp home page</a>. </p>
 * @param classLoader         the class loader used to load the help resources
 * @param helpsetResourcePath the resource path to the helpset file (*.hs)
 */
public final void addHelp(final ClassLoader classLoader,final String helpsetResourcePath){
  Guardian.assertNotNull(""String_Node_Str"",classLoader);
  Guardian.assertNotNullOrEmpty(""String_Node_Str"",helpsetResourcePath);
  final URL url=HelpSet.findHelpSet(classLoader,helpsetResourcePath);
  if (url == null) {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + helpsetResourcePath);
    return;
  }
  try {
    final HelpSet helpSet=new HelpSet(classLoader,url);
    HelpSys.add(helpSet);
  }
 catch (  HelpSetException e) {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + helpsetResourcePath,e);
  }
}","/** 
 * Adds a new JavaHelp   {@link javax.help.HelpSet} to the existing help.The helpset is as a resource path to the JavaHelp helpset XML file (*.hs). The helpset and associated resources must be accessible by the given class-loader. <p> Note that you also can add help-set instances directly to the BEAM help system by using the static  {@link HelpSys#add(javax.help.HelpSet)} method.</p> <p> For more information on the JavaHelp architecture and API please refer to the <a href=""http://java.sun.com/products/javahelp/"">JavaHelp home page</a>. </p>
 * @param classLoader         the class loader used to load the help resources
 * @param helpsetResourcePath the resource path to the helpset file (*.hs)
 */
public final void addHelp(final ClassLoader classLoader,final String helpsetResourcePath){
  Guardian.assertNotNull(""String_Node_Str"",classLoader);
  Guardian.assertNotNullOrEmpty(""String_Node_Str"",helpsetResourcePath);
  final URL url=HelpSet.findHelpSet(classLoader,helpsetResourcePath);
  if (url == null) {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + helpsetResourcePath);
    return;
  }
  try {
    final HelpSet helpSet=new HelpSet(classLoader,url);
    HelpSys.add(helpSet);
  }
 catch (  HelpSetException e) {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + helpsetResourcePath,e);
  }
}"
62516,"/** 
 * This method should be called after prefernces that affect the current look & feel have changed.
 */
protected final void applyLookAndFeelPreferences(){
  boolean startingUp=!isStartedUp();
  if (startingUp && uiDefaultsInitialized) {
    return;
  }
  boolean mustUpdateComponentTreeUI=initLookAndFeel();
  final UIDefaults uiDefaults=UIManager.getLookAndFeel().getDefaults();
  final boolean currentUseSystemFontSettings=uiDefaults.getBoolean(""String_Node_Str"");
  final boolean useSystemFontSettings=getPreferences().getPropertyBool(PROPERTY_KEY_APP_UI_USE_SYSTEM_FONT_SETTINGS,currentUseSystemFontSettings);
  if (currentUseSystemFontSettings != useSystemFontSettings) {
    uiDefaults.put(""String_Node_Str"",useSystemFontSettings);
    mustUpdateComponentTreeUI=true;
  }
  if (!useSystemFontSettings) {
    final Font currentMenuFont=uiDefaults.getFont(""String_Node_Str"");
    final String fontName=getPreferences().getPropertyString(PROPERTY_KEY_APP_UI_FONT_NAME,currentMenuFont.getName());
    final int fontSize=getPreferences().getPropertyInt(PROPERTY_KEY_APP_UI_FONT_SIZE,currentMenuFont.getSize());
    if (!currentMenuFont.getName().equalsIgnoreCase(fontName) || currentMenuFont.getSize() != fontSize) {
      changeUIDefaultsFonts(uiDefaults,fontName,fontSize);
      mustUpdateComponentTreeUI=true;
    }
  }
  if (mustUpdateComponentTreeUI && getMainFrame().isVisible()) {
    updateComponentTreeUI();
  }
  uiDefaultsInitialized=true;
}","/** 
 * This method should be called after preferences that affect the current look &amp; feel have changed.
 */
protected final void applyLookAndFeelPreferences(){
  boolean startingUp=!isStartedUp();
  if (startingUp && uiDefaultsInitialized) {
    return;
  }
  boolean mustUpdateComponentTreeUI=initLookAndFeel();
  final UIDefaults uiDefaults=UIManager.getLookAndFeel().getDefaults();
  final boolean currentUseSystemFontSettings=uiDefaults.getBoolean(""String_Node_Str"");
  final boolean useSystemFontSettings=getPreferences().getPropertyBool(PROPERTY_KEY_APP_UI_USE_SYSTEM_FONT_SETTINGS,currentUseSystemFontSettings);
  if (currentUseSystemFontSettings != useSystemFontSettings) {
    uiDefaults.put(""String_Node_Str"",useSystemFontSettings);
    mustUpdateComponentTreeUI=true;
  }
  if (!useSystemFontSettings) {
    final Font currentMenuFont=uiDefaults.getFont(""String_Node_Str"");
    final String fontName=getPreferences().getPropertyString(PROPERTY_KEY_APP_UI_FONT_NAME,currentMenuFont.getName());
    final int fontSize=getPreferences().getPropertyInt(PROPERTY_KEY_APP_UI_FONT_SIZE,currentMenuFont.getSize());
    if (!currentMenuFont.getName().equalsIgnoreCase(fontName) || currentMenuFont.getSize() != fontSize) {
      changeUIDefaultsFonts(uiDefaults,fontName,fontSize);
      mustUpdateComponentTreeUI=true;
    }
  }
  if (mustUpdateComponentTreeUI && getMainFrame().isVisible()) {
    updateComponentTreeUI();
  }
  uiDefaultsInitialized=true;
}"
62517,"/** 
 * Starts up the client application. <p/>Called from   {@link #startUp(com.bc.ceres.core.ProgressMonitor)} before{@link #initClientUI(com.bc.ceres.core.ProgressMonitor)} is called.<p/>Clients should override this method in order to initialize non-UI components, e.g. load plugins. <p/>The default implementation does nothing.
 * @param pm a progress monitor, can be used to signal progress
 * @throws Exception if an error occurs
 */
protected void initClient(ProgressMonitor pm) throws Exception {
}","/** 
 * Starts up the client application. <p>Called from   {@link #startUp(com.bc.ceres.core.ProgressMonitor)} before{@link #initClientUI(com.bc.ceres.core.ProgressMonitor)} is called.<p>Clients should override this method in order to initialize non-UI components, e.g. load plugins. <p>The default implementation does nothing.
 * @param pm a progress monitor, can be used to signal progress
 * @throws Exception if an error occurs
 */
protected void initClient(ProgressMonitor pm) throws Exception {
}"
62518,"/** 
 * Starts up the application. <p>The startup sequence is as follows: <ol> <li>The method <code>createSplashScreen</code> is called. If it returns non-null</li> the splash screen is shown.</li> <li> The method <code>loadPreferences</code> is called in order to load user preferences.</li> <li> The method <code>startUp</code> is called with the splash screen. Clients can override this method in order to implement application specific initialisation code.</li> <li> The method <code>applyPreferences</code> is called.</li> <li> The main frame is shown.</li> <li> The splash screen (if any) is closed.</li> </ol>
 * @param pm a progress monitor, e.g. for splash-screen
 * @throws Exception if an error occurs
 */
public void startUp(ProgressMonitor pm) throws Exception {
  if (startedUp || startingUp) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  startingUp=true;
  try {
    pm.beginTask(""String_Node_Str"" + getAppName(),6);
    pm.setSubTaskName(""String_Node_Str"");
    initLogger();
    initBeamUserDir();
    initResources();
    initPreferences();
    logStartUpInfo();
    pm.worked(1);
    if (Boolean.getBoolean(""String_Node_Str"")) {
      RepaintManager.setCurrentManager(new CheckThreadViolationRepaintManager());
      EventDispatchThreadHangMonitor.initMonitoring();
    }
    pm.setSubTaskName(""String_Node_Str"");
    initCommandManager();
    initMainFrame();
    initShutdownHook();
    initLookAndFeel();
    configureLayoutPersitence();
    configureDockingManager();
    pm.worked(1);
    initClient(SubProgressMonitor.create(pm,1));
    pm.setSubTaskName(""String_Node_Str"");
    configureCommandsByResourceBundle();
    initMainMenuBar();
    initMainToolBar();
    initMainPane();
    initStatusBar();
    initFrameIcon();
    pm.worked(1);
    initClientUI(SubProgressMonitor.create(pm,1));
    pm.setSubTaskName(""String_Node_Str"");
    applyPreferences();
    getMainFrame().getLayoutPersistence().loadLayoutData();
    clearStatusBarMessage();
    pm.worked(1);
  }
  finally {
    pm.done();
  }
  try {
    getMainFrame().setVisible(true);
    updateState();
  }
  finally {
    startedUp=true;
    startingUp=false;
  }
}","/** 
 * Starts up the application. <p>The startup sequence is as follows: <ol> <li>The method <code>createSplashScreen</code> is called. If it returns non-null the splash screen is shown.</li> <li> The method <code>loadPreferences</code> is called in order to load user preferences.</li> <li> The method <code>startUp</code> is called with the splash screen. Clients can override this method in order to implement application specific initialisation code.</li> <li> The method <code>applyPreferences</code> is called.</li> <li> The main frame is shown.</li> <li> The splash screen (if any) is closed.</li> </ol>
 * @param pm a progress monitor, e.g. for splash-screen
 * @throws Exception if an error occurs
 */
public void startUp(ProgressMonitor pm) throws Exception {
  if (startedUp || startingUp) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  startingUp=true;
  try {
    pm.beginTask(""String_Node_Str"" + getAppName(),6);
    pm.setSubTaskName(""String_Node_Str"");
    initLogger();
    initBeamUserDir();
    initResources();
    initPreferences();
    logStartUpInfo();
    pm.worked(1);
    if (Boolean.getBoolean(""String_Node_Str"")) {
      RepaintManager.setCurrentManager(new CheckThreadViolationRepaintManager());
      EventDispatchThreadHangMonitor.initMonitoring();
    }
    pm.setSubTaskName(""String_Node_Str"");
    initCommandManager();
    initMainFrame();
    initShutdownHook();
    initLookAndFeel();
    configureLayoutPersitence();
    configureDockingManager();
    pm.worked(1);
    initClient(SubProgressMonitor.create(pm,1));
    pm.setSubTaskName(""String_Node_Str"");
    configureCommandsByResourceBundle();
    initMainMenuBar();
    initMainToolBar();
    initMainPane();
    initStatusBar();
    initFrameIcon();
    pm.worked(1);
    initClientUI(SubProgressMonitor.create(pm,1));
    pm.setSubTaskName(""String_Node_Str"");
    applyPreferences();
    getMainFrame().getLayoutPersistence().loadLayoutData();
    clearStatusBarMessage();
    pm.worked(1);
  }
  finally {
    pm.done();
  }
  try {
    getMainFrame().setVisible(true);
    updateState();
  }
  finally {
    startedUp=true;
    startingUp=false;
  }
}"
62519,"/** 
 * Initializes the client user interface. <p/>Called from   {@link #startUp(com.bc.ceres.core.ProgressMonitor)} after{@link #initClient(com.bc.ceres.core.ProgressMonitor)} is called.<p/>Clients should override this method in order to initialize their UI components. <p/>The default implementation does nothing.
 * @param pm a progress monitor, can be used to signal progress
 * @throws Exception if an error occurs
 */
protected void initClientUI(ProgressMonitor pm) throws Exception {
}","/** 
 * Initializes the client user interface. <p>Called from   {@link #startUp(com.bc.ceres.core.ProgressMonitor)} after{@link #initClient(com.bc.ceres.core.ProgressMonitor)} is called.<p>Clients should override this method in order to initialize their UI components. <p>The default implementation does nothing.
 * @param pm a progress monitor, can be used to signal progress
 * @throws Exception if an error occurs
 */
protected void initClientUI(ProgressMonitor pm) throws Exception {
}"
62520,"/** 
 * Creates a default frame icon list for this application. <p/> Override this method if you want another behaviour.
 * @return the frame icon list, or <code>null</code> if no icon is used
 */
protected List<Image> createFrameIcons(){
  final String paths=applicationDescriptor.getFrameIconPaths();
  if (paths == null) {
    return null;
  }
  String[] pathParts=paths.split(""String_Node_Str"");
  ArrayList<Image> images=new ArrayList<>(pathParts.length);
  for (  String pathPart : pathParts) {
    pathPart=pathPart.trim();
    URL iconURL=getClass().getResource(pathPart);
    if (iconURL == null) {
      SystemUtils.LOG.severe(""String_Node_Str"" + pathPart);
      continue;
    }
    images.add(new ImageIcon(iconURL).getImage());
  }
  return images;
}","/** 
 * Creates a default frame icon list for this application. <p> Override this method if you want another behaviour.
 * @return the frame icon list, or <code>null</code> if no icon is used
 */
protected List<Image> createFrameIcons(){
  final String paths=applicationDescriptor.getFrameIconPaths();
  if (paths == null) {
    return null;
  }
  String[] pathParts=paths.split(""String_Node_Str"");
  ArrayList<Image> images=new ArrayList<>(pathParts.length);
  for (  String pathPart : pathParts) {
    pathPart=pathPart.trim();
    URL iconURL=getClass().getResource(pathPart);
    if (iconURL == null) {
      SystemUtils.LOG.severe(""String_Node_Str"" + pathPart);
      continue;
    }
    images.add(new ImageIcon(iconURL).getImage());
  }
  return images;
}"
62521,"/** 
 * Called after the look & feel has changed. The method simply calls <code>SwingUtilities.updateComponentTreeUI(getMainFrame())</code> in order to reflect changes of the look-and-feel. <p>You might want to override this method in order to call <code>SwingUtilities.updateComponentTreeUI()</code> on other top-level containers beside the main frame.
 */
protected void updateComponentTreeUI(){
  mainFrame.getDockableBarManager().updateComponentTreeUI();
  mainFrame.getDockingManager().updateComponentTreeUI();
  SwingUtilities.updateComponentTreeUI(getMainFrame());
}","/** 
 * Called after the look &amp; feel has changed. The method simply calls <code>SwingUtilities.updateComponentTreeUI(getMainFrame())</code> in order to reflect changes of the look-and-feel. <p>You might want to override this method in order to call <code>SwingUtilities.updateComponentTreeUI()</code> on other top-level containers beside the main frame.
 */
protected void updateComponentTreeUI(){
  mainFrame.getDockableBarManager().updateComponentTreeUI();
  mainFrame.getDockingManager().updateComponentTreeUI();
  SwingUtilities.updateComponentTreeUI(getMainFrame());
}"
62522,"private Path getColorPalettesDir(){
  return Places.getUserDirectory().toPath().resolve(""String_Node_Str"");
}","private Path getColorPalettesDir(){
  return SystemUtils.getApplicationDataDir().toPath().resolve(""String_Node_Str"");
}"
62523,"private void installDefaultColorPalettes(){
  Path sourceBasePath=ResourceInstaller.findModuleCodeBasePath(BeamUiActivator.class);
  final Path auxdataDir=Places.getUserDirectory().toPath();
  final ResourceInstaller resourceInstaller=new ResourceInstaller(sourceBasePath,""String_Node_Str"",auxdataDir);
  ProgressMonitorSwingWorker swingWorker=new ProgressMonitorSwingWorker(toolView,""String_Node_Str""){
    @Override protected Object doInBackground(    ProgressMonitor progressMonitor) throws Exception {
      resourceInstaller.install(""String_Node_Str"",progressMonitor);
      defaultColorPalettesInstalled=true;
      return Boolean.TRUE;
    }
    @Override protected void done(){
      try {
        get();
      }
 catch (      Exception e) {
        SnapApp.getDefault().getLogger().log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
;
  swingWorker.executeWithBlocking();
}","private void installDefaultColorPalettes(){
  Path sourceBasePath=ResourceInstaller.findModuleCodeBasePath(BeamUiActivator.class);
  final Path auxdataDir=getColorPalettesDir();
  final ResourceInstaller resourceInstaller=new ResourceInstaller(sourceBasePath,""String_Node_Str"",auxdataDir);
  ProgressMonitorSwingWorker swingWorker=new ProgressMonitorSwingWorker(toolView,""String_Node_Str""){
    @Override protected Object doInBackground(    ProgressMonitor progressMonitor) throws Exception {
      resourceInstaller.install(""String_Node_Str"",progressMonitor);
      defaultColorPalettesInstalled=true;
      return Boolean.TRUE;
    }
    @Override protected void done(){
      try {
        get();
      }
 catch (      Exception e) {
        SnapApp.getDefault().getLogger().log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
;
  swingWorker.executeWithBlocking();
}"
62524,"private void setProductSceneView(final ProductSceneView productSceneView){
  ProductSceneView productSceneViewOld=getFormModel().getProductSceneView();
  if (productSceneViewOld != null) {
    productSceneViewOld.getProduct().removeProductNodeListener(productNodeListener);
    productSceneViewOld.removePropertyChangeListener(sceneViewChangeListener);
  }
  getFormModel().setProductSceneView(productSceneView);
  if (getFormModel().isValid()) {
    getFormModel().getProductSceneView().getProduct().addProductNodeListener(productNodeListener);
    getFormModel().getProductSceneView().addPropertyChangeListener(sceneViewChangeListener);
  }
  if (getFormModel().isValid()) {
    getFormModel().setModifiedImageInfo(getFormModel().getOriginalImageInfo());
  }
  installChildForm();
  updateToolButtons();
  updateMultiApplyState();
}","private void setProductSceneView(final ProductSceneView productSceneView){
  ProductSceneView productSceneViewOld=getFormModel().getProductSceneView();
  if (productSceneViewOld != null) {
    productSceneViewOld.getProduct().removeProductNodeListener(productNodeListener);
    productSceneViewOld.removePropertyChangeListener(sceneViewChangeListener);
  }
  getFormModel().setProductSceneView(productSceneView);
  if (getFormModel().isValid()) {
    getFormModel().getProductSceneView().getProduct().addProductNodeListener(productNodeListener);
    getFormModel().getProductSceneView().addPropertyChangeListener(sceneViewChangeListener);
  }
  if (getFormModel().isValid()) {
    getFormModel().setModifiedImageInfo(getFormModel().getOriginalImageInfo());
  }
  installChildForm();
  updateTitle();
  updateToolButtons();
  updateMultiApplyState();
}"
62525,"@Override public void nodeChanged(final ProductNodeEvent event){
  final RasterDataNode[] rasters=childForm.getRasters();
  RasterDataNode raster=null;
  for (  RasterDataNode dataNode : rasters) {
    if (event.getSourceNode() == dataNode) {
      raster=(RasterDataNode)event.getSourceNode();
    }
  }
  if (raster != null) {
    final String propertyName=event.getPropertyName();
    if (ProductNode.PROPERTY_NAME_NAME.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_ANCILLARY_BANDS.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_UNIT.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_STX.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.isValidMaskProperty(propertyName)) {
      getStx(raster);
    }
  }
}","@Override public void nodeChanged(final ProductNodeEvent event){
  final RasterDataNode[] rasters=childForm.getRasters();
  RasterDataNode raster=null;
  for (  RasterDataNode dataNode : rasters) {
    if (event.getSourceNode() == dataNode) {
      raster=(RasterDataNode)event.getSourceNode();
    }
  }
  if (raster != null) {
    final String propertyName=event.getPropertyName();
    if (ProductNode.PROPERTY_NAME_NAME.equalsIgnoreCase(propertyName)) {
      updateTitle();
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_ANCILLARY_BANDS.equalsIgnoreCase(propertyName)) {
      updateTitle();
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_UNIT.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.PROPERTY_NAME_STX.equalsIgnoreCase(propertyName)) {
      childForm.handleRasterPropertyChange(event,raster);
    }
 else     if (RasterDataNode.isValidMaskProperty(propertyName)) {
      getStx(raster);
    }
  }
}"
62526,"public ColorManipulationForm(TopComponent colorManipulationToolView,FormModel formModel){
  Assert.notNull(colorManipulationToolView);
  Assert.notNull(formModel);
  this.toolView=colorManipulationToolView;
  this.formModel=formModel;
  preferences=SnapApp.getDefault().getPreferences();
  productNodeListener=new ColorManipulationPNL();
  sceneViewChangeListener=new SceneViewImageInfoChangeListener();
  titlePrefix=this.formModel.getTitlePrefix();
  emptyForm=new EmptyImageInfoForm(this);
  toolView.setDisplayName(titlePrefix);
}","public ColorManipulationForm(TopComponent colorManipulationToolView,FormModel formModel){
  Assert.notNull(colorManipulationToolView);
  Assert.notNull(formModel);
  this.toolView=colorManipulationToolView;
  this.formModel=formModel;
  preferences=SnapApp.getDefault().getPreferences();
  productNodeListener=new ColorManipulationPNL();
  sceneViewChangeListener=new SceneViewImageInfoChangeListener();
  titlePrefix=this.formModel.getTitlePrefix();
  emptyForm=new EmptyImageInfoForm(this);
}"
62527,"/** 
 * Adds a window to this workspace window. If the window already exists, it will be activated.
 * @param topComponent The window to add.
 */
public void addTopComponent(TopComponent topComponent){
  List<TabData> tabs=tabbedContainer.getModel().getTabs();
  for (  TabData tab : tabs) {
    JInternalFrame internalFrame=tabToFrameMap.get(tab);
    if (topComponent == getTopComponent(internalFrame)) {
      try {
        internalFrame.setSelected(true);
      }
 catch (      PropertyVetoException e) {
      }
      return;
    }
  }
  if (topComponent.isOpened()) {
    topComponent.close();
  }
  JInternalFrame internalFrame=new JInternalFrame(topComponent.getDisplayName(),true,true,true,true);
  Image iconImage=topComponent.getIcon();
  ImageIcon imageIcon=null;
  if (iconImage != null) {
    imageIcon=new ImageIcon(iconImage);
    internalFrame.setFrameIcon(imageIcon);
  }
  JComponent dummyComponent=new JPanel();
  dummyComponent.setPreferredSize(new Dimension(-1,4));
  TabData tabData=new TabData(dummyComponent,imageIcon,topComponent.getDisplayName(),null);
  frameToTabMap.put(internalFrame,tabData);
  tabToFrameMap.put(tabData,internalFrame);
  internalFrame.setContentPane(topComponent);
  Object internalFrameID=getInternalFrameID(topComponent);
  Rectangle bounds=idToBoundsMap.get(internalFrameID);
  if (bounds == null) {
    int count=frameToTabMap.size() % 5;
    bounds=new Rectangle(count * 24,count * 24,400,400);
  }
  internalFrame.setBounds(bounds);
  tabbedContainer.getModel().addTab(tabbedContainer.getModel().size(),tabData);
  tabbedContainer.setVisible(true);
  desktopPane.add(internalFrame);
  internalFrame.addInternalFrameListener(internalFrameListener);
  internalFrame.setVisible(true);
  try {
    internalFrame.setSelected(true);
  }
 catch (  PropertyVetoException e) {
  }
  topComponent.addPropertyChangeListener(propertyChangeListener);
}","/** 
 * Adds a window to this workspace window. If the window already exists, it will be activated.
 * @param topComponent The window to add.
 */
@Messages(""String_Node_Str"") public void addTopComponent(TopComponent topComponent){
  List<TabData> tabs=tabbedContainer.getModel().getTabs();
  for (  TabData tab : tabs) {
    JInternalFrame internalFrame=tabToFrameMap.get(tab);
    if (topComponent == getTopComponent(internalFrame)) {
      try {
        internalFrame.setSelected(true);
      }
 catch (      PropertyVetoException e) {
      }
      return;
    }
  }
  if (topComponent.isOpened()) {
    topComponent.close();
  }
  String displayName=topComponent.getDisplayName();
  if (displayName == null) {
    displayName=Bundle.CTL_WorkspaceTopComponentFrameUnnamed();
  }
  JInternalFrame internalFrame=new JInternalFrame(displayName,true,true,true,true);
  Image iconImage=topComponent.getIcon();
  ImageIcon imageIcon=null;
  if (iconImage != null) {
    imageIcon=new ImageIcon(iconImage);
    internalFrame.setFrameIcon(imageIcon);
  }
  JComponent dummyComponent=new JPanel();
  dummyComponent.setPreferredSize(new Dimension(-1,4));
  TabData tabData=new TabData(dummyComponent,imageIcon,displayName,null);
  frameToTabMap.put(internalFrame,tabData);
  tabToFrameMap.put(tabData,internalFrame);
  internalFrame.setContentPane(topComponent);
  Object internalFrameID=getInternalFrameID(topComponent);
  Rectangle bounds=idToBoundsMap.get(internalFrameID);
  if (bounds == null) {
    int count=frameToTabMap.size() % 5;
    bounds=new Rectangle(count * 24,count * 24,400,400);
  }
  internalFrame.setBounds(bounds);
  tabbedContainer.getModel().addTab(tabbedContainer.getModel().size(),tabData);
  tabbedContainer.setVisible(true);
  desktopPane.add(internalFrame);
  internalFrame.addInternalFrameListener(internalFrameListener);
  internalFrame.setVisible(true);
  try {
    internalFrame.setSelected(true);
  }
 catch (  PropertyVetoException e) {
  }
  topComponent.addPropertyChangeListener(propertyChangeListener);
}"
62528,"/** 
 * 短信模版消息通知
 * @param phoneNumber 接收通知的电话号码
 * @param notifyType  通知类别，通过该枚举值在配置文件中获取相应的模版ID
 * @param params      通知模版内容里的参数，类似""您的验证码为{1}""中{1}的值
 */
@Async public void notifySmsTemplate(String phoneNumber,NotifyType notifyType,String[] params){
  if (wxTemplateSender == null)   return;
  int templateId=Integer.parseInt(getTemplateId(notifyType,smsTemplate));
  smsSender.sendWithTemplate(phoneNumber,templateId,params);
}","/** 
 * 短信模版消息通知
 * @param phoneNumber 接收通知的电话号码
 * @param notifyType  通知类别，通过该枚举值在配置文件中获取相应的模版ID
 * @param params      通知模版内容里的参数，类似""您的验证码为{1}""中{1}的值
 */
@Async public void notifySmsTemplate(String phoneNumber,NotifyType notifyType,String[] params){
  if (smsSender == null)   return;
  int templateId=Integer.parseInt(getTemplateId(notifyType,smsTemplate));
  smsSender.sendWithTemplate(phoneNumber,templateId,params);
}"
62529,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_usage:
    if (usageDialogFragment == null) {
      usageDialogFragment=new UsageDialogFragment();
    }
  if (usageDialogFragment.isAdded()) {
    usageDialogFragment.dismiss();
  }
usageDialogFragment.show(getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.action_search:
if (searchDialogFragment == null) {
searchDialogFragment=new SearchDialogFragment();
}
if (searchDialogFragment.isAdded()) {
searchDialogFragment.dismiss();
}
searchDialogFragment.show(getSupportFragmentManager(),""String_Node_Str"");
break;
default :
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_usage:
    if (usageDialogFragment == null) {
      usageDialogFragment=new UsageDialogFragment();
    }
  if (!isDestroyed() && usageDialogFragment.isAdded()) {
    usageDialogFragment.dismiss();
  }
usageDialogFragment.show(getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.action_search:
if (searchDialogFragment == null) {
searchDialogFragment=new SearchDialogFragment();
}
if (!isDestroyed() && searchDialogFragment.isAdded()) {
searchDialogFragment.dismiss();
}
searchDialogFragment.show(getSupportFragmentManager(),""String_Node_Str"");
break;
default :
break;
}
return super.onOptionsItemSelected(item);
}"
62530,"@Override public void onDestroyView(){
  mPresenter.setProjectCurrentPage(currentPage);
  super.onDestroyView();
}","@Override public void onDestroyView(){
  if (mPresenter != null) {
    mPresenter.setProjectCurrentPage(currentPage);
  }
  super.onDestroyView();
}"
62531,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,view);
  return view;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(getLayoutId(),container,false);
  unBinder=ButterKnife.bind(this,view);
  initView();
  return view;
}"
62532,"@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  initRecyclerView();
  mPresenter.getKnowledgeHierarchyData(true);
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  mPresenter.getKnowledgeHierarchyData(true);
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62533,"private void initRecyclerView(){
  mAdapter=new KnowledgeHierarchyAdapter(R.layout.item_knowledge_hierarchy,mKnowledgeHierarchyDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startDetailPager(view,position));
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
}","private void initRecyclerView(){
  mKnowledgeHierarchyDataList=new ArrayList<>();
  mAdapter=new KnowledgeHierarchyAdapter(R.layout.item_knowledge_hierarchy,mKnowledgeHierarchyDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startDetailPager(view,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
  mRecyclerView.setAdapter(mAdapter);
}"
62534,"private void startArticleDetailPager(View view,int position){
  if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
    return;
  }
  articlePosition=position;
  mOptions=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
  JudgeUtils.startArticleDetailActivity(_mActivity,mOptions,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
}","private void startArticleDetailPager(View view,int position){
  if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
    return;
  }
  articlePosition=position;
  ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
  JudgeUtils.startArticleDetailActivity(_mActivity,options,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
}"
62535,"@Override protected void initEventAndData(){
  super.initEventAndData();
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  id=bundle.getInt(Constants.ARG_PARAM1,0);
  if (id == 0) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,id,true);
  initRecyclerView();
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  id=bundle.getInt(Constants.ARG_PARAM1,0);
  if (id == 0) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,id,true);
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62536,"private void initRecyclerView(){
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startArticleDetailPager(view,position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
}","private void initRecyclerView(){
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,null);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startArticleDetailPager(view,position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
  mRecyclerView.setAdapter(mAdapter);
}"
62537,"@Override public void showKnowledgeHierarchyDetailData(FeedArticleListData feedArticleListData){
  mArticles=feedArticleListData.getDatas();
  if (isRefresh) {
    mAdapter.replaceData(mArticles);
  }
 else {
    if (mArticles.size() > 0) {
      mAdapter.addData(mArticles);
    }
 else {
      CommonUtils.showMessage(_mActivity,getString(R.string.load_more_no_data));
    }
  }
  showNormal();
}","@Override public void showKnowledgeHierarchyDetailData(FeedArticleListData feedArticleListData){
  if (isRefresh) {
    mAdapter.replaceData(feedArticleListData.getDatas());
  }
 else {
    if (feedArticleListData.getDatas().size() > 0) {
      mAdapter.addData(feedArticleListData.getDatas());
    }
 else {
      CommonUtils.showMessage(_mActivity,getString(R.string.load_more_no_data));
    }
  }
  showNormal();
}"
62538,"@Override protected void initEventAndData(){
  super.initEventAndData();
  initRecyclerView();
  mPresenter.getCollectList(mCurrentPage,true);
  setRefresh();
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  mPresenter.getCollectList(mCurrentPage,true);
  setRefresh();
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62539,"private void initRecyclerView(){
  mArticles=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.isCollectPage();
  mAdapter.setOnItemClickListener((adapter,view,position) -> startArticleDetailPager(view,position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
}","private void initRecyclerView(){
  mArticles=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.isCollectPage();
  mAdapter.setOnItemClickListener((adapter,view,position) -> startArticleDetailPager(view,position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
  mRecyclerView.setAdapter(mAdapter);
}"
62540,"@Override protected void initEventAndData(){
  initCircleAnimation();
  mTopSearchDataList=new ArrayList<>();
  mSearchEdit.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (TextUtils.isEmpty(mSearchEdit.getText().toString())) {
        mTintTv.setText(R.string.search_tint);
      }
 else {
        mTintTv.setText(""String_Node_Str"");
      }
    }
  }
);
  mPresenter.addRxBindingSubscribe(RxView.clicks(mSearchTv).throttleFirst(Constants.CLICK_TIME_AREA,TimeUnit.MILLISECONDS).filter(o -> !TextUtils.isEmpty(mSearchEdit.getText().toString().trim())).subscribe(o -> {
    mPresenter.addHistoryData(mSearchEdit.getText().toString().trim());
    setHistoryTvStatus(false);
  }
));
  showHistoryData(mPresenter.loadAllHistoryData());
  mPresenter.getTopSearchData();
}","@Override protected void initEventAndData(){
  initCircleAnimation();
  initRecyclerView();
  mTopSearchDataList=new ArrayList<>();
  mSearchEdit.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (TextUtils.isEmpty(mSearchEdit.getText().toString())) {
        mTintTv.setText(R.string.search_tint);
      }
 else {
        mTintTv.setText(""String_Node_Str"");
      }
    }
  }
);
  mPresenter.addRxBindingSubscribe(RxView.clicks(mSearchTv).throttleFirst(Constants.CLICK_TIME_AREA,TimeUnit.MILLISECONDS).filter(o -> !TextUtils.isEmpty(mSearchEdit.getText().toString().trim())).subscribe(o -> {
    mPresenter.addHistoryData(mSearchEdit.getText().toString().trim());
    setHistoryTvStatus(false);
  }
));
  showHistoryData(mPresenter.loadAllHistoryData());
  mPresenter.getTopSearchData();
}"
62541,"private void initRecyclerView(List<HistoryData> historyDataList){
  historySearchAdapter=new HistorySearchAdapter(R.layout.item_search_history,historyDataList);
  historySearchAdapter.setOnItemChildClickListener((adapter,view,position) -> searchHistoryData(adapter,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  mRecyclerView.setAdapter(historySearchAdapter);
}","private void initRecyclerView(){
  historySearchAdapter=new HistorySearchAdapter(R.layout.item_search_history,null);
  historySearchAdapter.setOnItemChildClickListener((adapter,view,position) -> searchHistoryData(adapter,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  mRecyclerView.setAdapter(historySearchAdapter);
}"
62542,"@Override public void showHistoryData(List<HistoryData> historyDataList){
  if (historyDataList == null || historyDataList.size() <= 0) {
    setHistoryTvStatus(true);
    return;
  }
  setHistoryTvStatus(false);
  Collections.reverse(historyDataList);
  initRecyclerView(historyDataList);
}","@Override public void showHistoryData(List<HistoryData> historyDataList){
  if (historyDataList == null || historyDataList.size() <= 0) {
    setHistoryTvStatus(true);
    return;
  }
  setHistoryTvStatus(false);
  Collections.reverse(historyDataList);
  historySearchAdapter.replaceData(historyDataList);
}"
62543,"@Override protected void initEventAndData(){
  super.initEventAndData();
  initRecyclerView();
  setRefresh();
  if (loggedAndNotRebuilt()) {
    mPresenter.loadMainPagerData();
  }
 else {
    mPresenter.autoRefresh(true);
  }
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  if (loggedAndNotRebuilt()) {
    mPresenter.loadMainPagerData();
  }
 else {
    mPresenter.autoRefresh(true);
  }
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62544,"private void initRecyclerView(List<NavigationListData> navigationDataList){
  NavigationAdapter adapter=new NavigationAdapter(R.layout.item_navigation,navigationDataList);
  mRecyclerView.setAdapter(adapter);
  mManager=new LinearLayoutManager(_mActivity);
  mRecyclerView.setLayoutManager(mManager);
  mRecyclerView.setHasFixedSize(true);
}","private void initRecyclerView(){
  List<NavigationListData> navigationDataList=new ArrayList<>();
  mNavigationAdapter=new NavigationAdapter(R.layout.item_navigation,navigationDataList);
  mManager=new LinearLayoutManager(_mActivity);
  mRecyclerView.setLayoutManager(mManager);
  mRecyclerView.setHasFixedSize(true);
  mRecyclerView.setAdapter(mNavigationAdapter);
}"
62545,"@Override public void showNavigationListData(List<NavigationListData> navigationDataList){
  mTabLayout.setTabAdapter(new TabAdapter(){
    @Override public int getCount(){
      return navigationDataList == null ? 0 : navigationDataList.size();
    }
    @Override public ITabView.TabBadge getBadge(    int i){
      return null;
    }
    @Override public ITabView.TabIcon getIcon(    int i){
      return null;
    }
    @Override public ITabView.TabTitle getTitle(    int i){
      return new TabView.TabTitle.Builder().setContent(navigationDataList.get(i).getName()).setTextColor(ContextCompat.getColor(_mActivity,R.color.shallow_green),ContextCompat.getColor(_mActivity,R.color.shallow_grey)).build();
    }
    @Override public int getBackground(    int i){
      return -1;
    }
  }
);
  if (mPresenter.getCurrentPage() == Constants.TYPE_NAVIGATION) {
    setChildViewVisibility(View.VISIBLE);
  }
 else {
    setChildViewVisibility(View.INVISIBLE);
  }
  initRecyclerView(navigationDataList);
  leftRightLinkage();
  showNormal();
}","@Override public void showNavigationListData(List<NavigationListData> navigationDataList){
  mTabLayout.setTabAdapter(new TabAdapter(){
    @Override public int getCount(){
      return navigationDataList == null ? 0 : navigationDataList.size();
    }
    @Override public ITabView.TabBadge getBadge(    int i){
      return null;
    }
    @Override public ITabView.TabIcon getIcon(    int i){
      return null;
    }
    @Override public ITabView.TabTitle getTitle(    int i){
      return new TabView.TabTitle.Builder().setContent(navigationDataList.get(i).getName()).setTextColor(ContextCompat.getColor(_mActivity,R.color.shallow_green),ContextCompat.getColor(_mActivity,R.color.shallow_grey)).build();
    }
    @Override public int getBackground(    int i){
      return -1;
    }
  }
);
  if (mPresenter.getCurrentPage() == Constants.TYPE_NAVIGATION) {
    setChildViewVisibility(View.VISIBLE);
  }
 else {
    setChildViewVisibility(View.INVISIBLE);
  }
  mNavigationAdapter.replaceData(navigationDataList);
  leftRightLinkage();
  showNormal();
}"
62546,"@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  Bundle bundle=getArguments();
  cid=bundle.getInt(Constants.ARG_PARAM1);
  initRecyclerView();
  mPresenter.getProjectListData(mCurrentPage,cid,true);
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  Bundle bundle=getArguments();
  cid=bundle.getInt(Constants.ARG_PARAM1);
  mPresenter.getProjectListData(mCurrentPage,cid,true);
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62547,"private void initRecyclerView(){
  mDatas=new ArrayList<>();
  mAdapter=new ProjectListAdapter(R.layout.item_project_list,mDatas);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startProjectPager(position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
}","private void initRecyclerView(){
  List<FeedArticleData> mDatas=new ArrayList<>();
  mAdapter=new ProjectListAdapter(R.layout.item_project_list,mDatas);
  mAdapter.setOnItemClickListener((adapter,view,position) -> startProjectPager(position));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> clickChildEvent(view,position));
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mRecyclerView.setHasFixedSize(true);
  mRecyclerView.setAdapter(mAdapter);
}"
62548,"@Override public void showProjectListData(ProjectListData projectListData){
  mDatas=projectListData.getDatas();
  if (isRefresh) {
    mAdapter.replaceData(mDatas);
  }
 else {
    if (mDatas.size() > 0) {
      mAdapter.addData(mDatas);
    }
 else {
      CommonUtils.showMessage(_mActivity,getString(R.string.load_more_no_data));
    }
  }
  showNormal();
}","@Override public void showProjectListData(ProjectListData projectListData){
  if (isRefresh) {
    mAdapter.replaceData(projectListData.getDatas());
  }
 else {
    if (projectListData.getDatas().size() > 0) {
      mAdapter.addData(projectListData.getDatas());
    }
 else {
      CommonUtils.showMessage(_mActivity,getString(R.string.load_more_no_data));
    }
  }
  showNormal();
}"
62549,"/** 
 * Show message
 * @param activity Activity
 * @param msg message
 */
public static void showSnackMessage(Activity activity,String msg){
  LogHelper.e(""String_Node_Str"" + msg);
  Snackbar snackbar=Snackbar.make(activity.getWindow().getDecorView(),msg,Snackbar.LENGTH_SHORT);
  View view=snackbar.getView();
  ((TextView)view.findViewById(R.id.snackbar_text)).setTextColor(ContextCompat.getColor(activity,R.color.white));
  snackbar.show();
}","/** 
 * Show message
 * @param activity Activity
 * @param msg message
 */
public static void showSnackMessage(Activity activity,String msg){
  LogHelper.e(""String_Node_Str"" + msg);
  activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE);
  final Snackbar snackbar=Snackbar.make(activity.getWindow().getDecorView(),msg,Snackbar.LENGTH_SHORT);
  View view=snackbar.getView();
  ((TextView)view.findViewById(R.id.snackbar_text)).setTextColor(ContextCompat.getColor(activity,R.color.white));
  snackbar.setAction(""String_Node_Str"",v -> {
    snackbar.dismiss();
    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
  }
).show();
}"
62550,"@Override public void showCancelCollectArticleData(BaseResponse<FeedArticleListData> feedArticleListResponse){
  isCollect=false;
  if (!isCollectPage) {
    mCollectItem.setTitle(R.string.collect);
    mCollectItem.setIcon(R.mipmap.ic_toolbar_like_n);
  }
  CommonUtils.showSnackMessage(this,getString(R.string.cancel_collect_success));
}","@Override public void showCancelCollectArticleData(BaseResponse<FeedArticleListData> feedArticleListResponse){
  isCollect=false;
  if (!isCollectPage) {
    mCollectItem.setTitle(R.string.collect);
  }
  mCollectItem.setIcon(R.mipmap.ic_toolbar_like_n);
  CommonUtils.showSnackMessage(this,getString(R.string.cancel_collect_success));
}"
62551,"/** 
 * 使用Glide加载圆形ImageView(如头像)时，不要使用占位图
 * @param context context
 * @param url image url
 * @param iv imageView
 */
public static void load(Context context,String url,ImageView iv){
  if (!WanAndroidApp.getAppComponent().preferencesHelper().getNoImageState()) {
    Glide.with(context).load(url).into(iv);
  }
}","/** 
 * 使用Glide加载圆形ImageView(如头像)时，不要使用占位图
 * @param context context
 * @param url image url
 * @param iv imageView
 */
public static void load(Context context,String url,ImageView iv){
  if (!WanAndroidApp.getAppComponent().getDataManager().getNoImageState()) {
    Glide.with(context).load(url).into(iv);
  }
}"
62552,"@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  mAdapter=new KnowledgeHierarchyAdapter(R.layout.item_knowledge_hierarchy,mKnowledgeHierarchyDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    Intent intent=new Intent(_mActivity,KnowledgeHierarchyDetailActivity.class);
    intent.putExtra(Constants.ARG_PARAM1,mAdapter.getData().get(position));
    startActivity(intent,options.toBundle());
  }
);
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mPresenter.getKnowledgeHierarchyData();
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  mAdapter=new KnowledgeHierarchyAdapter(R.layout.item_knowledge_hierarchy,mKnowledgeHierarchyDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
      return;
    }
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    Intent intent=new Intent(_mActivity,KnowledgeHierarchyDetailActivity.class);
    intent.putExtra(Constants.ARG_PARAM1,mAdapter.getData().get(position));
    startActivity(intent,options.toBundle());
  }
);
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  mPresenter.getKnowledgeHierarchyData();
  if (CommonUtils.isNetworkConnected()) {
    showLoading();
  }
}"
62553,"@Override protected void initEventAndData(){
  super.initEventAndData();
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  id=bundle.getInt(Constants.ARG_PARAM1,0);
  if (id == 0) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,id);
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    articlePosition=position;
    mOptions=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,mOptions,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      break;
case R.id.item_search_pager_like_iv:
    likeEvent(position);
  break;
case R.id.item_search_pager_tag_red_tv:
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  id=bundle.getInt(Constants.ARG_PARAM1,0);
  if (id == 0) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,id);
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
      return;
    }
    articlePosition=position;
    mOptions=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,mOptions,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      break;
case R.id.item_search_pager_like_iv:
    likeEvent(position);
  break;
case R.id.item_search_pager_tag_red_tv:
if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
  return;
}
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}"
62554,"private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(_mActivity,LoginActivity.class));
    CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}","private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(_mActivity,LoginActivity.class));
    CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}"
62555,"@Override public void onBackPressedSupport(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 1) {
    pop();
  }
 else {
    finishAfterTransition();
  }
}","@Override public void onBackPressedSupport(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 1) {
    pop();
  }
 else {
    supportFinishAfterTransition();
  }
}"
62556,"private void initView(){
  mArticles=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.isCollectPage();
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    mOptions=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,mOptions,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),true,true,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      JudgeUtils.startKnowledgeHierarchyDetailActivity(_mActivity,true,mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
    break;
case R.id.item_search_pager_like_iv:
  mPresenter.cancelCollectPageArticle(position,mAdapter.getData().get(position));
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
mPresenter.getCollectList(mCurrentPage);
}","private void initView(){
  mArticles=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.isCollectPage();
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
      return;
    }
    mOptions=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,mOptions,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),true,true,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
        return;
      }
    JudgeUtils.startKnowledgeHierarchyDetailActivity(_mActivity,true,mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
  break;
case R.id.item_search_pager_like_iv:
if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
  return;
}
mPresenter.cancelCollectPageArticle(position,mAdapter.getData().get(position));
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
mPresenter.getCollectList(mCurrentPage);
}"
62557,"private void startMainPager(){
  mTitleTv.setText(getString(R.string.home_pager));
  bottomNavigationBar.setVisibility(View.VISIBLE);
  bottomNavigationBar.setSelectedItemId(R.id.tab_main_pager);
  mDrawerLayout.closeDrawers();
}","private void startMainPager(){
  mTitleTv.setText(getString(R.string.home_pager));
  mBottomNavigationView.setVisibility(View.VISIBLE);
  mBottomNavigationView.setSelectedItemId(R.id.tab_main_pager);
  mDrawerLayout.closeDrawers();
}"
62558,"/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= Constants.TYPE_COLLECT) {
    mFloatingActionButton.setVisibility(View.INVISIBLE);
    bottomNavigationBar.setVisibility(View.INVISIBLE);
  }
 else {
    mFloatingActionButton.setVisibility(View.VISIBLE);
    bottomNavigationBar.setVisibility(View.VISIBLE);
  }
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}","/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= Constants.TYPE_COLLECT) {
    mFloatingActionButton.setVisibility(View.INVISIBLE);
    mBottomNavigationView.setVisibility(View.INVISIBLE);
  }
 else {
    mFloatingActionButton.setVisibility(View.VISIBLE);
    mBottomNavigationView.setVisibility(View.VISIBLE);
  }
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    getSupportFragmentManager().beginTransaction().remove(targetFg).commit();
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}"
62559,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFragments=new ArrayList<>();
  if (savedInstanceState == null) {
    mPresenter.setNightModeState(false);
    mMainPagerFragment=MainPagerFragment.getInstance(false,null);
    mFragments.add(mMainPagerFragment);
    initData();
    init();
    switchFragment(Constants.TYPE_MAIN_PAGER);
  }
 else {
    bottomNavigationBar.setSelectedItemId(R.id.tab_main_pager);
    mMainPagerFragment=MainPagerFragment.getInstance(true,null);
    mFragments.add(mMainPagerFragment);
    initData();
    init();
    switchFragment(Constants.TYPE_SETTING);
  }
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFragments=new ArrayList<>();
  if (savedInstanceState == null) {
    mPresenter.setNightModeState(false);
    mMainPagerFragment=MainPagerFragment.getInstance(false,null);
    mFragments.add(mMainPagerFragment);
    initData();
    init();
    switchFragment(Constants.TYPE_MAIN_PAGER);
  }
 else {
    mBottomNavigationView.setSelectedItemId(R.id.tab_main_pager);
    mMainPagerFragment=MainPagerFragment.getInstance(true,null);
    mFragments.add(mMainPagerFragment);
    initData();
    init();
    switchFragment(Constants.TYPE_SETTING);
  }
}"
62560,"private void init(){
  initNavigationView();
  BottomNavigationViewHelper.disableShiftMode(bottomNavigationBar);
  mPresenter.setCurrentPage(Constants.TYPE_MAIN_PAGER);
  bottomNavigationBar.setOnNavigationItemSelectedListener(item -> {
switch (item.getItemId()) {
case R.id.tab_main_pager:
      mTitleTv.setText(getString(R.string.home_pager));
    switchFragment(0);
  mMainPagerFragment.reload();
mPresenter.setCurrentPage(Constants.TYPE_MAIN_PAGER);
break;
case R.id.tab_knowledge_hierarchy:
mTitleTv.setText(getString(R.string.knowledge_hierarchy));
switchFragment(1);
mKnowledgeHierarchyFragment.reload();
mPresenter.setCurrentPage(Constants.TYPE_KNOWLEDGE);
break;
case R.id.tab_navigation:
switchNavigation();
break;
case R.id.tab_project:
switchProject();
break;
default :
break;
}
return true;
}
);
ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
@Override public void onDrawerSlide(View drawerView,float slideOffset){
View mContent=mDrawerLayout.getChildAt(0);
float scale=1 - slideOffset;
float endScale=0.8f + scale * 0.2f;
float startScale=1 - 0.3f * scale;
drawerView.setScaleX(startScale);
drawerView.setScaleY(startScale);
drawerView.setAlpha(0.6f + 0.4f * (1 - scale));
mContent.setTranslationX(drawerView.getMeasuredWidth() * (1 - scale));
mContent.invalidate();
mContent.setScaleX(endScale);
mContent.setScaleY(endScale);
}
}
;
toggle.syncState();
mDrawerLayout.addDrawerListener(toggle);
}","private void init(){
  initNavigationView();
  BottomNavigationViewHelper.disableShiftMode(mBottomNavigationView);
  mPresenter.setCurrentPage(Constants.TYPE_MAIN_PAGER);
  mBottomNavigationView.setOnNavigationItemSelectedListener(item -> {
switch (item.getItemId()) {
case R.id.tab_main_pager:
      mTitleTv.setText(getString(R.string.home_pager));
    switchFragment(0);
  mMainPagerFragment.reload();
mPresenter.setCurrentPage(Constants.TYPE_MAIN_PAGER);
break;
case R.id.tab_knowledge_hierarchy:
mTitleTv.setText(getString(R.string.knowledge_hierarchy));
switchFragment(1);
mKnowledgeHierarchyFragment.reload();
mPresenter.setCurrentPage(Constants.TYPE_KNOWLEDGE);
break;
case R.id.tab_navigation:
switchNavigation();
break;
case R.id.tab_project:
switchProject();
break;
default :
break;
}
return true;
}
);
ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
@Override public void onDrawerSlide(View drawerView,float slideOffset){
View mContent=mDrawerLayout.getChildAt(0);
float scale=1 - slideOffset;
float endScale=0.8f + scale * 0.2f;
float startScale=1 - 0.3f * scale;
drawerView.setScaleX(startScale);
drawerView.setScaleY(startScale);
drawerView.setAlpha(0.6f + 0.4f * (1 - scale));
mContent.setTranslationX(drawerView.getMeasuredWidth() * (1 - scale));
mContent.invalidate();
mContent.setScaleX(endScale);
mContent.setScaleY(endScale);
}
}
;
toggle.syncState();
mDrawerLayout.addDrawerListener(toggle);
}"
62561,"@Override public void showSwitchProject(){
  bottomNavigationBar.setSelectedItemId(R.id.tab_project);
}","@Override public void showSwitchProject(){
  mBottomNavigationView.setSelectedItemId(R.id.tab_project);
}"
62562,"@Override public void showSwitchNavigation(){
  bottomNavigationBar.setSelectedItemId(R.id.tab_navigation);
}","@Override public void showSwitchNavigation(){
  mBottomNavigationView.setSelectedItemId(R.id.tab_navigation);
}"
62563,"@Override protected void initEventAndData(){
  super.initEventAndData();
  initToolbar();
  mPresenter.getSearchList(mCurrentPage,searchText);
  mArticleList=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticleList);
  mAdapter.isSearchPage();
  mAdapter.isNightMode(mPresenter.getNightModeState());
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    articlePosition=position;
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(this,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(this,options,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      JudgeUtils.startKnowledgeHierarchyDetailActivity(this,true,mAdapter.getData().get(position).getSuperChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
    break;
case R.id.item_search_pager_like_iv:
  likeEvent(position);
break;
case R.id.item_search_pager_tag_red_tv:
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
onBackPressedSupport();
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
onBackPressedSupport();
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
setRefresh();
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  initToolbar();
  mPresenter.getSearchList(mCurrentPage,searchText);
  mArticleList=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticleList);
  mAdapter.isSearchPage();
  mAdapter.isNightMode(mPresenter.getNightModeState());
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
      return;
    }
    articlePosition=position;
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(this,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(this,options,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
        return;
      }
    JudgeUtils.startKnowledgeHierarchyDetailActivity(this,true,mAdapter.getData().get(position).getSuperChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
  break;
case R.id.item_search_pager_like_iv:
likeEvent(position);
break;
case R.id.item_search_pager_tag_red_tv:
if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
return;
}
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
onBackPressedSupport();
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
onBackPressedSupport();
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
setRefresh();
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}"
62564,"private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(this,LoginActivity.class));
    CommonUtils.showMessage(this,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}","private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(this,LoginActivity.class));
    CommonUtils.showMessage(this,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}"
62565,"@Override public void onHideAnimationEnd(){
  mSearchEdit.setText(""String_Node_Str"");
  dismiss();
}","@Override public void onHideAnimationEnd(){
  mSearchEdit.setText(""String_Node_Str"");
  dismissAllowingStateLoss();
}"
62566,"@Override public void onHideAnimationEnd(){
  dismiss();
}","@Override public void onHideAnimationEnd(){
  dismissAllowingStateLoss();
}"
62567,"@Override protected void initEventAndData(){
  super.initEventAndData();
  mFeedArticleDataList=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mFeedArticleDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    articlePosition=position;
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,options,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      JudgeUtils.startKnowledgeHierarchyDetailActivity(_mActivity,true,mAdapter.getData().get(position).getSuperChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
    break;
case R.id.item_search_pager_like_iv:
  likeEvent(position);
break;
case R.id.item_search_pager_tag_red_tv:
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
LinearLayout mHeaderGroup=((LinearLayout)LayoutInflater.from(_mActivity).inflate(R.layout.head_banner,null));
mBanner=mHeaderGroup.findViewById(R.id.head_banner);
mHeaderGroup.removeView(mBanner);
mAdapter.addHeaderView(mBanner);
mRecyclerView.setAdapter(mAdapter);
setRefresh();
if (!TextUtils.isEmpty(mPresenter.getLoginAccount()) && !TextUtils.isEmpty(mPresenter.getLoginPassword()) && !isRecreate) {
mPresenter.loadMainPagerData();
}
 else {
mPresenter.autoRefresh();
}
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  mFeedArticleDataList=new ArrayList<>();
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mFeedArticleDataList);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() < position) {
      return;
    }
    articlePosition=position;
    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(_mActivity,view,getString(R.string.share_view));
    JudgeUtils.startArticleDetailActivity(_mActivity,options,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle(),mAdapter.getData().get(position).getLink(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_search_pager_chapterName:
      if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
        return;
      }
    JudgeUtils.startKnowledgeHierarchyDetailActivity(_mActivity,true,mAdapter.getData().get(position).getSuperChapterName(),mAdapter.getData().get(position).getChapterName(),mAdapter.getData().get(position).getChapterId());
  break;
case R.id.item_search_pager_like_iv:
likeEvent(position);
break;
case R.id.item_search_pager_tag_red_tv:
if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
return;
}
String superChapterName=mAdapter.getData().get(position).getSuperChapterName();
if (superChapterName.contains(getString(R.string.open_project))) {
RxBus.getDefault().post(new SwitchProjectEvent());
}
 else if (superChapterName.contains(getString(R.string.navigation))) {
RxBus.getDefault().post(new SwitchNavigationEvent());
}
break;
default :
break;
}
}
);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
LinearLayout mHeaderGroup=((LinearLayout)LayoutInflater.from(_mActivity).inflate(R.layout.head_banner,null));
mBanner=mHeaderGroup.findViewById(R.id.head_banner);
mHeaderGroup.removeView(mBanner);
mAdapter.addHeaderView(mBanner);
mRecyclerView.setAdapter(mAdapter);
setRefresh();
if (!TextUtils.isEmpty(mPresenter.getLoginAccount()) && !TextUtils.isEmpty(mPresenter.getLoginPassword()) && !isRecreate) {
mPresenter.loadMainPagerData();
}
 else {
mPresenter.autoRefresh();
}
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}"
62568,"private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(_mActivity,LoginActivity.class));
    CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}","private void likeEvent(int position){
  if (!mPresenter.getLoginStatus()) {
    startActivity(new Intent(_mActivity,LoginActivity.class));
    CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
    return;
  }
  if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
    return;
  }
  if (mAdapter.getData().get(position).isCollect()) {
    mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
  }
 else {
    mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
  }
}"
62569,"@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  Bundle bundle=getArguments();
  cid=bundle.getInt(Constants.ARG_PARAM1);
  mDatas=new ArrayList<>();
  mAdapter=new ProjectListAdapter(R.layout.item_project_list,mDatas);
  mAdapter.setOnItemClickListener((adapter,view,position) -> JudgeUtils.startArticleDetailActivity(_mActivity,null,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,true));
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_project_list_install_tv:
      if (TextUtils.isEmpty(mAdapter.getData().get(position).getApkLink())) {
        return;
      }
    startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(mAdapter.getData().get(position).getApkLink())));
  break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
mPresenter.getProjectListData(mCurrentPage,cid);
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}","@Override protected void initEventAndData(){
  super.initEventAndData();
  setRefresh();
  Bundle bundle=getArguments();
  cid=bundle.getInt(Constants.ARG_PARAM1);
  mDatas=new ArrayList<>();
  mAdapter=new ProjectListAdapter(R.layout.item_project_list,mDatas);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
      return;
    }
    JudgeUtils.startArticleDetailActivity(_mActivity,null,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,true);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
switch (view.getId()) {
case R.id.item_project_list_install_tv:
      if (mAdapter.getData().size() <= 0 || mAdapter.getData().size() <= position) {
        return;
      }
    if (TextUtils.isEmpty(mAdapter.getData().get(position).getApkLink())) {
      return;
    }
  startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(mAdapter.getData().get(position).getApkLink())));
break;
default :
break;
}
}
);
mRecyclerView.setAdapter(mAdapter);
mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
mPresenter.getProjectListData(mCurrentPage,cid);
if (CommonUtils.isNetworkConnected()) {
showLoading();
}
}"
62570,"/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}","/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    ft.remove(targetFg);
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}"
62571,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.item_share:
    mPresenter.shareEventPermissionVerify(new RxPermissions(this));
  shareEvent();
break;
case R.id.item_collect:
collectEvent();
break;
case R.id.item_system_browser:
startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(articleLink)));
break;
default :
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.item_share:
    mPresenter.shareEventPermissionVerify(new RxPermissions(this));
  break;
case R.id.item_collect:
collectEvent();
break;
case R.id.item_system_browser:
startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(articleLink)));
break;
default :
break;
}
return super.onOptionsItemSelected(item);
}"
62572,"/** 
 * Show content
 * @param feedArticleListResponse BaseResponse<FeedArticleListData>
 * @param isReLogin If reLogin
 */
void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse,boolean isReLogin);","/** 
 * Show content
 * @param feedArticleListResponse BaseResponse<FeedArticleListData>
 */
void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse);"
62573,"@Override public void getFeedArticleList(int page){
  addSubscribe(mDataManager.getFeedArticleList(page).compose(RxUtils.rxSchedulerHelper()).filter(feedArticleListResponse -> mView != null).subscribeWith(new BaseObserver<BaseResponse<FeedArticleListData>>(mView){
    @Override public void onNext(    BaseResponse<FeedArticleListData> feedArticleListResponse){
      if (feedArticleListResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showArticleList(feedArticleListResponse,false);
      }
 else {
        mView.showArticleListFail();
      }
    }
  }
));
}","@Override public void getFeedArticleList(int page){
  addSubscribe(mDataManager.getFeedArticleList(page).compose(RxUtils.rxSchedulerHelper()).filter(feedArticleListResponse -> mView != null).subscribeWith(new BaseObserver<BaseResponse<FeedArticleListData>>(mView){
    @Override public void onNext(    BaseResponse<FeedArticleListData> feedArticleListResponse){
      if (feedArticleListResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showArticleList(feedArticleListResponse);
      }
 else {
        mView.showArticleListFail();
      }
    }
  }
));
}"
62574,"@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<BaseResponse<LoginData>> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BaseResponse<List<BannerData>>> mBannerObservable=mDataManager.getBannerData();
  Observable<BaseResponse<FeedArticleListData>> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribeWith(new BaseObserver<HashMap<String,Object>>(mView){
    @Override public void onNext(    HashMap<String,Object> map){
      BaseResponse<LoginData> loginResponse=CommonUtils.cast(map.get(Constants.LOGIN_DATA));
      if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showAutoLoginSuccess();
      }
      mView.showBannerData(CommonUtils.cast(map.get(Constants.BANNER_DATA)));
      mView.showArticleList(CommonUtils.cast(map.get(Constants.ARTICLE_DATA)),true);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      mView.showAutoLoginFail();
    }
  }
);
}","@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<BaseResponse<LoginData>> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BaseResponse<List<BannerData>>> mBannerObservable=mDataManager.getBannerData();
  Observable<BaseResponse<FeedArticleListData>> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribeWith(new BaseObserver<HashMap<String,Object>>(mView){
    @Override public void onNext(    HashMap<String,Object> map){
      BaseResponse<LoginData> loginResponse=CommonUtils.cast(map.get(Constants.LOGIN_DATA));
      if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showAutoLoginSuccess();
      }
      mView.showBannerData(CommonUtils.cast(map.get(Constants.BANNER_DATA)));
      mView.showArticleList(CommonUtils.cast(map.get(Constants.ARTICLE_DATA)));
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      mView.showAutoLoginFail();
    }
  }
);
}"
62575,"@Override protected void initEventAndData(){
  initToolbar();
  initData();
  initNavigationView();
  BottomNavigationViewHelper.disableShiftMode(bottomNavigationBar);
  bottomNavigationBar.setOnNavigationItemSelectedListener(item -> {
switch (item.getItemId()) {
case R.id.tab_main_pager:
      mTitleTv.setText(getString(R.string.home_pager));
    switchFragment(0);
  mMainPagerFragment.reLoad();
mDataManager.setCurrentPage(Constants.FIRST);
break;
case R.id.tab_knowledge_hierarchy:
mTitleTv.setText(getString(R.string.knowledge_hierarchy));
switchFragment(1);
mKnowledgeHierarchyFragment.reLoad();
mDataManager.setCurrentPage(Constants.SECOND);
break;
case R.id.tab_navigation:
mTitleTv.setText(getString(R.string.navigation));
switchFragment(2);
mNavigationFragment.reLoad();
mDataManager.setCurrentPage(Constants.THIRD);
break;
case R.id.tab_project:
mTitleTv.setText(getString(R.string.project));
switchFragment(3);
mProjectFragment.reLoad();
mDataManager.setCurrentPage(Constants.FOURTH);
break;
default :
break;
}
return true;
}
);
ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
@Override public void onDrawerSlide(View drawerView,float slideOffset){
View mContent=mDrawerLayout.getChildAt(0);
float scale=1 - slideOffset;
float endScale=0.8f + scale * 0.2f;
float startScale=1 - 0.3f * scale;
drawerView.setScaleX(startScale);
drawerView.setScaleY(startScale);
drawerView.setAlpha(0.6f + 0.4f * (1 - scale));
mContent.setTranslationX(drawerView.getMeasuredWidth() * (1 - scale));
mContent.invalidate();
mContent.setScaleX(endScale);
mContent.setScaleY(endScale);
}
}
;
toggle.syncState();
mDrawerLayout.addDrawerListener(toggle);
}","@Override protected void initEventAndData(){
  initToolbar();
  initData();
  initNavigationView();
  BottomNavigationViewHelper.disableShiftMode(bottomNavigationBar);
  mDataManager.setCurrentPage(Constants.FIRST);
  bottomNavigationBar.setOnNavigationItemSelectedListener(item -> {
switch (item.getItemId()) {
case R.id.tab_main_pager:
      mTitleTv.setText(getString(R.string.home_pager));
    switchFragment(0);
  mMainPagerFragment.reLoad();
mDataManager.setCurrentPage(Constants.FIRST);
break;
case R.id.tab_knowledge_hierarchy:
mTitleTv.setText(getString(R.string.knowledge_hierarchy));
switchFragment(1);
mKnowledgeHierarchyFragment.reLoad();
mDataManager.setCurrentPage(Constants.SECOND);
break;
case R.id.tab_navigation:
mTitleTv.setText(getString(R.string.navigation));
switchFragment(2);
mNavigationFragment.reLoad();
mDataManager.setCurrentPage(Constants.THIRD);
break;
case R.id.tab_project:
mTitleTv.setText(getString(R.string.project));
switchFragment(3);
mProjectFragment.reLoad();
mDataManager.setCurrentPage(Constants.FOURTH);
break;
default :
break;
}
return true;
}
);
ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
@Override public void onDrawerSlide(View drawerView,float slideOffset){
View mContent=mDrawerLayout.getChildAt(0);
float scale=1 - slideOffset;
float endScale=0.8f + scale * 0.2f;
float startScale=1 - 0.3f * scale;
drawerView.setScaleX(startScale);
drawerView.setScaleY(startScale);
drawerView.setAlpha(0.6f + 0.4f * (1 - scale));
mContent.setTranslationX(drawerView.getMeasuredWidth() * (1 - scale));
mContent.invalidate();
mContent.setScaleX(endScale);
mContent.setScaleY(endScale);
}
}
;
toggle.syncState();
mDrawerLayout.addDrawerListener(toggle);
}"
62576,"@Override public void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse,boolean isReLogin){
  if (feedArticleListResponse == null || feedArticleListResponse.getData() == null || feedArticleListResponse.getData().getDatas() == null) {
    showArticleListFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (isReLogin || mDataManager.getCurrentPage() == Constants.FIRST) {
    mRefreshLayout.setVisibility(View.VISIBLE);
  }
 else {
    mRefreshLayout.setVisibility(View.INVISIBLE);
  }
  if (isRefresh) {
    mFeedArticleDataList=feedArticleListResponse.getData().getDatas();
    mAdapter.replaceData(feedArticleListResponse.getData().getDatas());
  }
 else {
    mFeedArticleDataList.addAll(feedArticleListResponse.getData().getDatas());
    mAdapter.addData(feedArticleListResponse.getData().getDatas());
  }
}","@Override public void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse){
  if (feedArticleListResponse == null || feedArticleListResponse.getData() == null || feedArticleListResponse.getData().getDatas() == null) {
    showArticleListFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (mDataManager.getCurrentPage() == Constants.FIRST) {
    mRefreshLayout.setVisibility(View.VISIBLE);
  }
 else {
    mRefreshLayout.setVisibility(View.INVISIBLE);
  }
  if (isRefresh) {
    mFeedArticleDataList=feedArticleListResponse.getData().getDatas();
    mAdapter.replaceData(feedArticleListResponse.getData().getDatas());
  }
 else {
    mFeedArticleDataList.addAll(feedArticleListResponse.getData().getDatas());
    mAdapter.addData(feedArticleListResponse.getData().getDatas());
  }
}"
62577,"/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    ft.remove(targetFg);
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}","/** 
 * 切换fragment
 * @param position 要显示的fragment的下标
 */
private void switchFragment(int position){
  if (position >= mFragments.size()) {
    return;
  }
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  Fragment targetFg=mFragments.get(position);
  Fragment lastFg=mFragments.get(mLastFgIndex);
  mLastFgIndex=position;
  ft.hide(lastFg);
  if (!targetFg.isAdded()) {
    ft.add(R.id.fragment_group,targetFg);
  }
  ft.show(targetFg);
  ft.commitAllowingStateLoss();
}"
62578,"/** 
 * Show content
 * @param feedArticleListResponse BaseResponse<FeedArticleListData>
 */
void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse);","/** 
 * Show content
 * @param feedArticleListResponse BaseResponse<FeedArticleListData>
 * @param isReLogin If reLogin
 */
void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse,boolean isReLogin);"
62579,"@Override public void getFeedArticleList(int page){
  addSubscribe(mDataManager.getFeedArticleList(page).compose(RxUtils.rxSchedulerHelper()).filter(feedArticleListResponse -> mView != null).subscribeWith(new BaseObserver<BaseResponse<FeedArticleListData>>(mView){
    @Override public void onNext(    BaseResponse<FeedArticleListData> feedArticleListResponse){
      if (feedArticleListResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showArticleList(feedArticleListResponse);
      }
 else {
        mView.showArticleListFail();
      }
    }
  }
));
}","@Override public void getFeedArticleList(int page){
  addSubscribe(mDataManager.getFeedArticleList(page).compose(RxUtils.rxSchedulerHelper()).filter(feedArticleListResponse -> mView != null).subscribeWith(new BaseObserver<BaseResponse<FeedArticleListData>>(mView){
    @Override public void onNext(    BaseResponse<FeedArticleListData> feedArticleListResponse){
      if (feedArticleListResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showArticleList(feedArticleListResponse,false);
      }
 else {
        mView.showArticleListFail();
      }
    }
  }
));
}"
62580,"@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<BaseResponse<LoginData>> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BaseResponse<List<BannerData>>> mBannerObservable=mDataManager.getBannerData();
  Observable<BaseResponse<FeedArticleListData>> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribeWith(new BaseObserver<HashMap<String,Object>>(mView){
    @Override public void onNext(    HashMap<String,Object> map){
      BaseResponse<LoginData> loginResponse=CommonUtils.cast(map.get(Constants.LOGIN_DATA));
      if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showAutoLoginSuccess();
      }
      mView.showBannerData(CommonUtils.cast(map.get(Constants.BANNER_DATA)));
      mView.showArticleList(CommonUtils.cast(map.get(Constants.ARTICLE_DATA)));
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      mView.showAutoLoginFail();
    }
  }
);
}","@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<BaseResponse<LoginData>> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BaseResponse<List<BannerData>>> mBannerObservable=mDataManager.getBannerData();
  Observable<BaseResponse<FeedArticleListData>> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribeWith(new BaseObserver<HashMap<String,Object>>(mView){
    @Override public void onNext(    HashMap<String,Object> map){
      BaseResponse<LoginData> loginResponse=CommonUtils.cast(map.get(Constants.LOGIN_DATA));
      if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showAutoLoginSuccess();
      }
      mView.showBannerData(CommonUtils.cast(map.get(Constants.BANNER_DATA)));
      mView.showArticleList(CommonUtils.cast(map.get(Constants.ARTICLE_DATA)),true);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      mView.showAutoLoginFail();
    }
  }
);
}"
62581,"@Override public void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse){
  if (feedArticleListResponse == null || feedArticleListResponse.getData() == null || feedArticleListResponse.getData().getDatas() == null) {
    showArticleListFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (mDataManager.getCurrentPage() == Constants.FIRST) {
    mRefreshLayout.setVisibility(View.VISIBLE);
  }
 else {
    mRefreshLayout.setVisibility(View.INVISIBLE);
  }
  if (isRefresh) {
    mFeedArticleDataList=feedArticleListResponse.getData().getDatas();
    mAdapter.replaceData(feedArticleListResponse.getData().getDatas());
  }
 else {
    mFeedArticleDataList.addAll(feedArticleListResponse.getData().getDatas());
    mAdapter.addData(feedArticleListResponse.getData().getDatas());
  }
}","@Override public void showArticleList(BaseResponse<FeedArticleListData> feedArticleListResponse,boolean isReLogin){
  if (feedArticleListResponse == null || feedArticleListResponse.getData() == null || feedArticleListResponse.getData().getDatas() == null) {
    showArticleListFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (isReLogin || mDataManager.getCurrentPage() == Constants.FIRST) {
    mRefreshLayout.setVisibility(View.VISIBLE);
  }
 else {
    mRefreshLayout.setVisibility(View.INVISIBLE);
  }
  if (isRefresh) {
    mFeedArticleDataList=feedArticleListResponse.getData().getDatas();
    mAdapter.replaceData(feedArticleListResponse.getData().getDatas());
  }
 else {
    mFeedArticleDataList.addAll(feedArticleListResponse.getData().getDatas());
    mAdapter.addData(feedArticleListResponse.getData().getDatas());
  }
}"
62582,"@Override public void showProjectClassifyData(BaseResponse<List<ProjectClassifyData>> projectClassifyResponse){
  if (projectClassifyResponse == null || projectClassifyResponse.getData() == null) {
    showProjectClassifyDataFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (mDataManager.getCurrentPage() == Constants.FOURTH) {
    mTabLayout.setVisibility(View.VISIBLE);
    mViewPager.setVisibility(View.VISIBLE);
  }
 else {
    mTabLayout.setVisibility(View.INVISIBLE);
    mViewPager.setVisibility(View.INVISIBLE);
  }
  mData=projectClassifyResponse.getData();
  for (  ProjectClassifyData data : mData) {
    ProjectListFragment projectListFragment=ProjectListFragment.getInstance(data.getId(),null);
    mFragments.add(projectListFragment);
  }
  mViewPager.setAdapter(new FragmentPagerAdapter(getChildFragmentManager()){
    @Override public Fragment getItem(    int position){
      return mFragments.get(position);
    }
    @Override public int getCount(){
      return mData == null ? 0 : mData.size();
    }
    @Override public CharSequence getPageTitle(    int position){
      return mData.get(position).getName();
    }
  }
);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      currentPage=position;
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mTabLayout.setViewPager(mViewPager);
  mViewPager.setCurrentItem(Constants.TAB_ONE);
}","@Override public void showProjectClassifyData(BaseResponse<List<ProjectClassifyData>> projectClassifyResponse){
  if (projectClassifyResponse == null || projectClassifyResponse.getData() == null) {
    showProjectClassifyDataFail();
    return;
  }
  RxBus.getDefault().post(new DismissErrorView());
  if (mDataManager.getCurrentPage() == Constants.FOURTH) {
    mTabLayout.setVisibility(View.VISIBLE);
    mDivider.setVisibility(View.VISIBLE);
    mViewPager.setVisibility(View.VISIBLE);
  }
 else {
    mTabLayout.setVisibility(View.INVISIBLE);
    mDivider.setVisibility(View.INVISIBLE);
    mViewPager.setVisibility(View.INVISIBLE);
  }
  mData=projectClassifyResponse.getData();
  for (  ProjectClassifyData data : mData) {
    ProjectListFragment projectListFragment=ProjectListFragment.getInstance(data.getId(),null);
    mFragments.add(projectListFragment);
  }
  mViewPager.setAdapter(new FragmentPagerAdapter(getChildFragmentManager()){
    @Override public Fragment getItem(    int position){
      return mFragments.get(position);
    }
    @Override public int getCount(){
      return mData == null ? 0 : mData.size();
    }
    @Override public CharSequence getPageTitle(    int position){
      return mData.get(position).getName();
    }
  }
);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      currentPage=position;
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mTabLayout.setViewPager(mViewPager);
  mViewPager.setCurrentItem(Constants.TAB_ONE);
}"
62583,"@Override public void showError(){
  mTabLayout.setVisibility(View.INVISIBLE);
  mViewPager.setVisibility(View.INVISIBLE);
  RxBus.getDefault().post(new ShowErrorView());
}","@Override public void showError(){
  mTabLayout.setVisibility(View.INVISIBLE);
  mDivider.setVisibility(View.INVISIBLE);
  mViewPager.setVisibility(View.INVISIBLE);
  RxBus.getDefault().post(new ShowErrorView());
}"
62584,"@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  if (TextUtils.isEmpty(account) || TextUtils.isEmpty(password)) {
    return;
  }
  Observable<LoginResponse> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BannerResponse> mBannerObservable=mDataManager.getBannerData();
  Observable<FeedArticleListResponse> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribe(map -> {
    LoginResponse loginResponse=(LoginResponse)map.get(Constants.LOGIN_DATA);
    if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
      mView.showAutoLoginSuccess();
    }
 else {
      mView.showErrorMsg(loginResponse.getErrorMsg());
    }
    mView.showBannerData((BannerResponse)map.get(Constants.BANNER_DATA));
    mView.showArticleList((FeedArticleListResponse)map.get(Constants.ARTICLE_DATA));
  }
);
}","@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<LoginResponse> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BannerResponse> mBannerObservable=mDataManager.getBannerData();
  Observable<FeedArticleListResponse> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribe(map -> {
    LoginResponse loginResponse=(LoginResponse)map.get(Constants.LOGIN_DATA);
    if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
      mView.showAutoLoginSuccess();
    }
    mView.showBannerData((BannerResponse)map.get(Constants.BANNER_DATA));
    mView.showArticleList((FeedArticleListResponse)map.get(Constants.ARTICLE_DATA));
  }
);
}"
62585,"@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<LoginResponse> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BannerResponse> mBannerObservable=mDataManager.getBannerData();
  Observable<FeedArticleListResponse> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribe(map -> {
    LoginResponse loginResponse=(LoginResponse)map.get(Constants.LOGIN_DATA);
    if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
      mView.showAutoLoginSuccess();
    }
    mView.showBannerData((BannerResponse)map.get(Constants.BANNER_DATA));
    mView.showArticleList((FeedArticleListResponse)map.get(Constants.ARTICLE_DATA));
  }
);
}","@Override public void loadMainPagerData(){
  String account=mDataManager.getLoginAccount();
  String password=mDataManager.getLoginPassword();
  Observable<LoginResponse> mLoginObservable=mDataManager.getLoginData(account,password);
  Observable<BannerResponse> mBannerObservable=mDataManager.getBannerData();
  Observable<FeedArticleListResponse> mArticleObservable=mDataManager.getFeedArticleList(Constants.FIRST);
  Observable.zip(mLoginObservable,mBannerObservable,mArticleObservable,(loginResponse,bannerResponse,feedArticleListResponse) -> {
    HashMap<String,Object> map=new HashMap<>(3);
    map.put(Constants.LOGIN_DATA,loginResponse);
    map.put(Constants.BANNER_DATA,bannerResponse);
    map.put(Constants.ARTICLE_DATA,feedArticleListResponse);
    return map;
  }
).compose(RxUtils.rxSchedulerHelper()).subscribeWith(new BaseObserver<HashMap<String,Object>>(mView){
    @Override public void onNext(    HashMap<String,Object> map){
      LoginResponse loginResponse=(LoginResponse)map.get(Constants.LOGIN_DATA);
      if (loginResponse.getErrorCode() == BaseResponse.SUCCESS) {
        mView.showAutoLoginSuccess();
      }
      mView.showBannerData((BannerResponse)map.get(Constants.BANNER_DATA));
      mView.showArticleList((FeedArticleListResponse)map.get(Constants.ARTICLE_DATA));
    }
  }
);
}"
62586,"public void reLoad(){
  mPresenter.getKnowledgeHierarchyData();
}","public void reLoad(){
  if (mPresenter != null) {
    mPresenter.getKnowledgeHierarchyData();
  }
}"
62587,"@Override protected void initEventAndData(){
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  mKnowledgeHierarchyData=((KnowledgeHierarchyData)bundle.getSerializable(Constants.ARG_PARAM1));
  if (mKnowledgeHierarchyData == null) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,mKnowledgeHierarchyData.getId());
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    articlePosition=position;
    JudgeUtils.startArticleDetailActivity(_mActivity,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
    if (!mDataManager.getLoginStatus()) {
      startActivity(new Intent(_mActivity,LoginActivity.class));
      CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
      return;
    }
    if (mAdapter.getData().get(position).isCollect()) {
      mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
    }
 else {
      mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
    }
  }
);
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  RxBus.getDefault().toFlowable(CollectSuccessEvent.class).filter(collectSuccessEvent -> mAdapter != null).subscribe(collectSuccessEvent -> {
    mAdapter.getData().get(articlePosition).setCollect(true);
    mAdapter.setData(articlePosition,mAdapter.getData().get(articlePosition));
  }
);
  RxBus.getDefault().toFlowable(CancelCollectSuccessEvent.class).filter(collectSuccessEvent -> mAdapter != null).subscribe(collectSuccessEvent -> {
    mAdapter.getData().get(articlePosition).setCollect(false);
    mAdapter.setData(articlePosition,mAdapter.getData().get(articlePosition));
  }
);
  RxBus.getDefault().toFlowable(KnowledgeJumpTopEvent.class).filter(knowledgeJumpTopEvent -> mRecyclerView != null).subscribe(knowledgeJumpTopEvent -> mRecyclerView.smoothScrollToPosition(0));
  RxBus.getDefault().toFlowable(ReloadDetailEvent.class).filter(reloadEvent -> mRefreshLayout != null).subscribe(reloadEvent -> mRefreshLayout.autoRefresh());
}","@Override protected void initEventAndData(){
  isInnerFragment=true;
  setRefresh();
  Bundle bundle=getArguments();
  mKnowledgeHierarchyData=((KnowledgeHierarchyData)bundle.getSerializable(Constants.ARG_PARAM1));
  if (mKnowledgeHierarchyData == null) {
    return;
  }
  mCurrentPage=0;
  mPresenter.getKnowledgeHierarchyDetailData(mCurrentPage,mKnowledgeHierarchyData.getId());
  mAdapter=new ArticleListAdapter(R.layout.item_search_pager,mArticles);
  mAdapter.setOnItemClickListener((adapter,view,position) -> {
    articlePosition=position;
    JudgeUtils.startArticleDetailActivity(_mActivity,mAdapter.getData().get(position).getId(),mAdapter.getData().get(position).getTitle().trim(),mAdapter.getData().get(position).getLink().trim(),mAdapter.getData().get(position).isCollect(),false,false);
  }
);
  mAdapter.setOnItemChildClickListener((adapter,view,position) -> {
    if (!mDataManager.getLoginStatus()) {
      startActivity(new Intent(_mActivity,LoginActivity.class));
      CommonUtils.showMessage(_mActivity,getString(R.string.login_tint));
      return;
    }
    if (mAdapter.getData().get(position).isCollect()) {
      mPresenter.cancelCollectArticle(position,mAdapter.getData().get(position));
    }
 else {
      mPresenter.addCollectArticle(position,mAdapter.getData().get(position));
    }
  }
);
  mRecyclerView.setAdapter(mAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(_mActivity));
  RxBus.getDefault().toFlowable(CollectSuccessEvent.class).filter(collectSuccessEvent -> mAdapter != null && mAdapter.getData().size() > articlePosition).subscribe(collectSuccessEvent -> {
    mAdapter.getData().get(articlePosition).setCollect(true);
    mAdapter.setData(articlePosition,mAdapter.getData().get(articlePosition));
  }
);
  RxBus.getDefault().toFlowable(CancelCollectSuccessEvent.class).filter(collectSuccessEvent -> mAdapter != null && mAdapter.getData().size() > articlePosition).subscribe(collectSuccessEvent -> {
    mAdapter.getData().get(articlePosition).setCollect(false);
    mAdapter.setData(articlePosition,mAdapter.getData().get(articlePosition));
  }
);
  RxBus.getDefault().toFlowable(KnowledgeJumpTopEvent.class).filter(knowledgeJumpTopEvent -> mRecyclerView != null).subscribe(knowledgeJumpTopEvent -> mRecyclerView.smoothScrollToPosition(0));
  RxBus.getDefault().toFlowable(ReloadDetailEvent.class).filter(reloadEvent -> mRefreshLayout != null).subscribe(reloadEvent -> mRefreshLayout.autoRefresh());
}"
62588,"private void setLoginView(){
  mUsTv=(TextView)mNavigationView.getHeaderView(0).findViewById(R.id.nav_header_login_tv);
  mUsTv.setText(mDataManager.getLoginAccount());
  mUsTv.setOnClickListener(null);
  mNavigationView.getMenu().findItem(R.id.nav_item_logout).setVisible(true);
}","private void setLoginView(){
  if (mNavigationView == null) {
    return;
  }
  mUsTv=(TextView)mNavigationView.getHeaderView(0).findViewById(R.id.nav_header_login_tv);
  mUsTv.setText(mDataManager.getLoginAccount());
  mUsTv.setOnClickListener(null);
  mNavigationView.getMenu().findItem(R.id.nav_item_logout).setVisible(true);
}"
62589,"private void setLogoutView(){
  mUsTv.setText(R.string.login_in);
  mUsTv.setOnClickListener(v -> startActivity(new Intent(this,LoginActivity.class)));
  mNavigationView.getMenu().findItem(R.id.nav_item_logout).setVisible(false);
}","private void setLogoutView(){
  mUsTv.setText(R.string.login_in);
  mUsTv.setOnClickListener(v -> startActivity(new Intent(this,LoginActivity.class)));
  if (mNavigationView == null) {
    return;
  }
  mNavigationView.getMenu().findItem(R.id.nav_item_logout).setVisible(false);
}"
62590,"public void reLoad(){
  mPresenter.getNavigationListData();
}","public void reLoad(){
  if (mPresenter != null) {
    mPresenter.getNavigationListData();
  }
}"
62591,"public void reLoad(){
  mPresenter.getProjectClassifyData();
}","public void reLoad(){
  if (mPresenter != null) {
    mPresenter.getProjectClassifyData();
  }
}"
62592,"/** 
 * Start building a new annotation for the given name.
 * @param annotation The annotation name
 * @return The builder
 */
public static <T extends Annotation>AnnotationValueBuilder<T> builder(Class<T> annotation){
  return new AnnotationValueBuilder<>(annotation);
}","/** 
 * Start building a new annotation for the given name.
 * @param annotation The annotation name
 * @param < T > The annotation type
 * @return The builder
 */
public static <T extends Annotation>AnnotationValueBuilder<T> builder(Class<T> annotation){
  return new AnnotationValueBuilder<>(annotation);
}"
62593,"/** 
 * Sets the value member to the given type object.
 * @param type The type
 * @return This builder
 */
public AnnotationValueBuilder<T> member(String name,Class<?> type){
  values.put(name,type);
  return this;
}","/** 
 * Sets the value member to the given type object.
 * @param name The name of the member
 * @param type The type
 * @return This builder
 */
public AnnotationValueBuilder<T> member(String name,Class<?> type){
  values.put(name,type);
  return this;
}"
62594,"public ExtendedParameter(MethodNode methodNode,Parameter parameter){
  this.methodNode=methodNode;
  this.parameter=parameter;
  this.addAnnotations(parameter.getAnnotations());
  this.setSynthetic(parameter.isSynthetic());
  this.setDeclaringClass(parameter.getDeclaringClass());
  this.setHasNoRealSourcePosition(parameter.hasNoRealSourcePosition());
}","/** 
 * @param methodNode The method node that contains the parameter
 * @param parameter  The parameter
 */
public ExtendedParameter(MethodNode methodNode,Parameter parameter){
  this.methodNode=methodNode;
  this.parameter=parameter;
  this.addAnnotations(parameter.getAnnotations());
  this.setSynthetic(parameter.isSynthetic());
  this.setDeclaringClass(parameter.getDeclaringClass());
  this.setHasNoRealSourcePosition(parameter.hasNoRealSourcePosition());
}"
62595,"public MethodNode getMethodNode(){
  return methodNode;
}","/** 
 * @return The method node that contains the parameter
 */
public MethodNode getMethodNode(){
  return methodNode;
}"
62596,"public Parameter getParameter(){
  return parameter;
}","/** 
 * @return The parameter
 */
public Parameter getParameter(){
  return parameter;
}"
62597,"/** 
 * @param name The name of the logger to configure
 * @param configuredLevel The {@link LogLevel} to set on the named logger
 * @return The {@link HttpResponse} with status code and message on error
 */
@Write public HttpResponse setLogLevel(@QueryValue @NotBlank String name,@Nullable LogLevel configuredLevel){
  try {
    loggersManager.setLogLevel(loggingSystem,name,configuredLevel != null ? configuredLevel : LogLevel.NOT_SPECIFIED);
    return HttpResponse.ok();
  }
 catch (  IllegalArgumentException ex) {
    return HttpResponse.badRequest(ex.getMessage());
  }
}","/** 
 * @param name The name of the logger to configure
 * @param configuredLevel The {@link LogLevel} to set on the named logger
 * @return The {@link HttpResponse} with status code and message on error
 */
@Write public HttpResponse setLogLevel(@QueryValue @NotBlank String name,@Nullable LogLevel configuredLevel){
  try {
    loggersManager.setLogLevel(loggingSystem,name,configuredLevel != null ? configuredLevel : LogLevel.NOT_SPECIFIED);
    return HttpResponse.ok();
  }
 catch (  IllegalArgumentException ex) {
    JsonError error=new JsonError(ex.getMessage());
    return HttpResponse.badRequest(error);
  }
}"
62598,"@Override public Optional<Object> convert(FileUpload object,Class<Object> targetType,ConversionContext context){
  try {
    if (!object.isCompleted()) {
      return Optional.empty();
    }
    String contentType=object.getContentType();
    ByteBuf byteBuf=object.getByteBuf();
    if (contentType != null) {
      MediaType mediaType=new MediaType(contentType);
      Optional<MediaTypeCodec> registered=decoderRegistry.findCodec(mediaType);
      if (registered.isPresent()) {
        MediaTypeCodec decoder=registered.get();
        Object val=decoder.decode(targetType,new ByteBufInputStream(byteBuf));
        return Optional.of(val);
      }
 else {
        return conversionService.convert(byteBuf,targetType,context);
      }
    }
    return conversionService.convert(byteBuf,targetType,context);
  }
 catch (  Exception e) {
    context.reject(e);
    return Optional.empty();
  }
}","@Override public Optional<Object> convert(FileUpload object,Class<Object> targetType,ConversionContext context){
  try {
    if (!object.isCompleted()) {
      return Optional.empty();
    }
    String contentType=object.getContentType();
    ByteBuf byteBuf=object.getByteBuf();
    if (contentType != null) {
      MediaType mediaType=new MediaType(contentType);
      Optional<MediaTypeCodec> registered=decoderRegistryProvider.get().findCodec(mediaType);
      if (registered.isPresent()) {
        MediaTypeCodec decoder=registered.get();
        Object val=decoder.decode(targetType,new ByteBufInputStream(byteBuf));
        return Optional.of(val);
      }
 else {
        return conversionService.convert(byteBuf,targetType,context);
      }
    }
    return conversionService.convert(byteBuf,targetType,context);
  }
 catch (  Exception e) {
    context.reject(e);
    return Optional.empty();
  }
}"
62599,"/** 
 * @param conversionService The conversion service
 * @param decoderRegistry   The media type decoder registry
 */
protected FileUploadToObjectConverter(ConversionService conversionService,MediaTypeCodecRegistry decoderRegistry){
  this.conversionService=conversionService;
  this.decoderRegistry=decoderRegistry;
}","/** 
 * @param conversionService       The conversion service
 * @param decoderRegistryProvider The media type decoder registry provider
 */
protected FileUploadToObjectConverter(ConversionService conversionService,Provider<MediaTypeCodecRegistry> decoderRegistryProvider){
  this.conversionService=conversionService;
  this.decoderRegistryProvider=decoderRegistryProvider;
}"
62600,"/** 
 * Obtains an instance of the specified   {@code Callable} command class from the specified context,injecting any beans from the specified context as required, then parses the specified command line arguments, populating fields and methods annotated with picocli  {@link Option @Option} and {@link Parameters @Parameters}annotations, and finally calls the command and returns the result. <p> The caller is responsible for   {@linkplain ApplicationContext#close() closing} the context.</p>
 * @param cls the Callable command class
 * @param ctx the ApplicationContext that injects dependencies into the command
 * @param args the command line arguments
 * @return {@code null} if an error occurred while parsing the command line options,or if help was requested and printed. Otherwise returns the result of calling the Callable
 * @throws InitializationException if the specified command object does not havea  {@link Command},   {@link Option} or {@link Parameters} annotation
 * @throws ExecutionException if the Callable throws an exception
 */
public static <C extends Callable<T>,T>T call(Class<C> cls,ApplicationContext ctx,String... args){
  return CommandLine.call(cls,new MicronautFactory(ctx),args);
}","/** 
 * Obtains an instance of the specified   {@code Callable} command class from the specified context,injecting any beans from the specified context as required, then parses the specified command line arguments, populating fields and methods annotated with picocli  {@link Option @Option} and {@link Parameters @Parameters}annotations, and finally calls the command and returns the result. <p> The caller is responsible for   {@linkplain ApplicationContext#close() closing} the context.</p>
 * @param cls the Callable command class
 * @param ctx the ApplicationContext that injects dependencies into the command
 * @param args the command line arguments
 * @param < C > The callable type
 * @param < T > The callable return type
 * @return {@code null} if an error occurred while parsing the command line options,or if help was requested and printed. Otherwise returns the result of calling the Callable
 * @throws InitializationException if the specified command object does not havea  {@link Command},   {@link Option} or {@link Parameters} annotation
 * @throws ExecutionException if the Callable throws an exception
 */
public static <C extends Callable<T>,T>T call(Class<C> cls,ApplicationContext ctx,String... args){
  return CommandLine.call(cls,new MicronautFactory(ctx),args);
}"
62601,"/** 
 * Obtains an instance of the specified   {@code Runnable} command class from the specified context,injecting any beans from the specified context as required, then parses the specified command line arguments, populating fields and methods annotated with picocli  {@link Option @Option} and {@link Parameters @Parameters}annotations, and finally runs the command. <p> The caller is responsible for   {@linkplain ApplicationContext#close() closing} the context.</p>
 * @param cls the Runnable command class
 * @param ctx the ApplicationContext that injects dependencies into the command
 * @param args the command line arguments
 * @throws InitializationException if the specified command object does not havea  {@link Command},   {@link Option} or {@link Parameters} annotation
 * @throws ExecutionException if the Runnable throws an exception
 */
public static <R extends Runnable>void run(Class<R> cls,ApplicationContext ctx,String... args){
  CommandLine.run(cls,new MicronautFactory(ctx),args);
}","/** 
 * Obtains an instance of the specified   {@code Runnable} command class from the specified context,injecting any beans from the specified context as required, then parses the specified command line arguments, populating fields and methods annotated with picocli  {@link Option @Option} and {@link Parameters @Parameters}annotations, and finally runs the command. <p> The caller is responsible for   {@linkplain ApplicationContext#close() closing} the context.</p>
 * @param cls the Runnable command class
 * @param ctx the ApplicationContext that injects dependencies into the command
 * @param args the command line arguments
 * @param < R > The runnable type
 * @throws InitializationException if the specified command object does not havea  {@link Command},   {@link Option} or {@link Parameters} annotation
 * @throws ExecutionException if the Runnable throws an exception
 */
public static <R extends Runnable>void run(Class<R> cls,ApplicationContext ctx,String... args){
  CommandLine.run(cls,new MicronautFactory(ctx),args);
}"
62602,"@Write public HttpResponse setLogLevel(@QueryValue @NotBlank String name,@Nullable String configuredLevel){
  loggersDataCollector.setLogLevel(loggingSystem,name,configuredLevel);
  return HttpResponse.ok();
}","/** 
 * @param name The name of the logger to configure
 * @param configuredLevel The {@link LogLevel} as a string to set on the named logger
 * @return OK status, empty body
 */
@Write public HttpResponse setLogLevel(@QueryValue @NotBlank String name,@Nullable String configuredLevel){
  loggersDataCollector.setLogLevel(loggingSystem,name,configuredLevel);
  return HttpResponse.ok();
}"
62603,"/** 
 * @param level The micronaut {@link LogLevel} to convert
 * @return The converted logback {@link Level}
 */
protected static Level toLevel(LogLevel logLevel){
  if (logLevel == LogLevel.NOT_SPECIFIED) {
    return null;
  }
 else {
    return Level.valueOf(logLevel.name());
  }
}","/** 
 * @param logLevel The micronaut {@link LogLevel} to convert
 * @return The converted logback {@link Level}
 */
protected static Level toLevel(LogLevel logLevel){
  if (logLevel == LogLevel.NOT_SPECIFIED) {
    return null;
  }
 else {
    return Level.valueOf(logLevel.name());
  }
}"
62604,"/** 
 * @param body The body to replace
 * @return The current instance
 */
public NettyMutableHttpResponse replace(ByteBuf body){
  this.nettyResponse=this.nettyResponse.replace(body);
  return this;
}","/** 
 * @param body The body to replace
 * @return The current instance
 */
public NettyMutableHttpResponse replace(ByteBuf body){
  this.nettyResponse=this.nettyResponse.replace(body);
  this.headers.setNettyHeaders(this.nettyResponse.headers());
  return this;
}"
62605,"Publisher<T> getOne(LoggingSystem loggingSystem,@NotBlank String name);","/** 
 * Find (or create if not found) the named logger in the system.
 * @param loggingSystem The {@link LoggingSystem} in use
 * @param name The name of the logger to find or create
 * @return A {@link Publisher} of <code>T</code>
 */
Publisher<T> getOne(LoggingSystem loggingSystem,@NotBlank String name);"
62606,Publisher<T> getData(LoggingSystem loggingSystem);,"/** 
 * Collect all existing loggers in the system.
 * @param loggingSystem The {@link LoggingSystem} in use
 * @return A {@link Publisher} of <code>T</code>
 */
Publisher<T> getData(LoggingSystem loggingSystem);"
62607,"@Read public Single getLogger(@QueryValue @NotBlank String name){
  return Single.fromPublisher(loggersDataCollector.getOne(loggingSystem,name));
}","/** 
 * @param name The name of the logger to find
 * @return the {@link LogLevel} (both configured and effective) of the named logger
 */
@Read public Single getLogger(@QueryValue @NotBlank String name){
  return Single.fromPublisher(loggersDataCollector.getOne(loggingSystem,name));
}"
62608,"/** 
 * Set the log level for the logger found by name (or created if not found)
 * @param name the logger name
 * @param level the log level to set on the named logger
 */
void setLogLevel(@NotBlank String name,@NotNull LogLevel level);","/** 
 * Set the log level for the logger found by name (or created if not found).
 * @param name the logger name
 * @param level the log level to set on the named logger
 */
void setLogLevel(@NotBlank String name,@NotNull LogLevel level);"
62609,"/** 
 * Returns a   {@link LoggerConfiguration} for the logger found by name (or created if not found)
 * @param name the logger name
 * @return the logger configuration
 */
LoggerConfiguration getLogger(@NotBlank String name);","/** 
 * Returns a   {@link LoggerConfiguration} for the logger found by name (or created if not found).
 * @param name the logger name
 * @return the logger configuration
 */
LoggerConfiguration getLogger(@NotBlank String name);"
62610,"/** 
 * Returns all existing loggers
 * @return A {@link Collection} of {@link LoggerConfiguration} instances for all existing loggers
 */
Collection<LoggerConfiguration> getLoggers();","/** 
 * Returns all existing loggers.
 * @return A {@link Collection} of {@link LoggerConfiguration} instances for all existing loggers
 */
Collection<LoggerConfiguration> getLoggers();"
62611,"/** 
 * @param vertx The Vertx instance.
 * @return
 */
private PgPool createClient(Vertx vertx){
  PgPoolConfiguration configuration=this.pgPoolConfiguration;
  String connectionUri=configuration.getUri();
  if (StringUtils.isNotEmpty(connectionUri)) {
    return PgClient.pool(vertx,connectionUri);
  }
 else {
    return PgClient.pool(vertx,configuration.pgPoolOptions);
  }
}","/** 
 * Create a connection pool to the database configured with the   {@link PgPoolConfiguration}.
 * @param vertx The Vertx instance.
 * @return A pool of connections.
 */
private PgPool createClient(Vertx vertx){
  PgPoolConfiguration configuration=this.pgPoolConfiguration;
  String connectionUri=configuration.getUri();
  if (StringUtils.isNotEmpty(connectionUri)) {
    return PgClient.pool(vertx,connectionUri);
  }
 else {
    return PgClient.pool(vertx,configuration.pgPoolOptions);
  }
}"
62612,"/** 
 * @return client
 */
@Singleton @Bean(preDestroy=""String_Node_Str"") public PgPool client(){
  if (this.vertx == null) {
    return createClient();
  }
 else {
    return createClient(vertx);
  }
}","/** 
 * @return client A pool of connections.
 */
@Singleton @Bean(preDestroy=""String_Node_Str"") public PgPool client(){
  if (this.vertx == null) {
    return createClient();
  }
 else {
    return createClient(vertx);
  }
}"
62613,"/** 
 * @param pgPoolConfiguration
 * @param vertx
 */
public PgPoolClientFactory(PgPoolConfiguration pgPoolConfiguration,@Nullable Vertx vertx){
  this.pgPoolConfiguration=pgPoolConfiguration;
  this.vertx=vertx;
}","/** 
 * Create the factory with given Posgres Pool configuration and Vertx instance(can be null) if you are running with Vert.x.
 * @param pgPoolConfiguration The Reactive Postgres configurations
 * @param vertx The Vertx instance
 */
public PgPoolClientFactory(PgPoolConfiguration pgPoolConfiguration,@Nullable Vertx vertx){
  this.pgPoolConfiguration=pgPoolConfiguration;
  this.vertx=vertx;
}"
62614,"/** 
 * @return
 */
public PgPoolOptions getPgPoolOptions(){
  return pgPoolOptions;
}","/** 
 * @return The options for configuring a connection pool.
 */
public PgPoolOptions getPgPoolOptions(){
  return pgPoolOptions;
}"
62615,"/** 
 * @return
 */
public String getUri(){
  return uri;
}","/** 
 * @return The Postgres connection URI.
 */
public String getUri(){
  return uri;
}"
62616,"/** 
 * @param client The Reactive Pg Client.
 */
public PgPoolHealthIndicator(PgPool client){
  this.client=client;
}","/** 
 * Constructor.
 * @param client A pool of connections.
 */
public PgPoolHealthIndicator(PgPool client){
  this.client=client;
}"
62617,"/** 
 * Returns the level of detail that should be returned by the endpoint.
 * @param principal Authenticated user
 * @return The {@link HealthLevelOfDetail}
 */
public HealthLevelOfDetail levelOfDetail(@Nullable Principal principal){
  boolean showDetails=false;
switch (detailsVisibility) {
case AUTHENTICATED:
    showDetails=principal != null;
  break;
case ANONYMOUS:
showDetails=true;
}
if (showDetails) {
return HealthLevelOfDetail.STATUS_DESCRIPTION_DETAILS;
}
 else {
return HealthLevelOfDetail.STATUS;
}
}","/** 
 * Returns the level of detail that should be returned by the endpoint.
 * @param principal Authenticated user
 * @return The {@link HealthLevelOfDetail}
 */
public HealthLevelOfDetail levelOfDetail(@Nullable Principal principal){
  boolean showDetails=false;
switch (detailsVisibility) {
case AUTHENTICATED:
    showDetails=principal != null;
  break;
case ANONYMOUS:
showDetails=true;
default :
}
if (showDetails) {
return HealthLevelOfDetail.STATUS_DESCRIPTION_DETAILS;
}
 else {
return HealthLevelOfDetail.STATUS;
}
}"
62618,"/** 
 * Execution the creation of a bean.
 * @param resolutionContext The {@link BeanResolutionContext}
 * @param beanDefinition    The {@link BeanDefinition}
 * @param qualifier         The {@link Qualifier}
 * @param isSingleton       Whether the bean is a singleton
 * @param argumentValues    Any argument values passed to create the bean
 * @param < T >               The bean generic type
 * @return The created bean
 */
protected <T>T doCreateBean(BeanResolutionContext resolutionContext,BeanDefinition<T> beanDefinition,Qualifier<T> qualifier,boolean isSingleton,Map<String,Object> argumentValues){
  BeanRegistration<T> beanRegistration=isSingleton && !beanDefinition.isIterable() ? singletonObjects.get(new BeanKey(beanDefinition.getBeanType(),qualifier)) : null;
  T bean;
  if (beanRegistration != null) {
    return beanRegistration.bean;
  }
  if (resolutionContext == null) {
    resolutionContext=new DefaultBeanResolutionContext(this,beanDefinition);
  }
  if (beanDefinition instanceof BeanFactory) {
    BeanFactory<T> beanFactory=(BeanFactory<T>)beanDefinition;
    try {
      if (beanFactory instanceof ParametrizedBeanFactory) {
        ParametrizedBeanFactory<T> parametrizedBeanFactory=(ParametrizedBeanFactory<T>)beanFactory;
        Argument<?>[] requiredArguments=parametrizedBeanFactory.getRequiredArguments();
        if (argumentValues == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanDefinition.getBeanType().getName());
        }
        Map<String,Object> convertedValues=new LinkedHashMap<>(argumentValues);
        for (        Argument<?> requiredArgument : requiredArguments) {
          Object val=argumentValues.get(requiredArgument.getName());
          if (val == null && !requiredArgument.getAnnotationMetadata().hasDeclaredAnnotation(Nullable.class)) {
            throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str"");
          }
          BeanResolutionContext finalResolutionContext=resolutionContext;
          if (val != null) {
            convertedValues.put(requiredArgument.getName(),ConversionService.SHARED.convert(val,requiredArgument).orElseThrow(() -> new BeanInstantiationException(finalResolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str""+ val+ ""String_Node_Str""+ requiredArgument.getType())));
          }
        }
        bean=parametrizedBeanFactory.build(resolutionContext,this,beanDefinition,convertedValues);
      }
 else {
        bean=beanFactory.build(resolutionContext,this,beanDefinition);
        if (bean == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanFactory + ""String_Node_Str"");
        }
      }
    }
 catch (    Throwable e) {
      if (e instanceof DependencyInjectionException) {
        throw e;
      }
      if (e instanceof BeanInstantiationException) {
        throw e;
      }
 else {
        if (!resolutionContext.getPath().isEmpty()) {
          throw new BeanInstantiationException(resolutionContext,e);
        }
 else {
          throw new BeanInstantiationException(beanDefinition,e);
        }
      }
    }
  }
 else {
    ConstructorInjectionPoint<T> constructor=beanDefinition.getConstructor();
    Argument[] requiredConstructorArguments=constructor.getArguments();
    if (requiredConstructorArguments.length == 0) {
      bean=constructor.invoke();
    }
 else {
      Object[] constructorArgs=new Object[requiredConstructorArguments.length];
      for (int i=0; i < requiredConstructorArguments.length; i++) {
        Class argument=requiredConstructorArguments[i].getType();
        constructorArgs[i]=getBean(resolutionContext,argument);
      }
      bean=constructor.invoke(constructorArgs);
    }
    inject(resolutionContext,null,bean);
  }
  if (!BeanCreatedEventListener.class.isInstance(bean)) {
    Collection<BeanCreatedEventListener> beanCreatedEventListeners=getBeansOfType(resolutionContext,BeanCreatedEventListener.class,Qualifiers.byTypeArguments(beanDefinition.getBeanType()));
    for (    BeanCreatedEventListener listener : beanCreatedEventListeners) {
      bean=(T)listener.onCreated(new BeanCreatedEvent(this,beanDefinition,bean));
      if (bean == null) {
        throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + listener + ""String_Node_Str"");
      }
    }
  }
  if (beanDefinition instanceof ValidatedBeanDefinition) {
    bean=((ValidatedBeanDefinition<T>)beanDefinition).validate(resolutionContext,bean);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",bean,beanDefinition,qualifier);
  }
  return bean;
}","/** 
 * Execution the creation of a bean.
 * @param resolutionContext The {@link BeanResolutionContext}
 * @param beanDefinition    The {@link BeanDefinition}
 * @param qualifier         The {@link Qualifier}
 * @param isSingleton       Whether the bean is a singleton
 * @param argumentValues    Any argument values passed to create the bean
 * @param < T >               The bean generic type
 * @return The created bean
 */
protected <T>T doCreateBean(BeanResolutionContext resolutionContext,BeanDefinition<T> beanDefinition,Qualifier<T> qualifier,boolean isSingleton,Map<String,Object> argumentValues){
  BeanRegistration<T> beanRegistration=isSingleton && !beanDefinition.isIterable() ? singletonObjects.get(new BeanKey(beanDefinition.getBeanType(),qualifier)) : null;
  T bean;
  if (beanRegistration != null) {
    return beanRegistration.bean;
  }
  if (resolutionContext == null) {
    resolutionContext=new DefaultBeanResolutionContext(this,beanDefinition);
  }
  if (beanDefinition instanceof BeanFactory) {
    BeanFactory<T> beanFactory=(BeanFactory<T>)beanDefinition;
    try {
      if (beanFactory instanceof ParametrizedBeanFactory) {
        ParametrizedBeanFactory<T> parametrizedBeanFactory=(ParametrizedBeanFactory<T>)beanFactory;
        Argument<?>[] requiredArguments=parametrizedBeanFactory.getRequiredArguments();
        if (argumentValues == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanDefinition.getBeanType().getName());
        }
        Map<String,Object> convertedValues=new LinkedHashMap<>(argumentValues);
        for (        Argument<?> requiredArgument : requiredArguments) {
          Object val=argumentValues.get(requiredArgument.getName());
          if (val == null && !requiredArgument.getAnnotationMetadata().hasDeclaredAnnotation(Nullable.class)) {
            throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str"");
          }
          BeanResolutionContext finalResolutionContext=resolutionContext;
          Object convertedValue=null;
          if (val != null) {
            convertedValue=ConversionService.SHARED.convert(val,requiredArgument).orElseThrow(() -> new BeanInstantiationException(finalResolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str""+ val+ ""String_Node_Str""+ requiredArgument.getType()));
          }
          convertedValues.put(requiredArgument.getName(),convertedValue);
        }
        bean=parametrizedBeanFactory.build(resolutionContext,this,beanDefinition,convertedValues);
      }
 else {
        bean=beanFactory.build(resolutionContext,this,beanDefinition);
        if (bean == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanFactory + ""String_Node_Str"");
        }
      }
    }
 catch (    Throwable e) {
      if (e instanceof DependencyInjectionException) {
        throw e;
      }
      if (e instanceof BeanInstantiationException) {
        throw e;
      }
 else {
        if (!resolutionContext.getPath().isEmpty()) {
          throw new BeanInstantiationException(resolutionContext,e);
        }
 else {
          throw new BeanInstantiationException(beanDefinition,e);
        }
      }
    }
  }
 else {
    ConstructorInjectionPoint<T> constructor=beanDefinition.getConstructor();
    Argument[] requiredConstructorArguments=constructor.getArguments();
    if (requiredConstructorArguments.length == 0) {
      bean=constructor.invoke();
    }
 else {
      Object[] constructorArgs=new Object[requiredConstructorArguments.length];
      for (int i=0; i < requiredConstructorArguments.length; i++) {
        Class argument=requiredConstructorArguments[i].getType();
        constructorArgs[i]=getBean(resolutionContext,argument);
      }
      bean=constructor.invoke(constructorArgs);
    }
    inject(resolutionContext,null,bean);
  }
  if (!BeanCreatedEventListener.class.isInstance(bean)) {
    Collection<BeanCreatedEventListener> beanCreatedEventListeners=getBeansOfType(resolutionContext,BeanCreatedEventListener.class,Qualifiers.byTypeArguments(beanDefinition.getBeanType()));
    for (    BeanCreatedEventListener listener : beanCreatedEventListeners) {
      bean=(T)listener.onCreated(new BeanCreatedEvent(this,beanDefinition,bean));
      if (bean == null) {
        throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + listener + ""String_Node_Str"");
      }
    }
  }
  if (beanDefinition instanceof ValidatedBeanDefinition) {
    bean=((ValidatedBeanDefinition<T>)beanDefinition).validate(resolutionContext,bean);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",bean,beanDefinition,qualifier);
  }
  return bean;
}"
62619,"@Override public String getMessage(){
  Optional<JsonError> body=getResponse().getBody(JsonError.class);
  if (body.isPresent()) {
    return body.get().getMessage();
  }
 else {
    return super.getMessage();
  }
}","@Override public String getMessage(){
  Optional<JsonError> body=getResponse().getBody(JsonError.class);
  if (body.isPresent() && body.get().getMessage() != null) {
    return body.get().getMessage();
  }
 else {
    return super.getMessage();
  }
}"
62620,"@EachBean(CassandraConfiguration.class) @Bean(preDestroy=""String_Node_Str"") public Cluster cassandraCluster(CassandraConfiguration cassandraConfiguration){
  return cassandraConfiguration.builder.build();
}","/** 
 * Creates the   {@link Cluster} bean for the given configuration.
 * @param cassandraConfiguration The {@link CassandraConfiguration} object
 * @return A {@link Cluster} bean
 */
@EachBean(CassandraConfiguration.class) @Bean(preDestroy=""String_Node_Str"") public Cluster cassandraCluster(CassandraConfiguration cassandraConfiguration){
  return cassandraConfiguration.builder.build();
}"
62621,"/** 
 * Execution the creation of a bean.
 * @param resolutionContext The {@link BeanResolutionContext}
 * @param beanDefinition    The {@link BeanDefinition}
 * @param qualifier         The {@link Qualifier}
 * @param isSingleton       Whether the bean is a singleton
 * @param argumentValues    Any argument values passed to create the bean
 * @param < T >               The bean generic type
 * @return The created bean
 */
protected <T>T doCreateBean(BeanResolutionContext resolutionContext,BeanDefinition<T> beanDefinition,Qualifier<T> qualifier,boolean isSingleton,Map<String,Object> argumentValues){
  BeanRegistration<T> beanRegistration=isSingleton ? singletonObjects.get(new BeanKey(beanDefinition.getBeanType(),qualifier)) : null;
  T bean;
  if (beanRegistration != null) {
    return beanRegistration.bean;
  }
  if (resolutionContext == null) {
    resolutionContext=new DefaultBeanResolutionContext(this,beanDefinition);
  }
  if (beanDefinition instanceof BeanFactory) {
    BeanFactory<T> beanFactory=(BeanFactory<T>)beanDefinition;
    try {
      if (beanFactory instanceof ParametrizedBeanFactory) {
        ParametrizedBeanFactory<T> parametrizedBeanFactory=(ParametrizedBeanFactory<T>)beanFactory;
        Argument<?>[] requiredArguments=parametrizedBeanFactory.getRequiredArguments();
        if (argumentValues == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanDefinition.getBeanType().getName());
        }
        Map<String,Object> convertedValues=new LinkedHashMap<>(argumentValues);
        for (        Argument<?> requiredArgument : requiredArguments) {
          Object val=argumentValues.get(requiredArgument.getName());
          if (val == null) {
            throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str"");
          }
          BeanResolutionContext finalResolutionContext=resolutionContext;
          convertedValues.put(requiredArgument.getName(),ConversionService.SHARED.convert(val,requiredArgument).orElseThrow(() -> new BeanInstantiationException(finalResolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str""+ val+ ""String_Node_Str""+ requiredArgument.getType())));
        }
        bean=parametrizedBeanFactory.build(resolutionContext,this,beanDefinition,convertedValues);
      }
 else {
        bean=beanFactory.build(resolutionContext,this,beanDefinition);
        if (bean == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanFactory + ""String_Node_Str"");
        }
      }
    }
 catch (    Throwable e) {
      if (e instanceof DependencyInjectionException) {
        throw e;
      }
      if (e instanceof BeanInstantiationException) {
        throw e;
      }
 else {
        if (!resolutionContext.getPath().isEmpty()) {
          throw new BeanInstantiationException(resolutionContext,e);
        }
 else {
          throw new BeanInstantiationException(beanDefinition,e);
        }
      }
    }
  }
 else {
    ConstructorInjectionPoint<T> constructor=beanDefinition.getConstructor();
    Argument[] requiredConstructorArguments=constructor.getArguments();
    if (requiredConstructorArguments.length == 0) {
      bean=constructor.invoke();
    }
 else {
      Object[] constructorArgs=new Object[requiredConstructorArguments.length];
      for (int i=0; i < requiredConstructorArguments.length; i++) {
        Class argument=requiredConstructorArguments[i].getType();
        constructorArgs[i]=getBean(resolutionContext,argument);
      }
      bean=constructor.invoke(constructorArgs);
    }
    inject(resolutionContext,null,bean);
  }
  if (!BeanCreatedEventListener.class.isInstance(bean)) {
    Collection<BeanCreatedEventListener> beanCreatedEventListeners=getBeansOfType(resolutionContext,BeanCreatedEventListener.class,Qualifiers.byTypeArguments(beanDefinition.getBeanType()));
    for (    BeanCreatedEventListener listener : beanCreatedEventListeners) {
      bean=(T)listener.onCreated(new BeanCreatedEvent(this,beanDefinition,bean));
      if (bean == null) {
        throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + listener + ""String_Node_Str"");
      }
    }
  }
  if (beanDefinition instanceof ValidatedBeanDefinition) {
    bean=((ValidatedBeanDefinition<T>)beanDefinition).validate(resolutionContext,bean);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",bean,beanDefinition,qualifier);
  }
  return bean;
}","/** 
 * Execution the creation of a bean.
 * @param resolutionContext The {@link BeanResolutionContext}
 * @param beanDefinition    The {@link BeanDefinition}
 * @param qualifier         The {@link Qualifier}
 * @param isSingleton       Whether the bean is a singleton
 * @param argumentValues    Any argument values passed to create the bean
 * @param < T >               The bean generic type
 * @return The created bean
 */
protected <T>T doCreateBean(BeanResolutionContext resolutionContext,BeanDefinition<T> beanDefinition,Qualifier<T> qualifier,boolean isSingleton,Map<String,Object> argumentValues){
  BeanRegistration<T> beanRegistration=isSingleton && !beanDefinition.isIterable() ? singletonObjects.get(new BeanKey(beanDefinition.getBeanType(),qualifier)) : null;
  T bean;
  if (beanRegistration != null) {
    return beanRegistration.bean;
  }
  if (resolutionContext == null) {
    resolutionContext=new DefaultBeanResolutionContext(this,beanDefinition);
  }
  if (beanDefinition instanceof BeanFactory) {
    BeanFactory<T> beanFactory=(BeanFactory<T>)beanDefinition;
    try {
      if (beanFactory instanceof ParametrizedBeanFactory) {
        ParametrizedBeanFactory<T> parametrizedBeanFactory=(ParametrizedBeanFactory<T>)beanFactory;
        Argument<?>[] requiredArguments=parametrizedBeanFactory.getRequiredArguments();
        if (argumentValues == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanDefinition.getBeanType().getName());
        }
        Map<String,Object> convertedValues=new LinkedHashMap<>(argumentValues);
        for (        Argument<?> requiredArgument : requiredArguments) {
          Object val=argumentValues.get(requiredArgument.getName());
          if (val == null) {
            throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str"");
          }
          BeanResolutionContext finalResolutionContext=resolutionContext;
          convertedValues.put(requiredArgument.getName(),ConversionService.SHARED.convert(val,requiredArgument).orElseThrow(() -> new BeanInstantiationException(finalResolutionContext,""String_Node_Str"" + requiredArgument + ""String_Node_Str""+ val+ ""String_Node_Str""+ requiredArgument.getType())));
        }
        bean=parametrizedBeanFactory.build(resolutionContext,this,beanDefinition,convertedValues);
      }
 else {
        bean=beanFactory.build(resolutionContext,this,beanDefinition);
        if (bean == null) {
          throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + beanFactory + ""String_Node_Str"");
        }
      }
    }
 catch (    Throwable e) {
      if (e instanceof DependencyInjectionException) {
        throw e;
      }
      if (e instanceof BeanInstantiationException) {
        throw e;
      }
 else {
        if (!resolutionContext.getPath().isEmpty()) {
          throw new BeanInstantiationException(resolutionContext,e);
        }
 else {
          throw new BeanInstantiationException(beanDefinition,e);
        }
      }
    }
  }
 else {
    ConstructorInjectionPoint<T> constructor=beanDefinition.getConstructor();
    Argument[] requiredConstructorArguments=constructor.getArguments();
    if (requiredConstructorArguments.length == 0) {
      bean=constructor.invoke();
    }
 else {
      Object[] constructorArgs=new Object[requiredConstructorArguments.length];
      for (int i=0; i < requiredConstructorArguments.length; i++) {
        Class argument=requiredConstructorArguments[i].getType();
        constructorArgs[i]=getBean(resolutionContext,argument);
      }
      bean=constructor.invoke(constructorArgs);
    }
    inject(resolutionContext,null,bean);
  }
  if (!BeanCreatedEventListener.class.isInstance(bean)) {
    Collection<BeanCreatedEventListener> beanCreatedEventListeners=getBeansOfType(resolutionContext,BeanCreatedEventListener.class,Qualifiers.byTypeArguments(beanDefinition.getBeanType()));
    for (    BeanCreatedEventListener listener : beanCreatedEventListeners) {
      bean=(T)listener.onCreated(new BeanCreatedEvent(this,beanDefinition,bean));
      if (bean == null) {
        throw new BeanInstantiationException(resolutionContext,""String_Node_Str"" + listener + ""String_Node_Str"");
      }
    }
  }
  if (beanDefinition instanceof ValidatedBeanDefinition) {
    bean=((ValidatedBeanDefinition<T>)beanDefinition).validate(resolutionContext,bean);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",bean,beanDefinition,qualifier);
  }
  return bean;
}"
62622,"private <T>void registerSingletonBean(BeanDefinition<T> beanDefinition,Class<T> beanType,T createdBean,Qualifier<T> qualifier,boolean singleCandidate){
  if (qualifier == null) {
    if (beanDefinition instanceof BeanDefinitionDelegate) {
      String name=((BeanDefinitionDelegate<?>)beanDefinition).get(Named.class.getName(),String.class,null);
      if (name != null) {
        qualifier=Qualifiers.byName(name);
      }
    }
    if (qualifier == null) {
      Optional<String> optional=beanDefinition.getValue(javax.inject.Named.class,String.class);
      qualifier=(Qualifier<T>)optional.map(name -> Qualifiers.byAnnotation(beanDefinition,name)).orElse(null);
    }
  }
  if (LOG.isDebugEnabled()) {
    if (qualifier != null) {
      LOG.debug(""String_Node_Str"",qualifier,beanType.getName(),createdBean);
    }
 else {
      LOG.debug(""String_Node_Str"",beanType.getName(),createdBean);
    }
  }
  BeanKey key=new BeanKey<>(beanType,qualifier);
  BeanRegistration<T> registration=new BeanRegistration<>(key,beanDefinition,createdBean);
  if (singleCandidate) {
    singletonObjects.put(key,registration);
  }
  Class<?> createdType=createdBean.getClass();
  BeanKey createdBeanKey=new BeanKey(createdType,qualifier);
  Optional<Class<? extends Annotation>> qualifierAnn=beanDefinition.getAnnotationTypeByStereotype(javax.inject.Qualifier.class);
  if (qualifierAnn.isPresent()) {
    Class annotation=qualifierAnn.get();
    if (Primary.class == annotation) {
      BeanKey primaryBeanKey=new BeanKey<>(beanType,null);
      singletonObjects.put(primaryBeanKey,registration);
    }
 else {
      BeanKey qualifierKey=new BeanKey(createdType,Qualifiers.byAnnotation(beanDefinition,annotation.getName()));
      if (!qualifierKey.equals(createdBeanKey)) {
        singletonObjects.put(qualifierKey,registration);
      }
    }
  }
 else {
    if (!beanDefinition.isIterable()) {
      BeanKey primaryBeanKey=new BeanKey<>(createdType,null);
      singletonObjects.put(primaryBeanKey,registration);
    }
  }
  singletonObjects.put(createdBeanKey,registration);
}","private <T>void registerSingletonBean(BeanDefinition<T> beanDefinition,Class<T> beanType,T createdBean,Qualifier<T> qualifier,boolean singleCandidate){
  if (qualifier == null) {
    if (beanDefinition instanceof BeanDefinitionDelegate) {
      String name=((BeanDefinitionDelegate<?>)beanDefinition).get(Named.class.getName(),String.class,null);
      if (name != null) {
        qualifier=Qualifiers.byName(name);
      }
    }
    if (qualifier == null) {
      Optional<String> optional=beanDefinition.getValue(javax.inject.Named.class,String.class);
      qualifier=(Qualifier<T>)optional.map(name -> Qualifiers.byAnnotation(beanDefinition,name)).orElse(null);
    }
  }
  if (LOG.isDebugEnabled()) {
    if (qualifier != null) {
      LOG.debug(""String_Node_Str"",qualifier,beanType.getName(),createdBean);
    }
 else {
      LOG.debug(""String_Node_Str"",beanType.getName(),createdBean);
    }
  }
  BeanKey key=new BeanKey<>(beanType,qualifier);
  BeanRegistration<T> registration=new BeanRegistration<>(key,beanDefinition,createdBean);
  if (singleCandidate) {
    singletonObjects.put(key,registration);
  }
  Class<?> createdType=createdBean.getClass();
  boolean createdTypeDiffers=!createdType.equals(beanType);
  BeanKey createdBeanKey=new BeanKey(createdType,qualifier);
  Optional<Class<? extends Annotation>> qualifierAnn=beanDefinition.getAnnotationTypeByStereotype(javax.inject.Qualifier.class);
  if (qualifierAnn.isPresent()) {
    Class annotation=qualifierAnn.get();
    if (Primary.class == annotation) {
      BeanKey primaryBeanKey=new BeanKey<>(beanType,null);
      singletonObjects.put(primaryBeanKey,registration);
      if (createdTypeDiffers) {
        singletonObjects.put(new BeanKey<>(createdType,null),registration);
      }
    }
 else {
      BeanKey qualifierKey=new BeanKey<>(createdType,Qualifiers.byAnnotation(beanDefinition,annotation.getName()));
      if (!qualifierKey.equals(createdBeanKey)) {
        singletonObjects.put(qualifierKey,registration);
      }
    }
  }
 else {
    if (!beanDefinition.isIterable()) {
      BeanKey primaryBeanKey=new BeanKey<>(createdType,null);
      singletonObjects.put(primaryBeanKey,registration);
    }
 else {
      if (beanDefinition.isPrimary()) {
        BeanKey primaryBeanKey=new BeanKey<>(beanType,null);
        singletonObjects.put(primaryBeanKey,registration);
        if (createdTypeDiffers) {
          singletonObjects.put(new BeanKey<>(createdType,null),registration);
        }
      }
    }
  }
  singletonObjects.put(createdBeanKey,registration);
}"
62623,"private Optional<? extends FileCustomizableResponseType> matchFile(String path){
  Optional<URL> optionalUrl=staticResourceResolver.resolve(path);
  if (optionalUrl.isPresent()) {
    try {
      URL url=optionalUrl.get();
      URI uri=url.toURI();
      File file=new File(uri.getPath());
      System.out.println(uri.getPath());
      System.out.println(file.getAbsolutePath());
      if (file.exists()) {
        System.out.println(""String_Node_Str"");
        if (!file.isDirectory() && file.canRead()) {
          return Optional.of(new NettySystemFileCustomizableResponseType(file));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        return Optional.of(new NettyStreamedFileCustomizableResponseType(uri));
      }
    }
 catch (    URISyntaxException e) {
    }
  }
  return Optional.empty();
}","private Optional<? extends FileCustomizableResponseType> matchFile(String path){
  Optional<URL> optionalUrl=staticResourceResolver.resolve(path);
  if (optionalUrl.isPresent()) {
    try {
      URL url=optionalUrl.get();
      URI uri=url.toURI();
      File file=new File(uri.getPath());
      System.out.println(uri.getPath());
      System.out.println(file.getAbsolutePath());
      if (file.exists()) {
        System.out.println(""String_Node_Str"");
        if (!file.isDirectory() && file.canRead()) {
          return Optional.of(new NettySystemFileCustomizableResponseType(file));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        return Optional.of(new NettyStreamedFileCustomizableResponseType(url));
      }
    }
 catch (    URISyntaxException e) {
    }
  }
  return Optional.empty();
}"
62624,"public void setAlwaysIncludeNewline(boolean eagerNewlines){
  this.eagerNewlines=eagerNewlines;
}","/** 
 * @param eagerNewlines eager new lines
 */
public void setAlwaysIncludeNewline(boolean eagerNewlines){
  this.eagerNewlines=eagerNewlines;
}"
62625,"public boolean complete(ConsoleReader reader,@SuppressWarnings(""String_Node_Str"") List<CharSequence> candidates,int pos) throws IOException {
  CursorBuffer buf=reader.getCursorBuffer();
  if (candidates.size() == 1) {
    String value=candidates.get(0).toString();
    if (value.equals(buf.toString())) {
      return false;
    }
    jline.console.completer.CandidateListCompletionHandler.setBuffer(reader,value,pos);
    return true;
  }
  if (candidates.size() > 1) {
    String value=getUnambiguousCompletions(candidates);
    jline.console.completer.CandidateListCompletionHandler.setBuffer(reader,value,pos);
  }
  if (eagerNewlines) {
    reader.println();
  }
  jline.console.completer.CandidateListCompletionHandler.printCandidates(reader,candidates);
  reader.drawLine();
  return true;
}","/** 
 * @param reader     The console reader
 * @param candidates The candidates
 * @param pos        The position
 * @return Whether the console has been read
 * @throws IOException if there is a problem
 */
public boolean complete(ConsoleReader reader,@SuppressWarnings(""String_Node_Str"") List<CharSequence> candidates,int pos) throws IOException {
  CursorBuffer buf=reader.getCursorBuffer();
  if (candidates.size() == 1) {
    String value=candidates.get(0).toString();
    if (value.equals(buf.toString())) {
      return false;
    }
    jline.console.completer.CandidateListCompletionHandler.setBuffer(reader,value,pos);
    return true;
  }
  if (candidates.size() > 1) {
    String value=getUnambiguousCompletions(candidates);
    jline.console.completer.CandidateListCompletionHandler.setBuffer(reader,value,pos);
  }
  if (eagerNewlines) {
    reader.println();
  }
  jline.console.completer.CandidateListCompletionHandler.printCandidates(reader,candidates);
  reader.drawLine();
  return true;
}"
62626,"/** 
 * @return true is all the elements of <i>candidates</i>start with <i>starts</i>
 */
private final boolean startsWith(final String starts,final String[] candidates){
  for (int i=0; i < candidates.length; i++) {
    if (!candidates[i].startsWith(starts)) {
      return false;
    }
  }
  return true;
}","/** 
 * @return true is all the elements of <i>candidates</i>start with <i>starts</i>
 */
private boolean startsWith(final String starts,final String[] candidates){
  for (int i=0; i < candidates.length; i++) {
    if (!candidates[i].startsWith(starts)) {
      return false;
    }
  }
  return true;
}"
62627,"public ConsoleAntBuilder(){
  super(createAntProject());
}","/** 
 * Default constructor.
 */
public ConsoleAntBuilder(){
  super(createAntProject());
}"
62628,"public static void addMicronautConsoleBuildListener(Project project){
  final BuildLogger logger=new MicronautConsoleLogger();
  logger.setMessageOutputLevel(Project.MSG_INFO);
  logger.setOutputPrintStream(System.out);
  logger.setErrorPrintStream(System.err);
  project.addBuildListener(logger);
  MicronautConsole instance=MicronautConsole.getInstance();
  project.addBuildListener(new ConsoleBuildListener(instance));
  if (!instance.isVerbose()) {
    for (    Object buildListener : project.getBuildListeners()) {
      if (buildListener instanceof BuildLogger) {
        ((BuildLogger)buildListener).setMessageOutputLevel(LogLevel.ERR.getLevel());
      }
    }
  }
}","/** 
 * @param project The Ant {@link Project}
 */
public static void addMicronautConsoleBuildListener(Project project){
  final BuildLogger logger=new MicronautConsoleLogger();
  logger.setMessageOutputLevel(Project.MSG_INFO);
  logger.setOutputPrintStream(System.out);
  logger.setErrorPrintStream(System.err);
  project.addBuildListener(logger);
  MicronautConsole instance=MicronautConsole.getInstance();
  project.addBuildListener(new ConsoleBuildListener(instance));
  if (!instance.isVerbose()) {
    for (    Object buildListener : project.getBuildListeners()) {
      if (buildListener instanceof BuildLogger) {
        ((BuildLogger)buildListener).setMessageOutputLevel(LogLevel.ERR.getLevel());
      }
    }
  }
}"
62629,"public ConsoleBuildListener(MicronautConsole ui){
  this.ui=ui;
}","/** 
 * @param ui The Micronaut console
 */
public ConsoleBuildListener(MicronautConsole ui){
  this.ui=ui;
}"
62630,"public PrintStream getTargetOut(){
  return (PrintStream)out;
}","/** 
 * @return The print stream
 */
public PrintStream getTargetOut(){
  return (PrintStream)out;
}"
62631,"public ConsoleErrorPrintStream(PrintStream out){
  super(out,true);
}","/** 
 * @param out The print stream
 */
public ConsoleErrorPrintStream(PrintStream out){
  super(out,true);
}"
62632,"/** 
 * Prints a warning message
 * @param msg The warning message
 */
void warn(String msg);","/** 
 * Prints a warning message.
 * @param msg The warning message
 */
void warn(String msg);"
62633,"/** 
 * Indicates progress as a percentage for the given number and total
 * @param number The number
 * @param total  The total
 */
void indicateProgressPercentage(long number,long total);","/** 
 * Indicates progress as a percentage for the given number and total.
 * @param number The number
 * @param total  The total
 */
void indicateProgressPercentage(long number,long total);"
62634,"/** 
 * Logs a message below the current status message
 * @param msg The message to log
 */
void log(String msg);","/** 
 * Logs a message below the current status message.
 * @param msg The message to log
 */
void log(String msg);"
62635,"/** 
 * Updates the current state message
 * @param msg The message
 */
void updateStatus(String msg);","/** 
 * Updates the current state message.
 * @param msg The message
 */
void updateStatus(String msg);"
62636,"/** 
 * Adds a new message that won't be overwritten by {#updateStatus(String)}
 * @param msg The message
 */
void addStatus(String msg);","/** 
 * Adds a new message that won't be overwritten by {#updateStatus(String)}.
 * @param msg The message
 */
void addStatus(String msg);"
62637,"/** 
 * Prints a warning message
 * @param msg The warning message
 */
void warning(String msg);","/** 
 * Prints a warning message.
 * @param msg The warning message
 */
void warning(String msg);"
62638,"/** 
 * Indicates progress by number
 * @param number The number
 */
void indicateProgress(int number);","/** 
 * Indicates progress by number.
 * @param number The number
 */
void indicateProgress(int number);"
62639,"/** 
 * Use to log an error
 * @param error The error
 */
void error(Throwable error);","/** 
 * Use to log an error.
 * @param error The error
 */
void error(Throwable error);"
62640,"/** 
 * Synonym for #log
 * @param msg The message to log
 */
void info(String msg);","/** 
 * Synonym for #log.
 * @param msg The message to log
 */
void info(String msg);"
62641,"/** 
 * Outputs a verbose message
 * @param msg The message
 */
void verbose(String msg);","/** 
 * Outputs a verbose message.
 * @param msg The message
 */
void verbose(String msg);"
62642,"public ConsolePrintStream(PrintStream out){
  super(out,true);
}","/** 
 * @param out The print stream
 */
public ConsolePrintStream(PrintStream out){
  super(out,true);
}"
62643,"public PrintStream getTargetOut(){
  return (PrintStream)out;
}","/** 
 * @return The print stream
 */
public PrintStream getTargetOut(){
  return (PrintStream)out;
}"
62644,"public JdkApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}","/** 
 * @param macroName The macro name
 * @param config    The configuration
 */
public JdkApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}"
62645,"public JeeApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}","/** 
 * @param macroName The macro name
 * @param config    The configuration
 */
public JeeApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}"
62646,"public ReactiveStreamsApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}","/** 
 * @param macroName The macro name
 * @param config    The configuration
 */
public ReactiveStreamsApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}"
62647,"public RxJavaApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}","/** 
 * @param macroName The macro name
 * @param config    The configuration
 */
public RxJavaApiMacro(String macroName,Map<String,Object> config){
  super(macroName,config);
}"
62648,"/** 
 * Resolves a type name for the given name
 * @param type The type
 * @return The type reference
 */
String resolveTypeName(TypeMirror type){
  Object reference=resolveTypeReference(type);
  if (reference instanceof Class) {
    return ((Class)reference).getName();
  }
  return reference.toString();
}","/** 
 * Resolves a type name for the given name.
 * @param type The type
 * @return The type reference
 */
String resolveTypeName(TypeMirror type){
  Object reference=resolveTypeReference(type);
  if (reference instanceof Class) {
    return ((Class)reference).getName();
  }
  return reference.toString();
}"
62649,"public DiscoveryClientCacheConfiguration(ApplicationConfiguration applicationConfiguration){
  super(CACHE_NAME,applicationConfiguration);
  setExpireAfterAccess(Duration.ofSeconds(30));
  setExpireAfterWrite(Duration.ofSeconds(30));
  setInitialCapacity(5);
}","/** 
 * @param applicationConfiguration The application configuration
 */
@SuppressWarnings(""String_Node_Str"") public DiscoveryClientCacheConfiguration(ApplicationConfiguration applicationConfiguration){
  super(CACHE_NAME,applicationConfiguration);
  setExpireAfterAccess(Duration.ofSeconds(30));
  setExpireAfterWrite(Duration.ofSeconds(30));
  setInitialCapacity(5);
}"
62650,"public NettyByteBufferFactory(ByteBufAllocator allocator){
  this.allocator=allocator;
}","/** 
 * @param allocator The {@link ByteBufAllocator}
 */
public NettyByteBufferFactory(ByteBufAllocator allocator){
  this.allocator=allocator;
}"
62651,"/** 
 * @param userFetcher Fetches users from persistence
 * @param passwordEncoder Collaborator which checks if a raw password matches an encoded password
 * @param authoritiesFetcher Fetches authorities for a particular user
 */
public DelegatingAuthenticationProvider(UserFetcher userFetcher,PasswordEncoder passwordEncoder,AuthoritiesFetcher authoritiesFetcher){
  this.userFetcher=userFetcher;
  this.passwordEncoder=passwordEncoder;
  this.authoritiesFetcher=authoritiesFetcher;
}","/** 
 * @param userFetcher        Fetches users from persistence
 * @param passwordEncoder    Collaborator which checks if a raw password matches an encoded password
 * @param authoritiesFetcher Fetches authorities for a particular user
 */
public DelegatingAuthenticationProvider(UserFetcher userFetcher,PasswordEncoder passwordEncoder,AuthoritiesFetcher authoritiesFetcher){
  this.userFetcher=userFetcher;
  this.passwordEncoder=passwordEncoder;
  this.authoritiesFetcher=authoritiesFetcher;
}"
62652,"/** 
 * @param authenticator {@link Authenticator} collaborator
 * @param loginHandler A collaborator which helps to build HTTP response depending on success or failure.
 * @param eventPublisher The application event publisher
 */
public LoginController(Authenticator authenticator,LoginHandler loginHandler,ApplicationEventPublisher eventPublisher){
  this.authenticator=authenticator;
  this.loginHandler=loginHandler;
  this.eventPublisher=eventPublisher;
}","/** 
 * @param authenticator  {@link Authenticator} collaborator
 * @param loginHandler   A collaborator which helps to build HTTP response depending on success or failure.
 * @param eventPublisher The application event publisher
 */
public LoginController(Authenticator authenticator,LoginHandler loginHandler,ApplicationEventPublisher eventPublisher){
  this.authenticator=authenticator;
  this.loginHandler=loginHandler;
  this.eventPublisher=eventPublisher;
}"
62653,"/** 
 * @param usernamePasswordCredentials An instance of {@link UsernamePasswordCredentials} in the body payload
 * @param request The {@link HttpRequest} being executed
 * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
 */
@Consumes({MediaType.APPLICATION_FORM_URLENCODED,MediaType.APPLICATION_JSON}) @Post public Single<HttpResponse> login(@Body UsernamePasswordCredentials usernamePasswordCredentials,HttpRequest<?> request){
  Flowable<AuthenticationResponse> authenticationResponseFlowable=Flowable.fromPublisher(authenticator.authenticate(usernamePasswordCredentials));
  return authenticationResponseFlowable.map(authenticationResponse -> {
    if (authenticationResponse.isAuthenticated()) {
      UserDetails userDetails=(UserDetails)authenticationResponse;
      eventPublisher.publishEvent(new LoginSuccessfulEvent(userDetails));
      return loginHandler.loginSuccess(userDetails,request);
    }
 else {
      AuthenticationFailed authenticationFailed=(AuthenticationFailed)authenticationResponse;
      eventPublisher.publishEvent(new LoginFailedEvent(authenticationFailed));
      return loginHandler.loginFailed(authenticationFailed);
    }
  }
).first(HttpResponse.status(HttpStatus.UNAUTHORIZED));
}","/** 
 * @param usernamePasswordCredentials An instance of {@link UsernamePasswordCredentials} in the body payload
 * @param request                     The {@link HttpRequest} being executed
 * @return An AccessRefreshToken encapsulated in the HttpResponse or a failure indicated by the HTTP status
 */
@Consumes({MediaType.APPLICATION_FORM_URLENCODED,MediaType.APPLICATION_JSON}) @Post public Single<HttpResponse> login(@Body UsernamePasswordCredentials usernamePasswordCredentials,HttpRequest<?> request){
  Flowable<AuthenticationResponse> authenticationResponseFlowable=Flowable.fromPublisher(authenticator.authenticate(usernamePasswordCredentials));
  return authenticationResponseFlowable.map(authenticationResponse -> {
    if (authenticationResponse.isAuthenticated()) {
      UserDetails userDetails=(UserDetails)authenticationResponse;
      eventPublisher.publishEvent(new LoginSuccessfulEvent(userDetails));
      return loginHandler.loginSuccess(userDetails,request);
    }
 else {
      AuthenticationFailed authenticationFailed=(AuthenticationFailed)authenticationResponse;
      eventPublisher.publishEvent(new LoginFailedEvent(authenticationFailed));
      return loginHandler.loginFailed(authenticationFailed);
    }
  }
).first(HttpResponse.status(HttpStatus.UNAUTHORIZED));
}"
62654,"/** 
 * @param object The bean
 * @return The lock on the object
 */
ReadWriteLock getLock(Object object){
  ReadWriteLock readWriteLock=locks.get(object);
  if (readWriteLock == null) {
    throw new IllegalStateException(""String_Node_Str"" + object);
  }
  return readWriteLock;
}","/** 
 * @param object The bean
 * @return The lock on the object
 */
protected ReadWriteLock getLock(Object object){
  ReadWriteLock readWriteLock=locks.get(object);
  if (readWriteLock == null) {
    throw new IllegalStateException(""String_Node_Str"" + object);
  }
  return readWriteLock;
}"
62655,"public DefaultCacheManager(SyncCache<C>... caches){
  if (ArrayUtils.isEmpty(caches)) {
    this.cacheMap=Collections.emptyMap();
  }
 else {
    this.cacheMap=new LinkedHashMap<>(caches.length);
    for (    SyncCache<C> cache : caches) {
      this.cacheMap.put(cache.getName(),cache);
    }
  }
}","/** 
 * Create default cache manager for the given caches.
 * @param caches List of synchronous cache implementations
 */
public DefaultCacheManager(SyncCache<C>... caches){
  if (ArrayUtils.isEmpty(caches)) {
    this.cacheMap=Collections.emptyMap();
  }
 else {
    this.cacheMap=new LinkedHashMap<>(caches.length);
    for (    SyncCache<C> cache : caches) {
      this.cacheMap.put(cache.getName(),cache);
    }
  }
}"
62656,"public DefaultSyncCache(CacheConfiguration cacheConfiguration,ConversionService<?> conversionService){
  this.cacheConfiguration=cacheConfiguration;
  this.conversionService=conversionService;
  this.cache=buildCache(cacheConfiguration);
}","/** 
 * Construct a sync cache implementation with given configurations.
 * @param cacheConfiguration The cache configurations
 * @param conversionService To convert the value from the cache into given required type
 */
public DefaultSyncCache(CacheConfiguration cacheConfiguration,ConversionService<?> conversionService){
  this.cacheConfiguration=cacheConfiguration;
  this.conversionService=conversionService;
  this.cache=buildCache(cacheConfiguration);
}"
62657,"protected com.github.benmanes.caffeine.cache.Cache buildCache(CacheConfiguration cacheConfiguration){
  Caffeine<Object,Object> builder=Caffeine.newBuilder();
  cacheConfiguration.getExpireAfterAccess().ifPresent(duration -> builder.expireAfterAccess(duration.toMillis(),TimeUnit.MILLISECONDS));
  cacheConfiguration.getExpireAfterWrite().ifPresent(duration -> builder.expireAfterWrite(duration.toMillis(),TimeUnit.MILLISECONDS));
  cacheConfiguration.getInitialCapacity().ifPresent(builder::initialCapacity);
  cacheConfiguration.getMaximumSize().ifPresent(builder::maximumSize);
  cacheConfiguration.getMaximumWeight().ifPresent(builder::maximumWeight);
  return builder.build();
}","/** 
 * Build a cache from the given configurations.
 * @param cacheConfiguration The cache configurations
 * @return cache
 */
protected com.github.benmanes.caffeine.cache.Cache buildCache(CacheConfiguration cacheConfiguration){
  Caffeine<Object,Object> builder=Caffeine.newBuilder();
  cacheConfiguration.getExpireAfterAccess().ifPresent(duration -> builder.expireAfterAccess(duration.toMillis(),TimeUnit.MILLISECONDS));
  cacheConfiguration.getExpireAfterWrite().ifPresent(duration -> builder.expireAfterWrite(duration.toMillis(),TimeUnit.MILLISECONDS));
  cacheConfiguration.getInitialCapacity().ifPresent(builder::initialCapacity);
  cacheConfiguration.getMaximumSize().ifPresent(builder::maximumSize);
  cacheConfiguration.getMaximumWeight().ifPresent(builder::maximumWeight);
  return builder.build();
}"
62658,"@Internal void cleanUp(){
  sessions.cleanUp();
}","/** 
 * Performs any pending maintenance operations needed by the cache.
 */
@Internal void cleanUp(){
  sessions.cleanUp();
}"
62659,"@Override public CompletableFuture<InMemorySession> save(InMemorySession session){
  if (session == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String id=session.getId();
  session.setNew(false);
  InMemorySession existing=sessions.getIfPresent(id);
  if (session != existing) {
    sessions.put(id,session);
    if (existing == null) {
      eventPublisher.publishEvent(new SessionCreatedEvent(session));
    }
  }
  return CompletableFuture.completedFuture(session);
}","@Override public CompletableFuture<InMemorySession> save(InMemorySession session){
  if (session == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String id=session.getId();
  session.setNew(false);
  InMemorySession existing=sessions.getIfPresent(id);
  if (session != existing) {
    sessions.put(id,session);
    if (existing == null) {
      eventPublisher.publishEvent(new SessionCreatedEvent(session));
    }
  }
  return CompletableFuture.completedFuture(session);
}"
62660,"public InMemorySessionStore(SessionIdGenerator sessionIdGenerator,SessionConfiguration sessionConfiguration,ApplicationEventPublisher eventPublisher){
  this.sessionIdGenerator=sessionIdGenerator;
  this.eventPublisher=eventPublisher;
  this.sessionConfiguration=sessionConfiguration;
  this.sessions=newSessionCache(sessionConfiguration);
}","/** 
 * Constructor.
 * @param sessionIdGenerator The session id generator
 * @param sessionConfiguration The sessions configuration
 * @param eventPublisher The application event publisher
 */
public InMemorySessionStore(SessionIdGenerator sessionIdGenerator,SessionConfiguration sessionConfiguration,ApplicationEventPublisher eventPublisher){
  this.sessionIdGenerator=sessionIdGenerator;
  this.eventPublisher=eventPublisher;
  this.sessionConfiguration=sessionConfiguration;
  this.sessions=newSessionCache(sessionConfiguration);
}"
62661,"protected Cache<String,InMemorySession> newSessionCache(SessionConfiguration configuration){
  Caffeine<String,InMemorySession> builder=Caffeine.newBuilder().removalListener(newRemovalListener()).expireAfter(newExpiry());
  configuration.getMaxActiveSessions().ifPresent(builder::maximumSize);
  return builder.build();
}","/** 
 * Creates a new session cache.
 * @param configuration The session configuration
 * @return The new cache
 */
protected Cache<String,InMemorySession> newSessionCache(SessionConfiguration configuration){
  Caffeine<String,InMemorySession> builder=Caffeine.newBuilder().removalListener(newRemovalListener()).expireAfter(newExpiry());
  configuration.getMaxActiveSessions().ifPresent(builder::maximumSize);
  return builder.build();
}"
62662,"private RemovalListener<String,Session> newRemovalListener(){
  return (key,value,cause) -> {
switch (cause) {
case REPLACED:
      eventPublisher.publishEvent(new SessionDestroyedEvent(value));
    break;
case SIZE:
case EXPIRED:
  eventPublisher.publishEvent(new SessionExpiredEvent(value));
break;
case EXPLICIT:
eventPublisher.publishEvent(new SessionDeletedEvent(value));
break;
case COLLECTED:
throw new IllegalStateException(""String_Node_Str"");
}
}
;
}","private RemovalListener<String,Session> newRemovalListener(){
  return (key,value,cause) -> {
switch (cause) {
case REPLACED:
      eventPublisher.publishEvent(new SessionDestroyedEvent(value));
    break;
case SIZE:
case EXPIRED:
  eventPublisher.publishEvent(new SessionExpiredEvent(value));
break;
case EXPLICIT:
eventPublisher.publishEvent(new SessionDeletedEvent(value));
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}
;
}"
62663,"public HttpCall(HttpClient httpClient,URI endpoint,boolean compressionEnabled,List<byte[]> encodedSpans){
  this.httpClient=httpClient;
  this.endpoint=endpoint;
  this.compressionEnabled=compressionEnabled;
  this.encodedSpans=encodedSpans;
}","HttpCall(HttpClient httpClient,URI endpoint,boolean compressionEnabled,List<byte[]> encodedSpans){
  this.httpClient=httpClient;
  this.endpoint=endpoint;
  this.compressionEnabled=compressionEnabled;
  this.encodedSpans=encodedSpans;
}"
62664,"public Builder(HttpClientConfiguration clientConfiguration){
  this.clientConfiguration=clientConfiguration;
}","/** 
 * Initialize the builder with HTTP client configurations.
 * @param clientConfiguration The HTTP client configuration
 */
public Builder(HttpClientConfiguration clientConfiguration){
  this.clientConfiguration=clientConfiguration;
}"
62665,"HttpHeadersTextMap(HttpHeaders headers){
  this.headers=headers;
}","/** 
 * Initialize headers.
 * @param headers The HTTP headers
 */
HttpHeadersTextMap(HttpHeaders headers){
  this.headers=headers;
}"
62666,"public OpenTracingClientFilter(Tracer tracer){
  super(tracer);
}","/** 
 * Initialize the open tracing client filter with tracer.
 * @param tracer The tracer for span creation and configuring across arbitrary transports
 */
public OpenTracingClientFilter(Tracer tracer){
  super(tracer);
}"
62667,"@Inject public TracingHystrixConcurrentStrategy(Tracer tracer,@Nullable HystrixConcurrencyStrategy hystrixConcurrencyStrategy){
  this.delegate=hystrixConcurrencyStrategy != null ? hystrixConcurrencyStrategy : HystrixConcurrencyStrategyDefault.getInstance();
  this.tracer=tracer;
}","/** 
 * Creates enhanced   {@link HystrixConcurrencyStrategy} for tracing.
 * @param tracer For span creation and propagation across arbitrary transports
 * @param hystrixConcurrencyStrategy Different behavior or implementations for concurrency related aspects of the system with default implementations
 */
@Inject public TracingHystrixConcurrentStrategy(Tracer tracer,@Nullable HystrixConcurrencyStrategy hystrixConcurrencyStrategy){
  this.delegate=hystrixConcurrencyStrategy != null ? hystrixConcurrencyStrategy : HystrixConcurrencyStrategyDefault.getInstance();
  this.tracer=tracer;
}"
62668,"@PostConstruct void init(TracingRunnableInstrumenter instrumenter){
  if (instrumenter != null) {
    Function<? super Runnable,? extends Runnable> existing=RxJavaPlugins.getScheduleHandler();
    if (existing != null && !(existing instanceof TracingRunnableInstrumenter)) {
      RxJavaPlugins.setScheduleHandler(runnable -> instrumenter.apply(existing.apply(runnable)));
    }
 else {
      RxJavaPlugins.setScheduleHandler(instrumenter::apply);
    }
  }
}","/** 
 * Initialize RxJava2 instrumentation.
 * @param instrumenter A function that instruments an existing Runnable with {@link io.micronaut.tracing.instrument.util.TracingRunnable}
 */
@PostConstruct void init(TracingRunnableInstrumenter instrumenter){
  if (instrumenter != null) {
    Function<? super Runnable,? extends Runnable> existing=RxJavaPlugins.getScheduleHandler();
    if (existing != null && !(existing instanceof TracingRunnableInstrumenter)) {
      RxJavaPlugins.setScheduleHandler(runnable -> instrumenter.apply(existing.apply(runnable)));
    }
 else {
      RxJavaPlugins.setScheduleHandler(instrumenter::apply);
    }
  }
}"
62669,"public OpenTracingServerFilter(Tracer tracer){
  super(tracer);
}","/** 
 * Creates an HTTP server instrumentation filter.
 * @param tracer For span creation and propagation across transport
 */
public OpenTracingServerFilter(Tracer tracer){
  super(tracer);
}"
62670,"@Override public void visitSetterInjectionPoint(Object declaringType,io.micronaut.inject.annotation.AnnotationValue qualifierType,boolean requiresReflection,Object fieldType,String fieldName,String setterName,Map<String,Object> genericTypes){
  deferredInjectionPoints.add(() -> proxyBeanDefinitionWriter.visitSetterInjectionPoint(declaringType,qualifierType,requiresReflection,fieldType,fieldName,setterName,genericTypes));
}","@Override public void visitSetterInjectionPoint(Object declaringType,AnnotationMetadata fieldMetadata,boolean requiresReflection,Object fieldType,String fieldName,String setterName,Map<String,Object> genericTypes){
  deferredInjectionPoints.add(() -> proxyBeanDefinitionWriter.visitSetterInjectionPoint(declaringType,fieldMetadata,requiresReflection,fieldType,fieldName,setterName,genericTypes));
}"
62671,"/** 
 * Intercepts an execution from a declared   {@link Around} advice. The implementation can either call {@link InvocationContext#proceed()} to return the original value or provide a replacement value
 * @param context The interception context
 */
R intercept(InvocationContext<T,R> context);","/** 
 * Intercepts an execution from a declared   {@link Around} advice. The implementation can either call {@link InvocationContext#proceed()} to return the original value or provide a replacement value
 * @param context The interception context
 * @return result type
 */
R intercept(InvocationContext<T,R> context);"
62672,"/** 
 * Proceeds with the invocation using the given interceptor as a position to start from. Mainly useful for   {@link Introduction} advise where you want toinvoke the target multiple times or where you want to repeat the entire chain.
 * @param from The interceptor to start from (note: will not be included in the execution)
 * @return The return value of the method
 */
R proceed(Interceptor from) throws RuntimeException ;","/** 
 * Proceeds with the invocation using the given interceptor as a position to start from. Mainly useful for   {@link Introduction} advise where you want toinvoke the target multiple times or where you want to repeat the entire chain.
 * @param from The interceptor to start from (note: will not be included in the execution)
 * @return The return value of the method
 * @throws RuntimeException chain may throw RTE
 */
R proceed(Interceptor from) throws RuntimeException ;"
62673,"public CompletedFileUpload(io.netty.handler.codec.http.multipart.FileUpload fileUpload){
  this.fileUpload=fileUpload;
}","public CompletedFileUpload(FileUpload fileUpload){
  this.fileUpload=fileUpload;
  fileUpload.retain();
}"
62674,"@Override public ByteBuffer getByteBuffer() throws IOException {
  return fileUpload.getByteBuf().nioBuffer();
}","@Override public ByteBuffer getByteBuffer() throws IOException {
  ByteBuf byteBuf=fileUpload.getByteBuf();
  try {
    return byteBuf.nioBuffer();
  }
  finally {
    byteBuf.release();
  }
}"
62675,"@Override public InputStream getInputStream() throws IOException {
  return new ByteBufInputStream((fileUpload.getByteBuf()));
}","@Override public InputStream getInputStream() throws IOException {
  return new ByteBufInputStream(fileUpload.getByteBuf(),true);
}"
62676,"@Override public byte[] getBytes() throws IOException {
  return fileUpload.getByteBuf().array();
}","@Override public byte[] getBytes() throws IOException {
  ByteBuf byteBuf=fileUpload.getByteBuf();
  try {
    return ByteBufUtil.getBytes(byteBuf);
  }
  finally {
    byteBuf.release();
  }
}"
62677,"@Override protected void doOnComplete(){
  if (!isComplete()) {
    super.doOnComplete();
  }
}","@Override protected void doOnComplete(){
  super.doOnComplete();
}"
62678,"@Override public InputStream getInputStream() throws IOException {
  return new ByteBufInputStream(fileUpload.getByteBuf());
}","@Override public InputStream getInputStream() throws IOException {
  return new ByteBufInputStream(fileUpload.getByteBuf(),true);
}"
62679,"/** 
 * Gets the content of this part as an <tt>InputStream</tt>
 * @return The content of this part as an <tt>InputStream</tt>
 * @throws IOException If an error occurs in retrieving the contetas an <tt>InputStream</tt>
 */
InputStream getInputStream() throws IOException ;","/** 
 * Gets the content of this part as an <tt>InputStream</tt>
 * @return The content of this part as an <tt>InputStream</tt>
 * @throws IOException If an error occurs in retrieving the contentas an <tt>InputStream</tt>
 */
InputStream getInputStream() throws IOException ;"
62680,"/** 
 * Deletes the underlying storage for a file item, including deleting any associated temporary disk file.
 */
Publisher<Boolean> delete();","/** 
 * Deletes the underlying storage for a file item, including deleting any associated temporary disk file.
 * @return A {@link Publisher} that outputs whether the delete was successful
 */
Publisher<Boolean> delete();"
62681,"@Override public Object intercept(MethodInvocationContext<Object,Object> context){
  Client clientAnnotation=context.getAnnotation(Client.class);
  if (clientAnnotation == null) {
    throw new IllegalStateException(""String_Node_Str"" + context);
  }
  ClientRegistration reg=getClient(clientAnnotation);
  Optional<Class<? extends Annotation>> httpMethodMapping=context.getAnnotationTypeByStereotype(HttpMethodMapping.class);
  if (httpMethodMapping.isPresent()) {
    String uri=context.getValue(HttpMethodMapping.class,String.class).orElse(""String_Node_Str"");
    Class<? extends Annotation> annotationType=httpMethodMapping.get();
    HttpMethod httpMethod=HttpMethod.valueOf(annotationType.getSimpleName().toUpperCase());
    ReturnType returnType=context.getReturnType();
    Class<?> javaReturnType=returnType.getType();
    String contextPath=reg.contextPath;
    UriMatchTemplate uriTemplate=UriMatchTemplate.of(contextPath != null ? contextPath : ""String_Node_Str"");
    if (!(uri.length() == 1 && uri.charAt(0) == '/')) {
      uriTemplate=uriTemplate.nest(uri);
    }
    Map<String,Object> paramMap=context.getParameterValueMap();
    List<String> uriVariables=uriTemplate.getVariables();
    boolean variableSatisfied=uriVariables.isEmpty() || uriVariables.containsAll(paramMap.keySet());
    MutableHttpRequest<Object> request;
    Object body=null;
    Map<String,MutableArgumentValue<?>> parameters=context.getParameters();
    Argument[] arguments=context.getArguments();
    Map<String,String> headers=new LinkedHashMap<>(3);
    List<Argument> bodyArguments=new ArrayList<>();
    for (    Argument argument : arguments) {
      String argumentName=argument.getName();
      if (argument.isAnnotationPresent(Body.class)) {
        body=parameters.get(argumentName).getValue();
        break;
      }
 else       if (argument.isAnnotationPresent(Header.class)) {
        String headerName=argument.getAnnotation(Header.class).value();
        if (StringUtils.isEmpty(headerName)) {
          headerName=NameUtils.hyphenate(argumentName);
        }
        MutableArgumentValue<?> value=parameters.get(argumentName);
        String finalHeaderName=headerName;
        ConversionService.SHARED.convert(value.getValue(),String.class).ifPresent(o -> headers.put(finalHeaderName,o));
      }
 else       if (!uriVariables.contains(argumentName)) {
        bodyArguments.add(argument);
      }
    }
    if (HttpMethod.permitsRequestBody(httpMethod)) {
      if (body == null && !bodyArguments.isEmpty()) {
        Map<String,Object> bodyMap=new LinkedHashMap<>();
        for (        Argument bodyArgument : bodyArguments) {
          String argumentName=bodyArgument.getName();
          MutableArgumentValue<?> value=parameters.get(argumentName);
          bodyMap.put(argumentName,value.getValue());
        }
        body=bodyMap;
      }
      if (body != null) {
        if (!variableSatisfied) {
          if (body instanceof Map) {
            paramMap.putAll((Map)body);
            uri=uriTemplate.expand(paramMap);
            request=HttpRequest.create(httpMethod,uri);
          }
 else {
            paramMap.putAll(BeanMap.of(body));
            uri=uriTemplate.expand(paramMap);
            request=HttpRequest.create(httpMethod,uri);
          }
        }
 else {
          uri=uriTemplate.expand(paramMap);
          request=HttpRequest.create(httpMethod,uri);
        }
        request.body(body);
      }
 else {
        uri=uriTemplate.expand(paramMap);
        request=HttpRequest.create(httpMethod,uri);
      }
    }
 else {
      uri=uriTemplate.expand(paramMap);
      request=HttpRequest.create(httpMethod,uri);
    }
    if (!headers.isEmpty()) {
      for (      Map.Entry<String,String> entry : headers.entrySet()) {
        request.header(entry.getKey(),entry.getValue());
      }
    }
    HttpClient httpClient=reg.httpClient;
    boolean isFuture=CompletableFuture.class.isAssignableFrom(javaReturnType);
    if (Publishers.isPublisher(javaReturnType) || isFuture) {
      Argument<?> publisherArgument=returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
      Class<?> argumentType=publisherArgument.getType();
      Publisher<?> publisher;
      if (HttpResponse.class.isAssignableFrom(argumentType)) {
        publisher=httpClient.exchange(request,returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT));
      }
 else {
        publisher=httpClient.retrieve(request,publisherArgument);
      }
      if (isFuture) {
        CompletableFuture<Object> future=new CompletableFuture<>();
        publisher.subscribe(new CompletionAwareSubscriber<Object>(){
          AtomicReference<Object> reference=new AtomicReference<>();
          @Override protected void doOnSubscribe(          Subscription subscription){
            subscription.request(1);
          }
          @Override protected void doOnNext(          Object message){
            reference.set(message);
          }
          @Override protected void doOnError(          Throwable t){
            if (t instanceof HttpClientResponseException) {
              HttpClientResponseException e=(HttpClientResponseException)t;
              if (e.getStatus() == HttpStatus.NOT_FOUND) {
                future.complete(null);
              }
 else {
                future.completeExceptionally(t);
              }
            }
            future.completeExceptionally(t);
          }
          @Override protected void doOnComplete(){
            future.complete(reference.get());
          }
        }
);
        return future;
      }
 else {
        Object finalPublisher=ConversionService.SHARED.convert(publisher,javaReturnType).orElseThrow(() -> new HttpClientException(""String_Node_Str"" + javaReturnType));
        for (        ClientPublisherResultTransformer transformer : transformers) {
          finalPublisher=transformer.transform(finalPublisher);
        }
        return finalPublisher;
      }
    }
 else {
      BlockingHttpClient blockingHttpClient=httpClient.toBlocking();
      if (HttpResponse.class.isAssignableFrom(javaReturnType)) {
        return blockingHttpClient.exchange(request,returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT));
      }
 else       if (void.class == javaReturnType) {
        blockingHttpClient.exchange(request);
        return null;
      }
 else {
        try {
          return blockingHttpClient.retrieve(request,returnType.asArgument());
        }
 catch (        HttpClientResponseException e) {
          if (e.getStatus() == HttpStatus.NOT_FOUND) {
            if (javaReturnType == Optional.class) {
              return Optional.empty();
            }
            return null;
          }
          throw e;
        }
      }
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public Object intercept(MethodInvocationContext<Object,Object> context){
  Client clientAnnotation=context.getAnnotation(Client.class);
  if (clientAnnotation == null) {
    throw new IllegalStateException(""String_Node_Str"" + context);
  }
  ClientRegistration reg=getClient(clientAnnotation);
  Optional<Class<? extends Annotation>> httpMethodMapping=context.getAnnotationTypeByStereotype(HttpMethodMapping.class);
  if (httpMethodMapping.isPresent()) {
    String uri=context.getValue(HttpMethodMapping.class,String.class).orElse(""String_Node_Str"");
    Class<? extends Annotation> annotationType=httpMethodMapping.get();
    HttpMethod httpMethod=HttpMethod.valueOf(annotationType.getSimpleName().toUpperCase());
    ReturnType returnType=context.getReturnType();
    Class<?> javaReturnType=returnType.getType();
    String contextPath=reg.contextPath;
    UriMatchTemplate uriTemplate=UriMatchTemplate.of(contextPath != null ? contextPath : ""String_Node_Str"");
    if (!(uri.length() == 1 && uri.charAt(0) == '/')) {
      uriTemplate=uriTemplate.nest(uri);
    }
    Map<String,Object> paramMap=context.getParameterValueMap();
    List<String> uriVariables=uriTemplate.getVariables();
    boolean variableSatisfied=uriVariables.isEmpty() || uriVariables.containsAll(paramMap.keySet());
    MutableHttpRequest<Object> request;
    Object body=null;
    Map<String,MutableArgumentValue<?>> parameters=context.getParameters();
    Argument[] arguments=context.getArguments();
    Map<String,String> headers=new LinkedHashMap<>(3);
    List<Argument> bodyArguments=new ArrayList<>();
    for (    Argument argument : arguments) {
      String argumentName=argument.getName();
      if (argument.isAnnotationPresent(Body.class)) {
        body=parameters.get(argumentName).getValue();
        break;
      }
 else       if (argument.isAnnotationPresent(Header.class)) {
        String headerName=argument.getAnnotation(Header.class).value();
        if (StringUtils.isEmpty(headerName)) {
          headerName=NameUtils.hyphenate(argumentName);
        }
        MutableArgumentValue<?> value=parameters.get(argumentName);
        String finalHeaderName=headerName;
        ConversionService.SHARED.convert(value.getValue(),String.class).ifPresent(o -> headers.put(finalHeaderName,o));
      }
 else       if (!uriVariables.contains(argumentName)) {
        bodyArguments.add(argument);
      }
    }
    if (HttpMethod.permitsRequestBody(httpMethod)) {
      if (body == null && !bodyArguments.isEmpty()) {
        Map<String,Object> bodyMap=new LinkedHashMap<>();
        for (        Argument bodyArgument : bodyArguments) {
          String argumentName=bodyArgument.getName();
          MutableArgumentValue<?> value=parameters.get(argumentName);
          bodyMap.put(argumentName,value.getValue());
        }
        body=bodyMap;
      }
      if (body != null) {
        if (!variableSatisfied) {
          if (body instanceof Map) {
            paramMap.putAll((Map)body);
            uri=uriTemplate.expand(paramMap);
            request=HttpRequest.create(httpMethod,uri);
          }
 else {
            paramMap.putAll(BeanMap.of(body));
            uri=uriTemplate.expand(paramMap);
            request=HttpRequest.create(httpMethod,uri);
          }
        }
 else {
          uri=uriTemplate.expand(paramMap);
          request=HttpRequest.create(httpMethod,uri);
        }
        request.body(body);
      }
 else {
        uri=uriTemplate.expand(paramMap);
        request=HttpRequest.create(httpMethod,uri);
      }
    }
 else {
      uri=uriTemplate.expand(paramMap);
      request=HttpRequest.create(httpMethod,uri);
    }
    if (!headers.isEmpty()) {
      for (      Map.Entry<String,String> entry : headers.entrySet()) {
        request.header(entry.getKey(),entry.getValue());
      }
    }
    HttpClient httpClient=reg.httpClient;
    boolean isFuture=CompletableFuture.class.isAssignableFrom(javaReturnType);
    if (Publishers.isPublisher(javaReturnType) || isFuture) {
      Argument<?> publisherArgument=returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
      Class<?> argumentType=publisherArgument.getType();
      Publisher<?> publisher;
      if (HttpResponse.class.isAssignableFrom(argumentType)) {
        publisher=httpClient.exchange(request,returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT));
      }
 else {
        publisher=httpClient.retrieve(request,publisherArgument);
      }
      if (isFuture) {
        CompletableFuture<Object> future=new CompletableFuture<>();
        publisher.subscribe(new CompletionAwareSubscriber<Object>(){
          AtomicReference<Object> reference=new AtomicReference<>();
          @Override protected void doOnSubscribe(          Subscription subscription){
            subscription.request(1);
          }
          @Override protected void doOnNext(          Object message){
            reference.set(message);
          }
          @Override protected void doOnError(          Throwable t){
            if (t instanceof HttpClientResponseException) {
              HttpClientResponseException e=(HttpClientResponseException)t;
              if (e.getStatus() == HttpStatus.NOT_FOUND) {
                future.complete(null);
              }
 else {
                future.completeExceptionally(t);
              }
            }
            future.completeExceptionally(t);
          }
          @Override protected void doOnComplete(){
            future.complete(reference.get());
          }
        }
);
        return future;
      }
 else {
        Object finalPublisher=ConversionService.SHARED.convert(publisher,javaReturnType).orElseThrow(() -> new HttpClientException(""String_Node_Str"" + javaReturnType));
        for (        ClientPublisherResultTransformer transformer : transformers) {
          finalPublisher=transformer.transform(finalPublisher);
        }
        return finalPublisher;
      }
    }
 else {
      BlockingHttpClient blockingHttpClient=httpClient.toBlocking();
      if (HttpResponse.class.isAssignableFrom(javaReturnType)) {
        return blockingHttpClient.exchange(request,returnType.asArgument().getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT));
      }
 else       if (void.class == javaReturnType) {
        blockingHttpClient.exchange(request);
        return null;
      }
 else {
        try {
          return blockingHttpClient.retrieve(request,returnType.asArgument());
        }
 catch (        HttpClientResponseException e) {
          if (e.getStatus() == HttpStatus.NOT_FOUND) {
            if (javaReturnType == Optional.class) {
              return Optional.empty();
            }
            return null;
          }
          throw e;
        }
      }
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + context + ""String_Node_Str"");
}"
62682,"/** 
 * Obtains a resource URL
 * @param path The path
 * @return An optional resource
 */
Optional<URL> getResource(String path);","default Optional<URL> getResource(String path){
  URL resource=getClassLoader().getResource(path);
  if (resource != null) {
    return Optional.of(resource);
  }
  return Optional.empty();
}"
62683,"/** 
 * Obtains a stream of resource URLs
 * @param path The path
 * @return A resource stream
 */
Stream<URL> getResources(String path);","default Stream<URL> getResources(String fileName){
  Enumeration<URL> all;
  try {
    all=getClassLoader().getResources(fileName);
  }
 catch (  IOException e) {
    return Stream.empty();
  }
  Stream.Builder<URL> builder=Stream.builder();
  while (all.hasMoreElements()) {
    URL url=all.nextElement();
    builder.accept(url);
  }
  return builder.build();
}"
62684,"public NodeEntry getNode(){
  return node;
}","/** 
 * @return The node for this health entry
 */
public NodeEntry getNode(){
  return node;
}"
62685,"@Get public List<Book> index(){
  return Arrays.asList(new Book(""String_Node_Str""),new Book(""String_Node_Str""));
}","@Get @Cacheable(""String_Node_Str"") public List<Book> index(){
  return Arrays.asList(new Book(""String_Node_Str""),new Book(""String_Node_Str""));
}"
62686,"void visitAnnotatedMethod(ExecutableElement method,Object o){
  ExecutableElementParamInfo params=populateParameterData(method);
  BeanDefinitionVisitor writer=beanDefinitionWriters.get(this.concreteClass.getQualifiedName());
  TypeMirror returnType=method.getReturnType();
  TypeElement declaringClass=modelUtils.classElementFor(method);
  boolean isParent=!declaringClass.getQualifiedName().equals(this.concreteClass.getQualifiedName());
  ExecutableElement overridingMethod=modelUtils.overridingMethod(method,this.concreteClass).orElse(method);
  TypeElement overridingClass=modelUtils.classElementFor(overridingMethod);
  boolean overridden=isParent && !overridingClass.getQualifiedName().equals(declaringClass.getQualifiedName());
  boolean isPackagePrivate=modelUtils.isPackagePrivate(method);
  boolean isPrivate=modelUtils.isPrivate(method);
  if (overridden && !(isPrivate && isPackagePrivate)) {
    return;
  }
  PackageElement packageOfOverridingClass=elementUtils.getPackageOf(overridingMethod);
  PackageElement packageOfDeclaringClass=elementUtils.getPackageOf(declaringClass);
  boolean isPackagePrivateAndPackagesDiffer=overridden && isPackagePrivate && !packageOfOverridingClass.getQualifiedName().equals(packageOfDeclaringClass.getQualifiedName());
  boolean requiresReflection=isPrivate || isPackagePrivateAndPackagesDiffer;
  boolean overriddenInjected=overridden && annotationUtils.hasStereotype(overridingMethod,Inject.class);
  if (isParent && overridden && !overriddenInjected&& !isPackagePrivateAndPackagesDiffer&& !isPrivate) {
    return;
  }
  if (!requiresReflection && modelUtils.isInheritedAndNotPublic(this.concreteClass,declaringClass,method)) {
    requiresReflection=true;
  }
  if (annotationUtils.hasStereotype(method,PostConstruct.class)) {
    writer.visitPostConstructMethod(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else   if (annotationUtils.hasStereotype(method,PreDestroy.class)) {
    writer.visitPreDestroyMethod(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else   if (annotationUtils.hasStereotype(method,Inject.class)) {
    writer.visitMethodInjectionPoint(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else {
    error(""String_Node_Str"",method);
  }
}","void visitAnnotatedMethod(ExecutableElement method,Object o){
  ExecutableElementParamInfo params=populateParameterData(method);
  BeanDefinitionVisitor writer=beanDefinitionWriters.get(this.concreteClass.getQualifiedName());
  TypeMirror returnType=method.getReturnType();
  TypeElement declaringClass=modelUtils.classElementFor(method);
  boolean isParent=!declaringClass.getQualifiedName().equals(this.concreteClass.getQualifiedName());
  ExecutableElement overridingMethod=modelUtils.overridingOrHidingMethod(method,this.concreteClass).orElse(method);
  TypeElement overridingClass=modelUtils.classElementFor(overridingMethod);
  boolean overridden=isParent && !overridingClass.getQualifiedName().equals(declaringClass.getQualifiedName());
  boolean isPackagePrivate=modelUtils.isPackagePrivate(method);
  boolean isPrivate=modelUtils.isPrivate(method);
  if (overridden && !(isPrivate || isPackagePrivate)) {
    return;
  }
  PackageElement packageOfOverridingClass=elementUtils.getPackageOf(overridingMethod);
  PackageElement packageOfDeclaringClass=elementUtils.getPackageOf(declaringClass);
  boolean isPackagePrivateAndPackagesDiffer=overridden && isPackagePrivate && !packageOfOverridingClass.getQualifiedName().equals(packageOfDeclaringClass.getQualifiedName());
  boolean requiresReflection=isPrivate || isPackagePrivateAndPackagesDiffer;
  boolean overriddenInjected=overridden && annotationUtils.hasStereotype(overridingMethod,Inject.class);
  if (isParent && overridden && !overriddenInjected&& !isPackagePrivateAndPackagesDiffer&& !isPrivate) {
    return;
  }
  if (!requiresReflection && modelUtils.isInheritedAndNotPublic(this.concreteClass,declaringClass,method)) {
    requiresReflection=true;
  }
  if (annotationUtils.hasStereotype(method,PostConstruct.class)) {
    writer.visitPostConstructMethod(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else   if (annotationUtils.hasStereotype(method,PreDestroy.class)) {
    writer.visitPreDestroyMethod(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else   if (annotationUtils.hasStereotype(method,Inject.class)) {
    writer.visitMethodInjectionPoint(modelUtils.resolveTypeReference(declaringClass),requiresReflection,modelUtils.resolveTypeReference(returnType),method.getSimpleName().toString(),params.getParameters(),params.getQualifierTypes(),params.getGenericTypes());
  }
 else {
    error(""String_Node_Str"",method);
  }
}"
62687,"@Override public Object visitVariable(VariableElement variable,Object o){
  if (modelUtils.isStatic(variable)) {
    return null;
  }
  if (variable.getKind() != FIELD)   return null;
  boolean isInjected=annotationUtils.hasStereotype(variable,Inject.class);
  boolean isValue=!isInjected && (annotationUtils.hasStereotype(variable,Value.class));
  if (isInjected || isValue) {
    BeanDefinitionVisitor writer=beanDefinitionWriters.get(this.concreteClass.getQualifiedName());
    Object qualifierRef=annotationUtils.resolveQualifier(variable);
    boolean isPrivate=modelUtils.isPrivate(variable);
    boolean requiresReflection=isPrivate;
    if (!writer.isValidated() && annotationUtils.hasStereotype(variable,""String_Node_Str"")) {
      writer.setValidated(true);
    }
    Name fieldName=variable.getSimpleName();
    TypeMirror type=variable.asType();
    Object fieldType=modelUtils.resolveTypeReference(type);
    TypeElement declaringClass=modelUtils.classElementFor(variable);
    if (isValue) {
      writer.visitFieldValue(declaringClass.getQualifiedName().toString(),qualifierRef,requiresReflection,fieldType,fieldName.toString(),isConfigurationPropertiesType);
    }
 else {
      writer.visitFieldInjectionPoint(declaringClass.getQualifiedName().toString(),qualifierRef,requiresReflection,fieldType,fieldName.toString());
    }
  }
  return null;
}","@Override public Object visitVariable(VariableElement variable,Object o){
  if (modelUtils.isStatic(variable)) {
    return null;
  }
  if (variable.getKind() != FIELD)   return null;
  boolean isInjected=annotationUtils.hasStereotype(variable,Inject.class);
  boolean isValue=!isInjected && (annotationUtils.hasStereotype(variable,Value.class));
  if (isInjected || isValue) {
    BeanDefinitionVisitor writer=beanDefinitionWriters.get(this.concreteClass.getQualifiedName());
    TypeElement declaringClass=modelUtils.classElementFor(variable);
    Object qualifierRef=annotationUtils.resolveQualifier(variable);
    boolean isPrivate=modelUtils.isPrivate(variable);
    boolean requiresReflection=isPrivate || modelUtils.isInheritedAndNotPublic(this.concreteClass,declaringClass,variable);
    if (!writer.isValidated() && annotationUtils.hasStereotype(variable,""String_Node_Str"")) {
      writer.setValidated(true);
    }
    Name fieldName=variable.getSimpleName();
    TypeMirror type=variable.asType();
    Object fieldType=modelUtils.resolveTypeReference(type);
    if (isValue) {
      writer.visitFieldValue(declaringClass.getQualifiedName().toString(),qualifierRef,requiresReflection,fieldType,fieldName.toString(),isConfigurationPropertiesType);
    }
 else {
      writer.visitFieldInjectionPoint(declaringClass.getQualifiedName().toString(),qualifierRef,requiresReflection,fieldType,fieldName.toString());
    }
  }
  return null;
}"
62688,"private ExecutableElement findOverriddenMethod(ExecutableElement executableElement){
  ExecutableElement overridden=null;
  Element enclosingElement=executableElement.getEnclosingElement();
  if (enclosingElement instanceof TypeElement) {
    TypeElement thisType=(TypeElement)enclosingElement;
    TypeMirror superMirror=thisType.getSuperclass();
    TypeElement supertype=superMirror instanceof TypeElement ? (TypeElement)superMirror : null;
    while (supertype != null && !supertype.toString().equals(Object.class.getName())) {
      Optional<ExecutableElement> result=findOverridden(executableElement,supertype);
      if (result.isPresent()) {
        overridden=result.get();
        break;
      }
      supertype=(TypeElement)supertype.getSuperclass();
    }
    if (overridden == null) {
      overridden=findOverriddenInterfaceMethod(executableElement,thisType);
    }
  }
  return overridden;
}","private ExecutableElement findOverriddenMethod(ExecutableElement executableElement){
  ExecutableElement overridden=null;
  Element enclosingElement=executableElement.getEnclosingElement();
  if (enclosingElement instanceof TypeElement) {
    TypeElement thisType=(TypeElement)enclosingElement;
    TypeMirror superMirror=thisType.getSuperclass();
    TypeElement supertype=superMirror instanceof TypeElement ? (TypeElement)superMirror : null;
    while (supertype != null && !supertype.toString().equals(Object.class.getName())) {
      Optional<ExecutableElement> result=findOverridden(executableElement,supertype);
      if (result.isPresent()) {
        overridden=result.get();
        break;
      }
 else {
        overridden=findOverriddenInterfaceMethod(executableElement,supertype);
      }
      supertype=(TypeElement)supertype.getSuperclass();
    }
    if (overridden == null) {
      overridden=findOverriddenInterfaceMethod(executableElement,thisType);
    }
  }
  return overridden;
}"
62689,"private ExecutableElement findOverriddenInterfaceMethod(ExecutableElement executableElement,TypeElement thisType){
  ExecutableElement overridden=null;
  TypeElement supertype=thisType;
  while (supertype != null && !supertype.toString().equals(Object.class.getName())) {
    List<? extends TypeMirror> interfaces=supertype.getInterfaces();
    for (    TypeMirror anInterface : interfaces) {
      if (anInterface instanceof DeclaredType) {
        DeclaredType iElement=(DeclaredType)anInterface;
        Optional<ExecutableElement> result=findOverridden(executableElement,(TypeElement)iElement.asElement());
        if (result.isPresent()) {
          overridden=result.get();
          break;
        }
 else {
          overridden=findOverriddenInterfaceMethod(executableElement,(TypeElement)iElement.asElement());
          if (overridden != null)           break;
        }
      }
    }
    TypeMirror superMirror=supertype.getSuperclass();
    if (superMirror instanceof TypeElement) {
      supertype=(TypeElement)superMirror;
    }
 else {
      break;
    }
  }
  return overridden;
}","private ExecutableElement findOverriddenInterfaceMethod(ExecutableElement executableElement,TypeElement thisType){
  ExecutableElement overridden=null;
  TypeElement supertype=thisType;
  while (supertype != null && !supertype.toString().equals(Object.class.getName())) {
    List<? extends TypeMirror> interfaces=supertype.getInterfaces();
    for (    TypeMirror anInterface : interfaces) {
      if (anInterface instanceof DeclaredType) {
        DeclaredType iElement=(DeclaredType)anInterface;
        Optional<ExecutableElement> result=findOverridden(executableElement,(TypeElement)iElement.asElement());
        if (result.isPresent()) {
          overridden=result.get();
          break;
        }
 else {
          overridden=findOverriddenInterfaceMethod(executableElement,(TypeElement)iElement.asElement());
          if (overridden != null)           break;
        }
      }
    }
    TypeMirror superMirror=supertype.getSuperclass();
    if (superMirror instanceof DeclaredType) {
      supertype=(TypeElement)((DeclaredType)superMirror).asElement();
    }
 else {
      break;
    }
  }
  return overridden;
}"
62690,"/** 
 * Finds an annotation for the given class element and stereotype. A stereotype is a meta annotation on another annotation.
 * @param element    The element to search
 * @param stereotype The stereotype to look for
 * @return An array of matching {@link AnnotationMirror}
 */
Optional<AnnotationMirror> findAnnotation(Element element,String stereotype){
  List<? extends AnnotationMirror> annotationMirrors=elementUtils.getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    if (stereotype.equals(annotationType.toString())) {
      return Optional.of(ann);
    }
 else     if (!Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(annotationType.asElement().getSimpleName().toString())) {
      Optional<AnnotationMirror> found=findAnnotation(annotationType.asElement(),stereotype);
      if (found.isPresent()) {
        return found;
      }
    }
  }
  return Optional.empty();
}","/** 
 * Finds an annotation for the given class element and stereotype. A stereotype is a meta annotation on another annotation.
 * @param element    The element to search
 * @param stereotype The stereotype to look for
 * @return An array of matching {@link AnnotationMirror}
 */
Optional<AnnotationMirror> findAnnotation(Element element,String stereotype){
  Set<? extends AnnotationMirror> annotationMirrors=getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    if (stereotype.equals(annotationType.toString())) {
      return Optional.of(ann);
    }
 else     if (!Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(annotationType.asElement().getSimpleName().toString())) {
      Optional<AnnotationMirror> found=findAnnotation(annotationType.asElement(),stereotype);
      if (found.isPresent()) {
        return found;
      }
    }
  }
  return Optional.empty();
}"
62691,"/** 
 * Finds an annotation for the given class element and stereotypes. A stereotype is a meta annotation on another annotation.
 * @param element     The element to search
 * @param stereotypes The stereotypes to look for
 * @return An array of matching {@link AnnotationMirror}
 */
AnnotationMirror[] findAnnotationsWithStereotype(Element element,String... stereotypes){
  if (element == null) {
    return new AnnotationMirror[0];
  }
  List<String> stereoTypeList=Arrays.asList(stereotypes);
  List<AnnotationMirror> annotationMirrorList=new ArrayList<>();
  List<? extends AnnotationMirror> annotationMirrors=elementUtils.getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    String annotationTypeString=annotationType.toString();
    if (stereoTypeList.contains(annotationTypeString)) {
      annotationMirrorList.add(ann);
    }
 else {
      Element annotationElement=annotationType.asElement();
      if (!IGNORED_ANNOTATIONS.contains(annotationElement.getSimpleName().toString())) {
        if (hasStereotype(annotationElement,stereotypes)) {
          annotationMirrorList.add(ann);
        }
      }
    }
  }
  if (element instanceof ExecutableElement && annotationMirrorList.isEmpty()) {
    ExecutableElement executableElement=(ExecutableElement)element;
    if (findAnnotation(element,Override.class) != null) {
      ExecutableElement overridden=findOverriddenMethod(executableElement);
      if (overridden != null) {
        return findAnnotationsWithStereotype(overridden,stereotypes);
      }
    }
  }
  return annotationMirrorList.toArray(new AnnotationMirror[annotationMirrorList.size()]);
}","/** 
 * Finds an annotation for the given class element and stereotypes. A stereotype is a meta annotation on another annotation.
 * @param element     The element to search
 * @param stereotypes The stereotypes to look for
 * @return An array of matching {@link AnnotationMirror}
 */
AnnotationMirror[] findAnnotationsWithStereotype(Element element,String... stereotypes){
  if (element == null) {
    return new AnnotationMirror[0];
  }
  List<String> stereoTypeList=Arrays.asList(stereotypes);
  List<AnnotationMirror> annotationMirrorList=new ArrayList<>();
  Set<? extends AnnotationMirror> annotationMirrors=getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    String annotationTypeString=annotationType.toString();
    if (stereoTypeList.contains(annotationTypeString)) {
      annotationMirrorList.add(ann);
    }
 else {
      Element annotationElement=annotationType.asElement();
      if (!IGNORED_ANNOTATIONS.contains(annotationElement.getSimpleName().toString())) {
        if (hasStereotype(annotationElement,stereotypes)) {
          annotationMirrorList.add(ann);
        }
      }
    }
  }
  if (element instanceof ExecutableElement && annotationMirrorList.isEmpty()) {
    ExecutableElement executableElement=(ExecutableElement)element;
    if (findAnnotation(element,Override.class) != null) {
      ExecutableElement overridden=findOverriddenMethod(executableElement);
      if (overridden != null) {
        return findAnnotationsWithStereotype(overridden,stereotypes);
      }
    }
  }
  return annotationMirrorList.toArray(new AnnotationMirror[annotationMirrorList.size()]);
}"
62692,"/** 
 * Finds an annotation for the given class element and stereotype. A stereotype is a meta annotation on another annotation.
 * @param element    The element to search
 * @param stereotype The stereotype to look for
 * @return An array of matching {@link AnnotationMirror}
 */
Optional<AnnotationMirror> findAnnotationWithStereotype(Element element,String stereotype){
  List<? extends AnnotationMirror> annotationMirrors=elementUtils.getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    if (stereotype.equals(annotationType.toString())) {
      return Optional.of(ann);
    }
 else     if (!Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(annotationType.asElement().getSimpleName().toString())) {
      if (findAnnotationWithStereotype(annotationType.asElement(),stereotype).isPresent()) {
        return Optional.of(ann);
      }
    }
  }
  return Optional.empty();
}","/** 
 * Finds an annotation for the given class element and stereotype. A stereotype is a meta annotation on another annotation.
 * @param element    The element to search
 * @param stereotype The stereotype to look for
 * @return An array of matching {@link AnnotationMirror}
 */
Optional<AnnotationMirror> findAnnotationWithStereotype(Element element,String stereotype){
  Set<? extends AnnotationMirror> annotationMirrors=getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    if (stereotype.equals(annotationType.toString())) {
      return Optional.of(ann);
    }
 else     if (!Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(annotationType.asElement().getSimpleName().toString())) {
      if (findAnnotationWithStereotype(annotationType.asElement(),stereotype).isPresent()) {
        return Optional.of(ann);
      }
    }
  }
  return Optional.empty();
}"
62693,"boolean hasStereotype(Element element,List<String> stereotypes){
  if (element == null) {
    return false;
  }
  if (stereotypes.contains(element.toString())) {
    return true;
  }
  List<? extends AnnotationMirror> annotationMirrors=elementUtils.getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    String annotationTypeString=annotationType.toString();
    if (stereotypes.contains(annotationTypeString)) {
      return true;
    }
 else     if (!IGNORED_ANNOTATIONS.contains(annotationType.asElement().getSimpleName().toString())) {
      if (hasStereotype(annotationType.asElement(),stereotypes)) {
        return true;
      }
    }
  }
  if (element instanceof ExecutableElement) {
    ExecutableElement executableElement=(ExecutableElement)element;
    if (findAnnotation(element,Override.class) != null) {
      ExecutableElement overridden=findOverriddenMethod(executableElement);
      if (overridden != null) {
        return hasStereotype(overridden,stereotypes);
      }
    }
  }
  return false;
}","boolean hasStereotype(Element element,List<String> stereotypes){
  if (element == null) {
    return false;
  }
  if (stereotypes.contains(element.toString())) {
    return true;
  }
  Set<? extends AnnotationMirror> annotationMirrors=getAllAnnotationMirrors(element);
  for (  AnnotationMirror ann : annotationMirrors) {
    DeclaredType annotationType=ann.getAnnotationType();
    String annotationTypeString=annotationType.toString();
    if (stereotypes.contains(annotationTypeString)) {
      return true;
    }
 else     if (!IGNORED_ANNOTATIONS.contains(annotationType.asElement().getSimpleName().toString())) {
      Element annotationTypeElement=annotationType.asElement();
      if (hasStereotype(annotationTypeElement,stereotypes)) {
        return true;
      }
    }
  }
  if (element instanceof ExecutableElement) {
    ExecutableElement executableElement=(ExecutableElement)element;
    if (findAnnotation(element,Override.class) != null) {
      ExecutableElement overridden=findOverriddenMethod(executableElement);
      if (overridden != null) {
        return hasStereotype(overridden,stereotypes);
      }
    }
  }
  return false;
}"
62694,"@Executable public String showPrimitive(long id){
  return ""String_Node_Str"";
}","@Executable public String showPrimitive(long id){
  return String.format(""String_Node_Str"",id);
}"
62695,"@Executable public String showPrimitiveArray(long[] id){
  return ""String_Node_Str"";
}","@Executable public String showPrimitiveArray(long[] id){
  return String.format(""String_Node_Str"",id[0]);
}"
62696,"@Executable public String show(Long id){
  return ""String_Node_Str"";
}","@Executable public String show(Long id){
  return String.format(""String_Node_Str"",id);
}"
62697,"@Executable public String showArray(Long[] id){
  return ""String_Node_Str"";
}","@Executable public String showArray(Long[] id){
  return String.format(""String_Node_Str"",id[0]);
}"
62698,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  for (  final Element element : roundEnv.getElementsAnnotatedWith(Configuration.class)) {
    if (element.getSimpleName().contentEquals(""String_Node_Str"")) {
      try {
        BeanConfigurationWriter writer=new BeanConfigurationWriter();
        String configurationName=writer.writeConfiguration(element.getEnclosingElement().toString(),new File(element.getEnclosingElement().toString()));
        ServiceDescriptorGenerator generator=new ServiceDescriptorGenerator();
        File targetDirectory=new File(element.getEnclosingElement().toString());
        if (targetDirectory != null) {
          generator.generate(targetDirectory,configurationName,BeanConfiguration.class);
        }
      }
 catch (      Throwable e) {
        new Exception(""String_Node_Str"");
      }
    }
  }
  return true;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  for (  final Element element : roundEnv.getElementsAnnotatedWith(Configuration.class)) {
    if (element.getSimpleName().contentEquals(""String_Node_Str"")) {
      try {
        BeanConfigurationWriter writer=new BeanConfigurationWriter(element.getEnclosedElements().toString());
        writer.writeTo(new File(element.getEnclosingElement().toString()));
        ServiceDescriptorGenerator generator=new ServiceDescriptorGenerator();
        File targetDirectory=new File(element.getEnclosingElement().toString());
        if (targetDirectory != null) {
        }
      }
 catch (      Throwable e) {
        new Exception(""String_Node_Str"");
      }
    }
  }
  return true;
}"
62699,"/** 
 * 管理员回复评论
 * @param commentId 被回复的评论
 * @param commentContent 回复的内容
 * @return string
 */
@PostMapping(""String_Node_Str"") public String replyComment(@RequestParam(""String_Node_Str"") Long commentId,@RequestParam(""String_Node_Str"") Long postId,@RequestParam(""String_Node_Str"") String commentContent,@RequestParam(""String_Node_Str"") String userAgent,HttpServletRequest request){
  try {
    Post post=new Post();
    post.setPostId(postId);
    Comment comment=new Comment();
    comment.setPost(post);
    comment.setCommentAuthor(userService.findAllUser().get(0).getUserDisplayName());
    comment.setCommentAuthorEmail(userService.findAllUser().get(0).getUserEmail());
    comment.setCommentAuthorUrl(HaloConst.OPTIONS.get(""String_Node_Str""));
    comment.setCommentAuthorIp(HaloUtil.getIpAddr(request));
    comment.setCommentAuthorAvatarMd5(HaloUtil.getMD5(userService.findAllUser().get(0).getUserEmail()));
    comment.setCommentDate(new Date());
    String at=""String_Node_Str"" + commentService.findCommentById(commentId).get().getCommentAuthor() + ""String_Node_Str"";
    comment.setCommentContent(at + commentContent);
    comment.setCommentAgent(userAgent);
    comment.setCommentParent(commentId);
    comment.setCommentStatus(0);
    commentService.saveByComment(comment);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return ""String_Node_Str"";
}","/** 
 * 管理员回复评论
 * @param commentId 被回复的评论
 * @param commentContent 回复的内容
 * @return string
 */
@PostMapping(""String_Node_Str"") public String replyComment(@RequestParam(""String_Node_Str"") Long commentId,@RequestParam(""String_Node_Str"") Long postId,@RequestParam(""String_Node_Str"") String commentContent,@RequestParam(""String_Node_Str"") String userAgent,HttpServletRequest request,HttpSession session){
  try {
    Post post=new Post();
    post.setPostId(postId);
    User user=(User)session.getAttribute(HaloConst.USER_SESSION_KEY);
    Comment lastComment=commentService.findCommentById(commentId).get();
    Comment comment=new Comment();
    comment.setPost(post);
    comment.setCommentAuthor(user.getUserDisplayName());
    comment.setCommentAuthorEmail(user.getUserEmail());
    comment.setCommentAuthorUrl(HaloConst.OPTIONS.get(""String_Node_Str""));
    comment.setCommentAuthorIp(HaloUtil.getIpAddr(request));
    comment.setCommentAuthorAvatarMd5(HaloUtil.getMD5(userService.findAllUser().get(0).getUserEmail()));
    comment.setCommentDate(new Date());
    String lastContent=""String_Node_Str"" + lastComment.getCommentAuthor() + ""String_Node_Str""+ lastComment.getCommentContent();
    comment.setCommentContent(commentContent + lastContent);
    comment.setCommentAgent(userAgent);
    comment.setCommentParent(commentId);
    comment.setCommentStatus(0);
    commentService.saveByComment(comment);
    Pattern patternEmail=Pattern.compile(""String_Node_Str"");
    Matcher matcher=patternEmail.matcher(lastComment.getCommentAuthorEmail());
    if (""String_Node_Str"".equals(HaloConst.OPTIONS.get(""String_Node_Str"")) && ""String_Node_Str"".equals(HaloConst.OPTIONS.get(""String_Node_Str""))) {
      if (matcher.find()) {
        Map<String,Object> map=new HashMap<>();
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        map.put(""String_Node_Str"",lastComment.getCommentAuthor());
        map.put(""String_Node_Str"",lastComment.getPost().getPostTitle());
        map.put(""String_Node_Str"",lastComment.getCommentContent());
        map.put(""String_Node_Str"",user.getUserDisplayName());
        map.put(""String_Node_Str"",commentContent);
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        mailService.sendTemplateMail(lastComment.getCommentAuthorEmail(),""String_Node_Str"" + HaloConst.OPTIONS.get(""String_Node_Str"") + ""String_Node_Str"",map,""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return ""String_Node_Str"";
}"
62700,"/** 
 * 将评论改变为发布状态
 * @param commentId commentId
 * @param status status
 * @return string
 */
@GetMapping(""String_Node_Str"") public String moveToPublish(@PathParam(""String_Node_Str"") Long commentId,@PathParam(""String_Node_Str"") Integer status,HttpSession session){
  Comment comment=commentService.updateCommentStatus(commentId,0);
  Pattern patternEmail=Pattern.compile(""String_Node_Str"");
  Matcher matcher=patternEmail.matcher(comment.getCommentAuthorEmail());
  if (""String_Node_Str"".equals(HaloConst.OPTIONS.get(""String_Node_Str""))) {
    try {
      if (status == 1 && matcher.find()) {
        Map<String,Object> map=new HashMap<>();
        map.put(""String_Node_Str"",comment.getPost().getPostUrl());
        map.put(""String_Node_Str"",comment.getPost().getPostTitle());
        map.put(""String_Node_Str"",comment.getCommentContent());
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        map.put(""String_Node_Str"",userService.findAllUser().get(0).getUserDisplayName());
        mailService.sendTemplateMail(comment.getCommentAuthorEmail(),""String_Node_Str"" + HaloConst.OPTIONS.get(""String_Node_Str"") + ""String_Node_Str"",map,""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + e.getMessage());
    }
  }
  this.getNewComments(session);
  return ""String_Node_Str"" + status;
}","/** 
 * 将评论改变为发布状态
 * @param commentId commentId
 * @param status status
 * @return string
 */
@GetMapping(""String_Node_Str"") public String moveToPublish(@PathParam(""String_Node_Str"") Long commentId,@PathParam(""String_Node_Str"") Integer status,HttpSession session){
  Comment comment=commentService.updateCommentStatus(commentId,0);
  Pattern patternEmail=Pattern.compile(""String_Node_Str"");
  Matcher matcher=patternEmail.matcher(comment.getCommentAuthorEmail());
  if (""String_Node_Str"".equals(HaloConst.OPTIONS.get(""String_Node_Str"")) && ""String_Node_Str"".equals(HaloConst.OPTIONS.get(""String_Node_Str""))) {
    try {
      if (status == 1 && matcher.find()) {
        Map<String,Object> map=new HashMap<>();
        map.put(""String_Node_Str"",comment.getPost().getPostUrl());
        map.put(""String_Node_Str"",comment.getPost().getPostTitle());
        map.put(""String_Node_Str"",comment.getCommentContent());
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        map.put(""String_Node_Str"",HaloConst.OPTIONS.get(""String_Node_Str""));
        map.put(""String_Node_Str"",userService.findAllUser().get(0).getUserDisplayName());
        mailService.sendTemplateMail(comment.getCommentAuthorEmail(),""String_Node_Str"" + HaloConst.OPTIONS.get(""String_Node_Str"") + ""String_Node_Str"",map,""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + e.getMessage());
    }
  }
  this.getNewComments(session);
  return ""String_Node_Str"" + status;
}"
62701,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateUserProfile(User user){
  user.setUsername(null);
  user.setPassword(null);
  this.updateNotNull(user);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateUserProfile(User user){
  user.setUsername(null);
  user.setPassword(null);
  if (user.getDeptId() == null)   user.setDeptId(0l);
  this.updateNotNull(user);
}"
62702,"@Log(""String_Node_Str"") @RequiresPermissions(""String_Node_Str"") @RequestMapping(""String_Node_Str"") @ResponseBody public ResponseBo updateUser(User user,Long[] roles){
  try {
    if (""String_Node_Str"".equalsIgnoreCase(user.getStatus()))     user.setStatus(""String_Node_Str"");
 else     user.setStatus(""String_Node_Str"");
    this.userService.updateUser(user,roles);
    return ResponseBo.ok(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return ResponseBo.error(""String_Node_Str"");
  }
}","@Log(""String_Node_Str"") @RequiresPermissions(""String_Node_Str"") @RequestMapping(""String_Node_Str"") @ResponseBody public ResponseBo updateUser(User user,Long[] rolesSelect){
  try {
    if (""String_Node_Str"".equalsIgnoreCase(user.getStatus()))     user.setStatus(""String_Node_Str"");
 else     user.setStatus(""String_Node_Str"");
    this.userService.updateUser(user,rolesSelect);
    return ResponseBo.ok(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return ResponseBo.error(""String_Node_Str"");
  }
}"
62703,"private void saveLog(ProceedingJoinPoint joinPoint,long time){
  User user=(User)SecurityUtils.getSubject().getPrincipal();
  MethodSignature signature=(MethodSignature)joinPoint.getSignature();
  Method method=signature.getMethod();
  SysLog log=new SysLog();
  Log logAnnotation=method.getAnnotation(Log.class);
  if (logAnnotation != null) {
    log.setOperation(logAnnotation.value());
  }
  String className=joinPoint.getTarget().getClass().getName();
  String methodName=signature.getName();
  log.setMethod(className + ""String_Node_Str"" + methodName+ ""String_Node_Str"");
  Object[] args=joinPoint.getArgs();
  LocalVariableTableParameterNameDiscoverer u=new LocalVariableTableParameterNameDiscoverer();
  String[] paramNames=u.getParameterNames(method);
  if (args != null && paramNames != null) {
    String params=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      params+=""String_Node_Str"" + paramNames[i] + ""String_Node_Str""+ args[i];
    }
    log.setParams(params);
  }
  HttpServletRequest request=HttpContextUtils.getHttpServletRequest();
  log.setIp(IPUtils.getIpAddr(request));
  log.setUsername(user.getUsername());
  log.setTime(time);
  log.setCreateTime(new Date());
  log.setLocation(AddressUtils.getRealAddressByIP(log.getIp()));
  this.logService.save(log);
}","private void saveLog(ProceedingJoinPoint joinPoint,long time){
  User user=(User)SecurityUtils.getSubject().getPrincipal();
  MethodSignature signature=(MethodSignature)joinPoint.getSignature();
  Method method=signature.getMethod();
  SysLog log=new SysLog();
  Log logAnnotation=method.getAnnotation(Log.class);
  if (logAnnotation != null) {
    log.setOperation(logAnnotation.value());
  }
  String className=joinPoint.getTarget().getClass().getName();
  String methodName=signature.getName();
  log.setMethod(className + ""String_Node_Str"" + methodName+ ""String_Node_Str"");
  Object[] args=joinPoint.getArgs();
  LocalVariableTableParameterNameDiscoverer u=new LocalVariableTableParameterNameDiscoverer();
  String[] paramNames=u.getParameterNames(method);
  if (args != null && paramNames != null) {
    String params=""String_Node_Str"";
    for (int i=0; i < args.length; i++) {
      params+=""String_Node_Str"" + paramNames[i] + ""String_Node_Str""+ args[i];
    }
    log.setParams(params);
  }
  HttpServletRequest request=HttpContextUtils.getHttpServletRequest();
  log.setIp(IPUtils.getIpAddr(request));
  log.setUsername(user.getUsername());
  log.setTime(time);
  log.setCreateTime(new Date());
  log.setLocation(AddressUtils.getRealAddressByIP(log.getIp()));
  log.setId(this.logService.getSequence(SysLog.SEQ));
  this.logService.save(log);
}"
62704,"@Override public boolean shouldFilter(){
  HttpServletRequest request=RequestContext.getCurrentContext().getRequest();
  if (StrUtil.equals(request.getMethod(),HttpMethod.GET.name()) || StrUtil.containsIgnoreCase(request.getRequestURI(),TOKEN)) {
    isPreview=false;
  }
  return isPreview;
}","@Override public boolean shouldFilter(){
  HttpServletRequest request=RequestContext.getCurrentContext().getRequest();
  if (StrUtil.equalsIgnoreCase(request.getMethod(),HttpMethod.GET.name()) || StrUtil.containsIgnoreCase(request.getRequestURI(),TOKEN)) {
    return false;
  }
  return isPreview;
}"
62705,"/** 
 * @param e spring security内部异常
 * @return 经过处理的异常信息
 * @throws Exception 通用异常
 */
@Override public ResponseEntity<OAuth2Exception> translate(Exception e) throws Exception {
  OAuth2Exception oAuth2Exception;
  if (e instanceof InvalidGrantException && StringUtils.equals(""String_Node_Str"",e.getMessage())) {
    oAuth2Exception=new InvalidGrantException(""String_Node_Str"",e);
  }
 else   if (e instanceof InternalAuthenticationServiceException) {
    oAuth2Exception=new InvalidGrantException(""String_Node_Str"",e);
  }
 else {
    oAuth2Exception=(OAuth2Exception)e;
  }
  return super.translate(oAuth2Exception);
}","/** 
 * @param e spring security内部异常
 * @return 经过处理的异常信息
 * @throws Exception 通用异常
 */
@Override public ResponseEntity<OAuth2Exception> translate(Exception e) throws Exception {
  OAuth2Exception oAuth2Exception;
  if (e instanceof InvalidGrantException && StringUtils.equals(BAD_MSG,e.getMessage())) {
    oAuth2Exception=new InvalidGrantException(""String_Node_Str"",e);
  }
 else   if (e instanceof InternalAuthenticationServiceException) {
    oAuth2Exception=new InvalidGrantException(""String_Node_Str"",e);
  }
 else {
    oAuth2Exception=new UnsupportedResponseTypeException(""String_Node_Str"",e);
  }
  return super.translate(oAuth2Exception);
}"
62706,"/** 
 * 删除用户信息
 * @param id ID
 * @return R
 */
@DeleteMapping(""String_Node_Str"") public R<Boolean> userDel(@PathVariable Integer id){
  SysUser sysUser=userService.selectById(id);
  return new R<>(userService.deleteUserById(sysUser));
}","/** 
 * 删除用户信息
 * @param id ID
 * @return R
 */
@ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiImplicitParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true,dataType=""String_Node_Str"") @DeleteMapping(""String_Node_Str"") public R<Boolean> userDel(@PathVariable Integer id){
  SysUser sysUser=userService.selectById(id);
  return new R<>(userService.deleteUserById(sysUser));
}"
62707,"/** 
 * 修改个人信息
 * @param userDto userDto
 * @return success/false
 */
@PutMapping(""String_Node_Str"") public Boolean editInfo(@RequestBody UserDto userDto){
  String username=UserUtils.getUserName();
  UserVo userVo=userService.findUserByUsername(username);
  if (!ENCODER.matches(userDto.getPassword(),userVo.getPassword())) {
    return Boolean.FALSE;
  }
  SysUser sysUser=new SysUser();
  sysUser.setUserId(userVo.getUserId());
  sysUser.setPassword(ENCODER.encode(userDto.getNewpassword1()));
  sysUser.setAvatar(userDto.getAvatar());
  return userService.updateById(sysUser);
}","/** 
 * 修改个人信息
 * @param userDto userDto
 * @return success/false
 */
@PutMapping(""String_Node_Str"") public Boolean editInfo(@RequestBody UserDto userDto){
  String username=UserUtils.getUserName();
  UserVo userVo=userService.findUserByUsername(username);
  if (!ENCODER.matches(userDto.getPassword(),userVo.getPassword())) {
    return Boolean.FALSE;
  }
  SysUser sysUser=new SysUser();
  sysUser.setUserId(userVo.getUserId());
  sysUser.setPassword(ENCODER.encode(userDto.getNewpassword1()));
  sysUser.setAvatar(userDto.getAvatar());
  userService.clearCache(UserUtils.getUserName());
  return userService.updateById(sysUser);
}"
62708,"/** 
 * 更新用户信息
 * @param userDto 用户信息
 * @return boolean
 */
@PutMapping public Boolean userUpdate(@RequestBody UserDto userDto){
  SysUser sysUser=new SysUser();
  BeanUtils.copyProperties(userDto,sysUser);
  sysUser.setUpdateTime(new Date());
  userService.updateById(sysUser);
  SysUserRole condition=new SysUserRole();
  condition.setUserId(userDto.getUserId());
  SysUserRole sysUserRole=sysUserRoleService.selectOne(new EntityWrapper<>(condition));
  sysUserRole.setRoleId(userDto.getRole());
  return sysUserRoleService.update(sysUserRole,new EntityWrapper<>(condition));
}","/** 
 * 更新用户信息
 * @param userDto 用户信息
 * @return boolean
 */
@PutMapping public Boolean userUpdate(@RequestBody UserDto userDto){
  SysUser sysUser=new SysUser();
  BeanUtils.copyProperties(userDto,sysUser);
  sysUser.setUpdateTime(new Date());
  userService.updateById(sysUser);
  SysUserRole condition=new SysUserRole();
  condition.setUserId(userDto.getUserId());
  SysUserRole sysUserRole=sysUserRoleService.selectOne(new EntityWrapper<>(condition));
  sysUserRole.setRoleId(userDto.getRole());
  userService.clearCache(UserUtils.getUserName());
  return sysUserRoleService.update(sysUserRole,new EntityWrapper<>(condition));
}"
62709,"/** 
 * 删除用户信息
 * @param id ID
 * @return boolean
 */
@DeleteMapping(""String_Node_Str"") public Boolean userDel(@PathVariable Integer id){
  boolean delUserRole=sysUserRoleService.deleteByUserId(id);
  if (delUserRole) {
    boolean delUserInfo=userService.deleteById(id);
    if (delUserInfo) {
      return Boolean.TRUE;
    }
 else {
      return Boolean.FALSE;
    }
  }
 else {
    return Boolean.FALSE;
  }
}","/** 
 * 删除用户信息
 * @param id ID
 * @return boolean
 */
@DeleteMapping(""String_Node_Str"") public Boolean userDel(@PathVariable Integer id){
  boolean delUserRole=sysUserRoleService.deleteByUserId(id);
  if (delUserRole) {
    boolean delUserInfo=userService.deleteById(id);
    if (delUserInfo) {
      userService.clearCache(UserUtils.getUserName());
      return Boolean.TRUE;
    }
 else {
      return Boolean.FALSE;
    }
  }
 else {
    return Boolean.FALSE;
  }
}"
62710,"@Override public void send(){
  rabbitTemplate.convertAndSend(CommonConstant.LOG_QUEUE,""String_Node_Str"");
}","@Override public void send(){
  try {
    rabbitTemplate.convertAndSend(CommonConstant.LOG_QUEUE,""String_Node_Str"");
  }
 catch (  Exception connectException) {
    logger.error(""String_Node_Str"",connectException);
  }
}"
62711,"public static Set<String> getArkContainerJarMarkers(){
  return Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(AKR_CONTAINER_JAR)));
}","public static Set<String> getArkContainerJarMarkers(){
  return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AKR_CONTAINER_JAR)));
}"
62712,"@Override public List<Archive> getNestedArchives(EntryFilter filter) throws IOException {
  List<Archive> nestedArchives=new ArrayList();
  for (  Entry entry : this) {
    if (filter.matches(entry)) {
      nestedArchives.add(getNestedArchive(entry));
    }
  }
  return Collections.unmodifiableList(nestedArchives);
}","@Override public List<Archive> getNestedArchives(EntryFilter filter) throws IOException {
  List<Archive> nestedArchives=new ArrayList<>();
  for (  Entry entry : this) {
    if (filter.matches(entry)) {
      nestedArchives.add(getNestedArchive(entry));
    }
  }
  return Collections.unmodifiableList(nestedArchives);
}"
62713,"@Override public List<Archive> getNestedArchives(EntryFilter filter) throws IOException {
  List<Archive> nestedArchives=new ArrayList();
  for (  Entry entry : this) {
    if (filter.matches(entry)) {
      nestedArchives.add(getNestedArchive(entry));
    }
  }
  return Collections.unmodifiableList(nestedArchives);
}","@Override public List<Archive> getNestedArchives(EntryFilter filter) throws IOException {
  List<Archive> nestedArchives=new ArrayList<>();
  for (  Entry entry : this) {
    if (filter.matches(entry)) {
      nestedArchives.add(getNestedArchive(entry));
    }
  }
  return Collections.unmodifiableList(nestedArchives);
}"
62714,"@Override public List<Biz> getBizsInOrder(){
  List<Biz> bizList=new ArrayList<>();
  bizList.addAll(bizs.values());
  Collections.sort(bizList,new Comparator<Biz>(){
    @Override public int compare(    Biz o1,    Biz o2){
      return Integer.compare(o1.getPriority(),o2.getPriority());
    }
  }
);
  return bizList;
}","@Override public List<Biz> getBizsInOrder(){
  List<Biz> bizList=new ArrayList<>(bizs.values());
  Collections.sort(bizList,new Comparator<Biz>(){
    @Override public int compare(    Biz o1,    Biz o2){
      return Integer.compare(o1.getPriority(),o2.getPriority());
    }
  }
);
  return bizList;
}"
62715,"/** 
 * Find export resources
 * @param resourceName
 * @return
 */
protected Enumeration<URL> getExportResources(String resourceName) throws IOException {
  if (shouldFindExportedResource(resourceName)) {
    List<ClassLoader> exportResourceClassloadersInOrder=classloaderService.findExportResourceClassloadersInOrder(resourceName);
    if (exportResourceClassloadersInOrder != null) {
      List<Enumeration<URL>> enumerationList=new ArrayList<>();
      for (      ClassLoader exportResourceClassloader : exportResourceClassloadersInOrder) {
        enumerationList.add(((AbstractClasspathClassloader)exportResourceClassloader).getLocalResources(resourceName));
      }
      return new CompoundEnumeration<>(enumerationList.toArray((Enumeration<URL>[])new Enumeration<?>[0]));
    }
  }
  return Collections.emptyEnumeration();
}","/** 
 * Find export resources
 * @param resourceName
 * @return
 */
@SuppressWarnings(""String_Node_Str"") protected Enumeration<URL> getExportResources(String resourceName) throws IOException {
  if (shouldFindExportedResource(resourceName)) {
    List<ClassLoader> exportResourceClassloadersInOrder=classloaderService.findExportResourceClassloadersInOrder(resourceName);
    if (exportResourceClassloadersInOrder != null) {
      List<Enumeration<URL>> enumerationList=new ArrayList<>();
      for (      ClassLoader exportResourceClassloader : exportResourceClassloadersInOrder) {
        enumerationList.add(((AbstractClasspathClassloader)exportResourceClassloader).getLocalResources(resourceName));
      }
      return new CompoundEnumeration<>(enumerationList.toArray((Enumeration<URL>[])new Enumeration<?>[0]));
    }
  }
  return Collections.emptyEnumeration();
}"
62716,"@Override public <T>List<ServiceReference<T>> referenceServices(Class<T> ifClass,ServiceFilter serviceFilter){
  String serviceName=ifClass.getName();
  if (services.containsKey(serviceName)) {
    List<ServiceReference<T>> serviceReferences=new ArrayList<>();
    for (    ServiceReference<?> reference : services.get(serviceName)) {
      if (serviceFilter == null || serviceFilter.match(reference.getServiceMetadata().getServiceProvider())) {
        serviceReferences.add((ServiceReference<T>)reference);
      }
    }
    return serviceReferences;
  }
  return Collections.emptyList();
}","@SuppressWarnings(""String_Node_Str"") @Override public <T>List<ServiceReference<T>> referenceServices(Class<T> ifClass,ServiceFilter serviceFilter){
  String serviceName=ifClass.getName();
  if (services.containsKey(serviceName)) {
    List<ServiceReference<T>> serviceReferences=new ArrayList<>();
    for (    ServiceReference<?> reference : services.get(serviceName)) {
      if (serviceFilter == null || serviceFilter.match(reference.getServiceMetadata().getServiceProvider())) {
        serviceReferences.add((ServiceReference<T>)reference);
      }
    }
    return serviceReferences;
  }
  return Collections.emptyList();
}"
62717,"@Override public <T>ServiceReference<T> publishService(Class<T> ifClass,T implObject,ServiceProvider serviceProvider){
  ServiceMetadata serviceMetadata=new ServiceMetadataImpl(ifClass.getName(),ifClass,serviceProvider);
  if (!services.containsKey(serviceMetadata.getServiceName())) {
    services.putIfAbsent(serviceMetadata.getServiceName(),new CopyOnWriteArrayList<ServiceReference<?>>());
  }
  List<ServiceReference<?>> serviceReferences=services.get(serviceMetadata.getServiceName());
  for (  ServiceReference<?> serviceReference : serviceReferences) {
    if (serviceMetadata.equals(serviceReference.getServiceMetadata())) {
      LOGGER.warn(String.format(""String_Node_Str"",serviceMetadata.getServiceName(),serviceProvider));
      return (ServiceReference<T>)serviceReference;
    }
  }
  ServiceReference<T> serviceReference=new ServiceReferenceImpl<>(serviceMetadata,implObject);
  LOGGER.info(String.format(""String_Node_Str"",serviceMetadata.getServiceName(),serviceProvider));
  serviceReferences.add(serviceReference);
  return serviceReference;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T>ServiceReference<T> publishService(Class<T> ifClass,T implObject,ServiceProvider serviceProvider){
  ServiceMetadata serviceMetadata=new ServiceMetadataImpl(ifClass.getName(),ifClass,serviceProvider);
  if (!services.containsKey(serviceMetadata.getServiceName())) {
    services.putIfAbsent(serviceMetadata.getServiceName(),new CopyOnWriteArrayList<ServiceReference<?>>());
  }
  List<ServiceReference<?>> serviceReferences=services.get(serviceMetadata.getServiceName());
  for (  ServiceReference<?> serviceReference : serviceReferences) {
    if (serviceMetadata.equals(serviceReference.getServiceMetadata())) {
      LOGGER.warn(String.format(""String_Node_Str"",serviceMetadata.getServiceName(),serviceProvider));
      return (ServiceReference<T>)serviceReference;
    }
  }
  ServiceReference<T> serviceReference=new ServiceReferenceImpl<>(serviceMetadata,implObject);
  LOGGER.info(String.format(""String_Node_Str"",serviceMetadata.getServiceName(),serviceProvider));
  serviceReferences.add(serviceReference);
  return serviceReference;
}"
62718,"/** 
 * <p>Validate that the argument condition is   {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 */
public static void isTrue(final boolean expression,final String message,final Object... values){
  if (expression == false) {
    throw new IllegalArgumentException(String.format(message,values));
  }
}","/** 
 * <p>Validate that the argument condition is   {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 */
public static void isTrue(final boolean expression,final String message,final Object... values){
  if (!expression) {
    throw new IllegalArgumentException(String.format(message,values));
  }
}"
62719,"/** 
 * <p>Validate that the argument condition is   {@code false}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 */
public static void isFalse(final boolean expression,final String message,final Object... values){
  if (expression == true) {
    throw new IllegalArgumentException(String.format(message,values));
  }
}","/** 
 * <p>Validate that the argument condition is   {@code false}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 */
public static void isFalse(final boolean expression,final String message,final Object... values){
  if (expression) {
    throw new IllegalArgumentException(String.format(message,values));
  }
}"
62720,"private Set<Artifact> getAdditionalArtifact() throws MojoExecutionException {
  Artifact arkArtifact=artifactFactory.createArtifact(ArkConstants.getGroupId(),ArkConstants.getArtifactId(),arkVersion,ArkConstants.getScope(),ArkConstants.getType());
  try {
    artifactResolver.resolve(arkArtifact,project.getRemoteArtifactRepositories(),mavenSession.getLocalRepository());
    Set<Artifact> artifacts=filterExcludeArtifacts(project.getArtifacts());
    artifacts.add(arkArtifact);
    return artifacts;
  }
 catch (  Exception ex) {
    throw new MojoExecutionException(ex.getMessage(),ex);
  }
}","@SuppressWarnings(""String_Node_Str"") private Set<Artifact> getAdditionalArtifact() throws MojoExecutionException {
  Artifact arkArtifact=artifactFactory.createArtifact(ArkConstants.getGroupId(),ArkConstants.getArtifactId(),arkVersion,ArkConstants.getScope(),ArkConstants.getType());
  try {
    artifactResolver.resolve(arkArtifact,project.getRemoteArtifactRepositories(),mavenSession.getLocalRepository());
    Set<Artifact> artifacts=filterExcludeArtifacts(project.getArtifacts());
    artifacts.add(arkArtifact);
    return artifacts;
  }
 catch (  Exception ex) {
    throw new MojoExecutionException(ex.getMessage(),ex);
  }
}"
62721,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  if (this.project.getPackaging().equals(""String_Node_Str"")) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (this.project.getPackaging().equals(""String_Node_Str"")) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (StringUtils.isSameStr(this.arkClassifier,this.bizClassifier)) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (this.skip) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  PluginDescriptor pluginDescriptor=(PluginDescriptor)getPluginContext().get(""String_Node_Str"");
  arkVersion=pluginDescriptor.getVersion();
  repackage();
}","@Override public void execute() throws MojoExecutionException {
  if (this.project.getPackaging().equals(""String_Node_Str"")) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (this.project.getPackaging().equals(""String_Node_Str"")) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (StringUtils.isSameStr(this.arkClassifier,this.bizClassifier)) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  if (this.skip) {
    getLog().debug(""String_Node_Str"");
    return;
  }
  PluginDescriptor pluginDescriptor=(PluginDescriptor)getPluginContext().get(""String_Node_Str"");
  arkVersion=pluginDescriptor.getVersion();
  repackage();
}"
62722,"protected boolean isTestOnArkContainer(Description description){
  RunWith runWith=description.getTestClass().getAnnotation(RunWith.class);
  if (runWith == null) {
    return false;
  }
  Class<?> runnerClass=runWith.value();
  String className=runnerClass.getName();
  if (className.equals(ARK_JUNIT4_RUNNER) || className.equals(ARK_BOOT_RUNNER)) {
    return true;
  }
  return false;
}","protected boolean isTestOnArkContainer(Description description){
  RunWith runWith=description.getTestClass().getAnnotation(RunWith.class);
  if (runWith == null) {
    return false;
  }
  Class<?> runnerClass=runWith.value();
  String className=runnerClass.getName();
  return ARK_JUNIT4_RUNNER.equals(className) || ARK_BOOT_RUNNER.equals(className);
}"
62723,"private static final URL[] getURLClassPath(){
  ClassLoader classLoader=ClassLoader.getSystemClassLoader();
  return ((URLClassLoader)classLoader).getURLs();
}","private static URL[] getURLClassPath(){
  ClassLoader classLoader=ClassLoader.getSystemClassLoader();
  return ((URLClassLoader)classLoader).getURLs();
}"
62724,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62725,"private int find(int p){
  if (p < 0 && p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}","private int find(int p){
  if (p < 0 || p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}"
62726,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62727,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62728,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62729,"private int find(int p){
  if (p < 0 && p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}","private int find(int p){
  if (p < 0 || p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}"
62730,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62731,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62732,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62733,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}"
62734,"private int find(int p){
  if (p < 0 && p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}","private int find(int p){
  if (p < 0 || p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}"
62735,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62736,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62737,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62738,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}"
62739,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  if (p != parent[p])   parent[p]=find(parent[p]);
  return parent[p];
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  if (p != parent[p])   parent[p]=find(parent[p]);
  return parent[p];
}"
62740,"private int find(int p){
  if (p < 0 && p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}","private int find(int p){
  if (p < 0 || p >= id.length)   throw new IllegalArgumentException(""String_Node_Str"");
  return id[p];
}"
62741,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62742,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62743,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p])   p=parent[p];
  return p;
}"
62744,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  while (p != parent[p]) {
    parent[p]=parent[parent[p]];
    p=parent[p];
  }
  return p;
}"
62745,"private int find(int p){
  if (p < 0 && p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  if (p != parent[p])   parent[p]=find(parent[p]);
  return parent[p];
}","private int find(int p){
  if (p < 0 || p >= parent.length)   throw new IllegalArgumentException(""String_Node_Str"");
  if (p != parent[p])   parent[p]=find(parent[p]);
  return parent[p];
}"
62746,"public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  ArrayList<String> words=new ArrayList<>();
  if (FileOperation.readFile(""String_Node_Str"",words)) {
    System.out.println(""String_Node_Str"" + words.size());
    long startTime=System.nanoTime();
    BST<String,Integer> bst=new BST<>();
    for (    String word : words) {
      if (bst.contains(word))       bst.set(word,bst.get(word) + 1);
 else       bst.add(word,1);
    }
    for (    String word : words)     bst.contains(word);
    long endTime=System.nanoTime();
    double time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
    startTime=System.nanoTime();
    AVLTree<String,Integer> avl=new AVLTree<>();
    for (    String word : words) {
      if (avl.contains(word))       avl.set(word,avl.get(word) + 1);
 else       avl.add(word,1);
    }
    for (    String word : words)     avl.contains(word);
    endTime=System.nanoTime();
    time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
    startTime=System.nanoTime();
    RBTree<String,Integer> rbt=new RBTree<>();
    for (    String word : words) {
      if (rbt.contains(word))       rbt.set(word,avl.get(word) + 1);
 else       rbt.add(word,1);
    }
    for (    String word : words)     rbt.contains(word);
    endTime=System.nanoTime();
    time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  }
  System.out.println();
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  ArrayList<String> words=new ArrayList<>();
  if (FileOperation.readFile(""String_Node_Str"",words)) {
    System.out.println(""String_Node_Str"" + words.size());
    long startTime=System.nanoTime();
    BST<String,Integer> bst=new BST<>();
    for (    String word : words) {
      if (bst.contains(word))       bst.set(word,bst.get(word) + 1);
 else       bst.add(word,1);
    }
    for (    String word : words)     bst.contains(word);
    long endTime=System.nanoTime();
    double time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
    startTime=System.nanoTime();
    AVLTree<String,Integer> avl=new AVLTree<>();
    for (    String word : words) {
      if (avl.contains(word))       avl.set(word,avl.get(word) + 1);
 else       avl.add(word,1);
    }
    for (    String word : words)     avl.contains(word);
    endTime=System.nanoTime();
    time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
    startTime=System.nanoTime();
    RBTree<String,Integer> rbt=new RBTree<>();
    for (    String word : words) {
      if (rbt.contains(word))       rbt.set(word,rbt.get(word) + 1);
 else       rbt.add(word,1);
    }
    for (    String word : words)     rbt.contains(word);
    endTime=System.nanoTime();
    time=(endTime - startTime) / 1000000000.0;
    System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
  }
  System.out.println();
}"
62747,"private Pair<Node,E> remove(Node node,int index){
  if (index == 0)   return new Pair<>(node.next,node.e);
  Pair<Node,E> res=remove(node.next,index - 1);
  node.next=res.getKey();
  return res;
}","private Pair<Node,E> remove(Node node,int index){
  if (index == 0)   return new Pair<>(node.next,node.e);
  Pair<Node,E> res=remove(node.next,index - 1);
  node.next=res.getKey();
  return new Pair<>(node,res.getValue());
}"
62748,"public void levelOrder(){
  Queue<Node> q=new LinkedList<>();
  q.add(root);
  while (!q.isEmpty()) {
    Node cur=q.remove();
    System.out.println(cur.e);
    if (cur.left != null)     q.add(cur.left);
    if (cur.right != null)     q.add(cur.right);
  }
}","public void levelOrder(){
  if (root == null)   return;
  Queue<Node> q=new LinkedList<>();
  q.add(root);
  while (!q.isEmpty()) {
    Node cur=q.remove();
    System.out.println(cur.e);
    if (cur.left != null)     q.add(cur.left);
    if (cur.right != null)     q.add(cur.right);
  }
}"
62749,"public void preOrderNR(){
  Stack<Node> stack=new Stack<>();
  stack.push(root);
  while (!stack.isEmpty()) {
    Node cur=stack.pop();
    System.out.println(cur.e);
    if (cur.right != null)     stack.push(cur.right);
    if (cur.left != null)     stack.push(cur.left);
  }
}","public void preOrderNR(){
  if (root == null)   return;
  Stack<Node> stack=new Stack<>();
  stack.push(root);
  while (!stack.isEmpty()) {
    Node cur=stack.pop();
    System.out.println(cur.e);
    if (cur.right != null)     stack.push(cur.right);
    if (cur.left != null)     stack.push(cur.left);
  }
}"
62750,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62751,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62752,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62753,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62754,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62755,"public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
  }
}","public void removeElement(E e){
  Node prev=dummyHead;
  while (prev.next != null) {
    if (prev.next.e.equals(e))     break;
    prev=prev.next;
  }
  if (prev.next != null) {
    Node delNode=prev.next;
    prev.next=delNode.next;
    delNode.next=null;
    size--;
  }
}"
62756,"public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4)   resize(data.length / 2);
  return ret;
}","public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4 && data.length / 2 != 0)   resize(data.length / 2);
  return ret;
}"
62757,"public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4)   resize(data.length / 2);
  return ret;
}","public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4 && data.length / 2 != 0)   resize(data.length / 2);
  return ret;
}"
62758,"public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4)   resize(data.length / 2);
  return ret;
}","public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4 && data.length / 2 != 0)   resize(data.length / 2);
  return ret;
}"
62759,"public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4)   resize(data.length / 2);
  return ret;
}","public E remove(int index){
  if (index < 0 || index >= size)   throw new IllegalArgumentException(""String_Node_Str"");
  E ret=data[index];
  for (int i=index + 1; i < size; i++)   data[i - 1]=data[i];
  size--;
  data[size]=null;
  if (size == data.length / 4 && data.length / 2 != 0)   resize(data.length / 2);
  return ret;
}"
62760,"private void init(){
  scrollerTask=() -> {
    int newPosition=getScrollX();
    if (initialPosition - newPosition == 0) {
      if (mOnScrollChangedListener != null) {
        mOnScrollChangedListener.onScrollStopped(getScrollX(),getScrollY());
      }
    }
 else {
      initialPosition=getScrollX();
      ObservableHorizontalScrollView.this.postDelayed(scrollerTask,newCheck);
    }
  }
;
}","private void init(){
  scrollerTask=new Runnable(){
    @Override public void run(){
      int newPosition=getScrollX();
      if (initialPosition - newPosition == 0) {
        if (mOnScrollChangedListener != null) {
          mOnScrollChangedListener.onScrollStopped(getScrollX(),getScrollY());
        }
      }
 else {
        initialPosition=getScrollX();
        ObservableHorizontalScrollView.this.postDelayed(scrollerTask,newCheck);
      }
    }
  }
;
}"
62761,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (changed) {
    final int width=getWidth();
    final ViewGroup.LayoutParams leftParams=mLeftSpacer.getLayoutParams();
    leftParams.width=width / 2;
    mLeftSpacer.setLayoutParams(leftParams);
    final ViewGroup.LayoutParams rulerViewParams=lineRulerView.getLayoutParams();
    rulerViewParams.width=(int)(width * viewMultipleSize);
    lineRulerView.setLayoutParams(rulerViewParams);
    lineRulerView.invalidate();
    final ViewGroup.LayoutParams rightParams=mRightSpacer.getLayoutParams();
    rightParams.width=width / 2;
    mRightSpacer.setLayoutParams(rightParams);
    calculateRulerStrokePath();
    invalidate();
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (changed) {
    final int width=getWidth();
    final ViewGroup.LayoutParams leftParams=mLeftSpacer.getLayoutParams();
    leftParams.width=width / 2;
    mLeftSpacer.setLayoutParams(leftParams);
    final ViewGroup.LayoutParams rulerViewParams=mRulerView.getLayoutParams();
    rulerViewParams.width=(int)(width * viewMultipleSize);
    mRulerView.setLayoutParams(rulerViewParams);
    mRulerView.invalidate();
    final ViewGroup.LayoutParams rightParams=mRightSpacer.getLayoutParams();
    rightParams.width=width / 2;
    mRightSpacer.setLayoutParams(rightParams);
    calculateRulerStrokePath();
    invalidate();
  }
}"
62762,"private void prepareRuler(final Context context){
  final LinearLayout container=new LinearLayout(context);
  mHorizontalScrollView.addView(container);
  mLeftSpacer=new View(context);
  mRightSpacer=new View(context);
  lineRulerView=new LineRulerView(context);
  container.addView(lineRulerView);
  container.addView(mLeftSpacer,0);
  container.addView(mRightSpacer);
}","private void prepareRuler(final Context context){
  final LinearLayout container=new LinearLayout(context);
  mHorizontalScrollView.addView(container);
  mLeftSpacer=new View(context);
  mRightSpacer=new View(context);
  mRulerView=new RulerView(context);
  container.addView(mRulerView);
  container.addView(mLeftSpacer,0);
  container.addView(mRightSpacer);
}"
62763,"public void setValueTypeMultiple(int valueTypeMultiple){
  this.valueMultiple=valueTypeMultiple;
  lineRulerView.setMultipleTypeValue(valueTypeMultiple);
}","public void setValueTypeMultiple(int valueTypeMultiple){
  this.valueMultiple=valueTypeMultiple;
  mRulerView.setMultipleTypeValue(valueTypeMultiple);
}"
62764,"@SuppressLint(""String_Node_Str"") private void addScrollbar(final Context context){
  mHorizontalScrollView=new ObservableHorizontalScrollView(context);
  mHorizontalScrollView.setHorizontalScrollBarEnabled(false);
  addView(mHorizontalScrollView);
  mHorizontalScrollView.setOnTouchListener((view,motionEvent) -> {
    if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
      mHorizontalScrollView.startScrollerTask();
    }
    return false;
  }
);
}","@SuppressLint(""String_Node_Str"") private void addScrollbar(final Context context){
  mHorizontalScrollView=new ObservableHorizontalScrollView(context);
  mHorizontalScrollView.setHorizontalScrollBarEnabled(false);
  addView(mHorizontalScrollView);
  mHorizontalScrollView.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        mHorizontalScrollView.startScrollerTask();
      }
      return false;
    }
  }
);
}"
62765,"/** 
 * Scroll the ruler to the given value.
 */
public synchronized void scrollToValue(float value){
  mHorizontalScrollView.postDelayed(() -> {
    float oneValue=mHorizontalScrollView.getWidth() * viewMultipleSize / (maxValue - minValue);
    float valueWidth=oneValue * (value - minValue);
    mHorizontalScrollView.smoothScrollBy(Math.round(valueWidth),0);
  }
,400);
}","/** 
 * Scroll the ruler to the given value.
 */
public synchronized void scrollToValue(final float value){
  mHorizontalScrollView.postDelayed(new Runnable(){
    @Override public void run(){
      float oneValue=mHorizontalScrollView.getWidth() * viewMultipleSize / (maxValue - minValue);
      float valueWidth=oneValue * (value - minValue);
      mHorizontalScrollView.smoothScrollBy(Math.round(valueWidth),0);
    }
  }
,400);
}"
62766,"public void setMinMaxValue(float minValue,float maxValue,@SuppressWarnings(""String_Node_Str"") int valueMultiple){
  this.minValue=minValue;
  this.maxValue=maxValue;
  this.valueMultiple=valueMultiple;
  lineRulerView.setMaxValue(this.maxValue);
  lineRulerView.setMinValue(this.minValue);
  lineRulerView.setValueMultiple(this.valueMultiple);
}","public void setMinMaxValue(float minValue,float maxValue,@SuppressWarnings(""String_Node_Str"") int valueMultiple){
  this.minValue=minValue;
  this.maxValue=maxValue;
  this.valueMultiple=valueMultiple;
  mRulerView.setMaxValue(this.maxValue);
  mRulerView.setMinValue(this.minValue);
  mRulerView.setValueMultiple(this.valueMultiple);
}"
62767,"@Override @SuppressWarnings(""String_Node_Str"") public void onFragmentStarted(FragmentManager fm,Fragment fragment){
  if (multiInstance) {
    if (isSameInstance(fragment)) {
      presenter.onViewUp((V)fragment);
    }
  }
 else   if (cls.isInstance(fragment)) {
    presenter.onViewUp((V)fragment);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void onFragmentStarted(FragmentManager fm,Fragment fragment){
  if (onViewUpCalled)   return;
  if (cls.isInstance(fragment) && isSameInstance(fragment)) {
    presenter.onViewUp((V)fragment);
    onViewDownCalled=false;
    onViewUpCalled=true;
  }
}"
62768,"@Override public void onFragmentStopped(FragmentManager fm,Fragment fragment){
  if (multiInstance) {
    if (isSameInstance(fragment)) {
      presenter.onViewDown();
    }
  }
 else   if (cls.isInstance(fragment)) {
    presenter.onViewDown();
  }
}","@Override public void onFragmentStopped(FragmentManager fm,Fragment fragment){
  if (onViewDownCalled)   return;
  if (cls.isInstance(fragment) && isSameInstance(fragment)) {
    presenter.onViewDown();
    onViewDownCalled=true;
    onViewUpCalled=false;
  }
}"
62769,"private void destroy(@NonNull Fragment fragment){
  FragmentActivity activity=fragment.getActivity();
  if (activity == null || !activity.isChangingConfigurations()) {
    FragmentManager fragmentManager=fragment.getFragmentManager();
    if (fragmentManager != null) {
      fragmentManager.unregisterFragmentLifecycleCallbacks(this);
    }
    presenter.onDestroy();
    if (listener != null) {
      listener.onDestroy(id);
    }
    presenter=null;
  }
}","private void destroy(Fragment fragment){
  if (!fragment.getActivity().isChangingConfigurations()) {
    fragment.getFragmentManager().unregisterFragmentLifecycleCallbacks(this);
    presenter.onDestroy();
    if (listener != null) {
      listener.onDestroy(id);
    }
    presenter=null;
    onDestroyCalled=true;
  }
}"
62770,"@Override public void onFragmentDestroyed(FragmentManager fm,Fragment fragment){
  if (multiInstance) {
    if (isSameInstance(fragment)) {
      destroy(fragment);
    }
  }
 else   if (cls.isInstance(fragment)) {
    destroy(fragment);
  }
}","@Override public void onFragmentDestroyed(FragmentManager fm,Fragment fragment){
  if (onDestroyCalled)   return;
  if (cls.isInstance(fragment) && isSameInstance(fragment)) {
    destroy(fragment);
  }
}"
62771,"private boolean isSameInstance(@NonNull Object view){
  final int id=getId(view);
  return id != -1 && id == this.id;
}","private boolean isSameInstance(Object view){
  final int id=getId(view);
  return id == this.id;
}"
62772,"public SlickDelegateFragment(P presenter,Class cls,int id){
  if (presenter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.presenter=presenter;
  this.cls=cls;
  this.id=id;
  if (id != -1)   multiInstance=true;
}","public SlickDelegateFragment(P presenter,Class cls,int id){
  if (presenter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.presenter=presenter;
  this.cls=cls;
  this.id=id;
}"
62773,"@Override protected void onDestroy(){
  super.onDestroy();
  customView1.onDestroy();
  ViewPresenter_Slick.onDestroy(view2UniqueId,this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  customView1.onBind(customView2.getUniqueId());
  ViewPresenter_Slick.onDestroy(view2UniqueId,this);
}"
62774,"@Override public String getUniqueId(){
  return id=(id != null ? id : UUID.randomUUID().toString());
}","@NonNull @Override public String getUniqueId(){
  return id=(id != null ? id : UUID.randomUUID().toString());
}"
62775,"@Override protected void onDestroy(){
  super.onDestroy();
  customView.onDestroy();
}","@Override protected void onDestroy(){
  super.onDestroy();
  customView.onBind(""String_Node_Str"");
}"
62776,"@Override public String getUniqueId(){
  return id=id != null ? id : UUID.randomUUID().toString();
}","@NonNull @Override public String getUniqueId(){
  return id=id != null ? id : UUID.randomUUID().toString();
}"
62777,"@Override public String getUniqueId(){
  return id=id != null ? id : UUID.randomUUID().toString();
}","@NonNull @Override public String getUniqueId(){
  return id=id != null ? id : UUID.randomUUID().toString();
}"
62778,String getUniqueId();,@NonNull String getUniqueId();
62779,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.bind(this);
  ExamplePresenter_Slick.onAttach(this);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.onAttach(this);
}"
62780,"public static <T extends DaggerCustomView & ExampleView & OnDestroyListener>void bind(T daggerCustomView){
}","public static <T extends DaggerCustomView & ExampleView & SlickLifecycleListener>void bind(T daggerCustomView){
}"
62781,"public static <T extends View & ExampleView & OnDestroyListener>void onAttach(T daggerCustomView){
  hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)).onAttach(daggerCustomView);
}","public static <T extends View & ExampleView & SlickLifecycleListener>void onAttach(T daggerCustomView){
  hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)).onAttach(daggerCustomView);
}"
62782,"public static <T extends View & ExampleView & OnDestroyListener>void onDetach(T daggerCustomView){
  if (hostInstance == null || hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)) == null)   return;
  hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)).onDetach(daggerCustomView);
}","public static <T extends View & ExampleView & SlickLifecycleListener>void onDetach(T daggerCustomView){
  if (hostInstance == null || hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)) == null)   return;
  hostInstance.delegates.get(SlickDelegateView.getId(daggerCustomView)).onDetach(daggerCustomView);
}"
62783,"public static <T extends MultiView2 & ExampleView & OnDestroyListener>void bind(T multiView2){
}","public static <T extends MultiView2 & ExampleView & SlickLifecycleListener>void bind(T multiView2){
}"
62784,"public static <T extends View & ExampleView & OnDestroyListener>void onAttach(T multiView1){
  hostInstance.delegates.get(SlickDelegateView.getId(multiView1)).onAttach(multiView1);
}","public static <T extends View & ExampleView & SlickLifecycleListener>void onAttach(T multiView1){
  hostInstance.delegates.get(SlickDelegateView.getId(multiView1)).onAttach(multiView1);
}"
62785,"public static <T extends View & ExampleView & OnDestroyListener>void onDetach(T multiView1){
  if (hostInstance == null || hostInstance.delegates.get(SlickDelegateView.getId(multiView1)) == null)   return;
  hostInstance.delegates.get(SlickDelegateView.getId(multiView1)).onDetach(multiView1);
}","public static <T extends View & ExampleView & SlickLifecycleListener>void onDetach(T multiView1){
  if (hostInstance == null || hostInstance.delegates.get(SlickDelegateView.getId(multiView1)) == null)   return;
  hostInstance.delegates.get(SlickDelegateView.getId(multiView1)).onDetach(multiView1);
}"
62786,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.bind(this);
  ExamplePresenter_Slick.onAttach(this);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.onAttach(this);
}"
62787,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.bind(this);
  ExamplePresenter_Slick.onAttach(this);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  ExamplePresenter_Slick.onAttach(this);
}"
62788,"private void destroy(V view){
  final Activity activity=(Activity)((View)view).getContext();
  if (!activity.isChangingConfigurations()) {
    if (!hasOnViewDownCalled)     onDetach(view);
    presenter.onDestroy();
    if (listener != null) {
      listener.onDestroy(id);
    }
    presenter=null;
  }
}","private void destroy(V view){
  final Activity activity=getActivity((View)view);
  if (!activity.isChangingConfigurations()) {
    if (!hasOnViewDownCalled)     onDetach(view);
    presenter.onDestroy();
    if (listener != null) {
      listener.onDestroy(id);
    }
    presenter=null;
  }
}"
62789,"@Override public void onDestroy(){
  DaggerCustomView_Slick.onDestroy(this);
}","@Override public void onDestroy(){
  System.out.println(""String_Node_Str"");
  DaggerCustomView_Slick.onDestroy(this);
}"
62790,"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  DaggerCustomView_Slick.onDetach(this);
}","@Override protected void onDetachedFromWindow(){
  System.out.println(""String_Node_Str"");
  super.onDetachedFromWindow();
  DaggerCustomView_Slick.onDetach(this);
}"
62791,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  App.getDaggerComponent(getContext()).inject(this);
  DaggerCustomView_Slick.bind(this);
  DaggerCustomView_Slick.onAttach(this);
  final TextView textView=(TextView)findViewById(R.id.textView_custom_view);
  textView.setText(presenter.getData());
}","@Override protected void onAttachedToWindow(){
  System.out.println(""String_Node_Str"");
  super.onAttachedToWindow();
  App.getDaggerComponent(getContext()).inject(this);
  DaggerCustomView_Slick.bind(this);
  DaggerCustomView_Slick.onAttach(this);
  final TextView textView=(TextView)findViewById(R.id.textView_custom_view);
  textView.setText(presenter.getData());
}"
62792,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_custom_view);
  customView=(DaggerCustomView)findViewById(R.id.custom_view_dagger);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_custom_view_dagger);
  customView=(DaggerCustomView)findViewById(R.id.custom_view_dagger);
}"
62793,"@Override protected void onDestroy(){
  super.onDestroy();
  customView.onDestroy();
}","@Override protected void onDestroy(){
  System.out.println(""String_Node_Str"");
  super.onDestroy();
  customView.onDestroy();
}"
62794,"/** 
 * Builds the bind method
 * @param view             the class which implements the view interface
 * @param presenter        presenter class
 * @param presenterHost    presenter host class
 * @param fieldName        presenter name in view class
 * @param argNameView      activity parameter name
 * @param presenterArgName
 * @param viewGenericType  activity type
 * @param typeNameDelegate delegate type
 * @param argsCode         the presenter parameters in a comma separated string    @return bind method builder
 */
protected abstract MethodSpec.Builder bindMethod(ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode);","/** 
 * Builds the bind method
 * @param ap
 * @param view             the class which implements the view interface
 * @param presenter        presenter class
 * @param presenterHost    presenter host class
 * @param fieldName        presenter name in view class
 * @param argNameView      activity parameter name
 * @param presenterArgName
 * @param viewGenericType  activity type
 * @param typeNameDelegate delegate type
 * @param argsCode         the presenter parameters in a comma separated string    @return bind method builder
 */
protected abstract MethodSpec.Builder bindMethod(AnnotatedPresenter ap,ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode);"
62795,"@Override public TypeSpec generate(AnnotatedPresenter ap){
  final ClassName view=ap.getView();
  final ClassName viewInterface=ap.getViewInterface();
  final ClassName presenter=ap.getPresenter();
  final ClassName presenterHost=ap.getPresenterHost();
  final List<PresenterArgs> args=ap.getArgs();
  final String fieldName=ap.getFieldName();
  final String argNameView=deCapitalize(ap.getView().simpleName());
  final String presenterArgName=deCapitalize(ap.getPresenter().simpleName());
  final TypeVariableName activityGenericType=TypeVariableName.get(""String_Node_Str"",getClassNameViewType(ap.getViewType()));
  final ParameterizedTypeName typeNameDelegate=ParameterizedTypeName.get(getClassNameDelegate(),viewInterface,presenter);
  final FieldSpec delegate=getDelegateField(typeNameDelegate);
  final FieldSpec hostInstance=FieldSpec.builder(presenterHost,hostInstanceName).addModifiers(Modifier.PRIVATE,Modifier.STATIC).build();
  StringBuilder argsCode=new StringBuilder(args.size() * 10);
  if (args.size() > 0) {
    for (int i=0; i < args.size() - 1; i++) {
      argsCode.append(args.get(i).getName()).append(""String_Node_Str"");
    }
    argsCode.append(args.get(args.size() - 1).getName());
  }
  final MethodSpec.Builder methodBuilder=bindMethod(view,presenter,presenterHost,getClassNameDelegate(),fieldName,argNameView,presenterArgName,activityGenericType,typeNameDelegate,argsCode);
  final MethodSpec bind=addConstructorParameter(args,methodBuilder).build();
  final MethodSpec onDestroy=onDestroyMethod();
  return TypeSpec.classBuilder(presenterHost).addModifiers(Modifier.PUBLIC).addSuperinterface(ClASS_NAME_ON_DESTROY_LISTENER).addField(delegate).addField(hostInstance).addMethod(bind).addMethods(addMethods(ap)).addMethod(onDestroy).build();
}","@Override public TypeSpec generate(AnnotatedPresenter ap){
  final ClassName view=ap.getView();
  final ClassName viewInterface=ap.getViewInterface();
  final ClassName presenter=ap.getPresenter();
  final ClassName presenterHost=ap.getPresenterHost();
  final List<PresenterArgs> args=ap.getArgs();
  final String fieldName=ap.getFieldName();
  final String argNameView=deCapitalize(ap.getView().simpleName());
  final String presenterArgName=deCapitalize(ap.getPresenter().simpleName());
  final TypeVariableName activityGenericType=TypeVariableName.get(""String_Node_Str"",getClassNameViewType(ap.getViewType()));
  final ParameterizedTypeName typeNameDelegate=ParameterizedTypeName.get(getClassNameDelegate(),viewInterface,presenter);
  final FieldSpec delegate=getDelegateField(typeNameDelegate);
  final FieldSpec hostInstance=FieldSpec.builder(presenterHost,hostInstanceName).addModifiers(Modifier.PRIVATE,Modifier.STATIC).build();
  StringBuilder argsCode=new StringBuilder(args.size() * 10);
  if (args.size() > 0) {
    for (int i=0; i < args.size() - 1; i++) {
      argsCode.append(args.get(i).getName()).append(""String_Node_Str"");
    }
    argsCode.append(args.get(args.size() - 1).getName());
  }
  final MethodSpec.Builder methodBuilder=bindMethod(ap,view,presenter,presenterHost,getClassNameDelegate(),fieldName,argNameView,presenterArgName,activityGenericType,typeNameDelegate,argsCode);
  final MethodSpec bind=addConstructorParameter(args,methodBuilder).build();
  final MethodSpec onDestroy=onDestroyMethod();
  return TypeSpec.classBuilder(presenterHost).addModifiers(Modifier.PUBLIC).addSuperinterface(ClASS_NAME_ON_DESTROY_LISTENER).addField(delegate).addField(hostInstance).addMethod(bind).addMethods(addMethods(ap)).addMethod(onDestroy).build();
}"
62796,"@Override protected MethodSpec.Builder bindMethod(ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW)).addParameter(viewGenericType,argNameView).addStatement(""String_Node_Str"",argNameView).addStatement(""String_Node_Str"",hostInstanceName,hostInstanceName,presenterHost).addStatement(""String_Node_Str"",typeNameDelegate,varNameDelegate,hostInstanceName,fieldNameDelegates).beginControlFlow(""String_Node_Str"",varNameDelegate).addStatement(""String_Node_Str"",presenter,presenterName,presenter,argsCode.toString()).addStatement(""String_Node_Str"",varNameDelegate,classNameDelegate,presenterName,argNameView).addStatement(""String_Node_Str"",varNameDelegate,hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,fieldNameDelegates,varNameDelegate).addStatement(""String_Node_Str"",argNameView,varNameDelegate).endControlFlow().addStatement(""String_Node_Str"",view.simpleName(),argNameView,fieldName,varNameDelegate).returns(void.class);
}","@Override protected MethodSpec.Builder bindMethod(AnnotatedPresenter ap,ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW)).addParameter(viewGenericType,argNameView).addStatement(""String_Node_Str"",argNameView).addStatement(""String_Node_Str"",hostInstanceName,hostInstanceName,presenterHost).addStatement(""String_Node_Str"",typeNameDelegate,varNameDelegate,hostInstanceName,fieldNameDelegates).beginControlFlow(""String_Node_Str"",varNameDelegate).addStatement(""String_Node_Str"",presenter,presenterName,presenter,argsCode.toString()).addStatement(""String_Node_Str"",varNameDelegate,classNameDelegate,presenterName,argNameView).addStatement(""String_Node_Str"",varNameDelegate,hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,fieldNameDelegates,varNameDelegate).addStatement(""String_Node_Str"",argNameView,varNameDelegate).endControlFlow().addStatement(""String_Node_Str"",view.simpleName(),argNameView,fieldName,varNameDelegate).returns(void.class);
}"
62797,"@Override protected MethodSpec.Builder bindMethod(ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW)).addParameter(viewGenericType,argNameView).addParameter(presenter,deCapitalize(presenter.simpleName())).beginControlFlow(""String_Node_Str"",hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,presenterHost).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,classNameDelegate,deCapitalize(presenter.simpleName()),argNameView).addStatement(""String_Node_Str"",argNameView,hostInstanceName,varNameDelegate).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,hostInstanceName).endControlFlow().returns(void.class);
}","@Override protected MethodSpec.Builder bindMethod(AnnotatedPresenter ap,ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW)).addParameter(viewGenericType,argNameView).addParameter(presenter,deCapitalize(presenter.simpleName())).beginControlFlow(""String_Node_Str"",hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,presenterHost).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,classNameDelegate,deCapitalize(presenter.simpleName()),argNameView).addStatement(""String_Node_Str"",argNameView,hostInstanceName,varNameDelegate).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,hostInstanceName).endControlFlow().returns(void.class);
}"
62798,"@Override protected MethodSpec.Builder bindMethod(ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW)).addParameter(viewGenericType,argNameView).addParameter(presenter,deCapitalize(presenter.simpleName())).beginControlFlow(""String_Node_Str"",hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,presenterHost).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,classNameDelegate,deCapitalize(presenter.simpleName()),argNameView).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,hostInstanceName).endControlFlow().addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate).returns(typeNameDelegate);
}","@Override protected MethodSpec.Builder bindMethod(AnnotatedPresenter ap,ClassName view,ClassName presenter,ClassName presenterHost,ClassName classNameDelegate,String fieldName,String argNameView,String presenterArgName,TypeVariableName viewGenericType,ParameterizedTypeName typeNameDelegate,StringBuilder argsCode){
  return MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addTypeVariable(viewGenericType.withBounds(ClASS_NAME_SLICK_VIEW).withBounds(ap.getViewInterface())).addParameter(viewGenericType,argNameView).addParameter(presenter,deCapitalize(presenter.simpleName())).beginControlFlow(""String_Node_Str"",hostInstanceName).addStatement(""String_Node_Str"",hostInstanceName,presenterHost).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,classNameDelegate,deCapitalize(presenter.simpleName()),argNameView).addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate,hostInstanceName).endControlFlow().addStatement(""String_Node_Str"",hostInstanceName,varNameDelegate).returns(typeNameDelegate);
}"
62799,"@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  delegate=bind();
}","@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    id=savedInstanceState.getString(SLICK_UNIQUE_KEY);
  }
  delegate=bind();
}"
62800,"@Override @SuppressWarnings(""String_Node_Str"") public void onActivityStopped(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      presenter.onViewDown();
    }
 else     if (cls.isInstance(activity)) {
      presenter.onViewDown();
    }
  }
  Log.d(TAG,""String_Node_Str"" + activity.toString());
}","@Override @SuppressWarnings(""String_Node_Str"") public void onActivityStopped(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      presenter.onViewDown();
    }
  }
 else   if (cls.isInstance(activity)) {
    presenter.onViewDown();
  }
}"
62801,"@Override @SuppressWarnings(""String_Node_Str"") public void onActivityStarted(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      presenter.onViewUp((V)activity);
    }
 else     if (cls.isInstance(activity)) {
      presenter.onViewUp((V)activity);
    }
    Log.d(TAG,""String_Node_Str"" + activity.toString());
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void onActivityStarted(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      presenter.onViewUp((V)activity);
    }
  }
 else   if (cls.isInstance(activity)) {
    presenter.onViewUp((V)activity);
  }
}"
62802,"@Override @SuppressWarnings(""String_Node_Str"") public void onActivityDestroyed(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      onDestroy((V)activity);
    }
 else     if (cls.isInstance(activity)) {
      onDestroy((V)activity);
    }
  }
  Log.d(TAG,""String_Node_Str"" + activity.toString());
}","@Override @SuppressWarnings(""String_Node_Str"") public void onActivityDestroyed(Activity activity){
  if (multiInstance) {
    if (isSameInstance(activity)) {
      onDestroy((V)activity);
    }
  }
 else   if (cls.isInstance(activity)) {
    onDestroy((V)activity);
  }
}"
62803,"@Test public void activityDagger(){
  JavaFileObject sourcePresenter=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  JavaFileObject sourceView=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  JavaFileObject presenterHostSource=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final List<JavaFileObject> target=new ArrayList<>(2);
  target.add(sourcePresenter);
  target.add(sourceView);
  assertAbout(JavaSourcesSubjectFactory.javaSources()).that(target).processedWith(new SlickProcessor()).compilesWithoutError().and().generatesSources(presenterHostSource);
}","@Test public void activityDagger(){
  JavaFileObject sourcePresenter=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  JavaFileObject sourceView=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  JavaFileObject presenterHostSource=JavaFileObjects.forSourceString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final List<JavaFileObject> target=new ArrayList<>(2);
  target.add(sourcePresenter);
  target.add(sourceView);
  assertAbout(JavaSourcesSubjectFactory.javaSources()).that(target).processedWith(new SlickProcessor()).compilesWithoutError().and().generatesSources(presenterHostSource);
}"
62804,"/** 
 * unlock
 * @param key
 * @param request request must be the same as lock request
 * @return
 */
public boolean unlock(String key,String request){
  Object connection=getConnection();
  Object result=null;
  if (connection instanceof Jedis) {
    result=((Jedis)connection).eval(script,Collections.singletonList(lockPrefix + key),Collections.singletonList(request));
    ((Jedis)connection).close();
  }
 else   if (connection instanceof JedisCluster) {
    result=((JedisCluster)connection).eval(script,Collections.singletonList(lockPrefix + key),Collections.singletonList(request));
    try {
      ((JedisCluster)connection).close();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    return false;
  }
  if (UNLOCK_MSG.equals(result)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * unlock
 * @param key
 * @param request request must be the same as lock request
 * @return
 */
public boolean unlock(String key,String request){
  Object connection=getConnection();
  Object result=null;
  if (connection instanceof Jedis) {
    result=((Jedis)connection).eval(script,Collections.singletonList(lockPrefix + key),Collections.singletonList(request));
    ((Jedis)connection).close();
  }
 else   if (connection instanceof JedisCluster) {
    result=((JedisCluster)connection).eval(script,Collections.singletonList(lockPrefix + key),Collections.singletonList(request));
  }
 else {
    return false;
  }
  if (UNLOCK_MSG.equals(result)) {
    return true;
  }
 else {
    return false;
  }
}"
62805,"/** 
 * blocking lock,custom time
 * @param key
 * @param request
 * @param blockTime custom time
 * @return
 * @throws InterruptedException
 */
public boolean lock(String key,String request,int blockTime) throws InterruptedException {
  Object connection=getConnection();
  String result;
  while (blockTime >= 0) {
    if (connection instanceof Jedis) {
      result=((Jedis)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,10 * TIME);
      if (LOCK_MSG.equals(request)) {
        ((Jedis)connection).close();
      }
    }
 else {
      result=((JedisCluster)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,10 * TIME);
      try {
        if (LOCK_MSG.equals(request)) {
          ((JedisCluster)connection).close();
        }
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    if (LOCK_MSG.equals(result)) {
      return true;
    }
    blockTime-=sleepTime;
    Thread.sleep(sleepTime);
  }
  return false;
}","/** 
 * blocking lock,custom time
 * @param key
 * @param request
 * @param blockTime custom time
 * @return
 * @throws InterruptedException
 */
public boolean lock(String key,String request,int blockTime) throws InterruptedException {
  Object connection=getConnection();
  String result;
  while (blockTime >= 0) {
    if (connection instanceof Jedis) {
      result=((Jedis)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,10 * TIME);
      if (LOCK_MSG.equals(request)) {
        ((Jedis)connection).close();
      }
    }
 else {
      result=((JedisCluster)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,10 * TIME);
    }
    if (LOCK_MSG.equals(result)) {
      return true;
    }
    blockTime-=sleepTime;
    Thread.sleep(sleepTime);
  }
  return false;
}"
62806,"/** 
 * Non-blocking lock
 * @param key        lock business type
 * @param request    value
 * @param expireTime custom expireTime
 * @return true lock successfalse lock fail
 */
public boolean tryLock(String key,String request,int expireTime){
  Object connection=getConnection();
  String result;
  if (connection instanceof Jedis) {
    result=((Jedis)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);
    ((Jedis)connection).close();
  }
 else {
    result=((JedisCluster)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);
    try {
      ((JedisCluster)connection).close();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  if (LOCK_MSG.equals(result)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Non-blocking lock
 * @param key        lock business type
 * @param request    value
 * @param expireTime custom expireTime
 * @return true lock successfalse lock fail
 */
public boolean tryLock(String key,String request,int expireTime){
  Object connection=getConnection();
  String result;
  if (connection instanceof Jedis) {
    result=((Jedis)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);
    ((Jedis)connection).close();
  }
 else {
    result=((JedisCluster)connection).set(lockPrefix + key,request,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);
  }
  if (LOCK_MSG.equals(result)) {
    return true;
  }
 else {
    return false;
  }
}"
62807,"private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(100);
  config.setMaxTotal(100);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(config);
  jedisConnectionFactory.setHostName(""String_Node_Str"");
  jedisConnectionFactory.setPort(6379);
  jedisConnectionFactory.setPassword(""String_Node_Str"");
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",7000);
  JedisCluster jedisCluster=new JedisCluster(hostAndPort);
  redisLock=new RedisLock.Builder(jedisConnectionFactory,RedisToolsConstant.SINGLE).lockPrefix(""String_Node_Str"").sleepTime(100).build();
}","private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(100);
  config.setMaxTotal(100);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(redisClusterConfiguration);
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",7000);
  JedisCluster jedisCluster=new JedisCluster(hostAndPort);
  redisLock=new RedisLock.Builder(jedisConnectionFactory,RedisToolsConstant.CLUSTER).lockPrefix(""String_Node_Str"").sleepTime(100).build();
}"
62808,"@Override public void run(){
  try {
    redisLock.lock(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  logger.info(""String_Node_Str"");
  redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
}","@Override public void run(){
  boolean limit=redisLock.tryLock(""String_Node_Str"",""String_Node_Str"",1000);
  if (limit) {
    logger.info(""String_Node_Str"");
    boolean unlock=redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
    logger.info(""String_Node_Str"",unlock);
  }
 else {
    logger.info(""String_Node_Str"");
  }
}"
62809,"public static void main(String[] args) throws InterruptedException {
  RealRedisLockTest redisLockTest=new RealRedisLockTest();
  redisLockTest.init();
  initThread();
  for (int i=0; i < 50; i++) {
    executorServicePool.execute(new Worker(i));
  }
  executorServicePool.shutdown();
  while (!executorServicePool.awaitTermination(1,TimeUnit.SECONDS)) {
    logger.info(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
}","public static void main(String[] args) throws InterruptedException {
  RealRedisLockTest redisLockTest=new RealRedisLockTest();
  redisLockTest.init();
  initThread();
  for (int i=0; i < 1; i++) {
    executorServicePool.execute(new Worker(i));
  }
  executorServicePool.shutdown();
  while (!executorServicePool.awaitTermination(1,TimeUnit.SECONDS)) {
    logger.info(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
}"
62810,"@Override public void run(){
  try {
    redisLock.lock(""String_Node_Str"",""String_Node_Str"");
    logger.info(""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
}","@Override public void run(){
  try {
    boolean limit=redisLock.lock(""String_Node_Str"",""String_Node_Str"",100);
    if (limit) {
      logger.info(""String_Node_Str"");
      boolean unlock=redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
      logger.info(""String_Node_Str"",unlock);
    }
 else {
      logger.info(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}"
62811,"private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(10);
  config.setMaxTotal(300);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(redisClusterConfiguration,config);
  jedisConnectionFactory.setHostName(""String_Node_Str"");
  jedisConnectionFactory.setPort(6379);
  jedisConnectionFactory.setPassword(""String_Node_Str"");
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",6379);
  Jedis jedis=new Jedis(""String_Node_Str"",6379);
  redisLimit=new RedisLimit.Builder(jedisConnectionFactory,RedisToolsConstant.CLUSTER).limit(5).build();
}","private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(10);
  config.setMaxTotal(300);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(config);
  jedisConnectionFactory.setHostName(""String_Node_Str"");
  jedisConnectionFactory.setPort(6379);
  jedisConnectionFactory.setPassword(""String_Node_Str"");
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",6379);
  Jedis jedis=new Jedis(""String_Node_Str"",6379);
  redisLimit=new RedisLimit.Builder(jedisConnectionFactory,RedisToolsConstant.SINGLE).limit(5).build();
}"
62812,"private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(50);
  config.setMaxTotal(50);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(config);
  jedisConnectionFactory.setHostName(""String_Node_Str"");
  jedisConnectionFactory.setPort(6379);
  jedisConnectionFactory.setPassword(""String_Node_Str"");
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",7000);
  JedisCluster jedisCluster=new JedisCluster(hostAndPort);
  redisLock=new RedisLock.Builder(jedisConnectionFactory,RedisToolsConstant.SINGLE).lockPrefix(""String_Node_Str"").sleepTime(100).build();
}","private void init(){
  JedisPoolConfig config=new JedisPoolConfig();
  config.setMaxIdle(100);
  config.setMaxTotal(100);
  config.setMaxWaitMillis(10000);
  config.setTestOnBorrow(true);
  config.setTestOnReturn(true);
  RedisClusterConfiguration redisClusterConfiguration=new RedisClusterConfiguration();
  redisClusterConfiguration.addClusterNode(new RedisNode(""String_Node_Str"",7000));
  JedisConnectionFactory jedisConnectionFactory=new JedisConnectionFactory(config);
  jedisConnectionFactory.setHostName(""String_Node_Str"");
  jedisConnectionFactory.setPort(6379);
  jedisConnectionFactory.setPassword(""String_Node_Str"");
  jedisConnectionFactory.setTimeout(100000);
  jedisConnectionFactory.afterPropertiesSet();
  HostAndPort hostAndPort=new HostAndPort(""String_Node_Str"",7000);
  JedisCluster jedisCluster=new JedisCluster(hostAndPort);
  redisLock=new RedisLock.Builder(jedisConnectionFactory,RedisToolsConstant.SINGLE).lockPrefix(""String_Node_Str"").sleepTime(100).build();
}"
62813,"public static void main(String[] args) throws InterruptedException {
  RedisLockTest redisLockTest=new RedisLockTest();
  redisLockTest.init();
  initThread();
  for (int i=0; i < 100; i++) {
    executorServicePool.execute(new Worker(i));
  }
  executorServicePool.shutdown();
  while (!executorServicePool.awaitTermination(1,TimeUnit.SECONDS)) {
    logger.info(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
}","public static void main(String[] args) throws InterruptedException {
  RedisLockTest redisLockTest=new RedisLockTest();
  redisLockTest.init();
  initThread();
  for (int i=0; i < 50; i++) {
    executorServicePool.execute(new Worker(i));
  }
  executorServicePool.shutdown();
  while (!executorServicePool.awaitTermination(1,TimeUnit.SECONDS)) {
    logger.info(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
}"
62814,"@Override public void run(){
  boolean limit=redisLock.tryLock(""String_Node_Str"",""String_Node_Str"");
  if (limit) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"");
  }
  redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
}","@Override public void run(){
  try {
    redisLock.lock(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  logger.info(""String_Node_Str"");
  redisLock.unlock(""String_Node_Str"",""String_Node_Str"");
}"
62815,"/** 
 * return lua script String
 * @param path
 * @return
 */
public static String getScript(String path){
  String script=null;
  URL resource=ScriptUtil.class.getResource(""String_Node_Str"" + path);
  String fileName=resource.getFile();
  FileInputStream in=null;
  String encoding=""String_Node_Str"";
  File file=new File(fileName);
  Long length=file.length();
  byte[] fileContent=new byte[length.intValue()];
  try {
    in=new FileInputStream(file);
    in.read(fileContent);
    script=new String(fileContent,encoding);
  }
 catch (  IOException e) {
    System.err.println(e.getStackTrace());
  }
 finally {
    try {
      in.close();
    }
 catch (    IOException e) {
      System.err.println(e.getStackTrace());
    }
  }
  return script;
}","/** 
 * return lua script String
 * @param path
 * @return
 */
public static String getScript(String path){
  StringBuilder sb=new StringBuilder();
  InputStream stream=ScriptUtil.class.getClassLoader().getResourceAsStream(path);
  BufferedReader br=new BufferedReader(new InputStreamReader(stream));
  try {
    String str=""String_Node_Str"";
    while ((str=br.readLine()) != null) {
      sb.append(str).append(System.lineSeparator());
    }
  }
 catch (  IOException e) {
    System.err.println(e.getStackTrace());
  }
  return sb.toString();
}"
62816,"public void populateId(Id id,IdMeta idMeta){
  while (true) {
    Variant varOld=new Variant();
    varOld.sequence=variant.get().sequence;
    varOld.lastTimestamp=variant.get().lastTimestamp;
    long timestamp=TimeUtils.genTime(IdType.parse(id.getType()));
    TimeUtils.validateTimestamp(varOld.lastTimestamp,timestamp);
    long sequence=variant.get().sequence;
    if (timestamp == varOld.lastTimestamp) {
      sequence++;
      sequence&=idMeta.getSeqBitsMask();
      if (sequence == 0) {
        timestamp=TimeUtils.tillNextTimeUnit(varOld.lastTimestamp,IdType.parse(id.getType()));
      }
    }
 else {
      sequence=0;
    }
    Variant varNew=new Variant();
    varNew.sequence=sequence;
    varNew.lastTimestamp=timestamp;
    if (variant.compareAndSet(varOld,varNew)) {
      id.setSeq(sequence);
      id.setTime(timestamp);
      break;
    }
  }
}","public void populateId(Id id,IdMeta idMeta){
  Variant varOld, varNew;
  long timestamp, sequence;
  while (true) {
    varOld=variant.get();
    timestamp=TimeUtils.genTime(IdType.parse(id.getType()));
    TimeUtils.validateTimestamp(varOld.lastTimestamp,timestamp);
    sequence=varOld.sequence;
    if (timestamp == varOld.lastTimestamp) {
      sequence++;
      sequence&=idMeta.getSeqBitsMask();
      if (sequence == 0) {
        timestamp=TimeUtils.tillNextTimeUnit(varOld.lastTimestamp,IdType.parse(id.getType()));
      }
    }
 else {
      sequence=0;
    }
    varNew=new Variant();
    varNew.sequence=sequence;
    varNew.lastTimestamp=timestamp;
    if (variant.compareAndSet(varOld,varNew)) {
      id.setSeq(sequence);
      id.setTime(timestamp);
      break;
    }
  }
}"
62817,"public static boolean isOn(String swtch){
  if (Arrays.asList(SWITCH_ON_EXP).contains(swtch)) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean isOn(String swtch){
  if (Arrays.asList(SWITCH_ON_EXP).contains(swtch)) {
    return true;
  }
  return false;
}"
62818,"@Test(groups={""String_Node_Str""}) public void testIpConfigurable(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testIpConfigurable(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62819,"@Test(groups={""String_Node_Str""}) public void testDb(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testDb(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62820,"@Test(groups={""String_Node_Str""}) public void testSimple(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testSimple(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62821,"@Test(groups={""String_Node_Str""}) public void testIpConfigurable(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testIpConfigurable(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62822,"@Test(groups={""String_Node_Str""}) public void testDb(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testDb(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62823,"@Test(groups={""String_Node_Str""}) public void testSimple(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getMachine(),ido.getTime(),ido.getSeq());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}","@Test(groups={""String_Node_Str""}) public void testSimple(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  long id=idService.genId();
  Id ido=idService.expId(id);
  long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
  System.err.println(id + ""String_Node_Str"" + ido);
  AssertJUnit.assertEquals(id,id1);
}"
62824,"@Test(groups={""String_Node_Str""}) public void testSimple(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    long id=idService.genId();
    Id ido=idService.expId(id);
    long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
    System.out.println(id + ""String_Node_Str"" + ido);
    AssertJUnit.assertEquals(id,id1);
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(10000);
    }
 catch (    InterruptedException e) {
    }
  }
}","@Test(groups={""String_Node_Str""}) public void testSimple(){
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  for (int i=0; i < 2; i++) {
    long id=idService.genId();
    Id ido=idService.expId(id);
    long id1=idService.makeId(ido.getVersion(),ido.getType(),ido.getGenMethod(),ido.getTime(),ido.getSeq(),ido.getMachine());
    System.out.println(id + ""String_Node_Str"" + ido);
    AssertJUnit.assertEquals(id,id1);
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(10000);
    }
 catch (    InterruptedException e) {
    }
  }
}"
62825,"@Override public void onEvent(MediaPlayer.Event event){
switch (event.type) {
case MediaPlayer.Event.Playing:
    if (BuildConfig.DEBUG)     Log.i(TAG,""String_Node_Str"");
  executeUpdate();
publishState();
executeUpdateProgress();
mHandler.sendEmptyMessage(SHOW_PROGRESS);
changeAudioFocus(true);
if (!mWakeLock.isHeld()) mWakeLock.acquire();
if (!mKeyguardManager.inKeyguardRestrictedInputMode() && !playlistManager.getVideoBackground() && playlistManager.switchToVideo()) {
hideNotification();
}
 else {
showPlayer();
showNotification();
}
break;
case MediaPlayer.Event.Paused:
if (BuildConfig.DEBUG) Log.i(TAG,""String_Node_Str"");
executeUpdate();
publishState();
executeUpdateProgress();
showNotification();
mHandler.removeMessages(SHOW_PROGRESS);
if (mWakeLock.isHeld()) mWakeLock.release();
break;
case MediaPlayer.Event.Stopped:
if (BuildConfig.DEBUG) Log.i(TAG,""String_Node_Str"");
onPlaybackStopped();
break;
case MediaPlayer.Event.EndReached:
executeUpdateProgress();
break;
case MediaPlayer.Event.EncounteredError:
showToast(getString(R.string.invalid_location,playlistManager.getCurrentMedia().getLocation()),Toast.LENGTH_SHORT);
executeUpdate();
executeUpdateProgress();
break;
case MediaPlayer.Event.TimeChanged:
break;
case MediaPlayer.Event.PositionChanged:
updateWidgetPosition(event.getPositionChanged());
publishState();
break;
case MediaPlayer.Event.Vout:
break;
case MediaPlayer.Event.ESAdded:
if (event.getEsChangedType() == Media.Track.Type.Video && (playlistManager.getVideoBackground() || !playlistManager.switchToVideo())) {
updateMetadata();
}
break;
case MediaPlayer.Event.ESDeleted:
break;
case MediaPlayer.Event.MediaChanged:
Log.d(TAG,""String_Node_Str"");
}
synchronized (mCallbacks) {
for (Callback callback : mCallbacks) callback.onMediaPlayerEvent(event);
}
}","@Override public void onEvent(MediaPlayer.Event event){
switch (event.type) {
case MediaPlayer.Event.Playing:
    if (BuildConfig.DEBUG)     Log.i(TAG,""String_Node_Str"");
  executeUpdate();
publishState();
executeUpdateProgress();
mHandler.sendEmptyMessage(SHOW_PROGRESS);
changeAudioFocus(true);
if (!mWakeLock.isHeld()) mWakeLock.acquire();
if (!mKeyguardManager.inKeyguardRestrictedInputMode() && !playlistManager.getVideoBackground() && playlistManager.switchToVideo()) {
hideNotification();
}
 else {
showPlayer();
showNotification();
}
break;
case MediaPlayer.Event.Paused:
if (BuildConfig.DEBUG) Log.i(TAG,""String_Node_Str"");
executeUpdate();
publishState();
executeUpdateProgress();
showNotification();
mHandler.removeMessages(SHOW_PROGRESS);
if (mWakeLock.isHeld()) mWakeLock.release();
break;
case MediaPlayer.Event.Stopped:
if (BuildConfig.DEBUG) Log.i(TAG,""String_Node_Str"");
onPlaybackStopped();
break;
case MediaPlayer.Event.EndReached:
executeUpdateProgress();
break;
case MediaPlayer.Event.EncounteredError:
executeUpdate();
executeUpdateProgress();
break;
case MediaPlayer.Event.TimeChanged:
break;
case MediaPlayer.Event.PositionChanged:
updateWidgetPosition(event.getPositionChanged());
publishState();
break;
case MediaPlayer.Event.Vout:
break;
case MediaPlayer.Event.ESAdded:
if (event.getEsChangedType() == Media.Track.Type.Video && (playlistManager.getVideoBackground() || !playlistManager.switchToVideo())) {
updateMetadata();
}
break;
case MediaPlayer.Event.ESDeleted:
break;
case MediaPlayer.Event.MediaChanged:
Log.d(TAG,""String_Node_Str"");
}
synchronized (mCallbacks) {
for (Callback callback : mCallbacks) callback.onMediaPlayerEvent(event);
}
}"
62826,"@Override public void updateImage(final Bitmap picture,final View target){
  sHandler.post(new Runnable(){
    @Override public void run(){
      ImageCardView cardView=(ImageCardView)target;
      if (picture != null && picture.getByteCount() > 4)       cardView.setMainImage(new BitmapDrawable(res,picture));
 else       cardView.setMainImage(sDefaultCardImage);
    }
  }
);
}","@Override public void updateImage(final Bitmap picture,final View target){
  sHandler.post(new Runnable(){
    @Override public void run(){
      ImageCardView cardView=(ImageCardView)target;
      if (picture != null && picture.getByteCount() > 4) {
        if (mediaLibraryItem.getArtworkMrl() != null && !mediaLibraryItem.getArtworkMrl().isEmpty())         cardView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_CROP);
 else         cardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
        cardView.setMainImage(new BitmapDrawable(res,picture));
      }
 else {
        cardView.setMainImage(sDefaultCardImage);
        cardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
      }
    }
  }
);
}"
62827,"@Override public void run(){
  ImageCardView cardView=(ImageCardView)target;
  if (picture != null && picture.getByteCount() > 4)   cardView.setMainImage(new BitmapDrawable(res,picture));
 else   cardView.setMainImage(sDefaultCardImage);
}","@Override public void run(){
  ImageCardView cardView=(ImageCardView)target;
  if (picture != null && picture.getByteCount() > 4) {
    if (mediaLibraryItem.getArtworkMrl() != null && !mediaLibraryItem.getArtworkMrl().isEmpty())     cardView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_CROP);
 else     cardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
    cardView.setMainImage(new BitmapDrawable(res,picture));
  }
 else {
    cardView.setMainImage(sDefaultCardImage);
    cardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
  }
}"
62828,"void updateCardViewImage(Drawable image){
  mCardView.setMainImage(image);
}","void updateCardViewImage(Drawable image){
  mCardView.setMainImage(image);
  mCardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
}"
62829,"public ViewHolder(View view){
  super(view);
  mCardView=(ImageCardView)view;
  mCardView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_CROP);
}","public ViewHolder(View view){
  super(view);
  mCardView=(ImageCardView)view;
  mCardView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_CENTER);
}"
62830,"protected ArrayList<MediaLibraryItem> prepareList(ArrayList<MediaLibraryItem> items){
  if (mMakeSections) {
    if (sMediaComparator.sortBy == MediaLibraryItemComparator.SORT_DEFAULT) {
      return generateSections(items,getDefaultSort());
    }
 else {
      ArrayList<MediaLibraryItem> newList=removeSections(items);
      Collections.sort(newList,sMediaComparator);
      return generateSections(newList,sMediaComparator.sortBy);
    }
  }
 else {
    Collections.sort(items,sMediaComparator);
    return items;
  }
}","protected ArrayList<MediaLibraryItem> prepareList(ArrayList<MediaLibraryItem> items){
  if (!isSortAllowed(getSortBy()))   sMediaComparator.setSortDefault();
  if (mMakeSections) {
    if (sMediaComparator.sortBy == MediaLibraryItemComparator.SORT_DEFAULT) {
      return generateSections(items,getDefaultSort());
    }
 else {
      ArrayList<MediaLibraryItem> newList=removeSections(items);
      Collections.sort(newList,sMediaComparator);
      return generateSections(newList,sMediaComparator.sortBy);
    }
  }
 else {
    Collections.sort(items,sMediaComparator);
    return items;
  }
}"
62831,"private void init(Context context,float band){
  LayoutInflater.from(context).inflate(R.layout.equalizer_bar,this,true);
  mSeek=(VerticalSeekBar)findViewById(R.id.equalizer_seek);
  mSeek.setMax(2 * RANGE);
  mSeek.setProgress(RANGE);
  mSeek.setOnSeekBarChangeListener(mSeekListener);
  mBand=(TextView)findViewById(R.id.equalizer_band);
  mBand.setText(band < 999.5f ? (int)(band + 0.5f) + ""String_Node_Str"" : (int)(band / 1000.0f + 0.5f) + ""String_Node_Str"");
  mValue=(TextView)findViewById(R.id.equalizer_value);
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private void init(Context context,float band){
  LayoutInflater.from(context).inflate(R.layout.equalizer_bar,this,true);
  mSeek=(VerticalSeekBar)findViewById(R.id.equalizer_seek);
  if (AndroidUtil.isJellyBeanMR1OrLater) {
    mSeek.setLayoutDirection(LAYOUT_DIRECTION_LTR);
  }
  mSeek.setMax(2 * RANGE);
  mSeek.setProgress(RANGE);
  mSeek.setOnSeekBarChangeListener(mSeekListener);
  mBand=(TextView)findViewById(R.id.equalizer_band);
  mBand.setText(band < 999.5f ? (int)(band + 0.5f) + ""String_Node_Str"" : (int)(band / 1000.0f + 0.5f) + ""String_Node_Str"");
  mValue=(TextView)findViewById(R.id.equalizer_value);
}"
62832,"@Override public void onCreate(){
  super.onCreate();
  instance=this;
  mSettings=PreferenceManager.getDefaultSharedPreferences(this);
  String p=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  if (!p.equals(""String_Node_Str"")) {
    Locale locale;
    if (p.equals(""String_Node_Str"")) {
      locale=Locale.TRADITIONAL_CHINESE;
    }
 else     if (p.startsWith(""String_Node_Str"")) {
      locale=Locale.CHINA;
    }
 else     if (p.equals(""String_Node_Str"")) {
      locale=new Locale(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (p.equals(""String_Node_Str"") || p.startsWith(""String_Node_Str"")) {
      locale=new Locale(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      if (p.contains(""String_Node_Str""))       p=p.substring(0,p.indexOf('-'));
      locale=new Locale(p);
    }
    Locale.setDefault(locale);
    Configuration config=new Configuration();
    config.locale=locale;
    getResources().updateConfiguration(config,getResources().getDisplayMetrics());
  }
  runBackground(new Runnable(){
    @Override public void run(){
      AudioUtil.prepareCacheFolder(instance);
      sTV=AndroidDevices.isAndroidTv() || !AndroidDevices.hasTsp();
      if (!VLCInstance.testCompatibleCPU(instance))       return;
      Dialog.setCallbacks(VLCInstance.get(),mDialogCallbacks);
      if (!AndroidDevices.hasTsp())       AndroidDevices.setRemoteControlReceiverEnabled(false);
    }
  }
);
}","@Override public void onCreate(){
  super.onCreate();
  instance=this;
  mSettings=PreferenceManager.getDefaultSharedPreferences(this);
  setLocale(this);
  runBackground(new Runnable(){
    @Override public void run(){
      AudioUtil.prepareCacheFolder(instance);
      sTV=AndroidDevices.isAndroidTv() || !AndroidDevices.hasTsp();
      if (!VLCInstance.testCompatibleCPU(instance))       return;
      Dialog.setCallbacks(VLCInstance.get(),mDialogCallbacks);
      if (!AndroidDevices.hasTsp())       AndroidDevices.setRemoteControlReceiverEnabled(false);
    }
  }
);
}"
62833,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (getActivity() instanceof AppCompatActivity)   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(""String_Node_Str"" + BuildConfig.VERSION_NAME);
  View v=inflater.inflate(R.layout.about,container,false);
  View aboutMain=v.findViewById(R.id.about_main);
  WebView webView=(WebView)v.findViewById(R.id.webview);
  String revision=getString(R.string.build_revision);
  webView.loadData(Util.readAsset(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",revision),""String_Node_Str"",""String_Node_Str"");
  UiTools.fillAboutView(v);
  View[] lists=new View[]{aboutMain,webView};
  String[] titles=new String[]{getString(R.string.about),getString(R.string.licence)};
  mViewPager=(ViewPager)v.findViewById(R.id.pager);
  mViewPager.setOffscreenPageLimit(MODE_TOTAL - 1);
  mViewPager.setAdapter(new AudioPagerAdapter(lists,titles));
  mTabLayout=(TabLayout)v.findViewById(R.id.sliding_tabs);
  mTabLayout.setupWithViewPager(mViewPager);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (getActivity() instanceof AppCompatActivity)   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(""String_Node_Str"" + BuildConfig.VERSION_NAME);
  View v=inflater.inflate(R.layout.about,container,false);
  if (AndroidUtil.isNougatOrLater)   VLCApplication.setLocale(getContext());
  View aboutMain=v.findViewById(R.id.about_main);
  WebView webView=(WebView)v.findViewById(R.id.webview);
  String revision=getString(R.string.build_revision);
  webView.loadData(Util.readAsset(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",revision),""String_Node_Str"",""String_Node_Str"");
  UiTools.fillAboutView(v);
  View[] lists=new View[]{aboutMain,webView};
  String[] titles=new String[]{getString(R.string.about),getString(R.string.licence)};
  mViewPager=(ViewPager)v.findViewById(R.id.pager);
  mViewPager.setOffscreenPageLimit(MODE_TOTAL - 1);
  mViewPager.setAdapter(new AudioPagerAdapter(lists,titles));
  mTabLayout=(TabLayout)v.findViewById(R.id.sliding_tabs);
  mTabLayout.setupWithViewPager(mViewPager);
  return v;
}"
62834,"/** 
 * External extras: - position (long) - position of the video to start with (in ms) - subtitles_location (String) - location of a subtitles file to load - from_start (boolean) - Whether playback should start from start or from resume point - title (String) - video title, will be guessed from file if not set.
 */
@TargetApi(12) @SuppressWarnings({""String_Node_Str""}) private void loadMedia(){
  if (mService == null)   return;
  mUri=null;
  mIsPlaying=false;
  String title=getResources().getString(R.string.title);
  boolean fromStart=false;
  String itemTitle=null;
  int positionInPlaylist=-1;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  long savedTime=extras != null ? extras.getLong(PLAY_EXTRA_START_TIME) : 0L;
  if (extras != null && savedTime == 0L)   savedTime=extras.getInt(PLAY_EXTRA_START_TIME);
  final KeyguardManager km=(KeyguardManager)VLCApplication.getAppContext().getSystemService(KEYGUARD_SERVICE);
  if (km.inKeyguardRestrictedInputMode())   mWasPaused=true;
  if (mWasPaused)   Log.d(TAG,""String_Node_Str"");
  if (intent.getData() != null)   mUri=intent.getData();
  if (extras != null) {
    if (intent.hasExtra(PLAY_EXTRA_ITEM_LOCATION))     mUri=extras.getParcelable(PLAY_EXTRA_ITEM_LOCATION);
    fromStart=extras.getBoolean(PLAY_EXTRA_FROM_START,true);
    mAskResume&=!fromStart;
    positionInPlaylist=extras.getInt(PLAY_EXTRA_OPENED_POSITION,-1);
  }
  if (intent.hasExtra(PLAY_EXTRA_SUBTITLES_LOCATION))   mSubtitleSelectedFiles.add(extras.getString(PLAY_EXTRA_SUBTITLES_LOCATION));
  if (intent.hasExtra(PLAY_EXTRA_ITEM_TITLE))   itemTitle=extras.getString(PLAY_EXTRA_ITEM_TITLE);
  if (positionInPlaylist != -1 && mService.hasMedia()) {
    Log.d(TAG,""String_Node_Str"" + positionInPlaylist);
    MediaWrapper openedMedia=mService.getMedias().get(positionInPlaylist);
    if (openedMedia == null) {
      encounteredError();
      return;
    }
    mUri=openedMedia.getUri();
    itemTitle=openedMedia.getTitle();
    updateSeekable(mService.isSeekable());
    updatePausable(mService.isPausable());
  }
  if (mUri != null) {
    if (mService.hasMedia() && !mUri.equals(mService.getCurrentMediaWrapper().getUri()))     mService.stop();
    MediaWrapper media=MediaDatabase.getInstance().getMedia(mUri);
    if (media == null && TextUtils.equals(mUri.getScheme(),""String_Node_Str"") && mUri.getPath() != null && mUri.getPath().startsWith(""String_Node_Str"")) {
      mUri=FileUtils.convertLocalUri(mUri);
      media=MediaDatabase.getInstance().getMedia(mUri);
    }
    if (media != null) {
      if (media.getTime() > 0 && !fromStart && positionInPlaylist == -1) {
        if (mAskResume) {
          showConfirmResumeDialog();
          return;
        }
      }
      intent.putExtra(PLAY_EXTRA_FROM_START,false);
      if (fromStart || mService.isPlaying())       media.setTime(0L);
 else       if (savedTime <= 0L)       savedTime=media.getTime();
      mLastAudioTrack=media.getAudioTrack();
      mLastSpuTrack=media.getSpuTrack();
    }
 else {
      if (savedTime > 0L && mAskResume) {
        showConfirmResumeDialog();
        return;
      }
 else {
        long rTime=mSettings.getLong(PreferencesActivity.VIDEO_RESUME_TIME,-1);
        if (rTime > 0 && !fromStart) {
          if (mAskResume) {
            showConfirmResumeDialog();
            return;
          }
 else {
            Editor editor=mSettings.edit();
            editor.putLong(PreferencesActivity.VIDEO_RESUME_TIME,-1);
            editor.apply();
            savedTime=rTime;
          }
        }
      }
    }
    mService.addCallback(this);
    boolean hasMedia=mService.hasMedia();
    if (hasMedia)     media=mService.getCurrentMediaWrapper();
 else     if (media == null)     media=new MediaWrapper(mUri);
    if (mWasPaused)     media.addFlags(MediaWrapper.MEDIA_PAUSED);
    if (intent.hasExtra(PLAY_DISABLE_HARDWARE))     media.addFlags(MediaWrapper.MEDIA_NO_HWACCEL);
    media.removeFlags(MediaWrapper.MEDIA_FORCE_AUDIO);
    media.addFlags(MediaWrapper.MEDIA_VIDEO);
    if (savedTime <= 0L && media != null && media.getTime() > 0L)     savedTime=media.getTime();
    if (savedTime > 0L && !mService.isPlaying())     mService.saveTimeToSeek(savedTime);
    if (!hasMedia)     mService.load(media);
 else     if (!mService.isPlaying())     mService.playIndex(positionInPlaylist);
 else {
      onPlaying();
    }
    getSubtitles();
    if (itemTitle == null)     title=mUri.getLastPathSegment();
  }
 else {
    mService.addCallback(this);
    mService.loadLastPlaylist(PlaybackService.TYPE_VIDEO);
    MediaWrapper mw=mService.getCurrentMediaWrapper();
    if (mw == null) {
      finish();
      return;
    }
    mUri=mService.getCurrentMediaWrapper().getUri();
  }
  if (itemTitle != null)   title=itemTitle;
  mTitle.setText(title);
  if (mWasPaused)   showOverlay(true);
}","/** 
 * External extras: - position (long) - position of the video to start with (in ms) - subtitles_location (String) - location of a subtitles file to load - from_start (boolean) - Whether playback should start from start or from resume point - title (String) - video title, will be guessed from file if not set.
 */
@TargetApi(12) @SuppressWarnings({""String_Node_Str""}) private void loadMedia(){
  if (mService == null)   return;
  mUri=null;
  mIsPlaying=false;
  String title=getResources().getString(R.string.title);
  boolean fromStart=false;
  String itemTitle=null;
  int positionInPlaylist=-1;
  Intent intent=getIntent();
  Bundle extras=intent.getExtras();
  long savedTime=extras != null ? extras.getLong(PLAY_EXTRA_START_TIME) : 0L;
  if (extras != null && savedTime == 0L)   savedTime=extras.getInt(PLAY_EXTRA_START_TIME);
  final KeyguardManager km=(KeyguardManager)VLCApplication.getAppContext().getSystemService(KEYGUARD_SERVICE);
  if (km.inKeyguardRestrictedInputMode())   mWasPaused=true;
  if (mWasPaused)   Log.d(TAG,""String_Node_Str"");
  if (intent.getData() != null)   mUri=intent.getData();
  if (extras != null) {
    if (intent.hasExtra(PLAY_EXTRA_ITEM_LOCATION))     mUri=extras.getParcelable(PLAY_EXTRA_ITEM_LOCATION);
    fromStart=extras.getBoolean(PLAY_EXTRA_FROM_START,true);
    mAskResume&=!fromStart;
    positionInPlaylist=extras.getInt(PLAY_EXTRA_OPENED_POSITION,-1);
  }
  if (intent.hasExtra(PLAY_EXTRA_SUBTITLES_LOCATION))   mSubtitleSelectedFiles.add(extras.getString(PLAY_EXTRA_SUBTITLES_LOCATION));
  if (intent.hasExtra(PLAY_EXTRA_ITEM_TITLE))   itemTitle=extras.getString(PLAY_EXTRA_ITEM_TITLE);
  if (positionInPlaylist != -1 && mService.hasMedia()) {
    Log.d(TAG,""String_Node_Str"" + positionInPlaylist);
    MediaWrapper openedMedia=mService.getMedias().get(positionInPlaylist);
    if (openedMedia == null) {
      encounteredError();
      return;
    }
    mUri=openedMedia.getUri();
    itemTitle=openedMedia.getTitle();
    updateSeekable(mService.isSeekable());
    updatePausable(mService.isPausable());
  }
  if (mUri != null) {
    if (mService.hasMedia() && !mUri.equals(mService.getCurrentMediaWrapper().getUri()))     mService.stop();
    MediaWrapper media=MediaDatabase.getInstance().getMedia(mUri);
    if (media == null && TextUtils.equals(mUri.getScheme(),""String_Node_Str"") && mUri.getPath() != null && mUri.getPath().startsWith(""String_Node_Str"")) {
      mUri=FileUtils.convertLocalUri(mUri);
      media=MediaDatabase.getInstance().getMedia(mUri);
    }
    if (media != null) {
      if (media.getTime() > 0 && !fromStart && positionInPlaylist == -1) {
        if (mAskResume) {
          showConfirmResumeDialog();
          return;
        }
      }
      intent.putExtra(PLAY_EXTRA_FROM_START,false);
      if (fromStart || mService.isPlaying())       media.setTime(0L);
 else       if (savedTime <= 0L)       savedTime=media.getTime();
      mLastAudioTrack=media.getAudioTrack();
      mLastSpuTrack=media.getSpuTrack();
    }
 else {
      if (savedTime > 0L && mAskResume) {
        showConfirmResumeDialog();
        return;
      }
 else {
        long rTime=mSettings.getLong(PreferencesActivity.VIDEO_RESUME_TIME,-1);
        if (rTime > 0 && !fromStart) {
          if (mAskResume) {
            showConfirmResumeDialog();
            return;
          }
 else {
            Editor editor=mSettings.edit();
            editor.putLong(PreferencesActivity.VIDEO_RESUME_TIME,-1);
            editor.apply();
            savedTime=rTime;
          }
        }
      }
    }
    mService.addCallback(this);
    boolean hasMedia=mService.hasMedia();
    if (hasMedia)     media=mService.getCurrentMediaWrapper();
 else     if (media == null)     media=new MediaWrapper(mUri);
    if (mWasPaused)     media.addFlags(MediaWrapper.MEDIA_PAUSED);
    if (intent.hasExtra(PLAY_DISABLE_HARDWARE))     media.addFlags(MediaWrapper.MEDIA_NO_HWACCEL);
    media.removeFlags(MediaWrapper.MEDIA_FORCE_AUDIO);
    media.addFlags(MediaWrapper.MEDIA_VIDEO);
    if (savedTime <= 0L && media != null && media.getTime() > 0L)     savedTime=media.getTime();
    if (savedTime > 0L && !mService.isPlaying())     mService.saveTimeToSeek(savedTime);
    if (!hasMedia)     mService.load(media);
 else     if (!mService.isPlaying())     mService.playIndex(positionInPlaylist);
 else {
      onPlaying();
    }
    getSubtitles();
    if (itemTitle == null)     title=mUri.getLastPathSegment();
  }
 else {
    mService.addCallback(this);
    mService.loadLastPlaylist(PlaybackService.TYPE_VIDEO);
    MediaWrapper mw=mService.getCurrentMediaWrapper();
    if (mw == null) {
      finish();
      return;
    }
    mUri=mService.getCurrentMediaWrapper().getUri();
  }
  if (itemTitle != null)   title=itemTitle;
  mTitle.setText(title);
  if (mWasPaused) {
    mForcedTime=savedTime;
    setOverlayProgress();
    mForcedTime=-1;
    showOverlay(true);
  }
}"
62835,"private void onPlaying(){
  mIsPlaying=true;
  stopLoading();
  updateOverlayPausePlay();
  updateNavStatus();
  if (!mService.getCurrentMediaWrapper().hasFlag(MediaWrapper.MEDIA_PAUSED))   mHandler.sendEmptyMessageDelayed(FADE_OUT,OVERLAY_TIMEOUT);
  setESTracks();
}","private void onPlaying(){
  mIsPlaying=true;
  stopLoading();
  updateOverlayPausePlay();
  updateNavStatus();
  if (!mService.getCurrentMediaWrapper().hasFlag(MediaWrapper.MEDIA_PAUSED))   mHandler.sendEmptyMessageDelayed(FADE_OUT,OVERLAY_TIMEOUT);
 else {
    mService.getCurrentMediaWrapper().removeFlags(MediaWrapper.MEDIA_PAUSED);
    mWasPaused=false;
  }
  setESTracks();
}"
62836,"@Override public void run(){
  mPlaylistAdapter.clear();
}","@Override public void run(){
  ArrayList<AudioBrowserListAdapter.ListItem> dbPlaylists=mMediaLibrary.getPlaylistDbItems();
  mPlaylistAdapter.addAllDBPlaylists(dbPlaylists);
  ArrayList<MediaWrapper> playlists=mMediaLibrary.getPlaylistFilesItems();
  mPlaylistAdapter.addAll(playlists,AudioBrowserListAdapter.TYPE_PLAYLISTS);
  mAdaptersToNotify.add(mPlaylistAdapter);
  if (mReadyToDisplay && !mDisplaying)   display();
}"
62837,"@Override public void onResume(){
  super.onResume();
  mMainActivity=(MainActivity)getActivity();
  mViewPager.addOnPageChangeListener(this);
  if (mMediaLibrary.isWorking())   mHandler.sendEmptyMessageDelayed(MSG_LOADING,300);
 else   if (mGenresAdapter.isEmpty() || mArtistsAdapter.isEmpty() || mAlbumsAdapter.isEmpty()|| mSongsAdapter.isEmpty())   updateLists();
 else {
    updateEmptyView(mViewPager.getCurrentItem());
  }
  mMediaLibrary.addUpdateHandler(mHandler);
  mMediaLibrary.setBrowser(this);
  final ListView current=(ListView)mLists.get(mViewPager.getCurrentItem());
  current.post(new Runnable(){
    @Override public void run(){
      mSwipeRefreshLayout.setEnabled(current.getFirstVisiblePosition() == 0);
    }
  }
);
  updatePlaylists();
}","@Override public void onResume(){
  super.onResume();
  mMainActivity=(MainActivity)getActivity();
  mViewPager.addOnPageChangeListener(this);
  if (mMediaLibrary.isWorking())   mHandler.sendEmptyMessageDelayed(MSG_LOADING,300);
 else   if (mGenresAdapter.isEmpty() || mArtistsAdapter.isEmpty() || mAlbumsAdapter.isEmpty()|| mSongsAdapter.isEmpty())   updateLists();
 else {
    updateEmptyView(mViewPager.getCurrentItem());
    updatePlaylists();
  }
  mMediaLibrary.addUpdateHandler(mHandler);
  mMediaLibrary.setBrowser(this);
  final ListView current=(ListView)mLists.get(mViewPager.getCurrentItem());
  current.post(new Runnable(){
    @Override public void run(){
      mSwipeRefreshLayout.setEnabled(current.getFirstVisiblePosition() == 0);
    }
  }
);
}"
62838,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAdapter=new AudioBrowserListAdapter(getActivity(),AudioBrowserListAdapter.ITEM_WITHOUT_COVER);
  mAdapter.addAll(MediaLibrary.getInstance().getPlaylistDbItems());
  mTracks=getArguments().getParcelableArrayList(KEY_TRACKS);
  mNewTrack=getArguments().getParcelableArrayList(KEY_NEW_TRACKS);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAdapter=new AudioBrowserListAdapter(getActivity(),AudioBrowserListAdapter.ITEM_WITHOUT_COVER);
  mAdapter.addAllDBPlaylists(MediaLibrary.getInstance().getPlaylistDbItems());
  mTracks=getArguments().getParcelableArrayList(KEY_TRACKS);
  mNewTrack=getArguments().getParcelableArrayList(KEY_NEW_TRACKS);
}"
62839,"public void changeSpeed(float delta){
  float rate=Math.round((mService.getRate() + delta) * 100f) / 100f;
  if (rate < 0.25f || rate > 4f)   return;
  mService.setRate(rate);
  mInfo.setText(getString(R.string.spu_delay) + ""String_Node_Str"" + rate+ ""String_Node_Str"");
  if (mPlaybackSetting == DelayState.OFF) {
    mPlaybackSetting=DelayState.SPEED;
    initPlaybackSettingInfo();
  }
}","public void changeSpeed(float delta){
  float rate=Math.round((mService.getRate() + delta) * 100f) / 100f;
  if (rate < 0.25f || rate > 4f)   return;
  mService.setRate(rate);
  mInfo.setText(getString(R.string.playback_speed) + ""String_Node_Str"" + rate+ ""String_Node_Str"");
  if (mPlaybackSetting == DelayState.OFF) {
    mPlaybackSetting=DelayState.SPEED;
    initPlaybackSettingInfo();
  }
}"
62840,"private void handleHardwareAccelerationError(){
  mHardwareAccelerationError=true;
  if (mSwitchingView)   return;
  Toast.makeText(this,R.string.hardware_acceleration_error,Toast.LENGTH_LONG).show();
  final boolean wasPaused=!mService.isPlaying();
  final long oldTime=mService.getTime();
  mService.stop();
  if (!isFinishing()) {
    final MediaWrapper mw=new MediaWrapper(mUri);
    if (wasPaused)     mw.addFlags(MediaWrapper.MEDIA_PAUSED);
    mw.addFlags(MediaWrapper.MEDIA_NO_HWACCEL);
    mw.addFlags(MediaWrapper.MEDIA_VIDEO);
    mService.load(mw);
    if (oldTime > 0)     seek(oldTime);
  }
}","private void handleHardwareAccelerationError(){
  mHardwareAccelerationError=true;
  if (mSwitchingView)   return;
  Toast.makeText(this,R.string.hardware_acceleration_error,Toast.LENGTH_LONG).show();
  final boolean wasPaused=!mService.isPlaying();
  final long oldTime=mService.getTime();
  int position=mService.getCurrentMediaPosition();
  List<MediaWrapper> list=new ArrayList<>(mService.getMedias());
  final MediaWrapper mw=list.get(position);
  mService.stop();
  if (!isFinishing()) {
    if (wasPaused)     mw.addFlags(MediaWrapper.MEDIA_PAUSED);
    mw.addFlags(MediaWrapper.MEDIA_NO_HWACCEL);
    mw.addFlags(MediaWrapper.MEDIA_VIDEO);
    mService.load(list,position);
    if (oldTime > 0)     seek(oldTime);
  }
}"
62841,"private void handleHardwareAccelerationError(){
  mHardwareAccelerationError=true;
  if (mSwitchingView)   return;
  Toast.makeText(this,R.string.hardware_acceleration_error,Toast.LENGTH_LONG).show();
  mService.removeCallback(this);
  mService.stop();
  if (!isFinishing())   loadMedia();
}","private void handleHardwareAccelerationError(){
  mHardwareAccelerationError=true;
  if (mSwitchingView)   return;
  Toast.makeText(this,R.string.hardware_acceleration_error,Toast.LENGTH_LONG).show();
  final boolean wasPaused=!mService.isPlaying();
  final long oldTime=mService.getTime();
  mService.stop();
  if (!isFinishing()) {
    final MediaWrapper mw=new MediaWrapper(mUri);
    if (wasPaused)     mw.addFlags(MediaWrapper.MEDIA_PAUSED);
    mw.addFlags(MediaWrapper.MEDIA_NO_HWACCEL);
    mw.addFlags(MediaWrapper.MEDIA_VIDEO);
    mService.load(mw);
    if (oldTime > 0)     seek(oldTime);
  }
}"
62842,"private void fadeOutInfo(){
  if (mInfo.getVisibility() == View.VISIBLE)   mInfo.startAnimation(AnimationUtils.loadAnimation(VideoPlayerActivity.this,android.R.anim.fade_out));
  mInfo.setVisibility(View.INVISIBLE);
  if (mPresentation == null) {
    if (mVerticalBar.getVisibility() == View.VISIBLE)     mVerticalBar.startAnimation(AnimationUtils.loadAnimation(VideoPlayerActivity.this,android.R.anim.fade_out));
    mVerticalBar.setVisibility(View.INVISIBLE);
  }
}","private void fadeOutInfo(){
  if (mInfo.getVisibility() == View.VISIBLE)   mInfo.startAnimation(AnimationUtils.loadAnimation(VideoPlayerActivity.this,android.R.anim.fade_out));
  mInfo.setVisibility(View.INVISIBLE);
  if (mPresentation == null) {
    if (mVerticalBar.getVisibility() == View.VISIBLE) {
      mVerticalBar.startAnimation(AnimationUtils.loadAnimation(VideoPlayerActivity.this,android.R.anim.fade_out));
      mVerticalBar.setVisibility(View.INVISIBLE);
    }
  }
}"
62843,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.debug_log);
  final LibVLC instance;
  try {
    instance=VLCInstance.getLibVlcInstance();
  }
 catch (  LibVlcException e) {
    return;
  }
  final Button startLog=(Button)findViewById(R.id.start_log);
  final Button stopLog=(Button)findViewById(R.id.stop_log);
  startLog.setEnabled(!instance.isDebugBuffering());
  stopLog.setEnabled(instance.isDebugBuffering());
  startLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.startDebugBuffer();
      startLog.setEnabled(false);
      stopLog.setEnabled(true);
    }
  }
);
  stopLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.stopDebugBuffer();
      stopLog.setEnabled(false);
      startLog.setEnabled(true);
    }
  }
);
  Button clearLog=(Button)findViewById(R.id.clear_log);
  clearLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.clearBuffer();
      updateTextView(instance);
    }
  }
);
  updateTextView(instance);
  Button copyToClipboard=(Button)findViewById(R.id.copy_to_clipboard);
  if (((TextView)findViewById(R.id.textview)).getText().length() > 0)   copyToClipboard.setEnabled(true);
  copyToClipboard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      copyTextToClipboard();
      Toast.makeText(DebugLogActivity.this,R.string.copied_to_clipboard,Toast.LENGTH_SHORT).show();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.debug_log);
  final LibVLC instance;
  try {
    instance=VLCInstance.getLibVlcInstance();
  }
 catch (  LibVlcException e) {
    return;
  }
  final Button startLog=(Button)findViewById(R.id.start_log);
  final Button stopLog=(Button)findViewById(R.id.stop_log);
  startLog.setEnabled(!instance.isDebugBuffering());
  stopLog.setEnabled(instance.isDebugBuffering());
  startLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.startDebugBuffer();
      startLog.setEnabled(false);
      stopLog.setEnabled(true);
    }
  }
);
  stopLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.stopDebugBuffer();
      stopLog.setEnabled(false);
      startLog.setEnabled(true);
    }
  }
);
  Button clearLog=(Button)findViewById(R.id.clear_log);
  clearLog.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      instance.clearBuffer();
      updateTextView(instance);
    }
  }
);
  updateTextView(instance);
  Button copyToClipboard=(Button)findViewById(R.id.copy_to_clipboard);
  copyToClipboard.setEnabled(((TextView)findViewById(R.id.textview)).getText().length() > 0);
  copyToClipboard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      copyTextToClipboard();
      Toast.makeText(DebugLogActivity.this,R.string.copied_to_clipboard,Toast.LENGTH_SHORT).show();
    }
  }
);
}"
62844,"private boolean handleContextItemSelected(MenuItem item,int position){
  ContextMenuInfo menuInfo=item.getMenuInfo();
  int startPosition;
  int groupPosition;
  List<String> medias;
  int id=item.getItemId();
  boolean useAllItems=id == R.id.audio_list_browser_play_all;
  boolean append=id == R.id.audio_list_browser_append;
  if (ExpandableListContextMenuInfo.class.isInstance(menuInfo)) {
    ExpandableListContextMenuInfo info=(ExpandableListContextMenuInfo)menuInfo;
    groupPosition=ExpandableListView.getPackedPositionGroup(info.packedPosition);
  }
 else   groupPosition=position;
  if (id == R.id.audio_list_browser_delete) {
    AlertDialog alertDialog=CommonDialogs.deleteMedia(getActivity(),mSongsAdapter.getLocations(groupPosition).get(0),new VlcRunnable(mSongsAdapter.getItem(groupPosition)){
      @Override public void run(      Object o){
        AudioBrowserListAdapter.ListItem listItem=(AudioBrowserListAdapter.ListItem)o;
        Media media=listItem.mMediaList.get(0);
        mMediaLibrary.getMediaItems().remove(media);
        mAudioController.removeLocation(media.getLocation());
        updateLists();
      }
    }
);
    alertDialog.show();
    return true;
  }
  if (id == R.id.audio_list_browser_set_song) {
    AudioUtil.setRingtone(mSongsAdapter.getItem(groupPosition).mMediaList.get(0),getActivity());
    return true;
  }
  if (useAllItems) {
    medias=new ArrayList<String>();
    startPosition=mSongsAdapter.getListWithPosition(medias,groupPosition);
  }
 else {
    startPosition=0;
switch (mFlingViewGroup.getPosition()) {
case MODE_SONG:
      medias=mSongsAdapter.getLocations(groupPosition);
    break;
case MODE_ARTIST:
  medias=mArtistsAdapter.getLocations(groupPosition);
break;
case MODE_ALBUM:
medias=mArtistsAdapter.getLocations(groupPosition);
break;
case MODE_GENRE:
medias=mGenresAdapter.getLocations(groupPosition);
break;
default :
return true;
}
}
if (append) mAudioController.append(medias);
 else mAudioController.load(medias,startPosition);
return super.onContextItemSelected(item);
}","private boolean handleContextItemSelected(MenuItem item,int position){
  ContextMenuInfo menuInfo=item.getMenuInfo();
  int startPosition;
  int groupPosition;
  List<String> medias;
  int id=item.getItemId();
  boolean useAllItems=id == R.id.audio_list_browser_play_all;
  boolean append=id == R.id.audio_list_browser_append;
  if (ExpandableListContextMenuInfo.class.isInstance(menuInfo)) {
    ExpandableListContextMenuInfo info=(ExpandableListContextMenuInfo)menuInfo;
    groupPosition=ExpandableListView.getPackedPositionGroup(info.packedPosition);
  }
 else   groupPosition=position;
  if (id == R.id.audio_list_browser_delete) {
    AlertDialog alertDialog=CommonDialogs.deleteMedia(getActivity(),mSongsAdapter.getLocations(groupPosition).get(0),new VlcRunnable(mSongsAdapter.getItem(groupPosition)){
      @Override public void run(      Object o){
        AudioBrowserListAdapter.ListItem listItem=(AudioBrowserListAdapter.ListItem)o;
        Media media=listItem.mMediaList.get(0);
        mMediaLibrary.getMediaItems().remove(media);
        mAudioController.removeLocation(media.getLocation());
        updateLists();
      }
    }
);
    alertDialog.show();
    return true;
  }
  if (id == R.id.audio_list_browser_set_song) {
    AudioUtil.setRingtone(mSongsAdapter.getItem(groupPosition).mMediaList.get(0),getActivity());
    return true;
  }
  if (useAllItems) {
    medias=new ArrayList<String>();
    startPosition=mSongsAdapter.getListWithPosition(medias,groupPosition);
  }
 else {
    startPosition=0;
switch (mFlingViewGroup.getPosition()) {
case MODE_SONG:
      medias=mSongsAdapter.getLocations(groupPosition);
    break;
case MODE_ARTIST:
  medias=mArtistsAdapter.getLocations(groupPosition);
break;
case MODE_ALBUM:
medias=mAlbumsAdapter.getLocations(groupPosition);
break;
case MODE_GENRE:
medias=mGenresAdapter.getLocations(groupPosition);
break;
default :
return true;
}
}
if (append) mAudioController.append(medias);
 else mAudioController.load(medias,startPosition);
return super.onContextItemSelected(item);
}"
62845,"public static String[] getStorageDirectories(){
  String[] dirs=null;
  BufferedReader bufReader=null;
  try {
    bufReader=new BufferedReader(new FileReader(""String_Node_Str""));
    ArrayList<String> list=new ArrayList<String>();
    list.add(Environment.getExternalStorageDirectory().getPath());
    String line;
    while ((line=bufReader.readLine()) != null) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")|| line.contains(""String_Node_Str"")) {
        StringTokenizer tokens=new StringTokenizer(line,""String_Node_Str"");
        String s=tokens.nextToken();
        s=tokens.nextToken();
        if (list.contains(s))         continue;
        if (line.contains(""String_Node_Str"")) {
          if (!line.startsWith(""String_Node_Str"") && !line.startsWith(""String_Node_Str"") && !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")) {
            list.add(s);
          }
        }
      }
    }
    dirs=new String[list.size()];
    for (int i=0; i < list.size(); i++) {
      dirs[i]=list.get(i);
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
 finally {
    if (bufReader != null) {
      try {
        bufReader.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return dirs;
}","public static String[] getStorageDirectories(){
  String[] dirs=null;
  BufferedReader bufReader=null;
  try {
    bufReader=new BufferedReader(new FileReader(""String_Node_Str""));
    ArrayList<String> list=new ArrayList<String>();
    list.add(Environment.getExternalStorageDirectory().getPath());
    String line;
    while ((line=bufReader.readLine()) != null) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")|| line.contains(""String_Node_Str"")|| line.contains(""String_Node_Str"")) {
        StringTokenizer tokens=new StringTokenizer(line,""String_Node_Str"");
        String s=tokens.nextToken();
        s=tokens.nextToken();
        if (list.contains(s))         continue;
        if (line.contains(""String_Node_Str"")) {
          if (!line.startsWith(""String_Node_Str"") && !line.startsWith(""String_Node_Str"") && !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")&& !s.startsWith(""String_Node_Str"")) {
            list.add(s);
          }
        }
      }
    }
    dirs=new String[list.size()];
    for (int i=0; i < list.size(); i++) {
      dirs[i]=list.get(i);
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
 finally {
    if (bufReader != null) {
      try {
        bufReader.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return dirs;
}"
62846,"private void changeSurfaceSize(){
  int dw=getWindow().getDecorView().getWidth();
  int dh=getWindow().getDecorView().getHeight();
  boolean isPortrait=getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
  if (dw > dh && isPortrait || dw < dh && !isPortrait) {
    int d=dw;
    dw=dh;
    dh=d;
  }
  if (dw * dh == 0 || mVideoWidth * mVideoHeight == 0) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  double ar, vw;
  double density=(double)mSarNum / (double)mSarDen;
  if (density == 1.0) {
    vw=mVideoVisibleWidth;
    ar=(double)mVideoVisibleWidth / (double)mVideoVisibleHeight;
  }
 else {
    vw=mVideoVisibleWidth * density;
    ar=vw / mVideoVisibleHeight;
  }
  double dar=(double)dw / (double)dh;
switch (mCurrentSize) {
case SURFACE_BEST_FIT:
    if (dar < ar)     dh=(int)(dw / ar);
 else     dw=(int)(dh * ar);
  break;
case SURFACE_FIT_HORIZONTAL:
dh=(int)(dw / ar);
break;
case SURFACE_FIT_VERTICAL:
dw=(int)(dh * ar);
break;
case SURFACE_FILL:
break;
case SURFACE_16_9:
ar=16.0 / 9.0;
if (dar < ar) dh=(int)(dw / ar);
 else dw=(int)(dh * ar);
break;
case SURFACE_4_3:
ar=4.0 / 3.0;
if (dar < ar) dh=(int)(dw / ar);
 else dw=(int)(dh * ar);
break;
case SURFACE_ORIGINAL:
dh=mVideoVisibleHeight;
dw=(int)vw;
break;
}
mSurfaceHolder.setFixedSize(mVideoWidth,mVideoHeight);
LayoutParams lp=mSurface.getLayoutParams();
lp.width=dw * mVideoWidth / mVideoVisibleWidth;
lp.height=dh * mVideoHeight / mVideoVisibleHeight;
mSurface.setLayoutParams(lp);
lp=mSurfaceFrame.getLayoutParams();
lp.width=dw;
lp.height=dh;
mSurfaceFrame.setLayoutParams(lp);
mSurface.invalidate();
}","private void changeSurfaceSize(){
  int sw=getWindow().getDecorView().getWidth();
  int sh=getWindow().getDecorView().getHeight();
  double dw=sw, dh=sh;
  boolean isPortrait=getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
  if (sw > sh && isPortrait || sw < sh && !isPortrait) {
    dw=sh;
    dh=sw;
  }
  if (dw * dh == 0 || mVideoWidth * mVideoHeight == 0) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  double ar, vw;
  double density=(double)mSarNum / (double)mSarDen;
  if (density == 1.0) {
    vw=mVideoVisibleWidth;
    ar=(double)mVideoVisibleWidth / (double)mVideoVisibleHeight;
  }
 else {
    vw=mVideoVisibleWidth * density;
    ar=vw / mVideoVisibleHeight;
  }
  double dar=dw / dh;
switch (mCurrentSize) {
case SURFACE_BEST_FIT:
    if (dar < ar)     dh=dw / ar;
 else     dw=dh * ar;
  break;
case SURFACE_FIT_HORIZONTAL:
dh=dw / ar;
break;
case SURFACE_FIT_VERTICAL:
dw=dh * ar;
break;
case SURFACE_FILL:
break;
case SURFACE_16_9:
ar=16.0 / 9.0;
if (dar < ar) dh=dw / ar;
 else dw=dh * ar;
break;
case SURFACE_4_3:
ar=4.0 / 3.0;
if (dar < ar) dh=dw / ar;
 else dw=dh * ar;
break;
case SURFACE_ORIGINAL:
dh=mVideoVisibleHeight;
dw=vw;
break;
}
mSurfaceHolder.setFixedSize(mVideoWidth,mVideoHeight);
LayoutParams lp=mSurface.getLayoutParams();
lp.width=(int)Math.ceil(dw * mVideoWidth / mVideoVisibleWidth);
lp.height=(int)Math.ceil(dh * mVideoHeight / mVideoVisibleHeight);
mSurface.setLayoutParams(lp);
lp=mSurfaceFrame.getLayoutParams();
lp.width=(int)Math.floor(dw);
lp.height=(int)Math.floor(dh);
mSurfaceFrame.setLayoutParams(lp);
mSurface.invalidate();
}"
62847,"private static void insertInto(ArrayList<MediaGroup> groups,Media media){
  for (  MediaGroup mediaGroup : groups) {
    CharSequence group=mediaGroup.getTitle();
    CharSequence item=media.getTitle();
    int commonLength=0;
    int minLength=Math.min(group.length(),item.length());
    while (commonLength < minLength && group.charAt(commonLength) == item.charAt(commonLength))     ++commonLength;
    if (commonLength == group.length())     mediaGroup.add(media);
 else     if (commonLength > 0 && commonLength < group.length() && commonLength > MIN_GROUP_LENGTH)     mediaGroup.merge(media,group.subSequence(0,commonLength).toString());
 else     continue;
    return;
  }
  groups.add(new MediaGroup(media));
}","private static void insertInto(ArrayList<MediaGroup> groups,Media media){
  for (  MediaGroup mediaGroup : groups) {
    CharSequence group=mediaGroup.getTitle();
    CharSequence item=media.getTitle();
    int commonLength=0;
    int minLength=Math.min(group.length(),item.length());
    while (commonLength < minLength && group.charAt(commonLength) == item.charAt(commonLength))     ++commonLength;
    if (commonLength == group.length() && mediaGroup.size() > 0)     mediaGroup.add(media);
 else     if (commonLength > 0 && (commonLength < group.length() || mediaGroup.size() == 0) && commonLength > MIN_GROUP_LENGTH)     mediaGroup.merge(media,group.subSequence(0,commonLength).toString());
 else     continue;
    return;
  }
  groups.add(new MediaGroup(media));
}"
62848,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  File file=mAdapter.getItem(position);
  if (file.getPath() == BrowserAdapter.ADD_ITEM_PATH) {
    AlertDialog.Builder b=new AlertDialog.Builder(this);
    final EditText input=new EditText(this);
    input.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    b.setTitle(R.string.add_custom_path);
    b.setMessage(R.string.add_custom_path_description);
    b.setView(input);
    b.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface x,      int y){
        return;
      }
    }
);
    b.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Util.addCustomDirectory(input.getText().toString());
        refresh();
      }
    }
);
    b.show();
    return;
  }
  File[] files=file.listFiles(new DirFilter());
  if (files != null && files.length > 0) {
    int index=l.getFirstVisiblePosition();
    int top=l.getChildAt(0).getTop();
    mScrollStates.push(new ScrollState(index,top));
    openDir(file);
  }
 else {
    Util.toaster(this,R.string.nosubdirectory);
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  File file=mAdapter.getItem(position);
  if (file.getPath().equals(BrowserAdapter.ADD_ITEM_PATH)) {
    AlertDialog.Builder b=new AlertDialog.Builder(this);
    final EditText input=new EditText(this);
    input.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    b.setTitle(R.string.add_custom_path);
    b.setMessage(R.string.add_custom_path_description);
    b.setView(input);
    b.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface x,      int y){
        return;
      }
    }
);
    b.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Util.addCustomDirectory(input.getText().toString());
        refresh();
      }
    }
);
    b.show();
    return;
  }
  File[] files=file.listFiles(new DirFilter());
  if (files != null && files.length > 0) {
    int index=l.getFirstVisiblePosition();
    int top=l.getChildAt(0).getTop();
    mScrollStates.push(new ScrollState(index,top));
    openDir(file);
  }
 else {
    Util.toaster(this,R.string.nosubdirectory);
  }
}"
62849,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void showAdvanceFunction(View v){
  if (!Util.isHoneycombOrLater()) {
    registerForContextMenu(v);
    openContextMenu(v);
    return;
  }
  PopupMenu popupMenu=new PopupMenu(this,v);
  popupMenu.getMenuInflater().inflate(R.menu.player_overflow,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      return handleContextItemSelected(item);
    }
  }
);
  popupMenu.show();
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void showAdvanceFunction(View v){
  if (!Util.isHoneycombOrLater()) {
    registerForContextMenu(v);
    openContextMenu(v);
    return;
  }
  PopupMenu popupMenu=new PopupMenu(VLCApplication.getAppContext(),v);
  popupMenu.getMenuInflater().inflate(R.menu.player_overflow,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      return handleContextItemSelected(item);
    }
  }
);
  popupMenu.show();
}"
62850,"/** 
 * Display the view of a file browser item.
 */
@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  View v=convertView;
  if (v == null || (((ViewHolder)v.getTag()).listmode != mListMode)) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (!mListMode)     v=inflater.inflate(R.layout.video_grid_item,parent,false);
 else     v=inflater.inflate(R.layout.video_list_item,parent,false);
    holder=new ViewHolder();
    holder.layout=v.findViewById(R.id.layout_item);
    holder.thumbnail=(ImageView)v.findViewById(R.id.ml_item_thumbnail);
    holder.title=(TextView)v.findViewById(R.id.ml_item_title);
    holder.subtitle=(TextView)v.findViewById(R.id.ml_item_subtitle);
    holder.progress=(ProgressBar)v.findViewById(R.id.ml_item_progress);
    holder.listmode=mListMode;
    v.setTag(holder);
    v.setLayoutParams(new GridView.LayoutParams(v.getLayoutParams().width,v.getLayoutParams().height));
  }
 else   holder=(ViewHolder)v.getTag();
  Media media=getItem(position);
  holder.title.setText(media.getTitle());
  Bitmap thumbnail;
  if (media.getPicture() != null) {
    thumbnail=media.getPicture();
    holder.thumbnail.setImageBitmap(thumbnail);
  }
 else {
    thumbnail=BitmapFactory.decodeResource(v.getResources(),R.drawable.thumbnail);
    holder.thumbnail.setImageBitmap(thumbnail);
  }
  ColorStateList titleColor=v.getResources().getColorStateList(R.color.list_title);
  holder.title.setTextColor(titleColor);
  long lastTime=media.getTime();
  String text;
  if (lastTime > 0) {
    text=String.format(""String_Node_Str"",Util.millisToString(lastTime),Util.millisToString(media.getLength()));
    holder.progress.setVisibility(View.VISIBLE);
    holder.progress.setMax((int)(media.getLength() / 1000));
    holder.progress.setProgress((int)(lastTime / 1000));
  }
 else {
    text=String.format(""String_Node_Str"",Util.millisToString(media.getLength()));
    holder.progress.setVisibility(View.GONE);
  }
  if (media.getWidth() > 0 && media.getHeight() > 0) {
    text+=String.format(""String_Node_Str"",media.getWidth(),media.getHeight());
  }
  holder.subtitle.setText(text);
  return v;
}","/** 
 * Display the view of a file browser item.
 */
@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  View v=convertView;
  if (v == null || (((ViewHolder)v.getTag()).listmode != mListMode)) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (!mListMode)     v=inflater.inflate(R.layout.video_grid_item,parent,false);
 else     v=inflater.inflate(R.layout.video_list_item,parent,false);
    holder=new ViewHolder();
    holder.layout=v.findViewById(R.id.layout_item);
    holder.thumbnail=(ImageView)v.findViewById(R.id.ml_item_thumbnail);
    holder.title=(TextView)v.findViewById(R.id.ml_item_title);
    holder.subtitle=(TextView)v.findViewById(R.id.ml_item_subtitle);
    holder.progress=(ProgressBar)v.findViewById(R.id.ml_item_progress);
    holder.listmode=mListMode;
    v.setTag(holder);
    v.setLayoutParams(new GridView.LayoutParams(v.getLayoutParams().width,v.getLayoutParams().height));
  }
 else   holder=(ViewHolder)v.getTag();
  Media media=getItem(position);
  holder.title.setText(media.getTitle());
  if (media.getPicture() != null) {
    final Bitmap thumbnail=media.getPicture();
    holder.thumbnail.setImageBitmap(thumbnail);
  }
 else {
    if (mDefaultThumbnail == null) {
      mDefaultThumbnail=BitmapFactory.decodeResource(v.getResources(),R.drawable.thumbnail);
    }
    holder.thumbnail.setImageBitmap(mDefaultThumbnail);
  }
  ColorStateList titleColor=v.getResources().getColorStateList(R.color.list_title);
  holder.title.setTextColor(titleColor);
  long lastTime=media.getTime();
  String text;
  if (lastTime > 0) {
    text=String.format(""String_Node_Str"",Util.millisToString(lastTime),Util.millisToString(media.getLength()));
    holder.progress.setVisibility(View.VISIBLE);
    holder.progress.setMax((int)(media.getLength() / 1000));
    holder.progress.setProgress((int)(lastTime / 1000));
  }
 else {
    text=String.format(""String_Node_Str"",Util.millisToString(media.getLength()));
    holder.progress.setVisibility(View.GONE);
  }
  if (media.getWidth() > 0 && media.getHeight() > 0) {
    text+=String.format(""String_Node_Str"",media.getWidth(),media.getHeight());
  }
  holder.subtitle.setText(text);
  return v;
}"
62851,"@Override public void onScrollStarted(){
  showOverlay(OVERLAY_INFINITE);
}","@Override public void onScrollStarted(){
  showOverlay(OVERLAY_INFINITE);
  setTracksAndSubtitles();
}"
62852,"@Override @TargetApi(11) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.player);
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);
  if (Util.isICSOrLater())   getWindow().getDecorView().findViewById(android.R.id.content).setOnSystemUiVisibilityChangeListener(new OnSystemUiVisibilityChangeListener(){
    @Override public void onSystemUiVisibilityChange(    int visibility){
      if (visibility == mUiVisibility)       return;
      setSurfaceSize(mVideoWidth,mVideoHeight,mSarNum,mSarDen);
      if (visibility == View.SYSTEM_UI_FLAG_VISIBLE && !mShowing) {
        showOverlay();
        mHandler.sendMessageDelayed(mHandler.obtainMessage(HIDE_NAV),OVERLAY_TIMEOUT);
      }
      mUiVisibility=visibility;
    }
  }
);
  mOverlayHeader=findViewById(R.id.player_overlay_header);
  mOverlay=findViewById(R.id.player_overlay);
  mOverlaySlider=(SlidingPanel)findViewById(R.id.player_overlay_slider);
  View sliderContent=findViewById(R.id.slider_content);
  sliderContent.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return true;
    }
  }
);
  mOverlaySlider.setOnDrawerScrollListener(new OnDrawerScrollListener(){
    @Override public void onScrollStarted(){
      showOverlay(OVERLAY_INFINITE);
    }
    @Override public void onScrollEnded(){
      if (mOverlaySlider.isOpened()) {
        mOverlaySlider.ExpandHandle();
        showOverlay(OVERLAY_INFINITE);
      }
 else {
        mOverlaySlider.CollapseHandle();
        showOverlay(OVERLAY_TIMEOUT);
      }
    }
  }
);
  mOverlaySlider.setOnDrawerOpenListener(new OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      mOverlaySlider.ExpandHandle();
      showOverlay(OVERLAY_INFINITE);
    }
  }
);
  mOverlaySlider.setOnDrawerCloseListener(new OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      mOverlaySlider.CollapseHandle();
      showOverlay(OVERLAY_TIMEOUT);
    }
  }
);
  mTitle=(TextView)findViewById(R.id.player_overlay_title);
  mSysTime=(TextView)findViewById(R.id.player_overlay_systime);
  mBattery=(TextView)findViewById(R.id.player_overlay_battery);
  mTime=(TextView)findViewById(R.id.player_overlay_time);
  mLength=(TextView)findViewById(R.id.player_overlay_length);
  mInfo=(TextView)findViewById(R.id.player_overlay_info);
  mEnableWheelbar=pref.getBoolean(""String_Node_Str"",false);
  mEnableBrightnessGesture=pref.getBoolean(""String_Node_Str"",true);
  mControls=mEnableWheelbar ? new PlayerControlWheel(this) : new PlayerControlClassic(this);
  mControls.setOnPlayerControlListener(mPlayerControlListener);
  FrameLayout mControlContainer=(FrameLayout)findViewById(R.id.player_control);
  mControlContainer.addView((View)mControls);
  mAudio=(Spinner)findViewById(R.id.player_overlay_audio);
  mSubtitles=(Spinner)findViewById(R.id.player_overlay_subtitle);
  mLock=(ImageButton)findViewById(R.id.player_overlay_lock);
  mLock.setOnClickListener(mLockListener);
  mSize=(ImageButton)findViewById(R.id.player_overlay_size);
  mSize.setOnClickListener(mSizeListener);
  mSpeedLabel=(TextView)findViewById(R.id.player_overlay_speed);
  mSpeedLabel.setOnClickListener(mSpeedLabelListener);
  mSurface=(SurfaceView)findViewById(R.id.player_surface);
  mSurfaceHolder=mSurface.getHolder();
  mSurfaceHolder.setFormat(PixelFormat.RGBX_8888);
  mSurfaceHolder.addCallback(mSurfaceCallback);
  mSeekbar=(SeekBar)findViewById(R.id.player_overlay_seekbar);
  mSeekbar.setOnSeekBarChangeListener(mSeekListener);
  mAudioManager=(AudioManager)getSystemService(AUDIO_SERVICE);
  mAudioMax=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  mSwitchingView=false;
  mEndReached=false;
  registerReceiver(mBatteryReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  try {
    LibVLC.useIOMX(this);
    mLibVLC=LibVLC.getInstance();
  }
 catch (  LibVlcException e) {
    e.printStackTrace();
  }
  EventManager em=EventManager.getInstance();
  em.addHandler(eventHandler);
  this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
}","@Override @TargetApi(11) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.player);
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);
  if (Util.isICSOrLater())   getWindow().getDecorView().findViewById(android.R.id.content).setOnSystemUiVisibilityChangeListener(new OnSystemUiVisibilityChangeListener(){
    @Override public void onSystemUiVisibilityChange(    int visibility){
      if (visibility == mUiVisibility)       return;
      setSurfaceSize(mVideoWidth,mVideoHeight,mSarNum,mSarDen);
      if (visibility == View.SYSTEM_UI_FLAG_VISIBLE && !mShowing) {
        showOverlay();
        mHandler.sendMessageDelayed(mHandler.obtainMessage(HIDE_NAV),OVERLAY_TIMEOUT);
      }
      mUiVisibility=visibility;
    }
  }
);
  mOverlayHeader=findViewById(R.id.player_overlay_header);
  mOverlay=findViewById(R.id.player_overlay);
  mOverlaySlider=(SlidingPanel)findViewById(R.id.player_overlay_slider);
  View sliderContent=findViewById(R.id.slider_content);
  sliderContent.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return true;
    }
  }
);
  mOverlaySlider.setOnDrawerScrollListener(new OnDrawerScrollListener(){
    @Override public void onScrollStarted(){
      showOverlay(OVERLAY_INFINITE);
      setTracksAndSubtitles();
    }
    @Override public void onScrollEnded(){
      if (mOverlaySlider.isOpened()) {
        mOverlaySlider.ExpandHandle();
        showOverlay(OVERLAY_INFINITE);
      }
 else {
        mOverlaySlider.CollapseHandle();
        showOverlay(OVERLAY_TIMEOUT);
      }
    }
  }
);
  mOverlaySlider.setOnDrawerOpenListener(new OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      mOverlaySlider.ExpandHandle();
      showOverlay(OVERLAY_INFINITE);
    }
  }
);
  mOverlaySlider.setOnDrawerCloseListener(new OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      mOverlaySlider.CollapseHandle();
      showOverlay(OVERLAY_TIMEOUT);
    }
  }
);
  mTitle=(TextView)findViewById(R.id.player_overlay_title);
  mSysTime=(TextView)findViewById(R.id.player_overlay_systime);
  mBattery=(TextView)findViewById(R.id.player_overlay_battery);
  mTime=(TextView)findViewById(R.id.player_overlay_time);
  mLength=(TextView)findViewById(R.id.player_overlay_length);
  mInfo=(TextView)findViewById(R.id.player_overlay_info);
  mEnableWheelbar=pref.getBoolean(""String_Node_Str"",false);
  mEnableBrightnessGesture=pref.getBoolean(""String_Node_Str"",true);
  mControls=mEnableWheelbar ? new PlayerControlWheel(this) : new PlayerControlClassic(this);
  mControls.setOnPlayerControlListener(mPlayerControlListener);
  FrameLayout mControlContainer=(FrameLayout)findViewById(R.id.player_control);
  mControlContainer.addView((View)mControls);
  mAudio=(Spinner)findViewById(R.id.player_overlay_audio);
  mSubtitles=(Spinner)findViewById(R.id.player_overlay_subtitle);
  mLock=(ImageButton)findViewById(R.id.player_overlay_lock);
  mLock.setOnClickListener(mLockListener);
  mSize=(ImageButton)findViewById(R.id.player_overlay_size);
  mSize.setOnClickListener(mSizeListener);
  mSpeedLabel=(TextView)findViewById(R.id.player_overlay_speed);
  mSpeedLabel.setOnClickListener(mSpeedLabelListener);
  mSurface=(SurfaceView)findViewById(R.id.player_surface);
  mSurfaceHolder=mSurface.getHolder();
  mSurfaceHolder.setFormat(PixelFormat.RGBX_8888);
  mSurfaceHolder.addCallback(mSurfaceCallback);
  mSeekbar=(SeekBar)findViewById(R.id.player_overlay_seekbar);
  mSeekbar.setOnSeekBarChangeListener(mSeekListener);
  mAudioManager=(AudioManager)getSystemService(AUDIO_SERVICE);
  mAudioMax=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  mSwitchingView=false;
  mEndReached=false;
  registerReceiver(mBatteryReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  try {
    LibVLC.useIOMX(this);
    mLibVLC=LibVLC.getInstance();
  }
 catch (  LibVlcException e) {
    e.printStackTrace();
  }
  EventManager em=EventManager.getInstance();
  em.addHandler(eventHandler);
  this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
}"
62853,"/** 
 * show/hide the overlay
 */
@Override public boolean onTouchEvent(MotionEvent event){
  if (mAudioDisplayRange == 0)   mAudioDisplayRange=Math.min(getWindowManager().getDefaultDisplay().getWidth(),getWindowManager().getDefaultDisplay().getHeight());
  float y_changed=event.getRawY() - mTouchY;
  float x_changed=event.getRawX() - mTouchX;
  float coef=Math.abs(y_changed / x_changed);
  Log.i(TAG,""String_Node_Str"" + Float.toString(coef));
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mTouchY=event.getRawY();
  mVol=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
mIsAudioChanged=false;
mTouchX=event.getRawX();
break;
case MotionEvent.ACTION_MOVE:
if ((Math.abs(y_changed) > Math.abs(x_changed)) && (coef > 2)) {
int delta=-(int)((y_changed / mAudioDisplayRange) * mAudioMax);
int vol=(int)Math.min(Math.max(mVol + delta,0),mAudioMax);
if (delta != 0) {
mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,vol,AudioManager.FLAG_SHOW_UI);
mIsAudioChanged=true;
}
}
break;
case MotionEvent.ACTION_UP:
if (!mIsAudioChanged) {
if (!mShowing) {
showOverlay();
}
 else {
hideOverlay(true);
if (Util.isICSOrLater()) mHandler.sendMessageDelayed(mHandler.obtainMessage(HIDE_NAV),OVERLAY_TIMEOUT);
}
}
if ((Math.abs(y_changed) < Math.abs(x_changed)) && (coef < 0.5)) {
DisplayMetrics screen=new DisplayMetrics();
getWindowManager().getDefaultDisplay().getMetrics(screen);
int jump=(int)(600000 * Math.pow((x_changed / screen.widthPixels),3));
mPlayerControlListener.onSeek(jump);
showInfo(String.format(""String_Node_Str"",jump >= 0 ? ""String_Node_Str"" : ""String_Node_Str"",Util.millisToString(jump)),1000);
}
break;
}
return mIsAudioChanged;
}","/** 
 * show/hide the overlay
 */
@SuppressWarnings(""String_Node_Str"") @Override public boolean onTouchEvent(MotionEvent event){
  if (mAudioDisplayRange == 0)   mAudioDisplayRange=Math.min(getWindowManager().getDefaultDisplay().getWidth(),getWindowManager().getDefaultDisplay().getHeight());
  float y_changed=event.getRawY() - mTouchY;
  float x_changed=event.getRawX() - mTouchX;
  float coef=Math.abs(y_changed / x_changed);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mTouchY=event.getRawY();
  mVol=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
mIsAudioChanged=false;
mTouchX=event.getRawX();
break;
case MotionEvent.ACTION_MOVE:
if ((Math.abs(y_changed) > Math.abs(x_changed)) && (coef > 2)) {
int delta=-(int)((y_changed / mAudioDisplayRange) * mAudioMax);
int vol=(int)Math.min(Math.max(mVol + delta,0),mAudioMax);
if (delta != 0) {
mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,vol,AudioManager.FLAG_SHOW_UI);
mIsAudioChanged=true;
}
}
break;
case MotionEvent.ACTION_UP:
if (!mIsAudioChanged) {
if (!mShowing) {
showOverlay();
}
 else {
hideOverlay(true);
if (Util.isICSOrLater()) mHandler.sendMessageDelayed(mHandler.obtainMessage(HIDE_NAV),OVERLAY_TIMEOUT);
}
}
DisplayMetrics screen=new DisplayMetrics();
getWindowManager().getDefaultDisplay().getMetrics(screen);
float gesturesize=(float)((x_changed / screen.xdpi) * 2.54);
if ((Math.abs(y_changed) < Math.abs(x_changed)) && (coef < 0.5) && (Math.abs(gesturesize) > 1)) {
int jump=(int)(Math.signum(gesturesize) * ((600000 * Math.pow((gesturesize / 8),4)) + 3000));
if ((jump > 0) && ((mLibVLC.getTime() + jump) > mLibVLC.getLength())) jump=(int)(mLibVLC.getLength() - mLibVLC.getTime());
if ((jump < 0) && ((mLibVLC.getTime() + jump) < 0)) jump=(int)-mLibVLC.getTime();
mPlayerControlListener.onSeek(jump);
showInfo(String.format(""String_Node_Str"",jump >= 0 ? ""String_Node_Str"" : ""String_Node_Str"",Util.millisToString(jump)),1000);
}
break;
}
return mIsAudioChanged;
}"
62854,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  int state=intent.getIntExtra(""String_Node_Str"",0);
  if (mLibVLC == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_PLAY)) {
    if (mLibVLC.isPlaying() && mCurrentMedia != null) {
      pause();
    }
 else     if (!mLibVLC.isPlaying() && mCurrentMedia != null) {
      play();
    }
 else {
      Intent iVlc=new Intent(context,AudioPlayerActivity.class);
      iVlc.putExtra(START_FROM_NOTIFICATION,true);
      iVlc.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      context.startActivity(iVlc);
    }
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_BACKWARD)) {
    previous();
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_STOP)) {
    stop();
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_FORWARD)) {
    next();
  }
 else   if (action.equalsIgnoreCase(Intent.ACTION_MEDIA_BUTTON)) {
    KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
    TelephonyManager telManager=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
    if (event == null || telManager.getCallState() != TelephonyManager.CALL_STATE_IDLE)     return;
    if (mCurrentMedia == null) {
      abortBroadcast();
      return;
    }
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
      long time=SystemClock.uptimeMillis();
switch (event.getAction()) {
case KeyEvent.ACTION_DOWN:
      if (event.getRepeatCount() > 0)       break;
    mHeadsetDownTime=time;
  break;
case KeyEvent.ACTION_UP:
if (time - mHeadsetDownTime >= 1000) {
  previous();
  time=0;
}
 else if (time - mHeadsetUpTime <= 500) {
  next();
}
 else {
  if (mLibVLC.isPlaying())   pause();
 else   play();
}
mHeadsetUpTime=time;
break;
}
break;
case KeyEvent.KEYCODE_MEDIA_PLAY:
play();
break;
case KeyEvent.KEYCODE_MEDIA_PAUSE:
pause();
break;
case KeyEvent.KEYCODE_MEDIA_STOP:
stop();
break;
case KeyEvent.KEYCODE_MEDIA_NEXT:
next();
break;
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
previous();
break;
}
abortBroadcast();
}
if (mDetectHeadset) {
if (action.equalsIgnoreCase(AudioManager.ACTION_AUDIO_BECOMING_NOISY)) {
Log.i(TAG,""String_Node_Str"");
if (mLibVLC.isPlaying() && mCurrentMedia != null) pause();
}
 else if (action.equalsIgnoreCase(Intent.ACTION_HEADSET_PLUG) && state != 0) {
Log.i(TAG,""String_Node_Str"");
if (!mLibVLC.isPlaying() && mCurrentMedia != null) play();
}
}
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  int state=intent.getIntExtra(""String_Node_Str"",0);
  if (mLibVLC == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_PLAY)) {
    if (mLibVLC.isPlaying() && mCurrentMedia != null) {
      pause();
    }
 else     if (!mLibVLC.isPlaying() && mCurrentMedia != null) {
      play();
    }
 else {
      Intent iVlc=new Intent(context,MainActivity.class);
      iVlc.putExtra(START_FROM_NOTIFICATION,true);
      iVlc.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      context.startActivity(iVlc);
    }
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_BACKWARD)) {
    previous();
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_STOP)) {
    stop();
  }
 else   if (action.equalsIgnoreCase(VLCAppWidgetProvider.ACTION_WIDGET_FORWARD)) {
    next();
  }
 else   if (action.equalsIgnoreCase(Intent.ACTION_MEDIA_BUTTON)) {
    KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
    TelephonyManager telManager=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
    if (event == null || telManager.getCallState() != TelephonyManager.CALL_STATE_IDLE)     return;
    if (mCurrentMedia == null) {
      abortBroadcast();
      return;
    }
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
      long time=SystemClock.uptimeMillis();
switch (event.getAction()) {
case KeyEvent.ACTION_DOWN:
      if (event.getRepeatCount() > 0)       break;
    mHeadsetDownTime=time;
  break;
case KeyEvent.ACTION_UP:
if (time - mHeadsetDownTime >= 1000) {
  previous();
  time=0;
}
 else if (time - mHeadsetUpTime <= 500) {
  next();
}
 else {
  if (mLibVLC.isPlaying())   pause();
 else   play();
}
mHeadsetUpTime=time;
break;
}
break;
case KeyEvent.KEYCODE_MEDIA_PLAY:
play();
break;
case KeyEvent.KEYCODE_MEDIA_PAUSE:
pause();
break;
case KeyEvent.KEYCODE_MEDIA_STOP:
stop();
break;
case KeyEvent.KEYCODE_MEDIA_NEXT:
next();
break;
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
previous();
break;
}
abortBroadcast();
}
if (mDetectHeadset) {
if (action.equalsIgnoreCase(AudioManager.ACTION_AUDIO_BECOMING_NOISY)) {
Log.i(TAG,""String_Node_Str"");
if (mLibVLC.isPlaying() && mCurrentMedia != null) pause();
}
 else if (action.equalsIgnoreCase(Intent.ACTION_HEADSET_PLUG) && state != 0) {
Log.i(TAG,""String_Node_Str"");
if (!mLibVLC.isPlaying() && mCurrentMedia != null) play();
}
}
}"
62855,"@Override protected void onResume(){
  mAudioController.addAudioPlayer(mAudioPlayer);
  AudioServiceController.getInstance().bindAudioService(this);
  SharedPreferences sharedPrefs=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  mCurrentViewTab=sharedPrefs.getInt(""String_Node_Str"",VIDEO_TAB);
  mMediaLibraryActive=sharedPrefs.getBoolean(""String_Node_Str"",true);
  if (!mMediaLibraryActive)   showDirectoryView();
 else   if (mCurrentViewTab == AUDIO_TAB)   showAudioTab();
 else   showVideoTab();
  super.onResume();
}","@Override protected void onResume(){
  mAudioController.addAudioPlayer(mAudioPlayer);
  AudioServiceController.getInstance().bindAudioService(this);
  SharedPreferences sharedPrefs=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  mCurrentViewTab=sharedPrefs.getInt(""String_Node_Str"",VIDEO_TAB);
  mMediaLibraryActive=sharedPrefs.getBoolean(""String_Node_Str"",true);
  if (!mMediaLibraryActive)   showDirectoryView();
 else   if (getIntent().hasExtra(AudioService.START_FROM_NOTIFICATION) || mCurrentViewTab == AUDIO_TAB)   showAudioTab();
 else   showVideoTab();
  super.onResume();
}"
62856,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAudioController=AudioServiceController.getInstance();
  mMediaLibrary=MediaLibrary.getInstance(getActivity());
  mMediaLibrary.addUpdateHandler(mHandler);
  mSongsAdapter=new AudioListAdapter(getActivity());
  setListAdapter(mSongsAdapter);
  mHandler.sendEmptyMessageDelayed(MediaLibrary.MEDIA_ITEMS_UPDATED,250);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAudioController=AudioServiceController.getInstance();
  mMediaLibrary=MediaLibrary.getInstance(getActivity());
  mMediaLibrary.addUpdateHandler(mHandler);
  mSongsAdapter=new AudioListAdapter(getActivity());
  setListAdapter(mSongsAdapter);
}"
62857,"private void updateList(){
  final Bundle b=getArguments();
  String name=b.getString(EXTRA_NAME);
  String name2=b.getString(EXTRA_NAME2);
  int mode=b.getInt(EXTRA_MODE,0);
  List<Media> audioList;
  List<String> itemList;
  String currentItem=null;
  int currentIndex=-1;
  if (name == null || mode == AudioBrowserFragment.MODE_SONG) {
    mTitle.setText(R.string.songs);
    itemList=AudioServiceController.getInstance().getItems();
    currentItem=AudioServiceController.getInstance().getItem();
    audioList=MediaLibrary.getInstance(getActivity()).getMediaItems(itemList);
  }
 else {
    mTitle.setText(name2 != null ? name2 : name);
    audioList=MediaLibrary.getInstance(getActivity()).getAudioItems(name,name2,mode);
  }
  mSongsAdapter.clear();
switch (mSortBy) {
case SORT_BY_LENGTH:
    Collections.sort(audioList,byLength);
  break;
case SORT_BY_TITLE:
default :
Collections.sort(audioList,byMRL);
break;
}
if (mSortReverse) {
Collections.reverse(audioList);
}
for (int i=0; i < audioList.size(); i++) {
Media media=audioList.get(i);
if (currentItem != null && currentItem.equals(media.getLocation())) currentIndex=i;
mSongsAdapter.add(media);
}
mSongsAdapter.setCurrentIndex(currentIndex);
try {
getListView().setSelection(currentIndex);
}
 catch (IllegalStateException e) {
}
mSongsAdapter.notifyDataSetChanged();
}","private void updateList(){
  final Bundle b=getArguments();
  String name=b.getString(EXTRA_NAME);
  String name2=b.getString(EXTRA_NAME2);
  int mode=b.getInt(EXTRA_MODE,0);
  List<Media> audioList;
  List<String> itemList;
  String currentItem=null;
  int currentIndex=-1;
  if (name == null || mode == AudioBrowserFragment.MODE_SONG) {
    mTitle.setText(R.string.songs);
    itemList=AudioServiceController.getInstance().getItems();
    currentItem=AudioServiceController.getInstance().getItem();
    audioList=MediaLibrary.getInstance(getActivity()).getMediaItems(itemList);
  }
 else {
    mTitle.setText(name2 != null ? name2 : name);
    audioList=MediaLibrary.getInstance(getActivity()).getAudioItems(name,name2,mode);
  }
  mSongsAdapter.clear();
switch (mSortBy) {
case SORT_BY_LENGTH:
    Collections.sort(audioList,byLength);
  break;
case SORT_BY_TITLE:
default :
Collections.sort(audioList,byMRL);
break;
}
if (mSortReverse) {
Collections.reverse(audioList);
}
for (int i=0; i < audioList.size(); i++) {
Media media=audioList.get(i);
if (currentItem != null && currentItem.equals(media.getLocation())) currentIndex=i;
mSongsAdapter.add(media);
}
mSongsAdapter.setCurrentIndex(currentIndex);
getListView().setSelection(currentIndex);
mSongsAdapter.notifyDataSetChanged();
}"
62858,"/** 
 * Return true if there is a video track in the file
 */
private native long getLengthFromFile(int instance,String filePath);","/** 
 * Return the length of the stream, in milliseconds
 */
private native long getLengthFromFile(int instance,String filePath);"
62859,"private void init(){
  LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View mMiniPlayerView=layoutInflater.inflate(R.layout.audio_player_mini,this,false);
  addView(mMiniPlayerView);
  mCover=(ImageView)findViewById(R.id.cover);
  mTitle=(TextView)findViewById(R.id.title);
  mArtist=(TextView)findViewById(R.id.artist);
  mPlayPause=(ImageButton)findViewById(R.id.play_pause);
  mForward=(ImageButton)findViewById(R.id.forward);
  mBackward=(ImageButton)findViewById(R.id.backward);
  mPlayPause.setOnClickListener(onMediaControlClickListener);
  mForward.setOnClickListener(onMediaControlClickListener);
  mBackward.setOnClickListener(onMediaControlClickListener);
  mSeekbar=(SeekBar)findViewById(R.id.timeline);
  this.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(getContext(),AudioPlayerActivity.class);
      getContext().startActivity(intent);
    }
  }
);
  this.setOnLongClickListener(new OnLongClickListener(){
    @Override public boolean onLongClick(    View arg0){
      showContextMenu();
      return true;
    }
  }
);
}","private void init(){
  LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View mMiniPlayerView=layoutInflater.inflate(R.layout.audio_player_mini,this,false);
  addView(mMiniPlayerView);
  mCover=(ImageView)findViewById(R.id.cover);
  mTitle=(TextView)findViewById(R.id.title);
  mArtist=(TextView)findViewById(R.id.artist);
  mPlayPause=(ImageButton)findViewById(R.id.play_pause);
  mForward=(ImageButton)findViewById(R.id.forward);
  mBackward=(ImageButton)findViewById(R.id.backward);
  mPlayPause.setOnClickListener(onMediaControlClickListener);
  mForward.setOnClickListener(onMediaControlClickListener);
  mBackward.setOnClickListener(onMediaControlClickListener);
  mSeekbar=(SeekBar)findViewById(R.id.timeline);
  lastTitle=""String_Node_Str"";
  this.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(getContext(),AudioPlayerActivity.class);
      getContext().startActivity(intent);
    }
  }
);
  this.setOnLongClickListener(new OnLongClickListener(){
    @Override public boolean onLongClick(    View arg0){
      showContextMenu();
      return true;
    }
  }
);
}"
62860,"public void update(){
  if (mAudioPlayerControl != null) {
    if (mAudioPlayerControl.hasMedia()) {
      this.setVisibility(LinearLayout.VISIBLE);
    }
 else {
      this.setVisibility(LinearLayout.GONE);
      return;
    }
    Bitmap cover=mAudioPlayerControl.getCover();
    if (cover != null) {
      mCover.setVisibility(ImageView.VISIBLE);
      mCover.setImageBitmap(cover);
    }
 else {
      mCover.setVisibility(ImageView.GONE);
    }
    mTitle.setText(mAudioPlayerControl.getTitle());
    mArtist.setText(mAudioPlayerControl.getArtist());
    if (mAudioPlayerControl.isPlaying()) {
      mPlayPause.setImageResource(R.drawable.ic_pause);
    }
 else {
      mPlayPause.setImageResource(R.drawable.ic_play);
    }
    if (mAudioPlayerControl.hasNext())     mForward.setVisibility(ImageButton.VISIBLE);
 else     mForward.setVisibility(ImageButton.INVISIBLE);
    if (mAudioPlayerControl.hasPrevious())     mBackward.setVisibility(ImageButton.VISIBLE);
 else     mBackward.setVisibility(ImageButton.INVISIBLE);
    int time=(int)mAudioPlayerControl.getTime();
    int length=(int)mAudioPlayerControl.getLength();
    mSeekbar.setMax(length);
    mSeekbar.setProgress(time);
  }
}","public void update(){
  if (mAudioPlayerControl != null) {
    if (mAudioPlayerControl.hasMedia()) {
      this.setVisibility(LinearLayout.VISIBLE);
    }
 else {
      this.setVisibility(LinearLayout.GONE);
      return;
    }
    if (!mAudioPlayerControl.getTitle().equals(lastTitle)) {
      Bitmap cover=mAudioPlayerControl.getCover();
      if (cover != null) {
        mCover.setVisibility(ImageView.VISIBLE);
        mCover.setImageBitmap(cover);
      }
 else {
        mCover.setVisibility(ImageView.GONE);
      }
    }
    lastTitle=mAudioPlayerControl.getTitle();
    mTitle.setText(lastTitle);
    mArtist.setText(mAudioPlayerControl.getArtist());
    if (mAudioPlayerControl.isPlaying()) {
      mPlayPause.setImageResource(R.drawable.ic_pause);
    }
 else {
      mPlayPause.setImageResource(R.drawable.ic_play);
    }
    if (mAudioPlayerControl.hasNext())     mForward.setVisibility(ImageButton.VISIBLE);
 else     mForward.setVisibility(ImageButton.INVISIBLE);
    if (mAudioPlayerControl.hasPrevious())     mBackward.setVisibility(ImageButton.VISIBLE);
 else     mBackward.setVisibility(ImageButton.INVISIBLE);
    int time=(int)mAudioPlayerControl.getTime();
    int length=(int)mAudioPlayerControl.getLength();
    mSeekbar.setMax(length);
    mSeekbar.setProgress(time);
  }
}"
62861,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.search);
  mResultAdapter=new SearchResultAdapter(this,android.R.layout.simple_list_item_1);
  mSearchText=(EditText)findViewById(R.id.search_text);
  mSearchText.setOnEditorActionListener(searchTextListener);
  mSearchText.addTextChangedListener(searchTextWatcher);
  final Intent queryIntent=getIntent();
  final String queryAction=queryIntent.getAction();
  if (Intent.ACTION_SEARCH.equals(queryAction)) {
    String query=queryIntent.getStringExtra(SearchManager.QUERY);
    mSearchText.setText(query);
    mSearchText.setSelection(query.length());
  }
 else {
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.showSoftInput(mSearchText,InputMethodManager.RESULT_SHOWN);
  }
  mSearchText.requestFocus();
  showSearchHistory();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.search);
  mResultAdapter=new SearchResultAdapter(this,android.R.layout.simple_list_item_1);
  mSearchText=(EditText)findViewById(R.id.search_text);
  mSearchText.setOnEditorActionListener(searchTextListener);
  mSearchText.addTextChangedListener(searchTextWatcher);
  final Intent queryIntent=getIntent();
  final String queryAction=queryIntent.getAction();
  if (Intent.ACTION_SEARCH.equals(queryAction)) {
    String query=queryIntent.getStringExtra(SearchManager.QUERY);
    mSearchText.setText(query);
    mSearchText.setSelection(query.length());
  }
 else {
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.showSoftInput(mSearchText,InputMethodManager.RESULT_SHOWN);
    showSearchHistory();
  }
  mSearchText.requestFocus();
}"
62862,"private void search(CharSequence key,int type){
  mResultAdapter.clear();
  String[] keys=key.toString().split(""String_Node_Str"");
  ArrayList<MediaItem> allItems=MediaLibraryActivity.getInstance().mItemList;
  int results=0;
  for (int i=0; i < allItems.size(); i++) {
    MediaItem item=allItems.get(i);
    if (type != MediaItem.TYPE_ALL && type != item.getType())     continue;
    Log.d(TAG,keys[0]);
    boolean add=true;
    String name=item.getName().toLowerCase();
    String path=item.getPath().toLowerCase();
    for (int k=0; k < keys.length; k++) {
      Log.d(TAG,keys[k]);
      if (!(name.contains(keys[k].toLowerCase()) || path.contains(keys[k].toLowerCase()))) {
        add=false;
        break;
      }
    }
    if (add) {
      mResultAdapter.add(item);
      results++;
    }
  }
  mResultAdapter.sort();
  setListAdapter(mResultAdapter);
  String headerText=getString(R.string.search_found_results,results);
  showListHeader(headerText);
}","private void search(CharSequence key,int type){
  mResultAdapter.clear();
  String[] keys=key.toString().split(""String_Node_Str"");
  ArrayList<MediaItem> allItems=MediaLibraryActivity.getInstance().mItemList;
  int results=0;
  for (int i=0; i < allItems.size(); i++) {
    MediaItem item=allItems.get(i);
    if (type != MediaItem.TYPE_ALL && type != item.getType())     continue;
    boolean add=true;
    String name=item.getName().toLowerCase();
    String path=item.getPath().toLowerCase();
    for (int k=0; k < keys.length; k++) {
      if (!(name.contains(keys[k].toLowerCase()) || path.contains(keys[k].toLowerCase()))) {
        add=false;
        break;
      }
    }
    if (add) {
      mResultAdapter.add(item);
      results++;
    }
  }
  mResultAdapter.sort();
  String headerText=getString(R.string.search_found_results,results);
  showListHeader(headerText);
  setListAdapter(mResultAdapter);
}"
62863,"/** 
 * Handle onClick form menu buttons
 */
@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent intent;
switch (item.getItemId()) {
case R.id.search_clear_history:
    DatabaseManager db=DatabaseManager.getInstance();
  db.clearSearchhistory();
showSearchHistory();
}
return super.onOptionsItemSelected(item);
}","/** 
 * Handle onClick form menu buttons
 */
@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.search_clear_history:
    DatabaseManager db=DatabaseManager.getInstance();
  db.clearSearchhistory();
if (mHistoryAdapter == getListAdapter()) showSearchHistory();
}
return super.onOptionsItemSelected(item);
}"
62864,"public synchronized void updateMediaItem(String path,mediaColumn col,Object object){
  ContentValues values=new ContentValues();
switch (col) {
case MEDIA_THUMBNAIL:
    Bitmap thumbnail=(Bitmap)object;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
thumbnail.compress(Bitmap.CompressFormat.PNG,100,out);
values.put(MEDIA_THUMBNAIL,out.toByteArray());
break;
default :
return;
}
mDb.update(MEDIA_TABLE_NAME,values,MEDIA_PATH + ""String_Node_Str"" + path+ ""String_Node_Str"",null);
}","public synchronized void updateMediaItem(String path,mediaColumn col,Object object){
  ContentValues values=new ContentValues();
switch (col) {
case MEDIA_THUMBNAIL:
    Bitmap thumbnail=(Bitmap)object;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
thumbnail.compress(Bitmap.CompressFormat.PNG,100,out);
values.put(MEDIA_THUMBNAIL,out.toByteArray());
break;
default :
return;
}
mDb.update(MEDIA_TABLE_NAME,values,MEDIA_PATH + ""String_Node_Str"",new String[]{path});
}"
62865,"public synchronized boolean mediaDirExists(String path){
  String query=""String_Node_Str"" + DIR_ROW_PATH + ""String_Node_Str""+ DIR_TABLE_NAME+ ""String_Node_Str""+ DIR_ROW_PATH+ ""String_Node_Str"";
  Cursor cursor=mDb.rawQuery(query,new String[]{path});
  boolean exists=cursor.moveToFirst();
  cursor.close();
  return exists;
}","public synchronized boolean mediaDirExists(String path){
  Cursor cursor=mDb.query(DIR_TABLE_NAME,new String[]{DIR_ROW_PATH},DIR_ROW_PATH + ""String_Node_Str"",new String[]{path},null,null,null);
  boolean exists=cursor.moveToFirst();
  cursor.close();
  return exists;
}"
62866,"/** 
 * Delete directory from directories table
 * @param path
 */
public synchronized void removeMediaDir(String path){
  mDb.delete(DIR_TABLE_NAME,DIR_ROW_PATH + ""String_Node_Str"" + path+ ""String_Node_Str"",null);
}","/** 
 * Delete directory from directories table
 * @param path
 */
public synchronized void removeMediaDir(String path){
  mDb.delete(DIR_TABLE_NAME,DIR_ROW_PATH + ""String_Node_Str"",new String[]{path});
}"
62867,"/** 
 * Check if the item already in the database
 * @param path of the item (primary key)
 * @return 
 */
public synchronized boolean mediaItemExists(String path){
  Cursor cursor=mDb.query(MEDIA_TABLE_NAME,new String[]{DIR_ROW_PATH},MEDIA_PATH + ""String_Node_Str"" + path+ ""String_Node_Str"",null,null,null,null);
  cursor.close();
  return cursor.moveToFirst();
}","/** 
 * Check if the item already in the database
 * @param path of the item (primary key)
 * @return 
 */
public synchronized boolean mediaItemExists(String path){
  Cursor cursor=mDb.query(MEDIA_TABLE_NAME,new String[]{DIR_ROW_PATH},MEDIA_PATH + ""String_Node_Str"",new String[]{path},null,null,null);
  cursor.close();
  return cursor.moveToFirst();
}"
62868,"public synchronized MediaItem getMediaItem(String path){
  Cursor cursor;
  MediaItem item=null;
  Bitmap thumbnail=null;
  byte[] blob;
  cursor=mDb.query(MEDIA_TABLE_NAME,new String[]{MEDIA_NAME,MEDIA_PATH,MEDIA_TIME,MEDIA_LENGTH,MEDIA_TYPE,MEDIA_WIDTH,MEDIA_HEIGHT,MEDIA_THUMBNAIL},MEDIA_PATH + ""String_Node_Str"" + path+ ""String_Node_Str"",null,null,null,null);
  if (cursor.moveToFirst()) {
    blob=cursor.getBlob(7);
    if (blob != null) {
      thumbnail=BitmapFactory.decodeByteArray(blob,0,blob.length);
    }
    item=new MediaItem(cursor.getString(0),new File(cursor.getString(1)),cursor.getLong(2),cursor.getLong(3),cursor.getString(4),cursor.getInt(5),cursor.getInt(6),thumbnail);
  }
  return item;
}","public synchronized MediaItem getMediaItem(String path){
  Cursor cursor;
  MediaItem item=null;
  Bitmap thumbnail=null;
  byte[] blob;
  cursor=mDb.query(MEDIA_TABLE_NAME,new String[]{MEDIA_NAME,MEDIA_PATH,MEDIA_TIME,MEDIA_LENGTH,MEDIA_TYPE,MEDIA_WIDTH,MEDIA_HEIGHT,MEDIA_THUMBNAIL},MEDIA_PATH + ""String_Node_Str"",new String[]{path},null,null,null);
  if (cursor.moveToFirst()) {
    blob=cursor.getBlob(7);
    if (blob != null) {
      thumbnail=BitmapFactory.decodeByteArray(blob,0,blob.length);
    }
    item=new MediaItem(cursor.getString(0),new File(cursor.getString(1)),cursor.getLong(2),cursor.getLong(3),cursor.getString(4),cursor.getInt(5),cursor.getInt(6),thumbnail);
  }
  return item;
}"
62869,"public synchronized void removeMediaItem(String path){
  mDb.delete(MEDIA_TABLE_NAME,MEDIA_PATH + ""String_Node_Str"" + path+ ""String_Node_Str"",null);
}","public synchronized void removeMediaItem(String path){
  mDb.delete(MEDIA_TABLE_NAME,MEDIA_PATH + ""String_Node_Str"",new String[]{path});
}"
62870,"@Provides static NewsAdapter providesNewsAdapter(Context context){
  return new NewsAdapter(context);
}","@Provides static NewsAdapter providesNewsAdapter(){
  return new NewsAdapter(App.getAppContext());
}"
62871,"public NewsAdapter(Context context){
  mContext=context;
}","@Inject public NewsAdapter(Context context){
  mContext=context;
}"
62872,"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View view=LayoutInflater.from(mContext).inflate(R.layout.item_news,parent,false);
  return new NewsViewHolder(view);
}","@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View view=LayoutInflater.from(App.getAppContext()).inflate(R.layout.item_news,parent,false);
  return new NewsViewHolder(view);
}"
62873,"@Override protected void initView(View view){
  mNewsAdapter=new NewsAdapter(getActivity());
  topicRecyclerView.setAdapter(mNewsAdapter);
  topicRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  topicRefreshLayout.addEasyEvent(new EasyRefreshLayout.EasyEvent(){
    @Override public void onLoadMore(){
      topicRefreshLayout.loadMoreComplete();
    }
    @Override public void onRefreshing(){
      topicRefreshLayout.refreshComplete();
    }
  }
);
}","@Override protected void initView(View view){
  topicRecyclerView.setAdapter(mNewsAdapter);
  topicRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  topicRefreshLayout.addEasyEvent(new EasyRefreshLayout.EasyEvent(){
    @Override public void onLoadMore(){
      topicRefreshLayout.loadMoreComplete();
    }
    @Override public void onRefreshing(){
      topicRefreshLayout.refreshComplete();
    }
  }
);
}"
62874,"/** 
 * if js invoke the java async ,that the result will be returned by execute a script in the bridge since this method may be invoked not in the main thread ,we send a message using the   {@link Handler} and resolve it in main thread
 * @param callbackId uniqueId which match to an callback function in js
 * @param parameters value that will be pass to js
 */
private void dispatchResult(String callbackId,String parameters){
  if (bridgeWebView == null || bridgeWebView.get() == null) {
    return;
  }
  final String callBackScript=String.format(CALLBACK_FUNCTION,bridgeName,callbackId,parameters);
}","/** 
 * if js invoke the java async ,that the result will be returned by execute a script in the bridge since this method may be invoked not in the main thread ,we send a message using the   {@link Handler} and resolve it in main thread
 * @param callbackId uniqueId which match to an callback function in js
 * @param parameters value that will be pass to js
 */
private void dispatchResult(String callbackId,String parameters){
  if (bridgeWebView == null || bridgeWebView.get() == null) {
    return;
  }
  final String callBackScript=String.format(CALLBACK_FUNCTION,bridgeName,callbackId,parameters);
  executeScriptInMain(callBackScript);
}"
62875,"private static void scheduleNotification(Context context,NotificationDetails notificationDetails,Boolean updateScheduledNotificationsCache){
  Notification notification=createNotification(context,notificationDetails);
  Intent notificationIntent=new Intent(context,ScheduledNotificationReceiver.class);
  notificationIntent.putExtra(NOTIFICATION_ID,notificationDetails.id);
  notificationIntent.putExtra(NOTIFICATION,notification);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,notificationDetails.id,notificationIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  AlarmManager alarmManager=getAlarmManager(context);
  alarmManager.set(AlarmManager.RTC_WAKEUP,notificationDetails.millisecondsSinceEpoch,pendingIntent);
  if (updateScheduledNotificationsCache) {
    ArrayList<NotificationDetails> scheduledNotifications=loadScheduledNotifications(context);
    scheduledNotifications.add(notificationDetails);
    saveScheduledNotifications(context,scheduledNotifications);
  }
}","private static void scheduleNotification(Context context,NotificationDetails notificationDetails,Boolean updateScheduledNotificationsCache){
  setIconResourceId(context,notificationDetails);
  Gson gson=buildGson();
  String notificationDetailsJson=gson.toJson(notificationDetails);
  Intent notificationIntent=new Intent(context,ScheduledNotificationReceiver.class);
  notificationIntent.putExtra(NOTIFICATION_DETAILS,notificationDetailsJson);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,notificationDetails.id,notificationIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  AlarmManager alarmManager=getAlarmManager(context);
  alarmManager.set(AlarmManager.RTC_WAKEUP,notificationDetails.millisecondsSinceEpoch,pendingIntent);
  if (updateScheduledNotificationsCache) {
    ArrayList<NotificationDetails> scheduledNotifications=loadScheduledNotifications(context);
    scheduledNotifications.add(notificationDetails);
    saveScheduledNotifications(context,scheduledNotifications);
  }
}"
62876,"private static void saveScheduledNotifications(Context context,ArrayList<NotificationDetails> scheduledNotifications){
  Gson gson=getGsonBuilder();
  String json=gson.toJson(scheduledNotifications);
  SharedPreferences sharedPreferences=context.getSharedPreferences(SCHEDULED_NOTIFICATIONS,Context.MODE_PRIVATE);
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(SCHEDULED_NOTIFICATIONS,json);
  editor.commit();
}","private static void saveScheduledNotifications(Context context,ArrayList<NotificationDetails> scheduledNotifications){
  Gson gson=buildGson();
  String json=gson.toJson(scheduledNotifications);
  SharedPreferences sharedPreferences=context.getSharedPreferences(SCHEDULED_NOTIFICATIONS,Context.MODE_PRIVATE);
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(SCHEDULED_NOTIFICATIONS,json);
  editor.commit();
}"
62877,"private static ArrayList<NotificationDetails> loadScheduledNotifications(Context context){
  ArrayList<NotificationDetails> scheduledNotifications=new ArrayList<>();
  SharedPreferences sharedPreferences=context.getSharedPreferences(SCHEDULED_NOTIFICATIONS,Context.MODE_PRIVATE);
  String json=sharedPreferences.getString(SCHEDULED_NOTIFICATIONS,null);
  if (json != null) {
    Gson gson=getGsonBuilder();
    Type type=new TypeToken<ArrayList<NotificationDetails>>(){
    }
.getType();
    scheduledNotifications=gson.fromJson(json,type);
  }
  return scheduledNotifications;
}","private static ArrayList<NotificationDetails> loadScheduledNotifications(Context context){
  ArrayList<NotificationDetails> scheduledNotifications=new ArrayList<>();
  SharedPreferences sharedPreferences=context.getSharedPreferences(SCHEDULED_NOTIFICATIONS,Context.MODE_PRIVATE);
  String json=sharedPreferences.getString(SCHEDULED_NOTIFICATIONS,null);
  if (json != null) {
    Gson gson=buildGson();
    Type type=new TypeToken<ArrayList<NotificationDetails>>(){
    }
.getType();
    scheduledNotifications=gson.fromJson(json,type);
  }
  return scheduledNotifications;
}"
62878,"private static void repeatNotification(Context context,NotificationDetails notificationDetails,Boolean updateScheduledNotificationsCache){
  Notification notification=createNotification(context,notificationDetails);
  Intent notificationIntent=new Intent(context,ScheduledNotificationReceiver.class);
  notificationIntent.putExtra(NOTIFICATION_ID,notificationDetails.id);
  notificationIntent.putExtra(NOTIFICATION,notification);
  notificationIntent.putExtra(REPEAT,true);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,notificationDetails.id,notificationIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  AlarmManager alarmManager=getAlarmManager(context);
  long repeatInterval=0;
switch (notificationDetails.repeatInterval) {
case EveryMinute:
    repeatInterval=60000;
  break;
case Hourly:
repeatInterval=60000 * 60;
break;
case Daily:
repeatInterval=60000 * 60 * 24;
break;
case Weekly:
repeatInterval=60000 * 60 * 24* 7;
break;
default :
break;
}
long startTimeMilliseconds=notificationDetails.calledAt;
if (notificationDetails.repeatTime != null) {
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(System.currentTimeMillis());
calendar.set(Calendar.HOUR_OF_DAY,notificationDetails.repeatTime.hour);
calendar.set(Calendar.MINUTE,notificationDetails.repeatTime.minute);
calendar.set(Calendar.SECOND,notificationDetails.repeatTime.second);
if (notificationDetails.day != null) {
calendar.set(Calendar.DAY_OF_WEEK,notificationDetails.day);
}
startTimeMilliseconds=calendar.getTimeInMillis();
}
long currentTime=System.currentTimeMillis();
while (startTimeMilliseconds < currentTime) {
startTimeMilliseconds+=repeatInterval;
}
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,startTimeMilliseconds,repeatInterval,pendingIntent);
if (updateScheduledNotificationsCache) {
ArrayList<NotificationDetails> scheduledNotifications=loadScheduledNotifications(context);
scheduledNotifications.add(notificationDetails);
saveScheduledNotifications(context,scheduledNotifications);
}
}","private static void repeatNotification(Context context,NotificationDetails notificationDetails,Boolean updateScheduledNotificationsCache){
  setIconResourceId(context,notificationDetails);
  Gson gson=buildGson();
  String notificationDetailsJson=gson.toJson(notificationDetails);
  Intent notificationIntent=new Intent(context,ScheduledNotificationReceiver.class);
  notificationIntent.putExtra(NOTIFICATION_DETAILS,notificationDetailsJson);
  notificationIntent.putExtra(REPEAT,true);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,notificationDetails.id,notificationIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  AlarmManager alarmManager=getAlarmManager(context);
  long repeatInterval=0;
switch (notificationDetails.repeatInterval) {
case EveryMinute:
    repeatInterval=60000;
  break;
case Hourly:
repeatInterval=60000 * 60;
break;
case Daily:
repeatInterval=60000 * 60 * 24;
break;
case Weekly:
repeatInterval=60000 * 60 * 24* 7;
break;
default :
break;
}
long startTimeMilliseconds=notificationDetails.calledAt;
if (notificationDetails.repeatTime != null) {
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(System.currentTimeMillis());
calendar.set(Calendar.HOUR_OF_DAY,notificationDetails.repeatTime.hour);
calendar.set(Calendar.MINUTE,notificationDetails.repeatTime.minute);
calendar.set(Calendar.SECOND,notificationDetails.repeatTime.second);
if (notificationDetails.day != null) {
calendar.set(Calendar.DAY_OF_WEEK,notificationDetails.day);
}
startTimeMilliseconds=calendar.getTimeInMillis();
}
long currentTime=System.currentTimeMillis();
while (startTimeMilliseconds < currentTime) {
startTimeMilliseconds+=repeatInterval;
}
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,startTimeMilliseconds,repeatInterval,pendingIntent);
if (updateScheduledNotificationsCache) {
ArrayList<NotificationDetails> scheduledNotifications=loadScheduledNotifications(context);
scheduledNotifications.add(notificationDetails);
saveScheduledNotifications(context,scheduledNotifications);
}
}"
62879,"private static Notification createNotification(Context context,NotificationDetails notificationDetails){
  int resourceId;
  if (notificationDetails.iconResourceId == null) {
    if (notificationDetails.icon != null) {
      resourceId=context.getResources().getIdentifier(notificationDetails.icon,DRAWABLE,context.getPackageName());
    }
 else {
      resourceId=defaultIconResourceId;
    }
    notificationDetails.iconResourceId=resourceId;
  }
 else {
    resourceId=notificationDetails.iconResourceId;
  }
  setupNotificationChannel(context,notificationDetails);
  Intent intent=new Intent(context,getMainActivityClass(context));
  intent.setAction(SELECT_NOTIFICATION);
  intent.putExtra(PAYLOAD,notificationDetails.payload);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,notificationDetails.id,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  DefaultStyleInformation defaultStyleInformation=(DefaultStyleInformation)notificationDetails.styleInformation;
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context,notificationDetails.channelId).setSmallIcon(resourceId).setContentTitle(defaultStyleInformation.htmlFormatTitle ? fromHtml(notificationDetails.title) : notificationDetails.title).setContentText(defaultStyleInformation.htmlFormatBody ? fromHtml(notificationDetails.body) : notificationDetails.body).setAutoCancel(BooleanUtils.getValue(notificationDetails.autoCancel)).setContentIntent(pendingIntent).setPriority(notificationDetails.priority).setOngoing(BooleanUtils.getValue(notificationDetails.ongoing));
  if (!StringUtils.isNullOrEmpty(notificationDetails.largeIcon)) {
    builder.setLargeIcon(getBitmapFromSource(context,notificationDetails.largeIcon,notificationDetails.largeIconBitmapSource));
  }
  if (notificationDetails.color != null) {
    builder.setColor(notificationDetails.color.intValue());
  }
  applyGrouping(notificationDetails,builder);
  setSound(context,notificationDetails,builder);
  setVibrationPattern(notificationDetails,builder);
  setStyle(context,notificationDetails,builder);
  Notification notification=builder.build();
  return notification;
}","public static Notification createNotification(Context context,NotificationDetails notificationDetails){
  setIconResourceId(context,notificationDetails);
  setupNotificationChannel(context,notificationDetails);
  Intent intent=new Intent(context,getMainActivityClass(context));
  intent.setAction(SELECT_NOTIFICATION);
  intent.putExtra(PAYLOAD,notificationDetails.payload);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,notificationDetails.id,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  DefaultStyleInformation defaultStyleInformation=(DefaultStyleInformation)notificationDetails.styleInformation;
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context,notificationDetails.channelId).setSmallIcon(notificationDetails.iconResourceId).setContentTitle(defaultStyleInformation.htmlFormatTitle ? fromHtml(notificationDetails.title) : notificationDetails.title).setContentText(defaultStyleInformation.htmlFormatBody ? fromHtml(notificationDetails.body) : notificationDetails.body).setAutoCancel(BooleanUtils.getValue(notificationDetails.autoCancel)).setContentIntent(pendingIntent).setPriority(notificationDetails.priority).setOngoing(BooleanUtils.getValue(notificationDetails.ongoing));
  if (!StringUtils.isNullOrEmpty(notificationDetails.largeIcon)) {
    builder.setLargeIcon(getBitmapFromSource(context,notificationDetails.largeIcon,notificationDetails.largeIconBitmapSource));
  }
  if (notificationDetails.color != null) {
    builder.setColor(notificationDetails.color.intValue());
  }
  applyGrouping(notificationDetails,builder);
  setSound(context,notificationDetails,builder);
  setVibrationPattern(notificationDetails,builder);
  setStyle(context,notificationDetails,builder);
  Notification notification=builder.build();
  return notification;
}"
62880,"@Override public void onReceive(final Context context,Intent intent){
  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(context);
  Notification notification=intent.getParcelableExtra(FlutterLocalNotificationsPlugin.NOTIFICATION);
  int notificationId=intent.getIntExtra(FlutterLocalNotificationsPlugin.NOTIFICATION_ID,0);
  notificationManager.notify(notificationId,notification);
  boolean repeat=intent.getBooleanExtra(FlutterLocalNotificationsPlugin.REPEAT,false);
  if (repeat) {
    return;
  }
  FlutterLocalNotificationsPlugin.removeNotificationFromCache(notificationId,context);
}","@Override public void onReceive(final Context context,Intent intent){
  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(context);
  String notificationDetailsJson=intent.getStringExtra(FlutterLocalNotificationsPlugin.NOTIFICATION_DETAILS);
  boolean repeat=intent.getBooleanExtra(FlutterLocalNotificationsPlugin.REPEAT,false);
  if (StringUtils.isNullOrEmpty(notificationDetailsJson)) {
    Notification notification=intent.getParcelableExtra(FlutterLocalNotificationsPlugin.NOTIFICATION);
    notification.when=System.currentTimeMillis();
    int notificationId=intent.getIntExtra(FlutterLocalNotificationsPlugin.NOTIFICATION_ID,0);
    notificationManager.notify(notificationId,notification);
    if (repeat) {
      return;
    }
    FlutterLocalNotificationsPlugin.removeNotificationFromCache(notificationId,context);
  }
 else {
    Gson gson=FlutterLocalNotificationsPlugin.buildGson();
    Type type=new TypeToken<NotificationDetails>(){
    }
.getType();
    NotificationDetails notificationDetails=gson.fromJson(notificationDetailsJson,type);
    Notification notification=FlutterLocalNotificationsPlugin.createNotification(context,notificationDetails);
    notificationManager.notify(notificationDetails.id,notification);
    if (repeat) {
      return;
    }
    FlutterLocalNotificationsPlugin.removeNotificationFromCache(notificationDetails.id,context);
  }
}"
62881,"private static NotificationDetails from(Map<String,Object> arguments){
  NotificationDetails notificationDetails=new NotificationDetails();
  notificationDetails.payload=(String)arguments.get(PAYLOAD);
  notificationDetails.id=(Integer)arguments.get(ID);
  notificationDetails.title=(String)arguments.get(TITLE);
  notificationDetails.body=(String)arguments.get(BODY);
  if (arguments.containsKey(MILLISECONDS_SINCE_EPOCH)) {
    notificationDetails.millisecondsSinceEpoch=(Long)arguments.get(MILLISECONDS_SINCE_EPOCH);
  }
  if (arguments.containsKey(CALLED_AT)) {
    notificationDetails.calledAt=(Long)arguments.get(CALLED_AT);
  }
  if (arguments.containsKey(REPEAT_INTERVAL)) {
    notificationDetails.repeatInterval=RepeatInterval.values()[(Integer)arguments.get(REPEAT_INTERVAL)];
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> platformChannelSpecifics=(Map<String,Object>)arguments.get(PLATFORM_SPECIFICS);
  if (platformChannelSpecifics != null) {
    notificationDetails.autoCancel=(Boolean)arguments.get(AUTO_CANCEL);
    notificationDetails.ongoing=(Boolean)arguments.get(ONGOING);
    notificationDetails.style=NotificationStyle.values()[(Integer)platformChannelSpecifics.get(STYLE)];
    ProcessStyleInformation(notificationDetails,platformChannelSpecifics);
    notificationDetails.icon=(String)platformChannelSpecifics.get(ICON);
    notificationDetails.priority=(Integer)platformChannelSpecifics.get(PRIORITY);
    notificationDetails.playSound=(Boolean)platformChannelSpecifics.get(PLAY_SOUND);
    notificationDetails.sound=(String)platformChannelSpecifics.get(SOUND);
    notificationDetails.enableVibration=(Boolean)platformChannelSpecifics.get(ENABLE_VIBRATION);
    notificationDetails.vibrationPattern=(long[])platformChannelSpecifics.get(VIBRATION_PATTERN);
    notificationDetails.groupKey=(String)platformChannelSpecifics.get(GROUP_KEY);
    notificationDetails.setAsGroupSummary=(Boolean)platformChannelSpecifics.get(SET_AS_GROUP_SUMMARY);
    notificationDetails.groupAlertBehavior=(Integer)platformChannelSpecifics.get(GROUP_ALERT_BEHAVIOR);
    getChannelInformation(notificationDetails,platformChannelSpecifics);
  }
  return notificationDetails;
}","public static NotificationDetails from(Map<String,Object> arguments){
  NotificationDetails notificationDetails=new NotificationDetails();
  notificationDetails.payload=(String)arguments.get(PAYLOAD);
  notificationDetails.id=(Integer)arguments.get(ID);
  notificationDetails.title=(String)arguments.get(TITLE);
  notificationDetails.body=(String)arguments.get(BODY);
  if (arguments.containsKey(MILLISECONDS_SINCE_EPOCH)) {
    notificationDetails.millisecondsSinceEpoch=(Long)arguments.get(MILLISECONDS_SINCE_EPOCH);
  }
  if (arguments.containsKey(CALLED_AT)) {
    notificationDetails.calledAt=(Long)arguments.get(CALLED_AT);
  }
  if (arguments.containsKey(REPEAT_INTERVAL)) {
    notificationDetails.repeatInterval=RepeatInterval.values()[(Integer)arguments.get(REPEAT_INTERVAL)];
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> platformChannelSpecifics=(Map<String,Object>)arguments.get(PLATFORM_SPECIFICS);
  if (platformChannelSpecifics != null) {
    notificationDetails.autoCancel=(Boolean)arguments.get(AUTO_CANCEL);
    notificationDetails.ongoing=(Boolean)arguments.get(ONGOING);
    notificationDetails.style=NotificationStyle.values()[(Integer)platformChannelSpecifics.get(STYLE)];
    ProcessStyleInformation(notificationDetails,platformChannelSpecifics);
    notificationDetails.icon=(String)platformChannelSpecifics.get(ICON);
    notificationDetails.priority=(Integer)platformChannelSpecifics.get(PRIORITY);
    notificationDetails.playSound=(Boolean)platformChannelSpecifics.get(PLAY_SOUND);
    notificationDetails.sound=(String)platformChannelSpecifics.get(SOUND);
    notificationDetails.enableVibration=(Boolean)platformChannelSpecifics.get(ENABLE_VIBRATION);
    notificationDetails.vibrationPattern=(long[])platformChannelSpecifics.get(VIBRATION_PATTERN);
    notificationDetails.groupKey=(String)platformChannelSpecifics.get(GROUP_KEY);
    notificationDetails.setAsGroupSummary=(Boolean)platformChannelSpecifics.get(SET_AS_GROUP_SUMMARY);
    notificationDetails.groupAlertBehavior=(Integer)platformChannelSpecifics.get(GROUP_ALERT_BEHAVIOR);
    getChannelInformation(notificationDetails,platformChannelSpecifics);
  }
  return notificationDetails;
}"
62882,"/** 
 * Excluded columns
 * @param columnNames table column name
 * @return AnimaQuery
 */
public AnimaQuery<T> exclude(String... columnNames){
  Collections.addAll(excludedColumns,columnNames);
  return this;
}","/** 
 * Excluded columns by lambda
 * @param functions lambda columns
 * @param < R >
 * @return AnimaQuery
 */
public <R>AnimaQuery<T> exclude(TypeFunction<T,R>... functions){
  String[] columnNames=Arrays.stream(functions).map(AnimaUtils::getLambdaColumnName).collect(Collectors.toList()).toArray(new String[functions.length]);
  return this.exclude(columnNames);
}"
62883,"/** 
 * Build a paging statement
 * @param pageRow page param
 * @return paging sql
 */
private String buildPageSQL(PageRow pageRow){
  SQLParams sqlParams=SQLParams.builder().modelClass(this.modelClass).selectColumns(this.selectColumns).tableName(this.tableName).pkName(this.primaryKeyColumn).conditionSQL(this.conditionSQL).excludedColumns(this.excludedColumns).orderBy(this.orderBySQL.toString()).pageRow(pageRow).build();
  return Anima.me().getDialect().paginate(sqlParams);
}","/** 
 * Build a paging statement
 * @param pageRow page param
 * @return paging sql
 */
private String buildPageSQL(String sql,PageRow pageRow){
  SQLParams sqlParams=SQLParams.builder().modelClass(this.modelClass).selectColumns(this.selectColumns).tableName(this.tableName).pkName(this.primaryKeyColumn).conditionSQL(this.conditionSQL).excludedColumns(this.excludedColumns).customSQL(sql).orderBy(this.orderBySQL.toString()).pageRow(pageRow).build();
  return Anima.me().getDialect().paginate(sqlParams);
}"
62884,"default String select(SQLParams sqlParams){
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  if (AnimaUtils.isNotEmpty(sqlParams.getSelectColumns())) {
    sql.append(' ').append(sqlParams.getSelectColumns()).append(' ');
  }
 else   if (AnimaUtils.isNotEmpty(sqlParams.getExcludedColumns())) {
    sql.append(' ').append(AnimaUtils.buildColumns(sqlParams.getExcludedColumns(),sqlParams.getModelClass())).append(' ');
  }
 else {
    sql.append(""String_Node_Str"");
  }
  sql.append(""String_Node_Str"").append(sqlParams.getTableName());
  if (sqlParams.getConditionSQL().length() > 0) {
    sql.append(""String_Node_Str"").append(sqlParams.getConditionSQL().substring(5));
  }
  if (AnimaUtils.isNotEmpty(sqlParams.getOrderBy())) {
    sql.append(""String_Node_Str"").append(sqlParams.getOrderBy());
  }
  if (sqlParams.isSQLLimit()) {
    sql.append(""String_Node_Str"");
  }
  return sql.toString();
}","default String select(SQLParams sqlParams){
  StringBuilder sql=new StringBuilder();
  if (AnimaUtils.isNotEmpty(sqlParams.getCustomSQL())) {
    sql.append(sqlParams.getCustomSQL());
  }
 else {
    sql.append(""String_Node_Str"");
    if (AnimaUtils.isNotEmpty(sqlParams.getSelectColumns())) {
      sql.append(' ').append(sqlParams.getSelectColumns()).append(' ');
    }
 else     if (AnimaUtils.isNotEmpty(sqlParams.getExcludedColumns())) {
      sql.append(' ').append(AnimaUtils.buildColumns(sqlParams.getExcludedColumns(),sqlParams.getModelClass())).append(' ');
    }
 else {
      sql.append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(sqlParams.getTableName());
    if (sqlParams.getConditionSQL().length() > 0) {
      sql.append(""String_Node_Str"").append(sqlParams.getConditionSQL().substring(5));
    }
  }
  if (AnimaUtils.isNotEmpty(sqlParams.getOrderBy())) {
    sql.append(""String_Node_Str"").append(sqlParams.getOrderBy());
  }
  if (sqlParams.isSQLLimit()) {
    sql.append(""String_Node_Str"");
  }
  return sql.toString();
}"
62885,"@Test public void testPage(){
  Page<User> userPage=select().from(User.class).order(""String_Node_Str"").page(1,3);
  Assert.assertNotNull(userPage);
  Assert.assertEquals(8,userPage.getTotalRows());
  Assert.assertEquals(3,userPage.getTotalPages());
  Assert.assertEquals(3,userPage.getRows().size());
  Assert.assertEquals(1,userPage.getPageNum());
  Assert.assertEquals(1,userPage.getPrevPage());
  Assert.assertEquals(2,userPage.getNextPage());
  Assert.assertTrue(userPage.isHasNextPage());
  Assert.assertFalse(userPage.isHasPrevPage());
}","@Test public void testPage(){
  Page<User> userPage=select().from(User.class).order(""String_Node_Str"").page(1,3);
  Assert.assertNotNull(userPage);
  Assert.assertEquals(8,userPage.getTotalRows());
  Assert.assertEquals(3,userPage.getTotalPages());
  Assert.assertEquals(3,userPage.getRows().size());
  Assert.assertEquals(1,userPage.getPageNum());
  Assert.assertEquals(1,userPage.getPrevPage());
  Assert.assertEquals(2,userPage.getNextPage());
  Assert.assertTrue(userPage.isHasNextPage());
  Assert.assertFalse(userPage.isHasPrevPage());
  select().from(User.class).where(User::getAge).gt(20).order(User::getId,OrderBy.DESC).page(2,3);
}"
62886,"@Test public void testFindBySQL(){
  String name=select().bySQL(String.class,""String_Node_Str"").one();
  Assert.assertNotNull(name);
  List<String> names=select().bySQL(String.class,""String_Node_Str"",3).all();
  Assert.assertNotNull(names);
  Assert.assertEquals(3,names.size());
  Page<User> userPage=select().bySQL(User.class,""String_Node_Str"").page(1,10);
  Assert.assertNotNull(userPage);
}","@Test public void testFindBySQL(){
  String name=select().bySQL(String.class,""String_Node_Str"").one();
  Assert.assertNotNull(name);
  List<String> names=select().bySQL(String.class,""String_Node_Str"",3).all();
  Assert.assertNotNull(names);
  Assert.assertEquals(3,names.size());
}"
62887,"@Test public void testIgnoreAndExclude(){
  User age=select().from(User.class).exclude(""String_Node_Str"").one();
}","@Test public void testIgnoreAndExclude(){
  select().from(User.class).exclude(""String_Node_Str"").one();
  select().from(User.class).exclude(User::getAge).one();
}"
62888,"@Test(description=""String_Node_Str"") public void test(){
  Reporter.log(""String_Node_Str"");
  list.get(0).click();
}","@Test(description=""String_Node_Str"") public void test(){
  element.click();
  driver.pressKeyCode(4);
}"
62889,"@Authod(""String_Node_Str"") @Test(description=""String_Node_Str"") public void test1(){
  if (TestRetryListener.retryCount < 2)   Assert.assertTrue(false);
}","@Authod(""String_Node_Str"") @Test(description=""String_Node_Str"") public void test1(){
  Assert.assertTrue(false);
}"
62890,"private static List<XmlSuite> getTestList(Configure configure){
  List<XmlSuite> testList=new ArrayList<>();
  List<String> devices=CmdUtil.get().getDevices();
  for (int i=0; i < devices.size(); i++) {
    String deviceUdid=devices.get(i);
    testList.add(new XmlSuiteBuilder(i,deviceUdid,CmdUtil.get().getDeviceName(deviceUdid),CmdUtil.get().getPlatformVersion(deviceUdid),configure).build());
  }
  return testList;
}","private static List<XmlSuite> getTestList(Configure configure){
  List<XmlSuite> testList=new ArrayList<>();
  List<String> devices=CmdUtil.get().getDevices();
  for (int i=0; i < devices.size(); i++) {
    String deviceUdid=devices.get(i);
    testList.add(new XmlSuiteBuilder(i,deviceUdid,CmdUtil.get().getDeviceName(deviceUdid),CmdUtil.get().getPlatformVersion(deviceUdid),configure).build());
    CmdUtil.get().clearLog(deviceUdid);
  }
  return testList;
}"
62891,"public String getCrashLog(){
  String crashLog=""String_Node_Str"";
  List<String> results=CmdUtil.get().getCrashLog(deviceUdid,pid);
  for (  String s : results) {
    if (s.contains(""String_Node_Str""))     crashLog=crashLog + s;
  }
  return crashLog;
}","public String getCrashLog(){
  String crashLog=""String_Node_Str"";
  if (isCrash) {
    List<String> results=CmdUtil.get().getCrashLog(deviceUdid);
    for (    String s : results) {
      crashLog=crashLog + s.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  return crashLog;
}"
62892,"public String getAnrLog(){
  return CmdUtil.get().getAnrLog(deviceUdid,pkgName);
}","public String getAnrLog(){
  return CmdUtil.get().getAnrLog(deviceUdid);
}"
62893,"public void start(final Thread mainThread){
  deviceList.add(device);
  monitorTimer=CmdUtil.get().getCpu(deviceUdid,new RuntimeUtil.AsyncInvoke(){
    @Override public void invoke(    String cpu){
      if (!cpu.contains(pkgName + ""String_Node_Str"")) {
        getPid(cpu);
        long traffic=getTraffic(deviceUdid,getUid(cpu));
        cpu=cpu.substring(cpu.lastIndexOf(""String_Node_Str"") - 2,cpu.lastIndexOf(""String_Node_Str"")).trim();
        int mem=CmdUtil.get().getMem(deviceUdid);
        String stackString=getCurStack(mainThread);
        device.setCpu(Integer.valueOf(cpu)).setMem(mem).setTraffic(traffic).setCurStack(stackString);
        System.out.println(""String_Node_Str"" + device.getName() + ""String_Node_Str""+ cpu+ ""String_Node_Str""+ mem+ ""String_Node_Str""+ traffic+ ""String_Node_Str""+ stackString+ ""String_Node_Str"");
      }
    }
  }
);
}","public void start(final Thread mainThread){
  deviceList.add(device);
  monitorTimer=CmdUtil.get().getCpu(deviceUdid,new RuntimeUtil.AsyncInvoke(){
    @Override public void invoke(    String cpu){
      if (cpu.equals(Constant.APP_NOT_STARTING)) {
        System.out.println(Constant.APP_NOT_STARTING);
        isCrash=true;
        return;
      }
      isCrash=false;
      getPid(cpu);
      long traffic=getTraffic(deviceUdid,getUid(cpu));
      cpu=cpu.substring(cpu.lastIndexOf(""String_Node_Str"") - 2,cpu.lastIndexOf(""String_Node_Str"")).trim();
      int mem=CmdUtil.get().getMem(deviceUdid);
      String stackString=getCurStack(mainThread);
      device.setCpu(Integer.valueOf(cpu)).setMem(mem).setTraffic(traffic).setCurStack(stackString);
      System.out.println(""String_Node_Str"" + device.getName() + ""String_Node_Str""+ cpu+ ""String_Node_Str""+ mem+ ""String_Node_Str""+ traffic+ ""String_Node_Str""+ stackString+ ""String_Node_Str"");
    }
  }
);
}"
62894,"@Override public void invoke(String cpu){
  if (!cpu.contains(pkgName + ""String_Node_Str"")) {
    getPid(cpu);
    long traffic=getTraffic(deviceUdid,getUid(cpu));
    cpu=cpu.substring(cpu.lastIndexOf(""String_Node_Str"") - 2,cpu.lastIndexOf(""String_Node_Str"")).trim();
    int mem=CmdUtil.get().getMem(deviceUdid);
    String stackString=getCurStack(mainThread);
    device.setCpu(Integer.valueOf(cpu)).setMem(mem).setTraffic(traffic).setCurStack(stackString);
    System.out.println(""String_Node_Str"" + device.getName() + ""String_Node_Str""+ cpu+ ""String_Node_Str""+ mem+ ""String_Node_Str""+ traffic+ ""String_Node_Str""+ stackString+ ""String_Node_Str"");
  }
}","@Override public void invoke(String cpu){
  if (cpu.equals(Constant.APP_NOT_STARTING)) {
    System.out.println(Constant.APP_NOT_STARTING);
    isCrash=true;
    return;
  }
  isCrash=false;
  getPid(cpu);
  long traffic=getTraffic(deviceUdid,getUid(cpu));
  cpu=cpu.substring(cpu.lastIndexOf(""String_Node_Str"") - 2,cpu.lastIndexOf(""String_Node_Str"")).trim();
  int mem=CmdUtil.get().getMem(deviceUdid);
  String stackString=getCurStack(mainThread);
  device.setCpu(Integer.valueOf(cpu)).setMem(mem).setTraffic(traffic).setCurStack(stackString);
  System.out.println(""String_Node_Str"" + device.getName() + ""String_Node_Str""+ cpu+ ""String_Node_Str""+ mem+ ""String_Node_Str""+ traffic+ ""String_Node_Str""+ stackString+ ""String_Node_Str"");
}"
62895,"@Override public void onFinish(ITestContext testContext){
  super.onFinish(testContext);
  Iterator<ITestResult> skippedTests=testContext.getSkippedTests().getAllResults().iterator();
  while (skippedTests.hasNext()) {
    ITestResult skippedTest=skippedTests.next();
    if (testContext.getSkippedTests().getResults(skippedTest.getMethod()).size() > 1) {
      skippedTests.remove();
    }
 else {
      String skipRunCount=""String_Node_Str"";
      List<String> list=Reporter.getOutput(skippedTest);
      for (      String s : list) {
        if (s.contains(""String_Node_Str"")) {
          skipRunCount=s;
        }
      }
      for (      ITestResult passedTest : testContext.getPassedTests().getAllResults()) {
        if (getId(skippedTest) == getId(passedTest)) {
          Reporter.setCurrentTestResult(passedTest);
          Reporter.log(skipRunCount);
          skippedTests.remove();
        }
      }
      for (      ITestResult failTest : testContext.getFailedTests().getAllResults()) {
        if (getId(skippedTest) == getId(failTest)) {
          Reporter.setCurrentTestResult(failTest);
          Reporter.log(skipRunCount);
          skippedTests.remove();
        }
      }
    }
  }
}","@Override public void onFinish(ITestContext testContext){
  super.onFinish(testContext);
  Iterator<ITestResult> skippedTests=testContext.getSkippedTests().getAllResults().iterator();
  while (skippedTests.hasNext()) {
    ITestResult skippedTest=skippedTests.next();
    int skipRunCount=1;
    List<String> list=Reporter.getOutput(skippedTest);
    for (    String s : list) {
      if (s.contains(""String_Node_Str"")) {
        skipRunCount=Integer.valueOf(s.replace(""String_Node_Str"",""String_Node_Str""));
      }
    }
    if (skipRunCount == TestRetryListener.maxRetryCount + 1) {
      for (      ITestResult passedTest : testContext.getPassedTests().getAllResults()) {
        if (getId(skippedTest) == getId(passedTest)) {
          Reporter.setCurrentTestResult(passedTest);
        }
      }
      for (      ITestResult failTest : testContext.getFailedTests().getAllResults()) {
        if (getId(skippedTest) == getId(failTest)) {
          Reporter.setCurrentTestResult(failTest);
        }
      }
      Reporter.log(""String_Node_Str"" + skipRunCount);
    }
    skippedTests.remove();
  }
}"
62896,"@BeforeClass public void entry(){
  list.get(0).click();
}","@Test public void entry(){
  list.get(0).click();
}"
62897,"@Unbind(aggregate=true,optional=true) public void unbindActor(IActor actor){
  log.info(""String_Node_Str"" + actor);
  if (actor == null)   return;
  String[] ctxpaths=actor.getWebPaths();
  if (ctxpaths != null) {
    for (    String ctxpath : ctxpaths) {
      servlets.remove(ctxpath);
      for (      HttpService s : services) {
        try {
          s.unregister(ctxpath);
        }
 catch (        Exception e) {
        }
        log.info(""String_Node_Str"" + ctxpath);
      }
    }
  }
}","@Unbind(aggregate=true,optional=true) public void unbindActor(IActor actor){
  log.info(""String_Node_Str"" + actor);
  if (actor == null)   return;
  String[] ctxpaths=actor.getWebPaths();
  String rootpath=prop.get(""String_Node_Str"",""String_Node_Str"");
  if (rootpath.endsWith(""String_Node_Str"")) {
    rootpath=rootpath.substring(0,rootpath.length() - 1);
  }
  if (ctxpaths != null) {
    for (    String ctxpath : ctxpaths) {
      servlets.remove(rootpath + ctxpath);
      for (      HttpService s : services) {
        try {
          s.unregister(rootpath + ctxpath);
        }
 catch (        Exception e) {
        }
        log.info(""String_Node_Str"" + ctxpath);
      }
    }
  }
}"
62898,"@Override public Object selectOneByExample(Object example){
  return daosupport.selectOneByExample(SerializerUtil.serialize(example));
}","@Override public Object selectOneByExample(Object example){
  return SerializerUtil.deserialize(daosupport.selectOneByExample(SerializerUtil.serialize(example)),domainClazz);
}"
62899,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>T _deserialize(Object object,Class<T> clazz,int depth){
  if (object == null)   return null;
  if (depth++ >= maxdeep) {
    log.warn(""String_Node_Str"" + (depth - 1) + ""String_Node_Str""+ clazz);
    return null;
  }
  if (isBaseType(clazz))   return (T)object;
  if (clazz.getClassLoader() == null)   return (T)object;
  if (!(object instanceof BeanMap)) {
    return (T)object;
  }
  T t=null;
  try {
    t=clazz.newInstance();
    BeanMap<String,Object> mb=(BeanMap<String,Object>)object;
    List<BeanProp> getsetMethods=extractMethods(clazz);
    for (    BeanProp bp : getsetMethods) {
      if (!mb.containsKey(bp.fieldName)) {
        continue;
      }
      Object v=mb.get(bp.fieldName);
      if (bp.isBasicType || v == null) {
        bp.setM.invoke(t,v);
      }
 else       if (v instanceof List) {
        Type type=((ParameterizedType)bp.field.getGenericType()).getActualTypeArguments()[0];
        bp.setM.invoke(t,deserializeArray(v,(Class)type));
      }
 else       if (v instanceof BeanMap) {
        bp.setM.invoke(t,_deserialize(v,(Class)bp.fieldType,depth));
      }
 else       if (v instanceof HashMap) {
        Type types[]=((ParameterizedType)bp.field.getGenericType()).getActualTypeArguments();
        HashMap<Object,Object> newhash=new HashMap<Object,Object>();
        for (        Entry<Object,Object> entry : ((HashMap<Object,Object>)v).entrySet()) {
          newhash.put(deserialize(entry.getKey(),(Class)types[0]),_deserialize(entry.getValue(),(Class)types[1],depth));
        }
        bp.setM.invoke(t,newhash);
      }
 else {
        bp.setM.invoke(t,_serialize(v,depth));
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"" + object + ""String_Node_Str""+ clazz+ ""String_Node_Str"",e);
  }
  return t;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>T _deserialize(Object object,Class<T> clazz,int depth){
  if (object == null)   return null;
  if (depth++ >= maxdeep) {
    log.warn(""String_Node_Str"" + (depth - 1) + ""String_Node_Str""+ clazz);
    return null;
  }
  if (isBaseType(clazz))   return (T)object;
  if (clazz.getClassLoader() == null)   return (T)object;
  if (!(object instanceof BeanMap)) {
    return (T)object;
  }
  T t=null;
  try {
    t=clazz.newInstance();
    BeanMap<String,Object> mb=(BeanMap<String,Object>)object;
    List<BeanProp> getsetMethods=extractMethods(clazz);
    for (    BeanProp bp : getsetMethods) {
      if (!mb.containsKey(bp.fieldName)) {
        continue;
      }
      Object v=mb.get(bp.fieldName);
      if (bp.isBasicType || v == null) {
        bp.setM.invoke(t,v);
      }
 else       if (v instanceof List) {
        List orginallist=(List)v;
        if (isBaseType(orginallist.get(0).getClass())) {
          bp.setM.invoke(t,v);
        }
 else {
          Type type=((ParameterizedType)bp.field.getGenericType()).getActualTypeArguments()[0];
          if (type == Map.class) {
            bp.setM.invoke(t,v);
          }
 else {
            List list2=new ArrayList<>();
            Class transclazz=clazz;
            if (type instanceof Class) {
              transclazz=(Class)type;
            }
 else {
              Type tType=((ParameterizedType)clazz.getGenericSuperclass()).getActualTypeArguments()[0];
              transclazz=(Class)tType;
            }
            for (            Object obj : orginallist) {
              Map<String,Object> map=(Map<String,Object>)obj;
              list2.add(deserialize(map,(Class)transclazz));
            }
            bp.setM.invoke(t,list2);
          }
        }
      }
 else       if (v instanceof BeanMap) {
        bp.setM.invoke(t,_deserialize(v,(Class)bp.fieldType,depth));
      }
 else       if (v instanceof HashMap) {
        Type types[]=((ParameterizedType)bp.field.getGenericType()).getActualTypeArguments();
        HashMap<Object,Object> newhash=new HashMap<Object,Object>();
        for (        Entry<Object,Object> entry : ((HashMap<Object,Object>)v).entrySet()) {
          newhash.put(deserialize(entry.getKey(),(Class)types[0]),_deserialize(entry.getValue(),(Class)types[1],depth));
        }
        bp.setM.invoke(t,newhash);
      }
 else {
        bp.setM.invoke(t,_serialize(v,depth));
      }
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"" + object + ""String_Node_Str""+ clazz+ ""String_Node_Str"",e);
  }
  return t;
}"
62900,"@Override public Object selectOneByExample(Object example){
  return daoSupport.selectOneByExample(example);
}","@Override public Object selectOneByExample(Object example){
  return serial(daoSupport.selectOneByExample(localExample(example)));
}"
62901,"@Override public Object selectOneByExample(Object key){
  return daosupport.selectOneByExample(key);
}","@Override public Object selectOneByExample(Object example){
  return daosupport.selectOneByExample(SerializerUtil.serialize(example));
}"
62902,"public static String getCurrNodeID(){
  getPropInstance().get(""String_Node_Str"",POSIXFactory.getPOSIX().getpid() + ""String_Node_Str"" + getHostName());
  return ""String_Node_Str"";
}","public static String getCurrNodeID(){
  return getPropInstance().get(""String_Node_Str"",POSIXFactory.getPOSIX().getpid() + ""String_Node_Str"" + getHostName());
}"
62903,"public void routePacket(FramePacket pack,final CompleteHandler handler){
  String destTO=pack.getExtStrProp(PackHeader.TO);
  ModuleSession ms=null;
  if (StringUtils.isNotBlank(destTO)) {
    ms=mss.byModuleAndNodeID(pack.getModule(),destTO);
  }
 else {
    ms=mss.byModule(pack.getModule());
  }
  if (ms != null) {
    ms.onPacket(pack,handler);
  }
 else {
    if (pack.isSync()) {
      handler.onFinished(PacketHelper.toPBReturn(pack,new UnknowModuleBody(pack.getModule() + ""String_Node_Str"" + destTO,pack)));
    }
  }
}","public void routePacket(FramePacket pack,final CompleteHandler handler){
  String destTO=pack.getExtStrProp(PACK_TO);
  ModuleSession ms=null;
  if (StringUtils.isNotBlank(destTO)) {
    ms=mss.byModuleAndNodeID(pack.getModule(),destTO);
  }
 else {
    if (pack.getExtProp(PACK_FROM) != null) {
      ms=mss.getLocalModuleSession(pack.getModule());
    }
 else {
      ms=mss.byModule(pack.getModule());
    }
  }
  if (ms != null) {
    ms.onPacket(pack,handler);
  }
 else {
    if (pack.isSync()) {
      handler.onFinished(PacketHelper.toPBReturn(pack,new UnknowModuleBody(pack.getModule() + ""String_Node_Str"" + destTO,pack)));
    }
  }
}"
62904,"@Override public NextAction handleRead(final FilterChainContext ctx) throws IOException {
  final FramePacket pack=ctx.getMessage();
  if (pack == null) {
    return ctx.getInvokeAction();
  }
  long start=System.currentTimeMillis();
  log.trace(""String_Node_Str"" + pack.getGlobalCMD() + ""String_Node_Str""+ ctx.getConnection().getPeerAddress()+ ""String_Node_Str""+ pack.getFixHead()+ ""String_Node_Str""+ oimpl);
  CompleteHandler handler=null;
  if (pack.isSync()) {
    final Connection conn=ctx.getConnection();
    handler=new CompleteHandler(){
      @Override public void onFinished(      FramePacket vpacket){
        if (conn.isOpen()) {
          try {
            conn.write(vpacket);
          }
 catch (          Exception e) {
            log.error(""String_Node_Str"" + vpacket + ""String_Node_Str""+ pack+ ""String_Node_Str""+ ctx+ ""String_Node_Str""+ ctx.getFilterChain(),e);
          }
        }
      }
    }
;
  }
 else {
    handler=new CompleteHandler(){
      @Override public void onFinished(      FramePacket packet){
        log.warn(""String_Node_Str"" + packet);
      }
    }
;
  }
  oimpl.onPacket(pack,handler,ctx.getConnection());
  log.info(""String_Node_Str"" + pack.getCMD() + ""String_Node_Str""+ pack.getModule()+ ""String_Node_Str""+ ctx.getConnection().getPeerAddress()+ ""String_Node_Str""+ ctx.getConnection().getLocalAddress()+ ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  return ctx.getStopAction();
}","@Override public NextAction handleRead(final FilterChainContext ctx) throws IOException {
  final FramePacket pack=ctx.getMessage();
  if (pack == null) {
    return ctx.getInvokeAction();
  }
  long start=System.currentTimeMillis();
  log.trace(""String_Node_Str"" + pack.getGlobalCMD() + ""String_Node_Str""+ ctx.getConnection().getPeerAddress()+ ""String_Node_Str""+ pack.getFixHead()+ ""String_Node_Str""+ oimpl);
  CompleteHandler handler=null;
  if (pack.isSync()) {
    final Connection conn=ctx.getConnection();
    handler=new CompleteHandler(){
      @Override public void onFinished(      FramePacket vpacket){
        if (conn.isOpen()) {
          try {
            String packfrom=vpacket.getExtStrProp(OSocketImpl.PACK_FROM);
            log.debug(""String_Node_Str"" + packfrom);
            vpacket.putHeader(OSocketImpl.PACK_TO,packfrom);
            vpacket.getExtHead().reset();
            vpacket.getExtHead().genBytes();
            conn.write(vpacket);
          }
 catch (          Exception e) {
            log.error(""String_Node_Str"" + vpacket + ""String_Node_Str""+ pack+ ""String_Node_Str""+ ctx+ ""String_Node_Str""+ ctx.getFilterChain(),e);
          }
        }
      }
    }
;
  }
 else {
    handler=new CompleteHandler(){
      @Override public void onFinished(      FramePacket packet){
        log.warn(""String_Node_Str"" + packet);
      }
    }
;
  }
  oimpl.onPacket(pack,handler,ctx.getConnection());
  log.info(""String_Node_Str"" + pack.getCMD() + ""String_Node_Str""+ pack.getModule()+ ""String_Node_Str""+ ctx.getConnection().getPeerAddress()+ ""String_Node_Str""+ ctx.getConnection().getLocalAddress()+ ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  return ctx.getStopAction();
}"
62905,"public synchronized ModuleSession addModule(String moduleid,String nodeid,Connection conn){
  ReusefulMapPool<String,ModuleSession> pool=sessionByModule.get(moduleid);
  if (pool == null) {
    pool=new ReusefulMapPool<String,ModuleSession>();
    sessionByModule.put(moduleid,pool);
  }
  ModuleSession ms=pool.getByKey(nodeid);
  if (ms == null) {
    if (nodeid.equals(currentNodeID)) {
      ms=new ModuleSession(moduleid);
    }
 else {
      ms=new RemoteModuleSession(moduleid,nodeid,this);
    }
    pool.addObject(nodeid,ms);
  }
  if (ms instanceof RemoteModuleSession) {
    RemoteModuleSession rms=(RemoteModuleSession)ms;
    rms.addConnection(conn);
  }
  return ms;
}","public synchronized ModuleSession addModule(String moduleid,String nodeid,Connection conn){
  ReusefulMapPool<String,ModuleSession> pool=sessionByModule.get(moduleid);
  if (pool == null) {
    pool=new ReusefulMapPool<String,ModuleSession>();
    sessionByModule.put(moduleid,pool);
  }
  ModuleSession ms=pool.getByKey(nodeid);
  if (ms == null) {
    if (nodeid.equals(currentNodeID)) {
      ms=new ModuleSession(moduleid);
      localsessionByModule.put(moduleid,ms);
    }
 else {
      ms=new RemoteModuleSession(moduleid,nodeid,this);
    }
    pool.addObject(nodeid,ms);
  }
  if (ms instanceof RemoteModuleSession) {
    RemoteModuleSession rms=(RemoteModuleSession)ms;
    rms.addConnection(conn);
  }
  return ms;
}"
62906,"@Override public void onPacket(final FramePacket pack,final CompleteHandler handler){
  FutureImpl<FramePacket> future=null;
  String packid=null;
  if (pack.isSync()) {
    packid=genPackID();
    if (pack.getExtHead().isExist(packIDKey)) {
      String expackid=pack.getExtStrProp(packIDKey);
      future=packMaps.remove(expackid);
      if (future != null) {
        pack.getExtHead().remove(packIDKey);
        future.result(pack);
      }
 else {
        log.warn(""String_Node_Str"" + expackid + ""String_Node_Str""+ this.getModule()+ ""String_Node_Str""+ pack.getExtProp(packIDKey));
        handler.onFinished(PacketHelper.toPBReturn(pack,new LoopPackBody(packIDKey,pack)));
      }
      return;
    }
    future=Futures.createSafeFuture();
    pack.putHeader(packIDKey,packid);
    packMaps.put(packid,future);
    log.debug(""String_Node_Str"" + packid + ""String_Node_Str""+ mss.currentNodeID+ ""String_Node_Str""+ this+ ""String_Node_Str""+ packMaps.size());
  }
 else {
    log.debug(""String_Node_Str"" + ""String_Node_Str"" + mss.currentNodeID + ""String_Node_Str""+ this+ ""String_Node_Str""+ packMaps.size());
  }
  for (int i=0; i < 3; i++) {
    try {
      Connection conn=connsPool.get();
      if (conn != null) {
        connsPool.get().write(pack);
        break;
      }
 else {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + pack,e);
      if (packid != null) {
        packMaps.remove(packid);
      }
      throw new MessageException(e);
    }
  }
  if (pack.isSync()) {
    future.addCompletionHandler(new CompletionHandler<FramePacket>(){
      @Override public void updated(      FramePacket result){
      }
      @Override public void failed(      Throwable throwable){
        handler.onFinished(PacketHelper.toPBReturn(pack,new SendFailedBody(packIDKey,pack)));
      }
      @Override public void completed(      FramePacket result){
        handler.onFinished(result);
      }
      @Override public void cancelled(){
        handler.onFinished(PacketHelper.toPBReturn(pack,new SendFailedBody(packIDKey,pack)));
      }
    }
);
  }
}","@Override public void onPacket(final FramePacket pack,final CompleteHandler handler){
  FutureImpl<FramePacket> future=null;
  String packid=null;
  if (pack.isSync()) {
    if (pack.getExtHead().isExist(packIDKey)) {
      String expackid=pack.getExtStrProp(packIDKey);
      future=packMaps.remove(expackid);
      if (future != null) {
        Object opackid=pack.getExtHead().remove(packIDKey);
        Object ofrom=pack.getExtHead().remove(OSocketImpl.PACK_FROM);
        Object oto=pack.getExtHead().remove(OSocketImpl.PACK_TO);
        log.debug(""String_Node_Str"" + ofrom + ""String_Node_Str""+ oto+ ""String_Node_Str""+ opackid);
        future.result(pack);
      }
 else {
        log.warn(""String_Node_Str"" + expackid + ""String_Node_Str""+ this.getModule()+ ""String_Node_Str""+ pack.getExtProp(packIDKey));
        handler.onFinished(PacketHelper.toPBReturn(pack,new LoopPackBody(packIDKey,pack)));
      }
      return;
    }
    packid=genPackID();
    future=Futures.createSafeFuture();
    pack.putHeader(packIDKey,packid);
    packMaps.put(packid,future);
    pack.putHeader(OSocketImpl.PACK_FROM,remoteNodeID);
    future.addCompletionHandler(new CompletionHandler<FramePacket>(){
      @Override public void updated(      FramePacket result){
      }
      @Override public void failed(      Throwable throwable){
        handler.onFinished(PacketHelper.toPBReturn(pack,new SendFailedBody(packIDKey,pack)));
      }
      @Override public void completed(      FramePacket result){
        handler.onFinished(result);
      }
      @Override public void cancelled(){
        handler.onFinished(PacketHelper.toPBReturn(pack,new SendFailedBody(packIDKey,pack)));
      }
    }
);
    log.debug(""String_Node_Str"" + packid + ""String_Node_Str""+ mss.currentNodeID+ ""String_Node_Str""+ this+ ""String_Node_Str""+ packMaps.size());
  }
 else {
    log.debug(""String_Node_Str"" + ""String_Node_Str"" + mss.currentNodeID + ""String_Node_Str""+ this+ ""String_Node_Str""+ packMaps.size());
  }
  for (int i=0; i < 3; i++) {
    try {
      Connection conn=connsPool.get();
      if (conn != null) {
        connsPool.get().write(pack);
        break;
      }
 else {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + pack,e);
      if (packid != null) {
        packMaps.remove(packid);
      }
      throw new MessageException(e);
    }
  }
}"
62907,"protected boolean isAccessAllowed(ServletRequest servletRequest,ServletResponse servletResponse,Object mappedValue) throws Exception {
  Subject subject=getSubject(servletRequest,servletResponse);
  LogExeManager.getInstance().executeLogTask(LogTaskFactory.bussinssLog(WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str""),WebUtils.toHttp(servletRequest).getRequestURI(),WebUtils.toHttp(servletRequest).getMethod(),(short)1,null));
  if ((null == subject || !subject.isAuthenticated()) && isJwtSubmission(servletRequest)) {
    AuthenticationToken token=createJwtToken(servletRequest);
    try {
      subject.login(token);
      return this.checkRoles(subject,mappedValue);
    }
 catch (    AuthenticationException e) {
      if (e.getMessage().equals(""String_Node_Str"")) {
        String appId=WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str"");
        String jwt=WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str"");
        String refreshJwt=redisTemplate.opsForValue().get(""String_Node_Str"" + appId);
        if (null != refreshJwt && refreshJwt.equals(jwt)) {
          String roles=accountService.loadAccountRole(appId);
          long refreshPeriodTime=36000L;
          String newJwt=JsonWebTokenUtil.issueJWT(UUID.randomUUID().toString(),appId,""String_Node_Str"",refreshPeriodTime >> 2,roles,null,SignatureAlgorithm.HS512);
          redisTemplate.opsForValue().set(""String_Node_Str"" + appId,newJwt,refreshPeriodTime,TimeUnit.SECONDS);
          Message message=new Message().ok(1005,""String_Node_Str"").addData(""String_Node_Str"",newJwt);
          RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
          return false;
        }
 else {
          Message message=new Message().error(1006,""String_Node_Str"");
          RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
          return false;
        }
      }
      Message message=new Message().error(1007,""String_Node_Str"");
      RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
      return false;
    }
catch (    Exception e) {
      LOGGER.error(IpUtil.getIpFromRequest(WebUtils.toHttp(servletRequest)) + ""String_Node_Str"" + e.getMessage(),e);
      Message message=new Message().error(1007,""String_Node_Str"");
      RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
      return false;
    }
  }
 else {
    Message message=new Message().error(1111,""String_Node_Str"");
    RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
    return false;
  }
}","protected boolean isAccessAllowed(ServletRequest servletRequest,ServletResponse servletResponse,Object mappedValue) throws Exception {
  Subject subject=getSubject(servletRequest,servletResponse);
  LogExeManager.getInstance().executeLogTask(LogTaskFactory.bussinssLog(WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str""),WebUtils.toHttp(servletRequest).getRequestURI(),WebUtils.toHttp(servletRequest).getMethod(),(short)1,null));
  if ((null != subject && !subject.isAuthenticated()) && isJwtSubmission(servletRequest)) {
    AuthenticationToken token=createJwtToken(servletRequest);
    try {
      subject.login(token);
      return this.checkRoles(subject,mappedValue);
    }
 catch (    AuthenticationException e) {
      if (e.getMessage().equals(""String_Node_Str"")) {
        String appId=WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str"");
        String jwt=WebUtils.toHttp(servletRequest).getHeader(""String_Node_Str"");
        String refreshJwt=redisTemplate.opsForValue().get(""String_Node_Str"" + appId);
        if (null != refreshJwt && refreshJwt.equals(jwt)) {
          String roles=accountService.loadAccountRole(appId);
          long refreshPeriodTime=36000L;
          String newJwt=JsonWebTokenUtil.issueJWT(UUID.randomUUID().toString(),appId,""String_Node_Str"",refreshPeriodTime >> 2,roles,null,SignatureAlgorithm.HS512);
          redisTemplate.opsForValue().set(""String_Node_Str"" + appId,newJwt,refreshPeriodTime,TimeUnit.SECONDS);
          Message message=new Message().ok(1005,""String_Node_Str"").addData(""String_Node_Str"",newJwt);
          RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
          return false;
        }
 else {
          Message message=new Message().error(1006,""String_Node_Str"");
          RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
          return false;
        }
      }
      Message message=new Message().error(1007,""String_Node_Str"");
      RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
      return false;
    }
catch (    Exception e) {
      LOGGER.error(IpUtil.getIpFromRequest(WebUtils.toHttp(servletRequest)) + ""String_Node_Str"" + e.getMessage(),e);
      Message message=new Message().error(1007,""String_Node_Str"");
      RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
      return false;
    }
  }
 else {
    Message message=new Message().error(1111,""String_Node_Str"");
    RequestResponseUtil.responseWrite(JSON.toJSONString(message),servletResponse);
    return false;
  }
}"
62908,"public Configuration build() throws IOException {
  List<Library> libs=new ArrayList<>();
  for (  Library.Reference ref : libraries) {
    Library file=ref.getLibrary(uri,path,signer);
    for (    Library l : libs) {
      if (Files.isSameFile(l.getPath(),file.getPath())) {
        throw new IllegalStateException(""String_Node_Str"" + l.getPath());
      }
    }
    libs.add(file);
  }
  Configuration config=new Configuration();
  config.baseUri=uri;
  config.basePath=path;
  config.updateHandler=updateHandler;
  config.launcher=launcher;
  config.libraries=libs;
  config.unmodifiableLibraries=Collections.unmodifiableList(config.libraries);
  config.properties=properties;
  config.unmodifiableProperties=Collections.unmodifiableList(config.properties);
  Map<String,String> resolved=PropertyUtils.extractPropertiesForCurrentMachine(systemProperties,properties);
  resolved=PropertyUtils.resolveDependencies(resolved);
  config.resolvedProperties=resolved;
  config.unmodifiableResolvedProperties=Collections.unmodifiableMap(config.resolvedProperties);
  return config;
}","public Configuration build() throws IOException {
  List<Library> libs=new ArrayList<>();
  for (  Library.Reference ref : libraries) {
    Library file=ref.getLibrary(uri,path,signer);
    for (    Library l : libs) {
      if (Files.isSameFile(l.getPath(),file.getPath())) {
        throw new IllegalStateException(""String_Node_Str"" + l.getPath());
      }
    }
    libs.add(file);
  }
  Configuration config=new Configuration();
  if (uri != null)   config.baseUri=uri;
  if (path != null)   config.basePath=path;
  config.updateHandler=updateHandler;
  config.launcher=launcher;
  config.libraries=libs;
  config.unmodifiableLibraries=Collections.unmodifiableList(config.libraries);
  config.properties=properties;
  config.unmodifiableProperties=Collections.unmodifiableList(config.properties);
  Map<String,String> resolved=PropertyUtils.extractPropertiesForCurrentMachine(systemProperties,properties);
  resolved=PropertyUtils.resolveDependencies(resolved);
  config.resolvedProperties=resolved;
  config.unmodifiableResolvedProperties=Collections.unmodifiableMap(config.resolvedProperties);
  return config;
}"
62909,"@Override protected void addEventEmitters(ThemedReactContext reactContext,final ReactSmartRefreshLayout view){
  view.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(    RefreshLayout refreshLayout){
    }
  }
);
  view.setOnMultiPurposeListener(new SimpleMultiPurposeListener(){
    private int getTargetId(){
      return view.getId();
    }
    @Override public void onHeaderPulling(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_PULLING.toString(),writableMap);
    }
    @Override public void onHeaderReleased(    RefreshHeader header,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASED.toString(),writableMap);
    }
    @Override public void onHeaderReleasing(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASING.toString(),writableMap);
    }
    @Override public void onHeaderStartAnimator(    RefreshHeader header,    int headerHeight,    int extendHeight){
    }
    @Override public void onHeaderFinish(    RefreshHeader header,    boolean success){
    }
    @Override public void onLoadMore(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.LOAD_MORE.toString(),null);
    }
    @Override public void onRefresh(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.REFRESH.toString(),null);
    }
    @Override public void onStateChanged(    RefreshLayout refreshLayout,    RefreshState oldState,    RefreshState newState){
switch (newState) {
case None:
case PullDownToRefresh:
        mEventEmitter.receiveEvent(getTargetId(),Events.PULL_DOWN_TO_REFRESH.toString(),null);
      break;
case Refreshing:
    break;
case ReleaseToRefresh:
  mEventEmitter.receiveEvent(getTargetId(),Events.RELEASE_TO_REFRESH.toString(),null);
break;
}
}
}
);
}","@Override protected void addEventEmitters(ThemedReactContext reactContext,final ReactSmartRefreshLayout view){
  view.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(    RefreshLayout refreshLayout){
    }
  }
);
  view.setOnMultiPurposeListener(new SimpleMultiPurposeListener(){
    private int getTargetId(){
      return view.getId();
    }
    @Override public void onHeaderPulling(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_PULLING.toString(),writableMap);
    }
    @Override public void onHeaderReleased(    RefreshHeader header,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASED.toString(),writableMap);
    }
    @Override public void onHeaderReleasing(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASING.toString(),writableMap);
    }
    @Override public void onFooterPulling(    RefreshFooter footer,    float percent,    int offset,    int footerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(footerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.FOOTER_MOVING.toString(),writableMap);
    }
    @Override public void onFooterReleasing(    RefreshFooter footer,    float percent,    int offset,    int footerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(footerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.FOOTER_MOVING.toString(),writableMap);
    }
    @Override public void onHeaderStartAnimator(    RefreshHeader header,    int headerHeight,    int extendHeight){
    }
    @Override public void onHeaderFinish(    RefreshHeader header,    boolean success){
    }
    @Override public void onLoadMore(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.LOAD_MORE.toString(),null);
    }
    @Override public void onRefresh(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.REFRESH.toString(),null);
    }
    @Override public void onStateChanged(    RefreshLayout refreshLayout,    RefreshState oldState,    RefreshState newState){
switch (newState) {
case None:
case PullDownToRefresh:
        mEventEmitter.receiveEvent(getTargetId(),Events.PULL_DOWN_TO_REFRESH.toString(),null);
      break;
case Refreshing:
    break;
case ReleaseToRefresh:
  mEventEmitter.receiveEvent(getTargetId(),Events.RELEASE_TO_REFRESH.toString(),null);
break;
}
}
}
);
}"
62910,"private void initView(Context context){
  setGravity(Gravity.CENTER);
  mHeaderText=new TextView(context);
  mHeaderText.setText(""String_Node_Str"");
  mProgressDrawable=new ProgressDrawable();
  mArrowView=new PathsView(context);
  mProgressView=new ImageView(context);
  mProgressView.setImageDrawable(mProgressDrawable);
  mArrowView.parserColors(0xff666666);
  mArrowView.parserPaths(""String_Node_Str"");
  addView(mProgressView,DensityUtil.dp2px(20),DensityUtil.dp2px(20));
  addView(mArrowView,DensityUtil.dp2px(20),DensityUtil.dp2px(20));
  addView(new View(context),DensityUtil.dp2px(20),DensityUtil.dp2px(20));
  addView(mHeaderText,LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  setMinimumHeight(DensityUtil.dp2px(60));
}","private void initView(Context context){
  RelativeLayout parent=new RelativeLayout(context);
  RelativeLayout.LayoutParams rlParent=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  rlParent.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  RelativeLayout.LayoutParams rlArrowView=new RelativeLayout.LayoutParams(DensityUtil.dp2px(20),DensityUtil.dp2px(20));
  mArrowView=new PathsView(context);
  mArrowView.setId(R.id.arrow_view);
  mArrowView.parserColors(0xff666666);
  mArrowView.parserPaths(""String_Node_Str"");
  parent.addView(mArrowView,rlArrowView);
  RelativeLayout.LayoutParams rlHeaderText=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  rlHeaderText.addRule(RelativeLayout.RIGHT_OF,mArrowView.getId());
  rlHeaderText.leftMargin=DensityUtil.dp2px(20);
  mHeaderText=new TextView(context);
  mHeaderText.setText(""String_Node_Str"");
  parent.addView(mHeaderText,rlHeaderText);
  RelativeLayout.LayoutParams rlProgressView=new RelativeLayout.LayoutParams(DensityUtil.dp2px(20),DensityUtil.dp2px(20));
  rlProgressView.addRule(RelativeLayout.ALIGN_RIGHT,mArrowView.getId());
  mProgressDrawable=new ProgressDrawable();
  mProgressView=new ImageView(context);
  mProgressView.setImageDrawable(mProgressDrawable);
  parent.addView(mProgressView,rlProgressView);
  addView(parent,rlParent);
  setMinimumHeight(DensityUtil.dp2px(60));
}"
62911,"@Override protected void addEventEmitters(ThemedReactContext reactContext,ReactSmartRefreshLayout view){
  view.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(    RefreshLayout refreshLayout){
    }
  }
);
  view.setOnMultiPurposeListener(new SimpleMultiPurposeListener(){
    @Override public void onHeaderPulling(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_PULLING.toString(),writableMap);
    }
    @Override public void onHeaderReleased(    RefreshHeader header,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASED.toString(),writableMap);
    }
    @Override public void onHeaderReleasing(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASING.toString(),writableMap);
    }
    @Override public void onHeaderStartAnimator(    RefreshHeader header,    int headerHeight,    int extendHeight){
    }
    @Override public void onHeaderFinish(    RefreshHeader header,    boolean success){
    }
    @Override public void onLoadMore(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.LOAD_MORE.toString(),null);
    }
    @Override public void onRefresh(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.REFRESH.toString(),null);
    }
    @Override public void onStateChanged(    RefreshLayout refreshLayout,    RefreshState oldState,    RefreshState newState){
switch (newState) {
case None:
case PullDownToRefresh:
        mEventEmitter.receiveEvent(getTargetId(),Events.PULL_DOWN_TO_REFRESH.toString(),null);
      break;
case Refreshing:
    break;
case ReleaseToRefresh:
  mEventEmitter.receiveEvent(getTargetId(),Events.RELEASE_TO_REFRESH.toString(),null);
break;
}
}
}
);
}","@Override protected void addEventEmitters(ThemedReactContext reactContext,final ReactSmartRefreshLayout view){
  view.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(    RefreshLayout refreshLayout){
    }
  }
);
  view.setOnMultiPurposeListener(new SimpleMultiPurposeListener(){
    private int getTargetId(){
      return view.getId();
    }
    @Override public void onHeaderPulling(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_PULLING.toString(),writableMap);
    }
    @Override public void onHeaderReleased(    RefreshHeader header,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASED.toString(),writableMap);
    }
    @Override public void onHeaderReleasing(    RefreshHeader header,    float percent,    int offset,    int headerHeight,    int extendHeight){
      WritableMap writableMap=Arguments.createMap();
      writableMap.putDouble(""String_Node_Str"",percent);
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(offset));
      writableMap.putDouble(""String_Node_Str"",DensityUtil.px2dp(headerHeight));
      mEventEmitter.receiveEvent(getTargetId(),Events.HEADER_RELEASING.toString(),writableMap);
    }
    @Override public void onHeaderStartAnimator(    RefreshHeader header,    int headerHeight,    int extendHeight){
    }
    @Override public void onHeaderFinish(    RefreshHeader header,    boolean success){
    }
    @Override public void onLoadMore(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.LOAD_MORE.toString(),null);
    }
    @Override public void onRefresh(    RefreshLayout refreshLayout){
      mEventEmitter.receiveEvent(getTargetId(),Events.REFRESH.toString(),null);
    }
    @Override public void onStateChanged(    RefreshLayout refreshLayout,    RefreshState oldState,    RefreshState newState){
switch (newState) {
case None:
case PullDownToRefresh:
        mEventEmitter.receiveEvent(getTargetId(),Events.PULL_DOWN_TO_REFRESH.toString(),null);
      break;
case Refreshing:
    break;
case ReleaseToRefresh:
  mEventEmitter.receiveEvent(getTargetId(),Events.RELEASE_TO_REFRESH.toString(),null);
break;
}
}
}
);
}"
62912,"@Override public void receiveCommand(ReactSmartRefreshLayout root,int commandId,@Nullable ReadableArray args){
switch (commandId) {
case COMMAND_FINISH_REFRESH_ID:
    int delayed=args.getInt(0);
  boolean success=args.getBoolean(1);
if (delayed > 0) {
  root.finishRefresh(delayed,success);
}
 else {
  root.finishRefresh(success);
}
break;
default :
break;
}
}","@Override public void receiveCommand(ReactSmartRefreshLayout root,int commandId,@Nullable ReadableArray args){
switch (commandId) {
case COMMAND_FINISH_REFRESH_ID:
    int delayed=args.getInt(0);
  boolean success=args.getBoolean(1);
if (delayed >= 0) {
  root.finishRefresh(delayed,success);
}
 else {
  root.finishRefresh(success);
}
break;
default :
break;
}
}"
62913,"public static int runpy(File fScript,URL script,String scriptName,String[] args){
  String fpScript;
  if (fScript == null) {
    fpScript=script.toExternalForm();
  }
 else {
    fpScript=fScript.getAbsolutePath();
  }
  if (!Runner.initpy()) {
    Runner.log(-1,""String_Node_Str"");
    return -999;
  }
  if (args == null || args.length == 0) {
    args=RunTime.get().getArgs();
  }
  String[] newArgs=new String[args.length + 1];
  for (int i=0; i < args.length; i++) {
    newArgs[i + 1]=args[i];
  }
  Runner.pyRunner.setSysArgv(newArgs);
  newArgs[0]=fpScript;
  int retval;
  if (fScript == null) {
    ImagePath.addHTTP(fpScript);
    retval=(Runner.pyRunner.exec(scriptName) ? 0 : -1);
    ImagePath.removeHTTP(fpScript);
  }
 else {
    if (null == ImagePath.getBundlePathSet())     ImagePath.setBundlePath(fScript.getParent());
 else {
      ImagePath.add(fScript.getParent());
    }
    retval=Runner.pyRunner.execfile(fpScript);
  }
  return retval;
}","public static int runpy(File fScript,URL script,String scriptName,String[] args){
  String fpScript;
  if (fScript == null) {
    fpScript=script.toExternalForm();
  }
 else {
    fpScript=fScript.getAbsolutePath();
  }
  if (!Runner.initpy()) {
    Runner.log(-1,""String_Node_Str"");
    return -999;
  }
  if (args == null || args.length == 0) {
    args=RunTime.get().getArgs();
  }
  String[] newArgs=new String[args.length + 1];
  for (int i=0; i < args.length; i++) {
    newArgs[i + 1]=args[i];
  }
  newArgs[0]=fpScript;
  Runner.pyRunner.setSysArgv(newArgs);
  int retval;
  if (fScript == null) {
    ImagePath.addHTTP(fpScript);
    retval=(Runner.pyRunner.exec(scriptName) ? 0 : -1);
    ImagePath.removeHTTP(fpScript);
  }
 else {
    if (null == ImagePath.getBundlePathSet())     ImagePath.setBundlePath(fScript.getParent());
 else {
      ImagePath.add(fScript.getParent());
    }
    retval=Runner.pyRunner.execfile(fpScript);
  }
  return retval;
}"
62914,"public void scale(boolean lessen){
  if (lessen) {
    Provider.getInstance().setSmall(true);
  }
 else {
    Provider.getInstance().setSmall(false);
  }
  float scale=Provider.getInstance().getFac();
  View rootView=(View)getParent();
  rootView.getLayoutParams().width=(int)(getWindowWidth() * (1 / scale));
  rootView.getLayoutParams().height=(int)(rootView.getHeight() * (1 / scale));
  setScaleX(scale);
  setScaleY(scale);
  setPivotX(0f);
  setPivotY(0f);
  requestLayout();
  for (int i=0; i < mContentView.getChildCount(); i++) {
    View child=mContentView.getChildAt(i);
    child.requestLayout();
  }
}","public void scale(boolean lessen){
  if (lessen) {
    Provider.getInstance().setSmall(true);
  }
 else {
    Provider.getInstance().setSmall(false);
  }
  float scale=Provider.getInstance().getFac();
  View rootView=(View)getParent();
  if (lessen && mRootViewHeight == 0) {
    mRootViewHeight=rootView.getHeight();
  }
  rootView.getLayoutParams().width=(int)(getWindowWidth() * (1 / scale));
  rootView.getLayoutParams().height=(int)(mRootViewHeight * (1 / scale));
  setScaleX(scale);
  setScaleY(scale);
  setPivotX(0f);
  setPivotY(0f);
  requestLayout();
  for (int i=0; i < mContentView.getChildCount(); i++) {
    ViewGroup child=(ViewGroup)mContentView.getChildAt(i);
    Log.e(TAG,""String_Node_Str"" + child.getChildAt(1).getHeight() + ""String_Node_Str""+ lessen);
    child.requestLayout();
  }
}"
62915,"/** 
 * 加上ItemDecoration的位置
 */
private View findChildViewUnderWithInsets(RecyclerView recyclerView,float x,float y){
  final int count=recyclerView.getChildCount();
  Rect rect=new Rect(0,0,0,0);
  for (int i=count - 1; i >= 0; i--) {
    final View child=recyclerView.getChildAt(i);
    final float translationX=child.getTranslationX();
    final float translationY=child.getTranslationY();
    try {
      rect=(Rect)getItemDecorInsetsForChildMethod.invoke(recyclerView,child);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (x >= child.getLeft() + translationX - rect.left - 30 && x <= child.getRight() + translationX + rect.right+ 30 && y >= child.getTop() + translationY - rect.top && y <= child.getBottom() + translationY + rect.bottom) {
      Log.e(TAG,""String_Node_Str"" + rect.toString());
      return child;
    }
  }
  return null;
}","/** 
 * 加上ItemDecoration的位置
 */
private View findChildViewUnderWithInsets(RecyclerView recyclerView,float x,float y){
  final int count=recyclerView.getChildCount();
  Rect rect=new Rect(0,0,0,0);
  for (int i=count - 1; i >= 0; i--) {
    final View child=recyclerView.getChildAt(i);
    final float translationX=child.getTranslationX();
    final float translationY=child.getTranslationY();
    try {
      rect=(Rect)getItemDecorInsetsForChildMethod.invoke(recyclerView,child);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (x >= child.getLeft() + translationX - rect.left - 30 && x <= child.getRight() + translationX + rect.right+ 30 && y >= child.getTop() + translationY - rect.top && y <= child.getBottom() + translationY + rect.bottom) {
      return child;
    }
  }
  return null;
}"
62916,"private int numOfLivingNeighbors(){
  int numOfLivingNeighbors=0;
  for (  Cell neighbor : this.neighbors) {
    if (neighbor.isAlive()) {
      numOfLivingNeighbors++;
    }
  }
  return numOfLivingNeighbors;
}","private int numOfLivingNeighbors(){
  int numOfLivingNeighbors=0;
  for (  Cell neighbor : this.neighbors) {
    if (neighbor.wasAlive()) {
      numOfLivingNeighbors++;
    }
  }
  return numOfLivingNeighbors;
}"
62917,"public void step(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].transition();
      this.grid[row][col].clearState();
    }
  }
}","public void step(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].transition();
    }
  }
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].clearState();
    }
  }
}"
62918,"public Grid(int width){
  this.width=width;
  this.grid=new Cell[width][width];
}","public Grid(int width){
  this.width=width;
  this.grid=new Cell[width][width];
  this.setLayout(new GridLayout(width,width));
}"
62919,"private void link(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      int previousRow=Math.floorMod((row - 1),this.width);
      int nextRow=Math.floorMod((row + 1),this.width);
      int previousCol=Math.floorMod((col - 1),this.width);
      int nextCol=Math.floorMod((col + 1),this.width);
      this.grid[row][col].addNeighbor(this.grid[row][previousCol]);
      this.grid[row][col].addNeighbor(this.grid[row][nextCol]);
      this.grid[row][col].addNeighbor(this.grid[nextRow][col]);
      this.grid[row][col].addNeighbor(this.grid[previousRow][col]);
    }
  }
}","private void link(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      int previousRow=Math.floorMod((row - 1),this.width);
      int nextRow=Math.floorMod((row + 1),this.width);
      int previousCol=Math.floorMod((col - 1),this.width);
      int nextCol=Math.floorMod((col + 1),this.width);
      this.grid[row][col].addNeighbor(this.grid[row][previousCol]);
      this.grid[row][col].addNeighbor(this.grid[row][nextCol]);
      this.grid[row][col].addNeighbor(this.grid[nextRow][col]);
      this.grid[row][col].addNeighbor(this.grid[previousRow][col]);
      this.grid[row][col].addNeighbor(this.grid[previousRow][previousCol]);
      this.grid[row][col].addNeighbor(this.grid[previousRow][nextCol]);
      this.grid[row][col].addNeighbor(this.grid[nextRow][previousCol]);
      this.grid[row][col].addNeighbor(this.grid[nextRow][nextCol]);
    }
  }
}"
62920,"public static void main(String[] args){
  Grid grid=new Grid(10);
  grid.generate();
  for (int i=0; i < 10; i++) {
    System.out.println(grid.toString());
    grid.step();
  }
}","public static void main(String[] args){
  JFrame frame=new JFrame(""String_Node_Str"");
  Grid grid=new Grid(100);
  grid.generate();
  frame.getContentPane().add(grid);
  frame.pack();
  frame.setVisible(true);
  for (int i=0; i < 30; i++) {
    System.out.println(grid.toString());
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
    grid.step();
  }
}"
62921,"private void populate(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      boolean rand=Math.random() < .15;
      this.grid[row][col]=new Cell(rand);
    }
  }
}","private void populate(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      boolean rand=Math.random() < .25;
      this.grid[row][col]=new Cell(rand);
      this.add(this.grid[row][col]);
    }
  }
}"
62922,"public void step(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].transition();
    }
  }
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].clearState();
    }
  }
}","public void step(){
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].transition();
      this.grid[row][col].updateBackground();
    }
  }
  for (int row=0; row < this.grid.length; row++) {
    for (int col=0; col < this.grid[row].length; col++) {
      this.grid[row][col].clearState();
    }
  }
}"
62923,"public Cell(boolean isAlive){
  this.wasAlive=isAlive;
  this.isAlive=isAlive;
  neighbors=new ArrayList<Cell>();
}","public Cell(boolean isAlive){
  this.wasAlive=isAlive;
  this.isAlive=isAlive;
  this.updateBackground();
  neighbors=new ArrayList<Cell>();
}"
62924,"/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getTailSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.HEAD) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.TAIL,length,length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAffected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAffected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAffected);
  }
  RandomAccessFile raf=null;
  int tailLineCount=0;
  int count=0;
  long p=length - 1;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(p);
    int last=raf.read();
    if (last != '\n' && last != '\r') {
      tailLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"");
      }
    }
    while (next) {
      count++;
      raf.seek(p--);
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        if (tailLineCount == tailRowsAffected) {
          count--;
          next=false;
          break;
        }
      if (p < 0) {
        next=false;
        if (RdfFileLogUtil.common.isDebug()) {
          RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
        }
        break;
      }
    raf.seek(p);
  int pre=raf.read();
if (pre != '\r' && pre != '\n') {
  tailLineCount++;
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str"");
}
break;
default :
break;
}
if (p < 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"");
}
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
long start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}","/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getTailSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (!fileConfig.isPartial() && (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.HEAD)) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.TAIL,length,length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAffected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAffected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAffected);
  }
  RandomAccessFile raf=null;
  int tailLineCount=0;
  int count=0;
  long p=length - 1;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(p);
    int last=raf.read();
    if (last != '\n' && last != '\r') {
      tailLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"");
      }
    }
    while (next) {
      count++;
      raf.seek(p--);
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        if (tailLineCount == tailRowsAffected) {
          count--;
          next=false;
          break;
        }
      if (p < 0) {
        next=false;
        if (RdfFileLogUtil.common.isDebug()) {
          RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
        }
        break;
      }
    raf.seek(p);
  int pre=raf.read();
if (pre != '\r' && pre != '\n') {
  tailLineCount++;
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str"");
}
break;
default :
break;
}
if (p < 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"");
}
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
long start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}"
62925,"/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (0 == length) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.TAIL) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,0);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  RandomAccessFile raf=null;
  int headLineCount=0;
  int count=0;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(0);
    while (next) {
      count++;
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        long cur=raf.getFilePointer();
      int pre=raf.read();
    if (pre == -1 || pre != '\n') {
      headLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
  if (headLineCount == headRowsAffected) {
    next=false;
    break;
  }
raf.seek(cur);
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + count + ""String_Node_Str"");
}
break;
default :
break;
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
}
return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,count);
}","/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (0 == length) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (!fileConfig.isPartial() && (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.TAIL)) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,0);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  RandomAccessFile raf=null;
  int headLineCount=0;
  int count=0;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(0);
    while (next) {
      count++;
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        long cur=raf.getFilePointer();
      int pre=raf.read();
    if (pre == -1 || pre != '\n') {
      headLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
  if (headLineCount == headRowsAffected) {
    next=false;
    break;
  }
raf.seek(cur);
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + count + ""String_Node_Str"");
}
break;
default :
break;
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
}
return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,count);
}"
62926,"@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  FileInfo fileInfo=storage.getFileInfo(filePath);
  if (!fileInfo.isExists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=fileInfo.getSize();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.HEAD) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.TAIL,length,length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAfftected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAfftected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAfftected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAfftected);
  }
  int bufferSize=OssUtil.OSS_READ_TAIL_BUFFER;
  long start=length - bufferSize;
  if (length < bufferSize) {
    bufferSize=(int)length;
    start=0;
  }
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
  }
  InputStream is=storage.getInputStream(filePath,start,bufferSize);
  byte[] bs=OssUtil.read(is,bufferSize);
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + bs.length);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
  }
  int idx=bufferSize - 1;
  int tailLineCount=0;
  int count=0;
  if (bs[idx] != '\n' && bs[idx] != '\r') {
    tailLineCount++;
    if (RdfFileLogUtil.common.isDebug()) {
      RdfFileLogUtil.common.debug(""String_Node_Str"");
    }
  }
  boolean next=true;
  while (next) {
    count++;
    byte b=bs[idx];
switch (b) {
case '\n':
case '\r':
      if (tailLineCount == tailRowsAfftected) {
        count--;
        next=false;
        break;
      }
    int p=idx - 1;
  if (p < 0) {
    if (start > bufferSize) {
      start-=bufferSize;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ start+ ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
      }
    }
 else     if (start == 0) {
      next=false;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ count);
      break;
    }
 else {
      bufferSize=(int)start;
      start=0;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ start+ ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
    }
    if (bufferSize < 0) {
      throw new RdfFileException(""String_Node_Str"",RdfErrorEnum.UNKOWN);
    }
    idx=bufferSize;
    is=storage.getInputStream(filePath,start,bufferSize);
    bs=OssUtil.read(is,bufferSize);
    p=idx - 1;
  }
if (bs[p] != '\r' && bs[p] != '\n') {
  tailLineCount++;
}
break;
default :
p=idx - 1;
if (p < 0) {
if (start > bufferSize) {
start-=bufferSize;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
}
}
 else if (start == 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
}
break;
}
 else {
bufferSize=(int)start;
start=0;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
}
}
if (bufferSize < 0) {
throw new RdfFileException(""String_Node_Str"",RdfErrorEnum.UNKOWN);
}
idx=bufferSize;
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,bufferSize);
}
break;
}
idx--;
}
start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}","@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  FileInfo fileInfo=storage.getFileInfo(filePath);
  if (!fileInfo.isExists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=fileInfo.getSize();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (!fileConfig.isPartial() && (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.HEAD)) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.TAIL,length,length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAfftected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAfftected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAfftected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAfftected);
  }
  int bufferSize=OssUtil.OSS_READ_TAIL_BUFFER;
  long start=length - bufferSize;
  if (length < bufferSize) {
    bufferSize=(int)length;
    start=0;
  }
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
  }
  InputStream is=storage.getInputStream(filePath,start,bufferSize);
  byte[] bs=OssUtil.read(is,bufferSize);
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + bs.length);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
  }
  int idx=bufferSize - 1;
  int tailLineCount=0;
  int count=0;
  if (bs[idx] != '\n' && bs[idx] != '\r') {
    tailLineCount++;
    if (RdfFileLogUtil.common.isDebug()) {
      RdfFileLogUtil.common.debug(""String_Node_Str"");
    }
  }
  boolean next=true;
  while (next) {
    count++;
    byte b=bs[idx];
switch (b) {
case '\n':
case '\r':
      if (tailLineCount == tailRowsAfftected) {
        count--;
        next=false;
        break;
      }
    int p=idx - 1;
  if (p < 0) {
    if (start > bufferSize) {
      start-=bufferSize;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ start+ ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
      }
    }
 else     if (start == 0) {
      next=false;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ count);
      break;
    }
 else {
      bufferSize=(int)start;
      start=0;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\n' ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ start+ ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
    }
    if (bufferSize < 0) {
      throw new RdfFileException(""String_Node_Str"",RdfErrorEnum.UNKOWN);
    }
    idx=bufferSize;
    is=storage.getInputStream(filePath,start,bufferSize);
    bs=OssUtil.read(is,bufferSize);
    p=idx - 1;
  }
if (bs[p] != '\r' && bs[p] != '\n') {
  tailLineCount++;
}
break;
default :
p=idx - 1;
if (p < 0) {
if (start > bufferSize) {
start-=bufferSize;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
}
}
 else if (start == 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
}
break;
}
 else {
bufferSize=(int)start;
start=0;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize+ ""String_Node_Str""+ count);
}
}
if (bufferSize < 0) {
throw new RdfFileException(""String_Node_Str"",RdfErrorEnum.UNKOWN);
}
idx=bufferSize;
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,bufferSize);
}
break;
}
idx--;
}
start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}"
62927,"/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  FileInfo fileInfo=storage.getFileInfo(filePath);
  if (!fileInfo.isExists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  if (0 == fileInfo.getSize()) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + fileInfo.getSize());
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.TAIL) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,0);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  long bufferSize=OssUtil.OSS_READ_HEAD_BUFFER;
  long size=fileInfo.getSize();
  if (size < bufferSize) {
    bufferSize=size;
  }
  long start=0;
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
  InputStream is=storage.getInputStream(filePath,start,bufferSize);
  byte[] bs=OssUtil.read(is,(int)bufferSize);
  RdfFileLogUtil.common.debug(""String_Node_Str"" + bs.length);
  RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
  int headLineCount=0;
  boolean next=true;
  int count=0;
  int idx=0;
  while (next) {
    count++;
switch (bs[idx++]) {
case '\n':
      headLineCount++;
    if (headLineCount == headRowsAffected) {
      next=false;
      break;
    }
  if (idx == bufferSize) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
    start=start + bufferSize;
    long left=size - start;
    RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
    if (left == 0) {
      next=false;
      break;
    }
    if (left < bufferSize) {
      bufferSize=left;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
    }
 else {
      RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
    }
    is=storage.getInputStream(filePath,start,bufferSize);
    bs=OssUtil.read(is,(int)bufferSize);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
    idx=0;
  }
break;
case '\r':
if (idx < bufferSize) {
if (bs[idx] != '\n') {
  headLineCount++;
}
}
 else if (count == size) {
headLineCount++;
next=false;
}
 else {
RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
start=start + bufferSize;
long left=size - start;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
if (left == 0) {
  next=false;
  break;
}
if (left < bufferSize) {
  bufferSize=left;
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
 else {
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,(int)bufferSize);
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
if (bs[0] != '\n') {
  headLineCount++;
}
idx=0;
}
if (headLineCount == headRowsAffected) {
next=false;
}
break;
default :
if (idx == bufferSize) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
start=start + bufferSize;
long left=size - start;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
if (left == 0) {
next=false;
break;
}
if (left < bufferSize) {
bufferSize=left;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
 else {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,(int)bufferSize);
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
idx=0;
}
break;
}
}
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,count);
}","/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  FileInfo fileInfo=storage.getFileInfo(filePath);
  if (!fileInfo.isExists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  if (0 == fileInfo.getSize()) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + fileInfo.getSize());
  }
  if (!fileConfig.isPartial() && (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.TAIL)) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,0);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  long bufferSize=OssUtil.OSS_READ_HEAD_BUFFER;
  long size=fileInfo.getSize();
  if (size < bufferSize) {
    bufferSize=size;
  }
  long start=0;
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
  InputStream is=storage.getInputStream(filePath,start,bufferSize);
  byte[] bs=OssUtil.read(is,(int)bufferSize);
  RdfFileLogUtil.common.debug(""String_Node_Str"" + bs.length);
  RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
  int headLineCount=0;
  boolean next=true;
  int count=0;
  int idx=0;
  while (next) {
    count++;
switch (bs[idx++]) {
case '\n':
      headLineCount++;
    if (headLineCount == headRowsAffected) {
      next=false;
      break;
    }
  if (idx == bufferSize) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
    start=start + bufferSize;
    long left=size - start;
    RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
    if (left == 0) {
      next=false;
      break;
    }
    if (left < bufferSize) {
      bufferSize=left;
      RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
    }
 else {
      RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
    }
    is=storage.getInputStream(filePath,start,bufferSize);
    bs=OssUtil.read(is,(int)bufferSize);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
    RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
    idx=0;
  }
break;
case '\r':
if (idx < bufferSize) {
if (bs[idx] != '\n') {
  headLineCount++;
}
}
 else if (count == size) {
headLineCount++;
next=false;
}
 else {
RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
start=start + bufferSize;
long left=size - start;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
if (left == 0) {
  next=false;
  break;
}
if (left < bufferSize) {
  bufferSize=left;
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
 else {
  RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,(int)bufferSize);
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
if (bs[0] != '\n') {
  headLineCount++;
}
idx=0;
}
if (headLineCount == headRowsAffected) {
next=false;
}
break;
default :
if (idx == bufferSize) {
RdfFileLogUtil.common.debug(""String_Node_Str"" + bufferSize + ""String_Node_Str""+ bufferSize);
start=start + bufferSize;
long left=size - start;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ left);
if (left == 0) {
next=false;
break;
}
if (left < bufferSize) {
bufferSize=left;
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
 else {
RdfFileLogUtil.common.debug(""String_Node_Str"" + start + ""String_Node_Str""+ bufferSize);
}
is=storage.getInputStream(filePath,start,bufferSize);
bs=OssUtil.read(is,(int)bufferSize);
RdfFileLogUtil.common.debug(""String_Node_Str"" + count);
RdfFileLogUtil.common.debug(""String_Node_Str"" + new String(bs));
idx=0;
}
break;
}
}
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,count);
}"
62928,"/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getTailSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAffected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAffected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAffected);
  }
  RandomAccessFile raf=null;
  int tailLineCount=0;
  int count=0;
  long p=length - 1;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(p);
    int last=raf.read();
    if (last != '\n' && last != '\r') {
      tailLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"");
      }
    }
    while (next) {
      count++;
      raf.seek(p--);
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        if (tailLineCount == tailRowsAffected) {
          count--;
          next=false;
          break;
        }
      if (p < 0) {
        next=false;
        if (RdfFileLogUtil.common.isDebug()) {
          RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
        }
        break;
      }
    raf.seek(p);
  int pre=raf.read();
if (pre != '\r' && pre != '\n') {
  tailLineCount++;
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str"");
}
break;
default :
break;
}
if (p < 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"");
}
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
long start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}","/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getTailSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getTailSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  if (RdfFileLogUtil.common.isInfo()) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + filePath);
  }
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (length == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,0,0);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.HEAD) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.TAIL,length,length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasTail()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.TAIL_NOT_DEFINED);
  }
  int tailRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.TAIL);
  if (tailRowsAffected == 0) {
    if (RdfFileLogUtil.common.isInfo()) {
      RdfFileLogUtil.common.info(""String_Node_Str"" + tailRowsAffected);
    }
    return new FileSlice(filePath,FileDataTypeEnum.TAIL,length,length);
  }
 else   if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + tailRowsAffected);
  }
  RandomAccessFile raf=null;
  int tailLineCount=0;
  int count=0;
  long p=length - 1;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(p);
    int last=raf.read();
    if (last != '\n' && last != '\r') {
      tailLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"");
      }
    }
    while (next) {
      count++;
      raf.seek(p--);
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        if (tailLineCount == tailRowsAffected) {
          count--;
          next=false;
          break;
        }
      if (p < 0) {
        next=false;
        if (RdfFileLogUtil.common.isDebug()) {
          RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
        }
        break;
      }
    raf.seek(p);
  int pre=raf.read();
if (pre != '\r' && pre != '\n') {
  tailLineCount++;
  if (RdfFileLogUtil.common.isDebug()) {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str"");
}
break;
default :
break;
}
if (p < 0) {
next=false;
if (RdfFileLogUtil.common.isDebug()) {
RdfFileLogUtil.common.debug(""String_Node_Str"");
}
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
long start=length - count;
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count+ ""String_Node_Str""+ start+ ""String_Node_Str""+ length);
}
return new FileSlice(filePath,FileDataTypeEnum.TAIL,start,length);
}"
62929,"/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (0 == length) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  RandomAccessFile raf=null;
  int headLineCount=0;
  int count=0;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(0);
    while (next) {
      count++;
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        long cur=raf.getFilePointer();
      int pre=raf.read();
    if (pre == -1 || pre != '\n') {
      headLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
  if (headLineCount == headRowsAffected) {
    next=false;
    break;
  }
raf.seek(cur);
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + count + ""String_Node_Str"");
}
break;
default :
break;
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
}
return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,count);
}","/** 
 * @see com.alipay.rdf.file.interfaces.FileSplitter#getHeadSlice(com.alipay.rdf.file.model.FileConfig)
 */
@Override public FileSlice getHeadSlice(FileConfig fileConfig){
  String filePath=fileConfig.getFilePath();
  RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str"");
  File file=new File(filePath);
  if (!file.exists()) {
    throw new RdfFileException(""String_Node_Str"" + filePath + ""String_Node_Str"",RdfErrorEnum.NOT_EXSIT);
  }
  long length=file.length();
  if (0 == length) {
    RdfFileLogUtil.common.warn(""String_Node_Str"" + filePath + ""String_Node_Str"");
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + length);
  }
  if (fileConfig.getFileDataType() == FileDataTypeEnum.BODY || fileConfig.getFileDataType() == FileDataTypeEnum.TAIL) {
    return new FileSlice(fileConfig.getFilePath(),FileDataTypeEnum.HEAD,0,0);
  }
  FileMeta fileMeta=TemplateLoader.load(fileConfig.getTemplatePath(),fileConfig.getTemplateEncoding());
  if (!fileMeta.hasHead()) {
    throw new RdfFileException(""String_Node_Str"" + fileConfig.getTemplatePath() + ""String_Node_Str"",RdfErrorEnum.HEAD_NOT_DEFINED);
  }
  int headRowsAffected=ProtocolLoader.getRowsAfftected(fileConfig,FileDataTypeEnum.HEAD);
  if (headRowsAffected == 0) {
    RdfFileLogUtil.common.info(""String_Node_Str"" + headRowsAffected);
    return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,0);
  }
 else {
    RdfFileLogUtil.common.debug(""String_Node_Str"" + headRowsAffected);
  }
  RandomAccessFile raf=null;
  int headLineCount=0;
  int count=0;
  boolean next=true;
  try {
    raf=new RandomAccessFile(file,""String_Node_Str"");
    raf.seek(0);
    while (next) {
      count++;
      int b=raf.read();
switch (b) {
case '\n':
case '\r':
        long cur=raf.getFilePointer();
      int pre=raf.read();
    if (pre == -1 || pre != '\n') {
      headLineCount++;
      if (RdfFileLogUtil.common.isDebug()) {
        RdfFileLogUtil.common.debug(""String_Node_Str"" + (b == '\r' ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
  if (headLineCount == headRowsAffected) {
    next=false;
    break;
  }
raf.seek(cur);
break;
case -1:
count--;
next=false;
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"" + count + ""String_Node_Str"");
}
break;
default :
break;
}
}
}
 catch (FileNotFoundException e) {
throw new RdfFileException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
catch (IOException e) {
throw new RdfFileException(""String_Node_Str"",e,RdfErrorEnum.NOT_EXSIT);
}
 finally {
if (null != raf) {
try {
raf.close();
}
 catch (IOException e) {
if (RdfFileLogUtil.common.isWarn()) {
RdfFileLogUtil.common.warn(""String_Node_Str"",e);
}
}
}
}
if (RdfFileLogUtil.common.isInfo()) {
RdfFileLogUtil.common.info(""String_Node_Str"" + filePath + ""String_Node_Str""+ count);
}
return new FileSlice(filePath,FileDataTypeEnum.HEAD,0,count);
}"
62930,"private GitHubThread(Context context,String token,GitHubData data,String url){
  this.data=data;
  this.url=url;
  this.token=token;
  gson=new GsonBuilder().setLenient().create();
  cacheFile=new File(context.getCacheDir(),""String_Node_Str"");
}","private GitHubThread(Context context,String token,GitHubData data,String url){
  this.data=data;
  this.url=url;
  this.token=token;
  File dir=new File(context.getCacheDir() + ""String_Node_Str"");
  if (!dir.exists())   dir.mkdirs();
  cacheFile=new File(dir,url.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
}"
62931,"@Override public void bind(final Context context,ViewHolder viewHolder){
  ApplicationInfo info=context.getApplicationInfo();
  ResourceUtils.setImage(context,icon,info.icon,viewHolder.appIconView);
  viewHolder.nameTextView.setText(info.labelRes);
  try {
    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(info.packageName,0);
    viewHolder.versionTextView.setText(String.format(context.getString(R.string.title_attribouter_version),packageInfo.versionName));
    viewHolder.versionTextView.setVisibility(View.VISIBLE);
  }
 catch (  PackageManager.NameNotFoundException e) {
    viewHolder.versionTextView.setVisibility(View.GONE);
  }
  String actualDescription=ResourceUtils.getString(context,description);
  if (actualDescription != null) {
    viewHolder.descriptionTextView.setVisibility(View.VISIBLE);
    viewHolder.descriptionTextView.setText(actualDescription);
  }
 else   viewHolder.descriptionTextView.setVisibility(View.GONE);
  if (links.size() > 0) {
    Collections.sort(links,new LinkInfoData.Comparator(context));
    List<InfoData> linksList=new ArrayList<>();
    for (    LinkInfoData link : links) {
      if (!link.isHidden())       linksList.add(link);
    }
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.CENTER);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(linksList));
  }
 else   viewHolder.links.setVisibility(View.GONE);
}","@Override public void bind(final Context context,ViewHolder viewHolder){
  ApplicationInfo info=context.getApplicationInfo();
  ResourceUtils.setImage(context,icon,info.icon,viewHolder.appIconView);
  viewHolder.nameTextView.setText(info.labelRes);
  try {
    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(info.packageName,0);
    viewHolder.versionTextView.setText(String.format(context.getString(R.string.title_attribouter_version),packageInfo.versionName));
    viewHolder.versionTextView.setVisibility(View.VISIBLE);
  }
 catch (  PackageManager.NameNotFoundException e) {
    viewHolder.versionTextView.setVisibility(View.GONE);
  }
  String actualDescription=ResourceUtils.getString(context,description);
  if (actualDescription != null) {
    viewHolder.descriptionTextView.setVisibility(View.VISIBLE);
    viewHolder.descriptionTextView.setText(actualDescription);
  }
 else   viewHolder.descriptionTextView.setVisibility(View.GONE);
  List<LinkInfoData> links=getChildren(LinkInfoData.class);
  if (links.size() > 0) {
    Collections.sort(links,new LinkInfoData.Comparator(context));
    List<InfoData> linksList=new ArrayList<>();
    for (    LinkInfoData link : links) {
      if (!link.isHidden())       linksList.add(link);
    }
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.CENTER);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(linksList));
  }
 else   viewHolder.links.setVisibility(View.GONE);
}"
62932,"@Override public void onInit(GitHubData data){
  if (data instanceof RepositoryData) {
    RepositoryData repository=(RepositoryData)data;
    if ((description == null || !description.startsWith(""String_Node_Str"")) && repository.description != null)     description=repository.description;
    List<LinkInfoData> newLinks=new ArrayList<>();
    if (repository.html_url != null)     newLinks.add(new GitHubLinkInfoData(repository.html_url,0,true));
    if (repository.homepage != null) {
      newLinks.add(repository.homepage.startsWith(""String_Node_Str"") ? new PlayStoreLinkInfoData(repository.homepage,0) : new WebsiteLinkInfoData(repository.homepage,0));
    }
    for (    LinkInfoData link : newLinks) {
      if (links.contains(link))       links.get(links.indexOf(link)).merge(link);
 else       links.add(link);
    }
  }
}","@Override public void onInit(GitHubData data){
  if (data instanceof RepositoryData) {
    RepositoryData repository=(RepositoryData)data;
    if ((description == null || !description.startsWith(""String_Node_Str"")) && repository.description != null)     description=repository.description;
    List<LinkInfoData> newLinks=new ArrayList<>();
    if (repository.html_url != null)     newLinks.add(new GitHubLinkInfoData(repository.html_url,0,true));
    if (repository.homepage != null) {
      newLinks.add(repository.homepage.startsWith(""String_Node_Str"") ? new PlayStoreLinkInfoData(repository.homepage,0) : new WebsiteLinkInfoData(repository.homepage,0));
    }
    for (    LinkInfoData link : newLinks)     addChild(link);
  }
}"
62933,"public AppInfoData(XmlResourceParser parser) throws IOException, XmlPullParserException {
  super(R.layout.item_attribouter_app_info);
  icon=parser.getAttributeValue(null,""String_Node_Str"");
  description=parser.getAttributeValue(null,""String_Node_Str"");
  playStoreUrl=parser.getAttributeValue(null,""String_Node_Str"");
  websiteUrl=parser.getAttributeValue(null,""String_Node_Str"");
  gitHubUrl=parser.getAttributeValue(null,""String_Node_Str"");
  String repo=parser.getAttributeValue(null,""String_Node_Str"");
  if (gitHubUrl == null && repo != null)   gitHubUrl=""String_Node_Str"" + repo;
  links=new ArrayList<>();
  if (repo != null || gitHubUrl != null)   links.add(new GitHubLinkInfoData(gitHubUrl != null ? gitHubUrl : repo,0,gitHubUrl != null));
  if (websiteUrl != null)   links.add(new WebsiteLinkInfoData(websiteUrl,0));
  links.add(new PlayStoreLinkInfoData(playStoreUrl,0));
  while (parser.next() != XmlPullParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    if (parser.getEventType() == XmlPullParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      LinkInfoData link=new LinkInfoData(parser);
      if (links.contains(link))       links.get(links.indexOf(link)).merge(link);
 else       links.add(link);
    }
  }
  addRequest(new RepositoryData(repo));
}","public AppInfoData(XmlResourceParser parser) throws IOException, XmlPullParserException {
  super(R.layout.item_attribouter_app_info);
  icon=parser.getAttributeValue(null,""String_Node_Str"");
  description=parser.getAttributeValue(null,""String_Node_Str"");
  playStoreUrl=parser.getAttributeValue(null,""String_Node_Str"");
  websiteUrl=parser.getAttributeValue(null,""String_Node_Str"");
  gitHubUrl=parser.getAttributeValue(null,""String_Node_Str"");
  String repo=parser.getAttributeValue(null,""String_Node_Str"");
  if (gitHubUrl == null && repo != null)   gitHubUrl=""String_Node_Str"" + repo;
  if (repo != null || gitHubUrl != null)   addChild(new GitHubLinkInfoData(gitHubUrl != null ? gitHubUrl : repo,0,gitHubUrl != null));
  if (websiteUrl != null)   addChild(new WebsiteLinkInfoData(websiteUrl,0));
  addChild(new PlayStoreLinkInfoData(playStoreUrl,0));
  addChildren(parser);
  addRequest(new RepositoryData(repo));
}"
62934,"public List<InfoData> getChildren(){
  return children;
}","public <X extends InfoData>List<X> getChildren(Class<X> type){
  List<X> children=new ArrayList<>();
  for (  InfoData info : getChildren()) {
    if (type.isInstance(info))     children.add((X)info);
  }
  return children;
}"
62935,"void addChildren(XmlResourceParser parser) throws IOException, XmlPullParserException {
  while (parser.next() != XmlResourceParser.END_TAG) {
    if (parser.getEventType() == XmlResourceParser.START_TAG) {
      try {
        Class<?> classy=Class.forName(parser.getName());
        Constructor constructor=classy.getConstructor(XmlResourceParser.class);
        addChild((InfoData)constructor.newInstance(parser));
      }
 catch (      ClassNotFoundException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
catch (      NoSuchMethodException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      java.lang.InstantiationException e) {
        e.printStackTrace();
      }
catch (      InvocationTargetException e) {
        e.printStackTrace();
      }
catch (      ClassCastException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
}","void addChildren(XmlResourceParser parser) throws IOException, XmlPullParserException {
  while (parser.next() != XmlResourceParser.END_TAG || !parser.getName().equals(getClass().getName())) {
    if (parser.getEventType() == XmlResourceParser.START_TAG) {
      try {
        Class<?> classy=Class.forName(parser.getName());
        Constructor constructor=classy.getConstructor(XmlResourceParser.class);
        addChild((InfoData)constructor.newInstance(parser));
      }
 catch (      ClassNotFoundException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
catch (      NoSuchMethodException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      java.lang.InstantiationException e) {
        e.printStackTrace();
      }
catch (      InvocationTargetException e) {
        e.printStackTrace();
      }
catch (      ClassCastException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
}"
62936,"@Override public Object merge(Object mergee){
  return null;
}","@Override public LicenseInfoData merge(LicenseInfoData mergee){
  if ((title == null || !title.startsWith(""String_Node_Str"")) && mergee.title != null && !mergee.title.isEmpty())   title=mergee.title;
  if ((description == null || !description.startsWith(""String_Node_Str"")) && mergee.description != null && !mergee.description.isEmpty())   description=mergee.description;
  if ((licenseName == null || !licenseName.startsWith(""String_Node_Str"")) && mergee.licenseName != null)   licenseName=mergee.licenseName;
  if ((websiteUrl == null || !websiteUrl.startsWith(""String_Node_Str"")) && mergee.websiteUrl != null && !mergee.websiteUrl.isEmpty())   websiteUrl=mergee.websiteUrl;
  if ((gitHubUrl == null || !gitHubUrl.startsWith(""String_Node_Str"")) && mergee.gitHubUrl != null)   gitHubUrl=mergee.gitHubUrl;
  if ((licenseUrl == null || !licenseUrl.startsWith(""String_Node_Str"")) && mergee.licenseUrl != null)   licenseUrl=mergee.licenseUrl;
  if (mergee.licensePermissions != null)   licensePermissions=mergee.licensePermissions;
  if (mergee.licenseConditions != null)   licenseConditions=mergee.licenseConditions;
  if (mergee.licenseLimitations != null)   licenseLimitations=mergee.licenseLimitations;
  if (mergee.licenseDescription != null)   licenseDescription=mergee.licenseDescription;
  if ((licenseBody == null || !licenseBody.startsWith(""String_Node_Str"")) && mergee.licenseBody != null)   licenseBody=mergee.licenseBody;
  for (  LinkInfoData link : mergee.links) {
    if (links.contains(link))     links.get(links.indexOf(link)).merge(link);
 else     links.add(link);
  }
  return this;
}"
62937,"public void merge(TranslatorInfoData contributor){
  if ((name == null || !name.startsWith(""String_Node_Str"")) && contributor.name != null)   name=contributor.name;
  if ((avatarUrl == null || !avatarUrl.startsWith(""String_Node_Str"")) && contributor.avatarUrl != null)   avatarUrl=contributor.avatarUrl;
  if ((blog == null || !blog.startsWith(""String_Node_Str"")) && contributor.blog != null && !contributor.blog.isEmpty())   blog=contributor.blog;
  if ((email == null || !email.startsWith(""String_Node_Str"")) && contributor.email != null && !contributor.email.isEmpty())   email=contributor.email;
  if ((locales == null || !locales.startsWith(""String_Node_Str"")) && contributor.locales != null)   locales=contributor.locales;
}","@Override public TranslatorInfoData merge(TranslatorInfoData contributor){
  if ((name == null || !name.startsWith(""String_Node_Str"")) && contributor.name != null)   name=contributor.name;
  if ((avatarUrl == null || !avatarUrl.startsWith(""String_Node_Str"")) && contributor.avatarUrl != null)   avatarUrl=contributor.avatarUrl;
  if ((blog == null || !blog.startsWith(""String_Node_Str"")) && contributor.blog != null && !contributor.blog.isEmpty())   blog=contributor.blog;
  if ((email == null || !email.startsWith(""String_Node_Str"")) && contributor.email != null && !contributor.email.isEmpty())   email=contributor.email;
  if ((locales == null || !locales.startsWith(""String_Node_Str"")) && contributor.locales != null)   locales=contributor.locales;
  return this;
}"
62938,"@Override public void bind(Context context,ViewHolder viewHolder){
  int remaining=overflow;
  List<InfoData> sortedList=new ArrayList<>();
  sortedTranslators=new ArrayList<>();
  for (  String language : Locale.getISOLanguages()) {
    boolean isHeader=false;
    for (    TranslatorInfoData translator : translators) {
      if (translator.locales == null)       continue;
      boolean isLocale=false;
      for (      String locale : translator.locales.split(""String_Node_Str"")) {
        if (language.equals(locale)) {
          isLocale=true;
          break;
        }
      }
      if (isLocale) {
        if (!isHeader) {
          InfoData header=new HeaderInfoData(new Locale(language).getDisplayLanguage());
          sortedTranslators.add(header);
          if (remaining != 0)           sortedList.add(header);
          isHeader=true;
        }
        sortedTranslators.add(translator);
        if (remaining != 0) {
          sortedList.add(translator);
          remaining--;
        }
      }
    }
  }
  if (overflow == 0) {
    viewHolder.titleView.setVisibility(View.GONE);
    viewHolder.recycler.setVisibility(View.GONE);
    viewHolder.expand.setVisibility(View.GONE);
    viewHolder.overflow.setVisibility(View.VISIBLE);
    viewHolder.overflow.setText(String.format(context.getString(R.string.title_attribouter_view_overflow),ResourceUtils.getString(context,translatorsTitle)));
    viewHolder.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new OverflowDialog(v.getContext(),translatorsTitle,sortedTranslators).show();
      }
    }
);
    return;
  }
 else {
    viewHolder.titleView.setVisibility(View.VISIBLE);
    viewHolder.recycler.setVisibility(View.VISIBLE);
    viewHolder.expand.setVisibility(View.VISIBLE);
    viewHolder.overflow.setVisibility(View.GONE);
    viewHolder.itemView.setOnClickListener(null);
  }
  if (translatorsTitle != null)   viewHolder.titleView.setText(ResourceUtils.getString(context,translatorsTitle));
  viewHolder.recycler.setLayoutManager(new LinearLayoutManager(context));
  viewHolder.recycler.setAdapter(new InfoAdapter(sortedList));
  if (sortedTranslators.size() > sortedList.size()) {
    viewHolder.expand.setVisibility(View.VISIBLE);
    viewHolder.expand.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new OverflowDialog(v.getContext(),translatorsTitle,sortedTranslators).show();
      }
    }
);
  }
 else   viewHolder.expand.setVisibility(View.GONE);
}","@Override public void bind(Context context,ViewHolder viewHolder){
  int remaining=overflow;
  List<InfoData> sortedList=new ArrayList<>();
  sortedTranslators=new ArrayList<>();
  for (  String language : Locale.getISOLanguages()) {
    boolean isHeader=false;
    for (    InfoData child : getChildren()) {
      if (child instanceof TranslatorInfoData) {
        TranslatorInfoData translator=(TranslatorInfoData)child;
        if (translator.locales == null || translator.locales.length() < 1)         continue;
        boolean isLocale=false;
        for (        String locale : translator.locales.split(""String_Node_Str"")) {
          if (language.equals(locale)) {
            isLocale=true;
            break;
          }
        }
        if (isLocale) {
          if (!isHeader) {
            InfoData header=new HeaderInfoData(new Locale(language).getDisplayLanguage());
            sortedTranslators.add(header);
            if (remaining != 0)             sortedList.add(header);
            isHeader=true;
          }
          sortedTranslators.add(translator);
          if (remaining != 0) {
            sortedList.add(translator);
            remaining--;
          }
        }
      }
    }
  }
  if (overflow == 0) {
    viewHolder.titleView.setVisibility(View.GONE);
    viewHolder.recycler.setVisibility(View.GONE);
    viewHolder.expand.setVisibility(View.GONE);
    viewHolder.overflow.setVisibility(View.VISIBLE);
    viewHolder.overflow.setText(String.format(context.getString(R.string.title_attribouter_view_overflow),ResourceUtils.getString(context,translatorsTitle)));
    viewHolder.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new OverflowDialog(v.getContext(),translatorsTitle,sortedTranslators).show();
      }
    }
);
    return;
  }
 else {
    viewHolder.titleView.setVisibility(View.VISIBLE);
    viewHolder.recycler.setVisibility(View.VISIBLE);
    viewHolder.expand.setVisibility(View.VISIBLE);
    viewHolder.overflow.setVisibility(View.GONE);
    viewHolder.itemView.setOnClickListener(null);
  }
  if (translatorsTitle != null)   viewHolder.titleView.setText(ResourceUtils.getString(context,translatorsTitle));
  viewHolder.recycler.setLayoutManager(new LinearLayoutManager(context));
  viewHolder.recycler.setAdapter(new InfoAdapter(sortedList));
  if (sortedTranslators.size() > sortedList.size()) {
    viewHolder.expand.setVisibility(View.VISIBLE);
    viewHolder.expand.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new OverflowDialog(v.getContext(),translatorsTitle,sortedTranslators).show();
      }
    }
);
  }
 else   viewHolder.expand.setVisibility(View.GONE);
}"
62939,"@Override public void onInit(GitHubData data){
  if (data instanceof ContributorsData) {
    if (((ContributorsData)data).contributors != null) {
      for (      ContributorsData.ContributorData contributor : ((ContributorsData)data).contributors) {
        if (contributor.login == null)         continue;
        TranslatorInfoData mergeTranslator=new TranslatorInfoData(contributor.login,null,contributor.avatar_url,null,null,null);
        TranslatorInfoData translatorInfo=mergeTranslator;
        if (translators.contains(mergeTranslator)) {
          translatorInfo=translators.get(translators.indexOf(mergeTranslator));
          translatorInfo.merge(mergeTranslator);
        }
 else         translators.add(translatorInfo);
        if (!translatorInfo.hasEverything())         addRequest(new UserData(contributor.login));
      }
    }
  }
 else   if (data instanceof UserData) {
    UserData user=(UserData)data;
    TranslatorInfoData translator=new TranslatorInfoData(user.login,user.name,user.avatar_url,null,user.blog,user.email);
    if (!translators.contains(translator))     translators.add(0,translator);
 else     translators.get(translators.indexOf(translator)).merge(translator);
  }
}","@Override public void onInit(GitHubData data){
  if (data instanceof ContributorsData) {
    if (((ContributorsData)data).contributors != null) {
      for (      ContributorsData.ContributorData contributor : ((ContributorsData)data).contributors) {
        if (contributor.login == null)         continue;
        InfoData child=addChild(new TranslatorInfoData(contributor.login,null,contributor.avatar_url,null,null,null));
        if (child instanceof Mergeable && !((Mergeable)child).hasAll())         addRequest(new UserData(contributor.login));
      }
    }
  }
 else   if (data instanceof UserData) {
    UserData user=(UserData)data;
    addChild(0,new TranslatorInfoData(user.login,user.name,user.avatar_url,null,user.blog,user.email));
  }
}"
62940,"public TranslatorsInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_translators);
  translators=new ArrayList<>();
  translatorsTitle=parser.getAttributeValue(null,""String_Node_Str"");
  if (translatorsTitle == null)   translatorsTitle=""String_Node_Str"";
  overflow=parser.getAttributeIntValue(null,""String_Node_Str"",-1);
  addChildren(parser);
}","public TranslatorsInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_translators);
  translatorsTitle=parser.getAttributeValue(null,""String_Node_Str"");
  if (translatorsTitle == null)   translatorsTitle=""String_Node_Str"";
  overflow=parser.getAttributeIntValue(null,""String_Node_Str"",-1);
  addChildren(parser);
}"
62941,"@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  recycler=(RecyclerView)inflater.inflate(R.layout.fragment_attribouter_about,container,false);
  infos=new ArrayList<>();
  Bundle args=getArguments();
  int fileRes=R.xml.attribouter;
  if (args != null) {
    gitHubToken=args.getString(Attribouter.EXTRA_GITHUB_OAUTH_TOKEN,null);
    fileRes=args.getInt(Attribouter.EXTRA_FILE_RES,fileRes);
  }
  XmlResourceParser parser=getResources().getXml(fileRes);
  try {
    while (parser.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (parser.getEventType() == XmlPullParser.START_TAG) {
        try {
          Class<?> classy=Class.forName(parser.getName());
          Constructor<?> constructor=classy.getConstructor(XmlResourceParser.class);
          infos.add((InfoData)constructor.newInstance(parser));
          continue;
        }
 catch (        ClassNotFoundException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        java.lang.InstantiationException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        ClassCastException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
switch (parser.getName()) {
case ""String_Node_Str"":
          infos.add(new AppInfoData(parser));
        break;
case ""String_Node_Str"":
      infos.add(new ContributorsInfoData(parser));
    break;
case ""String_Node_Str"":
  infos.add(new TranslatorsInfoData(parser));
break;
case ""String_Node_Str"":
infos.add(new LicensesInfoData(parser));
break;
case ""String_Node_Str"":
infos.add(new TextInfoData(parser));
break;
}
}
parser.next();
}
}
 catch (IOException|XmlPullParserException e) {
e.printStackTrace();
}
parser.close();
adapter=new InfoAdapter(infos);
recycler.setLayoutManager(new LinearLayoutManager(getContext()));
recycler.addItemDecoration(new DividerItemDecoration(recycler.getContext(),DividerItemDecoration.VERTICAL));
recycler.setAdapter(adapter);
requests=new ArrayList<>();
for (InfoData info : infos) {
info.setOnRequestListener(this);
}
for (GitHubData request : requests) {
request.addOnInitListener(this);
request.startInit(getContext(),gitHubToken);
}
return recycler;
}","@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  recycler=(RecyclerView)inflater.inflate(R.layout.fragment_attribouter_about,container,false);
  infos=new ArrayList<>();
  Bundle args=getArguments();
  int fileRes=R.xml.attribouter;
  if (args != null) {
    gitHubToken=args.getString(Attribouter.EXTRA_GITHUB_OAUTH_TOKEN,null);
    fileRes=args.getInt(Attribouter.EXTRA_FILE_RES,fileRes);
  }
  XmlResourceParser parser=getResources().getXml(fileRes);
  try {
    while (parser.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (parser.getEventType() == XmlPullParser.START_TAG) {
        try {
          Class<?> classy=Class.forName(parser.getName());
          Constructor<?> constructor=classy.getConstructor(XmlResourceParser.class);
          infos.add((InfoData)constructor.newInstance(parser));
          parser.next();
          continue;
        }
 catch (        ClassNotFoundException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        java.lang.InstantiationException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        ClassCastException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
          e.printStackTrace();
        }
switch (parser.getName()) {
case ""String_Node_Str"":
          infos.add(new AppInfoData(parser));
        break;
case ""String_Node_Str"":
      infos.add(new ContributorsInfoData(parser));
    break;
case ""String_Node_Str"":
  infos.add(new TranslatorsInfoData(parser));
break;
case ""String_Node_Str"":
infos.add(new LicensesInfoData(parser));
break;
case ""String_Node_Str"":
infos.add(new TextInfoData(parser));
break;
}
}
parser.next();
}
}
 catch (IOException|XmlPullParserException e) {
e.printStackTrace();
}
parser.close();
adapter=new InfoAdapter(infos);
recycler.setLayoutManager(new LinearLayoutManager(getContext()));
recycler.addItemDecoration(new DividerItemDecoration(recycler.getContext(),DividerItemDecoration.VERTICAL));
recycler.setAdapter(adapter);
requests=new ArrayList<>();
for (InfoData info : infos) {
info.setOnRequestListener(this);
}
for (GitHubData request : requests) {
request.addOnInitListener(this);
request.startInit(getContext(),gitHubToken);
}
return recycler;
}"
62942,"ContributorInfoData(@Nullable String login,@Nullable String name,@Nullable String avatarUrl,@Nullable String task,@Nullable Integer position,@Nullable String bio,@Nullable String blog,@Nullable String email){
  super(R.layout.item_attribouter_contributor);
  this.login=login != null ? login.toLowerCase() : null;
  this.name=name;
  this.avatarUrl=avatarUrl;
  this.task=task;
  this.position=position;
  this.bio=bio;
  this.blog=blog;
  this.email=email;
  links=new ArrayList<>();
  if (login != null)   links.add(new GitHubLinkInfoData(login,1));
  if (blog != null)   links.add(new WebsiteLinkInfoData(blog,2));
  if (email != null)   links.add(new EmailLinkInfoData(email,-1));
}","ContributorInfoData(@Nullable String login,@Nullable String name,@Nullable String avatarUrl,@Nullable String task,@Nullable Integer position,@Nullable String bio,@Nullable String blog,@Nullable String email){
  super(R.layout.item_attribouter_contributor);
  this.login=login;
  this.name=name;
  this.avatarUrl=avatarUrl;
  this.task=task;
  this.position=position;
  this.bio=bio;
  this.blog=blog;
  this.email=email;
  links=new ArrayList<>();
  if (login != null)   links.add(new GitHubLinkInfoData(login,1));
  if (blog != null)   links.add(new WebsiteLinkInfoData(blog,2));
  if (email != null)   links.add(new EmailLinkInfoData(email,-1));
}"
62943,"@Override public boolean equals(Object obj){
  return obj instanceof ContributorInfoData && (login != null ? login.equals(((ContributorInfoData)obj).login) : super.equals(obj));
}","@Override public boolean equals(Object obj){
  if (obj instanceof ContributorInfoData) {
    ContributorInfoData contributor=(ContributorInfoData)obj;
    return (login != null && contributor.login != null && login.toLowerCase().equals(contributor.login.toLowerCase())) || super.equals(obj);
  }
 else   return super.equals(obj);
}"
62944,"public LicenseInfoData(@Nullable String repo,@Nullable String title,@Nullable String description,@Nullable String licenseName,@Nullable String websiteUrl,@Nullable String gitHubUrl,@Nullable String licenseUrl,@Nullable String[] licensePermissions,@Nullable String[] licenseConditions,@Nullable String[] licenseLimitations,@Nullable String licenseDescription,@Nullable String licenseBody,@Nullable String licenseKey){
  super(R.layout.item_attribouter_license);
  this.repo=repo != null ? repo.toLowerCase() : repo;
  this.title=title;
  this.description=description;
  this.licenseName=licenseName;
  this.websiteUrl=websiteUrl;
  this.gitHubUrl=gitHubUrl;
  this.licenseUrl=licenseUrl;
  this.licensePermissions=licensePermissions;
  this.licenseConditions=licenseConditions;
  this.licenseLimitations=licenseLimitations;
  this.licenseDescription=licenseDescription;
  this.licenseBody=licenseBody;
  this.licenseKey=licenseKey;
  if (repo != null)   token=repo;
 else   token=title;
  links=new ArrayList<>();
  if (websiteUrl != null && !websiteUrl.isEmpty())   links.add(new WebsiteLinkInfoData(websiteUrl,2));
  if (repo != null)   links.add(new GitHubLinkInfoData(repo,1));
  if (licenseBody != null || licenseUrl != null)   links.add(new LicenseLinkInfoData(this,0));
}","public LicenseInfoData(@Nullable String repo,@Nullable String title,@Nullable String description,@Nullable String licenseName,@Nullable String websiteUrl,@Nullable String gitHubUrl,@Nullable String licenseUrl,@Nullable String[] licensePermissions,@Nullable String[] licenseConditions,@Nullable String[] licenseLimitations,@Nullable String licenseDescription,@Nullable String licenseBody,@Nullable String licenseKey){
  super(R.layout.item_attribouter_license);
  this.repo=repo;
  this.title=title;
  this.description=description;
  this.licenseName=licenseName;
  this.websiteUrl=websiteUrl;
  this.gitHubUrl=gitHubUrl;
  this.licenseUrl=licenseUrl;
  this.licensePermissions=licensePermissions;
  this.licenseConditions=licenseConditions;
  this.licenseLimitations=licenseLimitations;
  this.licenseDescription=licenseDescription;
  this.licenseBody=licenseBody;
  this.licenseKey=licenseKey;
  if (repo != null)   token=repo;
 else   token=title;
  links=new ArrayList<>();
  if (websiteUrl != null && !websiteUrl.isEmpty())   links.add(new WebsiteLinkInfoData(websiteUrl,2));
  if (repo != null)   links.add(new GitHubLinkInfoData(repo,1));
  if (licenseBody != null || licenseUrl != null)   links.add(new LicenseLinkInfoData(this,0));
}"
62945,"@Override public boolean equals(Object obj){
  return obj instanceof LicenseInfoData && (repo != null ? repo.equals(((LicenseInfoData)obj).repo) || repo.equals(((LicenseInfoData)obj).title) : (title != null ? title.equals(((LicenseInfoData)obj).repo) : super.equals(obj)));
}","@Override public boolean equals(Object obj){
  if (obj instanceof LicenseInfoData) {
    LicenseInfoData license=(LicenseInfoData)obj;
    return (repo != null && ((license.repo != null && repo.toLowerCase().equals(license.repo.toLowerCase())) || (license.title != null && repo.toLowerCase().equals(license.title.toLowerCase())))) || (title != null && ((license.repo != null && title.toLowerCase().equals(license.repo.toLowerCase())) || license.title != null && title.toLowerCase().equals(license.title.toLowerCase()))) || super.equals(obj);
  }
 else   return super.equals(obj);
}"
62946,"@Override public boolean equals(Object obj){
  return obj instanceof TranslatorInfoData && (login != null ? login.equals(((TranslatorInfoData)obj).login) : super.equals(obj));
}","@Override public boolean equals(Object obj){
  if (obj instanceof TranslatorInfoData) {
    TranslatorInfoData translator=(TranslatorInfoData)obj;
    return (login != null && translator.login != null && login.toLowerCase().equals(translator.login.toLowerCase())) || super.equals(obj);
  }
 else   return super.equals(obj);
}"
62947,"@Override public void bind(Context context,ViewHolder viewHolder){
  ApplicationInfo info=context.getApplicationInfo();
  ResourceUtils.setImage(context,icon,info.icon,viewHolder.appIconView);
  viewHolder.nameTextView.setText(info.labelRes);
  try {
    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(info.packageName,0);
    viewHolder.versionTextView.setText(String.format(context.getString(R.string.title_attribouter_version),packageInfo.versionName));
    viewHolder.versionTextView.setVisibility(View.VISIBLE);
  }
 catch (  PackageManager.NameNotFoundException e) {
    viewHolder.versionTextView.setVisibility(View.GONE);
  }
  if (description != null) {
    viewHolder.descriptionTextView.setVisibility(View.VISIBLE);
    viewHolder.descriptionTextView.setText(ResourceUtils.getString(context,description));
  }
 else   viewHolder.descriptionTextView.setVisibility(View.GONE);
  if (links.size() > 0) {
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.CENTER);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(links)));
  }
 else   viewHolder.links.setVisibility(View.GONE);
}","@Override public void bind(Context context,ViewHolder viewHolder){
  ApplicationInfo info=context.getApplicationInfo();
  ResourceUtils.setImage(context,icon,info.icon,viewHolder.appIconView);
  viewHolder.nameTextView.setText(info.labelRes);
  try {
    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(info.packageName,0);
    viewHolder.versionTextView.setText(String.format(context.getString(R.string.title_attribouter_version),packageInfo.versionName));
    viewHolder.versionTextView.setVisibility(View.VISIBLE);
  }
 catch (  PackageManager.NameNotFoundException e) {
    viewHolder.versionTextView.setVisibility(View.GONE);
  }
  if (description != null) {
    viewHolder.descriptionTextView.setVisibility(View.VISIBLE);
    viewHolder.descriptionTextView.setText(ResourceUtils.getString(context,description));
  }
 else   viewHolder.descriptionTextView.setVisibility(View.GONE);
  if (links.size() > 0) {
    Collections.sort(links);
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.CENTER);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(links)));
  }
 else   viewHolder.links.setVisibility(View.GONE);
}"
62948,"@Override public void bind(Context context,ViewHolder viewHolder){
  viewHolder.titleView.setText(ResourceUtils.getString(context,getName()));
  viewHolder.descriptionView.setText(ResourceUtils.getString(context,description));
  if (licenseName != null) {
    viewHolder.licenseView.setVisibility(View.VISIBLE);
    viewHolder.licenseView.setText(ResourceUtils.getString(context,licenseName));
  }
 else   viewHolder.licenseView.setVisibility(View.GONE);
  if (links.size() > 0) {
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.FLEX_START);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(links)));
  }
 else   viewHolder.links.setVisibility(View.GONE);
  LinkInfoData importantLink=null;
  for (  LinkInfoData link : links) {
    if (importantLink == null || link.getPriority() > importantLink.getPriority())     importantLink=link;
  }
  viewHolder.itemView.setOnClickListener(importantLink != null ? importantLink.getListener(context) : null);
}","@Override public void bind(Context context,ViewHolder viewHolder){
  viewHolder.titleView.setText(ResourceUtils.getString(context,getName()));
  viewHolder.descriptionView.setText(ResourceUtils.getString(context,description));
  if (licenseName != null) {
    viewHolder.licenseView.setVisibility(View.VISIBLE);
    viewHolder.licenseView.setText(ResourceUtils.getString(context,licenseName));
  }
 else   viewHolder.licenseView.setVisibility(View.GONE);
  if (links.size() > 0) {
    Collections.sort(links);
    viewHolder.links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(context);
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.FLEX_START);
    viewHolder.links.setLayoutManager(layoutManager);
    viewHolder.links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(links)));
  }
 else   viewHolder.links.setVisibility(View.GONE);
  LinkInfoData importantLink=null;
  for (  LinkInfoData link : links) {
    if (importantLink == null || link.getPriority() > importantLink.getPriority())     importantLink=link;
  }
  viewHolder.itemView.setOnClickListener(importantLink != null ? importantLink.getListener(context) : null);
}"
62949,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.dialog_attribouter_user);
  TextView nameView=findViewById(R.id.name);
  TextView taskView=findViewById(R.id.task);
  ImageView imageView=findViewById(R.id.image);
  TextView bioView=findViewById(R.id.description);
  RecyclerView links=findViewById(R.id.links);
  nameView.setText(ResourceUtils.getString(getContext(),contributor.getName()));
  taskView.setText(ResourceUtils.getString(getContext(),contributor.task));
  String url=ResourceUtils.getString(getContext(),contributor.avatarUrl);
  if (url != null)   ResourceUtils.setImage(getContext(),contributor.avatarUrl,imageView);
 else   imageView.setVisibility(View.GONE);
  bioView.setText(ResourceUtils.getString(getContext(),contributor.bio));
  if (contributor.links.size() > 0) {
    links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(getContext());
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.FLEX_START);
    links.setLayoutManager(layoutManager);
    links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(contributor.links)));
  }
 else   links.setVisibility(View.GONE);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.dialog_attribouter_user);
  TextView nameView=findViewById(R.id.name);
  TextView taskView=findViewById(R.id.task);
  ImageView imageView=findViewById(R.id.image);
  TextView bioView=findViewById(R.id.description);
  RecyclerView links=findViewById(R.id.links);
  nameView.setText(ResourceUtils.getString(getContext(),contributor.getName()));
  taskView.setText(ResourceUtils.getString(getContext(),contributor.task));
  String url=ResourceUtils.getString(getContext(),contributor.avatarUrl);
  if (url != null)   ResourceUtils.setImage(getContext(),contributor.avatarUrl,imageView);
 else   imageView.setVisibility(View.GONE);
  bioView.setText(ResourceUtils.getString(getContext(),contributor.bio));
  if (contributor.links.size() > 0) {
    Collections.sort(contributor.links);
    links.setVisibility(View.VISIBLE);
    FlexboxLayoutManager layoutManager=new FlexboxLayoutManager(getContext());
    layoutManager.setFlexDirection(FlexDirection.ROW);
    layoutManager.setJustifyContent(JustifyContent.FLEX_START);
    links.setLayoutManager(layoutManager);
    links.setAdapter(new InfoAdapter(new ArrayList<InfoData>(contributor.links)));
  }
 else   links.setVisibility(View.GONE);
}"
62950,"@Override public void bind(Context context,ViewHolder viewHolder){
  if (contributorsTitle != null)   viewHolder.titleView.setText(ResourceUtils.getString(context,contributorsTitle));
  ContributorInfoData first=null, second=null, third=null;
  List<InfoData> remainingContributors=new ArrayList<>();
  for (  ContributorInfoData contributor : contributors) {
    if (contributor.position != null) {
      if (first == null && contributor.position == 1) {
        first=contributor;
        continue;
      }
 else       if (second == null && contributor.position == 2) {
        second=contributor;
        continue;
      }
 else       if (third == null && contributor.position == 3) {
        third=contributor;
        continue;
      }
    }
    remainingContributors.add(contributor);
  }
  if (first != null && second != null && third != null) {
    viewHolder.topThreeView.setVisibility(View.VISIBLE);
    viewHolder.firstNameView.setText(ResourceUtils.getString(context,first.getName()));
    ResourceUtils.setImage(context,first.avatarUrl,viewHolder.firstImageView);
    if (first.task != null) {
      viewHolder.firstTaskView.setVisibility(View.VISIBLE);
      viewHolder.firstTaskView.setText(ResourceUtils.getString(context,first.task));
    }
 else     viewHolder.firstTaskView.setVisibility(View.GONE);
    viewHolder.firstView.setTag(first);
    viewHolder.firstView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
    viewHolder.secondNameView.setText(ResourceUtils.getString(context,second.getName()));
    ResourceUtils.setImage(context,second.avatarUrl,viewHolder.secondImageView);
    if (second.task != null) {
      viewHolder.secondTaskView.setVisibility(View.VISIBLE);
      viewHolder.secondTaskView.setText(ResourceUtils.getString(context,second.task));
    }
 else     viewHolder.secondTaskView.setVisibility(View.GONE);
    viewHolder.secondView.setTag(second);
    viewHolder.secondView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
    viewHolder.thirdNameView.setText(ResourceUtils.getString(context,third.getName()));
    ResourceUtils.setImage(context,third.avatarUrl,viewHolder.thirdImageView);
    if (third.task != null) {
      viewHolder.thirdTaskView.setVisibility(View.VISIBLE);
      viewHolder.thirdTaskView.setText(ResourceUtils.getString(context,third.task));
    }
 else     viewHolder.thirdTaskView.setVisibility(View.GONE);
    viewHolder.thirdView.setTag(third);
    viewHolder.thirdView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
  }
 else {
    viewHolder.topThreeView.setVisibility(View.GONE);
    if (third != null)     remainingContributors.add(0,third);
    if (second != null)     remainingContributors.add(0,second);
    if (first != null)     remainingContributors.add(0,first);
  }
  if (remainingContributors.size() > 0) {
    viewHolder.recycler.setVisibility(View.VISIBLE);
    viewHolder.recycler.setLayoutManager(new LinearLayoutManager(context));
    viewHolder.recycler.setAdapter(new InfoAdapter(remainingContributors));
  }
 else   viewHolder.recycler.setVisibility(View.GONE);
}","@Override public void bind(Context context,ViewHolder viewHolder){
  if (contributorsTitle != null)   viewHolder.titleView.setText(ResourceUtils.getString(context,contributorsTitle));
  ContributorInfoData first=null, second=null, third=null;
  List<InfoData> remainingContributors=new ArrayList<>();
  for (  ContributorInfoData contributor : contributors) {
    if (contributor.isHidden)     continue;
    if (contributor.position != null) {
      if (first == null && contributor.position == 1) {
        first=contributor;
        continue;
      }
 else       if (second == null && contributor.position == 2) {
        second=contributor;
        continue;
      }
 else       if (third == null && contributor.position == 3) {
        third=contributor;
        continue;
      }
    }
    remainingContributors.add(contributor);
  }
  if (first != null && second != null && third != null) {
    viewHolder.topThreeView.setVisibility(View.VISIBLE);
    viewHolder.firstNameView.setText(ResourceUtils.getString(context,first.getName()));
    ResourceUtils.setImage(context,first.avatarUrl,viewHolder.firstImageView);
    if (first.task != null) {
      viewHolder.firstTaskView.setVisibility(View.VISIBLE);
      viewHolder.firstTaskView.setText(ResourceUtils.getString(context,first.task));
    }
 else     viewHolder.firstTaskView.setVisibility(View.GONE);
    viewHolder.firstView.setTag(first);
    viewHolder.firstView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
    viewHolder.secondNameView.setText(ResourceUtils.getString(context,second.getName()));
    ResourceUtils.setImage(context,second.avatarUrl,viewHolder.secondImageView);
    if (second.task != null) {
      viewHolder.secondTaskView.setVisibility(View.VISIBLE);
      viewHolder.secondTaskView.setText(ResourceUtils.getString(context,second.task));
    }
 else     viewHolder.secondTaskView.setVisibility(View.GONE);
    viewHolder.secondView.setTag(second);
    viewHolder.secondView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
    viewHolder.thirdNameView.setText(ResourceUtils.getString(context,third.getName()));
    ResourceUtils.setImage(context,third.avatarUrl,viewHolder.thirdImageView);
    if (third.task != null) {
      viewHolder.thirdTaskView.setVisibility(View.VISIBLE);
      viewHolder.thirdTaskView.setText(ResourceUtils.getString(context,third.task));
    }
 else     viewHolder.thirdTaskView.setVisibility(View.GONE);
    viewHolder.thirdView.setTag(third);
    viewHolder.thirdView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        new UserDialog(view.getContext(),(ContributorInfoData)view.getTag()).show();
      }
    }
);
  }
 else {
    viewHolder.topThreeView.setVisibility(View.GONE);
    if (third != null)     remainingContributors.add(0,third);
    if (second != null)     remainingContributors.add(0,second);
    if (first != null)     remainingContributors.add(0,first);
  }
  if (remainingContributors.size() > 0) {
    viewHolder.recycler.setVisibility(View.VISIBLE);
    viewHolder.recycler.setLayoutManager(new LinearLayoutManager(context));
    viewHolder.recycler.setAdapter(new InfoAdapter(remainingContributors));
  }
 else   viewHolder.recycler.setVisibility(View.GONE);
}"
62951,"public ContributorsInfoData(XmlResourceParser parser,String repo) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_contributors);
  this.repo=repo;
  contributors=new ArrayList<>();
  contributorsTitle=parser.getAttributeValue(null,""String_Node_Str"");
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      int position=parser.getAttributeIntValue(null,""String_Node_Str"",-1);
      ContributorInfoData contributor=new ContributorInfoData(parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),position != -1 ? position : null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      if (!contributors.contains(contributor))       contributors.add(contributor);
 else       contributors.get(contributors.indexOf(contributor)).merge(contributor);
    }
  }
  ContributorInfoData me=new ContributorInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (!contributors.contains(me))   contributors.add(me);
  addRequest(new ContributorsData(""String_Node_Str""));
  addRequest(new ContributorsData(repo));
}","public ContributorsInfoData(XmlResourceParser parser,String repo) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_contributors);
  this.repo=repo;
  contributors=new ArrayList<>();
  contributorsTitle=parser.getAttributeValue(null,""String_Node_Str"");
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      int position=parser.getAttributeIntValue(null,""String_Node_Str"",-1);
      ContributorInfoData contributor=new ContributorInfoData(parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),position != -1 ? position : null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      contributor.isHidden=parser.getAttributeBooleanValue(null,""String_Node_Str"",false);
      if (!contributors.contains(contributor))       contributors.add(contributor);
 else       contributors.get(contributors.indexOf(contributor)).merge(contributor);
    }
  }
  ContributorInfoData me=new ContributorInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (!contributors.contains(me))   contributors.add(me);
  addRequest(new ContributorsData(""String_Node_Str""));
  addRequest(new ContributorsData(repo));
}"
62952,"public void merge(ContributorInfoData contributor){
  if ((name == null || !name.startsWith(""String_Node_Str"")) && contributor.name != null)   name=contributor.name;
  if ((avatarUrl == null || !avatarUrl.startsWith(""String_Node_Str"")) && contributor.avatarUrl != null)   avatarUrl=contributor.avatarUrl;
  if ((bio == null || !bio.startsWith(""String_Node_Str"")) && contributor.bio != null)   bio=contributor.bio;
  if ((blog == null || !blog.startsWith(""String_Node_Str"")) && contributor.blog != null)   blog=contributor.blog;
  if ((task == null || !task.startsWith(""String_Node_Str"")) && contributor.task != null)   task=contributor.task;
}","public void merge(ContributorInfoData contributor){
  if ((name == null || !name.startsWith(""String_Node_Str"")) && contributor.name != null)   name=contributor.name;
  if ((avatarUrl == null || !avatarUrl.startsWith(""String_Node_Str"")) && contributor.avatarUrl != null)   avatarUrl=contributor.avatarUrl;
  if ((bio == null || !bio.startsWith(""String_Node_Str"")) && contributor.bio != null && !contributor.bio.isEmpty())   bio=contributor.bio;
  if ((blog == null || !blog.startsWith(""String_Node_Str"")) && contributor.blog != null && !contributor.blog.isEmpty())   blog=contributor.blog;
  if ((task == null || !task.startsWith(""String_Node_Str"")) && contributor.task != null)   task=contributor.task;
}"
62953,"public void merge(LicenseInfoData license){
  if ((title == null || !title.startsWith(""String_Node_Str"")) && license.title != null)   title=license.title;
  if ((description == null || !description.startsWith(""String_Node_Str"")) && license.description != null)   description=license.description;
  if ((licenseName == null || !licenseName.startsWith(""String_Node_Str"")) && license.licenseName != null)   licenseName=license.licenseName;
  if ((websiteUrl == null || !websiteUrl.startsWith(""String_Node_Str"")) && license.websiteUrl != null)   websiteUrl=license.websiteUrl;
  if ((gitHubUrl == null || !gitHubUrl.startsWith(""String_Node_Str"")) && license.gitHubUrl != null)   gitHubUrl=license.gitHubUrl;
  if ((licenseUrl == null || !licenseUrl.startsWith(""String_Node_Str"")) && license.licenseUrl != null)   licenseUrl=license.licenseUrl;
  if (license.licensePermissions != null)   licensePermissions=license.licensePermissions;
  if (license.licenseConditions != null)   licenseConditions=license.licenseConditions;
  if (license.licenseLimitations != null)   licenseLimitations=license.licenseLimitations;
  if (license.licenseDescription != null)   licenseDescription=license.licenseDescription;
  if ((licenseBody == null || !licenseBody.startsWith(""String_Node_Str"")) && license.licenseBody != null)   licenseBody=license.licenseBody;
}","public void merge(LicenseInfoData license){
  if ((title == null || !title.startsWith(""String_Node_Str"")) && license.title != null && !license.title.isEmpty())   title=license.title;
  if ((description == null || !description.startsWith(""String_Node_Str"")) && license.description != null && !license.description.isEmpty())   description=license.description;
  if ((licenseName == null || !licenseName.startsWith(""String_Node_Str"")) && license.licenseName != null)   licenseName=license.licenseName;
  if ((websiteUrl == null || !websiteUrl.startsWith(""String_Node_Str"")) && license.websiteUrl != null && !license.websiteUrl.isEmpty())   websiteUrl=license.websiteUrl;
  if ((gitHubUrl == null || !gitHubUrl.startsWith(""String_Node_Str"")) && license.gitHubUrl != null)   gitHubUrl=license.gitHubUrl;
  if ((licenseUrl == null || !licenseUrl.startsWith(""String_Node_Str"")) && license.licenseUrl != null)   licenseUrl=license.licenseUrl;
  if (license.licensePermissions != null)   licensePermissions=license.licensePermissions;
  if (license.licenseConditions != null)   licenseConditions=license.licenseConditions;
  if (license.licenseLimitations != null)   licenseLimitations=license.licenseLimitations;
  if (license.licenseDescription != null)   licenseDescription=license.licenseDescription;
  if ((licenseBody == null || !licenseBody.startsWith(""String_Node_Str"")) && license.licenseBody != null)   licenseBody=license.licenseBody;
}"
62954,"@Override public void bind(Context context,ViewHolder viewHolder){
  viewHolder.titleView.setText(ResourceUtils.getString(context,getName()));
  viewHolder.descriptionView.setText(ResourceUtils.getString(context,description));
  if (licenseName != null) {
    viewHolder.licenseView.setVisibility(View.VISIBLE);
    viewHolder.licenseView.setText(ResourceUtils.getString(context,licenseName));
  }
 else   viewHolder.licenseView.setVisibility(View.GONE);
  viewHolder.links.setVisibility(websiteUrl != null || gitHubUrl != null || licenseUrl != null ? View.VISIBLE : View.GONE);
  if (websiteUrl != null) {
    viewHolder.websiteButton.setVisibility(View.VISIBLE);
    viewHolder.websiteButton.setOnClickListener(new UrlClickListener(ResourceUtils.getString(context,websiteUrl)));
  }
 else   viewHolder.websiteButton.setVisibility(View.GONE);
  if (gitHubUrl != null) {
    viewHolder.gitHubButton.setVisibility(View.VISIBLE);
    viewHolder.gitHubButton.setOnClickListener(new UrlClickListener(ResourceUtils.getString(context,gitHubUrl)));
  }
 else   viewHolder.gitHubButton.setVisibility(View.GONE);
  View.OnClickListener licenseClickListener=null;
  if (licenseBody != null) {
    licenseClickListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        new LicenseDialog(view.getContext(),LicenseInfoData.this).show();
      }
    }
;
  }
 else   if (licenseUrl != null) {
    licenseClickListener=new UrlClickListener(licenseUrl);
  }
  if (licenseClickListener != null) {
    viewHolder.licenseButton.setVisibility(View.VISIBLE);
    viewHolder.licenseButton.setOnClickListener(licenseClickListener);
    viewHolder.licenseView.setOnClickListener(licenseClickListener);
  }
 else   viewHolder.licenseButton.setVisibility(View.GONE);
  if (licenseClickListener != null) {
    viewHolder.itemView.setOnClickListener(licenseClickListener);
  }
 else   if (licenseUrl != null) {
    viewHolder.itemView.setOnClickListener(new UrlClickListener(licenseUrl));
  }
 else   if (websiteUrl != null) {
    viewHolder.itemView.setOnClickListener(new UrlClickListener(websiteUrl));
  }
 else   if (gitHubUrl != null) {
    viewHolder.itemView.setOnClickListener(new UrlClickListener(gitHubUrl));
  }
 else   viewHolder.itemView.setOnClickListener(null);
}","@Override public void bind(Context context,ViewHolder viewHolder){
  viewHolder.titleView.setText(ResourceUtils.getString(context,getName()));
  viewHolder.descriptionView.setText(ResourceUtils.getString(context,description));
  if (licenseName != null) {
    viewHolder.licenseView.setVisibility(View.VISIBLE);
    viewHolder.licenseView.setText(ResourceUtils.getString(context,licenseName));
  }
 else   viewHolder.licenseView.setVisibility(View.GONE);
  String websiteUrl=ResourceUtils.getString(context,this.websiteUrl);
  String gitHubUrl=ResourceUtils.getString(context,this.gitHubUrl);
  String licenseUrl=ResourceUtils.getString(context,this.licenseUrl);
  viewHolder.links.setVisibility(websiteUrl != null || gitHubUrl != null || licenseUrl != null ? View.VISIBLE : View.GONE);
  if (websiteUrl != null) {
    viewHolder.websiteButton.setVisibility(View.VISIBLE);
    viewHolder.websiteButton.setOnClickListener(new UrlClickListener(websiteUrl));
  }
 else   viewHolder.websiteButton.setVisibility(View.GONE);
  if (gitHubUrl != null) {
    viewHolder.gitHubButton.setVisibility(View.VISIBLE);
    viewHolder.gitHubButton.setOnClickListener(new UrlClickListener(gitHubUrl));
  }
 else   viewHolder.gitHubButton.setVisibility(View.GONE);
  View.OnClickListener licenseClickListener=null;
  if (licenseBody != null) {
    licenseClickListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        new LicenseDialog(view.getContext(),LicenseInfoData.this).show();
      }
    }
;
  }
 else   if (licenseUrl != null) {
    licenseClickListener=new UrlClickListener(licenseUrl);
  }
  if (licenseClickListener != null) {
    viewHolder.licenseButton.setVisibility(View.VISIBLE);
    viewHolder.licenseButton.setOnClickListener(licenseClickListener);
    viewHolder.licenseView.setOnClickListener(licenseClickListener);
  }
 else   viewHolder.licenseButton.setVisibility(View.GONE);
  if (licenseClickListener != null) {
    viewHolder.itemView.setOnClickListener(licenseClickListener);
  }
 else   if (websiteUrl != null) {
    viewHolder.itemView.setOnClickListener(new UrlClickListener(websiteUrl));
  }
 else   if (gitHubUrl != null) {
    viewHolder.itemView.setOnClickListener(new UrlClickListener(gitHubUrl));
  }
 else   viewHolder.itemView.setOnClickListener(null);
}"
62955,"@Override public boolean equals(Object obj){
  return obj instanceof LicenseInfoData && (repo != null ? repo.equals(((LicenseInfoData)obj).repo) : super.equals(obj));
}","@Override public boolean equals(Object obj){
  return obj instanceof LicenseInfoData && (repo != null ? repo.equals(((LicenseInfoData)obj).repo) || repo.equals(((LicenseInfoData)obj).title) : (title != null ? title.equals(((LicenseInfoData)obj).repo) : super.equals(obj)));
}"
62956,"public LicensesInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_licenses);
  title=parser.getAttributeValue(null,""String_Node_Str"");
  licenses=new ArrayList<>();
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      String projectRepo=parser.getAttributeValue(null,""String_Node_Str"");
      LicenseInfoData license=new LicenseInfoData(projectRepo,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),projectRepo != null ? ""String_Node_Str"" + projectRepo : null,parser.getAttributeValue(null,""String_Node_Str""),null,null,null,null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      if (!licenses.contains(license))       licenses.add(license);
 else       licenses.get(licenses.indexOf(license)).merge(license);
    }
  }
  licenses.add(new LicenseInfoData(""String_Node_Str"",null,null,null,null,null,null,null,null,null,null,null,null));
  licenses.add(new LicenseInfoData(""String_Node_Str"",null,null,null,null,null,null,null,null,null,null,null,null));
  for (  LicenseInfoData license : licenses) {
    if (license.repo != null && !license.hasEverythingGeneric())     addRequest(new RepositoryData(license.repo));
    if (license.licenseKey != null && !license.hasEverythingLicense())     addRequest(new LicenseData(license.licenseKey));
  }
}","public LicensesInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_licenses);
  title=parser.getAttributeValue(null,""String_Node_Str"");
  licenses=new ArrayList<>();
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      String projectRepo=parser.getAttributeValue(null,""String_Node_Str"");
      LicenseInfoData license=new LicenseInfoData(projectRepo,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),projectRepo != null ? ""String_Node_Str"" + projectRepo : null,parser.getAttributeValue(null,""String_Node_Str""),null,null,null,null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      if (!licenses.contains(license))       licenses.add(license);
 else       licenses.get(licenses.indexOf(license)).merge(license);
    }
  }
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null));
  licenses.add(new LicenseInfoData(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  for (  LicenseInfoData license : licenses) {
    if (license.repo != null && !license.hasEverythingGeneric())     addRequest(new RepositoryData(license.repo));
    if (license.licenseKey != null && (license.repo != null || license.title != null) && !license.hasEverythingLicense()) {
      LicenseData request=new LicenseData(license.licenseKey);
      request.addTag(license.repo != null ? license.repo : license.title);
      addRequest(request);
    }
  }
}"
62957,"GitHubData(String url){
  this.url=url;
  listeners=new ArrayList<>();
  tags=new ArrayList<>();
  gson=new GsonBuilder().registerTypeAdapter(getClass(),new MootInstanceCreator(this)).registerTypeAdapter(String.class,new NonEmptyStringStringAdapter()).create();
}","GitHubData(String url){
  this.url=url;
  listeners=new ArrayList<>();
  tags=new ArrayList<>();
  gson=new GsonBuilder().registerTypeAdapter(getClass(),new MootInstanceCreator(this)).create();
}"
62958,"protected void addRequest(GitHubData request){
  request.addOnInitListener(this);
  if (!requests.contains(request))   requests.add(request);
  if (listener != null)   listener.onRequest(this,request);
}","protected void addRequest(GitHubData request){
  request.addOnInitListener(this);
  requests.add(request);
  if (listener != null)   listener.onRequest(this,request);
}"
62959,"public LicenseInfoData(@Nullable String repo,@Nullable String title,@Nullable String description,@Nullable String licenseName,@Nullable String websiteUrl,@Nullable String gitHubUrl,@Nullable String licenseUrl,@Nullable String[] licensePermissions,@Nullable String[] licenseConditions,@Nullable String[] licenseLimitations,@Nullable String licenseDescription,@Nullable String licenseBody,@Nullable String licenseKey){
  super(R.layout.item_attribouter_license);
  this.repo=repo;
  this.title=title;
  this.description=description;
  this.licenseName=licenseName;
  this.websiteUrl=websiteUrl;
  this.gitHubUrl=gitHubUrl;
  this.licenseUrl=licenseUrl;
  this.licensePermissions=licensePermissions;
  this.licenseConditions=licenseConditions;
  this.licenseLimitations=licenseLimitations;
  this.licenseDescription=licenseDescription;
  this.licenseBody=licenseBody;
  this.licenseKey=licenseKey;
}","public LicenseInfoData(@Nullable String repo,@Nullable String title,@Nullable String description,@Nullable String licenseName,@Nullable String websiteUrl,@Nullable String gitHubUrl,@Nullable String licenseUrl,@Nullable String[] licensePermissions,@Nullable String[] licenseConditions,@Nullable String[] licenseLimitations,@Nullable String licenseDescription,@Nullable String licenseBody,@Nullable String licenseKey){
  super(R.layout.item_attribouter_license);
  this.repo=repo;
  this.title=title;
  this.description=description;
  this.licenseName=licenseName;
  this.websiteUrl=websiteUrl;
  this.gitHubUrl=gitHubUrl;
  this.licenseUrl=licenseUrl;
  this.licensePermissions=licensePermissions;
  this.licenseConditions=licenseConditions;
  this.licenseLimitations=licenseLimitations;
  this.licenseDescription=licenseDescription;
  this.licenseBody=licenseBody;
  this.licenseKey=licenseKey;
  if (repo != null)   token=repo;
 else   token=title;
}"
62960,"public LicensesInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_licenses);
  title=parser.getAttributeValue(null,""String_Node_Str"");
  licenses=new ArrayList<>();
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      String projectRepo=parser.getAttributeValue(null,""String_Node_Str"");
      LicenseInfoData license=new LicenseInfoData(projectRepo,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),projectRepo != null ? ""String_Node_Str"" + projectRepo : null,parser.getAttributeValue(null,""String_Node_Str""),null,null,null,null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      if (!licenses.contains(license))       licenses.add(license);
 else       licenses.get(licenses.indexOf(license)).merge(license);
    }
  }
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null));
  licenses.add(new LicenseInfoData(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  for (  LicenseInfoData license : licenses) {
    if (license.repo != null && !license.hasEverythingGeneric())     addRequest(new RepositoryData(license.repo));
    if (license.licenseKey != null && (license.repo != null || license.title != null) && !license.hasEverythingLicense()) {
      LicenseData request=new LicenseData(license.licenseKey);
      request.addTag(license.repo != null ? license.repo : license.title);
      addRequest(request);
    }
  }
}","public LicensesInfoData(XmlResourceParser parser) throws XmlPullParserException, IOException {
  super(R.layout.item_attribouter_licenses);
  title=parser.getAttributeValue(null,""String_Node_Str"");
  licenses=new ArrayList<>();
  while (parser.getEventType() != XmlResourceParser.END_TAG || parser.getName().equals(""String_Node_Str"")) {
    parser.next();
    if (parser.getEventType() == XmlResourceParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      String projectRepo=parser.getAttributeValue(null,""String_Node_Str"");
      LicenseInfoData license=new LicenseInfoData(projectRepo,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""),projectRepo != null ? ""String_Node_Str"" + projectRepo : null,parser.getAttributeValue(null,""String_Node_Str""),null,null,null,null,parser.getAttributeValue(null,""String_Node_Str""),parser.getAttributeValue(null,""String_Node_Str""));
      if (!licenses.contains(license))       licenses.add(license);
 else       licenses.get(licenses.indexOf(license)).merge(license);
    }
  }
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  licenses.add(new LicenseInfoData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null));
  licenses.add(new LicenseInfoData(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null,null,null,null,""String_Node_Str""));
  for (  LicenseInfoData license : licenses) {
    if (license.repo != null && !license.hasEverythingGeneric())     addRequest(new RepositoryData(license.repo));
    if (license.licenseKey != null && (license.repo != null || license.title != null) && !license.hasEverythingLicense()) {
      LicenseData request=new LicenseData(license.licenseKey);
      request.addTag(license.token);
      addRequest(request);
    }
  }
}"
62961,"@Override public void onInit(GitHubData data){
  if (data instanceof RepositoryData) {
    RepositoryData repo=(RepositoryData)data;
    for (    String tag : repo.getTags()) {
      LicenseInfoData mergeLicense=new LicenseInfoData(tag,null,repo.description,repo.license != null ? repo.license.name : null,repo.homepage,""String_Node_Str"" + tag,null,null,null,null,null,null,null);
      if (licenses.contains(mergeLicense)) {
        LicenseInfoData license=licenses.get(licenses.indexOf(mergeLicense));
        license.merge(mergeLicense);
        if (repo.license != null && repo.license.key != null && !license.hasEverythingLicense()) {
          LicenseData request=new LicenseData(repo.license.key);
          request.addTag(tag);
          addRequest(request);
        }
        break;
      }
    }
  }
 else   if (data instanceof LicenseData) {
    LicenseData license=(LicenseData)data;
    for (    String tag : license.getTags()) {
      LicenseInfoData mergeLicense=new LicenseInfoData(tag,null,null,license.name,null,""String_Node_Str"" + tag,license.html_url,license.permissions,license.conditions,license.limitations,license.description,license.body,license.key);
      if (licenses.contains(mergeLicense))       licenses.get(licenses.indexOf(mergeLicense)).merge(mergeLicense);
    }
  }
}","@Override public void onInit(GitHubData data){
  if (data instanceof RepositoryData) {
    RepositoryData repo=(RepositoryData)data;
    for (    String tag : repo.getTags()) {
      LicenseInfoData mergeLicense=new LicenseInfoData(tag,null,repo.description,repo.license != null ? repo.license.name : null,repo.homepage,""String_Node_Str"" + tag,null,null,null,null,null,null,null);
      if (licenses.contains(mergeLicense)) {
        LicenseInfoData license=licenses.get(licenses.indexOf(mergeLicense));
        license.merge(mergeLicense);
        if (repo.license != null && repo.license.key != null && !license.hasEverythingLicense()) {
          LicenseData request=new LicenseData(repo.license.key);
          request.addTag(tag);
          addRequest(request);
        }
        break;
      }
    }
  }
 else   if (data instanceof LicenseData) {
    LicenseData license=(LicenseData)data;
    for (    LicenseInfoData licenseInfo : licenses) {
      if (license.getTags().contains(licenseInfo.token)) {
        licenseInfo.merge(new LicenseInfoData(null,null,null,license.name,null,""String_Node_Str"" + licenseInfo.repo,license.html_url,license.permissions,license.conditions,license.limitations,license.description,license.body,license.key));
      }
    }
  }
}"
62962,"@Override public void onRequest(InfoData info,GitHubData request){
  if (!requests.contains(request))   requests.add(request);
 else {
    int i=requests.indexOf(request);
    GitHubData activeRequest=requests.get(i);
    if (activeRequest.isInitialized()) {
      info.onInit(activeRequest);
    }
 else     requests.set(i,requests.get(i).merge(request));
  }
}","@Override public void onRequest(InfoData info,GitHubData request){
  if (!requests.contains(request)) {
    requests.add(request);
    request.addOnInitListener(this);
    request.startInit();
  }
 else {
    int i=requests.indexOf(request);
    GitHubData activeRequest=requests.get(i);
    if (activeRequest.isInitialized()) {
      info.onInit(activeRequest);
    }
 else     requests.set(i,requests.get(i).merge(request));
  }
}"
62963,"@RequestMapping(value=""String_Node_Str"",produces=""String_Node_Str"") public ModelAndView orderFeed(WebRequest webRequest,HttpServletResponse response){
  response.setDateHeader(""String_Node_Str"",personRatingRepository.lastUpdate().getTime());
  Sort sort=new Sort(Sort.Direction.ASC,""String_Node_Str"");
  return new ModelAndView(new PersonRatingAtomFeedView(personRatingRepository),""String_Node_Str"",personRatingRepository.findAll(sort));
}","@RequestMapping(value=""String_Node_Str"",produces=""String_Node_Str"") public ModelAndView orderFeed(WebRequest webRequest,HttpServletResponse response){
  Date lastUpdate=personRatingRepository.lastUpdate();
  if (lastUpdate != null) {
    response.setDateHeader(""String_Node_Str"",lastUpdate.getTime());
  }
  Sort sort=new Sort(Sort.Direction.ASC,""String_Node_Str"");
  return new ModelAndView(new PersonRatingAtomFeedView(personRatingRepository),""String_Node_Str"",personRatingRepository.findAll(sort));
}"
62964,"private void init(){
  this.pattern=this.datePicker.getDateTimeFormatInfo().dateFormatFull();
  this.datePicker.addDateSelectionHandler((date,dateTimeFormatInfo) -> {
    setStringValue(date,dateTimeFormatInfo);
    changeLabelFloating();
    autoValidate();
  }
);
  this.modalListener=evt -> modal.open();
  onDetach(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  datePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  datePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
  datePicker.setBackgroundHandler((oldBackground,newBackground) -> {
    if (nonNull(modal)) {
      modal.getHeaderContainerElement().classList.remove(oldBackground.color().getStyle());
      modal.getHeaderContainerElement().classList.add(newBackground.color().getStyle());
    }
    if (nonNull(popover)) {
      popover.getHeadingElement().classList.remove(oldBackground.color().getStyle());
      popover.getHeadingElement().classList.add(newBackground.color().getStyle());
    }
  }
);
  getInputElement().addEventListener(EventType.keypress.getName(),evt -> {
    KeyboardEvent keyboardEvent=Js.cast(evt);
    if (isEnterKey(keyboardEvent) || isSpaceKey(keyboardEvent)) {
      open();
    }
  }
);
}","private void init(){
  this.pattern=this.datePicker.getDateTimeFormatInfo().dateFormatFull();
  this.datePicker.addDateSelectionHandler((date,dateTimeFormatInfo) -> {
    setStringValue(date,dateTimeFormatInfo);
    changeLabelFloating();
    autoValidate();
  }
);
  this.modalListener=evt -> modal.open();
  ElementUtil.onDetach(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  datePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  datePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
  datePicker.setBackgroundHandler((oldBackground,newBackground) -> {
    if (nonNull(modal)) {
      modal.getHeaderContainerElement().classList.remove(oldBackground.color().getStyle());
      modal.getHeaderContainerElement().classList.add(newBackground.color().getStyle());
    }
    if (nonNull(popover)) {
      popover.getHeadingElement().classList.remove(oldBackground.color().getStyle());
      popover.getHeadingElement().classList.add(newBackground.color().getStyle());
    }
  }
);
  getInputElement().addEventListener(EventType.keypress.getName(),evt -> {
    KeyboardEvent keyboardEvent=Js.cast(evt);
    if (isEnterKey(keyboardEvent) || isSpaceKey(keyboardEvent)) {
      open();
    }
  }
);
}"
62965,"public Popover(HTMLElement target,String title,Node content){
  this.targetElement=target;
  element.appendChild(arrowElement);
  element.appendChild(headingElement);
  element.appendChild(contentElement);
  headerText=new Text(title);
  headingElement.appendChild(headerText);
  contentElement.appendChild(content);
  showListener=evt -> {
    evt.stopPropagation();
    show();
  }
;
  target.addEventListener(EventType.click.getName(),showListener);
  closeListener=evt -> closeAll();
  DomGlobal.document.body.addEventListener(EventType.click.getName(),closeListener);
  element.addEventListener(EventType.click.getName(),Event::stopPropagation);
  onDetach(targetElement,mutationRecord -> element.remove());
}","public Popover(HTMLElement target,String title,Node content){
  this.targetElement=target;
  element.appendChild(arrowElement);
  element.appendChild(headingElement);
  element.appendChild(contentElement);
  headerText=new Text(title);
  headingElement.appendChild(headerText);
  contentElement.appendChild(content);
  showListener=evt -> {
    evt.stopPropagation();
    show();
  }
;
  target.addEventListener(EventType.click.getName(),showListener);
  closeListener=evt -> closeAll();
  DomGlobal.document.body.addEventListener(EventType.click.getName(),closeListener);
  element.addEventListener(EventType.click.getName(),Event::stopPropagation);
  ElementUtil.onDetach(targetElement,mutationRecord -> element.remove());
}"
62966,"public Tooltip(HTMLElement targetElement,Node content){
  element.appendChild(arrowElement);
  element.appendChild(innerElement);
  innerElement.appendChild(content);
  element.classList.add(popupPosition.getDirectionClass());
  targetElement.addEventListener(EventType.mouseenter.getName(),evt -> {
    evt.stopPropagation();
    document.body.appendChild(element);
    element.classList.remove(""String_Node_Str"",""String_Node_Str"");
    element.classList.add(""String_Node_Str"",""String_Node_Str"");
    popupPosition.position(element,targetElement);
    position(popupPosition);
  }
);
  onDetach(targetElement,mutationRecord -> element.remove());
  targetElement.addEventListener(EventType.mouseleave.getName(),evt1 -> element.remove());
}","public Tooltip(HTMLElement targetElement,Node content){
  element.appendChild(arrowElement);
  element.appendChild(innerElement);
  innerElement.appendChild(content);
  element.classList.add(popupPosition.getDirectionClass());
  targetElement.addEventListener(EventType.mouseenter.getName(),evt -> {
    evt.stopPropagation();
    document.body.appendChild(element);
    element.classList.remove(""String_Node_Str"",""String_Node_Str"");
    element.classList.add(""String_Node_Str"",""String_Node_Str"");
    popupPosition.position(element,targetElement);
    position(popupPosition);
  }
);
  ElementUtil.onDetach(targetElement,mutationRecord -> element.remove());
  targetElement.addEventListener(EventType.mouseleave.getName(),evt1 -> element.remove());
}"
62967,"private void init(){
  this.timePicker.addTimeSelectionHandler((time,dateTimeFormatInfo,picker) -> {
    setStringValue(time,picker);
    changeLabelFloating();
    autoValidate();
  }
);
  this.modalListener=evt -> modal.open();
  this.keyboardModalListener=event -> {
    event.stopPropagation();
    KeyboardEvent keyboardEvent=Js.cast(event);
    if (keyboardEvent.code.equals(""String_Node_Str"")) {
      modal.open();
    }
 else     if (keyboardEvent.code.equals(""String_Node_Str"")) {
      modal.close();
    }
  }
;
  onDetach(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  timePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  timePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
}","private void init(){
  this.timePicker.addTimeSelectionHandler((time,dateTimeFormatInfo,picker) -> {
    setStringValue(time,picker);
    changeLabelFloating();
    autoValidate();
  }
);
  this.modalListener=evt -> modal.open();
  this.keyboardModalListener=event -> {
    event.stopPropagation();
    KeyboardEvent keyboardEvent=Js.cast(event);
    if (keyboardEvent.code.equals(""String_Node_Str"")) {
      modal.open();
    }
 else     if (keyboardEvent.code.equals(""String_Node_Str"")) {
      modal.close();
    }
  }
;
  ElementUtil.onDetach(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  timePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  timePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
}"
62968,"@Override public void onBeforeAddHeaders(DataTable<T> dataTable){
  this.dataTable=dataTable;
  ColumnConfig<T> column=ColumnConfig.<T>create(""String_Node_Str"").setSortable(false).setWidth(""String_Node_Str"").setFixed(true).setCellRenderer(cell -> {
    applyStyles(cell);
    DetailsButtonElement<T> detailsButtonElement=new DetailsButtonElement<>(expandIcon,collapseIcon,RecordDetailsPlugin.this,cell);
    cell.getTableRow().addMetaObject(detailsButtonElement);
    applyStyles(cell);
    return detailsButtonElement.asElement();
  }
).setHeaderElement(columnTitle -> {
    HTMLElement htmlElement=IconButton.create(expandIcon.copy()).linkify().disable().asElement();
    Style.of(htmlElement).setProperty(""String_Node_Str"",""String_Node_Str"").setHeight(""String_Node_Str"").setMarginLeft(""String_Node_Str"");
    return htmlElement;
  }
).asHeader().textAlign(""String_Node_Str"");
  setupColumn(column);
  dataTable.getTableConfig().insertColumnFirst(column);
}","@Override public void onBeforeAddHeaders(DataTable<T> dataTable){
  this.dataTable=dataTable;
  ColumnConfig<T> column=ColumnConfig.<T>create(""String_Node_Str"").setSortable(false).setWidth(""String_Node_Str"").setFixed(true).setCellRenderer(cell -> {
    applyStyles(cell);
    DetailsButtonElement<T> detailsButtonElement=new DetailsButtonElement<>(expandIcon,collapseIcon,RecordDetailsPlugin.this,cell);
    cell.getTableRow().addMetaObject(detailsButtonElement);
    applyStyles(cell);
    return detailsButtonElement.asElement();
  }
).setHeaderElement(columnTitle -> {
    HTMLElement htmlElement=IconButton.create(expandIcon.copy()).linkify().disable().asElement();
    Style.of(htmlElement).setProperty(""String_Node_Str"",""String_Node_Str"").setHeight(""String_Node_Str"");
    return htmlElement;
  }
).asHeader().textAlign(""String_Node_Str"");
  setupColumn(column);
  dataTable.getTableConfig().insertColumnFirst(column);
}"
62969,"@Override public void onBeforeAddHeaders(DataTable<T> dataTable){
  dataTable.getTableConfig().insertColumnFirst(ColumnConfig.<T>create(""String_Node_Str"").setSortable(false).setWidth(""String_Node_Str"").setFixed(true).setHeaderElement(columnTitle -> {
    if (dataTable.isMultiSelect()) {
      CheckBox checkBox=createCheckBox();
      checkBox.addChangeHandler(checked -> {
        if (checked) {
          dataTable.selectAll();
        }
 else {
          dataTable.deselectAll();
        }
      }
);
      dataTable.addSelectionListener((selectedRows,selectedRecords) -> {
        if (selectedRows.size() != dataTable.getTableRows().size()) {
          checkBox.uncheck(true);
        }
 else {
          checkBox.check(true);
        }
      }
);
      return checkBox.asElement();
    }
 else {
      return new Text(""String_Node_Str"");
    }
  }
).setCellRenderer(cell -> {
    CheckBox checkBox=createCheckBox();
    cell.getTableRow().addSelectionHandler(selectable -> {
      if (selectable.isSelected()) {
        checkBox.check(true);
        if (nonNull(colorScheme)) {
          Style.of(((TableRow<T>)selectable).asElement()).css(colorScheme.lighten_5().getBackground());
        }
      }
 else {
        checkBox.uncheck(true);
        if (nonNull(colorScheme)) {
          Style.of(((TableRow<T>)selectable).asElement()).removeClass(colorScheme.lighten_5().getBackground());
        }
      }
    }
);
    checkBox.addChangeHandler(checked -> {
      if (checked) {
        cell.getTableRow().select();
        if (nonNull(colorScheme)) {
          Style.of(cell.getTableRow().asElement()).css(colorScheme.lighten_5().getBackground());
        }
        dataTable.onSelectionChange(cell.getTableRow());
      }
 else {
        cell.getTableRow().deselect();
        if (nonNull(colorScheme)) {
          Style.of(cell.getTableRow().asElement()).removeClass(colorScheme.lighten_5().getBackground());
        }
        dataTable.onSelectionChange(cell.getTableRow());
      }
    }
);
    return checkBox.asElement();
  }
).asHeader());
}","@Override public void onBeforeAddHeaders(DataTable<T> dataTable){
  dataTable.getTableConfig().insertColumnFirst(ColumnConfig.<T>create(""String_Node_Str"").setSortable(false).setWidth(""String_Node_Str"").setFixed(true).setTooltipNode(new Text(""String_Node_Str"")).setHeaderElement(columnTitle -> {
    if (dataTable.isMultiSelect()) {
      CheckBox checkBox=createCheckBox();
      checkBox.addChangeHandler(checked -> {
        if (checked) {
          dataTable.selectAll();
        }
 else {
          dataTable.deselectAll();
        }
      }
);
      dataTable.addSelectionListener((selectedRows,selectedRecords) -> {
        if (selectedRows.size() != dataTable.getTableRows().size()) {
          checkBox.uncheck(true);
        }
 else {
          checkBox.check(true);
        }
      }
);
      return checkBox.asElement();
    }
 else {
      return new Text(""String_Node_Str"");
    }
  }
).setCellRenderer(cell -> {
    CheckBox checkBox=createCheckBox();
    cell.getTableRow().addSelectionHandler(selectable -> {
      if (selectable.isSelected()) {
        checkBox.check(true);
        if (nonNull(colorScheme)) {
          Style.of(((TableRow<T>)selectable).asElement()).css(colorScheme.lighten_5().getBackground());
        }
      }
 else {
        checkBox.uncheck(true);
        if (nonNull(colorScheme)) {
          Style.of(((TableRow<T>)selectable).asElement()).removeClass(colorScheme.lighten_5().getBackground());
        }
      }
    }
);
    checkBox.addChangeHandler(checked -> {
      if (checked) {
        cell.getTableRow().select();
        if (nonNull(colorScheme)) {
          Style.of(cell.getTableRow().asElement()).css(colorScheme.lighten_5().getBackground());
        }
        dataTable.onSelectionChange(cell.getTableRow());
      }
 else {
        cell.getTableRow().deselect();
        if (nonNull(colorScheme)) {
          Style.of(cell.getTableRow().asElement()).removeClass(colorScheme.lighten_5().getBackground());
        }
        dataTable.onSelectionChange(cell.getTableRow());
      }
    }
);
    return checkBox.asElement();
  }
).asHeader());
}"
62970,"private CheckBox createCheckBox(){
  CheckBox checkBox=CheckBox.create();
  if (nonNull(colorScheme)) {
    checkBox.setColor(colorScheme.color());
  }
  Style.of(checkBox).setMargin(""String_Node_Str"");
  Style.of(checkBox.getInputElement()).setMargin(""String_Node_Str"");
  Style.of(checkBox.getLabelElement()).css(""String_Node_Str"").setMargin(""String_Node_Str"").setHeight(""String_Node_Str"");
  return checkBox;
}","private CheckBox createCheckBox(){
  CheckBox checkBox=CheckBox.create();
  if (nonNull(colorScheme)) {
    checkBox.setColor(colorScheme.color());
  }
  Style.of(checkBox).css(""String_Node_Str"");
  return checkBox;
}"
62971,"private void init(){
  this.timePicker.addTimeSelectionHandler(this::setStringValue);
  this.modalListener=evt -> modal.open();
  BodyObserver.observeRemoval(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  timePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  timePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
  timePicker.setColorSchemeHandler((oldColorScheme,newColorScheme) -> {
    if (nonNull(modal)) {
      modal.getHeaderContainerElement().classList.remove(oldColorScheme.color().getStyle());
      modal.getHeaderContainerElement().classList.add(newColorScheme.color().getStyle());
    }
    if (nonNull(popover)) {
      popover.getHeadingElement().classList.remove(oldColorScheme.color().getStyle());
      popover.getHeadingElement().classList.add(newColorScheme.color().getStyle());
    }
  }
);
}","private void init(){
  this.timePicker.addTimeSelectionHandler(this::setStringValue);
  this.modalListener=evt -> modal.open();
  BodyObserver.observeRemoval(asElement(),mutationRecord -> {
    if (nonNull(popover))     popover.discard();
    if (nonNull(modal)) {
      modal.close();
      modal.asElement().remove();
    }
  }
);
  timePicker.addCloseHandler(() -> {
    if (nonNull(popover))     popover.close();
    if (nonNull(modal) && modal.isOpen())     modal.close();
  }
);
  timePicker.addClearHandler(() -> setValue(null));
  setPickerStyle(PickerStyle.MODAL);
}"
62972,"private void showInPopOver(){
  if (!PickerStyle.POPOVER.equals(this.pickerStyle)) {
    if (nonNull(modal)) {
      asElement().removeEventListener(EventType.click.getName(),modalListener);
      modal.close();
      modal.asElement().remove();
    }
    if (isNull(popover)) {
      popover=Popover.create(this.asElement(),getPlaceholder(),this.timePicker.asElement());
      popover.getContentElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      popover.getContentElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      popover.position(this.popupPosition).asElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      popover.getHeadingElement().classList.add(Styles.align_center,timePicker.getColorScheme().color().getStyle());
    }
  }
  this.pickerStyle=PickerStyle.POPOVER;
}","private void showInPopOver(){
  if (!PickerStyle.POPOVER.equals(this.pickerStyle)) {
    if (nonNull(modal)) {
      asElement().removeEventListener(EventType.click.getName(),modalListener);
      modal.close();
      modal.asElement().remove();
    }
    if (isNull(popover)) {
      popover=Popover.createPicker(this.asElement(),this.timePicker.asElement());
      popover.getContentElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      popover.getContentElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      popover.position(this.popupPosition).asElement().style.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  this.pickerStyle=PickerStyle.POPOVER;
}"
62973,"@Override public TimeBox setPlaceholder(String placeholder){
  getInputElement().placeholder=placeholder;
  if (nonNull(modal)) {
    modal.setTitle(placeholder);
    modal.getHeaderContainerElement().classList.add(timePicker.getColorScheme().color().getStyle());
  }
  if (nonNull(popover)) {
    popover.getHeaderText().textContent=placeholder;
    popover.getHeadingElement().classList.add(timePicker.getColorScheme().color().getStyle());
  }
  return this;
}","@Override public TimeBox setPlaceholder(String placeholder){
  getInputElement().placeholder=placeholder;
  return this;
}"
62974,"public TimePicker(DateTimeFormatInfo dateTimeFormatInfo){
  this.dateTimeFormatInfo=dateTimeFormatInfo;
  this.clock=createTime(dateTimeFormatInfo);
  createCenterCircles(colorScheme);
  initRootSvg();
  initPickerElements();
  clearHoverStyle();
  reDraw();
  initFooter();
  preventTextSelection();
}","public TimePicker(DateTimeFormatInfo dateTimeFormatInfo){
  this.dateTimeFormatInfo=dateTimeFormatInfo;
  this.clock=createTime(dateTimeFormatInfo);
  createCenterCircles(colorScheme);
  initRootSvg();
  initPickerElements();
  reDraw();
  initFooter();
  preventTextSelection();
}"
62975,"private ClockElement makeHourElement(int hour){
  ClockElement clockElement=ClockElement.createHour(hour,clockStyle,colorScheme);
  builderFor(clockElement.getElement()).on(EventType.mouseenter,event -> markElement(clockElement)).on(EventType.mousedown,event -> {
    event.stopPropagation();
    event.preventDefault();
    markElement(clockElement);
  }
).on(EventType.click,event -> {
    event.stopPropagation();
    selectHour(clockElement.getValue());
    if (autoSwitchMinutes) {
      showMinutes();
    }
  }
);
  return clockElement;
}","private ClockElement makeHourElement(int hour){
  ClockElement clockElement=ClockElement.createHour(hour,clockStyle,colorScheme);
  builderFor(clockElement.getElement()).on(EventType.mouseenter,event -> {
    drawHourPointer(hourElements.get(clock.getHour()));
    drawHourPointer(clockElement);
  }
).on(EventType.mousedown,event -> {
    event.stopPropagation();
    event.preventDefault();
    drawHourPointer(hourElements.get(clock.getHour()));
    drawHourPointer(clockElement);
  }
).on(EventType.mouseout,event -> {
    if (clock.getHour() != clockElement.getValue())     removeHourPointer(clockElement);
  }
).on(EventType.click,event -> {
    event.stopPropagation();
    selectHour(clockElement.getValue());
    if (autoSwitchMinutes) {
      showMinutes();
    }
  }
);
  return clockElement;
}"
62976,"private void animateClock(){
  Animation.create(getPickerContentContainer()).transition(Transition.ZOOM_IN).duration(600).animate();
}","private void animateClock(){
  Animation.create(getPickerContentContainer()).transition(Transition.PULSE).duration(600).animate();
}"
62977,"private ClockElement makeMinuteElement(int minute){
  ClockElement clockElement=ClockElement.createMinute(minute,colorScheme);
  builderFor(clockElement.getElement()).on(EventType.mouseenter,event -> {
    markElement(clockElement);
    drawMinutesPointer(clockElement);
    MouseEvent mouseEvent=Js.cast(event);
    if (mouseEvent.buttons == 1) {
      setminute(clockElement.getValue());
    }
  }
).on(EventType.mousedown,event -> {
    event.stopPropagation();
    event.preventDefault();
  }
).on(EventType.mouseup,event -> {
    event.stopPropagation();
    event.preventDefault();
    setminute(clockElement.getValue());
  }
).on(EventType.touchstart,event -> {
    event.stopPropagation();
    event.preventDefault();
  }
).on(EventType.touchmove,event -> {
    setminute(clockElement.getValue());
  }
);
  return clockElement;
}","private ClockElement makeMinuteElement(int minute){
  ClockElement clockElement=ClockElement.createMinute(minute,colorScheme);
  builderFor(clockElement.getElement()).on(EventType.mouseenter,event -> {
    drawMinutesPointer(minutesElements.get(clock.getMinute()));
    drawMinutesPointer(clockElement);
    MouseEvent mouseEvent=Js.cast(event);
    if (mouseEvent.buttons == 1) {
      setminute(clockElement.getValue());
    }
  }
).on(EventType.mouseout,event -> {
    if (clock.getMinute() != clockElement.getValue())     removeMinutesPointer(clockElement);
  }
).on(EventType.mousedown,event -> {
    event.stopPropagation();
    event.preventDefault();
  }
).on(EventType.mouseup,event -> {
    event.stopPropagation();
    event.preventDefault();
    setminute(clockElement.getValue());
  }
).on(EventType.touchstart,event -> {
    event.stopPropagation();
    event.preventDefault();
  }
).on(EventType.touchmove,event -> {
    setminute(clockElement.getValue());
  }
);
  return clockElement;
}"
62978,"private void drawMinutesPointer(ClockElement clockElement){
  clear(minutesRootSvg);
  minutesRootSvg.appendChild(minutesCircle);
  minutesRootSvg.appendChild(clockElement.getCircle());
  minutesRootSvg.appendChild(clockElement.getLine());
  minutesRootSvg.appendChild(clockElement.getInnerCircle());
  minutesRootSvg.appendChild(minutesCenterCircle);
}","private void drawMinutesPointer(ClockElement clockElement){
  minutesRootSvg.appendChild(minutesCenterCircle);
  minutesRootSvg.appendChild(clockElement.getCircle());
  minutesRootSvg.appendChild(clockElement.getLine());
  minutesRootSvg.appendChild(clockElement.getInnerCircle());
}"
62979,"private void selectMinute(int minute,boolean silent){
  ClockElement clockElement=minutesElements.get(minute);
  drawMinutesPointer(clockElement);
  updateMinute(minute);
  formatTime();
  if (!silent)   onTimeChanged();
  Animation.create(minutesText).transition(Transition.FLIP_IN_X).duration(600).animate();
}","private void selectMinute(int minute,boolean silent){
  ClockElement clockElement=minutesElements.get(minute);
  clear(minutesRootSvg);
  minutesRootSvg.appendChild(minutesCircle);
  drawMinutesPointer(clockElement);
  updateMinute(minute);
  formatTime();
  if (!silent)   onTimeChanged();
  Animation.create(minutesText).transition(Transition.FLIP_IN_X).duration(600).animate();
}"
62980,"public Alert appendLink(HTMLAnchorElement anchorElement){
  if (nonNull(anchorElement)) {
    anchorElement.classList.add(""String_Node_Str"");
    alertElement.appendChild(anchorElement);
  }
  return this;
}","public Alert appendLink(HTMLAnchorElement anchorElement){
  if (nonNull(anchorElement)) {
    anchorElement.classList.add(""String_Node_Str"");
    element.appendChild(anchorElement);
  }
  return this;
}"
62981,"public Alert unDismissible(){
  if (dismissible) {
    alertElement.classList.remove(""String_Node_Str"");
    alertElement.removeChild(closeButton);
  }
  dismissible=false;
  return this;
}","public Alert unDismissible(){
  if (dismissible) {
    element.classList.remove(""String_Node_Str"");
    element.removeChild(closeButton);
  }
  dismissible=false;
  return this;
}"
62982,"@Override public Alert setBackground(Background background){
  if (nonNull(style))   alertElement.classList.remove(style);
  this.style=background.getStyle();
  alertElement.classList.add(this.style);
  return this;
}","@Override public Alert setBackground(Background background){
  if (nonNull(style))   element.classList.remove(style);
  this.style=background.getStyle();
  element.classList.add(this.style);
  return this;
}"
62983,"public Alert appendStrong(String text){
  alertElement.appendChild(strong().textContent(text).asElement());
  return this;
}","public Alert appendStrong(String text){
  element.appendChild(strong().textContent(text).asElement());
  return this;
}"
62984,"public Alert dismissible(){
  if (!dismissible) {
    alertElement.classList.add(""String_Node_Str"");
    if (alertElement.childElementCount > 0)     alertElement.insertBefore(closeButton,alertElement.firstChild);
 else     alertElement.appendChild(closeButton);
  }
  dismissible=true;
  return this;
}","public Alert dismissible(){
  if (!dismissible) {
    element.classList.add(""String_Node_Str"");
    if (element.childElementCount > 0)     element.insertBefore(closeButton,element.firstChild);
 else     element.appendChild(closeButton);
  }
  dismissible=true;
  return this;
}"
62985,"@Override public HTMLDivElement asElement(){
  return alertElement;
}","@Override public HTMLDivElement asElement(){
  return element;
}"
62986,"public Alert appendText(String text){
  alertElement.appendChild(new Text(text));
  return this;
}","public Alert appendText(String text){
  element.appendChild(new Text(text));
  return this;
}"
62987,"@Override public void setValue(String value){
  if (nonNull(value) && !value.isEmpty())   focus();
  inputElement.value=value;
}","@Override public void setValue(String value){
  inputElement.value=value;
  if (nonNull(value) && !value.isEmpty())   focus();
 else   unfocus();
}"
62988,"@Override public void setValue(String value){
  if (nonNull(value) && !value.isEmpty())   focus();
  inputElement.value=value;
}","@Override public void setValue(String value){
  inputElement.value=value;
  if (nonNull(value) && !value.isEmpty()) {
    focus();
  }
 else {
    unfocus();
  }
}"
62989,"public Popover(HTMLElement target,String title,Node content){
  this.targetElement=target;
  element.appendChild(arrowElement);
  element.appendChild(headingElement);
  element.appendChild(contentElement);
  headerText=new Text(title);
  headingElement.appendChild(headerText);
  contentElement.appendChild(content);
  showListener=evt -> {
    if (nonNull(currentVisible) && closeOthers) {
      closeOthers();
    }
    evt.stopPropagation();
    open(target);
    currentVisible.add(Popover.this);
  }
;
  target.addEventListener(EventType.click.getName(),showListener);
  closeListener=evt -> closeAll();
  DomGlobal.document.addEventListener(EventType.click.getName(),closeListener);
  element.addEventListener(EventType.click.getName(),Event::stopPropagation);
}","public Popover(HTMLElement target,String title,Node content){
  this.targetElement=target;
  element.appendChild(arrowElement);
  element.appendChild(headingElement);
  element.appendChild(contentElement);
  headerText=new Text(title);
  headingElement.appendChild(headerText);
  contentElement.appendChild(content);
  showListener=evt -> {
    if (nonNull(currentVisible) && closeOthers) {
      closeOthers();
    }
    evt.stopPropagation();
    open(target);
    currentVisible.add(Popover.this);
  }
;
  target.addEventListener(EventType.click.getName(),showListener);
  closeListener=evt -> closeAll();
  DomGlobal.document.body.addEventListener(EventType.click.getName(),closeListener);
  element.addEventListener(EventType.click.getName(),Event::stopPropagation);
  BodyObserver.observeRemoval(targetElement,mutationRecord -> element.remove());
}"
62990,"public Tooltip(HTMLElement targetElement,Node content){
  element.appendChild(arrowElement);
  element.appendChild(innerElement);
  innerElement.appendChild(content);
  element.classList.add(popupPosition.getDirectionClass());
  targetElement.addEventListener(EventType.mouseenter.getName(),evt -> {
    evt.stopPropagation();
    DomGlobal.document.body.appendChild(element);
    element.classList.remove(""String_Node_Str"",""String_Node_Str"");
    element.classList.add(""String_Node_Str"",""String_Node_Str"");
    popupPosition.position(element,targetElement);
    position(popupPosition);
  }
);
  EventListener onRemoveListener=new EventListener(){
    @Override public void handleEvent(    Event evt){
      if (evt.target.equals(targetElement)) {
        element.remove();
        DomGlobal.document.body.removeEventListener(""String_Node_Str"",this);
      }
    }
  }
;
  DomGlobal.document.body.addEventListener(""String_Node_Str"",onRemoveListener);
  targetElement.addEventListener(EventType.mouseleave.getName(),evt1 -> element.remove());
}","public Tooltip(HTMLElement targetElement,Node content){
  element.appendChild(arrowElement);
  element.appendChild(innerElement);
  innerElement.appendChild(content);
  element.classList.add(popupPosition.getDirectionClass());
  targetElement.addEventListener(EventType.mouseenter.getName(),evt -> {
    evt.stopPropagation();
    DomGlobal.document.body.appendChild(element);
    element.classList.remove(""String_Node_Str"",""String_Node_Str"");
    element.classList.add(""String_Node_Str"",""String_Node_Str"");
    popupPosition.position(element,targetElement);
    position(popupPosition);
  }
);
  BodyObserver.observeRemoval(targetElement,mutationRecord -> element.remove());
  targetElement.addEventListener(EventType.mouseleave.getName(),evt1 -> element.remove());
}"
62991,"public Clock12(DateTimeFormatInfo dateTimeFormatInfo){
  this.dateTimeFormatInfo=dateTimeFormatInfo;
  JsDate jsDate=new JsDate();
  this.setDayPeriod(jsDate.getHours() > 11 ? PM : AM);
  this.minute=jsDate.getMinutes();
  if (jsDate.getHours() > 12) {
    this.hour=jsDate.getHours() - 12;
  }
 else   if (jsDate.getHours() == 0) {
    this.hour=12;
  }
 else {
    this.hour=jsDate.getHours();
  }
}","Clock12(JsDate jsDate){
  this.setDayPeriod(jsDate.getHours() > 11 ? PM : AM);
  this.minute=jsDate.getMinutes();
  if (jsDate.getHours() > 12) {
    this.hour=jsDate.getHours() - 12;
  }
 else   if (jsDate.getHours() == 0) {
    this.hour=12;
  }
 else {
    this.hour=jsDate.getHours();
  }
}"
62992,"public Clock24(DateTimeFormatInfo dateTimeFormatInfo){
  this.dateTimeFormatInfo=dateTimeFormatInfo;
  JsDate date=new JsDate();
  this.hour=date.getHours();
  this.minute=date.getMinutes();
}","Clock24(JsDate jsDate){
  this.hour=jsDate.getHours();
  this.minute=jsDate.getMinutes();
}"
62993,"public Time(int hour,int minute,DayPeriod dayPeriod){
  this.hour=hour;
  this.minute=minute;
  this.dayPeriod=dayPeriod;
}","public Time(int hour,int minute,DayPeriod dayPeriod){
  JsDate jsDate=new JsDate();
  jsDate.setHours(hour);
  jsDate.setMinutes(minute);
  Clock clock;
  if (NONE.equals(dayPeriod)) {
    clock=new Clock24(jsDate);
  }
 else {
    clock=new Clock12(jsDate);
  }
  this.hour=clock.getHour();
  this.minute=clock.getMinute();
  this.dayPeriod=dayPeriod;
}"
62994,"@Override public void run(){
  Callback mCallback=callback;
  FrameLayout mPublisherViewContainer=sharedState.getPublisherViewContainer();
  Publisher mPublisher=sharedState.getPublisher();
  Session mSession=sharedState.getSession();
  mPublisherViewContainer.removeAllViews();
  mPublisherViewContainer=null;
  sharedState.setPublisherViewContainer(mPublisherViewContainer);
  if (mSession != null) {
    mSession.unpublish(mPublisher);
  }
  mPublisher.destroy();
  sharedState.setPublisher(null);
  mCallback.invoke();
}","@Override public void run(){
  Callback mCallback=callback;
  FrameLayout mPublisherViewContainer=sharedState.getPublisherViewContainer();
  Publisher mPublisher=sharedState.getPublisher();
  Session mSession=sharedState.getSession();
  if (mSession != null) {
    mSession.unpublish(mPublisher);
  }
  mPublisher.destroy();
  mPublisherViewContainer.removeAllViews();
  mPublisherViewContainer=null;
  sharedState.setPublisherViewContainer(mPublisherViewContainer);
  sharedState.setPublisher(null);
  mCallback.invoke();
}"
62995,"@ReactMethod public void destroyPublisher(final Callback callback){
  UiThreadUtil.runOnUiThread(new Runnable(){
    @Override public void run(){
      Callback mCallback=callback;
      FrameLayout mPublisherViewContainer=sharedState.getPublisherViewContainer();
      Publisher mPublisher=sharedState.getPublisher();
      Session mSession=sharedState.getSession();
      mPublisherViewContainer.removeAllViews();
      mPublisherViewContainer=null;
      sharedState.setPublisherViewContainer(mPublisherViewContainer);
      if (mSession != null) {
        mSession.unpublish(mPublisher);
      }
      mPublisher.destroy();
      sharedState.setPublisher(null);
      mCallback.invoke();
    }
  }
);
}","@ReactMethod public void destroyPublisher(final Callback callback){
  UiThreadUtil.runOnUiThread(new Runnable(){
    @Override public void run(){
      Callback mCallback=callback;
      FrameLayout mPublisherViewContainer=sharedState.getPublisherViewContainer();
      Publisher mPublisher=sharedState.getPublisher();
      Session mSession=sharedState.getSession();
      if (mSession != null) {
        mSession.unpublish(mPublisher);
      }
      mPublisher.destroy();
      mPublisherViewContainer.removeAllViews();
      mPublisherViewContainer=null;
      sharedState.setPublisherViewContainer(mPublisherViewContainer);
      sharedState.setPublisher(null);
      mCallback.invoke();
    }
  }
);
}"
62996,"@Override public void onStreamReceived(Session session,Stream stream){
  if (contains(jsEvents,sessionPreface + ""String_Node_Str"")) {
    ConcurrentHashMap<String,Stream> mSubscriberStreams=sharedState.getSubscriberStreams();
    mSubscriberStreams.put(stream.getStreamId(),stream);
    WritableMap streamInfo=prepareStreamMap(stream);
    sendEventMap(this.getReactApplicationContext(),sessionPreface + ""String_Node_Str"",streamInfo);
  }
  Log.i(TAG,""String_Node_Str"" + stream.getStreamId() + ""String_Node_Str""+ session.getSessionId());
}","@Override public void onStreamReceived(Session session,Stream stream){
  if (contains(jsEvents,sessionPreface + ""String_Node_Str"") || contains(componentEvents,sessionPreface + ""String_Node_Str"")) {
    ConcurrentHashMap<String,Stream> mSubscriberStreams=sharedState.getSubscriberStreams();
    mSubscriberStreams.put(stream.getStreamId(),stream);
    WritableMap streamInfo=prepareStreamMap(stream);
    sendEventMap(this.getReactApplicationContext(),sessionPreface + ""String_Node_Str"",streamInfo);
  }
  Log.i(TAG,""String_Node_Str"" + stream.getStreamId() + ""String_Node_Str""+ session.getSessionId());
}"
62997,"@Override public void onStreamDropped(Session session,Stream stream){
  if (contains(jsEvents,sessionPreface + ""String_Node_Str"")) {
    WritableMap streamInfo=prepareStreamMap(stream);
    sendEventMap(this.getReactApplicationContext(),sessionPreface + ""String_Node_Str"",streamInfo);
  }
  Log.i(TAG,""String_Node_Str"" + stream.getStreamId() + ""String_Node_Str""+ session.getSessionId());
}","@Override public void onStreamDropped(Session session,Stream stream){
  if (contains(jsEvents,sessionPreface + ""String_Node_Str"") || contains(componentEvents,sessionPreface + ""String_Node_Str"")) {
    WritableMap streamInfo=prepareStreamMap(stream);
    sendEventMap(this.getReactApplicationContext(),sessionPreface + ""String_Node_Str"",streamInfo);
  }
  Log.i(TAG,""String_Node_Str"" + stream.getStreamId() + ""String_Node_Str""+ session.getSessionId());
}"
62998,"@Override public void onDropViewInstance(PDFView pdfView){
  pdfView.onDrop();
}","@Override public void onDropViewInstance(PDFView pdfView){
  pdfView.onDrop();
  this.pdfView=null;
}"
62999,"@Override public void onAfterUpdateTransaction(ViewPdf viewPdf){
  super.onAfterUpdateTransaction(viewPdf);
  viewPdf.renderPdf();
}","@Override public void onAfterUpdateTransaction(ViewPdf viewPdf){
  super.onAfterUpdateTransaction(viewPdf);
  viewPdf.render();
}"
63000,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_detail);
  headKanji=(TextView)findViewById(R.id.header_kanji);
  headHiragana=(TextView)findViewById(R.id.header_hiragana);
  meaning=(TextView)findViewById(R.id.detail_meaning);
  meaningMn=(TextView)findViewById(R.id.detail_meaning_mn);
  partOfSpeech=(TextView)findViewById(R.id.detail_part_of);
  level=(TextView)findViewById(R.id.detail_level);
  kanji=(TextView)findViewById(R.id.detail_kanji);
  setDetails();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_detail);
  Intent intent=getIntent();
  wordTable=new WordTable();
  word=wordTable.select(intent.getStringExtra(""String_Node_Str""));
  TextView headKanji=(TextView)findViewById(R.id.header_kanji);
  TextView headHiragana=(TextView)findViewById(R.id.header_hiragana);
  TextView meaning=(TextView)findViewById(R.id.detail_meaning);
  TextView meaningMn=(TextView)findViewById(R.id.detail_meaning_mn);
  TextView partOfSpeech=(TextView)findViewById(R.id.detail_part_of);
  TextView level=(TextView)findViewById(R.id.detail_level);
  TextView kanji=(TextView)findViewById(R.id.detail_kanji);
  ImageButton backBtn=findViewById(R.id.back);
  favBtn=findViewById(R.id.btnFav);
  headKanji.setText(word.getKanji());
  headHiragana.setText(word.getCharacter());
  meaning.setText(word.getMeaning());
  meaningMn.setText(word.getMeaningMon());
  partOfSpeech.setText(word.getPartOfSpeech());
  level.setText(word.getLevel());
  kanji.setText(word.getKanji());
  Logger.e(word.toString());
  if (word.getIsFavorite().equals(""String_Node_Str""))   favBtn.setImageResource(R.drawable.ic_favorite_full);
  backBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      finish();
    }
  }
);
  favBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (word.getIsFavorite().equals(""String_Node_Str"")) {
        word.setIsFavorite(""String_Node_Str"");
        wordTable.update(word);
        favBtn.setImageResource(R.drawable.ic_favorite_full);
      }
 else {
        word.setIsFavorite(""String_Node_Str"");
        wordTable.update(word);
        favBtn.setImageResource(R.drawable.ic_favorite);
      }
    }
  }
);
}"
