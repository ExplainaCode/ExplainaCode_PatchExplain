record_number,buggy_code,fixed_code
26001,"private void processPolymorphicChildren(OneToManyPolymorphicAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(""String_Node_Str"").append(association.getTypeLabel()).append('\'');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(""String_Node_Str"")) == null) {
      childrenByParentId.put(child.get(""String_Node_Str""),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(""String_Node_Str"")).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processPolymorphicChildren(OneToManyPolymorphicAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(""String_Node_Str"").append(association.getTypeLabel()).append('\'');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(""String_Node_Str"")) == null) {
      childrenByParentId.put(child.get(""String_Node_Str""),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(""String_Node_Str"")).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
26002,"@Test public void shouldDeleteMany2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascadeShallow();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
}","@Test public void shouldDeleteMany2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascadeShallow();
  a(Doctor.count()).shouldBeEqual(3);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
}"
26003,"@Test public void shouldDeleteMany2ManyDeepSkippingAssociation(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Doctor.findAll().dump();
  Patient.findAll().dump();
  Prescription.findAll().dump();
  a(Doctor.count()).shouldBeEqual(3);
  a(Patient.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
  Patient.findById(3).deleteCascadeExcept(Patient.getMetaModel().getAssociationForTarget(Prescription.class));
  a(Doctor.count()).shouldBeEqual(2);
  a(Patient.count()).shouldBeEqual(2);
  a(Prescription.count()).shouldBeEqual(5);
}","@Test public void shouldDeleteMany2ManyDeepSkippingAssociation(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Doctor.findAll().dump();
  Patient.findAll().dump();
  Prescription.findAll().dump();
  a(Doctor.count()).shouldBeEqual(4);
  a(Patient.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
  Patient.findById(3).deleteCascadeExcept(Patient.getMetaModel().getAssociationForTarget(Prescription.class));
  a(Doctor.count()).shouldBeEqual(3);
  a(Patient.count()).shouldBeEqual(2);
  a(Prescription.count()).shouldBeEqual(5);
}"
26004,"@Test public void shouldDeleteMany2ManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascade();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(4);
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Prescription.findById(1).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Prescription.findById(5).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a(Prescription.count()).shouldBeEqual(5);
  a(Comment.count()).shouldBeEqual(2);
  Doctor.findById(1).deleteCascade();
  a(Doctor.count()).shouldBeEqual(1);
  a(DoctorsPatients.count()).shouldBeEqual(1);
  a(Prescription.count()).shouldBeEqual(1);
  a(Comment.count()).shouldBeEqual(1);
}","@Test public void shouldDeleteMany2ManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascade();
  a(Doctor.count()).shouldBeEqual(3);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(4);
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Prescription.findById(1).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Prescription.findById(5).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a(Prescription.count()).shouldBeEqual(5);
  a(Comment.count()).shouldBeEqual(2);
  Doctor.findById(1).deleteCascade();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(1);
  a(Prescription.count()).shouldBeEqual(1);
  a(Comment.count()).shouldBeEqual(1);
}"
26005,"@Test public void shouldDeleteOneToManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascade();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(1);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(2);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(0);
}","@Test public void shouldDeleteOneToManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascade();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(2);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(2);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(0);
}"
26006,"@Test public void shouldDeleteOne2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascadeShallow();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(1);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(4);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(2);
}","@Test public void shouldDeleteOne2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascadeShallow();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(2);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(4);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(2);
}"
26007,"@Test public void testDeleteCascade(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  final User u=new User();
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.saveIt();
  Address a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a(User.findAll().size()).shouldBeEqual(3);
  a(Address.findAll().size()).shouldBeEqual(9);
  u.deleteCascade();
  a(User.findAll().size()).shouldBeEqual(2);
  a(Address.findAll().size()).shouldBeEqual(7);
}","@Test public void testDeleteCascade(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  final User u=new User();
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.saveIt();
  Address a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a(User.findAll().size()).shouldBeEqual(4);
  a(Address.findAll().size()).shouldBeEqual(9);
  u.deleteCascade();
  a(User.findAll().size()).shouldBeEqual(3);
  a(Address.findAll().size()).shouldBeEqual(7);
}"
26008,"@Test public void shouldFindFOtherDb(){
  List<User> users=User.findAll().orderBy(""String_Node_Str"");
  List<OtherDbModel> others=OtherDbModel.findAll().orderBy(""String_Node_Str"");
  the(users.size()).shouldBeEqual(2);
  the(users.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.size()).shouldBeEqual(2);
  the(others.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
}","@Test public void shouldFindFOtherDb(){
  List<User> users=User.findAll().orderBy(""String_Node_Str"");
  List<OtherDbModel> others=OtherDbModel.findAll().orderBy(""String_Node_Str"");
  the(users.size()).shouldBeEqual(3);
  the(users.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(2).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.size()).shouldBeEqual(2);
  the(others.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
}"
26009,"@Test public void shouldGenerateFromList(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  LazyList<User> personList=User.findAll().orderBy(""String_Node_Str"").include(Address.class);
  String xml=personList.toXml(false,true);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(2);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
}","@Test public void shouldGenerateFromList(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  LazyList<User> personList=User.findAll().orderBy(""String_Node_Str"").include(Address.class);
  String xml=personList.toXml(false,true);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(3);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
}"
26010,"public List<String> getPopulateStatements(String table){
  List<String> statements;
  String ID_COLUMN=""String_Node_Str"";
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
    ID_COLUMN=""String_Node_Str"";
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<String>();
  if (ID_COLUMN != null) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str"");
  }
  all.addAll(statements);
  if (ID_COLUMN != null) {
    int statementCount=statements.size();
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str""+ (statementCount + 1)+ ""String_Node_Str"");
  }
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements;
  String ID_COLUMN=""String_Node_Str"";
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
    ID_COLUMN=""String_Node_Str"";
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<String>();
  if (ID_COLUMN != null) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str"");
  }
  all.addAll(statements);
  if (ID_COLUMN != null) {
    int statementCount=statements.size();
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str""+ (statementCount + 1)+ ""String_Node_Str"");
  }
  return all;
}"
26011,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
26012,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  return all;
}"
26013,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  return all;
}"
26014,"@Override public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","@Override public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
26015,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
26016,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.addAll(statements);
  return all;
}"
26017,"/** 
 * This will scan directory for class files, non-recursive.
 * @param directory directory to scan.
 * @throws IOException , NotFoundException
 */
private void findFiles(File directory) throws IOException, ClassNotFoundException {
  File files[]=directory.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  if (files != null) {
    for (    File file : files) {
      int current=currentDirectoryPath.length();
      String fileName=file.getCanonicalPath().substring(++current);
      String className=fileName.replace(File.separatorChar,'.').substring(0,fileName.length() - 6);
      tryClass(className);
    }
  }
}","/** 
 * This will scan directory for class files, non-recursive.
 * @param directory directory to scan.
 * @throws IOException , NotFoundException
 */
private void findFiles(File directory) throws IOException, ClassNotFoundException {
  File[] files=directory.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  if (files != null) {
    for (    File file : files) {
      int current=currentDirectoryPath.length();
      String fileName=file.getCanonicalPath().substring(++current);
      String className=fileName.replace(File.separatorChar,'.').substring(0,fileName.length() - 6);
      tryClass(className);
    }
  }
}"
26018,"protected void processRS(RowListener listener) throws SQLException {
  ResultSetMetaData metaData=rs.getMetaData();
  String labels[]=new String[metaData.getColumnCount()];
  int i=0;
  while (i < labels.length) {
    labels[i++]=metaData.getColumnLabel(i);
  }
  while (rs.next()) {
    Map<String,Object> row=new CaseInsensitiveMap<Object>();
    i=0;
    while (i < labels.length) {
      row.put(labels[i++],rs.getObject(i));
    }
    if (!listener.next(row)) {
      break;
    }
  }
}","protected void processRS(RowListener listener) throws SQLException {
  ResultSetMetaData metaData=rs.getMetaData();
  String[] labels=new String[metaData.getColumnCount()];
  int i=0;
  while (i < labels.length) {
    labels[i++]=metaData.getColumnLabel(i);
  }
  while (rs.next()) {
    Map<String,Object> row=new CaseInsensitiveMap<Object>();
    i=0;
    while (i < labels.length) {
      row.put(labels[i++],rs.getObject(i));
    }
    if (!listener.next(row)) {
      break;
    }
  }
}"
26019,"private static void copyStream(Reader r,Writer w) throws IOException {
  char buffer[]=new char[4096];
  for (int n=0; -1 != (n=r.read(buffer)); ) {
    w.write(buffer,0,n);
  }
}","private static void copyStream(Reader r,Writer w) throws IOException {
  char[] buffer=new char[4096];
  for (int n=0; -1 != (n=r.read(buffer)); ) {
    w.write(buffer,0,n);
  }
}"
26020,"/** 
 * This method is specific for inserts.
 * @param query SQL for inserts.
 * @param autoIncrementColumnName name of a column that is auto-incremented.
 * @param params list of parameter values.
 * @return new value of auto-incremented column that is uniquely identifying a new record inserted. May return -1 if thisfunctionality is not supported by DB or driver.
 */
long execInsert(String query,String autoIncrementColumnName,Object... params){
  if (!query.toLowerCase().contains(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  long start=System.currentTimeMillis();
  PreparedStatement ps;
  try {
    Connection connection=connection();
    ps=StatementCache.instance().getPreparedStatement(connection,query);
    if (ps == null) {
      ps=connection.prepareStatement(query,new String[]{autoIncrementColumnName});
      StatementCache.instance().cache(connection,query,ps);
    }
    for (int index=0; index < params.length; index++) {
      Object param=params[index];
      if (param instanceof byte[]) {
        byte[] bytes=(byte[])param;
        try {
          Blob b=connection.createBlob();
          b.setBytes(1,bytes);
          ps.setBlob(index + 1,b);
        }
 catch (        AbstractMethodError e) {
          ps.setObject(index + 1,param);
        }
      }
 else {
        ps.setObject(index + 1,param);
      }
    }
    ps.executeUpdate();
    ResultSet rs=null;
    try {
      rs=ps.getGeneratedKeys();
      if (rs.next()) {
        long id=rs.getLong(1);
        LogFilter.logQuery(logger,query,params,start);
        return id;
      }
 else {
        return -1;
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + query,e);
      return -1;
    }
 finally {
      try {
        if (rs != null)         rs.close();
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Exception e) {
    throw new DBException(query,params,e);
  }
}","/** 
 * This method is specific for inserts.
 * @param query SQL for inserts.
 * @param autoIncrementColumnName name of a column that is auto-incremented.
 * @param params list of parameter values.
 * @return new value of auto-incremented column that is uniquely identifying a new record inserted. May return -1 if thisfunctionality is not supported by DB or driver.
 */
long execInsert(String query,String autoIncrementColumnName,Object... params){
  if (!query.toLowerCase().contains(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  long start=System.currentTimeMillis();
  PreparedStatement ps;
  try {
    Connection connection=connection();
    ps=StatementCache.instance().getPreparedStatement(connection,query);
    if (ps == null) {
      ps=connection.prepareStatement(query,new String[]{autoIncrementColumnName});
      StatementCache.instance().cache(connection,query,ps);
    }
    for (int index=0; index < params.length; index++) {
      Object param=params[index];
      if (param instanceof byte[]) {
        byte[] bytes=(byte[])param;
        try {
          Blob b=connection.createBlob();
          b.setBytes(1,bytes);
          ps.setBlob(index + 1,b);
        }
 catch (        AbstractMethodError e) {
          ps.setObject(index + 1,param);
        }
catch (        SQLFeatureNotSupportedException e) {
          ps.setObject(index + 1,param);
        }
catch (        SQLException e) {
          ps.setObject(index + 1,param);
        }
      }
 else {
        ps.setObject(index + 1,param);
      }
    }
    ps.executeUpdate();
    ResultSet rs=null;
    try {
      rs=ps.getGeneratedKeys();
      if (rs.next()) {
        long id=rs.getLong(1);
        LogFilter.logQuery(logger,query,params,start);
        return id;
      }
 else {
        return -1;
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + query,e);
      return -1;
    }
 finally {
      try {
        if (rs != null)         rs.close();
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Exception e) {
    throw new DBException(query,params,e);
  }
}"
26021,"protected String toJsonP(boolean pretty,String indent,String... attrs){
  List<String> attrList=Arrays.asList(attrs);
  Collections.sort(attrList);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str""));
  List<String> attributeStrings=new ArrayList<String>();
  if (attrList.size() == 0) {
    for (    String name : attributes.keySet()) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
 else {
    for (    String name : attrList) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  beforeClosingBrace(pretty,pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"",sw);
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}","protected String toJsonP(boolean pretty,String indent,String... attrs){
  Collection<String> attrList=Arrays.asList(attrs);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str""));
  List<String> attributeStrings=new ArrayList<String>();
  if (attrList.size() == 0) {
    attrList=attributes.keySet();
  }
  for (  String name : attrList) {
    Object v=get(name);
    String val=null;
    if (v == null) {
      val=""String_Node_Str"";
    }
 else     if (v instanceof Number || v instanceof Boolean) {
      val=v.toString();
    }
 else     if (v instanceof Date) {
      val=""String_Node_Str"" + isoDateFormater.format((Date)v) + ""String_Node_Str"";
    }
 else {
      val=""String_Node_Str"" + v.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
    attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  beforeClosingBrace(pretty,pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"",sw);
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}"
26022,"protected String toJsonP(boolean pretty,String indent,String... attrs){
  List<String> attrList=Arrays.asList(attrs);
  Collections.sort(attrList);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str""));
  List<String> attributeStrings=new ArrayList<String>();
  if (attrList.size() == 0) {
    for (    String name : attributes.keySet()) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
 else {
    for (    String name : attrList) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  beforeClosingBrace(pretty,pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"",sw);
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}","protected String toJsonP(boolean pretty,String indent,String... attrs){
  Collection<String> attrList=Arrays.asList(attrs);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str""));
  List<String> attributeStrings=new ArrayList<String>();
  if (attrList.size() == 0) {
    attrList=attributes.keySet();
  }
  for (  String name : attrList) {
    Object v=get(name);
    String val=null;
    if (v == null) {
      val=""String_Node_Str"";
    }
 else     if (v instanceof Number || v instanceof Boolean) {
      val=v.toString();
    }
 else     if (v instanceof Date) {
      val=""String_Node_Str"" + isoDateFormater.format((Date)v) + ""String_Node_Str"";
    }
 else {
      val=""String_Node_Str"" + v.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
    attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  beforeClosingBrace(pretty,pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"",sw);
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}"
26023,"private void instrument(String instrumentationDirectory) throws MalformedURLException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  if (!new File(instrumentationDirectory).exists()) {
    getLog().info(""String_Node_Str"" + instrumentationDirectory + ""String_Node_Str"");
    return;
  }
  ClassLoader realmLoader=getClass().getClassLoader();
  URL outDir=new File(instrumentationDirectory).toURL();
  Method addUrlMethod=realmLoader.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",URL.class);
  addUrlMethod.setAccessible(true);
  addUrlMethod.invoke(realmLoader,outDir);
  Instrumentation instrumentation=new Instrumentation();
  instrumentation.setOutputDirectory(instrumentationDirectory);
  instrumentation.setLog(getLog());
  instrumentation.instrument();
}","private void instrument(String instrumentationDirectory) throws MalformedURLException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  if (!new File(instrumentationDirectory).exists()) {
    getLog().info(""String_Node_Str"" + instrumentationDirectory + ""String_Node_Str"");
    return;
  }
  ClassLoader realmLoader=getClass().getClassLoader();
  URL outDir=new File(instrumentationDirectory).toURL();
  Method addUrlMethod=realmLoader.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",URL.class);
  addUrlMethod.setAccessible(true);
  addUrlMethod.invoke(realmLoader,outDir);
  Instrumentation instrumentation=new Instrumentation();
  instrumentation.setOutputDirectory(instrumentationDirectory);
  instrumentation.instrument();
}"
26024,"public void instrument(){
  if (outputDirectory == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + outputDirectory);
    InstrumentationModelFinder mf=new InstrumentationModelFinder(log);
    File target=new File(outputDirectory);
    mf.processDirectoryPath(target);
    ModelInstrumentation mi=new ModelInstrumentation(log);
    for (    CtClass clazz : mf.getModels()) {
      mi.instrument(clazz);
    }
    generateModelsFile(mf.getModels(),target);
    log.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void instrument(){
  if (outputDirectory == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + outputDirectory);
    InstrumentationModelFinder mf=new InstrumentationModelFinder();
    File target=new File(outputDirectory);
    mf.processDirectoryPath(target);
    ModelInstrumentation mi=new ModelInstrumentation();
    for (    CtClass clazz : mf.getModels()) {
      mi.instrument(clazz);
    }
    generateModelsFile(mf.getModels(),target);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
26025,"InstrumentationModelFinder(Log log) throws NotFoundException {
  ClassPool pool=ClassPool.getDefault();
  pool.insertClassPath(new ClassClassPath(ModelFinder.class));
  modelClass=pool.get(""String_Node_Str"");
  this.log=log;
}","InstrumentationModelFinder() throws NotFoundException {
  ClassPool pool=ClassPool.getDefault();
  pool.insertClassPath(new ClassClassPath(ModelFinder.class));
  modelClass=pool.get(""String_Node_Str"");
}"
26026,"@Override protected void classFound(String className) throws IOException, ClassNotFoundException {
  try {
    ClassPool cp=ClassPool.getDefault();
    CtClass clazz=cp.get(className);
    if (clazz.subclassOf(modelClass) && !clazz.equals(modelClass)) {
      models.add(clazz);
      log.info(""String_Node_Str"" + clazz.getName());
    }
  }
 catch (  Exception e) {
    throw new InstrumentationException(e);
  }
}","@Override protected void classFound(String className) throws IOException, ClassNotFoundException {
  try {
    ClassPool cp=ClassPool.getDefault();
    CtClass clazz=cp.get(className);
    if (clazz.subclassOf(modelClass) && !clazz.equals(modelClass)) {
      models.add(clazz);
      System.out.println(""String_Node_Str"" + clazz.getName());
    }
  }
 catch (  Exception e) {
    throw new InstrumentationException(e);
  }
}"
26027,"private void addDelegates(CtClass target) throws NotFoundException, CannotCompileException {
  CtMethod[] modelMethods=modelClass.getDeclaredMethods();
  CtMethod[] targetMethods=target.getDeclaredMethods();
  for (  CtMethod method : modelMethods) {
    if (Modifier.PRIVATE == method.getModifiers()) {
      continue;
    }
    CtMethod newMethod=CtNewMethod.delegator(method,target);
    if (!targetHasMethod(targetMethods,newMethod)) {
      target.addMethod(newMethod);
    }
 else {
      log.info(""String_Node_Str"" + newMethod.getName() + ""String_Node_Str"");
    }
  }
}","private void addDelegates(CtClass target) throws NotFoundException, CannotCompileException {
  CtMethod[] modelMethods=modelClass.getDeclaredMethods();
  CtMethod[] targetMethods=target.getDeclaredMethods();
  for (  CtMethod method : modelMethods) {
    if (Modifier.PRIVATE == method.getModifiers()) {
      continue;
    }
    CtMethod newMethod=CtNewMethod.delegator(method,target);
    if (!targetHasMethod(targetMethods,newMethod)) {
      target.addMethod(newMethod);
    }
 else {
      System.out.println(""String_Node_Str"" + newMethod.getName() + ""String_Node_Str"");
    }
  }
}"
26028,"public ModelInstrumentation(Log log) throws NotFoundException {
  ClassPool cp=ClassPool.getDefault();
  cp.insertClassPath(new ClassClassPath(this.getClass()));
  modelClass=ClassPool.getDefault().get(""String_Node_Str"");
  this.log=log;
}","public ModelInstrumentation() throws NotFoundException {
  ClassPool cp=ClassPool.getDefault();
  cp.insertClassPath(new ClassClassPath(this.getClass()));
  modelClass=ClassPool.getDefault().get(""String_Node_Str"");
}"
26029,"public void instrument(CtClass modelClass) throws InstrumentationException {
  try {
    addDelegates(modelClass);
    CtMethod m=CtNewMethod.make(""String_Node_Str"" + modelClass.getName() + ""String_Node_Str"",modelClass);
    CtMethod getClassNameMethod=modelClass.getDeclaredMethod(""String_Node_Str"");
    modelClass.removeMethod(getClassNameMethod);
    modelClass.addMethod(m);
    String out=getOutputDirectory(modelClass);
    log.info(""String_Node_Str"" + modelClass.getName() + ""String_Node_Str""+ out);
    modelClass.writeFile(out);
  }
 catch (  Exception e) {
    throw new InstrumentationException(e);
  }
}","public void instrument(CtClass modelClass) throws InstrumentationException {
  try {
    addDelegates(modelClass);
    CtMethod m=CtNewMethod.make(""String_Node_Str"" + modelClass.getName() + ""String_Node_Str"",modelClass);
    CtMethod getClassNameMethod=modelClass.getDeclaredMethod(""String_Node_Str"");
    modelClass.removeMethod(getClassNameMethod);
    modelClass.addMethod(m);
    String out=getOutputDirectory(modelClass);
    System.out.println(""String_Node_Str"" + modelClass.getName() + ""String_Node_Str""+ out);
    modelClass.writeFile(out);
  }
 catch (  Exception e) {
    throw new InstrumentationException(e);
  }
}"
26030,"protected String toJsonP(boolean pretty,String indent,String... attrs){
  List<String> attrList=Arrays.asList(attrs);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"")+ ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str"");
  List<String> attributeStrings=new ArrayList<String>();
  for (  String name : attributes.keySet()) {
    if (attrList.contains(name) || attrList.size() == 0) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + name + ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}","protected String toJsonP(boolean pretty,String indent,String... attrs){
  List<String> attrList=Arrays.asList(attrs);
  StringWriter sw=new StringWriter();
  sw.write(indent + ""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"")+ ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str"");
  List<String> attributeStrings=new ArrayList<String>();
  for (  String name : attributes.keySet()) {
    if (attrList.contains(name) || attrList.size() == 0) {
      String val=getString(name);
      val=val == null ? val : val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      attributeStrings.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
  }
  sw.write(Util.join(attributeStrings,""String_Node_Str""));
  if (cachedChildren != null && cachedChildren.size() > 0) {
    sw.write(""String_Node_Str"" + (pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
    for (    Class childClass : cachedChildren.keySet()) {
      String name=Inflector.pluralize(childClass.getSimpleName()).toLowerCase();
      sw.write((pretty ? ""String_Node_Str"" + indent + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + name+ ""String_Node_Str"");
      List<String> childrenList=new ArrayList<String>();
      for (      Model child : cachedChildren.get(childClass)) {
        childrenList.add((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + child.toJsonP(pretty,(pretty ? indent + ""String_Node_Str"" : ""String_Node_Str"")));
      }
      sw.write(Util.join(childrenList,""String_Node_Str""));
      sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
    }
    sw.write((pretty ? ""String_Node_Str"" + indent + indent : ""String_Node_Str"") + ""String_Node_Str"");
  }
  sw.write((pretty ? ""String_Node_Str"" + indent : ""String_Node_Str"") + ""String_Node_Str"");
  return sw.toString();
}"
26031,"public void before() throws Exception {
  super.before();
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void before() throws Exception {
  super.before();
  deleteFromTable(""String_Node_Str"");
  deleteFromTable(""String_Node_Str"");
  deleteFromTable(""String_Node_Str"");
  populateTable(""String_Node_Str"");
  populateTable(""String_Node_Str"");
  populateTable(""String_Node_Str"");
}"
26032,"void init(String dbName){
  if (initedDbs.contains(dbName))   return;
  initedDbs.add(dbName);
  try {
    mf.findModels();
    String dbType=ConnectionsAccess.getConnection(dbName).getMetaData().getDatabaseProductName();
    registerModels(dbName,mf.getModelsForDb(dbName),dbType);
    String[] tables=metaModels.getTableNames(dbName);
    for (    String table : tables) {
      Map<String,ColumnMetadata> metaParams=fetchMetaParams(table,dbName);
      registerColumnMetadata(table,metaParams);
    }
    processOverrides(mf.getModelsForDb(dbName));
    for (    String table : tables) {
      discoverAssociationsFor(table,dbName);
    }
  }
 catch (  Exception e) {
    if (e instanceof InitException)     throw (InitException)e;
    if (e instanceof DBException)     throw (DBException)e;
 else     throw new InitException(e);
  }
}","void init(String dbName){
  if (initedDbs.contains(dbName)) {
    return;
  }
synchronized (this) {
    if (initedDbs.contains(dbName)) {
      return;
    }
 else {
      initedDbs.add(dbName);
    }
    try {
      mf.findModels();
      String dbType=ConnectionsAccess.getConnection(dbName).getMetaData().getDatabaseProductName();
      registerModels(dbName,mf.getModelsForDb(dbName),dbType);
      String[] tables=metaModels.getTableNames(dbName);
      for (      String table : tables) {
        Map<String,ColumnMetadata> metaParams=fetchMetaParams(table,dbName);
        registerColumnMetadata(table,metaParams);
      }
      processOverrides(mf.getModelsForDb(dbName));
      for (      String table : tables) {
        discoverAssociationsFor(table,dbName);
      }
    }
 catch (    Exception e) {
      if (e instanceof InitException) {
        throw (InitException)e;
      }
      if (e instanceof DBException) {
        throw (DBException)e;
      }
 else {
        throw new InitException(e);
      }
    }
  }
}"
26033,"public Collection<String> values(){
  List<String> messageList=new ArrayList<String>();
  for (  Object v : validators.entrySet()) {
    messageList.add(((Validator)v).formatMessage(locale));
  }
  return messageList;
}","public Collection<String> values(){
  List<String> messageList=new ArrayList<String>();
  for (  java.util.Map.Entry<String,Validator> v : validators.entrySet()) {
    messageList.add(((Validator)v.getValue()).formatMessage(locale));
  }
  return messageList;
}"
26034,"/** 
 * @param result result of execution (contains also the exit value)
 */
public InvalidExitValueException(String message,ProcessResult result){
  super(message,result);
}","/** 
 * @param message the detail message of the exception
 * @param result result of execution (contains also the exit value)
 */
public InvalidExitValueException(String message,ProcessResult result){
  super(message,result);
}"
26035,"/** 
 * @param result result of execution (contains also the exit value)
 */
public InvalidOutputException(String message,ProcessResult result){
  super(message,result);
}","/** 
 * @param message the detail message of the exception
 * @param result result of execution (contains also the exit value)
 */
public InvalidOutputException(String message,ProcessResult result){
  super(message,result);
}"
26036,"/** 
 * @param result result of execution (contains also the exit value)
 */
public InvalidResultException(String message,ProcessResult result){
  super(message);
  this.result=result;
}","/** 
 * @param message the detail message of the exception
 * @param result result of execution (contains also the exit value)
 */
public InvalidResultException(String message,ProcessResult result){
  super(message);
  this.result=result;
}"
26037,"/** 
 * Sets a stream handler for the process being executed. This will overwrite any stream redirection that was previously set to use the provided handler.
 * @return This process executor.
 */
public ProcessExecutor streams(ExecuteStreamHandler streams){
  validateStreams(streams,readOutput);
  this.streams=streams;
  return this;
}","/** 
 * Sets a stream handler for the process being executed. This will overwrite any stream redirection that was previously set to use the provided handler.
 * @param streams the stream handler
 * @return This process executor.
 */
public ProcessExecutor streams(ExecuteStreamHandler streams){
  validateStreams(streams,readOutput);
  this.streams=streams;
  return this;
}"
26038,"/** 
 * Sets a timeout for closing standard streams of the process being executed. When this timeout is reached we log a warning but consider that the process has finished. We also flush the streams so that all output read so far is available. <p> This can be used on Windows in case a process exits quickly but closing the streams blocks forever. </p> <p> Closing timeout must fit into the general execution timeout (see   {@link #timeout(long,TimeUnit)}). By default there's no closing timeout.
 * @param timeout timeout for closing streams of a process.
 * @return This process executor.
 */
public ProcessExecutor closeTimeout(long timeout,TimeUnit unit){
  this.closeTimeout=timeout;
  this.closeTimeoutUnit=unit;
  return this;
}","/** 
 * Sets a timeout for closing standard streams of the process being executed. When this timeout is reached we log a warning but consider that the process has finished. We also flush the streams so that all output read so far is available. <p> This can be used on Windows in case a process exits quickly but closing the streams blocks forever. </p> <p> Closing timeout must fit into the general execution timeout (see   {@link #timeout(long,TimeUnit)}). By default there's no closing timeout.
 * @param timeout timeout for closing streams of a process.
 * @param unit the time unit of the timeout
 * @return This process executor.
 */
public ProcessExecutor closeTimeout(long timeout,TimeUnit unit){
  this.closeTimeout=timeout;
  this.closeTimeoutUnit=unit;
  return this;
}"
26039,"/** 
 * Sets this working directory for the process being executed. The argument may be <code>null</code> -- this means to use the working directory of the current Java process, usually the directory named by the system property <code>user.dir</code>, as the working directory of the child process.</p>
 * @param directory  The new working directory
 * @return  This process executor.
 */
public ProcessExecutor directory(File directory){
  builder.directory(directory);
  return this;
}","/** 
 * Sets this working directory for the process being executed. The argument may be <code>null</code> -- this means to use the working directory of the current Java process, usually the directory named by the system property <code>user.dir</code>, as the working directory of the child process.
 * @param directory  The new working directory
 * @return  This process executor.
 */
public ProcessExecutor directory(File directory){
  builder.directory(directory);
  return this;
}"
26040,"/** 
 * Sets a timeout for the process being executed. When this timeout is reached a   {@link TimeoutException} is thrown and the process is destroyed.This only applies to <code>execute</code> methods not <code>start</code> methods.
 * @param timeout timeout for running a process.
 * @return This process executor.
 */
public ProcessExecutor timeout(long timeout,TimeUnit unit){
  this.timeout=timeout;
  this.timeoutUnit=unit;
  return this;
}","/** 
 * Sets a timeout for the process being executed. When this timeout is reached a   {@link TimeoutException} is thrown and the process is destroyed.This only applies to <code>execute</code> methods not <code>start</code> methods.
 * @param timeout timeout for running a process.
 * @param unit the time unit of the timeout
 * @return This process executor.
 */
public ProcessExecutor timeout(long timeout,TimeUnit unit){
  this.timeout=timeout;
  this.timeoutUnit=unit;
  return this;
}"
26041,"/** 
 * Override this to customize how the background task is created.
 */
protected <T>Callable<T> wrapTask(Callable<T> task){
  Map contextMap=MDC.getCopyOfContextMap();
  if (contextMap != null) {
    return new MDCCallableAdapter(task,contextMap);
  }
  return task;
}","/** 
 * Override this to customize how the background task is created.
 * @param < T > the type of the Task
 * @param task the Task to be wrapped
 * @return the wrapped task
 */
protected <T>Callable<T> wrapTask(Callable<T> task){
  Map contextMap=MDC.getCopyOfContextMap();
  if (contextMap != null) {
    return new MDCCallableAdapter(task,contextMap);
  }
  return task;
}"
26042,"/** 
 * Override this to customize how the waiting task is started in the background.
 */
protected <T>Future<T> invokeSubmit(ExecutorService executor,Callable<T> task){
  return executor.submit(wrapTask(task));
}","/** 
 * Override this to customize how the waiting task is started in the background.
 * @param < T > the type of the task
 * @param executor the executor service to submit the task on
 * @param task the task to be submitted
 * @return the future of the task
 */
protected <T>Future<T> invokeSubmit(ExecutorService executor,Callable<T> task){
  return executor.submit(wrapTask(task));
}"
26043,"/** 
 * Closes standard streams of a given sub process.
 * @param process sub process (not <code>null</code>).
 */
void close(Process process) throws IOException, InterruptedException ;","/** 
 * Closes standard streams of a given sub process.
 * @param process sub process (not <code>null</code>).
 * @throws IOException if I/O errors occur while closing the underlying stream
 * @throws InterruptedException if underlying throws a InterruptedException
 */
void close(Process process) throws IOException, InterruptedException ;"
26044,"/** 
 * Install a handler for the input stream of the subprocess.
 * @param os output stream to write to the standard input stream of the subprocess
 */
void setProcessInputStream(OutputStream os) throws IOException ;","/** 
 * Install a handler for the input stream of the subprocess.
 * @param os output stream to write to the standard input stream of the subprocess
 * @throws IOException throws a IO exception in case of IO issues of the underlying stream
 */
void setProcessInputStream(OutputStream os) throws IOException ;"
26045,"/** 
 * Install a handler for the output stream of the subprocess.
 * @param is input stream to read from the error stream from the subprocess
 */
void setProcessOutputStream(InputStream is) throws IOException ;","/** 
 * Install a handler for the output stream of the subprocess.
 * @param is input stream to read from the error stream from the subprocess
 * @throws IOException throws a IO exception in case of IO issues of the underlying stream
 */
void setProcessOutputStream(InputStream is) throws IOException ;"
26046,"/** 
 * Start handling of the streams.
 */
void start() throws IOException ;","/** 
 * Start handling of the streams.
 * @throws IOException throws a IO exception in case of IO issues of the underlying stream
 */
void start() throws IOException ;"
26047,"/** 
 * Install a handler for the error stream of the subprocess.
 * @param is input stream to read from the error stream from the subprocess
 */
void setProcessErrorStream(InputStream is) throws IOException ;","/** 
 * Install a handler for the error stream of the subprocess.
 * @param is input stream to read from the error stream from the subprocess
 * @throws IOException throws a IO exception in case of IO issues of the underlying stream
 */
void setProcessErrorStream(InputStream is) throws IOException ;"
26048,"/** 
 * Override this to customize how the background task is created.
 */
protected Thread newThread(Runnable task){
  Thread result=new Thread(wrapTask(task));
  result.setDaemon(true);
  return result;
}","/** 
 * Override this to customize how the background task is created.
 * @param task the task to be run in the background
 * @return the thread of the task
 */
protected Thread newThread(Runnable task){
  Thread result=new Thread(wrapTask(task));
  result.setDaemon(true);
  return result;
}"
26049,"/** 
 * Override this to customize how the background task is created.
 */
protected Runnable wrapTask(Runnable task){
  Map contextMap=MDC.getCopyOfContextMap();
  if (contextMap != null) {
    return new MDCRunnableAdapter(task,contextMap);
  }
  return task;
}","/** 
 * Override this to customize how the background task is created.
 * @param task the task to be run in the background
 * @return the runnable of the wrapped task
 */
protected Runnable wrapTask(Runnable task){
  Map contextMap=MDC.getCopyOfContextMap();
  if (contextMap != null) {
    return new MDCRunnableAdapter(task,contextMap);
  }
  return task;
}"
26050,"/** 
 * @param exitValue The exit value
 */
public InvalidExitValueException(ProcessResult result,Collection<Integer> allowedExitValues){
  super(""String_Node_Str"" + result.exitValue() + ""String_Node_Str""+ allowedExitValues);
  this.result=result;
}","/** 
 * @param result result of execution (contains also the exit value)
 */
public InvalidExitValueException(ProcessResult result,Collection<Integer> allowedExitValues){
  super(""String_Node_Str"" + result.exitValue() + ""String_Node_Str""+ allowedExitValues);
  this.result=result;
}"
26051,"/** 
 * @return binary output of the finished process.You have to invoke  {@link ProcessExecutor#readOutput()} to set the process output to be read.
 * @throws IllegalStateException if the output was not read.
 */
public byte[] output(){
  if (output == null)   throw new IllegalStateException(""String_Node_Str"");
  return output;
}","/** 
 * @return binary output of the finished process.You have to invoke  {@link ProcessExecutor#readOutput(boolean)} to set the process output to be read.
 * @throws IllegalStateException if the output was not read.
 */
public byte[] output(){
  if (output == null)   throw new IllegalStateException(""String_Node_Str"");
  return output;
}"
26052,"/** 
 * @return output of the finished process converted to UTF-8 String.You have to invoke  {@link ProcessExecutor#readOutput()} to set the process output to be read.
 * @throws IllegalStateException if the output was not read.
 */
public String outputUTF8(){
  return outputString(""String_Node_Str"");
}","/** 
 * @return output of the finished process converted to UTF-8 String.You have to invoke  {@link ProcessExecutor#readOutput(boolean)} to set the process output to be read.
 * @throws IllegalStateException if the output was not read.
 */
public String outputUTF8(){
  return outputString(""String_Node_Str"");
}"
26053,"/** 
 * @return output of the finished process converted to a String.You have to invoke  {@link ProcessExecutor#readOutput()} to set the process output to be read.
 * @param charset The name of a supported char set.
 * @throws IllegalStateException if the output was not read or the char set was not supported.
 */
public String outputString(String charset){
  try {
    return new String(output(),charset);
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage());
  }
}","/** 
 * @return output of the finished process converted to a String.You have to invoke  {@link ProcessExecutor#readOutput(boolean)} to set the process output to be read.
 * @param charset The name of a supported char set.
 * @throws IllegalStateException if the output was not read or the char set was not supported.
 */
public String outputString(String charset){
  try {
    return new String(output(),charset);
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e.getMessage());
  }
}"
26054,"@Override public void onReceivedHttpAuthRequest(AwHttpAuthHandler handler,String host,String realm){
  TraceEvent.begin();
  if (TRACE)   Log.d(TAG,""String_Node_Str"" + host);
  TraceEvent.end();
}","@Override public void onReceivedHttpAuthRequest(AwHttpAuthHandler handler,String host,String realm){
  TraceEvent.begin();
  if (TRACE)   Log.d(TAG,""String_Node_Str"" + host);
  mWebViewClient.onReceivedHttpAuthRequest(mWebView,new AwHttpAuthHandlerAdapter(handler),host,realm);
  TraceEvent.end();
}"
26055,"@Override public boolean getDisplayZoomControls(){
  return mAwSettings.getDisplayZoomControls();
}","@Override public boolean getDisplayZoomControls(){
  return mContentSettings.getDisplayZoomControls();
}"
26056,"@Override public void setSaveFormData(boolean save){
  mAwSettings.setSaveFormData(save);
}","@Override public void setSaveFormData(boolean save){
}"
26057,"@Override public boolean getBuiltInZoomControls(){
  return mAwSettings.getBuiltInZoomControls();
}","@Override public boolean getBuiltInZoomControls(){
  return mContentSettings.getBuiltInZoomControls();
}"
26058,"@Override public void setDisplayZoomControls(boolean enabled){
  mAwSettings.setDisplayZoomControls(enabled);
}","@Override public void setDisplayZoomControls(boolean enabled){
  mContentSettings.setDisplayZoomControls(enabled);
}"
26059,"@Override public void setSupportZoom(boolean support){
  mAwSettings.setSupportZoom(support);
}","@Override public void setSupportZoom(boolean support){
  mContentSettings.setSupportZoom(support);
}"
26060,"@Override public boolean supportZoom(){
  return mAwSettings.supportZoom();
}","@Override public boolean supportZoom(){
  return mContentSettings.supportZoom();
}"
26061,"@Override public boolean getSaveFormData(){
  return mAwSettings.getSaveFormData();
}","@Override public boolean getSaveFormData(){
  return false;
}"
26062,"@Override public void setBuiltInZoomControls(boolean enabled){
  mAwSettings.setBuiltInZoomControls(enabled);
}","@Override public void setBuiltInZoomControls(boolean enabled){
  mContentSettings.setBuiltInZoomControls(enabled);
}"
26063,"private void splitBranch(Comparator comparator,Object keyForNextNode,Node nextNode){
  int halfSize=size / 2;
  int comparison=compareWithMidValues(comparator,keyForNextNode,halfSize);
  if (comparison == 0) {
    Branch nextBranch=newInstance(capacity);
    int copyFrom=keyOffset(halfSize);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize;
    nextBranch.firstKey(keyForNextNode);
    nextBranch.setChild(0,nextNode);
    clearArrayFrom(keyOffset(halfSize));
    size=halfSize;
    next(nextBranch);
  }
 else   if (comparison < 0) {
    Branch nextBranch=newInstance(capacity);
    int copyFrom=keyOffset(halfSize);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize;
    nextBranch.firstKey(storedKey(halfSize - 1));
    nextBranch.setChild(0,getChild(halfSize * 2));
    clearArrayFrom(keyOffset(halfSize - 1));
    size=halfSize - 1;
    insertNode(comparator,keyForNextNode,nextNode);
    next(nextBranch);
  }
 else {
    Branch nextBranch=newInstance(capacity);
    int copyFrom=keyOffset(halfSize + 1);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize - 1;
    nextBranch.firstKey(storedKey(halfSize));
    nextBranch.setChild(0,getChild((halfSize + 1) * 2));
    clearArrayFrom(keyOffset(halfSize));
    size=halfSize;
    nextBranch.insertNode(comparator,keyForNextNode,nextNode);
    next(nextBranch);
  }
}","private void splitBranch(Comparator comparator,Object keyForNextNode,Node nextNode){
  int halfSize=size / 2;
  int comparison=compareWithMidValues(comparator,keyForNextNode,halfSize);
  if (comparison == 0) {
    Branch nextBranch=create(capacity);
    int copyFrom=keyOffset(halfSize);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize;
    nextBranch.firstKey(keyForNextNode);
    nextBranch.setChild(0,nextNode);
    clearArrayFrom(keyOffset(halfSize));
    size=halfSize;
    next(nextBranch);
  }
 else   if (comparison < 0) {
    Branch nextBranch=create(capacity);
    int copyFrom=keyOffset(halfSize);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize;
    nextBranch.firstKey(storedKey(halfSize - 1));
    nextBranch.setChild(0,getChild(halfSize * 2));
    clearArrayFrom(keyOffset(halfSize - 1));
    size=halfSize - 1;
    insertNode(comparator,keyForNextNode,nextNode);
    next(nextBranch);
  }
 else {
    Branch nextBranch=create(capacity);
    int copyFrom=keyOffset(halfSize + 1);
    int length=arraySize() - copyFrom;
    shallowCopy(this,copyFrom,nextBranch,1,length);
    nextBranch.size=halfSize - 1;
    nextBranch.firstKey(storedKey(halfSize));
    nextBranch.setChild(0,getChild((halfSize + 1) * 2));
    clearArrayFrom(keyOffset(halfSize));
    size=halfSize;
    nextBranch.insertNode(comparator,keyForNextNode,nextNode);
    next(nextBranch);
  }
}"
26064,"private static Branch newInstance(int nodeSize){
  int length=(nodeSize * 2) + 1;
  return ReferenceArray.newSubclassInstance(Branch.class,length);
}","private static Branch newInstance(Node left,Node right,int nodeSize){
  Branch branch=create(nodeSize);
  branch.setChild(0,left);
  branch.setChild(1,right.firstKey());
  branch.setChild(2,right);
  branch.size=1;
  return branch;
}"
26065,"@Override public CtorAndArgs<SimpleOrderWithBuilder> getForIndices(long[] indices) throws NoSuchMethodException {
  CtorAndArgs<SimpleOrderWithBuilder> args=simpleOrderArgs != null ? simpleOrderArgs : simpleOrderArgs();
  long index=indices[0];
  if (index > bidIndex + askIndex) {
    throw new IllegalArgumentException();
  }
  int i=(int)index;
  if (i < bidIndex) {
    args.setArgs(this,bidPrices[i],bidQuantities[i]);
  }
 else {
    i=i - bidIndex;
    args.setArgs(this,askPrices[i],askQuantities[i]);
  }
  return args;
}","@Override public CtorAndArgs<SimpleOrderWithBuilder> getForIndices(long... indices) throws NoSuchMethodException {
  CtorAndArgs<SimpleOrderWithBuilder> args=simpleOrderArgs != null ? simpleOrderArgs : simpleOrderArgs();
  long index=indices[0];
  if (index > bidIndex + askIndex) {
    throw new IllegalArgumentException();
  }
  int i=(int)index;
  if (i < bidIndex) {
    args.setArgs(this,bidPrices[i],bidQuantities[i]);
  }
 else {
    i=i - bidIndex;
    args.setArgs(this,askPrices[i],askQuantities[i]);
  }
  return args;
}"
26066,"@SuppressWarnings(""String_Node_Str"") @Override public void recycle(CtorAndArgs ctorAndArgs){
  this.simpleOrderArgs=ctorAndArgs;
}","@Override public void recycle(CtorAndArgs<SimpleOrderWithBuilder> ctorAndArgs){
  this.simpleOrderArgs=ctorAndArgs;
}"
26067,"public Builder orderType(OrderType orderType){
  this.orderType=orderType;
  return this;
}","public Builder orderType(SimpleOrderWithBuilder.OrderType orderType){
  this.orderType=orderType;
  return this;
}"
26068,"public OrderType getOrderType(){
  return orderType;
}","public SimpleOrderWithBuilder.OrderType getOrderType(){
  return orderType;
}"
26069,"private static CtorAndArgs<SimpleOrderWithBuilder> simpleOrderArgs(){
  try {
    final Constructor<SimpleOrderWithBuilder> simpleOrderConstructor=SimpleOrderWithBuilder.class.getConstructor(Builder.class,long.class,long.class);
    return new CtorAndArgs<SimpleOrderWithBuilder>(simpleOrderConstructor,null,0L,0L);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private static CtorAndArgs<SimpleOrderWithBuilder> simpleOrderArgs(){
  try {
    final Constructor<SimpleOrderWithBuilder> simpleOrderConstructor=SimpleOrderWithBuilder.class.getConstructor(Builder.class,SimpleOrderWithBuilder.Side.class,long.class,long.class);
    return new CtorAndArgs<SimpleOrderWithBuilder>(simpleOrderConstructor,null,0L,0L);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
26070,"private static CtorAndArgs<MassOrderWithBuilder> massOrderCtorAndArgs(){
  try {
    final Class[] massOrderConstructorArgTypes={Builder.class};
    final Constructor<MassOrderWithBuilder> massOrderConstructor;
    massOrderConstructor=MassOrderWithBuilder.class.getConstructor(massOrderConstructorArgTypes);
    return new CtorAndArgs<MassOrderWithBuilder>(massOrderConstructor,(Object[])null);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private static CtorAndArgs<MassOrderWithBuilder> massOrderCtorAndArgs(){
  try {
    final Constructor<MassOrderWithBuilder> massOrderConstructor=MassOrderWithBuilder.class.getDeclaredConstructor(Builder.class);
    massOrderConstructor.setAccessible(true);
    return new CtorAndArgs<MassOrderWithBuilder>(massOrderConstructor,new Object[]{null});
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
26071,"@Override public CtorAndArgs<SimpleOrderWithBuilder> getForIndices(long... indices) throws NoSuchMethodException {
  CtorAndArgs<SimpleOrderWithBuilder> args=simpleOrderArgs != null ? simpleOrderArgs : simpleOrderArgs();
  long index=indices[0];
  if (index > bidIndex + askIndex) {
    throw new IllegalArgumentException();
  }
  int i=(int)index;
  if (i < bidIndex) {
    args.setArgs(this,bidPrices[i],bidQuantities[i]);
  }
 else {
    i=i - bidIndex;
    args.setArgs(this,askPrices[i],askQuantities[i]);
  }
  return args;
}","@Override public CtorAndArgs<SimpleOrderWithBuilder> getForIndices(long... indices) throws NoSuchMethodException {
  CtorAndArgs<SimpleOrderWithBuilder> args=simpleOrderArgs != null ? simpleOrderArgs : simpleOrderArgs();
  long index=indices[0];
  if (index > bidIndex + askIndex) {
    throw new IllegalArgumentException();
  }
  int i=(int)index;
  if (i < bidIndex) {
    args.setArgs(this,SimpleOrderWithBuilder.Side.BID,bidPrices[i],bidQuantities[i]);
  }
 else {
    i=i - bidIndex;
    args.setArgs(this,SimpleOrderWithBuilder.Side.ASK,askPrices[i],askQuantities[i]);
  }
  return args;
}"
26072,"MassOrderWithBuilder(final Builder builder){
  this.accountId=builder.accountId;
  this.instructionId=builder.instructionId;
  this.orderType=builder.orderType;
  this.instrumentId=builder.instrumentId;
}","MassOrderWithBuilder(final Builder builder){
  this.accountId=builder.accountId;
  this.instructionId=builder.instructionId;
  this.orderType=builder.orderType;
  this.instrumentId=builder.instrumentId;
  this.askOrderIndex=builder.bidIndex;
}"
26073,"public MassOrderWithBuilder.OrderType getOrderType(){
  return this.orderType;
}","public SimpleOrderWithBuilder.OrderType getOrderType(){
  return this.orderType;
}"
26074,"public SimpleOrderWithBuilder(MassOrderWithBuilder.Builder builder,long price,long quantity){
  this.instrumentId=builder.instrumentId;
  this.accountId=builder.accountId;
  this.orderType=builder.orderType;
  this.price=price;
  this.quantity=quantity;
}","public SimpleOrderWithBuilder(MassOrderWithBuilder.Builder builder,Side side,long price,long quantity){
  this.side=side;
  this.instrumentId=builder.instrumentId;
  this.accountId=builder.accountId;
  this.orderType=builder.orderType;
  this.price=price;
  this.quantity=quantity;
}"
26075,"/** 
 * Shallow copy a region of element object contents from one array to the other. <p> shallowCopy will copy all fields from each of the source elements to the corresponding fields in each of the corresponding destination elements. If the same array is both the src and dst then the copy will happen as if a temporary intermediate array was used. If <code>allowFinalFieldOverwrite</code> is specified as <code>true</code>, even final fields will be copied.
 * @param src array to copy.
 * @param srcOffset offset index in src where the region begins.
 * @param dst array into which the copy should occur.
 * @param dstOffset offset index in the dst where the region begins.
 * @param count of structure elements to copy.
 * @param allowFinalFieldOverwrite allow final fields to be overwritten during a copy operation.
 * @throws IllegalArgumentException if source or destination arrays have more than one dimension, orif final fields are discovered and all allowFinalFieldOverwrite is not true.
 * @throws ArrayStoreException if the element classes in src and dst are not identical.
 */
public static void shallowCopy(final StructuredArray src,final long srcOffset,final StructuredArray dst,final long dstOffset,final long count,final boolean allowFinalFieldOverwrite){
  if (src.getElementClass() != dst.getElementClass()) {
    String msg=String.format(""String_Node_Str"",src.getClass(),dst.getClass());
    throw new ArrayStoreException(msg);
  }
  if ((src.getDimensionCount() > 1) || (dst.getDimensionCount() > 1)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Field[] fields=src.fields;
  if (!allowFinalFieldOverwrite && dst.hasFinalFields) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (((srcOffset + count) < Integer.MAX_VALUE) && ((dstOffset + count) < Integer.MAX_VALUE)) {
    if (dst == src && (dstOffset >= srcOffset && (dstOffset + count) >= srcOffset)) {
      for (int srcIdx=(int)(srcOffset + count), dstIdx=(int)(dstOffset + count), limit=(int)(srcOffset - 1); srcIdx > limit; srcIdx--, dstIdx--) {
        reverseShallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
 else {
      for (int srcIdx=(int)srcOffset, dstIdx=(int)dstOffset, limit=(int)(srcOffset + count); srcIdx < limit; srcIdx++, dstIdx++) {
        shallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
  }
 else {
    if (dst == src && (dstOffset >= srcOffset && (dstOffset + count) >= srcOffset)) {
      for (long srcIdx=srcOffset + count, dstIdx=dstOffset + count, limit=srcOffset - 1; srcIdx > limit; srcIdx--, dstIdx--) {
        reverseShallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
 else {
      for (long srcIdx=srcOffset, dstIdx=dstOffset, limit=srcOffset + count; srcIdx < limit; srcIdx++, dstIdx++) {
        shallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
  }
}","/** 
 * Shallow copy a region of element object contents from one array to the other. <p> shallowCopy will copy all fields from each of the source elements to the corresponding fields in each of the corresponding destination elements. If the same array is both the src and dst then the copy will happen as if a temporary intermediate array was used. If <code>allowFinalFieldOverwrite</code> is specified as <code>true</code>, even final fields will be copied.
 * @param src array to copy.
 * @param srcOffset offset index in src where the region begins.
 * @param dst array into which the copy should occur.
 * @param dstOffset offset index in the dst where the region begins.
 * @param count of structure elements to copy.
 * @param allowFinalFieldOverwrite allow final fields to be overwritten during a copy operation.
 * @throws IllegalArgumentException if source or destination arrays have more than one dimension, orif final fields are discovered and all allowFinalFieldOverwrite is not true.
 * @throws ArrayStoreException if the element classes in src and dst are not identical.
 */
public static void shallowCopy(final StructuredArray src,final long srcOffset,final StructuredArray dst,final long dstOffset,final long count,final boolean allowFinalFieldOverwrite){
  if (src.getElementClass() != dst.getElementClass()) {
    String msg=String.format(""String_Node_Str"",src.getClass(),dst.getClass());
    throw new ArrayStoreException(msg);
  }
  if ((src.getDimensionCount() > 1) || (dst.getDimensionCount() > 1)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Field[] fields=src.fields;
  if (!allowFinalFieldOverwrite && dst.hasFinalFields) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (((srcOffset + count) < Integer.MAX_VALUE) && ((dstOffset + count) < Integer.MAX_VALUE)) {
    if (dst == src && (dstOffset >= srcOffset && (dstOffset + count) >= srcOffset)) {
      int srcIdx=(int)(srcOffset + count) - 1;
      int dstIdx=(int)(dstOffset + count) - 1;
      int limit=(int)(srcOffset - 1);
      for (; srcIdx > limit; srcIdx--, dstIdx--) {
        reverseShallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
 else {
      for (int srcIdx=(int)srcOffset, dstIdx=(int)dstOffset, limit=(int)(srcOffset + count); srcIdx < limit; srcIdx++, dstIdx++) {
        shallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
  }
 else {
    if (dst == src && (dstOffset >= srcOffset && (dstOffset + count) >= srcOffset)) {
      for (long srcIdx=srcOffset + count, dstIdx=dstOffset + count, limit=srcOffset - 1; srcIdx > limit; srcIdx--, dstIdx--) {
        reverseShallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
 else {
      for (long srcIdx=srcOffset, dstIdx=dstOffset, limit=srcOffset + count; srcIdx < limit; srcIdx++, dstIdx++) {
        shallowCopy(src.get(srcIdx),dst.get(dstIdx),fields);
      }
    }
  }
}"
26076,"/** 
 * Copy an array of elements using the element class copy constructor
 * @param source The array to duplicate.
 * @param sourceOffset offset index in source where the region to be copied begins.
 * @param count of elements to copy.
 * @throws NoSuchMethodException if the element class does not have a copy constructor.
 */
public static <T>StructuredArray<T> copyInstance(StructuredArray<T> source,int sourceOffset,int count) throws NoSuchMethodException {
  if (source.getLength() < sourceOffset + count) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + source + ""String_Node_Str""+ source.getLength()+ ""String_Node_Str""+ sourceOffset+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") final ElementConstructorGenerator<T> copyConstructorGenerator=(ElementConstructorGenerator<T>)new ElementCopyConstructorGenerator<T>(source.getElementClass(),source,sourceOffset);
  return new StructuredArray<T>(source.getLength(),source.getElementClass(),copyConstructorGenerator);
}","/** 
 * Copy an array of elements using the element class copy constructor
 * @param source The array to duplicate.
 * @param sourceOffset offset index in source where the region to be copied begins.
 * @param count of elements to copy.
 * @throws NoSuchMethodException if the element class does not have a copy constructor.
 */
public static <T>StructuredArray<T> copyInstance(StructuredArray<T> source,int sourceOffset,int count) throws NoSuchMethodException {
  if (source.getLength() < sourceOffset + count) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + source + ""String_Node_Str""+ source.getLength()+ ""String_Node_Str""+ sourceOffset+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") final ElementConstructorGenerator<T> copyConstructorGenerator=(ElementConstructorGenerator<T>)new ElementCopyConstructorGenerator<T>(source.getElementClass(),source,sourceOffset);
  return new StructuredArray<T>(count,source.getElementClass(),copyConstructorGenerator);
}"
26077,"/** 
 * Copy an array of elements using the elements' copy constructor
 * @param source The array to duplicate.
 * @param sourceOffset offset index in source where the region to be copied begins.
 * @param count of elements to copy.
 * @throws NoSuchMethodException if the element class does not have a copy constructor.
 */
public static <T>LongStructuredArray<T> copyInstance(StructuredArray<T> source,long sourceOffset,long count) throws NoSuchMethodException {
  if (source.getLength() < sourceOffset + count) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + source + ""String_Node_Str""+ source.getLength()+ ""String_Node_Str""+ sourceOffset+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") final ElementConstructorGenerator<T> copyConstructorGenerator=(ElementConstructorGenerator<T>)new ElementCopyConstructorGenerator<T>(source.getElementClass(),source,sourceOffset);
  return new LongStructuredArray<T>(source.getLength(),source.getElementClass(),copyConstructorGenerator);
}","/** 
 * Copy an array of elements using the elements' copy constructor
 * @param source The array to duplicate.
 * @param sourceOffset offset index in source where the region to be copied begins.
 * @param count of elements to copy.
 * @throws NoSuchMethodException if the element class does not have a copy constructor.
 */
public static <T>LongStructuredArray<T> copyInstance(LongStructuredArray<T> source,long sourceOffset,long count) throws NoSuchMethodException {
  if (source.getLength() < sourceOffset + count) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + source + ""String_Node_Str""+ source.getLength()+ ""String_Node_Str""+ sourceOffset+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") final ElementConstructorGenerator<T> copyConstructorGenerator=(ElementConstructorGenerator<T>)new ElementCopyConstructorGenerator<T>(source.getElementClass(),source,sourceOffset);
  return new LongStructuredArray<T>(count,source.getElementClass(),copyConstructorGenerator);
}"
26078,"@SuppressWarnings(""String_Node_Str"") protected AbstractStructuredArray(final Class<T> elementClass,final ElementConstructorGenerator<T> elementConstructorGenerator){
  if (null == elementClass) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (elementClass.getClass() != elementConstructorGenerator.getElementClass()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.elementClass=elementClass;
  final Field[] fields=removeStaticFields(elementClass.getDeclaredFields());
  for (  final Field field : fields) {
    field.setAccessible(true);
  }
  this.fields=fields;
  this.hasFinalFields=containsFinalQualifiedFields(fields);
}","@SuppressWarnings(""String_Node_Str"") protected AbstractStructuredArray(final Class<T> elementClass,final ElementConstructorGenerator<T> elementConstructorGenerator){
  if (null == elementClass) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (elementClass != elementConstructorGenerator.getElementClass()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.elementClass=elementClass;
  final Field[] fields=removeStaticFields(elementClass.getDeclaredFields());
  for (  final Field field : fields) {
    field.setAccessible(true);
  }
  this.fields=fields;
  this.hasFinalFields=containsFinalQualifiedFields(fields);
}"
26079,"@SuppressLint(""String_Node_Str"") private void init_webView(){
  int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
  mWebView.setBackgroundColor(backgroundColor);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setDomStorageEnabled(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  registerForContextMenu(mWebView);
  mWebView.setWebChromeClient(new ProgressBarWebChromeClient(mProgressbarWebView));
  mWebView.setWebViewClient(new WebViewClient(){
    private Map<String,Boolean> loadedUrls=new HashMap<>();
    @Override public WebResourceResponse shouldInterceptRequest(    WebView view,    String url){
      boolean isAd;
      if (!loadedUrls.containsKey(url)) {
        isAd=AdBlocker.isAd(url);
        loadedUrls.put(url,isAd);
      }
 else {
        isAd=loadedUrls.get(url);
      }
      return isAd ? AdBlocker.createEmptyResource() : super.shouldInterceptRequest(view,url);
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
      int selectedBrowser=Integer.parseInt(mPrefs.getString(SettingsActivity.SP_DISPLAY_BROWSER,""String_Node_Str""));
      boolean result=true;
switch (selectedBrowser) {
case 0:
        CustomTabsIntent.Builder builder=new CustomTabsIntent.Builder();
      builder.setToolbarColor(ContextCompat.getColor(getActivity(),R.color.colorPrimaryDarkTheme));
    builder.setShowTitle(true);
  builder.setStartAnimations(getActivity(),R.anim.slide_in_right,R.anim.slide_out_left);
builder.setExitAnimations(getActivity(),R.anim.slide_in_left,R.anim.slide_out_right);
builder.build().launchUrl(getActivity(),Uri.parse(url));
result=true;
break;
case 1:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
startActivity(browserIntent);
break;
case 2:
result=super.shouldOverrideUrlLoading(view,url);
break;
}
return result;
}
@Override public void onPageFinished(WebView view,String url){
super.onPageFinished(view,url);
NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
mWebView.setBackgroundColor(backgroundColor);
ndActivity.mViewPager.setBackgroundColor(backgroundColor);
}
}
);
mWebView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
changedUrl=true;
}
return false;
}
}
);
}","@SuppressLint(""String_Node_Str"") private void init_webView(){
  int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
  mWebView.setBackgroundColor(backgroundColor);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowContentAccess(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setDomStorageEnabled(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  webSettings.setMediaPlaybackRequiresUserGesture(true);
  registerForContextMenu(mWebView);
  mWebView.setWebChromeClient(new ProgressBarWebChromeClient(mProgressbarWebView));
  mWebView.setWebViewClient(new WebViewClient(){
    private Map<String,Boolean> loadedUrls=new HashMap<>();
    @Override public WebResourceResponse shouldInterceptRequest(    WebView view,    String url){
      boolean isAd;
      if (!loadedUrls.containsKey(url)) {
        isAd=AdBlocker.isAd(url);
        loadedUrls.put(url,isAd);
      }
 else {
        isAd=loadedUrls.get(url);
      }
      return isAd ? AdBlocker.createEmptyResource() : super.shouldInterceptRequest(view,url);
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
      int selectedBrowser=Integer.parseInt(mPrefs.getString(SettingsActivity.SP_DISPLAY_BROWSER,""String_Node_Str""));
      boolean result=true;
switch (selectedBrowser) {
case 0:
        CustomTabsIntent.Builder builder=new CustomTabsIntent.Builder();
      builder.setToolbarColor(ContextCompat.getColor(getActivity(),R.color.colorPrimaryDarkTheme));
    builder.setShowTitle(true);
  builder.setStartAnimations(getActivity(),R.anim.slide_in_right,R.anim.slide_out_left);
builder.setExitAnimations(getActivity(),R.anim.slide_in_left,R.anim.slide_out_right);
builder.build().launchUrl(getActivity(),Uri.parse(url));
result=true;
break;
case 1:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
startActivity(browserIntent);
break;
case 2:
result=super.shouldOverrideUrlLoading(view,url);
break;
}
return result;
}
@Override public void onPageFinished(WebView view,String url){
super.onPageFinished(view,url);
NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
mWebView.setBackgroundColor(backgroundColor);
ndActivity.mViewPager.setBackgroundColor(backgroundColor);
}
}
);
mWebView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
changedUrl=true;
}
return false;
}
}
);
}"
26080,"/** 
 * @param context
 * @param rssItem       item to parse
 * @param showHeader    true if a header with item title, feed title, etc. should be included
 * @return given RSS item as full HTML page
 */
public static String getHtmlPage(Context context,RssItem rssItem,boolean showHeader){
  String feedTitle=""String_Node_Str"";
  String favIconUrl=null;
  Feed feed=rssItem.getFeed();
  int[] colors=ColorHelper.getColorsFromAttributes(context,R.attr.dividerLineColor,R.attr.rssItemListBackground);
  int feedColor=colors[0];
  if (feed != null) {
    feedTitle=StringEscapeUtils.escapeHtml4(feed.getFeedTitle());
    favIconUrl=feed.getFaviconUrl();
    if (feed.getAvgColour() != null) {
      feedColor=Integer.parseInt(feed.getAvgColour());
    }
  }
  if (favIconUrl != null) {
    DiskCache diskCache=ImageLoader.getInstance().getDiskCache();
    File file=diskCache.get(favIconUrl);
    if (file != null) {
      favIconUrl=""String_Node_Str"" + file.getAbsolutePath();
    }
  }
 else {
    favIconUrl=""String_Node_Str"";
  }
  String body_id;
switch (ThemeChooser.getInstance(context).getSelectedTheme(context,false)) {
case 0:
    body_id=""String_Node_Str"";
  break;
case 1:
body_id=""String_Node_Str"";
break;
case 2:
body_id=""String_Node_Str"";
break;
default :
body_id=""String_Node_Str"";
}
boolean isRightToLeft=context.getResources().getBoolean(R.bool.is_right_to_left);
String rtlClass=isRightToLeft ? ""String_Node_Str"" : ""String_Node_Str"";
String borderSide=isRightToLeft ? ""String_Node_Str"" : ""String_Node_Str"";
StringBuilder builder=new StringBuilder();
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",borderSide,ColorHelper.getCssColor(feedColor),ColorHelper.getCssColor(colors[0]),ColorHelper.getCssColor(colors[1])));
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",body_id,rtlClass));
if (showHeader) {
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
String title=StringEscapeUtils.escapeHtml4(rssItem.getTitle());
String linkToFeed=StringEscapeUtils.escapeHtml4(rssItem.getLink());
builder.append(String.format(""String_Node_Str"",linkToFeed,title));
builder.append(""String_Node_Str"");
String authorOfArticle=StringEscapeUtils.escapeHtml4(rssItem.getAuthor());
if (authorOfArticle != null) if (!authorOfArticle.trim().equals(""String_Node_Str"")) feedTitle+=""String_Node_Str"" + authorOfArticle.trim();
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",favIconUrl));
builder.append(feedTitle.trim());
builder.append(""String_Node_Str"");
Date date=rssItem.getPubDate();
if (date != null) {
String dateString=(String)DateUtils.getRelativeTimeSpanString(date.getTime());
builder.append(""String_Node_Str"");
builder.append(dateString);
builder.append(""String_Node_Str"");
}
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
}
String description=rssItem.getBody();
description=getDescriptionWithCachedImages(description).trim();
description=removePreloadAttributeFromVideos(description);
builder.append(""String_Node_Str"");
builder.append(description);
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
return builder.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @param context
 * @param rssItem       item to parse
 * @param showHeader    true if a header with item title, feed title, etc. should be included
 * @return given RSS item as full HTML page
 */
public static String getHtmlPage(Context context,RssItem rssItem,boolean showHeader){
  String feedTitle=""String_Node_Str"";
  String favIconUrl=null;
  Feed feed=rssItem.getFeed();
  int[] colors=ColorHelper.getColorsFromAttributes(context,R.attr.dividerLineColor,R.attr.rssItemListBackground);
  int feedColor=colors[0];
  if (feed != null) {
    feedTitle=StringEscapeUtils.escapeHtml4(feed.getFeedTitle());
    favIconUrl=feed.getFaviconUrl();
    if (feed.getAvgColour() != null) {
      feedColor=Integer.parseInt(feed.getAvgColour());
    }
  }
  if (favIconUrl != null) {
    DiskCache diskCache=ImageLoader.getInstance().getDiskCache();
    File file=diskCache.get(favIconUrl);
    if (file != null) {
      favIconUrl=""String_Node_Str"" + file.getAbsolutePath();
    }
  }
 else {
    favIconUrl=""String_Node_Str"";
  }
  String body_id;
switch (ThemeChooser.getInstance(context).getSelectedTheme(context,false)) {
case 0:
    body_id=""String_Node_Str"";
  break;
case 1:
body_id=""String_Node_Str"";
break;
case 2:
body_id=""String_Node_Str"";
break;
default :
body_id=""String_Node_Str"";
}
boolean isRightToLeft=context.getResources().getBoolean(R.bool.is_right_to_left);
String rtlClass=isRightToLeft ? ""String_Node_Str"" : ""String_Node_Str"";
String borderSide=isRightToLeft ? ""String_Node_Str"" : ""String_Node_Str"";
StringBuilder builder=new StringBuilder();
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",borderSide,ColorHelper.getCssColor(feedColor),ColorHelper.getCssColor(colors[0]),ColorHelper.getCssColor(colors[1])));
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",body_id,rtlClass));
if (showHeader) {
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
String title=StringEscapeUtils.escapeHtml4(rssItem.getTitle());
String linkToFeed=StringEscapeUtils.escapeHtml4(rssItem.getLink());
builder.append(String.format(""String_Node_Str"",linkToFeed,title));
builder.append(""String_Node_Str"");
String authorOfArticle=StringEscapeUtils.escapeHtml4(rssItem.getAuthor());
if (authorOfArticle != null) if (!authorOfArticle.trim().equals(""String_Node_Str"")) feedTitle+=""String_Node_Str"" + authorOfArticle.trim();
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(String.format(""String_Node_Str"",favIconUrl));
builder.append(feedTitle.trim());
builder.append(""String_Node_Str"");
Date date=rssItem.getPubDate();
if (date != null) {
String dateString=(String)DateUtils.getRelativeTimeSpanString(date.getTime());
builder.append(""String_Node_Str"");
builder.append(dateString);
builder.append(""String_Node_Str"");
}
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
}
String description=rssItem.getBody();
description=getDescriptionWithCachedImages(description).trim();
description=replacePatternInText(PATTERN_PRELOAD_VIDEOS_REMOVE,description,""String_Node_Str"");
description=replacePatternInText(PATTERN_PRELOAD_VIDEOS_INSERT,description,""String_Node_Str"");
description=replacePatternInText(PATTERN_AUTOPLAY_VIDEOS_1,description,""String_Node_Str"");
description=replacePatternInText(PATTERN_AUTOPLAY_VIDEOS_2,description,""String_Node_Str"");
builder.append(""String_Node_Str"");
builder.append(description);
builder.append(""String_Node_Str"");
builder.append(""String_Node_Str"");
return builder.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}"
26081,"public static boolean setNumberPickerTextColor(NumberPicker numberPicker,int color){
  final int count=numberPicker.getChildCount();
  for (int i=0; i < count; i++) {
    View child=numberPicker.getChildAt(i);
    if (child instanceof EditText) {
      try {
        Field selectorWheelPaintField=numberPicker.getClass().getDeclaredField(""String_Node_Str"");
        selectorWheelPaintField.setAccessible(true);
        ((Paint)selectorWheelPaintField.get(numberPicker)).setColor(color);
        ((EditText)child).setTextColor(color);
        numberPicker.invalidate();
        return true;
      }
 catch (      NoSuchFieldException e) {
        Log.w(""String_Node_Str"",e);
      }
catch (      IllegalAccessException e) {
        Log.w(""String_Node_Str"",e);
      }
catch (      IllegalArgumentException e) {
        Log.w(""String_Node_Str"",e);
      }
    }
  }
  return false;
}","public static boolean setNumberPickerTextColor(NumberPicker numberPicker,int color){
  final int count=numberPicker.getChildCount();
  for (int i=0; i < count; i++) {
    View child=numberPicker.getChildAt(i);
    if (child instanceof EditText) {
      try {
        Field selectorWheelPaintField=numberPicker.getClass().getDeclaredField(""String_Node_Str"");
        selectorWheelPaintField.setAccessible(true);
        ((Paint)selectorWheelPaintField.get(numberPicker)).setColor(color);
        ((EditText)child).setTextColor(color);
        numberPicker.invalidate();
        return true;
      }
 catch (      NoSuchFieldException e) {
        Log.w(""String_Node_Str"",e);
      }
catch (      IllegalAccessException e) {
        Log.w(""String_Node_Str"",e);
      }
catch (      IllegalArgumentException e) {
        Log.w(""String_Node_Str"",e);
      }
    }
    try {
      Field f=NumberPicker.class.getDeclaredField(""String_Node_Str"");
      f.setAccessible(true);
      EditText inputText=(EditText)f.get(numberPicker);
      inputText.setFilters(new InputFilter[0]);
    }
 catch (    NoSuchFieldException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
}"
26082,"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  int adapterTotalItemCount=linearLayoutManager.getItemCount();
  int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
  if (!loading && adapterTotalItemCount <= (lastVisibleItem + visibleThreshold) && adapterTotalItemCount < totalItemCount) {
    Log.v(TAG,""String_Node_Str"");
    recyclerView.post(new Runnable(){
      public void run(){
        lazyList.add(null);
        notifyItemInserted(lazyList.size() - 1);
        AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
        loading=true;
      }
    }
);
  }
}","@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  int adapterTotalItemCount=linearLayoutManager.getItemCount();
  int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
  if (!loading && adapterTotalItemCount <= (lastVisibleItem + visibleThreshold) && adapterTotalItemCount < totalItemCount) {
    loading=true;
    Log.v(TAG,""String_Node_Str"");
    recyclerView.post(new Runnable(){
      public void run(){
        lazyList.add(null);
        notifyItemInserted(lazyList.size() - 1);
        AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
      }
    }
);
  }
}"
26083,"public void run(){
  lazyList.add(null);
  notifyItemInserted(lazyList.size() - 1);
  AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
  loading=true;
}","public void run(){
  lazyList.add(null);
  notifyItemInserted(lazyList.size() - 1);
  AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
}"
26084,"public NewsListRecyclerAdapter(FragmentActivity activity,RecyclerView recyclerView,IPlayPausePodcastClicked playPausePodcastClicked){
  this.activity=activity;
  this.playPausePodcastClicked=playPausePodcastClicked;
  pDelayHandler=new PostDelayHandler(activity);
  bodyForegroundColor=new ForegroundColorSpan(ContextCompat.getColor(activity,android.R.color.secondary_text_dark));
  dbConn=new DatabaseConnectionOrm(activity);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);
  titleLineCount=Integer.parseInt(mPrefs.getString(SettingsActivity.SP_TITLE_LINES_COUNT,""String_Node_Str""));
  setHasStableIds(true);
  EventBus.getDefault().register(this);
  if (recyclerView.getLayoutManager() instanceof LinearLayoutManager) {
    final LinearLayoutManager linearLayoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
    recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener(){
      @Override public void onScrolled(      RecyclerView recyclerView,      int dx,      int dy){
        super.onScrolled(recyclerView,dx,dy);
        int adapterTotalItemCount=linearLayoutManager.getItemCount();
        int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
        if (!loading && adapterTotalItemCount <= (lastVisibleItem + visibleThreshold) && adapterTotalItemCount < totalItemCount) {
          Log.v(TAG,""String_Node_Str"");
          recyclerView.post(new Runnable(){
            public void run(){
              lazyList.add(null);
              notifyItemInserted(lazyList.size() - 1);
              AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
              loading=true;
            }
          }
);
        }
      }
    }
);
  }
}","public NewsListRecyclerAdapter(FragmentActivity activity,RecyclerView recyclerView,IPlayPausePodcastClicked playPausePodcastClicked){
  this.activity=activity;
  this.playPausePodcastClicked=playPausePodcastClicked;
  pDelayHandler=new PostDelayHandler(activity);
  bodyForegroundColor=new ForegroundColorSpan(ContextCompat.getColor(activity,android.R.color.secondary_text_dark));
  dbConn=new DatabaseConnectionOrm(activity);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);
  titleLineCount=Integer.parseInt(mPrefs.getString(SettingsActivity.SP_TITLE_LINES_COUNT,""String_Node_Str""));
  setHasStableIds(true);
  EventBus.getDefault().register(this);
  if (recyclerView.getLayoutManager() instanceof LinearLayoutManager) {
    final LinearLayoutManager linearLayoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
    recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener(){
      @Override public void onScrolled(      RecyclerView recyclerView,      int dx,      int dy){
        super.onScrolled(recyclerView,dx,dy);
        int adapterTotalItemCount=linearLayoutManager.getItemCount();
        int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
        if (!loading && adapterTotalItemCount <= (lastVisibleItem + visibleThreshold) && adapterTotalItemCount < totalItemCount) {
          loading=true;
          Log.v(TAG,""String_Node_Str"");
          recyclerView.post(new Runnable(){
            public void run(){
              lazyList.add(null);
              notifyItemInserted(lazyList.size() - 1);
              AsyncTaskHelper.StartAsyncTask(new LoadMoreItemsAsyncTask());
            }
          }
);
        }
      }
    }
);
  }
}"
26085,"@SuppressWarnings(""String_Node_Str"") public static void updateAppWidget(Context context,AppWidgetManager appWidgetManager,int appWidgetId){
  RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intent=new Intent(context,WidgetService.class);
  intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  rv.setRemoteAdapter(appWidgetId,R.id.list_view,intent);
  Intent onListClickIntent=new Intent(context,WidgetProvider.class);
  onListClickIntent.setAction(ACTION_LIST_CLICK);
  onListClickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  onListClickIntent.setData(Uri.parse(onListClickIntent.toUri(Intent.URI_INTENT_SCHEME)));
  final PendingIntent onListClickPendingIntent=PendingIntent.getBroadcast(context,0,onListClickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  rv.setPendingIntentTemplate(R.id.list_view,onListClickPendingIntent);
  Intent intentToDoListAct=new Intent(context,NewsReaderListActivity.class);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intentToDoListAct,0);
  rv.setOnClickPendingIntent(R.id.tV_widget_header,pendingIntent);
  appWidgetManager.updateAppWidget(appWidgetId,rv);
  if (Constants.debugModeWidget)   Log.d(TAG,""String_Node_Str"" + appWidgetId);
}","public static void updateAppWidget(Context context,AppWidgetManager appWidgetManager,int appWidgetId){
  RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intent=new Intent(context,WidgetService.class);
  intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  rv.setRemoteAdapter(R.id.list_view,intent);
  Intent onListClickIntent=new Intent(context,WidgetProvider.class);
  onListClickIntent.setAction(ACTION_LIST_CLICK);
  onListClickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  onListClickIntent.setData(Uri.parse(onListClickIntent.toUri(Intent.URI_INTENT_SCHEME)));
  final PendingIntent onListClickPendingIntent=PendingIntent.getBroadcast(context,0,onListClickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  rv.setPendingIntentTemplate(R.id.list_view,onListClickPendingIntent);
  Intent intentToDoListAct=new Intent(context,NewsReaderListActivity.class);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intentToDoListAct,0);
  rv.setOnClickPendingIntent(R.id.tV_widget_header,pendingIntent);
  appWidgetManager.updateAppWidget(appWidgetId,rv);
  if (Constants.debugModeWidget)   Log.d(TAG,""String_Node_Str"" + appWidgetId);
}"
26086,"@Override public long getItemId(int position){
  Log.v(TAG,""String_Node_Str"" + position);
  return (position);
}","@Override public long getItemId(int position){
  return (position);
}"
26087,"@SuppressLint(""String_Node_Str"") public RemoteViews getViewAt(int position){
  if (Constants.debugModeWidget)   Log.d(TAG,""String_Node_Str"" + position);
  RssItem rssItem=rssItems.get(position);
  RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget_item);
  try {
    String header=rssItem.getFeed().getFeedTitle();
    String colorString=rssItem.getFeed().getAvgColour();
    String authorOfArticle=rssItem.getAuthor();
    header+=authorOfArticle == null ? ""String_Node_Str"" : ""String_Node_Str"" + authorOfArticle.trim();
    String title=Html.fromHtml(rssItem.getTitle()).toString();
    long id=rssItem.getId();
    Date date=rssItem.getPubDate();
    String dateString=""String_Node_Str"";
    if (date != null) {
      SimpleDateFormat formater=new SimpleDateFormat();
      dateString=formater.format(date);
    }
    rv.setTextViewText(R.id.feed_datetime,dateString);
    rv.setTextViewText(R.id.feed_author_source,header);
    rv.setTextViewText(R.id.feed_title,title);
    int resId=rssItem.getRead_temp() ? R.drawable.ic_check_box_white : R.drawable.ic_check_box_outline_blank_white;
    int contentDescriptionId=rssItem.getRead_temp() ? R.string.content_desc_mark_as_unread : R.string.content_desc_mark_as_read;
    rv.setInt(R.id.cb_lv_item_read,""String_Node_Str"",resId);
    rv.setContentDescription(R.id.cb_lv_item_read,context.getString(contentDescriptionId));
    if (colorString != null)     rv.setInt(R.id.color_line_feed,""String_Node_Str"",Integer.parseInt(colorString));
    Intent ei=new Intent();
    ei.putExtra(WidgetProvider.RSS_ITEM_ID,id);
    rv.setOnClickFillInIntent(R.id.cb_lv_item_read_wrapper,ei);
    Intent iCheck=new Intent();
    iCheck.putExtra(WidgetProvider.RSS_ITEM_ID,id);
    iCheck.putExtra(WidgetProvider.ACTION_CHECKED_CLICK,true);
    rv.setOnClickFillInIntent(R.id.cb_lv_item_read,iCheck);
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"" + ex.getLocalizedMessage());
  }
  return rv;
}","@SuppressLint(""String_Node_Str"") public RemoteViews getViewAt(int position){
  if (Constants.debugModeWidget)   Log.d(TAG,""String_Node_Str"" + position);
  RssItem rssItem=rssItems.get(position);
  RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget_item);
  try {
    String header=rssItem.getFeed().getFeedTitle();
    String colorString=rssItem.getFeed().getAvgColour();
    String authorOfArticle=rssItem.getAuthor();
    header+=authorOfArticle == null ? ""String_Node_Str"" : ""String_Node_Str"" + authorOfArticle.trim();
    String title=Html.fromHtml(rssItem.getTitle()).toString();
    long id=rssItem.getId();
    Date date=rssItem.getPubDate();
    String dateString=""String_Node_Str"";
    if (date != null) {
      SimpleDateFormat formater=new SimpleDateFormat();
      dateString=formater.format(date);
    }
    rv.setTextViewText(R.id.feed_datetime,dateString);
    rv.setTextViewText(R.id.feed_author_source,header);
    rv.setTextViewText(R.id.feed_title,title);
    int resId=rssItem.getRead_temp() ? R.drawable.ic_check_box_white : R.drawable.ic_check_box_outline_blank_white;
    int contentDescriptionId=rssItem.getRead_temp() ? R.string.content_desc_mark_as_unread : R.string.content_desc_mark_as_read;
    rv.setInt(R.id.cb_lv_item_read,""String_Node_Str"",resId);
    rv.setContentDescription(R.id.cb_lv_item_read,context.getString(contentDescriptionId));
    if (colorString != null) {
      rv.setInt(R.id.color_line_feed,""String_Node_Str"",Integer.parseInt(colorString));
    }
    Intent rowIntent=new Intent();
    rowIntent.putExtra(WidgetProvider.RSS_ITEM_ID,id);
    rv.setOnClickFillInIntent(R.id.widget_row_layout,rowIntent);
    Intent ei=new Intent();
    ei.putExtra(WidgetProvider.RSS_ITEM_ID,id);
    rv.setOnClickFillInIntent(R.id.cb_lv_item_read_wrapper,ei);
    Intent iCheck=new Intent();
    iCheck.putExtra(WidgetProvider.RSS_ITEM_ID,id);
    iCheck.putExtra(WidgetProvider.ACTION_CHECKED_CLICK,true);
    rv.setOnClickFillInIntent(R.id.cb_lv_item_read,iCheck);
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"" + ex.getLocalizedMessage());
  }
  return rv;
}"
26088,"/** 
 * Input e.g. ""6.0.4"". Output [0] = 6, [1] = 4
 * @param appVersion
 * @return [0] = majorVersion, [1] = minorVersion
 */
public static int[] ExtractVersionNumberFromString(String appVersion){
  int majorVersion=0;
  int minorVersion=0;
  if (appVersion != null) {
    majorVersion=Integer.parseInt(appVersion.substring(0,1));
    appVersion=appVersion.substring(2);
    appVersion=appVersion.replace(""String_Node_Str"",""String_Node_Str"");
    minorVersion=Integer.parseInt(appVersion);
  }
  return new int[]{majorVersion,minorVersion};
}","/** 
 * @param appVersion e.g. ""6.0.4"".
 * @return e.g. [0] = 6, [1] = 0, [2] = 4
 */
public static int[] ExtractVersionNumberFromString(String appVersion){
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(appVersion);
  int version[]=new int[]{0,0,0};
  if (m.matches()) {
    version[0]=Integer.parseInt(m.group(1));
    version[1]=Integer.parseInt(m.group(2));
    version[2]=Integer.parseInt(m.group(3));
  }
  return version;
}"
26089,"public static API GetRightApiForVersion(String appVersion,HttpUrl baseUrl){
  API api;
  int[] version=ExtractVersionNumberFromString(appVersion);
  int majorVersion=version[0];
  int minorVersion=version[1];
switch (majorVersion) {
case 1:
    if (minorVersion >= 101) {
      api=new APIv2(baseUrl);
    }
 else {
      api=new APIv1(baseUrl);
    }
  break;
case 2:
api=new APIv2(baseUrl);
break;
case 3:
api=new APIv2(baseUrl);
break;
case 4:
api=new APIv2(baseUrl);
break;
default :
api=new APIv2(baseUrl);
break;
}
return api;
}","public static API GetRightApiForVersion(String appVersion,HttpUrl baseUrl){
  API api;
  int[] version=ExtractVersionNumberFromString(appVersion);
  api=new APIv2(baseUrl);
  return api;
}"
26090,"private void NotifyDownloadFinished(){
  if (imageDownloadFinished != null)   imageDownloadFinished.DownloadFinished(ThreadId);
}","private void NotifyDownloadFinished(Bitmap bitmap){
  if (imageDownloadFinished != null)   imageDownloadFinished.DownloadFinished(ThreadId,bitmap);
}"
26091,"@Override public void onLoadingComplete(String imageUri,View view,Bitmap loadedImage){
  NotifyDownloadFinished();
}","@Override public void onLoadingComplete(String imageUri,View view,Bitmap loadedImage){
  NotifyDownloadFinished(loadedImage);
}"
26092,"@Override public void onLoadingCancelled(String imageUri,View view){
  NotifyDownloadFinished();
  Log.d(TAG,""String_Node_Str"" + imageUri);
}","@Override public void onLoadingCancelled(String imageUri,View view){
  NotifyDownloadFinished(null);
  Log.d(TAG,""String_Node_Str"" + imageUri);
}"
26093,"@Override public void onLoadingFailed(String imageUri,View view,FailReason failReason){
  NotifyDownloadFinished();
  Log.d(TAG,""String_Node_Str"" + imageUri);
}","@Override public void onLoadingFailed(String imageUri,View view,FailReason failReason){
  NotifyDownloadFinished(null);
  Log.d(TAG,""String_Node_Str"" + imageUri);
}"
26094,"public void PreCacheFavIcon(Feed feed){
  if (feed.getFaviconUrl() == null) {
    Log.v(TAG,""String_Node_Str"" + feed.getFeedTitle());
    return;
  }
  GetImageThreaded giAsync=new GetImageThreaded(feed.getFaviconUrl(),favIconDownloadFinished,feed.getId());
  giAsync.start();
}","public void PreCacheFavIcon(Feed feed){
  if (feed.getFaviconUrl() == null) {
    Log.v(TAG,""String_Node_Str"" + feed.getFeedTitle());
    return;
  }
  new GetImageThreaded(feed.getFaviconUrl(),favIconDownloadFinished,feed.getId()).start();
}"
26095,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final long highestItemIdBeforeSync=getIntent().getLongExtra(""String_Node_Str"",0);
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setTitle(getString(R.string.no_wifi_available));
  alertDialogBuilder.setMessage(getString(R.string.do_you_want_to_download_without_wifi)).setCancelable(true).setPositiveButton(getString(android.R.string.yes),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      AsyncTask_GetItems.StartDownloadingImages(DownloadImagesActivity.this,highestItemIdBeforeSync,false);
      DownloadImagesActivity.this.finish();
    }
  }
).setNegativeButton(getString(android.R.string.no),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      DownloadImagesActivity.this.finish();
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final long highestItemIdBeforeSync=getIntent().getLongExtra(""String_Node_Str"",0);
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setTitle(getString(R.string.no_wifi_available));
  alertDialogBuilder.setMessage(getString(R.string.do_you_want_to_download_without_wifi)).setCancelable(true).setPositiveButton(getString(android.R.string.yes),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      Intent service=new Intent(DownloadImagesActivity.this,DownloadImagesService.class);
      service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemIdBeforeSync);
      service.putExtra(DownloadImagesService.DOWNLOAD_MODE_STRING,DownloadImagesService.DownloadMode.PICTURES_ONLY);
      DownloadImagesActivity.this.startService(service);
      DownloadImagesActivity.this.finish();
    }
  }
).setNegativeButton(getString(android.R.string.no),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      DownloadImagesActivity.this.finish();
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}"
26096,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))   return true;
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     return true;
  break;
case R.id.action_settings:
Intent intent=new Intent(this,SettingsActivity.class);
startActivityForResult(intent,RESULT_SETTINGS);
return true;
case R.id.menu_update:
startSync();
break;
case R.id.action_login:
StartLoginFragment(NewsReaderListActivity.this);
break;
case R.id.action_add_new_feed:
Intent newFeedIntent=new Intent(this,NewFeedActivity.class);
startActivityForResult(newFeedIntent,RESULT_ADD_NEW_FEED);
break;
case R.id.menu_StartImageCaching:
DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
long highestItemId=dbConn.getLowestRssItemIdUnread();
Intent service=new Intent(this,DownloadImagesService.class);
service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemId);
startService(service);
break;
case R.id.menu_CreateDatabaseDump:
DatabaseUtils.CopyDatabaseToSdCard(this);
new AlertDialog.Builder(this).setMessage(""String_Node_Str"" + DatabaseUtils.GetPath(this)).setNeutralButton(getString(android.R.string.ok),null).show();
break;
case R.id.menu_About_Changelog:
DialogFragment dialog=new VersionInfoDialogFragment();
dialog.show(getSupportFragmentManager(),""String_Node_Str"");
return true;
case R.id.menu_markAllAsRead:
NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
if (ndf != null) {
DatabaseConnectionOrm dbConn2=new DatabaseConnectionOrm(this);
dbConn2.markAllItemsAsReadForCurrentView();
reloadCountNumbersOfSlidingPaneAdapter();
ndf.RefreshCurrentRssView();
}
return true;
case R.id.menu_downloadMoreItems:
DownloadMoreItems();
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))   return true;
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     return true;
  break;
case R.id.action_settings:
Intent intent=new Intent(this,SettingsActivity.class);
startActivityForResult(intent,RESULT_SETTINGS);
return true;
case R.id.menu_update:
startSync();
break;
case R.id.action_login:
StartLoginFragment(NewsReaderListActivity.this);
break;
case R.id.action_add_new_feed:
Intent newFeedIntent=new Intent(this,NewFeedActivity.class);
startActivityForResult(newFeedIntent,RESULT_ADD_NEW_FEED);
break;
case R.id.menu_StartImageCaching:
DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
long highestItemId=dbConn.getLowestRssItemIdUnread();
Intent service=new Intent(this,DownloadImagesService.class);
service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemId);
service.putExtra(DownloadImagesService.DOWNLOAD_MODE_STRING,DownloadImagesService.DownloadMode.PICTURES_ONLY);
startService(service);
break;
case R.id.menu_CreateDatabaseDump:
DatabaseUtils.CopyDatabaseToSdCard(this);
new AlertDialog.Builder(this).setMessage(""String_Node_Str"" + DatabaseUtils.GetPath(this)).setNeutralButton(getString(android.R.string.ok),null).show();
break;
case R.id.menu_About_Changelog:
DialogFragment dialog=new VersionInfoDialogFragment();
dialog.show(getSupportFragmentManager(),""String_Node_Str"");
return true;
case R.id.menu_markAllAsRead:
NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
if (ndf != null) {
DatabaseConnectionOrm dbConn2=new DatabaseConnectionOrm(this);
dbConn2.markAllItemsAsReadForCurrentView();
reloadCountNumbersOfSlidingPaneAdapter();
ndf.RefreshCurrentRssView();
}
return true;
case R.id.menu_downloadMoreItems:
DownloadMoreItems();
return true;
}
return super.onOptionsItemSelected(item);
}"
26097,"@Override protected void onPostExecute(Exception ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(ex);
  }
  if (ex == null && NetworkConnection.isNetworkAvailable(context)) {
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    int syncStrategy=Integer.parseInt(mPrefs.getString(SettingsActivity.LV_CACHE_IMAGES_OFFLINE_STRING,""String_Node_Str""));
    boolean downloadImages=false;
switch (syncStrategy) {
case 0:
      break;
case 1:
    if (NetworkConnection.isWLANConnected(context))     downloadImages=true;
  break;
case 2:
downloadImages=true;
break;
case 3:
if (!NetworkConnection.isWLANConnected(context)) ShowDownloadImageWithoutWifiQuestion();
 else downloadImages=true;
break;
}
if (downloadImages) StartDownloadingImages(context,highestItemIdBeforeSync,false);
 else StartDownloadingImages(context,highestItemIdBeforeSync,true);
}
detach();
}","@Override protected void onPostExecute(Exception ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(ex);
  }
  if (ex == null && NetworkConnection.isNetworkAvailable(context)) {
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    int syncStrategy=Integer.parseInt(mPrefs.getString(SettingsActivity.LV_CACHE_IMAGES_OFFLINE_STRING,""String_Node_Str""));
    boolean downloadImages=false;
switch (syncStrategy) {
case 0:
      break;
case 1:
    if (NetworkConnection.isWLANConnected(context))     downloadImages=true;
  break;
case 2:
downloadImages=true;
break;
case 3:
if (!NetworkConnection.isWLANConnected(context)) ShowDownloadImageWithoutWifiQuestion();
 else downloadImages=true;
break;
}
if (downloadImages) {
Intent service=new Intent(context,DownloadImagesService.class);
service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemIdBeforeSync);
service.putExtra(DownloadImagesService.DOWNLOAD_MODE_STRING,DownloadImagesService.DownloadMode.PICTURES_ONLY);
context.startService(service);
}
}
detach();
}"
26098,"@Override protected void onHandleIntent(Intent intent){
  boolean downloadFavIconsExclusive=intent.getBooleanExtra(DOWNLOAD_FAVICONS_EXCLUSIVE,false);
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  Notification notify=BuildNotification();
  List<Feed> feedList=dbConn.getListOfFeeds();
  FavIconHandler favIconHandler=new FavIconHandler(this);
  for (  Feed feed : feedList) {
    favIconHandler.PreCacheFavIcon(feed);
  }
  if (!downloadFavIconsExclusive) {
    long lastId=intent.getLongExtra(LAST_ITEM_ID,0);
    List<RssItem> rssItemList=dbConn.getAllItemsWithIdHigher(lastId);
    List<String> links=new ArrayList<>();
    for (    RssItem rssItem : rssItemList) {
      String body=rssItem.getBody();
      links.addAll(ImageHandler.getImageLinksFromText(body));
      if (links.size() > 10000) {
        notificationManager.notify(123,GetNotificationLimitImagesReached(10000));
        break;
      }
    }
    ((LazyList)rssItemList).close();
    maxCount=links.size();
    if (maxCount > 0) {
      notificationManager.notify(NOTIFICATION_ID,notify);
    }
    linksToImages.addAll(links);
    StartNextDownloadInQueue();
  }
}","@Override protected void onHandleIntent(Intent intent){
  DownloadMode downloadMode=(DownloadMode)intent.getSerializableExtra(DOWNLOAD_MODE_STRING);
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  Notification notify=BuildNotification();
  if (downloadMode.equals(DownloadMode.FAVICONS_ONLY)) {
    List<Feed> feedList=dbConn.getListOfFeeds();
    FavIconHandler favIconHandler=new FavIconHandler(this);
    for (    Feed feed : feedList) {
      favIconHandler.PreCacheFavIcon(feed);
    }
  }
 else   if (downloadMode.equals(DownloadMode.FAVICONS_AND_PICTURES) || downloadMode.equals(DownloadMode.PICTURES_ONLY)) {
    long lastId=intent.getLongExtra(LAST_ITEM_ID,0);
    List<RssItem> rssItemList=dbConn.getAllItemsWithIdHigher(lastId);
    List<String> links=new ArrayList<>();
    for (    RssItem rssItem : rssItemList) {
      String body=rssItem.getBody();
      links.addAll(ImageHandler.getImageLinksFromText(body));
      if (links.size() > 10000) {
        notificationManager.notify(123,GetNotificationLimitImagesReached(10000));
        break;
      }
    }
    ((LazyList)rssItemList).close();
    maxCount=links.size();
    if (maxCount > 0) {
      notificationManager.notify(NOTIFICATION_ID,notify);
    }
    linksToImages.addAll(links);
    StartNextDownloadInQueue();
  }
}"
26099,"@SuppressLint(""String_Node_Str"") private void init_webView(){
  int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
  mWebView.setBackgroundColor(backgroundColor);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  registerForContextMenu(mWebView);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public boolean onConsoleMessage(    ConsoleMessage cm){
      Log.v(TAG,cm.message() + ""String_Node_Str"" + cm.sourceId()+ ""String_Node_Str""+ cm.lineNumber());
      return true;
    }
    @Override public void onProgressChanged(    WebView view,    int progress){
      if (progress < 100 && mProgressbarWebView.getVisibility() == ProgressBar.GONE) {
        mProgressbarWebView.setVisibility(ProgressBar.VISIBLE);
      }
      mProgressbarWebView.setProgress(progress);
      if (progress == 100) {
        mProgressbarWebView.setVisibility(ProgressBar.GONE);
        int bgColor=ContextCompat.getColor(getContext(),R.color.slider_listview_text_color_dark_theme);
        NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
        mWebView.setBackgroundColor(bgColor);
        ndActivity.mViewPager.setBackgroundColor(bgColor);
        if (ThemeChooser.isDarkTheme(getActivity())) {
          mWebView.setBackgroundColor(ContextCompat.getColor(getContext(),android.R.color.transparent));
        }
      }
    }
  }
);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (changedUrl) {
        changedUrl=false;
        if (!url.equals(""String_Node_Str"") && (urls.isEmpty() || !urls.get(0).equals(url))) {
          urls.add(0,url);
          Log.v(TAG,""String_Node_Str"" + url);
        }
      }
      super.onPageStarted(view,url,favicon);
    }
  }
);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
        changedUrl=true;
      }
      return false;
    }
  }
);
}","@SuppressLint(""String_Node_Str"") private void init_webView(){
  int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
  mWebView.setBackgroundColor(backgroundColor);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setDomStorageEnabled(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  registerForContextMenu(mWebView);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public boolean onConsoleMessage(    ConsoleMessage cm){
      Log.v(TAG,cm.message() + ""String_Node_Str"" + cm.sourceId()+ ""String_Node_Str""+ cm.lineNumber());
      return true;
    }
    @Override public void onProgressChanged(    WebView view,    int progress){
      if (progress < 100 && mProgressbarWebView.getVisibility() == ProgressBar.GONE) {
        mProgressbarWebView.setVisibility(ProgressBar.VISIBLE);
      }
      mProgressbarWebView.setProgress(progress);
      if (progress == 100) {
        mProgressbarWebView.setVisibility(ProgressBar.GONE);
        int bgColor=ContextCompat.getColor(getContext(),R.color.slider_listview_text_color_dark_theme);
        NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
        mWebView.setBackgroundColor(bgColor);
        ndActivity.mViewPager.setBackgroundColor(bgColor);
        if (ThemeChooser.isDarkTheme(getActivity())) {
          mWebView.setBackgroundColor(ContextCompat.getColor(getContext(),android.R.color.transparent));
        }
      }
    }
  }
);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (changedUrl) {
        changedUrl=false;
        if (!url.equals(""String_Node_Str"") && (urls.isEmpty() || !urls.get(0).equals(url))) {
          urls.add(0,url);
          Log.v(TAG,""String_Node_Str"" + url);
        }
      }
      super.onPageStarted(view,url,favicon);
    }
  }
);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
        changedUrl=true;
      }
      return false;
    }
  }
);
}"
26100,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mDialogIcon=getArguments().getInt(""String_Node_Str"");
  mDialogTitle=getArguments().getString(""String_Node_Str"");
  mDialogText=getArguments().getString(""String_Node_Str"");
  mImageUrl=(URL)getArguments().getSerializable(""String_Node_Str"");
  mDialogType=(TYPE)getArguments().getSerializable(""String_Node_Str"");
  mMenuItems=new LinkedHashMap<>();
switch (mDialogType) {
case IMAGE:
    mMenuItems.put(getString(R.string.action_img_download),new MenuActionLongClick(){
      @Override public void execute(){
        downloadImage(mImageUrl);
      }
      public void executeLongClick(){
        changeDownloadDir();
      }
    }
);
  mMenuItems.put(getString(R.string.action_img_open),new MenuAction(){
    @Override public void execute(){
      openLinkInBrowser(mImageUrl);
    }
  }
);
mMenuItems.put(getString(R.string.action_img_sharelink),new MenuAction(){
  @Override public void execute(){
    shareImage();
  }
}
);
mMenuItems.put(getString(R.string.action_img_copylink),new MenuAction(){
@Override public void execute(){
  copyToCipboard(mDialogTitle,mImageUrl.toString());
}
}
);
break;
case URL:
mMenuItems.put(getString(R.string.action_link_open),new MenuAction(){
@Override public void execute(){
try {
openLinkInBrowser(new URL(mDialogText));
}
 catch (MalformedURLException e) {
Toast.makeText(getActivity(),getString(R.string.error_invalid_url),Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
);
mMenuItems.put(getString(R.string.action_link_share),new MenuAction(){
@Override public void execute(){
shareLink();
}
}
);
mMenuItems.put(getString(R.string.action_link_copy),new MenuAction(){
@Override public void execute(){
copyToCipboard(mDialogTitle,mDialogText);
}
}
);
break;
}
int style=DialogFragment.STYLE_NO_TITLE;
int theme=ThemeChooser.isDarkTheme(getActivity()) ? R.style.Theme_Material_Dialog_Floating : R.style.Theme_Material_Light_Dialog_Floating;
setStyle(style,theme);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mDialogIcon=getArguments().getInt(""String_Node_Str"");
  mDialogTitle=getArguments().getString(""String_Node_Str"");
  mDialogText=getArguments().getString(""String_Node_Str"");
  mImageUrl=(URL)getArguments().getSerializable(""String_Node_Str"");
  mDialogType=(TYPE)getArguments().getSerializable(""String_Node_Str"");
  mMenuItems=new LinkedHashMap<>();
switch (mDialogType) {
case IMAGE:
    mMenuItems.put(getString(R.string.action_img_download),new MenuActionLongClick(){
      @Override public void execute(){
        downloadImage(mImageUrl);
      }
      public void executeLongClick(){
        changeDownloadDir();
      }
    }
);
  mMenuItems.put(getString(R.string.action_img_open),new MenuAction(){
    @Override public void execute(){
      openLinkInBrowser(mImageUrl);
    }
  }
);
mMenuItems.put(getString(R.string.action_img_sharelink),new MenuAction(){
  @Override public void execute(){
    shareImage();
  }
}
);
mMenuItems.put(getString(R.string.action_img_copylink),new MenuAction(){
@Override public void execute(){
  copyToCipboard(mDialogTitle,mImageUrl.toString());
}
}
);
break;
case URL:
mMenuItems.put(getString(R.string.action_link_open),new MenuAction(){
@Override public void execute(){
try {
openLinkInBrowser(new URL(mDialogText));
}
 catch (MalformedURLException e) {
Toast.makeText(getActivity(),getString(R.string.error_invalid_url),Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
);
mMenuItems.put(getString(R.string.action_link_share),new MenuAction(){
@Override public void execute(){
shareLink();
}
}
);
mMenuItems.put(getString(R.string.action_link_copy),new MenuAction(){
@Override public void execute(){
copyToCipboard(mDialogTitle,mDialogText);
}
}
);
break;
}
int style=DialogFragment.STYLE_NO_TITLE;
int theme=ThemeChooser.isDarkTheme(getActivity()) ? R.style.FloatingDialog : R.style.FloatingDialogLight;
setStyle(style,theme);
}"
26101,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFeedId=getArguments().getLong(""String_Node_Str"");
  mDialogTitle=getArguments().getString(""String_Node_Str"");
  mDialogIconUrl=getArguments().getString(""String_Node_Str"");
  mDialogText=getArguments().getString(""String_Node_Str"");
  mMenuItems=new LinkedHashMap<>();
  mMenuItems.put(getString(R.string.action_feed_rename),new MenuAction(){
    @Override public void execute(){
      showRenameFeedView(mFeedId,mDialogTitle);
    }
  }
);
  mMenuItems.put(getString(R.string.action_feed_remove),new MenuAction(){
    @Override public void execute(){
      showRemoveFeedView(mFeedId);
    }
  }
);
  int style=DialogFragment.STYLE_NO_TITLE;
  int theme=ThemeChooser.isDarkTheme(getActivity()) ? R.style.Theme_Material_Dialog_Floating : R.style.Theme_Material_Light_Dialog_Floating;
  setStyle(style,theme);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFeedId=getArguments().getLong(""String_Node_Str"");
  mDialogTitle=getArguments().getString(""String_Node_Str"");
  mDialogIconUrl=getArguments().getString(""String_Node_Str"");
  mDialogText=getArguments().getString(""String_Node_Str"");
  mMenuItems=new LinkedHashMap<>();
  mMenuItems.put(getString(R.string.action_feed_rename),new MenuAction(){
    @Override public void execute(){
      showRenameFeedView(mFeedId,mDialogTitle);
    }
  }
);
  mMenuItems.put(getString(R.string.action_feed_remove),new MenuAction(){
    @Override public void execute(){
      showRemoveFeedView(mFeedId);
    }
  }
);
  int style=DialogFragment.STYLE_NO_TITLE;
  int theme=ThemeChooser.isDarkTheme(getActivity()) ? R.style.FloatingDialog : R.style.FloatingDialogLight;
  setStyle(style,theme);
}"
26102,"@Override public void onInflate(Context context,AttributeSet attrs,Bundle savedInstanceState){
  super.onInflate(context,attrs,savedInstanceState);
  TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.markasreadDrawable,R.attr.colorAccent});
  markAsReadDrawable=a.getDrawable(0);
  accentColor=ContextCompat.getColor(getContext(),R.color.owncloudBlueLight);
  a.recycle();
}","@Override public void onInflate(Context context,AttributeSet attrs,Bundle savedInstanceState){
  super.onInflate(context,attrs,savedInstanceState);
  TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.markasreadDrawable,R.attr.colorAccent});
  markAsReadDrawable=a.getDrawable(0);
  accentColor=ContextCompat.getColor(context,R.color.owncloudBlueLight);
  a.recycle();
}"
26103,"@Override public void OnRefreshFinished(){
  pbLoading.setVisibility(View.GONE);
  if (layoutManagerSavedState != null) {
    recyclerView.getLayoutManager().onRestoreInstanceState(layoutManagerSavedState);
  }
}","@Override public void OnRefreshFinished(){
  pbLoading.setVisibility(View.GONE);
  if (layoutManagerSavedState != null) {
    recyclerView.getLayoutManager().onRestoreInstanceState(layoutManagerSavedState);
    layoutManagerSavedState=null;
  }
}"
26104,"public int getFirstVisibleScrollPosition(){
  LinearLayoutManager layoutManager=((LinearLayoutManager)recyclerView.getLayoutManager());
  int firstVisiblePosition=layoutManager.findFirstVisibleItemPosition();
  return firstVisiblePosition;
}","public int getFirstVisibleScrollPosition(){
  LinearLayoutManager layoutManager=((LinearLayoutManager)recyclerView.getLayoutManager());
  return layoutManager.findFirstVisibleItemPosition();
}"
26105,"/** 
 * Refreshes the current RSS-View
 */
public void RefreshCurrentRssView(){
  Log.v(TAG,""String_Node_Str"");
  NewsListRecyclerAdapter nra=((NewsListRecyclerAdapter)recyclerView.getAdapter());
  nra.refreshAdapterDataAsync(new NewsListRecyclerAdapter.IOnRefreshFinished(){
    @Override public void OnRefreshFinished(){
      pbLoading.setVisibility(View.GONE);
      if (layoutManagerSavedState != null) {
        recyclerView.getLayoutManager().onRestoreInstanceState(layoutManagerSavedState);
      }
    }
  }
);
}","/** 
 * Refreshes the current RSS-View
 */
public void RefreshCurrentRssView(){
  Log.v(TAG,""String_Node_Str"");
  NewsListRecyclerAdapter nra=((NewsListRecyclerAdapter)recyclerView.getAdapter());
  nra.refreshAdapterDataAsync(new NewsListRecyclerAdapter.IOnRefreshFinished(){
    @Override public void OnRefreshFinished(){
      pbLoading.setVisibility(View.GONE);
      if (layoutManagerSavedState != null) {
        recyclerView.getLayoutManager().onRestoreInstanceState(layoutManagerSavedState);
        layoutManagerSavedState=null;
      }
    }
  }
);
}"
26106,"@Override public void onInflate(Context context,AttributeSet attrs,Bundle savedInstanceState){
  super.onInflate(context,attrs,savedInstanceState);
  TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.markasreadDrawable,R.attr.colorAccent});
  markAsReadDrawable=a.getDrawable(0);
  accentColor=a.getColor(1,context.getResources().getColor(R.color.owncloudBlueLight));
  a.recycle();
}","@Override public void onInflate(Context context,AttributeSet attrs,Bundle savedInstanceState){
  super.onInflate(context,attrs,savedInstanceState);
  TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.markasreadDrawable,R.attr.colorAccent});
  markAsReadDrawable=a.getDrawable(0);
  accentColor=ContextCompat.getColor(getContext(),R.color.owncloudBlueLight);
  a.recycle();
}"
26107,"/** 
 * Convenient call for   {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context.
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}"
26108,"/** 
 * Convenient call for   {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context.
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}"
26109,"/** 
 * Convenient call for   {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context.
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}"
26110,"/** 
 * Convenient call for   {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context.
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}"
26111,"/** 
 * Convenient call for   {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context.
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}"
26112,"/** 
 * Convenient call for   {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context.
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}"
26113,"/** 
 * Convenient call for   {@link AbstractDao#update(Object)}. Entity must attached to an entity context. 
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context.
 */
public void update(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.update(this);
}"
26114,"/** 
 * Convenient call for   {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. 
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context.
 */
public void delete(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.delete(this);
}"
26115,"/** 
 * Convenient call for   {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. 
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}","/** 
 * Convenient call for   {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context.
 */
public void refresh(){
  if (myDao == null) {
    throw new DaoException(""String_Node_Str"");
  }
  myDao.refresh(this);
}"
26116,"/** 
 * Removes an Activity from the MTM display stack. Always call this function when the Activity added with
 * @see bindDisplayActivity is hidden.
 * @param act Activity to be unbound
 */
public void unbindDisplayActivity(Activity act){
  if (foregroundAct == act)   foregroundAct=null;
}","/** 
 * Removes an Activity from the MTM display stack. Always call this function when the Activity added with
 * @see #bindDisplayActivity is hidden.
 * @param act Activity to be unbound
 */
public void unbindDisplayActivity(Activity act){
  if (foregroundAct == act)   foregroundAct=null;
}"
26117,"@Override public void check(View view,NoMatchingViewException e){
  RecyclerView recyclerView=(RecyclerView)view;
  LinearLayoutManager layoutManager=((LinearLayoutManager)recyclerView.getLayoutManager());
  int firstVisiblePosition=layoutManager.findFirstVisibleItemPosition();
  if (firstVisiblePosition == mExpectedPos)   return;
 else   throw new RuntimeException(""String_Node_Str"" + mExpectedPos + ""String_Node_Str""+ firstVisiblePosition);
}","@Override public void check(View view,NoMatchingViewException e){
  RecyclerView recyclerView=(RecyclerView)view;
  LinearLayoutManager layoutManager=((LinearLayoutManager)recyclerView.getLayoutManager());
  int firstVisiblePosition=layoutManager.findFirstVisibleItemPosition();
  if (firstVisiblePosition != mExpectedPos)   throw new RuntimeException(""String_Node_Str"" + mExpectedPos + ""String_Node_Str""+ firstVisiblePosition);
}"
26118,"public boolean doesRssItemAlreadyExsists(long feedId){
  List<RssItem> feeds=daoSession.getRssItemDao().queryBuilder().where(RssItemDao.Properties.Id.eq(feedId)).list();
  return (feeds.size() <= 0) ? false : true;
}","public boolean doesRssItemAlreadyExsists(long feedId){
  List<RssItem> feeds=daoSession.getRssItemDao().queryBuilder().where(RssItemDao.Properties.Id.eq(feedId)).list();
  return feeds.size() > 0;
}"
26119,"@SuppressLint(""String_Node_Str"") private void init_webView(){
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  mWebView.addJavascriptInterface(new WebViewLinkLongClickInterface(getActivity()),""String_Node_Str"");
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public boolean onConsoleMessage(    ConsoleMessage cm){
      Log.v(TAG,cm.message() + ""String_Node_Str"" + cm.sourceId()+ ""String_Node_Str""+ cm.lineNumber());
      return true;
    }
    @Override public void onProgressChanged(    WebView view,    int progress){
      if (progress < 100 && mProgressbarWebView.getVisibility() == ProgressBar.GONE) {
        mProgressbarWebView.setVisibility(ProgressBar.VISIBLE);
      }
      mProgressbarWebView.setProgress(progress);
      if (progress == 100) {
        mProgressbarWebView.setVisibility(ProgressBar.GONE);
        NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
        mWebView.setBackgroundColor(getResources().getColor(R.color.slider_listview_text_color_dark_theme));
        ndActivity.mViewPager.setBackgroundColor(getResources().getColor(R.color.slider_listview_text_color_dark_theme));
        if (ThemeChooser.isDarkTheme(getActivity())) {
          mWebView.setBackgroundColor(getResources().getColor(android.R.color.transparent));
        }
        String jsLinkLongClick=getTextFromAssets(""String_Node_Str"",getActivity());
        mWebView.loadUrl(""String_Node_Str"" + jsLinkLongClick + ""String_Node_Str"");
      }
    }
  }
);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (changedUrl) {
        changedUrl=false;
        if (!url.equals(""String_Node_Str"") && (urls.isEmpty() || !urls.get(0).equals(url))) {
          urls.add(0,url);
          Log.v(TAG,""String_Node_Str"" + url);
        }
      }
      super.onPageStarted(view,url,favicon);
    }
  }
);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
        changedUrl=true;
      }
      return false;
    }
  }
);
}","@SuppressLint(""String_Node_Str"") private void init_webView(){
  int backgroundColor=ColorHelper.getColorFromAttribute(getContext(),R.attr.news_detail_background_color);
  mWebView.setBackgroundColor(backgroundColor);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setAllowFileAccess(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(false);
  webSettings.setSupportMultipleWindows(false);
  webSettings.setSupportZoom(false);
  webSettings.setAppCacheEnabled(true);
  mWebView.addJavascriptInterface(new WebViewLinkLongClickInterface(getActivity()),""String_Node_Str"");
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public boolean onConsoleMessage(    ConsoleMessage cm){
      Log.v(TAG,cm.message() + ""String_Node_Str"" + cm.sourceId()+ ""String_Node_Str""+ cm.lineNumber());
      return true;
    }
    @Override public void onProgressChanged(    WebView view,    int progress){
      if (progress < 100 && mProgressbarWebView.getVisibility() == ProgressBar.GONE) {
        mProgressbarWebView.setVisibility(ProgressBar.VISIBLE);
      }
      mProgressbarWebView.setProgress(progress);
      if (progress == 100) {
        mProgressbarWebView.setVisibility(ProgressBar.GONE);
        NewsDetailActivity ndActivity=((NewsDetailActivity)getActivity());
        mWebView.setBackgroundColor(getResources().getColor(R.color.slider_listview_text_color_dark_theme));
        ndActivity.mViewPager.setBackgroundColor(getResources().getColor(R.color.slider_listview_text_color_dark_theme));
        if (ThemeChooser.isDarkTheme(getActivity())) {
          mWebView.setBackgroundColor(getResources().getColor(android.R.color.transparent));
        }
        String jsLinkLongClick=getTextFromAssets(""String_Node_Str"",getActivity());
        mWebView.loadUrl(""String_Node_Str"" + jsLinkLongClick + ""String_Node_Str"");
      }
    }
  }
);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (changedUrl) {
        changedUrl=false;
        if (!url.equals(""String_Node_Str"") && (urls.isEmpty() || !urls.get(0).equals(url))) {
          urls.add(0,url);
          Log.v(TAG,""String_Node_Str"" + url);
        }
      }
      super.onPageStarted(view,url,favicon);
    }
  }
);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (v.getId() == R.id.webview && event.getAction() == MotionEvent.ACTION_DOWN) {
        changedUrl=true;
      }
      return false;
    }
  }
);
}"
26120,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getBoolean(SettingsActivity.CB_NAVIGATE_WITH_VOLUME_BUTTONS_STRING,false)) {
    if ((keyCode == KeyEvent.KEYCODE_VOLUME_DOWN)) {
      if (currentPosition < rssItems.size() - 1) {
        mViewPager.setCurrentItem(currentPosition + 1,true);
        return true;
      }
    }
 else     if ((keyCode == KeyEvent.KEYCODE_VOLUME_UP)) {
      if (currentPosition > 0) {
        mViewPager.setCurrentItem(currentPosition - 1,true);
        return true;
      }
    }
  }
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    NewsDetailFragment ndf=getNewsDetailFragmentAtPosition(currentPosition);
    if (ndf != null && ndf.mWebView != null) {
      if (ndf.urls.size() > 1) {
        ndf.urls.remove(0);
        ndf.mWebView.loadUrl(ndf.urls.get(0));
        return true;
      }
 else       if (ndf.urls.size() == 1) {
        ndf.urls.remove(0);
        ndf.startLoadRssItemToWebViewTask();
        Log.v(TAG,""String_Node_Str"");
        return true;
      }
    }
  }
  return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getBoolean(SettingsActivity.CB_NAVIGATE_WITH_VOLUME_BUTTONS_STRING,false)) {
    if ((keyCode == KeyEvent.KEYCODE_VOLUME_DOWN)) {
      if (currentPosition < rssItems.size() - 1) {
        mViewPager.setCurrentItem(currentPosition + 1,true);
      }
      return true;
    }
 else     if ((keyCode == KeyEvent.KEYCODE_VOLUME_UP)) {
      if (currentPosition > 0) {
        mViewPager.setCurrentItem(currentPosition - 1,true);
      }
      return true;
    }
  }
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    NewsDetailFragment ndf=getNewsDetailFragmentAtPosition(currentPosition);
    if (ndf != null && ndf.mWebView != null) {
      if (ndf.urls.size() > 1) {
        ndf.urls.remove(0);
        ndf.mWebView.loadUrl(ndf.urls.get(0));
        return true;
      }
 else       if (ndf.urls.size() == 1) {
        ndf.urls.remove(0);
        ndf.startLoadRssItemToWebViewTask();
        Log.v(TAG,""String_Node_Str"");
        return true;
      }
    }
  }
  return super.onKeyDown(keyCode,event);
}"
26121,"private boolean bindCustomTabsService(){
  if (mCustomTabsClient != null)   return true;
  String packageName=CustomTabActivityManager.getInstance().getPackageNameToUse(this);
  if (packageName == null)   return false;
  return CustomTabsClient.bindCustomTabsService(this,packageName,new CustomTabsServiceConnection(){
    @Override public void onCustomTabsServiceConnected(    ComponentName name,    CustomTabsClient client){
      mCustomTabsClient=client;
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      mCustomTabsClient=null;
    }
  }
);
}","private boolean bindCustomTabsService(){
  if (mCustomTabsClient != null)   return true;
  String packageName=CustomTabActivityManager.getInstance().getPackageNameToUse(this);
  if (packageName == null)   return false;
  mCustomTabsConnection=new CustomTabsServiceConnection(){
    @Override public void onCustomTabsServiceConnected(    ComponentName name,    CustomTabsClient client){
      mCustomTabsClient=client;
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      mCustomTabsClient=null;
    }
  }
;
  return CustomTabsClient.bindCustomTabsService(this,packageName,mCustomTabsConnection);
}"
26122,"@Override protected void onDestroy(){
  super.onDestroy();
}","@Override protected void onDestroy(){
  super.onDestroy();
  unbindCustomTabsService();
}"
26123,"private void DownloadMoreItems(){
  String username=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getString(""String_Node_Str"",""String_Node_Str"");
  String password=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getString(""String_Node_Str"",""String_Node_Str"");
  if (username != null) {
    NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
    OwnCloud_Reader.getInstance().Start_AsyncTask_GetOldItems(NewsReaderListActivity.this,onAsyncTaskComplete,ndf.getIdFeed(),ndf.getIdFolder());
    Toast.makeText(this,getString(R.string.toast_GettingMoreItems),Toast.LENGTH_SHORT).show();
  }
}","private void DownloadMoreItems(){
  String username=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getString(""String_Node_Str"",null);
  if (username != null) {
    NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
    OwnCloud_Reader.getInstance().Start_AsyncTask_GetOldItems(NewsReaderListActivity.this,onAsyncTaskComplete,ndf.getIdFeed(),ndf.getIdFolder());
    Toast.makeText(this,getString(R.string.toast_GettingMoreItems),Toast.LENGTH_SHORT).show();
  }
}"
26124,"@Override protected UserInfo doInBackground(Void... voids){
  API api=API.GetRightApiForVersion(""String_Node_Str"",HttpJsonRequest.getInstance().getRootUrl());
  try {
    UserInfo ui=new UserInfo();
    InputStream inputStream=HttpJsonRequest.getInstance().PerformJsonRequest(api.getUserUrl());
    JsonReader reader=new JsonReader(new InputStreamReader(inputStream,""String_Node_Str""));
    reader.beginObject();
    String currentName;
    while (reader.hasNext() && (currentName=reader.nextName()) != null) {
switch (currentName) {
case ""String_Node_Str"":
        ui.mUserId=reader.nextString();
      break;
case ""String_Node_Str"":
    ui.mDisplayName=reader.nextString();
  break;
case ""String_Node_Str"":
com.google.gson.stream.JsonToken jt=reader.peek();
if (jt == com.google.gson.stream.JsonToken.NULL) {
Log.v(TAG,""String_Node_Str"");
reader.skipValue();
}
 else {
reader.beginObject();
while (reader.hasNext()) {
  currentName=reader.nextName();
  if (currentName.equals(""String_Node_Str"")) {
    String encodedImage=reader.nextString();
    byte[] decodedString=Base64.decode(encodedImage,Base64.DEFAULT);
    ui.mAvatar=BitmapFactory.decodeByteArray(decodedString,0,decodedString.length);
    Log.v(TAG,encodedImage);
  }
 else {
    reader.skipValue();
  }
}
}
break;
default :
Log.v(TAG,""String_Node_Str"" + currentName);
reader.skipValue();
break;
}
}
reader.close();
return ui;
}
 catch (Exception e) {
if (e.getMessage().equals(""String_Node_Str"")) {
SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(NewsReaderListActivity.this);
mPrefs.edit().remove(""String_Node_Str"").commit();
}
e.printStackTrace();
}
return null;
}","@Override protected UserInfo doInBackground(Void... voids){
  HttpUrl oc_root_url=HttpJsonRequest.getInstance().getRootUrl();
  try {
    String appVersion=OwnCloudReaderMethods.GetVersionNumber(oc_root_url);
    API api=API.GetRightApiForVersion(appVersion,HttpJsonRequest.getInstance().getRootUrl());
    int[] version=API.ExtractVersionNumberFromString(appVersion);
    if (version[0] < 6 || version[0] == 6 && version[1] <= 4)     return null;
    UserInfo ui=new UserInfo();
    InputStream inputStream=HttpJsonRequest.getInstance().PerformJsonRequest(api.getUserUrl());
    JsonReader reader=new JsonReader(new InputStreamReader(inputStream,""String_Node_Str""));
    reader.beginObject();
    String currentName;
    while (reader.hasNext() && (currentName=reader.nextName()) != null) {
switch (currentName) {
case ""String_Node_Str"":
        ui.mUserId=reader.nextString();
      break;
case ""String_Node_Str"":
    ui.mDisplayName=reader.nextString();
  break;
case ""String_Node_Str"":
com.google.gson.stream.JsonToken jt=reader.peek();
if (jt == com.google.gson.stream.JsonToken.NULL) {
Log.v(TAG,""String_Node_Str"");
reader.skipValue();
}
 else {
reader.beginObject();
while (reader.hasNext()) {
  currentName=reader.nextName();
  if (currentName.equals(""String_Node_Str"")) {
    String encodedImage=reader.nextString();
    byte[] decodedString=Base64.decode(encodedImage,Base64.DEFAULT);
    ui.mAvatar=BitmapFactory.decodeByteArray(decodedString,0,decodedString.length);
    Log.v(TAG,encodedImage);
  }
 else {
    reader.skipValue();
  }
}
}
break;
default :
Log.v(TAG,""String_Node_Str"" + currentName);
reader.skipValue();
break;
}
}
reader.close();
return ui;
}
 catch (Exception e) {
if (e.getMessage().equals(""String_Node_Str"")) {
SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(NewsReaderListActivity.this);
mPrefs.edit().remove(""String_Node_Str"").commit();
}
e.printStackTrace();
}
return null;
}"
26125,"private void UpdateButtonLayoutWithHandler(){
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      UpdateButtonLayout();
      ;
    }
  }
);
}","private void UpdateButtonLayoutWithHandler(){
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      UpdateButtonLayout();
    }
  }
);
}"
26126,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  if (savedInstanceState != null) {
    restoreInstanceState(savedInstanceState);
  }
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState){
  restoreInstanceState(savedInstanceState);
  super.onRestoreInstanceState(savedInstanceState);
}"
26127,"/** 
 * @return true if new items count was greater than 0
 */
private boolean syncFinishedHandler(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    ShowcaseConfig config=new ShowcaseConfig();
    config.setDelay(300);
    MaterialShowcaseSequence sequence=new MaterialShowcaseSequence(this,""String_Node_Str"");
    sequence.setConfig(config);
    sequence.addSequenceItem(getNewsReaderDetailFragment().pbLoading,""String_Node_Str"",""String_Node_Str"");
    sequence.addSequenceItem(getNewsReaderDetailFragment().pbLoading,""String_Node_Str"",""String_Node_Str"");
    sequence.start();
  }
  NewsReaderListFragment newsReaderListFragment=getSlidingListFragment();
  newsReaderListFragment.ReloadAdapter();
  UpdateItemList();
  UpdatePodcastView();
  AsyncTaskHelper.StartAsyncTask(new AsyncTaskGetUserInfo());
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(NewsReaderListActivity.this);
  int newItemsCount=mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,0);
  if (newItemsCount > 0) {
    int firstVisiblePosition=getNewsReaderDetailFragment().getFirstVisibleScrollPosition();
    if (firstVisiblePosition == 0) {
      updateCurrentRssView();
    }
 else {
      Snackbar snackbar=Snackbar.make(findViewById(R.id.coordinator_layout),getResources().getQuantityString(R.plurals.message_bar_new_articles_available,newItemsCount,newItemsCount),Snackbar.LENGTH_LONG);
      snackbar.setAction(getString(R.string.message_bar_reload),mSnackbarListener);
      snackbar.setActionTextColor(getResources().getColor(R.color.accent_material_dark));
      TextView textView=(TextView)snackbar.getView().findViewById(android.support.design.R.id.snackbar_text);
      textView.setTextColor(Color.WHITE);
      snackbar.show();
    }
    return true;
  }
  return false;
}","/** 
 * @return true if new items count was greater than 0
 */
private boolean syncFinishedHandler(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    ShowcaseConfig config=new ShowcaseConfig();
    config.setDelay(300);
    MaterialShowcaseSequence sequence=new MaterialShowcaseSequence(this,""String_Node_Str"");
    sequence.setConfig(config);
    sequence.addSequenceItem(getNewsReaderDetailFragment().pbLoading,""String_Node_Str"",""String_Node_Str"");
    sequence.addSequenceItem(getNewsReaderDetailFragment().pbLoading,""String_Node_Str"",""String_Node_Str"");
    sequence.start();
  }
  NewsReaderListFragment newsReaderListFragment=getSlidingListFragment();
  newsReaderListFragment.ReloadAdapter();
  UpdateItemList();
  UpdatePodcastView();
  AsyncTaskHelper.StartAsyncTask(new AsyncTaskGetUserInfo());
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(NewsReaderListActivity.this);
  int newItemsCount=mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,0);
  if (newItemsCount > 0) {
    int firstVisiblePosition=getNewsReaderDetailFragment().getFirstVisibleScrollPosition();
    if (firstVisiblePosition == 0) {
      updateCurrentRssView();
    }
 else {
      Snackbar snackbar=Snackbar.make(findViewById(R.id.coordinator_layout),getResources().getQuantityString(R.plurals.message_bar_new_articles_available,newItemsCount,newItemsCount),Snackbar.LENGTH_LONG);
      snackbar.setAction(getString(R.string.message_bar_reload),mSnackbarListener);
      snackbar.setActionTextColor(ContextCompat.getColor(this,R.color.accent_material_dark));
      TextView textView=(TextView)snackbar.getView().findViewById(android.support.design.R.id.snackbar_text);
      textView.setTextColor(Color.WHITE);
      snackbar.show();
    }
    return true;
  }
  return false;
}"
26128,"@Override protected Integer doInBackground(Void... params){
  try {
    HttpJsonRequest.getInstance().setCredentials(username,password,oc_root_path);
    String _version=OwnCloudReaderMethods.GetVersionNumber(getActivity(),oc_root_path);
    if (_version != null) {
      _version=_version.replace(""String_Node_Str"",""String_Node_Str"");
      return Integer.parseInt(_version);
    }
  }
 catch (  Exception e) {
    if (e.getLocalizedMessage() != null)     exception_message=e.getLocalizedMessage();
 else     if (e instanceof NullPointerException)     exception_message=getString(R.string.login_dialog_text_something_went_wrong);
    return -1;
  }
  return 0;
}","@Override protected Integer doInBackground(Void... params){
  try {
    HttpJsonRequest.createNewInstance(getActivity()).setCredentials(username,password,oc_root_path);
    String _version=OwnCloudReaderMethods.GetVersionNumber(getActivity(),oc_root_path);
    if (_version != null) {
      _version=_version.replace(""String_Node_Str"",""String_Node_Str"");
      return Integer.parseInt(_version);
    }
  }
 catch (  Exception e) {
    if (e.getLocalizedMessage() != null)     exception_message=e.getLocalizedMessage();
 else     if (e instanceof NullPointerException)     exception_message=getString(R.string.login_dialog_text_something_went_wrong);
    return -1;
  }
  return 0;
}"
26129,"@Override protected Boolean doInBackground(Void... params){
  API api=new APIv2(NewFeedActivity.this);
  try {
    int status=HttpJsonRequest.getInstance().performCreateFeedRequest(api.getFeedUrl(),mUrlToFeed,mFolderId);
    if (status == 200) {
      return true;
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + status);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return false;
}","@Override protected Boolean doInBackground(Void... params){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(NewFeedActivity.this);
  String baseUrl=mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,""String_Node_Str"");
  API api=new APIv2(baseUrl);
  try {
    int status=HttpJsonRequest.getInstance().performCreateFeedRequest(api.getFeedUrl(),mUrlToFeed,mFolderId);
    if (status == 200) {
      return true;
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + status);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return false;
}"
26130,"protected HttpUrl getAPIUrl(String format,String... urlSegments){
  String oc_root_path=mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,""String_Node_Str"");
  HttpUrl basePath=HttpUrl.parse(oc_root_path);
  HttpUrl.Builder apiUrlBuilder=basePath.resolve(StringUtils.join(urlSegments,""String_Node_Str"")).newBuilder();
  if (format != null)   apiUrlBuilder.addQueryParameter(""String_Node_Str"",format);
  return apiUrlBuilder.build();
}","protected HttpUrl getAPIUrl(String format,String... urlSegments){
  HttpUrl basePath=HttpUrl.parse(baseUrl);
  String url=""String_Node_Str"" + StringUtils.join(urlSegments,""String_Node_Str"");
  HttpUrl.Builder apiUrlBuilder=basePath.resolve(url).newBuilder();
  if (format != null)   apiUrlBuilder.addQueryParameter(""String_Node_Str"",format);
  return apiUrlBuilder.build();
}"
26131,"public static API GetRightApiForVersion(String appVersion,Context context){
  API api;
  int majorVersion=0;
  int minorVersion=0;
  if (appVersion != null) {
    majorVersion=Integer.parseInt(appVersion.substring(0,1));
    appVersion=appVersion.substring(2);
    appVersion=appVersion.replace(""String_Node_Str"",""String_Node_Str"");
    minorVersion=Integer.parseInt(appVersion);
  }
switch (majorVersion) {
case 1:
    if (minorVersion >= 101) {
      api=new APIv2(context);
    }
 else {
      api=new APIv1(context);
    }
  break;
case 2:
api=new APIv2(context);
break;
case 3:
api=new APIv2(context);
break;
case 4:
api=new APIv2(context);
break;
default :
api=new APIv2(context);
break;
}
return api;
}","public static API GetRightApiForVersion(String appVersion,String baseUrl){
  API api;
  int majorVersion=0;
  int minorVersion=0;
  if (appVersion != null) {
    majorVersion=Integer.parseInt(appVersion.substring(0,1));
    appVersion=appVersion.substring(2);
    appVersion=appVersion.replace(""String_Node_Str"",""String_Node_Str"");
    minorVersion=Integer.parseInt(appVersion);
  }
switch (majorVersion) {
case 1:
    if (minorVersion >= 101) {
      api=new APIv2(baseUrl);
    }
 else {
      api=new APIv1(baseUrl);
    }
  break;
case 2:
api=new APIv2(baseUrl);
break;
case 3:
api=new APIv2(baseUrl);
break;
case 4:
api=new APIv2(baseUrl);
break;
default :
api=new APIv2(baseUrl);
break;
}
return api;
}"
26132,"public API(Context cont){
  mPrefs=PreferenceManager.getDefaultSharedPreferences(cont);
}","public API(String baseUrl){
  if (!baseUrl.endsWith(""String_Node_Str""))   baseUrl=baseUrl + ""String_Node_Str"";
  this.baseUrl=baseUrl;
}"
26133,"@Override public boolean performAction(JSONObject jObj){
  this.version=jObj.optJSONObject(""String_Node_Str"").optJSONObject(""String_Node_Str"").optString(""String_Node_Str"");
  return true;
}","@Override public boolean performAction(JSONObject jObj){
  if (jObj.has(""String_Node_Str"")) {
    this.version=jObj.optJSONObject(""String_Node_Str"").optJSONObject(""String_Node_Str"").optString(""String_Node_Str"");
    return true;
  }
  return false;
}"
26134,"/** 
 * can parse json like {""items"":[{""id"":6782}]}
 * @param in
 * @param iJoBj
 * @return
 * @throws IOException
 * @throws JSONException
 */
public static int[] readJsonStreamV1(InputStream in,IHandleJsonObject iJoBj) throws IOException, JSONException {
  int count=0;
  int newItemsCount=0;
  JsonReader reader=new JsonReader(new InputStreamReader(in,""String_Node_Str""));
  reader.beginObject();
  reader.nextName();
  reader.beginObject();
  reader.nextName();
  getJSONObjectFromReader(reader);
  reader.nextName();
  reader.beginObject();
  reader.nextName();
  reader.beginArray();
  while (reader.hasNext()) {
    JSONObject e=getJSONObjectFromReader(reader);
    if (iJoBj.performAction(e))     newItemsCount++;
    count++;
  }
  if (iJoBj instanceof InsertItemIntoDatabase)   ((InsertItemIntoDatabase)iJoBj).performDatabaseBatchInsert();
  reader.close();
  return new int[]{count,newItemsCount};
}","/** 
 * can parse json like {""items"":[{""id"":6782}]}
 * @param in
 * @param iJoBj
 * @return new int[] { count, newItemsCount }
 * @throws IOException
 * @throws JSONException
 */
public static int[] readJsonStreamV1(InputStream in,IHandleJsonObject iJoBj) throws IOException, JSONException {
  int count=0;
  int newItemsCount=0;
  JsonReader reader=new JsonReader(new InputStreamReader(in,""String_Node_Str""));
  reader.beginObject();
  reader.nextName();
  reader.beginObject();
  reader.nextName();
  getJSONObjectFromReader(reader);
  reader.nextName();
  reader.beginObject();
  reader.nextName();
  reader.beginArray();
  while (reader.hasNext()) {
    JSONObject e=getJSONObjectFromReader(reader);
    if (iJoBj.performAction(e))     newItemsCount++;
    count++;
  }
  if (iJoBj instanceof InsertItemIntoDatabase)   ((InsertItemIntoDatabase)iJoBj).performDatabaseBatchInsert();
  reader.close();
  return new int[]{count,newItemsCount};
}"
26135,"private static JSONObject getJSONObjectFromReader(JsonReader jsonReader){
  JSONObject jObj=new JSONObject();
  JsonToken tokenInstance;
  try {
    tokenInstance=jsonReader.peek();
    if (tokenInstance == JsonToken.BEGIN_OBJECT)     jsonReader.beginObject();
 else     if (tokenInstance == JsonToken.BEGIN_ARRAY)     jsonReader.beginArray();
    while (jsonReader.hasNext()) {
      JsonToken token;
      String name;
      try {
        name=jsonReader.nextName();
        token=jsonReader.peek();
switch (token) {
case NUMBER:
          jObj.put(name,jsonReader.nextLong());
        break;
case NULL:
      jsonReader.skipValue();
    break;
case BOOLEAN:
  jObj.put(name,jsonReader.nextBoolean());
break;
case BEGIN_OBJECT:
jObj.put(name,getJSONObjectFromReader(jsonReader));
break;
default :
jObj.put(name,jsonReader.nextString());
}
}
 catch (Exception ex) {
ex.printStackTrace();
jsonReader.skipValue();
}
}
if (tokenInstance == JsonToken.BEGIN_OBJECT) jsonReader.endObject();
 else if (tokenInstance == JsonToken.BEGIN_ARRAY) jsonReader.endArray();
return jObj;
}
 catch (Exception e) {
e.printStackTrace();
}
return null;
}","private static JSONObject getJSONObjectFromReader(JsonReader jsonReader){
  JSONObject jObj=new JSONObject();
  JsonToken tokenInstance;
  try {
    tokenInstance=jsonReader.peek();
    if (tokenInstance == JsonToken.BEGIN_OBJECT)     jsonReader.beginObject();
 else     if (tokenInstance == JsonToken.BEGIN_ARRAY)     jsonReader.beginArray();
    while (jsonReader.hasNext()) {
      JsonToken token;
      String name;
      try {
        name=jsonReader.nextName();
        token=jsonReader.peek();
switch (token) {
case NUMBER:
          jObj.put(name,jsonReader.nextLong());
        break;
case NULL:
      jsonReader.skipValue();
    break;
case BOOLEAN:
  jObj.put(name,jsonReader.nextBoolean());
break;
case BEGIN_OBJECT:
jObj.put(name,getJSONObjectFromReader(jsonReader));
break;
case BEGIN_ARRAY:
jsonReader.skipValue();
break;
default :
jObj.put(name,jsonReader.nextString());
}
}
 catch (Exception ex) {
ex.printStackTrace();
jsonReader.skipValue();
}
}
if (tokenInstance == JsonToken.BEGIN_OBJECT) jsonReader.endObject();
 else if (tokenInstance == JsonToken.BEGIN_ARRAY) jsonReader.endArray();
return jObj;
}
 catch (Exception e) {
e.printStackTrace();
}
return null;
}"
26136,"public static String GetVersionNumber(Context cont,String oc_root_path) throws Exception {
  HttpUrl basePath=HttpUrl.parse(oc_root_path);
  try {
    HttpUrl requestUrl=basePath.resolve(OwnCloudConstants.ROOT_PATH_APIv2).newBuilder().addPathSegment(OwnCloudConstants.VERSION_PATH).build();
    InputStream is=HttpJsonRequest.getInstance().PerformJsonRequest(requestUrl);
    try {
      GetVersion_v2 gv=new GetVersion_v2();
      readJsonStreamSimple(is,gv);
      return gv.getVersion();
    }
  finally {
      is.close();
    }
  }
 catch (  Exception ex) {
    HttpUrl requestUrl=basePath.resolve(OwnCloudConstants.ROOT_PATH_APIv1).newBuilder().addPathSegment(OwnCloudConstants.VERSION_PATH).addQueryParameter(""String_Node_Str"",""String_Node_Str"").build();
    InputStream is=HttpJsonRequest.getInstance().PerformJsonRequest(requestUrl);
    try {
      GetVersion_v1 gv=new GetVersion_v1();
      readJsonStreamSimple(is,gv);
      return gv.getVersion();
    }
  finally {
      is.close();
    }
  }
}","public static String GetVersionNumber(Context cont,String oc_root_path) throws Exception {
  if (!oc_root_path.endsWith(""String_Node_Str""))   oc_root_path=oc_root_path + ""String_Node_Str"";
  HttpUrl basePath=HttpUrl.parse(oc_root_path);
  try {
    HttpUrl requestUrl=basePath.resolve(""String_Node_Str"" + OwnCloudConstants.ROOT_PATH_APIv2).newBuilder().addPathSegment(OwnCloudConstants.VERSION_PATH).build();
    InputStream is=HttpJsonRequest.getInstance().PerformJsonRequest(requestUrl);
    try {
      GetVersion_v2 gv=new GetVersion_v2();
      readJsonStreamSimple(is,gv);
      return gv.getVersion();
    }
  finally {
      is.close();
    }
  }
 catch (  Exception ex) {
    HttpUrl requestUrl=basePath.resolve(""String_Node_Str"" + OwnCloudConstants.ROOT_PATH_APIv1).newBuilder().addPathSegment(OwnCloudConstants.VERSION_PATH).addQueryParameter(""String_Node_Str"",""String_Node_Str"").build();
    InputStream is=HttpJsonRequest.getInstance().PerformJsonRequest(requestUrl);
    try {
      GetVersion_v1 gv=new GetVersion_v1();
      readJsonStreamSimple(is,gv);
      return gv.getVersion();
    }
  finally {
      is.close();
    }
  }
}"
26137,"public APIv1(Context cont){
  super(cont);
}","public APIv1(String baseUrl){
  super(baseUrl);
}"
26138,"public APIv2(Context cont){
  super(cont);
}","public APIv2(String baseUrl){
  super(baseUrl);
}"
26139,"@Override public void onAsyncTaskCompleted(int task_id,Object task_result){
  if (!(task_result instanceof Exception)) {
    String appVersion=task_result.toString();
    API api=API.GetRightApiForVersion(appVersion,SyncItemStateService.this);
    _Reader.setApi(api);
    _Reader.Start_AsyncTask_PerformItemStateChange(SyncItemStateService.this,null);
  }
}","@Override public void onAsyncTaskCompleted(int task_id,Object task_result){
  if (!(task_result instanceof Exception)) {
    String appVersion=task_result.toString();
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(SyncItemStateService.this);
    String baseUrl=mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,""String_Node_Str"");
    API api=API.GetRightApiForVersion(appVersion,baseUrl);
    _Reader.setApi(api);
    _Reader.Start_AsyncTask_PerformItemStateChange(SyncItemStateService.this,null);
  }
}"
26140,"@Override public boolean onOptionsItemSelected(MenuItem item){
  RssItem rssItem=rssItems.get(currentPosition);
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     ;
 else {
      super.onBackPressed();
    }
  break;
case R.id.action_read:
markItemAsReadUnread(rssItem,!menuItem_Read.isChecked());
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_starred:
Boolean curState=rssItem.getStarred_temp();
rssItem.setStarred_temp(!curState);
dbConn.updateRssItem(rssItem);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_openInBrowser:
NewsDetailFragment newsDetailFragment=getNewsDetailFragmentAtPosition(currentPosition);
String link=newsDetailFragment.mWebView.getUrl();
if (link.equals(""String_Node_Str"")) link=rssItem.getLink();
if (link.length() > 0) {
if (mCustomTabsSupported) {
CustomTabActivityManager mCustomTabsManager=CustomTabActivityManager.getInstance();
mCustomTabsSession=getSession();
CustomTabUiBuilder uiBuilder=new CustomTabUiBuilder();
uiBuilder.setToolbarColor(getResources().getColor(R.color.colorPrimaryDarkTheme));
uiBuilder.setShowTitle(true);
uiBuilder.setCloseButtonStyle(CustomTabUiBuilder.CLOSE_BUTTON_ARROW);
uiBuilder.setStartAnimations(this,R.anim.slide_in_right,R.anim.slide_out_left);
uiBuilder.setExitAnimations(this,R.anim.slide_in_left,R.anim.slide_out_right);
mCustomTabsManager.launchUrl(this,mCustomTabsSession,link,uiBuilder);
}
 else {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
}
break;
case R.id.action_playPodcast:
openPodcast(rssItem);
break;
case R.id.action_tts:
TTSItem ttsItem=new TTSItem(rssItem.getId(),rssItem.getTitle(),rssItem.getTitle() + ""String_Node_Str"" + Html.fromHtml(rssItem.getBody()).toString(),rssItem.getFeed().getFaviconUrl());
openTTSItem(ttsItem);
break;
case R.id.action_ShareItem:
String title=rssItem.getTitle();
String content=rssItem.getLink();
NewsDetailFragment fragment=getNewsDetailFragmentAtPosition(currentPosition);
if (fragment != null) {
if (!fragment.mWebView.getUrl().equals(""String_Node_Str"") && !fragment.mWebView.getUrl().trim().equals(""String_Node_Str"")) {
content=fragment.mWebView.getUrl();
title=fragment.mWebView.getTitle();
}
}
content=title + ""String_Node_Str"" + content;
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,content);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  RssItem rssItem=rssItems.get(currentPosition);
switch (item.getItemId()) {
case android.R.id.home:
    onBackPressed();
  return true;
case R.id.action_read:
markItemAsReadUnread(rssItem,!menuItem_Read.isChecked());
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_starred:
Boolean curState=rssItem.getStarred_temp();
rssItem.setStarred_temp(!curState);
dbConn.updateRssItem(rssItem);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_openInBrowser:
NewsDetailFragment newsDetailFragment=getNewsDetailFragmentAtPosition(currentPosition);
String link=newsDetailFragment.mWebView.getUrl();
if (link.equals(""String_Node_Str"")) link=rssItem.getLink();
if (link.length() > 0) {
if (mCustomTabsSupported) {
CustomTabActivityManager mCustomTabsManager=CustomTabActivityManager.getInstance();
mCustomTabsSession=getSession();
CustomTabUiBuilder uiBuilder=new CustomTabUiBuilder();
uiBuilder.setToolbarColor(getResources().getColor(R.color.colorPrimaryDarkTheme));
uiBuilder.setShowTitle(true);
uiBuilder.setCloseButtonStyle(CustomTabUiBuilder.CLOSE_BUTTON_ARROW);
uiBuilder.setStartAnimations(this,R.anim.slide_in_right,R.anim.slide_out_left);
uiBuilder.setExitAnimations(this,R.anim.slide_in_left,R.anim.slide_out_right);
mCustomTabsManager.launchUrl(this,mCustomTabsSession,link,uiBuilder);
}
 else {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
}
break;
case R.id.action_playPodcast:
openPodcast(rssItem);
break;
case R.id.action_tts:
TTSItem ttsItem=new TTSItem(rssItem.getId(),rssItem.getTitle(),rssItem.getTitle() + ""String_Node_Str"" + Html.fromHtml(rssItem.getBody()).toString(),rssItem.getFeed().getFaviconUrl());
openTTSItem(ttsItem);
break;
case R.id.action_ShareItem:
String title=rssItem.getTitle();
String content=rssItem.getLink();
NewsDetailFragment fragment=getNewsDetailFragmentAtPosition(currentPosition);
if (fragment != null) {
if (!fragment.mWebView.getUrl().equals(""String_Node_Str"") && !fragment.mWebView.getUrl().trim().equals(""String_Node_Str"")) {
content=fragment.mWebView.getUrl();
title=fragment.mWebView.getTitle();
}
}
content=title + ""String_Node_Str"" + content;
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,content);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
}
return super.onOptionsItemSelected(item);
}"
26141,"@Override public void onBackPressed(){
  if (handlePodcastBackPressed())   ;
 else   super.onBackPressed();
}","@Override public void onBackPressed(){
  if (!handlePodcastBackPressed())   super.onBackPressed();
}"
26142,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))   return true;
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     ;
  return true;
case R.id.action_settings:
Intent intent=new Intent(this,SettingsActivity.class);
startActivityForResult(intent,RESULT_SETTINGS);
return true;
case R.id.menu_update:
startSync();
break;
case R.id.action_login:
StartLoginFragment(NewsReaderListActivity.this);
break;
case R.id.action_add_new_feed:
Intent newFeedIntent=new Intent(this,NewFeedActivity.class);
startActivityForResult(newFeedIntent,RESULT_ADD_NEW_FEED);
break;
case R.id.menu_StartImageCaching:
DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
long highestItemId=dbConn.getLowestRssItemIdUnread();
Intent service=new Intent(this,DownloadImagesService.class);
service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemId);
startService(service);
break;
case R.id.menu_CreateDatabaseDump:
DatabaseUtils.CopyDatabaseToSdCard(this);
new AlertDialog.Builder(this).setMessage(""String_Node_Str"" + DatabaseUtils.GetPath(this)).setNeutralButton(getString(android.R.string.ok),null).show();
break;
case R.id.menu_About_Changelog:
DialogFragment dialog=new VersionInfoDialogFragment();
dialog.show(getSupportFragmentManager(),""String_Node_Str"");
return true;
case R.id.menu_markAllAsRead:
NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
if (ndf != null) {
DatabaseConnectionOrm dbConn2=new DatabaseConnectionOrm(this);
dbConn2.markAllItemsAsReadForCurrentView();
reloadCountNumbersOfSlidingPaneAdapter();
ndf.UpdateCurrentRssView(this,false);
}
return true;
case R.id.menu_downloadMoreItems:
DownloadMoreItems();
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))   return true;
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     return true;
  break;
case R.id.action_settings:
Intent intent=new Intent(this,SettingsActivity.class);
startActivityForResult(intent,RESULT_SETTINGS);
return true;
case R.id.menu_update:
startSync();
break;
case R.id.action_login:
StartLoginFragment(NewsReaderListActivity.this);
break;
case R.id.action_add_new_feed:
Intent newFeedIntent=new Intent(this,NewFeedActivity.class);
startActivityForResult(newFeedIntent,RESULT_ADD_NEW_FEED);
break;
case R.id.menu_StartImageCaching:
DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
long highestItemId=dbConn.getLowestRssItemIdUnread();
Intent service=new Intent(this,DownloadImagesService.class);
service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemId);
startService(service);
break;
case R.id.menu_CreateDatabaseDump:
DatabaseUtils.CopyDatabaseToSdCard(this);
new AlertDialog.Builder(this).setMessage(""String_Node_Str"" + DatabaseUtils.GetPath(this)).setNeutralButton(getString(android.R.string.ok),null).show();
break;
case R.id.menu_About_Changelog:
DialogFragment dialog=new VersionInfoDialogFragment();
dialog.show(getSupportFragmentManager(),""String_Node_Str"");
return true;
case R.id.menu_markAllAsRead:
NewsReaderDetailFragment ndf=getNewsReaderDetailFragment();
if (ndf != null) {
DatabaseConnectionOrm dbConn2=new DatabaseConnectionOrm(this);
dbConn2.markAllItemsAsReadForCurrentView();
reloadCountNumbersOfSlidingPaneAdapter();
ndf.UpdateCurrentRssView(this,false);
}
return true;
case R.id.menu_downloadMoreItems:
DownloadMoreItems();
return true;
}
return super.onOptionsItemSelected(item);
}"
26143,"@Override public void onBackPressed(){
  if (handlePodcastBackPressed())   ;
  if (drawerLayout != null) {
    if (drawerLayout.isDrawerOpen(GravityCompat.START))     super.onBackPressed();
 else     drawerLayout.openDrawer(GravityCompat.START);
  }
}","@Override public void onBackPressed(){
  if (!handlePodcastBackPressed()) {
    if (drawerLayout != null) {
      if (drawerLayout.isDrawerOpen(GravityCompat.START))       super.onBackPressed();
 else       drawerLayout.openDrawer(GravityCompat.START);
    }
 else {
      super.onBackPressed();
    }
  }
}"
26144,"private Drawable getFolderIndicatorIcon(Context context){
  if (folder_indicator_icon == null) {
    if (ThemeChooser.isDarkTheme(mContext))     folder_indicator_icon=context.getResources().getDrawable(R.drawable.ic_action_expand_less_dark);
 else     folder_indicator_icon=context.getResources().getDrawable(R.drawable.ic_action_expand_less_light);
  }
  return folder_indicator_icon;
}","private int getFolderIndicatorIcon(){
  if (folder_indicator_icon == null) {
    if (ThemeChooser.isDarkTheme(mContext))     folder_indicator_icon=R.drawable.ic_action_expand_less_dark;
 else     folder_indicator_icon=R.drawable.ic_action_expand_less_light;
  }
  return folder_indicator_icon;
}"
26145,"@Override public View getGroupView(final int groupPosition,final boolean isExpanded,View convertView,ViewGroup parent){
  GroupHolder viewHolder;
  final AbstractItem group=(AbstractItem)getGroup(groupPosition);
  if (convertView == null) {
    LinearLayout view=new LinearLayout(mContext);
    convertView=inflater.inflate(R.layout.subscription_list_item,view,true);
    viewHolder=new GroupHolder(convertView,mContext);
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(GroupHolder)convertView.getTag();
  }
  viewHolder.txt_Summary.setText(group.header);
  viewHolder.listItemLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      long idFeed=group.id_database;
      boolean skipFireEvent=false;
      if (group instanceof ConcreteFeedItem) {
        fireListTextClicked(idFeed,mContext,false,(long)ITEMS_WITHOUT_FOLDER.getValue());
        skipFireEvent=true;
      }
      if (!skipFireEvent)       fireListTextClicked(idFeed,mContext,true,((FolderSubscribtionItem)group).idFolder);
    }
  }
);
  viewHolder.txt_UnreadCount.setText(""String_Node_Str"");
  boolean skipGetUnread=false;
  if (group.idFolder != null && group.idFolder == ITEMS_WITHOUT_FOLDER.getValue()) {
    String unreadCount=unreadCountFeeds.get((int)group.id_database);
    if (unreadCount != null) {
      viewHolder.txt_UnreadCount.setText(unreadCount);
    }
    skipGetUnread=true;
  }
  if (!skipGetUnread) {
    String unreadCount=unreadCountFolders.get((int)group.id_database);
    if (unreadCount != null)     viewHolder.txt_UnreadCount.setText(unreadCount);
  }
  int rotation=0;
  if (group.idFolder != null) {
    viewHolder.imgView.setVisibility(View.GONE);
    if (group.idFolder == ITEMS_WITHOUT_FOLDER.getValue()) {
      ConcreteFeedItem concreteFeedItem=((ConcreteFeedItem)group);
      favIconHandler.loadFavIconForFeed(concreteFeedItem.favIcon,viewHolder.faviconView);
    }
  }
 else {
    if (group.id_database == ALL_STARRED_ITEMS.getValue()) {
      viewHolder.imgView.setVisibility(View.GONE);
      viewHolder.faviconView.setVisibility(View.VISIBLE);
      rotation=0;
      viewHolder.faviconView.setImageDrawable(getBtn_rating_star_off_normal_holo_light(mContext));
    }
 else     if (getChildrenCount(groupPosition) == 0) {
      viewHolder.imgView.setVisibility(View.GONE);
      viewHolder.faviconView.setVisibility(View.INVISIBLE);
    }
 else {
      viewHolder.imgView.setVisibility(View.VISIBLE);
      viewHolder.faviconView.setVisibility(View.INVISIBLE);
      viewHolder.imgView.setImageDrawable(getFolderIndicatorIcon(mContext));
      if (isExpanded) {
        rotation=90;
      }
 else {
        rotation=180;
      }
      viewHolder.imgView.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          if (isExpanded)           ((ExpandableListView)listView).collapseGroup(groupPosition);
 else           ((ExpandableListView)listView).expandGroup(groupPosition);
        }
      }
);
    }
  }
  viewHolder.imgView.setRotation(rotation);
  return convertView;
}","@Override public View getGroupView(final int groupPosition,final boolean isExpanded,View convertView,ViewGroup parent){
  GroupHolder viewHolder;
  final AbstractItem group=(AbstractItem)getGroup(groupPosition);
  if (convertView == null) {
    LinearLayout view=new LinearLayout(mContext);
    convertView=inflater.inflate(R.layout.subscription_list_item,view,true);
    viewHolder=new GroupHolder(convertView,mContext);
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(GroupHolder)convertView.getTag();
  }
  viewHolder.txt_Summary.setText(group.header);
  viewHolder.listItemLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      long idFeed=group.id_database;
      boolean skipFireEvent=false;
      if (group instanceof ConcreteFeedItem) {
        fireListTextClicked(idFeed,mContext,false,(long)ITEMS_WITHOUT_FOLDER.getValue());
        skipFireEvent=true;
      }
      if (!skipFireEvent)       fireListTextClicked(idFeed,mContext,true,((FolderSubscribtionItem)group).idFolder);
    }
  }
);
  viewHolder.txt_UnreadCount.setText(""String_Node_Str"");
  boolean skipGetUnread=false;
  if (group.idFolder != null && group.idFolder == ITEMS_WITHOUT_FOLDER.getValue()) {
    String unreadCount=unreadCountFeeds.get((int)group.id_database);
    if (unreadCount != null) {
      viewHolder.txt_UnreadCount.setText(unreadCount);
    }
    skipGetUnread=true;
  }
  if (!skipGetUnread) {
    String unreadCount=unreadCountFolders.get((int)group.id_database);
    if (unreadCount != null)     viewHolder.txt_UnreadCount.setText(unreadCount);
  }
  int rotation=0;
  if (group.idFolder != null) {
    viewHolder.imgView.setVisibility(View.GONE);
    if (group.idFolder == ITEMS_WITHOUT_FOLDER.getValue()) {
      ConcreteFeedItem concreteFeedItem=((ConcreteFeedItem)group);
      favIconHandler.loadFavIconForFeed(concreteFeedItem.favIcon,viewHolder.faviconView);
    }
  }
 else {
    if (group.id_database == ALL_STARRED_ITEMS.getValue()) {
      viewHolder.imgView.setVisibility(View.GONE);
      viewHolder.faviconView.setVisibility(View.VISIBLE);
      rotation=0;
      viewHolder.faviconView.setImageResource(getBtn_rating_star_off_normal_holo_light());
    }
 else     if (getChildrenCount(groupPosition) == 0) {
      viewHolder.imgView.setVisibility(View.GONE);
      viewHolder.faviconView.setVisibility(View.INVISIBLE);
    }
 else {
      viewHolder.imgView.setVisibility(View.VISIBLE);
      viewHolder.faviconView.setVisibility(View.INVISIBLE);
      viewHolder.imgView.setImageResource(getFolderIndicatorIcon());
      if (isExpanded) {
        rotation=90;
      }
 else {
        rotation=180;
      }
      viewHolder.imgView.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          if (isExpanded)           ((ExpandableListView)listView).collapseGroup(groupPosition);
 else           ((ExpandableListView)listView).expandGroup(groupPosition);
        }
      }
);
    }
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
      if (group.id_database != ALL_STARRED_ITEMS.getValue()) {
        if (rotation == 90) {
          viewHolder.imgView.setImageResource(getFolderIndicatorIcon());
        }
 else {
          viewHolder.imgView.setImageResource(getFolderIndicatorIconDown());
        }
      }
    }
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    viewHolder.imgView.setRotation(rotation);
  }
  return convertView;
}"
26146,"private Drawable getBtn_rating_star_off_normal_holo_light(Context context){
  if (btn_rating_star_off_normal_holo_light == null) {
    if (ThemeChooser.isDarkTheme(mContext)) {
      btn_rating_star_off_normal_holo_light=context.getResources().getDrawable(R.drawable.ic_action_star_border_dark);
    }
 else {
      btn_rating_star_off_normal_holo_light=context.getResources().getDrawable(R.drawable.ic_action_star_border_light);
    }
  }
  return btn_rating_star_off_normal_holo_light;
}","private int getBtn_rating_star_off_normal_holo_light(){
  if (btn_rating_star_off_normal_holo_light == null) {
    if (ThemeChooser.isDarkTheme(mContext)) {
      btn_rating_star_off_normal_holo_light=R.drawable.ic_action_star_border_dark;
    }
 else {
      btn_rating_star_off_normal_holo_light=R.drawable.ic_action_star_border_light;
    }
  }
  return btn_rating_star_off_normal_holo_light;
}"
26147,"@Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_feed);
  ButterKnife.inject(this);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  folders=dbConn.getListOfFolders();
  folders.add(0,new Folder(0,""String_Node_Str""));
  String[] folderNames=new String[folders.size()];
  for (int i=0; i < folders.size(); i++) {
    folderNames[i]=folders.get(i).getLabel();
  }
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,folderNames);
  mFolderView.setAdapter(spinnerArrayAdapter);
  mAddFeedButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mFeedUrlView.getWindowToken(),0);
      attemptAddNewFeed();
    }
  }
);
  Intent intent=getIntent();
  String action=intent.getAction();
  if (action != null) {
    String url=""String_Node_Str"";
    if (action.equals(Intent.ACTION_VIEW)) {
      url=intent.getDataString();
    }
 else     if (action.equals(Intent.ACTION_SEND)) {
      url=intent.getStringExtra(Intent.EXTRA_TEXT);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + action + ""String_Node_Str""+ url);
    mFeedUrlView.setText(url);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_feed);
  ButterKnife.inject(this);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  folders=dbConn.getListOfFolders();
  folders.add(0,new Folder(0,""String_Node_Str""));
  String[] folderNames=new String[folders.size()];
  for (int i=0; i < folders.size(); i++) {
    folderNames[i]=folders.get(i).getLabel();
  }
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<>(this,android.R.layout.simple_spinner_dropdown_item,folderNames);
  mFolderView.setAdapter(spinnerArrayAdapter);
  mAddFeedButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mFeedUrlView.getWindowToken(),0);
      attemptAddNewFeed();
    }
  }
);
  Intent intent=getIntent();
  String action=intent.getAction();
  if (action != null) {
    String url=""String_Node_Str"";
    if (action.equals(Intent.ACTION_VIEW)) {
      url=intent.getDataString();
    }
 else     if (action.equals(Intent.ACTION_SEND)) {
      url=intent.getStringExtra(Intent.EXTRA_TEXT);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + action + ""String_Node_Str""+ url);
    mFeedUrlView.setText(url);
  }
}"
26148,"@Override public boolean onOptionsItemSelected(MenuItem item){
  RssItem rssItem=rssItems.get(currentPosition);
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     ;
 else {
      super.onBackPressed();
    }
  break;
case R.id.action_read:
markItemAsReadUnread(rssItem,!menuItem_Read.isChecked());
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_starred:
Boolean curState=rssItem.getStarred_temp();
rssItem.setStarred_temp(!curState);
dbConn.updateRssItem(rssItem);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_openInBrowser:
NewsDetailFragment newsDetailFragment=getNewsDetailFragmentAtPosition(currentPosition);
String link=newsDetailFragment.mWebView.getUrl().toString();
if (link.equals(""String_Node_Str"")) link=rssItem.getLink();
if (link.length() > 0) {
if (mCustomTabsSupported) {
CustomTabActivityManager mCustomTabsManager=CustomTabActivityManager.getInstance();
mCustomTabsSession=getSession();
CustomTabUiBuilder uiBuilder=new CustomTabUiBuilder();
uiBuilder.setToolbarColor(getResources().getColor(R.color.colorPrimaryDarkTheme));
uiBuilder.setShowTitle(true);
uiBuilder.setCloseButtonStyle(CustomTabUiBuilder.CLOSE_BUTTON_ARROW);
uiBuilder.setStartAnimations(this,R.anim.slide_in_right,R.anim.slide_out_left);
uiBuilder.setExitAnimations(this,R.anim.slide_in_left,R.anim.slide_out_right);
mCustomTabsManager.launchUrl(this,mCustomTabsSession,link,uiBuilder);
}
 else {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
}
break;
case R.id.action_playPodcast:
openPodcast(rssItem);
break;
case R.id.action_tts:
TTSItem ttsItem=new TTSItem(rssItem.getId(),rssItem.getTitle(),rssItem.getTitle() + ""String_Node_Str"" + Html.fromHtml(rssItem.getBody()).toString(),rssItem.getFeed().getFaviconUrl());
openTTSItem(ttsItem);
break;
case R.id.action_ShareItem:
String title=rssItem.getTitle();
String content=rssItem.getLink();
NewsDetailFragment fragment=getNewsDetailFragmentAtPosition(currentPosition);
if (fragment != null) {
if (!fragment.mWebView.getUrl().equals(""String_Node_Str"") && !fragment.mWebView.getUrl().trim().equals(""String_Node_Str"")) {
content=fragment.mWebView.getUrl();
title=fragment.mWebView.getTitle();
}
}
content=title + ""String_Node_Str"" + content;
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,content);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  RssItem rssItem=rssItems.get(currentPosition);
switch (item.getItemId()) {
case android.R.id.home:
    if (handlePodcastBackPressed())     ;
 else {
      super.onBackPressed();
    }
  break;
case R.id.action_read:
markItemAsReadUnread(rssItem,!menuItem_Read.isChecked());
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_starred:
Boolean curState=rssItem.getStarred_temp();
rssItem.setStarred_temp(!curState);
dbConn.updateRssItem(rssItem);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
case R.id.action_openInBrowser:
NewsDetailFragment newsDetailFragment=getNewsDetailFragmentAtPosition(currentPosition);
String link=newsDetailFragment.mWebView.getUrl();
if (link.equals(""String_Node_Str"")) link=rssItem.getLink();
if (link.length() > 0) {
if (mCustomTabsSupported) {
CustomTabActivityManager mCustomTabsManager=CustomTabActivityManager.getInstance();
mCustomTabsSession=getSession();
CustomTabUiBuilder uiBuilder=new CustomTabUiBuilder();
uiBuilder.setToolbarColor(getResources().getColor(R.color.colorPrimaryDarkTheme));
uiBuilder.setShowTitle(true);
uiBuilder.setCloseButtonStyle(CustomTabUiBuilder.CLOSE_BUTTON_ARROW);
uiBuilder.setStartAnimations(this,R.anim.slide_in_right,R.anim.slide_out_left);
uiBuilder.setExitAnimations(this,R.anim.slide_in_left,R.anim.slide_out_right);
mCustomTabsManager.launchUrl(this,mCustomTabsSession,link,uiBuilder);
}
 else {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
}
break;
case R.id.action_playPodcast:
openPodcast(rssItem);
break;
case R.id.action_tts:
TTSItem ttsItem=new TTSItem(rssItem.getId(),rssItem.getTitle(),rssItem.getTitle() + ""String_Node_Str"" + Html.fromHtml(rssItem.getBody()).toString(),rssItem.getFeed().getFaviconUrl());
openTTSItem(ttsItem);
break;
case R.id.action_ShareItem:
String title=rssItem.getTitle();
String content=rssItem.getLink();
NewsDetailFragment fragment=getNewsDetailFragmentAtPosition(currentPosition);
if (fragment != null) {
if (!fragment.mWebView.getUrl().equals(""String_Node_Str"") && !fragment.mWebView.getUrl().trim().equals(""String_Node_Str"")) {
content=fragment.mWebView.getUrl();
title=fragment.mWebView.getTitle();
}
}
content=title + ""String_Node_Str"" + content;
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,content);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
}
return super.onOptionsItemSelected(item);
}"
26149,"private boolean bindCustomTabsService(){
  if (mCustomTabsClient != null)   return true;
  String packageName=CustomTabActivityManager.getInstance().getPackageNameToUse(this);
  if (packageName == null)   return false;
  boolean ok=CustomTabsClient.bindCustomTabsService(this,packageName,new CustomTabsServiceConnection(){
    @Override public void onCustomTabsServiceConnected(    ComponentName name,    CustomTabsClient client){
      mCustomTabsClient=client;
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      mCustomTabsClient=null;
    }
  }
);
  return ok;
}","private boolean bindCustomTabsService(){
  if (mCustomTabsClient != null)   return true;
  String packageName=CustomTabActivityManager.getInstance().getPackageNameToUse(this);
  if (packageName == null)   return false;
  return CustomTabsClient.bindCustomTabsService(this,packageName,new CustomTabsServiceConnection(){
    @Override public void onCustomTabsServiceConnected(    ComponentName name,    CustomTabsClient client){
      mCustomTabsClient=client;
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      mCustomTabsClient=null;
    }
  }
);
}"
26150,"@Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_news_detail);
  ButterKnife.inject(this);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
  }
  pDelayHandler=new PostDelayHandler(this);
  _Reader=new OwnCloud_Reader();
  dbConn=new DatabaseConnectionOrm(this);
  Intent intent=getIntent();
  int item_id=0;
  if (intent.hasExtra(NewsReaderListActivity.ITEM_ID))   item_id=intent.getExtras().getInt(NewsReaderListActivity.ITEM_ID);
  if (intent.hasExtra(NewsReaderListActivity.TITEL))   getSupportActionBar().setTitle(intent.getExtras().getString(NewsReaderListActivity.TITEL));
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  rssItems=dbConn.getCurrentRssItemView(getSortDirectionFromSettings(this));
  if (intent.hasExtra(WidgetProvider.RSS_ITEM_ID)) {
    long rss_item_id=intent.getExtras().getLong(WidgetProvider.RSS_ITEM_ID);
    for (    RssItem rssItem : rssItems) {
      if (rss_item_id == rssItem.getId()) {
        getSupportActionBar().setTitle(rssItem.getTitle());
        break;
      }
 else       item_id++;
    }
  }
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  try {
    mViewPager.setCurrentItem(item_id,true);
    PageChanged(item_id);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  mViewPager.addOnPageChangeListener(onPageChangeListener);
  mCustomTabsSupported=bindCustomTabsService();
}","@Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_news_detail);
  ButterKnife.inject(this);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
  }
  pDelayHandler=new PostDelayHandler(this);
  dbConn=new DatabaseConnectionOrm(this);
  Intent intent=getIntent();
  int item_id=0;
  if (intent.hasExtra(NewsReaderListActivity.ITEM_ID))   item_id=intent.getExtras().getInt(NewsReaderListActivity.ITEM_ID);
  if (intent.hasExtra(NewsReaderListActivity.TITEL))   getSupportActionBar().setTitle(intent.getExtras().getString(NewsReaderListActivity.TITEL));
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  rssItems=dbConn.getCurrentRssItemView(getSortDirectionFromSettings(this));
  if (intent.hasExtra(WidgetProvider.RSS_ITEM_ID)) {
    long rss_item_id=intent.getExtras().getLong(WidgetProvider.RSS_ITEM_ID);
    for (    RssItem rssItem : rssItems) {
      if (rss_item_id == rssItem.getId()) {
        getSupportActionBar().setTitle(rssItem.getTitle());
        break;
      }
 else       item_id++;
    }
  }
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  try {
    mViewPager.setCurrentItem(item_id,true);
    PageChanged(item_id);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  mViewPager.addOnPageChangeListener(onPageChangeListener);
  mCustomTabsSupported=bindCustomTabsService();
}"
26151,"public static void SetSoftwareRenderModeForWebView(String htmlPage,WebView webView){
  if (htmlPage.contains(""String_Node_Str"")) {
    webView.setLayerType(WebView.LAYER_TYPE_SOFTWARE,null);
    Log.v(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (webView.getLayerType() == WebView.LAYER_TYPE_HARDWARE) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (webView.getLayerType() == WebView.LAYER_TYPE_SOFTWARE) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void SetSoftwareRenderModeForWebView(String htmlPage,WebView webView){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
    return;
  }
  if (htmlPage.contains(""String_Node_Str"")) {
    webView.setLayerType(WebView.LAYER_TYPE_SOFTWARE,null);
    Log.v(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (webView.getLayerType() == WebView.LAYER_TYPE_HARDWARE) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (webView.getLayerType() == WebView.LAYER_TYPE_SOFTWARE) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
  }
}"
26152,"public void setRefreshing(boolean isRefreshing){
  if (isRefreshing) {
    headerLogo.setImageDrawable(getResources().getDrawable(R.drawable.ic_launcher_background));
    headerLogoProgress.setVisibility(View.VISIBLE);
  }
 else {
    headerLogo.setImageDrawable(getResources().getDrawable(R.drawable.ic_launcher));
    headerLogoProgress.setVisibility(View.INVISIBLE);
  }
}","public void setRefreshing(boolean isRefreshing){
  if (isRefreshing) {
    headerLogo.setImageResource(R.drawable.ic_launcher_background);
    headerLogoProgress.setVisibility(View.VISIBLE);
  }
 else {
    headerLogo.setImageResource(R.drawable.ic_launcher);
    headerLogoProgress.setVisibility(View.INVISIBLE);
  }
}"
26153,"/** 
 * Use this factory method to create a new instance of this fragment using the provided parameters.
 * @return A new instance of fragment PodcastFragment.
 */
public static PodcastFragment newInstance(){
  PodcastFragment fragment=new PodcastFragment();
  return fragment;
}","/** 
 * Use this factory method to create a new instance of this fragment using the provided parameters.
 * @return A new instance of fragment PodcastFragment.
 */
public static PodcastFragment newInstance(){
  return new PodcastFragment();
}"
26154,"public void animateToPosition(final int yPosition){
  appHeight=getWindow().getDecorView().findViewById(android.R.id.content).getHeight();
  appWidth=getWindow().getDecorView().findViewById(android.R.id.content).getWidth();
  final View view=rlVideoPodcastSurfaceWrapper;
  if (scaleFactor != 1) {
    int oldHeight=view.getLayoutParams().height;
    int oldWidth=view.getLayoutParams().width;
    int newHeight=view.getLayoutParams().height*=scaleFactor;
    int newWidth=view.getLayoutParams().width*=scaleFactor;
    scaleFactor=1;
    Animation animator=new SizeAnimator(view,newWidth,newHeight,oldWidth,oldHeight,animationTime).sizeAnimator;
    animator.setAnimationListener(new Animation.AnimationListener(){
      @Override public void onAnimationStart(      Animation animation){
      }
      @Override public void onAnimationEnd(      Animation animation){
        animateToPosition(yPosition);
      }
      @Override public void onAnimationRepeat(      Animation animation){
      }
    }
);
    view.startAnimation(animator);
  }
 else {
    int absoluteYPosition=appHeight - view.getHeight() - (int)getResources().getDimension(R.dimen.activity_vertical_margin)- (int)dipToPx(yPosition);
    float xPosition=rlVideoPodcastSurfaceWrapper.getVideoXPosition();
    view.animate().x(xPosition).y(absoluteYPosition).setDuration(animationTime);
  }
  oldScaleFactor=1;
}","public void animateToPosition(final int yPosition){
  appHeight=getWindow().getDecorView().findViewById(android.R.id.content).getHeight();
  appWidth=getWindow().getDecorView().findViewById(android.R.id.content).getWidth();
  final View view=rlVideoPodcastSurfaceWrapper;
  if (scaleFactor != 1) {
    int oldHeight=view.getLayoutParams().height;
    int oldWidth=view.getLayoutParams().width;
    int newHeight=view.getLayoutParams().height*=scaleFactor;
    int newWidth=view.getLayoutParams().width*=scaleFactor;
    scaleFactor=1;
    Animation animator=new SizeAnimator(view,newWidth,newHeight,oldWidth,oldHeight,animationTime).sizeAnimator;
    animator.setAnimationListener(new Animation.AnimationListener(){
      @Override public void onAnimationStart(      Animation animation){
      }
      @Override public void onAnimationEnd(      Animation animation){
        animateToPosition(yPosition);
      }
      @Override public void onAnimationRepeat(      Animation animation){
      }
    }
);
    view.startAnimation(animator);
  }
 else {
    int absoluteYPosition=appHeight - view.getHeight() - (int)getResources().getDimension(R.dimen.activity_vertical_margin)- (int)dipToPx(yPosition);
    float xPosition=rlVideoPodcastSurfaceWrapper.getVideoXPosition();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      view.animate().x(xPosition).y(absoluteYPosition).setDuration(animationTime);
    }
  }
  oldScaleFactor=1;
}"
26155,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_sync_interval_selector,container,false);
  String[] items=getResources().getStringArray(R.array.array_sync_interval);
  lvItems=(ListView)rootView.findViewById(R.id.lv_sync_interval_items);
  lvItems.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,items);
  lvItems.setAdapter(adapter);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (!mPrefs.contains(SYNC_INTERVAL_IN_MINUTES_STRING))   lvItems.setItemChecked(items.length - 1,true);
 else {
    int position=0;
    int minutes=mPrefs.getInt(SYNC_INTERVAL_IN_MINUTES_STRING,0);
    for (    String item : ((SyncIntervalSelectorActivity)getActivity()).items_values) {
      if (Integer.parseInt(item) == minutes)       break;
      position++;
    }
    lvItems.setItemChecked(position,true);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_sync_interval_selector,container,false);
  String[] items=getResources().getStringArray(R.array.array_sync_interval);
  lvItems=(ListView)rootView.findViewById(R.id.lv_sync_interval_items);
  lvItems.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  ArrayAdapter<String> adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,items);
  lvItems.setAdapter(adapter);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (!mPrefs.contains(SYNC_INTERVAL_IN_MINUTES_STRING))   lvItems.setItemChecked(items.length - 1,true);
 else {
    int position=0;
    int minutes=mPrefs.getInt(SYNC_INTERVAL_IN_MINUTES_STRING,0);
    for (    String item : ((SyncIntervalSelectorActivity)getActivity()).items_values) {
      if (Integer.parseInt(item) == minutes)       break;
      position++;
    }
    lvItems.setItemChecked(position,true);
  }
  return rootView;
}"
26156,"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (dy == 0 || recyclerView.getChildCount() <= 0)   return;
  LinearLayoutManager linearLayoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
  int firstVisibleItem=linearLayoutManager.findFirstVisibleItemPosition();
  int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
  for (int i=firstVisibleItem; i <= lastVisibleItem; i++) {
    ViewHolder vh=(ViewHolder)recyclerView.findViewHolderForLayoutPosition(i);
    if (vh != null && !vh.shouldStayUnread()) {
      vh.setReadState(true);
    }
  }
}","@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (dy == 0 || recyclerView.getChildCount() <= 0)   return;
  LinearLayoutManager linearLayoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
  int firstVisibleItem=linearLayoutManager.findFirstVisibleItemPosition();
  int lastVisibleItem=linearLayoutManager.findLastVisibleItemPosition();
  int visibleItemCount=lastVisibleItem - firstVisibleItem;
  int totalItemCount=recyclerView.getAdapter().getItemCount();
  NewsListRecyclerAdapter adapter=(NewsListRecyclerAdapter)recyclerView.getAdapter();
  ViewHolder vh=(ViewHolder)recyclerView.findViewHolderForLayoutPosition(firstVisibleItem);
  if (vh != null && !vh.shouldStayUnread()) {
    adapter.ChangeReadStateOfItem(vh,true);
  }
  if (lastVisibleItem == (totalItemCount - 1) && recyclerView.getChildAt(visibleItemCount).getBottom() <= recyclerView.getHeight()) {
    for (int i=firstVisibleItem + 1; i <= lastVisibleItem; i++) {
      vh=(ViewHolder)recyclerView.findViewHolderForLayoutPosition(i);
      if (vh != null && !vh.shouldStayUnread()) {
        adapter.ChangeReadStateOfItem(vh,true);
      }
    }
  }
}"
26157,"@Override public void onResume(){
  Log.v(TAG,""String_Node_Str"");
  EventBus.getDefault().register(this);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getBoolean(SettingsActivity.CB_MARK_AS_READ_WHILE_SCROLLING_STRING,false)) {
    recyclerView.addOnScrollListener(ListScrollListener);
  }
  if (onResumeCount >= 2) {
    UpdateCurrentRssView(getActivity(),false);
  }
  onResumeCount++;
  super.onResume();
}","@Override public void onResume(){
  Log.v(TAG,""String_Node_Str"");
  EventBus.getDefault().register(this);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getBoolean(SettingsActivity.CB_MARK_AS_READ_WHILE_SCROLLING_STRING,false)) {
    recyclerView.addOnScrollListener(ListScrollListener);
  }
 else {
    recyclerView.removeOnScrollListener(ListScrollListener);
  }
  if (onResumeCount >= 2) {
    UpdateCurrentRssView(getActivity(),false);
  }
  onResumeCount++;
  super.onResume();
}"
26158,"public void ChangeReadStateOfItem(ViewHolder viewHolder,boolean isChecked){
  RssItem rssItem=viewHolder.getRssItem();
  rssItem.setRead_temp(isChecked);
  dbConn.updateRssItem(rssItem);
  pDelayHandler.DelayTimer();
  viewHolder.setReadState(isChecked);
  stayUnreadItems.add(rssItem.getId());
}","public void ChangeReadStateOfItem(ViewHolder viewHolder,boolean isChecked){
  RssItem rssItem=viewHolder.getRssItem();
  if (rssItem.getRead_temp() != isChecked) {
    rssItem.setRead_temp(isChecked);
    dbConn.updateRssItem(rssItem);
    pDelayHandler.DelayTimer();
    viewHolder.setReadState(isChecked);
    stayUnreadItems.add(rssItem.getId());
  }
}"
26159,"public void onScroll(final AbsListView view,final int firstVisibleItem,final int visibleItemCount,int totalItemCount){
  if (lastViewedArticleCheckbox == null)   lastViewedArticleCheckbox=getCheckBoxAtPosition(0,view);
  CheckBox cb=getCheckBoxAtPosition(0,view);
  if (lastViewedArticleCheckbox != cb) {
    if (!(lastViewedArticleCheckbox.isChecked() && stayUnreadCheckboxes.contains(lastViewedArticleCheckbox)))     ;
    NewsListCursorAdapter.ChangeCheckBoxState(lastViewedArticleCheckbox,true,getActivity());
    lastViewedArticleCheckbox=cb;
  }
}","@Override public void onScroll(final AbsListView view,final int firstVisibleItem,final int visibleItemCount,int totalItemCount){
  if (lastViewedArticleCheckbox == null)   lastViewedArticleCheckbox=getCheckBoxAtPosition(0,view);
  CheckBox cb=getCheckBoxAtPosition(0,view);
  if (lastViewedArticleCheckbox != cb) {
    if (!(lastViewedArticleCheckbox.isChecked() && stayUnreadCheckboxes.contains(lastViewedArticleCheckbox)))     ;
    NewsListCursorAdapter.ChangeCheckBoxState(lastViewedArticleCheckbox,true,getActivity());
    lastViewedArticleCheckbox=cb;
  }
}"
26160,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    if (getArguments().containsKey(NewsReaderListActivity.FEED_ID)) {
      idFeed=getArguments().getLong(NewsReaderListActivity.FEED_ID);
    }
    if (getArguments().containsKey(NewsReaderListActivity.TITEL)) {
      titel=getArguments().getString(NewsReaderListActivity.TITEL);
    }
    if (getArguments().containsKey(NewsReaderListActivity.FOLDER_ID)) {
      idFolder=getArguments().getLong(NewsReaderListActivity.FOLDER_ID);
    }
    UpdateMenuItemsState();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    if (getArguments().containsKey(NewsReaderListActivity.FEED_ID)) {
      idFeed=getArguments().getLong(NewsReaderListActivity.FEED_ID);
    }
    if (getArguments().containsKey(NewsReaderListActivity.TITEL)) {
      titel=getArguments().getString(NewsReaderListActivity.TITEL);
    }
    if (getArguments().containsKey(NewsReaderListActivity.FOLDER_ID)) {
      idFolder=getArguments().getLong(NewsReaderListActivity.FOLDER_ID);
    }
  }
}"
26161,"/** 
 * Updates the current RSS-View
 * @param context
 */
public void UpdateCurrentRssView(Context context,boolean refreshCurrentRssView){
  new UpdateCurrentRssViewTask(context,refreshCurrentRssView).execute((Void)null);
}","/** 
 * Updates the current RSS-View
 * @param context
 */
public void UpdateCurrentRssView(Context context,boolean refreshCurrentRssView){
  Log.v(TAG,""String_Node_Str"");
  AsyncTaskHelper.StartAsyncTask(new UpdateCurrentRssViewTask(context,refreshCurrentRssView),(Void)null);
}"
26162,"@Override public void onResume(){
  EventBus.getDefault().register(this);
  notifyDataSetChangedOnAdapter();
  super.onResume();
}","@Override public void onResume(){
  EventBus.getDefault().register(this);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getBoolean(SettingsActivity.CB_MARK_AS_READ_WHILE_SCROLLING_STRING,false)) {
    getListView().setOnScrollListener(ListScrollListener);
  }
  if (reloadCursorOnStartUp)   UpdateCurrentRssView(getActivity(),true);
 else   UpdateCurrentRssView(getActivity(),false);
  super.onResume();
}"
26163,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ((ActionBarActivity)getActivity()).getSupportActionBar().setTitle(titel);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getBoolean(SettingsActivity.CB_MARK_AS_READ_WHILE_SCROLLING_STRING,false)) {
    getListView().setOnScrollListener(new AbsListView.OnScrollListener(){
      public void onScrollStateChanged(      AbsListView view,      int scrollState){
      }
      CheckBox lastViewedArticleCheckbox=null;
      public void onScroll(      final AbsListView view,      final int firstVisibleItem,      final int visibleItemCount,      int totalItemCount){
        if (lastViewedArticleCheckbox == null)         lastViewedArticleCheckbox=getCheckBoxAtPosition(0,view);
        CheckBox cb=getCheckBoxAtPosition(0,view);
        if (lastViewedArticleCheckbox != cb) {
          if (!(lastViewedArticleCheckbox.isChecked() && stayUnreadCheckboxes.contains(lastViewedArticleCheckbox)))           ;
          NewsListCursorAdapter.ChangeCheckBoxState(lastViewedArticleCheckbox,true,getActivity());
          lastViewedArticleCheckbox=cb;
        }
      }
    }
);
  }
  if (reloadCursorOnStartUp)   UpdateCurrentRssView(getActivity(),true);
 else   UpdateCurrentRssView(getActivity(),false);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ((ActionBarActivity)getActivity()).getSupportActionBar().setTitle(titel);
}"
26164,"public void onScrollStateChanged(AbsListView view,int scrollState){
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
}"
26165,"@Override protected Void doInBackground(Void... voids){
  ReloadAdapter();
  return null;
}","@Override protected Tuple<ArrayList<AbstractItem>,SparseArray<SparseArray<ConcreteFeedItem>>> doInBackground(Void... voids){
  return ReloadAdapter();
}"
26166,"@Override protected void onPostExecute(Void aVoid){
  notifyReloadAdapterDataChanged();
  progressBar.setVisibility(View.GONE);
  super.onPostExecute(aVoid);
}","@Override protected void onPostExecute(Tuple<ArrayList<AbstractItem>,SparseArray<SparseArray<ConcreteFeedItem>>> arrayListSparseArrayTuple){
  mCategoriesArrayList=arrayListSparseArrayTuple.key;
  mItemsArrayList=arrayListSparseArrayTuple.value;
  notifyDataSetChanged();
  NotifyDataSetChangedAsync();
  progressBar.setVisibility(View.GONE);
  super.onPostExecute(arrayListSparseArrayTuple);
}"
26167,"public void ReloadAdapter(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);
  showOnlyUnread=mPrefs.getBoolean(SettingsActivity.CB_SHOWONLYUNREAD_STRING,false);
  mCategoriesArrayListAsync=new ArrayList<>();
  mCategoriesArrayListAsync.add(new FolderSubscribtionItem(mContext.getString(R.string.allUnreadFeeds),null,ALL_UNREAD_ITEMS.getValue()));
  mCategoriesArrayListAsync.add(new FolderSubscribtionItem(mContext.getString(R.string.starredFeeds),null,ALL_STARRED_ITEMS.getValue()));
  List<Folder> folderList;
  if (showOnlyUnread)   folderList=dbConn.getListOfFoldersWithUnreadItems();
 else   folderList=dbConn.getListOfFolders();
  for (  Folder folder : folderList) {
    mCategoriesArrayListAsync.add(new FolderSubscribtionItem(folder.getLabel(),null,folder.getId()));
  }
  for (  Feed feed : dbConn.getListOfFeedsWithoutFolders(showOnlyUnread)) {
    mCategoriesArrayListAsync.add(new ConcreteFeedItem(feed.getFeedTitle(),(long)ITEMS_WITHOUT_FOLDER.getValue(),feed.getId(),feed.getFaviconUrl(),feed.getId()));
  }
  mItemsArrayListAsync=new SparseArray<>();
  for (int groupPosition=0; groupPosition < mCategoriesArrayListAsync.size(); groupPosition++) {
    int parent_id=(int)mCategoriesArrayListAsync.get(groupPosition).id_database;
    mItemsArrayListAsync.append(parent_id,new SparseArray<ConcreteFeedItem>());
    int childPosTemp=0;
    List<Feed> feedItemList=null;
    if (parent_id == ALL_UNREAD_ITEMS.getValue()) {
      feedItemList=dbConn.getAllFeedsWithUnreadRssItems();
    }
 else     if (parent_id == ALL_STARRED_ITEMS.getValue()) {
      feedItemList=dbConn.getAllFeedsWithStarredRssItems();
    }
 else {
      for (      Folder folder : folderList) {
        if (folder.getId() == parent_id) {
          feedItemList=dbConn.getAllFeedsWithUnreadRssItemsForFolder(folder.getId(),showOnlyUnread);
          break;
        }
      }
    }
    if (feedItemList != null) {
      for (      Feed feed : feedItemList) {
        ConcreteFeedItem newItem=new ConcreteFeedItem(feed.getFeedTitle(),(long)parent_id,feed.getId(),feed.getFaviconUrl(),feed.getId());
        mItemsArrayListAsync.get(parent_id).put(childPosTemp,newItem);
        childPosTemp++;
      }
    }
  }
}","public Tuple<ArrayList<AbstractItem>,SparseArray<SparseArray<ConcreteFeedItem>>> ReloadAdapter(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);
  showOnlyUnread=mPrefs.getBoolean(SettingsActivity.CB_SHOWONLYUNREAD_STRING,false);
  ArrayList<AbstractItem> mCategoriesArrayListAsync=new ArrayList<>();
  mCategoriesArrayListAsync.add(new FolderSubscribtionItem(mContext.getString(R.string.allUnreadFeeds),null,ALL_UNREAD_ITEMS.getValue()));
  mCategoriesArrayListAsync.add(new FolderSubscribtionItem(mContext.getString(R.string.starredFeeds),null,ALL_STARRED_ITEMS.getValue()));
  List<Folder> folderList;
  if (showOnlyUnread) {
    folderList=dbConn.getListOfFoldersWithUnreadItems();
  }
 else {
    folderList=dbConn.getListOfFolders();
  }
  for (  Folder folder : folderList) {
    mCategoriesArrayListAsync.add(new FolderSubscribtionItem(folder.getLabel(),null,folder.getId()));
  }
  for (  Feed feed : dbConn.getListOfFeedsWithoutFolders(showOnlyUnread)) {
    mCategoriesArrayListAsync.add(new ConcreteFeedItem(feed.getFeedTitle(),(long)ITEMS_WITHOUT_FOLDER.getValue(),feed.getId(),feed.getFaviconUrl(),feed.getId()));
  }
  SparseArray<SparseArray<ConcreteFeedItem>> mItemsArrayListAsync=new SparseArray<>();
  for (int groupPosition=0; groupPosition < mCategoriesArrayListAsync.size(); groupPosition++) {
    int parent_id=(int)mCategoriesArrayListAsync.get(groupPosition).id_database;
    mItemsArrayListAsync.append(parent_id,new SparseArray<ConcreteFeedItem>());
    int childPosTemp=0;
    List<Feed> feedItemList=null;
    if (parent_id == ALL_UNREAD_ITEMS.getValue()) {
      feedItemList=dbConn.getAllFeedsWithUnreadRssItems();
    }
 else     if (parent_id == ALL_STARRED_ITEMS.getValue()) {
      feedItemList=dbConn.getAllFeedsWithStarredRssItems();
    }
 else {
      for (      Folder folder : folderList) {
        if (folder.getId() == parent_id) {
          feedItemList=dbConn.getAllFeedsWithUnreadRssItemsForFolder(folder.getId(),showOnlyUnread);
          break;
        }
      }
    }
    if (feedItemList != null) {
      for (      Feed feed : feedItemList) {
        ConcreteFeedItem newItem=new ConcreteFeedItem(feed.getFeedTitle(),(long)parent_id,feed.getId(),feed.getFaviconUrl(),feed.getId());
        mItemsArrayListAsync.get(parent_id).put(childPosTemp,newItem);
        childPosTemp++;
      }
    }
  }
  return new Tuple<>(mCategoriesArrayListAsync,mItemsArrayListAsync);
}"
26168,"@Override public void finishedSync(String sync_type) throws RemoteException {
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      UpdateSyncButtonLayout();
    }
  }
);
  SYNC_TYPES st=SYNC_TYPES.valueOf(sync_type);
switch (st) {
case SYNC_TYPE__GET_API:
    break;
case SYNC_TYPE__ITEM_STATES:
  break;
case SYNC_TYPE__FOLDER:
break;
case SYNC_TYPE__FEEDS:
break;
case SYNC_TYPE__ITEMS:
Log.d(TAG,""String_Node_Str"");
refresh=new Handler(Looper.getMainLooper());
refresh.post(new Runnable(){
public void run(){
ReloadAdapter();
NewsReaderListActivity nlActivity=(NewsReaderListActivity)getActivity();
if (nlActivity != null) {
nlActivity.UpdateItemList();
nlActivity.UpdatePodcastView();
}
SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
int newItemsCount=mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,0);
if (newItemsCount > 0) {
MessageBar messageBar=new MessageBar(getActivity(),true);
TextMessage textMessage=new TextMessage(newItemsCount + ""String_Node_Str"" + getString(R.string.message_bar_new_articles_available),getString(R.string.message_bar_reload),R.drawable.ic_menu_refresh);
textMessage.setClickListener(mListener);
messageBar.show(textMessage);
}
}
}
);
break;
}
}","@Override public void finishedSync(String sync_type) throws RemoteException {
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
    }
  }
);
  SYNC_TYPES st=SYNC_TYPES.valueOf(sync_type);
switch (st) {
case SYNC_TYPE__GET_API:
    break;
case SYNC_TYPE__ITEM_STATES:
  break;
case SYNC_TYPE__FOLDER:
break;
case SYNC_TYPE__FEEDS:
break;
case SYNC_TYPE__ITEMS:
Log.d(TAG,""String_Node_Str"");
refresh=new Handler(Looper.getMainLooper());
refresh.post(new Runnable(){
public void run(){
ReloadAdapter();
NewsReaderListActivity nlActivity=(NewsReaderListActivity)getActivity();
if (nlActivity != null) {
nlActivity.UpdateItemList();
nlActivity.UpdatePodcastView();
}
SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
int newItemsCount=mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,0);
if (newItemsCount > 0) {
MessageBar messageBar=new MessageBar(getActivity(),true);
TextMessage textMessage=new TextMessage(newItemsCount + ""String_Node_Str"" + getString(R.string.message_bar_new_articles_available),getString(R.string.message_bar_reload),R.drawable.ic_menu_refresh);
textMessage.setClickListener(mListener);
messageBar.show(textMessage);
}
}
}
);
break;
}
}"
26169,"@Override public void onStart(){
  Intent serviceIntent=new Intent(getActivity(),OwnCloudSyncService.class);
  mConnection=generateServiceConnection();
  getActivity().bindService(serviceIntent,mConnection,Context.BIND_AUTO_CREATE);
  super.onStart();
}","@Override public void onStart(){
  Intent serviceIntent=new Intent(getActivity(),OwnCloudSyncService.class);
  mConnection=generateServiceConnection();
  if (!isMyServiceRunning(OwnCloudSyncService.class)) {
    getActivity().startService(serviceIntent);
  }
  getActivity().bindService(serviceIntent,mConnection,Context.BIND_AUTO_CREATE);
  super.onStart();
}"
26170,"private ServiceConnection generateServiceConnection(){
  return new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder binder){
      _ownCloudSyncService=IOwnCloudSyncService.Stub.asInterface(binder);
      try {
        _ownCloudSyncService.registerCallback(callback);
        SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
        if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))         StartSync();
        if (getActivity() instanceof NewsReaderListActivity)         ((NewsReaderListActivity)getActivity()).UpdateButtonSyncLayout();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        _ownCloudSyncService.unregisterCallback(callback);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
}","private ServiceConnection generateServiceConnection(){
  return new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder binder){
      _ownCloudSyncService=IOwnCloudSyncService.Stub.asInterface(binder);
      try {
        _ownCloudSyncService.registerCallback(callback);
        SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
        if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))         StartSync();
        if (getActivity() instanceof NewsReaderListActivity)         ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        _ownCloudSyncService.unregisterCallback(callback);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
}"
26171,"private void HandleExceptionMessages(Exception ex){
  if (ex instanceof HttpHostConnectException)   ShowToastLong(""String_Node_Str"");
 else   if (ex instanceof HttpResponseException) {
    HttpResponseException responseException=(HttpResponseException)ex;
    ShowToastLong(responseException.getLocalizedMessage());
  }
 else   ShowToastLong(ex.getLocalizedMessage());
  UpdateSyncButtonLayout();
}","private void HandleExceptionMessages(Exception ex){
  if (ex instanceof HttpHostConnectException)   ShowToastLong(""String_Node_Str"");
 else   if (ex instanceof HttpResponseException) {
    HttpResponseException responseException=(HttpResponseException)ex;
    ShowToastLong(responseException.getLocalizedMessage());
  }
 else   ShowToastLong(ex.getLocalizedMessage());
  ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
}"
26172,"@Override public void onServiceConnected(ComponentName name,IBinder binder){
  _ownCloudSyncService=IOwnCloudSyncService.Stub.asInterface(binder);
  try {
    _ownCloudSyncService.registerCallback(callback);
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))     StartSync();
    if (getActivity() instanceof NewsReaderListActivity)     ((NewsReaderListActivity)getActivity()).UpdateButtonSyncLayout();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder binder){
  _ownCloudSyncService=IOwnCloudSyncService.Stub.asInterface(binder);
  try {
    _ownCloudSyncService.registerCallback(callback);
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))     StartSync();
    if (getActivity() instanceof NewsReaderListActivity)     ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
26173,"@Override public void startedSync(String sync_type) throws RemoteException {
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      UpdateSyncButtonLayout();
    }
  }
);
}","@Override public void startedSync(String sync_type) throws RemoteException {
  Handler refresh=new Handler(Looper.getMainLooper());
  refresh.post(new Runnable(){
    public void run(){
      ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
      ;
    }
  }
);
}"
26174,"public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   NewsReaderListActivity.StartLoginFragment((FragmentActivity)getActivity());
 else {
    try {
      if (!_ownCloudSyncService.isSyncRunning()) {
        new PostDelayHandler(getActivity()).stopRunningPostDelayHandler();
        Bundle accBundle=new Bundle();
        accBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        AccountManager mAccountManager=AccountManager.get(getActivity());
        Account[] accounts=mAccountManager.getAccounts();
        for (        Account acc : accounts)         if (acc.type.equals(AccountGeneral.ACCOUNT_TYPE))         ContentResolver.requestSync(acc,AccountGeneral.ACCOUNT_TYPE,accBundle);
      }
 else {
        UpdateSyncButtonLayout();
      }
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
}","public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   NewsReaderListActivity.StartLoginFragment((FragmentActivity)getActivity());
 else {
    try {
      if (!_ownCloudSyncService.isSyncRunning()) {
        new PostDelayHandler(getActivity()).stopRunningPostDelayHandler();
        Bundle accBundle=new Bundle();
        accBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
        AccountManager mAccountManager=AccountManager.get(getActivity());
        Account[] accounts=mAccountManager.getAccounts();
        for (        Account acc : accounts)         if (acc.type.equals(AccountGeneral.ACCOUNT_TYPE))         ContentResolver.requestSync(acc,AccountGeneral.ACCOUNT_TYPE,accBundle);
      }
 else {
        ((NewsReaderListActivity)getActivity()).UpdateButtonLayout();
      }
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
}"
26175,"private void finishedSync(SYNC_TYPES sync_type){
  List<IOwnCloudSyncServiceCallback> callbackList=getCallBackItemsAndBeginBroadcast();
  for (  IOwnCloudSyncServiceCallback icb : callbackList) {
    try {
      icb.finishedSync(sync_type.toString());
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
  callbacks.finishBroadcast();
}","private void finishedSync(SYNC_TYPES sync_type){
  Log.v(TAG,""String_Node_Str"" + sync_type.toString());
  List<IOwnCloudSyncServiceCallback> callbackList=getCallBackItemsAndBeginBroadcast();
  for (  IOwnCloudSyncServiceCallback icb : callbackList) {
    try {
      icb.finishedSync(sync_type.toString());
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
  callbacks.finishBroadcast();
}"
26176,"private static void init_webTemplate(Context context){
  if (web_template == null) {
    try {
      web_template=getTextFromAssets(""String_Node_Str"",context);
      String background_color_string=SearchString(web_template,""String_Node_Str"",""String_Node_Str"");
      if (background_color_string != null) {
        if (background_color_string.matches(""String_Node_Str""))         background_color=Color.parseColor(convertHexColorFrom3To6Characters(background_color_string));
 else         if (background_color_string.matches(""String_Node_Str""))         background_color=Color.parseColor(background_color_string);
      }
      if (ThemeChooser.isDarkTheme(context))       web_template=web_template.replace(""String_Node_Str"",""String_Node_Str"");
      FontHelper fHelper=new FontHelper(context);
      web_template=web_template.replace(""String_Node_Str"",fHelper.getFontName());
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private static synchronized void init_webTemplate(Context context){
  if (web_template == null) {
    try {
      web_template=getTextFromAssets(""String_Node_Str"",context);
      String background_color_string=SearchString(web_template,""String_Node_Str"",""String_Node_Str"");
      if (background_color_string != null) {
        if (background_color_string.matches(""String_Node_Str""))         background_color=Color.parseColor(convertHexColorFrom3To6Characters(background_color_string));
 else         if (background_color_string.matches(""String_Node_Str""))         background_color=Color.parseColor(background_color_string);
      }
      if (ThemeChooser.isDarkTheme(context))       web_template=web_template.replace(""String_Node_Str"",""String_Node_Str"");
      FontHelper fHelper=new FontHelper(context);
      web_template=web_template.replace(""String_Node_Str"",fHelper.getFontName());
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}"
26177,"public static void InsertFeedsIntoDatabase(ArrayList<Feed> newFeeds,DatabaseConnectionOrm dbConn){
  List<Feed> oldFeeds=dbConn.getListOfFeeds();
  try {
    if (newFeeds != null) {
      for (      Feed feed : newFeeds)       dbConn.insertNewFeed(feed);
      for (      Feed feed : oldFeeds) {
        boolean found=false;
        for (int i=0; i < oldFeeds.size(); i++) {
          if (oldFeeds.get(i).getFeedTitle().equals(feed.getFeedTitle())) {
            found=true;
            break;
          }
        }
        if (!found) {
          dbConn.removeFeedById(feed.getId());
          Log.d(TAG,""String_Node_Str"" + feed.getFeedTitle());
        }
      }
    }
  }
  finally {
  }
}","public static void InsertFeedsIntoDatabase(ArrayList<Feed> newFeeds,DatabaseConnectionOrm dbConn){
  List<Feed> oldFeeds=dbConn.getListOfFeeds();
  try {
    if (newFeeds != null) {
      for (      Feed feed : newFeeds)       dbConn.insertNewFeed(feed);
      for (      Feed feed : oldFeeds) {
        boolean found=false;
        for (int i=0; i < oldFeeds.size(); i++) {
          if (oldFeeds.get(i).getFeedTitle().equals(feed.getFeedTitle())) {
            feed.setAvgColour(oldFeeds.get(i).getAvgColour());
            dbConn.updateFeed(feed);
            found=true;
            break;
          }
        }
        if (!found) {
          dbConn.removeFeedById(feed.getId());
          Log.d(TAG,""String_Node_Str"" + feed.getFeedTitle());
        }
      }
    }
  }
  finally {
  }
}"
26178,"@Override public void bindView(final View view,final Context context,final RssItem item){
switch (selectedDesign) {
case 0:
    setSimpleLayout(view,item);
  break;
case 1:
setExtendedLayout(view,item);
break;
case 2:
setExtendedLayoutWebView(view,item);
break;
default :
break;
}
RobotoCheckBox cbStarred=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
FontHelper fHelper=new FontHelper(context);
fHelper.setFontForAllChildren(view,fHelper.getFont());
if (ThemeChooser.isDarkTheme(mActivity)) cbStarred.setBackgroundResource(R.drawable.checkbox_background_holo_dark);
cbStarred.setOnCheckedChangeListener(null);
cbStarred.setChecked(item.getStarred_temp());
cbStarred.setClickable(true);
cbStarred.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
item.setStarred_temp(isChecked);
dbConn.updateRssItem(item);
if (isChecked) UpdateIsReadCheckBox(buttonView,item);
pDelayHandler.DelayTimer();
}
}
);
LinearLayout ll_cb_starred_wrapper=(LinearLayout)view.findViewById(R.id.ll_cb_starred_wrapper);
if (ll_cb_starred_wrapper != null) {
ll_cb_starred_wrapper.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
RobotoCheckBox cbStarred=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
cbStarred.setChecked(!cbStarred.isChecked());
}
}
);
}
RobotoCheckBox cbRead=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_read);
cbRead.setTag(item.getId());
cbRead.setOnCheckedChangeListener(null);
Boolean isRead=item.getRead_temp();
cbRead.setChecked(isRead);
if (!isRead) {
RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
fHelper.setFontStyleForSingleView(textView,fHelper.getFontUnreadStyle());
}
cbRead.setClickable(true);
cbRead.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
ChangeReadStateOfItem((RobotoCheckBox)buttonView,view,isChecked,mActivity);
}
}
);
String colorString=item.getFeed().getAvgColour();
View viewColor=view.findViewById(R.id.color_line_feed);
if (colorString != null) viewColor.setBackgroundColor(Integer.parseInt(colorString));
Log.v(TAG,""String_Node_Str"" + colorString);
}","@Override public void bindView(final View view,final Context context,final RssItem item){
switch (selectedDesign) {
case 0:
    setSimpleLayout(view,item);
  break;
case 1:
setExtendedLayout(view,item);
break;
case 2:
setExtendedLayoutWebView(view,item);
break;
default :
break;
}
RobotoCheckBox cbStarred=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
FontHelper fHelper=new FontHelper(context);
fHelper.setFontForAllChildren(view,fHelper.getFont());
if (ThemeChooser.isDarkTheme(mActivity)) cbStarred.setBackgroundResource(R.drawable.checkbox_background_holo_dark);
cbStarred.setOnCheckedChangeListener(null);
cbStarred.setChecked(item.getStarred_temp());
cbStarred.setClickable(true);
cbStarred.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
item.setStarred_temp(isChecked);
dbConn.updateRssItem(item);
if (isChecked) UpdateIsReadCheckBox(buttonView,item);
pDelayHandler.DelayTimer();
}
}
);
LinearLayout ll_cb_starred_wrapper=(LinearLayout)view.findViewById(R.id.ll_cb_starred_wrapper);
if (ll_cb_starred_wrapper != null) {
ll_cb_starred_wrapper.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
RobotoCheckBox cbStarred=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
cbStarred.setChecked(!cbStarred.isChecked());
}
}
);
}
RobotoCheckBox cbRead=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_read);
cbRead.setTag(item.getId());
cbRead.setOnCheckedChangeListener(null);
Boolean isRead=item.getRead_temp();
cbRead.setChecked(isRead);
if (!isRead) {
RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
fHelper.setFontStyleForSingleView(textView,fHelper.getFontUnreadStyle());
}
cbRead.setClickable(true);
cbRead.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
ChangeReadStateOfItem((RobotoCheckBox)buttonView,view,isChecked,mActivity);
}
}
);
String colorString=item.getFeed().getAvgColour();
View viewColor=view.findViewById(R.id.color_line_feed);
if (colorString != null) viewColor.setBackgroundColor(Integer.parseInt(colorString));
 else Log.v(TAG,""String_Node_Str"" + item.getFeed().getFeedTitle());
}"
26179,"@Override protected Void doInBackground(Void... params){
  if (text != null) {
    List<String> links=ImageHandler.getImageLinksFromText(text);
    for (    String link : links)     new GetImageAsyncTask(link,null,999,FileUtils.getPathImageCache(context),context,null).execute();
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  if (text != null) {
    List<String> links=ImageHandler.getImageLinksFromText(text);
    for (    String link : links)     new GetImageAsyncTask(link,null,999,FileUtils.getPathImageCache(context),context).execute();
  }
  return null;
}"
26180,"@Override protected void onPostExecute(Bitmap result){
  if (imageDownloadFinished != null)   imageDownloadFinished.DownloadFinished(AsyncTaskId,feedID,result);
  super.onPostExecute(result);
}","@Override protected void onPostExecute(Bitmap result){
  if (imageDownloadFinished != null)   imageDownloadFinished.DownloadFinished(AsyncTaskId,result);
  super.onPostExecute(result);
}"
26181,"public GetImageAsyncTask(String WEB_URL_TO_FILE,ImageDownloadFinished imgDownloadFinished,int AsynkTaskId,String rootPath,Context cont,Long feedId){
  try {
    this.WEB_URL_TO_FILE=new URL(WEB_URL_TO_FILE);
  }
 catch (  Exception ex) {
    Log.d(TAG,ex.getLocalizedMessage() + ""String_Node_Str"" + WEB_URL_TO_FILE);
  }
  this.feedID=feedId;
  this.cont=cont;
  imageDownloadFinished=imgDownloadFinished;
  this.AsyncTaskId=AsynkTaskId;
  this.rootPath=rootPath;
}","public GetImageAsyncTask(String WEB_URL_TO_FILE,ImageDownloadFinished imgDownloadFinished,long AsynkTaskId,String rootPath,Context cont){
  try {
    this.WEB_URL_TO_FILE=new URL(WEB_URL_TO_FILE);
  }
 catch (  Exception ex) {
    Log.d(TAG,ex.getLocalizedMessage() + ""String_Node_Str"" + WEB_URL_TO_FILE);
  }
  this.cont=cont;
  imageDownloadFinished=imgDownloadFinished;
  this.AsyncTaskId=AsynkTaskId;
  this.rootPath=rootPath;
}"
26182,"public void PreCacheFavIcon(String WEB_URL_TO_FILE,Long feedID){
  int key=feedID.intValue();
  GetImageAsyncTask giAsync=new GetImageAsyncTask(WEB_URL_TO_FILE,favIconDownloadFinished,key,FileUtils.getPathFavIcons(context),context,feedID);
  giAsync.scaleImage=true;
  giAsync.dstHeight=2 * 32;
  giAsync.dstWidth=2 * 32;
  giAsync.feedID=feedID;
  AsyncTaskHelper.StartAsyncTask(giAsync,((Void)null));
}","public void PreCacheFavIcon(Feed feed){
  GetImageAsyncTask giAsync=new GetImageAsyncTask(feed.getFaviconUrl(),favIconDownloadFinished,feed.getId(),FileUtils.getPathFavIcons(context),context);
  giAsync.scaleImage=true;
  giAsync.dstHeight=2 * 32;
  giAsync.dstWidth=2 * 32;
  AsyncTaskHelper.StartAsyncTask(giAsync,((Void)null));
}"
26183,"@Override public void DownloadFinished(int AsynkTaskId,Long feedId,Bitmap bitmap){
  if (bitmap != null) {
    DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(context);
    Feed feed=dbConn.getFeedById(feedId);
    String avg=ColourCalculator.ColourHexFromBitmap(bitmap);
    feed.setAvgColour(avg);
    dbConn.updateFeed(feed);
  }
}","@Override public void DownloadFinished(long AsynkTaskId,Bitmap bitmap){
  if (bitmap != null) {
    DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(context);
    Feed feed=dbConn.getFeedById(AsynkTaskId);
    String avg=ColourCalculator.ColourHexFromBitmap(bitmap);
    feed.setAvgColour(avg);
    dbConn.updateFeed(feed);
  }
}"
26184,"void DownloadFinished(int AsynkTaskId,@NonNull Long feedId,Bitmap bitmap);","void DownloadFinished(long AsynkTaskId,Bitmap bitmap);"
26185,"@Override protected void onHandleIntent(Intent intent){
  boolean downloadFavIconsExclusive=intent.getBooleanExtra(DOWNLOAD_FAVICONS_EXCLUSIVE,false);
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  Notification notify=BuildNotification();
  SparseArray<String> linksFavIcons=dbConn.getUrlsToFavIcons();
  if (linksFavIcons.size() > 0)   notificationManager.notify(NOTIFICATION_ID,notify);
  for (int i=0; i < linksFavIcons.size(); i++) {
    int key=linksFavIcons.keyAt(i);
    String link=linksFavIcons.get(i);
    new FavIconHandler(this).PreCacheFavIcon(link,(long)key);
  }
  if (!downloadFavIconsExclusive) {
    long lastId=intent.getLongExtra(LAST_ITEM_ID,0);
    List<RssItem> rssItemList=dbConn.getAllItemsWithIdHigher(lastId);
    List<String> links=new ArrayList<String>();
    for (    RssItem rssItem : rssItemList) {
      String body=rssItem.getBody();
      links.addAll(ImageHandler.getImageLinksFromText(body));
    }
    maxCount=links.size();
    if (maxCount > 0)     notificationManager.notify(NOTIFICATION_ID,notify);
    for (    String link : links)     new GetImageAsyncTask(link,imgDownloadFinished,999,FileUtils.getPathImageCache(this),this,null).execute();
  }
}","@Override protected void onHandleIntent(Intent intent){
  boolean downloadFavIconsExclusive=intent.getBooleanExtra(DOWNLOAD_FAVICONS_EXCLUSIVE,false);
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(this);
  Notification notify=BuildNotification();
  List<Feed> feedList=dbConn.getListOfFeeds();
  FavIconHandler favIconHandler=new FavIconHandler(this);
  for (  Feed feed : feedList) {
    favIconHandler.PreCacheFavIcon(feed);
  }
  feedList=null;
  favIconHandler=null;
  if (!downloadFavIconsExclusive) {
    long lastId=intent.getLongExtra(LAST_ITEM_ID,0);
    List<RssItem> rssItemList=dbConn.getAllItemsWithIdHigher(lastId);
    List<String> links=new ArrayList<String>();
    for (    RssItem rssItem : rssItemList) {
      String body=rssItem.getBody();
      links.addAll(ImageHandler.getImageLinksFromText(body));
    }
    maxCount=links.size();
    if (maxCount > 0)     notificationManager.notify(NOTIFICATION_ID,notify);
    for (    String link : links)     new GetImageAsyncTask(link,imgDownloadFinished,999,FileUtils.getPathImageCache(this),this).execute();
  }
}"
26186,"@Override public void DownloadFinished(int AsynkTaskId,Long feedId,Bitmap bitmap){
  count++;
  NotificationDownloadImages.setProgress(maxCount,count,false);
  NotificationDownloadImages.setContentText(""String_Node_Str"" + count + ""String_Node_Str""+ maxCount);
  notificationManager.notify(NOTIFICATION_ID,NotificationDownloadImages.build());
  if (maxCount == count) {
    notificationManager.cancel(NOTIFICATION_ID);
    if (DownloadImagesService.this != null)     RemoveOldImages(DownloadImagesService.this);
  }
}","@Override public void DownloadFinished(long AsynkTaskId,Bitmap bitmap){
  count++;
  NotificationDownloadImages.setProgress(maxCount,count,false);
  NotificationDownloadImages.setContentText(""String_Node_Str"" + count + ""String_Node_Str""+ maxCount);
  notificationManager.notify(NOTIFICATION_ID,NotificationDownloadImages.build());
  if (maxCount == count) {
    notificationManager.cancel(NOTIFICATION_ID);
    if (DownloadImagesService.this != null)     RemoveOldImages(DownloadImagesService.this);
  }
}"
26187,"@Override protected Exception doInBackground(Object... params){
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(context);
  try {
    dbConn.clearDatabaseOverSize();
    long lastModified=dbConn.getLastModified();
    long offset=dbConn.getLowestItemId(false);
    int requestCount;
    int maxSyncSize=Integer.parseInt(OwnCloudReaderMethods.maxSizePerSync);
    highestItemIdBeforeSync=dbConn.getHighestItemId();
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    if (lastModified == 0) {
      int maxItemsInDatabase=Constants.maxItemsCount;
      do {
        requestCount=api.GetItems(TAGS.ALL,context,String.valueOf(offset),false,0,""String_Node_Str"",api);
        if (requestCount > 0)         offset=dbConn.getLowestItemId(false);
        totalCount+=requestCount;
        publishProgress((Void)null);
      }
 while (requestCount == maxSyncSize);
      mPrefs.edit().putInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,totalCount).commit();
      do {
        offset=dbConn.getLowestItemId(true);
        requestCount=api.GetItems(TAGS.ALL_STARRED,context,String.valueOf(offset),true,0,""String_Node_Str"",api);
        totalCount+=requestCount;
      }
 while (requestCount == maxSyncSize && totalCount < maxItemsInDatabase);
    }
 else {
      int[] result=api.GetUpdatedItems(TAGS.ALL,context,lastModified + 1,api);
      mPrefs.edit().putInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,result[1]).commit();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return ex;
  }
 finally {
  }
  return null;
}","@Override protected Exception doInBackground(Object... params){
  DatabaseConnectionOrm dbConn=new DatabaseConnectionOrm(context);
  try {
    dbConn.clearDatabaseOverSize();
    long lastModified=dbConn.getLastModified();
    long offset=dbConn.getLowestItemId(false);
    int requestCount;
    int maxSyncSize=Integer.parseInt(OwnCloudReaderMethods.maxSizePerSync);
    highestItemIdBeforeSync=dbConn.getHighestItemId();
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    if (lastModified == 0) {
      int maxItemsInDatabase=Constants.maxItemsCount;
      do {
        requestCount=api.GetItems(TAGS.ALL,context,String.valueOf(offset),false,0,""String_Node_Str"",api);
        if (requestCount > 0)         offset=dbConn.getLowestItemId(false);
        totalCount+=requestCount;
        publishProgress((Void)null);
      }
 while (requestCount == maxSyncSize);
      mPrefs.edit().putInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,totalCount).commit();
      do {
        offset=dbConn.getLowestItemId(true);
        requestCount=api.GetItems(TAGS.ALL_STARRED,context,String.valueOf(offset),true,0,""String_Node_Str"",api);
        totalCount+=requestCount;
      }
 while (requestCount == maxSyncSize && totalCount < maxItemsInDatabase);
    }
 else {
      mPrefs.edit().putInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,0).commit();
      int[] result=api.GetUpdatedItems(TAGS.ALL,context,lastModified + 1,api);
      mPrefs.edit().putInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING,result[1]).commit();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return ex;
  }
 finally {
  }
  return null;
}"
26188,"public GetImageAsyncTask(String WEB_URL_TO_FILE,ImageDownloadFinished imgDownloadFinished,int AsynkTaskId,String rootPath,Context cont,Long feedId){
  try {
    this.WEB_URL_TO_FILE=new URL(WEB_URL_TO_FILE);
  }
 catch (  Exception ex) {
    Log.d(TAG,ex.getLocalizedMessage() + ""String_Node_Str"" + WEB_URL_TO_FILE);
  }
  this.feedID=feedID;
  this.cont=cont;
  imageDownloadFinished=imgDownloadFinished;
  this.AsyncTaskId=AsynkTaskId;
  this.rootPath=rootPath;
}","public GetImageAsyncTask(String WEB_URL_TO_FILE,ImageDownloadFinished imgDownloadFinished,int AsynkTaskId,String rootPath,Context cont,Long feedId){
  try {
    this.WEB_URL_TO_FILE=new URL(WEB_URL_TO_FILE);
  }
 catch (  Exception ex) {
    Log.d(TAG,ex.getLocalizedMessage() + ""String_Node_Str"" + WEB_URL_TO_FILE);
  }
  this.feedID=feedId;
  this.cont=cont;
  imageDownloadFinished=imgDownloadFinished;
  this.AsyncTaskId=AsynkTaskId;
  this.rootPath=rootPath;
}"
26189,"@Override protected void onPostExecute(Object ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(task_id,ex);
  }
  if (ex == null && NetworkConnection.isNetworkAvailable(context)) {
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    int syncStrategy=Integer.parseInt(mPrefs.getString(SettingsActivity.LV_CACHE_IMAGES_OFFLINE_STRING,""String_Node_Str""));
switch (syncStrategy) {
case 0:
      break;
case 1:
    if (NetworkConnection.isWLANConnected(context))     StartDownloadingImages(context,highestItemIdBeforeSync,false);
  break;
case 2:
StartDownloadingImages(context,highestItemIdBeforeSync,false);
break;
case 3:
if (!NetworkConnection.isWLANConnected(context)) ShowDownloadImageWithoutWifiQuestion();
 else StartDownloadingImages(context,highestItemIdBeforeSync,false);
break;
}
}
detach();
}","@Override protected void onPostExecute(Object ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(task_id,ex);
  }
  if (ex == null && NetworkConnection.isNetworkAvailable(context)) {
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
    int syncStrategy=Integer.parseInt(mPrefs.getString(SettingsActivity.LV_CACHE_IMAGES_OFFLINE_STRING,""String_Node_Str""));
    boolean downloadImages=false;
switch (syncStrategy) {
case 0:
      break;
case 1:
    if (NetworkConnection.isWLANConnected(context))     downloadImages=true;
  break;
case 2:
downloadImages=true;
break;
case 3:
if (!NetworkConnection.isWLANConnected(context)) ShowDownloadImageWithoutWifiQuestion();
 else downloadImages=true;
break;
}
if (downloadImages) StartDownloadingImages(context,highestItemIdBeforeSync,false);
 else StartDownloadingImages(context,highestItemIdBeforeSync,true);
}
detach();
}"
26190,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_newsreader);
  AccountManager mAccountManager=AccountManager.get(this);
  boolean isAccountThere=false;
  Account[] accounts=mAccountManager.getAccounts();
  for (  Account account : accounts) {
    if (account.type.intern().equals(AccountGeneral.ACCOUNT_TYPE)) {
      isAccountThere=true;
    }
  }
  if (!isAccountThere) {
    Account account=new Account(getString(R.string.app_name),AccountGeneral.ACCOUNT_TYPE);
    mAccountManager.addAccountExplicitly(account,""String_Node_Str"",new Bundle());
  }
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   StartLoginFragment(NewsReaderListActivity.this);
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.left_drawer,new NewsReaderListFragment()).commit();
  mSlidingLayout=(SlidingPaneLayout)findViewById(R.id.sliding_pane);
  mSlidingLayout.setParallaxDistance(280);
  mSlidingLayout.setSliderFadeColor(getResources().getColor(android.R.color.transparent));
  mSlidingLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View arg0,    float arg1){
    }
    @Override public void onPanelOpened(    View arg0){
      togglePodcastVideoViewAnimation();
      updateAdapter();
      getSupportActionBar().setDisplayHomeAsUpEnabled(false);
      getSupportActionBar().setHomeButtonEnabled(false);
      getMenuItemUpdater().setVisible(false);
    }
    @Override public void onPanelClosed(    View arg0){
      togglePodcastVideoViewAnimation();
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
      getSupportActionBar().setHomeButtonEnabled(true);
      getMenuItemUpdater().setVisible(true);
      StartDetailFragmentNow();
    }
  }
);
  mSlidingLayout.openPane();
  if (savedInstanceState == null) {
    startDetailFHolder=new StartDetailFragmentHolder(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValueString(),true,null,true);
    StartDetailFragmentNow();
  }
  ImageHandler.createNoMediaFile(this);
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_newsreader);
  AccountManager mAccountManager=AccountManager.get(this);
  boolean isAccountThere=false;
  Account[] accounts=mAccountManager.getAccounts();
  for (  Account account : accounts) {
    if (account.type.intern().equals(AccountGeneral.ACCOUNT_TYPE)) {
      isAccountThere=true;
    }
  }
  if (!isAccountThere) {
    Account account=new Account(getString(R.string.app_name),AccountGeneral.ACCOUNT_TYPE);
    mAccountManager.addAccountExplicitly(account,""String_Node_Str"",new Bundle());
    SyncIntervalSelectorActivity.SetAccountSyncInterval(this);
  }
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   StartLoginFragment(NewsReaderListActivity.this);
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.left_drawer,new NewsReaderListFragment()).commit();
  mSlidingLayout=(SlidingPaneLayout)findViewById(R.id.sliding_pane);
  mSlidingLayout.setParallaxDistance(280);
  mSlidingLayout.setSliderFadeColor(getResources().getColor(android.R.color.transparent));
  mSlidingLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View arg0,    float arg1){
    }
    @Override public void onPanelOpened(    View arg0){
      togglePodcastVideoViewAnimation();
      updateAdapter();
      getSupportActionBar().setDisplayHomeAsUpEnabled(false);
      getSupportActionBar().setHomeButtonEnabled(false);
      getMenuItemUpdater().setVisible(false);
    }
    @Override public void onPanelClosed(    View arg0){
      togglePodcastVideoViewAnimation();
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
      getSupportActionBar().setHomeButtonEnabled(true);
      getMenuItemUpdater().setVisible(true);
      StartDetailFragmentNow();
    }
  }
);
  mSlidingLayout.openPane();
  if (savedInstanceState == null) {
    startDetailFHolder=new StartDetailFragmentHolder(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValueString(),true,null,true);
    StartDetailFragmentNow();
  }
  ImageHandler.createNoMediaFile(this);
}"
26191,"@TargetApi(Build.VERSION_CODES.FROYO) @Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    return true;
  }
 else   if (id == R.id.action_save) {
    int checkedPosition=mFragment.lvItems.getCheckedItemPosition();
    Integer minutes=Integer.parseInt(items_values[checkedPosition]);
    mPrefs.edit().putInt(SYNC_INTERVAL_IN_MINUTES_STRING,minutes).commit();
    long SYNC_INTERVAL=minutes * SECONDS_PER_MINUTE;
    AccountManager mAccountManager=AccountManager.get(this);
    Account[] accounts=mAccountManager.getAccountsByType(AccountGeneral.ACCOUNT_TYPE);
    for (    Account account : accounts) {
      ContentResolver.setSyncAutomatically(account,AccountGeneral.ACCOUNT_TYPE,true);
      Bundle bundle=new Bundle();
      ContentResolver.addPeriodicSync(account,AccountGeneral.ACCOUNT_TYPE,bundle,SYNC_INTERVAL);
    }
    finish();
  }
  return super.onOptionsItemSelected(item);
}","@TargetApi(Build.VERSION_CODES.FROYO) @Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    return true;
  }
 else   if (id == R.id.action_save) {
    int checkedPosition=mFragment.lvItems.getCheckedItemPosition();
    Integer minutes=Integer.parseInt(items_values[checkedPosition]);
    mPrefs.edit().putInt(SYNC_INTERVAL_IN_MINUTES_STRING,minutes).commit();
    SetAccountSyncInterval(this);
    finish();
  }
  return super.onOptionsItemSelected(item);
}"
26192,"public SparseArray<String> getUnreadItemCountForFolder(Context mContext){
  String buildSQL=""String_Node_Str"" + FOLDER_LABEL_ID + ""String_Node_Str""+ RSS_ITEM_RSSITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_TABLE+ ""String_Node_Str""+ ""String_Node_Str""+ SUBSCRIPTION_TABLE+ ""String_Node_Str""+ RSS_ITEM_SUBSCRIPTION_ID+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_TABLE+ ""String_Node_Str""+ SUBSCRIPTION_FOLDER_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_READ_TEMP+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_LABEL_ID;
  SparseArray<String> values=getSparseArrayFromSQL(buildSQL,0,1);
  values.put(ALL_UNREAD_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_UNREAD_ITEMS.getValueString()).getText());
  values.put(ALL_STARRED_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_STARRED_ITEMS.getValueString()).getText());
  return values;
}","public SparseArray<String> getUnreadItemCountForFolder(Context mContext){
  String buildSQL=""String_Node_Str"" + RSS_ITEM_RSSITEM_ID + ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_TABLE+ ""String_Node_Str""+ ""String_Node_Str""+ SUBSCRIPTION_TABLE+ ""String_Node_Str""+ RSS_ITEM_SUBSCRIPTION_ID+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_TABLE+ ""String_Node_Str""+ SUBSCRIPTION_FOLDER_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_READ_TEMP+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_LABEL_ID;
  SparseArray<String> values=getSparseArrayFromSQL(buildSQL,0,1);
  values.put(ALL_UNREAD_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_UNREAD_ITEMS.getValueString()).getText());
  values.put(ALL_STARRED_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_STARRED_ITEMS.getValueString()).getText());
  return values;
}"
26193,"public SparseArray<String> getUnreadItemCountForFolder(Context mContext){
  String buildSQL=""String_Node_Str"" + FOLDER_LABEL_ID + ""String_Node_Str""+ RSS_ITEM_RSSITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_TABLE+ ""String_Node_Str""+ ""String_Node_Str""+ SUBSCRIPTION_TABLE+ ""String_Node_Str""+ RSS_ITEM_SUBSCRIPTION_ID+ ""String_Node_Str""+ SUBSCRIPTION_ID+ ""String_Node_Str""+ FOLDER_TABLE+ ""String_Node_Str""+ SUBSCRIPTION_FOLDER_ID+ ""String_Node_Str""+ FOLDER_LABEL_ID+ ""String_Node_Str""+ RSS_ITEM_READ_TEMP+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_LABEL_ID;
  SparseArray<String> values=getSparseArrayFromSQL(buildSQL,0,1);
  values.put(ALL_UNREAD_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_UNREAD_ITEMS.getValueString()).getText());
  values.put(ALL_STARRED_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_STARRED_ITEMS.getValueString()).getText());
  return values;
}","public SparseArray<String> getUnreadItemCountForFolder(Context mContext){
  String buildSQL=""String_Node_Str"" + FOLDER_LABEL_ID + ""String_Node_Str""+ RSS_ITEM_RSSITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_TABLE+ ""String_Node_Str""+ ""String_Node_Str""+ SUBSCRIPTION_TABLE+ ""String_Node_Str""+ RSS_ITEM_SUBSCRIPTION_ID+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_TABLE+ ""String_Node_Str""+ SUBSCRIPTION_FOLDER_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RSS_ITEM_READ_TEMP+ ""String_Node_Str""+ ""String_Node_Str""+ FOLDER_LABEL_ID;
  SparseArray<String> values=getSparseArrayFromSQL(buildSQL,0,1);
  values.put(ALL_UNREAD_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_UNREAD_ITEMS.getValueString()).getText());
  values.put(ALL_STARRED_ITEMS.getValue(),new UnreadFolderCount(mContext,ALL_STARRED_ITEMS.getValueString()).getText());
  return values;
}"
26194,"@Override public boolean onOptionsItemSelected(MenuItem item){
  String idFeed=getIdCurrentFeed(currentPosition);
  Cursor cursor=dbConn.getArticleByID(idFeed);
switch (item.getItemId()) {
case android.R.id.home:
    super.onBackPressed();
  break;
case R.id.action_starred:
String idItem_Db=getIdCurrentFeed(currentPosition);
Boolean curState=dbConn.isFeedUnreadStarred(idItem_Db,false);
dbConn.updateIsStarredOfItem(idItem_Db,!curState);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
List<String> idItems=new ArrayList<String>();
cursor.moveToFirst();
idItems.add(cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_RSSITEM_ID)));
cursor.close();
break;
case R.id.action_openInBrowser:
String link=""String_Node_Str"";
if (cursor != null) {
cursor.moveToFirst();
link=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_LINK));
cursor.close();
}
if (link.trim().length() > 0) {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
break;
case R.id.action_ShareItem:
String title=""String_Node_Str"";
String linkToItem=""String_Node_Str"";
if (cursor != null) {
cursor.moveToFirst();
title=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_TITLE));
linkToItem=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_LINK));
cursor.close();
}
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,linkToItem);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
case R.id.action_read:
if (cursor != null) {
cursor.moveToFirst();
String id=cursor.getString(0);
markItemAsReadUnread(id,!menuItem_Read.isChecked());
cursor.close();
}
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  String idFeed=getIdCurrentFeed(currentPosition);
  Cursor cursor=dbConn.getArticleByID(idFeed);
switch (item.getItemId()) {
case android.R.id.home:
    super.onBackPressed();
  break;
case R.id.action_starred:
String idItem_Db=getIdCurrentFeed(currentPosition);
Boolean curState=dbConn.isFeedUnreadStarred(idItem_Db,false);
dbConn.updateIsStarredOfItem(idItem_Db,!curState);
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
List<String> idItems=new ArrayList<String>();
cursor.moveToFirst();
idItems.add(cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_RSSITEM_ID)));
cursor.close();
break;
case R.id.action_openInBrowser:
String link=""String_Node_Str"";
if (cursor != null) {
cursor.moveToFirst();
link=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_LINK));
cursor.close();
}
if (link.trim().length() > 0) {
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(link));
startActivity(browserIntent);
}
break;
case R.id.action_ShareItem:
String title=""String_Node_Str"";
String content=""String_Node_Str"";
if (cursor != null) {
cursor.moveToFirst();
title=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_TITLE));
content=cursor.getString(cursor.getColumnIndex(DatabaseConnection.RSS_ITEM_LINK));
cursor.close();
}
NewsDetailFragment fragment=(NewsDetailFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"" + R.id.pager + ""String_Node_Str""+ currentPosition);
if (fragment != null) {
if (!fragment.webview.getUrl().equals(""String_Node_Str"")) {
content=fragment.webview.getUrl();
title=fragment.webview.getTitle();
}
}
content+=""String_Node_Str"";
Intent share=new Intent(Intent.ACTION_SEND);
share.setType(""String_Node_Str"");
share.putExtra(Intent.EXTRA_SUBJECT,title);
share.putExtra(Intent.EXTRA_TEXT,content);
startActivity(Intent.createChooser(share,""String_Node_Str""));
break;
case R.id.action_read:
if (cursor != null) {
cursor.moveToFirst();
String id=cursor.getString(0);
markItemAsReadUnread(id,!menuItem_Read.isChecked());
cursor.close();
}
UpdateActionBarIcons();
pDelayHandler.DelayTimer();
break;
}
return super.onOptionsItemSelected(item);
}"
26195,"public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null) {
    NewsReaderListActivity nla=(NewsReaderListActivity)getActivity();
    nla.StartLoginFragment();
  }
 else {
    if (!_Reader.isSyncRunning()) {
      new PostDelayHandler(getActivity()).stopRunningPostDelayHandler();
      OwnCloud_Reader ocReader=(OwnCloud_Reader)_Reader;
      ocReader.Start_AsyncTask_GetVersion(Constants.TaskID_GetVersion,getActivity(),onAsyncTask_GetVersionFinished,username,password);
    }
 else     _Reader.attachToRunningTask(-10,getActivity(),onAsyncTask_GetVersionFinished);
  }
  UpdateSyncButtonLayout();
}","public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  username=PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()).getString(""String_Node_Str"",""String_Node_Str"");
  password=PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()).getString(""String_Node_Str"",""String_Node_Str"");
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null) {
    NewsReaderListActivity nla=(NewsReaderListActivity)getActivity();
    nla.StartLoginFragment();
  }
 else {
    if (!_Reader.isSyncRunning()) {
      new PostDelayHandler(getActivity()).stopRunningPostDelayHandler();
      OwnCloud_Reader ocReader=(OwnCloud_Reader)_Reader;
      ocReader.Start_AsyncTask_GetVersion(Constants.TaskID_GetVersion,getActivity(),onAsyncTask_GetVersionFinished,username,password);
    }
 else     _Reader.attachToRunningTask(-10,getActivity(),onAsyncTask_GetVersionFinished);
  }
  UpdateSyncButtonLayout();
}"
26196,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  dbConn=new DatabaseConnection(getActivity());
  if (getArguments() != null) {
    if (getArguments().containsKey(NewsReaderListActivity.SUBSCRIPTION_ID)) {
      idFeed=getArguments().getString(NewsReaderListActivity.SUBSCRIPTION_ID);
    }
    if (getArguments().containsKey(NewsReaderListActivity.TITEL)) {
      titel=getArguments().getString(NewsReaderListActivity.TITEL);
    }
    if (getArguments().containsKey(NewsReaderListActivity.FOLDER_ID)) {
      idFolder=getArguments().getString(NewsReaderListActivity.FOLDER_ID);
    }
    ((SherlockFragmentActivity)getActivity()).getSupportActionBar().setTitle(titel);
    UpdateMenuItemsState();
    lvAdapter=null;
    UpdateCursor();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  if (getArguments() != null) {
    if (getArguments().containsKey(NewsReaderListActivity.SUBSCRIPTION_ID)) {
      idFeed=getArguments().getString(NewsReaderListActivity.SUBSCRIPTION_ID);
    }
    if (getArguments().containsKey(NewsReaderListActivity.TITEL)) {
      titel=getArguments().getString(NewsReaderListActivity.TITEL);
    }
    if (getArguments().containsKey(NewsReaderListActivity.FOLDER_ID)) {
      idFolder=getArguments().getString(NewsReaderListActivity.FOLDER_ID);
    }
    ((SherlockFragmentActivity)getActivity()).getSupportActionBar().setTitle(titel);
    UpdateMenuItemsState();
    lvAdapter=new NewsListCursorAdapter(getActivity(),null,this);
    setListAdapter(lvAdapter);
    getActivity().getSupportLoaderManager().destroyLoader(0);
    UpdateCursor();
  }
}"
26197,"public void UpdateCursor(){
  try {
    Cursor cursor=getRightCusor(idFolder);
    if (lvAdapter == null) {
      lvAdapter=new NewsListCursorAdapter(getActivity(),cursor,this);
      setListAdapter(lvAdapter);
    }
 else     lvAdapter.changeCursor(cursor);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void UpdateCursor(){
  try {
    LoaderManager loader=getActivity().getSupportLoaderManager();
    loader.initLoader(0,null,new LoaderCallbacks<Cursor>(){
      @Override public Loader<Cursor> onCreateLoader(      int id,      Bundle args){
        return new NewsDetailCursorLoader(getActivity(),idFolder,idFeed);
      }
      @Override public void onLoadFinished(      Loader<Cursor> loader,      Cursor cursor){
        ((NewsListCursorAdapter)getListAdapter()).swapCursor(cursor);
      }
      @Override public void onLoaderReset(      Loader<Cursor> loader){
        ((NewsListCursorAdapter)getListAdapter()).swapCursor(null);
      }
    }
);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}"
26198,"public Cursor getRightCusor(String ID_FOLDER){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  boolean onlyUnreadItems=mPrefs.getBoolean(SettingsActivity.CB_SHOWONLYUNREAD_STRING,false);
  boolean onlyStarredItems=false;
  if (ID_FOLDER != null)   if (ID_FOLDER.equals(SubscriptionExpandableListAdapter.ALL_STARRED_ITEMS))   onlyStarredItems=true;
  SORT_DIRECTION sDirection=SORT_DIRECTION.asc;
  String sortDirection=mPrefs.getString(SettingsActivity.SP_SORT_ORDER,""String_Node_Str"");
  if (sortDirection.equals(SORT_DIRECTION.desc.toString()))   sDirection=SORT_DIRECTION.desc;
  String sqlSelectStatement=null;
  if (idFeed != null)   sqlSelectStatement=dbConn.getAllItemsIdsForFeedSQL(idFeed,onlyUnreadItems,onlyStarredItems,sDirection);
 else   if (idFolder != null) {
    if (idFolder.equals(SubscriptionExpandableListAdapter.ALL_STARRED_ITEMS))     onlyUnreadItems=false;
    sqlSelectStatement=dbConn.getAllItemsIdsForFolderSQL(idFolder,onlyUnreadItems,sDirection);
  }
  if (sqlSelectStatement != null) {
    dbConn.insertIntoRssCurrentViewTable(sqlSelectStatement);
  }
  return dbConn.getCurrentSelectedRssItems(sDirection);
}","public static Cursor getRightCusor(Context context,String idFolder,String idFeed){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean onlyUnreadItems=mPrefs.getBoolean(SettingsActivity.CB_SHOWONLYUNREAD_STRING,false);
  boolean onlyStarredItems=false;
  if (idFolder != null)   if (idFolder.equals(SubscriptionExpandableListAdapter.ALL_STARRED_ITEMS))   onlyStarredItems=true;
  SORT_DIRECTION sDirection=SORT_DIRECTION.asc;
  String sortDirection=mPrefs.getString(SettingsActivity.SP_SORT_ORDER,""String_Node_Str"");
  if (sortDirection.equals(SORT_DIRECTION.desc.toString()))   sDirection=SORT_DIRECTION.desc;
  DatabaseConnection dbConn=new DatabaseConnection(context);
  String sqlSelectStatement=null;
  if (idFeed != null)   sqlSelectStatement=dbConn.getAllItemsIdsForFeedSQL(idFeed,onlyUnreadItems,onlyStarredItems,sDirection);
 else   if (idFolder != null) {
    if (idFolder.equals(SubscriptionExpandableListAdapter.ALL_STARRED_ITEMS))     onlyUnreadItems=false;
    sqlSelectStatement=dbConn.getAllItemsIdsForFolderSQL(idFolder,onlyUnreadItems,sDirection);
  }
  if (sqlSelectStatement != null) {
    dbConn.insertIntoRssCurrentViewTable(sqlSelectStatement);
  }
  return dbConn.getCurrentSelectedRssItems(sDirection);
}"
26199,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_newsreader);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   StartLoginFragment();
  mSlidingLayout=(SlidingPaneLayout)findViewById(R.id.sliding_pane);
  mSlidingLayout.setParallaxDistance(280);
  mSlidingLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View arg0,    float arg1){
    }
    @Override public void onPanelOpened(    View arg0){
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
      getSupportActionBar().setHomeButtonEnabled(true);
    }
    @Override public void onPanelClosed(    View arg0){
      getSupportActionBar().setDisplayHomeAsUpEnabled(false);
      getSupportActionBar().setHomeButtonEnabled(false);
    }
  }
);
  mSlidingLayout.openPane();
  if (shouldDrawerStayOpen()) {
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  ThemeChooser.chooseTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_newsreader);
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null)   StartLoginFragment();
  mSlidingLayout=(SlidingPaneLayout)findViewById(R.id.sliding_pane);
  mSlidingLayout.setParallaxDistance(280);
  mSlidingLayout.setSliderFadeColor(getResources().getColor(android.R.color.transparent));
  mSlidingLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View arg0,    float arg1){
    }
    @Override public void onPanelOpened(    View arg0){
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
      getSupportActionBar().setHomeButtonEnabled(true);
    }
    @Override public void onPanelClosed(    View arg0){
      getSupportActionBar().setDisplayHomeAsUpEnabled(false);
      getSupportActionBar().setHomeButtonEnabled(false);
      if (startDetailFHolder != null) {
        startDetailFHolder.StartDetailFragment();
        startDetailFHolder=null;
      }
    }
  }
);
  mSlidingLayout.openPane();
  if (shouldDrawerStayOpen()) {
  }
}"
26200,"@Override public void onChildItemClicked(String idSubscription,String optional_folder_id){
  if (!shouldDrawerStayOpen())   mSlidingLayout.closePane();
  StartDetailFragment(idSubscription,false,optional_folder_id);
}","@Override public void onChildItemClicked(String idSubscription,String optional_folder_id){
  if (!shouldDrawerStayOpen())   mSlidingLayout.closePane();
  startDetailFHolder=new StartDetailFragmentHolder(idSubscription,false,optional_folder_id);
}"
26201,"/** 
 * Callback method from   {@link NewsReaderListFragment.Callbacks} indicatingthat the item with the given ID was selected.
 */
@Override public void onTopItemClicked(String idSubscription,boolean isFolder,String optional_folder_id){
  if (!shouldDrawerStayOpen())   mSlidingLayout.closePane();
  StartDetailFragment(idSubscription,isFolder,optional_folder_id);
}","/** 
 * Callback method from   {@link NewsReaderListFragment.Callbacks} indicatingthat the item with the given ID was selected.
 */
@Override public void onTopItemClicked(String idSubscription,boolean isFolder,String optional_folder_id){
  if (!shouldDrawerStayOpen())   mSlidingLayout.closePane();
  startDetailFHolder=new StartDetailFragmentHolder(idSubscription,isFolder,optional_folder_id);
}"
26202,"@Override public void onPanelClosed(View arg0){
  getSupportActionBar().setDisplayHomeAsUpEnabled(false);
  getSupportActionBar().setHomeButtonEnabled(false);
}","@Override public void onPanelClosed(View arg0){
  getSupportActionBar().setDisplayHomeAsUpEnabled(false);
  getSupportActionBar().setHomeButtonEnabled(false);
  if (startDetailFHolder != null) {
    startDetailFHolder.StartDetailFragment();
    startDetailFHolder=null;
  }
}"
26203,"@Override public View newView(Context cont,Cursor cursor,ViewGroup parent){
  LayoutInflater inflater=LayoutInflater.from(parent.getContext());
  View retView=null;
switch (selectedDesign) {
case 0:
    retView=inflater.inflate(R.layout.subscription_detail_list_item_simple,parent,false);
  break;
case 1:
retView=inflater.inflate(R.layout.subscription_detail_list_item_extended,parent,false);
break;
case 2:
retView=inflater.inflate(R.layout.subscription_detail_list_item_extended_webview,parent,false);
break;
default :
break;
}
if (retView != null) retView.setTag(cursor.getString(0));
return retView;
}","@Override public View newView(Context cont,Cursor cursor,ViewGroup parent){
  LayoutInflater inflater=LayoutInflater.from(parent.getContext());
  View retView=null;
switch (selectedDesign) {
case 0:
    retView=inflater.inflate(R.layout.subscription_detail_list_item_simple,parent,false);
  break;
case 1:
retView=inflater.inflate(R.layout.subscription_detail_list_item_extended,parent,false);
break;
case 2:
retView=inflater.inflate(R.layout.subscription_detail_list_item_extended_webview,parent,false);
break;
}
if (retView != null) retView.setTag(cursor.getString(0));
return retView;
}"
26204,"public void updateAdapter(){
  NewsReaderListFragment nlf=((NewsReaderListFragment)getSupportFragmentManager().findFragmentById(R.id.newsreader_list));
  if (nlf != null) {
    PullToRefreshExpandableListView ptrel=((PullToRefreshExpandableListView)nlf.eListView);
    BlockingExpandableListView bView=((BlockingExpandableListView)ptrel.getRefreshableView());
    bView.setBlockLayoutChildren(true);
    nlf.lvAdapter.notifyDataSetChanged();
    bView.setBlockLayoutChildren(false);
  }
}","public void updateAdapter(){
  NewsReaderListFragment nlf=((NewsReaderListFragment)getSupportFragmentManager().findFragmentById(R.id.newsreader_list));
  if (nlf != null) {
    PullToRefreshExpandableListView ptrel=((PullToRefreshExpandableListView)nlf.eListView);
    BlockingExpandableListView bView=((BlockingExpandableListView)ptrel.getRefreshableView());
    int firstVisPos=bView.getFirstVisiblePosition();
    View firstVisView=bView.getChildAt(0);
    int top=firstVisView != null ? firstVisView.getTop() : 0;
    int itemsAddedBeforeFirstVisible=0;
    bView.setBlockLayoutChildren(true);
    nlf.lvAdapter.notifyDataSetChanged();
    bView.setBlockLayoutChildren(false);
    bView.setSelectionFromTop(firstVisPos + itemsAddedBeforeFirstVisible,top);
  }
}"
26205,"@Override public void onAsyncTaskCompleted(int task_id,Object task_result){
  if (isAdded()) {
    if (task_result != null)     ShowToastLong(((Exception)task_result).getLocalizedMessage());
    lvAdapter.notifyDataSetChanged();
    if (eListView != null)     eListView.getLoadingLayoutProxy().setLastUpdatedLabel(null);
    UpdateSyncButtonLayout();
    lvAdapter.ReloadAdapter();
    NewsReaderListActivity nlActivity=(NewsReaderListActivity)getActivity();
    nlActivity.UpdateItemList();
    Log.d(TAG,""String_Node_Str"");
  }
}","@Override public void onAsyncTaskCompleted(int task_id,Object task_result){
  if (isTwoPaneMode() || isAdded()) {
    if (task_result != null)     ShowToastLong(((Exception)task_result).getLocalizedMessage());
    lvAdapter.notifyDataSetChanged();
    if (eListView != null)     eListView.getLoadingLayoutProxy().setLastUpdatedLabel(null);
    UpdateSyncButtonLayout();
    lvAdapter.ReloadAdapter();
    NewsReaderListActivity nlActivity=(NewsReaderListActivity)getActivity();
    nlActivity.UpdateItemList();
    Log.d(TAG,""String_Node_Str"");
  }
}"
26206,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View V=null;
  if (isAdded()) {
    V=inflater.inflate(R.layout.expandable_list_layout,container,false);
    eListView=(PullToRefreshExpandableListView)V.findViewById(R.id.expandableListView);
    eListView.setGroupIndicator(null);
    eListView.setShowIndicator(false);
    eListView.setOnRefreshListener(new OnRefreshListener<BlockingExpandableListView>(){
      @Override public void onRefresh(      PullToRefreshBase<BlockingExpandableListView> refreshView){
        StartSync();
      }
    }
);
    eListView.setOnChildClickListener(onChildClickListener);
    View empty=inflater.inflate(R.layout.subscription_detail_list_item_empty,null,false);
    getActivity().addContentView(empty,new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
    eListView.setEmptyView(empty);
    eListView.setExpandableAdapter(lvAdapter);
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))     StartSync();
  }
  return V;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View V=null;
  if (isTwoPaneMode() || isAdded()) {
    V=inflater.inflate(R.layout.expandable_list_layout,container,false);
    eListView=(PullToRefreshExpandableListView)V.findViewById(R.id.expandableListView);
    eListView.setGroupIndicator(null);
    eListView.setShowIndicator(false);
    eListView.setOnRefreshListener(new OnRefreshListener<BlockingExpandableListView>(){
      @Override public void onRefresh(      PullToRefreshBase<BlockingExpandableListView> refreshView){
        StartSync();
      }
    }
);
    eListView.setOnChildClickListener(onChildClickListener);
    View empty=inflater.inflate(R.layout.subscription_detail_list_item_empty,null,false);
    getActivity().addContentView(empty,new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
    eListView.setEmptyView(empty);
    eListView.setExpandableAdapter(lvAdapter);
    SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING,false))     StartSync();
  }
  return V;
}"
26207,"@Override public void bindView(final View view,final Context context,Cursor cursor){
  final String idItemDb=cursor.getString(0);
switch (selectedDesign) {
case 0:
    setSimpleLayout(view,cursor);
  break;
case 1:
setExtendedLayout(view,cursor);
break;
case 2:
setExtendedLayoutWebView(view,cursor);
break;
default :
break;
}
RobotoCheckBox cb=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
cb.setOnCheckedChangeListener(null);
Boolean isStarred=dbConn.isFeedUnreadStarred(cursor.getString(0),false);
cb.setChecked(isStarred);
cb.setClickable(true);
cb.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
dbConn.updateIsStarredOfItem(idItemDb,isChecked);
if (isChecked) UpdateIsReadCheckBox(buttonView,idItemDb);
pDelayHandler.DelayTimer();
}
}
);
RobotoCheckBox cbRead=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_read);
cbRead.setOnCheckedChangeListener(null);
Boolean isChecked=dbConn.isFeedUnreadStarred(cursor.getString(0),true);
cbRead.setChecked(isChecked);
cbRead.setClickable(true);
cbRead.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
dbConn.updateIsReadOfItem(idItemDb,isChecked);
UpdateListCursor(mContext);
pDelayHandler.DelayTimer();
RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
if (textView != null) {
if (isChecked) textView.setTextAppearance(mContext,R.style.RobotoFontStyle);
 else textView.setTextAppearance(mContext,R.style.RobotoFontStyleBold);
}
}
}
);
}","@Override public void bindView(final View view,final Context context,Cursor cursor){
  final String idItemDb=cursor.getString(0);
switch (selectedDesign) {
case 0:
    setSimpleLayout(view,cursor);
  break;
case 1:
setExtendedLayout(view,cursor);
break;
case 2:
setExtendedLayoutWebView(view,cursor);
break;
default :
break;
}
RobotoCheckBox cb=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_starred);
cb.setOnCheckedChangeListener(null);
Boolean isStarred=dbConn.isFeedUnreadStarred(cursor.getString(0),false);
cb.setChecked(isStarred);
cb.setClickable(true);
cb.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
dbConn.updateIsStarredOfItem(idItemDb,isChecked);
if (isChecked) UpdateIsReadCheckBox(buttonView,idItemDb);
pDelayHandler.DelayTimer();
}
}
);
RobotoCheckBox cbRead=(RobotoCheckBox)view.findViewById(R.id.cb_lv_item_read);
cbRead.setOnCheckedChangeListener(null);
Boolean isChecked=dbConn.isFeedUnreadStarred(cursor.getString(0),true);
cbRead.setChecked(isChecked);
cbRead.setClickable(true);
cbRead.setOnCheckedChangeListener(new OnCheckedChangeListener(){
@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
dbConn.updateIsReadOfItem(idItemDb,isChecked);
UpdateListCursor(mContext);
pDelayHandler.DelayTimer();
RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
if (textView != null) {
if (isChecked) textView.setTextAppearance(mContext,R.style.RobotoFontStyle);
 else textView.setTextAppearance(mContext,R.style.RobotoFontStyleBold);
textView.invalidate();
}
}
}
);
}"
26208,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  dbConn.updateIsReadOfItem(idItemDb,isChecked);
  UpdateListCursor(mContext);
  pDelayHandler.DelayTimer();
  RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
  if (textView != null) {
    if (isChecked)     textView.setTextAppearance(mContext,R.style.RobotoFontStyle);
 else     textView.setTextAppearance(mContext,R.style.RobotoFontStyleBold);
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  dbConn.updateIsReadOfItem(idItemDb,isChecked);
  UpdateListCursor(mContext);
  pDelayHandler.DelayTimer();
  RobotoTextView textView=(RobotoTextView)view.findViewById(R.id.summary);
  if (textView != null) {
    if (isChecked)     textView.setTextAppearance(mContext,R.style.RobotoFontStyle);
 else     textView.setTextAppearance(mContext,R.style.RobotoFontStyleBold);
    textView.invalidate();
  }
}"
26209,"public void onClick(DialogInterface dialog,int id){
  StartDownloadingImages();
}","public void onClick(DialogInterface dialog,int id){
}"
26210,"private void StartDownloadingImages(){
  DatabaseConnection dbConn=new DatabaseConnection(context);
  try {
    Intent service=new Intent(context,DownloadImagesService.class);
    service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemIdBeforeSync);
    context.startService(service);
  }
  finally {
    dbConn.closeDatabase();
  }
}","private void StartDownloadingImages(Context context){
  DatabaseConnection dbConn=new DatabaseConnection(context);
  try {
    Intent service=new Intent(context,DownloadImagesService.class);
    service.putExtra(DownloadImagesService.LAST_ITEM_ID,highestItemIdBeforeSync);
    context.startService(service);
  }
  finally {
    dbConn.closeDatabase();
  }
}"
26211,"@Override protected void onPostExecute(Object ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(task_id,ex);
  }
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  if (mPrefs.getBoolean(SettingsActivity.CB_CACHE_IMAGES_OFFLINE_STRING,false)) {
    if (!NetworkConnection.isWLANConnected(context) && NetworkConnection.isNetworkAvailable(context))     ShowDownloadImageWithoutWifiQuestion();
 else     if (NetworkConnection.isNetworkAvailable(context))     StartDownloadingImages();
  }
  detach();
}","@Override protected void onPostExecute(Object ex){
  for (  OnAsyncTaskCompletedListener listenerInstance : listener) {
    if (listenerInstance != null)     listenerInstance.onAsyncTaskCompleted(task_id,ex);
  }
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  if (mPrefs.getBoolean(SettingsActivity.CB_CACHE_IMAGES_OFFLINE_STRING,false)) {
    if (!NetworkConnection.isWLANConnected(context) && NetworkConnection.isNetworkAvailable(context))     ShowDownloadImageWithoutWifiQuestion();
 else     if (NetworkConnection.isNetworkAvailable(context))     StartDownloadingImages(context);
  }
  detach();
}"
26212,"private void ShowDownloadImageWithoutWifiQuestion(){
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
  alertDialogBuilder.setTitle(context.getString(R.string.no_wifi_available));
  alertDialogBuilder.setMessage(context.getString(R.string.do_you_want_to_download_without_wifi)).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      StartDownloadingImages();
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}","private void ShowDownloadImageWithoutWifiQuestion(){
  final Context contextDownloadImage=this.context;
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(context);
  alertDialogBuilder.setTitle(contextDownloadImage.getString(R.string.no_wifi_available));
  alertDialogBuilder.setMessage(contextDownloadImage.getString(R.string.do_you_want_to_download_without_wifi)).setCancelable(true).setPositiveButton(contextDownloadImage.getString(android.R.string.yes),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      StartDownloadingImages(contextDownloadImage);
    }
  }
).setNegativeButton(contextDownloadImage.getString(android.R.string.no),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}"
26213,"public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null) {
    NewsReaderListActivity nla=(NewsReaderListActivity)getActivity();
    nla.StartLoginFragment();
  }
 else {
    if (!_Reader.isSyncRunning()) {
      OwnCloud_Reader ocReader=(OwnCloud_Reader)_Reader;
      ocReader.Start_AsyncTask_GetVersion(Constants.TaskID_GetVersion,getActivity(),onAsyncTask_GetVersionFinished,username,password);
    }
 else     _Reader.attachToRunningTask(-10,getActivity(),onAsyncTask_GetVersionFinished);
  }
  UpdateSyncButtonLayout();
}","public void StartSync(){
  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING,null) == null) {
    NewsReaderListActivity nla=(NewsReaderListActivity)getActivity();
    nla.StartLoginFragment();
  }
 else {
    if (!_Reader.isSyncRunning()) {
      new PostDelayHandler(getActivity()).stopRunningPostDelayHandler();
      OwnCloud_Reader ocReader=(OwnCloud_Reader)_Reader;
      ocReader.Start_AsyncTask_GetVersion(Constants.TaskID_GetVersion,getActivity(),onAsyncTask_GetVersionFinished,username,password);
    }
 else     _Reader.attachToRunningTask(-10,getActivity(),onAsyncTask_GetVersionFinished);
  }
  UpdateSyncButtonLayout();
}"
26214,"public PostDelayHandler(Context context){
  handlerTimer=new Handler();
  this.context=context;
}","public PostDelayHandler(Context context){
  if (handlerTimer == null)   handlerTimer=new Handler();
  this.context=context;
}"
26215,"@SuppressLint(""String_Node_Str"") public static InputStream PerformJsonRequest(String urlString,List<NameValuePair> nameValuePairs,final String username,final String password,Context context) throws AuthenticationException, Exception {
  if (nameValuePairs != null)   urlString+=""String_Node_Str"" + URLEncodedUtils.format(nameValuePairs,""String_Node_Str"");
  URL url=new URL(urlString);
  HttpURLConnection urlConnection=null;
  if (url.getProtocol().toLowerCase(Locale.ENGLISH).equals(""String_Node_Str""))   urlConnection=(HttpURLConnection)url.openConnection();
 else {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
    if (sp.getBoolean(SettingsActivity.CB_ALLOWALLSSLCERTIFICATES_STRING,false)) {
      TrustManager[] trustAllCerts=new TrustManager[]{new CustomTrustManager()};
      SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
      sc.init(null,trustAllCerts,new java.security.SecureRandom());
      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
      HttpsURLConnection.setDefaultHostnameVerifier(new AllowAllHostnameVerifier());
    }
    HttpsURLConnection sslConnection=(HttpsURLConnection)url.openConnection();
    urlConnection=sslConnection;
  }
  if (username != null && password != null)   urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Base64.encode((username + ""String_Node_Str"" + password).getBytes()));
  urlConnection.setDoOutput(false);
  urlConnection.setDoInput(true);
  urlConnection.setRequestMethod(""String_Node_Str"");
  urlConnection.setUseCaches(false);
  urlConnection.setConnectTimeout(10000);
  urlConnection.setReadTimeout(120000);
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.connect();
  int HttpResult=urlConnection.getResponseCode();
  if (HttpResult == HttpURLConnection.HTTP_OK) {
    return urlConnection.getInputStream();
  }
 else {
    if (urlConnection.getResponseMessage().equals(""String_Node_Str""))     throw new AuthenticationException(urlConnection.getResponseMessage());
 else     throw new Exception(urlConnection.getResponseMessage());
  }
}","@SuppressLint(""String_Node_Str"") public static InputStream PerformJsonRequest(String urlString,List<NameValuePair> nameValuePairs,final String username,final String password,Context context) throws AuthenticationException, Exception {
  if (nameValuePairs != null)   urlString+=""String_Node_Str"" + URLEncodedUtils.format(nameValuePairs,""String_Node_Str"");
  URL url=new URL(urlString);
  HttpURLConnection urlConnection=getUrlConnection(url,context,username,password);
  urlConnection.setDoOutput(false);
  urlConnection.setDoInput(true);
  urlConnection.setRequestMethod(""String_Node_Str"");
  urlConnection.setUseCaches(false);
  urlConnection.setConnectTimeout(10000);
  urlConnection.setReadTimeout(120000);
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.connect();
  int HttpResult=urlConnection.getResponseCode();
  if (HttpResult == HttpURLConnection.HTTP_OK) {
    return urlConnection.getInputStream();
  }
 else {
    if (urlConnection.getResponseMessage().equals(""String_Node_Str""))     throw new AuthenticationException(urlConnection.getResponseMessage());
 else     throw new Exception(urlConnection.getResponseMessage());
  }
}"
26216,"@SuppressLint(""String_Node_Str"") public static int performTagChangeRequest(String urlString,String username,String password,Context context,String content) throws Exception {
  URL url=new URL(urlString);
  DefaultHttpClient httpClient;
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  if (sp.getBoolean(SettingsActivity.CB_ALLOWALLSSLCERTIFICATES_STRING,false) && url.getProtocol().toLowerCase().equals(""String_Node_Str""))   httpClient=new SSLHttpClient(context);
 else   httpClient=new DefaultHttpClient();
  if (username != null && password != null)   httpClient.getCredentialsProvider().setCredentials(new AuthScope(null,-1),new UsernamePasswordCredentials(username,password));
  HttpPut request=new HttpPut(url.toString());
  request.setEntity(new StringEntity(content));
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  HttpResponse response=httpClient.execute(request);
  return response.getStatusLine().getStatusCode();
}","@SuppressLint(""String_Node_Str"") public static int performTagChangeRequest(String urlString,String username,String password,Context context,String content) throws Exception {
  URL url=new URL(urlString);
  HttpURLConnection urlConnection=getUrlConnection(url,context,username,password);
  urlConnection.setDoOutput(true);
  urlConnection.setRequestMethod(""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (content != null) {
    OutputStreamWriter out=new OutputStreamWriter(urlConnection.getOutputStream());
    out.write(content);
    out.close();
  }
  return urlConnection.getResponseCode();
}"
26217,"@Override public void logout(RestClient client) throws JiraException {
}","public void logout(RestClient client) throws JiraException {
}"
26218,"/** 
 * Sets the Authorization header for the given request.
 * @param req HTTP request to authenticate
 */
public void authenticate(HttpRequest req){
  Credentials creds=new UsernamePasswordCredentials(username,password);
  req.addHeader(new BasicScheme().authenticate(creds,""String_Node_Str"",false));
}","/** 
 * Sets the Authorization header for the given request.
 * @param req HTTP request to authenticate
 */
public void authenticate(HttpRequest req){
  Credentials creds=new UsernamePasswordCredentials(username,password);
  req.addHeader(BasicScheme.authenticate(creds,""String_Node_Str"",false));
}"
26219,"@Override public void initialize(RestClient client) throws JiraException {
}","public void initialize(RestClient client) throws JiraException {
}"
26220,"@Override public void logout(RestClient client) throws JiraException {
  if (token != null) {
    try {
      client.delete(Resource.getAuthUri() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new JiraException(""String_Node_Str"",e);
    }
  }
}","public void logout(RestClient client) throws JiraException {
  if (token != null) {
    try {
      client.delete(Resource.getAuthUri() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new JiraException(""String_Node_Str"",e);
    }
  }
}"
26221,"@Override public void initialize(RestClient client) throws JiraException {
  if (token == null) {
    try {
      JSONObject req=new JSONObject();
      req.put(""String_Node_Str"",username);
      req.put(""String_Node_Str"",password);
      JSON json=client.post(Resource.getAuthUri() + ""String_Node_Str"",req);
      System.out.println(json.toString());
    }
 catch (    Exception ex) {
      throw new JiraException(""String_Node_Str"",ex);
    }
  }
}","public void initialize(RestClient client) throws JiraException {
  if (token == null) {
    try {
      JSONObject req=new JSONObject();
      req.put(""String_Node_Str"",username);
      req.put(""String_Node_Str"",password);
      JSON json=client.post(Resource.getAuthUri() + ""String_Node_Str"",req);
      System.out.println(json.toString());
    }
 catch (    Exception ex) {
      throw new JiraException(""String_Node_Str"",ex);
    }
  }
}"
26222,"private Transition getTransition(String id,boolean name) throws JiraException {
  Transition result=null;
  for (  Transition transition : transitions) {
    if ((name && id.equals(transition.getName()) || (!name && id.equals(transition.getId())))) {
      result=transition;
    }
  }
  if (result == null) {
    final String allTransitionNames=Arrays.toString(transitions.toArray());
    throw new JiraException(""String_Node_Str"" + name + ""String_Node_Str""+ allTransitionNames);
  }
  return result;
}","private Transition getTransition(String id,boolean isName) throws JiraException {
  Transition result=null;
  for (  Transition transition : transitions) {
    if ((isName && id.equals(transition.getName()) || (!isName && id.equals(transition.getId())))) {
      result=transition;
    }
  }
  if (result == null) {
    final String allTransitionNames=Arrays.toString(transitions.toArray());
    throw new JiraException(""String_Node_Str"" + id + ""String_Node_Str""+ allTransitionNames);
  }
  return result;
}"
26223,"private void deserialise(JSONObject json){
  Map map=json;
  self=Field.getString(map.get(""String_Node_Str""));
  id=Field.getString(map.get(""String_Node_Str""));
  type=Field.getResource(LinkType.class,map.get(""String_Node_Str""),restclient);
  inwardIssue=Field.getResource(Issue.class,map.get(""String_Node_Str""),restclient);
}","private void deserialise(JSONObject json){
  Map map=json;
  self=Field.getString(map.get(""String_Node_Str""));
  id=Field.getString(map.get(""String_Node_Str""));
  type=Field.getResource(LinkType.class,map.get(""String_Node_Str""),restclient);
  outwardIssue=Field.getResource(Issue.class,map.get(""String_Node_Str""),restclient);
}"
26224,"@Override public String toString(){
  return String.format(""String_Node_Str"",getType().getInward(),getInwardIssue());
}","@Override public String toString(){
  return String.format(""String_Node_Str"",getType().getInward(),getOutwardIssue());
}"
26225,"@Override public String getPullRequest(){
  return getProperty(SHIPPABLE_PULL_REQUEST);
}","@Override public String getPullRequest(){
  String pullRequest=getProperty(SHIPPABLE_PULL_REQUEST);
  if (""String_Node_Str"".equals(pullRequest)) {
    return null;
  }
  return pullRequest;
}"
26226,"private Map<String,String> env(){
  Map<String,String> env=new HashMap<String,String>();
  env.put(Shippable.SHIPPABLE,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BUILD_ID,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BUILD_NUMBER,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BRANCH,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_COMMIT,""String_Node_Str"");
  return env;
}","private Map<String,String> env(){
  Map<String,String> env=new HashMap<String,String>();
  env.put(Shippable.SHIPPABLE,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BUILD_ID,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BUILD_NUMBER,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_BRANCH,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_COMMIT,""String_Node_Str"");
  env.put(Shippable.SHIPPABLE_PULL_REQUEST,""String_Node_Str"");
  return env;
}"
26227,"@Nullable private CacheItem getFromDiskCache(final String url,boolean checkExpiration){
  CacheItem result=null;
  if (mDiskCache == null) {
    return null;
  }
  checkNotOnMainThread();
  try {
    final String key=transformUrlForDiskCacheKey(url);
    DiskLruCache.Snapshot snapshot=mDiskCache.get(key);
    if (null != snapshot) {
      Object value=readValueFromDisk(snapshot.getInputStream(0));
      DateTime expiresAt=new DateTime(readExpirationFromDisk(snapshot.getInputStream(1)));
      if (value != null) {
        if (checkExpiration && expiresAt.isBeforeNow()) {
          mDiskCache.remove(key);
          scheduleDiskCacheFlush();
        }
 else {
          result=new CacheItem(value,expiresAt);
          if (null != mMemoryCache) {
            mMemoryCache.put(url,result);
          }
        }
      }
 else {
        mDiskCache.remove(key);
        scheduleDiskCacheFlush();
      }
    }
  }
 catch (  Exception e) {
    Timber.e(e,""String_Node_Str"",url);
  }
  return result;
}","@Nullable private CacheItem getFromDiskCache(final String url,boolean checkExpiration){
  CacheItem result=null;
  if (mDiskCache == null) {
    return null;
  }
  checkNotOnMainThread();
  try {
    final String key=transformUrlForDiskCacheKey(url);
    DiskLruCache.Snapshot snapshot=mDiskCache.get(key);
    if (null != snapshot) {
      Object value=readValueFromDisk(snapshot.getInputStream(0));
      DateTime expiresAt=new DateTime(readExpirationFromDisk(snapshot.getInputStream(1)));
      if (value != null) {
        if (checkExpiration && expiresAt.isBeforeNow()) {
          mDiskCache.remove(key);
          scheduleDiskCacheFlush();
        }
 else {
          result=new CacheItem(value,expiresAt);
          if (null != mMemoryCache) {
            mMemoryCache.put(url,result);
          }
        }
      }
 else {
        mDiskCache.remove(key);
        scheduleDiskCacheFlush();
      }
    }
  }
 catch (  Exception e) {
    Timber.e(e,""String_Node_Str"",url);
    remove(url);
  }
  return result;
}"
26228,"ModelCache(){
  mGson=new GsonBuilder().registerTypeAdapter(DateTime.class,new DateTimeDeserializer()).registerTypeAdapter(DateTime.class,new DateTimeSerializer()).create();
}","ModelCache(){
  mGson=new GsonBuilder().registerTypeAdapter(DateTime.class,new ModelCacheDateTimeDeserializer()).registerTypeAdapter(DateTime.class,new ModelCacheDateTimeSerializer()).create();
}"
26229,"@Override void fetchEvents(){
  setIsLoading(true);
  if (Utils.isOnline(getActivity())) {
    loadFirstPage();
  }
 else {
    modelCache.getAsync(mCacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        if (checkValidCache(item)) {
          ArrayList<Event> events=(ArrayList<Event>)item;
          mAdapter.addAll(events);
          setIsLoading(false);
          Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
          ColoredSnackBar.info(snackbar).show();
        }
 else {
          modelCache.removeAsync(mCacheKey);
          onNotFound();
        }
      }
      @Override public void onNotFound(      String key){
        onNotFound();
      }
      private void onNotFound(){
        setIsLoading(false);
        showError(R.string.offline_alert);
      }
    }
);
  }
}","@Override void fetchEvents(){
  setIsLoading(true);
  if (Utils.isOnline(getActivity())) {
    loadFirstPage();
  }
 else {
    modelCache.getAsync(mCacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        if (checkValidCache(item)) {
          ArrayList<Event> events=(ArrayList<Event>)item;
          mAdapter.addAll(events);
          setIsLoading(false);
          Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT).show();
        }
 else {
          modelCache.removeAsync(mCacheKey);
          onNotFound();
        }
      }
      @Override public void onNotFound(      String key){
        onNotFound();
      }
      private void onNotFound(){
        setIsLoading(false);
        showError(R.string.offline_alert);
      }
    }
);
  }
}"
26230,"@Override public void onGet(Object item){
  if (checkValidCache(item)) {
    ArrayList<Event> events=(ArrayList<Event>)item;
    mAdapter.addAll(events);
    setIsLoading(false);
    Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
    ColoredSnackBar.info(snackbar).show();
  }
 else {
    modelCache.removeAsync(mCacheKey);
    onNotFound();
  }
}","@Override public void onGet(Object item){
  if (checkValidCache(item)) {
    ArrayList<Event> events=(ArrayList<Event>)item;
    mAdapter.addAll(events);
    setIsLoading(false);
    Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT).show();
  }
 else {
    modelCache.removeAsync(mCacheKey);
    onNotFound();
  }
}"
26231,"public PlusImageUrlConverter(PlusApi plusApi){
  this.plusApi=plusApi;
  ;
}","public PlusImageUrlConverter(PlusApi plusApi){
  this.plusApi=plusApi;
}"
26232,"private void onEventDetailsLoaded(final EventFullDetails eventFullDetails){
  if (getActivity() == null) {
    return;
  }
  if (getActivity() instanceof Callbacks) {
    ((Callbacks)getActivity()).onEventLoaded(eventFullDetails);
  }
  mEvent=eventFullDetails;
  getActivity().supportInvalidateOptionsMenu();
  updateWithDetails(eventFullDetails);
  App.from(getContext()).getModelCache().getAsync(ModelCache.KEY_CHAPTER_LIST_HUB,new ModelCache.CacheListener(){
    @Override public void onGet(    Object item){
      mDirectory=(Directory)item;
      updateGroupDetails(mDirectory.getGroupById(eventFullDetails.getChapter()));
    }
    @Override public void onNotFound(    String key){
      if (Utils.isOnline(getActivity())) {
        App.from(getContext()).getGdgXHub().getDirectory().enqueue(new Callback<Directory>(){
          @Override public void onSuccess(          Directory directory){
            mDirectory=directory;
            updateGroupDetails(mDirectory.getGroupById(eventFullDetails.getChapter()));
          }
          @Override public void onError(){
            showError(R.string.fetch_chapters_failed);
          }
          @Override public void onNetworkFailure(          Throwable error){
            showError(R.string.offline_alert);
          }
        }
);
      }
 else {
        showError(R.string.offline_alert);
      }
    }
  }
);
}","private void onEventDetailsLoaded(final EventFullDetails eventFullDetails){
  if (getActivity() == null) {
    return;
  }
  if (getActivity() instanceof Callbacks) {
    ((Callbacks)getActivity()).onEventLoaded(eventFullDetails);
  }
  mEvent=eventFullDetails;
  getActivity().supportInvalidateOptionsMenu();
  updateWithDetails(eventFullDetails);
  ModelCache modelCache=App.from(getContext()).getModelCache();
  modelCache.getAsync(ModelCache.KEY_CHAPTER_LIST_HUB,new ModelCache.CacheListener(){
    @Override public void onGet(    Object item){
      mDirectory=(Directory)item;
      updateGroupDetails(mDirectory.getGroupById(eventFullDetails.getChapter()));
    }
    @Override public void onNotFound(    String key){
      if (Utils.isOnline(getActivity())) {
        App.from(getContext()).getGdgXHub().getDirectory().enqueue(new Callback<Directory>(){
          @Override public void onSuccess(          Directory directory){
            mDirectory=directory;
            updateGroupDetails(mDirectory.getGroupById(eventFullDetails.getChapter()));
          }
          @Override public void onError(){
            showError(R.string.fetch_chapters_failed);
          }
          @Override public void onNetworkFailure(          Throwable error){
            showError(R.string.offline_alert);
          }
        }
);
      }
 else {
        showError(R.string.offline_alert);
      }
    }
  }
);
}"
26233,"public static ChapterSelectDialog newInstance(@Nullable Chapter selectedChapter){
  ChapterSelectDialog fragment=new ChapterSelectDialog();
  Bundle args=new Bundle(2);
  args.putParcelable(EXTRA_SELECTED_CHAPTER,selectedChapter);
  fragment.setArguments(args);
  return fragment;
}","public static ChapterSelectDialog newInstance(@Nullable Chapter selectedChapter){
  ChapterSelectDialog fragment=new ChapterSelectDialog();
  Bundle args=new Bundle();
  args.putParcelable(EXTRA_SELECTED_CHAPTER,selectedChapter);
  fragment.setArguments(args);
  return fragment;
}"
26234,"private void setupUI(){
  listView.setOnItemClickListener(this);
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  final CheckedItemAdapter adapter=new CheckedItemAdapter(getContext(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,chapters);
  listView.setAdapter(adapter);
  int selectedItemPos=chapters.indexOf(selectedChapter);
  listView.setSelection(selectedItemPos);
  listView.setItemChecked(selectedItemPos,true);
  final Filter.FilterListener filterListener=new Filter.FilterListener(){
    @Override public void onFilterComplete(    int count){
      int index=findIndexByValueInFilteredListView(selectedChapter);
      listView.setItemChecked(index,true);
    }
  }
;
  cityNameSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      adapter.getFilter().filter(newText,filterListener);
      return true;
    }
  }
);
  cityNameSearchView.requestFocus();
  adapter.getFilter().filter(cityNameSearchView.getQuery(),filterListener);
}","private void setupUI(){
  listView.setOnItemClickListener(this);
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  final CheckedItemAdapter adapter=new CheckedItemAdapter(getContext(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,chapters);
  listView.setAdapter(adapter);
  if (selectedChapter != null) {
    int selectedItemPos=chapters.indexOf(selectedChapter);
    listView.setSelection(selectedItemPos);
    listView.setItemChecked(selectedItemPos,true);
  }
  final Filter.FilterListener filterListener=new Filter.FilterListener(){
    @Override public void onFilterComplete(    int count){
      int index=findIndexByValueInFilteredListView(selectedChapter);
      listView.setItemChecked(index,true);
    }
  }
;
  cityNameSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      adapter.getFilter().filter(newText,filterListener);
      return true;
    }
  }
);
  cityNameSearchView.requestFocus();
  adapter.getFilter().filter(cityNameSearchView.getQuery(),filterListener);
}"
26235,"private int findIndexByValueInFilteredListView(Chapter value){
  if (value == null || listView == null) {
    return -1;
  }
  Adapter adapter=listView.getAdapter();
  for (int i=adapter.getCount() - 1; i >= 0; i--) {
    Chapter item=(Chapter)adapter.getItem(i);
    if (item.equals(value)) {
      return i;
    }
  }
  return -1;
}","private int findIndexByValueInFilteredListView(@Nullable Chapter value){
  if (value == null || listView == null) {
    return -1;
  }
  Adapter adapter=listView.getAdapter();
  for (int i=adapter.getCount() - 1; i >= 0; i--) {
    Chapter item=(Chapter)adapter.getItem(i);
    if (item.equals(value)) {
      return i;
    }
  }
  return -1;
}"
26236,"void initUI(){
  mViewPagerAdapter=new ChapterFragmentPagerAdapter(this,getSupportFragmentManager(),selectedChapterId);
  mViewPager.setAdapter(mViewPagerAdapter);
  mViewPager.setOffscreenPageLimit(3);
  updateSelectionFor(findChapterById(selectedChapterId));
  recordStartPageView();
  mTabLayout.setupWithViewPager(mViewPager);
  if (SECTION_EVENTS.equals(getIntent().getStringExtra(Const.EXTRA_SECTION))) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        mViewPager.setCurrentItem(2,true);
      }
    }
,500);
  }
}","void initUI(){
  mViewPagerAdapter=new ChapterFragmentPagerAdapter(this,getSupportFragmentManager(),selectedChapterId);
  mViewPager.setAdapter(mViewPagerAdapter);
  mViewPager.setOffscreenPageLimit(3);
  Chapter selectedChapter=findChapterById(selectedChapterId);
  if (selectedChapter != null) {
    updateSelectionFor(selectedChapter);
  }
  recordStartPageView();
  mTabLayout.setupWithViewPager(mViewPager);
  if (SECTION_EVENTS.equals(getIntent().getStringExtra(Const.EXTRA_SECTION))) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        mViewPager.setCurrentItem(2,true);
      }
    }
,500);
  }
}"
26237,"/** 
 * Called when the activity is first created.
 * @param savedInstanceState If the activity is being re-initialized afterpreviously being shut down then this Bundle contains the data it most recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  locationComparator=new ChapterComparator(PrefUtils.getHomeChapterIdNotNull(this),App.getInstance().getLastLocation());
  setupChapterSwitcher();
  if (savedInstanceState != null) {
    chapters=savedInstanceState.getParcelableArrayList(ARG_CHAPTERS);
    selectedChapterId=savedInstanceState.getString(ARG_SELECTED_CHAPTER);
  }
 else {
    Intent intent=getIntent();
    if (FirstStartActivity.ACTION_FIRST_START.equals(intent.getAction())) {
      Timber.d(""String_Node_Str"");
      if (PrefUtils.isSignedIn(this)) {
        mFirstStart=true;
      }
    }
    selectedChapterId=getChapterIdFromIntent(intent);
  }
  if (selectedChapterId == null) {
    selectedChapterId=PrefUtils.getHomeChapterIdNotNull(this);
  }
  if (chapters != null) {
    initUI();
  }
 else {
    App.getInstance().getModelCache().getAsync(ModelCache.KEY_CHAPTER_LIST_HUB,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        onDirectoryLoaded((Directory)item);
      }
      @Override public void onNotFound(      String key){
        if (Utils.isOnline(MainActivity.this)) {
          fetchChapters();
        }
 else {
          showError(R.string.offline_alert);
        }
      }
    }
);
  }
  if (PrefUtils.shouldShowSeasonsGreetings(this)) {
    SeasonsGreetingsFragment seasonsGreetings=new SeasonsGreetingsFragment();
    seasonsGreetings.show(getSupportFragmentManager(),""String_Node_Str"");
  }
}","/** 
 * Called when the activity is first created.
 * @param savedInstanceState If the activity is being re-initialized afterpreviously being shut down then this Bundle contains the data it most recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  locationComparator=new ChapterComparator(PrefUtils.getHomeChapterIdNotNull(this),App.getInstance().getLastLocation());
  setupChapterSwitcher();
  if (savedInstanceState != null) {
    chapters=savedInstanceState.getParcelableArrayList(ARG_CHAPTERS);
    selectedChapterId=savedInstanceState.getString(ARG_SELECTED_CHAPTER);
  }
 else {
    Intent intent=getIntent();
    if (FirstStartActivity.ACTION_FIRST_START.equals(intent.getAction())) {
      Timber.d(""String_Node_Str"");
      if (PrefUtils.isSignedIn(this)) {
        mFirstStart=true;
      }
    }
    selectedChapterId=getChapterIdFromIntent(intent);
  }
  if (selectedChapterId == null) {
    selectedChapterId=PrefUtils.getHomeChapterIdNotNull(this);
  }
  if (!chapters.isEmpty()) {
    initUI();
  }
 else {
    App.getInstance().getModelCache().getAsync(ModelCache.KEY_CHAPTER_LIST_HUB,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        onDirectoryLoaded((Directory)item);
      }
      @Override public void onNotFound(      String key){
        if (Utils.isOnline(MainActivity.this)) {
          fetchChapters();
        }
 else {
          showError(R.string.offline_alert);
        }
      }
    }
);
  }
  if (PrefUtils.shouldShowSeasonsGreetings(this)) {
    SeasonsGreetingsFragment seasonsGreetings=new SeasonsGreetingsFragment();
    seasonsGreetings.show(getSupportFragmentManager(),""String_Node_Str"");
  }
}"
26238,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (chapters != null && !chapters.isEmpty()) {
    outState.putParcelableArrayList(ARG_CHAPTERS,chapters);
  }
  if (mViewPagerAdapter != null) {
    outState.putString(ARG_SELECTED_CHAPTER,mViewPagerAdapter.getSelectedChapter());
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (!chapters.isEmpty()) {
    outState.putParcelableArrayList(ARG_CHAPTERS,chapters);
  }
  if (mViewPagerAdapter != null) {
    outState.putString(ARG_SELECTED_CHAPTER,mViewPagerAdapter.getSelectedChapter());
  }
}"
26239,"private void addUrlToUI(Urls url){
  TextView tv=(TextView)mInflater.inflate(R.layout.list_resource_item,(ViewGroup)getView(),false);
  tv.setText(Html.fromHtml(""String_Node_Str"" + url.getValue() + ""String_Node_Str""+ url.getLabel()+ ""String_Node_Str""));
  mResourcesBox.addView(tv);
}","private void addUrlToUI(Urls url){
  TextView tv=(TextView)mInflater.inflate(R.layout.list_resource_item,(ViewGroup)getView(),false);
  tv.setText(Html.fromHtml(""String_Node_Str"" + url.getValue() + ""String_Node_Str""+ url.getLabel()+ ""String_Node_Str""));
  tv.setMovementMethod(LinkMovementMethod.getInstance());
  mResourcesBox.addView(tv);
}"
26240,"private void updateChapterUIFrom(Person chapter){
  if (mTagline != null) {
    mTagline.setText(chapter.getTagline());
  }
  if (mAbout != null) {
    mAbout.setText(getAboutText(chapter));
  }
}","private void updateChapterUIFrom(Person chapter){
  if (mTagline != null) {
    mTagline.setText(chapter.getTagline());
  }
  if (mAbout != null) {
    mAbout.setText(getAboutText(chapter));
    mAbout.setMovementMethod(LinkMovementMethod.getInstance());
  }
}"
26241,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  listView.setOnItemClickListener(this);
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  final CheckedItemAdapter adapter=new CheckedItemAdapter(getContext(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,chapters);
  listView.setAdapter(adapter);
  int selectedItemPos=chapters.indexOf(selectedChapter);
  listView.setSelection(selectedItemPos);
  listView.setItemChecked(selectedItemPos,true);
  final Filter.FilterListener filterListener=new Filter.FilterListener(){
    @Override public void onFilterComplete(    int count){
      int index=findIndexByValueInFilteredListView(selectedChapter);
      listView.setItemChecked(index,true);
    }
  }
;
  cityNameSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      adapter.getFilter().filter(newText,filterListener);
      return true;
    }
  }
);
  cityNameSearchView.requestFocus();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  listView.setOnItemClickListener(this);
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  final CheckedItemAdapter adapter=new CheckedItemAdapter(getContext(),android.R.layout.simple_list_item_single_choice,android.R.id.text1,chapters);
  listView.setAdapter(adapter);
  int selectedItemPos=chapters.indexOf(selectedChapter);
  listView.setSelection(selectedItemPos);
  listView.setItemChecked(selectedItemPos,true);
  final Filter.FilterListener filterListener=new Filter.FilterListener(){
    @Override public void onFilterComplete(    int count){
      int index=findIndexByValueInFilteredListView(selectedChapter);
      listView.setItemChecked(index,true);
    }
  }
;
  cityNameSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      adapter.getFilter().filter(newText,filterListener);
      return true;
    }
  }
);
  cityNameSearchView.requestFocus();
  adapter.getFilter().filter(cityNameSearchView.getQuery(),filterListener);
}"
26242,"public void setAlarmForNotification(){
  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(SummitNotificationReceiver.ACTION_SUMMIT_NOTIFICATION);
  DateTime summitDateTime=new DateTime(2016,5,17,15,0,DateTimeZone.UTC);
  am.set(AlarmManager.RTC_WAKEUP,summitDateTime.getMillis(),PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT));
}","public void setAlarmForNotification(){
  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(SummitNotificationReceiver.ACTION_SUMMIT_NOTIFICATION);
  am.set(AlarmManager.RTC_WAKEUP,SUMMIT_DATE_TIME.getMillis(),PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT));
}"
26243,"public boolean shouldSetAlarm(){
  return !PrefUtils.isSummitNotificationSent(context);
}","public boolean shouldSetAlarm(){
  return !PrefUtils.isSummitNotificationSent(context) && SUMMIT_DATE_TIME.isAfterNow();
}"
26244,"@Nullable public static String getCurrentPersonId(GoogleApiClient apiClient){
  Person plusPerson=null;
  if (apiClient.hasConnectedApi(Plus.API)) {
    plusPerson=Plus.PeopleApi.getCurrentPerson(apiClient);
  }
  return plusPerson != null ? plusPerson.getId() : null;
}","@Nullable public static String getCurrentPersonId(GoogleApiClient apiClient){
  Person plusPerson=null;
  if (apiClient.isConnected() && apiClient.hasConnectedApi(Plus.API)) {
    plusPerson=Plus.PeopleApi.getCurrentPerson(apiClient);
  }
  return plusPerson != null ? plusPerson.getId() : null;
}"
26245,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_arrow_tagged);
  adapter=new OrganizerAdapter();
  if (!PrefUtils.isSignedIn(this)) {
    finish();
  }
  taggedList.setLayoutManager(new LinearLayoutManager(this));
  taggedList.addItemDecoration(new DividerItemDecoration(this,null));
  taggedList.setAdapter(adapter);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_arrow_tagged);
  getActionBarToolbar().setNavigationIcon(R.drawable.ic_up);
  adapter=new OrganizerAdapter();
  if (!PrefUtils.isSignedIn(this)) {
    finish();
  }
  taggedList.setLayoutManager(new LinearLayoutManager(this));
  taggedList.addItemDecoration(new DividerItemDecoration(this,null));
  taggedList.setAdapter(adapter);
}"
26246,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_youtube);
  YouTubePlayerSupportFragment mPlayerFragment=(YouTubePlayerSupportFragment)getSupportFragmentManager().findFragmentById(R.id.youtube_fragment);
  mPlayerFragment.initialize(BuildConfig.ANDROID_SIMPLE_API_ACCESS_KEY,this);
  setRequestedOrientation(PORTRAIT_ORIENTATION);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_youtube);
  YouTubePlayerSupportFragment mPlayerFragment=(YouTubePlayerSupportFragment)getSupportFragmentManager().findFragmentById(R.id.youtube_fragment);
  mPlayerFragment.initialize(BuildConfig.ANDROID_SIMPLE_API_ACCESS_KEY,this);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
}"
26247,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  mInflater=LayoutInflater.from(getActivity());
  final String chapterPlusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  if (Utils.isOnline(getActivity())) {
    new Builder<>(String.class,Person.class).setOnBackgroundExecuteListener(new CommonAsyncTask.OnBackgroundExecuteListener<String,Person>(){
      @Override public Person doInBackground(      String... params){
        if (isAdded()) {
          return GdgNavDrawerActivity.getPersonSync(chapterPlusId);
        }
 else {
          return null;
        }
      }
    }
).setOnPostExecuteListener(new CommonAsyncTask.OnPostExecuteListener<String,Person>(){
      @Override public void onPostExecute(      String[] params,      Person person){
        if (person != null) {
          updateChapterUIFrom(person);
          updateOrganizersOnline(person);
        }
      }
    }
).buildAndExecute();
  }
 else {
    App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + chapterPlusId,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        final Person chachedChapter=(Person)item;
        updateChapterUIFrom(chachedChapter);
        for (int chapterIndex=0; chapterIndex < chachedChapter.getUrls().size(); chapterIndex++) {
          Person.Urls url=chachedChapter.getUrls().get(chapterIndex);
          if (url.getValue().contains(""String_Node_Str"") && !url.getValue().contains(""String_Node_Str"")) {
            String org=url.getValue();
            try {
              String id=getGPlusIdFromPersonUrl(url);
              final int indexAsFinal=chapterIndex;
              App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + id,false,new ModelCache.CacheListener(){
                @Override public void onGet(                Object item){
                  addOrganizerToUI((Person)item);
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
                @Override public void onNotFound(                String key){
                  addUnknowOrganizerToUI();
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
              }
);
            }
 catch (            Exception ex) {
              Snackbar snackbar=Snackbar.make(getView(),getString(R.string.bogus_organizer,org),Snackbar.LENGTH_SHORT);
              ColoredSnackBar.alert(snackbar).show();
            }
          }
        }
      }
      @Override public void onNotFound(      String key){
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  mInflater=LayoutInflater.from(getActivity());
  final String chapterPlusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  if (Utils.isOnline(getActivity())) {
    new Builder<>(String.class,Person.class).setOnBackgroundExecuteListener(new CommonAsyncTask.OnBackgroundExecuteListener<String,Person>(){
      @Override public Person doInBackground(      String... params){
        if (isAdded()) {
          return GdgNavDrawerActivity.getPersonSync(chapterPlusId);
        }
 else {
          return null;
        }
      }
    }
).setOnPostExecuteListener(new CommonAsyncTask.OnPostExecuteListener<String,Person>(){
      @Override public void onPostExecute(      String[] params,      Person person){
        if (person != null && getActivity() != null) {
          updateChapterUIFrom(person);
          updateOrganizersOnline(person);
        }
      }
    }
).buildAndExecute();
  }
 else {
    App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + chapterPlusId,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        final Person chachedChapter=(Person)item;
        updateChapterUIFrom(chachedChapter);
        for (int chapterIndex=0; chapterIndex < chachedChapter.getUrls().size(); chapterIndex++) {
          Person.Urls url=chachedChapter.getUrls().get(chapterIndex);
          if (url.getValue().contains(""String_Node_Str"") && !url.getValue().contains(""String_Node_Str"")) {
            String org=url.getValue();
            try {
              String id=getGPlusIdFromPersonUrl(url);
              final int indexAsFinal=chapterIndex;
              App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + id,false,new ModelCache.CacheListener(){
                @Override public void onGet(                Object item){
                  addOrganizerToUI((Person)item);
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
                @Override public void onNotFound(                String key){
                  addUnknowOrganizerToUI();
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
              }
);
            }
 catch (            Exception ex) {
              Snackbar snackbar=Snackbar.make(getView(),getString(R.string.bogus_organizer,org),Snackbar.LENGTH_SHORT);
              ColoredSnackBar.alert(snackbar).show();
            }
          }
        }
      }
      @Override public void onNotFound(      String key){
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}"
26248,"@Override public void onPostExecute(String[] params,Person person){
  if (person != null) {
    updateChapterUIFrom(person);
    updateOrganizersOnline(person);
  }
}","@Override public void onPostExecute(String[] params,Person person){
  if (person != null && getActivity() != null) {
    updateChapterUIFrom(person);
    updateOrganizersOnline(person);
  }
}"
26249,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.arrow_lb:
    startActivityForResult(Games.Leaderboards.getLeaderboardIntent(getGoogleApiClient(),Const.ARROW_LB),REQUEST_LEADERBOARD);
  return true;
case R.id.arrow_tagged:
startActivity(new Intent(this,ArrowTaggedActivity.class));
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.arrow_lb:
    startActivityForResult(Games.Leaderboards.getLeaderboardIntent(getGoogleApiClient(),Const.ARROW_LB),REQUEST_LEADERBOARD);
  return true;
case R.id.arrow_tagged:
Intent i=new Intent(this,ArrowTaggedActivity.class);
Bundle data=new Bundle();
data.putInt(EXTRA_SELECTED_DRAWER_ITEM_ID,Const.DRAWER_ARROW);
i.putExtras(data);
startActivity(i);
return true;
}
return super.onOptionsItemSelected(item);
}"
26250,"public View createSwipeRefresh(final View listFragmentView){
  mSwipeRefreshLayout=new ListFragmentSwipeRefreshLayout(getActivity());
  mSwipeRefreshLayout.addView(listFragmentView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  mSwipeRefreshLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  return mSwipeRefreshLayout;
}","public View createSwipeRefresh(final View listFragmentView){
  mSwipeRefreshLayout=new ListFragmentSwipeRefreshLayout(getActivity());
  mSwipeRefreshLayout.addView(listFragmentView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  mSwipeRefreshLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mSwipeRefreshLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mSwipeRefreshLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      mSwipeRefreshLayout.setRecyclerView(getListView());
    }
  }
);
  return mSwipeRefreshLayout;
}"
26251,"public View createSwipeRefresh(final View listFragmentView){
  mSwipeRefreshLayout=new ListFragmentSwipeRefreshLayout(getActivity());
  mSwipeRefreshLayout.addView(listFragmentView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  mSwipeRefreshLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  return mSwipeRefreshLayout;
}","public View createSwipeRefresh(final View listFragmentView){
  mSwipeRefreshLayout=new ListFragmentSwipeRefreshLayout(getActivity());
  mSwipeRefreshLayout.addView(listFragmentView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  mSwipeRefreshLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mSwipeRefreshLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mSwipeRefreshLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      mSwipeRefreshLayout.setRecyclerView(getListView());
    }
  }
);
  return mSwipeRefreshLayout;
}"
26252,"@Override public void onNotFound(String key){
  setIsLoading(false);
  Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
  ColoredSnackBar.alert(snackbar).show();
}","private void onNotFound(){
  setIsLoading(false);
  Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
  ColoredSnackBar.alert(snackbar).show();
}"
26253,"@Override void fetchEvents(){
  final DateTime now=DateTime.now();
  int mStart=(int)(now.minusMonths(2).dayOfMonth().withMinimumValue().getMillis() / 1000);
  int mEnd=(int)(now.plusYears(1).dayOfMonth().withMaximumValue().getMillis() / 1000);
  setIsLoading(true);
  final String plusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  final String cacheKey=""String_Node_Str"" + plusId;
  if (Utils.isOnline(getActivity())) {
    App.getInstance().getGroupDirectory().getChapterEventList(mStart,mEnd,plusId,new Callback<ArrayList<Event>>(){
      @Override public void success(      ArrayList<Event> events,      retrofit.client.Response response){
        mEvents.addAll(events);
        App.getInstance().getModelCache().putAsync(cacheKey,mEvents,DateTime.now().plusHours(2),new ModelCache.CachePutListener(){
          @Override public void onPutIntoCache(){
            mAdapter.addAll(mEvents);
            setIsLoading(false);
          }
        }
);
      }
      @Override public void failure(      RetrofitError error){
        onError(error);
      }
    }
);
  }
 else {
    App.getInstance().getModelCache().getAsync(cacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        if (checkValidCache(item)) {
          ArrayList<Event> events=(ArrayList<Event>)item;
          mAdapter.addAll(events);
          setIsLoading(false);
          Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
          ColoredSnackBar.info(snackbar).show();
        }
 else {
          App.getInstance().getModelCache().removeAsync(cacheKey);
        }
      }
      @Override public void onNotFound(      String key){
        setIsLoading(false);
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}","@Override void fetchEvents(){
  final DateTime now=DateTime.now();
  int mStart=(int)(now.minusMonths(2).dayOfMonth().withMinimumValue().getMillis() / 1000);
  int mEnd=(int)(now.plusYears(1).dayOfMonth().withMaximumValue().getMillis() / 1000);
  setIsLoading(true);
  final String plusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  final String cacheKey=""String_Node_Str"" + plusId;
  if (Utils.isOnline(getActivity())) {
    App.getInstance().getGroupDirectory().getChapterEventList(mStart,mEnd,plusId,new Callback<ArrayList<Event>>(){
      @Override public void success(      ArrayList<Event> events,      retrofit.client.Response response){
        mEvents.addAll(events);
        App.getInstance().getModelCache().putAsync(cacheKey,mEvents,DateTime.now().plusHours(2),new ModelCache.CachePutListener(){
          @Override public void onPutIntoCache(){
            mAdapter.addAll(mEvents);
            setIsLoading(false);
          }
        }
);
      }
      @Override public void failure(      RetrofitError error){
        onError(error);
      }
    }
);
  }
 else {
    App.getInstance().getModelCache().getAsync(cacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        if (checkValidCache(item)) {
          ArrayList<Event> events=(ArrayList<Event>)item;
          mAdapter.addAll(events);
          setIsLoading(false);
          Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
          ColoredSnackBar.info(snackbar).show();
        }
 else {
          App.getInstance().getModelCache().removeAsync(cacheKey);
          onNotFound();
        }
      }
      @Override public void onNotFound(      String key){
        onNotFound();
      }
      private void onNotFound(){
        setIsLoading(false);
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}"
26254,"@Override public void onGet(Object item){
  if (checkValidCache(item)) {
    ArrayList<Event> events=(ArrayList<Event>)item;
    mAdapter.addAll(events);
    setIsLoading(false);
    Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
    ColoredSnackBar.info(snackbar).show();
  }
 else {
    App.getInstance().getModelCache().removeAsync(cacheKey);
  }
}","@Override public void onGet(Object item){
  if (checkValidCache(item)) {
    ArrayList<Event> events=(ArrayList<Event>)item;
    mAdapter.addAll(events);
    setIsLoading(false);
    Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
    ColoredSnackBar.info(snackbar).show();
  }
 else {
    App.getInstance().getModelCache().removeAsync(cacheKey);
    onNotFound();
  }
}"
26255,"@Override protected Void doInBackground(Void... voids){
  put(url,obj,expiresAt);
  return null;
}","@Override protected Void doInBackground(Void... voids){
  ModelCache.this.remove(url);
  return null;
}"
26256,"@Override void fetchEvents(){
  final DateTime now=DateTime.now();
  int mStart=(int)(now.minusMonths(2).dayOfMonth().withMinimumValue().getMillis() / 1000);
  int mEnd=(int)(now.plusYears(1).dayOfMonth().withMaximumValue().getMillis() / 1000);
  setIsLoading(true);
  final String plusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  final String cacheKey=""String_Node_Str"" + plusId;
  if (Utils.isOnline(getActivity())) {
    App.getInstance().getGroupDirectory().getChapterEventList(mStart,mEnd,plusId,new Callback<ArrayList<Event>>(){
      @Override public void success(      ArrayList<Event> events,      retrofit.client.Response response){
        mEvents.addAll(events);
        App.getInstance().getModelCache().putAsync(cacheKey,mEvents,DateTime.now().plusHours(2),new ModelCache.CachePutListener(){
          @Override public void onPutIntoCache(){
            mAdapter.addAll(mEvents);
            setIsLoading(false);
          }
        }
);
      }
      @Override public void failure(      RetrofitError error){
        onError(error);
      }
    }
);
  }
 else {
    App.getInstance().getModelCache().getAsync(cacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        ArrayList<Event> events=(ArrayList<Event>)item;
        mAdapter.addAll(events);
        setIsLoading(false);
        Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.info(snackbar).show();
      }
      @Override public void onNotFound(      String key){
        setIsLoading(false);
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}","@Override void fetchEvents(){
  final DateTime now=DateTime.now();
  int mStart=(int)(now.minusMonths(2).dayOfMonth().withMinimumValue().getMillis() / 1000);
  int mEnd=(int)(now.plusYears(1).dayOfMonth().withMaximumValue().getMillis() / 1000);
  setIsLoading(true);
  final String plusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  final String cacheKey=""String_Node_Str"" + plusId;
  if (Utils.isOnline(getActivity())) {
    App.getInstance().getGroupDirectory().getChapterEventList(mStart,mEnd,plusId,new Callback<ArrayList<Event>>(){
      @Override public void success(      ArrayList<Event> events,      retrofit.client.Response response){
        mEvents.addAll(events);
        App.getInstance().getModelCache().putAsync(cacheKey,mEvents,DateTime.now().plusHours(2),new ModelCache.CachePutListener(){
          @Override public void onPutIntoCache(){
            mAdapter.addAll(mEvents);
            setIsLoading(false);
          }
        }
);
      }
      @Override public void failure(      RetrofitError error){
        onError(error);
      }
    }
);
  }
 else {
    App.getInstance().getModelCache().getAsync(cacheKey,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        if (checkValidCache(item)) {
          ArrayList<Event> events=(ArrayList<Event>)item;
          mAdapter.addAll(events);
          setIsLoading(false);
          Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
          ColoredSnackBar.info(snackbar).show();
        }
 else {
          App.getInstance().getModelCache().removeAsync(cacheKey);
        }
      }
      @Override public void onNotFound(      String key){
        setIsLoading(false);
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}"
26257,"@Override public void onGet(Object item){
  ArrayList<Event> events=(ArrayList<Event>)item;
  mAdapter.addAll(events);
  setIsLoading(false);
  Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
  ColoredSnackBar.info(snackbar).show();
}","@Override public void onGet(Object item){
  if (checkValidCache(item)) {
    ArrayList<Event> events=(ArrayList<Event>)item;
    mAdapter.addAll(events);
    setIsLoading(false);
    Snackbar snackbar=Snackbar.make(getView(),R.string.cached_content,Snackbar.LENGTH_SHORT);
    ColoredSnackBar.info(snackbar).show();
  }
 else {
    App.getInstance().getModelCache().removeAsync(cacheKey);
  }
}"
26258,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  mInflater=LayoutInflater.from(getActivity());
  if (Utils.isOnline(getActivity())) {
    new Builder<>(String.class,Person.class).addParameter(getArguments().getString(Const.EXTRA_PLUS_ID)).setOnBackgroundExecuteListener(new CommonAsyncTask.OnBackgroundExecuteListener<String,Person>(){
      @Override public Person doInBackground(      String... params){
        if (isAdded()) {
          return GdgNavDrawerActivity.getPersonSync(((GdgNavDrawerActivity)getActivity()).getGoogleApiClient(),params[0]);
        }
 else {
          return null;
        }
      }
    }
).setOnPostExecuteListener(new CommonAsyncTask.OnPostExecuteListener<String,Person>(){
      @Override public void onPostExecute(      String[] params,      Person person){
        if (person != null) {
          updateChapterUIFrom(person);
          updateOrganizersOnline(person);
        }
      }
    }
).buildAndExecute();
  }
 else {
    final String plusId=getArguments().getString(Const.EXTRA_PLUS_ID);
    App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + plusId,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        final Person chachedChapter=(Person)item;
        updateChapterUIFrom(chachedChapter);
        for (int chapterIndex=0; chapterIndex < chachedChapter.getUrls().size(); chapterIndex++) {
          Person.Urls url=chachedChapter.getUrls().get(chapterIndex);
          if (url.getValue().contains(""String_Node_Str"") && !url.getValue().contains(""String_Node_Str"")) {
            String org=url.getValue();
            try {
              String id=getGPlusIdFromPersonUrl(url);
              final int indexAsFinal=chapterIndex;
              App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + id,false,new ModelCache.CacheListener(){
                @Override public void onGet(                Object item){
                  addOrganizerToUI((Person)item);
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
                @Override public void onNotFound(                String key){
                  addUnknowOrganizerToUI();
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
              }
);
            }
 catch (            Exception ex) {
              Snackbar snackbar=Snackbar.make(getView(),getString(R.string.bogus_organizer,org),Snackbar.LENGTH_SHORT);
              ColoredSnackBar.alert(snackbar).show();
            }
          }
        }
      }
      @Override public void onNotFound(      String key){
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  mInflater=LayoutInflater.from(getActivity());
  final String chapterPlusId=getArguments().getString(Const.EXTRA_PLUS_ID);
  if (Utils.isOnline(getActivity())) {
    new Builder<>(String.class,Person.class).setOnBackgroundExecuteListener(new CommonAsyncTask.OnBackgroundExecuteListener<String,Person>(){
      @Override public Person doInBackground(      String... params){
        if (isAdded()) {
          return GdgNavDrawerActivity.getPersonSync(((GdgNavDrawerActivity)getActivity()).getGoogleApiClient(),chapterPlusId);
        }
 else {
          return null;
        }
      }
    }
).setOnPostExecuteListener(new CommonAsyncTask.OnPostExecuteListener<String,Person>(){
      @Override public void onPostExecute(      String[] params,      Person person){
        if (person != null) {
          updateChapterUIFrom(person);
          updateOrganizersOnline(person);
        }
      }
    }
).buildAndExecute();
  }
 else {
    App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + chapterPlusId,false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        final Person chachedChapter=(Person)item;
        updateChapterUIFrom(chachedChapter);
        for (int chapterIndex=0; chapterIndex < chachedChapter.getUrls().size(); chapterIndex++) {
          Person.Urls url=chachedChapter.getUrls().get(chapterIndex);
          if (url.getValue().contains(""String_Node_Str"") && !url.getValue().contains(""String_Node_Str"")) {
            String org=url.getValue();
            try {
              String id=getGPlusIdFromPersonUrl(url);
              final int indexAsFinal=chapterIndex;
              App.getInstance().getModelCache().getAsync(Const.CACHE_KEY_PERSON + id,false,new ModelCache.CacheListener(){
                @Override public void onGet(                Object item){
                  addOrganizerToUI((Person)item);
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
                @Override public void onNotFound(                String key){
                  addUnknowOrganizerToUI();
                  if (indexAsFinal == chachedChapter.getUrls().size()) {
                    setIsLoading(false);
                  }
                }
              }
);
            }
 catch (            Exception ex) {
              Snackbar snackbar=Snackbar.make(getView(),getString(R.string.bogus_organizer,org),Snackbar.LENGTH_SHORT);
              ColoredSnackBar.alert(snackbar).show();
            }
          }
        }
      }
      @Override public void onNotFound(      String key){
        Snackbar snackbar=Snackbar.make(getView(),R.string.offline_alert,Snackbar.LENGTH_SHORT);
        ColoredSnackBar.alert(snackbar).show();
      }
    }
);
  }
}"
26259,"@Override public Person doInBackground(String... params){
  if (isAdded()) {
    return GdgNavDrawerActivity.getPersonSync(((GdgNavDrawerActivity)getActivity()).getGoogleApiClient(),params[0]);
  }
 else {
    return null;
  }
}","@Override public Person doInBackground(String... params){
  if (isAdded()) {
    return GdgNavDrawerActivity.getPersonSync(((GdgNavDrawerActivity)getActivity()).getGoogleApiClient(),chapterPlusId);
  }
 else {
    return null;
  }
}"
26260,"public static Person getPersonSync(final GoogleApiClient apiClient,final String gplusId){
  final String cacheUrl=Const.CACHE_KEY_PERSON + gplusId;
  Object cachedPerson=App.getInstance().getModelCache().get(cacheUrl);
  if (cachedPerson instanceof Person) {
    return (Person)cachedPerson;
  }
  if (cachedPerson != null) {
    App.getInstance().getModelCache().remove(cacheUrl);
  }
  People.LoadPeopleResult result=Plus.PeopleApi.load(apiClient,gplusId).await();
  if (result.getStatus().getStatusCode() == CommonStatusCodes.SUCCESS) {
    PersonBuffer personBuffer=result.getPersonBuffer();
    try {
      if (personBuffer.getCount() > 0) {
        Person person=personBuffer.get(0);
        App.getInstance().getModelCache().put(cacheUrl,person,DateTime.now().plusDays(2));
        return person;
      }
    }
  finally {
      personBuffer.close();
    }
  }
  return null;
}","public static Person getPersonSync(final GoogleApiClient apiClient,final String gplusId){
  final String cacheUrl=Const.CACHE_KEY_PERSON + gplusId;
  Object cachedPerson=App.getInstance().getModelCache().get(cacheUrl);
  Person person=null;
  if (cachedPerson instanceof Person) {
    person=(Person)cachedPerson;
    if (person.getId() != null) {
      return person;
    }
  }
  if (cachedPerson != null) {
    App.getInstance().getModelCache().remove(cacheUrl);
  }
  People.LoadPeopleResult result=Plus.PeopleApi.load(apiClient,gplusId).await();
  if (result.getStatus().getStatusCode() == CommonStatusCodes.SUCCESS) {
    PersonBuffer personBuffer=result.getPersonBuffer();
    try {
      if (personBuffer.getCount() > 0) {
        person=personBuffer.get(0);
        App.getInstance().getModelCache().put(cacheUrl,person,DateTime.now().plusDays(2));
      }
    }
  finally {
      personBuffer.close();
    }
  }
  return person;
}"
26261,"@Override public CharSequence getPageTitle(int position){
  if (0 < position && position < mPages.length) {
    return mContext.getString(mPages[position]);
  }
 else {
    return ""String_Node_Str"";
  }
}","@Override public CharSequence getPageTitle(int position){
  if (0 <= position && position < mPages.length) {
    return mContext.getString(mPages[position]);
  }
 else {
    return ""String_Node_Str"";
  }
}"
26262,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Timber.i(""String_Node_Str"");
  setContentView(R.layout.activity_first_start);
  App.getInstance().updateLastLocation();
  ButterKnife.inject(this);
  mViewPagerAdapter=new FirstStartPageAdapter(getSupportFragmentManager());
  mViewPager.setAdapter(mViewPagerAdapter);
  mGcm=GoogleCloudMessaging.getInstance(this);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int i,    float v,    int i2){
    }
    @Override public void onPageSelected(    int i){
      Tracker t=App.getInstance().getTracker();
      t.setScreenName(""String_Node_Str"" + (1 + i));
      t.send(new HitBuilders.AppViewBuilder().build());
    }
    @Override public void onPageScrollStateChanged(    int i){
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_first_start);
  App.getInstance().updateLastLocation();
  ButterKnife.inject(this);
  mViewPagerAdapter=new FirstStartPageAdapter(getSupportFragmentManager());
  mViewPager.setAdapter(mViewPagerAdapter);
  mGcm=GoogleCloudMessaging.getInstance(this);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int i,    float v,    int i2){
    }
    @Override public void onPageSelected(    int i){
      Tracker t=App.getInstance().getTracker();
      t.setScreenName(""String_Node_Str"" + (1 + i));
      t.send(new HitBuilders.AppViewBuilder().build());
    }
    @Override public void onPageScrollStateChanged(    int i){
    }
  }
);
}"
26263,"@Override public int getItemViewType(int position){
  Item item=getItemInternal(position);
  Activity activity=item.getActivity();
  if (activity.getObject().getAttachments() == null || activity.getObject().getAttachments().isEmpty())   return 0;
 else {
    Activity.PlusObject.Attachments attachment=activity.getObject().getAttachments().get(0);
    String objectType=attachment.getObjectType();
    if (objectType.equals(""String_Node_Str""))     return 1;
 else     if (objectType.equals(""String_Node_Str""))     return 2;
 else     if (objectType.equals(""String_Node_Str""))     return 3;
 else     if (objectType.equals(""String_Node_Str""))     return 4;
 else     if (objectType.equals(""String_Node_Str""))     return 5;
  }
  return 0;
}","@Override public int getItemViewType(int position){
  if (position >= 0) {
    if (position >= getItemCount()) {
      position=position % getItemCount();
    }
    Item item=getItemInternal(position);
    Activity activity=item.getActivity();
    if (activity.getObject().getAttachments() == null || activity.getObject().getAttachments().isEmpty()) {
      return 0;
    }
 else {
      Activity.PlusObject.Attachments attachment=activity.getObject().getAttachments().get(0);
      String objectType=attachment.getObjectType();
switch (objectType) {
case ""String_Node_Str"":
        return VIEWTYPE_ARTICLE;
case ""String_Node_Str"":
      return VIEWTYPE_VIDEO;
case ""String_Node_Str"":
    return VIEWTYPE_PHOTO;
case ""String_Node_Str"":
  return VIEWTYPE_ALBUM;
case ""String_Node_Str"":
return VIEWTYPE_EVENT;
}
}
}
return 0;
}"
26264,"private void populateArticle(ViewHolder mViewHolder,ViewGroup container,final Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  View attachmentView=createAttachmentView(mViewHolder,container,R.layout.news_item_article,1);
  mViewHolder.title.setText(attachment.getDisplayName());
  try {
    mViewHolder.attachmentContent.setText(new URL(attachment.getUrl()).getHost());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  if (attachment.getImage() == null && attachment.getFullImage() == null)   mViewHolder.articleImage.setVisibility(View.GONE);
 else {
    String imageUrl=attachment.getImage().getUrl();
    if (attachment.getFullImage() != null)     imageUrl=attachment.getFullImage().getUrl();
    mViewHolder.articleImage.setImageDrawable(null);
    mViewHolder.articleImage.setVisibility(View.VISIBLE);
    App.getInstance().getPicasso().load(imageUrl).into(mViewHolder.articleImage);
  }
  attachmentView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(attachment.getUrl()));
      mContext.startActivity(i);
    }
  }
);
}","private void populateArticle(ViewHolder mViewHolder,ViewGroup container,final Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  View attachmentView=createAttachmentView(mViewHolder,container,R.layout.news_item_article,1);
  mViewHolder.title.setText(attachment.getDisplayName());
  try {
    mViewHolder.attachmentContent.setText(new URL(attachment.getUrl()).getHost());
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  if (attachment.getImage() == null && attachment.getFullImage() == null) {
    mViewHolder.articleImage.setVisibility(View.GONE);
  }
 else {
    String imageUrl=null;
    if (attachment.getFullImage() != null) {
      imageUrl=attachment.getFullImage().getUrl();
    }
    if (attachment.getImage() != null) {
      imageUrl=attachment.getImage().getUrl();
    }
    mViewHolder.articleImage.setImageDrawable(null);
    if (imageUrl != null) {
      mViewHolder.articleImage.setVisibility(View.VISIBLE);
      App.getInstance().getPicasso().load(imageUrl).into(mViewHolder.articleImage);
    }
 else {
      mViewHolder.articleImage.setVisibility(View.GONE);
    }
  }
  attachmentView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(attachment.getUrl()));
      mContext.startActivity(i);
    }
  }
);
}"
26265,"public NewsAdapter(Context ctx,GoogleApiClient client){
  mContext=ctx;
  mPlusClient=client;
  mInflater=LayoutInflater.from(mContext);
  mActivities=new ArrayList<Item>();
}","public NewsAdapter(Context ctx,GoogleApiClient client){
  mContext=ctx;
  mPlusClient=client;
  mInflater=LayoutInflater.from(mContext);
  mActivities=new ArrayList<>();
  setHasStableIds(true);
}"
26266,"private void populateVideo(ViewHolder mViewHolder,ViewGroup container,final Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  View attachmentView=createAttachmentView(mViewHolder,container,R.layout.news_item_video,2);
  mViewHolder.poster.setDimensions(attachment.getImage().getWidth(),attachment.getImage().getHeight(),attachment.getImage().getUrl());
  mViewHolder.poster.setImageDrawable(null);
  App.getInstance().getPicasso().load(attachment.getImage().getUrl()).into(mViewHolder.poster);
  attachmentView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      try {
        Intent playVideoIntent=new Intent(mContext,YoutubeActivity.class);
        playVideoIntent.putExtra(""String_Node_Str"",Utils.splitQuery(new URL(attachment.getUrl())).get(""String_Node_Str""));
        mContext.startActivity(playVideoIntent);
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
);
}","private void populateVideo(ViewHolder mViewHolder,ViewGroup container,final Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  View attachmentView=createAttachmentView(mViewHolder,container,R.layout.news_item_video,2);
  mViewHolder.poster.setDimensions(attachment.getImage().getWidth(),attachment.getImage().getHeight(),attachment.getImage().getUrl());
  mViewHolder.poster.setImageDrawable(null);
  App.getInstance().getPicasso().load(attachment.getImage().getUrl()).into(mViewHolder.poster);
  attachmentView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      try {
        Intent playVideoIntent=new Intent(mContext,YoutubeActivity.class);
        playVideoIntent.putExtra(""String_Node_Str"",Utils.splitQuery(new URL(attachment.getUrl())).get(""String_Node_Str""));
        mContext.startActivity(playVideoIntent);
      }
 catch (      UnsupportedEncodingException|MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
);
}"
26267,"private Spanned fromHtml(String html){
  Spanned spanned=Html.fromHtml(html);
  if (spanned instanceof SpannableStringBuilder) {
    SpannableStringBuilder ssb=(SpannableStringBuilder)spanned;
    URLSpan[] urlspans=ssb.getSpans(0,ssb.length() - 1,URLSpan.class);
    for (int i=0; i < urlspans.length; i++) {
      URLSpan span=urlspans[i];
      int start=ssb.getSpanStart(span);
      int end=ssb.getSpanEnd(span);
      final String url=span.getURL();
      ssb.removeSpan(span);
      ssb.setSpan(new ClickableSpan(){
        @Override public void onClick(        View view){
          Intent i=new Intent(Intent.ACTION_VIEW);
          i.setData(Uri.parse(url));
          mContext.startActivity(i);
        }
      }
,start,end,33);
    }
  }
  return spanned;
}","private Spanned fromHtml(String html){
  Spanned spanned=Html.fromHtml(html);
  if (spanned instanceof SpannableStringBuilder) {
    SpannableStringBuilder ssb=(SpannableStringBuilder)spanned;
    URLSpan[] urlspans=ssb.getSpans(0,ssb.length() - 1,URLSpan.class);
    for (    URLSpan span : urlspans) {
      int start=ssb.getSpanStart(span);
      int end=ssb.getSpanEnd(span);
      final String url=span.getURL();
      ssb.removeSpan(span);
      ssb.setSpan(new ClickableSpan(){
        @Override public void onClick(        View view){
          Intent i=new Intent(Intent.ACTION_VIEW);
          i.setData(Uri.parse(url));
          mContext.startActivity(i);
        }
      }
,start,end,33);
    }
  }
  return spanned;
}"
26268,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int i,long l){
  DrawerAdapter.DrawerItem item=(DrawerAdapter.DrawerItem)mDrawerAdapter.getItem(i);
switch (item.getId()) {
case Const.DRAWER_ACHIEVEMENTS:
    if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
      startActivityForResult(Games.Achievements.getAchievementsIntent(getGoogleApiClient()),0);
    }
 else {
      Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.achievements_need_signin),Style.INFO).show();
    }
  break;
case Const.DRAWER_HOME:
navigateTo(MainActivity.class,null);
break;
case Const.DRAWER_GDE:
navigateTo(GdeActivity.class,null);
break;
case Const.DRAWER_SPECIAL:
Bundle special=new Bundle();
special.putInt(Const.SPECIAL_EVENT_LOGO_EXTRA,R.drawable.ic_logo_devfest);
special.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,""String_Node_Str"");
special.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,""String_Node_Str"");
special.putLong(Const.SPECIAL_EVENT_START_EXTRA,DateTime.now().getMillis());
special.putLong(Const.SPECIAL_EVENT_END_EXTRA,1419984000000L);
special.putInt(Const.SPECIAL_EVENT_DESCRIPTION_EXTRA,R.string.devfest_description);
navigateTo(SpecialEventActivity.class,special);
break;
case Const.DRAWER_PULSE:
navigateTo(PulseActivity.class,null);
break;
case Const.DRAWER_ARROW:
navigateTo(ArrowActivity.class,null);
break;
}
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int i,long l){
  DrawerAdapter.DrawerItem item=(DrawerAdapter.DrawerItem)mDrawerAdapter.getItem(i);
switch (item.getId()) {
case Const.DRAWER_ACHIEVEMENTS:
    if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
      startActivityForResult(Games.Achievements.getAchievementsIntent(getGoogleApiClient()),0);
    }
 else {
      Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.achievements_need_signin),Style.INFO).show();
    }
  break;
case Const.DRAWER_HOME:
navigateTo(MainActivity.class,null);
break;
case Const.DRAWER_GDE:
navigateTo(GdeActivity.class,null);
break;
case Const.DRAWER_SPECIAL:
Bundle special=new Bundle();
special.putInt(Const.SPECIAL_EVENT_LOGO_EXTRA,R.drawable.ic_logo_devfest);
special.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,""String_Node_Str"");
special.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,""String_Node_Str"");
special.putLong(Const.SPECIAL_EVENT_START_EXTRA,DateTime.now().getMillis());
special.putLong(Const.SPECIAL_EVENT_END_EXTRA,1419984000000L);
special.putInt(Const.SPECIAL_EVENT_DESCRIPTION_EXTRA,R.string.devfest_description);
navigateTo(SpecialEventActivity.class,special);
break;
case Const.DRAWER_PULSE:
navigateTo(PulseActivity.class,null);
break;
case Const.DRAWER_ARROW:
if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
navigateTo(ArrowActivity.class,null);
}
 else {
Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.arrow_need_games),Style.INFO).show();
}
break;
}
}"
26269,"private void initNavigationDrawer(){
  mDrawerAdapter=new DrawerAdapter(this);
  mDrawerContent.setAdapter(mDrawerAdapter);
  mDrawerContent.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      DrawerAdapter.DrawerItem item=(DrawerAdapter.DrawerItem)mDrawerAdapter.getItem(i);
switch (item.getId()) {
case Const.DRAWER_ACHIEVEMENTS:
        if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
          startActivityForResult(Games.Achievements.getAchievementsIntent(getGoogleApiClient()),0);
        }
 else {
          Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.achievements_need_signin),Style.INFO).show();
        }
      break;
case Const.DRAWER_HOME:
    navigateTo(MainActivity.class,null);
  break;
case Const.DRAWER_GDE:
navigateTo(GdeActivity.class,null);
break;
case Const.DRAWER_SPECIAL:
Bundle special=new Bundle();
special.putInt(Const.SPECIAL_EVENT_LOGO_EXTRA,R.drawable.ic_logo_devfest);
special.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,""String_Node_Str"");
special.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,""String_Node_Str"");
special.putLong(Const.SPECIAL_EVENT_START_EXTRA,DateTime.now().getMillis());
special.putLong(Const.SPECIAL_EVENT_END_EXTRA,1419984000000L);
special.putInt(Const.SPECIAL_EVENT_DESCRIPTION_EXTRA,R.string.devfest_description);
navigateTo(SpecialEventActivity.class,special);
break;
case Const.DRAWER_PULSE:
navigateTo(PulseActivity.class,null);
break;
case Const.DRAWER_ARROW:
navigateTo(ArrowActivity.class,null);
break;
}
}
}
);
mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
/** 
 * Called when a drawer has settled in a completely closed state.
 */
public void onDrawerClosed(View view){
if (mPreferences.getBoolean(Const.SETTINGS_OPEN_DRAWER_ON_START,Const.SETTINGS_OPEN_DRAWER_ON_START_DEFAULT)) {
mPreferences.edit().putBoolean(Const.SETTINGS_OPEN_DRAWER_ON_START,!Const.SETTINGS_OPEN_DRAWER_ON_START_DEFAULT).apply();
}
}
/** 
 * Called when a drawer has settled in a completely open state.
 */
public void onDrawerOpened(View drawerView){
}
}
;
mDrawerLayout.setDrawerListener(mDrawerToggle);
}","private void initNavigationDrawer(){
  mDrawerAdapter=new DrawerAdapter(this);
  mDrawerContent.setAdapter(mDrawerAdapter);
  mDrawerContent.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      DrawerAdapter.DrawerItem item=(DrawerAdapter.DrawerItem)mDrawerAdapter.getItem(i);
switch (item.getId()) {
case Const.DRAWER_ACHIEVEMENTS:
        if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
          startActivityForResult(Games.Achievements.getAchievementsIntent(getGoogleApiClient()),0);
        }
 else {
          Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.achievements_need_signin),Style.INFO).show();
        }
      break;
case Const.DRAWER_HOME:
    navigateTo(MainActivity.class,null);
  break;
case Const.DRAWER_GDE:
navigateTo(GdeActivity.class,null);
break;
case Const.DRAWER_SPECIAL:
Bundle special=new Bundle();
special.putInt(Const.SPECIAL_EVENT_LOGO_EXTRA,R.drawable.ic_logo_devfest);
special.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,""String_Node_Str"");
special.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,""String_Node_Str"");
special.putLong(Const.SPECIAL_EVENT_START_EXTRA,DateTime.now().getMillis());
special.putLong(Const.SPECIAL_EVENT_END_EXTRA,1419984000000L);
special.putInt(Const.SPECIAL_EVENT_DESCRIPTION_EXTRA,R.string.devfest_description);
navigateTo(SpecialEventActivity.class,special);
break;
case Const.DRAWER_PULSE:
navigateTo(PulseActivity.class,null);
break;
case Const.DRAWER_ARROW:
if (mPreferences.getBoolean(Const.SETTINGS_SIGNED_IN,false) && getGoogleApiClient().isConnected()) {
navigateTo(ArrowActivity.class,null);
}
 else {
Crouton.makeText(GdgNavDrawerActivity.this,getString(R.string.arrow_need_games),Style.INFO).show();
}
break;
}
}
}
);
mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
/** 
 * Called when a drawer has settled in a completely closed state.
 */
public void onDrawerClosed(View view){
if (mPreferences.getBoolean(Const.SETTINGS_OPEN_DRAWER_ON_START,Const.SETTINGS_OPEN_DRAWER_ON_START_DEFAULT)) {
mPreferences.edit().putBoolean(Const.SETTINGS_OPEN_DRAWER_ON_START,!Const.SETTINGS_OPEN_DRAWER_ON_START_DEFAULT).apply();
}
}
/** 
 * Called when a drawer has settled in a completely open state.
 */
public void onDrawerOpened(View drawerView){
}
}
;
mDrawerLayout.setDrawerListener(mDrawerToggle);
}"
26270,"public ApiRequest getEvent(String eventId,Response.Listener<EventFullDetails> successListener,Response.ErrorListener errorListener){
  GsonRequest<Void,EventFullDetails> eventReq=new GsonRequest<Void,EventFullDetails>(Request.Method.GET,EVENT_DETAIL_URL + eventId,EventFullDetails.class,successListener,errorListener,GsonRequest.getGson(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES,new ZuluDateTimeDeserializer()));
  eventReq.setRetryPolicy(new DefaultRetryPolicy(60000,DefaultRetryPolicy.DEFAULT_MAX_RETRIES,DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
  return new ApiRequest(eventReq);
}","public ApiRequest getEvent(String eventId,Response.Listener<EventFullDetails> successListener,Response.ErrorListener errorListener){
  GsonRequest<Void,EventFullDetails> eventReq=new GsonRequest<Void,EventFullDetails>(Request.Method.GET,EVENT_DETAIL_URL + eventId,EventFullDetails.class,successListener,errorListener,GsonRequest.getGson(FieldNamingPolicy.IDENTITY,new ZuluDateTimeDeserializer()));
  eventReq.setRetryPolicy(new DefaultRetryPolicy(60000,DefaultRetryPolicy.DEFAULT_MAX_RETRIES,DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
  return new ApiRequest(eventReq);
}"
26271,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  if (mEvent != null) {
    inflater.inflate(R.menu.event_menu,menu);
    MenuItem item=menu.findItem(R.id.share);
    mShareActionProvider=(ShareActionProvider)MenuItemCompat.getActionProvider(item);
    Intent shareIntent=new Intent(Intent.ACTION_SEND);
    shareIntent.putExtra(Intent.EXTRA_TEXT,mEvent.getEventUrl());
    if (mShareActionProvider != null) {
      mShareActionProvider.setShareIntent(shareIntent);
    }
  }
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  if (mEvent != null && mEvent.getEventUrl() != null) {
    inflater.inflate(R.menu.event_menu,menu);
    MenuItem item=menu.findItem(R.id.share);
    mShareActionProvider=(ShareActionProvider)MenuItemCompat.getActionProvider(item);
    Intent shareIntent=new Intent(Intent.ACTION_SEND);
    shareIntent.setType(""String_Node_Str"");
    shareIntent.putExtra(Intent.EXTRA_TEXT,mEvent.getEventUrl());
    if (mShareActionProvider != null) {
      mShareActionProvider.setShareIntent(shareIntent);
    }
  }
}"
26272,"public AchievementActionHandler(Handler handler,GoogleApiClient googleApiClient,SharedPreferences preferences){
  mHandler=handler;
  mGoogleApi=googleApiClient;
  mPreferences=preferences;
}","public AchievementActionHandler(Handler handler,GoogleApiClient googleApiClient,SharedPreferences preferences){
  mPending=new ArrayList<>();
  mHandler=handler;
  mGoogleApi=googleApiClient;
  mPreferences=preferences;
}"
26273,"private void postAchievementUnlockedEvent(final String achievementName){
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      Games.Achievements.unlock(mGoogleApi,achievementName);
    }
  }
,ONE_SEC_IN_MILLISECONDS);
}","private void postAchievementUnlockedEvent(final String achievementName){
  if (!mGoogleApi.isConnected()) {
    mPending.add(achievementName);
  }
 else {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        Games.Achievements.unlock(mGoogleApi,achievementName);
      }
    }
,ONE_SEC_IN_MILLISECONDS);
  }
}"
26274,"@Override public void onConnected(Bundle bundle){
}","@Override public void onConnected(Bundle bundle){
  mAchievementActionHandler.onConnected();
}"
26275,"@Override public void onCreate(){
  super.onCreate();
  if (BuildConfig.DEBUG) {
    StrictMode.ThreadPolicy.Builder b=new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      b.penaltyFlashScreen();
    }
  }
  if (BuildConfig.DEBUG) {
    Timber.plant(new Timber.DebugTree());
  }
 else {
  }
  ACRA.init(this);
  if (mFix == false) {
    URL.setURLStreamHandlerFactory(new OkHttpClient());
    mFix=true;
  }
  mInstance=this;
  mPreferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  try {
    PackageInfo pInfo=getPackageManager().getPackageInfo(getPackageName(),0);
    if (mPreferences.getInt(Const.SETTINGS_VERSION_CODE,0) < pInfo.versionCode)     migrate(mPreferences.getInt(Const.SETTINGS_VERSION_CODE,pInfo.versionCode),pInfo.versionCode);
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  getModelCache();
  getBitmapCache();
  GdgVolley.init(this);
  mPreferences.edit().putInt(Const.SETTINGS_APP_STARTS,mPreferences.getInt(Const.SETTINGS_APP_STARTS,0) + 1).apply();
  mPicasso=new Picasso.Builder(this).downloader(new OkHttpDownloader(this)).memoryCache(new LruCache(this)).build();
  mPicasso.setDebugging(Const.DEVELOPER_MODE);
  mGaInstance=GoogleAnalytics.getInstance(getApplicationContext());
  mTracker=mGaInstance.getTracker(getString(R.string.ga_trackingId));
  GAServiceManager.getInstance().setDispatchPeriod(0);
  mTracker.setAppName(getString(R.string.app_name));
  mTracker.setAnonymizeIp(true);
  mGaInstance.setDefaultTracker(mTracker);
  GoogleAnalytics.getInstance(this).setAppOptOut(mPreferences.getBoolean(""String_Node_Str"",false));
  mLocationFinder=new GingerbreadLastLocationFinder(this);
  mLocationFinder.setChangedLocationListener(this);
  updateLastLocation();
}","@Override public void onCreate(){
  super.onCreate();
  if (BuildConfig.DEBUG) {
    StrictMode.ThreadPolicy.Builder b=new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      b.penaltyFlashScreen();
    }
  }
  if (BuildConfig.DEBUG) {
    Timber.plant(new Timber.DebugTree());
  }
 else {
  }
  ACRA.init(this);
  if (mFix == false) {
    URL.setURLStreamHandlerFactory(new OkHttpClient());
    mFix=true;
  }
  mInstance=this;
  mPreferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  try {
    PackageInfo pInfo=getPackageManager().getPackageInfo(getPackageName(),0);
    if (mPreferences.getInt(Const.SETTINGS_VERSION_CODE,0) < pInfo.versionCode)     migrate(mPreferences.getInt(Const.SETTINGS_VERSION_CODE,pInfo.versionCode),pInfo.versionCode);
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  getModelCache();
  getBitmapCache();
  GdgVolley.init(this);
  mPreferences.edit().putInt(Const.SETTINGS_APP_STARTS,mPreferences.getInt(Const.SETTINGS_APP_STARTS,0) + 1).apply();
  mPicasso=new Picasso.Builder(this).downloader(new OkHttpDownloader(this)).memoryCache(new LruCache(this)).build();
  mPicasso.setDebugging(BuildConfig.DEBUG);
  mGaInstance=GoogleAnalytics.getInstance(getApplicationContext());
  mTracker=mGaInstance.getTracker(getString(R.string.ga_trackingId));
  GAServiceManager.getInstance().setDispatchPeriod(0);
  mTracker.setAppName(getString(R.string.app_name));
  mTracker.setAnonymizeIp(true);
  mGaInstance.setDefaultTracker(mTracker);
  GoogleAnalytics.getInstance(this).setAppOptOut(mPreferences.getBoolean(""String_Node_Str"",false));
  mLocationFinder=new GingerbreadLastLocationFinder(this);
  mLocationFinder.setChangedLocationListener(this);
  updateLastLocation();
}"
26276,"private void writeValueToDisk(OutputStream os,Object o) throws IOException {
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(os));
  String className=o.getClass().getCanonicalName();
  if (o instanceof ArrayList) {
    ArrayList d=(ArrayList)o;
    if (d.size() > 0)     className=className + ""String_Node_Str"" + d.get(0).getClass().getCanonicalName()+ ""String_Node_Str"";
  }
  out.write(className + ""String_Node_Str"");
  if (className.contains(""String_Node_Str"")) {
    mJsonFactory.createJsonGenerator(out).serialize(o);
  }
 else {
    String json=mGson.toJson(o);
    out.write(json);
  }
  out.close();
}","private void writeValueToDisk(OutputStream os,Object o) throws IOException {
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(os));
  String className=o.getClass().getCanonicalName();
  if (o instanceof ArrayList) {
    className=parseArrayList(o);
  }
 else   if (o instanceof HashMap) {
    HashMap d=(HashMap)o;
    if (d.size() > 0) {
      Map.Entry entry=(Map.Entry)d.entrySet().iterator().next();
      if (entry.getValue() instanceof ArrayList) {
        className=className + ""String_Node_Str"" + entry.getKey().getClass().getCanonicalName()+ ""String_Node_Str""+ parseArrayList(entry.getValue())+ ""String_Node_Str"";
      }
 else {
        className=className + ""String_Node_Str"" + entry.getKey().getClass().getCanonicalName()+ ""String_Node_Str""+ entry.getValue().getClass().getCanonicalName()+ ""String_Node_Str"";
      }
    }
  }
  out.write(className + ""String_Node_Str"");
  if (className.contains(""String_Node_Str"")) {
    mJsonFactory.createJsonGenerator(out).serialize(o);
  }
 else {
    String json=mGson.toJson(o);
    out.write(json);
  }
  out.close();
}"
26277,"public static TaggedEventFragment newInstance(String cacheKey,String eventTag,long start,long end,int fragmentLayout){
  TaggedEventFragment frag=new TaggedEventFragment();
  Bundle args=new Bundle();
  args.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,cacheKey);
  args.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,eventTag);
  args.putLong(Const.SPECIAL_EVENT_START_EXTRA,start);
  args.putLong(Const.SPECIAL_EVENT_END_EXTRA,end);
  args.putLong(Const.SPECIAL_EVENT_FRAGMENT_LAYOUT_EXTRA,fragmentLayout);
  frag.setArguments(args);
  return frag;
}","public static TaggedEventFragment newInstance(String cacheKey,String eventTag,long start,long end,int fragmentLayout){
  TaggedEventFragment frag=new TaggedEventFragment();
  Bundle args=new Bundle();
  args.putString(Const.SPECIAL_EVENT_CACHEKEY_EXTRA,cacheKey);
  args.putString(Const.SPECIAL_EVENT_VIEWTAG_EXTRA,eventTag);
  args.putLong(Const.SPECIAL_EVENT_START_EXTRA,start);
  args.putLong(Const.SPECIAL_EVENT_END_EXTRA,end);
  args.putInt(Const.SPECIAL_EVENT_FRAGMENT_LAYOUT_EXTRA,fragmentLayout);
  frag.setArguments(args);
  return frag;
}"
26278,"public DrawerItem(int icon,int title){
  mIcon=icon;
  mTitle=title;
}","public DrawerItem(int id,int icon,int title){
  mId=id;
  mIcon=icon;
  mTitle=title;
}"
26279,"public DrawerItem(int icon,int title){
  mIcon=icon;
  mTitle=title;
}","public DrawerItem(int id,int icon,int title){
  mId=id;
  mIcon=icon;
  mTitle=title;
}"
26280,"public ApiRequest getDirectory(Response.Listener<Directory> successListener,Response.ErrorListener errorListener){
  GsonRequest<Void,Directory> dirReq=new GsonRequest<Void,Directory>(Request.Method.POST,DIRECTORY_URL,Directory.class,successListener,errorListener,GsonRequest.getGson(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES));
  return new ApiRequest(dirReq);
}","public ApiRequest getDirectory(Response.Listener<Directory> successListener,Response.ErrorListener errorListener){
  GsonRequest<Void,Directory> dirReq=new GsonRequest<Void,Directory>(Request.Method.GET,DIRECTORY_URL,Directory.class,successListener,errorListener,GsonRequest.getGson(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES));
  return new ApiRequest(dirReq);
}"
26281,"private void populatePhoto(ViewHolder mViewHolder,ViewGroup container,Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  createAttachmentView(mViewHolder,container,R.layout.news_item_photo,3);
  mViewHolder.photo.setDimensions(attachment.getImage().getWidth(),attachment.getImage().getHeight(),attachment.getImage().getUrl());
  mViewHolder.photo.setImageDrawable(null);
  App.getInstance().getPicasso().load(attachment.getImage().getUrl()).into(mViewHolder.photo);
}","private void populatePhoto(ViewHolder mViewHolder,ViewGroup container,Activity.PlusObject.Attachments attachment){
  if (attachment == null)   return;
  createAttachmentView(mViewHolder,container,R.layout.news_item_photo,3);
  if (attachment.getImage() != null && attachment.getImage().getUrl() != null && attachment.getImage().getWidth() != null)   mViewHolder.photo.setDimensions(attachment.getImage().getWidth(),attachment.getImage().getHeight(),attachment.getImage().getUrl());
  mViewHolder.photo.setImageDrawable(null);
  App.getInstance().getPicasso().load(attachment.getImage().getUrl()).into(mViewHolder.photo);
}"
26282,"private void initPreferences(){
  final ListPreference prefHomeGdgList=(ListPreference)findPreference(Const.SETTINGS_HOME_GDG);
  if (prefHomeGdgList != null) {
    App.getInstance().getModelCache().getAsync(""String_Node_Str"",false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        Directory directory=(Directory)item;
        CharSequence entries[]=new String[directory.getGroups().size()];
        CharSequence entryValues[]=new String[directory.getGroups().size()];
        int i=0;
        for (        Chapter chapter : directory.getGroups()) {
          entries[i]=chapter.getName();
          entryValues[i]=chapter.getGplusId();
          i++;
        }
        prefHomeGdgList.setEntries(entries);
        prefHomeGdgList.setEntryValues(entryValues);
      }
      @Override public void onNotFound(      String key){
      }
    }
);
    prefHomeGdgList.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        final String homeGdg=(String)o;
        if (mPlayServicesHelper.isSignedIn() && mPreferences.getBoolean(""String_Node_Str"",true)) {
          setHomeGdg(homeGdg);
        }
        return true;
      }
    }
);
  }
  CheckBoxPreference prefGcm=(CheckBoxPreference)findPreference(Const.SETTINGS_GCM);
  if (prefGcm != null) {
    prefGcm.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        final boolean enableGcm=(Boolean)o;
        if (mPlayServicesHelper.isSignedIn()) {
          mLoading.setVisibility(View.VISIBLE);
          mLoading.startAnimation(AnimationUtils.loadAnimation(SettingsActivity.this,R.anim.fade_in));
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              try {
                String token=GoogleAuthUtil.getToken(SettingsActivity.this,mPlayServicesHelper.getPlusClient().getAccountName(),""String_Node_Str"" + Scopes.PLUS_LOGIN);
                mXClient.setToken(token);
                if (!enableGcm) {
                  ApiRequest req=mXClient.unregisterGcm(mPreferences.getString(Const.SETTINGS_GCM_REG_ID,""String_Node_Str""),new Response.Listener<GcmRegistrationResponse>(){
                    @Override public void onResponse(                    GcmRegistrationResponse messageResponse){
                      mPreferences.edit().putBoolean(Const.SETTINGS_GCM,false).remove(Const.SETTINGS_GCM_REG_ID).apply();
                    }
                  }
,new Response.ErrorListener(){
                    @Override public void onErrorResponse(                    VolleyError volleyError){
                      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
                    }
                  }
);
                  req.execute();
                }
 else {
                  final String regid=mGcm.register(getString(R.string.gcm_sender_id));
                  ApiRequest req=mXClient.registerGcm(regid,new Response.Listener<GcmRegistrationResponse>(){
                    @Override public void onResponse(                    GcmRegistrationResponse messageResponse){
                      mPreferences.edit().putBoolean(Const.SETTINGS_GCM,true).putString(Const.SETTINGS_GCM_REG_ID,regid).putString(Const.SETTINGS_GCM_NOTIFICATION_KEY,messageResponse.getNotificationKey()).apply();
                    }
                  }
,new Response.ErrorListener(){
                    @Override public void onErrorResponse(                    VolleyError volleyError){
                      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
                    }
                  }
);
                  req.execute();
                  setHomeGdg(mPreferences.getString(Const.SETTINGS_HOME_GDG,""String_Node_Str""));
                }
              }
 catch (              IOException e) {
                Log.e(LOG_TAG,""String_Node_Str"",e);
                e.printStackTrace();
              }
catch (              GoogleAuthException e) {
                Log.e(LOG_TAG,""String_Node_Str"",e);
                e.printStackTrace();
              }
              return null;
            }
            @Override protected void onPostExecute(            Void o){
              super.onPostExecute(o);
              Animation fadeOut=AnimationUtils.loadAnimation(SettingsActivity.this,R.anim.fade_out);
              fadeOut.setAnimationListener(new Animation.AnimationListener(){
                @Override public void onAnimationStart(                Animation animation){
                }
                @Override public void onAnimationEnd(                Animation animation){
                  mLoading.setVisibility(View.GONE);
                }
                @Override public void onAnimationRepeat(                Animation animation){
                }
              }
);
              mLoading.startAnimation(fadeOut);
            }
          }
.execute();
        }
        return true;
      }
    }
);
  }
  CheckBoxPreference prefGoogleSignIn=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (prefGoogleSignIn != null) {
    prefGoogleSignIn.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        boolean signedIn=(Boolean)o;
        if (!signedIn) {
          if (mPlayServicesHelper.isSignedIn()) {
            mPlayServicesHelper.signOut();
          }
        }
 else {
          if (!mPlayServicesHelper.isSignedIn()) {
            mPlayServicesHelper.beginUserInitiatedSignIn();
          }
        }
        return true;
      }
    }
);
  }
  CheckBoxPreference prefAnalytics=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (prefAnalytics != null) {
    prefAnalytics.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        boolean analytics=(Boolean)o;
        GoogleAnalytics.getInstance(SettingsActivity.this).setAppOptOut(!analytics);
        return true;
      }
    }
);
  }
}","private void initPreferences(){
  final ListPreference prefHomeGdgList=(ListPreference)findPreference(Const.SETTINGS_HOME_GDG);
  if (prefHomeGdgList != null) {
    App.getInstance().getModelCache().getAsync(""String_Node_Str"",false,new ModelCache.CacheListener(){
      @Override public void onGet(      Object item){
        Directory directory=(Directory)item;
        CharSequence entries[]=new String[directory.getGroups().size()];
        CharSequence entryValues[]=new String[directory.getGroups().size()];
        int i=0;
        for (        Chapter chapter : directory.getGroups()) {
          entries[i]=chapter.getName();
          entryValues[i]=chapter.getGplusId();
          i++;
        }
        prefHomeGdgList.setEntries(entries);
        prefHomeGdgList.setEntryValues(entryValues);
      }
      @Override public void onNotFound(      String key){
      }
    }
);
    prefHomeGdgList.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        final String homeGdg=(String)o;
        if (mPlayServicesHelper.isSignedIn() && mPreferences.getBoolean(""String_Node_Str"",true)) {
          setHomeGdg(homeGdg);
        }
        App.getInstance().startService(new Intent(App.getInstance(),UpcomingEventWidgetProvider.UpdateService.class));
        return true;
      }
    }
);
  }
  CheckBoxPreference prefGcm=(CheckBoxPreference)findPreference(Const.SETTINGS_GCM);
  if (prefGcm != null) {
    prefGcm.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        final boolean enableGcm=(Boolean)o;
        if (mPlayServicesHelper.isSignedIn()) {
          mLoading.setVisibility(View.VISIBLE);
          mLoading.startAnimation(AnimationUtils.loadAnimation(SettingsActivity.this,R.anim.fade_in));
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              try {
                String token=GoogleAuthUtil.getToken(SettingsActivity.this,mPlayServicesHelper.getPlusClient().getAccountName(),""String_Node_Str"" + Scopes.PLUS_LOGIN);
                mXClient.setToken(token);
                if (!enableGcm) {
                  ApiRequest req=mXClient.unregisterGcm(mPreferences.getString(Const.SETTINGS_GCM_REG_ID,""String_Node_Str""),new Response.Listener<GcmRegistrationResponse>(){
                    @Override public void onResponse(                    GcmRegistrationResponse messageResponse){
                      mPreferences.edit().putBoolean(Const.SETTINGS_GCM,false).remove(Const.SETTINGS_GCM_REG_ID).apply();
                    }
                  }
,new Response.ErrorListener(){
                    @Override public void onErrorResponse(                    VolleyError volleyError){
                      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
                    }
                  }
);
                  req.execute();
                }
 else {
                  final String regid=mGcm.register(getString(R.string.gcm_sender_id));
                  ApiRequest req=mXClient.registerGcm(regid,new Response.Listener<GcmRegistrationResponse>(){
                    @Override public void onResponse(                    GcmRegistrationResponse messageResponse){
                      mPreferences.edit().putBoolean(Const.SETTINGS_GCM,true).putString(Const.SETTINGS_GCM_REG_ID,regid).putString(Const.SETTINGS_GCM_NOTIFICATION_KEY,messageResponse.getNotificationKey()).apply();
                    }
                  }
,new Response.ErrorListener(){
                    @Override public void onErrorResponse(                    VolleyError volleyError){
                      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
                    }
                  }
);
                  req.execute();
                  setHomeGdg(mPreferences.getString(Const.SETTINGS_HOME_GDG,""String_Node_Str""));
                }
              }
 catch (              IOException e) {
                Log.e(LOG_TAG,""String_Node_Str"",e);
                e.printStackTrace();
              }
catch (              GoogleAuthException e) {
                Log.e(LOG_TAG,""String_Node_Str"",e);
                e.printStackTrace();
              }
              return null;
            }
            @Override protected void onPostExecute(            Void o){
              super.onPostExecute(o);
              Animation fadeOut=AnimationUtils.loadAnimation(SettingsActivity.this,R.anim.fade_out);
              fadeOut.setAnimationListener(new Animation.AnimationListener(){
                @Override public void onAnimationStart(                Animation animation){
                }
                @Override public void onAnimationEnd(                Animation animation){
                  mLoading.setVisibility(View.GONE);
                }
                @Override public void onAnimationRepeat(                Animation animation){
                }
              }
);
              mLoading.startAnimation(fadeOut);
            }
          }
.execute();
        }
        return true;
      }
    }
);
  }
  CheckBoxPreference prefGoogleSignIn=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (prefGoogleSignIn != null) {
    prefGoogleSignIn.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        boolean signedIn=(Boolean)o;
        if (!signedIn) {
          if (mPlayServicesHelper.isSignedIn()) {
            mPlayServicesHelper.signOut();
          }
        }
 else {
          if (!mPlayServicesHelper.isSignedIn()) {
            mPlayServicesHelper.beginUserInitiatedSignIn();
          }
        }
        return true;
      }
    }
);
  }
  CheckBoxPreference prefAnalytics=(CheckBoxPreference)findPreference(""String_Node_Str"");
  if (prefAnalytics != null) {
    prefAnalytics.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object o){
        boolean analytics=(Boolean)o;
        GoogleAnalytics.getInstance(SettingsActivity.this).setAppOptOut(!analytics);
        return true;
      }
    }
);
  }
}"
26283,"@Override public void onBackPressed(){
  if (mViewPager.getCurrentItem() > 0)   mViewPager.setCurrentItem(mViewPager.getCurrentItem() - 1,true);
 else   super.onBackPressed();
}","@Override public void onBackPressed(){
  if (mViewPager.getCurrentItem() > 0)   mViewPager.setCurrentItem(mViewPager.getCurrentItem() - 1,true);
 else   super.finish();
}"
26284,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  SharedPreferences mPreferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  if (mPreferences.getBoolean(Const.SETTINGS_FIRST_START,true)) {
    Intent firstStartIntent=new Intent(StartActivity.this,FirstStartActivity.class);
    startActivity(firstStartIntent);
  }
 else {
    Intent mainIntent=new Intent(StartActivity.this,MainActivity.class);
    startActivity(mainIntent);
  }
  finish();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  SharedPreferences mPreferences=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  Intent intentForStart=null;
  if (mPreferences.getBoolean(Const.SETTINGS_FIRST_START,true))   intentForStart=new Intent(StartActivity.this,FirstStartActivity.class);
 else   intentForStart=new Intent(StartActivity.this,MainActivity.class);
  startActivity(intentForStart);
  finish();
}"
26285,"@Override public DateTime deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
  return fmt.parseDateTime(jsonElement.getAsJsonPrimitive().getAsString());
}","@Override public DateTime deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.ENGLISH);
  return fmt.parseDateTime(jsonElement.getAsJsonPrimitive().getAsString());
}"
26286,"@Override public void onResponse(Directory directory){
  App.getInstance().getModelCache().putAsync(""String_Node_Str"",directory,DateTime.now().plusDays(4));
  addChapters(directory.getGroups());
  mChapterSpinner.setAdapter(mSpinnerAdapter);
  mLoadSwitcher.setDisplayedChild(1);
}","@Override public void onResponse(Directory directory){
  App.getInstance().getModelCache().putAsync(""String_Node_Str"",directory,DateTime.now().plusDays(4));
  addChapters(directory.getGroups());
  mLoadSwitcher.setDisplayedChild(1);
}"
26287,"@Override public void onActivityCreated(Bundle savedInstanceState){
  Log.d(LOG_TAG,""String_Node_Str"");
  super.onActivityCreated(savedInstanceState);
  int errorCode=GooglePlusUtil.checkGooglePlusApp(getActivity());
  if (errorCode != GooglePlusUtil.SUCCESS) {
    GooglePlusUtil.getErrorDialog(errorCode,getActivity(),0).show();
  }
  mClient=new GroupDirectory();
  mSpinnerAdapter=new ChapterAdapter(getActivity(),android.R.layout.simple_list_item_1);
  mLocationFinder=new GingerbreadLastLocationFinder(getActivity());
  mLastLocation=mLocationFinder.getLastBestLocation(5000,60 * 60 * 1000);
  mFetchChaptersTask=mClient.getDirectory(new Response.Listener<Directory>(){
    @Override public void onResponse(    Directory directory){
      App.getInstance().getModelCache().putAsync(""String_Node_Str"",directory,DateTime.now().plusDays(4));
      addChapters(directory.getGroups());
      mChapterSpinner.setAdapter(mSpinnerAdapter);
      mLoadSwitcher.setDisplayedChild(1);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      Crouton.makeText(getActivity(),getString(R.string.fetch_chapters_failed),Style.ALERT).show();
      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
    }
  }
);
  App.getInstance().getModelCache().getAsync(""String_Node_Str"",new ModelCache.CacheListener(){
    @Override public void onGet(    Object item){
      Directory directory=(Directory)item;
      mLoadSwitcher.setDisplayedChild(1);
      addChapters(directory.getGroups());
      mChapterSpinner.setAdapter(mSpinnerAdapter);
    }
    @Override public void onNotFound(    String key){
      mFetchChaptersTask.execute();
    }
  }
);
  mConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Chapter selectedChapter=(Chapter)mChapterSpinner.getSelectedItem();
      getArguments().putParcelable(""String_Node_Str"",selectedChapter);
      if (getActivity() instanceof Step1Listener)       ((Step1Listener)getActivity()).onConfirmedChapter(selectedChapter);
    }
  }
);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  Log.d(LOG_TAG,""String_Node_Str"");
  super.onActivityCreated(savedInstanceState);
  int errorCode=GooglePlusUtil.checkGooglePlusApp(getActivity());
  if (errorCode != GooglePlusUtil.SUCCESS) {
    GooglePlusUtil.getErrorDialog(errorCode,getActivity(),0).show();
  }
  mClient=new GroupDirectory();
  mSpinnerAdapter=new ChapterAdapter(getActivity(),android.R.layout.simple_list_item_1);
  if (savedInstanceState != null) {
    mSelectedChapter=savedInstanceState.getParcelable(""String_Node_Str"");
  }
  mLocationFinder=new GingerbreadLastLocationFinder(getActivity());
  mLastLocation=mLocationFinder.getLastBestLocation(5000,60 * 60 * 1000);
  mFetchChaptersTask=mClient.getDirectory(new Response.Listener<Directory>(){
    @Override public void onResponse(    Directory directory){
      App.getInstance().getModelCache().putAsync(""String_Node_Str"",directory,DateTime.now().plusDays(4));
      addChapters(directory.getGroups());
      mLoadSwitcher.setDisplayedChild(1);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      Crouton.makeText(getActivity(),getString(R.string.fetch_chapters_failed),Style.ALERT).show();
      Log.e(LOG_TAG,""String_Node_Str"",volleyError);
    }
  }
);
  App.getInstance().getModelCache().getAsync(""String_Node_Str"",new ModelCache.CacheListener(){
    @Override public void onGet(    Object item){
      Directory directory=(Directory)item;
      mLoadSwitcher.setDisplayedChild(1);
      addChapters(directory.getGroups());
    }
    @Override public void onNotFound(    String key){
      mFetchChaptersTask.execute();
    }
  }
);
  mConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Chapter selectedChapter=(Chapter)mChapterSpinner.getSelectedItem();
      getArguments().putParcelable(""String_Node_Str"",selectedChapter);
      if (getActivity() instanceof Step1Listener)       ((Step1Listener)getActivity()).onConfirmedChapter(selectedChapter);
    }
  }
);
}"
26288,"private void addChapters(List<Chapter> chapterList){
  Collections.sort(chapterList,mLocationComparator);
  mSpinnerAdapter.clear();
  mSpinnerAdapter.addAll(chapterList);
}","private void addChapters(List<Chapter> chapterList){
  Collections.sort(chapterList,mLocationComparator);
  mSpinnerAdapter.clear();
  mSpinnerAdapter.addAll(chapterList);
  mChapterSpinner.setAdapter(mSpinnerAdapter);
  if (mSelectedChapter != null) {
    int pos=mSpinnerAdapter.getPosition(mSelectedChapter);
    mChapterSpinner.setSelection(pos);
  }
}"
26289,"@Override public void onGet(Object item){
  Directory directory=(Directory)item;
  mLoadSwitcher.setDisplayedChild(1);
  addChapters(directory.getGroups());
  mChapterSpinner.setAdapter(mSpinnerAdapter);
}","@Override public void onGet(Object item){
  Directory directory=(Directory)item;
  mLoadSwitcher.setDisplayedChild(1);
  addChapters(directory.getGroups());
}"
26290,"@Override public View getView(int i,View view,ViewGroup viewGroup){
  if (view == null)   view=mInflater.inflate(R.layout.news_item_base,null);
  Item item=(Item)getItemInternal(i);
  final Activity activity=item.getActivity();
  ViewGroup container=(ViewGroup)view.findViewById(R.id.attachmentContainer);
  view.setTag(activity.getId());
  PlusOneButton plusButton=(PlusOneButton)view.findViewById(R.id.plus_one_button);
  plusButton.initialize(mPlusClient,activity.getUrl(),1);
  if (activity.getVerb().equals(""String_Node_Str""))   populateShare(activity,view);
 else   populatePost(activity,view);
  if (activity.getObject().getAttachments() != null && activity.getObject().getAttachments().size() > 0) {
    final Activity.PlusObject.Attachments attachment=activity.getObject().getAttachments().get(0);
switch (getItemViewType(i)) {
case 1:
      populateArticle(container,attachment);
    break;
case 2:
  populateVideo(container,attachment);
break;
case 3:
populatePhoto(container,attachment);
break;
case 4:
populateAlbum(container,attachment);
break;
case 5:
populateEvent(container,attachment);
break;
}
}
if (!item.isConsumed()) {
item.setConsumed(true);
Animation animation=AnimationUtils.makeInChildBottomAnimation(mContext);
view.startAnimation(animation);
}
return view;
}","@Override public View getView(int i,View view,ViewGroup viewGroup){
  if (view == null)   view=mInflater.inflate(R.layout.news_item_base,null);
  Item item=(Item)getItemInternal(i);
  final Activity activity=item.getActivity();
  view.setTag(activity.getUrl());
  ViewGroup container=(ViewGroup)view.findViewById(R.id.attachmentContainer);
  PlusOneButton plusButton=(PlusOneButton)view.findViewById(R.id.plus_one_button);
  if (mPlusClient != null) {
    plusButton.setVisibility(View.VISIBLE);
    plusButton.initialize(mPlusClient,activity.getUrl(),1);
  }
 else {
    plusButton.setVisibility(View.GONE);
  }
  if (activity.getVerb().equals(""String_Node_Str""))   populateShare(activity,view);
 else   populatePost(activity,view);
  if (activity.getObject().getAttachments() != null && activity.getObject().getAttachments().size() > 0) {
    final Activity.PlusObject.Attachments attachment=activity.getObject().getAttachments().get(0);
switch (getItemViewType(i)) {
case 1:
      populateArticle(container,attachment);
    break;
case 2:
  populateVideo(container,attachment);
break;
case 3:
populatePhoto(container,attachment);
break;
case 4:
populateAlbum(container,attachment);
break;
case 5:
populateEvent(container,attachment);
break;
}
}
if (!item.isConsumed()) {
item.setConsumed(true);
Animation animation=AnimationUtils.makeInChildBottomAnimation(mContext);
view.startAnimation(animation);
}
return view;
}"
26291,"@Override public void onResume(){
  super.onResume();
  Log.d(LOG_TAG,""String_Node_Str"");
}","@Override public void onResume(){
  super.onResume();
  Log.d(LOG_TAG,""String_Node_Str"");
  for (int i=0; i <= mList.getChildCount(); i++) {
    mAdapter.updatePlusOne(mList.getChildAt(i));
  }
}"
26292,"private Bytes zeroOutDirty(long start,long end){
  if (start < 0 || end > limit())   throw new IllegalArgumentException(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  if (start >= end)   return this;
  ChronicleUnsafe unsafe=getChronicleUnsafe();
  while (start < end && (start & 7) != 0) {
    byte b=unsafe.getByte(this.start + start);
    if (b != 0)     unsafe.putByte(this.start + start,(byte)0);
    start++;
  }
  while (start < end - 7) {
    long l=unsafe.getLong(this.start + start);
    if (l != 0)     unsafe.putLong(this.start + start,0L);
    start++;
  }
  while (start < end) {
    byte b=unsafe.getByte(this.start + start);
    if (b != 0)     unsafe.putByte(this.start + start,(byte)0);
    start++;
  }
  return this;
}","private Bytes zeroOutDirty(long start,long end){
  if (start < 0 || end > limit())   throw new IllegalArgumentException(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  if (start >= end)   return this;
  ChronicleUnsafe unsafe=getChronicleUnsafe();
  while (start < end && (start & 7) != 0) {
    byte b=unsafe.getByte(this.start + start);
    if (b != 0)     unsafe.putByte(this.start + start,(byte)0);
    start++;
  }
  while (start < end - 7) {
    long l=unsafe.getLong(this.start + start);
    if (l != 0)     unsafe.putLong(this.start + start,0L);
    start+=8;
  }
  while (start < end) {
    byte b=unsafe.getByte(this.start + start);
    if (b != 0)     unsafe.putByte(this.start + start,(byte)0);
    start++;
  }
  return this;
}"
26293,"private Bytes zeroOutDirty(long start,long end){
  if (start < 0 || end > limit())   throw new IllegalArgumentException(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  if (start >= end)   return this;
  while (start < end && (start & 7) != 0) {
    byte b=UNSAFE.getByte(startAddr + start);
    if (b != 0)     UNSAFE.putByte(startAddr + start,(byte)0);
    start++;
  }
  while (start < end - 7) {
    long l=UNSAFE.getLong(startAddr + start);
    if (l != 0)     UNSAFE.putLong(startAddr + start,0L);
    start++;
  }
  while (start < end) {
    byte b=UNSAFE.getByte(startAddr + start);
    if (b != 0)     UNSAFE.putByte(startAddr + start,(byte)0);
    start++;
  }
  return this;
}","private Bytes zeroOutDirty(long start,long end){
  if (start < 0 || end > limit())   throw new IllegalArgumentException(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  if (start >= end)   return this;
  while (start < end && (start & 7) != 0) {
    byte b=UNSAFE.getByte(startAddr + start);
    if (b != 0)     UNSAFE.putByte(startAddr + start,(byte)0);
    start++;
  }
  while (start < end - 7) {
    long l=UNSAFE.getLong(startAddr + start);
    if (l != 0)     UNSAFE.putLong(startAddr + start,0L);
    start+=8;
  }
  while (start < end) {
    byte b=UNSAFE.getByte(startAddr + start);
    if (b != 0)     UNSAFE.putByte(startAddr + start,(byte)0);
    start++;
  }
  return this;
}"
26294,"private void methodReadMarshall(StringBuilder readMarshal,Method getter,Method setter,Class type,FieldModel model){
  if (model.type() == Date.class) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
  }
 else   if (Enum.class.isAssignableFrom(model.type())) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"" + model.type() + ""String_Node_Str"");
  }
 else   if (!model.isArray()) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
  }
 else {
    readMarshal.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
    readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
    readMarshal.append(""String_Node_Str"");
  }
}","private void methodReadMarshall(StringBuilder readMarshal,Method getter,Method setter,Class type,FieldModel model){
  if (model.type() == Date.class) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
  }
 else   if (Enum.class.isAssignableFrom(model.type())) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"" + model.type().getName() + ""String_Node_Str"");
  }
 else   if (!model.isArray()) {
    if (getter != null && setter != null)     readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
  }
 else {
    readMarshal.append(""String_Node_Str"").append(model.indexSize().value()).append(""String_Node_Str"");
    readMarshal.append(""String_Node_Str"").append(setter.getName()).append(""String_Node_Str"").append(bytesType(type)).append(""String_Node_Str"");
    readMarshal.append(""String_Node_Str"");
  }
}"
26295,"public static long calcLongHashCode(CharSequence s){
  long hash=0;
  for (int i=0, len=s.length(); i < len; i++) {
    hash=57 * hash + s.charAt(i);
  }
  return hash;
}","public static long calcLongHashCode(CharSequence s){
  if (s == null)   return NULL_HASHCODE;
  long hash=0;
  for (int i=0, len=s.length(); i < len; i++) {
    hash=57 * hash + s.charAt(i);
  }
  return hash;
}"
26296,"@Override public void close(){
}","@Override public void close(){
  try {
    super.close();
  }
 catch (  IOException e) {
    throw new AssertionError(e);
  }
}"
26297,"public C read(Bytes bytes,@Nullable C c){
  long length=bytes.readStopBit();
  if (length == 0 && c != null)   return c;
  if (length < NULL_LENGTH || length > Integer.MAX_VALUE)   throw new IllegalStateException(""String_Node_Str"" + length);
  if (length == NULL_LENGTH)   return null;
  if (c == null)   return newCollection();
  return readCollection(bytes,c,(int)length);
}","public C read(Bytes bytes,@Nullable C c){
  long length=bytes.readStopBit();
  if (length == 0 && c != null) {
    c.clear();
    return c;
  }
  if (length < NULL_LENGTH || length > Integer.MAX_VALUE)   throw new IllegalStateException(""String_Node_Str"" + length);
  if (length == NULL_LENGTH)   return null;
  if (c == null)   c=newCollection();
  return readCollection(bytes,c,(int)length);
}"
26298,"public boolean tryRWReadLock(long offset,long timeOutNS) throws IllegalStateException {
  return wrapped.tryRWReadLock(offset,timeOutNS);
}","public boolean tryRWReadLock(long offset,long timeOutNS) throws IllegalStateException, InterruptedException {
  return wrapped.tryRWReadLock(offset,timeOutNS);
}"
26299,"public boolean tryRWWriteLock(long offset,long timeOutNS) throws IllegalStateException {
  return wrapped.tryRWWriteLock(offset,timeOutNS);
}","public boolean tryRWWriteLock(long offset,long timeOutNS) throws IllegalStateException, InterruptedException {
  return wrapped.tryRWWriteLock(offset,timeOutNS);
}"
26300,"@Override public void write(RandomDataInput bytes,long position,long length){
  if (length > remaining())   throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str""+ remaining()+ ""String_Node_Str"");
  if (bytes instanceof NativeBytes) {
    UNSAFE.copyMemory(((NativeBytes)bytes).startAddr + position,positionAddr,length);
  }
 else {
    super.write(bytes,position,length);
  }
}","@Override public void write(RandomDataInput bytes,long position,long length){
  if (length > remaining())   throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str""+ remaining()+ ""String_Node_Str"");
  if (bytes instanceof NativeBytes) {
    UNSAFE.copyMemory(((NativeBytes)bytes).startAddr + position,positionAddr,length);
    skip(length);
  }
 else {
    super.write(bytes,position,length);
  }
}"
26301,"@Override public Class<ByteBufferReuse> run(){
  ClassLoader cl=MAGIC_CLASS_LOADER;
  return (Class<ByteBufferReuse>)unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
}","@Override public Class run(){
  ClassLoader cl=MAGIC_CLASS_LOADER;
  return unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
}"
26302,"private static ByteBufferReuse getReuse(){
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  final String reuseImplClassName=""String_Node_Str"";
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,reuseImplClassName,null,""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  String attachedBufferFieldName=getAttachedBufferFieldName();
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,5);
    String directByteBuffer=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,directByteBuffer);
    Label l0=new Label();
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,5);
    mv.visitTypeInsn(CHECKCAST,directByteBuffer);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    String settableAtt=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,settableAtt);
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(LLOAD,1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_M1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_0);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    mv.visitTypeInsn(CHECKCAST,settableAtt);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitTypeInsn(NEW,settableAtt);
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,settableAtt,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitTypeInsn(NEW,directByteBuffer);
    mv.visitInsn(DUP);
    mv.visitVarInsn(LLOAD,1);
    mv.visitVarInsn(ILOAD,3);
    mv.visitVarInsn(ALOAD,6);
    mv.visitMethodInsn(INVOKESPECIAL,directByteBuffer,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(6,7);
    mv.visitEnd();
  }
  cw.visitEnd();
  final byte[] impl=cw.toByteArray();
  final Unsafe unsafe=NativeBytes.UNSAFE;
  Class<ByteBufferReuse> clazz=AccessController.doPrivileged(new PrivilegedAction<Class<ByteBufferReuse>>(){
    @Override public Class<ByteBufferReuse> run(){
      ClassLoader cl=MAGIC_CLASS_LOADER;
      return (Class<ByteBufferReuse>)unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
    }
  }
);
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","private static ByteBufferReuse getReuse(){
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  final String reuseImplClassName=""String_Node_Str"";
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,reuseImplClassName,null,""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  String attachedBufferFieldName=getAttachedBufferFieldName();
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,5);
    String directByteBuffer=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,directByteBuffer);
    Label l0=new Label();
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,5);
    mv.visitTypeInsn(CHECKCAST,directByteBuffer);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    String settableAtt=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,settableAtt);
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(LLOAD,1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_M1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_0);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    mv.visitTypeInsn(CHECKCAST,settableAtt);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitTypeInsn(NEW,settableAtt);
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,settableAtt,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitTypeInsn(NEW,directByteBuffer);
    mv.visitInsn(DUP);
    mv.visitVarInsn(LLOAD,1);
    mv.visitVarInsn(ILOAD,3);
    mv.visitVarInsn(ALOAD,6);
    mv.visitMethodInsn(INVOKESPECIAL,directByteBuffer,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(6,7);
    mv.visitEnd();
  }
  cw.visitEnd();
  final byte[] impl=cw.toByteArray();
  final Unsafe unsafe=NativeBytes.UNSAFE;
  Class clazz=AccessController.doPrivileged(new PrivilegedAction<Class>(){
    @Override public Class run(){
      ClassLoader cl=MAGIC_CLASS_LOADER;
      return unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
    }
  }
);
  try {
    return (ByteBufferReuse)clazz.newInstance();
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}"
26303,"public static int computeNonScalarOffset(DataValueModel dvmodel,Class type){
  int offset=0;
  DataValueModel dvmodel2=dvmodel.nestedModel(type);
  Map.Entry<String,FieldModel>[] entries2=heapSizeOrderedFields(dvmodel2);
  for (  Map.Entry<String,? extends FieldModel> entry2 : entries2) {
    FieldModel model2=entry2.getValue();
    offset+=dvmodel2.isScalar(model2.type()) ? fieldSize(model2) : computeNonScalarOffset(dvmodel2,model2.type());
  }
  return offset;
}","public static int computeNonScalarOffset(DataValueModel dvmodel,Class type){
  int offset=0;
  DataValueModel dvmodel2=dvmodel.nestedModel(type);
  Map.Entry<String,FieldModel>[] entries2=heapSizeOrderedFields(dvmodel2);
  for (  Map.Entry<String,? extends FieldModel> entry2 : entries2) {
    FieldModel model2=entry2.getValue();
    int add=dvmodel2.isScalar(model2.type()) ? fieldSize(model2) : computeNonScalarOffset(dvmodel2,model2.type());
    if (model2.isArray())     add*=model2.indexSize().value();
    offset+=add;
  }
  return offset;
}"
26304,"private E valueOf(String s){
  E e=map.get(s);
  if (e == null)   try {
    if (constructor != null) {
      map.put(s,e=constructor.newInstance(s));
    }
 else {
      @SuppressWarnings(""String_Node_Str"") E invoke=(E)valueOf.invoke(null,s);
      map.put(s,e=invoke);
    }
  }
 catch (  Exception t) {
    throw new AssertionError(t.getCause());
  }
  return e;
}","private E valueOf(String s){
  E e=map.get(s);
  if (e == null)   try {
    if (constructor != null) {
      map.put(s,e=constructor.newInstance(s));
    }
 else {
      @SuppressWarnings(""String_Node_Str"") E invoke=(E)valueOf.invoke(null,s);
      map.put(s,e=invoke);
    }
  }
 catch (  Exception t) {
    throw new AssertionError(t);
  }
  return e;
}"
26305,"public GenericEnumMarshaller(@NotNull Class<E> classMarshaled,final int capacity){
  Constructor<E> constructor=null;
  Method valueOf=null;
  try {
    valueOf=classMarshaled.getMethod(""String_Node_Str"",String.class);
  }
 catch (  NoSuchMethodException e) {
    try {
      constructor=classMarshaled.getConstructor(String.class);
    }
 catch (    NoSuchMethodException e1) {
      throw new IllegalArgumentException(classMarshaled + ""String_Node_Str"");
    }
  }
  this.constructor=constructor;
  this.valueOf=valueOf;
  map=new LinkedHashMap<String,E>(128,0.7f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<String,E> eldest){
      return size() > capacity;
    }
  }
;
}","public GenericEnumMarshaller(@NotNull Class<E> classMarshaled,final int capacity){
  Constructor<E> constructor=null;
  Method valueOf=null;
  try {
    valueOf=classMarshaled.getMethod(""String_Node_Str"",String.class);
  }
 catch (  NoSuchMethodException e) {
    try {
      constructor=classMarshaled.getConstructor(String.class);
      constructor.setAccessible(true);
    }
 catch (    NoSuchMethodException e1) {
      throw new IllegalArgumentException(classMarshaled + ""String_Node_Str"");
    }
  }
  this.constructor=constructor;
  this.valueOf=valueOf;
  map=new LinkedHashMap<String,E>(128,0.7f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<String,E> eldest){
      return size() > capacity;
    }
  }
;
}"
26306,"@Nullable private Class load(@NotNull CharSequence name){
  int hash=(int)(Compare.calcLongHashCode(name) & 0x7ffffff) % CACHE_SIZE;
  if (classWeakReference == null)   classWeakReference=new WeakReference[CACHE_SIZE];
  WeakReference<Class> ref=classWeakReference[hash];
  if (ref != null) {
    Class clazz=ref.get();
    if (clazz != null && clazz.getName().equals(name))     return clazz;
  }
  try {
    Class<?> clazz=SC_SHORT_NAME.get(name.toString());
    if (clazz != null)     return clazz;
    clazz=classLoader.loadClass(name.toString());
    classWeakReference[hash]=new WeakReference<Class>(clazz);
    return clazz;
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException(e);
  }
}","@Nullable private Class load(@NotNull CharSequence name){
  int hash=(int)(Compare.calcLongHashCode(name) & 0x7ffffff) % CACHE_SIZE;
  if (classWeakReference == null)   classWeakReference=new WeakReference[CACHE_SIZE];
  WeakReference<Class> ref=classWeakReference[hash];
  if (ref != null) {
    Class clazz=ref.get();
    if (clazz != null && StringInterner.isEqual(clazz.getName(),name))     return clazz;
  }
  try {
    String className=name.toString();
    Class<?> clazz=SC_SHORT_NAME.get(className);
    if (clazz != null)     return clazz;
    clazz=classLoader.loadClass(className);
    classWeakReference[hash]=new WeakReference<Class>(clazz);
    return clazz;
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException(e);
  }
}"
26307,"private static boolean isEqual(@Nullable CharSequence s,@NotNull CharSequence cs){
  if (s == null)   return false;
  if (s.length() != cs.length())   return false;
  for (int i=0; i < cs.length(); i++)   if (s.charAt(i) != cs.charAt(i))   return false;
  return true;
}","public static boolean isEqual(@Nullable CharSequence s,@NotNull CharSequence cs){
  if (s == null)   return false;
  if (s.length() != cs.length())   return false;
  for (int i=0; i < cs.length(); i++)   if (s.charAt(i) != cs.charAt(i))   return false;
  return true;
}"
26308,"private static void generateObjectMethods(StringBuilder sb,DataValueModel<?> dvmodel,Map.Entry<String,FieldModel>[] entries,boolean offHeap){
  int count=0;
  StringBuilder hashCode=new StringBuilder();
  StringBuilder equals=new StringBuilder();
  StringBuilder equalsGetUsing=new StringBuilder();
  StringBuilder toStringGetUsing=new StringBuilder();
  StringBuilder getUsingEquals=new StringBuilder();
  StringBuilder toString=new StringBuilder();
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Method getter=getGetter(model);
    Method getUsing=getUsing(model);
    if (getter == null)     getter=getVolatileGetter(model);
    if (getter != null || getUsing != null) {
      String getterName=(getter == null) ? getterName(getUsing) : getter.getName();
      methodLongHashCode(hashCode,getterName,model,count);
      if (getter != null)       methodEquals(equals,getterName,model,simpleName(dvmodel.type()));
 else {
        methodEqualsGetUsing(getUsingEquals,getUsing.getName());
        methodToStringGetUsing(toStringGetUsing,getUsing.getName(),name,model);
      }
      count++;
    }
    Bytes b;
    if (model.isArray()) {
      String nameWithUpper=Character.toUpperCase(name.charAt(0)) + name.substring(1);
      if (model.isVolatile())       nameWithUpper=""String_Node_Str"" + nameWithUpper;
      sb.append(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ model.indexSize().value()+ ""String_Node_Str""+ ""String_Node_Str""+ nameWithUpper+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (int i=1; i < count; i++)   sb.append('(');
  sb.append(hashCode);
  CharSequence simpleName=simpleName(dvmodel.type()).replace('$','.');
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(""String_Node_Str"").append(equals).append(equalsGetUsing).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(offHeap ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(toString).append(toStringGetUsing).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}","private static void generateObjectMethods(StringBuilder sb,DataValueModel<?> dvmodel,Map.Entry<String,FieldModel>[] entries,boolean offHeap){
  int count=0;
  StringBuilder hashCode=new StringBuilder();
  StringBuilder equals=new StringBuilder();
  StringBuilder equalsGetUsing=new StringBuilder();
  StringBuilder toStringGetUsing=new StringBuilder();
  StringBuilder getUsingEquals=new StringBuilder();
  StringBuilder toString=new StringBuilder();
  for (  Map.Entry<String,FieldModel> entry : entries) {
    String name=entry.getKey();
    FieldModel model=entry.getValue();
    Method getter=getGetter(model);
    Method getUsing=getUsing(model);
    if (getter == null)     getter=getVolatileGetter(model);
    if (getter != null || getUsing != null) {
      String getterName=(getter == null) ? getterName(getUsing) : getter.getName();
      methodLongHashCode(hashCode,getterName,model,count);
      if (getter != null) {
        methodEquals(equals,getterName,model,simpleName(dvmodel.type()));
        methodToString(toString,getterName,name,model);
      }
 else {
        methodEqualsGetUsing(getUsingEquals,getUsing.getName());
        methodToStringGetUsing(toStringGetUsing,getUsing.getName(),name,model);
      }
      count++;
    }
    Bytes b;
    if (model.isArray()) {
      String nameWithUpper=Character.toUpperCase(name.charAt(0)) + name.substring(1);
      if (model.isVolatile())       nameWithUpper=""String_Node_Str"" + nameWithUpper;
      sb.append(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ model.indexSize().value()+ ""String_Node_Str""+ ""String_Node_Str""+ nameWithUpper+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  for (int i=1; i < count; i++)   sb.append('(');
  sb.append(hashCode);
  CharSequence simpleName=simpleName(dvmodel.type()).replace('$','.');
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(""String_Node_Str"").append(equals).append(equalsGetUsing).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(offHeap ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(simpleName).append(""String_Node_Str"").append(toString).append(toStringGetUsing).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
}"
26309,"public static int computeNonScalarOffset(DataValueModel dvmodel,Class type){
  int offset=0;
  DataValueModel dvmodel2=dvmodel.nestedModel(type);
  Map.Entry<String,FieldModel>[] entries2=heapSizeOrderedFields(dvmodel2);
  for (  Map.Entry<String,? extends FieldModel> entry2 : entries2) {
    FieldModel model2=entry2.getValue();
    int add=dvmodel2.isScalar(model2.type()) ? fieldSize(model2) : computeNonScalarOffset(dvmodel2,model2.type());
    if (model2.isArray())     add*=model2.indexSize().value();
    offset+=add;
  }
  return offset;
}","public static int computeNonScalarOffset(DataValueModel dvmodel,Class type){
  int offset=0;
  DataValueModel dvmodel2=dvmodel.nestedModel(type);
  Map.Entry<String,FieldModel>[] entries2=heapSizeOrderedFields(dvmodel2);
  for (  Map.Entry<String,? extends FieldModel> entry2 : entries2) {
    FieldModel model2=entry2.getValue();
    int add;
    if (dvmodel2.isScalar(model2.type())) {
      add=fieldSize(model2);
    }
 else {
      add=computeNonScalarOffset(dvmodel2,model2.type());
      if (model2.isArray())       add*=model2.indexSize().value();
    }
    offset+=add;
  }
  return offset;
}"
26310,"public C read(Bytes bytes,@Nullable C c){
  long length=bytes.readStopBit();
  if (length == 0 && c != null)   return c;
  if (length < NULL_LENGTH || length > Integer.MAX_VALUE)   throw new IllegalStateException(""String_Node_Str"" + length);
  if (length == NULL_LENGTH)   return null;
  return readCollection(bytes,c,(int)length);
}","public C read(Bytes bytes,@Nullable C c){
  long length=bytes.readStopBit();
  if (length == 0 && c != null)   return c;
  if (length < NULL_LENGTH || length > Integer.MAX_VALUE)   throw new IllegalStateException(""String_Node_Str"" + length);
  if (length == NULL_LENGTH)   return null;
  if (c == null)   return newCollection();
  return readCollection(bytes,c,(int)length);
}"
26311,"@Override public Class<ByteBufferReuse> run(){
  ClassLoader cl=MAGIC_CLASS_LOADER;
  return unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
}","@Override public Class<ByteBufferReuse> run(){
  ClassLoader cl=MAGIC_CLASS_LOADER;
  return (Class<ByteBufferReuse>)unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
}"
26312,"private static ByteBufferReuse getReuse(){
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  final String reuseImplClassName=""String_Node_Str"";
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,reuseImplClassName,null,""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  String attachedBufferFieldName=getAttachedBufferFieldName();
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,5);
    String directByteBuffer=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,directByteBuffer);
    Label l0=new Label();
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,5);
    mv.visitTypeInsn(CHECKCAST,directByteBuffer);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    String settableAtt=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,settableAtt);
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(LLOAD,1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_M1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_0);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    mv.visitTypeInsn(CHECKCAST,settableAtt);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitTypeInsn(NEW,settableAtt);
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,settableAtt,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitTypeInsn(NEW,directByteBuffer);
    mv.visitInsn(DUP);
    mv.visitVarInsn(LLOAD,1);
    mv.visitVarInsn(ILOAD,3);
    mv.visitVarInsn(ALOAD,6);
    mv.visitMethodInsn(INVOKESPECIAL,directByteBuffer,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(6,7);
    mv.visitEnd();
  }
  cw.visitEnd();
  final byte[] impl=cw.toByteArray();
  final Unsafe unsafe=NativeBytes.UNSAFE;
  Class<ByteBufferReuse> clazz=AccessController.doPrivileged(new PrivilegedAction<Class<ByteBufferReuse>>(){
    @Override public Class<ByteBufferReuse> run(){
      ClassLoader cl=MAGIC_CLASS_LOADER;
      return unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
    }
  }
);
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","private static ByteBufferReuse getReuse(){
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  final String reuseImplClassName=""String_Node_Str"";
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,reuseImplClassName,null,""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  String attachedBufferFieldName=getAttachedBufferFieldName();
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,5);
    String directByteBuffer=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,directByteBuffer);
    Label l0=new Label();
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,5);
    mv.visitTypeInsn(CHECKCAST,directByteBuffer);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    String settableAtt=""String_Node_Str"";
    mv.visitTypeInsn(INSTANCEOF,settableAtt);
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(LLOAD,1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_M1);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ICONST_0);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ILOAD,3);
    mv.visitFieldInsn(PUTFIELD,directByteBuffer,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitFieldInsn(GETFIELD,directByteBuffer,attachedBufferFieldName,""String_Node_Str"");
    mv.visitTypeInsn(CHECKCAST,settableAtt);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitTypeInsn(NEW,settableAtt);
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,settableAtt,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,6);
    mv.visitVarInsn(ALOAD,4);
    mv.visitFieldInsn(PUTFIELD,settableAtt,""String_Node_Str"",""String_Node_Str"");
    mv.visitTypeInsn(NEW,directByteBuffer);
    mv.visitInsn(DUP);
    mv.visitVarInsn(LLOAD,1);
    mv.visitVarInsn(ILOAD,3);
    mv.visitVarInsn(ALOAD,6);
    mv.visitMethodInsn(INVOKESPECIAL,directByteBuffer,""String_Node_Str"",""String_Node_Str"",false);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(6,7);
    mv.visitEnd();
  }
  cw.visitEnd();
  final byte[] impl=cw.toByteArray();
  final Unsafe unsafe=NativeBytes.UNSAFE;
  Class<ByteBufferReuse> clazz=AccessController.doPrivileged(new PrivilegedAction<Class<ByteBufferReuse>>(){
    @Override public Class<ByteBufferReuse> run(){
      ClassLoader cl=MAGIC_CLASS_LOADER;
      return (Class<ByteBufferReuse>)unsafe.defineClass(reuseImplClassName,impl,0,impl.length,cl,null);
    }
  }
);
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}"
26313,"public GenericEnumMarshaller(@NotNull Class<E> classMarshaled,final int capacity){
  Constructor<E> constructor=null;
  Method valueOf=null;
  try {
    valueOf=classMarshaled.getMethod(""String_Node_Str"",String.class);
  }
 catch (  NoSuchMethodException e) {
    try {
      constructor=classMarshaled.getConstructor(String.class);
      constructor.setAccessible(true);
    }
 catch (    NoSuchMethodException e1) {
      throw new IllegalArgumentException(classMarshaled + ""String_Node_Str"");
    }
  }
  this.constructor=constructor;
  this.valueOf=valueOf;
  map=new LinkedHashMap<String,E>(128,0.7f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<String,E> eldest){
      return size() > capacity;
    }
  }
;
}","public GenericEnumMarshaller(@NotNull Class<E> classMarshaled,final int capacity){
  this.classMarshaled=classMarshaled;
  this.capacity=capacity;
  Constructor<E> constructor=null;
  Method valueOf=null;
  try {
    valueOf=classMarshaled.getMethod(""String_Node_Str"",String.class);
  }
 catch (  NoSuchMethodException e) {
    try {
      constructor=classMarshaled.getConstructor(String.class);
      constructor.setAccessible(true);
    }
 catch (    NoSuchMethodException e1) {
      throw new IllegalArgumentException(classMarshaled + ""String_Node_Str"");
    }
  }
  this.constructor=constructor;
  this.valueOf=valueOf;
  map=new LinkedHashMap<String,E>(128,0.7f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<String,E> eldest){
      return size() > capacity;
    }
  }
;
}"
26314,"@NotNull @Override public InputStream inputStream(){
  if (inputStream == null)   inputStream=new BytesInputStream();
  return inputStream;
}","@NotNull @Override public InputStream inputStream(){
  return new BytesInputStream();
}"
26315,"@NotNull @Override public String readUTF(){
  try {
    int len=readUnsignedShort();
    readUTF0(acquireUtfReader(),len);
    return utfReader.length() == 0 ? ""String_Node_Str"" : stringInterner().intern(utfReader);
  }
 catch (  IOException unexpected) {
    throw new AssertionError(unexpected);
  }
}","@NotNull @Override public String readUTF(){
  try {
    int len=readUnsignedShort();
    StringBuilder utfReader=acquireUtfReader();
    readUTF0(utfReader,len);
    return utfReader.length() == 0 ? ""String_Node_Str"" : stringInterner().intern(utfReader);
  }
 catch (  IOException unexpected) {
    throw new AssertionError(unexpected);
  }
}"
26316,"@Override public void writeUTFΔ(long offset,int maxSize,@Nullable CharSequence s) throws IllegalStateException {
}","@Override public synchronized void writeUTFΔ(long offset,int maxSize,@Nullable CharSequence s) throws IllegalStateException {
}"
26317,"@NotNull private StringBuilder acquireUtfReader(){
  if (utfReader == null)   utfReader=new StringBuilder(128);
 else   utfReader.setLength(0);
  return utfReader;
}","@NotNull private StringBuilder acquireUtfReader(){
  StringBuilder utfReader=utfReaderTL.get();
  if (utfReader == null)   utfReaderTL.set(utfReader=new StringBuilder(128));
 else   utfReader.setLength(0);
  return utfReader;
}"
26318,"@NotNull @Override public OutputStream outputStream(){
  if (outputStream == null)   outputStream=new BytesOutputStream();
  return outputStream;
}","@NotNull @Override public OutputStream outputStream(){
  return new BytesOutputStream();
}"
26319,"private void unlockFailedInt(long offset,int lowId) throws IllegalMonitorStateException {
  long currentValue=readUnsignedInt(offset);
  long holderId=currentValue & INT_LOCK_MASK;
  if (holderId == lowId) {
    currentValue-=1 << 24;
    writeOrderedInt(offset,(int)currentValue);
  }
 else   if (currentValue == 0) {
    LOGGER.severe(""String_Node_Str"" + shortThreadId());
  }
 else {
    throw new IllegalMonitorStateException(""String_Node_Str"" + holderId + ""String_Node_Str""+ (currentValue >>> 24)+ ""String_Node_Str"");
  }
}","private void unlockFailedInt(long offset,int lowId) throws IllegalMonitorStateException {
  long currentValue=readInt(offset);
  long holderId=currentValue & INT_LOCK_MASK;
  if (holderId == lowId) {
    currentValue-=1 << 24;
    writeOrderedInt(offset,(int)currentValue);
  }
 else   if (currentValue == 0) {
    LOGGER.severe(""String_Node_Str"" + shortThreadId());
  }
 else {
    throw new IllegalMonitorStateException(""String_Node_Str"" + holderId + ""String_Node_Str""+ (currentValue >>> 24)+ ""String_Node_Str"");
  }
}"
26320,"private boolean tryLockNanos4a(long offset){
  int lowId=shortThreadId();
  int firstValue=((1 << 24) | lowId);
  if (compareAndSwapInt(offset,0,firstValue))   return true;
  long currentValue=readUnsignedInt(offset);
  if ((currentValue & INT_LOCK_MASK) == lowId) {
    if (currentValue >= (255L << 24))     throw new IllegalStateException(""String_Node_Str"");
    currentValue+=1 << 24;
    writeOrderedInt(offset,(int)currentValue);
  }
  return false;
}","private boolean tryLockNanos4a(long offset){
  int lowId=shortThreadId();
  int firstValue=((1 << 24) | lowId);
  if (compareAndSwapInt(offset,0,firstValue))   return true;
  int currentValue=readInt(offset);
  if ((currentValue & INT_LOCK_MASK) == lowId) {
    if ((currentValue >>> 24) >= 255)     throw new IllegalStateException(""String_Node_Str"");
    currentValue+=1 << 24;
    writeOrderedInt(offset,(int)currentValue);
    return true;
  }
  return false;
}"
26321,"public boolean startsWith(RandomDataInput input){
  long inputRemaining=input.remaining();
  if ((limitAddr - positionAddr) < inputRemaining)   return false;
  long pos=position(), inputPos=input.position();
  UNSAFE.getLong(startAddr + pos);
  int i=0;
  for (; i < inputRemaining - 7; i+=8) {
    if (UNSAFE.getInt(startAddr + pos + i) != input.readInt(inputPos + i))     return false;
  }
  for (; i < inputRemaining; i++) {
    if (UNSAFE.getByte(startAddr + pos + i) != input.readByte(inputPos + i))     return false;
  }
  return true;
}","public boolean startsWith(RandomDataInput input){
  long inputRemaining=input.remaining();
  if ((limitAddr - positionAddr) < inputRemaining)   return false;
  long pos=position(), inputPos=input.position();
  UNSAFE.getLong(startAddr + pos);
  int i=0;
  for (; i < inputRemaining - 7; i+=8) {
    if (UNSAFE.getLong(startAddr + pos + i) != input.readLong(inputPos + i))     return false;
  }
  for (; i < inputRemaining; i++) {
    if (UNSAFE.getByte(startAddr + pos + i) != input.readByte(inputPos + i))     return false;
  }
  return true;
}"
26322,"@Test public void testAppendParse(){
  bytes.append(false).append(' ');
  bytes.append(true).append(' ');
  bytes.append(""String_Node_Str"").append(' ');
  bytes.append(""String_Node_Str"").append(' ');
  bytes.append(BuySell.Buy).append(' ');
  bytes.append(1234).append(' ');
  bytes.append(123456L).append(' ');
  bytes.append(1.2345).append(' ');
  bytes.append(1.5555,3).append(' ');
  bytes.position(0);
  assertEquals(false,bytes.parseBoolean(SPACE_STOP));
  assertEquals(true,bytes.parseBoolean(SPACE_STOP));
  assertEquals(null,bytes.parseBoolean(SPACE_STOP));
  assertEquals(""String_Node_Str"",bytes.parseUTF(SPACE_STOP));
  assertEquals(BuySell.Buy,bytes.parseEnum(BuySell.class,SPACE_STOP));
  assertEquals(1234,bytes.parseLong());
  assertEquals(123456L,bytes.parseLong());
  assertEquals(1.2345,bytes.parseDouble(),0);
  assertEquals(1.556,bytes.parseDouble(),0);
}","@Test public void testAppendParse(){
  bytes.append(false).append(' ');
  bytes.append(true).append(' ');
  bytes.append(""String_Node_Str"").append(' ');
  bytes.append(""String_Node_Str"").append(' ');
  bytes.append(BuySell.Buy).append(' ');
  bytes.append(1234).append(' ');
  bytes.append(123456L).append(' ');
  bytes.append(1.2345).append(' ');
  bytes.append(1.5555,3).append(' ');
  bytes.position(0);
  assertEquals(false,bytes.parseBoolean(SPACE_STOP));
  assertEquals(true,bytes.parseBoolean(SPACE_STOP));
  assertEquals(null,bytes.parseBoolean(SPACE_STOP));
  assertEquals(""String_Node_Str"",bytes.parseUTF(SPACE_STOP));
  assertEquals(BuySell.Buy,bytes.parseEnum(BuySell.class,SPACE_STOP));
  assertEquals(1234,bytes.parseLong());
  assertEquals(123456L,bytes.parseLong());
  assertEquals(1.2345,bytes.parseDouble(),0);
}"
26323,"@Override public DirectBitSet flip(long fromIndex,long exclusiveToIndex){
  long fromLongIndex=fromIndex >> 6;
  long toIndex=exclusiveToIndex - 1;
  long toLongIndex=toIndex >> 6;
  if (fromIndex < 0 || fromIndex > exclusiveToIndex || toLongIndex >= longLength)   throw new IndexOutOfBoundsException();
  if (fromLongIndex != toLongIndex) {
    long firstFullLongIndex=fromLongIndex;
    if ((fromIndex & 0x3F) != 0) {
      long fromByteIndex=fromLongIndex << 3;
      long mask=(~0L) << fromIndex;
      long l=bytes.readLong(fromByteIndex);
      long l2=l ^ mask;
      bytes.writeLong(fromByteIndex,l2);
      firstFullLongIndex++;
    }
    if ((exclusiveToIndex & 0x3F) == 0) {
      for (long i=firstFullLongIndex; i <= toLongIndex; i++) {
        long l=bytes.readLong(i << 3);
        long l2=~l;
        bytes.writeLong(i << 3,l2);
        break;
      }
    }
 else {
      for (long i=firstFullLongIndex; i < toLongIndex; i++) {
        long l=bytes.readLong(i << 3);
        long l2=~l;
        bytes.writeLong(i << 3,l2);
        break;
      }
      long toByteIndex=toLongIndex << 3;
      long mask=(~0L) >>> ~toIndex;
      long l=bytes.readLong(toByteIndex);
      long l2=l ^ mask;
      bytes.writeLong(toByteIndex,l2);
      return this;
    }
  }
 else {
    long byteIndex=fromLongIndex << 3;
    long mask=((~0L) << fromIndex) & ((~0L) >>> ~toIndex);
    long l=bytes.readLong(byteIndex);
    long l2=l ^ mask;
    bytes.writeLong(byteIndex,l2);
    return this;
  }
  return this;
}","@Override public DirectBitSet flip(long fromIndex,long exclusiveToIndex){
  long fromLongIndex=fromIndex >> 6;
  long toIndex=exclusiveToIndex - 1;
  long toLongIndex=toIndex >> 6;
  if (fromIndex < 0 || fromIndex > exclusiveToIndex || toLongIndex >= longLength)   throw new IndexOutOfBoundsException();
  if (fromLongIndex != toLongIndex) {
    long firstFullLongIndex=fromLongIndex;
    if ((fromIndex & 0x3F) != 0) {
      long fromByteIndex=fromLongIndex << 3;
      long mask=(~0L) << fromIndex;
      long l=bytes.readLong(fromByteIndex);
      long l2=l ^ mask;
      bytes.writeLong(fromByteIndex,l2);
      firstFullLongIndex++;
    }
    if ((exclusiveToIndex & 0x3F) == 0) {
      for (long i=firstFullLongIndex; i <= toLongIndex; i++) {
        long l=bytes.readLong(i << 3);
        long l2=~l;
        bytes.writeLong(i << 3,l2);
      }
    }
 else {
      for (long i=firstFullLongIndex; i < toLongIndex; i++) {
        long l=bytes.readLong(i << 3);
        long l2=~l;
        bytes.writeLong(i << 3,l2);
      }
      long toByteIndex=toLongIndex << 3;
      long mask=(~0L) >>> ~toIndex;
      long l=bytes.readLong(toByteIndex);
      long l2=l ^ mask;
      bytes.writeLong(toByteIndex,l2);
      return this;
    }
  }
 else {
    long byteIndex=fromLongIndex << 3;
    long mask=((~0L) << fromIndex) & ((~0L) >>> ~toIndex);
    long l=bytes.readLong(byteIndex);
    long l2=l ^ mask;
    bytes.writeLong(byteIndex,l2);
    return this;
  }
  return this;
}"
26324,"@Override public long previousClearLong(long fromLongIndex){
  if (fromLongIndex < 0) {
    if (fromLongIndex == NOT_FOUND)     return NOT_FOUND;
    throw new IndexOutOfBoundsException();
  }
  if (fromLongIndex >= longLength)   fromLongIndex=longLength - 1;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    if (bytes.readLong(i << 3) != ~0)     return i;
  }
  return NOT_FOUND;
}","@Override public long previousClearLong(long fromLongIndex){
  if (fromLongIndex < 0) {
    if (fromLongIndex == NOT_FOUND)     return NOT_FOUND;
    throw new IndexOutOfBoundsException();
  }
  if (fromLongIndex >= longLength)   fromLongIndex=longLength - 1;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0L)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    if (bytes.readLong(i << 3) != ~0L)     return i;
  }
  return NOT_FOUND;
}"
26325,"@Override public long nextClearLong(long fromLongIndex){
  if (fromLongIndex < 0)   throw new IndexOutOfBoundsException();
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    if (bytes.readLong(i << 3) != ~0)     return i;
  }
  return NOT_FOUND;
}","@Override public long nextClearLong(long fromLongIndex){
  if (fromLongIndex < 0)   throw new IndexOutOfBoundsException();
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0L)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    if (bytes.readLong(i << 3) != ~0L)     return i;
  }
  return NOT_FOUND;
}"
26326,"@Override public DirectBitSet flip(long fromIndex,long toIndex){
  throw new UnsupportedOperationException();
}","@Override public DirectBitSet flip(long fromIndex,long exclusiveToIndex){
  long fromLongIndex=fromIndex >> 6;
  long toIndex=exclusiveToIndex - 1;
  long toLongIndex=toIndex >> 6;
  if (fromIndex < 0 || fromIndex > exclusiveToIndex || toLongIndex >= longLength)   throw new IndexOutOfBoundsException();
  if (fromLongIndex != toLongIndex) {
    long firstFullLongIndex=fromLongIndex;
    if ((fromIndex & 0x3F) != 0) {
      long fromByteIndex=fromLongIndex << 3;
      long mask=(~0L) << fromIndex;
      while (true) {
        long l=bytes.readVolatileLong(fromByteIndex);
        long l2=l ^ mask;
        if (bytes.compareAndSwapLong(fromByteIndex,l,l2))         break;
      }
      firstFullLongIndex++;
    }
    if ((exclusiveToIndex & 0x3F) == 0) {
      for (long i=firstFullLongIndex; i <= toLongIndex; i++) {
        while (true) {
          long l=bytes.readVolatileLong(i << 3);
          long l2=~l;
          if (bytes.compareAndSwapLong(i << 3,l,l2))           break;
        }
      }
    }
 else {
      for (long i=firstFullLongIndex; i < toLongIndex; i++) {
        while (true) {
          long l=bytes.readVolatileLong(i << 3);
          long l2=~l;
          if (bytes.compareAndSwapLong(i << 3,l,l2))           break;
        }
      }
      long toByteIndex=toLongIndex << 3;
      long mask=(~0L) >>> ~toIndex;
      while (true) {
        long l=bytes.readVolatileLong(toByteIndex);
        long l2=l ^ mask;
        if (bytes.compareAndSwapLong(toByteIndex,l,l2))         return this;
      }
    }
  }
 else {
    long byteIndex=fromLongIndex << 3;
    long mask=((~0L) << fromIndex) & ((~0L) >>> ~toIndex);
    while (true) {
      long l=bytes.readVolatileLong(byteIndex);
      long l2=l ^ mask;
      if (bytes.compareAndSwapLong(byteIndex,l,l2))       return this;
    }
  }
  return this;
}"
26327,"@Override public DirectBitSet andNot(long longIndex,long value){
  throw new UnsupportedOperationException();
}","@Override public DirectBitSet andNot(long longIndex,long value){
  while (true) {
    long l=bytes.readVolatileLong(longIndex << 3);
    long l2=l & ~value;
    if (bytes.compareAndSwapLong(longIndex << 3,l,l2))     return this;
  }
}"
26328,"@Override public long nextClearBit(long fromIndex){
  long fromLongIndex=fromIndex >> 6;
  int bitIndex=(int)(fromIndex & 0x3f);
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=~(bytes.readVolatileLong(fromLongIndex << 3) >>> bitIndex);
  if (l != 0) {
    return Long.numberOfTrailingZeros(l) + bitIndex;
  }
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    l=~bytes.readLong(i << 3);
    if (l != 0)     return (i << 6) + Long.numberOfTrailingZeros(l);
  }
  return NOT_FOUND;
}","@Override public long nextClearBit(long fromIndex){
  throw new UnsupportedOperationException();
}"
26329,"@Override public DirectBitSet or(long index,long value){
  while (true) {
    long l=bytes.readVolatileLong(index << 3);
    long l2=l | value;
    if (l == l2 || bytes.compareAndSwapLong(index << 3,l,l2))     return this;
  }
}","@Override public DirectBitSet or(long longIndex,long value){
  while (true) {
    long l=bytes.readVolatileLong(longIndex << 3);
    long l2=l | value;
    if (l == l2 || bytes.compareAndSwapLong(longIndex << 3,l,l2))     return this;
  }
}"
26330,"@Override public long previousSetBit(long fromIndex){
  long fromLongIndex=fromIndex >> 6;
  int bitIndex=(int)(fromIndex & 0x3f);
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3) << -bitIndex;
  if (l != 0)   return fromLongIndex << 6 + Long.numberOfLeadingZeros(l) + bitIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return fromLongIndex << 6 + Long.numberOfLeadingZeros(l);
  }
  return NOT_FOUND;
}","@Override public long previousSetBit(long fromIndex){
  if (fromIndex < 0) {
    if (fromIndex == NOT_FOUND)     return NOT_FOUND;
    throw new IndexOutOfBoundsException();
  }
  long fromLongIndex=fromIndex >> 6;
  if (fromLongIndex >= longLength) {
    fromLongIndex=longLength - 1;
    fromIndex=size() - 1;
  }
  long l=bytes.readVolatileLong(fromLongIndex << 3) << ~fromIndex;
  if (l != 0)   return fromIndex - Long.numberOfLeadingZeros(l);
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return fromLongIndex << 6 + Long.numberOfLeadingZeros(l);
  }
  return NOT_FOUND;
}"
26331,"@Override public long length(){
  return longLength << 6;
}","@Override public long length(){
  throw new UnsupportedOperationException();
}"
26332,"@Override public long previousSetLong(long fromLongIndex){
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3);
  if (l != 0)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return i;
  }
  return NOT_FOUND;
}","@Override public long previousSetLong(long fromLongIndex){
  if (fromLongIndex < 0) {
    if (fromLongIndex == NOT_FOUND)     return NOT_FOUND;
    throw new IndexOutOfBoundsException();
  }
  if (fromLongIndex >= longLength)   fromLongIndex=longLength - 1;
  if (bytes.readVolatileLong(fromLongIndex << 3) != 0)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    if (bytes.readLong(i << 3) != 0)     return i;
  }
  return NOT_FOUND;
}"
26333,"@Override public long nextSetBit(long fromIndex){
  long fromLongIndex=fromIndex >> 6;
  int bitIndex=(int)(fromIndex & 0x3f);
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3) >>> bitIndex;
  if (l != 0) {
    return Long.numberOfTrailingZeros(l) + bitIndex;
  }
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return (i << 6) + Long.numberOfTrailingZeros(l);
  }
  return NOT_FOUND;
}","@Override public long nextSetBit(long fromIndex){
  if (fromIndex < 0)   throw new IndexOutOfBoundsException();
  long fromLongIndex=fromIndex >> 6;
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3) >>> fromIndex;
  if (l != 0) {
    return fromIndex + Long.numberOfTrailingZeros(l);
  }
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return (i << 6) + Long.numberOfTrailingZeros(l);
  }
  return NOT_FOUND;
}"
26334,"@Override public long nextSetLong(long fromLongIndex){
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3);
  if (l != 0)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    l=bytes.readLong(i << 3);
    if (l != 0)     return i;
  }
  return NOT_FOUND;
}","@Override public long nextSetLong(long fromLongIndex){
  if (fromLongIndex < 0)   throw new IndexOutOfBoundsException();
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  if (bytes.readVolatileLong(fromLongIndex << 3) != 0)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    if (bytes.readLong(i << 3) != 0)     return i;
  }
  return NOT_FOUND;
}"
26335,"@Override public long getLong(long index64){
  if (index64 < 0 || index64 >= bytes.capacity())   throw new IllegalArgumentException();
  return bytes.readVolatileLong(index64 << 3);
}","@Override public long getLong(long longIndex){
  if (longIndex < 0 || longIndex >= longLength)   throw new IndexOutOfBoundsException();
  return bytes.readVolatileLong(longIndex << 3);
}"
26336,"public ATSDirectBitSet(Bytes bytes){
  this.bytes=bytes;
  longLength=bytes.length() >> 8;
}","public ATSDirectBitSet(Bytes bytes){
  this.bytes=bytes;
  longLength=bytes.capacity() >> 3;
}"
26337,"@Override public long previousClearLong(long fromLongIndex){
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=~bytes.readVolatileLong(fromLongIndex << 3);
  if (l != 0)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    l=~bytes.readLong(i << 3);
    if (l != 0)     return i;
  }
  return NOT_FOUND;
}","@Override public long previousClearLong(long fromLongIndex){
  if (fromLongIndex < 0) {
    if (fromLongIndex == NOT_FOUND)     return NOT_FOUND;
    throw new IndexOutOfBoundsException();
  }
  if (fromLongIndex >= longLength)   fromLongIndex=longLength - 1;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0)   return fromLongIndex;
  for (long i=fromLongIndex - 1; i >= 0; i--) {
    if (bytes.readLong(i << 3) != ~0)     return i;
  }
  return NOT_FOUND;
}"
26338,"@Override public DirectBitSet and(long index,long value){
  while (true) {
    long l=bytes.readVolatileLong(index << 3);
    long l2=l & value;
    if (l == l2 || bytes.compareAndSwapLong(index << 3,l,l2))     return this;
  }
}","@Override public DirectBitSet and(long longIndex,long value){
  while (true) {
    long l=bytes.readVolatileLong(longIndex << 3);
    long l2=l & value;
    if (l == l2 || bytes.compareAndSwapLong(longIndex << 3,l,l2))     return this;
  }
}"
26339,"@Override public boolean get(long bitIndex){
  long index64=bitIndex >> 6;
  int bit=(int)(bitIndex & 0x3F);
  if (bitIndex < 0 || index64 >= bytes.capacity())   throw new IllegalArgumentException();
  long l=bytes.readVolatileLong(index64 << 3);
  return (l >> bit) != 0;
}","@Override public boolean get(long bitIndex){
  long longIndex=bitIndex >> 6;
  if (bitIndex < 0 || longIndex >= longLength)   throw new IndexOutOfBoundsException();
  long l=bytes.readVolatileLong(longIndex << 3);
  return (l >> bitIndex) != 0;
}"
26340,"@Override public long nextClearLong(long fromLongIndex){
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  long l=bytes.readVolatileLong(fromLongIndex << 3);
  if (l != ~0)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    l=bytes.readLong(i << 3);
    if (l != ~0)     return i;
  }
  return NOT_FOUND;
}","@Override public long nextClearLong(long fromLongIndex){
  if (fromLongIndex < 0)   throw new IndexOutOfBoundsException();
  if (fromLongIndex >= longLength)   return NOT_FOUND;
  if (bytes.readVolatileLong(fromLongIndex << 3) != ~0)   return fromLongIndex;
  for (long i=fromLongIndex + 1; i < longLength; i++) {
    if (bytes.readLong(i << 3) != ~0)     return i;
  }
  return NOT_FOUND;
}"
26341,"@Override public DirectBitSet xor(long index,long value){
  while (true) {
    long l=bytes.readVolatileLong(index << 3);
    long l2=l ^ value;
    if (bytes.compareAndSwapLong(index << 3,l,l2))     return this;
  }
}","@Override public DirectBitSet xor(long longIndex,long value){
  while (true) {
    long l=bytes.readVolatileLong(longIndex << 3);
    long l2=l ^ value;
    if (bytes.compareAndSwapLong(longIndex << 3,l,l2))     return this;
  }
}"
26342,"@Override public DirectBitSet andNot(long index,long value){
  throw new UnsupportedOperationException();
}","@Override public DirectBitSet andNot(long longIndex,long value){
  throw new UnsupportedOperationException();
}"
26343,"@SuppressWarnings(""String_Node_Str"") @Override public <E>void writeEnum(@Nullable E e){
  Class aClass;
  if (e == null)   aClass=String.class;
 else   aClass=(Class)e.getClass();
  BytesMarshaller<E> em=bytesMarshallerFactory().acquireMarshaller(aClass,true);
  em.write(this,e);
}","@SuppressWarnings(""String_Node_Str"") @Override public <E>void writeEnum(@Nullable E e){
  Class aClass;
  if (e == null || e instanceof CharSequence)   aClass=String.class;
 else   aClass=(Class)e.getClass();
  BytesMarshaller<E> em=bytesMarshallerFactory().acquireMarshaller(aClass,true);
  em.write(this,e);
}"
26344,"@SuppressWarnings(""String_Node_Str"") @Override public void writeObject(@Nullable Object obj){
  if (obj == null) {
    writeByte(NULL);
    return;
  }
  Class<?> clazz=obj.getClass();
  boolean create=obj instanceof Comparable || obj instanceof Externalizable;
  BytesMarshaller em=bytesMarshallerFactory.acquireMarshaller(clazz,create);
  if (em != null) {
    writeByte(ENUMED);
    writeEnum(clazz);
    em.write(this,obj);
    return;
  }
  writeByte(SERIALIZED);
  try {
    ObjectOutputStream oos=new ObjectOutputStream(this.outputStream());
    oos.writeObject(obj);
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
  checkEndOfBuffer();
}","@SuppressWarnings(""String_Node_Str"") @Override public void writeObject(@Nullable Object obj){
  if (obj == null) {
    writeByte(NULL);
    return;
  }
  Class<?> clazz=obj.getClass();
  BytesMarshaller em=bytesMarshallerFactory.acquireMarshaller(clazz,false);
  if (em == null && autoGenerateMarshaller(obj))   em=bytesMarshallerFactory.acquireMarshaller(clazz,true);
  if (em != null) {
    writeByte(ENUMED);
    writeEnum(clazz);
    em.write(this,obj);
    return;
  }
  writeByte(SERIALIZED);
  try {
    ObjectOutputStream oos=new ObjectOutputStream(this.outputStream());
    oos.writeObject(obj);
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
  checkEndOfBuffer();
}"
26345,"private int appendDouble1(long num,final int precision){
  int endIndex=MAX_NUMBER_LENGTH;
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 1)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 2)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 3)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 4)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 5)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 6)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 7)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 8)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 9)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 10)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 11)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 12)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 13)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 14)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 15)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 16)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 17)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 18)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  return endIndex;
}","private int appendDouble1(long num,final int precision){
  int endIndex=MAX_NUMBER_LENGTH;
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 1)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 2)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 3)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 4)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 5)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 6)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 7)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 8)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 9)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 10)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 11)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 12)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 13)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 14)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 15)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 16)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 17)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 18)   numberBuffer[--endIndex]=(byte)'.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  return endIndex;
}"
26346,"private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  Thread.yield();
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}","private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}"
26347,"private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  Thread.yield();
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}","private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}"
26348,"private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  Thread.yield();
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}","private void testAppendDouble0(double d,int precision){
  bytes.position(0);
  bytes.append(d,precision).append(' ');
  bytes.position(0);
  String text=bytes.parseUTF(SPACE_STOP);
  bytes.position(0);
  assertEquals(0,bytes.position());
  double d2=bytes.parseDouble();
  double d3=(double)Math.round(d * Maths.power10(precision)) / Maths.power10(precision);
  assertEquals(""String_Node_Str"" + text + ""String_Node_Str""+ precision,d3,d2,0);
}"
26349,"private int appendDouble1(long num,final int precision){
  int endIndex=MAX_NUMBER_LENGTH;
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 1)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 2)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 3)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 4)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 5)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 6)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 7)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 8)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 9)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 10)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 11)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 12)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 13)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 14)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 15)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 16)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 17)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 18)   numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  return endIndex;
}","private int appendDouble1(long num,final int precision){
  int endIndex=MAX_NUMBER_LENGTH;
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 1)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 2)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 3)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 4)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 5)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 6)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 7)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 8)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 9)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 10)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 11)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 12)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 13)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 14)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 15)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 16)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 17)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  num/=10;
  if (num <= 0)   return endIndex;
  if (precision == 18)   numberBuffer[--endIndex]='.';
  numberBuffer[--endIndex]=(byte)(num % 10L + '0');
  return endIndex;
}"
26350,"@Override public ITernServer create(IIDETernProject project) throws Exception {
  J2V8TernServer server=new J2V8TernServer(project);
  return server;
}","@Override public ITernServer create(ITernProject project) throws Exception {
  J2V8TernServer server=new J2V8TernServer(project);
  return server;
}"
26351,"@Override protected void start(ILaunchConfigurationWorkingCopy workingCopy) throws Exception {
  workingCopy.setAttribute(IExternalToolConstants.ATTR_LOCATION,getNodeInstallPath());
  workingCopy.setAttribute(IExternalToolConstants.ATTR_WORKING_DIRECTORY,getWorkingDir());
  String args=getArgs();
  workingCopy.setAttribute(IExternalToolConstants.ATTR_TOOL_ARGUMENTS,args);
  notifyCreateProcess(Collections.<String>emptyList(),projectDir);
  final ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();
  manager.addLaunchListener(new ILaunchesListener2(){
    @Override public void launchesRemoved(    ILaunch[] launches){
    }
    @Override public void launchesChanged(    ILaunch[] launches){
    }
    @Override public void launchesAdded(    ILaunch[] launches){
    }
    @Override public void launchesTerminated(    ILaunch[] launches){
      for (      ILaunch lc : launches) {
        if (lc.equals(launch)) {
          manager.removeLaunchListener(this);
          notifyStopProcess();
        }
      }
    }
  }
);
  launch=workingCopy.launch(super.getMode(),null);
  for (  IProcess process : launch.getProcesses()) {
    if (process instanceof RuntimeProcess) {
      new StdOut(process.getStreamsProxy().getOutputStreamMonitor());
      new StdErr(process.getStreamsProxy().getErrorStreamMonitor());
    }
  }
}","@Override protected void start(ILaunchConfigurationWorkingCopy workingCopy) throws Exception {
  workingCopy.setAttribute(IExternalToolConstants.ATTR_LOCATION,getNodeInstallPath());
  workingCopy.setAttribute(IExternalToolConstants.ATTR_WORKING_DIRECTORY,getWorkingDir());
  String args=getArgs();
  workingCopy.setAttribute(IExternalToolConstants.ATTR_TOOL_ARGUMENTS,args);
  notifyCreateProcess(Collections.<String>emptyList(),projectDir);
  final ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();
  manager.addLaunchListener(new ILaunchesListener2(){
    @Override public void launchesRemoved(    ILaunch[] launches){
    }
    @Override public void launchesChanged(    ILaunch[] launches){
    }
    @Override public void launchesAdded(    ILaunch[] launches){
    }
    @Override public void launchesTerminated(    ILaunch[] launches){
      for (      ILaunch lc : launches) {
        if (lc.equals(launch)) {
          manager.removeLaunchListener(this);
          notifyStopProcess();
        }
      }
    }
  }
);
  launch=workingCopy.launch(""String_Node_Str"",null);
  for (  IProcess process : launch.getProcesses()) {
    if (process instanceof RuntimeProcess) {
      new StdOut(process.getStreamsProxy().getOutputStreamMonitor());
      new StdErr(process.getStreamsProxy().getErrorStreamMonitor());
    }
  }
}"
26352,"public static IFile getFileForLocation(String path){
  if (path == null) {
    return null;
  }
  IPath filePath=new Path(path);
  IFile file=null;
  IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocation(filePath);
  if (files.length > 0) {
    return files[0];
  }
  return null;
}","public static IFile getFileForLocation(String path){
  if (path == null) {
    return null;
  }
  IPath filePath=new Path(path);
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IFile file=root.getFile(filePath);
  if (file.exists()) {
    return file;
  }
  IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocation(filePath);
  if (files.length > 0) {
    return files[0];
  }
  return null;
}"
26353,"private IJSNode findSimilarChild(IJSNode newParentNode,IJSNode originChildNode){
  IJSNode matchingNode=null;
  if (originChildNode.getName() != null) {
    for (    IJSNode child : newParentNode.getChildren()) {
      if (child.getName() != null && child.getName().equals(originChildNode.getName())) {
        matchingNode=child;
      }
    }
  }
  if (matchingNode == null) {
    int index=originChildNode.getParent().getChildren().indexOf(originChildNode);
    if (newParentNode.getChildren().size() > index) {
      matchingNode=newParentNode.getChildren().get(index);
    }
  }
  return matchingNode;
}","private IJSNode findSimilarChild(IJSNode newParentNode,IJSNode originChildNode){
  IJSNode matchingNode=null;
  if (originChildNode.getName() != null) {
    for (    IJSNode child : newParentNode.getChildren()) {
      if (child.getName() != null && child.getName().equals(originChildNode.getName())) {
        matchingNode=child;
      }
    }
  }
  if (matchingNode == null) {
    int index=originChildNode.getParent().getChildren().indexOf(originChildNode);
    if (index >= 0 && newParentNode.getChildren().size() > index) {
      matchingNode=newParentNode.getChildren().get(index);
    }
  }
  return matchingNode;
}"
26354,"private IJSNode findSimilarChild(IJSNode newParentNode,IJSNode originChildNode){
  IJSNode matchingNode=null;
  if (originChildNode.getName() != null) {
    for (    IJSNode child : newParentNode.getChildren()) {
      if (child.getName() != null && child.getName().equals(originChildNode.getName())) {
        matchingNode=child;
      }
    }
  }
  if (matchingNode == null) {
    matchingNode=newParentNode.getChildren().get(originChildNode.getParent().getChildren().indexOf(originChildNode));
  }
  return matchingNode;
}","private IJSNode findSimilarChild(IJSNode newParentNode,IJSNode originChildNode){
  IJSNode matchingNode=null;
  if (originChildNode.getName() != null) {
    for (    IJSNode child : newParentNode.getChildren()) {
      if (child.getName() != null && child.getName().equals(originChildNode.getName())) {
        matchingNode=child;
      }
    }
  }
  if (matchingNode == null) {
    int index=originChildNode.getParent().getChildren().indexOf(originChildNode);
    if (newParentNode.getChildren().size() > index) {
      matchingNode=newParentNode.getChildren().get(index);
    }
  }
  return matchingNode;
}"
26355,"private void setCurrentPart(IWorkbenchPart part){
  if (this.textEditor != null) {
    uninstall(this.textEditor.getSelectionProvider());
  }
  if (part instanceof ITextEditor) {
    this.textEditor=(ITextEditor)part;
    ISelectionProvider provider=this.textEditor.getSelectionProvider();
    selectInTreeview(provider.getSelection());
    install(provider);
  }
 else {
    this.textEditor=null;
  }
}","private void setCurrentPart(IWorkbenchPart part){
  if (part instanceof ITextEditor) {
    this.textEditor=(ITextEditor)part;
  }
 else {
    this.textEditor=null;
  }
  updateSelectionJob.setCurrentPart(part);
}"
26356,"public void openInEditor(IJSNode node,boolean force){
  AbstractTernContentOutlinePage page=getCurrentTernPage();
  if (page == null) {
    return;
  }
  if (!force && (!isLinkingEnabled() || ignoreSelectionChanged)) {
    return;
  }
  this.currentNodeToOpen=node;
  activateEditorJob.schedule(LINK_HELPER_DELAY);
}","public void openInEditor(IJSNode node,boolean force){
  activateEditorJob.openInEditor(node,force);
}"
26357,"public CommonViewer getCurrentViewer(){
  AbstractTernContentOutlinePage page=getCurrentTernPage();
  return page != null ? page.getViewer() : null;
}","/** 
 * Returns the viewer of the current tern outline page and null otherwise.
 * @return the viewer of the current tern outline page and null otherwise.
 */
CommonViewer getCurrentViewer(){
  AbstractTernContentOutlinePage page=getCurrentTernPage();
  return page != null ? page.getViewer() : null;
}"
26358,"/** 
 * Refresh the outline tree in a job.
 */
public void refreshOutline(){
  if (refreshJob.getState() != Job.NONE) {
    refreshJob.cancel();
  }
  refreshJob.schedule(UPDATE_DELAY);
}","/** 
 * Refresh the outline tree in a job.
 */
public void refreshOutline(){
  refreshJob.refreshOutline();
}"
26359,"public AbstractTernContentOutlinePage getCurrentTernPage(){
  IPage p=getCurrentPage();
  if (p == null || !(p instanceof AbstractTernContentOutlinePage)) {
    return null;
  }
  AbstractTernContentOutlinePage page=(AbstractTernContentOutlinePage)p;
  return page;
}","/** 
 * Returns the current tern outline page and null otherwise.
 * @return the current tern outline page and null otherwise.
 */
AbstractTernContentOutlinePage getCurrentTernPage(){
  IPage p=getCurrentPage();
  if (p == null || !(p instanceof AbstractTernContentOutlinePage)) {
    return null;
  }
  AbstractTernContentOutlinePage page=(AbstractTernContentOutlinePage)p;
  return page;
}"
26360,"@Override public void dispose(){
  super.dispose();
  if (this.textEditor != null) {
    uninstall(this.textEditor.getSelectionProvider());
  }
  activateEditorJob.cancel();
  updateSelectionJob.cancel();
  refreshJob.cancel();
}","@Override public void dispose(){
  super.dispose();
  activateEditorJob.cancel();
  updateSelectionJob.dispose();
  refreshJob.cancel();
}"
26361,"@SuppressWarnings(""String_Node_Str"") @Override public Iterable<Object> getList(Object jsonObj,String name){
  return (Iterable<Object>)((NativeObject)jsonObj).get(""String_Node_Str"",(NativeObject)jsonObj);
}","@SuppressWarnings(""String_Node_Str"") @Override public Iterable<Object> getList(Object jsonObj,String name){
  Object result=((NativeObject)jsonObj).get(name,(NativeObject)jsonObj);
  return (result instanceof Iterable<?>) ? (Iterable<Object>)result : null;
}"
26362,"@Override public ITernServer create(ITernProject project) throws Exception {
  NodejsTernServer server;
  if (isRemoteAccess()) {
    server=new NodejsTernServer(project,getRemotePort());
  }
 else {
    INodejsDebugger debugger=NodejsDebuggersManager.getDebugger(getDebugger());
    File installPath=getInstallPath();
    IFile ternServerFile=getTernServerDebugFile();
    if (debugger != null && debugger.isInstalled() && ternServerFile != null && ternServerFile.exists() && !ternServerFile.getProject().equals(project.getAdapter(IProject.class))) {
      server=new NodejsTernServer(project,debugger.createProcess(project.getProjectDir(),installPath,ternServerFile));
    }
 else {
      File ternFile=project.getRepository().getTernBaseDir();
      server=new NodejsTernServer(project,installPath,ternFile);
    }
  }
  server.setTimeout(getTimeout());
  server.setTestNumber(getTestNumber());
  server.setPersistent(isPersistent());
  return server;
}","@Override public ITernServer create(ITernProject project) throws Exception {
  NodejsTernServer server;
  if (isRemoteAccess()) {
    server=new NodejsTernServer(project,getRemotePort());
  }
 else {
    INodejsDebugger debugger=NodejsDebuggersManager.getDebugger(getDebugger());
    File installPath=getInstallPath();
    IFile ternServerFile=getTernServerDebugFile();
    if (debugger != null && debugger.isInstalled() && ternServerFile != null && ternServerFile.exists() && !ternServerFile.getProject().equals(project.getAdapter(IProject.class))) {
      server=new NodejsTernServer(project,debugger.createProcess(project.getProjectDir(),installPath,ternServerFile));
    }
 else {
      File ternBaseDir=project.getRepository().getTernBaseDir();
      server=new NodejsTernServer(project,installPath,ternBaseDir);
    }
  }
  server.setTimeout(getTimeout());
  server.setTestNumber(getTestNumber());
  server.setPersistent(isPersistent());
  return server;
}"
26363,"private void updateEnabled(boolean isRemote){
  Composite parent=getFieldEditorParent();
  remotePortField.setEnabled(isRemote,parent);
  timeoutField.setEnabled(!isRemote,parent);
  testNumberField.setEnabled(!isRemote,parent);
  persistentField.setEnabled(!isRemote,parent);
  debuggerField.setEnabled(!isRemote,parent);
  ternRepositoryField.setEnabled(!isRemote,parent);
  nodeJSInstallField.setEnabled(!isRemote,parent);
  nodePathTitle.setEnabled(!isRemote);
  nativeNodePath.setEnabled(!isRemote,parent);
  nodePath.setEnabled(!isRemote);
}","private void updateEnabled(boolean isRemote){
  Composite parent=getFieldEditorParent();
  remotePortField.setEnabled(isRemote,parent);
  timeoutField.setEnabled(!isRemote,parent);
  testNumberField.setEnabled(!isRemote,parent);
  persistentField.setEnabled(!isRemote,parent);
  debuggerField.setEnabled(!isRemote,parent);
  ternRepositoryField.setEnabled(debuggerField.isCheckboxSelected(),parent);
  nodeJSInstallField.setEnabled(!isRemote,parent);
  nodePathTitle.setEnabled(!isRemote);
  nativeNodePath.setEnabled(!isRemote,parent);
  nodePath.setEnabled(!isRemote);
}"
26364,"@Override protected void doFillIntoGrid(Composite parent,int numColumns){
  super.doFillIntoGrid(parent,numColumns - 1);
  importButton=getImportButtonControl(parent);
  GridData gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  int widthHint=convertHorizontalDLUsToPixels(importButton,IDialogConstants.BUTTON_WIDTH);
  gd.widthHint=Math.max(widthHint,importButton.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  importButton.setLayoutData(gd);
  addButton=getAddButtonControl(parent);
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  widthHint=convertHorizontalDLUsToPixels(addButton,IDialogConstants.BUTTON_WIDTH);
  gd.widthHint=Math.max(widthHint,addButton.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  addButton.setLayoutData(gd);
}","@Override protected void doFillIntoGrid(Composite parent,int numColumns){
  super.doFillIntoGrid(parent,numColumns - 1);
  importButton=getImportButtonControl(parent);
  GridData gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  int widthHint=convertHorizontalDLUsToPixels(importButton,IDialogConstants.BUTTON_WIDTH);
  gd.widthHint=Math.max(widthHint,importButton.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  importButton.setLayoutData(gd);
}"
26365,"@Override protected void adjustForNumColumns(int numColumns){
  super.adjustForNumColumns(numColumns - 2);
}","@Override protected void adjustForNumColumns(int numColumns){
  super.adjustForNumColumns(numColumns - NB_BUTTONS);
}"
26366,"@Override protected Object getValueFromPreference(String preferenceValue){
  if (StringUtils.isEmpty(preferenceValue)) {
    return null;
  }
  return TernCorePlugin.getTernRepositoryManager().getRepository(preferenceValue);
}","@Override protected Object getValueFromPreference(String preferenceValue){
  if (StringUtils.isEmpty(preferenceValue)) {
    return TernUIMessages.TernRepositoryFieldEditor_ternRepository_none;
  }
  return TernCorePlugin.getTernRepositoryManager().getRepository(preferenceValue);
}"
26367,"@Override public int getNumberOfControls(){
  return super.getNumberOfControls() + 2;
}","@Override public int getNumberOfControls(){
  return super.getNumberOfControls() + NB_BUTTONS;
}"
26368,"public boolean validate(IDocument document,int offset,DocumentEvent event){
  try {
    String content=document.get(fReplacementPosition.getOffset(),offset - fReplacementPosition.getOffset());
    if (fReplacementString.startsWith(content))     return true;
  }
 catch (  BadLocationException e) {
  }
  return false;
}","@Override public boolean validate(IDocument document,int offset,DocumentEvent event){
  try {
    String content=document.get(fReplacementPosition.getOffset(),offset - fReplacementPosition.getOffset());
    if (fReplacementString.startsWith(content)) {
      return true;
    }
 else     if (fReplacementString.length() > 0) {
      char c=fReplacementString.charAt(0);
      if ((c == '""' || c == '\'') && fReplacementString.startsWith(c + content)) {
        return true;
      }
    }
  }
 catch (  BadLocationException e) {
  }
  return false;
}"
26369,"private ConfigureJob(IJavaScriptProject jsProject){
  super(""String_Node_Str"");
}","private ConfigureJob(IJavaScriptProject jsProject){
  super(""String_Node_Str"");
  this.jsProject=jsProject;
}"
26370,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  monitor.beginTask(""String_Node_Str"",1);
  if (fJsProject != null) {
    IProject project=fJsProject.getProject();
    if (TernCorePlugin.hasTernNature(project)) {
      try {
        IIDETernProject ternProject=TernCorePlugin.getTernProject(project);
        synchTernScriptPaths(fJsProject,ternProject);
      }
 catch (      Exception e) {
        Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
      }
    }
  }
  monitor.worked(1);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  monitor.beginTask(""String_Node_Str"",1);
  if (jsProject != null) {
    IProject project=jsProject.getProject();
    if (TernCorePlugin.hasTernNature(project)) {
      try {
        IIDETernProject ternProject=TernCorePlugin.getTernProject(project);
        synchTernScriptPaths(jsProject,ternProject);
      }
 catch (      Exception e) {
        Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
      }
    }
  }
  monitor.worked(1);
  monitor.done();
  return Status.OK_STATUS;
}"
26371,"/** 
 * Update JSON options of the tern linter plugin.
 * @throws TernException
 */
public void updateOptions() throws TernException {
  ITernLinterConfig config=(ITernLinterConfig)treeViewer.getInput();
  JsonObject jsonOptions=new JsonObject();
  JsonObject jsonConfig=new JsonObject();
  jsonOptions.add(""String_Node_Str"",jsonConfig);
  toJSON(config.getOptions(),jsonConfig);
  ITernModuleConfigurable module=(ITernModuleConfigurable)workingCopy.getTernModule(linterId);
  module.setOptions(jsonOptions);
}","/** 
 * Update JSON options of the tern linter plugin.
 * @throws TernException
 */
public void updateOptions() throws TernException {
  ITernLinterConfig config=(ITernLinterConfig)treeViewer.getInput();
  JsonObject jsonOptions=new JsonObject();
  JsonObject jsonConfig=new JsonObject();
  jsonOptions.add(""String_Node_Str"",jsonConfig);
  updateJSONOptions(config.getOptions(),jsonConfig);
  ITernModuleConfigurable module=(ITernModuleConfigurable)workingCopy.getTernModule(linterId);
  module.setOptions(jsonOptions);
}"
26372,"public void setLinterConfig(ITernLinterConfig config){
  treeViewer.setInput(config);
  treeViewer.expandAll();
}","public void setLinterConfig(ITernLinterConfig config) throws TernException {
  if (workingCopy.hasCheckedTernModule(linterId)) {
    ITernModuleConfigurable module=(ITernModuleConfigurable)workingCopy.getTernModule(linterId);
    JsonObject jsonOptions=module.getOptions();
    if (jsonOptions != null && jsonOptions.get(""String_Node_Str"") != null) {
      updateConfig((JsonObject)jsonOptions.get(""String_Node_Str""),config.getOptions());
    }
  }
  treeViewer.setInput(config);
  treeViewer.expandAll();
}"
26373,"@Override public boolean performOk(){
  linterConfigBlock.saveColumnSettings();
  try {
    linterConfigBlock.updateOptions();
    saveWorkingCopy();
  }
 catch (  Exception e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
  return super.performOk();
}","@Override public boolean performOk(){
  linterConfigBlock.saveColumnSettings();
  try {
    IWorkingCopy workingCopy=getWorkingCopy();
    if (workingCopy.hasCheckedTernModule(linterId)) {
      linterConfigBlock.updateOptions();
      saveWorkingCopy();
    }
  }
 catch (  Exception e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
  return super.performOk();
}"
26374,"/** 
 * Load linter config.
 */
private void loadLinterConfig(){
  try {
    IIDETernProject ternProject=getTernProject();
    ITernLinterConfig config=TernLinterCorePlugin.getDefault().getTernLinterConfigurationsManager().createLinterConfig(linterId);
    linterConfigBlock.setLinterConfig(config);
  }
 catch (  Throwable e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
}","/** 
 * Load linter config.
 */
private void loadLinterConfig(){
  try {
    ITernLinterConfig config=TernLinterCorePlugin.getDefault().getTernLinterConfigurationsManager().createLinterConfig(linterId);
    linterConfigBlock.setLinterConfig(config);
  }
 catch (  Throwable e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
}"
26375,"public void refreshModules(){
  try {
    IWorkingCopy workingCopy=getWorkingCopy();
    workingCopy.addWorkingCopyListener(this);
    modulesBlock.refresh(getTernProject().getAllModules(),workingCopy.getCheckedModules());
  }
 catch (  Throwable e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
}","public void refreshModules(){
  try {
    IWorkingCopy workingCopy=getWorkingCopy();
    workingCopy.addWorkingCopyListener(this);
    modulesBlock.refresh(workingCopy.getAllModules(),workingCopy.getCheckedModules());
  }
 catch (  Throwable e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
}"
26376,"@Override public String getHoverInfo(ITextViewer textViewer,IRegion hoverRegion){
  IPath path;
  IAnnotationModel model;
  if (textViewer instanceof ISourceViewer) {
    path=null;
    model=((ISourceViewer)textViewer).getAnnotationModel();
  }
 else {
    path=getEditorInputPath();
    model=getAnnotationModel(path);
  }
  if (model == null)   return null;
  try {
    Iterator e=model.getAnnotationIterator();
    int layer=-1;
    String message=null;
    while (e.hasNext()) {
      Annotation a=(Annotation)e.next();
      if (!(""String_Node_Str"".equals(a.getType()))) {
        continue;
      }
      AnnotationPreference preference=getAnnotationPreference(a);
      Position p=model.getPosition(a);
      int l=fAnnotationAccess.getLayer(a);
      if (l > layer && p != null && p.overlapsWith(hoverRegion.getOffset(),hoverRegion.getLength())) {
        String msg=a.getText();
        if (msg != null && msg.trim().length() > 0) {
          message=msg;
          layer=l;
        }
      }
    }
    if (layer > -1) {
      return formatMessage(message);
    }
  }
  finally {
    try {
      if (path != null) {
        ITextFileBufferManager manager=FileBuffers.getTextFileBufferManager();
        manager.disconnect(path,LocationKind.NORMALIZE,null);
      }
    }
 catch (    CoreException ex) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"",ex);
    }
  }
  return null;
}","@Override public String getHoverInfo(ITextViewer textViewer,IRegion hoverRegion){
  IPath path;
  IAnnotationModel model;
  if (textViewer instanceof ISourceViewer) {
    path=null;
    model=((ISourceViewer)textViewer).getAnnotationModel();
  }
 else {
    path=getEditorInputPath();
    model=getAnnotationModel(path);
  }
  if (model == null)   return null;
  try {
    Iterator e=model.getAnnotationIterator();
    int layer=-1;
    String message=null;
    while (e.hasNext()) {
      Annotation a=(Annotation)e.next();
      if (!isTernAnnotation(a)) {
        continue;
      }
      AnnotationPreference preference=getAnnotationPreference(a);
      Position p=model.getPosition(a);
      int l=fAnnotationAccess.getLayer(a);
      if (l > layer && p != null && p.overlapsWith(hoverRegion.getOffset(),hoverRegion.getLength())) {
        String msg=a.getText();
        if (msg != null && msg.trim().length() > 0) {
          message=msg;
          layer=l;
        }
      }
    }
    if (layer > -1) {
      return formatMessage(message);
    }
  }
  finally {
    try {
      if (path != null) {
        ITextFileBufferManager manager=FileBuffers.getTextFileBufferManager();
        manager.disconnect(path,LocationKind.NORMALIZE,null);
      }
    }
 catch (    CoreException ex) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"",ex);
    }
  }
  return null;
}"
26377,"@Override public void request(final TernDoc doc){
  final ITernServer server=project.getTernServer();
  if (server != null && !server.isDisposed()) {
    server.request(doc,new IResponseHandler(){
      @Override public void onSuccess(      Object data,      String dataAsJsonString){
      }
      @Override public void onError(      String error,      Throwable t){
        project.handleException(new TernException(error,t));
      }
      @Override public boolean isDataAsJsonString(){
        return false;
      }
    }
);
  }
}","@Override public void request(final TernDoc doc){
  final ITernServer server=project.getTernServer();
  if (server != null && !server.isDisposed()) {
    server.request(doc,new IResponseHandler(){
      @Override public void onSuccess(      Object data,      String dataAsJsonString){
      }
      @Override public void onError(      String error,      Throwable t){
        project.handleException(new TernException(error,t));
        project.getFileSynchronizer().uploadFailed(doc);
      }
      @Override public boolean isDataAsJsonString(){
        return false;
      }
    }
);
  }
}"
26378,"@Override public void onError(String error,Throwable t){
  project.handleException(new TernException(error,t));
}","@Override public void onError(String error,Throwable t){
  project.handleException(new TernException(error,t));
  project.getFileSynchronizer().uploadFailed(doc);
}"
26379,"@Override public void ensureSynchronized(){
  TernDoc doc=new TernDoc();
  writeLock.lock();
  try {
    syncedFilesPerPath.clear();
    Set<String> synced=new HashSet<String>(sentFiles.keySet());
    Set<String> toRefreshLocal=new HashSet<String>();
synchronized (toRefresh) {
      toRefreshLocal.addAll(toRefresh);
      toRefresh.clear();
    }
    synced.removeAll(toRefreshLocal);
    long totalSize=0;
    for (    String file : synced) {
      totalSize+=sentFiles.get(file).length();
    }
    for (    ITernScriptPath path : getProject().getScriptPaths()) {
      Set<String> perPath=new HashSet<String>();
      syncedFilesPerPath.put(path,perPath);
      for (      ITernScriptResource resource : path.getScriptResources()) {
        if (totalSize >= MAX_ALLOWED_SIZE) {
          sizeExceeded();
          break;
        }
        ITernFile file=resource.getFile();
        if (file == null) {
          continue;
        }
        String name=file.getFullName(getProject());
        perPath.add(name);
        if (!synced.contains(name)) {
          try {
            TernFile tf=file.toTernServerFile(getProject());
            doc.addFile(tf);
            synced.add(name);
            totalSize+=tf.getText().length();
          }
 catch (          IOException e) {
            getProject().handleException(e);
          }
        }
      }
    }
    toRefreshLocal.removeAll(synced);
    for (    String toRemove : toRefreshLocal) {
      doc.addFile(toRemove,""String_Node_Str"",null,null);
    }
    sendFiles(doc);
  }
  finally {
    writeLock.unlock();
  }
}","@Override public void ensureSynchronized(){
  TernDoc doc=new TernDoc();
  writeLock.lock();
  try {
    if (project.getTernServer() != targetServer) {
      targetServer=project.getTernServer();
      cleanIndexedFiles();
    }
    syncedFilesPerPath.clear();
    Set<String> synced=new HashSet<String>(sentFiles.keySet());
    Set<String> toRefreshLocal=new HashSet<String>();
synchronized (toRefresh) {
      toRefreshLocal.addAll(toRefresh);
      toRefresh.clear();
    }
    synced.removeAll(toRefreshLocal);
    long totalSize=0;
    for (    String file : synced) {
      totalSize+=sentFiles.get(file).length();
    }
    for (    ITernScriptPath path : getProject().getScriptPaths()) {
      Set<String> perPath=new HashSet<String>();
      syncedFilesPerPath.put(path,perPath);
      for (      ITernScriptResource resource : path.getScriptResources()) {
        if (totalSize >= MAX_ALLOWED_SIZE) {
          sizeExceeded();
          break;
        }
        ITernFile file=resource.getFile();
        if (file == null) {
          continue;
        }
        String name=file.getFullName(getProject());
        perPath.add(name);
        if (!synced.contains(name)) {
          try {
            TernFile tf=file.toTernServerFile(getProject());
            doc.addFile(tf);
            synced.add(name);
            totalSize+=tf.getText().length();
          }
 catch (          IOException e) {
            getProject().handleException(e);
          }
        }
      }
    }
    toRefreshLocal.removeAll(synced);
    for (    String toRemove : toRefreshLocal) {
      doc.addFile(toRemove,""String_Node_Str"",null,null);
    }
    sendFiles(doc);
  }
  finally {
    writeLock.unlock();
  }
}"
26380,"public BasicTernPlugin(String name){
  this.name=name;
  int index=getVersionIndex(name);
  if (index != -1) {
    this.type=name.substring(0,index);
    this.version=name.substring(index + 1,name.length());
  }
 else {
    this.type=null;
    this.version=null;
  }
}","public BasicTernPlugin(String name){
  this.name=name;
  int index=getVersionIndex(name);
  if (index != -1) {
    this.type=name.substring(0,index);
    this.version=name.substring(index + 1,name.length());
  }
 else {
    this.type=name;
    this.version=null;
  }
}"
26381,"protected void setTernModules(ITernModule[] vms){
  ternModules.clear();
  for (  ITernModule element : vms) {
    ternModules.add(element);
  }
  tableViewer.setInput(ternModules);
}","protected void setTernModules(ITernModule[] vms){
  ternModules.clear();
  for (  ITernModule module : vms) {
    ternModules.put(module.getName(),module);
  }
  tableViewer.setInput(ternModules.values());
}"
26382,"/** 
 * Create table of tern modules.
 * @param ancestor
 */
private void createModulesMaster(Composite ancestor){
  Composite parent=new Composite(ancestor,SWT.NULL);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  parent.setLayout(layout);
  Font font=ancestor.getFont();
  parent.setFont(font);
  Table table=new Table(parent,SWT.CHECK | SWT.BORDER | SWT.FULL_SELECTION| SWT.V_SCROLL);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=350;
  table.setLayoutData(data);
  table.setFont(parent.getFont());
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  tableViewer=new CheckboxTableViewer(table);
  TableViewerColumn nameColumn=new TableViewerColumn(tableViewer,SWT.NONE);
  nameColumn.getColumn().setWidth(180);
  nameColumn.getColumn().setResizable(true);
  nameColumn.getColumn().setText(TernUIMessages.TernModulesBlock_moduleName);
  nameColumn.getColumn().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sortByName();
    }
  }
);
  TableViewerColumn versionColumn=new TableViewerColumn(tableViewer,SWT.NONE);
  versionColumn.getColumn().setWidth(100);
  versionColumn.getColumn().setResizable(true);
  versionColumn.getColumn().setText(TernUIMessages.TernModulesBlock_moduleVersion);
  versionColumn.setEditingSupport(new TernModuleVersionEditingSupport(tableViewer));
  tableViewer.setLabelProvider(TernModuleLabelProvider.getInstance());
  tableViewer.setContentProvider(ArrayContentProvider.getInstance());
  tableViewer.addCheckStateListener(new ICheckStateListener(){
    private boolean checkUpdating;
    @Override public void checkStateChanged(    CheckStateChangedEvent e){
      if (checkUpdating) {
        return;
      }
      try {
        checkUpdating=true;
        if (e.getChecked() && isSelectDependencies()) {
          ITernModule module=((ITernModule)e.getElement());
          TernModuleMetadata metadata=module.getMetadata();
          if (metadata != null) {
            ITernModule dependencyModule=null;
            for (            String moduleName : metadata.getDependencies()) {
              dependencyModule=TernCorePlugin.getTernServerTypeManager().findTernModule(moduleName);
              if (dependencyModule != null) {
                if (!tableViewer.getChecked(dependencyModule)) {
                  tableViewer.setChecked(dependencyModule,true);
                }
              }
            }
          }
        }
      }
  finally {
        checkUpdating=false;
      }
    }
  }
);
  addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent e){
      if (!e.getSelection().isEmpty()) {
        ITernModule module=(ITernModule)((IStructuredSelection)e.getSelection()).getFirstElement();
        refreshModule(module);
      }
 else {
        refreshModule(null);
      }
    }
  }
);
  restoreColumnSettings();
}","/** 
 * Create table of tern modules.
 * @param ancestor
 */
private void createModulesMaster(Composite ancestor){
  Composite parent=new Composite(ancestor,SWT.NULL);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  parent.setLayout(layout);
  Font font=ancestor.getFont();
  parent.setFont(font);
  Table table=new Table(parent,SWT.CHECK | SWT.BORDER | SWT.FULL_SELECTION| SWT.V_SCROLL);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=350;
  table.setLayoutData(data);
  table.setFont(parent.getFont());
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  tableViewer=new CheckboxTableViewer(table);
  TableViewerColumn nameColumn=new TableViewerColumn(tableViewer,SWT.NONE);
  nameColumn.getColumn().setWidth(180);
  nameColumn.getColumn().setResizable(true);
  nameColumn.getColumn().setText(TernUIMessages.TernModulesBlock_moduleName);
  nameColumn.getColumn().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sortByName();
    }
  }
);
  TableViewerColumn versionColumn=new TableViewerColumn(tableViewer,SWT.NONE);
  versionColumn.getColumn().setWidth(100);
  versionColumn.getColumn().setResizable(true);
  versionColumn.getColumn().setText(TernUIMessages.TernModulesBlock_moduleVersion);
  versionColumn.setEditingSupport(new TernModuleVersionEditingSupport(tableViewer));
  tableViewer.setLabelProvider(TernModuleLabelProvider.getInstance());
  tableViewer.setContentProvider(ArrayContentProvider.getInstance());
  tableViewer.addCheckStateListener(new ICheckStateListener(){
    private boolean checkUpdating;
    @Override public void checkStateChanged(    CheckStateChangedEvent e){
      if (checkUpdating) {
        return;
      }
      try {
        checkUpdating=true;
        if (e.getChecked() && isSelectDependencies()) {
          ITernModule module=((ITernModule)e.getElement());
          TernModuleMetadata metadata=module.getMetadata();
          if (metadata != null) {
            ITernModule dependencyModule=null;
            for (            String moduleName : metadata.getDependencies()) {
              dependencyModule=ternModules.get(moduleName);
              if (dependencyModule != null) {
                if (!tableViewer.getChecked(dependencyModule)) {
                  tableViewer.setChecked(dependencyModule,true);
                }
              }
            }
          }
        }
      }
  finally {
        checkUpdating=false;
      }
    }
  }
);
  addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent e){
      if (!e.getSelection().isEmpty()) {
        ITernModule module=(ITernModule)((IStructuredSelection)e.getSelection()).getFirstElement();
        refreshModule(module);
      }
 else {
        refreshModule(null);
      }
    }
  }
);
  restoreColumnSettings();
}"
26383,"@Override public void checkStateChanged(CheckStateChangedEvent e){
  if (checkUpdating) {
    return;
  }
  try {
    checkUpdating=true;
    if (e.getChecked() && isSelectDependencies()) {
      ITernModule module=((ITernModule)e.getElement());
      TernModuleMetadata metadata=module.getMetadata();
      if (metadata != null) {
        ITernModule dependencyModule=null;
        for (        String moduleName : metadata.getDependencies()) {
          dependencyModule=TernCorePlugin.getTernServerTypeManager().findTernModule(moduleName);
          if (dependencyModule != null) {
            if (!tableViewer.getChecked(dependencyModule)) {
              tableViewer.setChecked(dependencyModule,true);
            }
          }
        }
      }
    }
  }
  finally {
    checkUpdating=false;
  }
}","@Override public void checkStateChanged(CheckStateChangedEvent e){
  if (checkUpdating) {
    return;
  }
  try {
    checkUpdating=true;
    if (e.getChecked() && isSelectDependencies()) {
      ITernModule module=((ITernModule)e.getElement());
      TernModuleMetadata metadata=module.getMetadata();
      if (metadata != null) {
        ITernModule dependencyModule=null;
        for (        String moduleName : metadata.getDependencies()) {
          dependencyModule=ternModules.get(moduleName);
          if (dependencyModule != null) {
            if (!tableViewer.getChecked(dependencyModule)) {
              tableViewer.setChecked(dependencyModule,true);
            }
          }
        }
      }
    }
  }
  finally {
    checkUpdating=false;
  }
}"
26384,"public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
  getTernDescriptorManager().destroy();
}","public void stop(BundleContext context) throws Exception {
  getTernDescriptorManager().destroy();
  plugin=null;
  super.stop(context);
}"
26385,"/** 
 * Load the tern project describers.
 */
private synchronized void addTernNatureAdapters(IConfigurationElement[] cf,Map<ITernNatureCapability,List<DefaultModule>> map){
  for (  IConfigurationElement ce : cf) {
    String id=ce.getAttribute(""String_Node_Str"");
    String className=ce.getAttribute(""String_Node_Str"");
    try {
      if (className != null) {
        map.put((ITernNatureCapability)ce.createExecutableExtension(""String_Node_Str""),getDefaultModules(ce));
      }
 else       if (id != null) {
        map.put(new DefaultTernNatureAdapter(id),getDefaultModules(ce));
      }
      Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"" + id != null ? id : className != null ? className : ""String_Node_Str"");
    }
 catch (    Throwable t) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"" + id != null ? id : className != null ? className : ""String_Node_Str"",t);
    }
  }
}","/** 
 * Load the tern project describers.
 */
private synchronized void addTernNatureAdapters(IConfigurationElement[] cf,Map<ITernNatureCapability,List<DefaultModule>> map){
  for (  IConfigurationElement ce : cf) {
    String id=ce.getAttribute(""String_Node_Str"");
    String className=ce.getAttribute(""String_Node_Str"");
    try {
      if (!StringUtils.isEmpty(className)) {
        map.put((ITernNatureCapability)ce.createExecutableExtension(""String_Node_Str""),getDefaultModules(ce));
      }
 else       if (!StringUtils.isEmpty(id)) {
        map.put(new DefaultTernNatureAdapter(id),getDefaultModules(ce));
      }
      Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"" + id != null ? id : className != null ? className : ""String_Node_Str"");
    }
 catch (    Throwable t) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"" + id != null ? id : className != null ? className : ""String_Node_Str"",t);
    }
  }
}"
26386,"private IFile getFile(String filename){
  if (StringUtils.isEmpty(filename)) {
    return null;
  }
  return ternProject.getProject().getFile(filename);
}","private IFile getFile(String filename){
  if (StringUtils.isEmpty(filename)) {
    return null;
  }
  return ternProject.getFileManager().getFile(filename);
}"
26387,"public ITernConsole getConsole(IDETernProject project){
  TernConsole console=consoles.get(project);
  if (console == null) {
    console=new TernConsole(project);
    consoles.put(project.getProject(),console);
  }
  TernConsoleHelper.showConsole(console);
  return console;
}","public ITernConsole getConsole(IDETernProject project){
  TernConsole console=consoles.get(project.getProject());
  if (console == null) {
    console=new TernConsole(project);
    consoles.put(project.getProject(),console);
  }
  TernConsoleHelper.showConsole(console);
  return console;
}"
26388,"/** 
 * Add Tern plugin.
 * @param plugin the tern plugin to add.
 * @param options plugin options.
 * @return true if plugin to add, replace an existing plugin and falseotherwise.
 */
public boolean addPlugin(ITernPlugin plugin,JsonObject options){
  boolean exists=hasPlugin(plugin);
  getPlugins().add(plugin.getName(),options);
  return exists;
}","/** 
 * Add Tern plugin.
 * @param plugin the tern plugin to add.
 * @param options plugin options.
 * @return true if plugin to add, replace an existing plugin and falseotherwise.
 */
public boolean addPlugin(ITernPlugin plugin,JsonObject options){
  boolean exists=hasPlugin(plugin);
  getPlugins().add(plugin.getName(),options != null ? options : EMPTY_OPTIONS);
  return exists;
}"
26389,"public static String getTernURL(String path) throws IOException {
  if (context == null) {
    throw new IOException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  return FileLocator.toFileURL(Platform.getBundle(""String_Node_Str"").getEntry(""String_Node_Str"" + path)).toExternalForm();
}","public static String getTernURL(String path) throws IOException {
  if (context == null) {
    throw new IOException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  return FileLocator.toFileURL(Platform.getBundle(Activator.PLUGIN_ID).getEntry(""String_Node_Str"" + path)).toExternalForm();
}"
26390,"/** 
 * Add Tern plugin.
 * @param plugin the tern plugin to add.
 * @param options plugin options.
 * @return true if plugin to add, replace an existing plugin and falseotherwise.
 */
public boolean addPlugin(ITernPlugin plugin,JsonObject options){
  boolean exists=hasPlugin(plugin);
  getPlugins().add(plugin.getName(),options != null ? options : EMPTY_OPTIONS);
  return exists;
}","/** 
 * Add Tern plugin.
 * @param plugin the tern plugin to add.
 * @param options plugin options.
 * @return true if plugin to add, replace an existing plugin and falseotherwise.
 */
public boolean addPlugin(ITernPlugin plugin,JsonObject options){
  boolean exists=hasPlugin(plugin);
  getPlugins().add(plugin.getName(),options != null ? options : new JsonObject());
  return exists;
}"
26391,"/** 
 * Load the tern project from the .tern-project of the project base dir.
 * @throws IOException
 */
public void load() throws IOException {
  File file=new File(projectDir,TERN_PROJECT);
  if (file.exists()) {
    try {
      super.readFrom(new FileReader(file));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Load the tern project from the .tern-project of the project base dir.
 * @throws IOException
 */
public void load() throws IOException {
  File file=new File(projectDir,TERN_PROJECT);
  if (file.exists()) {
    try {
      JsonHelper.readFrom(new FileReader(file),this);
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
}"
26392,"/** 
 * Load defs from tern project.
 */
public void loadDefs(IProject project){
  List<ITernDef> allDefs=new ArrayList<ITernDef>();
  ITernDef[] defaultDefs=TernCorePlugin.getTernServerTypeManager().getTernDefs();
  for (  ITernDef defaultDef : defaultDefs) {
    allDefs.add(defaultDef);
  }
  this.setTernDefs(allDefs.toArray(ITernDef.EMPTY_DEF));
  if (project != null) {
    try {
      IDETernProject ternProject=IDETernProject.getTernProject(project);
      JsonArray defs=ternProject.getLibs();
      List<ITernDef> initialDefs=new ArrayList<ITernDef>();
      for (      Object name : defs) {
        ITernDef def=TernCorePlugin.getTernServerTypeManager().findTernDef(name.toString());
        if (def != null) {
          initialDefs.add(def);
        }
      }
      this.setCheckedDefs(initialDefs.toArray());
    }
 catch (    CoreException e) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
    }
  }
}","/** 
 * Load defs from tern project.
 */
public void loadDefs(IProject project){
  List<ITernDef> allDefs=new ArrayList<ITernDef>();
  ITernDef[] defaultDefs=TernCorePlugin.getTernServerTypeManager().getTernDefs();
  for (  ITernDef defaultDef : defaultDefs) {
    allDefs.add(defaultDef);
  }
  this.setTernDefs(allDefs.toArray(ITernDef.EMPTY_DEF));
  if (project != null) {
    try {
      IDETernProject ternProject=IDETernProject.getTernProject(project);
      JsonArray defs=ternProject.getLibs();
      List<ITernDef> initialDefs=new ArrayList<ITernDef>();
      for (      JsonValue name : defs) {
        ITernDef def=TernCorePlugin.getTernServerTypeManager().findTernDef(name.asString());
        if (def != null) {
          initialDefs.add(def);
        }
      }
      this.setCheckedDefs(initialDefs.toArray());
    }
 catch (    CoreException e) {
      Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
    }
  }
}"
26393,"public TernCompletionItem(String name,String type,String origin){
  this.name=name;
  this.type=type;
  this.origin=origin;
  this.parameters=null;
  StringBuilder currentParamName=null;
  boolean currentParamRequired=true;
  StringBuilder currentParamType=null;
  StringBuilder signature=new StringBuilder(name);
  this.jsType=type;
  if (!StringUtils.isEmpty(type)) {
    this.function=type.startsWith(""String_Node_Str"");
    if (function) {
      signature.append(""String_Node_Str"");
      int bracket=0;
      String afterStartFn=type.substring(2,type.length());
      int i=0;
      for (i=0; i < afterStartFn.length(); i++) {
        char c=afterStartFn.charAt(i);
switch (c) {
case '(':
          bracket++;
        if (currentParamType != null)         currentParamType.append(c);
      break;
case ')':
    bracket--;
  if (bracket >= 1 && currentParamType != null)   currentParamType.append(c);
break;
default :
if (bracket >= 1) {
if (currentParamType != null) {
  if (c == ',') {
    parameters.add(new Parameter(currentParamName.toString(),currentParamRequired,currentParamType != null ? currentParamType.toString() : null));
    currentParamName=null;
    currentParamRequired=true;
    currentParamType=null;
  }
 else   if (c != ' ') {
    currentParamType.append(c);
  }
}
 else {
  if (currentParamName == null) {
    if (c != ' ' && c != '?') {
      currentParamName=new StringBuilder();
      currentParamName.append(c);
    }
  }
 else {
    if (c == ':') {
      if (parameters == null) {
        parameters=new ArrayList<Parameter>();
      }
 else {
        signature.append(""String_Node_Str"");
      }
      signature.append(currentParamName.toString());
      currentParamType=new StringBuilder();
    }
 else {
      if (c == '?') {
        currentParamRequired=false;
      }
 else       if (c != ' ') {
        currentParamName.append(c);
      }
    }
  }
}
}
}
if (bracket == 0) break;
}
signature.append(""String_Node_Str"");
StringBuilder s=null;
for (int j=i + 1; j < afterStartFn.length(); j++) {
char c=afterStartFn.charAt(j);
if (s != null) {
s.append(c);
}
 else {
if (c == '>') {
s=new StringBuilder();
}
}
}
jsType=s != null ? s.toString().trim() : null;
}
 else {
this.array=type.indexOf(""String_Node_Str"") != -1;
}
}
 else {
this.function=false;
this.array=false;
}
if (currentParamName != null) {
if (parameters == null) {
parameters=new ArrayList<Parameter>();
}
parameters.add(new Parameter(currentParamName.toString(),currentParamRequired,currentParamType != null ? currentParamType.toString() : null));
currentParamName=null;
currentParamRequired=true;
currentParamType=null;
}
this.signature=signature.toString();
}","public TernCompletionItem(String name,String type,String origin){
  this.name=name;
  this.type=type;
  this.origin=origin;
  this.parameters=null;
  StringBuilder currentParamName=null;
  boolean currentParamRequired=true;
  StringBuilder currentParamType=null;
  StringBuilder signature=new StringBuilder(name);
  this.jsType=type;
  if (!StringUtils.isEmpty(type)) {
    this.function=type.startsWith(""String_Node_Str"");
    if (function) {
      signature.append(""String_Node_Str"");
      int bracket=0;
      String afterStartFn=type.substring(2,type.length());
      int i=0;
      for (i=0; i < afterStartFn.length(); i++) {
        char c=afterStartFn.charAt(i);
switch (c) {
case '(':
          bracket++;
        if (currentParamType != null)         currentParamType.append(c);
      break;
case ')':
    bracket--;
  if (bracket >= 1 && currentParamType != null)   currentParamType.append(c);
break;
default :
if (bracket >= 1) {
if (currentParamType != null) {
  if (c == ',') {
    if (bracket < 2) {
      parameters.add(new Parameter(currentParamName.toString(),currentParamRequired,currentParamType != null ? currentParamType.toString() : null));
      currentParamName=null;
      currentParamRequired=true;
      currentParamType=null;
    }
 else {
      currentParamType.append(c);
    }
  }
 else   if (c != ' ') {
    currentParamType.append(c);
  }
}
 else {
  if (currentParamName == null) {
    if (c != ' ' && c != '?') {
      currentParamName=new StringBuilder();
      currentParamName.append(c);
    }
  }
 else {
    if (c == ':') {
      if (parameters == null) {
        parameters=new ArrayList<Parameter>();
      }
 else {
        signature.append(""String_Node_Str"");
      }
      signature.append(currentParamName.toString());
      currentParamType=new StringBuilder();
    }
 else {
      if (c == '?') {
        currentParamRequired=false;
      }
 else       if (c != ' ') {
        currentParamName.append(c);
      }
    }
  }
}
}
}
if (bracket == 0) break;
}
signature.append(""String_Node_Str"");
StringBuilder s=null;
for (int j=i + 1; j < afterStartFn.length(); j++) {
char c=afterStartFn.charAt(j);
if (s != null) {
s.append(c);
}
 else {
if (c == '>') {
s=new StringBuilder();
}
}
}
jsType=s != null ? s.toString().trim() : null;
}
 else {
this.array=type.indexOf(""String_Node_Str"") != -1;
}
}
 else {
this.function=false;
this.array=false;
}
if (currentParamName != null) {
if (parameters == null) {
parameters=new ArrayList<Parameter>();
}
parameters.add(new Parameter(currentParamName.toString(),currentParamRequired,currentParamType != null ? currentParamType.toString() : null));
currentParamName=null;
currentParamRequired=true;
currentParamType=null;
}
this.signature=signature.toString();
}"
26394,"/** 
 * Load defs from tern project.
 */
private void loadDefs(){
  List<ITernDef> allDefs=new ArrayList<ITernDef>();
  ITernDef[] defaultDefs=TernCorePlugin.getTernServerTypeManager().getTernDefs();
  for (  ITernDef defaultDef : defaultDefs) {
    allDefs.add(defaultDef);
  }
  try {
    IDETernProject ternProject=getTernProject();
    List defs=ternProject.getLibs();
    initialDefs=new ArrayList<ITernDef>();
    for (    Object name : defs) {
      ITernDef def=TernCorePlugin.getTernServerTypeManager().findTernDef(name.toString());
      if (def != null) {
        initialDefs.add(def);
      }
    }
    defsBlock.setCheckedDefs(initialDefs.toArray());
  }
 catch (  CoreException e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
  defsBlock.setTernDefs(allDefs.toArray(EMPTY_DEF));
}","/** 
 * Load defs from tern project.
 */
private void loadDefs(){
  List<ITernDef> allDefs=new ArrayList<ITernDef>();
  ITernDef[] defaultDefs=TernCorePlugin.getTernServerTypeManager().getTernDefs();
  for (  ITernDef defaultDef : defaultDefs) {
    allDefs.add(defaultDef);
  }
  defsBlock.setTernDefs(allDefs.toArray(EMPTY_DEF));
  try {
    IDETernProject ternProject=getTernProject();
    List defs=ternProject.getLibs();
    initialDefs=new ArrayList<ITernDef>();
    for (    Object name : defs) {
      ITernDef def=TernCorePlugin.getTernServerTypeManager().findTernDef(name.toString());
      if (def != null) {
        initialDefs.add(def);
      }
    }
    defsBlock.setCheckedDefs(initialDefs.toArray());
  }
 catch (  CoreException e) {
    Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
  }
}"
26395,"public List computeCompletionProposals(ContentAssistInvocationContext context,IProgressMonitor monitor){
  if (context instanceof JavaContentAssistInvocationContext) {
    JavaContentAssistInvocationContext javaContext=(JavaContentAssistInvocationContext)context;
    IProject project=javaContext.getProject().getProject();
    if (IDETernProject.hasTernNature(project)) {
      IDocument document=javaContext.getDocument();
      IResource resource=javaContext.getCompilationUnit().getResource();
      if (resource.getType() == IResource.FILE) {
        IFile scriptFile=(IFile)resource;
        try {
          final List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();
          IDETernProject ternProject=IDETernProject.getTernProject(project);
          ITernServer ternServer=ternProject.getTernServer();
          TernCompletionsQuery query=new TernCompletionsQuery(""String_Node_Str"",context.getInvocationOffset());
          query.setTypes(true);
          query.setDocs(true);
          query.setUrls(true);
          query.setLineCharPositions(true);
          TernDoc doc=new TernDoc(query);
          if (scriptFile != null && scriptFile.exists()) {
            String name=scriptFile.getName();
            String text=document.get();
            doc.addFile(name,text,null);
            query.setFile(""String_Node_Str"");
          }
          final int startOffset=context.getInvocationOffset();
          ternServer.request(doc,new ITernCompletionCollector(){
            @Override public void addProposal(            String name,            String type,            String origin,            Object doc,            int pos,            Object completion){
              proposals.add(new TernCompletionProposal(name,type,origin,doc,pos,startOffset));
            }
          }
);
          return proposals;
        }
 catch (        Exception e) {
          Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
        }
      }
    }
  }
  return Collections.EMPTY_LIST;
}","public List computeCompletionProposals(ContentAssistInvocationContext context,IProgressMonitor monitor){
  if (context instanceof JavaContentAssistInvocationContext) {
    JavaContentAssistInvocationContext javaContext=(JavaContentAssistInvocationContext)context;
    IProject project=javaContext.getProject().getProject();
    if (IDETernProject.hasTernNature(project)) {
      IDocument document=javaContext.getDocument();
      IResource resource=javaContext.getCompilationUnit().getResource();
      if (resource.getType() == IResource.FILE) {
        IFile scriptFile=(IFile)resource;
        try {
          final List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();
          IDETernProject ternProject=IDETernProject.getTernProject(project);
          ITernServer ternServer=ternProject.getTernServer();
          TernCompletionsQuery query=new TernCompletionsQuery(""String_Node_Str"",context.getInvocationOffset());
          query.setTypes(true);
          query.setDocs(true);
          query.setUrls(true);
          query.setCaseInsensitive(true);
          query.setLineCharPositions(true);
          query.setExpandWordForward(false);
          TernDoc doc=new TernDoc(query);
          if (scriptFile != null && scriptFile.exists()) {
            String name=scriptFile.getName();
            String text=document.get();
            doc.addFile(name,text,null);
            query.setFile(""String_Node_Str"");
          }
          final int startOffset=context.getInvocationOffset();
          ternServer.request(doc,new ITernCompletionCollector(){
            @Override public void addProposal(            String name,            String type,            String origin,            Object doc,            int pos,            Object completion){
              proposals.add(new TernCompletionProposal(name,type,origin,doc,pos,startOffset));
            }
          }
);
          return proposals;
        }
 catch (        Exception e) {
          Trace.trace(Trace.SEVERE,""String_Node_Str"",e);
        }
      }
    }
  }
  return Collections.EMPTY_LIST;
}"
26396,"public TernCompletionProposal(String name,String type,String origin,Object doc,int pos,int startOffset){
  super(name,type,origin);
  String text=super.getText();
  this.fReplacementString=text;
  this.fReplacementOffset=startOffset - pos;
  this.fReplacementLength=pos;
  this.fCursorPosition=text.length();
  this.fImage=null;
  this.fDisplayString=text;
  this.fContextInformation=null;
  this.fAdditionalProposalInfo=doc != null ? doc.toString() : null;
}","public TernCompletionProposal(String name,String type,String origin,Object doc,int pos,int startOffset){
  super(name,type,origin);
  String text=super.getSignature();
  this.fReplacementString=text;
  this.fReplacementOffset=startOffset - pos;
  this.fReplacementLength=pos;
  this.fCursorPosition=text.length();
  this.fImage=null;
  this.fDisplayString=super.getText();
  this.fContextInformation=null;
  this.fAdditionalProposalInfo=doc != null ? doc.toString() : null;
}"
26397,"private Section getFreeSection(int requiredLength){
  int start=0;
  int length=0;
  int closestStart=0;
  int closestLength=Integer.MAX_VALUE;
  int i;
  for (i=2; i < this.filledSectorArray.size(); i++) {
    if (this.filledSectorArray.get(i)) {
      if (length >= requiredLength) {
        if (length < closestLength) {
          closestLength=length;
          closestStart=start;
          if (closestLength == requiredLength) {
            break;
          }
        }
        length=0;
      }
    }
 else {
      if (length == 0) {
        start=i;
      }
      length++;
    }
  }
  if (closestStart <= 0) {
    closestStart=i;
  }
  return (closestStart != 0) ? new Section(closestStart,requiredLength) : null;
}","private Section getFreeSection(int requiredLength){
  int start=0;
  int length=0;
  int closestStart=0;
  int closestLength=Integer.MAX_VALUE;
  int i;
  for (i=2; i < this.filledSectorArray.size(); i++) {
    if (this.filledSectorArray.get(i)) {
      if ((length >= requiredLength) && (length < closestLength)) {
        closestLength=length;
        closestStart=start;
        if (closestLength == requiredLength) {
          break;
        }
      }
      length=0;
    }
 else {
      if (length == 0) {
        start=i;
      }
      length++;
    }
  }
  if (closestStart <= 0) {
    closestStart=i;
  }
  return new Section(closestStart,requiredLength);
}"
26398,"public void loadConfig(){
  this.config.load();
  this.teleportEnabled=this.config.getOrSetBoolean(catOptions,""String_Node_Str"",this.teleportEnabled);
  this.chunksPerTick=this.config.getOrSetInt(catOptions,""String_Node_Str"",this.chunksPerTick,1,64);
  this.teleportCommand=this.config.get(catOptions,""String_Node_Str"",this.teleportCommand).getString();
  this.coordsEnabled=this.config.getOrSetBoolean(catOptions,""String_Node_Str"",this.coordsEnabled);
  maxZoom=this.config.getOrSetInt(catOptions,""String_Node_Str"",maxZoom,1,256);
  minZoom=-this.config.getOrSetInt(catOptions,""String_Node_Str"",-minZoom,1,256);
  this.configTextureSize=this.config.getOrSetInt(catOptions,""String_Node_Str"",this.configTextureSize,1024,8192);
  this.setTextureSize();
  File worldConfigFile=new File(this.worldDir,worldDirConfigName);
  this.worldConfig=new MwConfig(worldConfigFile);
  this.worldConfig.load();
  this.dimensionList.clear();
  this.worldConfig.getIntList(catWorld,""String_Node_Str"",this.dimensionList);
  this.addDimension(0);
  this.cleanDimensionList();
}","public void loadConfig(){
  this.config.load();
  this.linearTextureScalingEnabled=this.config.getOrSetBoolean(catOptions,""String_Node_Str"",true);
  this.teleportEnabled=this.config.getOrSetBoolean(catOptions,""String_Node_Str"",this.teleportEnabled);
  this.chunksPerTick=this.config.getOrSetInt(catOptions,""String_Node_Str"",this.chunksPerTick,1,64);
  this.teleportCommand=this.config.get(catOptions,""String_Node_Str"",this.teleportCommand).getString();
  this.coordsEnabled=this.config.getOrSetBoolean(catOptions,""String_Node_Str"",this.coordsEnabled);
  this.overlayModeIndex=this.config.getOrSetInt(catOptions,""String_Node_Str"",this.overlayModeIndex,0,1000);
  maxZoom=this.config.getOrSetInt(catOptions,""String_Node_Str"",maxZoom,1,256);
  minZoom=-this.config.getOrSetInt(catOptions,""String_Node_Str"",-minZoom,1,256);
  this.configTextureSize=this.config.getOrSetInt(catOptions,""String_Node_Str"",this.configTextureSize,1024,8192);
  this.setTextureSize();
  File worldConfigFile=new File(this.worldDir,worldDirConfigName);
  this.worldConfig=new MwConfig(worldConfigFile);
  this.worldConfig.load();
  this.dimensionList.clear();
  this.worldConfig.getIntList(catWorld,""String_Node_Str"",this.dimensionList);
  this.addDimension(0);
  this.cleanDimensionList();
}"
26399,"public void reloadMapTexture(){
  this.regionManager.close();
  this.executor.close();
  MapTexture oldMapTexture=this.mapTexture;
  this.mapTexture=new MapTexture(this.textureSize);
  if (oldMapTexture != null) {
    oldMapTexture.close();
  }
  this.executor=new BackgroundExecutor();
  this.regionManager=new RegionManager(this,this.multiplayer);
}","public void reloadMapTexture(){
  this.regionManager.close();
  this.executor.close();
  MapTexture oldMapTexture=this.mapTexture;
  this.mapTexture=new MapTexture(this.textureSize,this.linearTextureScalingEnabled);
  if (oldMapTexture != null) {
    oldMapTexture.close();
  }
  this.executor=new BackgroundExecutor();
  this.regionManager=new RegionManager(this,this.multiplayer);
}"
26400,"public void saveConfig(){
  this.worldConfig.setIntList(catWorld,""String_Node_Str"",this.dimensionList);
  this.config.setBoolean(catOptions,""String_Node_Str"",this.linearTextureScalingEnabled);
  this.config.setInt(catOptions,""String_Node_Str"",this.configTextureSize);
  this.config.setBoolean(catOptions,""String_Node_Str"",this.coordsEnabled);
  this.config.save();
  this.worldConfig.save();
}","public void saveConfig(){
  this.worldConfig.setIntList(catWorld,""String_Node_Str"",this.dimensionList);
  this.config.setBoolean(catOptions,""String_Node_Str"",this.linearTextureScalingEnabled);
  this.config.setInt(catOptions,""String_Node_Str"",this.configTextureSize);
  this.config.setBoolean(catOptions,""String_Node_Str"",this.coordsEnabled);
  this.config.setInt(catOptions,""String_Node_Str"",this.overlayModeIndex);
  this.config.save();
  this.worldConfig.save();
}"
26401,"public void onClientLoggedIn(Packet1Login login){
  MwUtil.log(""String_Node_Str"",login.dimension);
  this.worldName=this.getWorldName();
  if (this.multiplayer) {
    this.worldDir=new File(new File(this.saveDir,""String_Node_Str""),this.worldName);
  }
 else {
    this.worldDir=new File(this.saveDir,this.worldName);
  }
  this.imageDir=new File(this.worldDir,""String_Node_Str"");
  if (!this.imageDir.exists()) {
    this.imageDir.mkdirs();
  }
  if (!this.imageDir.isDirectory()) {
    MwUtil.log(""String_Node_Str"",this.imageDir.getPath());
  }
  for (int i=1; i <= this.maxZoom; i++) {
    File zDir=new File(imageDir,""String_Node_Str"" + i);
    zDir.mkdirs();
  }
  this.tickCounter=0;
  this.loadConfig();
  this.markerManager=new MarkerManager(this);
  this.markerManager.load(this.worldConfig,this.catMarkers);
  this.playerTrail=new Trail(this,""String_Node_Str"");
  this.executor=new BackgroundExecutor();
  this.mapTexture=new MapTexture(this.textureSize);
  this.blockColours=BlockColourGen.genBlockColours(this,this.config);
  this.regionManager=new RegionManager(this,this.multiplayer);
  this.overlayManager=new OverlayManager(this,this.mapTexture);
  this.overlayManager.overlayView.setDimension(login.dimension);
  this.ready=true;
}","public void onClientLoggedIn(Packet1Login login){
  MwUtil.log(""String_Node_Str"",login.dimension);
  this.worldName=this.getWorldName();
  if (this.multiplayer) {
    this.worldDir=new File(new File(this.saveDir,""String_Node_Str""),this.worldName);
  }
 else {
    this.worldDir=new File(this.saveDir,this.worldName);
  }
  this.imageDir=new File(this.worldDir,""String_Node_Str"");
  if (!this.imageDir.exists()) {
    this.imageDir.mkdirs();
  }
  if (!this.imageDir.isDirectory()) {
    MwUtil.log(""String_Node_Str"",this.imageDir.getPath());
  }
  for (int i=1; i <= this.maxZoom; i++) {
    File zDir=new File(imageDir,""String_Node_Str"" + i);
    zDir.mkdirs();
  }
  this.tickCounter=0;
  this.loadConfig();
  this.markerManager=new MarkerManager(this);
  this.markerManager.load(this.worldConfig,this.catMarkers);
  this.playerTrail=new Trail(this,""String_Node_Str"");
  this.executor=new BackgroundExecutor();
  this.mapTexture=new MapTexture(this.textureSize,this.linearTextureScalingEnabled);
  this.blockColours=BlockColourGen.genBlockColours(this,this.config);
  this.regionManager=new RegionManager(this,this.multiplayer);
  this.overlayManager=new OverlayManager(this,this.mapTexture);
  this.overlayManager.overlayView.setDimension(login.dimension);
  this.ready=true;
}"
26402,"protected void mouseClicked(int x,int y,int button){
  Marker marker=this.getMarkerNearScreenPos(x,y);
  Marker prevMarker=this.mw.markerManager.selectedMarker;
  if (button == 0) {
    if (this.dimensionLabel.posWithin(x,y)) {
      if (this.currentTextDialog == null) {
        this.currentTextDialog=new DimensionTextDialog(this.mapView.getDimension());
      }
    }
 else     if (this.optionsLabel.posWithin(x,y)) {
      this.mc.displayGuiScreen(new MwGuiOptions(this.mw,this));
    }
 else {
      this.mouseLeftHeld=1;
      this.mouseLeftDragStartX=x;
      this.mouseLeftDragStartY=y;
      this.mw.markerManager.selectedMarker=marker;
      if ((marker != null) && (prevMarker == marker)) {
        this.movingMarker=marker;
        this.movingMarkerXStart=marker.x;
        this.movingMarkerZStart=marker.z;
      }
    }
  }
 else   if (button == 1) {
    this.mouseRightHeld=1;
    if (this.currentTextDialog == null) {
      if ((marker != null) && (prevMarker == marker)) {
        this.currentTextDialog=new MarkerTextDialog(this.mw.markerManager,marker);
      }
 else       if (marker == null) {
        String group=this.mw.markerManager.getVisibleGroupName();
        if (group.equals(""String_Node_Str"")) {
          group=""String_Node_Str"";
        }
        int scale=1;
        if (this.mapView.getDimension() == -1) {
          scale=8;
        }
        this.currentTextDialog=new MarkerTextDialog(this.mw.markerManager,""String_Node_Str"",group,this.mouseBlockX * scale,(this.mouseBlockY > 0) ? this.mouseBlockY : this.mw.defaultTeleportHeight,this.mouseBlockZ * scale);
      }
    }
  }
  this.viewXStart=this.mapView.getX();
  this.viewZStart=this.mapView.getZ();
}","protected void mouseClicked(int x,int y,int button){
  Marker marker=this.getMarkerNearScreenPos(x,y);
  Marker prevMarker=this.mw.markerManager.selectedMarker;
  if (button == 0) {
    if (this.dimensionLabel.posWithin(x,y)) {
      if (this.currentTextDialog == null) {
        this.currentTextDialog=new DimensionTextDialog(this.mapView.getDimension());
      }
    }
 else     if (this.optionsLabel.posWithin(x,y)) {
      this.mc.displayGuiScreen(new MwGuiOptions(this.mw,this));
    }
 else {
      this.mouseLeftHeld=1;
      this.mouseLeftDragStartX=x;
      this.mouseLeftDragStartY=y;
      this.mw.markerManager.selectedMarker=marker;
      if ((marker != null) && (prevMarker == marker)) {
        this.movingMarker=marker;
        this.movingMarkerXStart=marker.x;
        this.movingMarkerZStart=marker.z;
      }
    }
  }
 else   if (button == 1) {
    this.mouseRightHeld=1;
    if (this.currentTextDialog == null) {
      if ((marker != null) && (prevMarker == marker)) {
        this.currentTextDialog=new MarkerTextDialog(this.mw.markerManager,marker);
      }
 else       if (marker == null) {
        String group=this.mw.markerManager.getVisibleGroupName();
        if (group.equals(""String_Node_Str"")) {
          group=""String_Node_Str"";
        }
        int mx, my, mz;
        if (this.isPlayerNearScreenPos(x,y)) {
          int scale=1;
          if (this.mw.playerDimension == -1) {
            scale=8;
          }
          mx=this.mw.playerXInt;
          my=this.mw.playerYInt;
          mz=this.mw.playerZInt;
        }
 else {
          int scale=1;
          if (this.mapView.getDimension() == -1) {
            scale=8;
          }
          mx=this.mouseBlockX * scale;
          my=(this.mouseBlockY > 0) ? this.mouseBlockY : this.mw.defaultTeleportHeight;
          mz=this.mouseBlockZ * scale;
        }
        this.currentTextDialog=new MarkerTextDialog(this.mw.markerManager,""String_Node_Str"",group,mx,my,mz);
      }
    }
  }
  this.viewXStart=this.mapView.getX();
  this.viewZStart=this.mapView.getZ();
}"
26403,"public MapTexture(int textureSize){
  super(textureSize,textureSize,0xff000000,GL11.GL_LINEAR,GL11.GL_LINEAR,GL11.GL_REPEAT);
  this.textureRegions=textureSize >> Mw.REGION_SHIFT;
  this.textureSize=textureSize;
  this.regionArray=new Region[this.textureRegions * this.textureRegions];
}","public MapTexture(int textureSize,boolean linearScaling){
  super(textureSize,textureSize,0xff000000,GL11.GL_LINEAR,GL11.GL_LINEAR,GL11.GL_REPEAT);
  this.setLinearScaling(linearScaling);
  this.textureRegions=textureSize >> Mw.REGION_SHIFT;
  this.textureSize=textureSize;
  this.regionArray=new Region[this.textureRegions * this.textureRegions];
}"
26404,"public OverlayManager(Mw mw,MapTexture mapTexture){
  this.mw=mw;
  this.mapTexture=mapTexture;
  this.smallMapMode=new SmallMapMode(this.mw.config);
  this.overlayView=new MapView();
  this.overlayView.setZoomLevel(-1);
  this.smallMap=new StandardMapRenderer(mw,this.mapTexture,this.mw.markerManager,this.smallMapMode,this.overlayView);
  this.largeMapMode=new LargeMapMode(this.mw.config);
  this.largeMap=new StandardMapRenderer(mw,this.mapTexture,this.mw.markerManager,this.largeMapMode,this.overlayView);
  this.undergroundMapMode=new UndergroundMapMode(this.mw.config);
  this.undergroundMap=new UndergroundMapRenderer(mw,this.undergroundMapMode);
  this.mapList=new ArrayList<MapRenderer>();
  this.mapList.add(null);
  this.mapList.add(this.smallMap);
  this.mapList.add(this.largeMap);
  this.mapList.add(this.undergroundMap);
  this.mapListIndex=0;
  this.nextOverlayMode(1);
}","public OverlayManager(Mw mw,MapTexture mapTexture){
  this.mw=mw;
  this.mapTexture=mapTexture;
  this.smallMapMode=new SmallMapMode(this.mw.config);
  this.overlayView=new MapView();
  this.overlayView.setZoomLevel(-1);
  this.smallMap=new StandardMapRenderer(mw,this.mapTexture,this.mw.markerManager,this.smallMapMode,this.overlayView);
  this.largeMapMode=new LargeMapMode(this.mw.config);
  this.largeMap=new StandardMapRenderer(mw,this.mapTexture,this.mw.markerManager,this.largeMapMode,this.overlayView);
  this.undergroundMapMode=new UndergroundMapMode(this.mw.config);
  this.undergroundMap=new UndergroundMapRenderer(mw,this.undergroundMapMode);
  this.mapList=new ArrayList<MapRenderer>();
  if (this.smallMapMode.enabled) {
    this.mapList.add(this.smallMap);
  }
  if (this.largeMapMode.enabled) {
    this.mapList.add(this.largeMap);
  }
  if (this.undergroundMapMode.enabled) {
    this.mapList.add(this.undergroundMap);
  }
  this.mapList.add(null);
  this.nextOverlayMode(0);
  this.currentMap=this.mapList.get(this.mw.overlayModeIndex);
}"
26405,"public MapRenderer nextOverlayMode(int increment){
  int size=this.mapList.size();
  this.mapListIndex=(this.mapListIndex + size + increment) % size;
  this.currentMap=this.mapList.get(this.mapListIndex);
  return this.currentMap;
}","public MapRenderer nextOverlayMode(int increment){
  int size=this.mapList.size();
  this.mw.overlayModeIndex=(this.mw.overlayModeIndex + size + increment) % size;
  this.currentMap=this.mapList.get(this.mw.overlayModeIndex);
  return this.currentMap;
}"
26406,"public static void disableStencil(){
  GL11.glDepthFunc(GL11.GL_LEQUAL);
  GL11.glDisable(GL11.GL_DEPTH_TEST);
}","public static void disableStencil(){
  GL11.glDepthMask(true);
  GL11.glDepthFunc(GL11.GL_LEQUAL);
  GL11.glDisable(GL11.GL_DEPTH_TEST);
}"
26407,"public static void setCircularStencil(double x,double y,double r){
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glColorMask(false,false,false,false);
  GL11.glDepthMask(true);
  GL11.glClearDepth(3000.0);
  GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
  GL11.glDepthFunc(GL11.GL_ALWAYS);
  Render.setColour(0xffffffff);
  Render.zDepth=1000.0;
  Render.drawCircle(x,y,r);
  Render.zDepth=0.0;
  GL11.glColorMask(true,true,true,true);
  GL11.glDepthMask(false);
  GL11.glDepthFunc(GL11.GL_GREATER);
}","public static void setCircularStencil(double x,double y,double r){
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glColorMask(false,false,false,false);
  GL11.glDepthMask(true);
  GL11.glDepthFunc(GL11.GL_ALWAYS);
  Render.setColour(0xffffffff);
  Render.zDepth=1000.0;
  Render.drawCircle(x,y,r);
  Render.zDepth=0.0;
  GL11.glColorMask(true,true,true,true);
  GL11.glDepthMask(false);
  GL11.glDepthFunc(GL11.GL_GREATER);
}"
26408,"public void draw(){
  int regionZoomLevel=Math.max(0,this.mapView.getZoomLevel());
  double tSize=(double)(this.mw.mapTexture.textureSize << regionZoomLevel);
  double u=(this.mapView.getMinX() % tSize) / tSize;
  double v=(this.mapView.getMinZ() % tSize) / tSize;
  double w=this.mapView.getWidth() / tSize;
  double h=this.mapView.getHeight() / tSize;
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  if (this.mapMode.rotate) {
    GL11.glRotatef((float)this.mw.mapRotationDegrees,0.0f,0.0f,1.0f);
  }
  if (this.mapMode.circular) {
    Render.setCircularStencil(0,0,this.mapMode.h / 2.0);
  }
  Render.setColourWithAlphaPercent(0xffffff,this.mapMode.alphaPercent);
  this.mw.mapTexture.bind();
  Render.drawTexturedRect(this.mapMode.x,this.mapMode.y,this.mapMode.w,this.mapMode.h,u,v,u + w,v + h);
  Render.disableStencil();
  this.drawBorder(this.mapMode);
  this.mw.markerManager.drawMarkers(this.mapMode,this.mapView);
  if (this.mw.playerTrail.enabled) {
    this.mw.playerTrail.draw(this.mapMode,this.mapView);
  }
  Point.Double arrow=this.getPlayerArrowPos();
  Render.setColour(this.mapMode.playerArrowColour);
  Render.drawArrow(arrow.x,arrow.y,this.mw.playerHeading,this.mapMode.playerArrowSize);
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  drawCoords(this.mw,this.mapMode);
  GL11.glPopMatrix();
}","public void draw(){
  int regionZoomLevel=Math.max(0,this.mapView.getZoomLevel());
  double tSize=(double)(this.mw.mapTexture.textureSize << regionZoomLevel);
  double u=(this.mapView.getMinX() % tSize) / tSize;
  double v=(this.mapView.getMinZ() % tSize) / tSize;
  double w=this.mapView.getWidth() / tSize;
  double h=this.mapView.getHeight() / tSize;
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  if (this.mapMode.rotate) {
    GL11.glRotatef((float)this.mw.mapRotationDegrees,0.0f,0.0f,1.0f);
  }
  if (this.mapMode.circular) {
    Render.setCircularStencil(0,0,this.mapMode.h / 2.0);
  }
  Render.setColourWithAlphaPercent(0xffffff,this.mapMode.alphaPercent);
  this.mw.mapTexture.bind();
  Render.drawTexturedRect(this.mapMode.x,this.mapMode.y,this.mapMode.w,this.mapMode.h,u,v,u + w,v + h);
  if (this.mapMode.circular) {
    Render.disableStencil();
  }
  this.drawBorder(this.mapMode);
  this.mw.markerManager.drawMarkers(this.mapMode,this.mapView);
  if (this.mw.playerTrail.enabled) {
    this.mw.playerTrail.draw(this.mapMode,this.mapView);
  }
  Point.Double arrow=this.getPlayerArrowPos();
  Render.setColour(this.mapMode.playerArrowColour);
  Render.drawArrow(arrow.x,arrow.y,this.mw.playerHeading,this.mapMode.playerArrowSize);
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  drawCoords(this.mw,this.mapMode);
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glPopMatrix();
}"
26409,"public void draw(){
  double tu1=(this.viewX % 16.0) / 16.0;
  double tv1=(this.viewZ % 16.0) / 16.0;
  double tu2=tu1 + (this.viewW / 16.0);
  double tv2=tv1 + (this.viewH / 16.0);
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  if (this.mapMode.rotate) {
    GL11.glRotatef((float)this.mw.mapRotationDegrees,0.0f,0.0f,1.0f);
  }
  if (this.mapMode.circular) {
    Render.setCircularStencil(0,0,this.mapMode.h / 2.0);
  }
  Render.setColourWithAlphaPercent(0xffffff,this.mapMode.alphaPercent);
  this.undergroundTexture.bind();
  Render.drawTexturedRect(this.mapMode.x,this.mapMode.y,this.mapMode.w,this.mapMode.h,tu1,tv1,tu2,tv2);
  Render.disableStencil();
  StandardMapRenderer.drawBorder(this.mapMode);
  double arrowX=this.mapMode.x + this.mapMode.w / 2;
  double arrowZ=this.mapMode.y + this.mapMode.h / 2;
  Render.setColour(this.mapMode.playerArrowColour);
  Render.drawArrow(arrowX,arrowZ,this.mw.playerHeading,this.mapMode.playerArrowSize);
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  StandardMapRenderer.drawCoords(this.mw,this.mapMode);
  GL11.glPopMatrix();
}","public void draw(){
  double tu1=(this.viewX % 16.0) / 16.0;
  double tv1=(this.viewZ % 16.0) / 16.0;
  double tu2=tu1 + (this.viewW / 16.0);
  double tv2=tv1 + (this.viewH / 16.0);
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  if (this.mapMode.rotate) {
    GL11.glRotatef((float)this.mw.mapRotationDegrees,0.0f,0.0f,1.0f);
  }
  if (this.mapMode.circular) {
    Render.setCircularStencil(0,0,this.mapMode.h / 2.0);
  }
  Render.setColourWithAlphaPercent(0xffffff,this.mapMode.alphaPercent);
  this.undergroundTexture.bind();
  Render.drawTexturedRect(this.mapMode.x,this.mapMode.y,this.mapMode.w,this.mapMode.h,tu1,tv1,tu2,tv2);
  if (this.mapMode.circular) {
    Render.disableStencil();
  }
  StandardMapRenderer.drawBorder(this.mapMode);
  double arrowX=this.mapMode.x + this.mapMode.w / 2;
  double arrowZ=this.mapMode.y + this.mapMode.h / 2;
  Render.setColour(this.mapMode.playerArrowColour);
  Render.drawArrow(arrowX,arrowZ,this.mw.playerHeading,this.mapMode.playerArrowSize);
  GL11.glLoadIdentity();
  GL11.glTranslatef((float)this.mapMode.xTranslation,(float)this.mapMode.yTranslation,-2000.0f);
  StandardMapRenderer.drawCoords(this.mw,this.mapMode);
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glPopMatrix();
}"
26410,"public boolean applyChangeParam(){
  if (request == null || request.length == 0) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
    return false;
  }
  if (origParam == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
    return false;
  }
  byte paramType=changeParam.getType();
switch (paramType) {
case SentinelHttpParam.PARAM_PATH:
    request=updateParameterPath(request,changeParam);
  break;
case SentinelHttpParam.PARAM_JSON:
request=updateParameterJSON(request,changeParam);
break;
case SentinelHttpParam.PARAM_BODY:
case SentinelHttpParam.PARAM_URL:
case SentinelHttpParam.PARAM_COOKIE:
request=BurpCallbacks.getInstance().getBurp().getHelpers().updateParameter(request,changeParam);
break;
default :
request=updateParameterJSON(request,changeParam);
return false;
}
requestInfo=BurpCallbacks.getInstance().getBurp().getHelpers().analyzeRequest(httpService,request);
for (IParameter newParam : requestInfo.getParameters()) {
if (changeParam.isThisParameter(newParam)) {
changeParam.updateLocationWith(newParam);
}
}
init();
return true;
}","public boolean applyChangeParam(){
  if (request == null || request.length == 0) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
    return false;
  }
  if (origParam == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
    return false;
  }
  byte paramType=changeParam.getType();
switch (paramType) {
case SentinelHttpParam.PARAM_PATH:
    request=updateParameterPath(request,changeParam);
  break;
case SentinelHttpParam.PARAM_JSON:
request=updateParameterJSON(request,changeParam);
break;
case SentinelHttpParam.PARAM_BODY:
case SentinelHttpParam.PARAM_URL:
case SentinelHttpParam.PARAM_COOKIE:
request=BurpCallbacks.getInstance().getBurp().getHelpers().updateParameter(request,changeParam);
break;
default :
request=updateParameterJSON(request,changeParam);
return true;
}
requestInfo=BurpCallbacks.getInstance().getBurp().getHelpers().analyzeRequest(httpService,request);
for (IParameter newParam : requestInfo.getParameters()) {
if (changeParam.isThisParameter(newParam)) {
changeParam.updateLocationWith(newParam);
}
}
init();
return true;
}"
26411,"private byte[] updateParameterJSON(byte[] request,SentinelHttpParam changeParam){
  String req=BurpCallbacks.getInstance().getBurp().getHelpers().bytesToString(request);
  StringBuilder r=new StringBuilder(req);
  r.replace(changeParam.getValueStart(),changeParam.getValueEnd(),changeParam.getValue());
  return BurpCallbacks.getInstance().getBurp().getHelpers().stringToBytes(r.toString());
}","private byte[] updateParameterJSON(byte[] request,SentinelHttpParam changeParam){
  String req=BurpCallbacks.getInstance().getBurp().getHelpers().bytesToString(request);
  StringBuilder r=new StringBuilder(req);
  r.replace(origParam.getValueStart(),origParam.getValueEnd(),changeParam.getValue());
  return BurpCallbacks.getInstance().getBurp().getHelpers().stringToBytes(r.toString());
}"
26412,"public AttackXss(AttackWorkEntry work){
  super(work);
  attackData=new LinkedList<AttackData>();
  String indicator;
  indicator=XssIndicator.getInstance().getIndicator();
  attackData.add(new AttackData(0,indicator,indicator,AttackData.AttackType.INFO));
  attackData.add(new AttackData(1,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(2,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(3,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(4,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(5,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(6,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(7,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(8,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(9,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(10,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(11,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(12,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(13,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(14,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
}","public AttackXss(AttackWorkEntry work){
  super(work);
  attackData=new LinkedList<AttackData>();
  String indicator;
  indicator=XssIndicator.getInstance().getIndicator();
  attackData.add(new AttackData(0,indicator,indicator,AttackData.AttackType.INFO));
  attackData.add(new AttackData(1,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(2,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(3,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(4,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(5,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(6,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(7,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(8,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(9,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(10,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
  attackData.add(new AttackData(11,indicator + ""String_Node_Str"",indicator + ""String_Node_Str"",AttackData.AttackType.VULN));
}"
26413,"@Override public boolean performNextAttack(){
  boolean doContinue=false;
  AttackData data=attackData.get(state);
  SentinelHttpMessage httpMessage;
  try {
    httpMessage=attack(data);
  }
 catch (  ConnectionTimeoutException ex) {
    state++;
    return false;
  }
switch (state) {
case 0:
    doContinue=true;
  if (checkTag(httpMessage.getRes().getResponseStr(),XssIndicator.getInstance().getBaseIndicator())) {
    inputReflectedInTag=true;
  }
 else {
    inputReflectedInTag=false;
  }
break;
case 14:
doContinue=false;
break;
default :
doContinue=true;
break;
}
state++;
return doContinue;
}","@Override public boolean performNextAttack(){
  boolean doContinue=false;
  AttackData data=attackData.get(state);
  SentinelHttpMessage httpMessage;
  try {
    httpMessage=attack(data);
  }
 catch (  ConnectionTimeoutException ex) {
    state++;
    return false;
  }
switch (state) {
case 0:
    doContinue=true;
  if (checkTag(httpMessage.getRes().getResponseStr(),XssIndicator.getInstance().getBaseIndicator())) {
    inputReflectedInTag=true;
  }
 else {
    inputReflectedInTag=false;
  }
break;
case 11:
doContinue=false;
break;
default :
doContinue=true;
break;
}
state++;
return doContinue;
}"
26414,"private void analyzeResponse(AttackData data,SentinelHttpMessageAtk httpMessage){
  boolean hasXss=false;
  boolean hasInput=false;
  String message=""String_Node_Str"";
switch (state) {
case 0:
    origTidyMsgs=util.Beautifier.getInstance().analyze(httpMessage.getRes().extractBody());
  if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
    hasInput=true;
    message+=""String_Node_Str"" + data.getOutput();
  }
break;
case 1:
case 2:
case 3:
case 4:
if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
if (hasInput && !inputReflectedInTag) {
hasXss=true;
}
break;
case 5:
case 6:
case 7:
case 8:
if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
if (hasInput && inputReflectedInTag) {
hasXss=true;
}
break;
case 11:
case 12:
case 14:
if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
}
if (state > 0) {
LinkedList<TidyMessage> msgs=util.Beautifier.getInstance().analyze(httpMessage.getRes().extractBody());
if (util.Beautifier.getInstance().hasHtmlSyntaxError(origTidyMsgs,msgs)) {
hasXss=true;
if (!message.equals(""String_Node_Str"")) {
message+=""String_Node_Str"";
}
message+=""String_Node_Str"" + util.Beautifier.getInstance().getMessageDiffString(origTidyMsgs,msgs);
}
}
message+=""String_Node_Str"";
BurpCallbacks.getInstance().print(message);
if (hasXss) {
data.setSuccess(true);
AttackResult res=new AttackResult(data.getAttackType(),""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),true,message);
httpMessage.addAttackResult(res);
ResponseHighlight h=new ResponseHighlight(data.getOutput(),failColor);
httpMessage.getRes().addHighlight(h);
}
 else if (hasInput) {
AttackResult res=new AttackResult(AttackData.AttackType.INFO,""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),true,message);
httpMessage.addAttackResult(res);
ResponseHighlight h=new ResponseHighlight(data.getOutput(),failColor);
httpMessage.getRes().addHighlight(h);
}
 else {
data.setSuccess(false);
AttackResult res=new AttackResult(AttackData.AttackType.NONE,""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),false,null);
httpMessage.addAttackResult(res);
}
}","private void analyzeResponse(AttackData data,SentinelHttpMessageAtk httpMessage){
  boolean hasXss=false;
  boolean hasInput=false;
  String message=""String_Node_Str"";
switch (state) {
case 0:
    origTidyMsgs=util.Beautifier.getInstance().analyze(httpMessage.getRes().extractBody());
  if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
    hasInput=true;
    message+=""String_Node_Str"" + data.getOutput();
  }
break;
case 1:
case 2:
case 3:
case 4:
if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
if (hasInput && !inputReflectedInTag) {
hasXss=true;
}
break;
case 7:
case 8:
if (httpMessage.getRes().extractBody().contains(data.getOutput()) && inputReflectedInTag) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
break;
case 11:
if (httpMessage.getRes().extractBody().contains(data.getOutput())) {
hasInput=true;
message+=""String_Node_Str"" + data.getOutput();
}
}
if (state > 0) {
LinkedList<TidyMessage> msgs=util.Beautifier.getInstance().analyze(httpMessage.getRes().extractBody());
if (util.Beautifier.getInstance().hasHtmlSyntaxError(origTidyMsgs,msgs)) {
hasXss=true;
if (!message.equals(""String_Node_Str"")) {
message+=""String_Node_Str"";
}
message+=""String_Node_Str"" + util.Beautifier.getInstance().getMessageDiffString(origTidyMsgs,msgs);
}
}
message+=""String_Node_Str"";
if (hasXss) {
data.setSuccess(true);
AttackResult res=new AttackResult(data.getAttackType(),""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),true,message);
httpMessage.addAttackResult(res);
ResponseHighlight h=new ResponseHighlight(data.getOutput(),failColor);
httpMessage.getRes().addHighlight(h);
}
 else if (hasInput) {
AttackResult res=new AttackResult(AttackData.AttackType.INFO,""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),true,message);
httpMessage.addAttackResult(res);
ResponseHighlight h=new ResponseHighlight(data.getOutput(),failColor);
httpMessage.getRes().addHighlight(h);
}
 else {
data.setSuccess(false);
AttackResult res=new AttackResult(AttackData.AttackType.NONE,""String_Node_Str"" + data.getIndex(),httpMessage.getReq().getChangeParam(),false,null);
httpMessage.addAttackResult(res);
}
}"
26415,"public String getMessageDiffString(LinkedList<TidyMessage> origList,LinkedList<TidyMessage> currList){
  String ret=""String_Node_Str"";
  LinkedList<TidyMessage> diffList=new LinkedList<TidyMessage>();
  for (  TidyMessage curr : currList) {
    boolean found=false;
    for (    TidyMessage orig : origList) {
      if (orig.getLine() == curr.getLine()) {
        found=true;
        break;
      }
    }
    if (!found) {
      diffList.add(curr);
    }
  }
  for (  TidyMessage diff : diffList) {
    ret+=StringEscapeUtils.escapeHtml4(diff.getMessage()) + ""String_Node_Str"";
  }
  return ret;
}","public String getMessageDiffString(LinkedList<TidyMessage> origList,LinkedList<TidyMessage> currList){
  String ret=""String_Node_Str"";
  LinkedList<TidyMessage> diffList=new LinkedList<TidyMessage>();
  for (  TidyMessage curr : currList) {
    boolean found=false;
    for (    TidyMessage orig : origList) {
      if (orig.getErrorCode() == curr.getErrorCode()) {
        found=true;
        break;
      }
    }
    if (!found) {
      diffList.add(curr);
    }
  }
  for (  TidyMessage diff : diffList) {
    ret+=Integer.toString(diff.getLine()) + ""String_Node_Str"" + StringEscapeUtils.escapeHtml4(diff.getMessage())+ ""String_Node_Str"";
  }
  return ret;
}"
26416,"@Override public void update(Observable o,Object arg){
  if (o.getClass().equals(CategorizerManager.class)) {
    this.fireTableDataChanged();
  }
}","@Override public void update(Observable o,Object arg){
  if (o.getClass().equals(CategorizerManager.class)) {
    this.fireTableDataChanged();
  }
 else {
    this.fireTableDataChanged();
  }
}"
26417,"void addMessage(SentinelHttpMessageAtk httpMessage){
  messages.add(httpMessage);
  httpMessage.setTableIndexAttack(messages.size() - 1);
  httpMessage.addObserver(this);
  this.fireTableDataChanged();
}","void addMessage(SentinelHttpMessageAtk httpMessage){
  messages.add(httpMessage);
  httpMessage.setTableIndexAttack(messages.size() - 1);
  httpMessage.addObserver(this);
  httpMessage.getParentHttpMessage().addObserver(this);
  this.fireTableDataChanged();
}"
26418,"@Override public void setResponse(byte[] message){
  httpResponse=new SentinelHttpResponse(message);
}","@Override public void setResponse(byte[] message){
  httpResponse=new SentinelHttpResponse(message);
  notifyResponseContentChange();
}"
26419,"@Override public void update(Observable o,Object arg){
  this.fireTableDataChanged();
}","@Override public void update(Observable o,Object arg){
  this.fireTableDataChanged();
  parent.setUpdateCurrentSelected();
}"
26420,"@Override public boolean performNextAttack(){
  boolean doContinue=false;
  if (initialMessage == null || initialMessage.getRequest() == null) {
    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,""String_Node_Str"");
  }
  if (initialMessage.getReq().getChangeParam() == null) {
  }
  ListManagerList list=ListManager.getInstance().getModel().getList(Integer.parseInt(attackData));
  String data=list.getContent().get(state);
  data=data.replace(""String_Node_Str"",XssIndicator.getInstance().getIndicator());
  try {
    SentinelHttpMessage httpMessage=attack(data);
  }
 catch (  ConnectionTimeoutException ex) {
    state++;
    return false;
  }
  if (state < list.getContent().size() - 1) {
    doContinue=true;
  }
 else {
    doContinue=false;
  }
  state++;
  return doContinue;
}","@Override public boolean performNextAttack(){
  boolean doContinue=false;
  if (initialMessage == null || initialMessage.getRequest() == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
    return false;
  }
  if (initialMessage.getReq().getChangeParam() == null) {
  }
  ListManagerList list=ListManager.getInstance().getModel().getList(Integer.parseInt(attackData));
  if (list == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"" + attackData + ""String_Node_Str""+ state);
    return false;
  }
  String data=list.getContent().get(state);
  if (data == null || data.length() == 0) {
    BurpCallbacks.getInstance().print(""String_Node_Str"" + attackData + ""String_Node_Str""+ state);
    return false;
  }
  data=data.replace(""String_Node_Str"",XssIndicator.getInstance().getIndicator());
  try {
    SentinelHttpMessage httpMessage=attack(data);
  }
 catch (  ConnectionTimeoutException ex) {
    BurpCallbacks.getInstance().print(""String_Node_Str"" + ex.getLocalizedMessage());
    return false;
  }
  if (state < list.getContent().size() - 1) {
    doContinue=true;
  }
 else {
    doContinue=false;
  }
  state++;
  return doContinue;
}"
26421,"void resetAttackSelection(){
  for (  PanelLeftTableUIEntry entry : uiEntries) {
    entry.isAllEnabled=false;
    entry.isSqlEnabled=false;
    entry.isOtherEnabled=false;
    entry.isAllEnabled=false;
    entry.isAuthEnabled=false;
    entry.authData=null;
  }
}","void resetAttackSelection(){
  for (  PanelLeftTableUIEntry entry : uiEntries) {
    entry.isAllEnabled=false;
    entry.isSqlEnabled=false;
    entry.isOtherEnabled=false;
    entry.isAllEnabled=false;
    entry.isAuthEnabled=false;
    entry.authData=null;
  }
  this.fireTableDataChanged();
}"
26422,"public ListManagerList(String s,String contentAsString){
  this(s);
  String c[]=contentAsString.split(""String_Node_Str"");
  for (int n=0; n < c.length; n++) {
    content.add(c[n]);
  }
}","public ListManagerList(String s,String contentAsString){
  this(s);
  String c[]=contentAsString.split(""String_Node_Str"");
  for (int n=0; n < c.length; n++) {
    if (c[n].length() > 0) {
      content.add(c[n]);
    }
  }
}"
26423,"private SentinelHttpMessage attack(String data) throws ConnectionTimeoutException {
  SentinelHttpMessageAtk httpMessage=initAttackHttpMessage(data);
  lastHttpMessage=httpMessage;
  BurpCallbacks.getInstance().sendRessource(httpMessage,attackWorkEntry.followRedirect);
  String response=httpMessage.getRes().getResponseStr();
  if (response.contains(""String_Node_Str"")) {
    AttackResult res=new AttackResult(AttackData.AttackType.VULN,""String_Node_Str"" + state,httpMessage.getReq().getChangeParam(),true);
    httpMessage.addAttackResult(res);
    ResponseHighlight h=new ResponseHighlight(""String_Node_Str"",failColor);
    httpMessage.addHighlight(h);
  }
 else {
    AttackResult res=new AttackResult(AttackData.AttackType.NONE,""String_Node_Str"" + state,httpMessage.getReq().getChangeParam(),false);
    httpMessage.addAttackResult(res);
  }
  return httpMessage;
}","private SentinelHttpMessage attack(String data) throws ConnectionTimeoutException {
  SentinelHttpMessageAtk httpMessage=initAttackHttpMessage(data);
  lastHttpMessage=httpMessage;
  BurpCallbacks.getInstance().sendRessource(httpMessage,attackWorkEntry.followRedirect);
  boolean hasError=false;
  ResponseCategory sqlResponseCategory=null;
  for (  ResponseCategory rc : httpMessage.getRes().getCategories()) {
    if (rc.getCategoryEntry().getTag().equals(""String_Node_Str"")) {
      hasError=true;
      sqlResponseCategory=rc;
      break;
    }
  }
  if (hasError) {
    AttackResult res=new AttackResult(AttackData.AttackType.VULN,""String_Node_Str"" + state,httpMessage.getReq().getChangeParam(),true);
    httpMessage.addAttackResult(res);
    ResponseHighlight h=new ResponseHighlight(sqlResponseCategory.getIndicator(),failColor);
    httpMessage.addHighlight(h);
  }
 else {
    AttackResult res=new AttackResult(AttackData.AttackType.NONE,""String_Node_Str"" + state,httpMessage.getReq().getChangeParam(),false);
    httpMessage.addAttackResult(res);
  }
  return httpMessage;
}"
26424,"public LinkedList<ResponseCategory> categorize(String input){
  LinkedList<ResponseCategory> categories=new LinkedList<ResponseCategory>();
  if (input == null || input.length() <= 0) {
    return categories;
  }
  LinkedList<CategoryEntry> categoryEntries=getCategories();
  for (  CategoryEntry entries : categoryEntries) {
    Pattern pattern=Pattern.compile(entries.getRegex());
    Matcher matcher=pattern.matcher(input);
    if (matcher.find()) {
      ResponseCategory c=new ResponseCategory(entries,matcher.group());
      categories.add(c);
    }
  }
  return categories;
}","public LinkedList<ResponseCategory> categorize(String input){
  LinkedList<ResponseCategory> categories=new LinkedList<ResponseCategory>();
  if (input == null || input.length() <= 0) {
    return categories;
  }
  for (  CategoryEntry entry : categorizerManagerUi.getCategories()) {
    categories.addAll(scanForRegex(entry,input));
  }
  for (  Map.Entry entry : staticCategories.entrySet()) {
    LinkedList<CategoryEntry> staticCategoriesEntry=(LinkedList<CategoryEntry>)entry.getValue();
    for (    CategoryEntry e : staticCategoriesEntry) {
      categories.addAll(scanForRegex(e,input));
    }
  }
  return categories;
}"
26425,"private void loadStaticCategories(){
  String[] fileNames={""String_Node_Str"",""String_Node_Str""};
  LinkedList<CategoryEntry> staticCategoryList;
  for (  String fileName : fileNames) {
    staticCategoryList=new LinkedList<CategoryEntry>();
    InputStream is=getClass().getResourceAsStream(""String_Node_Str"" + fileName + ""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line;
    try {
      while ((line=reader.readLine()) != null) {
        String regex=line;
        CategoryEntry categoryEntry=new CategoryEntry(fileName,Pattern.quote(regex));
        staticCategoryList.add(categoryEntry);
      }
    }
 catch (    IOException ex) {
      BurpCallbacks.getInstance().print(ex.toString());
    }
    staticCategories.add(staticCategoryList);
  }
}","private void loadStaticCategories(){
  String[] fileNames={""String_Node_Str"",""String_Node_Str""};
  LinkedList<CategoryEntry> staticCategoryList;
  for (  String fileName : fileNames) {
    staticCategoryList=new LinkedList<CategoryEntry>();
    InputStream is=getClass().getResourceAsStream(""String_Node_Str"" + fileName + ""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line;
    try {
      while ((line=reader.readLine()) != null) {
        String regex=line;
        CategoryEntry categoryEntry=new CategoryEntry(fileName,""String_Node_Str"" + Pattern.quote(regex) + ""String_Node_Str"");
        staticCategoryList.add(categoryEntry);
      }
    }
 catch (    IOException ex) {
      BurpCallbacks.getInstance().print(ex.toString());
    }
    staticCategories.put(fileName,staticCategoryList);
  }
}"
26426,"@Override public void update(Observable o,Object arg){
  int selected=parent.getSelected();
  this.fireTableDataChanged();
  parent.setSelected(selected);
}","@Override public void update(Observable o,Object arg){
  this.fireTableDataChanged();
  parent.setSelected();
}"
26427,"public void init(){
  ((PanelTopNetworkBtn)btnNetworking).init();
  categorizerUi=CategorizerManager.getInstance().getCategorizerUi();
  WindowListener categorizerWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnCategorizer.setSelected(false);
      categorizerUi.setVisible(false);
    }
  }
;
  categorizerUi.addWindowListener(categorizerWindowListener);
  sessionUi=SessionManager.getInstance().getSessionManagerUi();
  WindowListener sessionUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnSessions.setSelected(false);
      sessionUi.setVisible(false);
    }
  }
;
  sessionUi.addWindowListener(sessionUiWindowListener);
  networkerInfoUi=new NetworkerInfoUi();
  WindowListener networkerInfoWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnNetworking.setSelected(false);
      networkerInfoUi.setVisible(false);
    }
  }
;
  networkerInfoUi.addWindowListener(networkerInfoWindowListener);
  reporterUi=new ReporterUi();
  WindowListener reporterUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnReporter.setSelected(false);
      reporterUi.setVisible(false);
    }
  }
;
  reporterUi.addWindowListener(reporterUiWindowListener);
  listManagerUi=new ListManagerUi();
  WindowListener listUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      listManagerUi.save();
      btnLists.setSelected(false);
      listManagerUi.setVisible(false);
    }
  }
;
  listManagerUi.addWindowListener(listUiWindowListener);
  ListSelectionModel lsm=tableAllMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        currentSelectedRow=lsm.getMinSelectionIndex();
        SentinelMainUi.getMainUi().showMessage(currentSelectedRow);
      }
    }
  }
);
  tableAllMessages.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (popup.getPopup().isPopupTrigger(e)) {
        JTable source=(JTable)e.getSource();
        int row=source.rowAtPoint(e.getPoint());
        int column=source.columnAtPoint(e.getPoint());
        if (!source.isRowSelected(row)) {
          source.changeSelection(row,column,false,false);
        }
        popup.getPopup().show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
}","public void init(){
  ((PanelTopNetworkBtn)btnNetworking).init();
  categorizerUi=CategorizerManager.getInstance().getCategorizerUi();
  WindowListener categorizerWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnCategorizer.setSelected(false);
      categorizerUi.setVisible(false);
    }
  }
;
  categorizerUi.addWindowListener(categorizerWindowListener);
  sessionUi=SessionManager.getInstance().getSessionManagerUi();
  WindowListener sessionUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnSessions.setSelected(false);
      sessionUi.setVisible(false);
    }
  }
;
  sessionUi.addWindowListener(sessionUiWindowListener);
  networkerInfoUi=new NetworkerInfoUi();
  WindowListener networkerInfoWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnNetworking.setSelected(false);
      networkerInfoUi.setVisible(false);
    }
  }
;
  networkerInfoUi.addWindowListener(networkerInfoWindowListener);
  reporterUi=new ReporterUi();
  WindowListener reporterUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      btnReporter.setSelected(false);
      reporterUi.setVisible(false);
    }
  }
;
  reporterUi.addWindowListener(reporterUiWindowListener);
  listManagerUi=new ListManagerUi();
  WindowListener listUiWindowListener=new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      listManagerUi.save();
      btnLists.setSelected(false);
      listManagerUi.setVisible(false);
    }
  }
;
  listManagerUi.addWindowListener(listUiWindowListener);
  ListSelectionModel lsm=tableAllMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        int oldSelected=currentSelectedRow;
        currentSelectedRow=lsm.getMinSelectionIndex();
        if (currentSelectedRow != oldSelected) {
          SentinelMainUi.getMainUi().showMessage(currentSelectedRow);
        }
      }
    }
  }
);
  tableAllMessages.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (popup.getPopup().isPopupTrigger(e)) {
        JTable source=(JTable)e.getSource();
        int row=source.rowAtPoint(e.getPoint());
        int column=source.columnAtPoint(e.getPoint());
        if (!source.isRowSelected(row)) {
          source.changeSelection(row,column,false,false);
        }
        popup.getPopup().show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
}"
26428,"@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    currentSelectedRow=lsm.getMinSelectionIndex();
    SentinelMainUi.getMainUi().showMessage(currentSelectedRow);
  }
}","@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    int oldSelected=currentSelectedRow;
    currentSelectedRow=lsm.getMinSelectionIndex();
    if (currentSelectedRow != oldSelected) {
      SentinelMainUi.getMainUi().showMessage(currentSelectedRow);
    }
  }
}"
26429,"@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    int newSelectedRow=lsm.getMinSelectionIndex();
    if (newSelectedRow != currentSelectedRow) {
      viewHttpMessage(currentSelectedRow);
    }
    currentSelectedRow=newSelectedRow;
    tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
  }
}","@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    int oldSelectedRow=currentSelectedRow;
    currentSelectedRow=lsm.getMinSelectionIndex();
    if (oldSelectedRow != currentSelectedRow) {
      viewHttpMessage(currentSelectedRow);
      tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
    }
  }
}"
26430,"public void viewHttpMessage(int n){
  try {
    panelViewMessage.setHttpMessage(panelRightModel.getHttpMessage(n));
  }
 catch (  Exception ex) {
    BurpCallbacks.getInstance().print(ex.getLocalizedMessage());
  }
}","public void viewHttpMessage(int n){
  try {
    BurpCallbacks.getInstance().print(""String_Node_Str"" + n);
    panelViewMessage.setHttpMessage(panelRightModel.getHttpMessage(n));
  }
 catch (  Exception ex) {
    BurpCallbacks.getInstance().print(ex.getLocalizedMessage());
  }
}"
26431,"/** 
 * Creates new form PanelRightUi
 */
public PanelRightUi(){
  panelRightModel=new PanelRightModel(this);
  initComponents();
  int width=60;
  tableMessages.getColumnModel().getColumn(0).setMaxWidth(40);
  tableMessages.getColumnModel().getColumn(0).setMinWidth(40);
  tableMessages.getColumnModel().getColumn(1).setMaxWidth(60);
  tableMessages.getColumnModel().getColumn(1).setMinWidth(60);
  tableMessages.getColumnModel().getColumn(5).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(5).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMinWidth(width);
  tableMessages.setAutoCreateRowSorter(true);
  UiUtil.restoreTableDimensions(tableMessages,this);
  UiUtil.restoreSplitLocation(jSplitPane1,this);
  ListSelectionModel lsm=tableMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        int newSelectedRow=lsm.getMinSelectionIndex();
        if (newSelectedRow != currentSelectedRow) {
          viewHttpMessage(currentSelectedRow);
        }
        currentSelectedRow=newSelectedRow;
        tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
      }
    }
  }
);
}","/** 
 * Creates new form PanelRightUi
 */
public PanelRightUi(){
  panelRightModel=new PanelRightModel(this);
  initComponents();
  int width=60;
  tableMessages.getColumnModel().getColumn(0).setMaxWidth(40);
  tableMessages.getColumnModel().getColumn(0).setMinWidth(40);
  tableMessages.getColumnModel().getColumn(1).setMaxWidth(60);
  tableMessages.getColumnModel().getColumn(1).setMinWidth(60);
  tableMessages.getColumnModel().getColumn(5).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(5).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMinWidth(width);
  tableMessages.setAutoCreateRowSorter(true);
  UiUtil.restoreTableDimensions(tableMessages,this);
  UiUtil.restoreSplitLocation(jSplitPane1,this);
  ListSelectionModel lsm=tableMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        int oldSelectedRow=currentSelectedRow;
        currentSelectedRow=lsm.getMinSelectionIndex();
        if (oldSelectedRow != currentSelectedRow) {
          viewHttpMessage(currentSelectedRow);
          tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
        }
      }
    }
  }
);
}"
26432,"private void reInit(){
  if (httpMessage.getRes().hasResponse()) {
    labelSize.setText(Integer.toString(httpMessage.getRes().getSize()));
    labelHttpCode.setText(httpMessage.getRes().getHttpCode());
    labelDom.setText(Integer.toString(httpMessage.getRes().getDom()));
    if (httpMessage instanceof SentinelHttpMessageOrig) {
      panelViewComboboxModel.hasParent(false);
    }
 else {
      panelViewComboboxModel.hasParent(true);
      SentinelHttpMessageAtk atk=(SentinelHttpMessageAtk)httpMessage;
      labelRedirected.setText(atk.isRedirected() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    viewDefaultContent=null;
    viewBeautifyContent=null;
    viewDiffContent=null;
  }
  showMessage();
}","private void reInit(){
  if (httpMessage.getRes().hasResponse()) {
    labelSize.setText(Integer.toString(httpMessage.getRes().getSize()));
    labelHttpCode.setText(httpMessage.getRes().getHttpCode());
    labelDom.setText(Integer.toString(httpMessage.getRes().getDom()));
    if (httpMessage instanceof SentinelHttpMessageOrig) {
      panelViewComboboxModel.hasParent(false);
    }
 else {
      panelViewComboboxModel.hasParent(true);
      SentinelHttpMessageAtk atk=(SentinelHttpMessageAtk)httpMessage;
      labelRedirected.setText(atk.isRedirected() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    viewDefaultContent=null;
    viewBeautifyContent=null;
    viewDiffContent=null;
  }
 else {
  }
  showMessage();
}"
26433,"@Override public boolean performNextAttack(){
  boolean doContinue=false;
  if (initialMessage == null || initialMessage.getRequest() == null) {
    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,""String_Node_Str"");
  }
  if (initialMessage.getReq().getChangeParam() == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
  }
  String data=attackDataSql[state];
  SentinelHttpMessage httpMessage=attack(data);
  if (state < 4) {
    doContinue=true;
  }
 else {
    doContinue=false;
  }
  state++;
  return doContinue;
}","@Override public boolean performNextAttack(){
  boolean doContinue=false;
  if (initialMessage == null || initialMessage.getRequest() == null) {
    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,""String_Node_Str"");
  }
  if (initialMessage.getReq().getChangeParam() == null) {
    BurpCallbacks.getInstance().print(""String_Node_Str"");
  }
  String data=attackDataSql[state];
  SentinelHttpMessage httpMessage=attack(data);
  if (state < 3) {
    doContinue=true;
  }
 else {
    doContinue=false;
  }
  state++;
  return doContinue;
}"
26434,"private void attackRessource(){
  if (comboBoxSession.getSelectedIndex() > 0) {
    tableModel.setSessionAttackMessage(true,(String)comboBoxSession.getSelectedItem());
  }
  LinkedList<SentinelHttpParam> attackHttpParams=tableModel.createChangeParam();
  tableModel.resetAttackSelection();
  comboBoxSession.setSelectedIndex(0);
  PanelAttackProgress panelProgress=new PanelAttackProgress(attackHttpParams,origHttpMessage,this,checkboxFollowRedirect.isSelected(),(String)comboboxMainSession.getSelectedItem());
  panelProgress.setLocationRelativeTo(this);
  panelProgress.setVisible(true);
  panelParent.updateUI();
  panelProgress.start();
}","private void attackRessource(){
  if (comboBoxSession.getSelectedIndex() > 0) {
    tableModel.setSessionAttackMessage(true,(String)comboBoxSession.getSelectedItem());
  }
  LinkedList<SentinelHttpParam> attackHttpParams=tableModel.createChangeParam();
  tableModel.resetAttackSelection();
  comboBoxSession.setSelectedIndex(0);
  System.out.println(""String_Node_Str"" + attackHttpParams.size());
  PanelAttackProgress panelProgress=new PanelAttackProgress(attackHttpParams,origHttpMessage,this,checkboxFollowRedirect.isSelected(),(String)comboboxMainSession.getSelectedItem());
  panelProgress.setLocationRelativeTo(this);
  panelProgress.setVisible(true);
  panelParent.updateUI();
  panelProgress.start();
}"
26435,"private void buttonSessionActionPerformed(java.awt.event.ActionEvent evt){
  SessionManager.getInstance().show();
  sessionComboBoxModel.myupdate();
  tableModel.fireTableDataChanged();
}","private void buttonSessionActionPerformed(java.awt.event.ActionEvent evt){
  SessionManager.getInstance().show();
  sessionComboBoxModel.myupdate();
  sessionComboBoxModelMain.myupdate();
  tableModel.fireTableDataChanged();
  comboboxMainSession.invalidate();
  comboboxMainSession.updateUI();
}"
26436,"void addMessage(SentinelHttpMessageAtk httpMessage){
  messages.add(httpMessage);
  httpMessage.setTableIndexAttack(messages.size() - 1);
  httpMessage.addObserver(this);
  int selected=parent.getSelected();
  this.fireTableDataChanged();
  parent.setSelected(selected);
}","void addMessage(SentinelHttpMessageAtk httpMessage){
  messages.add(httpMessage);
  httpMessage.setTableIndexAttack(messages.size() - 1);
  httpMessage.addObserver(this);
  this.fireTableDataChanged();
}"
26437,"public void addHttpMessage(SentinelHttpMessageAtk httpMessage){
  panelRightModel.addMessage(httpMessage);
  if (currentSelectedRow == -1) {
    currentSelectedRow=0;
  }
  tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
  tableMessages.scrollRectToVisible(tableMessages.getCellRect(panelRightModel.getRowCount() - 1,0,true));
  this.updateUI();
}","public void addHttpMessage(SentinelHttpMessageAtk httpMessage){
  panelRightModel.addMessage(httpMessage);
  if (currentSelectedRow == -1) {
    currentSelectedRow=0;
    viewHttpMessage(currentSelectedRow);
  }
  tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
  tableMessages.scrollRectToVisible(tableMessages.getCellRect(panelRightModel.getRowCount() - 1,0,true));
}"
26438,"@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    currentSelectedRow=lsm.getMinSelectionIndex();
    viewHttpMessage(currentSelectedRow);
    tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
  }
}","@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting())   return;
  ListSelectionModel lsm=(ListSelectionModel)e.getSource();
  if (lsm.isSelectionEmpty()) {
  }
 else {
    int newSelectedRow=lsm.getMinSelectionIndex();
    if (newSelectedRow != currentSelectedRow) {
      viewHttpMessage(currentSelectedRow);
    }
    currentSelectedRow=newSelectedRow;
    tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
  }
}"
26439,"/** 
 * Creates new form PanelRightUi
 */
public PanelRightUi(){
  panelRightModel=new PanelRightModel(this);
  initComponents();
  int width=60;
  tableMessages.getColumnModel().getColumn(0).setMaxWidth(40);
  tableMessages.getColumnModel().getColumn(0).setMinWidth(40);
  tableMessages.getColumnModel().getColumn(1).setMaxWidth(60);
  tableMessages.getColumnModel().getColumn(1).setMinWidth(60);
  tableMessages.getColumnModel().getColumn(5).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(5).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMinWidth(width);
  tableMessages.setAutoCreateRowSorter(true);
  UiUtil.restoreTableDimensions(tableMessages,this);
  UiUtil.restoreSplitLocation(jSplitPane1,this);
  ListSelectionModel lsm=tableMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        currentSelectedRow=lsm.getMinSelectionIndex();
        viewHttpMessage(currentSelectedRow);
        tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
      }
    }
  }
);
}","/** 
 * Creates new form PanelRightUi
 */
public PanelRightUi(){
  panelRightModel=new PanelRightModel(this);
  initComponents();
  int width=60;
  tableMessages.getColumnModel().getColumn(0).setMaxWidth(40);
  tableMessages.getColumnModel().getColumn(0).setMinWidth(40);
  tableMessages.getColumnModel().getColumn(1).setMaxWidth(60);
  tableMessages.getColumnModel().getColumn(1).setMinWidth(60);
  tableMessages.getColumnModel().getColumn(5).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(5).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(6).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(7).setMinWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMaxWidth(width);
  tableMessages.getColumnModel().getColumn(8).setMinWidth(width);
  tableMessages.setAutoCreateRowSorter(true);
  UiUtil.restoreTableDimensions(tableMessages,this);
  UiUtil.restoreSplitLocation(jSplitPane1,this);
  ListSelectionModel lsm=tableMessages.getSelectionModel();
  lsm.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      ListSelectionModel lsm=(ListSelectionModel)e.getSource();
      if (lsm.isSelectionEmpty()) {
      }
 else {
        int newSelectedRow=lsm.getMinSelectionIndex();
        if (newSelectedRow != currentSelectedRow) {
          viewHttpMessage(currentSelectedRow);
        }
        currentSelectedRow=newSelectedRow;
        tableMessages.getSelectionModel().setSelectionInterval(currentSelectedRow,currentSelectedRow);
      }
    }
  }
);
}"
26440,"public void addAttackMessage(SentinelHttpMessageAtk httpMessage){
  panelRightUi.addHttpMessage(httpMessage);
  this.updateUI();
}","public void addAttackMessage(SentinelHttpMessageAtk httpMessage){
  panelRightUi.addHttpMessage(httpMessage);
}"
26441,"public void init(){
  worker=new NetworkerWorker();
  BurpCallbacks.getInstance().print(""String_Node_Str"");
  worker.execute();
}","public void init(){
  worker=new NetworkerWorker();
  worker.execute();
}"
26442,"private void writeRawData(Interval interval){
  System.out.println(""String_Node_Str"" + TimeFormatCache.formatInterval(interval));
  File rawDirectory=createSubdirectory(""String_Node_Str"",interval);
  System.out.println(""String_Node_Str"" + rawDirectory.getAbsolutePath());
  for (  DataSet data : getDataSets()) {
    if (data.getRecordCount(interval) == 0) {
      System.out.println(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
      continue;
    }
    System.out.print(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
    System.out.flush();
    File dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(dataFile);
      CSVWriter.write(data,interval,writer);
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + dataFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    if (data instanceof ProcessDataSet) {
      ProcessDataSet processData=(ProcessDataSet)data;
      if (processData.getProcessCount() == 0) {
        continue;
      }
      dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"" + ""String_Node_Str"");
      writer=null;
      try {
        writer=new FileWriter(dataFile);
        CSVWriter.writeProcesses(data,writer);
        System.out.println(""String_Node_Str"");
      }
 catch (      IOException ioe) {
        System.err.println(""String_Node_Str"" + dataFile.getName());
      }
 finally {
        if (writer != null) {
          try {
            writer.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
  }
}","private void writeRawData(Interval interval){
  System.out.println(""String_Node_Str"" + TimeFormatCache.formatInterval(interval));
  File rawDirectory=createSubdirectory(""String_Node_Str"",interval);
  System.out.println(""String_Node_Str"" + rawDirectory.getAbsolutePath());
  for (  DataSet data : getDataSets()) {
    if (data.getRecordCount(interval) == 0) {
      System.out.println(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
      continue;
    }
    System.out.print(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
    System.out.flush();
    File dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(dataFile);
      CSVWriter.write(data,interval,writer);
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + dataFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    if (data instanceof ProcessDataSet) {
      ProcessDataSet processData=(ProcessDataSet)data;
      if (processData.getProcessCount() == 0) {
        continue;
      }
      dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"" + ""String_Node_Str"");
      writer=null;
      try {
        writer=new FileWriter(dataFile);
        CSVWriter.writeProcesses(data,writer);
        System.out.println(""String_Node_Str"");
      }
 catch (      IOException ioe) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ dataFile.getName());
      }
 finally {
        if (writer != null) {
          try {
            writer.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
  }
}"
26443,"private void writeChartData(JFreeChart chart,BaseChartDefinition definition,File saveDirectory){
  File csvFile=new File(saveDirectory,definition.getShortName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  FileWriter writer=null;
  Plot plot=chart.getPlot();
  DataTupleDataset dataset=null;
  if (plot instanceof CategoryPlot) {
    CategoryPlot cPlot=(CategoryPlot)plot;
    dataset=(DataTupleDataset)cPlot.getDataset();
  }
 else   if (plot instanceof XYPlot) {
    XYPlot xyPlot=(XYPlot)plot;
    dataset=(DataTupleDataset)xyPlot.getDataset();
  }
 else {
    System.err.println(""String_Node_Str"" + plot.getClass() + ""String_Node_Str""+ chart.getTitle());
  }
  if (dataset != null) {
    try {
      writer=new FileWriter(csvFile);
      CSVWriter.write(dataset,writer);
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + csvFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
}","private void writeChartData(JFreeChart chart,BaseChartDefinition definition,File saveDirectory){
  File csvFile=new File(saveDirectory,definition.getShortName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  FileWriter writer=null;
  Plot plot=chart.getPlot();
  DataTupleDataset dataset=null;
  if (plot instanceof CategoryPlot) {
    CategoryPlot cPlot=(CategoryPlot)plot;
    dataset=(DataTupleDataset)cPlot.getDataset();
  }
 else   if (plot instanceof XYPlot) {
    XYPlot xyPlot=(XYPlot)plot;
    dataset=(DataTupleDataset)xyPlot.getDataset();
  }
 else {
    System.err.println(""String_Node_Str"" + plot.getClass() + ""String_Node_Str""+ chart.getTitle());
  }
  if (dataset != null) {
    try {
      writer=new FileWriter(csvFile);
      CSVWriter.write(dataset,writer);
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ csvFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
}"
26444,"public ReportPanel(NMONVisualizerGui gui,JFrame parent,String reportCacheKey,List<DataSet> dataSets,MultiplexMode multiplexMode){
  super();
  this.chartFactory=new ChartFactory(gui);
  this.chartFactory.setGranularity(gui.getGranularity());
  this.gui=gui;
  this.parent=parent;
  this.dataSets=dataSets;
  this.reportCacheKey=reportCacheKey;
  this.multiplexMode=multiplexMode;
  this.chartsInUse=java.util.Collections.emptyList();
  buildTabs(gui);
  addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!buildingTabs) {
        int idx=getSelectedIndex();
        if (idx != -1) {
          if (!updateChart()) {
            firePropertyChange(""String_Node_Str"",null,getChartPanel(idx));
          }
          if ((previousTab != -1) && (previousTab < getTabCount())) {
            getChartPanel(previousTab).setEnabled(false);
          }
          getChartPanel(idx).setEnabled(true);
          previousTab=idx;
        }
      }
    }
  }
);
  setEnabled(false);
  gui.getIntervalManager().addListener(this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
}","public ReportPanel(NMONVisualizerGui gui,JFrame parent,String reportCacheKey,List<DataSet> dataSets,MultiplexMode multiplexMode){
  super();
  setTabLayoutPolicy(SCROLL_TAB_LAYOUT);
  this.chartFactory=new ChartFactory(gui);
  this.chartFactory.setGranularity(gui.getGranularity());
  this.gui=gui;
  this.parent=parent;
  this.dataSets=dataSets;
  this.reportCacheKey=reportCacheKey;
  this.multiplexMode=multiplexMode;
  this.chartsInUse=java.util.Collections.emptyList();
  buildTabs(gui);
  addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!buildingTabs) {
        int idx=getSelectedIndex();
        if (idx != -1) {
          if (!updateChart()) {
            firePropertyChange(""String_Node_Str"",null,getChartPanel(idx));
          }
          if ((previousTab != -1) && (previousTab < getTabCount())) {
            getChartPanel(previousTab).setEnabled(false);
          }
          getChartPanel(idx).setEnabled(true);
          previousTab=idx;
        }
      }
    }
  }
);
  setEnabled(false);
  gui.getIntervalManager().addListener(this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
}"
26445,"public BasicDataSet parse(String filepath,TimeZone timeZone) throws IOException {
  File file=new File(filepath);
  String filename=file.getName();
  int end=filename.indexOf(""String_Node_Str"");
  if (end == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  String id=DataHelper.newString(filename.substring(0,end));
  int start=end + 1;
  end=filename.indexOf(""String_Node_Str"",start);
  end=filename.indexOf(""String_Node_Str"",end + 1);
  if (end == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  String timestamp=DataHelper.newString(filename.substring(start,end));
  long baseTime=0;
  try {
    baseTime=TIMESTAMP_FORMAT.parse(timestamp).getTime();
  }
 catch (  ParseException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + timestamp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  BasicDataSet data=new BasicDataSet(filename);
  data.setHostname(id);
  data.setMetadata(""String_Node_Str"",timestamp);
  String typeName=DataHelper.newString(filename.substring(end + 1,filename.length() - 4).toUpperCase());
  if (!TYPE_NAMES.containsKey(typeName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + typeName + ""String_Node_Str""+ TYPE_NAMES.keySet());
  }
  LineNumberReader in=null;
  try {
    in=new LineNumberReader(new FileReader(file));
    String line=null;
    DataRecord currentRecord=null;
    Map<String,DataType> typesByBlockSize=new java.util.HashMap<String,DataType>(1);
    Map<String,Aggregator> readDataByBlockSize=new java.util.HashMap<String,Aggregator>(1);
    Map<String,Aggregator> writeDataByBlockSize=new java.util.HashMap<String,Aggregator>(1);
    while ((line=in.readLine()) != null) {
      String[] values=DATA_SPLITTER.split(line);
      if (values.length != 4) {
        LOGGER.warn(""String_Node_Str"",in.getLineNumber());
        continue;
      }
      if (currentRecord == null) {
        currentRecord=new DataRecord(baseTime + Integer.parseInt(values[0]),values[0]);
      }
 else       if (!currentRecord.getTimestamp().equals(values[0])) {
        for (        String blockSize : typesByBlockSize.keySet()) {
          DataType type=typesByBlockSize.get(blockSize);
          Aggregator readAggregator=readDataByBlockSize.get(blockSize);
          Aggregator writeAggregator=writeDataByBlockSize.get(blockSize);
          double read=Double.NaN;
          double write=Double.NaN;
          if (readAggregator != null) {
            read=readAggregator.getAverage();
            readAggregator.clear();
          }
          if (writeAggregator != null) {
            write=writeAggregator.getAverage();
            writeAggregator.clear();
          }
          currentRecord.addData(type,new double[]{read,write});
        }
        data.addRecord(currentRecord);
        currentRecord=new DataRecord(baseTime + Integer.parseInt(values[0]),values[0]);
      }
      String operation=values[2];
      String blockSize=values[3];
      Aggregator aggregator=null;
      if (""String_Node_Str"".equals(operation)) {
        aggregator=readDataByBlockSize.get(blockSize);
        if (aggregator == null) {
          aggregator=new Aggregator();
          readDataByBlockSize.put(blockSize,aggregator);
        }
      }
 else {
        aggregator=writeDataByBlockSize.get(blockSize);
        if (aggregator == null) {
          aggregator=new Aggregator();
          writeDataByBlockSize.put(blockSize,aggregator);
        }
      }
      DataType type=typesByBlockSize.get(blockSize);
      if (type == null) {
        type=new SubDataType(typeName,blockSize,TYPE_NAMES.get(typeName),""String_Node_Str"",""String_Node_Str"");
        data.addType(type);
        typesByBlockSize.put(blockSize,type);
      }
      aggregator.aggregate(Integer.parseInt(values[1]));
    }
    if (currentRecord != null) {
      data.addRecord(currentRecord);
    }
    return data;
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}","public BasicDataSet parse(String filepath,TimeZone timeZone) throws IOException {
  File file=new File(filepath);
  String filename=file.getName();
  int end=filename.indexOf(""String_Node_Str"");
  if (end == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  String id=DataHelper.newString(filename.substring(0,end));
  int start=end + 1;
  end=filename.indexOf(""String_Node_Str"",start);
  end=filename.indexOf(""String_Node_Str"",end + 1);
  if (end == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  String timestamp=DataHelper.newString(filename.substring(start,end));
  long baseTime=0;
  try {
    baseTime=TIMESTAMP_FORMAT.parse(timestamp).getTime();
  }
 catch (  ParseException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + timestamp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  BasicDataSet data=new BasicDataSet(filename);
  data.setHostname(id);
  data.setMetadata(""String_Node_Str"",timestamp);
  String typeName=DataHelper.newString(filename.substring(end + 1,filename.length() - 4).toUpperCase());
  if (!TYPE_NAMES.containsKey(typeName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + typeName + ""String_Node_Str""+ TYPE_NAMES.keySet());
  }
  LineNumberReader in=null;
  try {
    in=new LineNumberReader(new FileReader(file));
    String line=null;
    DataRecord currentRecord=null;
    Map<String,DataType> typesByBlockSize=new java.util.HashMap<String,DataType>(1);
    Map<String,Aggregator> readDataByBlockSize=new java.util.HashMap<String,Aggregator>(1);
    Map<String,Aggregator> writeDataByBlockSize=new java.util.HashMap<String,Aggregator>(1);
    while ((line=in.readLine()) != null) {
      String[] values=DATA_SPLITTER.split(line);
      if (values.length != 4) {
        LOGGER.warn(""String_Node_Str"",in.getLineNumber());
        continue;
      }
      if (currentRecord == null) {
        currentRecord=new DataRecord(baseTime + Integer.parseInt(values[0]),values[0]);
      }
 else       if (!currentRecord.getTimestamp().equals(values[0])) {
        for (        String blockSize : typesByBlockSize.keySet()) {
          DataType type=typesByBlockSize.get(blockSize);
          Aggregator readAggregator=readDataByBlockSize.get(blockSize);
          Aggregator writeAggregator=writeDataByBlockSize.get(blockSize);
          double read=Double.NaN;
          double write=Double.NaN;
          if (readAggregator != null) {
            read=readAggregator.getAverage();
            readAggregator.clear();
          }
          if (writeAggregator != null) {
            write=writeAggregator.getAverage();
            writeAggregator.clear();
          }
          currentRecord.addData(type,new double[]{read,write});
        }
        data.addRecord(currentRecord);
        currentRecord=new DataRecord(baseTime + Integer.parseInt(values[0]),values[0]);
      }
      String operation=values[2];
      String blockSize=DataHelper.newString(values[3]);
      Aggregator aggregator=null;
      if (""String_Node_Str"".equals(operation)) {
        aggregator=readDataByBlockSize.get(blockSize);
        if (aggregator == null) {
          aggregator=new Aggregator();
          readDataByBlockSize.put(blockSize,aggregator);
        }
      }
 else {
        aggregator=writeDataByBlockSize.get(blockSize);
        if (aggregator == null) {
          aggregator=new Aggregator();
          writeDataByBlockSize.put(blockSize,aggregator);
        }
      }
      DataType type=typesByBlockSize.get(blockSize);
      if (type == null) {
        type=new SubDataType(typeName,blockSize,TYPE_NAMES.get(typeName),""String_Node_Str"",""String_Node_Str"");
        data.addType(type);
        typesByBlockSize.put(blockSize,type);
      }
      try {
        aggregator.aggregate(Integer.parseInt(values[1]));
      }
 catch (      NumberFormatException nfe) {
        LOGGER.warn(""String_Node_Str"",values[1],in.getLineNumber());
      }
    }
    if (currentRecord != null) {
      data.addRecord(currentRecord);
    }
    return data;
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}"
26446,"private void writeRawData(Interval interval){
  System.out.println(""String_Node_Str"" + TimeFormatCache.formatInterval(interval));
  File rawDirectory=createSubdirectory(""String_Node_Str"",interval);
  System.out.println(""String_Node_Str"" + rawDirectory.getAbsolutePath());
  for (  DataSet data : getDataSets()) {
    File dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(dataFile);
      System.out.print(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
      System.out.flush();
      CSVWriter.write(data,interval,writer);
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + dataFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
}","private void writeRawData(Interval interval){
  System.out.println(""String_Node_Str"" + TimeFormatCache.formatInterval(interval));
  File rawDirectory=createSubdirectory(""String_Node_Str"",interval);
  System.out.println(""String_Node_Str"" + rawDirectory.getAbsolutePath());
  for (  DataSet data : getDataSets()) {
    if (data.getRecordCount(interval) == 0) {
      System.out.println(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
      continue;
    }
    System.out.print(""String_Node_Str"" + data.getHostname() + ""String_Node_Str"");
    System.out.flush();
    File dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(dataFile);
      CSVWriter.write(data,interval,writer);
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + dataFile.getName());
    }
 finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    if (data instanceof ProcessDataSet) {
      ProcessDataSet processData=(ProcessDataSet)data;
      if (processData.getProcessCount() == 0) {
        continue;
      }
      dataFile=new File(rawDirectory,data.getHostname() + ""String_Node_Str"" + ""String_Node_Str"");
      writer=null;
      try {
        writer=new FileWriter(dataFile);
        CSVWriter.writeProcesses(data,writer);
        System.out.println(""String_Node_Str"");
      }
 catch (      IOException ioe) {
        System.err.println(""String_Node_Str"" + dataFile.getName());
      }
 finally {
        if (writer != null) {
          try {
            writer.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
  }
}"
26447,"public static void main(String[] args){
  if (args.length == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    java.util.logging.LogManager.getLogManager().readConfiguration(ReportGenerator.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException ioe) {
    System.err.println(""String_Node_Str"");
    ioe.printStackTrace();
  }
  List<String> paths=new java.util.ArrayList<String>();
  List<String> customDataCharts=new java.util.ArrayList<String>();
  List<String> customSummaryCharts=new java.util.ArrayList<String>();
  List<String> multiplexedFieldCharts=new java.util.ArrayList<String>();
  List<String> multiplexedTypeCharts=new java.util.ArrayList<String>();
  String intervalsFile=""String_Node_Str"";
  boolean summaryCharts=true;
  boolean dataSetCharts=true;
  long startTime=Interval.DEFAULT.getStart();
  long endTime=Interval.DEFAULT.getEnd();
  boolean writeRawData=false;
  boolean writeChartData=false;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    char c=arg.charAt(0);
    if (c == '-') {
      nextarg:       for (int j=1; j < arg.length(); j++) {
        c=arg.charAt(j);
switch (c) {
case 's':
          try {
            startTime=parseTime(args,++i,'s');
            break nextarg;
          }
 catch (          IllegalArgumentException iae) {
            System.err.println(iae.getMessage());
            return;
          }
case 'e':
        try {
          endTime=parseTime(args,++i,'e');
          break nextarg;
        }
 catch (        IllegalArgumentException iae) {
          System.err.println(iae.getMessage());
          return;
        }
case 'd':
{
        ++i;
        if (i > args.length) {
          System.err.println(""String_Node_Str"" + '-' + 'd');
          return;
        }
        customDataCharts.add(args[i]);
        break nextarg;
      }
case 'a':
{
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + 'a');
        return;
      }
      customSummaryCharts.add(args[i]);
      break nextarg;
    }
case 'i':
{
    ++i;
    if (i > args.length) {
      System.err.println(""String_Node_Str"" + '-' + 's');
      return;
    }
    intervalsFile=args[i];
    break nextarg;
  }
case '-':
{
  if (j == 1) {
    String param=arg.substring(2);
    if (""String_Node_Str"".equals(param)) {
      dataSetCharts=false;
    }
 else     if (""String_Node_Str"".equals(param)) {
      summaryCharts=false;
    }
 else     if (""String_Node_Str"".equals(param)) {
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + '-'+ ""String_Node_Str"");
        return;
      }
      multiplexedFieldCharts.add(args[i]);
    }
 else     if (""String_Node_Str"".equals(param)) {
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + '-'+ ""String_Node_Str"");
        return;
      }
      multiplexedTypeCharts.add(args[i]);
    }
 else     if (""String_Node_Str"".equals(param)) {
      writeRawData=true;
    }
 else     if (""String_Node_Str"".equals(param)) {
      writeChartData=true;
    }
 else {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + '-' + '-'+ param);
    }
    break nextarg;
  }
 else {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + arg);
    break;
  }
}
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + '-' + c);
}
}
}
 else {
paths.add(arg);
}
}
if (!summaryCharts && !dataSetCharts && customDataCharts.isEmpty()&& customSummaryCharts.isEmpty()) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
return;
}
if (paths.isEmpty()) {
System.err.println(""String_Node_Str"");
return;
}
List<String> filesToParse=new java.util.ArrayList<String>();
for (String path : paths) {
File pathToParse=new File(path);
FileHelper.recurseDirectories(java.util.Collections.singletonList(pathToParse),CombinedFileFilter.getInstance(false),filesToParse);
if (filesToParse.isEmpty()) {
System.err.println('\'' + pathToParse.toString() + ""String_Node_Str"");
return;
}
}
ReportGenerator generator=new ReportGenerator(customSummaryCharts,customDataCharts,multiplexedFieldCharts,multiplexedTypeCharts);
File outputDirectory=null;
if (paths.size() == 1) {
outputDirectory=new File(paths.get(0));
}
 else {
outputDirectory=new File(System.getProperty(""String_Node_Str""));
}
generator.outputDirectory=outputDirectory.isDirectory() ? outputDirectory : outputDirectory.getParentFile();
generator.writeChartData=writeChartData;
generator.parse(filesToParse);
if (!""String_Node_Str"".equals(intervalsFile)) {
try {
generator.getIntervalManager().loadFromFile(new File(intervalsFile),0);
}
 catch (IOException ioe) {
System.err.println(""String_Node_Str"" + intervalsFile + ""String_Node_Str"");
ioe.printStackTrace();
}
}
generator.createIntervalIfNecessary(startTime,endTime);
if (generator.getIntervalManager().getIntervalCount() != 0) {
for (Interval interval : generator.getIntervalManager().getIntervals()) {
generator.createReport(interval,summaryCharts,dataSetCharts);
if (writeRawData) {
generator.writeRawData(interval);
}
}
}
 else {
generator.createReport(Interval.DEFAULT,summaryCharts,dataSetCharts);
}
System.out.println(""String_Node_Str"");
if (writeRawData) {
System.out.println();
if (generator.getIntervalManager().getIntervalCount() != 0) {
for (Interval interval : generator.getIntervalManager().getIntervals()) {
generator.writeRawData(interval);
}
}
 else {
generator.writeRawData(Interval.DEFAULT);
}
}
System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  if (args.length == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    java.util.logging.LogManager.getLogManager().readConfiguration(ReportGenerator.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException ioe) {
    System.err.println(""String_Node_Str"");
    ioe.printStackTrace();
  }
  List<String> paths=new java.util.ArrayList<String>();
  List<String> customDataCharts=new java.util.ArrayList<String>();
  List<String> customSummaryCharts=new java.util.ArrayList<String>();
  List<String> multiplexedFieldCharts=new java.util.ArrayList<String>();
  List<String> multiplexedTypeCharts=new java.util.ArrayList<String>();
  String intervalsFile=""String_Node_Str"";
  boolean summaryCharts=true;
  boolean dataSetCharts=true;
  long startTime=Interval.DEFAULT.getStart();
  long endTime=Interval.DEFAULT.getEnd();
  boolean writeRawData=false;
  boolean writeChartData=false;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    char c=arg.charAt(0);
    if (c == '-') {
      nextarg:       for (int j=1; j < arg.length(); j++) {
        c=arg.charAt(j);
switch (c) {
case 's':
          try {
            startTime=parseTime(args,++i,'s');
            break nextarg;
          }
 catch (          IllegalArgumentException iae) {
            System.err.println(iae.getMessage());
            return;
          }
case 'e':
        try {
          endTime=parseTime(args,++i,'e');
          break nextarg;
        }
 catch (        IllegalArgumentException iae) {
          System.err.println(iae.getMessage());
          return;
        }
case 'd':
{
        ++i;
        if (i > args.length) {
          System.err.println(""String_Node_Str"" + '-' + 'd');
          return;
        }
        customDataCharts.add(args[i]);
        break nextarg;
      }
case 'a':
{
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + 'a');
        return;
      }
      customSummaryCharts.add(args[i]);
      break nextarg;
    }
case 'i':
{
    ++i;
    if (i > args.length) {
      System.err.println(""String_Node_Str"" + '-' + 's');
      return;
    }
    intervalsFile=args[i];
    break nextarg;
  }
case '-':
{
  if (j == 1) {
    String param=arg.substring(2);
    if (""String_Node_Str"".equals(param)) {
      dataSetCharts=false;
    }
 else     if (""String_Node_Str"".equals(param)) {
      summaryCharts=false;
    }
 else     if (""String_Node_Str"".equals(param)) {
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + '-'+ ""String_Node_Str"");
        return;
      }
      multiplexedFieldCharts.add(args[i]);
    }
 else     if (""String_Node_Str"".equals(param)) {
      ++i;
      if (i > args.length) {
        System.err.println(""String_Node_Str"" + '-' + '-'+ ""String_Node_Str"");
        return;
      }
      multiplexedTypeCharts.add(args[i]);
    }
 else     if (""String_Node_Str"".equals(param)) {
      writeRawData=true;
    }
 else     if (""String_Node_Str"".equals(param)) {
      writeChartData=true;
    }
 else {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + '-' + '-'+ param);
    }
    break nextarg;
  }
 else {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + arg);
    break;
  }
}
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + '-' + c);
}
}
}
 else {
paths.add(arg);
}
}
if (!summaryCharts && !dataSetCharts && customDataCharts.isEmpty()&& customSummaryCharts.isEmpty()) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
return;
}
if (paths.isEmpty()) {
System.err.println(""String_Node_Str"");
return;
}
List<String> filesToParse=new java.util.ArrayList<String>();
for (String path : paths) {
File pathToParse=new File(path);
FileHelper.recurseDirectories(java.util.Collections.singletonList(pathToParse),CombinedFileFilter.getInstance(false),filesToParse);
if (filesToParse.isEmpty()) {
System.err.println('\'' + pathToParse.toString() + ""String_Node_Str"");
return;
}
}
ReportGenerator generator=new ReportGenerator(customSummaryCharts,customDataCharts,multiplexedFieldCharts,multiplexedTypeCharts);
File outputDirectory=null;
if (paths.size() == 1) {
outputDirectory=new File(paths.get(0));
}
 else {
outputDirectory=new File(System.getProperty(""String_Node_Str""));
}
generator.outputDirectory=outputDirectory.isDirectory() ? outputDirectory : outputDirectory.getParentFile();
generator.writeChartData=writeChartData;
generator.parse(filesToParse);
if (!""String_Node_Str"".equals(intervalsFile)) {
try {
generator.getIntervalManager().loadFromFile(new File(intervalsFile),0);
}
 catch (IOException ioe) {
System.err.println(""String_Node_Str"" + intervalsFile + ""String_Node_Str"");
ioe.printStackTrace();
}
}
generator.createIntervalIfNecessary(startTime,endTime);
if (generator.getIntervalManager().getIntervalCount() != 0) {
for (Interval interval : generator.getIntervalManager().getIntervals()) {
generator.createReport(interval,summaryCharts,dataSetCharts);
}
}
 else {
generator.createReport(Interval.DEFAULT,summaryCharts,dataSetCharts);
}
System.out.println(""String_Node_Str"");
if (writeRawData) {
System.out.println();
if (generator.getIntervalManager().getIntervalCount() != 0) {
for (Interval interval : generator.getIntervalManager().getIntervals()) {
generator.writeRawData(interval);
}
}
 else {
generator.writeRawData(Interval.DEFAULT);
}
}
System.out.println(""String_Node_Str"");
}"
26448,"public final int getRecordCount(Interval interval){
  return data.subMap(interval.getStart(),true,interval.getEnd(),true).size();
}","public final int getRecordCount(Interval interval){
  if (Interval.DEFAULT.equals(interval)) {
    return data.size();
  }
 else {
    return data.subMap(interval.getStart(),true,interval.getEnd(),true).size();
  }
}"
26449,"public static void write(DataTupleCategoryDataset data,Writer writer) throws IOException {
  writer.write(',');
  int columnCount=data.getColumnCount();
  for (int i=0; i < columnCount - 1; i++) {
    writer.write(data.getColumnKey(i).toString());
    writer.write(',');
  }
  writer.write(data.getColumnKey(columnCount - 1).toString());
  writer.write('\n');
  for (int i=0; i < data.getRowCount(); i++) {
    @SuppressWarnings(""String_Node_Str"") Comparable rowKey=data.getRowKey(i);
    writer.write(rowKey.toString());
    writer.write(',');
    for (int j=0; j < columnCount - 1; j++) {
      Object o=data.getValue(rowKey,data.getColumnKey(j));
      if (o == null) {
        writer.write(format(Double.NaN));
      }
 else {
        writer.write(format(((Double)o).doubleValue()));
      }
      writer.write(',');
    }
    Object o=data.getValue(rowKey,data.getColumnKey(columnCount - 1));
    if (o == null) {
      writer.write(format(Double.NaN));
    }
 else {
      writer.write(format(((Double)o).doubleValue()));
    }
    writer.write('\n');
  }
}","public static void write(DataTupleCategoryDataset data,Writer writer) throws IOException {
  writer.write(',');
  int columnCount=data.getColumnCount();
  for (int i=0; i < columnCount - 1; i++) {
    writer.write(data.getColumnKey(i).toString());
    writer.write(',');
  }
  writer.write(data.getColumnKey(columnCount - 1).toString());
  writer.write('\n');
  for (int i=0; i < data.getRowCount(); i++) {
    @SuppressWarnings(""String_Node_Str"") Comparable rowKey=data.getRowKey(i);
    writer.write(rowKey.toString());
    writer.write(',');
    for (int j=0; j < columnCount - 1; j++) {
      Object o=data.getValue(rowKey,data.getColumnKey(j));
      if (o == null) {
        writer.write(FORMAT.format(Double.NaN));
      }
 else {
        writer.write(FORMAT.format(((Double)o).doubleValue()));
      }
      writer.write(',');
    }
    Object o=data.getValue(rowKey,data.getColumnKey(columnCount - 1));
    if (o == null) {
      writer.write(FORMAT.format(Double.NaN));
    }
 else {
      writer.write(FORMAT.format(((Double)o).doubleValue()));
    }
    writer.write('\n');
  }
}"
26450,"/** 
 * <p> Get the a custom report for the given key and data. Rather than creating a single chart with a line/bar for each field, this function creates a chart for <em>each</em> field that matches the given definition. </p> <p> This function uses all charts in the given report so it is possible for this function to create a large number of charts, especially if multiple DataTypes and/or fields are matched. </p>
 * @param filterByData should the initial reports list be filtered by the given data? See {@link #getReport(String,Iterable)}.
 */
public List<BaseChartDefinition> multiplexChartsAcrossFields(String key,DataSet data,boolean filterByData){
  List<BaseChartDefinition> chartDefinitions=null;
  if (filterByData) {
    chartDefinitions=getReport(key,java.util.Collections.singletonList(data));
  }
 else {
    chartDefinitions=getReport(key);
  }
  LOGGER.debug(""String_Node_Str"",chartDefinitions,data.getHostname());
  List<BaseChartDefinition> multiplexedChartDefinitions=new java.util.ArrayList<BaseChartDefinition>(10 * chartDefinitions.size());
  for (  BaseChartDefinition chartDefinition : chartDefinitions) {
    for (    DataDefinition dataDefinition : chartDefinition.getData()) {
      if (dataDefinition.matchesHost(data)) {
        for (        DataType type : dataDefinition.getMatchingTypes(data)) {
          for (          String field : dataDefinition.getMatchingFields(type)) {
            BaseChartDefinition newChartDefinition=copyChart(chartDefinition);
            newChartDefinition.setShortName(chartDefinition.getShortName() + ""String_Node_Str"" + dataDefinition.renameField(field));
            newChartDefinition.setTitle(chartDefinition.getTitle());
            newChartDefinition.setSubtitleNamingMode(NamingMode.FIELD);
            DataDefinition newData=null;
            if (dataDefinition instanceof DefaultDataDefinition) {
              DefaultDataDefinition old=(DefaultDataDefinition)dataDefinition;
              newData=old.withNewFields(new ExactFieldMatcher(field));
            }
 else {
              newData=new ExactDataDefinition(data,type,java.util.Collections.singletonList(field),dataDefinition.getStatistic(),dataDefinition.usesSecondaryYAxis());
            }
            newChartDefinition.addData(newData);
            multiplexedChartDefinitions.add(newChartDefinition);
          }
        }
      }
    }
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{chartDefinitions,data.getHostname(),multiplexedChartDefinitions});
  }
  return multiplexedChartDefinitions;
}","/** 
 * <p> Get the a custom report for the given key and data. Rather than creating a single chart with a line/bar for each field, this function creates a chart for <em>each</em> field that matches the given definition. </p> <p> This function uses all charts in the given report so it is possible for this function to create a large number of charts, especially if multiple DataTypes and/or fields are matched. </p>
 * @param filterByData should the initial reports list be filtered by the given data? See{@link #getReport(String,Iterable)}.
 */
public List<BaseChartDefinition> multiplexChartsAcrossFields(String key,DataSet data,boolean filterByData){
  List<BaseChartDefinition> chartDefinitions=null;
  if (filterByData) {
    chartDefinitions=getReport(key,java.util.Collections.singletonList(data));
  }
 else {
    chartDefinitions=getReport(key);
  }
  LOGGER.debug(""String_Node_Str"",chartDefinitions,data.getHostname());
  Map<String,BaseChartDefinition> multiplexedChartDefinitions=new java.util.HashMap<String,BaseChartDefinition>(chartDefinitions.size() * 10);
  for (  BaseChartDefinition chartDefinition : chartDefinitions) {
    for (    DataDefinition dataDefinition : chartDefinition.getData()) {
      if (dataDefinition.matchesHost(data)) {
        for (        DataType type : dataDefinition.getMatchingTypes(data)) {
          for (          String field : dataDefinition.getMatchingFields(type)) {
            String name=chartDefinition.getShortName() + ""String_Node_Str"" + dataDefinition.renameField(field);
            BaseChartDefinition newChartDefinition=multiplexedChartDefinitions.get(name);
            if (newChartDefinition == null) {
              newChartDefinition=copyChart(chartDefinition);
              newChartDefinition.setShortName(name);
              newChartDefinition.setTitle(chartDefinition.getTitle());
              newChartDefinition.setSubtitleNamingMode(NamingMode.FIELD);
              multiplexedChartDefinitions.put(name,newChartDefinition);
            }
            DataDefinition newData=null;
            if (dataDefinition instanceof DefaultDataDefinition) {
              DefaultDataDefinition old=(DefaultDataDefinition)dataDefinition;
              newData=old.withNewFields(new ExactFieldMatcher(field));
            }
 else {
              newData=new ExactDataDefinition(data,type,java.util.Collections.singletonList(field),dataDefinition.getStatistic(),dataDefinition.usesSecondaryYAxis());
            }
            newChartDefinition.addData(newData);
          }
        }
      }
    }
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{chartDefinitions,data.getHostname(),multiplexedChartDefinitions});
  }
  return new java.util.ArrayList<BaseChartDefinition>(multiplexedChartDefinitions.values());
}"
26451,"/** 
 * Parse the given chart definition XML file and store the report with the given key.
 * @param file a valid XML file for processing by  {@link ChartDefinitionParser}
 */
public void addReport(String key,String file) throws IOException {
  if (DEFAULT_SUMMARY_CHARTS_KEY.equals(key) || DEFAULT_INTERVAL_CHARTS_KEY.equals(key) || DEFAULT_DATASET_CHARTS_KEY.equals(key)) {
    throw new IllegalArgumentException(""String_Node_Str"" + key);
  }
  reports.put(key,parser.parseCharts(file));
  LOGGER.debug(""String_Node_Str"",file,key);
}","/** 
 * Parse the given chart definition XML file and store the report with the given key.
 * @param file a valid XML file for processing by {@link ChartDefinitionParser}
 */
public void addReport(String key,String file) throws IOException {
  if (DEFAULT_SUMMARY_CHARTS_KEY.equals(key) || DEFAULT_INTERVAL_CHARTS_KEY.equals(key) || DEFAULT_DATASET_CHARTS_KEY.equals(key)) {
    throw new IllegalArgumentException(""String_Node_Str"" + key);
  }
  reports.put(key,parser.parseCharts(file));
  LOGGER.debug(""String_Node_Str"",file,key);
}"
26452,"/** 
 * <p> Get the a custom report for the given key and data. Rather than creating a single chart with a line/bar for each type, this function creates a chart for <em>each</em> type that matches the given definition. </p> <p> This function uses all charts in the given report so it is possible for this function to create a large number of charts, especially if multiple DataTypes and/or fields are matched. </p>
 * @param filterByData should the initial reports list be filtered by the given data? See {@link #getReport(String,Iterable)}.
 */
public List<BaseChartDefinition> multiplexChartsAcrossTypes(String key,DataSet data,boolean filterByData){
  List<BaseChartDefinition> chartDefinitions=null;
  if (filterByData) {
    chartDefinitions=getReport(key,java.util.Collections.singletonList(data));
  }
 else {
    chartDefinitions=getReport(key);
  }
  LOGGER.debug(""String_Node_Str"",chartDefinitions,data.getHostname());
  List<BaseChartDefinition> multiplexedChartDefinitions=new java.util.ArrayList<BaseChartDefinition>(10 * chartDefinitions.size());
  for (  BaseChartDefinition chartDefinition : chartDefinitions) {
    for (    DataDefinition dataDefinition : chartDefinition.getData()) {
      if (dataDefinition.matchesHost(data)) {
        for (        DataType type : dataDefinition.getMatchingTypes(data)) {
          BaseChartDefinition newChartDefinition=copyChart(chartDefinition);
          newChartDefinition.setShortName(chartDefinition.getShortName() + ""String_Node_Str"" + dataDefinition.renameType(type));
          newChartDefinition.setTitle(chartDefinition.getTitle());
          newChartDefinition.setSubtitleNamingMode(NamingMode.TYPE);
          DataDefinition newData=null;
          if (dataDefinition instanceof DefaultDataDefinition) {
            DefaultDataDefinition old=(DefaultDataDefinition)dataDefinition;
            newData=old.withNewTypes(new ExactTypeMatcher(type.toString()));
          }
 else {
            newData=new ExactDataDefinition(data,type,dataDefinition.getMatchingFields(type),dataDefinition.getStatistic(),dataDefinition.usesSecondaryYAxis());
          }
          newChartDefinition.addData(newData);
          multiplexedChartDefinitions.add(newChartDefinition);
        }
      }
    }
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{chartDefinitions,data.getHostname(),multiplexedChartDefinitions});
  }
  return multiplexedChartDefinitions;
}","/** 
 * <p> Get the a custom report for the given key and data. Rather than creating a single chart with a line/bar for each type, this function creates a chart for <em>each</em> type that matches the given definition. </p> <p> This function uses all charts in the given report so it is possible for this function to create a large number of charts, especially if multiple DataTypes and/or fields are matched. </p>
 * @param filterByData should the initial reports list be filtered by the given data? See{@link #getReport(String,Iterable)}.
 */
public List<BaseChartDefinition> multiplexChartsAcrossTypes(String key,DataSet data,boolean filterByData){
  List<BaseChartDefinition> chartDefinitions=null;
  if (filterByData) {
    chartDefinitions=getReport(key,java.util.Collections.singletonList(data));
  }
 else {
    chartDefinitions=getReport(key);
  }
  LOGGER.debug(""String_Node_Str"",chartDefinitions,data.getHostname());
  List<BaseChartDefinition> multiplexedChartDefinitions=new java.util.ArrayList<BaseChartDefinition>(10 * chartDefinitions.size());
  for (  BaseChartDefinition chartDefinition : chartDefinitions) {
    for (    DataDefinition dataDefinition : chartDefinition.getData()) {
      if (dataDefinition.matchesHost(data)) {
        for (        DataType type : dataDefinition.getMatchingTypes(data)) {
          BaseChartDefinition newChartDefinition=copyChart(chartDefinition);
          newChartDefinition.setShortName(chartDefinition.getShortName() + ""String_Node_Str"" + dataDefinition.renameType(type));
          newChartDefinition.setTitle(chartDefinition.getTitle());
          newChartDefinition.setSubtitleNamingMode(NamingMode.TYPE);
          DataDefinition newData=null;
          if (dataDefinition instanceof DefaultDataDefinition) {
            DefaultDataDefinition old=(DefaultDataDefinition)dataDefinition;
            newData=old.withNewTypes(new ExactTypeMatcher(type.toString()));
          }
 else {
            newData=new ExactDataDefinition(data,type,dataDefinition.getMatchingFields(type),dataDefinition.getStatistic(),dataDefinition.usesSecondaryYAxis());
          }
          newChartDefinition.addData(newData);
          multiplexedChartDefinitions.add(newChartDefinition);
        }
      }
    }
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{chartDefinitions,data.getHostname(),multiplexedChartDefinitions});
  }
  return multiplexedChartDefinitions;
}"
26453,"private void setAxisTimeZone(TimeZone timeZone){
  if (getChart() != null) {
    XYPlot plot=getChart().getXYPlot();
    if (plot.getDomainAxis() instanceof DateAxis) {
      ((DateAxis)plot.getDomainAxis()).setTimeZone(timeZone);
    }
  }
}","private void setAxisTimeZone(TimeZone timeZone){
  if (getChart() != null) {
    XYPlot plot=getChart().getXYPlot();
    if (plot.getDomainAxis() instanceof DateAxis) {
      ((DateAxis)plot.getDomainAxis()).setTimeZone(timeZone);
      if (plot.getRenderer().getBaseToolTipGenerator().getClass() == TimeAndValueTooltipGenerator.class) {
        ((TimeAndValueTooltipGenerator)plot.getRenderer().getBaseToolTipGenerator()).setTimeZone(timeZone);
      }
    }
  }
}"
26454,"protected void formatChart(){
  super.formatChart();
  chart.setTitle(definition.getTitle());
  XYPlot plot=chart.getXYPlot();
  plot.getDomainAxis().setLabel(definition.getXAxisLabel());
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (definition.usePercentYAxis()) {
    LineChartBuilder.setPercentYAxis(chart);
  }
  if (definition.isStacked()) {
    StackedXYAreaRenderer2 renderer=(StackedXYAreaRenderer2)plot.getRenderer();
    renderer.setLegendArea(new java.awt.Rectangle(10,10));
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
 else {
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(0);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(0);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  if (definition.hasSecondaryYAxis()) {
    plot.getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(1);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(1);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  for (int i=0; i < plot.getRangeAxisCount(); i++) {
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}","protected void formatChart(){
  super.formatChart();
  chart.setTitle(definition.getTitle());
  XYPlot plot=chart.getXYPlot();
  plot.getDomainAxis().setLabel(definition.getXAxisLabel());
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (definition.usePercentYAxis()) {
    LineChartBuilder.setPercentYAxis(chart);
  }
  TimeAndValueTooltipGenerator tooltipGenerator=new TimeAndValueTooltipGenerator();
  if (definition.isStacked()) {
    StackedXYAreaRenderer2 renderer=(StackedXYAreaRenderer2)plot.getRenderer();
    renderer.setLegendArea(new java.awt.Rectangle(10,10));
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
 else {
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(0);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(0);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  if (definition.hasSecondaryYAxis()) {
    plot.getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(1);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(1);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  for (int i=0; i < plot.getRangeAxisCount(); i++) {
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}"
26455,"@Override public void configureChart(JFreeChart chart){
  if (app.getBooleanProperty(""String_Node_Str"")) {
    LineChartBuilder.setRelativeAxis(chart,app.getMinSystemTime());
  }
 else {
    LineChartBuilder.setAbsoluteAxis(chart);
  }
  DateAxis axis=(DateAxis)chart.getXYPlot().getDomainAxis();
  Interval current=app.getIntervalManager().getCurrentInterval();
  axis.setTimeZone(app.getDisplayTimeZone());
  if (Interval.DEFAULT.equals(current)) {
    if (app.getMinSystemTime() == 0) {
      long now=System.currentTimeMillis();
      axis.setRange(now - (86400000 / 2),now + ((86400000 - 1000) / 2));
    }
 else {
      long min=app.getMinSystemTime();
      long max=app.getMaxSystemTime();
      if (min == max) {
        min-=1000;
      }
      axis.setRange(min,max);
    }
  }
 else {
    axis.setRange(current.getStart(),current.getEnd());
  }
}","@Override public void configureChart(JFreeChart chart){
  if (app.getBooleanProperty(""String_Node_Str"")) {
    LineChartBuilder.setRelativeAxis(chart,app.getMinSystemTime());
  }
 else {
    LineChartBuilder.setAbsoluteAxis(chart);
  }
  DateAxis axis=(DateAxis)chart.getXYPlot().getDomainAxis();
  Interval current=app.getIntervalManager().getCurrentInterval();
  axis.setTimeZone(app.getDisplayTimeZone());
  if (chart.getXYPlot().getRenderer().getBaseToolTipGenerator().getClass() == TimeAndValueTooltipGenerator.class) {
    ((TimeAndValueTooltipGenerator)chart.getXYPlot().getRenderer().getBaseToolTipGenerator()).setTimeZone(app.getDisplayTimeZone());
  }
  if (Interval.DEFAULT.equals(current)) {
    if (app.getMinSystemTime() == 0) {
      long now=System.currentTimeMillis();
      axis.setRange(now - (86400000 / 2),now + ((86400000 - 1000) / 2));
    }
 else {
      long min=app.getMinSystemTime();
      long max=app.getMaxSystemTime();
      if (min == max) {
        min-=1000;
      }
      axis.setRange(min,max);
    }
  }
 else {
    axis.setRange(current.getStart(),current.getEnd());
  }
}"
26456,"private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"") && (values.length > 2)) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
        }
 else         if ((""String_Node_Str"".equals(values[1])) && (values.length > 3)) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          if (values.length == 4) {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[3]));
          }
 else {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
          }
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}","private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"") && (values.length > 2)) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          if (values.length > 3) {
            data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2]));
            data.setMetadata(""String_Node_Str"",DataHelper.newString(values[3]));
          }
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          if (values.length == 4) {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[3]));
          }
 else {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
          }
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}"
26457,"private void parseLine(String line){
  if (line.startsWith(""String_Node_Str"")) {
    if (currentRecord != null) {
      completeCurrentRecord();
    }
    currentRecord=parseTimestamp(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    String[] values=DATA_SPLITTER.split(line);
    if (currentRecord == null) {
      if (IGNORED_TYPES.contains(values[0])) {
        return;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + in.getLineNumber());
      }
    }
    if (values.length < 2) {
      LOGGER.warn(""String_Node_Str"",line,in.getLineNumber());
      return;
    }
    String timestamp=null;
    boolean isTop=""String_Node_Str"".equals(values[0]);
    boolean isUarg=""String_Node_Str"".equals(values[0]);
    if (isTop) {
      timestamp=values[2];
    }
 else {
      timestamp=values[1];
    }
    if (timestamp.startsWith(""String_Node_Str"")) {
      DataType type=data.getType(values[0]);
      if (timestamp.equals(currentRecord.getTimestamp())) {
        if (isUarg) {
          parseUARG(values);
        }
 else         if (isTop) {
          parseTopData(values);
        }
 else {
          if (type == null) {
            LOGGER.warn(""String_Node_Str"",values[0],in.getLineNumber());
          }
 else {
            parseData(type,values);
          }
        }
      }
 else {
        LOGGER.warn(""String_Node_Str"",new Object[]{in.getLineNumber(),currentRecord.getTimestamp(),timestamp});
      }
    }
 else {
      if (!isTop && !isUarg) {
        if (""String_Node_Str"".equals(values[0])) {
          parseBBBP(values);
        }
 else         if (values[0].startsWith(""String_Node_Str"")) {
          parseSystemInfo(values);
        }
 else         if (data.getType(values[0]) == null) {
          DataType type=buildDataType(values);
          if (type != null) {
            if (type.getId().equals(""String_Node_Str"")) {
              completeCurrentRecord();
            }
            if (!IGNORED_TYPES.contains(type.getId())) {
              data.addType(type);
            }
          }
        }
      }
    }
  }
}","private void parseLine(String line){
  if (line.startsWith(""String_Node_Str"")) {
    if (currentRecord != null) {
      completeCurrentRecord();
    }
    currentRecord=parseTimestamp(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    String[] values=DATA_SPLITTER.split(line);
    if (currentRecord == null) {
      if (IGNORED_TYPES.contains(values[0])) {
        return;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + in.getLineNumber());
      }
    }
    if (values.length < 2) {
      LOGGER.warn(""String_Node_Str"",line,in.getLineNumber());
      return;
    }
    String timestamp=null;
    boolean isTop=""String_Node_Str"".equals(values[0]);
    boolean isUarg=""String_Node_Str"".equals(values[0]);
    if (isTop) {
      timestamp=values[2];
    }
 else {
      timestamp=values[1];
    }
    if (timestamp.startsWith(""String_Node_Str"")) {
      DataType type=data.getType(values[0]);
      if (timestamp.equals(currentRecord.getTimestamp())) {
        if (isUarg) {
          parseUARG(values);
        }
 else         if (isTop) {
          parseTopData(values);
        }
 else {
          if (type == null) {
            if (""String_Node_Str"".equals(values[0])) {
              type=buildDataType(values);
            }
 else {
              LOGGER.warn(""String_Node_Str"",values[0],in.getLineNumber());
            }
          }
 else {
            parseData(type,values);
          }
        }
      }
 else {
        LOGGER.warn(""String_Node_Str"",new Object[]{in.getLineNumber(),currentRecord.getTimestamp(),timestamp});
      }
    }
 else {
      if (!isTop && !isUarg) {
        if (""String_Node_Str"".equals(values[0])) {
          parseBBBP(values);
        }
 else         if (values[0].startsWith(""String_Node_Str"")) {
          parseSystemInfo(values);
        }
 else         if (data.getType(values[0]) == null) {
          DataType type=buildDataType(values);
          if (type != null) {
            if (type.getId().equals(""String_Node_Str"")) {
              completeCurrentRecord();
            }
            if (!IGNORED_TYPES.contains(type.getId())) {
              data.addType(type);
            }
          }
        }
      }
    }
  }
}"
26458,"private AnalysisHolder analyzeIfNecessary(DataType type,String fieldName){
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if ((fieldName == null) || ""String_Node_Str"".equals(fieldName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String key=type.getKey(fieldName);
  SoftReference<AnalysisHolder> holderRef=values.get(key);
  AnalysisHolder holder=null;
  if (holderRef != null) {
    holder=holderRef.get();
    if (holder != null) {
      return holder;
    }
  }
  holder=new AnalysisHolder();
  values.put(key,new SoftReference<AnalysisHolder>(holder));
  long startT=System.nanoTime();
  DataType typeToAnalyze=data.getType(type.getId());
  if ((typeToAnalyze != null) && typeToAnalyze.hasField(fieldName)) {
    List<Double> allValues=new java.util.ArrayList<Double>(data.getRecordCount());
    long lastGranularityTime=Math.max(interval.getStart(),data.getStartTime());
    int countSinceLastGranularity=0;
    double granularityTotal=0;
    for (    DataRecord dataRecord : data.getRecords(interval)) {
      if (dataRecord.hasData(typeToAnalyze)) {
        double value=dataRecord.getData(typeToAnalyze,fieldName);
        if (Double.isNaN(value)) {
          continue;
        }
        holder.sum+=value;
        if (value > holder.maximum) {
          holder.maximum=value;
        }
        if (value < holder.minimum) {
          holder.minimum=value;
        }
        allValues.add(value);
        ++countSinceLastGranularity;
        granularityTotal+=value;
        if ((dataRecord.getTime() - lastGranularityTime) >= granularity) {
          double peakAverage=granularityTotal / countSinceLastGranularity;
          if (peakAverage > holder.granularityMaximum) {
            holder.granularityMaximum=peakAverage;
          }
          countSinceLastGranularity=0;
          granularityTotal=0;
          lastGranularityTime=dataRecord.getTime();
        }
      }
    }
    if (allValues.size() > 0) {
      holder.count=allValues.size();
      holder.average=holder.sum / holder.count;
      java.util.Collections.sort(allValues);
      holder.median=calculatePercentile(.5,allValues);
      holder.percentile95=calculatePercentile(.95,allValues);
      holder.percentile99=calculatePercentile(.99,allValues);
      double sumSqDiffs=0;
      for (      double value : allValues) {
        sumSqDiffs+=Math.pow(value - holder.average,2);
      }
      holder.standardDeviation=Math.sqrt(sumSqDiffs / holder.count);
    }
 else {
      holder.maximum=Double.NaN;
      holder.minimum=Double.NaN;
      holder.granularityMaximum=Double.NaN;
    }
  }
 else {
    holder.maximum=Double.NaN;
    holder.minimum=Double.NaN;
    holder.granularityMaximum=Double.NaN;
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{data,type,fieldName,TimeFormatCache.formatInterval(interval),(System.nanoTime() - startT) / 1000000.0d});
  }
  return holder;
}","private AnalysisHolder analyzeIfNecessary(DataType type,String fieldName){
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if ((fieldName == null) || ""String_Node_Str"".equals(fieldName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String key=type.getKey(fieldName);
  SoftReference<AnalysisHolder> holderRef=values.get(key);
  AnalysisHolder holder=null;
  if (holderRef != null) {
    holder=holderRef.get();
    if (holder != null) {
      return holder;
    }
  }
  holder=new AnalysisHolder();
  values.put(key,new SoftReference<AnalysisHolder>(holder));
  long startT=System.nanoTime();
  DataType typeToAnalyze=data.getType(type.getId());
  if ((typeToAnalyze != null) && typeToAnalyze.hasField(fieldName)) {
    List<Double> allValues=new java.util.ArrayList<Double>(data.getRecordCount());
    long lastGranularityTime=Math.max(interval.getStart(),data.getStartTime());
    int countSinceLastGranularity=0;
    double granularityTotal=0;
    boolean isProcess=type.getClass() == com.ibm.nmon.data.ProcessDataType.class;
    for (    DataRecord dataRecord : data.getRecords(interval)) {
      double value=Double.NaN;
      if (isProcess) {
        if (dataRecord.hasData(typeToAnalyze)) {
          value=dataRecord.getData(typeToAnalyze,fieldName);
        }
        if (Double.isNaN(value)) {
          value=0;
        }
      }
 else {
        if (dataRecord.hasData(typeToAnalyze)) {
          value=dataRecord.getData(typeToAnalyze,fieldName);
        }
        if (Double.isNaN(value)) {
          continue;
        }
      }
      holder.sum+=value;
      if (value > holder.maximum) {
        holder.maximum=value;
      }
      if (value < holder.minimum) {
        holder.minimum=value;
      }
      allValues.add(value);
      ++countSinceLastGranularity;
      granularityTotal+=value;
      if ((dataRecord.getTime() - lastGranularityTime) >= granularity) {
        double peakAverage=granularityTotal / countSinceLastGranularity;
        if (peakAverage > holder.granularityMaximum) {
          holder.granularityMaximum=peakAverage;
        }
        countSinceLastGranularity=0;
        granularityTotal=0;
        lastGranularityTime=dataRecord.getTime();
      }
    }
    if (allValues.size() > 0) {
      holder.count=allValues.size();
      holder.average=holder.sum / holder.count;
      java.util.Collections.sort(allValues);
      holder.median=calculatePercentile(.5,allValues);
      holder.percentile95=calculatePercentile(.95,allValues);
      holder.percentile99=calculatePercentile(.99,allValues);
      double sumSqDiffs=0;
      for (      double value : allValues) {
        sumSqDiffs+=Math.pow(value - holder.average,2);
      }
      holder.standardDeviation=Math.sqrt(sumSqDiffs / holder.count);
    }
 else {
      holder.maximum=Double.NaN;
      holder.minimum=Double.NaN;
      holder.granularityMaximum=Double.NaN;
    }
  }
 else {
    holder.maximum=Double.NaN;
    holder.minimum=Double.NaN;
    holder.granularityMaximum=Double.NaN;
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",new Object[]{data,type,fieldName,TimeFormatCache.formatInterval(interval),(System.nanoTime() - startT) / 1000000.0d});
  }
  return holder;
}"
26459,"public final Iterable<DataRecord> getRecords(Interval interval){
  return java.util.Collections.unmodifiableCollection(data.subMap(interval.getStart(),true,interval.getEnd(),true).values());
}","public final Iterable<DataRecord> getRecords(Interval interval){
  if (Interval.DEFAULT.equals(interval)) {
    return java.util.Collections.unmodifiableCollection(data.values());
  }
 else {
    return java.util.Collections.unmodifiableCollection(data.subMap(interval.getStart(),true,interval.getEnd(),true).values());
  }
}"
26460,"private void parseLine(String line){
  if (line.startsWith(""String_Node_Str"")) {
    if (currentRecord != null) {
      completeCurrentRecord();
    }
    currentRecord=parseTimestamp(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    String[] values=DATA_SPLITTER.split(line);
    if (currentRecord == null) {
      if (IGNORED_TYPES.contains(values[0])) {
        return;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + in.getLineNumber());
      }
    }
    if (values.length < 2) {
      LOGGER.warn(""String_Node_Str"",line,in.getLineNumber());
      return;
    }
    String timestamp=null;
    boolean isTop=""String_Node_Str"".equals(values[0]);
    boolean isUarg=""String_Node_Str"".equals(values[0]);
    if (isTop) {
      timestamp=values[2];
    }
 else {
      timestamp=values[1];
    }
    if (timestamp.startsWith(""String_Node_Str"")) {
      DataType type=data.getType(values[0]);
      if (timestamp.equals(currentRecord.getTimestamp())) {
        if (isUarg) {
          parseUARG(values);
        }
 else         if (isTop) {
          parseTopData(values);
        }
 else {
          if (type == null) {
            LOGGER.warn(""String_Node_Str"",values[0],in.getLineNumber());
          }
 else {
            parseData(type,values);
          }
        }
      }
 else {
        LOGGER.warn(""String_Node_Str"",new Object[]{in.getLineNumber(),currentRecord.getTimestamp(),timestamp});
      }
    }
 else {
      if (!isTop && !isUarg) {
        if (""String_Node_Str"".equals(values[0])) {
          parseBBBP(values);
        }
 else         if (values[0].startsWith(""String_Node_Str"")) {
          parseSystemInfo(values);
        }
 else         if (data.getType(values[0]) == null) {
          DataType type=buildDataType(values);
          if (type != null) {
            if (type.getId().equals(""String_Node_Str"")) {
              completeCurrentRecord();
            }
            if (!IGNORED_TYPES.contains(type.getId())) {
              data.addType(type);
            }
          }
        }
      }
    }
  }
}","private void parseLine(String line){
  if (line.startsWith(""String_Node_Str"")) {
    if (currentRecord != null) {
      completeCurrentRecord();
    }
    currentRecord=parseTimestamp(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    String[] values=DATA_SPLITTER.split(line);
    if (currentRecord == null) {
      if (IGNORED_TYPES.contains(values[0])) {
        return;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + in.getLineNumber());
      }
    }
    if (values.length < 2) {
      LOGGER.warn(""String_Node_Str"",line,in.getLineNumber());
      return;
    }
    String timestamp=null;
    boolean isTop=""String_Node_Str"".equals(values[0]);
    boolean isUarg=""String_Node_Str"".equals(values[0]);
    if (isTop) {
      timestamp=values[2];
    }
 else {
      timestamp=values[1];
    }
    if (timestamp.startsWith(""String_Node_Str"")) {
      DataType type=data.getType(values[0]);
      if (timestamp.equals(currentRecord.getTimestamp())) {
        if (isUarg) {
          parseUARG(values);
        }
 else         if (isTop) {
          parseTopData(values);
        }
 else {
          if (type == null) {
            if (""String_Node_Str"".equals(values[0])) {
              String[] newValues=new String[values.length - 1];
              newValues[0]=values[0];
              System.arraycopy(values,2,newValues,1,values.length - 2);
              type=buildDataType(newValues);
              data.addType(type);
            }
 else {
              LOGGER.warn(""String_Node_Str"",values[0],in.getLineNumber());
            }
          }
 else {
            parseData(type,values);
          }
        }
      }
 else {
        LOGGER.warn(""String_Node_Str"",new Object[]{in.getLineNumber(),currentRecord.getTimestamp(),timestamp});
      }
    }
 else {
      if (!isTop && !isUarg) {
        if (""String_Node_Str"".equals(values[0])) {
          parseBBBP(values);
        }
 else         if (values[0].startsWith(""String_Node_Str"")) {
          parseSystemInfo(values);
        }
 else         if (data.getType(values[0]) == null) {
          DataType type=buildDataType(values);
          if (type != null) {
            if (type.getId().equals(""String_Node_Str"")) {
              completeCurrentRecord();
            }
            if (!IGNORED_TYPES.contains(type.getId())) {
              data.addType(type);
            }
          }
        }
      }
    }
  }
}"
26461,"@Override public void postProcess(DataSet data,DataRecord record){
  DataType total=data.getType(""String_Node_Str"" + ""String_Node_Str"");
  if (total == null) {
    return;
  }
  double[] totalData=new double[total.getFieldCount()];
  for (int i=0; i < totalData.length; i++) {
    totalData[i]=0;
  }
  for (  DataType type : data.getTypes()) {
    if (type.getId().contains(""String_Node_Str"") && (type != total)) {
      if (record.hasData(type)) {
        double[] typeData=record.getData(type);
        for (int i=0; i < total.getFieldCount(); i++) {
          totalData[i]+=typeData[i];
        }
      }
    }
  }
  record.addData(total,totalData);
}","@Override public void postProcess(DataSet data,DataRecord record){
  DataType total=data.getType(""String_Node_Str"" + ""String_Node_Str"");
  if (total == null) {
    return;
  }
  int totalFieldCount=total.getFieldCount();
  double[] totalData=new double[totalFieldCount];
  for (int i=0; i < totalData.length; i++) {
    totalData[i]=0;
  }
  for (  DataType type : data.getTypes()) {
    if (type.getId().startsWith(""String_Node_Str"") && (type != total)) {
      if (record.hasData(type)) {
        double[] typeData=record.getData(type);
        for (int i=0; i < totalFieldCount; i++) {
          totalData[i]+=typeData[i];
        }
      }
    }
  }
  record.addData(total,totalData);
}"
26462,"/** 
 * Defines how granular charts will be, i.e. how many seconds will pass between data points. This method causes either a <code>automaticGranularity</code> or <code>granularity</code> property change event to be fired.
 * @param granularity the new granularity, in seconds. A zero or negative value implies that granularity will be automatically calculated based on the current interval.
 */
public void setGranularity(int granularity){
  int oldGranularity=getGranularity();
  if (granularity <= 0) {
    if (getBooleanProperty(""String_Node_Str"")) {
      granularityHelper.recalculate();
    }
 else {
      granularityHelper.setAutomatic(true);
      setProperty(""String_Node_Str"",true);
    }
  }
 else {
    granularityHelper.setGranularity(granularity);
    if (getBooleanProperty(""String_Node_Str"")) {
      setProperty(""String_Node_Str"",false);
    }
  }
  if (getGranularity() != oldGranularity) {
    setProperty(""String_Node_Str"",getGranularity());
  }
}","/** 
 * Defines how granular charts will be, i.e. how many seconds will pass between data points. This method causes either a <code>automaticGranularity</code> or <code>granularity</code> property change event to be fired.
 * @param granularity the new granularity, in seconds. A zero or negative value implies that granularity will be automatically calculated based on the current interval.
 */
public void setGranularity(int granularity){
  int oldGranularity=getGranularity();
  if (granularity <= 0) {
    if (getBooleanProperty(""String_Node_Str"")) {
      granularityHelper.recalculate();
    }
 else {
      granularityHelper.setAutomatic(true);
      setProperty(""String_Node_Str"",true);
    }
  }
 else {
    granularityHelper.setGranularity(granularity);
    if (getBooleanProperty(""String_Node_Str"")) {
      setProperty(""String_Node_Str"",false);
    }
  }
  if (getGranularity() != oldGranularity) {
    for (    DataSet data : getDataSets()) {
      getAnalysis(data).setGranularity(getGranularity());
    }
    setProperty(""String_Node_Str"",getGranularity());
  }
}"
26463,"public SubDataType(String id,String subId,String name,boolean displayPrimaryId,String... fields){
  super(buildId(id,subId),name,fields);
  if ((subId == null) || subId.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  this.subId=subId;
  if (displayPrimaryId) {
    this.asString=buildId(id,subId);
  }
 else {
    this.asString=subId;
  }
}","public SubDataType(String id,String subId,String name,boolean displayPrimaryId,String... fields){
  super(buildId(id,subId),name,fields);
  if ((subId == null) || subId.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  this.subId=subId;
  if (displayPrimaryId) {
    this.asString=this.id;
  }
 else {
    this.asString=this.subId;
  }
}"
26464,"public OSMatcher(String operatingSystem){
  if ((operatingSystem == null) || ""String_Node_Str"".equals(operatingSystem)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  operatingSystem=operatingSystem.toLowerCase();
  if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=LINUX;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=AIX;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=VIOS;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=PERFMON;
  }
 else {
    matcher=UNKNOWN;
  }
}","public OSMatcher(String operatingSystem){
  super(""String_Node_Str"");
  if ((operatingSystem == null) || ""String_Node_Str"".equals(operatingSystem)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  operatingSystem=operatingSystem.toLowerCase();
  if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=LINUX;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=AIX;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=VIOS;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=UNIX;
  }
 else   if (operatingSystem.contains(""String_Node_Str"")) {
    matcher=PERFMON;
  }
 else {
    matcher=UNKNOWN;
  }
}"
26465,"private String getAxisLabel(DataType type,String field){
  String label=FIELD_AXIS_NAMES.get(field);
  if (label != null) {
    return label;
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return getAxisLabel(type);
  }
}","private String getAxisLabel(DataType type,String field){
  String label=FIELD_AXIS_NAMES.get(field);
  if (label != null) {
    return label;
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.toLowerCase().contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.toLowerCase().contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.toLowerCase().contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.toLowerCase().contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (field.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return getAxisLabel(type);
  }
}"
26466,"@Override public void dataAdded(DataSet data){
  singleIntervalReport.addData(data);
  allIntervalsReport.addData(data);
  int index=singleIntervalReport.getPreviousTab();
  if (index != -1) {
    singleIntervalReport.setSelectedIndex(index);
  }
 else {
    singleIntervalReport.setSelectedIndex(0);
  }
  index=allIntervalsReport.getPreviousTab();
  if (index != -1) {
    allIntervalsReport.setSelectedIndex(index);
  }
 else {
    allIntervalsReport.setSelectedIndex(0);
  }
  addBorderIfNecessary();
}","@Override public void dataAdded(DataSet data){
  singleIntervalReport.addData(data);
  allIntervalsReport.addData(data);
  int index=singleIntervalReport.getPreviousTab();
  if (index != -1) {
    if (index >= singleIntervalReport.getTabCount()) {
      index=singleIntervalReport.getTabCount() - 1;
    }
    singleIntervalReport.setSelectedIndex(index);
  }
 else {
    singleIntervalReport.setSelectedIndex(0);
  }
  index=allIntervalsReport.getPreviousTab();
  if (index != -1) {
    if (index >= allIntervalsReport.getTabCount()) {
      index=allIntervalsReport.getTabCount() - 1;
    }
    allIntervalsReport.setSelectedIndex(index);
  }
 else {
    allIntervalsReport.setSelectedIndex(0);
  }
  addBorderIfNecessary();
}"
26467,"public ReportPanel(NMONVisualizerGui gui,JFrame parent,String reportCacheKey,List<DataSet> dataSets,MultiplexMode multiplexMode){
  super();
  this.chartFactory=new ChartFactory(gui);
  this.gui=gui;
  this.parent=parent;
  this.dataSets=dataSets;
  this.reportCacheKey=reportCacheKey;
  this.multiplexMode=multiplexMode;
  List<BaseChartDefinition> reports=gui.getReportCache().getReport(reportCacheKey);
  this.chartsInUse=new java.util.ArrayList<BaseChartDefinition>(reports.size());
  this.chartNeedsUpdate=new BitSet(reports.size());
  this.chartNeedsUpdate.set(0,chartNeedsUpdate.size(),true);
  buildTabs(gui);
  addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!buildingTabs) {
        int idx=getSelectedIndex();
        if (idx != -1) {
          if (!updateChart()) {
            firePropertyChange(""String_Node_Str"",null,getChartPanel(idx));
          }
          if ((previousTab != -1) && (previousTab < getTabCount())) {
            getChartPanel(previousTab).setEnabled(false);
          }
          getChartPanel(idx).setEnabled(true);
          previousTab=idx;
        }
      }
    }
  }
);
  setEnabled(false);
  gui.getIntervalManager().addListener(this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
}","public ReportPanel(NMONVisualizerGui gui,JFrame parent,String reportCacheKey,List<DataSet> dataSets,MultiplexMode multiplexMode){
  super();
  this.chartFactory=new ChartFactory(gui);
  this.chartFactory.setGranularity(gui.getGranularity());
  this.gui=gui;
  this.parent=parent;
  this.dataSets=dataSets;
  this.reportCacheKey=reportCacheKey;
  this.multiplexMode=multiplexMode;
  List<BaseChartDefinition> reports=gui.getReportCache().getReport(reportCacheKey);
  this.chartsInUse=new java.util.ArrayList<BaseChartDefinition>(reports.size());
  this.chartNeedsUpdate=new BitSet(reports.size());
  this.chartNeedsUpdate.set(0,chartNeedsUpdate.size(),true);
  buildTabs(gui);
  addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!buildingTabs) {
        int idx=getSelectedIndex();
        if (idx != -1) {
          if (!updateChart()) {
            firePropertyChange(""String_Node_Str"",null,getChartPanel(idx));
          }
          if ((previousTab != -1) && (previousTab < getTabCount())) {
            getChartPanel(previousTab).setEnabled(false);
          }
          getChartPanel(idx).setEnabled(true);
          previousTab=idx;
        }
      }
    }
  }
);
  setEnabled(false);
  gui.getIntervalManager().addListener(this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
  gui.addPropertyChangeListener(""String_Node_Str"",this);
}"
26468,"@Override public double[] transform(DataType type,double[] data){
  double[] newData=new double[data.length + 4];
  newData[0]=data[0];
  newData[1]=data[1];
  newData[2]=100 - data[0];
  newData[3]=100 - data[1];
  newData[4]=data[2];
  newData[5]=data[3];
  newData[6]=data[4] - data[2];
  newData[7]=data[5] - data[3];
  newData[8]=data[4];
  newData[9]=data[5];
  return newData;
}","@Override public double[] transform(DataType type,double[] data){
  double[] newData=new double[data.length + 4];
  newData[0]=data[0];
  newData[1]=data[1];
  newData[2]=100 - data[0];
  newData[3]=100 - data[1];
  newData[4]=data[2];
  newData[5]=data[3];
  newData[6]=data[4] - data[2];
  newData[7]=data[5] - data[3];
  for (int i=4; i < data.length; i++) {
    newData[i + 4]=data[i];
  }
  return newData;
}"
26469,"@Override public GCState startElement(GCParserContext context,String elementName,String unparsedAttributes){
  if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,type,""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",context.getAttribute(""String_Node_Str""),""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",++compactionCount);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValueDiv1000(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    calculateSizes(context,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  return this;
}","@Override public GCState startElement(GCParserContext context,String elementName,String unparsedAttributes){
  if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,type,""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      calculateSizes(context,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",context.getAttribute(""String_Node_Str""),""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValue(""String_Node_Str"",""String_Node_Str"",++compactionCount);
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    context.setValueDiv1000(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equals(elementName)) {
  }
 else   if (""String_Node_Str"".equals(elementName)) {
    context.parseAttributes(unparsedAttributes);
    String type=context.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(type)) {
      context.setValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  return this;
}"
26470,"private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"") && (values.length > 2)) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[3]));
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}","private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"") && (values.length > 2)) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[3]));
        }
 else         if (""String_Node_Str"".equals(values[1])) {
          if (values.length == 4) {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[3]));
          }
 else {
            data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
          }
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}"
26471,"protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  ValueAxis valueAxis=new NumberAxis();
  BarRenderer renderer=null;
  if (definition.isStacked()) {
    renderer=new StackedBarRenderer();
  }
 else {
    renderer=new BarRenderer();
  }
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(false),categoryAxis,valueAxis,renderer);
  if (definition.hasSecondaryYAxis()) {
    plot.setDataset(1,new DataTupleCategoryDataset(definition.isStacked()));
    valueAxis=new NumberAxis();
    plot.setRenderer(1,new BarRenderer());
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new HighlightableBarChart(""String_Node_Str"",JFreeChart.DEFAULT_TITLE_FONT,plot,false);
}","protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  ValueAxis valueAxis=new NumberAxis();
  BarRenderer renderer=null;
  if (definition.isStacked()) {
    renderer=new StackedBarRenderer();
  }
 else {
    renderer=new BarRenderer();
  }
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(false),categoryAxis,valueAxis,renderer);
  if (definition.hasSecondaryYAxis()) {
    plot.setDataset(1,new DataTupleCategoryDataset(false));
    valueAxis=new NumberAxis();
    plot.setRenderer(1,new BarRenderer());
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new HighlightableBarChart(""String_Node_Str"",JFreeChart.DEFAULT_TITLE_FONT,plot,false);
}"
26472,"@Override protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  LineAndShapeRenderer renderer=new LineAndShapeRenderer();
  renderer.setBaseSeriesVisible(true,false);
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(true),categoryAxis,valueAxis,renderer);
  if (definition.hasSecondaryYAxis()) {
    plot.setDataset(1,new DataTupleCategoryDataset(false));
    valueAxis=new NumberAxis();
    valueAxis.setAutoRangeIncludesZero(true);
    renderer=new LineAndShapeRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRenderer(1,renderer);
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}","@Override protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  LineAndShapeRenderer renderer=new LineAndShapeRenderer();
  renderer.setBaseSeriesVisible(true,false);
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(true),categoryAxis,valueAxis,renderer);
  if (definition.hasSecondaryYAxis()) {
    plot.setDataset(1,new DataTupleCategoryDataset(true));
    valueAxis=new NumberAxis();
    valueAxis.setAutoRangeIncludesZero(true);
    renderer=new LineAndShapeRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRenderer(1,renderer);
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}"
26473,"public final DataTupleCategoryDataset merge(DataTupleCategoryDataset other){
  DataTupleCategoryDataset toReturn=new DataTupleCategoryDataset(this.categoriesHaveDifferentStats | other.categoriesHaveDifferentStats);
  toReturn.tuples.putAll(this.tuples);
  toReturn.tuples.putAll(other.tuples);
  return toReturn;
}","public final DataTupleCategoryDataset merge(DataTupleCategoryDataset other){
  DataTupleCategoryDataset toReturn=new DataTupleCategoryDataset(other.containsIntervals());
  toReturn.categoriesHaveDifferentStats=this.categoriesHaveDifferentStats | other.categoriesHaveDifferentStats;
  toReturn.tuples.putAll(this.tuples);
  toReturn.tuples.putAll(other.tuples);
  return toReturn;
}"
26474,"@Override protected Object getEnabledValueAt(int row,int column){
  DataTuple tuple=null;
  String seriesName=""String_Node_Str"";
  boolean graphDataOnly=false;
  if (dataset instanceof DataTupleCategoryDataset) {
    DataTupleCategoryDataset d=(DataTupleCategoryDataset)dataset;
    int columnCount=d.containsIntervals() ? d.getRowCount() : d.getColumnCount();
    int datasetRow=row / columnCount;
    int datasetColumn=row % columnCount;
    tuple=d.getTuple(datasetRow,datasetColumn);
    if (d.containsIntervals()) {
      seriesName=d.getRowKey(datasetColumn).toString();
    }
 else {
      if (d.categoriesHaveDifferentStats()) {
        seriesName=d.getColumnKey(datasetColumn).toString();
      }
 else {
        seriesName=d.getColumnKey(datasetColumn).toString() + ""String_Node_Str"" + d.getRowKey(datasetRow).toString();
      }
    }
    graphDataOnly=d.containsIntervals();
  }
 else   if (dataset instanceof DataTupleXYDataset) {
    DataTupleXYDataset d=(DataTupleXYDataset)dataset;
    tuple=d.getTuple(row,-1);
    seriesName=d.getSeriesKey(row).toString();
  }
 else   if (dataset instanceof DataTupleHistogramDataset) {
    DataTupleHistogramDataset d=(DataTupleHistogramDataset)dataset;
    tuple=d.getTuple(row,-1);
    seriesName=d.getSeriesKey(row).toString();
  }
  AnalysisRecord analysis=null;
  if (!graphDataOnly) {
    analysis=gui.getAnalysis(tuple.getDataSet());
  }
switch (column) {
case 0:
    return rowVisible[row];
case 1:
  return tuple.getDataSet().getHostname();
case 2:
return tuple.getDataType().toString();
case 3:
return tuple.getField();
case 4:
return seriesName;
case 5:
return graphDataOnly ? dataset.getMinimum(row) : analysis.getMinimum(tuple.getDataType(),tuple.getField());
case 6:
return graphDataOnly ? dataset.getAverage(row) : analysis.getAverage(tuple.getDataType(),tuple.getField());
case 7:
return graphDataOnly ? dataset.getMaximum(row) : analysis.getMaximum(tuple.getDataType(),tuple.getField());
case 8:
return graphDataOnly ? dataset.getStandardDeviation(row) : analysis.getStandardDeviation(tuple.getDataType(),tuple.getField());
case 9:
return graphDataOnly ? dataset.getMedian(row) : analysis.getMedian(tuple.getDataType(),tuple.getField());
case 10:
return graphDataOnly ? dataset.get95thPercentile(row) : analysis.get95thPercentile(tuple.getDataType(),tuple.getField());
case 11:
return graphDataOnly ? dataset.get99thPercentile(row) : analysis.get99thPercentile(tuple.getDataType(),tuple.getField());
case 12:
return graphDataOnly ? dataset.getSum(row) : analysis.getSum(tuple.getDataType(),tuple.getField());
case 13:
return graphDataOnly ? dataset.getCount(row) : analysis.getCount(tuple.getDataType(),tuple.getField());
case 14:
return dataset.getMinimum(row);
case 15:
return dataset.getAverage(row);
case 16:
return dataset.getMaximum(row);
case 17:
return dataset.getStandardDeviation(row);
case 18:
return dataset.getMedian(row);
case 19:
return dataset.get95thPercentile(row);
case 20:
return dataset.get99thPercentile(row);
case 21:
return dataset.getSum(row);
case 22:
return dataset.getCount(row);
default :
throw new ArrayIndexOutOfBoundsException(column);
}
}","@Override protected Object getEnabledValueAt(int row,int column){
  DataTuple tuple=null;
  String seriesName=""String_Node_Str"";
  boolean graphDataOnly=false;
  if (dataset instanceof DataTupleCategoryDataset) {
    DataTupleCategoryDataset d=(DataTupleCategoryDataset)dataset;
    int columnCount=d.containsIntervals() ? d.getRowCount() : d.getColumnCount();
    int datasetRow=row / columnCount;
    int datasetColumn=row % columnCount;
    tuple=d.getTuple(datasetRow,datasetColumn);
    if (d.containsIntervals()) {
      seriesName=d.getRowKey(datasetColumn).toString();
    }
 else {
      if (d.categoriesHaveDifferentStats()) {
        seriesName=d.getColumnKey(datasetColumn).toString();
      }
 else {
        seriesName=d.getColumnKey(datasetColumn).toString() + ""String_Node_Str"" + d.getRowKey(datasetRow).toString();
      }
    }
    graphDataOnly=d.containsIntervals();
  }
 else   if (dataset instanceof DataTupleXYDataset) {
    DataTupleXYDataset d=(DataTupleXYDataset)dataset;
    tuple=d.getTuple(row,-1);
    seriesName=d.getSeriesKey(row).toString();
  }
 else   if (dataset instanceof DataTupleHistogramDataset) {
    DataTupleHistogramDataset d=(DataTupleHistogramDataset)dataset;
    tuple=d.getTuple(row,-1);
    seriesName=d.getSeriesKey(row).toString();
  }
  AnalysisRecord analysis=null;
  if (tuple == null) {
    tuple=NULL_TUPLE;
    analysis=NULL_ANALYSIS;
  }
 else {
    if (!graphDataOnly) {
      analysis=gui.getAnalysis(tuple.getDataSet());
    }
  }
switch (column) {
case 0:
    return rowVisible[row];
case 1:
  return tuple.getDataSet().getHostname();
case 2:
return tuple.getDataType().toString();
case 3:
return tuple.getField();
case 4:
return seriesName;
case 5:
return graphDataOnly ? dataset.getMinimum(row) : analysis.getMinimum(tuple.getDataType(),tuple.getField());
case 6:
return graphDataOnly ? dataset.getAverage(row) : analysis.getAverage(tuple.getDataType(),tuple.getField());
case 7:
return graphDataOnly ? dataset.getMaximum(row) : analysis.getMaximum(tuple.getDataType(),tuple.getField());
case 8:
return graphDataOnly ? dataset.getStandardDeviation(row) : analysis.getStandardDeviation(tuple.getDataType(),tuple.getField());
case 9:
return graphDataOnly ? dataset.getMedian(row) : analysis.getMedian(tuple.getDataType(),tuple.getField());
case 10:
return graphDataOnly ? dataset.get95thPercentile(row) : analysis.get95thPercentile(tuple.getDataType(),tuple.getField());
case 11:
return graphDataOnly ? dataset.get99thPercentile(row) : analysis.get99thPercentile(tuple.getDataType(),tuple.getField());
case 12:
return graphDataOnly ? dataset.getSum(row) : analysis.getSum(tuple.getDataType(),tuple.getField());
case 13:
return graphDataOnly ? dataset.getCount(row) : analysis.getCount(tuple.getDataType(),tuple.getField());
case 14:
return dataset.getMinimum(row);
case 15:
return dataset.getAverage(row);
case 16:
return dataset.getMaximum(row);
case 17:
return dataset.getStandardDeviation(row);
case 18:
return dataset.getMedian(row);
case 19:
return dataset.get95thPercentile(row);
case 20:
return dataset.get99thPercentile(row);
case 21:
return dataset.getSum(row);
case 22:
return dataset.getCount(row);
default :
throw new ArrayIndexOutOfBoundsException(column);
}
}"
26475,"private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"")) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}","private String parseHeaders() throws IOException {
  String line=null;
  while ((line=in.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (!values[1].startsWith(""String_Node_Str"") && (values.length > 2)) {
        if (""String_Node_Str"".equals(values[1])) {
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[2] + ' ' + values[3]));
          data.setMetadata(""String_Node_Str"",DataHelper.newString(values[5]));
        }
 else {
          data.setMetadata(DataHelper.newString(values[1]),DataHelper.newString(values[2]));
        }
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseBBBP(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      String[] values=DATA_SPLITTER.split(line);
      if (""String_Node_Str"".equals(values[1])) {
        topFields=parseTopFields(values);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      break;
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      parseSystemInfo(DATA_SPLITTER.split(line));
    }
 else     if (line.startsWith(""String_Node_Str"")) {
    }
 else     if (line.isEmpty()) {
      continue;
    }
 else {
      if (!seenFirstDataType) {
        transforms.add(new CPUBusyTransform());
        transforms.add(new DiskTotalTransform());
        if (data.getMetadata(""String_Node_Str"") != null) {
          isAIX=true;
          transforms.add(new AIXMemoryTransform());
          transforms.add(new AIXLPARTransform());
          transforms.add(new AIXCPUTransform());
        }
 else {
          transforms.add(new LinuxNetPacketTransform());
          transforms.add(new LinuxMemoryTransform());
        }
        String temp=data.getMetadata(""String_Node_Str"");
        if (temp != null) {
          try {
            fileCPUs=Integer.parseInt(temp);
          }
 catch (          NumberFormatException nfe) {
          }
        }
        seenFirstDataType=true;
      }
      DataType type=buildDataType(DATA_SPLITTER.split(line));
      if (type != null) {
        data.addType(type);
      }
    }
  }
  return line;
}"
26476,"public boolean accept(String pathname){
  String name=pathname.toLowerCase();
  return name.contains(""String_Node_Str"");
}","public boolean accept(String pathname){
  String name=pathname.toLowerCase();
  if (name.endsWith(""String_Node_Str"")) {
    return true;
  }
 else {
    int idx=name.lastIndexOf('/');
    if (idx != -1) {
      name=pathname.substring(idx + 1);
    }
    return name.contains(""String_Node_Str"") && !(name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")|| name.endsWith(""String_Node_Str""));
  }
}"
26477,"public boolean accept(String pathname){
  if (pathname.endsWith(""String_Node_Str"")) {
    return true;
  }
 else {
    int idx=pathname.lastIndexOf('/');
    if (idx == -1) {
      return pathname.contains(""String_Node_Str"");
    }
 else {
      return pathname.substring(idx + 1).contains(""String_Node_Str"");
    }
  }
}","public boolean accept(String pathname){
  String name=pathname.toLowerCase();
  if (name.endsWith(""String_Node_Str"")) {
    return true;
  }
 else {
    int idx=name.lastIndexOf('/');
    if (idx != -1) {
      name=pathname.substring(idx + 1);
    }
    return name.contains(""String_Node_Str"") && !(name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")|| name.endsWith(""String_Node_Str""));
  }
}"
26478,"public BarChartDefinition(BarChartDefinition copy,boolean copyData){
  super(copy,copyData);
  this.subtractionNeeded=copy.subtractionNeeded;
  this.categoryAxisLabel=copy.categoryAxisLabel;
  this.categoryNamingMode=copy.categoryNamingMode;
}","public BarChartDefinition(BarChartDefinition copy,boolean copyData){
  super(copy,copyData);
  this.subtractionNeeded=copy.subtractionNeeded;
  this.categoryAxisLabel=copy.categoryAxisLabel;
  this.barNamingMode=copy.barNamingMode;
  this.categoryNamingMode=copy.categoryNamingMode;
}"
26479,"@Override protected void finalize() throws Throwable {
  super.finalize();
  gui.removePropertyChangeListener(""String_Node_Str"",this);
}","@Override protected void finalize() throws Throwable {
  super.finalize();
  gui.removePropertyChangeListener(""String_Node_Str"",this);
  gui.getIntervalManager().removeListener(this);
}"
26480,"public void addBar(BarChartDefinition barDefinition,AnalysisRecord record){
  if (chart == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (barDefinition == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  DataTupleCategoryDataset dataset=(DataTupleCategoryDataset)plot.getDataset(barDefinition.hasSecondaryYAxis() ? 1 : 0);
  DataSet data=record.getDataSet();
  Statistic previousStat=null;
  for (  DataDefinition definition : barDefinition.getCategories()) {
    if (definition.matchesHost(data)) {
      for (      DataType type : definition.getMatchingTypes(data)) {
        for (        String field : definition.getMatchingFields(type)) {
          String barName=barDefinition.getBarNamingMode().getName(definition,data,type,field,granularity);
          String categoryName=barDefinition.getCategoryNamingMode().getName(definition,data,type,field,granularity);
          Statistic currentStat=definition.getStatistic();
          double value=currentStat.getValue(record,type,field);
          if ((previousStat != null) && (previousStat != currentStat)) {
            dataset.setCategoriesHaveDifferentStats(true);
          }
          previousStat=currentStat;
          dataset.addValue(value,barName,categoryName);
          dataset.associateTuple(barName,categoryName,new DataTuple(data,type,field));
        }
      }
    }
  }
  if ((dataset.getRowCount() > 1) && (chart.getLegend() == null)) {
    addLegend();
  }
  if (barDefinition.isSubtractionNeeded() && (dataset.getRowCount() != 0)) {
    for (int i=0; i < dataset.getColumnCount(); i++) {
      double total=(double)dataset.getValue(0,i).doubleValue();
      String barName=(String)dataset.getColumnKey(i);
      for (int j=1; j < dataset.getRowCount(); j++) {
        double value=dataset.getValue(j,i).doubleValue() - total;
        String categoryName=(String)dataset.getRowKey(j);
        dataset.setValue(value,categoryName,barName);
        total+=value;
      }
    }
  }
}","public void addBar(BarChartDefinition barDefinition,AnalysisRecord record){
  if (chart == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (barDefinition == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  DataTupleCategoryDataset dataset=(DataTupleCategoryDataset)plot.getDataset(barDefinition.hasSecondaryYAxis() ? 1 : 0);
  DataSet data=record.getDataSet();
  Statistic previousStat=null;
  for (  DataDefinition definition : barDefinition.getCategories()) {
    if (definition.matchesHost(data)) {
      for (      DataType type : definition.getMatchingTypes(data)) {
        for (        String field : definition.getMatchingFields(type)) {
          String barName=barDefinition.getBarNamingMode().getName(definition,data,type,field,granularity);
          String categoryName=barDefinition.getCategoryNamingMode().getName(definition,data,type,field,granularity);
          Statistic currentStat=definition.getStatistic();
          double value=currentStat.getValue(record,type,field);
          if ((previousStat != null) && (previousStat != currentStat)) {
            dataset.setCategoriesHaveDifferentStats(true);
          }
          previousStat=currentStat;
          dataset.addValue(value,barName,categoryName);
          dataset.associateTuple(barName,categoryName,new DataTuple(data,type,field));
        }
      }
    }
  }
  if (barDefinition.isSubtractionNeeded() && (dataset.getRowCount() != 0)) {
    for (int i=0; i < dataset.getColumnCount(); i++) {
      double total=(double)dataset.getValue(0,i).doubleValue();
      String barName=(String)dataset.getColumnKey(i);
      for (int j=1; j < dataset.getRowCount(); j++) {
        double value=dataset.getValue(j,i).doubleValue() - total;
        String categoryName=(String)dataset.getRowKey(j);
        dataset.setValue(value,categoryName,barName);
        total+=value;
      }
    }
  }
  if (chart.getLegend() == null) {
    int rowCount=plot.getDataset(0).getRowCount();
    if (hasSecondaryYAxis) {
      rowCount+=plot.getDataset(1).getRowCount();
    }
    if (rowCount > 1) {
      addLegend();
    }
  }
  plot.configureRangeAxes();
}"
26481,"public void addLine(IntervalChartDefinition lineDefinition,List<AnalysisRecord> records){
  if (chart == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if ((records == null) || records.isEmpty()) {
    return;
  }
  if (records.size() > 4) {
    ((CategoryPlot)chart.getPlot()).getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
  }
  DataTupleCategoryDataset dataset=(DataTupleCategoryDataset)((CategoryPlot)chart.getPlot()).getDataset(lineDefinition.hasSecondaryYAxis() ? 1 : 0);
  DataSet data=records.get(0).getDataSet();
  Map<String,Integer> usedIntervalNames=new java.util.HashMap<String,Integer>(records.size());
  for (  DataDefinition definition : lineDefinition.getLines()) {
    if (definition.matchesHost(data)) {
      for (      DataType type : definition.getMatchingTypes(data)) {
        List<String> fields=definition.getMatchingFields(type);
        for (        String field : fields) {
          String name=lineDefinition.getLineNamingMode().getName(definition,data,type,field,granularity);
          for (          AnalysisRecord record : records) {
            double value=definition.getStatistic().getValue(record,type,field);
            String intervalName=record.getInterval().getName();
            if (""String_Node_Str"".equals(intervalName)) {
              if (record.getInterval().getDuration() >= (86400 * 1000)) {
                intervalName=TimeFormatCache.formatDateTime(record.getInterval().getStart()) + '-' + TimeFormatCache.formatDateTime(record.getInterval().getEnd());
              }
 else {
                intervalName=TimeFormatCache.formatTime(record.getInterval().getStart()) + '-' + TimeFormatCache.formatTime(record.getInterval().getEnd());
              }
            }
            Integer count=usedIntervalNames.get(intervalName);
            if (count != null) {
              int i=dataset.getColumnIndex(name);
              if (i != -1) {
                usedIntervalNames.put(intervalName,++count);
                intervalName+=""String_Node_Str"" + count;
              }
            }
 else {
              usedIntervalNames.put(intervalName,0);
            }
            dataset.addValue(value,name,intervalName);
            dataset.associateTuple(name,intervalName,new DataTuple(record.getDataSet(),type,field));
          }
        }
      }
    }
  }
  if ((dataset.getRowCount() > 1) && (chart.getLegend() == null)) {
    addLegend();
  }
}","public void addLine(IntervalChartDefinition lineDefinition,List<AnalysisRecord> records){
  if (chart == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if ((records == null) || records.isEmpty()) {
    return;
  }
  if (records.size() > 4) {
    ((CategoryPlot)chart.getPlot()).getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
  }
  DataTupleCategoryDataset dataset=(DataTupleCategoryDataset)((CategoryPlot)chart.getPlot()).getDataset(lineDefinition.hasSecondaryYAxis() ? 1 : 0);
  DataSet data=records.get(0).getDataSet();
  Map<String,Integer> usedIntervalNames=new java.util.HashMap<String,Integer>(records.size());
  for (  DataDefinition definition : lineDefinition.getLines()) {
    if (definition.matchesHost(data)) {
      for (      DataType type : definition.getMatchingTypes(data)) {
        List<String> fields=definition.getMatchingFields(type);
        for (        String field : fields) {
          String name=lineDefinition.getLineNamingMode().getName(definition,data,type,field,granularity);
          for (          AnalysisRecord record : records) {
            double value=definition.getStatistic().getValue(record,type,field);
            String intervalName=record.getInterval().getName();
            if (""String_Node_Str"".equals(intervalName)) {
              if (record.getInterval().getDuration() >= (86400 * 1000)) {
                intervalName=TimeFormatCache.formatDateTime(record.getInterval().getStart()) + '-' + TimeFormatCache.formatDateTime(record.getInterval().getEnd());
              }
 else {
                intervalName=TimeFormatCache.formatTime(record.getInterval().getStart()) + '-' + TimeFormatCache.formatTime(record.getInterval().getEnd());
              }
            }
            Integer count=usedIntervalNames.get(intervalName);
            if (count != null) {
              int i=dataset.getColumnIndex(name);
              if (i != -1) {
                usedIntervalNames.put(intervalName,++count);
                intervalName+=""String_Node_Str"" + count;
              }
            }
 else {
              usedIntervalNames.put(intervalName,0);
            }
            dataset.addValue(value,name,intervalName);
            dataset.associateTuple(name,intervalName,new DataTuple(record.getDataSet(),type,field));
          }
        }
      }
    }
  }
  if (chart.getLegend() == null) {
    int rowCount=chart.getCategoryPlot().getDataset(0).getRowCount();
    if (hasSecondaryYAxis) {
      rowCount+=chart.getCategoryPlot().getDataset(1).getRowCount();
    }
    if (rowCount > 1) {
      addLegend();
    }
  }
}"
26482,"private void updateChart(){
  recalculateGapThreshold(0);
  if (hasSecondaryYAxis) {
    recalculateGapThreshold(1);
  }
  chart.getXYPlot().getRangeAxis(0).configure();
  if (chart.getLegend() == null) {
    int seriesCount=chart.getXYPlot().getDataset(0).getSeriesCount();
    if (hasSecondaryYAxis) {
      seriesCount+=chart.getXYPlot().getDataset(1).getSeriesCount();
      NumberAxis a=(NumberAxis)chart.getXYPlot().getRangeAxis(1);
      a.configure();
    }
    if (seriesCount > 1) {
      addLegend();
    }
  }
}","private void updateChart(){
  recalculateGapThreshold(0);
  if (hasSecondaryYAxis) {
    recalculateGapThreshold(1);
  }
  chart.getXYPlot().configureRangeAxes();
  if (chart.getLegend() == null) {
    int seriesCount=chart.getXYPlot().getDataset(0).getSeriesCount();
    if (hasSecondaryYAxis) {
      seriesCount+=chart.getXYPlot().getDataset(1).getSeriesCount();
    }
    if (seriesCount > 1) {
      addLegend();
    }
  }
}"
26483,"protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  ValueAxis valueAxis=new NumberAxis();
  BarRenderer renderer=null;
  if (stacked) {
    renderer=new StackedBarRenderer();
  }
 else {
    renderer=new BarRenderer();
  }
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(false),categoryAxis,valueAxis,renderer);
  if (hasSecondaryYAxis) {
    plot.setRenderer(1,new BarRenderer());
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new HighlightableBarChart(""String_Node_Str"",JFreeChart.DEFAULT_TITLE_FONT,plot,false);
}","protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  ValueAxis valueAxis=new NumberAxis();
  BarRenderer renderer=null;
  if (stacked) {
    renderer=new StackedBarRenderer();
  }
 else {
    renderer=new BarRenderer();
  }
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(false),categoryAxis,valueAxis,renderer);
  if (hasSecondaryYAxis) {
    plot.setDataset(1,new DataTupleCategoryDataset(stacked));
    valueAxis=new NumberAxis();
    plot.setRenderer(1,new BarRenderer());
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new HighlightableBarChart(""String_Node_Str"",JFreeChart.DEFAULT_TITLE_FONT,plot,false);
}"
26484,"public void initChart(BarChartDefinition definition){
  stacked=definition.isStacked();
  hasSecondaryYAxis=definition.hasSecondaryYAxis();
  initChart();
  if (definition.usePercentYAxis()) {
    setPercentYAxis();
  }
  chart.setTitle(definition.getTitle());
  ((CategoryPlot)chart.getPlot()).getRangeAxis().setLabel(definition.getYAxisLabel());
  ((CategoryPlot)chart.getPlot()).getDomainAxis().setLabel(definition.getCategoryAxisLabel());
  if (hasSecondaryYAxis) {
    ((CategoryPlot)chart.getPlot()).getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
}","public void initChart(BarChartDefinition definition){
  stacked=definition.isStacked();
  hasSecondaryYAxis=definition.hasSecondaryYAxis();
  initChart();
  chart.setTitle(definition.getTitle());
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (hasSecondaryYAxis) {
    plot.getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
  plot.getDomainAxis().setLabel(definition.getCategoryAxisLabel());
  if (definition.usePercentYAxis()) {
    setPercentYAxis();
  }
}"
26485,"@Override protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  LineAndShapeRenderer renderer=new LineAndShapeRenderer();
  renderer.setBaseSeriesVisible(true,false);
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(true),categoryAxis,valueAxis,renderer);
  if (hasSecondaryYAxis) {
    renderer=new LineAndShapeRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRenderer(1,renderer);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}","@Override protected JFreeChart createChart(){
  CategoryAxis categoryAxis=new CategoryAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  LineAndShapeRenderer renderer=new LineAndShapeRenderer();
  renderer.setBaseSeriesVisible(true,false);
  CategoryPlot plot=new CategoryPlot(new DataTupleCategoryDataset(true),categoryAxis,valueAxis,renderer);
  if (hasSecondaryYAxis) {
    plot.setDataset(1,new DataTupleCategoryDataset(stacked));
    valueAxis=new NumberAxis();
    valueAxis.setAutoRangeIncludesZero(true);
    renderer=new LineAndShapeRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRenderer(1,renderer);
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}"
26486,"@Override protected void formatChart(){
  super.formatChart();
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  LineAndShapeRenderer renderer=(LineAndShapeRenderer)plot.getRenderer();
  renderer.setBaseShapesVisible(true);
  renderer.setBaseShapesFilled(true);
  renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(""String_Node_Str"",new DecimalFormat(""String_Node_Str"")));
  plot.getDomainAxis().setLowerMargin(.015);
  plot.getDomainAxis().setUpperMargin(.015);
  for (int i=0; i < plot.getRangeAxisCount(); i++) {
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.getDomainAxis().setLowerMargin(.015);
  plot.getDomainAxis().setUpperMargin(.015);
  plot.getDomainAxis().setCategoryMargin(0);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}","@Override protected void formatChart(){
  super.formatChart();
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  for (int i=0; i < plot.getRendererCount(); i++) {
    LineAndShapeRenderer renderer=(LineAndShapeRenderer)plot.getRenderer(i);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(""String_Node_Str"",new DecimalFormat(""String_Node_Str"")));
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLowerMargin(.015);
  plot.getDomainAxis().setUpperMargin(.015);
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.getDomainAxis().setLowerMargin(.015);
  plot.getDomainAxis().setUpperMargin(.015);
  plot.getDomainAxis().setCategoryMargin(0);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}"
26487,"public void initChart(IntervalChartDefinition definition){
  initChart();
  if (definition.usePercentYAxis()) {
    setPercentYAxis();
  }
  chart.setTitle(definition.getTitle());
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (hasSecondaryYAxis) {
    ((CategoryPlot)chart.getPlot()).getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
  if (""String_Node_Str"".equals(definition.getXAxisLabel())) {
    plot.getDomainAxis().setLabel(""String_Node_Str"");
  }
 else {
    plot.getDomainAxis().setLabel(definition.getXAxisLabel());
  }
}","public void initChart(IntervalChartDefinition definition){
  hasSecondaryYAxis=definition.hasSecondaryYAxis();
  initChart();
  chart.setTitle(definition.getTitle());
  CategoryPlot plot=(CategoryPlot)chart.getPlot();
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (hasSecondaryYAxis) {
    plot.getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
  if (""String_Node_Str"".equals(definition.getXAxisLabel())) {
    plot.getDomainAxis().setLabel(""String_Node_Str"");
  }
 else {
    plot.getDomainAxis().setLabel(definition.getXAxisLabel());
  }
  if (definition.usePercentYAxis()) {
    setPercentYAxis();
  }
}"
26488,"protected JFreeChart createChart(){
  DateAxis timeAxis=new DateAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  DataTupleXYDataset dataset=new DataTupleXYDataset(stacked);
  XYPlot plot=null;
  if (stacked) {
    StackedXYAreaRenderer2 renderer=new StackedXYAreaRenderer2();
    renderer.setBaseSeriesVisible(true,false);
    plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);
  }
 else {
    StandardXYItemRenderer renderer=new StandardXYItemRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);
  }
  if (hasSecondaryYAxis) {
    plot.setDataset(1,new DataTupleXYDataset(stacked));
    valueAxis=new NumberAxis();
    valueAxis.setAutoRangeIncludesZero(true);
    plot.setRangeAxis(1,valueAxis);
    plot.mapDatasetToRangeAxis(1,1);
    StandardXYItemRenderer renderer=new StandardXYItemRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRenderer(1,renderer);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}","protected JFreeChart createChart(){
  DateAxis timeAxis=new DateAxis();
  NumberAxis valueAxis=new NumberAxis();
  valueAxis.setAutoRangeIncludesZero(true);
  DataTupleXYDataset dataset=new DataTupleXYDataset(stacked);
  XYPlot plot=null;
  if (stacked) {
    StackedXYAreaRenderer2 renderer=new StackedXYAreaRenderer2();
    renderer.setBaseSeriesVisible(true,false);
    plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);
  }
 else {
    StandardXYItemRenderer renderer=new StandardXYItemRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);
  }
  if (hasSecondaryYAxis) {
    plot.setDataset(1,new DataTupleXYDataset(stacked));
    valueAxis=new NumberAxis();
    valueAxis.setAutoRangeIncludesZero(true);
    StandardXYItemRenderer renderer=new StandardXYItemRenderer();
    renderer.setBaseSeriesVisible(true,false);
    plot.setRangeAxis(1,valueAxis);
    plot.setRenderer(1,renderer);
    plot.mapDatasetToRangeAxis(1,1);
  }
  return new JFreeChart(""String_Node_Str"",null,plot,false);
}"
26489,"protected void formatChart(){
  super.formatChart();
  XYPlot plot=chart.getXYPlot();
  if (stacked) {
    StackedXYAreaRenderer2 renderer=(StackedXYAreaRenderer2)plot.getRenderer();
    renderer.setLegendArea(new java.awt.Rectangle(10,10));
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
 else {
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(0);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(chart,0);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  if (hasSecondaryYAxis) {
    StandardXYItemRenderer renderer=new StandardXYItemRenderer();
    plot.setRenderer(1,renderer);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(chart,1);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  for (int i=0; i < plot.getRangeAxisCount(); i++) {
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}","protected void formatChart(){
  super.formatChart();
  XYPlot plot=chart.getXYPlot();
  if (stacked) {
    StackedXYAreaRenderer2 renderer=(StackedXYAreaRenderer2)plot.getRenderer();
    renderer.setLegendArea(new java.awt.Rectangle(10,10));
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
 else {
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(0);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(0);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  if (hasSecondaryYAxis) {
    StandardXYItemRenderer renderer=(StandardXYItemRenderer)plot.getRenderer(1);
    renderer.setBaseShapesVisible(true);
    renderer.setBaseShapesFilled(true);
    renderer.setPlotDiscontinuous(true);
    renderer.setGapThresholdType(UnitType.ABSOLUTE);
    recalculateGapThreshold(1);
    renderer.setBaseToolTipGenerator(tooltipGenerator);
  }
  for (int i=0; i < plot.getRangeAxisCount(); i++) {
    plot.getRangeAxis(i).setLabelFont(LABEL_FONT);
    plot.getRangeAxis(i).setTickLabelFont(AXIS_FONT);
  }
  plot.getDomainAxis().setLabelFont(LABEL_FONT);
  plot.getDomainAxis().setTickLabelFont(AXIS_FONT);
  plot.setRangeGridlinePaint(GRID_COLOR);
  plot.setRangeGridlineStroke(GRID_LINES);
}"
26490,"private void recalculateGapThreshold(JFreeChart chart,int datasetIndex){
  if (stacked && (datasetIndex == 0)) {
    return;
  }
 else {
    XYPlot plot=chart.getXYPlot();
    if (plot.getDataset(datasetIndex).getItemCount(0) > 0) {
      DataTupleXYDataset dataset=(DataTupleXYDataset)plot.getDataset(datasetIndex);
      int seriesCount=dataset.getSeriesCount();
      double[] averageDistance=new double[seriesCount];
      int[] count=new int[seriesCount];
      double[] previousX=new double[seriesCount];
      java.util.Arrays.fill(averageDistance,0);
      java.util.Arrays.fill(count,0);
      java.util.Arrays.fill(previousX,dataset.getXValue(0,0));
      for (int i=1; i < dataset.getItemCount(0); i++) {
        double currentX=dataset.getXValue(0,i);
        for (int j=0; j < seriesCount; j++) {
          double y=dataset.getYValue(j,i);
          if (!Double.isNaN(y)) {
            averageDistance[j]+=currentX - previousX[j];
            previousX[j]=currentX;
            ++count[j];
          }
        }
      }
      double maxAverage=Double.MIN_VALUE;
      for (int i=0; i < seriesCount; i++) {
        averageDistance[i]/=count[i];
        if (averageDistance[i] > maxAverage) {
          maxAverage=averageDistance[i];
        }
      }
      ((StandardXYItemRenderer)plot.getRenderer(datasetIndex)).setGapThreshold(maxAverage * 1.25);
    }
 else {
      ((StandardXYItemRenderer)plot.getRenderer()).setGapThreshold(Integer.MAX_VALUE);
    }
  }
}","private void recalculateGapThreshold(int datasetIndex){
  if (stacked && (datasetIndex == 0)) {
    return;
  }
 else {
    XYPlot plot=chart.getXYPlot();
    if (plot.getDataset(datasetIndex).getItemCount(0) > 0) {
      DataTupleXYDataset dataset=(DataTupleXYDataset)plot.getDataset(datasetIndex);
      int seriesCount=dataset.getSeriesCount();
      double[] averageDistance=new double[seriesCount];
      int[] count=new int[seriesCount];
      double[] previousX=new double[seriesCount];
      java.util.Arrays.fill(averageDistance,0);
      java.util.Arrays.fill(count,0);
      java.util.Arrays.fill(previousX,dataset.getXValue(0,0));
      for (int i=1; i < dataset.getItemCount(0); i++) {
        double currentX=dataset.getXValue(0,i);
        for (int j=0; j < seriesCount; j++) {
          double y=dataset.getYValue(j,i);
          if (!Double.isNaN(y)) {
            averageDistance[j]+=currentX - previousX[j];
            previousX[j]=currentX;
            ++count[j];
          }
        }
      }
      double maxAverage=Double.MIN_VALUE;
      for (int i=0; i < seriesCount; i++) {
        averageDistance[i]/=count[i];
        if (averageDistance[i] > maxAverage) {
          maxAverage=averageDistance[i];
        }
      }
      ((StandardXYItemRenderer)plot.getRenderer(datasetIndex)).setGapThreshold(maxAverage * 1.25);
    }
 else {
      ((StandardXYItemRenderer)plot.getRenderer()).setGapThreshold(Integer.MAX_VALUE);
    }
  }
}"
26491,"private void updateChart(){
  recalculateGapThreshold(chart,0);
  if (hasSecondaryYAxis) {
    recalculateGapThreshold(chart,1);
  }
  chart.getXYPlot().getRangeAxis(0).configure();
  if (chart.getLegend() != null) {
    int seriesCount=chart.getXYPlot().getDataset(0).getSeriesCount();
    if (hasSecondaryYAxis) {
      seriesCount+=chart.getXYPlot().getDataset(1).getSeriesCount();
      NumberAxis a=(NumberAxis)chart.getXYPlot().getRangeAxis(1);
      a.configure();
    }
    if (seriesCount > 1) {
      addLegend();
    }
  }
}","private void updateChart(){
  recalculateGapThreshold(0);
  if (hasSecondaryYAxis) {
    recalculateGapThreshold(1);
  }
  chart.getXYPlot().getRangeAxis(0).configure();
  if (chart.getLegend() == null) {
    int seriesCount=chart.getXYPlot().getDataset(0).getSeriesCount();
    if (hasSecondaryYAxis) {
      seriesCount+=chart.getXYPlot().getDataset(1).getSeriesCount();
      NumberAxis a=(NumberAxis)chart.getXYPlot().getRangeAxis(1);
      a.configure();
    }
    if (seriesCount > 1) {
      addLegend();
    }
  }
}"
26492,"public void initChart(LineChartDefinition definition){
  stacked=definition.isStacked();
  hasSecondaryYAxis=definition.hasSecondaryYAxis();
  initChart();
  chart.setTitle(definition.getTitle());
  chart.getXYPlot().getRangeAxis().setLabel(definition.getYAxisLabel());
  if (hasSecondaryYAxis) {
    chart.getXYPlot().getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
  if (""String_Node_Str"".equals(definition.getXAxisLabel())) {
    chart.getXYPlot().getDomainAxis().setLabel(""String_Node_Str"");
  }
 else {
    chart.getXYPlot().getDomainAxis().setLabel(definition.getXAxisLabel());
  }
  if (definition.usePercentYAxis()) {
    LineChartBuilder.setPercentYAxis(chart);
  }
}","public void initChart(LineChartDefinition definition){
  stacked=definition.isStacked();
  hasSecondaryYAxis=definition.hasSecondaryYAxis();
  initChart();
  chart.setTitle(definition.getTitle());
  XYPlot plot=chart.getXYPlot();
  plot.getRangeAxis().setLabel(definition.getYAxisLabel());
  if (hasSecondaryYAxis) {
    plot.getRangeAxis(1).setLabel(definition.getSecondaryYAxisLabel());
  }
  if (""String_Node_Str"".equals(definition.getXAxisLabel())) {
    plot.getDomainAxis().setLabel(""String_Node_Str"");
  }
 else {
    plot.getDomainAxis().setLabel(definition.getXAxisLabel());
  }
  if (definition.usePercentYAxis()) {
    LineChartBuilder.setPercentYAxis(chart);
  }
}"
26493,"@Override protected void startElement(String element,String unparsedAttributes){
  if (""String_Node_Str"".equals(element)) {
    createLineChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    createIntervalChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    createBarChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart instanceof YAxisChartDefinition) {
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      ((YAxisChartDefinition)currentChart).setUsePercentYAxis(Boolean.valueOf(attributes.get(""String_Node_Str"")));
      ((YAxisChartDefinition)currentChart).setYAxisLabel(attributes.get(""String_Node_Str""));
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart instanceof LineChartDefinition) {
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      if (attributes.get(""String_Node_Str"") != null) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
      }
      if (currentChart instanceof BarChartDefinition && ((BarChartDefinition)currentChart).isStacked()) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
      }
 else {
        ((YAxisChartDefinition)currentChart).setSecondaryYAxisLabel(attributes.get(""String_Node_Str""));
        ((YAxisChartDefinition)currentChart).setHasSecondaryYAxis(true);
      }
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart == null) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      inData=false;
      skip=true;
    }
 else {
      inData=true;
      skip=false;
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      String stat=attributes.get(""String_Node_Str"");
      if (stat != null) {
        currentStat=Statistic.valueOf(stat);
      }
      useSecondaryYAxis=Boolean.parseBoolean(attributes.get(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseHost(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseType(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseField(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseFieldAlias(parseAttributes(unparsedAttributes));
  }
}","@Override protected void startElement(String element,String unparsedAttributes){
  if (""String_Node_Str"".equals(element)) {
    createLineChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    createIntervalChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    createBarChart(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart instanceof YAxisChartDefinition) {
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      ((YAxisChartDefinition)currentChart).setUsePercentYAxis(Boolean.valueOf(attributes.get(""String_Node_Str"")));
      ((YAxisChartDefinition)currentChart).setYAxisLabel(attributes.get(""String_Node_Str""));
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart instanceof YAxisChartDefinition) {
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      if (attributes.get(""String_Node_Str"") != null) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + '\''+ ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
      }
      if (currentChart instanceof BarChartDefinition && ((BarChartDefinition)currentChart).isStacked()) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
      }
 else {
        ((YAxisChartDefinition)currentChart).setSecondaryYAxisLabel(attributes.get(""String_Node_Str""));
        ((YAxisChartDefinition)currentChart).setHasSecondaryYAxis(true);
      }
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (currentChart == null ? currentChart : currentChart.getShortName()) + ""String_Node_Str""+ ""String_Node_Str"",getLineNumber());
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    if (currentChart == null) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      inData=false;
      skip=true;
    }
 else {
      inData=true;
      skip=false;
      Map<String,String> attributes=parseAttributes(unparsedAttributes);
      String stat=attributes.get(""String_Node_Str"");
      if (stat != null) {
        currentStat=Statistic.valueOf(stat);
      }
      useSecondaryYAxis=Boolean.parseBoolean(attributes.get(""String_Node_Str""));
    }
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseHost(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseType(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseField(parseAttributes(unparsedAttributes));
  }
 else   if (""String_Node_Str"".equals(element)) {
    parseFieldAlias(parseAttributes(unparsedAttributes));
  }
}"
26494,"@Override public View onCreateInputView(){
  KeyboardView ret=new KeyboardView(this,null);
  ret.setKeyboard(new Keyboard(this,R.xml.keyboarddef));
  ret.setOnKeyboardActionListener(this);
  return ret;
}","@Override public View onCreateInputView(){
  KeyboardView ret=new KeyboardView(this,null);
  ret.setKeyboard(new Keyboard(this,R.xml.keyboarddef));
  ret.setOnKeyboardActionListener(this);
  ret.setPreviewEnabled(false);
  return ret;
}"
26495,"@Override public void run(){
  Log.w(""String_Node_Str"",""String_Node_Str"" + symbol);
switch (symbol) {
case TerminalIO.DEL:
case TerminalIO.DELETE:
case TerminalIO.BACKSPACE:
{
      myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      break;
    }
case TerminalIO.ENTER:
case '\n':
{
    myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_ENTER);
    break;
  }
case TerminalIO.LEFT:
{
  myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
  break;
}
case TerminalIO.RIGHT:
{
myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
}
case TerminalIO.UP:
{
myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
}
case TerminalIO.DOWN:
{
myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
}
case TerminalIO.ESCAPE:
{
myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_BACK);
break;
}
case TerminalIO.TABULATOR:
{
myService.sendDownUpKeyEvents(KeyEvent.KEYCODE_TAB);
break;
}
default :
{
InputConnection inputConnection=myService.getCurrentInputConnection();
if (inputConnection != null) {
inputConnection.commitText(new String(sequence),1);
}
}
}
inUse=false;
}","public void run(){
  Log.w(""String_Node_Str"",""String_Node_Str"" + symbol);
  InputConnection con=myService.getCurrentInputConnection();
  if (con == null) {
    return;
  }
switch (symbol) {
case TerminalIO.DEL:
case TerminalIO.DELETE:
case TerminalIO.BACKSPACE:
{
      con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DEL));
      con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DEL));
      break;
    }
case TerminalIO.ENTER:
case '\n':
{
    con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_ENTER));
    con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_ENTER));
    break;
  }
case TerminalIO.LEFT:
{
  con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_LEFT));
  con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_LEFT));
  break;
}
case TerminalIO.RIGHT:
{
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_RIGHT));
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_RIGHT));
break;
}
case TerminalIO.UP:
{
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_UP));
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_UP));
break;
}
case TerminalIO.DOWN:
{
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_DOWN));
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_DOWN));
break;
}
case TerminalIO.ESCAPE:
{
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_BACK));
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_BACK));
break;
}
case TerminalIO.TABULATOR:
{
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_TAB));
con.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_TAB));
break;
}
case TerminalIO.COLORINIT:
{
ExtractedText text=con.getExtractedText(new ExtractedTextRequest(),0);
try {
con.setSelection(0,text.text.length());
}
 catch (NullPointerException e) {
}
break;
}
case 3:
{
con.performContextMenuAction(android.R.id.copy);
break;
}
case 22:
{
con.performContextMenuAction(android.R.id.paste);
break;
}
case 24:
{
con.performContextMenuAction(android.R.id.cut);
break;
}
default :
{
con.commitText(new String(sequence),1);
}
}
}"
26496,"@Override public void run(Connection con){
  m_IO=con.getTerminalIO();
  PowerManager pm=(PowerManager)RemoteKeyboardService.self.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK,TAG);
  wakeLock.acquire();
  Resources res=RemoteKeyboardService.self.getResources();
  RemoteKeyboardService.self.updateNotification(con.getConnectionData().getInetAddress());
  try {
    titleBar=new Titlebar(m_IO,""String_Node_Str"");
    titleBar.setTitleText(res.getString(R.string.terminal_title));
    titleBar.setAlignment(Titlebar.ALIGN_LEFT);
    titleBar.setForegroundColor(ColorHelper.WHITE);
    titleBar.setBackgroundColor(ColorHelper.BLUE);
    content=new Label(m_IO,""String_Node_Str"");
    content.setLocation(0,2);
    statusBar=new Statusbar(m_IO,""String_Node_Str"");
    statusBar.setStatusText(res.getString(R.string.terminal_statusbar));
    statusBar.setAlignment(Titlebar.ALIGN_LEFT);
    statusBar.setForegroundColor(ColorHelper.WHITE);
    statusBar.setBackgroundColor(ColorHelper.BLUE);
    showText(getWelcomeScreen());
    int in;
    int offset=0;
    InputAction inputAction=null;
    long lastEvent=SystemClock.uptimeMillis();
    while (true) {
      in=m_IO.read();
      if (in == TerminalIO.IOERROR || in == TerminalIO.HANDLED) {
        break;
      }
      if (offset == 0) {
        inputAction=getFreeInputAction();
        inputAction.inUse=true;
        inputAction.symbol=in;
        inputAction.sequence=inputAction.buffer[InputAction.getBuffer(in)];
      }
      inputAction.sequence[offset]=(byte)in;
      offset++;
      if (offset == inputAction.sequence.length) {
        offset=0;
        inputAction.myService=RemoteKeyboardService.self;
        long now=SystemClock.uptimeMillis();
        ;
        if ((now - lastEvent) > 30) {
          try {
            Thread.sleep(30);
          }
 catch (          InterruptedException e) {
          }
        }
        lastEvent=now;
        RemoteKeyboardService.self.handler.post(inputAction);
      }
    }
    m_IO.eraseScreen();
    m_IO.flush();
  }
 catch (  EOFException e) {
  }
catch (  IOException e) {
    Log.w(TAG,e);
  }
 finally {
    RemoteKeyboardService.self.updateNotification(null);
    wakeLock.release();
    self=null;
  }
}","@Override public void run(Connection con){
  m_IO=con.getTerminalIO();
  PowerManager pm=(PowerManager)RemoteKeyboardService.self.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK,TAG);
  wakeLock.acquire();
  Resources res=RemoteKeyboardService.self.getResources();
  RemoteKeyboardService.self.updateNotification(con.getConnectionData().getInetAddress());
  try {
    titleBar=new Titlebar(m_IO,""String_Node_Str"");
    titleBar.setTitleText(res.getString(R.string.terminal_title));
    titleBar.setAlignment(Titlebar.ALIGN_LEFT);
    titleBar.setForegroundColor(ColorHelper.WHITE);
    titleBar.setBackgroundColor(ColorHelper.BLUE);
    content=new Label(m_IO,""String_Node_Str"");
    content.setLocation(0,2);
    statusBar=new Statusbar(m_IO,""String_Node_Str"");
    statusBar.setStatusText(res.getString(R.string.terminal_statusbar));
    statusBar.setAlignment(Titlebar.ALIGN_LEFT);
    statusBar.setForegroundColor(ColorHelper.WHITE);
    statusBar.setBackgroundColor(ColorHelper.BLUE);
    showText(getWelcomeScreen());
    int in;
    int offset=0;
    InputAction inputAction=new InputAction();
    ActionRunner actionRunner=new ActionRunner();
    while (true) {
      in=m_IO.read();
      if (in == TerminalIO.IOERROR || in == TerminalIO.HANDLED) {
        break;
      }
      if (offset == 0) {
        inputAction.symbol=in;
        inputAction.sequence=inputAction.buffer[InputAction.getBuffer(in)];
      }
      inputAction.sequence[offset]=(byte)in;
      offset++;
      if (offset == inputAction.sequence.length) {
        offset=0;
        inputAction.myService=RemoteKeyboardService.self;
        actionRunner.setAction(inputAction);
        RemoteKeyboardService.self.handler.post(actionRunner);
        actionRunner.waitResult();
      }
    }
    m_IO.eraseScreen();
    m_IO.flush();
  }
 catch (  EOFException e) {
  }
catch (  IOException e) {
    Log.w(TAG,e);
  }
 finally {
    RemoteKeyboardService.self.updateNotification(null);
    wakeLock.release();
    self=null;
  }
}"
26497,"private void addPlayersToGame(Game game){
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  assertTrue(p1.getId() > 0);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  assertTrue(p2.getId() > 0);
}","private void addPlayersToGame(Game game){
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  assertTrue(p1.getId() > 0);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  assertTrue(p2.getId() > 0);
}"
26498,"@Test(expected=IllegalStateException.class) public void testCantStartGamePlayers(){
  Game game=gameService.saveGame(createTestGame());
  gameService.addNewPlayerToGame(game,new Player());
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  assertNotNull(game.getPlayers());
  gameService.startGame(game);
}","@Test(expected=IllegalStateException.class) public void testCantStartGamePlayers(){
  Game game=gameService.saveGame(createTestGame());
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  gameService.addNewPlayerToGame(game,new Player());
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  assertNotNull(game.getPlayers());
  gameService.startGame(game);
}"
26499,"@Test public void testGameStart(){
  Game game=new Game();
  game.setName(""String_Node_Str"");
  game.setGameType(GameType.TOURNAMENT);
  GameStructure gs=new GameStructure();
  gs.setBlindLength(10);
  gs.setBlindLevels(CommonTournamentFormats.TWO_HR_NINEPPL.getBlindLevels());
  gs.setStartingChips(1000);
  game.setGameStructure(gs);
  game=gameService.saveGame(game);
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  Player p3=new Player();
  p3.setChips(game.getGameStructure().getStartingChips());
  p3.setName(""String_Node_Str"");
  p3=gameService.addNewPlayerToGame(game,p3);
  flushAndClear();
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p1));
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p2));
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p3));
  assertEquals(GameStatus.NOT_STARTED,GameUtil.getGameStatus(game));
  game=gameService.getGameById(game.getId(),true);
  game=gameService.startGame(game);
  assertTrue(game.isStarted());
  assertEquals(3,game.getPlayersRemaining());
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p1));
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p2));
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p3));
  assertEquals(GameStatus.SEATING,GameUtil.getGameStatus(game));
  HandEntity hand=handService.startNewHand(game);
  assertEquals(game.getGameStructure().getCurrentBlindLevel(),BlindLevel.BLIND_10_20);
  assertEquals(hand.getBlindLevel(),BlindLevel.BLIND_10_20);
  Player btn=hand.getCurrentToAct();
  Player sb=handService.getPlayerInSB(hand);
  Player bb=handService.getPlayerInBB(hand);
  assertEquals(PlayerStatus.WAITING,playerActionService.getPlayerStatus(sb));
  assertEquals(PlayerStatus.WAITING,playerActionService.getPlayerStatus(bb));
  assertEquals(PlayerStatus.ACTION_TO_CALL,playerActionService.getPlayerStatus(btn));
  assertEquals(GameStatus.PREFLOP,GameUtil.getGameStatus(game));
  assertEquals(1000,btn.getChips());
  assertEquals(990,sb.getChips());
  assertEquals(980,bb.getChips());
  assertEquals(30,hand.getPot());
  assertEquals(20,hand.getLastBetAmount());
  assertEquals(20,hand.getTotalBetAmount());
}","@Test public void testGameStart(){
  Game game=new Game();
  game.setName(""String_Node_Str"");
  game.setGameType(GameType.TOURNAMENT);
  GameStructure gs=new GameStructure();
  gs.setBlindLength(10);
  gs.setBlindLevels(CommonTournamentFormats.TWO_HR_NINEPPL.getBlindLevels());
  gs.setStartingChips(1000);
  game.setGameStructure(gs);
  game=gameService.saveGame(game);
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  Player p3=new Player();
  p3.setChips(game.getGameStructure().getStartingChips());
  p3.setName(""String_Node_Str"");
  p3=gameService.addNewPlayerToGame(game,p3);
  flushAndClear();
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p1));
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p2));
  assertEquals(PlayerStatus.NOT_STARTED,playerActionService.getPlayerStatus(p3));
  assertEquals(GameStatus.NOT_STARTED,GameUtil.getGameStatus(game));
  game=gameService.getGameById(game.getId(),true);
  game=gameService.startGame(game);
  assertTrue(game.isStarted());
  assertEquals(3,game.getPlayersRemaining());
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p1));
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p2));
  assertEquals(PlayerStatus.SEATING,playerActionService.getPlayerStatus(p3));
  assertEquals(GameStatus.SEATING,GameUtil.getGameStatus(game));
  HandEntity hand=handService.startNewHand(game);
  assertEquals(game.getGameStructure().getCurrentBlindLevel(),BlindLevel.BLIND_10_20);
  assertEquals(hand.getBlindLevel(),BlindLevel.BLIND_10_20);
  Player btn=hand.getCurrentToAct();
  Player sb=handService.getPlayerInSB(hand);
  Player bb=handService.getPlayerInBB(hand);
  assertEquals(PlayerStatus.WAITING,playerActionService.getPlayerStatus(sb));
  assertEquals(PlayerStatus.WAITING,playerActionService.getPlayerStatus(bb));
  assertEquals(PlayerStatus.ACTION_TO_CALL,playerActionService.getPlayerStatus(btn));
  assertEquals(GameStatus.PREFLOP,GameUtil.getGameStatus(game));
  assertEquals(1000,btn.getChips());
  assertEquals(990,sb.getChips());
  assertEquals(980,bb.getChips());
  assertEquals(30,hand.getPot());
  assertEquals(20,hand.getLastBetAmount());
  assertEquals(20,hand.getTotalBetAmount());
}"
26500,"private Game gameSetup(){
  Game game=new Game();
  game.setName(""String_Node_Str"");
  game.setGameType(GameType.TOURNAMENT);
  GameStructure gs=new GameStructure();
  gs.setBlindLength(10);
  gs.setBlindLevels(CommonTournamentFormats.TWO_HR_NINEPPL.getBlindLevels());
  gs.setStartingChips(1000);
  game.setGameStructure(gs);
  game=gameService.saveGame(game);
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  Player p3=new Player();
  p3.setChips(game.getGameStructure().getStartingChips());
  p3.setName(""String_Node_Str"");
  p3=gameService.addNewPlayerToGame(game,p3);
  Player p4=new Player();
  p4.setChips(game.getGameStructure().getStartingChips());
  p4.setName(""String_Node_Str"");
  p4=gameService.addNewPlayerToGame(game,p4);
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  return gameService.startGame(game);
}","private Game gameSetup(){
  Game game=new Game();
  game.setName(""String_Node_Str"");
  game.setGameType(GameType.TOURNAMENT);
  GameStructure gs=new GameStructure();
  gs.setBlindLength(10);
  gs.setBlindLevels(CommonTournamentFormats.TWO_HR_NINEPPL.getBlindLevels());
  gs.setStartingChips(1000);
  game.setGameStructure(gs);
  game=gameService.saveGame(game);
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  Player p1=new Player();
  p1.setChips(game.getGameStructure().getStartingChips());
  p1.setName(""String_Node_Str"");
  p1=gameService.addNewPlayerToGame(game,p1);
  Player p2=new Player();
  p2.setChips(game.getGameStructure().getStartingChips());
  p2.setName(""String_Node_Str"");
  p2=gameService.addNewPlayerToGame(game,p2);
  Player p3=new Player();
  p3.setChips(game.getGameStructure().getStartingChips());
  p3.setName(""String_Node_Str"");
  p3=gameService.addNewPlayerToGame(game,p3);
  Player p4=new Player();
  p4.setChips(game.getGameStructure().getStartingChips());
  p4.setName(""String_Node_Str"");
  p4=gameService.addNewPlayerToGame(game,p4);
  flushAndClear();
  game=gameService.getGameById(game.getId(),true);
  return gameService.startGame(game);
}"
26501,"@Override @Transactional public void endHand(HandEntity hand){
  hand=handDao.merge(hand);
  Game game=hand.getGame();
  game.setCurrentHand(null);
  List<PlayerHand> players=new ArrayList<PlayerHand>();
  for (  PlayerHand p : hand.getPlayers()) {
    if (p.getPlayer().getChips() != 0) {
      players.add(p);
    }
  }
  game.setPlayersRemaining(players.size());
  Player nextButton=this.getNextPlayerInGameOrder(players,game.getPlayerInBTN());
  game.setPlayerInBTN(nextButton);
  gameDao.merge(game);
  hand.setCards(new ArrayList<Card>());
  handDao.merge(hand);
}","@Override @Transactional public void endHand(HandEntity hand){
  hand=handDao.merge(hand);
  Game game=hand.getGame();
  game.setCurrentHand(null);
  List<PlayerHand> players=new ArrayList<PlayerHand>();
  int count=0;
  for (  PlayerHand p : hand.getPlayers()) {
    if (p.getPlayer().getChips() != 0) {
      players.add(p);
      count++;
    }
 else     if (p.getPlayer().equals(game.getPlayerInBTN())) {
      players.add(p);
    }
  }
  game.setPlayersRemaining(count);
  if (count < 2) {
  }
  Player nextButton=this.getNextPlayerInGameOrder(players,game.getPlayerInBTN());
  game.setPlayerInBTN(nextButton);
  gameDao.merge(game);
  hand.setCards(new ArrayList<Card>());
  handDao.merge(hand);
}"
26502,"@Test public void testEndHandWithElimination(){
  Game game=setupGame();
  HandEntity hand=handService.startNewHand(game);
  List<PlayerHand> players=new ArrayList<PlayerHand>();
  players.addAll(hand.getPlayers());
  Collections.sort(players);
  assertEquals(handService.getPlayerInBB(hand),players.get(2).getPlayer());
  players.get(2).getPlayer().setChips(0);
  flushAndClear();
  game=gameDao.findById(game.getId());
  handService.endHand(game.getCurrentHand());
  hand=handService.startNewHand(game);
  assertEquals(""String_Node_Str"",players.size() - 1,hand.getPlayers().size());
  assertEquals(game.getPlayerInBTN(),players.get(1).getPlayer());
  assertEquals(players.get(0).getPlayer(),handService.getPlayerInBB(hand));
  assertEquals(players.get(3).getPlayer(),handService.getPlayerInSB(hand));
}","@Test public void testEndHandWithElimination(){
  Game game=setupGame();
  HandEntity hand=handService.startNewHand(game);
  List<PlayerHand> players=new ArrayList<PlayerHand>();
  players.addAll(hand.getPlayers());
  Collections.sort(players);
  assertEquals(handService.getPlayerInBB(hand),players.get(2).getPlayer());
  players.get(2).getPlayer().setChips(0);
  flushAndClear();
  game=gameDao.findById(game.getId());
  handService.endHand(game.getCurrentHand());
  hand=handService.startNewHand(game);
  assertEquals(""String_Node_Str"",players.size() - 1,hand.getPlayers().size());
  assertEquals(game.getPlayerInBTN(),players.get(1).getPlayer());
  assertEquals(players.get(3).getPlayer(),handService.getPlayerInSB(hand));
  assertEquals(players.get(0).getPlayer(),handService.getPlayerInBB(hand));
}"
26503,"public static DesfireFileSettings selectAppFile(DesfireProtocol tag,int appID,int fileID){
  try {
    tag.selectApp(appID);
  }
 catch (  DesfireException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
  try {
    return tag.getFileSettings(1);
  }
 catch (  DesfireException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
}","public static DesfireFileSettings selectAppFile(DesfireProtocol tag,int appID,int fileID){
  try {
    tag.selectApp(appID);
  }
 catch (  DesfireException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
  try {
    return tag.getFileSettings(fileID);
  }
 catch (  DesfireException e) {
    System.out.println(""String_Node_Str"");
    return null;
  }
}"
26504,"private static String create(Class<?> cls,Object target){
  final String name=tryGetName(cls,target);
  return Strings.isNullOrEmpty(name) ? ""String_Node_Str"" : name.replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
}","private static String create(Class<?> cls,Object target){
  final String name=tryGetName(cls,target);
  return Strings.isNullOrEmpty(name) ? ""String_Node_Str"" : name.replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.ENGLISH);
}"
26505,"@Override public boolean isBlacklisted(Class<?> teClass){
  final String teClassName=teClass.getName().toLowerCase();
  if (fullBlacklist.contains(teClassName))   return true;
  if (teClass.isAnnotationPresent(Ignore.class)) {
    fullBlacklist.add(teClassName);
    return true;
  }
  try {
    teClass.getField(""String_Node_Str"");
    fullBlacklist.add(teClassName);
    return true;
  }
 catch (  NoSuchFieldException e) {
  }
catch (  Throwable t) {
    Log.warn(t,""String_Node_Str"",teClass);
  }
  return false;
}","@Override public boolean isBlacklisted(Class<?> teClass){
  final String teClassName=teClass.getName().toLowerCase(Locale.ENGLISH);
  if (fullBlacklist.contains(teClassName))   return true;
  if (teClass.isAnnotationPresent(Ignore.class)) {
    fullBlacklist.add(teClassName);
    return true;
  }
  try {
    teClass.getField(""String_Node_Str"");
    fullBlacklist.add(teClassName);
    return true;
  }
 catch (  NoSuchFieldException e) {
  }
catch (  Throwable t) {
    Log.warn(t,""String_Node_Str"",teClass);
  }
  return false;
}"
26506,"@SubscribeEvent public void onConfigChange(ConfigurationChange evt){
  if (evt.check(""String_Node_Str"",""String_Node_Str"")) {
    fullBlacklist=Sets.newHashSet(imcBlacklist);
    for (    String cls : Config.teBlacklist)     fullBlacklist.add(cls.toLowerCase());
  }
}","@SubscribeEvent public void onConfigChange(ConfigurationChange evt){
  if (evt.check(""String_Node_Str"",""String_Node_Str"")) {
    fullBlacklist=Sets.newHashSet(imcBlacklist);
    for (    String cls : Config.teBlacklist)     fullBlacklist.add(cls.toLowerCase(Locale.ENGLISH));
  }
}"
26507,"public static String getRawNameForStack(ItemStack is){
  try {
    return is.getUnlocalizedName().toLowerCase();
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}","public static String getRawNameForStack(ItemStack is){
  try {
    return is.getUnlocalizedName().toLowerCase(Locale.ENGLISH);
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}"
26508,"public void signalEvent(){
  Preconditions.checkState(error != null || result != null,""String_Node_Str"");
  if (nobodyLovesMe) {
    Log.warn(""String_Node_Str"",transactionId);
  }
 else {
    try {
      access.queueEvent(SYNC_EVENT,wrap(transactionId));
    }
 catch (    Exception e) {
      Log.warn(e,""String_Node_Str"");
    }
  }
}","public void signalEvent(){
  Preconditions.checkState(error != null || result != null,""String_Node_Str"");
  if (nobodyLovesMe) {
    Log.warn(""String_Node_Str"",transactionId);
  }
 else {
    try {
      access.queueEvent(SYNC_EVENT,wrap(transactionId));
    }
 catch (    Exception e) {
      Log.warn(e,""String_Node_Str"",transactionId);
    }
  }
}"
26509,"@OnTick @Freeform @Alias(""String_Node_Str"") @LuaCallable(returnTypes=LuaType.NUMBER,description=""String_Node_Str"") public int pullItem(@Named(""String_Node_Str"") IInventory target,@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"") ForgeDirection direction,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") int slot,@Optionals @Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer maxAmount,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer intoSlot){
  Preconditions.checkArgument(direction != null && direction != ForgeDirection.UNKNOWN,""String_Node_Str"");
  TileEntity te=(TileEntity)target;
  IInventory otherInventory=InventoryUtils.getInventory(te.worldObj,te.xCoord,te.yCoord,te.zCoord,direction);
  if (otherInventory == null || otherInventory == target)   return 0;
  if (maxAmount == null)   maxAmount=64;
  if (intoSlot == null)   intoSlot=1;
  return InventoryUtils.moveItemInto(otherInventory,slot - 1,InventoryUtils.getInventory(target),intoSlot - 1,maxAmount,direction.getOpposite(),true);
}","@OnTick @Freeform @Alias(""String_Node_Str"") @LuaCallable(returnTypes=LuaType.NUMBER,description=""String_Node_Str"") public int pullItem(@Named(""String_Node_Str"") IInventory target,@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"") ForgeDirection direction,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") int slot,@Optionals @Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer maxAmount,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer intoSlot){
  Preconditions.checkArgument(direction != null && direction != ForgeDirection.UNKNOWN,""String_Node_Str"");
  TileEntity te=(TileEntity)target;
  IInventory otherInventory=InventoryUtils.getInventory(te.worldObj,te.xCoord,te.yCoord,te.zCoord,direction);
  if (otherInventory == null || otherInventory == target)   return 0;
  if (maxAmount == null)   maxAmount=64;
  if (intoSlot == null)   intoSlot=0;
  return InventoryUtils.moveItemInto(otherInventory,slot - 1,InventoryUtils.getInventory(target),intoSlot - 1,maxAmount,direction.getOpposite(),true);
}"
26510,"@OnTick @Freeform @Alias(""String_Node_Str"") @LuaCallable(returnTypes=LuaType.NUMBER,description=""String_Node_Str"") public int pushItem(@Named(""String_Node_Str"") IInventory target,@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"") ForgeDirection direction,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") int slot,@Optionals @Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer maxAmount,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer intoSlot){
  Preconditions.checkArgument(direction != null && direction != ForgeDirection.UNKNOWN,""String_Node_Str"");
  TileEntity te=(TileEntity)target;
  IInventory otherInventory=InventoryUtils.getInventory(te.worldObj,te.xCoord,te.yCoord,te.zCoord,direction);
  if (otherInventory == null || otherInventory == target)   return 0;
  if (maxAmount == null)   maxAmount=64;
  if (intoSlot == null)   intoSlot=1;
  return InventoryUtils.moveItemInto(InventoryUtils.getInventory(target),slot - 1,otherInventory,intoSlot - 1,maxAmount,direction,true);
}","@OnTick @Freeform @Alias(""String_Node_Str"") @LuaCallable(returnTypes=LuaType.NUMBER,description=""String_Node_Str"") public int pushItem(@Named(""String_Node_Str"") IInventory target,@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"") ForgeDirection direction,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") int slot,@Optionals @Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer maxAmount,@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"") Integer intoSlot){
  Preconditions.checkArgument(direction != null && direction != ForgeDirection.UNKNOWN,""String_Node_Str"");
  TileEntity te=(TileEntity)target;
  IInventory otherInventory=InventoryUtils.getInventory(te.worldObj,te.xCoord,te.yCoord,te.zCoord,direction);
  if (otherInventory == null || otherInventory == target)   return 0;
  if (maxAmount == null)   maxAmount=64;
  if (intoSlot == null)   intoSlot=0;
  return InventoryUtils.moveItemInto(InventoryUtils.getInventory(target),slot - 1,otherInventory,intoSlot - 1,maxAmount,direction,true);
}"
26511,"@LuaMethod(returnType=LuaType.TABLE,onTick=false,description=""String_Node_Str"",args={@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public Map getMinecartData(IComputerAccess computer,ISensorEnvironment env,int minecartId){
  ArrayList<Integer> surroundingCarts=getMobIds(computer,env);
  if (surroundingCarts.contains(minecartId)) {
    Entity cart=env.getWorld().getEntityByID(minecartId);
    return EntityUtils.entityToMap(cart,env.getLocation());
  }
  return null;
}","@LuaMethod(returnType=LuaType.TABLE,onTick=false,description=""String_Node_Str"",args={@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public Map getMinecartData(IComputerAccess computer,ISensorEnvironment env,int minecartId){
  ArrayList<Integer> surroundingCarts=getMinecartIds(computer,env);
  if (surroundingCarts.contains(minecartId)) {
    Entity cart=env.getWorld().getEntityByID(minecartId);
    return EntityUtils.entityToMap(cart,env.getLocation());
  }
  return null;
}"
26512,"public static void entityToMap(Entity entity,HashMap map,Vec3 relativePos){
}","public static void entityToMap(Entity entity,HashMap map,Vec3 relativePos){
  if (entity instanceof IEnergyTransfer) {
    IEnergyTransfer cart=(IEnergyTransfer)entity;
    map.put(""String_Node_Str"",cart.getCapacity());
    map.put(""String_Node_Str"",cart.getEnergy());
    map.put(""String_Node_Str"",cart.getTier());
    map.put(""String_Node_Str"",cart.getTransferLimit());
  }
  if (entity instanceof IExplosiveCart) {
    IExplosiveCart cart=(IExplosiveCart)entity;
    map.put(""String_Node_Str"",cart.isPrimed());
    map.put(""String_Node_Str"",cart.getFuse());
  }
  if (entity instanceof ILinkableCart) {
    ILinkableCart cart=(ILinkableCart)entity;
    EntityMinecart minecart=(EntityMinecart)entity;
    boolean linkable=cart.isLinkable();
    map.put(""String_Node_Str"",linkable);
    if (linkable) {
      int cartCount=CartTools.linkageManager.countCartsInTrain(minecart);
      map.put(""String_Node_Str"",cartCount);
    }
    boolean hasOwner=CartTools.doesCartHaveOwner(minecart);
    map.put(""String_Node_Str"",hasOwner);
    if (hasOwner) {
      map.put(""String_Node_Str"",CartTools.getCartOwner(minecart));
    }
  }
  if (entity instanceof ILiquidTransfer) {
    ILiquidTransfer cart=(ILiquidTransfer)entity;
    map.put(""String_Node_Str"",cart.isFilling());
  }
  if (entity instanceof IPaintedCart) {
    IPaintedCart cart=(IPaintedCart)entity;
    map.put(""String_Node_Str"",cart.getPrimaryColor());
    map.put(""String_Node_Str"",cart.getSecondaryColor());
  }
  if (entity instanceof IRefuelableCart) {
    IRefuelableCart cart=(IRefuelableCart)entity;
    map.put(""String_Node_Str"",cart.needsRefuel());
  }
  if (entity instanceof IRoutableCart) {
    IRoutableCart cart=(IRoutableCart)entity;
    map.put(""String_Node_Str"",cart.getDestination());
  }
}"
26513,"protected Object[] formatParameters(IComputerAccess computer,MethodDeclaration method,Object[] arguments) throws Exception {
  Arg[] requiredParameters=method.getRequiredParameters();
  if (arguments.length != requiredParameters.length) {
    throw new Exception(String.format(""String_Node_Str"",requiredParameters.length));
  }
  for (int i=0; i < requiredParameters.length; i++) {
    if (!requiredParameters[i].type().getJavaType().isAssignableFrom(arguments[i].getClass())) {
      throw new Exception(String.format(""String_Node_Str"",i + 1,requiredParameters[i].name(),requiredParameters[i].type().getName()));
    }
  }
  Class[] requiredJavaParameters=method.getRequiredJavaParameters();
  for (int i=0; i < arguments.length; i++) {
    arguments[i]=TypeConversionRegistry.fromLua(arguments[i],requiredJavaParameters[i]);
  }
  Object[] newArgs=new Object[arguments.length + 2];
  System.arraycopy(arguments,0,newArgs,2,arguments.length);
  newArgs[0]=computer;
  newArgs[1]=getTargetObject();
  return newArgs;
}","protected Object[] formatParameters(IComputerAccess computer,MethodDeclaration method,Object[] arguments) throws Exception {
  Arg[] requiredParameters=method.getRequiredParameters();
  if (arguments.length != requiredParameters.length) {
    throw new Exception(String.format(""String_Node_Str"",requiredParameters.length));
  }
  for (int i=0; i < requiredParameters.length; i++) {
    if (!requiredParameters[i].type().getJavaType().isAssignableFrom(arguments[i].getClass())) {
      throw new Exception(String.format(""String_Node_Str"",i + 1,requiredParameters[i].name(),requiredParameters[i].type().getName()));
    }
  }
  Class<?>[] requiredJavaParameters=method.getRequiredJavaParameters();
  for (int i=0; i < arguments.length; i++) {
    arguments[i]=TypeConversionRegistry.fromLua(arguments[i],requiredJavaParameters[i]);
  }
  Object[] newArgs=new Object[arguments.length + 2];
  System.arraycopy(arguments,0,newArgs,2,arguments.length);
  newArgs[0]=computer;
  newArgs[1]=getTargetObject();
  return newArgs;
}"
26514,"protected Object[] callOnTarget(final IComputerAccess computer,ILuaContext context,final MethodDeclaration method,World worldObj,final Object target,final Object[] parameters) throws Exception {
  if (method.onTick()) {
    Future callback=TickHandler.addTickCallback(worldObj,new Callable(){
      @Override public Object call() throws Exception {
        try {
          Object[] response=formatResponse(method.getMethod().invoke(target,parameters));
          computer.queueEvent(EVENT_SUCCESS,response);
        }
 catch (        Throwable e) {
          computer.queueEvent(EVENT_ERROR,new Object[]{getMessageForThrowable(e)});
        }
        return null;
      }
    }
);
    while (true) {
      Object[] event=context.pullEvent(null);
      String eventName=(String)event[0];
      if (eventName.equals(EVENT_ERROR)) {
        throw new Exception((String)event[1]);
      }
 else       if (eventName.equals(EVENT_SUCCESS)) {
        Object[] response=new Object[event.length - 1];
        System.arraycopy(event,1,response,0,response.length);
        return response;
      }
    }
  }
 else {
    return formatResponse(method.getMethod().invoke(target,parameters));
  }
}","protected Object[] callOnTarget(final IComputerAccess computer,ILuaContext context,final MethodDeclaration method,World worldObj,final Object target,final Object[] parameters) throws Exception {
  if (method.onTick()) {
    TickHandler.addTickCallback(worldObj,new Callable<Object>(){
      @Override public Object call() throws Exception {
        try {
          Object[] response=formatResponse(method.getMethod().invoke(target,parameters));
          computer.queueEvent(EVENT_SUCCESS,response);
        }
 catch (        Throwable e) {
          computer.queueEvent(EVENT_ERROR,new Object[]{getMessageForThrowable(e)});
        }
        return null;
      }
    }
);
    while (true) {
      Object[] event=context.pullEvent(null);
      String eventName=(String)event[0];
      if (eventName.equals(EVENT_ERROR)) {
        throw new Exception((String)event[1]);
      }
 else       if (eventName.equals(EVENT_SUCCESS)) {
        Object[] response=new Object[event.length - 1];
        System.arraycopy(event,1,response,0,response.length);
        return response;
      }
    }
  }
 else {
    try {
      Object[] response=formatResponse(method.getMethod().invoke(target,parameters));
      return response;
    }
 catch (    Throwable e) {
      throw new Exception(getMessageForThrowable(e));
    }
  }
}"
26515,"@LuaMethod(description=""String_Node_Str"",returnType=LuaType.NUMBER,args={@Arg(type=LuaType.TABLE,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"")}) public int extractItem(IComputerAccess computer,Object te,ItemStack stack,ForgeDirection direction){
  if (stack == null) {
    return 0;
  }
  IAEItemStack request=Util.createItemStack(stack);
  if (request == null) {
    return 0;
  }
  IAEItemStack returned=getGrid(te).getCellArray().extractItems(request);
  if (returned == null) {
    return 0;
  }
  IAEItemStack giveBack=null;
  int requestAmount=stack.stackSize;
  if (!(te instanceof TileEntity)) {
    return 0;
  }
  TileEntity tile=(TileEntity)te;
  IInventory inventory=InventoryUtils.getInventory(tile.worldObj,tile.xCoord,tile.yCoord,tile.zCoord,direction);
  if (inventory == null) {
    giveBack=returned.copy();
  }
 else {
    ItemStack returnedStack=returned.getItemStack();
    InventoryUtils.insertItemIntoInventory(inventory,returnedStack);
    giveBack=Util.createItemStack(returnedStack.copy());
  }
  if (giveBack != null) {
    getGrid(te).getCellArray().addItems(giveBack);
  }
  if (giveBack != null) {
    return requestAmount - (int)giveBack.getStackSize();
  }
  return requestAmount;
}","@LuaMethod(description=""String_Node_Str"",returnType=LuaType.NUMBER,args={@Arg(type=LuaType.TABLE,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str"")}) public int extractItem(IComputerAccess computer,Object te,ItemStack stack,ForgeDirection direction){
  if (stack == null) {
    return 0;
  }
  IAEItemStack request=Util.createItemStack(stack);
  if (request == null) {
    return 0;
  }
  IAEItemStack returned=getGrid(te).getCellArray().extractItems(request);
  if (returned == null) {
    return 0;
  }
  IAEItemStack giveBack=null;
  int requestAmount=stack.stackSize;
  if (!(te instanceof TileEntity)) {
    return 0;
  }
  TileEntity tile=(TileEntity)te;
  IInventory inventory=InventoryUtils.getInventory(tile.worldObj,tile.xCoord,tile.yCoord,tile.zCoord,direction);
  if (inventory == null) {
    giveBack=returned.copy();
  }
 else {
    ItemStack returnedStack=returned.getItemStack();
    InventoryUtils.insertItemIntoInventory(inventory,returnedStack,direction.getOpposite());
    giveBack=Util.createItemStack(returnedStack.copy());
  }
  if (giveBack != null) {
    getGrid(te).getCellArray().addItems(giveBack);
  }
  if (giveBack != null) {
    return requestAmount - (int)giveBack.getStackSize();
  }
  return requestAmount;
}"
26516,"@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pullItem(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItem((IInventory)targetTile,slot - 1,(IInventory)tile,maxAmount);
  }
  return merged;
}","@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pullItem(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItem((IInventory)targetTile,slot - 1,(IInventory)tile,maxAmount,direction.getOpposite());
  }
  return merged;
}"
26517,"@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pushItemIntoSlot(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount,int intoSlot) throws Exception {
  int merged=0;
  boolean pull=true;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItemInto((IInventory)tile,slot - 1,(IInventory)targetTile,intoSlot - 1,maxAmount);
  }
  return merged;
}","@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pushItemIntoSlot(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount,int intoSlot) throws Exception {
  int merged=0;
  boolean pull=true;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItemInto((IInventory)tile,slot - 1,(IInventory)targetTile,intoSlot - 1,maxAmount,direction.getOpposite());
  }
  return merged;
}"
26518,"@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pullItemIntoSlot(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount,int intoSlot) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItemInto((IInventory)targetTile,slot - 1,(IInventory)tile,intoSlot - 1,maxAmount);
  }
  return merged;
}","@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pullItemIntoSlot(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount,int intoSlot) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItemInto((IInventory)targetTile,slot - 1,(IInventory)tile,intoSlot - 1,maxAmount,direction.getOpposite());
  }
  return merged;
}"
26519,"@LuaMethod(returnType=LuaType.VOID,description=""String_Node_Str"") public void condenseItems(IComputerAccess computer,IInventory target) throws Exception {
  IInventory invent=(IInventory)target;
  ArrayList<ItemStack> stacks=new ArrayList<ItemStack>();
  for (int i=0; i < invent.getSizeInventory(); i++) {
    ItemStack sta=invent.getStackInSlot(i);
    if (sta != null) {
      stacks.add(sta.copy());
    }
    invent.setInventorySlotContents(i,null);
  }
  for (  ItemStack stack : stacks) {
    InventoryUtils.insertItemIntoInventory(invent,stack);
  }
}","@LuaMethod(returnType=LuaType.VOID,description=""String_Node_Str"") public void condenseItems(IComputerAccess computer,IInventory target) throws Exception {
  IInventory invent=(IInventory)target;
  ArrayList<ItemStack> stacks=new ArrayList<ItemStack>();
  for (int i=0; i < invent.getSizeInventory(); i++) {
    ItemStack sta=invent.getStackInSlot(i);
    if (sta != null) {
      stacks.add(sta.copy());
    }
    invent.setInventorySlotContents(i,null);
  }
  for (  ItemStack stack : stacks) {
    InventoryUtils.insertItemIntoInventory(invent,stack,ForgeDirection.UNKNOWN);
  }
}"
26520,"@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pushItem(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItem((IInventory)tile,slot - 1,(IInventory)targetTile,maxAmount);
  }
  return merged;
}","@LuaMethod(returnType=LuaType.NUMBER,description=""String_Node_Str"",args={@Arg(type=LuaType.STRING,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str""),@Arg(type=LuaType.NUMBER,name=""String_Node_Str"",description=""String_Node_Str"")}) public int pushItem(IComputerAccess computer,IInventory target,ForgeDirection direction,int slot,int maxAmount) throws Exception {
  int merged=0;
  if (target instanceof TileEntity) {
    TileEntity tile=(TileEntity)target;
    if (direction == ForgeDirection.UNKNOWN) {
      return 0;
    }
    TileEntity targetTile=BlockUtils.getTileInDirection(tile,direction);
    if (targetTile == null || !(targetTile instanceof IInventory)) {
      throw new Exception(""String_Node_Str"");
    }
    merged=InventoryUtils.moveItem((IInventory)tile,slot - 1,(IInventory)targetTile,maxAmount,direction.getOpposite());
  }
  return merged;
}"
26521,"public static int moveItem(IInventory fromInventory,int slot,IInventory targetInventory,int maxAmount){
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return 0;
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.insertItemIntoInventory(targetInventory,clonedStack);
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}","public static int moveItem(IInventory fromInventory,int slot,IInventory targetInventory,int maxAmount,ForgeDirection side){
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return 0;
  }
  if (fromInventory instanceof ISidedInventory) {
    if (((ISidedInventory)fromInventory).canExtractItem(slot,stack,side.ordinal())) {
      return 0;
    }
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.insertItemIntoInventory(targetInventory,clonedStack,side.getOpposite());
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}"
26522,"public static void insertItemIntoInventory(IInventory inventory,ItemStack stack){
  int i=0;
  while (stack.stackSize > 0 && i < inventory.getSizeInventory()) {
    tryMergeStacks(inventory,i,stack);
    i++;
  }
}","public static void insertItemIntoInventory(IInventory inventory,ItemStack stack,ForgeDirection side){
  int i=0;
  while (stack.stackSize > 0 && i < inventory.getSizeInventory()) {
    if (side != ForgeDirection.UNKNOWN && inventory instanceof ISidedInventory) {
      if (!((ISidedInventory)inventory).canInsertItem(i,stack,side.ordinal())) {
        i++;
        continue;
      }
    }
    tryMergeStacks(inventory,i,stack);
    i++;
  }
}"
26523,"public static int moveItemInto(IInventory fromInventory,int slot,IInventory targetInventory,int intoSlot,int maxAmount){
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return merged;
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.tryMergeStacks(targetInventory,intoSlot,clonedStack);
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}","public static int moveItemInto(IInventory fromInventory,int slot,IInventory targetInventory,int intoSlot,int maxAmount,ForgeDirection direction){
  if (!InventoryUtils.canMoveItem(fromInventory,targetInventory,slot,intoSlot,direction)) {
    return 0;
  }
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return merged;
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.tryMergeStacks(targetInventory,intoSlot,clonedStack);
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}"
26524,"@LuaMethod public boolean suck(IComputerAccess computer,IRobot robot){
  World worldObj=robot.getWorld();
  Vec3 location=robot.getLocation();
  IInventory inventory=robot.getInventory();
  List<EntityItem> entities=worldObj.getEntitiesWithinAABB(EntityItem.class,AxisAlignedBB.getAABBPool().getAABB(location.xCoord - 2,location.yCoord - 2,location.zCoord - 2,location.xCoord + 3,location.yCoord + 3,location.zCoord + 3));
  for (  EntityItem entity : entities) {
    if (entity.isDead) {
      continue;
    }
    ItemStack stack=entity.getEntityItem();
    if (stack != null) {
      InventoryUtils.insertItemIntoInventory(inventory,stack);
      if (stack.stackSize == 0) {
        entity.setDead();
      }
    }
  }
  return true;
}","@LuaMethod public boolean suck(IComputerAccess computer,IRobot robot){
  World worldObj=robot.getWorld();
  Vec3 location=robot.getLocation();
  IInventory inventory=robot.getInventory();
  List<EntityItem> entities=worldObj.getEntitiesWithinAABB(EntityItem.class,AxisAlignedBB.getAABBPool().getAABB(location.xCoord - 2,location.yCoord - 2,location.zCoord - 2,location.xCoord + 3,location.yCoord + 3,location.zCoord + 3));
  for (  EntityItem entity : entities) {
    if (entity.isDead) {
      continue;
    }
    ItemStack stack=entity.getEntityItem();
    if (stack != null) {
      InventoryUtils.insertItemIntoInventory(inventory,stack,ForgeDirection.UNKNOWN);
      if (stack.stackSize == 0) {
        entity.setDead();
      }
    }
  }
  return true;
}"
26525,"@Override public IHostedPeripheral getPeripheral(TileEntity tile){
  if (tile instanceof TileEntityCommandBlock) {
    return null;
  }
  if (tile instanceof IPeripheral) {
    return null;
  }
  if (tile == null) {
    return null;
  }
  if (tile instanceof IPeripheralProvider) {
    return ((IPeripheralProvider)tile).providePeripheral(tile.worldObj);
  }
  if (!peripherals.containsKey(tile)) {
    peripherals.put(tile,new HostedPeripheral(tile,tile.worldObj));
  }
  if (peripherals.get(tile).getMethodNames().length == 1) {
    return null;
  }
  return peripherals.get(tile);
}","@Override public IHostedPeripheral getPeripheral(TileEntity tile){
  if (tile instanceof TileEntityCommandBlock) {
    return null;
  }
  if (tile instanceof IPeripheral) {
    return null;
  }
  if (tile == null) {
    return null;
  }
  if (tile instanceof IPeripheralProvider) {
    return ((IPeripheralProvider)tile).providePeripheral(tile.worldObj);
  }
  if (!peripherals.containsKey(tile) || tile.isInvalid()) {
    peripherals.put(tile,new HostedPeripheral(tile,tile.worldObj));
  }
  if (peripherals.get(tile).getMethodNames().length == 1) {
    return null;
  }
  return peripherals.get(tile);
}"
26526,"@Override public Object[] callMethod(final IComputerAccess computer,ILuaContext context,int index,Object[] arguments) throws Exception {
  final MethodDeclaration method=methods.get(index);
  final Object[] formattedParameters=formatParameters(computer,method,arguments);
  return callOnTarget(computer,context,method,getWorldObject(),method.getTargetAdapter(),formattedParameters);
}","@Override public Object[] callMethod(final IComputerAccess computer,ILuaContext context,int index,Object[] arguments) throws Exception {
  if (getTargetObject() instanceof TileEntity) {
    TileEntity tile=(TileEntity)getTargetObject();
    targetObject=tile.worldObj.getBlockTileEntity(tile.xCoord,tile.yCoord,tile.zCoord);
  }
  final MethodDeclaration method=methods.get(index);
  final Object[] formattedParameters=formatParameters(computer,method,arguments);
  return callOnTarget(computer,context,method,getWorldObject(),method.getTargetAdapter(),formattedParameters);
}"
26527,"public static int moveItem(IInventory fromInventory,int slot,IInventory targetInventory,int maxAmount,ForgeDirection side){
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return 0;
  }
  if (fromInventory instanceof ISidedInventory) {
    if (((ISidedInventory)fromInventory).canExtractItem(slot,stack,side.ordinal())) {
      return 0;
    }
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.insertItemIntoInventory(targetInventory,clonedStack,side.getOpposite());
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}","public static int moveItem(IInventory fromInventory,int slot,IInventory targetInventory,int maxAmount,ForgeDirection side){
  int merged=0;
  ItemStack stack=fromInventory.getStackInSlot(slot);
  if (stack == null) {
    return 0;
  }
  if (fromInventory instanceof ISidedInventory) {
    if (!((ISidedInventory)fromInventory).canExtractItem(slot,stack,side.ordinal())) {
      return 0;
    }
  }
  ItemStack clonedStack=stack.copy();
  clonedStack.stackSize=Math.min(clonedStack.stackSize,maxAmount);
  int amountToMerge=clonedStack.stackSize;
  InventoryUtils.insertItemIntoInventory(targetInventory,clonedStack,side.getOpposite());
  merged=(amountToMerge - clonedStack.stackSize);
  fromInventory.decrStackSize(slot,merged);
  return merged;
}"
26528,"public ModelRobot(){
  textureWidth=128;
  textureHeight=32;
  shoulderright=new ModelRenderer(this,24,12);
  shoulderright.addBox(3F,-4F,-2F,6,4,4);
  shoulderright.setRotationPoint(0F,0F,0F);
  shoulderright.setTextureSize(128,32);
  shoulderright.mirror=true;
  setRotation(shoulderright,0.1858931F,0F,0F);
  head=new ModelRenderer(this,40,20);
  head.addBox(-3F,-6F,-3F,6,6,6);
  head.setRotationPoint(0F,0F,0F);
  head.setTextureSize(128,32);
  head.mirror=true;
  setRotation(head,0.1570796F,0F,0F);
  shoulderleft=new ModelRenderer(this,44,12);
  shoulderleft.addBox(-9F,-4F,-2F,6,4,4);
  shoulderleft.setRotationPoint(0F,0F,0F);
  shoulderleft.setTextureSize(128,32);
  shoulderleft.mirror=true;
  setRotation(shoulderleft,0.1858931F,0F,0F);
  pelvis=new ModelRenderer(this,0,18);
  pelvis.addBox(-4F,0F,-1.5F,8,2,3);
  pelvis.setRotationPoint(0F,5F,0F);
  pelvis.setTextureSize(128,32);
  pelvis.mirror=true;
  setRotation(pelvis,0F,0F,0F);
  bodybolt=new ModelRenderer(this,24,26);
  bodybolt.addBox(-2F,0F,-2F,4,2,4);
  bodybolt.setRotationPoint(0F,0F,0F);
  bodybolt.setTextureSize(128,32);
  bodybolt.mirror=true;
  setRotation(bodybolt,0F,0F,0F);
  body=new ModelRenderer(this,36,7);
  body.addBox(-1F,2F,-1F,2,3,2);
  body.setRotationPoint(0F,0F,0F);
  body.setTextureSize(128,32);
  body.mirror=true;
  setRotation(body,0F,0F,0F);
  leg2=new ModelRenderer(this,12,23);
  leg2.addBox(2F,0F,-1.5F,3,6,3);
  leg2.setRotationPoint(0F,7F,0F);
  leg2.setTextureSize(128,32);
  leg2.mirror=true;
  setRotation(leg2,0F,0F,0F);
  legpart4=new ModelRenderer(this,82,0);
  legpart4.addBox(4.5F,0F,-1F,1,8,2);
  legpart4.setRotationPoint(0F,12F,0F);
  legpart4.setTextureSize(128,32);
  legpart4.mirror=true;
  setRotation(legpart4,0F,0F,0F);
  leg1=new ModelRenderer(this,0,23);
  leg1.addBox(-5F,0F,-1.5F,3,6,3);
  leg1.setRotationPoint(0F,7F,0F);
  leg1.setTextureSize(128,32);
  leg1.mirror=true;
  setRotation(leg1,0F,0F,0F);
  legpart3=new ModelRenderer(this,76,0);
  legpart3.addBox(1.5F,0F,-1F,1,8,2);
  legpart3.setRotationPoint(0F,12F,0F);
  legpart3.setTextureSize(128,32);
  legpart3.mirror=true;
  setRotation(legpart3,0F,0F,0F);
  legpart1=new ModelRenderer(this,70,0);
  legpart1.addBox(-5.5F,0F,-1F,1,8,2);
  legpart1.setRotationPoint(0F,12F,0F);
  legpart1.setTextureSize(128,32);
  legpart1.mirror=true;
  setRotation(legpart1,0F,0F,0F);
  legpart2=new ModelRenderer(this,64,0);
  legpart2.addBox(-2.5F,0F,-1F,1,8,2);
  legpart2.setRotationPoint(0F,12F,0F);
  legpart2.setTextureSize(128,32);
  legpart2.mirror=true;
  setRotation(legpart2,0F,0F,0F);
  foot2=new ModelRenderer(this,96,24);
  foot2.addBox(2.5F,0F,-4.5F,2,2,6);
  foot2.setRotationPoint(0F,19F,0F);
  foot2.setTextureSize(128,32);
  foot2.mirror=true;
  setRotation(foot2,0F,0F,0F);
  foot1=new ModelRenderer(this,112,24);
  foot1.addBox(-4.5F,0F,-4.5F,2,2,6);
  foot1.setRotationPoint(0F,19F,0F);
  foot1.setTextureSize(128,32);
  foot1.mirror=true;
  setRotation(foot1,0F,0F,0F);
  longarm=new ModelRenderer(this,0,0);
  longarm.addBox(9F,-3F,-1.5F,2,14,2);
  longarm.setRotationPoint(0F,0F,0F);
  longarm.setTextureSize(128,32);
  longarm.mirror=true;
  setRotation(longarm,0F,0F,0F);
  gun=new ModelRenderer(this,12,0);
  gun.addBox(-2F,-2F,-9F,4,4,8);
  gun.setRotationPoint(-10F,2F,0F);
  gun.setTextureSize(128,32);
  gun.mirror=true;
  setRotation(gun,0F,0F,0F);
  shortarm=new ModelRenderer(this,36,0);
  shortarm.addBox(-11F,-3F,-1F,2,5,2);
  shortarm.setRotationPoint(0F,0F,-0.5F);
  shortarm.setTextureSize(128,32);
  shortarm.mirror=true;
  setRotation(shortarm,0F,0F,0F);
  melee=new ModelRenderer(this,60,0);
  melee.addBox(11F,6F,-1F,1,10,1);
  melee.setRotationPoint(0F,0F,0F);
  melee.setTextureSize(128,32);
  melee.mirror=true;
  setRotation(melee,0F,0F,0F);
}","public ModelRobot(){
  textureWidth=128;
  textureHeight=32;
  shoulderright=new ModelRenderer(this,24,12);
  shoulderright.addBox(3F,-4F,-2F,6,4,4);
  shoulderright.setRotationPoint(0F,0F,0F);
  shoulderright.setTextureSize(128,32);
  shoulderright.mirror=true;
  setRotation(shoulderright,0.1858931F,0F,0F);
  head=new ModelRenderer(this,40,20);
  head.addBox(-3F,-6F,-3F,6,6,6);
  head.setRotationPoint(0F,0F,0F);
  head.setTextureSize(128,32);
  head.mirror=true;
  setRotation(head,0.1570796F,0F,0F);
  shoulderleft=new ModelRenderer(this,44,12);
  shoulderleft.addBox(-9F,-4F,-2F,6,4,4);
  shoulderleft.setRotationPoint(0F,0F,0F);
  shoulderleft.setTextureSize(128,32);
  shoulderleft.mirror=true;
  setRotation(shoulderleft,0.1858931F,0F,0F);
  pelvis=new ModelRenderer(this,0,18);
  pelvis.addBox(-4F,0F,-1.5F,8,2,3);
  pelvis.setRotationPoint(0F,5F,0F);
  pelvis.setTextureSize(128,32);
  pelvis.mirror=true;
  setRotation(pelvis,0F,0F,0F);
  bodybolt=new ModelRenderer(this,24,26);
  bodybolt.addBox(-2F,0F,-2F,4,2,4);
  bodybolt.setRotationPoint(0F,0F,0F);
  bodybolt.setTextureSize(128,32);
  bodybolt.mirror=true;
  setRotation(bodybolt,0F,0F,0F);
  body=new ModelRenderer(this,36,7);
  body.addBox(-1F,2F,-1F,2,3,2);
  body.setRotationPoint(0F,0F,0F);
  body.setTextureSize(128,32);
  body.mirror=true;
  setRotation(body,0F,0F,0F);
  leg2=new ModelRenderer(this,12,23);
  leg2.addBox(2F,0F,-1.5F,3,6,3);
  leg2.setRotationPoint(0F,7F,0F);
  leg2.setTextureSize(128,32);
  leg2.mirror=true;
  setRotation(leg2,0F,0F,0F);
  legpart4=new ModelRenderer(this,82,0);
  legpart4.addBox(4.5F,0F,-1F,1,8,2);
  legpart4.setRotationPoint(0F,12F,0F);
  legpart4.setTextureSize(128,32);
  legpart4.mirror=true;
  setRotation(legpart4,0F,0F,0F);
  leg1=new ModelRenderer(this,0,23);
  leg1.addBox(-5F,0F,-1.5F,3,6,3);
  leg1.setRotationPoint(0F,7F,0F);
  leg1.setTextureSize(128,32);
  leg1.mirror=true;
  setRotation(leg1,0F,0F,0F);
  legpart3=new ModelRenderer(this,76,0);
  legpart3.addBox(1.5F,0F,-1F,1,8,2);
  legpart3.setRotationPoint(0F,12F,0F);
  legpart3.setTextureSize(128,32);
  legpart3.mirror=true;
  setRotation(legpart3,0F,0F,0F);
  legpart1=new ModelRenderer(this,70,0);
  legpart1.addBox(-5.5F,0F,-1F,1,8,2);
  legpart1.setRotationPoint(0F,12F,0F);
  legpart1.setTextureSize(128,32);
  legpart1.mirror=true;
  setRotation(legpart1,0F,0F,0F);
  legpart2=new ModelRenderer(this,64,0);
  legpart2.addBox(-2.5F,0F,-1F,1,8,2);
  legpart2.setRotationPoint(0F,12F,0F);
  legpart2.setTextureSize(128,32);
  legpart2.mirror=true;
  setRotation(legpart2,0F,0F,0F);
  foot2=new ModelRenderer(this,96,24);
  foot2.addBox(2.5F,0F,-4.5F,2,2,6);
  foot2.setRotationPoint(0F,19F,0F);
  foot2.setTextureSize(128,32);
  foot2.mirror=true;
  setRotation(foot2,0F,0F,0F);
  foot1=new ModelRenderer(this,112,24);
  foot1.addBox(-4.5F,0F,-4.5F,2,2,6);
  foot1.setRotationPoint(0F,19F,0F);
  foot1.setTextureSize(128,32);
  foot1.mirror=true;
  setRotation(foot1,0F,0F,0F);
  longarm=new ModelRenderer(this,0,0);
  longarm.addBox(9F,-3F,-1.5F,2,14,2);
  longarm.setRotationPoint(0F,0F,0F);
  longarm.setTextureSize(128,32);
  longarm.mirror=true;
  setRotation(longarm,0F,0F,0F);
  gun=new ModelRendererGun(this,12,0);
  gun.addBox(-2F,-2F,-9F,4,4,8);
  gun.setRotationPoint(-10F,2F,0F);
  gun.setTextureSize(128,32);
  gun.mirror=true;
  setRotation(gun,0F,0F,0F);
  shortarm=new ModelRenderer(this,36,0);
  shortarm.addBox(-11F,-3F,-1F,2,5,2);
  shortarm.setRotationPoint(0F,0F,-0.5F);
  shortarm.setTextureSize(128,32);
  shortarm.mirror=true;
  setRotation(shortarm,0F,0F,0F);
  melee=new ModelRenderer(this,60,0);
  melee.addBox(11F,6F,-1F,1,10,1);
  melee.setRotationPoint(0F,0F,0F);
  melee.setTextureSize(128,32);
  melee.mirror=true;
  setRotation(melee,0F,0F,0F);
}"
26529,"public void setRotationAngles(float par1,float par2,float par3,float par4,float par5,float par6,Entity entity){
  if (entity instanceof EntityRobot) {
    EntityRobot robot=(EntityRobot)entity;
    head.rotateAngleY=par4 / (180F / (float)Math.PI);
    shoulderleft.rotateAngleY=head.rotateAngleY;
    shoulderright.rotateAngleY=head.rotateAngleY;
    longarm.rotateAngleY=head.rotateAngleY;
    melee.rotateAngleY=head.rotateAngleY;
    shortarm.rotateAngleY=head.rotateAngleY;
    float z=(float)(head.rotationPointZ + 10.0F * Math.sin(head.rotateAngleY));
    float x=(float)(head.rotationPointX - 10.0F * Math.cos(head.rotateAngleY));
    gun.rotationPointX=x;
    gun.rotationPointZ=z;
    gun.rotateAngleZ=head.rotateAngleZ;
    gun.rotateAngleX=0;
    gun.rotateAngleY=head.rotateAngleY;
    par2*=1.2;
    leg1.rotateAngleX=MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
    rotateLeg(par1,par2,leg1,legpart1,legpart2,foot1);
    leg2.rotateAngleX=MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
    rotateLeg(par1,par2,leg2,legpart3,legpart4,foot2);
  }
}","public void setRotationAngles(float par1,float par2,float par3,float par4,float par5,float par6,Entity entity){
  if (entity instanceof EntityRobot) {
    EntityRobot robot=(EntityRobot)entity;
    head.rotateAngleY=par4 / (180F / (float)Math.PI);
    shoulderleft.rotateAngleY=head.rotateAngleY;
    shoulderright.rotateAngleY=head.rotateAngleY;
    longarm.rotateAngleY=head.rotateAngleY;
    melee.rotateAngleY=head.rotateAngleY;
    shortarm.rotateAngleY=head.rotateAngleY;
    float z=(float)(head.rotationPointZ + 10.0F * Math.sin(head.rotateAngleY));
    float x=(float)(head.rotationPointX - 10.0F * Math.cos(head.rotateAngleY));
    gun.rotationPointX=x;
    gun.rotationPointZ=z;
    gun.rotateAngleX=0;
    gun.rotateAngleY=head.rotateAngleY;
    gun.rotateAngleZ=robot.getWeaponSpin();
    par2*=1.2;
    leg1.rotateAngleX=MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
    rotateLeg(par1,par2,leg1,legpart1,legpart2,foot1);
    leg2.rotateAngleX=MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
    rotateLeg(par1,par2,leg2,legpart3,legpart4,foot2);
  }
}"
26530,"public void onEntityUpdate(){
  super.onEntityUpdate();
  if (!worldObj.isRemote) {
    if (!this.isDead) {
      TileEntityRobot controller=getController();
      if (controller == null) {
        this.setDead();
      }
    }
  }
}","public void onEntityUpdate(){
  super.onEntityUpdate();
  if (!worldObj.isRemote) {
    if (!this.isDead) {
      TileEntityRobot controller=getController();
      if (controller == null) {
        this.setDead();
      }
    }
  }
 else {
    this.weaponSpin+=.1f;
  }
}"
26531,"@ForgeSubscribe public void onRenderGameOverlay(RenderGameOverlayEvent evt){
  for (  IDrawable drawable : drawableList) {
    drawable.draw(evt.partialTicks,evt.mouseX,evt.mouseY);
  }
}","@ForgeSubscribe public void onRenderGameOverlay(RenderGameOverlayEvent evt){
  if (evt.type == ElementType.HELMET && evt instanceof RenderGameOverlayEvent.Post) {
    for (    IDrawable drawable : drawableList) {
      drawable.draw(evt.partialTicks,evt.mouseX,evt.mouseY);
    }
  }
}"
26532,"public HashMap getAllIds(){
  try {
    lock.lock();
    try {
      HashMap all=new HashMap();
      int i=1;
      for (      Short id : drawables.keySet()) {
        all.put(i++,id);
      }
      return all;
    }
  finally {
      lock.unlock();
    }
  }
 catch (  Exception ex) {
  }
  return null;
}","public Short[] getAllIds(){
  try {
    lock.lock();
    try {
      return drawables.keySet().toArray(new Short[drawables.size()]);
    }
  finally {
      lock.unlock();
    }
  }
 catch (  Exception ex) {
  }
  return null;
}"
26533,"@Override public Object toLua(Object o){
  if (o instanceof Double || o instanceof Integer) {
    return o;
  }
  return null;
}","@Override public Object toLua(Object o){
  if (o instanceof Double || o instanceof Integer || o instanceof Short) {
    return o;
  }
  return null;
}"
26534,"@ForgeSubscribe public void onRenderGameOverlay(RenderGameOverlayEvent evt){
  for (  IDrawable drawable : drawableList) {
    drawable.draw(evt.partialTicks,evt.mouseX,evt.mouseY);
  }
}","@ForgeSubscribe public void onRenderGameOverlay(RenderGameOverlayEvent evt){
  if (evt.type == ElementType.HELMET && evt instanceof RenderGameOverlayEvent.Post) {
    for (    IDrawable drawable : drawableList) {
      drawable.draw(evt.partialTicks,evt.mouseX,evt.mouseY);
    }
  }
}"
26535,"public HashMap getAllIds(){
  try {
    lock.lock();
    try {
      HashMap all=new HashMap();
      int i=1;
      for (      Short id : drawables.keySet()) {
        all.put(i++,id);
      }
      return all;
    }
  finally {
      lock.unlock();
    }
  }
 catch (  Exception ex) {
  }
  return null;
}","public Short[] getAllIds(){
  try {
    lock.lock();
    try {
      return drawables.keySet().toArray(new Short[drawables.size()]);
    }
  finally {
      lock.unlock();
    }
  }
 catch (  Exception ex) {
  }
  return null;
}"
26536,"@Override public Object toLua(Object o){
  if (o instanceof Double || o instanceof Integer) {
    return o;
  }
  return null;
}","@Override public Object toLua(Object o){
  if (o instanceof Double || o instanceof Integer || o instanceof Short) {
    return o;
  }
  return null;
}"
26537,"@Override public Object[] callMethod(IComputerAccess computer,int methodId,Object[] arguments) throws Exception {
  boolean isCableCall=mySecurityManager.getCallerClassName(2) == ""String_Node_Str"";
  final DefinitionMethod methodDefinition=methods.get(methodId);
  if (methodDefinition != null) {
    if (methodDefinition.getCallType() == CallType.SCRIPT) {
      final TileEntity tile=worldObj.getBlockTileEntity(x,y,z);
      Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,arguments));
      PostChangeRegistry.onPostChange(tile,methodDefinition,arguments);
      return new Object[]{response};
    }
    ArrayList<Object> args=new ArrayList(Arrays.asList(arguments));
    Class[] requiredParameters=methodDefinition.getRequiredParameters();
    HashMap<Integer,String> toReplace=methodDefinition.getReplacements();
    for (    Entry<Integer,String> replacement : toReplace.entrySet()) {
      String r=replacement.getValue();
      Object v=null;
      if (r.equals(""String_Node_Str"")) {
        v=x;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=y;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=z;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=worldObj;
      }
      if (v != null) {
        args.add(replacement.getKey(),v);
      }
    }
    if (args.size() != requiredParameters.length) {
      throw new Exception(""String_Node_Str"" + (requiredParameters.length - toReplace.size()));
    }
    for (int i=0; i < requiredParameters.length; i++) {
      Object converted=TypeConversionRegistry.fromLua(args.get(i),requiredParameters[i]);
      if (converted == null) {
        throw new Exception(""String_Node_Str"" + (i + 1));
      }
      args.set(i,converted);
    }
    for (int i=0; i < args.size(); i++) {
      ArrayList<IRestriction> restrictions=methodDefinition.getRestrictions(i);
      if (restrictions != null) {
        for (        IRestriction restriction : restrictions) {
          if (!restriction.isValid(args.get(i))) {
            throw new Exception(restriction.getErrorMessage(i + 1));
          }
        }
      }
    }
    final TileEntity tile=worldObj.getBlockTileEntity(x,y,z);
    final Object[] argsToUse=args.toArray(new Object[args.size()]);
    if (isCableCall) {
      Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,argsToUse));
      PostChangeRegistry.onPostChange(tile,methodDefinition,argsToUse);
      return new Object[]{response};
    }
 else {
      Future callback=TickHandler.addTickCallback(tile.worldObj,new Callable(){
        @Override public Object call() throws Exception {
          Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,argsToUse));
          PostChangeRegistry.onPostChange(tile,methodDefinition,argsToUse);
          return response;
        }
      }
);
      return new Object[]{callback.get()};
    }
  }
  return null;
}","@Override public Object[] callMethod(IComputerAccess computer,int methodId,Object[] arguments) throws Exception {
  boolean isCableCall=mySecurityManager.getCallerClassName(2) == ""String_Node_Str"";
  final DefinitionMethod methodDefinition=methods.get(methodId);
  if (methodDefinition != null) {
    if (methodDefinition.getCallType() == CallType.SCRIPT) {
      final TileEntity tile=worldObj.getBlockTileEntity(x,y,z);
      Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,arguments));
      return new Object[]{response};
    }
    ArrayList<Object> args=new ArrayList(Arrays.asList(arguments));
    Class[] requiredParameters=methodDefinition.getRequiredParameters();
    HashMap<Integer,String> toReplace=methodDefinition.getReplacements();
    for (    Entry<Integer,String> replacement : toReplace.entrySet()) {
      String r=replacement.getValue();
      Object v=null;
      if (r.equals(""String_Node_Str"")) {
        v=x;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=y;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=z;
      }
 else       if (r.equals(""String_Node_Str"")) {
        v=worldObj;
      }
      if (v != null) {
        args.add(replacement.getKey(),v);
      }
    }
    if (args.size() != requiredParameters.length) {
      throw new Exception(""String_Node_Str"" + (requiredParameters.length - toReplace.size()));
    }
    for (int i=0; i < requiredParameters.length; i++) {
      Object converted=TypeConversionRegistry.fromLua(args.get(i),requiredParameters[i]);
      if (converted == null) {
        throw new Exception(""String_Node_Str"" + (i + 1));
      }
      args.set(i,converted);
    }
    for (int i=0; i < args.size(); i++) {
      ArrayList<IRestriction> restrictions=methodDefinition.getRestrictions(i);
      if (restrictions != null) {
        for (        IRestriction restriction : restrictions) {
          if (!restriction.isValid(args.get(i))) {
            throw new Exception(restriction.getErrorMessage(i + 1));
          }
        }
      }
    }
    final TileEntity tile=worldObj.getBlockTileEntity(x,y,z);
    final Object[] argsToUse=args.toArray(new Object[args.size()]);
    if (isCableCall) {
      Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,argsToUse));
      PostChangeRegistry.onPostChange(tile,methodDefinition,argsToUse);
      return new Object[]{response};
    }
 else {
      Future callback=TickHandler.addTickCallback(tile.worldObj,new Callable(){
        @Override public Object call() throws Exception {
          Object response=TypeConversionRegistry.toLua(methodDefinition.execute(tile,argsToUse));
          PostChangeRegistry.onPostChange(tile,methodDefinition,argsToUse);
          return response;
        }
      }
);
      return new Object[]{callback.get()};
    }
  }
  return null;
}"
26538,"private Object executeScript(TileEntity tile,Object[] args){
  String script=this.getScript();
  if (script != null) {
    try {
      this.engine.put(""String_Node_Str"",tile);
      this.engine.put(""String_Node_Str"",tile.xCoord);
      this.engine.put(""String_Node_Str"",tile.yCoord);
      this.engine.put(""String_Node_Str"",tile.zCoord);
      this.engine.put(""String_Node_Str"",args);
      this.engine.put(""String_Node_Str"",tile.worldObj);
      this.engine.put(""String_Node_Str"",this);
      return this.engine.eval(script);
    }
 catch (    ScriptException e) {
      e.printStackTrace();
    }
  }
  return null;
}","private Object executeScript(TileEntity tile,Object[] args){
  String script=this.getScript();
  if (script != null) {
    script=new String(Base64.decode(script));
    try {
      this.engine.put(""String_Node_Str"",tile);
      this.engine.put(""String_Node_Str"",tile.xCoord);
      this.engine.put(""String_Node_Str"",tile.yCoord);
      this.engine.put(""String_Node_Str"",tile.zCoord);
      this.engine.put(""String_Node_Str"",args);
      this.engine.put(""String_Node_Str"",tile.worldObj);
      this.engine.put(""String_Node_Str"",this);
      return this.engine.eval(script);
    }
 catch (    ScriptException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
26539,"@Override public void execute(TileEntity tile,DefinitionMethod luaMethod,Object[] values){
  Class c=tile.getClass();
  String script=luaMethod.getPostScript();
  if (script != null) {
    try {
      this.engine.put(""String_Node_Str"",tile);
      this.engine.put(""String_Node_Str"",tile.xCoord);
      this.engine.put(""String_Node_Str"",tile.yCoord);
      this.engine.put(""String_Node_Str"",tile.zCoord);
      this.engine.put(""String_Node_Str"",luaMethod);
      this.engine.put(""String_Node_Str"",values);
      this.engine.put(""String_Node_Str"",tile.worldObj);
      this.engine.put(""String_Node_Str"",this);
      this.engine.eval(script);
    }
 catch (    ScriptException e) {
      e.printStackTrace();
    }
  }
}","@Override public void execute(TileEntity tile,DefinitionMethod luaMethod,Object[] values){
  Class c=tile.getClass();
  String script=luaMethod.getPostScript();
  if (script != null) {
    script=new String(Base64.decode(script));
    try {
      this.engine.put(""String_Node_Str"",tile);
      this.engine.put(""String_Node_Str"",tile.xCoord);
      this.engine.put(""String_Node_Str"",tile.yCoord);
      this.engine.put(""String_Node_Str"",tile.zCoord);
      this.engine.put(""String_Node_Str"",luaMethod);
      this.engine.put(""String_Node_Str"",values);
      this.engine.put(""String_Node_Str"",tile.worldObj);
      this.engine.put(""String_Node_Str"",this);
      this.engine.eval(script);
    }
 catch (    ScriptException e) {
      e.printStackTrace();
    }
  }
}"
26540,"@Override public void onGroupSelected(Group group){
  CellListFragment listFragment=(CellListFragment)getSupportFragmentManager().findFragmentById(R.id.cellListFragment);
  if (listFragment == null) {
    Intent i=new Intent(getApplicationContext(),CellListActivity.class);
    i.putExtra(INTENT_SWITCH_GROUP,group);
    startActivity(i);
  }
 else {
    listFragment.setGroup(group);
  }
}","@Override public void onGroupSelected(Group group){
  CellListFragment listFragment=(CellListFragment)getSupportFragmentManager().findFragmentById(R.id.cellListFragment);
  if (listFragment == null || !listFragment.isInLayout()) {
    Intent i=new Intent(getApplicationContext(),CellListActivity.class);
    i.putExtra(INTENT_SWITCH_GROUP,group);
    startActivity(i);
  }
 else {
    listFragment.setGroup(group);
  }
}"
26541,"@Override public boolean onQueryTextChange(String query){
  adapter.setQueryCells(helper.getQueryCells(group,query),query);
  return true;
}","@Override public boolean onQueryTextChange(String query){
  if (adapter != null)   adapter.setQueryCells(helper.getQueryCells(group,query),query);
  return true;
}"
26542,"@Override public void onGroupSelected(Group group){
  CellListFragment listFragment=(CellListFragment)getSupportFragmentManager().findFragmentById(R.id.cellListFragment);
  if (listFragment == null) {
    Intent i=new Intent(getApplicationContext(),CellListActivity.class);
    i.putExtra(INTENT_SWITCH_GROUP,group);
    startActivity(i);
  }
 else {
    listFragment.setGroup(group);
  }
}","@Override public void onGroupSelected(Group group){
  CellListFragment listFragment=(CellListFragment)getSupportFragmentManager().findFragmentById(R.id.cellListFragment);
  if (listFragment == null || !listFragment.isInLayout()) {
    Intent i=new Intent(getApplicationContext(),CellListActivity.class);
    i.putExtra(INTENT_SWITCH_GROUP,group);
    startActivity(i);
  }
 else {
    listFragment.setGroup(group);
  }
}"
26543,"@Override public boolean onQueryTextChange(String query){
  adapter.setQueryCells(helper.getQueryCells(group,query),query);
  return true;
}","@Override public boolean onQueryTextChange(String query){
  if (adapter != null)   adapter.setQueryCells(helper.getQueryCells(group,query),query);
  return true;
}"
26544,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  CellData cell=cells.get(position);
  CellCollection.getInstance().setCurrentCell(cell);
  Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
  startActivity(i);
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  CellData cell=cells.get(position);
  CellCollection.getInstance().setCurrentCell(cell);
  Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
  startActivity(i);
}"
26545,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  View dialogView=getActivity().getLayoutInflater().inflate(R.layout.dialog_new,null);
  title=(EditText)dialogView.findViewById(R.id.insert_cell_title);
  group=(EditText)dialogView.findViewById(R.id.insert_cell_group);
  input=(EditText)dialogView.findViewById(R.id.insert_cell_input);
  return new AlertDialog.Builder(getActivity()).setView(dialogView).setTitle(R.string.add_new_title).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      CellData newCell=new CellData();
      if (title.getText().toString().equals(""String_Node_Str"")) {
        Date date=new Date();
        DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
        newCell.title=dateFormat.format(date);
      }
 else {
        newCell.title=title.getText().toString();
      }
      if (group.getText().toString().equals(""String_Node_Str"")) {
        newCell.group=""String_Node_Str"";
      }
 else {
        newCell.group=group.getText().toString();
      }
      if (input.getText().toString().equals(""String_Node_Str"")) {
        Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
 else {
        newCell.input=input.getText().toString();
      }
      newCell.rank=(int)Math.random() * 30;
      CellCollection.getInstance().addCell(newCell);
      CellCollection.getInstance().setCurrentCell(newCell);
      Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
    }
  }
).setNegativeButton(android.R.string.cancel,null).create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  View dialogView=getActivity().getLayoutInflater().inflate(R.layout.dialog_new,null);
  title=(EditText)dialogView.findViewById(R.id.insert_cell_title);
  group=(EditText)dialogView.findViewById(R.id.insert_cell_group);
  input=(EditText)dialogView.findViewById(R.id.insert_cell_input);
  return new AlertDialog.Builder(getActivity()).setView(dialogView).setTitle(R.string.add_new_title).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      CellData newCell=new CellData();
      if (title.getText().toString().equals(""String_Node_Str"")) {
        Date date=new Date();
        DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
        newCell.title=dateFormat.format(date);
      }
 else {
        newCell.title=title.getText().toString();
      }
      if (group.getText().toString().equals(""String_Node_Str"")) {
        newCell.group=""String_Node_Str"";
      }
 else {
        newCell.group=group.getText().toString();
      }
      if (input.getText().toString().equals(""String_Node_Str"")) {
        Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
 else {
        newCell.input=input.getText().toString();
      }
      newCell.rank=(int)Math.random() * 30;
      CellCollection.getInstance().addCell(newCell);
      CellCollection.getInstance().setCurrentCell(newCell);
      Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
      i.putExtra(""String_Node_Str"",true);
      i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      startActivity(i);
    }
  }
).setNegativeButton(android.R.string.cancel,null).create();
}"
26546,"@Override public void onClick(DialogInterface dialog,int which){
  CellData newCell=new CellData();
  if (title.getText().toString().equals(""String_Node_Str"")) {
    Date date=new Date();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    newCell.title=dateFormat.format(date);
  }
 else {
    newCell.title=title.getText().toString();
  }
  if (group.getText().toString().equals(""String_Node_Str"")) {
    newCell.group=""String_Node_Str"";
  }
 else {
    newCell.group=group.getText().toString();
  }
  if (input.getText().toString().equals(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
 else {
    newCell.input=input.getText().toString();
  }
  newCell.rank=(int)Math.random() * 30;
  CellCollection.getInstance().addCell(newCell);
  CellCollection.getInstance().setCurrentCell(newCell);
  Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
  i.putExtra(""String_Node_Str"",true);
  startActivity(i);
}","@Override public void onClick(DialogInterface dialog,int which){
  CellData newCell=new CellData();
  if (title.getText().toString().equals(""String_Node_Str"")) {
    Date date=new Date();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    newCell.title=dateFormat.format(date);
  }
 else {
    newCell.title=title.getText().toString();
  }
  if (group.getText().toString().equals(""String_Node_Str"")) {
    newCell.group=""String_Node_Str"";
  }
 else {
    newCell.group=group.getText().toString();
  }
  if (input.getText().toString().equals(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
 else {
    newCell.input=input.getText().toString();
  }
  newCell.rank=(int)Math.random() * 30;
  CellCollection.getInstance().addCell(newCell);
  CellCollection.getInstance().setCurrentCell(newCell);
  Intent i=new Intent(getActivity().getApplicationContext(),SageActivity.class);
  i.putExtra(""String_Node_Str"",true);
  i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
  startActivity(i);
}"
26547,"@Override public void run(){
  Exception ex=null;
  try {
    UserGroupInformation user=UserGroupInformation.createRemoteUser(container.getId().toString());
    String cmIpPortStr=container.getNodeId().getHost() + ""String_Node_Str"" + container.getNodeId().getPort();
    final InetSocketAddress cmAddress=NetUtils.createSocketAddr(cmIpPortStr);
    org.apache.hadoop.yarn.api.records.Token containerToken=container.getContainerToken();
    if (containerToken != null) {
      Token<ContainerTokenIdentifier> token=ConverterUtils.convertFromYarn(containerToken,cmAddress);
      user.addToken(token);
    }
    log.debug(""String_Node_Str"",container.getId(),containerRole);
    ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);
    provider.buildContainerLaunchContext(ctx,fs,generatedConfDirPath,containerRole,clusterSpec,roleOptions);
    String commandLine=ctx.getCommands().get(0);
    RoleInstance instance=new RoleInstance(container);
    instance.buildUUID();
    log.info(""String_Node_Str"",HoyaUtils.join(ctx.getCommands(),""String_Node_Str""));
    Map<String,LocalResource> lr=ctx.getLocalResources();
    List<String> nodeEnv=new ArrayList<String>();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",lr.size());
      for (      Map.Entry<String,LocalResource> entry : lr.entrySet()) {
        String key=entry.getKey();
        LocalResource val=entry.getValue();
        String envElt=key + ""String_Node_Str"" + HoyaUtils.stringify(val.getResource());
        log.debug(envElt);
      }
    }
    Map<String,String> environment=ctx.getEnvironment();
    environment.putAll(envVars);
    log.debug(""String_Node_Str"",environment.size());
    for (    Map.Entry<String,String> env : environment.entrySet()) {
      String envElt=String.format(""String_Node_Str"",env.getKey(),env.getValue());
      log.debug(envElt);
      nodeEnv.add(envElt);
    }
    instance.command=HoyaUtils.join(ctx.getCommands(),""String_Node_Str"");
    instance.role=containerRole;
    instance.roleId=role.id;
    instance.environment=nodeEnv.toArray(new String[nodeEnv.size()]);
    containerStarter.startContainer(container,ctx,instance);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + containerRole + ""String_Node_Str""+ e,e);
    ex=e;
  }
 finally {
    launchedThreadCompleted(this,ex);
  }
}","@Override public void run(){
  Exception ex=null;
  try {
    UserGroupInformation user=UserGroupInformation.createRemoteUser(container.getId().toString());
    String cmIpPortStr=container.getNodeId().getHost() + ""String_Node_Str"" + container.getNodeId().getPort();
    final InetSocketAddress cmAddress=NetUtils.createSocketAddr(cmIpPortStr);
    org.apache.hadoop.yarn.api.records.Token containerToken=container.getContainerToken();
    if (containerToken != null) {
      Token<ContainerTokenIdentifier> token=ConverterUtils.convertFromYarn(containerToken,cmAddress);
      user.addToken(token);
    }
    log.debug(""String_Node_Str"",container.getId(),containerRole);
    ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);
    provider.buildContainerLaunchContext(ctx,fs,generatedConfDirPath,containerRole,clusterSpec,roleOptions);
    String commandLine=ctx.getCommands().get(0);
    RoleInstance instance=new RoleInstance(container);
    log.info(""String_Node_Str"",HoyaUtils.join(ctx.getCommands(),""String_Node_Str""));
    Map<String,LocalResource> lr=ctx.getLocalResources();
    List<String> nodeEnv=new ArrayList<String>();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",lr.size());
      for (      Map.Entry<String,LocalResource> entry : lr.entrySet()) {
        String key=entry.getKey();
        LocalResource val=entry.getValue();
        String envElt=key + ""String_Node_Str"" + HoyaUtils.stringify(val.getResource());
        log.debug(envElt);
      }
    }
    Map<String,String> environment=ctx.getEnvironment();
    environment.putAll(envVars);
    log.debug(""String_Node_Str"",environment.size());
    for (    Map.Entry<String,String> env : environment.entrySet()) {
      String envElt=String.format(""String_Node_Str"",env.getKey(),env.getValue());
      log.debug(envElt);
      nodeEnv.add(envElt);
    }
    instance.command=HoyaUtils.join(ctx.getCommands(),""String_Node_Str"");
    instance.role=containerRole;
    instance.roleId=role.id;
    instance.environment=nodeEnv.toArray(new String[nodeEnv.size()]);
    containerStarter.startContainer(container,ctx,instance);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + containerRole + ""String_Node_Str""+ e,e);
    ex=e;
  }
 finally {
    launchedThreadCompleted(this,ex);
  }
}"
26548,"/** 
 * Event handler for the list of active containers on restart. Sets the info key   {@link StatusKeys#INFO_CONTAINERS_AM_RESTART}to the size of the list passed down (and does not set it if none were)
 * @param liveContainers the containers allocated
 * @return true if a rebuild took place (even if size 0)
 * @throws HoyaRuntimeException on problems
 */
private boolean rebuildModelFromRestart(List<Container> liveContainers){
  if (liveContainers == null) {
    return false;
  }
  for (  Container container : liveContainers) {
    addRestartedContainer(container);
  }
  clusterDescription.setInfo(StatusKeys.INFO_CONTAINERS_AM_RESTART,Integer.toString(liveContainers.size()));
  return true;
}","/** 
 * Event handler for the list of active containers on restart. Sets the info key   {@link StatusKeys#INFO_CONTAINERS_AM_RESTART}to the size of the list passed down (and does not set it if none were)
 * @param liveContainers the containers allocated
 * @return true if a rebuild took place (even if size 0)
 * @throws HoyaRuntimeException on problems
 */
private boolean rebuildModelFromRestart(List<Container> liveContainers) throws BadClusterStateException {
  if (liveContainers == null) {
    return false;
  }
  for (  Container container : liveContainers) {
    addRestartedContainer(container);
  }
  clusterDescription.setInfo(StatusKeys.INFO_CONTAINERS_AM_RESTART,Integer.toString(liveContainers.size()));
  return true;
}"
26549,"/** 
 * Add a restarted container by walking it through the create/submit/start lifecycle, so building up the internal structures
 * @param container container that was running before the AM restarted
 * @throws HoyaRuntimeException on problems
 */
private void addRestartedContainer(Container container){
  String containerHostInfo=container.getNodeId().getHost() + ""String_Node_Str"" + container.getNodeId().getPort();
  ContainerId cid=container.getId();
  int roleId=ContainerPriority.extractRole(container);
  RoleStatus role=lookupRoleStatus(roleId);
  role.incActual();
  String roleName=role.getName();
  log.info(""String_Node_Str"",cid,roleName,containerHostInfo);
  RoleInstance instance=new RoleInstance(container);
  instance.command=roleName;
  instance.role=roleName;
  instance.roleId=roleId;
  instance.environment=new String[0];
  instance.container=container;
  instance.createTime=now();
  instance.state=ClusterDescription.STATE_LIVE;
  activeContainers.put(cid,instance);
  roleHistory.onContainerAssigned(container);
  containerStartSubmitted(container,instance);
  innerOnNodeManagerContainerStarted(cid);
}","/** 
 * Add a restarted container by walking it through the create/submit/start lifecycle, so building up the internal structures
 * @param container container that was running before the AM restarted
 * @throws HoyaRuntimeException on problems
 */
private void addRestartedContainer(Container container) throws BadClusterStateException {
  String containerHostInfo=container.getNodeId().getHost() + ""String_Node_Str"" + container.getNodeId().getPort();
  ContainerId cid=container.getId();
  int roleId=ContainerPriority.extractRole(container);
  RoleStatus role=lookupRoleStatus(roleId);
  role.incActual();
  String roleName=role.getName();
  log.info(""String_Node_Str"",cid,roleName,containerHostInfo);
  RoleInstance instance=new RoleInstance(container);
  instance.command=roleName;
  instance.role=roleName;
  instance.roleId=roleId;
  instance.environment=new String[0];
  instance.container=container;
  instance.createTime=now();
  instance.state=ClusterDescription.STATE_LIVE;
  activeContainers.put(cid,instance);
  roleHistory.onContainerAssigned(container);
  containerStartSubmitted(container,instance);
  innerOnNodeManagerContainerStarted(cid);
}"
26550,"/** 
 * add a launched container to the node map for status responses
 * @param container id
 * @param node node details
 */
private void addLaunchedContainer(Container container,RoleInstance node){
  node.container=container;
  if (node.role == null) {
    log.warn(""String_Node_Str"",node);
    node.role=ROLE_UNKNOWN;
  }
  getLiveNodes().put(node.getContainerId(),node);
  roleHistory.onContainerStarted(container);
}","/** 
 * add a launched container to the node map for status responses
 * @param container id
 * @param node node details
 */
private void addLaunchedContainer(Container container,RoleInstance node){
  node.container=container;
  if (node.role == null) {
    throw new HoyaRuntimeException(""String_Node_Str"",node);
  }
  getLiveNodes().put(node.getContainerId(),node);
  roleHistory.onContainerStarted(container);
}"
26551,"/** 
 * build up the special master node, which lives in the live node set but has a lifecycle bonded to the AM
 * @param containerId the AM master
 */
public void buildAppMasterNode(ContainerId containerId){
  Container container=new ContainerPBImpl();
  container.setId(containerId);
  RoleInstance am=new RoleInstance(container);
  am.role=HoyaKeys.ROLE_HOYA_AM;
  am.buildUUID();
  appMasterNode=am;
  getLiveNodes().put(containerId,am);
}","/** 
 * build up the special master node, which lives in the live node set but has a lifecycle bonded to the AM
 * @param containerId the AM master
 */
public void buildAppMasterNode(ContainerId containerId){
  Container container=new ContainerPBImpl();
  container.setId(containerId);
  RoleInstance am=new RoleInstance(container);
  am.role=HoyaKeys.ROLE_HOYA_AM;
  appMasterNode=am;
  getLiveNodes().put(containerId,am);
}"
26552,"/** 
 * Build up the application state
 * @param cd cluster specification
 * @param siteConf site configuration
 * @param providerRoles roles offered by a provider
 * @param fs filesystem
 * @param historyDir directory containing history files
 * @param liveContainers
 */
public void buildInstance(ClusterDescription cd,Configuration siteConf,List<ProviderRole> providerRoles,FileSystem fs,Path historyDir,List<Container> liveContainers){
  this.siteConf=siteConf;
  setClusterSpec(cd);
  for (  ProviderRole providerRole : providerRoles) {
    buildRole(providerRole);
  }
  buildRoleRequirementsFromClusterSpec();
  ClusterDescription clusterStatus=ClusterDescription.copy(cd);
  Set<String> confKeys=ConfigHelper.sortedConfigKeys(siteConf);
  for (  String key : confKeys) {
    String val=siteConf.get(key);
    clusterStatus.clientProperties.put(key,val);
  }
  startTimeThreshold=1000 * cd.getOptionInt(OptionKeys.CONTAINER_FAILURE_SHORTLIFE,OptionKeys.DEFAULT_CONTAINER_FAILURE_SHORTLIFE);
  failureThreshold=cd.getOptionInt(OptionKeys.CONTAINER_FAILURE_THRESHOLD,OptionKeys.DEFAULT_CONTAINER_FAILURE_THRESHOLD);
  clusterStatus.state=ClusterDescription.STATE_CREATED;
  long now=now();
  clusterStatus.setInfoTime(StatusKeys.INFO_LIVE_TIME_HUMAN,StatusKeys.INFO_LIVE_TIME_MILLIS,now);
  if (0 == clusterStatus.createTime) {
    clusterStatus.createTime=now;
    clusterStatus.setInfoTime(StatusKeys.INFO_CREATE_TIME_HUMAN,StatusKeys.INFO_CREATE_TIME_MILLIS,now);
  }
  clusterStatus.state=ClusterDescription.STATE_LIVE;
  setClusterDescription(clusterStatus);
  roleHistory=new RoleHistory(providerRoles);
  roleHistory.onStart(fs,historyDir);
  rebuildModelFromRestart(liveContainers);
}","/** 
 * Build up the application state
 * @param cd cluster specification
 * @param siteConf site configuration
 * @param providerRoles roles offered by a provider
 * @param fs filesystem
 * @param historyDir directory containing history files
 * @param liveContainers
 */
public void buildInstance(ClusterDescription cd,Configuration siteConf,List<ProviderRole> providerRoles,FileSystem fs,Path historyDir,List<Container> liveContainers) throws BadClusterStateException {
  this.siteConf=siteConf;
  setClusterSpec(cd);
  for (  ProviderRole providerRole : providerRoles) {
    buildRole(providerRole);
  }
  buildRoleRequirementsFromClusterSpec();
  ClusterDescription clusterStatus=ClusterDescription.copy(cd);
  Set<String> confKeys=ConfigHelper.sortedConfigKeys(siteConf);
  for (  String key : confKeys) {
    String val=siteConf.get(key);
    clusterStatus.clientProperties.put(key,val);
  }
  startTimeThreshold=1000 * cd.getOptionInt(OptionKeys.CONTAINER_FAILURE_SHORTLIFE,OptionKeys.DEFAULT_CONTAINER_FAILURE_SHORTLIFE);
  failureThreshold=cd.getOptionInt(OptionKeys.CONTAINER_FAILURE_THRESHOLD,OptionKeys.DEFAULT_CONTAINER_FAILURE_THRESHOLD);
  clusterStatus.state=ClusterDescription.STATE_CREATED;
  long now=now();
  clusterStatus.setInfoTime(StatusKeys.INFO_LIVE_TIME_HUMAN,StatusKeys.INFO_LIVE_TIME_MILLIS,now);
  if (0 == clusterStatus.createTime) {
    clusterStatus.createTime=now;
    clusterStatus.setInfoTime(StatusKeys.INFO_CREATE_TIME_HUMAN,StatusKeys.INFO_CREATE_TIME_MILLIS,now);
  }
  clusterStatus.state=ClusterDescription.STATE_LIVE;
  setClusterDescription(clusterStatus);
  roleHistory=new RoleHistory(providerRoles);
  roleHistory.onStart(fs,historyDir);
  rebuildModelFromRestart(liveContainers);
}"
26553,"public RoleInstance(Container container){
  this.container=container;
}","public RoleInstance(Container container){
  this.container=container;
  buildUUID();
}"
26554,"public void buildUUID(){
  if (container == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (container.getId() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  uuid=container.getId().toString();
}","private void buildUUID(){
  if (container == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (container.getId() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  uuid=container.getId().toString();
}"
26555,"/** 
 * Apply a set of command line options to a cluster role map
 * @param clusterRoleMap cluster role map to merge onto
 * @param commandOptions command opts
 */
public static void applyCommandLineOptsToRoleMap(Map<String,Map<String,String>> clusterRoleMap,Map<String,Map<String,String>> commandOptions){
  for (  String key : commandOptions.keySet()) {
    Map<String,String> optionMap=commandOptions.get(key);
    Map<String,String> existingMap=clusterRoleMap.get(key);
    if (existingMap == null) {
      existingMap=new HashMap<String,String>();
    }
    log.debug(""String_Node_Str"",stringifyMap(optionMap));
    mergeMap(existingMap,optionMap);
    clusterRoleMap.put(key,existingMap);
  }
}","/** 
 * Apply a set of command line options to a cluster role map
 * @param clusterRoleMap cluster role map to merge onto
 * @param commandOptions command opts
 */
public static void applyCommandLineOptsToRoleMap(Map<String,Map<String,String>> clusterRoleMap,Map<String,Map<String,String>> commandOptions){
  for (  Map.Entry<String,Map<String,String>> entry : commandOptions.entrySet()) {
    String key=entry.getKey();
    Map<String,String> optionMap=entry.getValue();
    Map<String,String> existingMap=clusterRoleMap.get(key);
    if (existingMap == null) {
      existingMap=new HashMap<String,String>();
    }
    log.debug(""String_Node_Str"",stringifyMap(optionMap));
    mergeMap(existingMap,optionMap);
    clusterRoleMap.put(key,existingMap);
  }
}"
26556,"/** 
 * Declare that the AM is complete
 * @param exitCode exit code for the aM
 * @param reason reason for termination
 */
public void signalAMComplete(int exitCode,String reason){
  amCompletionReason=reason;
  AMExecutionStateLock.lock();
  try {
    amCompletionFlag.set(true);
    amExitCode=exitCode;
    isAMCompleted.signal();
  }
  finally {
    AMExecutionStateLock.unlock();
  }
}","/** 
 * Declare that the AM is complete
 * @param exitCode exit code for the aM
 * @param reason reason for termination
 */
public synchronized void signalAMComplete(int exitCode,String reason){
  amCompletionReason=reason;
  AMExecutionStateLock.lock();
  try {
    amCompletionFlag.set(true);
    amExitCode=exitCode;
    isAMCompleted.signal();
  }
  finally {
    AMExecutionStateLock.unlock();
  }
}"
26557,"/** 
 * handle completed node in the CD -move something from the live server list to the completed server list
 * @param status the node that has just completed
 * @return NodeCompletionResult
 */
public synchronized NodeCompletionResult onCompletedNode(ContainerStatus status){
  ContainerId containerId=status.getContainerId();
  NodeCompletionResult result=new NodeCompletionResult();
  RoleInstance roleInstance;
  if (containersBeingReleased.containsKey(containerId)) {
    log.info(""String_Node_Str"");
    Container container=containersBeingReleased.remove(containerId);
    RoleStatus roleStatus=lookupRoleStatus(container);
    log.info(""String_Node_Str"",roleStatus.getName());
    roleStatus.decReleasing();
    roleStatus.decActual();
    roleStatus.incCompleted();
    roleHistory.onReleaseCompleted(container);
  }
 else   if (surplusNodes.remove(containerId)) {
    result.surplusNode=true;
  }
 else {
    result.containerFailed=true;
    roleInstance=activeContainers.remove(containerId);
    if (roleInstance != null) {
      incFailedCountainerCount();
      failedNodes.put(containerId,roleInstance);
    }
 else {
      roleInstance=failedNodes.get(containerId);
    }
    if (roleInstance != null) {
      int roleId=roleInstance.roleId;
      log.info(""String_Node_Str"",roleId);
      try {
        RoleStatus roleStatus=lookupRoleStatus(roleId);
        roleStatus.decActual();
        boolean shortLived=isShortLived(roleInstance);
        String message;
        if (roleInstance.container != null) {
          message=String.format(""String_Node_Str"",roleInstance.getContainerId(),roleInstance.container.getNodeId().getHost());
        }
 else {
          message=String.format(""String_Node_Str"",containerId.toString());
        }
        roleStatus.noteFailed(message);
        if (shortLived) {
          roleStatus.incStartFailed();
        }
        roleHistory.onFailedContainer(roleInstance.container,shortLived);
      }
 catch (      YarnRuntimeException e1) {
        log.error(""String_Node_Str"",roleId);
      }
    }
 else {
      log.error(""String_Node_Str"" + ""String_Node_Str"");
      completionOfUnknownContainerEvent.incrementAndGet();
    }
  }
  if (result.surplusNode) {
    return result;
  }
  ContainerId id=status.getContainerId();
  RoleInstance node=getLiveNodes().remove(id);
  if (node == null) {
    log.warn(""String_Node_Str"");
    completionOfNodeNotInLiveListEvent.incrementAndGet();
  }
 else {
    node.state=ClusterDescription.STATE_DESTROYED;
    node.exitCode=status.getExitStatus();
    node.diagnostics=status.getDiagnostics();
    getCompletedNodes().put(id,node);
    result.roleInstance=node;
  }
  return result;
}","/** 
 * handle completed node in the CD -move something from the live server list to the completed server list
 * @param status the node that has just completed
 * @return NodeCompletionResult
 */
public synchronized NodeCompletionResult onCompletedNode(ContainerStatus status){
  ContainerId containerId=status.getContainerId();
  NodeCompletionResult result=new NodeCompletionResult();
  RoleInstance roleInstance;
  if (containersBeingReleased.containsKey(containerId)) {
    log.info(""String_Node_Str"");
    Container container=containersBeingReleased.remove(containerId);
    RoleStatus roleStatus=lookupRoleStatus(container);
    log.info(""String_Node_Str"",roleStatus.getName());
    roleStatus.decReleasing();
    roleStatus.decActual();
    roleStatus.incCompleted();
    roleHistory.onReleaseCompleted(container);
  }
 else   if (surplusNodes.remove(containerId)) {
    result.surplusNode=true;
  }
 else {
    result.containerFailed=true;
    roleInstance=activeContainers.remove(containerId);
    if (roleInstance != null) {
      incFailedCountainerCount();
      failedNodes.put(containerId,roleInstance);
    }
 else {
      roleInstance=failedNodes.get(containerId);
    }
    if (roleInstance != null) {
      int roleId=roleInstance.roleId;
      log.info(""String_Node_Str"",roleId);
      try {
        RoleStatus roleStatus=lookupRoleStatus(roleId);
        roleStatus.decActual();
        boolean shortLived=isShortLived(roleInstance);
        String message;
        if (roleInstance.container != null) {
          message=String.format(""String_Node_Str"",roleInstance.getContainerId(),roleInstance.container.getNodeId().getHost());
        }
 else {
          message=String.format(""String_Node_Str"",containerId.toString());
        }
        roleStatus.noteFailed(message);
        if (shortLived) {
          roleStatus.incStartFailed();
        }
        if (roleInstance.container != null) {
          roleHistory.onFailedContainer(roleInstance.container,shortLived);
        }
      }
 catch (      YarnRuntimeException e1) {
        log.error(""String_Node_Str"",roleId);
      }
    }
 else {
      log.error(""String_Node_Str"" + ""String_Node_Str"");
      completionOfUnknownContainerEvent.incrementAndGet();
    }
  }
  if (result.surplusNode) {
    return result;
  }
  ContainerId id=status.getContainerId();
  RoleInstance node=getLiveNodes().remove(id);
  if (node == null) {
    log.warn(""String_Node_Str"");
    completionOfNodeNotInLiveListEvent.incrementAndGet();
  }
 else {
    node.state=ClusterDescription.STATE_DESTROYED;
    node.exitCode=status.getExitStatus();
    node.diagnostics=status.getDiagnostics();
    getCompletedNodes().put(id,node);
    result.roleInstance=node;
  }
  return result;
}"
26558,"/** 
 * Create a cluster to the specification
 * @param clusterSpec cluster specification
 * @param launchArgs
 * @return the exit code from the operation
 */
public int executeClusterStart(Path clusterDirectory,ClusterDescription clusterSpec,LaunchArgsAccessor launchArgs) throws YarnException, IOException {
  String clustername=clusterSpec.name;
  deployedClusterName=clustername;
  HoyaUtils.validateClusterName(clustername);
  verifyNoLiveClusters(clustername);
  Configuration config=getConfig();
  boolean clusterSecure=HoyaUtils.isClusterSecure(config);
  HoyaAMClientProvider hoyaAM=new HoyaAMClientProvider(config);
  ClientProvider provider=createClientProvider(clusterSpec);
  Path generatedConfDirPath=createPathThatMustExist(clusterSpec.generatedConfigurationPath);
  Path origConfPath=createPathThatMustExist(clusterSpec.originConfigurationPath);
  Path imagePath;
  String csip=clusterSpec.getImagePath();
  if (!isUnset(csip)) {
    imagePath=createPathThatMustExist(csip);
  }
 else {
    imagePath=null;
    if (isUnset(clusterSpec.getApplicationHome())) {
      throw new BadClusterStateException(""String_Node_Str"");
    }
  }
  hoyaAM.validateClusterSpec(clusterSpec);
  provider.validateClusterSpec(clusterSpec);
  if (log.isDebugEnabled()) {
    log.debug(clusterSpec.toString());
  }
  YarnClientApplication application=yarnClient.createApplication();
  ApplicationSubmissionContext appContext=application.getApplicationSubmissionContext();
  ApplicationId appId=appContext.getApplicationId();
  appContext.setApplicationName(clustername);
  appContext.setApplicationType(HoyaKeys.APP_TYPE);
  if (clusterSpec.getOptionBool(OptionKeys.HOYA_TEST_FLAG,false)) {
    appContext.setMaxAppAttempts(1);
  }
  FileSystem fs=getClusterFS();
  HoyaUtils.purgeHoyaAppInstanceTempFiles(fs,clustername);
  Path tempPath=HoyaUtils.createHoyaAppInstanceTempPath(fs,clustername,appId.toString());
  String libdir=""String_Node_Str"";
  Path libPath=new Path(tempPath,libdir);
  fs.mkdirs(libPath);
  log.debug(""String_Node_Str"",fs,tempPath,libPath);
  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Path remoteHoyaConfPath=null;
  String relativeHoyaConfDir=null;
  String hoyaConfdirProp=System.getProperty(HoyaKeys.PROPERTY_HOYA_CONF_DIR);
  if (hoyaConfdirProp == null || hoyaConfdirProp.isEmpty()) {
    log.debug(""String_Node_Str"");
  }
 else {
    File hoyaConfDir=new File(hoyaConfdirProp);
    if (!hoyaConfDir.exists()) {
      throw new BadConfigException(""String_Node_Str"",hoyaConfDir);
    }
    Path localConfDirPath=HoyaUtils.createLocalPath(hoyaConfDir);
    log.debug(""String_Node_Str"",localConfDirPath);
    remoteHoyaConfPath=new Path(clusterDirectory,HoyaKeys.SUBMITTED_HOYA_CONF_DIR);
    HoyaUtils.copyDirectory(config,localConfDirPath,remoteHoyaConfPath);
  }
  if (!getUsingMiniMRCluster()) {
    log.debug(""String_Node_Str"");
    if (remoteHoyaConfPath != null) {
      relativeHoyaConfDir=HoyaKeys.SUBMITTED_HOYA_CONF_DIR;
      Map<String,LocalResource> submittedConfDir=HoyaUtils.submitDirectory(fs,remoteHoyaConfPath,relativeHoyaConfDir);
      HoyaUtils.mergeMaps(localResources,submittedConfDir);
    }
    log.info(""String_Node_Str"");
    HoyaUtils.putJar(localResources,fs,this.getClass(),tempPath,libdir,HOYA_JAR);
  }
  propagatePrincipals(clusterSpec,config);
  Configuration clientConfExtras=new Configuration(false);
  Map<String,LocalResource> providerResources;
  providerResources=hoyaAM.prepareAMAndConfigForLaunch(fs,config,clusterSpec,origConfPath,generatedConfDirPath,clientConfExtras,libdir,tempPath);
  localResources.putAll(providerResources);
  providerResources=provider.prepareAMAndConfigForLaunch(fs,config,clusterSpec,origConfPath,generatedConfDirPath,clientConfExtras,libdir,tempPath);
  localResources.putAll(providerResources);
  log.debug(""String_Node_Str"");
  provider.preflightValidateClusterConfiguration(clusterSpec,fs,generatedConfDirPath,clusterSecure);
  if (HoyaUtils.maybeAddImagePath(fs,localResources,imagePath)) {
    log.debug(""String_Node_Str"",imagePath);
  }
  if (log.isDebugEnabled()) {
    for (    String key : localResources.keySet()) {
      LocalResource val=localResources.get(key);
      log.debug(""String_Node_Str"",key,HoyaUtils.stringify(val.getResource()));
    }
  }
  amContainer.setLocalResources(localResources);
  Map<String,String> env=HoyaUtils.buildEnvMap(clusterSpec.getOrAddRole(HoyaKeys.ROLE_HOYA_AM));
  String classpath=HoyaUtils.buildClasspath(relativeHoyaConfDir,libdir,getConfig(),getUsingMiniMRCluster());
  env.put(""String_Node_Str"",classpath);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",classpath);
    log.debug(""String_Node_Str"",HoyaUtils.stringifyMap(env));
    log.debug(""String_Node_Str"",HoyaUtils.listFSDir(fs,libPath));
  }
  amContainer.setEnvironment(env);
  String rmAddr=launchArgs.getRmAddress();
  if (isUnset(rmAddr) && HoyaUtils.isRmSchedulerAddressDefined(config)) {
    rmAddr=NetUtils.getHostPortString(HoyaUtils.getRmSchedulerAddress(config));
  }
  List<String> commands=new ArrayList<String>(20);
  commands.add(ApplicationConstants.Environment.JAVA_HOME.$() + ""String_Node_Str"");
  hoyaAM.addJVMOptions(clusterSpec,commands);
  if (serviceArgs.isDebug()) {
    commands.add(HoyaKeys.JVM_ENABLE_ASSERTIONS);
    commands.add(HoyaKeys.JVM_ENABLE_SYSTEM_ASSERTIONS);
  }
  commands.add(String.format(HoyaKeys.FORMAT_D_CLUSTER_NAME,clustername));
  commands.add(String.format(HoyaKeys.FORMAT_D_CLUSTER_TYPE,provider.getName()));
  commands.add(HoyaAMArgs.CLASSNAME);
  commands.add(HoyaActions.ACTION_CREATE);
  commands.add(clustername);
  if (serviceArgs.isDebug()) {
    commands.add(Arguments.ARG_DEBUG);
  }
  commands.add(Arguments.ARG_HOYA_CLUSTER_URI);
  commands.add(clusterDirectory.toUri().toString());
  if (!isUnset(rmAddr)) {
    commands.add(Arguments.ARG_RM_ADDR);
    commands.add(rmAddr);
  }
  if (serviceArgs.getFilesystemURL() != null) {
    commands.add(Arguments.ARG_FILESYSTEM);
    commands.add(serviceArgs.getFilesystemURL().toString());
  }
  if (clusterSecure) {
    propagateConfOption(commands,config,HoyaXmlConfKeys.KEY_HOYA_SECURITY_ENABLED);
    propagateConfOption(commands,config,DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY);
    Credentials credentials=new Credentials();
    String tokenRenewer=config.get(YarnConfiguration.RM_PRINCIPAL);
    if (isUnset(tokenRenewer)) {
      throw new BadConfigException(""String_Node_Str"",YarnConfiguration.RM_PRINCIPAL);
    }
    final Token<?>[] tokens=fs.addDelegationTokens(tokenRenewer,credentials);
    if (tokens != null) {
      for (      Token<?> token : tokens) {
        log.debug(""String_Node_Str"",fs.getUri(),token);
      }
    }
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    ByteBuffer fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    amContainer.setTokens(fsTokens);
  }
  commands.add(""String_Node_Str"" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str""+ STDOUT_HOYAAM);
  commands.add(""String_Node_Str"" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str""+ STDERR_HOYAAM);
  String cmdStr=HoyaUtils.join(commands,""String_Node_Str"");
  log.info(""String_Node_Str"",cmdStr);
  amContainer.setCommands(commands);
  Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(RoleKeys.DEFAULT_AM_MEMORY);
  capability.setVirtualCores(RoleKeys.DEFAULT_AM_V_CORES);
  hoyaAM.prepareAMResourceRequirements(clusterSpec,capability);
  appContext.setResource(capability);
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  provider.prepareAMServiceData(clusterSpec,serviceData);
  amContainer.setServiceData(serviceData);
  appContext.setAMContainerSpec(amContainer);
  Priority pri=Records.newRecord(Priority.class);
  pri.setPriority(amPriority);
  appContext.setPriority(pri);
  appContext.setQueue(amQueue);
  log.info(""String_Node_Str"");
  applicationId=yarnClient.submitApplication(appContext);
  int exitCode;
  ApplicationReport report=monitorAppToState(new Duration(ACCEPT_TIME),YarnApplicationState.ACCEPTED);
  if (HoyaUtils.hasAppFinished(report)) {
    exitCode=buildExitCode(appId,report);
  }
 else {
    exitCode=EXIT_SUCCESS;
    int waittime=launchArgs.getWaittime();
    if (waittime != 0) {
      Duration duration=new Duration(waittime * 1000);
      duration.start();
      report=monitorAppToState(duration,YarnApplicationState.RUNNING);
      if (report != null && report.getYarnApplicationState() == YarnApplicationState.RUNNING) {
        exitCode=EXIT_SUCCESS;
      }
 else {
        yarnClient.killRunningApplication(appId,""String_Node_Str"");
        exitCode=buildExitCode(appId,report);
      }
    }
  }
  return exitCode;
}","/** 
 * Create a cluster to the specification
 * @param clusterSpec cluster specification
 * @param launchArgs
 * @return the exit code from the operation
 */
public int executeClusterStart(Path clusterDirectory,ClusterDescription clusterSpec,LaunchArgsAccessor launchArgs) throws YarnException, IOException {
  String clustername=clusterSpec.name;
  deployedClusterName=clustername;
  HoyaUtils.validateClusterName(clustername);
  verifyNoLiveClusters(clustername);
  Configuration config=getConfig();
  boolean clusterSecure=HoyaUtils.isClusterSecure(config);
  HoyaAMClientProvider hoyaAM=new HoyaAMClientProvider(config);
  ClientProvider provider=createClientProvider(clusterSpec);
  Path generatedConfDirPath=createPathThatMustExist(clusterSpec.generatedConfigurationPath);
  Path origConfPath=createPathThatMustExist(clusterSpec.originConfigurationPath);
  Path imagePath;
  String csip=clusterSpec.getImagePath();
  if (!isUnset(csip)) {
    imagePath=createPathThatMustExist(csip);
  }
 else {
    imagePath=null;
    if (isUnset(clusterSpec.getApplicationHome())) {
      throw new BadClusterStateException(""String_Node_Str"");
    }
  }
  hoyaAM.validateClusterSpec(clusterSpec);
  provider.validateClusterSpec(clusterSpec);
  if (log.isDebugEnabled()) {
    log.debug(clusterSpec.toString());
  }
  YarnClientApplication application=yarnClient.createApplication();
  ApplicationSubmissionContext appContext=application.getApplicationSubmissionContext();
  ApplicationId appId=appContext.getApplicationId();
  appContext.setApplicationName(clustername);
  appContext.setApplicationType(HoyaKeys.APP_TYPE);
  if (clusterSpec.getOptionBool(OptionKeys.HOYA_TEST_FLAG,false)) {
    appContext.setMaxAppAttempts(1);
  }
  FileSystem fs=getClusterFS();
  HoyaUtils.purgeHoyaAppInstanceTempFiles(fs,clustername);
  Path tempPath=HoyaUtils.createHoyaAppInstanceTempPath(fs,clustername,appId.toString());
  String libdir=""String_Node_Str"";
  Path libPath=new Path(tempPath,libdir);
  fs.mkdirs(libPath);
  log.debug(""String_Node_Str"",fs,tempPath,libPath);
  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Path remoteHoyaConfPath=null;
  String relativeHoyaConfDir=null;
  String hoyaConfdirProp=System.getProperty(HoyaKeys.PROPERTY_HOYA_CONF_DIR);
  if (hoyaConfdirProp == null || hoyaConfdirProp.isEmpty()) {
    log.debug(""String_Node_Str"");
  }
 else {
    File hoyaConfDir=new File(hoyaConfdirProp);
    if (!hoyaConfDir.exists()) {
      throw new BadConfigException(""String_Node_Str"",hoyaConfDir);
    }
    Path localConfDirPath=HoyaUtils.createLocalPath(hoyaConfDir);
    log.debug(""String_Node_Str"",localConfDirPath);
    remoteHoyaConfPath=new Path(clusterDirectory,HoyaKeys.SUBMITTED_HOYA_CONF_DIR);
    HoyaUtils.copyDirectory(config,localConfDirPath,remoteHoyaConfPath);
  }
  if (!getUsingMiniMRCluster()) {
    log.debug(""String_Node_Str"");
    if (remoteHoyaConfPath != null) {
      relativeHoyaConfDir=HoyaKeys.SUBMITTED_HOYA_CONF_DIR;
      Map<String,LocalResource> submittedConfDir=HoyaUtils.submitDirectory(fs,remoteHoyaConfPath,relativeHoyaConfDir);
      HoyaUtils.mergeMaps(localResources,submittedConfDir);
    }
    log.info(""String_Node_Str"");
    HoyaUtils.putJar(localResources,fs,this.getClass(),tempPath,libdir,HOYA_JAR);
  }
  propagatePrincipals(clusterSpec,config);
  Configuration clientConfExtras=new Configuration(false);
  Map<String,LocalResource> providerResources;
  providerResources=hoyaAM.prepareAMAndConfigForLaunch(fs,config,clusterSpec,origConfPath,generatedConfDirPath,clientConfExtras,libdir,tempPath);
  localResources.putAll(providerResources);
  providerResources=provider.prepareAMAndConfigForLaunch(fs,config,clusterSpec,origConfPath,generatedConfDirPath,clientConfExtras,libdir,tempPath);
  localResources.putAll(providerResources);
  log.debug(""String_Node_Str"");
  provider.preflightValidateClusterConfiguration(clusterSpec,fs,generatedConfDirPath,clusterSecure);
  if (HoyaUtils.maybeAddImagePath(fs,localResources,imagePath)) {
    log.debug(""String_Node_Str"",imagePath);
  }
  if (log.isDebugEnabled()) {
    for (    Map.Entry<String,LocalResource> entry : localResources.entrySet()) {
      String key=entry.getKey();
      LocalResource val=entry.getValue();
      log.debug(""String_Node_Str"",key,HoyaUtils.stringify(val.getResource()));
    }
  }
  amContainer.setLocalResources(localResources);
  Map<String,String> env=HoyaUtils.buildEnvMap(clusterSpec.getOrAddRole(HoyaKeys.ROLE_HOYA_AM));
  String classpath=HoyaUtils.buildClasspath(relativeHoyaConfDir,libdir,getConfig(),getUsingMiniMRCluster());
  env.put(""String_Node_Str"",classpath);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",classpath);
    log.debug(""String_Node_Str"",HoyaUtils.stringifyMap(env));
    log.debug(""String_Node_Str"",HoyaUtils.listFSDir(fs,libPath));
  }
  amContainer.setEnvironment(env);
  String rmAddr=launchArgs.getRmAddress();
  if (isUnset(rmAddr) && HoyaUtils.isRmSchedulerAddressDefined(config)) {
    rmAddr=NetUtils.getHostPortString(HoyaUtils.getRmSchedulerAddress(config));
  }
  List<String> commands=new ArrayList<String>(20);
  commands.add(ApplicationConstants.Environment.JAVA_HOME.$() + ""String_Node_Str"");
  hoyaAM.addJVMOptions(clusterSpec,commands);
  if (serviceArgs.isDebug()) {
    commands.add(HoyaKeys.JVM_ENABLE_ASSERTIONS);
    commands.add(HoyaKeys.JVM_ENABLE_SYSTEM_ASSERTIONS);
  }
  commands.add(String.format(HoyaKeys.FORMAT_D_CLUSTER_NAME,clustername));
  commands.add(String.format(HoyaKeys.FORMAT_D_CLUSTER_TYPE,provider.getName()));
  commands.add(HoyaAMArgs.CLASSNAME);
  commands.add(HoyaActions.ACTION_CREATE);
  commands.add(clustername);
  if (serviceArgs.isDebug()) {
    commands.add(Arguments.ARG_DEBUG);
  }
  commands.add(Arguments.ARG_HOYA_CLUSTER_URI);
  commands.add(clusterDirectory.toUri().toString());
  if (!isUnset(rmAddr)) {
    commands.add(Arguments.ARG_RM_ADDR);
    commands.add(rmAddr);
  }
  if (serviceArgs.getFilesystemURL() != null) {
    commands.add(Arguments.ARG_FILESYSTEM);
    commands.add(serviceArgs.getFilesystemURL().toString());
  }
  if (clusterSecure) {
    propagateConfOption(commands,config,HoyaXmlConfKeys.KEY_HOYA_SECURITY_ENABLED);
    propagateConfOption(commands,config,DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY);
    Credentials credentials=new Credentials();
    String tokenRenewer=config.get(YarnConfiguration.RM_PRINCIPAL);
    if (isUnset(tokenRenewer)) {
      throw new BadConfigException(""String_Node_Str"",YarnConfiguration.RM_PRINCIPAL);
    }
    final Token<?>[] tokens=fs.addDelegationTokens(tokenRenewer,credentials);
    if (tokens != null) {
      for (      Token<?> token : tokens) {
        log.debug(""String_Node_Str"",fs.getUri(),token);
      }
    }
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    ByteBuffer fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    amContainer.setTokens(fsTokens);
  }
  commands.add(""String_Node_Str"" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str""+ STDOUT_HOYAAM);
  commands.add(""String_Node_Str"" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str""+ STDERR_HOYAAM);
  String cmdStr=HoyaUtils.join(commands,""String_Node_Str"");
  log.info(""String_Node_Str"",cmdStr);
  amContainer.setCommands(commands);
  Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(RoleKeys.DEFAULT_AM_MEMORY);
  capability.setVirtualCores(RoleKeys.DEFAULT_AM_V_CORES);
  hoyaAM.prepareAMResourceRequirements(clusterSpec,capability);
  appContext.setResource(capability);
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  provider.prepareAMServiceData(clusterSpec,serviceData);
  amContainer.setServiceData(serviceData);
  appContext.setAMContainerSpec(amContainer);
  Priority pri=Records.newRecord(Priority.class);
  pri.setPriority(amPriority);
  appContext.setPriority(pri);
  appContext.setQueue(amQueue);
  log.info(""String_Node_Str"");
  applicationId=yarnClient.submitApplication(appContext);
  int exitCode;
  ApplicationReport report=monitorAppToState(new Duration(ACCEPT_TIME),YarnApplicationState.ACCEPTED);
  if (HoyaUtils.hasAppFinished(report)) {
    exitCode=buildExitCode(appId,report);
  }
 else {
    exitCode=EXIT_SUCCESS;
    int waittime=launchArgs.getWaittime();
    if (waittime != 0) {
      Duration duration=new Duration(waittime * 1000);
      duration.start();
      report=monitorAppToState(duration,YarnApplicationState.RUNNING);
      if (report != null && report.getYarnApplicationState() == YarnApplicationState.RUNNING) {
        exitCode=EXIT_SUCCESS;
      }
 else {
        yarnClient.killRunningApplication(appId,""String_Node_Str"");
        exitCode=buildExitCode(appId,report);
      }
    }
  }
  return exitCode;
}"
26559,"@Override public int compare(Path o1,Path o2){
  return -(o1.getName().compareTo(o2.getName()));
}","@Override public int compare(Path o1,Path o2){
  return o2.getName().compareTo(o1.getName());
}"
26560,"/** 
 * Create and run the cluster.
 * @return exit code
 * @throws Throwable on a failure
 */
private int createAndRunCluster(String clustername) throws Throwable {
  String hoyaClusterDir=serviceArgs.hoyaClusterURI;
  URI hoyaClusterURI=new URI(hoyaClusterDir);
  Path clusterDirPath=new Path(hoyaClusterURI);
  Path clusterSpecPath=new Path(clusterDirPath,HoyaKeys.CLUSTER_SPECIFICATION_FILE);
  FileSystem fs=getClusterFS();
  ClusterDescription.verifyClusterSpecExists(clustername,fs,clusterSpecPath);
  ClusterDescription clusterSpec=ClusterDescription.load(fs,clusterSpecPath);
  File confDir=getLocalConfDir();
  if (!confDir.exists() || !confDir.isDirectory()) {
    throw new BadCommandArgumentsException(""String_Node_Str"",confDir);
  }
  YarnConfiguration conf=new YarnConfiguration(getConfig());
  String providerType=clusterSpec.type;
  log.info(""String_Node_Str"",providerType);
  HoyaProviderFactory factory=HoyaProviderFactory.createHoyaProviderFactory(providerType);
  providerService=factory.createServerProvider();
  runChildService(providerService);
  providerService.validateClusterSpec(clusterSpec);
  HoyaAMClientProvider clientProvider=new HoyaAMClientProvider(conf);
  InetSocketAddress address=HoyaUtils.getRmSchedulerAddress(conf);
  log.info(""String_Node_Str"",address);
  yarmRPC=YarnRPC.create(conf);
  appMasterContainerID=ConverterUtils.toContainerId(HoyaUtils.mandatoryEnvVariable(ApplicationConstants.Environment.CONTAINER_ID.name()));
  appAttemptID=appMasterContainerID.getApplicationAttemptId();
  ApplicationId appid=appAttemptID.getApplicationId();
  log.info(""String_Node_Str"",appid.getId());
  Credentials credentials=UserGroupInformation.getCurrentUser().getCredentials();
  DataOutputBuffer dob=new DataOutputBuffer();
  credentials.writeTokenStorageToStream(dob);
  Iterator<Token<?>> iter=credentials.getAllTokens().iterator();
  while (iter.hasNext()) {
    Token<?> token=iter.next();
    log.info(""String_Node_Str"",token.getKind());
    if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {
      iter.remove();
    }
  }
  allTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  secretManager=new ClientToAMTokenSecretManager(appAttemptID,null);
  int heartbeatInterval=HEARTBEAT_INTERVAL;
  asyncRMClient=AMRMClientAsync.createAMRMClientAsync(HEARTBEAT_INTERVAL,this);
  addService(asyncRMClient);
  rmOperationHandler=new AsyncRMOperationHandler(asyncRMClient);
  runChildService(asyncRMClient);
  nmClientAsync=new NMClientAsyncImpl(""String_Node_Str"",this);
  runChildService(nmClientAsync);
  startHoyaRPCServer();
  InetSocketAddress rpcServiceAddr=rpcService.getConnectAddress();
  appMasterHostname=rpcServiceAddr.getHostName();
  appMasterRpcPort=rpcServiceAddr.getPort();
  appMasterTrackingUrl=null;
  log.info(""String_Node_Str"",appMasterHostname,appMasterRpcPort);
  List<ProviderRole> providerRoles=new ArrayList<ProviderRole>(providerService.getRoles());
  providerRoles.addAll(clientProvider.getRoles());
  int infoport=clusterSpec.getRoleOptInt(ROLE_HOYA_AM,RoleKeys.APP_INFOPORT,0);
  if (0 == infoport) {
    infoport=HoyaUtils.findFreePort(providerService.getDefaultMasterInfoPort(),128);
    clusterSpec.setRoleOpt(ROLE_HOYA_AM,RoleKeys.APP_INFOPORT,infoport);
  }
  appMasterTrackingUrl=""String_Node_Str"" + appMasterHostname + ""String_Node_Str""+ infoport;
  address=HoyaUtils.getRmSchedulerAddress(asyncRMClient.getConfig());
  log.info(""String_Node_Str"",appMasterRpcPort,appMasterTrackingUrl);
  RegisterApplicationMasterResponse response=asyncRMClient.registerApplicationMaster(appMasterHostname,appMasterRpcPort,appMasterTrackingUrl);
  Resource maxResources=response.getMaximumResourceCapability();
  containerMaxMemory=maxResources.getMemory();
  containerMaxCores=maxResources.getVirtualCores();
  appState.setContainerLimits(maxResources.getMemory(),maxResources.getVirtualCores());
  boolean securityEnabled=UserGroupInformation.isSecurityEnabled();
  if (securityEnabled) {
    secretManager.setMasterKey(response.getClientToAMTokenMasterKey().array());
    applicationACLs=response.getApplicationACLs();
    rpcService.getServer().refreshServiceAcl(conf,new HoyaAMPolicyProvider());
  }
  String siteXMLFilename=providerService.getSiteXMLFilename();
  File siteXML=new File(confDir,siteXMLFilename);
  if (!siteXML.exists()) {
    throw new BadCommandArgumentsException(""String_Node_Str"",confDir,siteXMLFilename,HoyaUtils.listDir(confDir));
  }
  Configuration siteConf=ConfigHelper.loadConfFromFile(siteXML);
  providerService.validateApplicationConfiguration(clusterSpec,confDir,securityEnabled);
  Path historyDir=new Path(clusterDirPath,HISTORY_DIR_NAME);
  appState.buildInstance(clusterSpec,siteConf,providerRoles,fs,historyDir);
  appState.buildAppMasterNode(appMasterContainerID);
  launchService=new RoleLaunchService(this,providerService,getClusterFS(),new Path(getDFSConfDir()));
  runChildService(launchService);
  boolean noLocalProcess=clusterSpec.getDesiredInstanceCount(ROLE_HOYA_AM,1) <= 0;
  if (noLocalProcess) {
    log.info(""String_Node_Str"");
    eventCallbackEvent();
  }
 else {
    appState.noteAMLaunched();
    launchProviderService(clusterSpec,confDir);
  }
  try {
    waitForAMCompletionSignal();
  }
  finally {
    finish();
  }
  return buildExitCode();
}","/** 
 * Create and run the cluster.
 * @return exit code
 * @throws Throwable on a failure
 */
private int createAndRunCluster(String clustername) throws Throwable {
  String hoyaClusterDir=serviceArgs.hoyaClusterURI;
  URI hoyaClusterURI=new URI(hoyaClusterDir);
  Path clusterDirPath=new Path(hoyaClusterURI);
  Path clusterSpecPath=new Path(clusterDirPath,HoyaKeys.CLUSTER_SPECIFICATION_FILE);
  FileSystem fs=getClusterFS();
  ClusterDescription.verifyClusterSpecExists(clustername,fs,clusterSpecPath);
  ClusterDescription clusterSpec=ClusterDescription.load(fs,clusterSpecPath);
  File confDir=getLocalConfDir();
  if (!confDir.exists() || !confDir.isDirectory()) {
    throw new BadCommandArgumentsException(""String_Node_Str"",confDir);
  }
  YarnConfiguration conf=new YarnConfiguration(getConfig());
  String providerType=clusterSpec.type;
  log.info(""String_Node_Str"",providerType);
  HoyaProviderFactory factory=HoyaProviderFactory.createHoyaProviderFactory(providerType);
  providerService=factory.createServerProvider();
  runChildService(providerService);
  providerService.validateClusterSpec(clusterSpec);
  HoyaAMClientProvider clientProvider=new HoyaAMClientProvider(conf);
  InetSocketAddress address=HoyaUtils.getRmSchedulerAddress(conf);
  log.info(""String_Node_Str"",address);
  yarmRPC=YarnRPC.create(conf);
  appMasterContainerID=ConverterUtils.toContainerId(HoyaUtils.mandatoryEnvVariable(ApplicationConstants.Environment.CONTAINER_ID.name()));
  appAttemptID=appMasterContainerID.getApplicationAttemptId();
  ApplicationId appid=appAttemptID.getApplicationId();
  log.info(""String_Node_Str"",appid.getId());
  Credentials credentials=UserGroupInformation.getCurrentUser().getCredentials();
  DataOutputBuffer dob=new DataOutputBuffer();
  credentials.writeTokenStorageToStream(dob);
  Iterator<Token<?>> iter=credentials.getAllTokens().iterator();
  while (iter.hasNext()) {
    Token<?> token=iter.next();
    log.info(""String_Node_Str"",token.getKind());
    if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {
      iter.remove();
    }
  }
  allTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  secretManager=new ClientToAMTokenSecretManager(appAttemptID,null);
  int heartbeatInterval=HEARTBEAT_INTERVAL;
  asyncRMClient=AMRMClientAsync.createAMRMClientAsync(HEARTBEAT_INTERVAL,this);
  addService(asyncRMClient);
  rmOperationHandler=new AsyncRMOperationHandler(asyncRMClient);
  runChildService(asyncRMClient);
  nmClientAsync=new NMClientAsyncImpl(""String_Node_Str"",this);
  runChildService(nmClientAsync);
  startHoyaRPCServer();
  InetSocketAddress rpcServiceAddr=rpcService.getConnectAddress();
  appMasterHostname=rpcServiceAddr.getHostName();
  appMasterRpcPort=rpcServiceAddr.getPort();
  appMasterTrackingUrl=null;
  log.info(""String_Node_Str"",appMasterHostname,appMasterRpcPort);
  List<ProviderRole> providerRoles=new ArrayList<ProviderRole>(providerService.getRoles());
  providerRoles.addAll(clientProvider.getRoles());
  int infoport=clusterSpec.getRoleOptInt(ROLE_HOYA_AM,RoleKeys.APP_INFOPORT,0);
  if (0 == infoport) {
    infoport=HoyaUtils.findFreePort(providerService.getDefaultMasterInfoPort(),128);
    clusterSpec.setRoleOpt(ROLE_HOYA_AM,RoleKeys.APP_INFOPORT,infoport);
  }
  appMasterTrackingUrl=""String_Node_Str"" + appMasterHostname + ""String_Node_Str""+ infoport;
  address=HoyaUtils.getRmSchedulerAddress(asyncRMClient.getConfig());
  log.info(""String_Node_Str"",appMasterRpcPort,appMasterTrackingUrl);
  RegisterApplicationMasterResponse response=asyncRMClient.registerApplicationMaster(appMasterHostname,appMasterRpcPort,appMasterTrackingUrl);
  Resource maxResources=response.getMaximumResourceCapability();
  containerMaxMemory=maxResources.getMemory();
  containerMaxCores=maxResources.getVirtualCores();
  appState.setContainerLimits(maxResources.getMemory(),maxResources.getVirtualCores());
  boolean securityEnabled=UserGroupInformation.isSecurityEnabled();
  if (securityEnabled) {
    secretManager.setMasterKey(response.getClientToAMTokenMasterKey().array());
    applicationACLs=response.getApplicationACLs();
    rpcService.getServer().refreshServiceAcl(conf,new HoyaAMPolicyProvider());
  }
  String siteXMLFilename=providerService.getSiteXMLFilename();
  File siteXML=new File(confDir,siteXMLFilename);
  if (!siteXML.exists()) {
    dob.close();
    throw new BadCommandArgumentsException(""String_Node_Str"",confDir,siteXMLFilename,HoyaUtils.listDir(confDir));
  }
  Configuration siteConf=ConfigHelper.loadConfFromFile(siteXML);
  providerService.validateApplicationConfiguration(clusterSpec,confDir,securityEnabled);
  Path historyDir=new Path(clusterDirPath,HISTORY_DIR_NAME);
  appState.buildInstance(clusterSpec,siteConf,providerRoles,fs,historyDir);
  appState.buildAppMasterNode(appMasterContainerID);
  launchService=new RoleLaunchService(this,providerService,getClusterFS(),new Path(getDFSConfDir()));
  runChildService(launchService);
  boolean noLocalProcess=clusterSpec.getDesiredInstanceCount(ROLE_HOYA_AM,1) <= 0;
  if (noLocalProcess) {
    log.info(""String_Node_Str"");
    eventCallbackEvent();
  }
 else {
    appState.noteAMLaunched();
    launchProviderService(clusterSpec,confDir);
  }
  try {
    waitForAMCompletionSignal();
  }
  finally {
    finish();
  }
  return buildExitCode();
}"
26561,"/** 
 * Build up the classpath for execution  -behaves very differently on a mini test cluster vs a production production one.
 * @param hoyaConfDir relative path to the dir containing hoya config options to put on theclasspath -or null
 * @return a classpath
 */
private String buildClasspath(String hoyaConfDir){
  StringBuilder classPathEnv=new StringBuilder();
  if (getUsingMiniMRCluster()) {
    classPathEnv.append(System.getProperty(""String_Node_Str""));
  }
 else {
    classPathEnv.append(ApplicationConstants.Environment.CLASSPATH.$()).append(File.pathSeparatorChar).append(""String_Node_Str"");
    for (    String c : getConfig().getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {
      classPathEnv.append(File.pathSeparatorChar);
      classPathEnv.append(c.trim());
    }
    if (hoyaConfDir != null) {
      classPathEnv.append(File.pathSeparatorChar).append(hoyaConfDir);
    }
  }
  return classPathEnv.toString();
}","/** 
 * Build up the classpath for execution  -behaves very differently on a mini test cluster vs a production production one.
 * @param hoyaConfDir relative path to the dir containing hoya config options to put on theclasspath -or null
 * @return a classpath
 */
private String buildClasspath(String hoyaConfDir){
  StringBuilder classPathEnv=new StringBuilder();
  if (getUsingMiniMRCluster()) {
    classPathEnv.append(System.getProperty(""String_Node_Str""));
  }
 else {
    classPathEnv.append(ApplicationConstants.Environment.CLASSPATH.$()).append(File.pathSeparatorChar).append(""String_Node_Str"");
    String[] strs=getConfig().getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH);
    if (strs != null) {
      for (      String c : strs) {
        classPathEnv.append(File.pathSeparatorChar);
        classPathEnv.append(c.trim());
      }
    }
    if (hoyaConfDir != null) {
      classPathEnv.append(File.pathSeparatorChar).append(hoyaConfDir);
    }
  }
  return classPathEnv.toString();
}"
26562,"/** 
 * Get the lines of recent output
 * @return the last few lines of output; an empty list if there are noneor the process is not actually running
 */
public List<String> getRecentOutput(){
  return new ArrayList<String>(recentLines);
}","/** 
 * Get the lines of recent output
 * @return the last few lines of output; an empty list if there are noneor the process is not actually running
 */
public synchronized List<String> getRecentOutput(){
  return new ArrayList<String>(recentLines);
}"
26563,"/** 
 * Propagate a property from a source to a dest config, with a best-effort attempt at propagating the origin. If the 
 * @param dest destination
 * @param src source
 * @param key key to try to copy
 * @return true if the key was found and propagated
 */
public static boolean propagate(Configuration dest,Configuration src,String key){
  String val=src.get(key);
  if (val != null) {
    String[] origin=src.getPropertySources(key);
    if (origin.length > 0) {
      dest.set(key,val,origin[0]);
    }
 else {
      dest.set(key,val);
      return true;
    }
  }
  return false;
}","/** 
 * Propagate a property from a source to a dest config, with a best-effort attempt at propagating the origin. If the 
 * @param dest destination
 * @param src source
 * @param key key to try to copy
 * @return true if the key was found and propagated
 */
public static boolean propagate(Configuration dest,Configuration src,String key){
  String val=src.get(key);
  if (val != null) {
    String[] origin=src.getPropertySources(key);
    if (origin != null && origin.length > 0) {
      dest.set(key,val,origin[0]);
    }
 else {
      dest.set(key,val);
      return true;
    }
  }
  return false;
}"
26564,"public static String listDir(File dir){
  StringBuilder builder=new StringBuilder();
  String[] confDirEntries=dir.list();
  for (  String entry : confDirEntries) {
    builder.append(entry).append(""String_Node_Str"");
  }
  return builder.toString();
}","public static String listDir(File dir){
  if (dir == null)   return ""String_Node_Str"";
  StringBuilder builder=new StringBuilder();
  String[] confDirEntries=dir.list();
  for (  String entry : confDirEntries) {
    builder.append(entry).append(""String_Node_Str"");
  }
  return builder.toString();
}"
26565,"/** 
 * Add the passed   {@link Service} to the list of services managed by this{@link SequenceService}
 * @param service the {@link Service} to be added
 */
@Override public void addService(Service service){
  log.debug(""String_Node_Str"",service.getName());
synchronized (serviceList) {
    serviceList.add(service);
  }
}","/** 
 * Add the passed   {@link Service} to the list of services managed by this{@link SequenceService}
 * @param service the {@link Service} to be added
 */
@Override public synchronized void addService(Service service){
  log.debug(""String_Node_Str"",service.getName());
synchronized (serviceList) {
    serviceList.add(service);
  }
}"
26566,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_low_profile);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    argbEvaluator=new ArgbEvaluator();
  }
  animShow=AnimationUtils.loadAnimation(this,R.anim.abc_slide_in_top);
  animHide=AnimationUtils.loadAnimation(this,R.anim.abc_slide_out_top);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  findViewById(R.id.toggle).setOnClickListener(new View.OnClickListener(){
    @Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void onClick(    View v){
      View decorView=getWindow().getDecorView();
      if (toolbar.getVisibility() == View.VISIBLE) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          changeStatusBarBackground(false);
        }
 else         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
        }
        toolbar.startAnimation(animHide);
        toolbar.setVisibility(View.GONE);
      }
 else {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          changeStatusBarBackground(true);
        }
 else         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
        }
        toolbar.setVisibility(View.VISIBLE);
        toolbar.startAnimation(animShow);
      }
    }
  }
);
}","@Override @TargetApi(Build.VERSION_CODES.HONEYCOMB) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_low_profile);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    argbEvaluator=new ArgbEvaluator();
  }
  animShow=AnimationUtils.loadAnimation(this,R.anim.abc_slide_in_top);
  animHide=AnimationUtils.loadAnimation(this,R.anim.abc_slide_out_top);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  findViewById(R.id.toggle).setOnClickListener(new View.OnClickListener(){
    @Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void onClick(    View v){
      View decorView=getWindow().getDecorView();
      if (toolbar.getVisibility() == View.VISIBLE) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          changeStatusBarBackground(false);
        }
 else         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
        }
        toolbar.startAnimation(animHide);
        toolbar.setVisibility(View.GONE);
      }
 else {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          changeStatusBarBackground(true);
        }
 else         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
        }
        toolbar.setVisibility(View.VISIBLE);
        toolbar.startAnimation(animShow);
      }
    }
  }
);
}"
26567,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_low_profile);
  findViewById(R.id.toggle).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActionBar ab=getSupportActionBar();
      View decorView=getWindow().getDecorView();
      if (ab.isShowing()) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
        }
        ab.hide();
      }
 else {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
        }
        ab.show();
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_low_profile);
  findViewById(R.id.toggle).setOnClickListener(new View.OnClickListener(){
    @Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void onClick(    View v){
      ActionBar ab=getSupportActionBar();
      View decorView=getWindow().getDecorView();
      if (ab.isShowing()) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
        }
        ab.hide();
      }
 else {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
        }
        ab.show();
      }
    }
  }
);
}"
26568,"@Override public void onClick(View v){
  ActionBar ab=getSupportActionBar();
  View decorView=getWindow().getDecorView();
  if (ab.isShowing()) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
    }
    ab.hide();
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
    }
    ab.show();
  }
}","@Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void onClick(View v){
  ActionBar ab=getSupportActionBar();
  View decorView=getWindow().getDecorView();
  if (ab.isShowing()) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
    }
    ab.hide();
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
    }
    ab.show();
  }
}"
26569,"private String addCustomizedNamespacePrefix(String customizedNamespacePrefix,String expression){
  return expression.replaceAll(""String_Node_Str"",""String_Node_Str"" + customizedNamespacePrefix + ""String_Node_Str"");
}","private String addCustomizedNamespacePrefix(String customizedNamespacePrefix,String expression){
  return expression.replaceAll(""String_Node_Str"",""String_Node_Str"" + customizedNamespacePrefix + ""String_Node_Str""+ ""String_Node_Str"");
}"
26570,"@Override public void filter(Reader reader,Writer writer,List<Replace> replaces) throws IOException {
  SAXBuilder saxBuilder=new SAXBuilder();
  Document doc=null;
  try {
    doc=saxBuilder.build(reader);
  }
 catch (  JDOMException e) {
    throw new IOException(""String_Node_Str"",e);
  }
  for (  Replace replace : replaces) {
    XPathFactory xPathFactory=XPathFactory.instance();
    XPathExpression xPathExpression=null;
    String rootNamespaceURI=doc.getRootElement().getNamespaceURI();
    if (StringUtils.isEmpty(rootNamespaceURI)) {
      xPathExpression=xPathFactory.compile(replace.getXpath());
    }
 else {
      String customizedNamespacePrefix=""String_Node_Str"";
      Namespace rootNamespace=Namespace.getNamespace(customizedNamespacePrefix,doc.getRootElement().getNamespaceURI());
      String expression=replace.getXpath().replace(""String_Node_Str"",""String_Node_Str"" + customizedNamespacePrefix + ""String_Node_Str"");
      xPathExpression=xPathFactory.compile(expression,Filters.fpassthrough(),null,rootNamespace);
    }
    for (    Object obj : xPathExpression.evaluate(doc)) {
      if (obj instanceof Element) {
        ((Element)obj).setText(replace.getValue());
      }
 else       if (obj instanceof Attribute) {
        ((Attribute)obj).setValue(replace.getValue());
      }
 else {
        throw new IOException(""String_Node_Str"" + obj.getClass().toString());
      }
    }
  }
  XMLOutputter xmlOutputter=new XMLOutputter(Format.getPrettyFormat());
  xmlOutputter.output(doc,writer);
}","@Override public void filter(Reader reader,Writer writer,List<Replace> replaces) throws IOException {
  SAXBuilder saxBuilder=new SAXBuilder();
  Document doc=null;
  try {
    doc=saxBuilder.build(reader);
  }
 catch (  JDOMException e) {
    throw new IOException(""String_Node_Str"",e);
  }
  for (  Replace replace : replaces) {
    XPathFactory xPathFactory=XPathFactory.instance();
    XPathExpression xPathExpression=null;
    String rootNamespaceURI=doc.getRootElement().getNamespaceURI();
    if (StringUtils.isEmpty(rootNamespaceURI)) {
      xPathExpression=xPathFactory.compile(replace.getXpath());
    }
 else {
      Namespace rootNamespace=Namespace.getNamespace(CUSTOMIZED_NAMESPACE_PREFIX,doc.getRootElement().getNamespaceURI());
      String expression=addCustomizedNamespacePrefix(CUSTOMIZED_NAMESPACE_PREFIX,replace.getXpath());
      xPathExpression=xPathFactory.compile(expression,Filters.fpassthrough(),null,rootNamespace);
    }
    for (    Object obj : xPathExpression.evaluate(doc)) {
      if (obj instanceof Element) {
        ((Element)obj).setText(replace.getValue());
      }
 else       if (obj instanceof Attribute) {
        ((Attribute)obj).setValue(replace.getValue());
      }
 else {
        throw new IOException(""String_Node_Str"" + obj.getClass().toString());
      }
    }
  }
  XMLOutputter xmlOutputter=new XMLOutputter(Format.getPrettyFormat());
  xmlOutputter.output(doc,writer);
}"
26571,"public S3RiverFeedDefinition(String feedname,String bucket,String pathPrefix,String downloadHost,int updateRate,List<String> includes,List<String> excludes,String accessKey,String secretKey,boolean jsonSupport){
  this.feedname=feedname;
  this.bucket=bucket;
  this.pathPrefix=pathPrefix;
  this.downloadHost=downloadHost;
  this.updateRate=updateRate;
  this.includes=includes;
  this.excludes=excludes;
  this.accessKey=accessKey;
  this.secretKey=secretKey;
}","public S3RiverFeedDefinition(String feedname,String bucket,String pathPrefix,String downloadHost,int updateRate,List<String> includes,List<String> excludes,String accessKey,String secretKey,boolean jsonSupport){
  this.feedname=feedname;
  this.bucket=bucket;
  this.pathPrefix=pathPrefix;
  this.downloadHost=downloadHost;
  this.updateRate=updateRate;
  this.includes=includes;
  this.excludes=excludes;
  this.accessKey=accessKey;
  this.secretKey=secretKey;
  this.jsonSupport=jsonSupport;
}"
26572,"public TransientVector pop(){
  ensureEditable();
  if (cnt == 0)   throw new IllegalStateException(""String_Node_Str"");
  if (cnt == 1) {
    cnt=0;
    return this;
  }
  int i=cnt - 1;
  if ((i & 0x01f) > 0) {
    --cnt;
    return this;
  }
  Object[] newtail=arrayFor(cnt - 2);
  Node newroot=popTail(shift,root);
  int newshift=shift;
  if (newroot == null) {
    newroot=new Node(root.edit);
  }
  if (shift > 5 && newroot.array[1] == null) {
    newroot=ensureEditable((Node)newroot.array[0]);
    newshift-=5;
  }
  root=newroot;
  shift=newshift;
  --cnt;
  tail=newtail;
  return this;
}","public TransientVector pop(){
  ensureEditable();
  if (cnt == 0)   throw new IllegalStateException(""String_Node_Str"");
  if (cnt == 1) {
    cnt=0;
    return this;
  }
  int i=cnt - 1;
  if ((i & 0x01f) > 0) {
    --cnt;
    return this;
  }
  Object[] newtail=editableArrayFor(cnt - 2);
  Node newroot=popTail(shift,root);
  int newshift=shift;
  if (newroot == null) {
    newroot=new Node(root.edit);
  }
  if (shift > 5 && newroot.array[1] == null) {
    newroot=ensureEditable((Node)newroot.array[0]);
    newshift-=5;
  }
  root=newroot;
  shift=newshift;
  --cnt;
  tail=newtail;
  return this;
}"
26573,"private HashCollisionNode ensureEditable(AtomicReference<Thread> edit,int count,Object[] array){
  if (this.edit == edit) {
    this.array=array;
    return this;
  }
  return new HashCollisionNode(edit,count,hash,array);
}","private HashCollisionNode ensureEditable(AtomicReference<Thread> edit,int count,Object[] array){
  if (this.edit == edit) {
    this.array=array;
    return this;
  }
  return new HashCollisionNode(edit,hash,count,array);
}"
26574,"HashCollisionNode(AtomicReference<Thread> edit,int hash,Object... array){
  this.edit=edit;
  this.hash=hash;
  this.array=array;
}","HashCollisionNode(AtomicReference<Thread> edit,int hash,int count,Object... array){
  this.edit=edit;
  this.hash=hash;
  this.count=count;
  this.array=array;
}"
26575,"private static INode createNode(AtomicReference<Thread> edit,int shift,Object key1,Object val1,int key2hash,Object key2,Object val2){
  int key1hash=Util.hash(key1);
  if (key1hash == key2hash)   return new HashCollisionNode(null,key1hash,new Object[]{key1,val1,key2,val2});
  Box _=new Box(null);
  return BitmapIndexedNode.EMPTY.assoc(edit,shift,key1hash,key1,val1,_).assoc(edit,shift,key2hash,key2,val2,_);
}","private static INode createNode(AtomicReference<Thread> edit,int shift,Object key1,Object val1,int key2hash,Object key2,Object val2){
  int key1hash=Util.hash(key1);
  if (key1hash == key2hash)   return new HashCollisionNode(null,key1hash,2,new Object[]{key1,val1,key2,val2});
  Box _=new Box(null);
  return BitmapIndexedNode.EMPTY.assoc(edit,shift,key1hash,key1,val1,_).assoc(edit,shift,key2hash,key2,val2,_);
}"
26576,"public INode without(AtomicReference<Thread> edit,int shift,int hash,Object key,Box removedLeaf){
  return null;
}","public INode without(AtomicReference<Thread> edit,int shift,int hash,Object key,Box removedLeaf){
  int idx=findIndex(key);
  if (idx == -1)   return this;
  if (array.length == 2)   return null;
  HashCollisionNode editable=ensureEditable(edit);
  editable.array[idx]=editable.array[2 * count - 2];
  editable.array[idx + 1]=editable.array[2 * count - 1];
  editable.array[2 * count - 2]=editable.array[2 * count - 1]=null;
  editable.count--;
  return editable;
}"
26577,"public INode assoc(AtomicReference<Thread> edit,int shift,int hash,Object key,Object val,Box addedLeaf){
  if (hash == this.hash) {
    int idx=findIndex(key);
    if (idx != -1) {
      if (array[idx + 1] == val)       return this;
      return editAndSet(idx + 1,val);
    }
    Object[] newArray=new Object[array.length + 2];
    System.arraycopy(array,0,newArray,0,array.length);
    newArray[array.length]=key;
    newArray[array.length + 1]=val;
    return ensureEditable(edit,newArray);
  }
  return new BitmapIndexedNode(edit,bitpos(this.hash,shift),new Object[]{this}).assoc(edit,shift,hash,key,val,addedLeaf);
}","public INode assoc(AtomicReference<Thread> edit,int shift,int hash,Object key,Object val,Box addedLeaf){
  if (hash == this.hash) {
    int idx=findIndex(key);
    if (idx != -1) {
      if (array[idx + 1] == val)       return this;
      return editAndSet(edit,idx + 1,val);
    }
    Object[] newArray=new Object[array.length + 2];
    System.arraycopy(array,0,newArray,0,array.length);
    newArray[array.length]=key;
    newArray[array.length + 1]=val;
    return ensureEditable(edit,count + 1,newArray);
  }
  return new BitmapIndexedNode(edit,bitpos(this.hash,shift),new Object[]{this}).assoc(edit,shift,hash,key,val,addedLeaf);
}"
26578,"Object doValAt(Object key,Object notFound){
  return root.find(0,Util.hash(key),key,notFound);
}","Object doValAt(Object key,Object notFound){
  if (key == null)   if (hasNull)   return nullValue;
 else   return notFound;
  if (root == null)   return null;
  return root.find(0,Util.hash(key),key,notFound);
}"
26579,"HashCollisionNode ensureEditable(AtomicReference<Thread> edit,Object[] array){
  if (this.edit == edit) {
    this.array=array;
    return this;
  }
  return new HashCollisionNode(edit,hash,array);
}","HashCollisionNode ensureEditable(AtomicReference<Thread> edit,int count,Object[] array){
  if (this.edit == edit) {
    this.array=array;
    return this;
  }
  return new HashCollisionNode(edit,count,hash,array);
}"
26580,"HashCollisionNode editAndSet(int i,Object a,int j,Object b){
  HashCollisionNode editable=ensureEditable(edit);
  editable.array[i]=a;
  editable.array[j]=b;
  return editable;
}","HashCollisionNode editAndSet(AtomicReference<Thread> edit,int i,Object a,int j,Object b){
  HashCollisionNode editable=ensureEditable(edit);
  editable.array[i]=a;
  editable.array[j]=b;
  return editable;
}"
26581,"private static Expr analyzeSymbol(Symbol sym) throws Exception {
  Symbol tag=tagOf(sym);
  if (sym.ns == null) {
    LocalBinding b=referenceLocal(sym);
    if (b != null)     return new LocalBindingExpr(b,tag);
  }
 else {
    if (namespaceFor(sym) == null) {
      Symbol nsSym=Symbol.create(sym.ns);
      Class c=HostExpr.maybeClass(nsSym,false);
      if (c != null) {
        if (Reflector.getField(c,sym.name,true) != null)         return new StaticFieldExpr((Integer)LINE.deref(),c,sym.name);
      }
    }
  }
  Object o=resolve(sym);
  if (o instanceof Var) {
    Var v=(Var)o;
    if (isMacro(v) != null)     throw new Exception(""String_Node_Str"" + v);
    registerVar(v);
    return new VarExpr(v,tag);
  }
 else   if (o instanceof Class)   return new ConstantExpr(o);
 else   if (o instanceof Symbol)   return new UnresolvedVarExpr((Symbol)o);
  throw new Exception(""String_Node_Str"" + sym + ""String_Node_Str"");
}","private static Expr analyzeSymbol(Symbol sym) throws Exception {
  Symbol tag=tagOf(sym);
  if (sym.ns == null) {
    LocalBinding b=referenceLocal(sym);
    if (b != null)     return new LocalBindingExpr(b,tag);
  }
 else {
    if (namespaceFor(sym) == null) {
      Symbol nsSym=Symbol.create(sym.ns);
      Class c=HostExpr.maybeClass(nsSym,false);
      if (c != null) {
        if (Reflector.getField(c,sym.name,true) != null)         return new StaticFieldExpr((Integer)LINE.deref(),c,sym.name);
        throw new Exception(""String_Node_Str"" + sym.name + ""String_Node_Str""+ c);
      }
    }
  }
  Object o=resolve(sym);
  if (o instanceof Var) {
    Var v=(Var)o;
    if (isMacro(v) != null)     throw new Exception(""String_Node_Str"" + v);
    registerVar(v);
    return new VarExpr(v,tag);
  }
 else   if (o instanceof Class)   return new ConstantExpr(o);
 else   if (o instanceof Symbol)   return new UnresolvedVarExpr((Symbol)o);
  throw new Exception(""String_Node_Str"" + sym + ""String_Node_Str"");
}"
26582,"static Object invokeMatchingMethod(String methodName,List methods,Object target,Object[] args) throws Exception {
  Method m=null;
  Object[] boxedArgs=null;
  if (methods.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + methodName + ""String_Node_Str""+ target.getClass());
  }
 else   if (methods.size() == 1) {
    m=(Method)methods.get(0);
    boxedArgs=boxArgs(m.getParameterTypes(),args);
  }
 else {
    Method foundm=null;
    for (Iterator i=methods.iterator(); i.hasNext(); ) {
      m=(Method)i.next();
      Class[] params=m.getParameterTypes();
      if (isCongruent(params,args)) {
        if (foundm == null || Compiler.subsumes(params,foundm.getParameterTypes())) {
          foundm=m;
          boxedArgs=boxArgs(params,args);
        }
      }
    }
    m=foundm;
  }
  if (m == null)   throw new IllegalArgumentException(""String_Node_Str"" + methodName + ""String_Node_Str""+ target.getClass());
  if (!Modifier.isPublic(m.getDeclaringClass().getModifiers())) {
    m=getAsMethodOfPublicBase(m.getDeclaringClass(),m);
  }
  if (m == null)   throw new IllegalArgumentException(""String_Node_Str"" + methodName + ""String_Node_Str""+ target.getClass());
  try {
    return prepRet(m.getReturnType(),m.invoke(target,boxedArgs));
  }
 catch (  InvocationTargetException e) {
    if (e.getCause() instanceof Exception)     throw (Exception)e.getCause();
    throw e;
  }
}","static Object invokeMatchingMethod(String methodName,List methods,Object target,Object[] args) throws Exception {
  Method m=null;
  Object[] boxedArgs=null;
  if (methods.isEmpty()) {
    throw new IllegalArgumentException(noMethodReport(methodName,target));
  }
 else   if (methods.size() == 1) {
    m=(Method)methods.get(0);
    boxedArgs=boxArgs(m.getParameterTypes(),args);
  }
 else {
    Method foundm=null;
    for (Iterator i=methods.iterator(); i.hasNext(); ) {
      m=(Method)i.next();
      Class[] params=m.getParameterTypes();
      if (isCongruent(params,args)) {
        if (foundm == null || Compiler.subsumes(params,foundm.getParameterTypes())) {
          foundm=m;
          boxedArgs=boxArgs(params,args);
        }
      }
    }
    m=foundm;
  }
  if (m == null)   throw new IllegalArgumentException(noMethodReport(methodName,target));
  if (!Modifier.isPublic(m.getDeclaringClass().getModifiers())) {
    m=getAsMethodOfPublicBase(m.getDeclaringClass(),m);
  }
  if (m == null)   throw new IllegalArgumentException(noMethodReport(methodName,target));
  try {
    return prepRet(m.getReturnType(),m.invoke(target,boxedArgs));
  }
 catch (  InvocationTargetException e) {
    if (e.getCause() instanceof Exception)     throw (Exception)e.getCause();
    throw e;
  }
}"
26583,"public Object[] toArray(Object[] a){
  if (a.length >= count()) {
    ISeq s=seq();
    for (int i=0; s != null; ++i, s=s.rest()) {
      a[i]=s.first();
    }
    if (a.length >= count())     a[count()]=null;
    return a;
  }
 else   return toArray();
}","public Object[] toArray(Object[] a){
  if (a.length >= count()) {
    ISeq s=seq();
    for (int i=0; s != null; ++i, s=s.rest()) {
      a[i]=s.first();
    }
    if (a.length > count())     a[count()]=null;
    return a;
  }
 else   return toArray();
}"
26584,"public InstanceMethodExpr(int line,Expr target,String methodName,IPersistentVector args) throws Exception {
  this.line=line;
  this.args=args;
  this.methodName=methodName;
  this.target=target;
  if (target.hasJavaClass()) {
    List methods=Reflector.getMethods(target.getJavaClass(),args.count(),methodName,false);
    if (methods.isEmpty())     method=null;
 else {
      int methodidx=0;
      if (methods.size() > 1) {
        ArrayList<Class[]> params=new ArrayList();
        for (int i=0; i < methods.size(); i++)         params.add(((java.lang.reflect.Method)methods.get(i)).getParameterTypes());
        methodidx=getMatchingParams(params,args);
      }
      method=(java.lang.reflect.Method)(methodidx >= 0 ? methods.get(methodidx) : null);
    }
  }
 else   method=null;
}","public InstanceMethodExpr(int line,Expr target,String methodName,IPersistentVector args) throws Exception {
  this.line=line;
  this.args=args;
  this.methodName=methodName;
  this.target=target;
  if (target.hasJavaClass()) {
    List methods=Reflector.getMethods(target.getJavaClass(),args.count(),methodName,false);
    if (methods.isEmpty())     method=null;
 else {
      int methodidx=0;
      if (methods.size() > 1) {
        ArrayList<Class[]> params=new ArrayList();
        for (int i=0; i < methods.size(); i++)         params.add(((java.lang.reflect.Method)methods.get(i)).getParameterTypes());
        methodidx=getMatchingParams(params,args);
      }
      java.lang.reflect.Method m=(java.lang.reflect.Method)(methodidx >= 0 ? methods.get(methodidx) : null);
      if (m != null && !Modifier.isPublic(m.getDeclaringClass().getModifiers())) {
        m=Reflector.getAsMethodOfPublicBase(m.getDeclaringClass(),m);
      }
      method=m;
    }
  }
 else   method=null;
}"
26585,"static Object prepRet(Object x){
  if (x instanceof Boolean)   return ((Boolean)x).booleanValue() ? RT.T : null;
  return x;
}","static Object prepRet(Object x){
  if (x instanceof Boolean)   return ((Boolean)x).booleanValue() ? x : null;
  return x;
}"
26586,"private void compile(){
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  ClassVisitor cv=new TraceClassVisitor(new CheckClassAdapter(cw),new PrintWriter(System.out));
  cv.visit(V1_5,ACC_PUBLIC,internalName,null,isVariadic() ? ""String_Node_Str"" : ""String_Node_Str"",null);
  String source=(String)SOURCE.get();
  if (source != null)   cv.visitSource(source,null);
  for (ISeq s=RT.keys(keywords); s != null; s=s.rest()) {
    Keyword k=(Keyword)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC,munge(k.sym.toString()),KEYWORD_TYPE.getDescriptor(),null,null);
  }
  for (ISeq s=RT.keys(vars); s != null; s=s.rest()) {
    Var v=(Var)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC,munge(v.sym.toString()),VAR_TYPE.getDescriptor(),null,null);
  }
  GeneratorAdapter clinitgen=new GeneratorAdapter(ACC_PUBLIC + ACC_STATIC,Method.getMethod(""String_Node_Str""),null,null,cv);
  clinitgen.visitCode();
  for (ISeq s=RT.keys(keywords); s != null; s=s.rest()) {
    Keyword k=(Keyword)s.first();
    clinitgen.push(k.sym.ns);
    clinitgen.push(k.sym.name);
    clinitgen.invokeStatic(KEYWORD_TYPE,kwintern);
    clinitgen.putStatic(fntype,munge(k.sym.toString()),KEYWORD_TYPE);
  }
  for (ISeq s=RT.keys(vars); s != null; s=s.rest()) {
    Var v=(Var)s.first();
    clinitgen.push(v.sym.ns);
    clinitgen.push(v.sym.name);
    clinitgen.invokeStatic(SYMBOL_TYPE,symcreate);
    clinitgen.invokeStatic(VAR_TYPE,varintern);
    clinitgen.putStatic(fntype,munge(v.sym.toString()),VAR_TYPE);
  }
  clinitgen.returnValue();
  clinitgen.endMethod();
  for (ISeq s=RT.keys(closes); s != null; s=s.rest()) {
    LocalBinding lb=(LocalBinding)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL,lb.name,OBJECT_TYPE.getDescriptor(),null,null);
  }
  Method m=new Method(""String_Node_Str"",Type.VOID_TYPE,ARG_TYPES[closes.count()]);
  GeneratorAdapter ctorgen=new GeneratorAdapter(ACC_PUBLIC,m,null,null,cv);
  ctorgen.visitCode();
  ctorgen.loadThis();
  if (isVariadic()) {
    ctorgen.push(variadicMethod.reqParms.count());
    ctorgen.invokeConstructor(restFnType,restfnctor);
  }
 else   ctorgen.invokeConstructor(aFnType,afnctor);
  int a=1;
  for (ISeq s=RT.keys(closes); s != null; s=s.rest(), ++a) {
    LocalBinding lb=(LocalBinding)s.first();
    ctorgen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD),a);
    ctorgen.putField(fntype,lb.name,OBJECT_TYPE);
  }
  ctorgen.returnValue();
  ctorgen.endMethod();
  for (ISeq s=RT.seq(methods); s != null; s=s.rest()) {
    FnMethod method=(FnMethod)s.first();
    method.emit(this,cv);
  }
  cv.visitEnd();
  DynamicClassLoader loader=(DynamicClassLoader)LOADER.get();
  compiledClass=loader.defineClass(name,cw.toByteArray());
}","private void compile(){
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  ClassVisitor cv=new TraceClassVisitor(new CheckClassAdapter(cw),new PrintWriter(System.out));
  cv.visit(V1_5,ACC_PUBLIC,internalName,null,isVariadic() ? ""String_Node_Str"" : ""String_Node_Str"",null);
  String source=(String)SOURCE.get();
  if (source != null)   cv.visitSource(source,null);
  for (ISeq s=RT.keys(keywords); s != null; s=s.rest()) {
    Keyword k=(Keyword)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC,munge(k.sym.toString()),KEYWORD_TYPE.getDescriptor(),null,null);
  }
  for (ISeq s=RT.keys(vars); s != null; s=s.rest()) {
    Var v=(Var)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC,munge(v.sym.toString()),VAR_TYPE.getDescriptor(),null,null);
  }
  GeneratorAdapter clinitgen=new GeneratorAdapter(ACC_PUBLIC + ACC_STATIC,Method.getMethod(""String_Node_Str""),null,null,cv);
  clinitgen.visitCode();
  for (ISeq s=RT.keys(keywords); s != null; s=s.rest()) {
    Keyword k=(Keyword)s.first();
    clinitgen.push(k.sym.ns);
    clinitgen.push(k.sym.name);
    clinitgen.invokeStatic(KEYWORD_TYPE,kwintern);
    clinitgen.putStatic(fntype,munge(k.sym.toString()),KEYWORD_TYPE);
  }
  for (ISeq s=RT.keys(vars); s != null; s=s.rest()) {
    Var v=(Var)s.first();
    clinitgen.push(v.sym.ns);
    clinitgen.push(v.sym.name);
    clinitgen.invokeStatic(SYMBOL_TYPE,symcreate);
    clinitgen.invokeStatic(VAR_TYPE,varintern);
    clinitgen.putStatic(fntype,munge(v.sym.toString()),VAR_TYPE);
  }
  clinitgen.returnValue();
  clinitgen.endMethod();
  for (ISeq s=RT.keys(closes); s != null; s=s.rest()) {
    LocalBinding lb=(LocalBinding)s.first();
    cv.visitField(ACC_PUBLIC + ACC_FINAL,lb.name,OBJECT_TYPE.getDescriptor(),null,null);
  }
  Method m=new Method(""String_Node_Str"",Type.VOID_TYPE,ARG_TYPES[closes.count()]);
  GeneratorAdapter ctorgen=new GeneratorAdapter(ACC_PUBLIC,m,null,null,cv);
  ctorgen.visitCode();
  ctorgen.loadThis();
  if (isVariadic()) {
    ctorgen.push(variadicMethod.reqParms.count());
    ctorgen.invokeConstructor(restFnType,restfnctor);
  }
 else   ctorgen.invokeConstructor(aFnType,afnctor);
  int a=1;
  for (ISeq s=RT.keys(closes); s != null; s=s.rest(), ++a) {
    LocalBinding lb=(LocalBinding)s.first();
    ctorgen.loadThis();
    ctorgen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD),a);
    ctorgen.putField(fntype,lb.name,OBJECT_TYPE);
  }
  ctorgen.returnValue();
  ctorgen.endMethod();
  for (ISeq s=RT.seq(methods); s != null; s=s.rest()) {
    FnMethod method=(FnMethod)s.first();
    method.emit(this,cv);
  }
  cv.visitEnd();
  DynamicClassLoader loader=(DynamicClassLoader)LOADER.get();
  compiledClass=loader.defineClass(name,cw.toByteArray());
}"
26587,"private void emitLocal(GeneratorAdapter gen,LocalBinding lb){
  if (closes.contains(lb))   gen.getField(fntype,lb.name,OBJECT_TYPE);
 else   gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD),lb.idx);
}","private void emitLocal(GeneratorAdapter gen,LocalBinding lb){
  if (closes.contains(lb)) {
    gen.loadThis();
    gen.getField(fntype,lb.name,OBJECT_TYPE);
  }
 else   gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD),lb.idx);
}"
26588,"public IPersistentMap put(Object key,Object val){
  int i=indexOf(key);
  Object[] newArray;
  if (i >= 0) {
    if (array[i + 1] == val)     return this;
    newArray=array.clone();
    newArray[i + 1]=val;
  }
 else {
    newArray=new Object[array.length + 2];
    if (array.length > 0)     System.arraycopy(array,0,newArray,2,array.length);
    newArray[0]=key;
    newArray[1]=val;
  }
  return new PersistentArrayMap(newArray);
}","public IPersistentMap put(Object key,Object val){
  int i=indexOf(key);
  Object[] newArray;
  if (i >= 0) {
    if (array[i + 1] == val)     return this;
    newArray=array.clone();
    newArray[i + 1]=val;
  }
 else {
    newArray=new Object[array.length + 2];
    if (array.length > 0)     System.arraycopy(array,0,newArray,2,array.length);
    newArray[0]=key;
    newArray[1]=val;
  }
  return create(newArray);
}"
26589,"public Object get(Object key){
  int i=indexOf(key);
  if (i >= 0)   return array[i + 1];
  return null;
}","final public Object get(Object key){
  int i=indexOf(key);
  if (i >= 0)   return array[i + 1];
  return null;
}"
26590,"int indexOf(Object key){
  for (int i=0; i < array.length; i+=2) {
    if (equalKey(array[i],key))     return i;
  }
  return -1;
}","private int indexOf(Object key){
  for (int i=0; i < array.length; i+=2) {
    if (equalKey(array[i],key))     return i;
  }
  return -1;
}"
26591,"public int compareTo(MavenCentralComparableVersion o){
  if ((getDate() == null) == (o.getDate() == null)) {
    return super.compareTo(o);
  }
 else   if (getDate() == null) {
    return version.getLastUpdateDate().compareTo(o.getDate());
  }
  return getDate().compareTo(o.getVersion().getLastUpdateDate());
}","public int compareTo(MavenCentralComparableVersion o){
  if ((getDate() == null) == (o.getDate() == null)) {
    int result=super.compareTo(o);
    if (result != 0) {
      return result;
    }
    return version.getVersion().compareTo(o.getVersion().getVersion());
  }
 else   if (getDate() == null) {
    return version.getLastUpdateDate().compareTo(o.getDate());
  }
  return getDate().compareTo(o.getVersion().getLastUpdateDate());
}"
26592,"@Override public void delete(Project project) throws ServiceException, SecurityServiceException {
  for (  Artifact artifact : project.getArtifacts()) {
    artifact.setProject(null);
    artifactService.update(artifact);
    for (    ArtifactVersion artifactVersion : artifact.getVersions()) {
      artifactVersion.setProjectVersion(null);
      artifactVersionService.update(artifactVersion);
    }
  }
  super.delete(project);
}","@Override public void delete(Project project) throws ServiceException, SecurityServiceException {
  for (  Artifact artifact : project.getArtifacts()) {
    artifact.setProject(null);
    for (    ArtifactVersion artifactVersion : artifact.getVersions()) {
      artifactVersion.setProjectVersion(null);
    }
    artifactService.update(artifact);
  }
  super.delete(project);
}"
26593,"@SuppressWarnings(""String_Node_Str"") private void hackPortal(String portalGUID) throws Exception {
  JSONObject main=new JSONObject();
  JSONObject params=new JSONObject();
  params.put(""String_Node_Str"",portalGUID);
  params.put(""String_Node_Str"",syncTimestamp);
  params.put(""String_Node_Str"",S2Wrapper.encodeLocation(currentLocation));
  main.put(""String_Node_Str"",params);
  URL getObjectsURL=new URL(baseURL + ""String_Node_Str"");
  URLConnection getObjectsCon=getObjectsURL.openConnection();
  getObjectsCon.setRequestProperty(""String_Node_Str"",authCookie);
  getObjectsCon.setRequestProperty(""String_Node_Str"",this.xsrfToken);
  getObjectsCon.setDoOutput(true);
  OutputStreamWriter out=new OutputStreamWriter(getObjectsCon.getOutputStream());
  out.write(main.toString());
  out.close();
  BufferedReader br=new BufferedReader(new InputStreamReader(getObjectsCon.getInputStream()));
  String line=br.readLine();
  br.close();
  DebugHandler.debugln(line);
}","@SuppressWarnings(""String_Node_Str"") private void hackPortal(String portalGUID) throws Exception {
  JSONObject main=new JSONObject();
  JSONObject params=new JSONObject();
  DebugHandler.debugInfo(""String_Node_Str"" + portalGUID);
  params.put(""String_Node_Str"",portalGUID);
  params.put(""String_Node_Str"",syncTimestamp);
  params.put(""String_Node_Str"",S2Wrapper.encodeLocation(currentLocation));
  main.put(""String_Node_Str"",params);
  URL getObjectsURL=new URL(baseURL + ""String_Node_Str"");
  URLConnection getObjectsCon=getObjectsURL.openConnection();
  getObjectsCon.setRequestProperty(""String_Node_Str"",authCookie);
  getObjectsCon.setRequestProperty(""String_Node_Str"",this.xsrfToken);
  getObjectsCon.setDoOutput(true);
  OutputStreamWriter out=new OutputStreamWriter(getObjectsCon.getOutputStream());
  out.write(main.toString());
  out.close();
  BufferedReader br=new BufferedReader(new InputStreamReader(getObjectsCon.getInputStream()));
  String line=br.readLine();
  br.close();
  DebugHandler.debugln(line);
  DebugHandler.debugInfo(""String_Node_Str"");
}"
26594,"public void updateLocation(S2LatLng s2ll) throws Exception {
  double lat=s2ll.latDegrees();
  double lng=s2ll.lngDegrees();
  String add=""String_Node_Str"" + Double.toString(lat) + ""String_Node_Str""+ Double.toString(lng)+ ""String_Node_Str""+ Double.toString(lat)+ ""String_Node_Str""+ Double.toString(lng);
  for (int i=0; i < cw.localPortals.size(); i++)   System.out.println(add);
  jLabel.setIcon(new ImageIcon(new URL(add)));
  debugJTArea.setText(DebugHandler.debugLines);
  infoJTArea.setText(DebugHandler.infoLines);
  debugVertical.setValue(debugVertical.getMaximum());
  String inventorySTR=""String_Node_Str"";
  for (int i=0; i < player.inventory.size(); i++)   inventorySTR+=player.inventory.get(i).toString() + ""String_Node_Str"";
  itemsJTArea.setText(inventorySTR);
  frame.pack();
}","public void updateLocation(S2LatLng s2ll) throws Exception {
  double lat=s2ll.latDegrees();
  double lng=s2ll.lngDegrees();
  String add=""String_Node_Str"" + Double.toString(lat) + ""String_Node_Str""+ Double.toString(lng)+ ""String_Node_Str""+ Double.toString(lat)+ ""String_Node_Str""+ Double.toString(lng);
  if (cw.localPortals != null) {
    int cwSize=cw.localHackablePortals.size();
    System.out.println(cw.localHackablePortals.size());
    for (int i=0; i < cwSize; i++)     add+=""String_Node_Str"" + Double.toString(cw.localHackablePortals.get(i).location.latDegrees()) + ""String_Node_Str""+ Double.toString(cw.localHackablePortals.get(i).location.lngDegrees());
  }
  System.out.println(add);
  jLabel.setIcon(new ImageIcon(new URL(add)));
  debugJTArea.setText(DebugHandler.debugLines);
  infoJTArea.setText(DebugHandler.infoLines);
  debugVertical.setValue(debugVertical.getMaximum());
  String inventorySTR=""String_Node_Str"";
  for (int i=0; i < player.inventory.size(); i++)   inventorySTR+=player.inventory.get(i).toString() + ""String_Node_Str"";
  itemsJTArea.setText(inventorySTR);
  frame.pack();
}"
26595,"public void run() throws Exception {
  String curLine=br.readLine();
  String[] firstLocation=curLine.split(""String_Node_Str"");
  currentLocation=S2LatLng.fromDegrees(Double.parseDouble(firstLocation[0]),Double.parseDouble(firstLocation[1]));
  cw.newLocation(currentLocation);
  cw.printLocalHackablePortalNames();
  GUI gui=new GUI(cw.player,cw);
  while ((curLine=br.readLine()) != null) {
    cw.getInventory();
    System.out.println(""String_Node_Str"" + curLine);
    DebugHandler.debugInfo(""String_Node_Str"" + curLine);
    System.out.println(curLine.toString());
    String[] newLocation=curLine.split(""String_Node_Str"");
    S2LatLng newLoc=S2LatLng.fromDegrees(Double.parseDouble(newLocation[0]),Double.parseDouble(newLocation[1]));
    Double dist=S2Wrapper.GreatEarthDistance(currentLocation,newLoc);
    TransitHandler th=new TransitHandler(currentLocation,newLoc,gui);
    th.start();
    int waitTimeSeconds=(int)(dist / 5.0);
    System.out.println(""String_Node_Str"" + waitTimeSeconds + ""String_Node_Str"");
    DebugHandler.debugInfo(""String_Node_Str"" + waitTimeSeconds + ""String_Node_Str"");
    th.join();
    System.out.println(""String_Node_Str"");
    DebugHandler.debugInfo(""String_Node_Str"");
    currentLocation=newLoc;
    cw.newLocation(newLoc);
    cw.printLocalHackablePortalNames();
  }
}","public void run() throws Exception {
  String curLine=br.readLine();
  String[] firstLocation=curLine.split(""String_Node_Str"");
  currentLocation=S2LatLng.fromDegrees(Double.parseDouble(firstLocation[0]),Double.parseDouble(firstLocation[1]));
  cw.newLocation(currentLocation);
  cw.printLocalHackablePortalNames();
  GUI gui=new GUI(cw.player,cw);
  while ((curLine=br.readLine()) != null) {
    System.out.println(""String_Node_Str"" + curLine);
    DebugHandler.debugInfo(""String_Node_Str"" + curLine);
    System.out.println(curLine.toString());
    String[] newLocation=curLine.split(""String_Node_Str"");
    S2LatLng newLoc=S2LatLng.fromDegrees(Double.parseDouble(newLocation[0]),Double.parseDouble(newLocation[1]));
    Double dist=S2Wrapper.GreatEarthDistance(currentLocation,newLoc);
    TransitHandler th=new TransitHandler(currentLocation,newLoc,gui);
    th.start();
    int waitTimeSeconds=(int)(dist / 5.0);
    System.out.println(""String_Node_Str"" + waitTimeSeconds + ""String_Node_Str"");
    DebugHandler.debugInfo(""String_Node_Str"" + waitTimeSeconds + ""String_Node_Str"");
    th.join();
    System.out.println(""String_Node_Str"");
    DebugHandler.debugInfo(""String_Node_Str"");
    currentLocation=newLoc;
    cw.newLocation(newLoc);
    cw.printLocalHackablePortalNames();
    cw.hackLocalPortals();
    cw.getInventory();
  }
}"
26596,"private String resolveLocalizedErrorMessage(FieldError fieldError,Locale locale){
  String localizedErrorMessage=null;
  String[] fieldErrorCodes=fieldError.getCodes();
  for (int index=0; index < fieldErrorCodes.length; index++) {
    String fieldErrorCode=fieldErrorCodes[index];
    LOGGER.debug(""String_Node_Str"",fieldErrorCode,locale);
    localizedErrorMessage=getMessageForCode(fieldErrorCode,fieldError.getArguments(),locale);
    LOGGER.debug(""String_Node_Str"",localizedErrorMessage);
    if (localizedErrorMessage != null) {
      LOGGER.debug(""String_Node_Str"",localizedErrorMessage);
      break;
    }
  }
  if (localizedErrorMessage == null) {
    localizedErrorMessage=fieldErrorCodes[0];
  }
  return localizedErrorMessage;
}","private String resolveLocalizedErrorMessage(FieldError fieldError,Locale locale){
  String localizedErrorMessage=messageSource.getMessage(fieldError,locale);
  if (localizedErrorMessage.equals(fieldError.getDefaultMessage())) {
    String[] fieldErrorCodes=fieldError.getCodes();
    localizedErrorMessage=fieldErrorCodes[0];
  }
  return localizedErrorMessage;
}"
26597,"private String resolveLocalizedErrorMessage(FieldError fieldError,Locale locale){
  String localizedErrorMessage=null;
  String[] fieldErrorCodes=fieldError.getCodes();
  for (int index=0; index < fieldErrorCodes.length; index++) {
    String fieldErrorCode=fieldErrorCodes[index];
    LOGGER.debug(""String_Node_Str"",fieldErrorCode,locale);
    localizedErrorMessage=getMessageForCode(fieldErrorCode,fieldError.getArguments(),locale);
    LOGGER.debug(""String_Node_Str"",localizedErrorMessage);
    if (localizedErrorMessage != null) {
      LOGGER.debug(""String_Node_Str"",localizedErrorMessage);
      break;
    }
  }
  if (localizedErrorMessage == null) {
    localizedErrorMessage=fieldErrorCodes[0];
  }
  return localizedErrorMessage;
}","private String resolveLocalizedErrorMessage(FieldError fieldError,Locale locale){
  String localizedErrorMessage=messageSource.getMessage(fieldError,locale);
  if (localizedErrorMessage.equals(fieldError.getDefaultMessage())) {
    String[] fieldErrorCodes=fieldError.getCodes();
    localizedErrorMessage=fieldErrorCodes[0];
  }
  return localizedErrorMessage;
}"
26598,"private DoubleNode decodeDouble(int size) throws InvalidDatabaseException {
  if (size != 8) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return new DoubleNode(this.threadBuffer.get().getDouble());
}","private DoubleNode decodeDouble(int size) throws InvalidDatabaseException {
  if (size != 8) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return new DoubleNode(this.buffer.getDouble());
}"
26599,"private String decodeString(int size){
  ByteBuffer buffer=this.threadBuffer.get().slice();
  buffer.limit(size);
  return Charset.forName(""String_Node_Str"").decode(buffer).toString();
}","private String decodeString(int size){
  ByteBuffer buffer=this.buffer.slice();
  buffer.limit(size);
  return Charset.forName(""String_Node_Str"").decode(buffer).toString();
}"
26600,"void Decoder(ThreadBuffer threadBuffer,long pointerBase){
  this.pointerBase=pointerBase;
  this.threadBuffer=threadBuffer;
  this.objectMapper=new ObjectMapper();
}","void Decoder(ByteBuffer buffer,long pointerBase){
  this.pointerBase=pointerBase;
  this.buffer=buffer;
  this.objectMapper=new ObjectMapper();
}"
26601,"Result decode(int offset) throws IOException {
  ByteBuffer buffer=this.threadBuffer.get();
  if (offset >= buffer.capacity()) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  buffer.position(offset);
  int ctrlByte=0xFF & buffer.get();
  offset++;
  Type type=Type.fromControlByte(ctrlByte);
  if (type.equals(Type.POINTER)) {
    Result pointer=this.decodePointer(ctrlByte,offset);
    if (this.POINTER_TEST_HACK) {
      return pointer;
    }
    Result result=this.decode((pointer.getNode().asInt()));
    result.setOffset(pointer.getOffset());
    return result;
  }
  if (type.equals(Type.EXTENDED)) {
    int nextByte=buffer.get();
    int typeNum=nextByte + 7;
    if (typeNum < 8) {
      throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"" + typeNum + ""String_Node_Str"");
    }
    type=Type.get(typeNum);
    offset++;
  }
  int[] sizeArray=this.sizeFromCtrlByte(ctrlByte,offset);
  int size=sizeArray[0];
  offset=sizeArray[1];
  return this.decodeByType(type,offset,size);
}","Result decode(int offset) throws IOException {
  if (offset >= this.buffer.capacity()) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  this.buffer.position(offset);
  int ctrlByte=0xFF & this.buffer.get();
  offset++;
  Type type=Type.fromControlByte(ctrlByte);
  if (type.equals(Type.POINTER)) {
    Result pointer=this.decodePointer(ctrlByte,offset);
    if (this.POINTER_TEST_HACK) {
      return pointer;
    }
    Result result=this.decode((pointer.getNode().asInt()));
    result.setOffset(pointer.getOffset());
    return result;
  }
  if (type.equals(Type.EXTENDED)) {
    int nextByte=this.buffer.get();
    int typeNum=nextByte + 7;
    if (typeNum < 8) {
      throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"" + typeNum + ""String_Node_Str"");
    }
    type=Type.get(typeNum);
    offset++;
  }
  int[] sizeArray=this.sizeFromCtrlByte(ctrlByte,offset);
  int size=sizeArray[0];
  offset=sizeArray[1];
  return this.decodeByType(type,offset,size);
}"
26602,"private FloatNode decodeFloat(int size) throws InvalidDatabaseException {
  if (size != 4) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return new FloatNode(this.threadBuffer.get().getFloat());
}","private FloatNode decodeFloat(int size) throws InvalidDatabaseException {
  if (size != 4) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return new FloatNode(this.buffer.getFloat());
}"
26603,"private long decodeLong(int size){
  ByteBuffer buffer=this.threadBuffer.get();
  long integer=0;
  for (int i=0; i < size; i++) {
    integer=(integer << 8) | (buffer.get() & 0xFF);
  }
  return integer;
}","private long decodeLong(int size){
  long integer=0;
  for (int i=0; i < size; i++) {
    integer=(integer << 8) | (this.buffer.get() & 0xFF);
  }
  return integer;
}"
26604,"private int findAddressInTree(InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int bitLength=rawAddress.length * 8;
  int record=this.startNode(bitLength);
  for (int i=0; i < bitLength; i++) {
    if (record >= this.metadata.nodeCount) {
      break;
    }
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    record=this.readNode(record,bit);
  }
  if (record == this.metadata.nodeCount) {
    return 0;
  }
 else   if (record > this.metadata.nodeCount) {
    return record;
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}","private int findAddressInTree(ByteBuffer buffer,InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int bitLength=rawAddress.length * 8;
  int record=this.startNode(buffer,bitLength);
  for (int i=0; i < bitLength; i++) {
    if (record >= this.metadata.nodeCount) {
      break;
    }
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    record=this.readNode(buffer,record,bit);
  }
  if (record == this.metadata.nodeCount) {
    return 0;
  }
 else   if (record > this.metadata.nodeCount) {
    return record;
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}"
26605,"private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  for (int i=0; i < 96 && node < this.metadata.nodeCount; i++) {
    node=this.readNode(node,0);
  }
  this.ipV4Start=node;
  return node;
}","private int ipV4StartNode(ByteBuffer buffer) throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  for (int i=0; i < 96 && node < this.metadata.nodeCount; i++) {
    node=this.readNode(buffer,node,0);
  }
  this.ipV4Start=node;
  return node;
}"
26606,"private int findMetadataStart(String databaseName) throws InvalidDatabaseException {
  ByteBuffer buffer=this.threadBuffer.get();
  int fileSize=buffer.capacity();
  FILE:   for (int i=0; i < fileSize - METADATA_START_MARKER.length + 1; i++) {
    for (int j=0; j < METADATA_START_MARKER.length; j++) {
      byte b=buffer.get(fileSize - i - j- 1);
      if (b != METADATA_START_MARKER[METADATA_START_MARKER.length - j - 1]) {
        continue FILE;
      }
    }
    return fileSize - i;
  }
  throw new InvalidDatabaseException(""String_Node_Str"" + databaseName + ""String_Node_Str"");
}","private int findMetadataStart(ByteBuffer buffer,String databaseName) throws InvalidDatabaseException {
  int fileSize=buffer.capacity();
  FILE:   for (int i=0; i < fileSize - METADATA_START_MARKER.length + 1; i++) {
    for (int j=0; j < METADATA_START_MARKER.length; j++) {
      byte b=buffer.get(fileSize - i - j- 1);
      if (b != METADATA_START_MARKER[METADATA_START_MARKER.length - j - 1]) {
        continue FILE;
      }
    }
    return fileSize - i;
  }
  throw new InvalidDatabaseException(""String_Node_Str"" + databaseName + ""String_Node_Str"");
}"
26607,"private int startNode(int bitLength) throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 6 && bitLength == 32) {
    return this.ipV4StartNode();
  }
  return 0;
}","private int startNode(ByteBuffer buffer,int bitLength) throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 6 && bitLength == 32) {
    return this.ipV4StartNode(buffer);
  }
  return 0;
}"
26608,"/** 
 * Looks up the <code>address</code> in the MaxMind DB.
 * @param ipAddress the IP address to look up.
 * @return the record for the IP address.
 * @throws IOException if a file I/O error occurs.
 */
public JsonNode get(InetAddress ipAddress) throws IOException {
  int pointer=this.findAddressInTree(ipAddress);
  if (pointer == 0) {
    return null;
  }
  return this.resolveDataPointer(pointer);
}","/** 
 * Looks up the <code>address</code> in the MaxMind DB.
 * @param ipAddress the IP address to look up.
 * @return the record for the IP address.
 * @throws IOException if a file I/O error occurs.
 */
public JsonNode get(InetAddress ipAddress) throws IOException {
  ByteBuffer buffer=this.bufferHolder.get();
  int pointer=this.findAddressInTree(buffer,ipAddress);
  if (pointer == 0) {
    return null;
  }
  return this.resolveDataPointer(buffer,pointer);
}"
26609,"private JsonNode resolveDataPointer(int pointer) throws IOException {
  int resolved=(pointer - this.metadata.nodeCount) + this.metadata.searchTreeSize;
  if (resolved >= this.threadBuffer.get().capacity()) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return this.decoder.decode(resolved).getNode();
}","private JsonNode resolveDataPointer(ByteBuffer buffer,int pointer) throws IOException {
  int resolved=(pointer - this.metadata.nodeCount) + this.metadata.searchTreeSize;
  if (resolved >= buffer.capacity()) {
    throw new InvalidDatabaseException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Decoder decoder=new Decoder(buffer,this.metadata.searchTreeSize + DATA_SECTION_SEPARATOR_SIZE);
  return decoder.decode(resolved).getNode();
}"
26610,"private Reader(ThreadBuffer buffer,String name) throws IOException {
  this.threadBuffer=buffer;
  int start=this.findMetadataStart(name);
  Decoder metadataDecoder=new Decoder(this.threadBuffer,start);
  this.metadata=new Metadata(metadataDecoder.decode(start).getNode());
  this.decoder=new Decoder(this.threadBuffer,this.metadata.searchTreeSize + DATA_SECTION_SEPARATOR_SIZE);
}","private Reader(BufferHolder bufferHolder,String name) throws IOException {
  this.bufferHolder=bufferHolder;
  ByteBuffer buffer=this.bufferHolder.get();
  int start=this.findMetadataStart(buffer,name);
  Decoder metadataDecoder=new Decoder(buffer,start);
  this.metadata=new Metadata(metadataDecoder.decode(start).getNode());
}"
26611,"/** 
 * Closes the MaxMind DB and returns resources to the system.
 * @throws IOException if an I/O error occurs.
 */
@Override public void close() throws IOException {
  this.threadBuffer.close();
}","/** 
 * Closes the MaxMind DB and returns resources to the system.
 * @throws IOException if an I/O error occurs.
 */
@Override public void close() throws IOException {
  this.bufferHolder.close();
}"
26612,"private int readNode(int nodeNumber,int index) throws InvalidDatabaseException {
  ByteBuffer buffer=this.threadBuffer.get();
  int baseOffset=nodeNumber * this.metadata.nodeByteSize;
switch (this.metadata.recordSize) {
case 24:
    buffer.position(baseOffset + index * 3);
  return Decoder.decodeInteger(buffer,0,3);
case 28:
int middle=buffer.get(baseOffset + 3);
if (index == 0) {
middle=(0xF0 & middle) >>> 4;
}
 else {
middle=0x0F & middle;
}
buffer.position(baseOffset + index * 4);
return Decoder.decodeInteger(buffer,middle,3);
case 32:
buffer.position(baseOffset + index * 4);
return Decoder.decodeInteger(buffer,0,4);
default :
throw new InvalidDatabaseException(""String_Node_Str"" + this.metadata.recordSize);
}
}","private int readNode(ByteBuffer buffer,int nodeNumber,int index) throws InvalidDatabaseException {
  int baseOffset=nodeNumber * this.metadata.nodeByteSize;
switch (this.metadata.recordSize) {
case 24:
    buffer.position(baseOffset + index * 3);
  return Decoder.decodeInteger(buffer,0,3);
case 28:
int middle=buffer.get(baseOffset + 3);
if (index == 0) {
middle=(0xF0 & middle) >>> 4;
}
 else {
middle=0x0F & middle;
}
buffer.position(baseOffset + index * 4);
return Decoder.decodeInteger(buffer,middle,3);
case 32:
buffer.position(baseOffset + index * 4);
return Decoder.decodeInteger(buffer,0,4);
default :
throw new InvalidDatabaseException(""String_Node_Str"" + this.metadata.recordSize);
}
}"
26613,"static <T>void testTypeDecoding(Decoder.Type type,Map<T,byte[]> tests) throws InvalidDatabaseException, IOException {
  for (  Map.Entry<T,byte[]> entry : tests.entrySet()) {
    T expect=entry.getKey();
    byte[] input=entry.getValue();
    String desc=""String_Node_Str"" + type.name() + ""String_Node_Str""+ expect;
    FileChannel fc=DecoderTest.getFileChannel(input);
    MappedByteBuffer mmap=fc.map(MapMode.READ_ONLY,0,fc.size());
    try {
      Decoder decoder=new Decoder(new ThreadBuffer(mmap),0);
      decoder.POINTER_TEST_HACK=true;
      if (type.equals(Decoder.Type.BYTES)) {
        assertArrayEquals(desc,(byte[])expect,decoder.decode(0).getNode().binaryValue());
      }
 else       if (type.equals(Decoder.Type.ARRAY)) {
        assertEquals(desc,expect,decoder.decode(0).getNode());
      }
 else       if (type.equals(Decoder.Type.UINT16) || type.equals(Decoder.Type.INT32)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asInt());
      }
 else       if (type.equals(Decoder.Type.UINT32) || type.equals(Decoder.Type.POINTER)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asLong());
      }
 else       if (type.equals(Decoder.Type.UINT64) || type.equals(Decoder.Type.UINT128)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().bigIntegerValue());
      }
 else       if (type.equals(Decoder.Type.DOUBLE)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asDouble());
      }
 else       if (type.equals(Decoder.Type.FLOAT)) {
        assertEquals(desc,new FloatNode((Float)expect),decoder.decode(0).getNode());
      }
 else       if (type.equals(Decoder.Type.UTF8_STRING)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asText());
      }
 else       if (type.equals(Decoder.Type.BOOLEAN)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asBoolean());
      }
 else {
        assertEquals(desc,expect,decoder.decode(0).getNode());
      }
    }
  finally {
      if (fc != null) {
        fc.close();
      }
    }
  }
}","static <T>void testTypeDecoding(Decoder.Type type,Map<T,byte[]> tests) throws InvalidDatabaseException, IOException {
  for (  Map.Entry<T,byte[]> entry : tests.entrySet()) {
    T expect=entry.getKey();
    byte[] input=entry.getValue();
    String desc=""String_Node_Str"" + type.name() + ""String_Node_Str""+ expect;
    FileChannel fc=DecoderTest.getFileChannel(input);
    MappedByteBuffer mmap=fc.map(MapMode.READ_ONLY,0,fc.size());
    try {
      Decoder decoder=new Decoder(mmap,0);
      decoder.POINTER_TEST_HACK=true;
      if (type.equals(Decoder.Type.BYTES)) {
        assertArrayEquals(desc,(byte[])expect,decoder.decode(0).getNode().binaryValue());
      }
 else       if (type.equals(Decoder.Type.ARRAY)) {
        assertEquals(desc,expect,decoder.decode(0).getNode());
      }
 else       if (type.equals(Decoder.Type.UINT16) || type.equals(Decoder.Type.INT32)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asInt());
      }
 else       if (type.equals(Decoder.Type.UINT32) || type.equals(Decoder.Type.POINTER)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asLong());
      }
 else       if (type.equals(Decoder.Type.UINT64) || type.equals(Decoder.Type.UINT128)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().bigIntegerValue());
      }
 else       if (type.equals(Decoder.Type.DOUBLE)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asDouble());
      }
 else       if (type.equals(Decoder.Type.FLOAT)) {
        assertEquals(desc,new FloatNode((Float)expect),decoder.decode(0).getNode());
      }
 else       if (type.equals(Decoder.Type.UTF8_STRING)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asText());
      }
 else       if (type.equals(Decoder.Type.BOOLEAN)) {
        assertEquals(desc,expect,decoder.decode(0).getNode().asBoolean());
      }
 else {
        assertEquals(desc,expect,decoder.decode(0).getNode());
      }
    }
  finally {
      if (fc != null) {
        fc.close();
      }
    }
  }
}"
26614,"@SuppressWarnings(""String_Node_Str"") @Test public void testWithPointers() throws InvalidDatabaseException, IOException, URISyntaxException {
  File file=new File(PointerTest.class.getResource(""String_Node_Str"").toURI());
  ThreadBuffer ptf=new ThreadBuffer(file,FileMode.MEMORY);
  try {
    Decoder decoder=new Decoder(ptf,0);
    ObjectMapper om=new ObjectMapper();
    ObjectNode map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(0).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(22).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(37).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(50).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(55).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(57).getNode());
  }
  finally {
    ptf.close();
  }
}","@SuppressWarnings(""String_Node_Str"") @Test public void testWithPointers() throws InvalidDatabaseException, IOException, URISyntaxException {
  File file=new File(PointerTest.class.getResource(""String_Node_Str"").toURI());
  BufferHolder ptf=new BufferHolder(file,FileMode.MEMORY);
  try {
    Decoder decoder=new Decoder(ptf.get(),0);
    ObjectMapper om=new ObjectMapper();
    ObjectNode map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(0).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(22).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(37).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(50).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(55).getNode());
    map=om.createObjectNode();
    map.put(""String_Node_Str"",""String_Node_Str"");
    assertEquals(map,decoder.decode(57).getNode());
  }
  finally {
    ptf.close();
  }
}"
26615,"/** 
 * Constructs a Reader for the MaxMind DB format. The file passed to it must be a valid MaxMind DB file such as a GeoIP2 database file.
 * @param database the MaxMind DB file to use.
 * @param fileMode the mode to open the file with.
 * @throws IOException if there is an error opening or reading from the file.
 */
public MaxMindDbReader(File database,FileMode fileMode) throws IOException {
  this.threadBuffer=new ThreadBuffer(database,fileMode);
  int start=this.findMetadataStart(database.getName());
  Decoder metadataDecoder=new Decoder(this.threadBuffer,0);
  this.metadata=new Metadata(metadataDecoder.decode(start).getNode());
  this.decoder=new Decoder(this.threadBuffer,this.metadata.searchTreeSize + DATA_SECTION_SEPARATOR_SIZE);
}","/** 
 * Constructs a Reader for the MaxMind DB format. The file passed to it must be a valid MaxMind DB file such as a GeoIP2 database file.
 * @param database the MaxMind DB file to use.
 * @param fileMode the mode to open the file with.
 * @throws IOException if there is an error opening or reading from the file.
 */
public MaxMindDbReader(File database,FileMode fileMode) throws IOException {
  this.threadBuffer=new ThreadBuffer(database,fileMode);
  int start=this.findMetadataStart(database.getName());
  Decoder metadataDecoder=new Decoder(this.threadBuffer,start);
  this.metadata=new Metadata(metadataDecoder.decode(start).getNode());
  this.decoder=new Decoder(this.threadBuffer,this.metadata.searchTreeSize + DATA_SECTION_SEPARATOR_SIZE);
}"
26616,"private int findAddressInTree(InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int bitLength=rawAddress.length * 8;
  int record=this.startNode(bitLength);
  for (int i=0; i < bitLength; i++) {
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    record=this.readNode(record,bit);
    if (record == this.metadata.nodeCount) {
      return 0;
    }
 else     if (record > this.metadata.nodeCount) {
      return record;
    }
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}","private int findAddressInTree(InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int bitLength=rawAddress.length * 8;
  int record=this.startNode(bitLength);
  for (int i=0; i < bitLength; i++) {
    if (record >= this.metadata.nodeCount) {
      break;
    }
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    record=this.readNode(record,bit);
  }
  if (record == this.metadata.nodeCount) {
    return 0;
  }
 else   if (record > this.metadata.nodeCount) {
    return record;
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}"
26617,"private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  for (int i=0; i < 96; i++) {
    int nextNode=this.readNode(node,0);
    if (nextNode >= this.metadata.nodeCount) {
      break;
    }
    node=nextNode;
  }
  this.ipV4Start=node;
  return node;
}","private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  for (int i=0; i < 96 && node < this.metadata.nodeCount; i++) {
    node=this.readNode(node,0);
  }
  this.ipV4Start=node;
  return node;
}"
26618,"@Test public void testNoIpV4SearchTree() throws IOException, URISyntaxException {
  URI file=ReaderTest.class.getResource(""String_Node_Str"").toURI();
  MaxMindDbReader reader=new MaxMindDbReader(new File(file));
  assertEquals(""String_Node_Str"",reader.get(InetAddress.getByName(""String_Node_Str"")).textValue());
}","@Test public void testNoIpV4SearchTree() throws IOException, URISyntaxException {
  URI file=ReaderTest.class.getResource(""String_Node_Str"").toURI();
  MaxMindDbReader reader=new MaxMindDbReader(new File(file));
  assertEquals(""String_Node_Str"",reader.get(InetAddress.getByName(""String_Node_Str"")).textValue());
  assertEquals(""String_Node_Str"",reader.get(InetAddress.getByName(""String_Node_Str"")).textValue());
}"
26619,"private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  int nextNode=0;
  for (int i=0; i < 96 && nextNode < this.metadata.nodeCount; i++) {
    node=nextNode;
    nextNode=this.readNode(node,0);
  }
  this.ipV4Start=node;
  return node;
}","private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  int nextNode=0;
  for (int i=0; i < 96; i++) {
    nextNode=this.readNode(node,0);
    if (nextNode >= this.metadata.nodeCount) {
      break;
    }
    node=nextNode;
  }
  this.ipV4Start=node;
  return node;
}"
26620,"private int findAddressInTree(InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int nodeNum=this.startNode(rawAddress.length * 8);
  for (int i=0; i < rawAddress.length * 8; i++) {
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    int record=this.readNode(nodeNum,bit);
    if (record == this.metadata.nodeCount) {
      return 0;
    }
 else     if (record > this.metadata.nodeCount) {
      return record;
    }
    nodeNum=record;
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}","private int findAddressInTree(InetAddress address) throws InvalidDatabaseException {
  byte[] rawAddress=address.getAddress();
  int bitLength=rawAddress.length * 8;
  int record=this.startNode(bitLength);
  for (int i=0; i < bitLength; i++) {
    int b=0xFF & rawAddress[i / 8];
    int bit=1 & (b >> 7 - (i % 8));
    record=this.readNode(record,bit);
    if (record == this.metadata.nodeCount) {
      return 0;
    }
 else     if (record > this.metadata.nodeCount) {
      return record;
    }
  }
  throw new InvalidDatabaseException(""String_Node_Str"");
}"
26621,"private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int nodeNum=0;
  for (int i=0; i < 96; i++) {
    nodeNum=this.readNode(nodeNum,0);
  }
  this.ipV4Start=nodeNum;
  return nodeNum;
}","private int ipV4StartNode() throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 4) {
    return 0;
  }
  if (this.ipV4Start != 0) {
    return this.ipV4Start;
  }
  int node=0;
  int nextNode=0;
  for (int i=0; i < 96 && nextNode < this.metadata.nodeCount; i++) {
    node=nextNode;
    nextNode=this.readNode(node,0);
  }
  this.ipV4Start=node;
  return node;
}"
26622,"private int startNode(int length) throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 6 && length == 32) {
    return this.ipV4StartNode();
  }
  return 0;
}","private int startNode(int bitLength) throws InvalidDatabaseException {
  if (this.metadata.ipVersion == 6 && bitLength == 32) {
    return this.ipV4StartNode();
  }
  return 0;
}"
26623,"private long findMetadataStart() throws IOException {
  long fileSize=this.fc.size();
  System.out.println(fileSize);
  FILE:   for (long i=0; i < fileSize - METADATE_START_MARKER.length + 1; i++) {
    for (int j=0; j < METADATE_START_MARKER.length; j++) {
      ByteBuffer b=ByteBuffer.wrap(new byte[1]);
      this.fc.read(b,fileSize - i - j- 1);
      System.out.println(b.get(0));
      if (b.get(0) != METADATE_START_MARKER[METADATE_START_MARKER.length - j - 1]) {
        continue FILE;
      }
    }
    return fileSize - i;
  }
  return -1;
}","private long findMetadataStart() throws IOException {
  long fileSize=this.fc.size();
  FILE:   for (long i=0; i < fileSize - METADATE_START_MARKER.length + 1; i++) {
    for (int j=0; j < METADATE_START_MARKER.length; j++) {
      ByteBuffer b=ByteBuffer.wrap(new byte[1]);
      this.fc.read(b,fileSize - i - j- 1);
      if (b.get(0) != METADATE_START_MARKER[METADATE_START_MARKER.length - j - 1]) {
        continue FILE;
      }
    }
    return fileSize - i;
  }
  return -1;
}"
26624,"private long[] splitNodeIntoRecords(ByteBuffer bytes) throws MaxMindDbException {
  long[] nodes=new long[2];
switch (this.metadata.recordSize.intValue()) {
case 24:
    nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,3));
  nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),3,6));
return nodes;
case 28:
nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,3));
nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),4,7));
nodes[0]=((0xF0 & bytes.get(3)) << 24) | nodes[0];
nodes[1]=((0x0F & bytes.get(3)) << 24) | nodes[1];
return nodes;
case 32:
nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,4));
nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),4,8));
return nodes;
default :
throw new MaxMindDbException(""String_Node_Str"" + this.metadata.recordSize);
}
}","private long[] splitNodeIntoRecords(ByteBuffer bytes) throws MaxMindDbException {
  long[] nodes=new long[2];
switch (this.metadata.recordSize.intValue()) {
case 24:
    nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,3));
  nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),3,6));
return nodes;
case 28:
nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,3));
nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),4,7));
nodes[0]=((0xF0 & bytes.get(3)) << 20) | nodes[0];
nodes[1]=((0x0F & bytes.get(3)) << 24) | nodes[1];
return nodes;
case 32:
nodes[0]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),0,4));
nodes[1]=Util.decodeLong(Arrays.copyOfRange(bytes.array(),4,8));
return nodes;
default :
throw new MaxMindDbException(""String_Node_Str"" + this.metadata.recordSize);
}
}"
26625,"private void updateFields(){
  NotificationDataSource datasource=new NotificationDataSource(this);
  datasource.open();
  NotificationItem item=datasource.getItem(savedId);
  datasource.close();
  final EditText editText=(EditText)findViewById(R.id.entryText);
  String newLine=System.getProperty(""String_Node_Str"");
  String final_text=item.getTitle();
  if (!item.getLongText().equals(""String_Node_Str""))   final_text+=newLine + item.getLongText();
  editText.setText(final_text);
  resetBkg();
  icon=item.getIcon();
  if (icon.equals(CHECKMARK_GRAY)) {
    checkmarkGray.setSelected(true);
  }
  if (icon.equals(""String_Node_Str"")) {
    checkmarkOrange.setSelected(true);
  }
  if (icon.equals(""String_Node_Str"")) {
    checkmarkRed.setSelected(true);
  }
  if (icon.equals(""String_Node_Str"")) {
    checkmarkGreen.setSelected(true);
  }
  if (item.getReminderTime() > 0) {
    reminderCalendar.setTimeInMillis(item.getReminderTime());
    dateBtn.setText(DateFormat.getDateFormat(this).format(reminderCalendar.getTime()));
    TimeBtn.setText(DateFormat.getTimeFormat(this).format(reminderCalendar.getTime()));
    reminderSet.setVisibility(View.VISIBLE);
    reminderNone.setVisibility(View.GONE);
    useAlarm=true;
  }
}","private void updateFields(){
  NotificationDataSource datasource=new NotificationDataSource(this);
  datasource.open();
  NotificationItem item=datasource.getItem(savedId);
  datasource.close();
  final EditText editText=(EditText)findViewById(R.id.entryText);
  String newLine=System.getProperty(""String_Node_Str"");
  String final_text=item.getTitle();
  if (!item.getLongText().equals(""String_Node_Str""))   final_text+=newLine + item.getLongText();
  editText.setText(final_text);
  resetBkg();
  icon=item.getIcon();
  if (icon.equals(NotificationItem.CHECKMARK_GRAY)) {
    checkmarkGray.setSelected(true);
  }
  if (icon.equals(NotificationItem.CHECKMARK_ORANGE)) {
    checkmarkOrange.setSelected(true);
  }
  if (icon.equals(NotificationItem.CHECKMARK_RED)) {
    checkmarkRed.setSelected(true);
  }
  if (icon.equals(NotificationItem.CHECKMARK_GREEN)) {
    checkmarkGreen.setSelected(true);
  }
  if (item.getReminderTime() > 0) {
    reminderCalendar.setTimeInMillis(item.getReminderTime());
    dateBtn.setText(DateFormat.getDateFormat(this).format(reminderCalendar.getTime()));
    TimeBtn.setText(DateFormat.getTimeFormat(this).format(reminderCalendar.getTime()));
    reminderSet.setVisibility(View.VISIBLE);
    reminderNone.setVisibility(View.GONE);
    useAlarm=true;
  }
}"
26626,"private void autoSaveNote(String sharedText){
  shareInfo=sharedText;
  shareFields(shareInfo);
  icon=CHECKMARK_GRAY;
  addBtn(null);
}","private void autoSaveNote(String sharedText){
  shareInfo=sharedText;
  shareFields(shareInfo);
  icon=NotificationItem.CHECKMARK_GRAY;
  addBtn(null);
}"
26627,"@Click void checkmark_orange(){
  resetBkg();
  checkmarkOrange.setSelected(true);
  icon=""String_Node_Str"";
}","@Click void checkmark_orange(){
  resetBkg();
  checkmarkOrange.setSelected(true);
  icon=NotificationItem.CHECKMARK_ORANGE;
}"
26628,"void afterViews(){
  final EditText editText=(EditText)findViewById(R.id.entryText);
  final ImageButton addBtn=(ImageButton)findViewById(R.id.addBtn);
  final ImageView voiceBtn=(ImageView)findViewById(R.id.voiceBtn);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  mToolbar.setTitle(getResources().getString(R.string.app_name));
  mToolbar.setTitleTextColor(Color.WHITE);
  mToolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      return onOptionsItemSelected(item);
    }
  }
);
  mToolbar.inflateMenu(R.menu.activity_main);
  addBtn.setEnabled(false);
  addBtn.setClickable(false);
  checkmarkGray.setSelected(true);
  icon=CHECKMARK_GRAY;
  editText.requestFocus();
  getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  int theme=R.style.TransAppTheme;
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false)) {
    theme=R.style.TransDarkAppTheme;
  }
  TypedArray a=getTheme().obtainStyledAttributes(theme,new int[]{R.attr.ic_send});
  final int sendResourceId=a.getResourceId(0,0);
  TypedArray b=getTheme().obtainStyledAttributes(theme,new int[]{R.attr.ic_send_disabled});
  final int disabledResourceId=b.getResourceId(0,0);
  editText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      if (editText.length() > 0) {
        addBtn.setImageDrawable(getResources().getDrawable(sendResourceId));
        addBtn.setEnabled(true);
        addBtn.setClickable(true);
        voiceBtn.setVisibility(View.GONE);
      }
 else {
        addBtn.setImageDrawable(getResources().getDrawable(disabledResourceId));
        addBtn.setEnabled(false);
        addBtn.setClickable(false);
        voiceBtn.setVisibility(View.VISIBLE);
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  if (shareInfo != null) {
    Log.i(TAG,""String_Node_Str"");
    shareFields(shareInfo);
  }
  reminderCalendar=Calendar.getInstance();
  reminderCalendar.set(Calendar.SECOND,0);
  reminderCalendar.set(Calendar.HOUR,reminderCalendar.get(Calendar.HOUR) + 1);
  dateBtn.setText(DateFormat.getDateFormat(this).format(reminderCalendar.getTime()));
  TimeBtn.setText(DateFormat.getTimeFormat(this).format(reminderCalendar.getTime()));
  if (savedId != -1) {
    Log.i(TAG,""String_Node_Str"" + savedId);
    updateFields();
  }
}","void afterViews(){
  final EditText editText=(EditText)findViewById(R.id.entryText);
  final ImageButton addBtn=(ImageButton)findViewById(R.id.addBtn);
  final ImageView voiceBtn=(ImageView)findViewById(R.id.voiceBtn);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  mToolbar.setTitle(getResources().getString(R.string.app_name));
  mToolbar.setTitleTextColor(Color.WHITE);
  mToolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      return onOptionsItemSelected(item);
    }
  }
);
  mToolbar.inflateMenu(R.menu.activity_main);
  addBtn.setEnabled(false);
  addBtn.setClickable(false);
  checkmarkGray.setSelected(true);
  icon=NotificationItem.CHECKMARK_GRAY;
  editText.requestFocus();
  getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  int theme=R.style.TransAppTheme;
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false)) {
    theme=R.style.TransDarkAppTheme;
  }
  TypedArray a=getTheme().obtainStyledAttributes(theme,new int[]{R.attr.ic_send});
  final int sendResourceId=a.getResourceId(0,0);
  TypedArray b=getTheme().obtainStyledAttributes(theme,new int[]{R.attr.ic_send_disabled});
  final int disabledResourceId=b.getResourceId(0,0);
  editText.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      if (editText.length() > 0) {
        addBtn.setImageDrawable(getResources().getDrawable(sendResourceId));
        addBtn.setEnabled(true);
        addBtn.setClickable(true);
        voiceBtn.setVisibility(View.GONE);
      }
 else {
        addBtn.setImageDrawable(getResources().getDrawable(disabledResourceId));
        addBtn.setEnabled(false);
        addBtn.setClickable(false);
        voiceBtn.setVisibility(View.VISIBLE);
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  if (shareInfo != null) {
    Log.i(TAG,""String_Node_Str"");
    shareFields(shareInfo);
  }
  reminderCalendar=Calendar.getInstance();
  reminderCalendar.set(Calendar.SECOND,0);
  reminderCalendar.set(Calendar.HOUR,reminderCalendar.get(Calendar.HOUR) + 1);
  dateBtn.setText(DateFormat.getDateFormat(this).format(reminderCalendar.getTime()));
  TimeBtn.setText(DateFormat.getTimeFormat(this).format(reminderCalendar.getTime()));
  if (savedId != -1) {
    Log.i(TAG,""String_Node_Str"" + savedId);
    updateFields();
  }
}"
26629,"@Click void checkmark_red(){
  resetBkg();
  checkmarkRed.setSelected(true);
  icon=""String_Node_Str"";
}","@Click void checkmark_red(){
  resetBkg();
  checkmarkRed.setSelected(true);
  icon=NotificationItem.CHECKMARK_RED;
}"
26630,"@Click void checkmark_green(){
  resetBkg();
  checkmarkGreen.setSelected(true);
  icon=""String_Node_Str"";
}","@Click void checkmark_green(){
  resetBkg();
  checkmarkGreen.setSelected(true);
  icon=NotificationItem.CHECKMARK_GREEN;
}"
26631,"@Click void checkmark_gray(){
  resetBkg();
  checkmarkGray.setSelected(true);
  icon=CHECKMARK_GRAY;
}","@Click void checkmark_gray(){
  resetBkg();
  checkmarkGray.setSelected(true);
  icon=NotificationItem.CHECKMARK_GRAY;
}"
26632,"/** 
 * Builds a notification and shows it
 * @param item object
 * @return true if successful
 */
@SuppressLint(""String_Node_Str"") public boolean buildNotif(NotificationItem item,boolean isAlarm){
  Log.i(NOTABLE,""String_Node_Str"" + item.getID());
  Log.i(NOTABLE,""String_Node_Str"" + item.getTitle());
  Log.i(NOTABLE,""String_Node_Str"" + item.getTime());
  Log.i(NOTABLE,""String_Node_Str"" + item.getIcon());
  int smallicon=R.drawable.ic_stat_status_icon;
  int iconId=R.drawable.ic_checkmark_gray;
  if (item.getIcon().equals(""String_Node_Str"")) {
  }
 else   if (item.getIcon().equals(""String_Node_Str""))   iconId=R.drawable.ic_checkmark_orange;
 else   if (item.getIcon().equals(""String_Node_Str""))   iconId=R.drawable.ic_checkmark_red;
 else   if (item.getIcon().equals(""String_Node_Str""))   iconId=R.drawable.ic_checkmark_green;
  Bitmap icon=BitmapFactory.decodeResource(cxt.getResources(),iconId);
  String[] input=item.getLongText().toString().split(""String_Node_Str"");
  String secondLine, tickerText=item.getTitle();
  if (input.length < 2 && input[0].length() < 2) {
    secondLine=""String_Node_Str"";
  }
 else {
    secondLine=input[0];
    tickerText+=""String_Node_Str"" + secondLine;
  }
  if (input.length > 1) {
    secondLine+=""String_Node_Str"";
  }
  String longtext=item.getLongText();
  if (item.getReminderTime() > 0) {
    String alarmString=""String_Node_Str"" + DateFormat.getLongDateFormat(cxt).format(item.getReminderTime()) + ""String_Node_Str""+ DateFormat.getTimeFormat(cxt).format(item.getReminderTime());
    secondLine+=alarmString;
    longtext+=alarmString;
  }
  Integer pref=Integer.parseInt(PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str""));
  Intent j=new Intent(cxt,com.icechen1.notable.library.MainActivity_.class);
  Bundle jBundle=new Bundle();
  jBundle.putInt(""String_Node_Str"",item.getID());
  j.putExtras(jBundle);
  PendingIntent jIntent=PendingIntent.getActivity(cxt,item.getID(),j,PendingIntent.FLAG_CANCEL_CURRENT);
  Intent s=new Intent(cxt,com.icechen1.notable.library.NotificationService_.class);
  Bundle smBundle=new Bundle();
  smBundle.putString(""String_Node_Str"",""String_Node_Str"");
  smBundle.putInt(""String_Node_Str"",item.getID());
  s.putExtras(smBundle);
  PendingIntent spIntent=PendingIntent.getService(cxt,item.getID(),s,PendingIntent.FLAG_CANCEL_CURRENT);
  PendingIntent pIntent;
  if (pref == 2) {
    Intent i=new Intent(cxt,com.icechen1.notable.library.DetailActivity_.class);
    Bundle iBundle=new Bundle();
    iBundle.putInt(""String_Node_Str"",item.getID());
    i.putExtras(iBundle);
    pIntent=PendingIntent.getActivity(cxt,item.getID(),i,PendingIntent.FLAG_CANCEL_CURRENT);
  }
 else {
    if (pref == 3) {
      pIntent=jIntent;
    }
 else {
      pIntent=spIntent;
    }
  }
  String title;
  if (isAlarm) {
    title=cxt.getResources().getString(R.string.alarm) + ""String_Node_Str"" + item.getTitle();
  }
 else {
    title=item.getTitle();
  }
  NotificationCompat.Builder builder=new NotificationCompat.Builder(cxt).setContentTitle(title).setContentText(secondLine).setSmallIcon(smallicon).setContentIntent(pIntent).setStyle(new NotificationCompat.BigTextStyle().bigText(longtext)).setTicker(tickerText).setPriority(Notification.PRIORITY_HIGH).setWhen(item.getTime()).setDeleteIntent(spIntent).setVisibility(Notification.VISIBILITY_SECRET).setLargeIcon(icon);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    builder.setGroup(""String_Node_Str"");
  }
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getBoolean(""String_Node_Str"",true)) {
    builder.addAction(R.drawable.ic_action_image_edit_dark,cxt.getResources().getString(R.string.edit),jIntent).addAction(R.drawable.ic_action_ic_done,cxt.getResources().getString(R.string.done),spIntent);
  }
  Notification noti=builder.build();
  noti.deleteIntent=spIntent;
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    try {
      if (Build.VERSION.SDK_INT > 15) {
        noti.priority=Notification.PRIORITY_LOW;
      }
    }
 catch (    Exception e) {
    }
  }
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    try {
      if (Build.VERSION.SDK_INT > 15) {
        noti.priority=Notification.PRIORITY_MIN;
      }
    }
 catch (    Exception e) {
    }
  }
  if (isAlarm) {
    noti.priority=Notification.PRIORITY_HIGH;
    noti.flags|=Notification.FLAG_ONGOING_EVENT;
    noti.flags|=Notification.FLAG_NO_CLEAR;
    noti.flags|=Notification.FLAG_SHOW_LIGHTS;
    noti.when=Calendar.getInstance().getTimeInMillis();
    noti.defaults|=Notification.DEFAULT_VIBRATE;
    noti.defaults|=Notification.DEFAULT_LIGHTS;
    String strRingtonePreference=PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"");
    noti.sound=Uri.parse(strRingtonePreference);
  }
  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(cxt);
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getBoolean(""String_Node_Str"",false)) {
  }
 else {
    noti.flags|=Notification.FLAG_ONGOING_EVENT;
    noti.flags|=Notification.FLAG_NO_CLEAR;
  }
  notificationManager.notify(item.getID(),noti);
  return true;
}","/** 
 * Builds a notification and shows it
 * @param item object
 * @return true if successful
 */
@SuppressLint(""String_Node_Str"") public boolean buildNotif(NotificationItem item,boolean isAlarm){
  Log.i(NOTABLE,""String_Node_Str"" + item.getID());
  Log.i(NOTABLE,""String_Node_Str"" + item.getTitle());
  Log.i(NOTABLE,""String_Node_Str"" + item.getTime());
  Log.i(NOTABLE,""String_Node_Str"" + item.getIcon());
  int smallicon=R.drawable.ic_stat_status_icon;
  int iconId=R.drawable.ic_checkmark_gray;
  if (item.getIcon().equals(NotificationItem.CHECKMARK_GRAY)) {
  }
 else   if (item.getIcon().equals(NotificationItem.CHECKMARK_ORANGE))   iconId=R.drawable.ic_checkmark_orange;
 else   if (item.getIcon().equals(NotificationItem.CHECKMARK_RED))   iconId=R.drawable.ic_checkmark_red;
 else   if (item.getIcon().equals(NotificationItem.CHECKMARK_GREEN))   iconId=R.drawable.ic_checkmark_green;
  Bitmap icon=BitmapFactory.decodeResource(cxt.getResources(),iconId);
  String[] input=item.getLongText().toString().split(""String_Node_Str"");
  String secondLine, tickerText=item.getTitle();
  if (input.length < 2 && input[0].length() < 2) {
    secondLine=""String_Node_Str"";
  }
 else {
    secondLine=input[0];
    tickerText+=""String_Node_Str"" + secondLine;
  }
  if (input.length > 1) {
    secondLine+=""String_Node_Str"";
  }
  String longtext=item.getLongText();
  if (item.getReminderTime() > 0) {
    String alarmString=""String_Node_Str"" + DateFormat.getLongDateFormat(cxt).format(item.getReminderTime()) + ""String_Node_Str""+ DateFormat.getTimeFormat(cxt).format(item.getReminderTime());
    secondLine+=alarmString;
    longtext+=alarmString;
  }
  Integer pref=Integer.parseInt(PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str""));
  Intent j=new Intent(cxt,com.icechen1.notable.library.MainActivity_.class);
  Bundle jBundle=new Bundle();
  jBundle.putInt(""String_Node_Str"",item.getID());
  j.putExtras(jBundle);
  PendingIntent jIntent=PendingIntent.getActivity(cxt,item.getID(),j,PendingIntent.FLAG_CANCEL_CURRENT);
  Intent s=new Intent(cxt,com.icechen1.notable.library.NotificationService_.class);
  Bundle smBundle=new Bundle();
  smBundle.putString(""String_Node_Str"",""String_Node_Str"");
  smBundle.putInt(""String_Node_Str"",item.getID());
  s.putExtras(smBundle);
  PendingIntent spIntent=PendingIntent.getService(cxt,item.getID(),s,PendingIntent.FLAG_CANCEL_CURRENT);
  PendingIntent pIntent;
  if (pref == 2) {
    Intent i=new Intent(cxt,com.icechen1.notable.library.DetailActivity_.class);
    Bundle iBundle=new Bundle();
    iBundle.putInt(""String_Node_Str"",item.getID());
    i.putExtras(iBundle);
    pIntent=PendingIntent.getActivity(cxt,item.getID(),i,PendingIntent.FLAG_CANCEL_CURRENT);
  }
 else {
    if (pref == 3) {
      pIntent=jIntent;
    }
 else {
      pIntent=spIntent;
    }
  }
  String title;
  if (isAlarm) {
    title=cxt.getResources().getString(R.string.alarm) + ""String_Node_Str"" + item.getTitle();
  }
 else {
    title=item.getTitle();
  }
  NotificationCompat.Builder builder=new NotificationCompat.Builder(cxt).setContentTitle(title).setContentText(secondLine).setSmallIcon(smallicon).setContentIntent(pIntent).setStyle(new NotificationCompat.BigTextStyle().bigText(longtext)).setTicker(tickerText).setPriority(Notification.PRIORITY_HIGH).setWhen(item.getTime()).setDeleteIntent(spIntent).setVisibility(Notification.VISIBILITY_SECRET).setLargeIcon(icon);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    builder.setGroup(""String_Node_Str"");
  }
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getBoolean(""String_Node_Str"",true)) {
    builder.addAction(R.drawable.ic_action_image_edit_dark,cxt.getResources().getString(R.string.edit),jIntent).addAction(R.drawable.ic_action_ic_done,cxt.getResources().getString(R.string.done),spIntent);
  }
  Notification noti=builder.build();
  noti.deleteIntent=spIntent;
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    try {
      if (Build.VERSION.SDK_INT > 15) {
        noti.priority=Notification.PRIORITY_LOW;
      }
    }
 catch (    Exception e) {
    }
  }
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    try {
      if (Build.VERSION.SDK_INT > 15) {
        noti.priority=Notification.PRIORITY_MIN;
      }
    }
 catch (    Exception e) {
    }
  }
  if (isAlarm) {
    noti.priority=Notification.PRIORITY_HIGH;
    noti.flags|=Notification.FLAG_ONGOING_EVENT;
    noti.flags|=Notification.FLAG_NO_CLEAR;
    noti.flags|=Notification.FLAG_SHOW_LIGHTS;
    noti.when=Calendar.getInstance().getTimeInMillis();
    noti.defaults|=Notification.DEFAULT_VIBRATE;
    noti.defaults|=Notification.DEFAULT_LIGHTS;
    String strRingtonePreference=PreferenceManager.getDefaultSharedPreferences(cxt).getString(""String_Node_Str"",""String_Node_Str"");
    noti.sound=Uri.parse(strRingtonePreference);
  }
  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(cxt);
  if (PreferenceManager.getDefaultSharedPreferences(cxt).getBoolean(""String_Node_Str"",false)) {
  }
 else {
    noti.flags|=Notification.FLAG_ONGOING_EVENT;
    noti.flags|=Notification.FLAG_NO_CLEAR;
  }
  notificationManager.notify(item.getID(),noti);
  return true;
}"
26633,"private void sort(int[] input,int lowIndex,int highIndex){
  if (highIndex <= lowIndex)   return;
  int pivot1=input[lowIndex];
  int pivot2=input[highIndex];
  if (pivot1 > pivot2) {
    exchange(input,lowIndex,highIndex);
    pivot1=input[lowIndex];
    pivot2=input[highIndex];
  }
  int i=lowIndex + 1;
  int lt=lowIndex + 1;
  int gt=highIndex - 1;
  while (i <= gt) {
    if (less(input[i],pivot1)) {
      exchange(input,i++,lt++);
    }
 else     if (less(pivot2,input[i])) {
      exchange(input,i,gt--);
    }
 else {
      i++;
    }
  }
  exchange(input,lowIndex,--lt);
  exchange(input,highIndex,++gt);
  sort(input,lowIndex,lt - 1);
  sort(input,lt + 1,gt - 1);
  sort(input,gt + 1,highIndex);
}","private void sort(int[] input,int lowIndex,int highIndex){
  if (highIndex <= lowIndex)   return;
  while (input[lowIndex + 1] >= input[lowIndex]) {
    lowIndex++;
    if (lowIndex >= highIndex) {
      return;
    }
  }
  int pivot1=input[lowIndex];
  int pivot2=input[highIndex];
  if (pivot1 > pivot2) {
    exchange(input,lowIndex,highIndex);
    pivot1=input[lowIndex];
    pivot2=input[highIndex];
  }
  int i=lowIndex + 1;
  int lt=lowIndex + 1;
  int gt=highIndex - 1;
  while (i <= gt) {
    if (less(input[i],pivot1)) {
      exchange(input,i++,lt++);
    }
 else     if (less(pivot2,input[i])) {
      exchange(input,i,gt--);
    }
 else {
      i++;
    }
  }
  exchange(input,lowIndex,--lt);
  exchange(input,highIndex,++gt);
  sort(input,lowIndex,lt - 1);
  sort(input,lt + 1,gt - 1);
  sort(input,gt + 1,highIndex);
}"
26634,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        check=true;
      }
 else {
        check=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
      press=false;
      isLastTouch=false;
      if (eventCheck != check) {
        eventCheck=check;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
      }
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        ball.animateCheck();
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        eventCheck=true;
      }
 else {
        eventCheck=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
      press=false;
      isLastTouch=false;
      if (eventCheck != check) {
        check=eventCheck;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
      }
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        ball.animateCheck();
      }
    }
  }
  return true;
}"
26635,"public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (check) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.setDuration(300);
  objectAnimator.start();
}","public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (eventCheck) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.setDuration(300);
  objectAnimator.start();
}"
26636,"public void setChecked(boolean check){
  invalidate();
  this.check=check;
  ball.animateCheck();
}","public void setChecked(boolean check){
  invalidate();
  this.check=check;
  this.eventCheck=check;
  ball.animateCheck();
}"
26637,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((check) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  invalidate();
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((eventCheck) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  invalidate();
}"
26638,"public void changeBackground(){
  if (check) {
    setBackgroundResource(R.drawable.background_checkbox);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    setBackgroundResource(R.drawable.background_switch_ball_uncheck);
  }
}","public void changeBackground(){
  if (eventCheck) {
    setBackgroundResource(R.drawable.background_checkbox);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    setBackgroundResource(R.drawable.background_switch_ball_uncheck);
  }
}"
26639,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        check=true;
      }
 else {
        check=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
      press=false;
      isLastTouch=false;
      if (eventCheck != check) {
        eventCheck=check;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
      }
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        ball.animateCheck();
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        eventCheck=true;
      }
 else {
        eventCheck=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
      press=false;
      isLastTouch=false;
      if (eventCheck != check) {
        check=eventCheck;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
      }
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        ball.animateCheck();
      }
    }
  }
  return true;
}"
26640,"public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (check) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.setDuration(300);
  objectAnimator.start();
}","public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (eventCheck) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.setDuration(300);
  objectAnimator.start();
}"
26641,"public void setChecked(boolean check){
  invalidate();
  this.check=check;
  ball.animateCheck();
}","public void setChecked(boolean check){
  invalidate();
  this.check=check;
  this.eventCheck=check;
  ball.animateCheck();
}"
26642,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((check) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  invalidate();
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((eventCheck) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  invalidate();
}"
26643,"public void changeBackground(){
  if (check) {
    setBackgroundResource(R.drawable.background_checkbox);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    setBackgroundResource(R.drawable.background_switch_ball_uncheck);
  }
}","public void changeBackground(){
  if (eventCheck) {
    setBackgroundResource(R.drawable.background_checkbox);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    setBackgroundResource(R.drawable.background_switch_ball_uncheck);
  }
}"
26644,"@Override public boolean onTouchEvent(MotionEvent event){
  isLastTouch=true;
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    press=true;
  }
 else   if (event.getAction() == MotionEvent.ACTION_MOVE) {
    float x=event.getX();
    x=(x < ball.xIni) ? ball.xIni : x;
    x=(x > ball.xFin) ? ball.xFin : x;
    if (x > ball.xCen) {
      check=true;
    }
 else {
      check=false;
    }
    ViewHelper.setX(ball,x);
    ball.changeBackground();
    if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
      isLastTouch=false;
      press=false;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    press=false;
    isLastTouch=false;
    if (eventCheck != check) {
      eventCheck=check;
      if (onCheckListener != null)       onCheckListener.onCheck(check);
    }
    if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
      ball.animateCheck();
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  isLastTouch=true;
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    startRedraw();
    press=true;
  }
 else   if (event.getAction() == MotionEvent.ACTION_MOVE) {
    float x=event.getX();
    x=(x < ball.xIni) ? ball.xIni : x;
    x=(x > ball.xFin) ? ball.xFin : x;
    if (x > ball.xCen) {
      check=true;
    }
 else {
      check=false;
    }
    ViewHelper.setX(ball,x);
    ball.changeBackground();
    if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
      isLastTouch=false;
      press=false;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    press=false;
    isLastTouch=false;
    if (eventCheck != check) {
      eventCheck=check;
      if (onCheckListener != null)       onCheckListener.onCheck(check);
    }
    if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
      ball.animateCheck();
    }
 else {
      stopRedraw();
    }
  }
  return true;
}"
26645,"public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (check) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.setDuration(300);
  objectAnimator.start();
}","public void animateCheck(){
  changeBackground();
  ObjectAnimator objectAnimator;
  if (check) {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xFin);
  }
 else {
    objectAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",ball.xIni);
  }
  objectAnimator.addListener(animatorListener);
  objectAnimator.setDuration(300);
  objectAnimator.start();
}"
26646,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((check) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  invalidate();
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!placedBall)   placeBall();
  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas temp=new Canvas(bitmap);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor((check) ? backgroundColor : Color.parseColor(""String_Node_Str""));
  paint.setStrokeWidth(Utils.dpToPx(2,getResources()));
  temp.drawLine(getHeight() / 2,getHeight() / 2,getWidth() - getHeight() / 2,getHeight() / 2,paint);
  Paint transparentPaint=new Paint();
  transparentPaint.setAntiAlias(true);
  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,ViewHelper.getY(ball) + ball.getHeight() / 2,ball.getWidth() / 2,transparentPaint);
  canvas.drawBitmap(bitmap,0,0,new Paint());
  if (press) {
    paint.setColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);
  }
  if (canRedraw) {
    invalidate();
  }
}"
26647,"public void setBackgroundColor(int color){
  this.backgroundColor=color;
  if (isEnabled())   beforeBackground=backgroundColor;
  try {
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
    rippleColor=makePressColor();
  }
 catch (  Exception ex) {
  }
}","public void setBackgroundColor(int color){
  backgroundColor=color;
  if (isEnabled())   beforeBackground=backgroundColor;
  try {
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
    rippleColor=super.makePressColor(255);
  }
 catch (  Exception ex) {
  }
}"
26648,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      radius=getHeight() / rippleSize;
      x=event.getX();
      y=event.getY();
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      radius=getHeight() / rippleSize;
      x=event.getX();
      y=event.getY();
      if (!((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0))) {
        isLastTouch=false;
        x=-1;
        y=-1;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
        radius++;
      }
 else {
        isLastTouch=false;
        x=-1;
        y=-1;
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      radius=getHeight() / rippleSize;
      x=event.getX();
      y=event.getY();
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      radius=getHeight() / rippleSize;
      x=event.getX();
      y=event.getY();
      if (!((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0))) {
        isLastTouch=false;
        x=-1;
        y=-1;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
        radius++;
      }
 else {
        isLastTouch=false;
        x=-1;
        y=-1;
      }
      if (clickAfterRipple == false && onClickListener != null) {
        onClickListener.onClick(this);
      }
    }
  }
  return true;
}"
26649,"public Bitmap makeCircle(){
  Bitmap output=Bitmap.createBitmap(getWidth() - Utils.dpToPx(6,getResources()),getHeight() - Utils.dpToPx(7,getResources()),Config.ARGB_8888);
  Canvas canvas=new Canvas(output);
  canvas.drawARGB(0,0,0,0);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor(rippleColor);
  canvas.drawCircle(x,y,radius,paint);
  if (radius > getHeight() / rippleSize)   radius+=rippleSpeed;
  if (radius >= getWidth()) {
    x=-1;
    y=-1;
    radius=getHeight() / rippleSize;
    if (onClickListener != null)     onClickListener.onClick(this);
  }
  return output;
}","public Bitmap makeCircle(){
  Bitmap output=Bitmap.createBitmap(getWidth() - Utils.dpToPx(6,getResources()),getHeight() - Utils.dpToPx(7,getResources()),Config.ARGB_8888);
  Canvas canvas=new Canvas(output);
  canvas.drawARGB(0,0,0,0);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor(rippleColor);
  canvas.drawCircle(x,y,radius,paint);
  if (radius > getHeight() / rippleSize) {
    radius+=rippleSpeed;
  }
  if (radius >= getWidth()) {
    x=-1;
    y=-1;
    radius=getHeight() / rippleSize;
    if (clickAfterRipple == true && onClickListener != null) {
      onClickListener.onClick(this);
    }
  }
  return output;
}"
26650,"/** 
 * Make a dark color to ripple effect
 * @return
 */
protected int makePressColor(){
  int r=(this.backgroundColor >> 16) & 0xFF;
  int g=(this.backgroundColor >> 8) & 0xFF;
  int b=(this.backgroundColor >> 0) & 0xFF;
  r=(r - 30 < 0) ? 0 : r - 30;
  g=(g - 30 < 0) ? 0 : g - 30;
  b=(b - 30 < 0) ? 0 : b - 30;
  return Color.rgb(r,g,b);
}","/** 
 * @return 涟漪上的暗色如果自定义了颜色，就返回自定义的颜色。如果没有，那么就生成颜色
 */
@Override protected int makePressColor(int alpha){
  if (rippleColor != null) {
    return rippleColor;
  }
 else {
    return super.makePressColor(alpha);
  }
}"
26651,"public Button(Context context,AttributeSet attrs){
  super(context,attrs);
  setDefaultProperties();
  setAttributes(attrs);
  beforeBackground=backgroundColor;
  if (rippleColor == null)   rippleColor=makePressColor();
}","public Button(Context context,AttributeSet attrs){
  super(context,attrs);
  onInitDefaultValues();
  onInitAttributes(attrs);
}"
26652,"public void setBackgroundColor(int color){
  backgroundColor=color;
  if (isEnabled())   beforeBackground=backgroundColor;
  textButton.setTextColor(color);
}","@Override @Deprecated public void setBackgroundColor(int color){
}"
26653,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (x != -1) {
    Paint paint=new Paint();
    paint.setAntiAlias(true);
    paint.setColor(makePressColor());
    canvas.drawCircle(x,y,radius,paint);
    if (radius > getHeight() / rippleSize)     radius+=rippleSpeed;
    if (radius >= getWidth()) {
      x=-1;
      y=-1;
      radius=getHeight() / rippleSize;
      if (onClickListener != null)       onClickListener.onClick(this);
    }
  }
  invalidate();
}","@Override protected void onDraw(Canvas canvas){
  if (x != -1) {
    Paint paint=new Paint();
    paint.setAntiAlias(true);
    paint.setColor(rippleColor);
    canvas.drawCircle(x,y,radius,paint);
    if (radius > getHeight() / rippleSize)     radius+=rippleSpeed;
    if (radius >= getWidth()) {
      x=-1;
      y=-1;
      radius=getHeight() / rippleSize;
      if (clickAfterRipple == true && onClickListener != null) {
        onClickListener.onClick(this);
      }
    }
  }
  invalidate();
}"
26654,"@Override protected void setDefaultProperties(){
  super.minWidth=80;
  super.minHeight=36;
  super.background=R.drawable.background_button_rectangle;
  super.setDefaultProperties();
  rippleSpeed=Utils.dpToPx(3,getResources());
}","@Override protected void setDefaultProperties(){
  super.minWidth=80;
  super.minHeight=36;
  super.background=R.drawable.background_button_rectangle;
  super.setDefaultProperties();
}"
26655,"protected void setAttributes(AttributeSet attrs){
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
  }
  String value=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
  String text=null;
  int textResource=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (textResource != -1) {
    text=getResources().getString(textResource);
  }
 else {
    text=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
  }
  if (text != null) {
    textButton=new TextView(getContext());
    textButton.setText(text);
    textButton.setTextColor(Color.WHITE);
    textButton.setTypeface(null,Typeface.BOLD);
    RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    params.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
    params.setMargins(Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()));
    textButton.setLayoutParams(params);
    addView(textButton);
  }
}","protected void setAttributes(AttributeSet attrs){
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
  }
  String value=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
  String text=null;
  int textResource=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (textResource != -1) {
    text=getResources().getString(textResource);
  }
 else {
    text=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
  }
  if (text != null) {
    textButton=new TextView(getContext());
    textButton.setText(text);
    textButton.setTextColor(Color.WHITE);
    textButton.setTypeface(null,Typeface.BOLD);
    RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    params.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
    params.setMargins(Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()),Utils.dpToPx(5,getResources()));
    textButton.setLayoutParams(params);
    addView(textButton);
  }
  rippleSpeed=attrs.getAttributeFloatValue(MATERIALDESIGNXML,""String_Node_Str"",Utils.dpToPx(6,getResources()));
}"
26656,"public void setChecked(boolean check){
  this.check=check;
  if (check) {
    step=0;
  }
  if (check)   checkView.changeBackground();
}","public void setChecked(boolean check){
  this.check=check;
  setPressed(false);
  changeBackgroundColor(getResources().getColor(android.R.color.transparent));
  if (check) {
    step=0;
  }
  if (check)   checkView.changeBackground();
}"
26657,"protected void setAttributes(AttributeSet attrs){
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
 else     setBackgroundColor(this.backgroundColor);
  }
}","protected void setAttributes(AttributeSet attrs){
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
 else     setBackgroundColor(this.backgroundColor);
  }
  int rippleColor=attrs.getAttributeResourceValue(MATERIALDESIGNXML,""String_Node_Str"",-1);
  if (rippleColor != -1) {
    setRippleColor(getResources().getColor(rippleColor));
  }
 else {
    String background=attrs.getAttributeValue(MATERIALDESIGNXML,""String_Node_Str"");
    if (background != null)     setRippleColor(Color.parseColor(background));
 else     setRippleColor(makePressColor());
  }
  rippleSpeed=attrs.getAttributeFloatValue(MATERIALDESIGNXML,""String_Node_Str"",20f);
}"
26658,"/** 
 * Convert Dp to Pixel
 */
public static int dpToPx(float dp,Resources resources){
  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());
  return (int)px;
}","/** 
 * Convert Dp to Pixel 将dp转换为pixel
 */
public static int dpToPx(float dp,Resources resources){
  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());
  return (int)px;
}"
26659,"public void setBackgroundColor(int color){
  this.backgroundColor=color;
  if (isEnabled())   beforeBackground=backgroundColor;
  LayerDrawable layer=(LayerDrawable)getBackground();
  GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
  shape.setColor(backgroundColor);
}","public void setBackgroundColor(int color){
  this.backgroundColor=color;
  if (isEnabled()) {
    beforeBackground=backgroundColor;
  }
  LayerDrawable layer=(LayerDrawable)getBackground();
  GradientDrawable shape=null;
  if (!isInEditMode()) {
    shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
}"
26660,"protected void setAttributes(AttributeSet attrs){
  setBackgroundResource(R.drawable.background_button_rectangle);
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
 else     setBackgroundColor(this.backgroundColor);
  }
}","protected void setAttributes(AttributeSet attrs){
  if (!isInEditMode()) {
    setBackgroundResource(R.drawable.background_button_rectangle);
  }
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    String background=attrs.getAttributeValue(ANDROIDXML,""String_Node_Str"");
    if (background != null)     setBackgroundColor(Color.parseColor(background));
 else     setBackgroundColor(this.backgroundColor);
  }
}"
26661,public void onCheck(boolean check);,public void onCheck(boolean isChecked);
26662,"@Override public void setBackgroundColor(int color){
  backgroundColor=color;
  if (isEnabled())   beforeBackground=backgroundColor;
  changeBackgroundColor(color);
}","@Override public void setBackgroundColor(int color){
  backgroundColor=color;
  if (isEnabled()) {
    beforeBackground=backgroundColor;
  }
  changeBackgroundColor(color);
}"
26663,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      changeBackgroundColor((check) ? makePressColor() : Color.parseColor(""String_Node_Str""));
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      changeBackgroundColor(getResources().getColor(android.R.color.transparent));
      press=false;
      if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
        isLastTouch=false;
        check=!check;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
        if (check) {
          step=0;
        }
        if (check)         checkView.changeBackground();
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      changeBackgroundColor((check) ? makePressColor(70) : Color.parseColor(""String_Node_Str""));
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      changeBackgroundColor(getResources().getColor(android.R.color.transparent));
      press=false;
      if ((event.getX() <= getWidth() && event.getX() >= 0) && (event.getY() <= getHeight() && event.getY() >= 0)) {
        isLastTouch=false;
        check=!check;
        if (onCheckListener != null)         onCheckListener.onCheck(check);
        if (check) {
          step=0;
        }
        if (check)         checkView.changeBackground();
      }
    }
  }
  return true;
}"
26664,"public Check(Context context){
  super(context);
  setBackgroundResource(R.drawable.background_checkbox_uncheck);
  sprite=BitmapFactory.decodeResource(context.getResources(),R.drawable.sprite_check);
}","public Check(Context context){
  super(context);
  if (!isInEditMode()) {
    setBackgroundResource(R.drawable.background_checkbox_uncheck);
  }
  sprite=BitmapFactory.decodeResource(context.getResources(),R.drawable.sprite_check);
}"
26665,"protected void setAttributes(AttributeSet attrs){
  setBackgroundResource(R.drawable.background_checkbox);
  setMinimumHeight(Utils.dpToPx(48,getResources()));
  setMinimumWidth(Utils.dpToPx(48,getResources()));
  int bacgroundColor=attrs.getAttributeResourceValue(ANDROIDXML,""String_Node_Str"",-1);
  if (bacgroundColor != -1) {
    setBackgroundColor(getResources().getColor(bacgroundColor));
  }
 else {
    int background=attrs.getAttributeIntValue(ANDROIDXML,""String_Node_Str"",-1);
    if (background != -1)     setBackgroundColor(background);
  }
  boolean check=attrs.getAttributeBooleanValue(MATERIALDESIGNXML,""String_Node_Str"",false);
  if (check) {
    post(new Runnable(){
      @Override public void run(){
        setChecked(true);
        setPressed(false);
        changeBackgroundColor(getResources().getColor(android.R.color.transparent));
      }
    }
);
  }
  checkView=new Check(getContext());
  RelativeLayout.LayoutParams params=new LayoutParams(Utils.dpToPx(20,getResources()),Utils.dpToPx(20,getResources()));
  params.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  checkView.setLayoutParams(params);
  addView(checkView);
}","protected void setAttributes(AttributeSet attrs){
  if (!isInEditMode()) {
    setBackgroundResource(R.drawable.background_checkbox);
  }
 else {
    setBackgroundResource(android.R.drawable.checkbox_on_background);
  }
  setBackgroundAttributes(attrs);
  boolean check=attrs.getAttributeBooleanValue(MATERIALDESIGNXML,""String_Node_Str"",false);
  if (check) {
    post(new Runnable(){
      @Override public void run(){
        setChecked(true);
        setPressed(false);
        changeBackgroundColor(getResources().getColor(android.R.color.transparent));
      }
    }
);
  }
  float size=20;
  String checkBoxSize=attrs.getAttributeValue(MATERIALDESIGNXML,""String_Node_Str"");
  if (checkBoxSize != null) {
    size=Utils.dipOrDpToFloat(checkBoxSize);
  }
  checkView=new Check(getContext());
  RelativeLayout.LayoutParams params=new LayoutParams(Utils.dpToPx(size,getResources()),Utils.dpToPx(size,getResources()));
  params.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  checkView.setLayoutParams(params);
  addView(checkView);
}"
26666,"public CheckBox(Context context,AttributeSet attrs){
  super(context,attrs);
  setAttributes(attrs);
}","public CheckBox(Context context,AttributeSet attrs){
  super(context,attrs);
  backgroundColor=Color.parseColor(""String_Node_Str"");
  minWidth=48;
  minHeight=48;
  setAttributes(attrs);
}"
26667,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (check) {
    if (step < 11)     step++;
  }
 else {
    if (step >= 0)     step--;
    if (step == -1)     changeBackground();
  }
  Rect src=new Rect(40 * step,0,(40 * step) + 40,40);
  Rect dst=new Rect(0,0,this.getWidth() - 2,this.getHeight());
  canvas.drawBitmap(sprite,src,dst,null);
  invalidate();
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (check) {
    if (step < 11)     step++;
  }
 else {
    if (step >= 0)     step--;
    if (step == -1)     changeBackground();
  }
  Rect src=new Rect(40 * step,0,(40 * step) + 40,40);
  Rect dst=new Rect(0,0,this.getWidth() - 2,this.getHeight());
  if (!isInEditMode()) {
    canvas.drawBitmap(sprite,src,dst,null);
  }
  invalidate();
}"
26668,"public void changeBackground(){
  if (check) {
    setBackgroundResource(R.drawable.background_checkbox_check);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    setBackgroundResource(R.drawable.background_checkbox_uncheck);
  }
}","public void changeBackground(){
  if (check) {
    setBackgroundResource(R.drawable.background_checkbox_check);
    LayerDrawable layer=(LayerDrawable)getBackground();
    GradientDrawable shape=(GradientDrawable)layer.findDrawableByLayerId(R.id.shape_bacground);
    shape.setColor(backgroundColor);
  }
 else {
    if (!isInEditMode()) {
      setBackgroundResource(R.drawable.background_checkbox_uncheck);
    }
  }
}"
26669,"@Override public void onClick(View arg0){
  setChecked(iSchecked ? false : true);
}","@Override public void onClick(View v){
  setChecked(iSchecked ? false : true);
}"
26670,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        iSchecked=true;
      }
 else {
        iSchecked=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if (event.getX() <= getWidth() && event.getX() >= 0) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      press=false;
      isLastTouch=false;
      if (eventCheck != iSchecked) {
        eventCheck=iSchecked;
        if (onCheckListener != null)         onCheckListener.onCheck(iSchecked);
      }
      if (event.getX() <= getWidth() && event.getX() >= 0) {
        ball.animateCheck();
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isEnabled()) {
    isLastTouch=true;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      press=true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      requestDisallowInterceptTouchEvent(true);
      float x=event.getX();
      x=(x < ball.xIni) ? ball.xIni : x;
      x=(x > ball.xFin) ? ball.xFin : x;
      if (x > ball.xCen) {
        iSchecked=true;
      }
 else {
        iSchecked=false;
      }
      ViewHelper.setX(ball,x);
      ball.changeBackground();
      if (event.getX() <= getWidth() && event.getX() >= 0) {
        isLastTouch=false;
        press=false;
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
      requestDisallowInterceptTouchEvent(false);
      press=false;
      isLastTouch=false;
      if (eventCheck != iSchecked) {
        eventCheck=iSchecked;
        if (onCheckListener != null)         onCheckListener.onCheck(iSchecked);
      }
      if (event.getX() <= getWidth() && event.getX() >= 0) {
        ball.animateCheck();
      }
    }
  }
  return true;
}"
26671,"@Override protected void setAttributes(AttributeSet attrs){
  super.setAttributes(attrs);
  getBackground().setAlpha(0);
  iSchecked=attrs.getAttributeBooleanValue(MATERIALDESIGNXML,""String_Node_Str"",false);
  eventCheck=iSchecked;
  setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      setChecked(iSchecked ? false : true);
    }
  }
);
  float size=20;
  String thumbSize=attrs.getAttributeValue(MATERIALDESIGNXML,""String_Node_Str"");
  if (thumbSize != null) {
    size=Utils.dipOrDpToFloat(thumbSize);
  }
  ball=new Ball(getContext());
  setThumbParams(size);
  addView(ball);
}","@Override protected void setAttributes(AttributeSet attrs){
  super.setAttributes(attrs);
  if (!isInEditMode()) {
    getBackground().setAlpha(0);
  }
  iSchecked=attrs.getAttributeBooleanValue(MATERIALDESIGNXML,""String_Node_Str"",false);
  eventCheck=iSchecked;
  setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      setChecked(iSchecked ? false : true);
    }
  }
);
  float size=20;
  String thumbSize=attrs.getAttributeValue(MATERIALDESIGNXML,""String_Node_Str"");
  if (thumbSize != null) {
    size=Utils.dipOrDpToFloat(thumbSize);
  }
  ball=new Ball(getContext());
  setThumbParams(size);
  addView(ball);
  ball.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setChecked(iSchecked ? false : true);
    }
  }
);
}"
26672,"/** 
 * 这里看似是得到控件相对的坐标，但是如果这个滑动条在可以上下滚动的布局中就会出现问题。 因为这里的坐标都是死的，在上下滚动的view中父控件的top仍旧不变，但实际上是应该获得动态数值的。
 * @error
 * @param myView
 * @return
 */
public static int getRelativeTop(View myView){
  myView.getParent().requestLayout();
  if (myView.getId() == android.R.id.content)   return myView.getTop();
 else   return myView.getTop() + getRelativeTop((View)myView.getParent());
}","/** 
 * 这里看似是得到控件相对的坐标，但是如果这个滑动条在可以上下滚动的布局中就会出现问题。 因为这里的坐标都是死的，在上下滚动的view中父控件的top仍旧不变，但实际上是应该获得动态数值的。
 * @param myView
 * @return
 */
public static int getRelativeTop(View myView){
  Rect bounds=new Rect();
  myView.getGlobalVisibleRect(bounds);
  return bounds.top;
}"
26673,"@Override public boolean onTouchEvent(MotionEvent event){
  isLastTouch=true;
  if (isEnabled()) {
    if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
      if (numberIndicator != null && numberIndicator.isShowing() == false)       numberIndicator.show();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        press=true;
        int newValue=0;
        float division=(ball.xFin - ball.xIni) / (max - min);
        if (event.getX() > ball.xFin) {
          newValue=max;
        }
 else         if (event.getX() < ball.xIni) {
          newValue=min;
        }
 else {
          newValue=min + (int)((event.getX() - ball.xIni) / division);
        }
        if (value != newValue) {
          value=newValue;
          if (onValueChangedListener != null)           onValueChangedListener.onValueChanged(newValue);
        }
        float x=event.getX();
        x=(x < ball.xIni) ? ball.xIni : x;
        x=(x > ball.xFin) ? ball.xFin : x;
        ViewHelper.setX(ball,x);
        ball.changeBackground();
        if (numberIndicator != null) {
          numberIndicator.indicator.x=x;
          numberIndicator.indicator.finalY=Utils.getRelativeTop(this) - getHeight() / 2;
          numberIndicator.indicator.finalSize=getHeight() / 2;
          numberIndicator.numberIndicator.setText(""String_Node_Str"");
        }
      }
 else {
        press=false;
        isLastTouch=false;
        if (numberIndicator != null)         numberIndicator.dismiss();
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if (numberIndicator != null)       numberIndicator.dismiss();
      isLastTouch=false;
      press=false;
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  isLastTouch=true;
  if (isEnabled()) {
    if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
      if (numberIndicator != null && numberIndicator.isShowing() == false)       numberIndicator.show();
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
        press=true;
        int newValue=0;
        float division=(ball.xFin - ball.xIni) / (max - min);
        if (event.getX() > ball.xFin) {
          newValue=max;
        }
 else         if (event.getX() < ball.xIni) {
          newValue=min;
        }
 else {
          newValue=min + (int)((event.getX() - ball.xIni) / division);
        }
        if (value != newValue) {
          value=newValue;
          if (onValueChangedListener != null)           onValueChangedListener.onValueChanged(newValue);
        }
        float x=event.getX();
        x=(x < ball.xIni) ? ball.xIni : x;
        x=(x > ball.xFin) ? ball.xFin : x;
        ViewHelper.setX(ball,x);
        ball.changeBackground();
        if (numberIndicator != null) {
          numberIndicator.indicator.x=x;
          numberIndicator.indicator.finalY=Utils.getRelativeTop(this) - getHeight();
          numberIndicator.indicator.finalSize=getHeight() / 2;
          numberIndicator.numberIndicator.setText(""String_Node_Str"");
        }
      }
 else {
        press=false;
        isLastTouch=false;
        if (numberIndicator != null)         numberIndicator.dismiss();
      }
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if (numberIndicator != null)       numberIndicator.dismiss();
      isLastTouch=false;
      press=false;
      if ((event.getX() <= getWidth() && event.getX() >= 0)) {
      }
    }
  }
  return true;
}"
26674,"/** 
 * Checks if the broadcast is a fat beacon
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return true if it is a fat beacon, false otherwise
 */
public static boolean isFatBeacon(byte[] serviceData){
  return (serviceData != null && serviceData.length > 3 && isUrlFrame(serviceData) && serviceData[2] == TITLE_TYPE);
}","/** 
 * Checks if the broadcast is a fat beacon.
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return true if it is a fat beacon, false otherwise
 */
public static boolean isFatBeacon(byte[] serviceData){
  return (serviceData != null && serviceData.length > 3 && isUrlFrame(serviceData) && serviceData[2] == TITLE_TYPE);
}"
26675,"/** 
 * Getter for the Eddystone URL
 * @return Eddystone URL
 */
public String getUrl(){
  return mUrl;
}","/** 
 * Getter for the Eddystone URL.
 * @return Eddystone URL
 */
public String getUrl(){
  return mUrl;
}"
26676,"/** 
 * Getter for the Tx Power Level
 * @return Tx Power Level
 */
public byte getTxPowerLevel(){
  return mTxPower;
}","/** 
 * Getter for the Tx Power Level.
 * @return Tx Power Level
 */
public byte getTxPowerLevel(){
  return mTxPower;
}"
26677,"/** 
 * Reads the title of a fat beacon broadcast
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return Title encoded in the broadcast
 */
public static String getFatBeaconTitle(byte[] serviceData){
  if (serviceData.length > 2) {
    String title=new String(Arrays.copyOfRange(serviceData,3,serviceData.length)).trim();
    return title.indexOf('\uFFFD') == -1 ? title : ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","/** 
 * Reads the title of a fat beacon broadcast.
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return Title encoded in the broadcast
 */
public static String getFatBeaconTitle(byte[] serviceData){
  if (serviceData.length > 2) {
    String title=new String(Arrays.copyOfRange(serviceData,3,serviceData.length)).trim();
    return title.indexOf('\uFFFD') == -1 ? title : ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}"
26678,"/** 
 * Checks if the broadcast is a Eddystone URL
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return true if it is a URL, false otherwise
 */
public static boolean isUrlFrame(byte[] serviceData){
  return serviceData != null && serviceData.length > 0 && (serviceData[0] & 0xf0) == URL_FRAME_TYPE;
}","/** 
 * Checks if the broadcast is a Eddystone URL.
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return true if it is a URL, false otherwise
 */
public static boolean isUrlFrame(byte[] serviceData){
  return serviceData != null && serviceData.length > 0 && (serviceData[0] & 0xf0) == URL_FRAME_TYPE;
}"
26679,"/** 
 * Getter for the flags
 * @return flags
 */
public byte getFlags(){
  return mFlags;
}","/** 
 * Getter for the flags.
 * @return flags
 */
public byte getFlags(){
  return mFlags;
}"
26680,"@Override public void onConnectionStateChange(BluetoothGatt gatt,int status,int newState){
  if (newState == BluetoothProfile.STATE_CONNECTED && status == gatt.GATT_SUCCESS) {
    Log.i(TAG,""String_Node_Str"");
    mBluetoothGatt=gatt;
    html=new StringBuilder(""String_Node_Str"");
    if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
      gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH);
      gatt.requestMtu(505);
    }
 else {
      gatt.discoverServices();
    }
  }
 else   if (newState == BluetoothProfile.STATE_DISCONNECTED) {
    Log.i(TAG,""String_Node_Str"");
    close();
  }
 else   if (status != gatt.GATT_SUCCESS) {
    Log.i(TAG,""String_Node_Str"" + status);
    close();
  }
}","@Override public void onConnectionStateChange(BluetoothGatt gatt,int status,int newState){
  if (newState == BluetoothProfile.STATE_CONNECTED && status == gatt.GATT_SUCCESS) {
    Log.i(TAG,""String_Node_Str"");
    mBluetoothGatt=gatt;
    html=new StringBuilder(""String_Node_Str"");
    if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
      gatt.requestConnectionPriority(CONNECTION_PRIORITY_HIGH);
      gatt.requestMtu(505);
    }
 else {
      gatt.discoverServices();
    }
  }
 else   if (newState == BluetoothProfile.STATE_DISCONNECTED) {
    Log.i(TAG,""String_Node_Str"");
    close();
  }
 else   if (status != gatt.GATT_SUCCESS) {
    Log.i(TAG,""String_Node_Str"" + status);
    close();
  }
}"
26681,"private void showFragment(Fragment newFragment,String fragmentTag,boolean addToBackStack){
  FragmentTransaction transaction=getFragmentManager().beginTransaction().setCustomAnimations(R.animator.fade_in_and_slide_up_fragment,R.animator.fade_out_fragment,R.animator.fade_in_activity,R.animator.fade_out_fragment).replace(R.id.main_activity_container,newFragment,fragmentTag);
  if (addToBackStack) {
    transaction.addToBackStack(null);
  }
  transaction.commit();
}","@SuppressLint(""String_Node_Str"") private void showFragment(Fragment newFragment,String fragmentTag,boolean addToBackStack){
  FragmentTransaction transaction=getFragmentManager().beginTransaction().setCustomAnimations(R.animator.fade_in_and_slide_up_fragment,R.animator.fade_out_fragment,R.animator.fade_in_activity,R.animator.fade_out_fragment).replace(R.id.main_activity_container,newFragment,fragmentTag);
  if (addToBackStack) {
    transaction.addToBackStack(null);
  }
  transaction.commit();
}"
26682,"/** 
 * Reads the title of a fat beacon broadcast.
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return Title encoded in the broadcast
 */
public static String getFatBeaconTitle(byte[] serviceData){
  if (serviceData.length > 2) {
    String title=new String(Arrays.copyOfRange(serviceData,3,serviceData.length)).trim();
    return title.indexOf('\uFFFD') == -1 ? title : ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","/** 
 * Reads the title of a fat beacon broadcast.
 * @param serviceData The ble advertised Eddystone URL Service UUID service data
 * @return Title encoded in the broadcast
 */
public static String getFatBeaconTitle(byte[] serviceData){
  if (serviceData.length > 2) {
    byte[] bytes=Arrays.copyOfRange(serviceData,3,serviceData.length);
    String title=new String(bytes,Charset.forName(""String_Node_Str"")).trim();
    return title.indexOf('\uFFFD') == -1 ? title : ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}"
26683,"@Test public void getFatBeaconTitleTest(){
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01,0x02}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01,0x02,0x00}));
  String title=""String_Node_Str"";
  int length=title.getBytes().length;
  byte[] serviceData=new byte[length + 3];
  System.arraycopy(title.getBytes(),0,serviceData,3,length);
  serviceData[0]=0x10;
  serviceData[1]=0x00;
  serviceData[2]=0x0e;
  assertEquals(title,EddystoneBeacon.getFatBeaconTitle(serviceData));
}","@Test public void getFatBeaconTitleTest() throws UnsupportedEncodingException {
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01,0x02}));
  assertEquals(""String_Node_Str"",EddystoneBeacon.getFatBeaconTitle(new byte[]{0x01,0x02,0x00}));
  String title=""String_Node_Str"";
  byte[] titleBytes=title.getBytes(""String_Node_Str"");
  int length=titleBytes.length;
  byte[] serviceData=new byte[length + 3];
  System.arraycopy(titleBytes,0,serviceData,3,length);
  serviceData[0]=0x10;
  serviceData[1]=0x00;
  serviceData[2]=0x0e;
  assertEquals(title,EddystoneBeacon.getFatBeaconTitle(serviceData));
}"
26684,"private void updateDebugView(PwPair pwPair,View view){
  UrlDevice urlDevice=pwPair.getUrlDevice();
  if (Utils.isBleUrlDevice(urlDevice)) {
    setText(view,R.id.ranging_debug_tx_power,getString(R.string.ranging_debug_tx_power_prefix) + Utils.getTxPower(urlDevice));
    setText(view,R.id.ranging_debug_rssi,getString(R.string.ranging_debug_rssi_prefix) + Utils.getSmoothedRssi(urlDevice));
    setText(view,R.id.ranging_debug_distance,getString(R.string.ranging_debug_distance_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getDistance(urlDevice)));
    setText(view,R.id.ranging_debug_region,getString(R.string.ranging_debug_region_prefix) + Utils.getRegionString(urlDevice));
  }
 else {
    setText(view,R.id.ranging_debug_tx_power,""String_Node_Str"");
    setText(view,R.id.ranging_debug_rssi,""String_Node_Str"");
    setText(view,R.id.ranging_debug_distance,""String_Node_Str"");
    setText(view,R.id.ranging_debug_region,""String_Node_Str"");
  }
  setText(view,R.id.metadata_debug_scan_time,getString(R.string.metadata_debug_scan_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getScanTimeMillis(urlDevice) / 1000.0));
  PwsResult pwsResult=pwPair.getPwsResult();
  setText(view,R.id.metadata_debug_rank,getString(R.string.metadata_debug_rank_prefix) + new DecimalFormat(""String_Node_Str"").format(0));
  setText(view,R.id.metadata_debug_pws_trip_time,getString(R.string.metadata_debug_pws_trip_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getPwsTripTimeMillis(pwsResult) / 1000.0));
  setText(view,R.id.metadata_debug_groupid,getString(R.string.metadata_debug_groupid_prefix) + Utils.getGroupId(pwsResult));
}","private void updateDebugView(PwPair pwPair,View view){
  UrlDevice urlDevice=pwPair.getUrlDevice();
  if (Utils.isBleUrlDevice(urlDevice)) {
    setText(view,R.id.ranging_debug_tx_power,getString(R.string.ranging_debug_tx_power_prefix) + Utils.getTxPower(urlDevice));
    setText(view,R.id.ranging_debug_rssi,getString(R.string.ranging_debug_rssi_prefix) + Utils.getSmoothedRssi(urlDevice));
    setText(view,R.id.ranging_debug_distance,getString(R.string.ranging_debug_distance_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getDistance(urlDevice)));
    setText(view,R.id.ranging_debug_region,getString(R.string.ranging_debug_region_prefix) + Utils.getRegionString(urlDevice));
  }
 else {
    setText(view,R.id.ranging_debug_tx_power,""String_Node_Str"");
    setText(view,R.id.ranging_debug_rssi,""String_Node_Str"");
    setText(view,R.id.ranging_debug_distance,""String_Node_Str"");
    setText(view,R.id.ranging_debug_region,""String_Node_Str"");
  }
  setText(view,R.id.metadata_debug_scan_time,getString(R.string.metadata_debug_scan_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getScanTimeMillis(urlDevice) / 1000.0));
  PwsResult pwsResult=pwPair.getPwsResult();
  setText(view,R.id.metadata_debug_rank,getString(R.string.metadata_debug_rank_prefix) + new DecimalFormat(""String_Node_Str"").format(0));
  if (Utils.isResolvableDevice(urlDevice)) {
    setText(view,R.id.metadata_debug_pws_trip_time,getString(R.string.metadata_debug_pws_trip_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getPwsTripTimeMillis(pwsResult) / 1000.0));
  }
  setText(view,R.id.metadata_debug_groupid,getString(R.string.metadata_debug_groupid_prefix) + Utils.getGroupId(pwsResult));
}"
26685,"private void updateDebugView(PwPair pwPair,View view){
  UrlDevice urlDevice=pwPair.getUrlDevice();
  if (Utils.isBleUrlDevice(urlDevice)) {
    setText(view,R.id.ranging_debug_tx_power,getString(R.string.ranging_debug_tx_power_prefix) + Utils.getTxPower(urlDevice));
    setText(view,R.id.ranging_debug_rssi,getString(R.string.ranging_debug_rssi_prefix) + Utils.getSmoothedRssi(urlDevice));
    setText(view,R.id.ranging_debug_distance,getString(R.string.ranging_debug_distance_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getDistance(urlDevice)));
    setText(view,R.id.ranging_debug_region,getString(R.string.ranging_debug_region_prefix) + Utils.getRegionString(urlDevice));
  }
 else {
    setText(view,R.id.ranging_debug_tx_power,""String_Node_Str"");
    setText(view,R.id.ranging_debug_rssi,""String_Node_Str"");
    setText(view,R.id.ranging_debug_distance,""String_Node_Str"");
    setText(view,R.id.ranging_debug_region,""String_Node_Str"");
  }
  setText(view,R.id.metadata_debug_scan_time,getString(R.string.metadata_debug_scan_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getScanTimeMillis(urlDevice) / 1000.0));
  PwsResult pwsResult=pwPair.getPwsResult();
  setText(view,R.id.metadata_debug_rank,getString(R.string.metadata_debug_rank_prefix) + new DecimalFormat(""String_Node_Str"").format(0));
  setText(view,R.id.metadata_debug_pws_trip_time,getString(R.string.metadata_debug_pws_trip_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getPwsTripTimeMillis(pwsResult) / 1000.0));
  setText(view,R.id.metadata_debug_groupid,getString(R.string.metadata_debug_groupid_prefix) + Utils.getGroupId(pwsResult));
}","private void updateDebugView(PwPair pwPair,View view){
  UrlDevice urlDevice=pwPair.getUrlDevice();
  if (Utils.isBleUrlDevice(urlDevice)) {
    setText(view,R.id.ranging_debug_tx_power,getString(R.string.ranging_debug_tx_power_prefix) + Utils.getTxPower(urlDevice));
    setText(view,R.id.ranging_debug_rssi,getString(R.string.ranging_debug_rssi_prefix) + Utils.getSmoothedRssi(urlDevice));
    setText(view,R.id.ranging_debug_distance,getString(R.string.ranging_debug_distance_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getDistance(urlDevice)));
    setText(view,R.id.ranging_debug_region,getString(R.string.ranging_debug_region_prefix) + Utils.getRegionString(urlDevice));
  }
 else {
    setText(view,R.id.ranging_debug_tx_power,""String_Node_Str"");
    setText(view,R.id.ranging_debug_rssi,""String_Node_Str"");
    setText(view,R.id.ranging_debug_distance,""String_Node_Str"");
    setText(view,R.id.ranging_debug_region,""String_Node_Str"");
  }
  setText(view,R.id.metadata_debug_scan_time,getString(R.string.metadata_debug_scan_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getScanTimeMillis(urlDevice) / 1000.0));
  PwsResult pwsResult=pwPair.getPwsResult();
  setText(view,R.id.metadata_debug_rank,getString(R.string.metadata_debug_rank_prefix) + new DecimalFormat(""String_Node_Str"").format(0));
  if (Utils.isResolvableDevice(urlDevice)) {
    setText(view,R.id.metadata_debug_pws_trip_time,getString(R.string.metadata_debug_pws_trip_time_prefix) + new DecimalFormat(""String_Node_Str"").format(Utils.getPwsTripTimeMillis(pwsResult) / 1000.0));
  }
  setText(view,R.id.metadata_debug_groupid,getString(R.string.metadata_debug_groupid_prefix) + Utils.getGroupId(pwsResult));
}"
26686,"private void restoreCache(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  int prefsVersion=prefs.getInt(PREFS_VERSION_KEY,0);
  long now=new Date().getTime();
  if (prefsVersion != PREFS_VERSION) {
    mScanStartTime=now;
    return;
  }
  mScanStartTime=prefs.getLong(SCAN_START_TIME_KEY,0);
  scanDelta=now - mScanStartTime;
  if (scanDelta >= SCAN_STALE_TIME_MILLIS) {
    mScanStartTime=now;
    return;
  }
  try {
    JSONObject serializedCollection=new JSONObject(prefs.getString(PW_COLLECTION_KEY,null));
    mPwCollection=PhysicalWebCollection.jsonDeserialize(serializedCollection);
    Utils.setPwsEndpoint(this,mPwCollection);
  }
 catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  PhysicalWebCollectionException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  for (  UrlDevice urlDevice : mPwCollection.getUrlDevices()) {
    if (Utils.isBleUrlDevice(urlDevice)) {
      Utils.updateRegion(urlDevice);
    }
  }
  if (scanDelta >= LOCAL_SCAN_STALE_TIME_MILLIS) {
    for (    UrlDevice urlDevice : mPwCollection.getUrlDevices()) {
      if (!Utils.isResolvableDevice(urlDevice)) {
        mPwCollection.removeUrlDevice(urlDevice);
      }
    }
  }
}","private void restoreCache(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  int prefsVersion=prefs.getInt(PREFS_VERSION_KEY,0);
  long now=new Date().getTime();
  if (prefsVersion != PREFS_VERSION) {
    mScanStartTime=now;
    return;
  }
  mScanStartTime=prefs.getLong(SCAN_START_TIME_KEY,0);
  long scanDelta=now - mScanStartTime;
  if (scanDelta >= SCAN_STALE_TIME_MILLIS) {
    mScanStartTime=now;
    return;
  }
  try {
    JSONObject serializedCollection=new JSONObject(prefs.getString(PW_COLLECTION_KEY,null));
    mPwCollection=PhysicalWebCollection.jsonDeserialize(serializedCollection);
    Utils.setPwsEndpoint(this,mPwCollection);
  }
 catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  PhysicalWebCollectionException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  for (  UrlDevice urlDevice : mPwCollection.getUrlDevices()) {
    if (Utils.isBleUrlDevice(urlDevice)) {
      Utils.updateRegion(urlDevice);
    }
  }
  if (scanDelta >= LOCAL_SCAN_STALE_TIME_MILLIS) {
    for (    UrlDevice urlDevice : mPwCollection.getUrlDevices()) {
      if (!Utils.isResolvableDevice(urlDevice)) {
        mPwCollection.removeUrlDevice(urlDevice);
      }
    }
  }
}"
26687,"@Override public void onPeersAvailable(WifiP2pDeviceList list){
  Log.d(TAG,list.toString());
  for (  WifiP2pDevice device : list.getDeviceList()) {
    Utils.WifiDirectInfo info=Utils.parseWifiDirectName(device.deviceName);
    if (info != null) {
      String name=info.title;
      int port=info.port;
      reportUrlDevice(createUrlDeviceBuilder(""String_Node_Str"" + name,device.deviceAddress + ""String_Node_Str"" + port).setWifiAddress(device.deviceAddress).setWifiPort(port).setTitle(name).setDescription(""String_Node_Str"").build());
    }
  }
}","@Override public void onPeersAvailable(WifiP2pDeviceList list){
  Log.d(TAG,list.toString());
  for (  WifiP2pDevice device : list.getDeviceList()) {
    Utils.WifiDirectInfo info=Utils.parseWifiDirectName(device.deviceName);
    if (info != null) {
      String name=info.title;
      int port=info.port;
      reportUrlDevice(createUrlDeviceBuilder(""String_Node_Str"" + name,device.deviceAddress + ""String_Node_Str"" + port).setWifiAddress(device.deviceAddress).setWifiPort(port).setTitle(name).setDescription(""String_Node_Str"").setDeviceType(Utils.WIFI_DIRECT_DEVICE_TYPE).build());
    }
  }
}"
26688,"@Override public void onServiceConnected(ComponentName className,IBinder service){
  UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
  localBinder.getServiceInstance().clearCache();
  mContext.unbindService(this);
}","@Override public void onServiceConnected(ComponentName className,IBinder service){
  UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
  localBinder.getServiceInstance().restartScan();
  mContext.unbindService(this);
}"
26689,"/** 
 * Starts scanning with UrlDeviceDisoveryService.
 * @param context The context for the service.
 */
public static void startScan(Context context){
  new ServiceConnection(){
    private Context mContext;
    @Override public void onServiceConnected(    ComponentName className,    IBinder service){
      UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
      localBinder.getServiceInstance().clearCache();
      mContext.unbindService(this);
    }
    @Override public void onServiceDisconnected(    ComponentName className){
    }
    public void connect(    Context context){
      mContext=context;
      Intent intent=new Intent(mContext,UrlDeviceDiscoveryService.class);
      mContext.startService(intent);
      mContext.bindService(intent,this,Context.BIND_AUTO_CREATE);
    }
  }
.connect(context);
}","/** 
 * Starts scanning with UrlDeviceDisoveryService.
 * @param context The context for the service.
 */
public static void startScan(Context context){
  new ServiceConnection(){
    private Context mContext;
    @Override public void onServiceConnected(    ComponentName className,    IBinder service){
      UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
      localBinder.getServiceInstance().restartScan();
      mContext.unbindService(this);
    }
    @Override public void onServiceDisconnected(    ComponentName className){
    }
    public void connect(    Context context){
      mContext=context;
      Intent intent=new Intent(mContext,UrlDeviceDiscoveryService.class);
      mContext.startService(intent);
      mContext.bindService(intent,this,Context.BIND_AUTO_CREATE);
    }
  }
.connect(context);
}"
26690,"@Override public void onUrlDeviceDiscoveryUpdate(){
  for (  PwPair pwPair : mPwCollection.getGroupedPwPairsSortedByRank()) {
    String groupId=Utils.getGroupId(pwPair.getPwsResult());
    Log.d(TAG,""String_Node_Str"" + groupId);
    if (mNearbyDeviceAdapter.containsGroupId(groupId)) {
      mNearbyDeviceAdapter.updateItem(pwPair);
    }
 else     if (!mGroupIdQueue.contains(groupId)) {
      mGroupIdQueue.add(groupId);
      if (mSecondScanComplete) {
        emptyGroupIdQueue();
      }
    }
  }
  safeNotifyChange();
}","@Override public void onUrlDeviceDiscoveryUpdate(){
  for (  PwPair pwPair : mPwCollection.getGroupedPwPairsSortedByRank()) {
    String groupId=Utils.getGroupId(pwPair.getPwsResult());
    Log.d(TAG,""String_Node_Str"" + groupId);
    if (mNearbyDeviceAdapter.containsGroupId(groupId)) {
      mNearbyDeviceAdapter.updateItem(pwPair);
    }
 else     if (!mGroupIdQueue.contains(groupId)) {
      mGroupIdQueue.add(groupId);
      if (mSecondScanComplete) {
        emptyGroupIdQueue();
      }
    }
  }
  notifyChangeOnUiThread();
}"
26691,"private void startScanningDisplay(long scanStartTime,boolean hasResults){
  Log.d(TAG,""String_Node_Str"" + scanStartTime + ""String_Node_Str""+ hasResults);
  long elapsedMillis=new Date().getTime() - scanStartTime;
  if (elapsedMillis < FIRST_SCAN_TIME_MILLIS || (elapsedMillis < SECOND_SCAN_TIME_MILLIS && !hasResults)) {
    mScanningAnimationTextView.setAlpha(1f);
    mScanningAnimationDrawable.start();
    getListView().setVisibility(View.INVISIBLE);
  }
 else {
    showListView();
  }
  mSecondScanComplete=false;
  long firstDelay=Math.max(FIRST_SCAN_TIME_MILLIS - elapsedMillis,50);
  long secondDelay=Math.max(SECOND_SCAN_TIME_MILLIS - elapsedMillis,50);
  long thirdDelay=Math.max(THIRD_SCAN_TIME_MILLIS - elapsedMillis,50);
  mHandler.postDelayed(mFirstScanTimeout,firstDelay);
  mHandler.postDelayed(mSecondScanTimeout,secondDelay);
  mHandler.postDelayed(mThirdScanTimeout,thirdDelay);
}","private void startScanningDisplay(long scanStartTime,boolean hasResults){
  Log.d(TAG,""String_Node_Str"" + scanStartTime + ""String_Node_Str""+ hasResults);
  long elapsedMillis=new Date().getTime() - scanStartTime;
  if (elapsedMillis < FIRST_SCAN_TIME_MILLIS || (elapsedMillis < SECOND_SCAN_TIME_MILLIS && !hasResults)) {
    mNearbyDeviceAdapter.clear();
    mScanningAnimationTextView.setAlpha(1f);
    mScanningAnimationDrawable.start();
  }
 else {
    mSwipeRefreshWidget.setRefreshing(false);
  }
  mSecondScanComplete=false;
  long firstDelay=Math.max(FIRST_SCAN_TIME_MILLIS - elapsedMillis,0);
  long secondDelay=Math.max(SECOND_SCAN_TIME_MILLIS - elapsedMillis,0);
  long thirdDelay=Math.max(THIRD_SCAN_TIME_MILLIS - elapsedMillis,0);
  mHandler.postDelayed(mFirstScanTimeout,firstDelay);
  mHandler.postDelayed(mSecondScanTimeout,secondDelay);
  mHandler.postDelayed(mThirdScanTimeout,thirdDelay);
}"
26692,"@Override public synchronized void onServiceConnected(ComponentName className,IBinder service){
  UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
  mDiscoveryService=localBinder.getServiceInstance();
  mDiscoveryService.addCallback(NearbyBeaconsFragment.this);
  if (!mRequestCachedUrlDevices) {
    mDiscoveryService.restartScan();
  }
  mPwCollection=mDiscoveryService.getPwCollection();
  startScanningDisplay(mDiscoveryService.getScanStartTime(),mDiscoveryService.hasResults());
}","@Override public synchronized void onServiceConnected(ComponentName className,IBinder service){
  UrlDeviceDiscoveryService.LocalBinder localBinder=(UrlDeviceDiscoveryService.LocalBinder)service;
  mDiscoveryService=localBinder.getServiceInstance();
  mDiscoveryService.addCallback(NearbyBeaconsFragment.this);
  if (!mRequestCachedUrlDevices) {
    mDiscoveryService.restartScan();
  }
  mPwCollection=mDiscoveryService.getPwCollection();
  onUrlDeviceDiscoveryUpdate();
  startScanningDisplay(mDiscoveryService.getScanStartTime(),mDiscoveryService.hasResults());
}"
26693,"private void emptyGroupIdQueue(){
  List<PwPair> pwPairs=new ArrayList<>();
  for (  String groupId : mGroupIdQueue) {
    Log.d(TAG,""String_Node_Str"" + groupId);
    pwPairs.add(Utils.getTopRankedPwPairByGroupId(mPwCollection,groupId));
  }
  Collections.sort(pwPairs,Collections.reverseOrder());
  for (  PwPair pwPair : pwPairs) {
    mNearbyDeviceAdapter.addItem(pwPair);
  }
  mGroupIdQueue.clear();
  safeNotifyChange();
}","private void emptyGroupIdQueue(){
  List<PwPair> pwPairs=new ArrayList<>();
  for (  String groupId : mGroupIdQueue) {
    Log.d(TAG,""String_Node_Str"" + groupId);
    pwPairs.add(Utils.getTopRankedPwPairByGroupId(mPwCollection,groupId));
  }
  Collections.sort(pwPairs,Collections.reverseOrder());
  for (  PwPair pwPair : pwPairs) {
    mNearbyDeviceAdapter.addItem(pwPair);
  }
  mGroupIdQueue.clear();
  notifyChangeOnUiThread();
}"
26694,"@Override public void onResume(){
  super.onResume();
  getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
  getActivity().getActionBar().setDisplayHomeAsUpEnabled(false);
  getListView().setVisibility(View.INVISIBLE);
  if (mFirstTime && !mMainActivity.isCheckingPermissions()) {
    restartScan();
  }
  mFirstTime=false;
}","@Override public void onResume(){
  super.onResume();
  getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
  getActivity().getActionBar().setDisplayHomeAsUpEnabled(false);
  if (mFirstTime && !mMainActivity.isCheckingPermissions()) {
    restartScan();
  }
  mFirstTime=false;
}"
26695,"/** 
 * Check if the given URL only uses characters from the set defined in RFC 3986 section 2 https://tools.ietf.org/html/rfc3986#section-2
 * @param url URL to check
 * @return True if the URL is RFC 3986 compliant
 */
private static boolean isAsciiUrl(String url){
  boolean isCompliant=false;
  try {
    URI uri=new URI(url);
    String urlString=uri.toASCIIString();
    isCompliant=url.equals(urlString);
  }
 catch (  URISyntaxException e) {
  }
  return isCompliant;
}","/** 
 * Check if the given URL only uses characters from the set defined in RFC 3986 section 2. https://tools.ietf.org/html/rfc3986#section-2
 * @param url URL to check
 * @return True if the URL is RFC 3986 compliant
 */
private static boolean isAsciiUrl(String url){
  boolean isCompliant=false;
  try {
    URI uri=new URI(url);
    String urlString=uri.toASCIIString();
    isCompliant=url.equals(urlString);
  }
 catch (  URISyntaxException e) {
  }
  return isCompliant;
}"
26696,"@Override public String getItem(int i){
  return mSortedDevices.get(i);
}","@Override public String getItem(int i){
  return mSortedUrls.get(i);
}"
26697,"@Override public int getCount(){
  return mSortedDevices.size();
}","@Override public int getCount(){
  return mSortedUrls.size();
}"
26698,"@SuppressLint(""String_Node_Str"") @Override public View getView(int i,View view,ViewGroup viewGroup){
  if (view == null) {
    view=getActivity().getLayoutInflater().inflate(R.layout.list_item_nearby_beacon,viewGroup,false);
  }
  TextView titleTextView=(TextView)view.findViewById(R.id.title);
  TextView urlTextView=(TextView)view.findViewById(R.id.url);
  TextView descriptionTextView=(TextView)view.findViewById(R.id.description);
  ImageView iconImageView=(ImageView)view.findViewById(R.id.icon);
  String url=getUrlForListItem(i);
  PwsClient.UrlMetadata urlMetadata=mUrlToUrlMetadata.get(url);
  if (urlMetadata != null) {
    titleTextView.setText(urlMetadata.title);
    urlTextView.setText(urlMetadata.displayUrl);
    descriptionTextView.setText(urlMetadata.description);
    iconImageView.setImageBitmap(urlMetadata.icon);
  }
 else {
    titleTextView.setText(""String_Node_Str"");
    iconImageView.setImageDrawable(null);
    urlTextView.setText(url);
    descriptionTextView.setText(R.string.metadata_loading);
  }
  if (mDebugRangingViewEnabled) {
    updateRangingDebugView(url,view);
    view.findViewById(R.id.ranging_debug_container).setVisibility(View.VISIBLE);
    view.findViewById(R.id.metadata_debug_container).setVisibility(View.VISIBLE);
    PwsClient.getInstance(getActivity()).useDevEndpoint();
  }
 else {
    view.findViewById(R.id.ranging_debug_container).setVisibility(View.GONE);
    view.findViewById(R.id.metadata_debug_container).setVisibility(View.GONE);
    PwsClient.getInstance(getActivity()).useProdEndpoint();
  }
  return view;
}","@SuppressLint(""String_Node_Str"") @Override public View getView(int i,View view,ViewGroup viewGroup){
  if (view == null) {
    view=getActivity().getLayoutInflater().inflate(R.layout.list_item_nearby_beacon,viewGroup,false);
  }
  TextView titleTextView=(TextView)view.findViewById(R.id.title);
  TextView urlTextView=(TextView)view.findViewById(R.id.url);
  TextView descriptionTextView=(TextView)view.findViewById(R.id.description);
  ImageView iconImageView=(ImageView)view.findViewById(R.id.icon);
  String url=getItem(i);
  PwsClient.UrlMetadata urlMetadata=mUrlToUrlMetadata.get(url);
  if (urlMetadata != null) {
    titleTextView.setText(urlMetadata.title);
    urlTextView.setText(urlMetadata.displayUrl);
    descriptionTextView.setText(urlMetadata.description);
    iconImageView.setImageBitmap(urlMetadata.icon);
  }
 else {
    titleTextView.setText(""String_Node_Str"");
    iconImageView.setImageDrawable(null);
    urlTextView.setText(url);
    descriptionTextView.setText(R.string.metadata_loading);
  }
  if (mDebugRangingViewEnabled) {
    updateRangingDebugView(url,view);
    view.findViewById(R.id.ranging_debug_container).setVisibility(View.VISIBLE);
    view.findViewById(R.id.metadata_debug_container).setVisibility(View.VISIBLE);
    PwsClient.getInstance(getActivity()).useDevEndpoint();
  }
 else {
    view.findViewById(R.id.ranging_debug_container).setVisibility(View.GONE);
    view.findViewById(R.id.metadata_debug_container).setVisibility(View.GONE);
    PwsClient.getInstance(getActivity()).useProdEndpoint();
  }
  return view;
}"
26699,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  if (mIsScanRunning) {
    return;
  }
  String url=mNearbyDeviceAdapter.getUrlForListItem(position);
  String urlToNavigateTo=url;
  if (mUrlToUrlMetadata.get(url) != null) {
    String siteUrl=mUrlToUrlMetadata.get(url).siteUrl;
    if (siteUrl != null) {
      urlToNavigateTo=siteUrl;
    }
  }
  openUrlInBrowser(urlToNavigateTo);
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  if (mIsScanRunning) {
    return;
  }
  String url=mNearbyDeviceAdapter.getItem(position);
  String urlToNavigateTo=url;
  if (mUrlToUrlMetadata.get(url) != null) {
    String siteUrl=mUrlToUrlMetadata.get(url).siteUrl;
    if (siteUrl != null) {
      urlToNavigateTo=siteUrl;
    }
  }
  openUrlInBrowser(urlToNavigateTo);
}"
26700,"public void clear(){
  mSortedDevices.clear();
  mUrlToDeviceAddress.clear();
  notifyDataSetChanged();
}","public void clear(){
  mSortedUrls.clear();
  mUrlToDeviceAddress.clear();
  notifyDataSetChanged();
}"
26701,"@Override public void onUrlMetadataReceived(String url,PwsClient.UrlMetadata urlMetadata){
  mUrlToUrlMetadata.put(url,urlMetadata);
  String mockAddress=generateMockBluetoothAddress(url.hashCode());
  int mockRssi=0;
  int mockTxPower=0;
  mNearbyDeviceAdapter.addItem(url,mockAddress,mockTxPower);
  mNearbyDeviceAdapter.updateItem(url,mockAddress,mockRssi,mockTxPower);
  mNearbyDeviceAdapter.sortDevices();
  mNearbyDeviceAdapter.notifyDataSetChanged();
  mSwipeRefreshWidget.setRefreshing(false);
  fadeInListView();
}","@Override public void onUrlMetadataReceived(String url,PwsClient.UrlMetadata urlMetadata){
  mUrlToUrlMetadata.put(url,urlMetadata);
  String mockAddress=generateMockBluetoothAddress(url.hashCode());
  int mockRssi=0;
  int mockTxPower=0;
  mNearbyDeviceAdapter.addItem(url,mockAddress,mockTxPower);
  mNearbyDeviceAdapter.updateItem(url,mockAddress,mockRssi,mockTxPower);
  mNearbyDeviceAdapter.sortUrls();
  mNearbyDeviceAdapter.notifyDataSetChanged();
  mSwipeRefreshWidget.setRefreshing(false);
  fadeInListView();
}"
26702,"NearbyBeaconsAdapter(){
  mUrlToDeviceAddress=new HashMap<>();
  mUrlToTxPower=new HashMap<>();
  mRegionResolver=new RegionResolver();
  mSortedDevices=new ArrayList<>();
}","NearbyBeaconsAdapter(){
  mUrlToDeviceAddress=new HashMap<>();
  mUrlToTxPower=new HashMap<>();
  mRegionResolver=new RegionResolver();
  mSortedUrls=new ArrayList<>();
}"
26703,"private void handleFoundDevice(ScanResult scanResult){
  long timeStamp=scanResult.getTimestampNanos();
  long now=TimeUnit.MILLISECONDS.toNanos(System.currentTimeMillis());
  if (now - timeStamp < TimeUnit.SECONDS.toNanos(TIMEOUT_FOR_OLD_BEACONS)) {
    UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanResult.getScanRecord().getBytes());
    if (uriBeacon != null) {
      String url=uriBeacon.getUriString();
      if (url != null && url.isEmpty()) {
        String address=scanResult.getDevice().getAddress();
        int rssi=scanResult.getRssi();
        int txPower=uriBeacon.getTxPowerLevel();
        if (!mUrlToUrlMetadata.containsKey(url)) {
          mUrlToUrlMetadata.put(url,null);
          mPublicUrls.add(url);
          mDeviceAddressToUrl.put(address,url);
          MetadataResolver.findUrlMetadata(this,UriBeaconDiscoveryService.this,url,txPower,rssi);
        }
        mRegionResolver.onUpdate(address,rssi,txPower);
      }
    }
  }
}","private void handleFoundDevice(ScanResult scanResult){
  long timeStamp=scanResult.getTimestampNanos();
  long now=TimeUnit.MILLISECONDS.toNanos(System.currentTimeMillis());
  if (now - timeStamp < TimeUnit.SECONDS.toNanos(TIMEOUT_FOR_OLD_BEACONS)) {
    UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanResult.getScanRecord().getBytes());
    if (uriBeacon != null) {
      String url=uriBeacon.getUriString();
      if (url != null && !url.isEmpty()) {
        String address=scanResult.getDevice().getAddress();
        int rssi=scanResult.getRssi();
        int txPower=uriBeacon.getTxPowerLevel();
        if (!mUrlToUrlMetadata.containsKey(url)) {
          mUrlToUrlMetadata.put(url,null);
          mPublicUrls.add(url);
          mDeviceAddressToUrl.put(address,url);
          MetadataResolver.findUrlMetadata(this,UriBeaconDiscoveryService.this,url,txPower,rssi);
        }
        mRegionResolver.onUpdate(address,rssi,txPower);
      }
    }
  }
}"
26704,"public synchronized boolean start(Integer timeout) throws IOException {
  if (mThread == null) {
    mMulticastSocket=new MulticastSocket(SSDP_PORT);
    if (timeout != null && timeout > 0) {
      mMulticastSocket.setSoTimeout(timeout);
    }
    mThread=new Thread(this);
    mThread.start();
    return true;
  }
  return false;
}","public synchronized boolean start(Integer timeout) throws IOException {
  if (mThread == null) {
    mMulticastSocket=new DatagramSocket(SSDP_PORT);
    if (timeout != null && timeout > 0) {
      mMulticastSocket.setSoTimeout(timeout);
    }
    mThread=new Thread(this);
    mThread.start();
    return true;
  }
  return false;
}"
26705,"private void handleFoundDevice(ScanResult scanResult){
  UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanResult.getScanRecord().getBytes());
  if (uriBeacon != null) {
    String address=scanResult.getDevice().getAddress();
    int rssi=scanResult.getRssi();
    int txPowerLevel=uriBeacon.getTxPowerLevel();
    String url=uriBeacon.getUriString();
    if (!mUrlToUrlMetadata.containsKey(url)) {
      mUrlToUrlMetadata.put(url,null);
      mDeviceAddressToUrl.put(address,url);
      MetadataResolver.findUrlMetadata(this,UriBeaconDiscoveryService.this,url);
    }
    mRegionResolver.onUpdate(address,rssi,txPowerLevel);
  }
}","private void handleFoundDevice(ScanResult scanResult){
  long timeStamp=scanResult.getTimestampNanos();
  long now=TimeUnit.MILLISECONDS.toNanos(System.currentTimeMillis());
  if (now - timeStamp < TimeUnit.SECONDS.toNanos(2)) {
    UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanResult.getScanRecord().getBytes());
    if (uriBeacon != null) {
      String address=scanResult.getDevice().getAddress();
      int rssi=scanResult.getRssi();
      int txPowerLevel=uriBeacon.getTxPowerLevel();
      String url=uriBeacon.getUriString();
      if (!mUrlToUrlMetadata.containsKey(url)) {
        mUrlToUrlMetadata.put(url,null);
        mDeviceAddressToUrl.put(address,url);
        MetadataResolver.findUrlMetadata(this,UriBeaconDiscoveryService.this,url);
      }
      mRegionResolver.onUpdate(address,rssi,txPowerLevel);
    }
  }
}"
26706,"@Override public void onDestroy(){
  Log.d(TAG,""String_Node_Str"");
  stopSearchingForUriBeacons();
  mMdnsUrlDiscoverer.stopScanning();
  unregisterReceiver(mScreenStateBroadcastReceiver);
  mUrlToUrlMetadata=new HashMap<>();
  cancelNotifications();
}","@Override public void onDestroy(){
  Log.d(TAG,""String_Node_Str"");
  stopSearchingForUriBeacons();
  mMdnsUrlDiscoverer.stopScanning();
  unregisterReceiver(mScreenStateBroadcastReceiver);
  mUrlToUrlMetadata=new HashMap<>();
  mNotificationManager.cancelAll();
}"
26707,"/** 
 * Create a new set of notifications or update those existing
 */
private void updateNotifications(){
  mSortedDevices=new ArrayList<>(mDeviceAddressToUrl.keySet());
  Collections.sort(mSortedDevices,mComparator);
  if (mSortedDevices.size() == 0) {
    cancelNotifications();
    return;
  }
  if (mSortedDevices.size() > 0) {
    updateNearbyBeaconNotification(mDeviceAddressToUrl.get(mSortedDevices.get(0)),NEAREST_BEACON_NOTIFICATION_ID);
  }
  if (mSortedDevices.size() > 1) {
    updateNearbyBeaconNotification(mDeviceAddressToUrl.get(mSortedDevices.get(1)),SECOND_NEAREST_BEACON_NOTIFICATION_ID);
    updateSummaryNotification();
  }
}","/** 
 * Create a new set of notifications or update those existing
 */
private void updateNotifications(){
  mSortedDevices=new ArrayList<>(mDeviceAddressToUrl.keySet());
  Collections.sort(mSortedDevices,mComparator);
  if (mSortedDevices.size() == 0) {
    mNotificationManager.cancelAll();
    return;
  }
  if (mSortedDevices.size() > 0) {
    updateNearbyBeaconNotification(mDeviceAddressToUrl.get(mSortedDevices.get(0)),NEAREST_BEACON_NOTIFICATION_ID);
  }
  if (mSortedDevices.size() > 1) {
    updateNearbyBeaconNotification(mDeviceAddressToUrl.get(mSortedDevices.get(1)),SECOND_NEAREST_BEACON_NOTIFICATION_ID);
    updateSummaryNotification();
  }
}"
26708,"@Override public void onReceive(Context context,Intent intent){
  boolean isScreenOn=Intent.ACTION_SCREEN_ON.equals(intent.getAction());
  if (isScreenOn) {
    startSearchingForUriBeacons();
    mMdnsUrlDiscoverer.startScanning();
  }
 else {
    stopSearchingForUriBeacons();
    mMdnsUrlDiscoverer.stopScanning();
  }
}","@Override public void onReceive(Context context,Intent intent){
  boolean isScreenOn=Intent.ACTION_SCREEN_ON.equals(intent.getAction());
  if (isScreenOn) {
    startSearchingForUriBeacons();
    mMdnsUrlDiscoverer.startScanning();
  }
 else {
    initializeCleanVariables();
    mNotificationManager.cancelAll();
    stopSearchingForUriBeacons();
    mMdnsUrlDiscoverer.stopScanning();
  }
}"
26709,"private void initialize(){
  mRegionResolver=new RegionResolver();
  mNotificationManager=NotificationManagerCompat.from(this);
  mUrlToUrlMetadata=new HashMap<>();
  mSortedDevices=null;
  mDeviceAddressToUrl=new HashMap<>();
  mMdnsUrlDiscoverer=new MdnsUrlDiscoverer(this,UriBeaconDiscoveryService.this);
  initializeScreenStateBroadcastReceiver();
}","private void initialize(){
  mNotificationManager=NotificationManagerCompat.from(this);
  mMdnsUrlDiscoverer=new MdnsUrlDiscoverer(this,UriBeaconDiscoveryService.this);
  initializeCleanVariables();
  initializeScreenStateBroadcastReceiver();
}"
26710,"/** 
 * Called when the user presses the keyboard ""DONE"" key
 */
private void onEditorAction_nearestConfigurableBeaconUrlEditTextDoneKeyPressed(){
  hideSoftKeyboard();
  String url=mEditCardUrl.getText().toString();
  BeaconConfigHelper.writeBeaconUrl(getActivity(),this,mNearestDevice,url);
}","/** 
 * Called when the user presses the keyboard ""DONE"" key
 */
private void onEditorAction_nearestConfigurableBeaconUrlEditTextDoneKeyPressed(){
  hideSoftKeyboard();
  String url=mEditCardUrl.getText().toString();
  try {
    byte[] scanRecord=BeaconHelper.createAdvertisingPacket(url);
    mBeaconConfig.writeUriBeacon(scanRecord);
  }
 catch (  URISyntaxException e) {
  }
}"
26711,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mRegionResolver=new RegionResolver();
  setHasOptionsMenu(true);
  getActivity().getActionBar().setDisplayHomeAsUpEnabled(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mRegionResolver=new RegionResolver();
  mBeaconConfig=new BeaconConfigHelper(getActivity(),this);
  setHasOptionsMenu(true);
  getActivity().getActionBar().setDisplayHomeAsUpEnabled(true);
}"
26712,"private void handleFoundDevice(final ScanResult scanResult){
  final String address=scanResult.getDevice().getAddress();
  int rxPower=scanResult.getRssi();
  Log.i(TAG,String.format(""String_Node_Str"",address,rxPower));
  mRegionResolver.onUpdate(address,rxPower,TX_POWER_DEFAULT);
  final String nearestAddress=mRegionResolver.getNearestAddress();
  if (address.equals(nearestAddress)) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        mNearestDevice=scanResult.getDevice();
        stopSearchingForDevices();
        mScanningImageView.setVisibility(View.INVISIBLE);
        mStatusTextView.setText(getString(R.string.config_found_beacon_text));
        mConfigurableBeaconAddressTextView.setText(nearestAddress);
        final Context context=BeaconConfigFragment.this.getActivity();
        BeaconConfigHelper.readBeaconUrl(context,BeaconConfigFragment.this,mNearestDevice);
      }
    }
);
  }
 else {
    Log.d(TAG,""String_Node_Str"" + address);
  }
}","private void handleFoundDevice(final ScanResult scanResult){
  final String address=scanResult.getDevice().getAddress();
  int rxPower=scanResult.getRssi();
  Log.i(TAG,String.format(""String_Node_Str"",address,rxPower));
  mRegionResolver.onUpdate(address,rxPower,TX_POWER_DEFAULT);
  final String nearestAddress=mRegionResolver.getNearestAddress();
  if (address.equals(nearestAddress)) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        mNearestDevice=scanResult.getDevice();
        stopSearchingForDevices();
        mScanningImageView.setVisibility(View.INVISIBLE);
        mStatusTextView.setText(getString(R.string.config_found_beacon_text));
        mConfigurableBeaconAddressTextView.setText(nearestAddress);
        final Context context=BeaconConfigFragment.this.getActivity();
        mBeaconConfig.connectUriBeacon(mNearestDevice);
      }
    }
);
  }
 else {
    Log.d(TAG,""String_Node_Str"" + address);
  }
}"
26713,"@Override public void onPause(){
  super.onPause();
  mScanningAnimationDrawable.stop();
  stopSearchingForDevices();
}","@Override public void onPause(){
  super.onPause();
  mScanningAnimationDrawable.stop();
  stopSearchingForDevices();
  mBeaconConfig.closeUriBeacon();
}"
26714,"@Override public void run(){
  mNearestDevice=scanResult.getDevice();
  stopSearchingForDevices();
  mScanningImageView.setVisibility(View.INVISIBLE);
  mStatusTextView.setText(getString(R.string.config_found_beacon_text));
  mConfigurableBeaconAddressTextView.setText(nearestAddress);
  final Context context=BeaconConfigFragment.this.getActivity();
  BeaconConfigHelper.readBeaconUrl(context,BeaconConfigFragment.this,mNearestDevice);
}","@Override public void run(){
  getFragmentManager().popBackStack();
  int msgId=(status == BluetoothGatt.GATT_SUCCESS) ? R.string.config_url_saved : R.string.config_url_error;
  Toast.makeText(getActivity(),getString(msgId),Toast.LENGTH_SHORT).show();
}"
26715,"/** 
 * This is the class that listens for when the user taps the write-to-beacon button.
 */
public void onWriteToBeaconButtonClick(View view){
  mStatusTextView.setText(getString(R.string.config_writing_to_beacon_text));
  mEditCard.clearFocus();
  String url=mEditCardUrl.getText().toString();
  BeaconConfigHelper.writeBeaconUrl(getActivity(),BeaconConfigFragment.this,mNearestDevice,url);
}","/** 
 * This is the class that listens for when the user taps the write-to-beacon button.
 */
public void onWriteToBeaconButtonClick(View view){
  mStatusTextView.setText(getString(R.string.config_writing_to_beacon_text));
  mEditCard.clearFocus();
  String url=mEditCardUrl.getText().toString();
  try {
    byte[] scanRecord=BeaconHelper.createAdvertisingPacket(url);
    mBeaconConfig.writeUriBeacon(scanRecord);
  }
 catch (  URISyntaxException e) {
  }
}"
26716,"@Override public void onResume(){
  super.onResume();
  if (!mIsDemoMode) {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
    startScanning();
  }
 else {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons_demo);
  }
}","@Override public void onResume(){
  super.onResume();
  if (!mIsDemoMode) {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
    getActivity().getActionBar().setDisplayHomeAsUpEnabled(false);
    startScanning();
  }
 else {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons_demo);
  }
}"
26717,"@Override public void onResume(){
  super.onResume();
  if (!mIsDemoMode) {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
    startScanning();
  }
 else {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons_demo);
  }
}","@Override public void onResume(){
  super.onResume();
  if (!mIsDemoMode) {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons);
    getActivity().getActionBar().setDisplayHomeAsUpEnabled(false);
    startScanning();
  }
 else {
    getActivity().getActionBar().setTitle(R.string.title_nearby_beacons_demo);
  }
}"
26718,"/** 
 * Called when the user presses the keyboard ""DONE"" key
 * @throws IOException
 */
private void onEditorAction_nearestConfigurableBeaconUrlEditTextDoneKeyPressed(){
  hideSoftKeyboard();
  String url=mConfigurableBeaconUrlEditText.getText().toString();
  BeaconConfigHelper.writeBeaconUrl(getActivity(),this,mFoundConfigurableBeaconBluetoothDevice,url);
}","/** 
 * Called when the user presses the keyboard ""DONE"" key
 */
private void onEditorAction_nearestConfigurableBeaconUrlEditTextDoneKeyPressed(){
  hideSoftKeyboard();
  String url=mConfigurableBeaconUrlEditText.getText().toString();
  BeaconConfigHelper.writeBeaconUrl(getActivity(),this,mFoundConfigurableBeaconBluetoothDevice,url);
}"
26719,"/** 
 * Find the url that is encoded into the scan record, but also expand a short url and ensure an http prefix exists.
 * @param scanRecord
 * @return
 */
public static String createUrlFromScanRecord(byte[] scanRecord){
  String url=null;
  UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanRecord);
  if (uriBeacon != null) {
    url=uriBeacon.getUriString();
  }
  if (url != null) {
    if (UrlShortener.isShortUrl(url)) {
      url=UrlShortener.lengthenShortUrl(url);
    }
  }
  return url;
}","/** 
 * Find the url that is encoded into the scan record, but also expand a short url and ensure an http prefix exists.
 * @param scanRecord encoded url
 * @return The url that was encoded the scan record.
 */
public static String createUrlFromScanRecord(byte[] scanRecord){
  String url=null;
  UriBeacon uriBeacon=UriBeacon.parseFromBytes(scanRecord);
  if (uriBeacon != null) {
    url=uriBeacon.getUriString();
  }
  if (url != null) {
    if (UrlShortener.isShortUrl(url)) {
      url=UrlShortener.lengthenShortUrl(url);
    }
  }
  return url;
}"
26720,"/** 
 * Run actions given that the read operation of part 1 of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic
 */
private static void handleGattCharacteristicRead_beaconDataPart1(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  mAdvertisingPacketData_read=bluetoothGattCharacteristic.getValue();
  readCharacteristic_beaconDataLength();
}","/** 
 * Run actions given that the read operation of part 1 of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic Data Part 1 characteristic that was read from the associated remote device.
 */
private static void handleGattCharacteristicRead_beaconDataPart1(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  mAdvertisingPacketData_read=bluetoothGattCharacteristic.getValue();
  readCharacteristic_beaconDataLength();
}"
26721,"/** 
 * Run actions given that the read operation of part 1 of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic
 */
private static void handleGattCharacteristicRead_beaconDataPart2(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  byte[] data_part2=bluetoothGattCharacteristic.getValue();
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    outputStream.write(mAdvertisingPacketData_read);
    outputStream.write(data_part2);
    mAdvertisingPacketData_read=outputStream.toByteArray();
    onReadComplete_beaconData();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Run actions given that the read operation of part 1 of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic Data part 2 characteristic that was read from the associated remote device.
 */
private static void handleGattCharacteristicRead_beaconDataPart2(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  byte[] data_part2=bluetoothGattCharacteristic.getValue();
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    outputStream.write(mAdvertisingPacketData_read);
    outputStream.write(data_part2);
    mAdvertisingPacketData_read=outputStream.toByteArray();
    onReadComplete_beaconData();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
26722,"/** 
 * Write the given url to the currently-being-configured beacon. This involves constructing the adverstising packet that contains the url and then pushing that packet to the beacon via GATT.
 * @param url
 */
public static void writeBeaconUrl(Context context,BeaconConfigCallback beaconConfigCallback,BluetoothDevice beaconBluetoothDevice,String url){
  Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + url);
  Log.d(TAG,""String_Node_Str"" + mBeaconBluetoothGattService);
  beginWritingBeaconAdvertisingPacket(url);
}","/** 
 * Write the given url to the currently-being-configured beacon. This involves constructing the adverstising packet that contains the url and then pushing that packet to the beacon via GATT.
 * @param url URL to write to the beacon
 */
public static void writeBeaconUrl(Context context,BeaconConfigCallback beaconConfigCallback,BluetoothDevice beaconBluetoothDevice,String url){
  Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + url);
  Log.d(TAG,""String_Node_Str"" + mBeaconBluetoothGattService);
  beginWritingBeaconAdvertisingPacket(url);
}"
26723,"/** 
 * Start the process of writing an advertising packet that contains the given url to the currently-being-configured beacon.
 * @param url
 */
private static void beginWritingBeaconAdvertisingPacket(String url){
  try {
    mAdvertisingPacketData_write=BeaconHelper.createAdvertisingPacket(url);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  byte[] data_toWrite;
  if (mAdvertisingPacketData_write.length <= MAX_NUM_BYTES_DATA_PART_1) {
    data_toWrite=mAdvertisingPacketData_write;
  }
 else {
    data_toWrite=Arrays.copyOfRange(mAdvertisingPacketData_write,0,MAX_NUM_BYTES_DATA_PART_1);
  }
  writeCharacteristic_beaconDataPart1(data_toWrite);
}","/** 
 * Start the process of writing an advertising packet that contains the given url to the currently-being-configured beacon.
 * @param url URL to write to the beacon
 */
private static void beginWritingBeaconAdvertisingPacket(String url){
  try {
    mAdvertisingPacketData_write=BeaconHelper.createAdvertisingPacket(url);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  byte[] data_toWrite;
  if (mAdvertisingPacketData_write.length <= MAX_NUM_BYTES_DATA_PART_1) {
    data_toWrite=mAdvertisingPacketData_write;
  }
 else {
    data_toWrite=Arrays.copyOfRange(mAdvertisingPacketData_write,0,MAX_NUM_BYTES_DATA_PART_1);
  }
  writeCharacteristic_beaconDataPart1(data_toWrite);
}"
26724,"/** 
 * Called when the operation to read a beacon's GATT service has completed.
 * @param bluetoothGattCharacteristic
 */
private static void onNearbyBeaconsGattCharacteristicRead(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_1)) {
    handleGattCharacteristicRead_beaconDataPart1(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_LENGTH)) {
    handleGattCharacteristicRead_beaconDataLength(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_2)) {
    handleGattCharacteristicRead_beaconDataPart2(bluetoothGattCharacteristic);
  }
}","/** 
 * Called when the operation to read a beacon's GATT service has completed.
 * @param bluetoothGattCharacteristic Characteristic that was read from the associated remote device.
 */
private static void onNearbyBeaconsGattCharacteristicRead(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_1)) {
    handleGattCharacteristicRead_beaconDataPart1(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_LENGTH)) {
    handleGattCharacteristicRead_beaconDataLength(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_2)) {
    handleGattCharacteristicRead_beaconDataPart2(bluetoothGattCharacteristic);
  }
}"
26725,"/** 
 * Write the given data to the beacon's advertising packet. This only writes part 2 which is up to 8 bytes of the packet data and is appended to the data from part 1.
 * @param data
 */
private static void writeCharacteristic_beaconDataPart2(byte[] data){
  BluetoothGattCharacteristic characteristic_beaconDataPart2=mBeaconBluetoothGattService.getCharacteristic(UUID_BEACON_DATA_PART_2);
  characteristic_beaconDataPart2.setValue(data);
  mBluetoothGatt.writeCharacteristic(characteristic_beaconDataPart2);
}","/** 
 * Write the given data to the beacon's advertising packet. This only writes part 2 which is up to 8 bytes of the packet data and is appended to the data from part 1.
 * @param data Second part of the data to write to the beacon; up to 8 bytes.
 */
private static void writeCharacteristic_beaconDataPart2(byte[] data){
  BluetoothGattCharacteristic characteristic_beaconDataPart2=mBeaconBluetoothGattService.getCharacteristic(UUID_BEACON_DATA_PART_2);
  characteristic_beaconDataPart2.setValue(data);
  mBluetoothGatt.writeCharacteristic(characteristic_beaconDataPart2);
}"
26726,"/** 
 * Run actions given that the read operation of the length of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic
 */
private static void handleGattCharacteristicRead_beaconDataLength(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  int dataLength=(int)bluetoothGattCharacteristic.getValue()[0];
  if (dataLength > MAX_NUM_BYTES_DATA_PART_1) {
    readCharacteristic_beaconDataPart2();
  }
 else {
    onReadComplete_beaconData();
  }
}","/** 
 * Run actions given that the read operation of the length of the beacon's advertising packet has completed.
 * @param bluetoothGattCharacteristic Length characteristic that was read from the associated remote device.
 */
private static void handleGattCharacteristicRead_beaconDataLength(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  int dataLength=(int)bluetoothGattCharacteristic.getValue()[0];
  if (dataLength > MAX_NUM_BYTES_DATA_PART_1) {
    readCharacteristic_beaconDataPart2();
  }
 else {
    onReadComplete_beaconData();
  }
}"
26727,"/** 
 * Run actions given that the data was successfully written to part 1 of the beacon advertising packet.
 * @param bluetoothGattCharacteristic
 */
private static void handleGattCharacteristicWrite_beaconDataPart1(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (mAdvertisingPacketData_write.length <= MAX_NUM_BYTES_DATA_PART_1) {
    onWriteComplete_beaconData();
  }
 else {
    byte[] data_toWrite=Arrays.copyOfRange(mAdvertisingPacketData_write,MAX_NUM_BYTES_DATA_PART_1,mAdvertisingPacketData_write.length);
    writeCharacteristic_beaconDataPart2(data_toWrite);
  }
}","/** 
 * Run actions given that the data was successfully written to part 1 of the beacon advertising packet.
 * @param bluetoothGattCharacteristic Data part 1 characteristic that was written to the associated remote device.
 */
private static void handleGattCharacteristicWrite_beaconDataPart1(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (mAdvertisingPacketData_write.length <= MAX_NUM_BYTES_DATA_PART_1) {
    onWriteComplete_beaconData();
  }
 else {
    byte[] data_toWrite=Arrays.copyOfRange(mAdvertisingPacketData_write,MAX_NUM_BYTES_DATA_PART_1,mAdvertisingPacketData_write.length);
    writeCharacteristic_beaconDataPart2(data_toWrite);
  }
}"
26728,"/** 
 * Run actions given that the data was successfully written to part 2 of the beacon advertising packet.
 * @param bluetoothGattCharacteristic
 */
private static void handleGattCharacteristicWrite_beaconDataPart2(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  onWriteComplete_beaconData();
}","/** 
 * Run actions given that the data was successfully written to part 2 of the beacon advertising packet.
 * @param bluetoothGattCharacteristic Data part 2 characteristic that was written to the associated remote device.
 */
private static void handleGattCharacteristicWrite_beaconDataPart2(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  onWriteComplete_beaconData();
}"
26729,"/** 
 * Called when a characteristic write operation has occurred
 * @param gatt
 * @param characteristic
 * @param status
 */
@Override public void onCharacteristicWrite(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic,int status){
  if (status == BluetoothGatt.GATT_SUCCESS) {
    onNearbyBeaconsGattCharacteristicWrite(characteristic);
  }
}","/** 
 * Called when a characteristic write operation has occurred
 * @param gatt GATT client that called writeCharacteristic
 * @param characteristic Characteristic that was written to the associated remote device.
 * @param status The result of the write operation GATT_SUCCESS if the operation succeeds.
 */
@Override public void onCharacteristicWrite(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic,int status){
  if (status == BluetoothGatt.GATT_SUCCESS) {
    onNearbyBeaconsGattCharacteristicWrite(characteristic);
  }
}"
26730,"/** 
 * Write the given data to the beacon's advertising packet. This only writes part 1 which is up to 20 bytes of the packet data.
 * @param data
 */
private static void writeCharacteristic_beaconDataPart1(byte[] data){
  BluetoothGattCharacteristic characteristic_beaconDataPart1=mBeaconBluetoothGattService.getCharacteristic(UUID_BEACON_DATA_PART_1);
  characteristic_beaconDataPart1.setValue(data);
  mBluetoothGatt.writeCharacteristic(characteristic_beaconDataPart1);
}","/** 
 * Write the given data to the beacon's advertising packet. This only writes part 1 which is up to 20 bytes of the packet data.
 * @param data First part of the data to write to the beacon; up to 20 bytes
 */
private static void writeCharacteristic_beaconDataPart1(byte[] data){
  BluetoothGattCharacteristic characteristic_beaconDataPart1=mBeaconBluetoothGattService.getCharacteristic(UUID_BEACON_DATA_PART_1);
  characteristic_beaconDataPart1.setValue(data);
  mBluetoothGatt.writeCharacteristic(characteristic_beaconDataPart1);
}"
26731,"/** 
 * Called when the operation to write to a beacon's GATT service has completed.
 * @param bluetoothGattCharacteristic
 */
private static void onNearbyBeaconsGattCharacteristicWrite(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_1)) {
    handleGattCharacteristicWrite_beaconDataPart1(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_2)) {
    handleGattCharacteristicWrite_beaconDataPart2(bluetoothGattCharacteristic);
  }
}","/** 
 * Called when the operation to write to a beacon's GATT service has completed.
 * @param bluetoothGattCharacteristic Characteristic that was written to the associated remote device.
 */
private static void onNearbyBeaconsGattCharacteristicWrite(BluetoothGattCharacteristic bluetoothGattCharacteristic){
  if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_1)) {
    handleGattCharacteristicWrite_beaconDataPart1(bluetoothGattCharacteristic);
  }
 else   if (bluetoothGattCharacteristic.getUuid().equals(UUID_BEACON_DATA_PART_2)) {
    handleGattCharacteristicWrite_beaconDataPart2(bluetoothGattCharacteristic);
  }
}"
26732,"/** 
 * Connect to the nearby beacon's GATT service.
 * @param context
 * @param beaconBluetoothDevice
 */
private static void connectToNearbyBeacon(Context context,BluetoothDevice beaconBluetoothDevice){
  mBluetoothGatt=beaconBluetoothDevice.connectGatt(context,true,mBluetoothGattCallback);
}","/** 
 * Connect to the nearby beacon's GATT service.
 * @param context
 * @param beaconBluetoothDevice Device hosting the GATT Server
 */
private static void connectToNearbyBeacon(Context context,BluetoothDevice beaconBluetoothDevice){
  mBluetoothGatt=beaconBluetoothDevice.connectGatt(context,true,mBluetoothGattCallback);
}"
26733,"/** 
 * Create a beacon advertising packet that will contain the given url.
 * @param url
 * @return
 * @throws IOException
 */
public static byte[] createAdvertisingPacket(String url) throws IOException {
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  byte[] url_bytes=createUrlBytes(url);
  byte length=(byte)(URI_SERVICE_DATA_HEADER.length + url_bytes.length);
  outputStream.write(ADVERTISING_PACKET_HEADER);
  outputStream.write(length);
  outputStream.write(URI_SERVICE_DATA_HEADER);
  outputStream.write(url_bytes);
  return outputStream.toByteArray();
}","/** 
 * Create a beacon advertising packet that will contain the given url.
 * @param url Url to write to the beacon
 * @return the encoded url
 * @throws IOException
 */
public static byte[] createAdvertisingPacket(String url) throws IOException {
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  byte[] url_bytes=createUrlBytes(url);
  byte length=(byte)(URI_SERVICE_DATA_HEADER.length + url_bytes.length);
  outputStream.write(ADVERTISING_PACKET_HEADER);
  outputStream.write(length);
  outputStream.write(URI_SERVICE_DATA_HEADER);
  outputStream.write(url_bytes);
  return outputStream.toByteArray();
}"
26734,"/** 
 * Create the byte array that represents the given url. This process first compresses the url using the expansion codes. Then if the url is still too long, we shorten it with a url shortener. Then we compress that url using the expansion codes again.
 * @param url
 * @return
 * @throws IOException
 */
public static byte[] createUrlBytes(String url) throws IOException {
  byte[] url_bytes;
  url_bytes=compressUrlUsingExpansionCodes(url);
  if (url_bytes.length > MAX_NUM_BYTES_URL) {
    String url_shortened=UrlShortener.shortenUrl(url);
    url_bytes=compressUrlUsingExpansionCodes(url_shortened);
  }
  return url_bytes;
}","/** 
 * Create the byte array that represents the given url. This process first compresses the url using the expansion codes. Then if the url is still too long, we shorten it with a url shortener. Then we compress that url using the expansion codes again.
 * @param url URL to encode
 * @return encoded URL
 * @throws IOException
 */
public static byte[] createUrlBytes(String url) throws IOException {
  byte[] url_bytes;
  url_bytes=compressUrlUsingExpansionCodes(url);
  if (url_bytes.length > MAX_NUM_BYTES_URL) {
    String url_shortened=UrlShortener.shortenUrl(url);
    url_bytes=compressUrlUsingExpansionCodes(url_shortened);
  }
  return url_bytes;
}"
26735,"/** 
 * Compress the given url by looking for a hardcoded set of substrings (e.g. http://, .edu, etc.) and replacing them with an associated integer.
 * @param url
 * @return
 * @throws IOException
 */
private static byte[] compressUrlUsingExpansionCodes(String url) throws IOException {
  String splitChar=""String_Node_Str"";
  String codeIndicatorChar=""String_Node_Str"";
  for (int i=0; i < EXPANSION_CODES_TO_TEXT_MAP.length; i++) {
    String text=EXPANSION_CODES_TO_TEXT_MAP[i];
    if (url.contains(text)) {
      String replacementText=splitChar + codeIndicatorChar + String.valueOf(i)+ splitChar;
      url=url.replace(text,replacementText);
    }
  }
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  String[] url_split=url.split(splitChar);
  for (  String subString : url_split) {
    if (subString.contains(codeIndicatorChar)) {
      int code=Integer.valueOf(subString.replace(codeIndicatorChar,""String_Node_Str""));
      outputStream.write((byte)code);
    }
 else {
      outputStream.write(subString.getBytes());
    }
  }
  byte[] url_bytes=outputStream.toByteArray();
  return url_bytes;
}","/** 
 * Compress the given url by looking for a hardcoded set of substrings (e.g. http://, .edu, etc.) and replacing them with an associated integer.
 * @param url URL to compress
 * @return Compressed URL
 * @throws IOException
 */
private static byte[] compressUrlUsingExpansionCodes(String url) throws IOException {
  String splitChar=""String_Node_Str"";
  String codeIndicatorChar=""String_Node_Str"";
  for (int i=0; i < EXPANSION_CODES_TO_TEXT_MAP.length; i++) {
    String text=EXPANSION_CODES_TO_TEXT_MAP[i];
    if (url.contains(text)) {
      String replacementText=splitChar + codeIndicatorChar + String.valueOf(i)+ splitChar;
      url=url.replace(text,replacementText);
    }
  }
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  String[] url_split=url.split(splitChar);
  for (  String subString : url_split) {
    if (subString.contains(codeIndicatorChar)) {
      int code=Integer.valueOf(subString.replace(codeIndicatorChar,""String_Node_Str""));
      outputStream.write((byte)code);
    }
 else {
      outputStream.write(subString.getBytes());
    }
  }
  byte[] url_bytes=outputStream.toByteArray();
  return url_bytes;
}"
26736,"@Override public void onDestroy(){
  unregisterReceiver(mScreenStateBroadcastReceiver);
  stopSearchingForDevices();
}","@Override public void onDestroy(){
  stopSearchingForDevices();
  unregisterReceiver(mScreenStateBroadcastReceiver);
}"
26737,"private void showNearbyBeaconsFragment(){
  getFragmentManager().beginTransaction().add(R.id.homeScreen_container,NearbyDevicesFragment.newInstance()).commit();
}","private void showNearbyBeaconsFragment(){
  getFragmentManager().beginTransaction().add(R.id.main_activity_container,NearbyDevicesFragment.newInstance()).commit();
}"
26738,"public void setAnimationsTarget(View view){
  mCollapseAlpha.setTarget(view);
  mCollapseDir.setTarget(view);
  mExpandAlpha.setTarget(view);
  mExpandDir.setTarget(view);
}","public void setAnimationsTarget(View view){
  mCollapseAlpha.setTarget(view);
  mCollapseDir.setTarget(view);
  mExpandAlpha.setTarget(view);
  mExpandDir.setTarget(view);
  mCollapseAnimation.play(mCollapseAlpha);
  mCollapseAnimation.play(mCollapseDir);
  mExpandAnimation.play(mExpandAlpha);
  mExpandAnimation.play(mExpandDir);
}"
26739,"public LayoutParams(ViewGroup.LayoutParams source){
  super(source);
  mExpandDir.setInterpolator(sExpandInterpolator);
  mExpandAlpha.setInterpolator(sAlphaExpandInterpolator);
  mCollapseDir.setInterpolator(sCollapseInterpolator);
  mCollapseAlpha.setInterpolator(sCollapseInterpolator);
  mCollapseAlpha.setProperty(View.ALPHA);
  mCollapseAlpha.setFloatValues(1f,0f);
  mExpandAlpha.setProperty(View.ALPHA);
  mExpandAlpha.setFloatValues(0f,1f);
switch (mExpandDirection) {
case EXPAND_UP:
case EXPAND_DOWN:
    mCollapseDir.setProperty(View.TRANSLATION_Y);
  mExpandDir.setProperty(View.TRANSLATION_Y);
break;
case EXPAND_LEFT:
case EXPAND_RIGHT:
mCollapseDir.setProperty(View.TRANSLATION_X);
mExpandDir.setProperty(View.TRANSLATION_X);
break;
}
mExpandAnimation.play(mExpandAlpha);
mExpandAnimation.play(mExpandDir);
mCollapseAnimation.play(mCollapseAlpha);
mCollapseAnimation.play(mCollapseDir);
}","public LayoutParams(ViewGroup.LayoutParams source){
  super(source);
  mExpandDir.setInterpolator(sExpandInterpolator);
  mExpandAlpha.setInterpolator(sAlphaExpandInterpolator);
  mCollapseDir.setInterpolator(sCollapseInterpolator);
  mCollapseAlpha.setInterpolator(sCollapseInterpolator);
  mCollapseAlpha.setProperty(View.ALPHA);
  mCollapseAlpha.setFloatValues(1f,0f);
  mExpandAlpha.setProperty(View.ALPHA);
  mExpandAlpha.setFloatValues(0f,1f);
switch (mExpandDirection) {
case EXPAND_UP:
case EXPAND_DOWN:
    mCollapseDir.setProperty(View.TRANSLATION_Y);
  mExpandDir.setProperty(View.TRANSLATION_Y);
break;
case EXPAND_LEFT:
case EXPAND_RIGHT:
mCollapseDir.setProperty(View.TRANSLATION_X);
mExpandDir.setProperty(View.TRANSLATION_X);
break;
}
}"
26740,"public void setIconDrawable(@NonNull Drawable iconDrawable){
  if (mIconDrawable != iconDrawable) {
    mIcon=0;
    updateIconDrawable(iconDrawable);
  }
}","public void setIconDrawable(@NonNull Drawable iconDrawable){
  if (mIconDrawable != iconDrawable) {
    mIcon=0;
    mIconDrawable=iconDrawable;
    updateBackground();
  }
}"
26741,"public void setIcon(@DrawableRes int icon){
  if (mIcon != icon) {
    mIcon=icon;
    updateIconDrawable(getResources().getDrawable(mIcon));
  }
}","public void setIcon(@DrawableRes int icon){
  if (mIcon != icon) {
    mIcon=icon;
    mIconDrawable=null;
    updateBackground();
  }
}"
26742,"Drawable getIconDrawable(){
  return mIconDrawable != null ? mIconDrawable : new ColorDrawable(Color.TRANSPARENT);
}","Drawable getIconDrawable(){
  if (mIconDrawable != null) {
    return mIconDrawable;
  }
 else   if (mIcon != 0) {
    return getResources().getDrawable(mIcon);
  }
 else {
    return new ColorDrawable(Color.TRANSPARENT);
  }
}"
26743,"/** 
 * @return the current Color for nomal state. Note it returns the color and not the resource!
 */
public int getColorNormal(){
  return mColorNormal;
}","/** 
 * @return the current Color for normal state.
 */
public int getColorNormal(){
  return mColorNormal;
}"
26744,"public void setColorPressed(@ColorRes int colorPressed){
  this.mColorPressed=getColor(colorPressed);
  updateBackground();
}","public void setColorPressed(@ColorRes int colorPressed){
  mColorPressed=getColor(colorPressed);
  updateBackground();
}"
26745,"/** 
 * @return the current color for pressed state. note that it returns the color and not the resource
 */
public int getColorPressed(){
  return mColorPressed;
}","/** 
 * @return the current color for pressed state.
 */
public int getColorPressed(){
  return mColorPressed;
}"
26746,"public void setIcon(@DrawableRes int mIcon){
  if (this.mIcon != mIcon) {
    this.mIcon=mIcon;
    updateBackground();
  }
}","public void setIcon(@DrawableRes int icon){
  if (mIcon != icon) {
    mIcon=icon;
    updateBackground();
  }
}"
26747,"public void setColorNormal(@ColorRes int colorNormal){
  this.mColorNormal=getColor(colorNormal);
  updateBackground();
}","public void setColorNormal(@ColorRes int colorNormal){
  mColorNormal=getColor(colorNormal);
  updateBackground();
}"
26748,"public void setSize(int size){
  if (this.mSize != size) {
    this.mSize=size;
    updateCircleSize();
    updateDrawableSize();
    updateBackground();
  }
}","public void setSize(int size){
  if (mSize != size) {
    mSize=size;
    updateCircleSize();
    updateDrawableSize();
    updateBackground();
  }
}"
26749,"@Override public long executeUpdateDelete(@NonNull DatabaseWrapper databaseWrapper){
  long affected=databaseWrapper.compileStatement(getQuery()).executeUpdateDelete();
  if (affected > 0) {
    NotifyDistributor.get().notifyTableChanged(getTable(),getPrimaryAction());
  }
  return affected;
}","@Override public long executeUpdateDelete(@NonNull DatabaseWrapper databaseWrapper){
  final DatabaseStatement statement=databaseWrapper.compileStatement(getQuery());
  long affected;
  try {
    affected=statement.executeUpdateDelete();
    if (affected > 0) {
      NotifyDistributor.get().notifyTableChanged(getTable(),getPrimaryAction());
    }
  }
  finally {
    statement.close();
  }
  return affected;
}"
26750,"@Override public long executeInsert(@NonNull DatabaseWrapper databaseWrapper){
  return compileStatement().executeInsert();
}","@Override public long executeInsert(@NonNull DatabaseWrapper databaseWrapper){
  DatabaseStatement statement=compileStatement(databaseWrapper);
  long rows;
  try {
    rows=statement.executeInsert();
  }
  finally {
    statement.close();
  }
  return rows;
}"
26751,"@Override public Observable<Long> executeUpdateDelete(){
  throw new IllegalStateException(""String_Node_Str"");
}","@Override public Single<Long> executeUpdateDelete(){
  throw new IllegalStateException(""String_Node_Str"");
}"
26752,"public RXRetrievalAdapter(Class<TModel> table){
  this(FlowManager.getInstanceAdapter(table));
}","RXRetrievalAdapter(Class<TModel> table){
  this(FlowManager.getInstanceAdapter(table));
}"
26753,"/** 
 * Allows adding a property to the   {@link Method}. Will remove the   {@link Property#ALL_PROPERTY}if it exists as first item.
 * @param property The property to add.
 */
public Method addProperty(@NonNull IProperty property){
  if (propertyList.size() == 1 && propertyList.get(0) == Property.ALL_PROPERTY) {
    propertyList.remove(0);
  }
  return append(property,""String_Node_Str"");
}","/** 
 * Allows adding a property to the   {@link Method}. Will remove the   {@link Property#ALL_PROPERTY}if it exists as first item.
 * @param property The property to add.
 */
public Method addProperty(@NonNull IProperty property){
  return append(property,""String_Node_Str"");
}"
26754,"/** 
 * Appends a property with the specified operation that separates it. The operation will appear before the property specified.
 */
public Method append(IProperty property,String operation){
  propertyList.add(property);
  operationsList.add(operation);
  return this;
}","/** 
 * Appends a property with the specified operation that separates it. The operation will appear before the property specified.
 */
public Method append(IProperty property,String operation){
  if (propertyList.size() == 1 && propertyList.get(0) == Property.ALL_PROPERTY) {
    propertyList.remove(0);
  }
  propertyList.add(property);
  operationsList.add(operation);
  return this;
}"
26755,"public Builder(@NonNull ModelQueriable<TModel> modelQueriable){
  this(modelQueriable.getTable());
  modelQueriable(modelQueriable);
}","public Builder(@Nullable ModelQueriable<TModel> modelQueriable){
  if (modelQueriable != null) {
    this.modelClass=modelQueriable.getTable();
  }
  modelQueriable(modelQueriable);
}"
26756,"/** 
 * Refreshes the data backing this list, and destroys the Model cache.
 */
public synchronized void refresh(){
  warnEmptyCursor();
  if (cursor != null) {
    cursor.close();
  }
  cursor=modelQueriable.query();
  if (cacheModels) {
    modelCache.clear();
    setCacheModels(true,cursor == null ? 0 : cursor.getCount());
  }
synchronized (cursorRefreshListenerSet) {
    for (    OnCursorRefreshListener<TModel> listener : cursorRefreshListenerSet) {
      listener.onCursorRefreshed(this);
    }
  }
}","/** 
 * Refreshes the data backing this list, and destroys the Model cache.
 */
public synchronized void refresh(){
  warnEmptyCursor();
  if (cursor != null) {
    cursor.close();
  }
  if (modelQueriable == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  cursor=modelQueriable.query();
  if (cacheModels) {
    modelCache.clear();
    setCacheModels(true,cursor == null ? 0 : cursor.getCount());
  }
synchronized (cursorRefreshListenerSet) {
    for (    OnCursorRefreshListener<TModel> listener : cursorRefreshListenerSet) {
      listener.onCursorRefreshed(this);
    }
  }
}"
26757,"@SuppressWarnings(""String_Node_Str"") public synchronized boolean delete(@NonNull TModel model,@NonNull DatabaseWrapper wrapper){
  modelAdapter.deleteForeignKeys(model,wrapper);
  boolean successful=SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).count(wrapper) != 0;
  if (successful) {
    SqlUtils.notifyModelChanged(model,modelAdapter,BaseModel.Action.DELETE);
  }
  modelAdapter.updateAutoIncrement(model,0);
  return successful;
}","@SuppressWarnings(""String_Node_Str"") public synchronized boolean delete(@NonNull TModel model,@NonNull DatabaseWrapper wrapper){
  modelAdapter.deleteForeignKeys(model,wrapper);
  boolean successful=SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).executeUpdateDelete(wrapper) != 0;
  if (successful) {
    SqlUtils.notifyModelChanged(model,modelAdapter,BaseModel.Action.DELETE);
  }
  modelAdapter.updateAutoIncrement(model,0);
  return successful;
}"
26758,"public void load(TModel model,DatabaseWrapper databaseWrapper){
  getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery());
}","public void load(TModel model,DatabaseWrapper databaseWrapper){
  getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery(),model);
}"
26759,"public void writeInsert(CodeBlock.Builder codeBuilder,boolean useWrapper){
  if (isSave()) {
    writeLoopWithMethod(codeBuilder,""String_Node_Str"",useWrapper && extendsBaseModel);
  }
}","public void writeInsert(CodeBlock.Builder codeBuilder,boolean useWrapper){
  if (isSave()) {
    writeLoopWithMethod(codeBuilder,""String_Node_Str"",useWrapper && extendsBaseModel || useWrapper && !extendsModel);
  }
}"
26760,"private void writeLoopWithMethod(CodeBlock.Builder codeBuilder,String methodName,boolean useWrapper){
  codeBuilder.beginControlFlow(""String_Node_Str"",getMethodName()).beginControlFlow(""String_Node_Str"",extendsBaseModel ? ClassNames.BASE_MODEL : ClassNames.MODEL,getMethodName()).addStatement(""String_Node_Str"",methodName,useWrapper ? ModelUtils.getWrapper() : ""String_Node_Str"").endControlFlow().endControlFlow();
}","private void writeLoopWithMethod(CodeBlock.Builder codeBuilder,String methodName,boolean useWrapper){
  codeBuilder.beginControlFlow(""String_Node_Str"",getMethodName());
  ClassName loopClass=null;
  if (extendsBaseModel) {
    loopClass=ClassNames.BASE_MODEL;
  }
 else {
    loopClass=ClassName.get(referencedType);
  }
  if (!extendsModel) {
    codeBuilder.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,referencedTableType),ClassNames.FLOW_MANAGER,referencedTableType);
    codeBuilder.addStatement(""String_Node_Str"",methodName,getMethodName(),useWrapper ? (""String_Node_Str"" + ModelUtils.getWrapper()) : ""String_Node_Str"");
  }
 else {
    codeBuilder.beginControlFlow(""String_Node_Str"",loopClass,getMethodName());
    codeBuilder.addStatement(""String_Node_Str"",methodName,useWrapper ? ModelUtils.getWrapper() : ""String_Node_Str"");
    codeBuilder.endControlFlow();
  }
  codeBuilder.endControlFlow();
}"
26761,"public OneToManyDefinition(ExecutableElement typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  OneToMany oneToMany=typeElement.getAnnotation(OneToMany.class);
  methodName=typeElement.getSimpleName().toString();
  variableName=oneToMany.variableName();
  if (variableName == null || variableName.isEmpty()) {
    variableName=methodName.replace(""String_Node_Str"",""String_Node_Str"");
    variableName=variableName.substring(0,1).toLowerCase() + variableName.substring(1);
  }
  methods.addAll(Arrays.asList(oneToMany.methods()));
  if (oneToMany.isVariablePrivate()) {
    columnAccess=new PrivateColumnAccess(false);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  extendsBaseModel=false;
  TypeMirror returnType=typeElement.getReturnType();
  TypeName typeName=TypeName.get(returnType);
  if (typeName instanceof ParameterizedTypeName) {
    List<TypeName> typeArguments=((ParameterizedTypeName)typeName).typeArguments;
    if (typeArguments.size() == 1) {
      TypeName returnTypeName=typeArguments.get(0);
      extendsBaseModel=ProcessorUtils.isSubclass(manager.getProcessingEnvironment(),ClassNames.BASE_MODEL.toString(),manager.getElements().getTypeElement(returnTypeName.toString()));
    }
  }
}","public OneToManyDefinition(ExecutableElement typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  OneToMany oneToMany=typeElement.getAnnotation(OneToMany.class);
  methodName=typeElement.getSimpleName().toString();
  variableName=oneToMany.variableName();
  if (variableName == null || variableName.isEmpty()) {
    variableName=methodName.replace(""String_Node_Str"",""String_Node_Str"");
    variableName=variableName.substring(0,1).toLowerCase() + variableName.substring(1);
  }
  methods.addAll(Arrays.asList(oneToMany.methods()));
  if (oneToMany.isVariablePrivate()) {
    columnAccess=new PrivateColumnAccess(false);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  extendsBaseModel=false;
  TypeMirror returnType=typeElement.getReturnType();
  TypeName typeName=TypeName.get(returnType);
  if (typeName instanceof ParameterizedTypeName) {
    List<TypeName> typeArguments=((ParameterizedTypeName)typeName).typeArguments;
    if (typeArguments.size() == 1) {
      referencedTableType=typeArguments.get(0);
      referencedType=manager.getElements().getTypeElement(referencedTableType.toString());
      extendsBaseModel=ProcessorUtils.isSubclass(manager.getProcessingEnvironment(),ClassNames.BASE_MODEL.toString(),referencedType);
      extendsModel=ProcessorUtils.isSubclass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),referencedType);
    }
  }
}"
26762,"@OneToMany(methods={OneToMany.Method.ALL}) public List<TestModel2> getOrders(){
  if (orders == null) {
    orders=new Select().from(TestModel2.class).where(TestModel2_Table.model_order.greaterThan(3)).queryList();
  }
  return orders;
}","@OneToMany(methods={OneToMany.Method.ALL}) public List<OneToManyModelNonModel> getOrders(){
  if (orders == null) {
    orders=new Select().from(OneToManyModelNonModel.class).queryList();
  }
  return orders;
}"
26763,"@Override public void save(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.save();
    }
  }
).build());
}","@Override public void save(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.save();
    }
  }
).add(model).build());
}"
26764,"@Override public void update(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.update();
    }
  }
).build());
}","@Override public void update(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.update();
    }
  }
).add(model).build());
}"
26765,"@Override public void insert(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.insert();
    }
  }
).build());
}","@Override public void insert(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.insert();
    }
  }
).add(model).build());
}"
26766,"@Override public void delete(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.delete();
    }
  }
).build());
}","@Override public void delete(){
  executeTransaction(new ProcessModelTransaction.Builder<>(new ProcessModelTransaction.ProcessModel<TModel>(){
    @Override public void processModel(    TModel model){
      model.delete();
    }
  }
).add(model).build());
}"
26767,"@Override public void appendConditionToQuery(QueryBuilder queryBuilder){
  if (useParenthesis && conditionsList.size() > 0) {
    queryBuilder.append(""String_Node_Str"");
  }
  for (  SQLCondition condition : conditionsList) {
    condition.appendConditionToQuery(queryBuilder);
    if (condition.hasSeparator()) {
      queryBuilder.appendSpaceSeparated(condition.separator());
    }
  }
  if (useParenthesis && conditionsList.size() > 0) {
    queryBuilder.append(""String_Node_Str"");
  }
}","@Override public void appendConditionToQuery(QueryBuilder queryBuilder){
  int conditionListSize=conditionsList.size();
  if (useParenthesis && conditionListSize > 0) {
    queryBuilder.append(""String_Node_Str"");
  }
  for (int i=0; i < conditionListSize; i++) {
    SQLCondition condition=conditionsList.get(i);
    condition.appendConditionToQuery(queryBuilder);
    if (condition.hasSeparator() && i < conditionListSize - 1) {
      queryBuilder.appendSpaceSeparated(condition.separator());
    }
  }
  if (useParenthesis && conditionListSize > 0) {
    queryBuilder.append(""String_Node_Str"");
  }
}"
26768,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  super.run();
  Looper.prepare();
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
  while (true) {
    final ArrayList<Model> tmpModels;
synchronized (models) {
      tmpModels=new ArrayList<>(models);
      models.clear();
    }
    if (tmpModels.size() > 0) {
      databaseDefinition.beginTransactionAsync(new ProcessModelTransaction.Builder(modelSaver).build()).success(successCallback).error(errorCallback).build().execute();
    }
    try {
      Thread.sleep(modelSaveCheckTime);
    }
 catch (    InterruptedException e) {
      FlowLog.log(FlowLog.Level.I,""String_Node_Str"");
    }
    if (isQuitting) {
      return;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  super.run();
  Looper.prepare();
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
  while (true) {
    final ArrayList<Model> tmpModels;
synchronized (models) {
      tmpModels=new ArrayList<>(models);
      models.clear();
    }
    if (tmpModels.size() > 0) {
      databaseDefinition.beginTransactionAsync(new ProcessModelTransaction.Builder(modelSaver).addAll(tmpModels).build()).success(successCallback).error(errorCallback).build().execute();
    }
    try {
      Thread.sleep(modelSaveCheckTime);
    }
 catch (    InterruptedException e) {
      FlowLog.log(FlowLog.Level.I,""String_Node_Str"");
    }
    if (isQuitting) {
      return;
    }
  }
}"
26769,"@Test public void testConcurrentInsert() throws InterruptedException {
  Delete.table(TestModel1.class);
  ExecutorService executorService=Executors.newFixedThreadPool(3);
  for (int i=0; i < CONCURRENT_INSERT_COUNT; i++) {
    executorService.execute(new InsertRunnable());
  }
  executorService.shutdown();
  executorService.awaitTermination(CONCURRENT_INSERT_TIMEOUT,TimeUnit.MILLISECONDS);
  long modelCount=selectCountOf().from(TestModel1.class).count();
  List<TestModel1> models=select().from(TestModel1.class).queryList();
  for (  TestModel1 model : models) {
    System.out.println(""String_Node_Str"" + model.getName());
  }
  assertEquals(CONCURRENT_INSERT_COUNT,modelCount);
}","@Test public void testConcurrentInsert() throws InterruptedException {
  Delete.table(TestModel1.class);
  ExecutorService executorService=Executors.newFixedThreadPool(3);
  for (int i=0; i < CONCURRENT_INSERT_COUNT; i++) {
    executorService.execute(new InsertRunnable());
  }
  executorService.shutdown();
  executorService.awaitTermination(CONCURRENT_INSERT_TIMEOUT,TimeUnit.MILLISECONDS);
  long modelCount=selectCountOf().from(TestModel1.class).count();
  assertEquals(CONCURRENT_INSERT_COUNT,modelCount);
}"
26770,"public synchronized OpenHelper getHelper(){
  if (openHelper == null) {
    DatabaseConfig config=FlowManager.getConfig().databaseConfigMap().get(getAssociatedDatabaseClassFile());
    if (config == null || config.helperCreator() == null) {
      openHelper=new FlowSQLiteOpenHelper(this,helperListener);
    }
 else {
      openHelper=config.helperCreator().createHelper(this,helperListener);
    }
  }
  return openHelper;
}","public synchronized OpenHelper getHelper(){
  if (openHelper == null) {
    DatabaseConfig config=FlowManager.getConfig().databaseConfigMap().get(getAssociatedDatabaseClassFile());
    if (config == null || config.helperCreator() == null) {
      openHelper=new FlowSQLiteOpenHelper(this,helperListener);
    }
 else {
      openHelper=config.helperCreator().createHelper(this,helperListener);
    }
    openHelper.performRestoreFromBackup();
  }
  return openHelper;
}"
26771,"/** 
 * Checks a standard database helper for integrity using quick_check(1).
 * @param openHelper The helper to user to look up integrity.
 * @return true if it's integrity is OK.
 */
public static boolean isDatabaseIntegrityOk(OpenHelper openHelper){
  boolean integrityOk=true;
  DatabaseStatement prog=null;
  try {
    prog=openHelper.getDatabase().compileStatement(""String_Node_Str"");
    String rslt=prog.simpleQueryForString();
    if (!rslt.equalsIgnoreCase(""String_Node_Str"")) {
      FlowLog.log(FlowLog.Level.E,""String_Node_Str"" + rslt);
      integrityOk=false;
    }
  }
  finally {
    if (prog != null) {
      prog.close();
    }
  }
  return integrityOk;
}","/** 
 * Checks a standard database helper for integrity using quick_check(1).
 * @param databaseName The name of the database to check. Will thrown an exception if it does not exist.
 * @return true if it's integrity is OK.
 */
public static boolean isDatabaseIntegrityOk(String databaseName){
  return getDatabase(databaseName).getHelper().isDatabaseIntegrityOk();
}"
26772,"public DatabaseHelperDelegate(DatabaseHelperListener databaseHelperListener,DatabaseDefinition databaseDefinition,@Nullable OpenHelper backupHelper){
  super(databaseDefinition);
  this.databaseHelperListener=databaseHelperListener;
  this.backupHelper=backupHelper;
  movePrepackagedDB(getDatabaseDefinition().getDatabaseFileName(),getDatabaseDefinition().getDatabaseFileName());
  if (databaseDefinition.backupEnabled()) {
    restoreDatabase(getTempDbFileName(),getDatabaseDefinition().getDatabaseFileName());
    if (backupHelper == null) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
    backupHelper.getDatabase();
  }
}","public DatabaseHelperDelegate(DatabaseHelperListener databaseHelperListener,DatabaseDefinition databaseDefinition,@Nullable OpenHelper backupHelper){
  super(databaseDefinition);
  this.databaseHelperListener=databaseHelperListener;
  this.backupHelper=backupHelper;
}"
26773,"/** 
 * Copies over the prepackaged DB into the main DB then deletes the existing DB to save storage space. If we have a backup that exists
 * @param databaseName    The name of the database to copy over
 * @param prepackagedName The name of the prepackaged db file
 */
public void movePrepackagedDB(String databaseName,String prepackagedName){
  final File dbPath=FlowManager.getContext().getDatabasePath(databaseName);
  if (dbPath.exists() && (!getDatabaseDefinition().areConsistencyChecksEnabled() || (getDatabaseDefinition().areConsistencyChecksEnabled() && isDatabaseIntegrityOk()))) {
    return;
  }
  dbPath.getParentFile().mkdirs();
  try {
    File existingDb=FlowManager.getContext().getDatabasePath(getTempDbFileName());
    InputStream inputStream;
    if (existingDb.exists() && (!getDatabaseDefinition().backupEnabled() || getDatabaseDefinition().backupEnabled() && FlowManager.isDatabaseIntegrityOk(backupHelper))) {
      inputStream=new FileInputStream(existingDb);
    }
 else {
      inputStream=FlowManager.getContext().getAssets().open(prepackagedName);
    }
    writeDB(dbPath,inputStream);
  }
 catch (  IOException e) {
    FlowLog.log(FlowLog.Level.W,""String_Node_Str"",e);
  }
}","/** 
 * Copies over the prepackaged DB into the main DB then deletes the existing DB to save storage space. If we have a backup that exists
 * @param databaseName    The name of the database to copy over
 * @param prepackagedName The name of the prepackaged db file
 */
public void movePrepackagedDB(String databaseName,String prepackagedName,DatabaseWrapper databaseWrapper,DatabaseWrapper backupDatabaseWrapper){
  final File dbPath=FlowManager.getContext().getDatabasePath(databaseName);
  if (dbPath.exists() && (!getDatabaseDefinition().areConsistencyChecksEnabled() || (getDatabaseDefinition().areConsistencyChecksEnabled() && isDatabaseIntegrityOk(databaseWrapper)))) {
    return;
  }
  dbPath.getParentFile().mkdirs();
  try {
    File existingDb=FlowManager.getContext().getDatabasePath(getTempDbFileName());
    InputStream inputStream;
    if (existingDb.exists() && (!getDatabaseDefinition().backupEnabled() || getDatabaseDefinition().backupEnabled() && isDatabaseIntegrityOk(backupDatabaseWrapper))) {
      inputStream=new FileInputStream(existingDb);
    }
 else {
      inputStream=FlowManager.getContext().getAssets().open(prepackagedName);
    }
    writeDB(dbPath,inputStream);
  }
 catch (  IOException e) {
    FlowLog.log(FlowLog.Level.W,""String_Node_Str"",e);
  }
}"
26774,"/** 
 * Pulled partially from code, it runs a ""PRAGMA quick_check(1)"" to see if the database is ok. This method will   {@link #restoreBackUp()} if they are enabled on the database if this check fails. Souse with caution and ensure that you backup the database often!
 * @return true if the database is ok, false if the consistency has been compromised.
 */
public boolean isDatabaseIntegrityOk(){
  boolean integrityOk=true;
  DatabaseStatement prog=null;
  try {
    prog=getWritableDatabase().compileStatement(""String_Node_Str"");
    String rslt=prog.simpleQueryForString();
    if (!rslt.equalsIgnoreCase(""String_Node_Str"")) {
      FlowLog.log(FlowLog.Level.E,""String_Node_Str"" + getDatabaseDefinition().getDatabaseName() + ""String_Node_Str""+ rslt);
      integrityOk=false;
      if (getDatabaseDefinition().backupEnabled()) {
        integrityOk=restoreBackUp();
      }
    }
  }
  finally {
    if (prog != null) {
      prog.close();
    }
  }
  return integrityOk;
}","/** 
 * Pulled partially from code, it runs a ""PRAGMA quick_check(1)"" to see if the database is ok. This method will   {@link #restoreBackUp()} if they are enabled on the database if this check fails. Souse with caution and ensure that you backup the database often!
 * @return true if the database is ok, false if the consistency has been compromised.
 */
public boolean isDatabaseIntegrityOk(DatabaseWrapper databaseWrapper){
  boolean integrityOk=true;
  DatabaseStatement prog=null;
  try {
    prog=databaseWrapper.compileStatement(""String_Node_Str"");
    String rslt=prog.simpleQueryForString();
    if (!rslt.equalsIgnoreCase(""String_Node_Str"")) {
      FlowLog.log(FlowLog.Level.E,""String_Node_Str"" + getDatabaseDefinition().getDatabaseName() + ""String_Node_Str""+ rslt);
      integrityOk=false;
      if (getDatabaseDefinition().backupEnabled()) {
        integrityOk=restoreBackUp();
      }
    }
  }
  finally {
    if (prog != null) {
      prog.close();
    }
  }
  return integrityOk;
}"
26775,"/** 
 * Will use the already existing app database if   {@link DatabaseDefinition#backupEnabled()} is true. If the existingis not there we will try to use the prepackaged database for that purpose.
 * @param databaseName    The name of the database to restore
 * @param prepackagedName The name of the prepackaged db file
 */
public void restoreDatabase(String databaseName,String prepackagedName){
  final File dbPath=FlowManager.getContext().getDatabasePath(databaseName);
  if (dbPath.exists()) {
    return;
  }
  dbPath.getParentFile().mkdirs();
  try {
    File existingDb=FlowManager.getContext().getDatabasePath(getDatabaseDefinition().getDatabaseFileName());
    InputStream inputStream;
    if (existingDb.exists() && (getDatabaseDefinition().backupEnabled() && FlowManager.isDatabaseIntegrityOk(backupHelper))) {
      inputStream=new FileInputStream(existingDb);
    }
 else {
      inputStream=FlowManager.getContext().getAssets().open(prepackagedName);
    }
    writeDB(dbPath,inputStream);
  }
 catch (  IOException e) {
    FlowLog.logError(e);
  }
}","/** 
 * Will use the already existing app database if   {@link DatabaseDefinition#backupEnabled()} is true. If the existingis not there we will try to use the prepackaged database for that purpose.
 * @param databaseName    The name of the database to restore
 * @param prepackagedName The name of the prepackaged db file
 */
public void restoreDatabase(String databaseName,String prepackagedName){
  final File dbPath=FlowManager.getContext().getDatabasePath(databaseName);
  if (dbPath.exists()) {
    return;
  }
  dbPath.getParentFile().mkdirs();
  try {
    File existingDb=FlowManager.getContext().getDatabasePath(getDatabaseDefinition().getDatabaseFileName());
    InputStream inputStream;
    if (existingDb.exists() && (getDatabaseDefinition().backupEnabled() && backupHelper != null && isDatabaseIntegrityOk(backupHelper.getDatabase()))) {
      inputStream=new FileInputStream(existingDb);
    }
 else {
      inputStream=FlowManager.getContext().getAssets().open(prepackagedName);
    }
    writeDB(dbPath,inputStream);
  }
 catch (  IOException e) {
    FlowLog.logError(e);
  }
}"
26776,"/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    String columnAccessString=getColumnAccessString(isModelContainerAdapter,false);
    if (columnAccess instanceof BlobColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
    codeBuilder.add(columnAccessString);
  }
  codeBuilder.add(""String_Node_Str"");
}","/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    String columnAccessString=getColumnAccessString(isModelContainerAdapter,false);
    if (columnAccess instanceof BlobColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
    codeBuilder.add(columnAccessString);
  }
  codeBuilder.add(""String_Node_Str"");
}"
26777,"@Override public Condition concatenate(ITypeConditional conditional){
  return concatenate((Object)conditional);
}","@Override public Condition concatenate(IConditional conditional){
  return concatenate((Object)conditional);
}"
26778,Condition concatenate(ITypeConditional conditional);,Condition concatenate(IConditional conditional);
26779,"@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  ContentProviderValidator validator=new ContentProviderValidator();
  Collection<ContentProviderDefinition> contentProviderDefinitions=providerMap.values();
  for (  ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
    contentProviderDefinition.prepareForWrite();
    if (validator.validate(processorManager,contentProviderDefinition)) {
      WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
    }
  }
  List<DatabaseHolderDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseHolderDefinition databaseDefinition : databaseDefinitions) {
    try {
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      if (!manyToManyDefinitions.isEmpty()) {
        manyToManyDefinitions.clear();
        continue;
      }
      databaseDefinition.getDatabaseDefinition().validateAndPrepareToWrite();
      JavaFile.builder(databaseDefinition.getDatabaseDefinition().packageName,databaseDefinition.getDatabaseDefinition().getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
        if (tableDefinition.modelContainerDefinition != null) {
          WriterUtils.writeBaseDefinition(tableDefinition.modelContainerDefinition,processorManager);
        }
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}","@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  List<DatabaseHolderDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseHolderDefinition databaseDefinition : databaseDefinitions) {
    try {
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      if (!manyToManyDefinitions.isEmpty()) {
        manyToManyDefinitions.clear();
        continue;
      }
      if (databaseDefinition.getDatabaseDefinition() == null) {
        continue;
      }
      ContentProviderValidator validator=new ContentProviderValidator();
      Collection<ContentProviderDefinition> contentProviderDefinitions=databaseDefinition.providerMap.values();
      for (      ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
        contentProviderDefinition.prepareForWrite();
        if (validator.validate(processorManager,contentProviderDefinition)) {
          WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
        }
      }
      databaseDefinition.getDatabaseDefinition().validateAndPrepareToWrite();
      JavaFile.builder(databaseDefinition.getDatabaseDefinition().packageName,databaseDefinition.getDatabaseDefinition().getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
        if (tableDefinition.modelContainerDefinition != null) {
          WriterUtils.writeBaseDefinition(tableDefinition.modelContainerDefinition,processorManager);
        }
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}"
26780,"public void addContentProviderDefinition(ContentProviderDefinition contentProviderDefinition){
  providerMap.put(contentProviderDefinition.elementTypeName,contentProviderDefinition);
}","public void addContentProviderDefinition(ContentProviderDefinition contentProviderDefinition){
  DatabaseHolderDefinition holderDefinition=getOrPutDatabase(contentProviderDefinition.databaseName);
  holderDefinition.providerMap.put(contentProviderDefinition.elementTypeName,contentProviderDefinition);
  providerMap.put(contentProviderDefinition.elementTypeName,contentProviderDefinition);
}"
26781,"/** 
 * @return The name used as part of the AS query.
 */
public String aliasName(){
  return shouldAddIdentifierToAliasName ? QueryBuilder.quoteIfNeeded(aliasName) : aliasName;
}","/** 
 * @return The name used as part of the AS query.
 */
public String aliasName(){
  return (StringUtils.isNotNullOrEmpty(aliasName) && shouldAddIdentifierToAliasName) ? QueryBuilder.quoteIfNeeded(aliasName) : aliasName;
}"
26782,"/** 
 * @return The real column name.
 */
public String name(){
  return shouldAddIdentifierToQuery ? QueryBuilder.quoteIfNeeded(name) : name;
}","/** 
 * @return The real column name.
 */
public String name(){
  return (StringUtils.isNotNullOrEmpty(name) && shouldAddIdentifierToQuery) ? QueryBuilder.quoteIfNeeded(name) : name;
}"
26783,"@Override public TypeSpec getTypeSpec(){
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(this.className).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ClassNames.DATABASE_HOLDER);
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);
  for (  TypeConverterDefinition typeConverterDefinition : processorManager.getTypeConverters()) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.TYPE_CONVERTER_MAP_FIELD_NAME,typeConverterDefinition.getModelTypeName(),typeConverterDefinition.getClassName());
  }
  for (  DatabaseHolderDefinition databaseDefinition : processorManager.getDatabaseDefinitionMap()) {
    constructor.addStatement(""String_Node_Str"",databaseDefinition.getDatabaseDefinition().outputClassName);
  }
  typeBuilder.addMethod(constructor.build());
  return typeBuilder.build();
}","@Override public TypeSpec getTypeSpec(){
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(this.className).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ClassNames.DATABASE_HOLDER);
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);
  for (  TypeConverterDefinition typeConverterDefinition : processorManager.getTypeConverters()) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.TYPE_CONVERTER_MAP_FIELD_NAME,typeConverterDefinition.getModelTypeName(),typeConverterDefinition.getClassName());
  }
  for (  DatabaseHolderDefinition databaseDefinition : processorManager.getDatabaseDefinitionMap()) {
    if (databaseDefinition.getDatabaseDefinition() != null) {
      constructor.addStatement(""String_Node_Str"",databaseDefinition.getDatabaseDefinition().outputClassName);
    }
  }
  typeBuilder.addMethod(constructor.build());
  return typeBuilder.build();
}"
26784,"public ManyToManyDefinition(TypeElement element,ProcessorManager processorManager){
  super(element,processorManager);
  ManyToMany manyToMany=element.getAnnotation(ManyToMany.class);
  referencedTable=TypeName.get(ModelUtils.getReferencedClassFromAnnotation(manyToMany));
  generateAutoIncrement=manyToMany.generateAutoIncrement();
  generatedTableClassName=manyToMany.generatedTableClassName();
  saveForeignKeyModels=manyToMany.saveForeignKeyModels();
  sameTableReferenced=(referencedTable.equals(elementTypeName));
  Table table=element.getAnnotation(Table.class);
  try {
    table.database();
  }
 catch (  MirroredTypeException mte) {
    databaseTypeName=TypeName.get(mte.getTypeMirror());
  }
  DatabaseDefinition databaseDefinition=manager.getDatabaseHolderDefinition(databaseTypeName).getDatabaseDefinition();
  if (databaseDefinition == null) {
    manager.logError(""String_Node_Str"" + elementName);
  }
 else {
    if (StringUtils.isNullOrEmpty(generatedTableClassName)) {
      ClassName referencedOutput=getElementClassName(manager.getElements().getTypeElement(referencedTable.toString()));
      setOutputClassName(databaseDefinition.classSeparator + referencedOutput.simpleName());
    }
 else {
      setOutputClassNameFull(generatedTableClassName);
    }
  }
}","public ManyToManyDefinition(TypeElement element,ProcessorManager processorManager){
  super(element,processorManager);
  ManyToMany manyToMany=element.getAnnotation(ManyToMany.class);
  referencedTable=TypeName.get(ModelUtils.getReferencedClassFromAnnotation(manyToMany));
  generateAutoIncrement=manyToMany.generateAutoIncrement();
  generatedTableClassName=manyToMany.generatedTableClassName();
  saveForeignKeyModels=manyToMany.saveForeignKeyModels();
  sameTableReferenced=(referencedTable.equals(elementTypeName));
  Table table=element.getAnnotation(Table.class);
  try {
    table.database();
  }
 catch (  MirroredTypeException mte) {
    databaseTypeName=TypeName.get(mte.getTypeMirror());
  }
}"
26785,"public void addManyToManyDefinition(ManyToManyDefinition manyToManyDefinition){
  DatabaseHolderDefinition databaseHolderDefinition=getOrPutDatabase(manyToManyDefinition.databaseTypeName);
  databaseHolderDefinition.manyToManyDefinitionMap.put(manyToManyDefinition.elementClassName,manyToManyDefinition);
  if (databaseHolderDefinition.manyToManyDefinitionMap.containsKey(manyToManyDefinition.outputClassName)) {
    logError(""String_Node_Str"",manyToManyDefinition.outputClassName,manyToManyDefinition.databaseTypeName);
  }
 else {
    databaseHolderDefinition.manyToManyDefinitionMap.put(manyToManyDefinition.outputClassName,manyToManyDefinition);
  }
}","public void addManyToManyDefinition(ManyToManyDefinition manyToManyDefinition){
  DatabaseHolderDefinition databaseHolderDefinition=getOrPutDatabase(manyToManyDefinition.databaseTypeName);
  if (databaseHolderDefinition.manyToManyDefinitionMap.containsKey(manyToManyDefinition.elementClassName)) {
    logError(""String_Node_Str"",manyToManyDefinition.elementClassName,manyToManyDefinition.databaseTypeName);
  }
 else {
    databaseHolderDefinition.manyToManyDefinitionMap.put(manyToManyDefinition.elementClassName,manyToManyDefinition);
  }
}"
26786,"@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  List<DatabaseHolderDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseHolderDefinition databaseDefinition : databaseDefinitions) {
    try {
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      if (!manyToManyDefinitions.isEmpty()) {
        manyToManyDefinitions.clear();
        continue;
      }
      if (databaseDefinition.getDatabaseDefinition() == null) {
        continue;
      }
      ContentProviderValidator validator=new ContentProviderValidator();
      Collection<ContentProviderDefinition> contentProviderDefinitions=databaseDefinition.providerMap.values();
      for (      ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
        contentProviderDefinition.prepareForWrite();
        if (validator.validate(processorManager,contentProviderDefinition)) {
          WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
        }
      }
      databaseDefinition.getDatabaseDefinition().validateAndPrepareToWrite();
      JavaFile.builder(databaseDefinition.getDatabaseDefinition().packageName,databaseDefinition.getDatabaseDefinition().getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
        if (tableDefinition.modelContainerDefinition != null) {
          WriterUtils.writeBaseDefinition(tableDefinition.modelContainerDefinition,processorManager);
        }
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}","@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  List<DatabaseHolderDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseHolderDefinition databaseDefinition : databaseDefinitions) {
    try {
      if (databaseDefinition.getDatabaseDefinition() == null) {
        continue;
      }
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        manyToMany.prepareForWrite();
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      if (!manyToManyDefinitions.isEmpty()) {
        manyToManyDefinitions.clear();
        continue;
      }
      ContentProviderValidator validator=new ContentProviderValidator();
      Collection<ContentProviderDefinition> contentProviderDefinitions=databaseDefinition.providerMap.values();
      for (      ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
        contentProviderDefinition.prepareForWrite();
        if (validator.validate(processorManager,contentProviderDefinition)) {
          WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
        }
      }
      databaseDefinition.getDatabaseDefinition().validateAndPrepareToWrite();
      JavaFile.builder(databaseDefinition.getDatabaseDefinition().packageName,databaseDefinition.getDatabaseDefinition().getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
        if (tableDefinition.modelContainerDefinition != null) {
          WriterUtils.writeBaseDefinition(tableDefinition.modelContainerDefinition,processorManager);
        }
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}"
26787,"/** 
 * @return The name used in queries. If an alias is specified, use that, otherwise use the nameof the property with a table name (if specified).
 */
@Override public String getQuery(){
  if (StringUtils.isNotNullOrEmpty(aliasName)) {
    return aliasName();
  }
 else {
    return fullName();
  }
}","/** 
 * @return The name used in queries. If an alias is specified, use that, otherwise use the nameof the property with a table name (if specified).
 */
@Override public String getQuery(){
  if (StringUtils.isNotNullOrEmpty(aliasName)) {
    return aliasName();
  }
 else   if (StringUtils.isNotNullOrEmpty(name)) {
    return fullName();
  }
 else {
    return ""String_Node_Str"";
  }
}"
26788,"/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    String columnAccessString=getColumnAccessString(isModelContainerAdapter,false);
    if (columnAccess instanceof BlobColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
    codeBuilder.add(columnAccessString);
  }
  codeBuilder.add(""String_Node_Str"");
}","/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    String columnAccessString=getColumnAccessString(isModelContainerAdapter,false);
    if (columnAccess instanceof BlobColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
 else     if (columnAccess instanceof BooleanTypeColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
    codeBuilder.add(columnAccessString);
  }
  codeBuilder.add(""String_Node_Str"");
}"
26789,"CodeBlock getForeignKeyContainerMethod(ClassName tableClassName){
  String access=getShortColumnAccess(false,false,tableColumnAccess.getShortAccessString(foreignKeyColumnDefinition.elementClassName,foreignKeyFieldName,false,false));
  if (foreignKeyColumnDefinition.isModelContainer) {
    access=foreignKeyColumnDefinition.getColumnAccessString(false,false) + ""String_Node_Str"" + access;
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  codeBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(true),tableClassName,columnName,access);
  return codeBuilder.build();
}","CodeBlock getForeignKeyContainerMethod(ClassName tableClassName){
  String access=getShortColumnAccess(false,false,tableColumnAccess.getShortAccessString(foreignKeyColumnDefinition.elementClassName,foreignKeyFieldName,false,false));
  if (foreignKeyColumnDefinition.isModelContainer) {
    access=foreignKeyColumnDefinition.getColumnAccessString(false,false) + ""String_Node_Str"" + access;
  }
 else   if (foreignKeyColumnDefinition.isModel && !isReferencedFieldPackagePrivate) {
    access=foreignKeyColumnDefinition.getColumnAccessString(false,false) + ""String_Node_Str"" + access;
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  codeBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(true),tableClassName,columnName,access);
  return codeBuilder.build();
}"
26790,"@Test public void testTableList(){
  List<ListModel> testModel1s=GenerationUtils.generateRandomModels(ListModel.class,100);
  assertTrue(modelList.size() == 100);
  assertTrue(modelList.containsAll(testModel1s));
  ListModel model1=modelList.remove(0);
  assertTrue(modelList.size() == 99);
  assertTrue(modelList.add(model1));
  assertTrue(modelList.size() == 100);
  modelList.set(model1);
  modelList.clear();
  assertTrue(modelList.size() == 0);
}","@Test public void testTableList(){
  List<ListModel> testModel1s=GenerationUtils.generateRandomModels(ListModel.class,100);
  modelList=new FlowQueryList<>(SQLite.select().from(ListModel.class));
  assertTrue(modelList.size() == 100);
  assertTrue(modelList.containsAll(testModel1s));
  ListModel model1=modelList.remove(0);
  assertTrue(modelList.size() == 99);
  assertTrue(modelList.add(model1));
  assertTrue(modelList.size() == 100);
  modelList.set(model1);
  modelList.clear();
  assertTrue(modelList.size() == 0);
}"
26791,"/** 
 * Tests to ensure the model view operates as expected
 */
@Test public void testModelView(){
  TestModel2 testModel2=new TestModel2();
  testModel2.order=6;
  testModel2.name=""String_Node_Str"";
  testModel2.save();
  testModel2=new TestModel2();
  testModel2.order=5;
  testModel2.name=""String_Node_Str"";
  testModel2.save();
  List<TestModelView> testModelViews=new Select().from(TestModelView.class).queryList();
  assertTrue(!testModelViews.isEmpty());
  assertTrue(testModelViews.size() == 1);
  FlowCursorList<TestModelView> list=new FlowCursorList<>(true,TestModelView.class);
  assertNotNull(list.getItem(0));
}","/** 
 * Tests to ensure the model view operates as expected
 */
@Test public void testModelView(){
  TestModel2 testModel2=new TestModel2();
  testModel2.order=6;
  testModel2.name=""String_Node_Str"";
  testModel2.save();
  testModel2=new TestModel2();
  testModel2.order=5;
  testModel2.name=""String_Node_Str"";
  testModel2.save();
  List<TestModelView> testModelViews=new Select().from(TestModelView.class).queryList();
  assertTrue(!testModelViews.isEmpty());
  assertTrue(testModelViews.size() == 1);
  FlowCursorList<TestModelView> list=new FlowCursorList<>(SQLite.select().from(TestModelView.class));
  assertNotNull(list.getItem(0));
}"
26792,"/** 
 * Constructs an instance of this list.
 * @param cacheModels    For every call to {@link #getItem(long)}, we want to keep a reference to it so we do not need to convert the cursor data back into a   {@link TModel} again.
 * @param modelQueriable The SQL where query to use when doing a query.
 */
public FlowCursorList(boolean cacheModels,ModelQueriable<TModel> modelQueriable){
  this.modelQueriable=modelQueriable;
  cursor=this.modelQueriable.query();
  table=modelQueriable.getTable();
  modelAdapter=FlowManager.getModelAdapter(table);
  this.cacheModels=cacheModels;
  setCacheModels(cacheModels);
}","/** 
 * Constructs an instance of this list.
 * @param cacheModels    For every call to {@link #getItem(long)}, we want to keep a reference to it so we do not need to convert the cursor data back into a   {@link TModel} again.
 * @param modelQueriable The SQL where query to use when doing a query.
 */
public FlowCursorList(boolean cacheModels,ModelQueriable<TModel> modelQueriable){
  this.modelQueriable=modelQueriable;
  cursor=this.modelQueriable.query();
  table=modelQueriable.getTable();
  modelAdapter=FlowManager.getInstanceAdapter(table);
  this.cacheModels=cacheModels;
  setCacheModels(cacheModels);
}"
26793,"/** 
 * Will refresh content at a slightly later time, and multiple subsequent calls to this method within a short period of time will be combined into one call.
 */
public void refreshAsync(){
synchronized (this) {
    if (pendingRefresh) {
      return;
    }
    pendingRefresh=true;
  }
  REFRESH_gitHANDLER.post(refreshRunnable);
}","/** 
 * Will refresh content at a slightly later time, and multiple subsequent calls to this method within a short period of time will be combined into one call.
 */
public void refreshAsync(){
synchronized (this) {
    if (pendingRefresh) {
      return;
    }
    pendingRefresh=true;
  }
  REFRESH_HANDLER.post(refreshRunnable);
}"
26794,"/** 
 * @return The first {@link TModel} of items from the contained {@link Cursor}. You must call   {@link #close()} when finished.
 */
@Nullable public TModel toModel(){
}","/** 
 * @return The first {@link TModel} of items from the contained {@link Cursor}. You must call   {@link #close()} when finished.
 */
@Nullable public TModel toModel(){
  if (cursor != null) {
    return retrievalAdapter.getSingleModelLoader().convertToData(cursor,null);
  }
 else {
    return null;
  }
}"
26795,"/** 
 * @return A {@link List} of items from this object. You must call {@link #close()} when finished.
 */
@Nullable public <TCustom extends BaseQueryModel>List<TCustom> toCustomList(Class<TCustom> customClass){
}","/** 
 * @return A {@link List} of items from this object. You must call {@link #close()} when finished.
 */
@Nullable public <TCustom extends BaseQueryModel>List<TCustom> toCustomList(Class<TCustom> customClass){
  if (cursor != null) {
    return FlowManager.getQueryModelAdapter(customClass).getListModelLoader().convertToData(cursor,null);
  }
 else {
    return null;
  }
}"
26796,"/** 
 * @return A {@link List} of items from this object. You must call {@link #close()} when finished.
 */
@Nullable public List<TModel> toList(){
}","/** 
 * @return A {@link List} of items from this object. You must call {@link #close()} when finished.
 */
@Nullable public List<TModel> toList(){
  if (cursor != null) {
    return retrievalAdapter.getListModelLoader().convertToData(cursor,null);
  }
 else {
    return null;
  }
}"
26797,"@Override public ModelContainer<TModel,?> convertToData(@NonNull Cursor cursor,@Nullable ModelContainer<TModel,?> data,boolean moveToFirst){
  if (data != null) {
    if (cursor.moveToFirst()) {
      modelContainerAdapter.loadFromCursor(cursor,data);
    }
    return data;
  }
 else {
    return null;
  }
}","@Override public ModelContainer<TModel,?> convertToData(@NonNull Cursor cursor,@Nullable ModelContainer<TModel,?> data){
  if (data != null) {
    if (cursor.moveToFirst()) {
      modelContainerAdapter.loadFromCursor(cursor,data);
    }
    return data;
  }
 else {
    return null;
  }
}"
26798,"/** 
 * Constructs an instance of this list with the specfied   {@link ModelQueriable} object.
 * @param modelQueriable The object that can query from a database.
 */
public FlowQueryList(ModelQueriable<TModel> modelQueriable){
  super(null);
  internalCursorList=new FlowCursorList<TModel>(transact,modelQueriable){
    @Override protected ModelCache<TModel,?> getBackingCache(){
      return FlowQueryList.this.getBackingCache(getCacheSize());
    }
  }
;
}","/** 
 * Constructs an instance of this list with the specfied   {@link ModelQueriable} object.
 * @param modelQueriable The object that can query from a database.
 */
public FlowQueryList(ModelQueriable<TModel> modelQueriable){
  super(null);
  internalCursorList=new FlowCursorList<TModel>(true,modelQueriable){
    @Override protected ModelCache<TModel,?> getBackingCache(){
      return FlowQueryList.this.getBackingCache(getCacheSize());
    }
  }
;
}"
26799,"public void writePackageHelper(ProcessingEnvironment processingEnvironment) throws IOException {
  int count=0;
  if (!packagePrivateList.isEmpty()) {
    TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(elementClassName.simpleName() + databaseDefinition.classSeparator + ""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    for (    ColumnDefinition columnDefinition : packagePrivateList) {
      String helperClassName=manager.getElements().getPackageOf(columnDefinition.element).toString() + ""String_Node_Str"" + ClassName.get((TypeElement)columnDefinition.element.getEnclosingElement()).simpleName()+ databaseDefinition.classSeparator+ ""String_Node_Str"";
      ClassName className=ClassName.bestGuess(helperClassName);
      if (PackagePrivateAccess.containsColumn(className,columnDefinition.columnName)) {
        MethodSpec.Builder method=MethodSpec.methodBuilder(""String_Node_Str"" + StringUtils.capitalize(columnDefinition.columnName)).addModifiers(Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addParameter(elementTypeName,ModelUtils.getVariable(false)).returns(columnDefinition.elementTypeName);
        boolean samePackage=ElementUtility.isInSamePackage(manager,columnDefinition.element,this.element);
        if (samePackage) {
          method.addStatement(""String_Node_Str"",ModelUtils.getVariable(false),columnDefinition.elementName);
        }
 else {
          method.addStatement(""String_Node_Str"",className,StringUtils.capitalize(columnDefinition.columnName),ModelUtils.getVariable(false));
        }
        typeBuilder.addMethod(method.build());
        method=MethodSpec.methodBuilder(""String_Node_Str"" + StringUtils.capitalize(columnDefinition.columnName)).addModifiers(Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addParameter(elementTypeName,ModelUtils.getVariable(false)).addParameter(columnDefinition.elementTypeName,""String_Node_Str"");
        if (samePackage) {
          method.addStatement(""String_Node_Str"",ModelUtils.getVariable(false),columnDefinition.elementName,""String_Node_Str"");
        }
 else {
          method.addStatement(""String_Node_Str"",className,StringUtils.capitalize(columnDefinition.columnName),ModelUtils.getVariable(false),""String_Node_Str"");
        }
        typeBuilder.addMethod(method.build());
        count++;
      }
    }
    if (count > 0) {
      JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
      javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
    }
  }
}","public void writePackageHelper(ProcessingEnvironment processingEnvironment) throws IOException {
  int count=0;
  if (!packagePrivateList.isEmpty()) {
    TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(elementClassName.simpleName() + databaseDefinition.classSeparator + ""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    for (    ColumnDefinition columnDefinition : packagePrivateList) {
      String helperClassName=manager.getElements().getPackageOf(columnDefinition.element).toString() + ""String_Node_Str"" + ClassName.get((TypeElement)columnDefinition.element.getEnclosingElement()).simpleName()+ databaseDefinition.classSeparator+ ""String_Node_Str"";
      if (columnDefinition instanceof ForeignKeyColumnDefinition) {
        TableDefinition tableDefinition=databaseDefinition.tableDefinitionMap.get(((ForeignKeyColumnDefinition)columnDefinition).referencedTableClassName);
        if (tableDefinition != null) {
          helperClassName=manager.getElements().getPackageOf(tableDefinition.element).toString() + ""String_Node_Str"" + ClassName.get((TypeElement)tableDefinition.element).simpleName()+ databaseDefinition.classSeparator+ ""String_Node_Str"";
        }
      }
      ClassName className=ClassName.bestGuess(helperClassName);
      if (PackagePrivateAccess.containsColumn(className,columnDefinition.columnName)) {
        MethodSpec.Builder method=MethodSpec.methodBuilder(""String_Node_Str"" + StringUtils.capitalize(columnDefinition.columnName)).addModifiers(Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addParameter(elementTypeName,ModelUtils.getVariable(false)).returns(columnDefinition.elementTypeName);
        boolean samePackage=ElementUtility.isInSamePackage(manager,columnDefinition.element,this.element);
        if (samePackage) {
          method.addStatement(""String_Node_Str"",ModelUtils.getVariable(false),columnDefinition.elementName);
        }
 else {
          method.addStatement(""String_Node_Str"",className,StringUtils.capitalize(columnDefinition.columnName),ModelUtils.getVariable(false));
        }
        typeBuilder.addMethod(method.build());
        method=MethodSpec.methodBuilder(""String_Node_Str"" + StringUtils.capitalize(columnDefinition.columnName)).addModifiers(Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addParameter(elementTypeName,ModelUtils.getVariable(false)).addParameter(columnDefinition.elementTypeName,""String_Node_Str"");
        if (samePackage) {
          method.addStatement(""String_Node_Str"",ModelUtils.getVariable(false),columnDefinition.elementName,""String_Node_Str"");
        }
 else {
          method.addStatement(""String_Node_Str"",className,StringUtils.capitalize(columnDefinition.columnName),ModelUtils.getVariable(false),""String_Node_Str"");
        }
        typeBuilder.addMethod(method.build());
        count++;
      }
    }
    if (count > 0) {
      JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
      javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
    }
  }
}"
26800,"public ContainerKeyDefinition(Element element,ProcessorManager processorManager,BaseTableDefinition baseTableDefinition,boolean isPackagePrivate){
  super(element,processorManager);
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
    if (StringUtils.isNullOrEmpty(containerKeyName)) {
      containerKeyName=elementName;
    }
  }
 else {
    containerKeyName=elementName;
  }
  if (isPackagePrivate) {
    columnAccess=PackagePrivateAccess.from(processorManager,element,baseTableDefinition.databaseDefinition.fieldRefSeparator);
    PackagePrivateAccess.putElement(((PackagePrivateAccess)columnAccess).helperClassName,this.containerKeyName);
  }
 else {
    boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
    if (isPrivate) {
      boolean useIs=elementTypeName.box().equals(TypeName.BOOLEAN.box()) && (baseTableDefinition instanceof TableDefinition) && ((TableDefinition)baseTableDefinition).useIsForPrivateBooleans;
      columnAccess=new PrivateColumnAccess(useIs);
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
}","public ContainerKeyDefinition(Element element,ProcessorManager processorManager,BaseTableDefinition baseTableDefinition,boolean isPackagePrivate){
  super(element,processorManager);
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
    if (StringUtils.isNullOrEmpty(containerKeyName)) {
      containerKeyName=elementName;
    }
  }
 else {
    containerKeyName=elementName;
  }
  if (isPackagePrivate) {
    columnAccess=PackagePrivateAccess.from(processorManager,element,baseTableDefinition.databaseDefinition.classSeparator);
    PackagePrivateAccess.putElement(((PackagePrivateAccess)columnAccess).helperClassName,this.containerKeyName);
  }
 else {
    boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
    if (isPrivate) {
      boolean useIs=elementTypeName.box().equals(TypeName.BOOLEAN.box()) && (baseTableDefinition instanceof TableDefinition) && ((TableDefinition)baseTableDefinition).useIsForPrivateBooleans;
      columnAccess=new PrivateColumnAccess(useIs);
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
}"
26801,"@Override public BaseTransactionManager createManager(DatabaseDefinition databaseDefinition){
  if (testTransactionManager == null) {
    testTransactionManager=new TestTransactionManager(databaseDefinition);
  }
  return testTransactionManager;
}","@Override public BaseTransactionManager createManager(DatabaseDefinition databaseDefinition){
  testTransactionManager=new TestTransactionManager(databaseDefinition);
  return testTransactionManager;
}"
26802,"/** 
 * Returns the associated   {@link ModelAdapter} within this database forthe specified table. If the Model is missing the  {@link com.raizlabs.android.dbflow.annotation.Table} annotation,this will return null.
 * @param table The model that exists in this database.
 * @return The ModelAdapter for the table.
 */
public ModelAdapter getModelAdapterForTable(Class<? extends Model> table){
  return modelAdapters.get(table);
}","/** 
 * Returns the associated   {@link ModelAdapter} within this database forthe specified table. If the Model is missing the  {@link Table} annotation,this will return null.
 * @param table The model that exists in this database.
 * @return The ModelAdapter for the table.
 */
public ModelAdapter getModelAdapterForTable(Class<? extends Model> table){
  return modelAdapters.get(table);
}"
26803,"/** 
 * @param tableName The name of the table in this db.
 * @return The associated {@link ModelAdapter} within this database for the specified table name.If the Model is missing the  {@link com.raizlabs.android.dbflow.annotation.Table} annotation, this will return null.
 */
public Class<? extends Model> getModelClassForName(String tableName){
  return modelTableNames.get(tableName);
}","/** 
 * @param tableName The name of the table in this db.
 * @return The associated {@link ModelAdapter} within this database for the specified table name.If the Model is missing the  {@link Table} annotation, this will return null.
 */
public Class<? extends Model> getModelClassForName(String tableName){
  return modelTableNames.get(tableName);
}"
26804,"@Override public void run(){
  successCallback.onSuccess(Transaction.this);
}","@Override public void run(){
  errorCallback.onError(Transaction.this,throwable);
}"
26805,"/** 
 * Executes the transaction immediately on the same thread from which it is called. This calls the   {@link DatabaseDefinition#executeTransaction(ITransaction)} method, which runs the{@link #transaction()} in a database transaction.
 */
public void executeSync(){
  try {
    if (shouldRunInTransaction) {
      databaseDefinition.executeTransaction(transaction);
    }
 else {
      transaction.execute(databaseDefinition.getWritableDatabase());
    }
    if (successCallback != null) {
      TRANSACTION_HANDLER.post(new Runnable(){
        @Override public void run(){
          successCallback.onSuccess(Transaction.this);
        }
      }
);
    }
  }
 catch (  Throwable throwable) {
    if (errorCallback != null) {
      errorCallback.onError(this,throwable);
    }
  }
}","/** 
 * Executes the transaction immediately on the same thread from which it is called. This calls the   {@link DatabaseDefinition#executeTransaction(ITransaction)} method, which runs the{@link #transaction()} in a database transaction.
 */
public void executeSync(){
  try {
    if (shouldRunInTransaction) {
      databaseDefinition.executeTransaction(transaction);
    }
 else {
      transaction.execute(databaseDefinition.getWritableDatabase());
    }
    if (successCallback != null) {
      TRANSACTION_HANDLER.post(new Runnable(){
        @Override public void run(){
          successCallback.onSuccess(Transaction.this);
        }
      }
);
    }
  }
 catch (  final Throwable throwable) {
    if (errorCallback != null) {
      TRANSACTION_HANDLER.post(new Runnable(){
        @Override public void run(){
          errorCallback.onError(Transaction.this,throwable);
        }
      }
);
    }
  }
}"
26806,"/** 
 * Loading the module Database holder via reflection. This will trigger all creations, updates, and instantiation for each database defined. <p/> It is assumed FlowManager.init() is called by the application that uses the module database. This method should only be called if you need to load databases that are part of a module. Building once will give you the ability to add the class.
 */
public static void initModule(Class<? extends DatabaseHolder> generatedClassName){
  loadDatabaseHolder(generatedClassName);
}","/** 
 * Loading the module Database holder via reflection. This will trigger all creations, updates, and instantiation for each database defined. <p> It is assumed FlowManager.init() is called by the application that uses the module database. This method should only be called if you need to load databases that are part of a module. Building once will give you the ability to add the class.
 */
public static void initModule(Class<? extends DatabaseHolder> generatedClassName){
  loadDatabaseHolder(generatedClassName);
}"
26807,"@Override public Transaction.Builder beginTransactionAsync(ITransaction transaction){
}","@Override public Transaction.Builder beginTransactionAsync(ITransaction transaction){
  return new Transaction.Builder(transaction,this);
}"
26808,"public Builder add(TModel model){
  models.add(model);
  return this;
}","public Builder<TModel> add(TModel model){
  models.add(model);
  return this;
}"
26809,"public Builder processListener(OnModelProcessListener<TModel> processListener){
  this.processListener=processListener;
  return this;
}","public Builder<TModel> processListener(OnModelProcessListener<TModel> processListener){
  this.processListener=processListener;
  return this;
}"
26810,"public Builder addAll(Collection<TModel> models){
  this.models.addAll(models);
  return this;
}","public Builder<TModel> addAll(Collection<TModel> models){
  this.models.addAll(models);
  return this;
}"
26811,"public Builder queryResult(QueryResultCallback<TResult> queryResultCallback){
  this.queryResultCallback=queryResultCallback;
  return this;
}","public Builder<TResult> queryResult(QueryResultCallback<TResult> queryResultCallback){
  this.queryResultCallback=queryResultCallback;
  return this;
}"
26812,"Transaction(Builder builder){
  errorCallback=builder.errorCallback;
  successCallback=builder.successCallback;
  transaction=builder.transaction;
}","Transaction(Builder builder){
  databaseWrapper=builder.databaseWrapper;
  errorCallback=builder.errorCallback;
  successCallback=builder.successCallback;
  transaction=builder.transaction;
}"
26813,"public void execute(){
}","public void execute(){
  try {
    transaction.execute(databaseWrapper);
  }
 catch (  Throwable throwable) {
    if (errorCallback != null) {
      errorCallback.onError(transaction,throwable);
    }
  }
}"
26814,"public MigrationDefinition(ProcessorManager processorManager,TypeElement typeElement){
  super(typeElement,processorManager);
  setOutputClassName(""String_Node_Str"");
  Migration migration=typeElement.getAnnotation(Migration.class);
  if (migration == null) {
    processorManager.logError(""String_Node_Str"" + typeElement);
  }
 else {
    try {
      migration.database();
    }
 catch (    MirroredTypeException mte) {
      databaseName=TypeName.get(mte.getTypeMirror());
    }
    version=migration.version();
    priority=migration.priority();
  }
}","public MigrationDefinition(ProcessorManager processorManager,TypeElement typeElement){
  super(typeElement,processorManager);
  setOutputClassName(""String_Node_Str"");
  Migration migration=typeElement.getAnnotation(Migration.class);
  if (migration == null) {
    processorManager.logError(""String_Node_Str"" + typeElement);
  }
 else {
    try {
      migration.database();
    }
 catch (    MirroredTypeException mte) {
      databaseName=TypeName.get(mte.getTypeMirror());
    }
    version=migration.version();
    priority=migration.priority();
    List<? extends Element> elements=typeElement.getEnclosedElements();
    for (    Element element : elements) {
      if (element instanceof ExecutableElement && element.getSimpleName().toString().equals(""String_Node_Str"")) {
        if (!StringUtils.isNullOrEmpty(constructorName)) {
          manager.logError(MigrationDefinition.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (((ExecutableElement)element).getParameters().isEmpty()) {
          constructorName=""String_Node_Str"";
        }
 else         if (((ExecutableElement)element).getParameters().size() == 1) {
          List<? extends Element> params=((ExecutableElement)element).getParameters();
          Element param=params.get(0);
          TypeName type=TypeName.get(param.asType());
          if (type instanceof ParameterizedTypeName && ((ParameterizedTypeName)type).rawType.equals(ClassName.get(Class.class))) {
            TypeName containedType=((ParameterizedTypeName)type).typeArguments.get(0);
            constructorName=CodeBlock.builder().add(""String_Node_Str"",containedType).build().toString();
          }
 else {
            manager.logError(MigrationDefinition.class,""String_Node_Str"" + ""String_Node_Str"",typeElement,type);
          }
        }
      }
    }
  }
}"
26815,"private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(elementClassName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName);
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.getAdapterClassName());
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.getAdapterClassName());
  }
  builder.addMethod(constructor.build());
}","private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(elementClassName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName,migrationDefinition.getConstructorName());
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.getAdapterClassName());
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(elementClassName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.getAdapterClassName());
  }
  builder.addMethod(constructor.build());
}"
26816,"/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    codeBuilder.add(getColumnAccessString(isModelContainerAdapter,false));
  }
  codeBuilder.add(""String_Node_Str"");
}","/** 
 * @param isModelContainerAdapter
 * @param codeBuilder
 * @return A string without any type conversion for this field.
 */
public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnName);
  if (columnAccess instanceof TypeConverterAccess) {
    TypeConverterAccess converterAccess=((TypeConverterAccess)columnAccess);
    TypeConverterDefinition converterDefinition=converterAccess.typeConverterDefinition;
    if (!isModelContainerAdapter) {
      codeBuilder.add(converterAccess.existingColumnAccess.getColumnAccessString(converterDefinition.getDbTypeName(),containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter,false));
    }
 else {
      codeBuilder.add(CodeBlock.builder().add(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),converterAccess.typeConverterDefinition.getModelTypeName(),containerKeyName).build());
    }
  }
 else {
    String columnAccessString=getColumnAccessString(isModelContainerAdapter,false);
    if (columnAccess instanceof BlobColumnAccess) {
      columnAccessString=columnAccessString.substring(0,columnAccessString.lastIndexOf(""String_Node_Str""));
    }
    codeBuilder.add(columnAccessString);
  }
  codeBuilder.add(""String_Node_Str"");
}"
26817,"@Override public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  if (!(columnAccess instanceof TypeConverterAccess)) {
    String origStatement=getColumnAccessString(isModelContainerAdapter,false);
    if (isPrimaryKey) {
      TableDefinition referenced=manager.getTableDefinition(tableDefinition.databaseDefinition.elementTypeName,referencedTableClassName);
      String statement=""String_Node_Str"";
      String variableName=""String_Node_Str"" + elementName;
      TypeName typeName=elementTypeName;
      if (isModelContainerAdapter) {
        typeName=ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER,elementTypeName,WildcardTypeName.subtypeOf(Object.class));
      }
      codeBuilder.addStatement(""String_Node_Str"",typeName,variableName,typeName,origStatement);
      codeBuilder.beginControlFlow(""String_Node_Str"",variableName);
      CodeBlock.Builder elseBuilder=CodeBlock.builder();
      for (      ForeignKeyReferenceDefinition referenceDefinition : getForeignKeyReferenceDefinitionList()) {
        if (isModelContainer || isModelContainerAdapter) {
          String method=SQLiteHelper.getModelContainerMethod(referenceDefinition.columnClassName);
          if (method == null) {
            method=""String_Node_Str"";
          }
          statement=String.format(""String_Node_Str"",variableName,method,referenced.outputClassName,referenceDefinition.foreignColumnName);
        }
 else         if (isModel) {
          statement=referenceDefinition.getPrimaryReferenceString(isModelContainerAdapter);
        }
 else {
          statement=origStatement;
        }
        codeBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,statement);
        elseBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,referenceDefinition.columnClassName,DefinitionUtils.getDefaultValueString(referenceDefinition.columnClassName));
      }
      codeBuilder.nextControlFlow(""String_Node_Str"");
      codeBuilder.add(elseBuilder.build());
      codeBuilder.endControlFlow();
    }
  }
 else {
    super.appendPropertyComparisonAccessStatement(isModelContainerAdapter,codeBuilder);
  }
}","@Override public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  if (nonModelColumn || columnAccess instanceof TypeConverterAccess) {
    super.appendPropertyComparisonAccessStatement(isModelContainerAdapter,codeBuilder);
  }
 else {
    String origStatement=getColumnAccessString(isModelContainerAdapter,false);
    if (isPrimaryKey) {
      TableDefinition referenced=manager.getTableDefinition(tableDefinition.databaseDefinition.elementTypeName,referencedTableClassName);
      String statement=""String_Node_Str"";
      String variableName=""String_Node_Str"" + elementName;
      TypeName typeName=elementTypeName;
      if (isModelContainerAdapter) {
        typeName=ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER,elementTypeName,WildcardTypeName.subtypeOf(Object.class));
      }
      codeBuilder.addStatement(""String_Node_Str"",typeName,variableName,typeName,origStatement);
      codeBuilder.beginControlFlow(""String_Node_Str"",variableName);
      CodeBlock.Builder elseBuilder=CodeBlock.builder();
      for (      ForeignKeyReferenceDefinition referenceDefinition : getForeignKeyReferenceDefinitionList()) {
        if (isModelContainer || isModelContainerAdapter) {
          String method=SQLiteHelper.getModelContainerMethod(referenceDefinition.columnClassName);
          if (method == null) {
            method=""String_Node_Str"";
          }
          statement=String.format(""String_Node_Str"",variableName,method,referenced.outputClassName,referenceDefinition.foreignColumnName);
        }
 else         if (isModel) {
          statement=referenceDefinition.getPrimaryReferenceString(isModelContainerAdapter);
        }
 else {
          statement=origStatement;
        }
        codeBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,statement);
        elseBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,referenceDefinition.columnClassName,DefinitionUtils.getDefaultValueString(referenceDefinition.columnClassName));
      }
      codeBuilder.nextControlFlow(""String_Node_Str"");
      codeBuilder.add(elseBuilder.build());
      codeBuilder.endControlFlow();
    }
  }
}"
26818,"/** 
 * If   {@link ForeignKey} has no {@link ForeignKeyReference}s, we use the primary key the referenced table. We do this post-evaluation so all of the   {@link TableDefinition} can be generated.
 */
private void checkNeedsReferences(){
  TableDefinition referencedTableDefinition=manager.getTableDefinition(tableDefinition.databaseTypeName,referencedTableClassName);
  if (referencedTableDefinition == null) {
    manager.logError(""String_Node_Str"" + ""String_Node_Str"",referencedTableClassName,tableDefinition.tableName,tableDefinition.databaseTypeName);
  }
 else {
    if (needsReferences) {
      List<ColumnDefinition> primaryColumns=referencedTableDefinition.getPrimaryColumnDefinitions();
      for (      ColumnDefinition primaryColumn : primaryColumns) {
        ForeignKeyReferenceDefinition foreignKeyReferenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,primaryColumn,columnAccess,this);
        foreignKeyReferenceDefinitionList.add(foreignKeyReferenceDefinition);
      }
      if (nonModelColumn) {
        columnName=foreignKeyReferenceDefinitionList.get(0).columnName;
      }
      needsReferences=false;
    }
  }
}","/** 
 * If   {@link ForeignKey} has no {@link ForeignKeyReference}s, we use the primary key the referenced table. We do this post-evaluation so all of the   {@link TableDefinition} can be generated.
 */
private void checkNeedsReferences(){
  TableDefinition referencedTableDefinition=manager.getTableDefinition(tableDefinition.databaseTypeName,referencedTableClassName);
  if (referencedTableDefinition == null) {
    manager.logError(""String_Node_Str"" + ""String_Node_Str"",referencedTableClassName,tableDefinition.tableName,tableDefinition.databaseTypeName);
  }
 else {
    if (needsReferences) {
      List<ColumnDefinition> primaryColumns=referencedTableDefinition.getPrimaryColumnDefinitions();
      for (      ColumnDefinition primaryColumn : primaryColumns) {
        ForeignKeyReferenceDefinition foreignKeyReferenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,primaryColumn,columnAccess,this,primaryColumns.size());
        foreignKeyReferenceDefinitionList.add(foreignKeyReferenceDefinition);
      }
      if (nonModelColumn) {
        columnName=foreignKeyReferenceDefinitionList.get(0).columnName;
      }
      needsReferences=false;
    }
  }
}"
26819,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(tableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(ClassNames.CONDITION_GROUP);
  CodeBlock.Builder code=CodeBlock.builder().add(""String_Node_Str"",ClassNames.CONDITION_GROUP);
  for (  ColumnDefinition columnDefinition : tableDefinition.getPrimaryColumnDefinitions()) {
    code.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnDefinition.columnName,columnDefinition.getPropertyComparisonAccessStatement(isModelContainerAdapter));
  }
  methodBuilder.addCode(code.addStatement(""String_Node_Str"").build());
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(tableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(ClassNames.CONDITION_GROUP);
  CodeBlock.Builder code=CodeBlock.builder();
  code.add(""String_Node_Str"",ClassNames.CONDITION_GROUP);
  for (  ColumnDefinition columnDefinition : tableDefinition.getPrimaryColumnDefinitions()) {
    CodeBlock.Builder codeBuilder=CodeBlock.builder();
    columnDefinition.appendPropertyComparisonAccessStatement(isModelContainerAdapter,codeBuilder);
    code.add(codeBuilder.build());
  }
  methodBuilder.addCode(code.addStatement(""String_Node_Str"").build());
  return methodBuilder.build();
}"
26820,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).returns(ClassName.get(String.class));
  CodeBlock.Builder creationBuilder=CodeBlock.builder().add(""String_Node_Str"").add(QueryBuilder.quote(tableDefinition.tableName)).add(""String_Node_Str"");
  for (int i=0; i < tableDefinition.getColumnDefinitions().size(); i++) {
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition columnDefinition=tableDefinition.getColumnDefinitions().get(i);
    creationBuilder.add(columnDefinition.getCreationName());
  }
  for (  UniqueGroupsDefinition definition : tableDefinition.uniqueGroupsDefinitions) {
    if (!definition.columnDefinitionList.isEmpty()) {
      creationBuilder.add(definition.getCreationName());
    }
  }
  int primarySize=tableDefinition.getPrimaryColumnDefinitions().size();
  for (int i=0; i < primarySize; i++) {
    if (i == 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition primaryDefinition=tableDefinition.getPrimaryColumnDefinitions().get(i);
    creationBuilder.add(primaryDefinition.getCreationName());
    if (i == primarySize - 1) {
      creationBuilder.add(""String_Node_Str"");
    }
  }
  int foreignSize=tableDefinition.foreignKeyDefinitions.size();
  List<CodeBlock> foreignKeyBlocks=new ArrayList<>();
  List<CodeBlock> tableNameBlocks=new ArrayList<>();
  List<CodeBlock> referenceKeyBlocks=new ArrayList<>();
  for (int i=0; i < foreignSize; i++) {
    CodeBlock.Builder foreignKeyBuilder=CodeBlock.builder();
    CodeBlock.Builder referenceBuilder=CodeBlock.builder();
    ForeignKeyColumnDefinition foreignKeyColumnDefinition=tableDefinition.foreignKeyDefinitions.get(i);
    foreignKeyBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        foreignKeyBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      foreignKeyBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.columnName));
    }
    foreignKeyBuilder.add(""String_Node_Str"");
    foreignKeyBlocks.add(foreignKeyBuilder.build());
    tableNameBlocks.add(CodeBlock.builder().add(""String_Node_Str"",ClassNames.FLOW_MANAGER,foreignKeyColumnDefinition.referencedTableClassName).build());
    referenceBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        referenceBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      referenceBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.foreignColumnName));
    }
    referenceBuilder.add(""String_Node_Str"",foreignKeyColumnDefinition.onUpdate.name().replace(""String_Node_Str"",""String_Node_Str""),foreignKeyColumnDefinition.onDelete.name().replace(""String_Node_Str"",""String_Node_Str""));
    referenceKeyBlocks.add(referenceBuilder.build());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder().add(""String_Node_Str"",creationBuilder.build().toString());
  if (foreignSize > 0) {
    for (int i=0; i < foreignSize; i++) {
      codeBuilder.add(""String_Node_Str"",foreignKeyBlocks.get(i),tableNameBlocks.get(i),referenceKeyBlocks.get(i));
    }
  }
  codeBuilder.add(""String_Node_Str"",""String_Node_Str"").add(""String_Node_Str"");
  methodBuilder.addCode(codeBuilder.build());
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).returns(ClassName.get(String.class));
  CodeBlock.Builder creationBuilder=CodeBlock.builder().add(""String_Node_Str"").add(QueryBuilder.quote(tableDefinition.tableName)).add(""String_Node_Str"");
  for (int i=0; i < tableDefinition.getColumnDefinitions().size(); i++) {
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition columnDefinition=tableDefinition.getColumnDefinitions().get(i);
    creationBuilder.add(columnDefinition.getCreationName());
  }
  for (  UniqueGroupsDefinition definition : tableDefinition.uniqueGroupsDefinitions) {
    if (!definition.columnDefinitionList.isEmpty()) {
      creationBuilder.add(definition.getCreationName());
    }
  }
  int primarySize=tableDefinition.getPrimaryColumnDefinitions().size();
  for (int i=0; i < primarySize; i++) {
    if (i == 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition primaryDefinition=tableDefinition.getPrimaryColumnDefinitions().get(i);
    creationBuilder.add(primaryDefinition.getPrimaryKeyName());
    if (i == primarySize - 1) {
      creationBuilder.add(""String_Node_Str"");
    }
  }
  int foreignSize=tableDefinition.foreignKeyDefinitions.size();
  List<CodeBlock> foreignKeyBlocks=new ArrayList<>();
  List<CodeBlock> tableNameBlocks=new ArrayList<>();
  List<CodeBlock> referenceKeyBlocks=new ArrayList<>();
  for (int i=0; i < foreignSize; i++) {
    CodeBlock.Builder foreignKeyBuilder=CodeBlock.builder();
    CodeBlock.Builder referenceBuilder=CodeBlock.builder();
    ForeignKeyColumnDefinition foreignKeyColumnDefinition=tableDefinition.foreignKeyDefinitions.get(i);
    foreignKeyBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        foreignKeyBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      foreignKeyBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.columnName));
    }
    foreignKeyBuilder.add(""String_Node_Str"");
    foreignKeyBlocks.add(foreignKeyBuilder.build());
    tableNameBlocks.add(CodeBlock.builder().add(""String_Node_Str"",ClassNames.FLOW_MANAGER,foreignKeyColumnDefinition.referencedTableClassName).build());
    referenceBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        referenceBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      referenceBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.foreignColumnName));
    }
    referenceBuilder.add(""String_Node_Str"",foreignKeyColumnDefinition.onUpdate.name().replace(""String_Node_Str"",""String_Node_Str""),foreignKeyColumnDefinition.onDelete.name().replace(""String_Node_Str"",""String_Node_Str""));
    referenceKeyBlocks.add(referenceBuilder.build());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder().add(""String_Node_Str"",creationBuilder.build().toString());
  if (foreignSize > 0) {
    for (int i=0; i < foreignSize; i++) {
      codeBuilder.add(""String_Node_Str"",foreignKeyBlocks.get(i),tableNameBlocks.get(i),referenceKeyBlocks.get(i));
    }
  }
  codeBuilder.add(""String_Node_Str"",""String_Node_Str"").add(""String_Node_Str"");
  methodBuilder.addCode(codeBuilder.build());
  return methodBuilder.build();
}"
26821,"@Override public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  if (!(columnAccess instanceof TypeConverterAccess)) {
    String origStatement=getColumnAccessString(isModelContainerAdapter,false);
    if (isPrimaryKey) {
      TableDefinition referenced=manager.getTableDefinition(tableDefinition.databaseDefinition.elementTypeName,referencedTableClassName);
      String statement=""String_Node_Str"";
      for (      ForeignKeyReferenceDefinition referenceDefinition : getForeignKeyReferenceDefinitionList()) {
        if (isModelContainer) {
          String method=SQLiteHelper.getModelContainerMethod(referenceDefinition.columnClassName);
          if (method == null) {
            method=""String_Node_Str"";
          }
          statement=String.format(""String_Node_Str"",origStatement,origStatement,method,referenced.outputClassName,referenceDefinition.foreignColumnName);
        }
 else         if (isModel) {
          statement=String.format(""String_Node_Str"",origStatement,referenceDefinition.getPrimaryReferenceString(isModelContainerAdapter));
        }
 else {
          statement=origStatement;
        }
        codeBuilder.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,statement);
      }
    }
  }
 else {
    super.appendPropertyComparisonAccessStatement(isModelContainerAdapter,codeBuilder);
  }
}","@Override public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter,CodeBlock.Builder codeBuilder){
  if (!(columnAccess instanceof TypeConverterAccess)) {
    String origStatement=getColumnAccessString(isModelContainerAdapter,false);
    if (isPrimaryKey) {
      TableDefinition referenced=manager.getTableDefinition(tableDefinition.databaseDefinition.elementTypeName,referencedTableClassName);
      String statement=""String_Node_Str"";
      String variableName=""String_Node_Str"" + elementName;
      TypeName typeName=elementTypeName;
      if (isModelContainerAdapter) {
        typeName=ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER,elementTypeName,WildcardTypeName.subtypeOf(Object.class));
      }
      codeBuilder.addStatement(""String_Node_Str"",typeName,variableName,typeName,origStatement);
      codeBuilder.beginControlFlow(""String_Node_Str"",variableName);
      CodeBlock.Builder elseBuilder=CodeBlock.builder();
      for (      ForeignKeyReferenceDefinition referenceDefinition : getForeignKeyReferenceDefinitionList()) {
        if (isModelContainer || isModelContainerAdapter) {
          String method=SQLiteHelper.getModelContainerMethod(referenceDefinition.columnClassName);
          if (method == null) {
            method=""String_Node_Str"";
          }
          statement=String.format(""String_Node_Str"",variableName,method,referenced.outputClassName,referenceDefinition.foreignColumnName);
        }
 else         if (isModel) {
          statement=referenceDefinition.getPrimaryReferenceString(isModelContainerAdapter);
        }
 else {
          statement=origStatement;
        }
        codeBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,statement);
        elseBuilder.addStatement(""String_Node_Str"",tableDefinition.getPropertyClassName(),referenceDefinition.columnName,referenceDefinition.columnClassName);
      }
      codeBuilder.nextControlFlow(""String_Node_Str"");
      codeBuilder.add(elseBuilder.build());
      codeBuilder.endControlFlow();
    }
  }
 else {
    super.appendPropertyComparisonAccessStatement(isModelContainerAdapter,codeBuilder);
  }
}"
26822,"@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  ContentProviderValidator validator=new ContentProviderValidator();
  Collection<ContentProviderDefinition> contentProviderDefinitions=providerMap.values();
  for (  ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
    if (validator.validate(processorManager,contentProviderDefinition)) {
      WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
    }
  }
  List<DatabaseDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseDefinition databaseDefinition : databaseDefinitions) {
    try {
      JavaFile.builder(databaseDefinition.packageName,databaseDefinition.getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      Collection<ModelContainerDefinition> modelContainerDefinitions=databaseDefinition.modelContainerDefinitionMap.values();
      for (      ModelContainerDefinition modelContainerDefinition : modelContainerDefinitions) {
        WriterUtils.writeBaseDefinition(modelContainerDefinition,processorManager);
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  try {
    JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
  }
 catch (  IOException e) {
  }
}","@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  ContentProviderValidator validator=new ContentProviderValidator();
  Collection<ContentProviderDefinition> contentProviderDefinitions=providerMap.values();
  for (  ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
    if (validator.validate(processorManager,contentProviderDefinition)) {
      WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
    }
  }
  List<DatabaseDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseDefinition databaseDefinition : databaseDefinitions) {
    try {
      Collection<ManyToManyDefinition> manyToManyDefinitions=databaseDefinition.manyToManyDefinitionMap.values();
      for (      ManyToManyDefinition manyToMany : manyToManyDefinitions) {
        WriterUtils.writeBaseDefinition(manyToMany,processorManager);
      }
      if (!manyToManyDefinitions.isEmpty()) {
        manyToManyDefinitions.clear();
        continue;
      }
      JavaFile.builder(databaseDefinition.packageName,databaseDefinition.getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
        tableDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
      }
      tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      Collection<ModelContainerDefinition> modelContainerDefinitions=databaseDefinition.modelContainerDefinitionMap.values();
      for (      ModelContainerDefinition modelContainerDefinition : modelContainerDefinitions) {
        WriterUtils.writeBaseDefinition(modelContainerDefinition,processorManager);
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
        modelViewDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
        modelViewDefinition.writeViewTable();
      }
      Collection<QueryModelDefinition> queryModelDefinitions=databaseDefinition.queryModelDefinitionMap.values();
      for (      QueryModelDefinition queryModelDefinition : queryModelDefinitions) {
        WriterUtils.writeBaseDefinition(queryModelDefinition,processorManager);
        queryModelDefinition.writePackageHelper(processorManager.getProcessingEnvironment());
        queryModelDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}"
26823,"/** 
 * @return Starts an arbitrary clause of conditions to use, that when included in other {@link SQLCondition}, does not append paranthesis to group it.
 */
public static ConditionGroup nonGroupingClause(){
  return new ConditionGroup();
}","/** 
 * @return Starts an arbitrary clause of conditions to use, that when included in other {@link SQLCondition}, does not append parenthesis to group it.
 */
public static ConditionGroup nonGroupingClause(){
  return new ConditionGroup();
}"
26824,"public void testSelectStatement(){
  Where<TestModel1> where=new Select(name).from(TestModel1.class).where(name.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where.getQuery().trim());
  where.query();
  Where<TestModel3> where1=new Select(name,type).from(TestModel3.class).where(name.is(""String_Node_Str""),type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where1.getQuery().trim());
  Where<TestModel3> where2=new Select().distinct().from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where2.getQuery().trim());
  where2.query();
  Where<TestModel3> where3=new Select(Method.count()).from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where3.getQuery().trim());
  where3.query();
  Where<TestModel3> where4=new Select().from(TestModel3.class).where(name.eq(""String_Node_Str"")).and(type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where4.getQuery().trim());
  Where<TestModel3> where6=new Select(Method.count(type)).from(TestModel3.class).orderBy(name,true).orderBy(type,true);
  assertEquals(""String_Node_Str"",where6.getQuery().trim());
  String query=SQLite.select().from(TestModel3.class).where(TestModel3_Table.type.in(SQLite.select(TestModel2_Table.name).from(TestModel2.class).where(TestModel2_Table.name.is(""String_Node_Str"")))).getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
  String operationalQuery=SQLite.select(new OperationalMethod(Method.sum(TestModel3_Table.name)).minus(Method.sum(TestModel3_Table.type)).as(""String_Node_Str""),TestModel3_Table.type).from(TestModel3.class).getQuery();
  assertEquals(""String_Node_Str"",operationalQuery.trim());
}","public void testSelectStatement(){
  Where<TestModel1> where=new Select(name).from(TestModel1.class).where(name.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where.getQuery().trim());
  where.query();
  Where<TestModel3> where1=new Select(name,type).from(TestModel3.class).where(name.is(""String_Node_Str""),type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where1.getQuery().trim());
  Where<TestModel3> where2=new Select().distinct().from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where2.getQuery().trim());
  where2.query();
  Where<TestModel3> where3=new Select(Method.count()).from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where3.getQuery().trim());
  where3.query();
  Where<TestModel3> where4=new Select().from(TestModel3.class).where(name.eq(""String_Node_Str"")).and(type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where4.getQuery().trim());
  Where<TestModel3> where6=new Select(Method.count(type)).from(TestModel3.class).orderBy(name,true).orderBy(type,true);
  assertEquals(""String_Node_Str"",where6.getQuery().trim());
  String query=SQLite.select().from(TestModel3.class).where(TestModel3_Table.type.in(SQLite.select(TestModel2_Table.name).from(TestModel2.class).where(TestModel2_Table.name.is(""String_Node_Str"")))).getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
  String operationalQuery=SQLite.select(new Method(Method.sum(TestModel3_Table.name)).minus(Method.sum(TestModel3_Table.type)).as(""String_Node_Str""),TestModel3_Table.type).from(TestModel3.class).getQuery();
  assertEquals(""String_Node_Str"",operationalQuery.trim());
  String methodQuery=SQLite.select(Method.max(TestModel3_Table.type).as(""String_Node_Str"")).from(TestModel3.class).getQuery();
  assertEquals(""String_Node_Str"",methodQuery.trim());
}"
26825,"public Method(String methodName,IProperty... properties){
  super(null,methodName);
  Collections.addAll(propertyList,properties);
  if (propertyList.isEmpty()) {
    propertyList.add(Property.ALL_PROPERTY);
  }
}","public Method(String methodName,IProperty... properties){
  super(null,(String)null);
  methodProperty=new Property(null,new NameAlias(methodName,false).tickName(false));
  if (properties.length == 0) {
    propertyList.add(Property.ALL_PROPERTY);
  }
 else {
    for (    IProperty property : properties) {
      addProperty(property);
    }
  }
}"
26826,"/** 
 * Allows adding a property to the   {@link Method}. Will remove the   {@link Property#ALL_PROPERTY}if it exists as first item.
 * @param property The property to add.
 */
protected void addProperty(@NonNull IProperty property){
  propertyList.add(property);
}","/** 
 * Allows adding a property to the   {@link Method}. Will remove the   {@link Property#ALL_PROPERTY}if it exists as first item.
 * @param property The property to add.
 */
public Method addProperty(@NonNull IProperty property){
  if (propertyList.size() == 1 && propertyList.get(0) == Property.ALL_PROPERTY) {
    propertyList.remove(0);
  }
  return append(property,""String_Node_Str"");
}"
26827,"/** 
 * @return The original name of this alias.
 */
@NonNull public String getName(){
  String fullName=""String_Node_Str"";
  if (prefixName != null) {
    fullName+=(tickName ? QueryBuilder.quoteIfNeeded(prefixName) : prefixName) + ""String_Node_Str"";
  }
  fullName+=(tickName ? QueryBuilder.quote(name) : getNamePropertyRaw());
  return fullName;
}","/** 
 * @return The original name of this alias.
 */
@NonNull public String getName(){
  String fullName=""String_Node_Str"";
  if (prefixName != null) {
    fullName+=(tickName ? QueryBuilder.quoteIfNeeded(prefixName) : prefixName) + ""String_Node_Str"";
  }
  if (name != null) {
    fullName+=(tickName ? QueryBuilder.quote(name) : getNamePropertyRaw());
  }
  return fullName;
}"
26828,"@Override public void onCreate(SQLiteDatabase db){
  databaseHelperDelegate.onCreate(SQLCipherDatabase.from(db));
}","@Override public void onCreate(SQLiteDatabase db){
  baseDatabaseHelper.onCreate(SQLCipherDatabase.from(db));
}"
26829,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  databaseHelperDelegate.onUpgrade(SQLCipherDatabase.from(db),oldVersion,newVersion);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  baseDatabaseHelper.onUpgrade(SQLCipherDatabase.from(db),oldVersion,newVersion);
}"
26830,"@Override public void onOpen(SQLiteDatabase db){
  databaseHelperDelegate.onOpen(SQLCipherDatabase.from(db));
}","@Override public void onOpen(SQLiteDatabase db){
  baseDatabaseHelper.onOpen(SQLCipherDatabase.from(db));
}"
26831,"public BackupHelper(Context context,String name,int version){
  super(context,name,null,version);
}","public BackupHelper(Context context,String name,int version,BaseDatabaseDefinition databaseDefinition){
  super(context,name,null,version);
  this.baseDatabaseHelper=new BaseDatabaseHelper(databaseDefinition);
}"
26832,"public SQLCipherOpenHelper(BaseDatabaseDefinition databaseDefinition,DatabaseHelperListener listener){
  super(FlowManager.getContext(),databaseDefinition.isInMemory() ? null : databaseDefinition.getDatabaseFileName(),null,databaseDefinition.getDatabaseVersion());
  OpenHelper backupHelper=null;
  if (databaseDefinition.backupEnabled()) {
    backupHelper=new BackupHelper(FlowManager.getContext(),DatabaseHelperDelegate.getTempDbFileName(databaseDefinition),databaseDefinition.getDatabaseVersion()){
      @Override public void onOpen(      SQLiteDatabase db){
        SQLCipherOpenHelper.this.onOpen(db);
      }
      @Override public void onCreate(      SQLiteDatabase db){
        SQLCipherOpenHelper.this.onCreate(db);
      }
      @Override public void onUpgrade(      SQLiteDatabase db,      int oldVersion,      int newVersion){
        SQLCipherOpenHelper.this.onUpgrade(db,oldVersion,newVersion);
      }
    }
;
  }
  databaseHelperDelegate=new DatabaseHelperDelegate(listener,databaseDefinition,backupHelper);
}","public SQLCipherOpenHelper(BaseDatabaseDefinition databaseDefinition,DatabaseHelperListener listener){
  super(FlowManager.getContext(),databaseDefinition.isInMemory() ? null : databaseDefinition.getDatabaseFileName(),null,databaseDefinition.getDatabaseVersion());
  OpenHelper backupHelper=null;
  if (databaseDefinition.backupEnabled()) {
    backupHelper=new BackupHelper(FlowManager.getContext(),DatabaseHelperDelegate.getTempDbFileName(databaseDefinition),databaseDefinition.getDatabaseVersion(),databaseDefinition);
  }
  databaseHelperDelegate=new DatabaseHelperDelegate(listener,databaseDefinition,backupHelper);
}"
26833,"public ForeignKeyColumnDefinition(ProcessorManager manager,TableDefinition tableDefinition,Element typeElement,boolean isPackagePrivate){
  super(manager,typeElement,tableDefinition,isPackagePrivate);
  this.tableDefinition=tableDefinition;
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (referencedTableClassName.equals(TypeName.OBJECT)) {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (args.size() > 0) {
        referencedTableClassName=ClassName.bestGuess(args.get(0).toString());
        isModelContainer=true;
      }
    }
 else {
      referencedTableClassName=ClassName.bestGuess(elementTypeName.toString());
    }
  }
  if (referencedTableClassName == null) {
    manager.logError(""String_Node_Str"",typeElement,elementTypeName);
  }
  TypeElement element=manager.getElements().getTypeElement(manager.getTypeUtils().erasure(typeElement.asType()).toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  isModelContainer=isModelContainer || ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL_CONTAINER.toString(),element);
  nonModelColumn=!isModel && !isModelContainer;
  saveForeignKeyModel=foreignKey.saveForeignKeyModel();
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      boolean useIs=elementTypeName.box().equals(TypeName.BOOLEAN.box()) && tableDefinition.useIsForPrivateBooleans;
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class),useIs);
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  if (references.length == 0) {
    needsReferences=true;
  }
 else {
    for (    ForeignKeyReference reference : references) {
      ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess,this);
      foreignKeyReferenceDefinitionList.add(referenceDefinition);
    }
  }
}","public ForeignKeyColumnDefinition(ProcessorManager manager,TableDefinition tableDefinition,Element typeElement,boolean isPackagePrivate){
  super(manager,typeElement,tableDefinition,isPackagePrivate);
  this.tableDefinition=tableDefinition;
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (referencedTableClassName.equals(TypeName.OBJECT)) {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (args.size() > 0) {
        referencedTableClassName=ClassName.bestGuess(args.get(0).toString());
        isModelContainer=true;
      }
    }
 else {
      referencedTableClassName=ClassName.bestGuess(elementTypeName.toString());
    }
  }
  if (referencedTableClassName == null) {
    manager.logError(""String_Node_Str"",typeElement,elementTypeName);
  }
  TypeElement element=manager.getElements().getTypeElement(manager.getTypeUtils().erasure(typeElement.asType()).toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  isModelContainer=isModelContainer || ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL_CONTAINER.toString(),element);
  isForeignKeyContainer=isModelContainer && ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.FOREIGN_KEY_CONTAINER.toString(),element);
  nonModelColumn=!isModel && !isModelContainer;
  saveForeignKeyModel=foreignKey.saveForeignKeyModel();
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      boolean useIs=elementTypeName.box().equals(TypeName.BOOLEAN.box()) && tableDefinition.useIsForPrivateBooleans;
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class),useIs);
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  if (references.length == 0) {
    needsReferences=true;
  }
 else {
    for (    ForeignKeyReference reference : references) {
      ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess,this);
      foreignKeyReferenceDefinitionList.add(referenceDefinition);
    }
  }
}"
26834,"@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter,boolean putNullForContainerAdapter,boolean endNonPrimitiveIf){
  if (nonModelColumn) {
    return super.getLoadFromCursorMethod(isModelContainerAdapter,putNullForContainerAdapter,endNonPrimitiveIf);
  }
 else {
    checkNeedsReferences();
    CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
    CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
    CodeBlock.Builder selectBuilder=CodeBlock.builder();
    for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
      String indexName=""String_Node_Str"" + referenceDefinition.columnName;
      builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
      if (i > 0) {
        ifNullBuilder.add(""String_Node_Str"");
      }
      ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
      selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,DefinitionUtils.getLoadFromCursorMethodString(referenceDefinition.columnClassName,referenceDefinition.columnAccess),indexName).build());
    }
    ifNullBuilder.add(""String_Node_Str"");
    builder.beginControlFlow(ifNullBuilder.build().toString());
    CodeBlock.Builder initializer=CodeBlock.builder();
    initializer.add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build());
    if (!isModelContainerAdapter && !isModelContainer) {
      initializer.add(""String_Node_Str"");
    }
 else {
      if (isModelContainerAdapter) {
        initializer.add(""String_Node_Str"",ModelUtils.getVariable(true),ModelUtils.getVariable(true),referencedTableClassName);
      }
 else {
        initializer.add(""String_Node_Str"",elementTypeName,referencedTableClassName);
      }
    }
    builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),initializer.build(),false));
    boolean putDefaultValue=putNullForContainerAdapter;
    if (putContainerDefaultValue != putDefaultValue && isModelContainerAdapter) {
      putDefaultValue=putContainerDefaultValue;
    }
    if (putDefaultValue) {
      builder.nextControlFlow(""String_Node_Str"");
      builder.addStatement(""String_Node_Str"",ModelUtils.getVariable(true),columnName);
    }
    if (endNonPrimitiveIf) {
      builder.endControlFlow();
    }
    return builder.build();
  }
}","@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter,boolean putNullForContainerAdapter,boolean endNonPrimitiveIf){
  if (nonModelColumn) {
    return super.getLoadFromCursorMethod(isModelContainerAdapter,putNullForContainerAdapter,endNonPrimitiveIf);
  }
 else {
    checkNeedsReferences();
    CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
    CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
    CodeBlock.Builder selectBuilder=CodeBlock.builder();
    String foreignKeyContainerRefName=""String_Node_Str"" + columnName;
    for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
      String indexName=""String_Node_Str"" + referenceDefinition.columnName;
      builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
      if (i > 0) {
        ifNullBuilder.add(""String_Node_Str"");
      }
      ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
      CodeBlock loadFromCursorBlock=CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,DefinitionUtils.getLoadFromCursorMethodString(referenceDefinition.columnClassName,referenceDefinition.columnAccess),indexName).build();
      ClassName generatedTableRef=ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + tableDefinition.databaseDefinition.classSeparator + TableDefinition.DBFLOW_TABLE_TAG);
      if (!isForeignKeyContainer) {
        selectBuilder.add(""String_Node_Str"",generatedTableRef,referenceDefinition.foreignColumnName,loadFromCursorBlock);
      }
 else {
        selectBuilder.add(""String_Node_Str"",foreignKeyContainerRefName,referenceDefinition.foreignColumnName,loadFromCursorBlock);
      }
    }
    ifNullBuilder.add(""String_Node_Str"");
    builder.beginControlFlow(ifNullBuilder.build().toString());
    CodeBlock.Builder initializer=CodeBlock.builder();
    if (isForeignKeyContainer) {
      builder.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassNames.FOREIGN_KEY_CONTAINER,referencedTableClassName),foreignKeyContainerRefName,ClassNames.FOREIGN_KEY_CONTAINER,referencedTableClassName);
      builder.add(selectBuilder.build()).add(""String_Node_Str"");
      initializer.add(foreignKeyContainerRefName);
    }
 else {
      initializer.add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build());
      if (!isModelContainerAdapter && !isModelContainer) {
        initializer.add(""String_Node_Str"");
      }
 else {
        if (isModelContainerAdapter) {
          initializer.add(""String_Node_Str"",ModelUtils.getVariable(true),ModelUtils.getVariable(true),referencedTableClassName);
        }
 else {
          initializer.add(""String_Node_Str"",elementTypeName,referencedTableClassName);
        }
      }
    }
    builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),initializer.build(),false));
    boolean putDefaultValue=putNullForContainerAdapter;
    if (putContainerDefaultValue != putDefaultValue && isModelContainerAdapter) {
      putDefaultValue=putContainerDefaultValue;
    }
    if (putDefaultValue) {
      builder.nextControlFlow(""String_Node_Str"");
      builder.addStatement(""String_Node_Str"",ModelUtils.getVariable(true),columnName);
    }
    if (endNonPrimitiveIf) {
      builder.endControlFlow();
    }
    return builder.build();
  }
}"
26835,"public void testJoins(){
  Delete.tables(Company.class,Department.class);
  Company company=new Company();
  company.id=1;
  company.name=""String_Node_Str"";
  company.age=32;
  company.address=""String_Node_Str"";
  company.salary=20000.0;
  company.insert();
  company=new Company();
  company.id=2;
  company.name=""String_Node_Str"";
  company.age=25;
  company.address=""String_Node_Str"";
  company.salary=15000.0;
  company.insert();
  company=new Company();
  company.id=3;
  company.name=""String_Node_Str"";
  company.age=23;
  company.address=""String_Node_Str"";
  company.salary=20000.0;
  company.insert();
  company=new Company();
  company.id=4;
  company.name=""String_Node_Str"";
  company.age=25;
  company.address=""String_Node_Str"";
  company.salary=65000.0;
  company.insert();
  company=new Company();
  company.id=5;
  company.name=""String_Node_Str"";
  company.age=27;
  company.address=""String_Node_Str"";
  company.salary=85000.0;
  company.insert();
  company=new Company();
  company.id=6;
  company.name=""String_Node_Str"";
  company.age=22;
  company.address=""String_Node_Str"";
  company.salary=45000.0;
  company.insert();
  company=new Company();
  company.id=7;
  company.name=""String_Node_Str"";
  company.age=24;
  company.address=""String_Node_Str"";
  company.salary=10000.0;
  company.insert();
  assertEquals(SQLite.select(Method.count()).from(Company.class).count(),7);
  Department department=new Department();
  department.id=1;
  department.dept=""String_Node_Str"";
  department.emp_id=1;
  department.insert();
  department=new Department();
  department.id=2;
  department.dept=""String_Node_Str"";
  department.emp_id=2;
  department.insert();
  department=new Department();
  department.id=3;
  department.dept=""String_Node_Str"";
  department.emp_id=7;
  department.insert();
  assertEquals(SQLite.select(Method.count()).from(Department.class).count(),3);
  From<Company> joinQuery=SQLite.select(Department_Table.emp_id,Company_Table.name,Department_Table.dept).from(Company.class).join(Department.class,Join.JoinType.INNER).on(Company_Table.id.withTable().eq(Department_Table.emp_id.withTable()));
  String query=joinQuery.getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
  List<CompanyDepartmentJoin> companyDepartmentJoins=joinQuery.queryCustomList(CompanyDepartmentJoin.class);
  assertEquals(companyDepartmentJoins.size(),3);
  CompanyDepartmentJoin departmentJoin=companyDepartmentJoins.get(0);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,1);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  departmentJoin=companyDepartmentJoins.get(1);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,2);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  departmentJoin=companyDepartmentJoins.get(2);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,7);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  Delete.tables(Company.class,Department.class);
}","public void testJoins(){
  Delete.tables(Company.class,Department.class);
  Company company=new Company();
  company.id=1;
  company.name=""String_Node_Str"";
  company.age=32;
  company.address=""String_Node_Str"";
  company.salary=20000.0;
  company.insert();
  company=new Company();
  company.id=2;
  company.name=""String_Node_Str"";
  company.age=25;
  company.address=""String_Node_Str"";
  company.salary=15000.0;
  company.insert();
  company=new Company();
  company.id=3;
  company.name=""String_Node_Str"";
  company.age=23;
  company.address=""String_Node_Str"";
  company.salary=20000.0;
  company.insert();
  company=new Company();
  company.id=4;
  company.name=""String_Node_Str"";
  company.age=25;
  company.address=""String_Node_Str"";
  company.salary=65000.0;
  company.insert();
  company=new Company();
  company.id=5;
  company.name=""String_Node_Str"";
  company.age=27;
  company.address=""String_Node_Str"";
  company.salary=85000.0;
  company.insert();
  company=new Company();
  company.id=6;
  company.name=""String_Node_Str"";
  company.age=22;
  company.address=""String_Node_Str"";
  company.salary=45000.0;
  company.insert();
  company=new Company();
  company.id=7;
  company.name=""String_Node_Str"";
  company.age=24;
  company.address=""String_Node_Str"";
  company.salary=10000.0;
  company.insert();
  assertEquals(SQLite.select(Method.count()).from(Company.class).count(),7);
  Department department=new Department();
  department.id=1;
  department.dept=""String_Node_Str"";
  department.emp_id=1;
  department.insert();
  department=new Department();
  department.id=2;
  department.dept=""String_Node_Str"";
  department.emp_id=2;
  department.insert();
  department=new Department();
  department.id=3;
  department.dept=""String_Node_Str"";
  department.emp_id=7;
  department.insert();
  assertEquals(SQLite.select(Method.count()).from(Department.class).count(),3);
  From<Company> joinQuery=SQLite.select(Department_Table.emp_id.withTable(),Company_Table.name,Department_Table.dept).from(Company.class).join(Department.class,Join.JoinType.INNER).on(Company_Table.id.withTable().eq(Department_Table.emp_id.withTable()));
  String query=joinQuery.getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
  List<CompanyDepartmentJoin> companyDepartmentJoins=joinQuery.queryCustomList(CompanyDepartmentJoin.class);
  assertEquals(companyDepartmentJoins.size(),3);
  CompanyDepartmentJoin departmentJoin=companyDepartmentJoins.get(0);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,1);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  departmentJoin=companyDepartmentJoins.get(1);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,2);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  departmentJoin=companyDepartmentJoins.get(2);
  assertEquals(departmentJoin.dept,""String_Node_Str"");
  assertEquals(departmentJoin.emp_id,7);
  assertEquals(departmentJoin.name,""String_Node_Str"");
  Delete.tables(Company.class,Department.class);
}"
26836,"/** 
 * @return The full definition name that this Alias uses to define its definition.E.g: `firstName` AS `FN`.
 */
@NonNull public String getDefinition(){
  StringBuilder definition=new StringBuilder();
  if (prefixName != null) {
    definition.append(tickName ? QueryBuilder.quoteIfNeeded(prefixName) : prefixName).append(""String_Node_Str"");
  }
  definition.append(tickName ? getName() : getNamePropertyRaw());
  if (hasAlias()) {
    definition.append(""String_Node_Str"").append(getAliasName());
  }
  return definition.toString();
}","/** 
 * @return The full definition name that this Alias uses to define its definition.E.g: `firstName` AS `FN`.
 */
@NonNull public String getDefinition(){
  StringBuilder definition=new StringBuilder();
  definition.append(getName());
  if (hasAlias()) {
    definition.append(""String_Node_Str"").append(getAliasName());
  }
  return definition.toString();
}"
26837,"public FlowManagerHolderDefinition(ProcessorManager processorManager){
  this.processorManager=processorManager;
  Map<String,String> options=this.processorManager.getProcessingEnvironment().getOptions();
  if (options.containsKey(OPTION_TARGET_MODULE_NAME))   className=options.get(OPTION_TARGET_MODULE_NAME);
  className+=ClassNames.DATABASE_HOLDER_STATIC_CLASS_NAME;
}","public FlowManagerHolderDefinition(ProcessorManager processorManager){
  this.processorManager=processorManager;
  Map<String,String> options=this.processorManager.getProcessingEnvironment().getOptions();
  if (options.containsKey(OPTION_TARGET_MODULE_NAME)) {
    className=options.get(OPTION_TARGET_MODULE_NAME);
  }
  className+=ClassNames.DATABASE_HOLDER_STATIC_CLASS_NAME;
}"
26838,"/** 
 * @param databaseName The name of the database. Will throw an exception if the database doesn't exist.
 * @return the {@link BaseDatabaseDefinition} for the specified database
 */
public static BaseDatabaseDefinition getDatabase(String databaseName){
  BaseDatabaseDefinition database=globalDatabaseHolder.getDatabase(databaseName);
  if (database != null)   return database;
  throw new InvalidDBConfiguration(""String_Node_Str"" + databaseName + ""String_Node_Str""+ ""String_Node_Str"");
}","/** 
 * @param databaseName The name of the database. Will throw an exception if the database doesn't exist.
 * @return the {@link BaseDatabaseDefinition} for the specified database
 */
public static BaseDatabaseDefinition getDatabase(String databaseName){
  BaseDatabaseDefinition database=globalDatabaseHolder.getDatabase(databaseName);
  if (database != null) {
    return database;
  }
  throw new InvalidDBConfiguration(""String_Node_Str"" + databaseName + ""String_Node_Str""+ ""String_Node_Str"");
}"
26839,"/** 
 * Loading the module Database holder via reflection. This will trigger all creations, updates, and instantiation for each database defined. It is assumed FlowManager.init() is called by the application that uses the module database. This method should only be called if you need to load databases that are part of a module.
 */
public static void initModule(String moduleName){
  loadDatabaseHolder(DEFAULT_DATABASE_HOLDER_PACKAGE_NAME + ""String_Node_Str"" + moduleName+ DEFAULT_DATABASE_HOLDER_NAME);
}","/** 
 * Loading the module Database holder via reflection. This will trigger all creations, updates, and instantiation for each database defined. <p> It is assumed FlowManager.init() is called by the application that uses the module database. This method should only be called if you need to load databases that are part of a module.
 */
public static void initModule(String moduleName){
  loadDatabaseHolder(DEFAULT_DATABASE_HOLDER_PACKAGE_NAME + ""String_Node_Str"" + moduleName+ DEFAULT_DATABASE_HOLDER_NAME);
}"
26840,"/** 
 * @return The database holder, creating if necessary using reflection.
 */
protected static void loadDatabaseHolder(String className){
  if (loadedModules.contains(className))   return;
  try {
    DatabaseHolder dbHolder=(DatabaseHolder)Class.forName(className).newInstance();
    if (dbHolder != null) {
      globalDatabaseHolder.add(dbHolder);
      loadedModules.add(className);
    }
  }
 catch (  Throwable e) {
    throw new ModuleNotFoundException(""String_Node_Str"" + className,e);
  }
}","/** 
 * @return The database holder, creating if necessary using reflection.
 */
protected static void loadDatabaseHolder(String className){
  if (loadedModules.contains(className)) {
    return;
  }
  try {
    DatabaseHolder dbHolder=(DatabaseHolder)Class.forName(className).newInstance();
    if (dbHolder != null) {
      globalDatabaseHolder.add(dbHolder);
      loadedModules.add(className);
    }
  }
 catch (  Throwable e) {
    throw new ModuleNotFoundException(""String_Node_Str"" + className,e);
  }
}"
26841,"public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  if (hasAutoIncrement) {
    InternalAdapterHelper.writeUpdateAutoIncrement(typeBuilder,elementClassName,autoIncrementDefinition,false);
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(elementClassName,ModelUtils.getVariable(false)).addStatement(""String_Node_Str"",autoIncrementDefinition.getColumnAccessString(false,false)).returns(ClassName.get(Number.class)).build());
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)).returns(ClassName.get(String.class)).build());
  }
  if (cachingEnabled) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",true).returns(TypeName.BOOLEAN).build());
    List<ColumnDefinition> primaries=primaryColumnDefinitions;
    if (primaries == null || primaries.isEmpty()) {
      primaries=Lists.newArrayList(autoIncrementDefinition);
    }
    InternalAdapterHelper.writeGetCachingId(typeBuilder,elementClassName,primaries,false);
    MethodSpec.Builder cachingbuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    String columns=""String_Node_Str"";
    for (int i=0; i < primaries.size(); i++) {
      ColumnDefinition column=primaries.get(i);
      if (i > 0) {
        columns+=""String_Node_Str"";
      }
      columns+=""String_Node_Str"" + QueryBuilder.quoteIfNeeded(column.columnName) + ""String_Node_Str"";
    }
    columns+=""String_Node_Str"";
    cachingbuilder.addStatement(columns).returns(ArrayTypeName.of(ClassName.get(String.class)));
    typeBuilder.addMethod(cachingbuilder.build());
    if (cacheSize != Table.DEFAULT_CACHE_SIZE) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",cacheSize).returns(TypeName.INT).build());
    }
    if (!StringUtils.isNullOrEmpty(customCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MODEL_CACHE,elementClassName,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (!StringUtils.isNullOrEmpty(customMultiCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customMultiCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MULTI_KEY_CACHE_CONVERTER,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (foreignKeyDefinitions.size() > 0) {
      MethodSpec.Builder reloadMethod=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(elementClassName,ModelUtils.getVariable(false)).addParameter(ClassNames.CURSOR,LoadFromCursorMethod.PARAM_CURSOR).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
      CodeBlock.Builder loadStatements=CodeBlock.builder();
      for (      ColumnDefinition foreignColumn : foreignKeyDefinitions) {
        CodeBlock.Builder codeBuilder=foreignColumn.getLoadFromCursorMethod(false,false,false).toBuilder();
        if (!foreignColumn.elementTypeName.isPrimitive()) {
          codeBuilder.nextControlFlow(""String_Node_Str"");
          codeBuilder.addStatement(foreignColumn.setColumnAccessString(CodeBlock.builder().add(""String_Node_Str"").build(),false));
          codeBuilder.endControlFlow();
        }
        loadStatements.add(codeBuilder.build());
      }
      reloadMethod.addCode(loadStatements.build());
      typeBuilder.addMethod(reloadMethod.build());
    }
  }
  CustomTypeConverterPropertyMethod customTypeConverterPropertyMethod=new CustomTypeConverterPropertyMethod(this);
  customTypeConverterPropertyMethod.addToType(typeBuilder);
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  customTypeConverterPropertyMethod.addCode(constructorCode);
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"").addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassName.get(String.class),""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",outputClassName,""String_Node_Str"").returns(ClassNames.BASE_PROPERTY).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}","public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  if (hasAutoIncrement) {
    InternalAdapterHelper.writeUpdateAutoIncrement(typeBuilder,elementClassName,autoIncrementDefinition,false);
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(elementClassName,ModelUtils.getVariable(false)).addStatement(""String_Node_Str"",autoIncrementDefinition.getColumnAccessString(false,false)).returns(ClassName.get(Number.class)).build());
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)).returns(ClassName.get(String.class)).build());
  }
  if (cachingEnabled) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",true).returns(TypeName.BOOLEAN).build());
    List<ColumnDefinition> primaries=primaryColumnDefinitions;
    if (primaries == null || primaries.isEmpty()) {
      primaries=Lists.newArrayList(autoIncrementDefinition);
    }
    InternalAdapterHelper.writeGetCachingId(typeBuilder,elementClassName,primaries,false);
    MethodSpec.Builder cachingbuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    String columns=""String_Node_Str"";
    for (int i=0; i < primaries.size(); i++) {
      ColumnDefinition column=primaries.get(i);
      if (i > 0) {
        columns+=""String_Node_Str"";
      }
      columns+=""String_Node_Str"" + QueryBuilder.quoteIfNeeded(column.columnName) + ""String_Node_Str"";
    }
    columns+=""String_Node_Str"";
    cachingbuilder.addStatement(columns).returns(ArrayTypeName.of(ClassName.get(String.class)));
    typeBuilder.addMethod(cachingbuilder.build());
    if (cacheSize != Table.DEFAULT_CACHE_SIZE) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",cacheSize).returns(TypeName.INT).build());
    }
    if (!StringUtils.isNullOrEmpty(customCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MODEL_CACHE,elementClassName,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (!StringUtils.isNullOrEmpty(customMultiCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customMultiCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MULTI_KEY_CACHE_CONVERTER,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    MethodSpec.Builder reloadMethod=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(elementClassName,ModelUtils.getVariable(false)).addParameter(ClassNames.CURSOR,LoadFromCursorMethod.PARAM_CURSOR).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    CodeBlock.Builder loadStatements=CodeBlock.builder();
    for (    ColumnDefinition foreignColumn : foreignKeyDefinitions) {
      CodeBlock.Builder codeBuilder=foreignColumn.getLoadFromCursorMethod(false,false,false).toBuilder();
      if (!foreignColumn.elementTypeName.isPrimitive()) {
        codeBuilder.nextControlFlow(""String_Node_Str"");
        codeBuilder.addStatement(foreignColumn.setColumnAccessString(CodeBlock.builder().add(""String_Node_Str"").build(),false));
        codeBuilder.endControlFlow();
      }
      loadStatements.add(codeBuilder.build());
    }
    reloadMethod.addCode(loadStatements.build());
    typeBuilder.addMethod(reloadMethod.build());
  }
  CustomTypeConverterPropertyMethod customTypeConverterPropertyMethod=new CustomTypeConverterPropertyMethod(this);
  customTypeConverterPropertyMethod.addToType(typeBuilder);
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  customTypeConverterPropertyMethod.addCode(constructorCode);
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"").addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassName.get(String.class),""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",outputClassName,""String_Node_Str"").returns(ClassNames.BASE_PROPERTY).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}"
26842,"public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  if (hasAutoIncrement) {
    InternalAdapterHelper.writeUpdateAutoIncrement(typeBuilder,elementClassName,autoIncrementDefinition,false);
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(elementClassName,ModelUtils.getVariable(false)).addStatement(""String_Node_Str"",autoIncrementDefinition.getColumnAccessString(false,false)).returns(ClassName.get(Number.class)).build());
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)).returns(ClassName.get(String.class)).build());
  }
  if (cachingEnabled) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",true).returns(TypeName.BOOLEAN).build());
    List<ColumnDefinition> primaries=primaryColumnDefinitions;
    if (primaries == null || primaries.isEmpty()) {
      primaries=Lists.newArrayList(autoIncrementDefinition);
    }
    InternalAdapterHelper.writeGetCachingId(typeBuilder,elementClassName,primaries,false);
    MethodSpec.Builder cachingbuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    String columns=""String_Node_Str"";
    for (int i=0; i < primaries.size(); i++) {
      ColumnDefinition column=primaries.get(i);
      if (i > 0) {
        columns+=""String_Node_Str"";
      }
      columns+=""String_Node_Str"" + QueryBuilder.quoteIfNeeded(column.columnName) + ""String_Node_Str"";
    }
    columns+=""String_Node_Str"";
    cachingbuilder.addStatement(columns).returns(ArrayTypeName.of(ClassName.get(String.class)));
    typeBuilder.addMethod(cachingbuilder.build());
    if (cacheSize != Table.DEFAULT_CACHE_SIZE) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",cacheSize).returns(TypeName.INT).build());
    }
    if (!StringUtils.isNullOrEmpty(customCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MODEL_CACHE,elementClassName,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (!StringUtils.isNullOrEmpty(customMultiCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customMultiCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MULTI_KEY_CACHE_CONVERTER,WildcardTypeName.subtypeOf(Object.class),elementClassName)).build());
    }
    if (foreignKeyDefinitions.size() > 0) {
      MethodSpec.Builder reloadMethod=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(elementClassName,ModelUtils.getVariable(false)).addParameter(ClassNames.CURSOR,LoadFromCursorMethod.PARAM_CURSOR).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
      CodeBlock.Builder loadStatements=CodeBlock.builder();
      for (      ColumnDefinition foreignColumn : foreignKeyDefinitions) {
        CodeBlock.Builder codeBuilder=foreignColumn.getLoadFromCursorMethod(false,false,false).toBuilder();
        if (!foreignColumn.elementTypeName.isPrimitive()) {
          codeBuilder.nextControlFlow(""String_Node_Str"");
          codeBuilder.addStatement(foreignColumn.setColumnAccessString(CodeBlock.builder().add(""String_Node_Str"").build(),false));
          codeBuilder.endControlFlow();
        }
        loadStatements.add(codeBuilder.build());
      }
      reloadMethod.addCode(loadStatements.build());
      typeBuilder.addMethod(reloadMethod.build());
    }
  }
  CustomTypeConverterPropertyMethod customTypeConverterPropertyMethod=new CustomTypeConverterPropertyMethod(this);
  customTypeConverterPropertyMethod.addToType(typeBuilder);
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  customTypeConverterPropertyMethod.addCode(constructorCode);
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"").addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassName.get(String.class),""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",outputClassName,""String_Node_Str"").returns(ClassNames.BASE_PROPERTY).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}","public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  if (hasAutoIncrement) {
    InternalAdapterHelper.writeUpdateAutoIncrement(typeBuilder,elementClassName,autoIncrementDefinition,false);
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(elementClassName,ModelUtils.getVariable(false)).addStatement(""String_Node_Str"",autoIncrementDefinition.getColumnAccessString(false,false)).returns(ClassName.get(Number.class)).build());
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)).returns(ClassName.get(String.class)).build());
  }
  if (cachingEnabled) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",true).returns(TypeName.BOOLEAN).build());
    List<ColumnDefinition> primaries=primaryColumnDefinitions;
    if (primaries == null || primaries.isEmpty()) {
      primaries=Lists.newArrayList(autoIncrementDefinition);
    }
    InternalAdapterHelper.writeGetCachingId(typeBuilder,elementClassName,primaries,false);
    MethodSpec.Builder cachingbuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
    String columns=""String_Node_Str"";
    for (int i=0; i < primaries.size(); i++) {
      ColumnDefinition column=primaries.get(i);
      if (i > 0) {
        columns+=""String_Node_Str"";
      }
      columns+=""String_Node_Str"" + QueryBuilder.quoteIfNeeded(column.columnName) + ""String_Node_Str"";
    }
    columns+=""String_Node_Str"";
    cachingbuilder.addStatement(columns).returns(ArrayTypeName.of(ClassName.get(String.class)));
    typeBuilder.addMethod(cachingbuilder.build());
    if (cacheSize != Table.DEFAULT_CACHE_SIZE) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",cacheSize).returns(TypeName.INT).build());
    }
    if (!StringUtils.isNullOrEmpty(customCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MODEL_CACHE,elementClassName,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (!StringUtils.isNullOrEmpty(customMultiCacheFieldName)) {
      typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName,customMultiCacheFieldName).returns(ParameterizedTypeName.get(ClassNames.MULTI_KEY_CACHE_CONVERTER,WildcardTypeName.subtypeOf(Object.class))).build());
    }
    if (foreignKeyDefinitions.size() > 0) {
      MethodSpec.Builder reloadMethod=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(elementClassName,ModelUtils.getVariable(false)).addParameter(ClassNames.CURSOR,LoadFromCursorMethod.PARAM_CURSOR).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
      CodeBlock.Builder loadStatements=CodeBlock.builder();
      for (      ColumnDefinition foreignColumn : foreignKeyDefinitions) {
        CodeBlock.Builder codeBuilder=foreignColumn.getLoadFromCursorMethod(false,false,false).toBuilder();
        if (!foreignColumn.elementTypeName.isPrimitive()) {
          codeBuilder.nextControlFlow(""String_Node_Str"");
          codeBuilder.addStatement(foreignColumn.setColumnAccessString(CodeBlock.builder().add(""String_Node_Str"").build(),false));
          codeBuilder.endControlFlow();
        }
        loadStatements.add(codeBuilder.build());
      }
      reloadMethod.addCode(loadStatements.build());
      typeBuilder.addMethod(reloadMethod.build());
    }
  }
  CustomTypeConverterPropertyMethod customTypeConverterPropertyMethod=new CustomTypeConverterPropertyMethod(this);
  customTypeConverterPropertyMethod.addToType(typeBuilder);
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  customTypeConverterPropertyMethod.addCode(constructorCode);
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"").addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassName.get(String.class),""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",outputClassName,""String_Node_Str"").returns(ClassNames.BASE_PROPERTY).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}"
26843,"@Override protected void createColumnDefinitions(TypeElement typeElement){
  List<? extends Element> elements=ElementUtility.getAllElements(typeElement,manager);
  ColumnValidator columnValidator=new ColumnValidator();
  OneToManyValidator oneToManyValidator=new OneToManyValidator();
  for (  Element element : elements) {
    boolean isValidColumn=(allFields && (element.getKind().isField() && !element.getModifiers().contains(Modifier.STATIC) && !element.getModifiers().contains(Modifier.PRIVATE)&& !element.getModifiers().contains(Modifier.FINAL)));
    boolean isPackagePrivate=ElementUtility.isPackagePrivate(element);
    boolean isPackagePrivateNotInSamePackage=isPackagePrivate && !ElementUtility.isInSamePackage(manager,element,this.element);
    boolean isForeign=element.getAnnotation(ForeignKey.class) != null;
    boolean isPrimary=element.getAnnotation(PrimaryKey.class) != null;
    if (element.getAnnotation(Column.class) != null || isForeign || isPrimary || isValidColumn) {
      ColumnDefinition columnDefinition;
      if (isForeign) {
        columnDefinition=new ForeignKeyColumnDefinition(manager,this,element,isPackagePrivateNotInSamePackage);
      }
 else {
        columnDefinition=new ColumnDefinition(manager,element,this,isPackagePrivateNotInSamePackage);
      }
      if (columnValidator.validate(manager,columnDefinition)) {
        columnDefinitions.add(columnDefinition);
        mColumnMap.put(columnDefinition.columnName,columnDefinition);
        if (columnDefinition.isPrimaryKey) {
          primaryColumnDefinitions.add(columnDefinition);
        }
 else         if (columnDefinition.isPrimaryKeyAutoIncrement) {
          autoIncrementDefinition=columnDefinition;
          hasAutoIncrement=true;
        }
        if (columnDefinition instanceof ForeignKeyColumnDefinition) {
          foreignKeyDefinitions.add((ForeignKeyColumnDefinition)columnDefinition);
        }
        if (!columnDefinition.uniqueGroups.isEmpty()) {
          List<Integer> groups=columnDefinition.uniqueGroups;
          for (          int group : groups) {
            List<ColumnDefinition> groupList=columnUniqueMap.get(group);
            if (groupList == null) {
              groupList=new ArrayList<>();
              columnUniqueMap.put(group,groupList);
            }
            if (!groupList.contains(columnDefinition)) {
              groupList.add(columnDefinition);
            }
          }
        }
        if (isPackagePrivate) {
          packagePrivateList.add(columnDefinition);
        }
      }
    }
 else     if (element.getAnnotation(OneToMany.class) != null) {
      OneToManyDefinition oneToManyDefinition=new OneToManyDefinition((ExecutableElement)element,manager);
      if (oneToManyValidator.validate(manager,oneToManyDefinition)) {
        oneToManyDefinitions.add(oneToManyDefinition);
      }
    }
 else     if (element.getAnnotation(ContainerKey.class) != null) {
      ContainerKeyDefinition containerKeyDefinition=new ContainerKeyDefinition(element,manager,this,isPackagePrivateNotInSamePackage);
      containerKeyDefinitions.add(containerKeyDefinition);
    }
 else     if (element.getAnnotation(ModelCacheField.class) != null) {
      customCacheFieldName=element.getSimpleName().toString();
    }
 else     if (element.getAnnotation(MultiCacheField.class) != null) {
      customMultiCacheFieldName=element.getSimpleName().toString();
    }
  }
}","@Override protected void createColumnDefinitions(TypeElement typeElement){
  List<? extends Element> elements=ElementUtility.getAllElements(typeElement,manager);
  ColumnValidator columnValidator=new ColumnValidator();
  OneToManyValidator oneToManyValidator=new OneToManyValidator();
  for (  Element element : elements) {
    boolean isValidColumn=(allFields && (element.getKind().isField() && !element.getModifiers().contains(Modifier.STATIC) && !element.getModifiers().contains(Modifier.PRIVATE)&& !element.getModifiers().contains(Modifier.FINAL)));
    boolean isPackagePrivate=ElementUtility.isPackagePrivate(element);
    boolean isPackagePrivateNotInSamePackage=isPackagePrivate && !ElementUtility.isInSamePackage(manager,element,this.element);
    boolean isForeign=element.getAnnotation(ForeignKey.class) != null;
    boolean isPrimary=element.getAnnotation(PrimaryKey.class) != null;
    if (element.getAnnotation(Column.class) != null || isForeign || isPrimary || isValidColumn) {
      ColumnDefinition columnDefinition;
      if (isForeign) {
        columnDefinition=new ForeignKeyColumnDefinition(manager,this,element,isPackagePrivateNotInSamePackage);
      }
 else {
        columnDefinition=new ColumnDefinition(manager,element,this,isPackagePrivateNotInSamePackage);
      }
      if (columnValidator.validate(manager,columnDefinition)) {
        columnDefinitions.add(columnDefinition);
        mColumnMap.put(columnDefinition.columnName,columnDefinition);
        if (columnDefinition.isPrimaryKey) {
          primaryColumnDefinitions.add(columnDefinition);
        }
 else         if (columnDefinition.isPrimaryKeyAutoIncrement) {
          autoIncrementDefinition=columnDefinition;
          hasAutoIncrement=true;
        }
        if (columnDefinition instanceof ForeignKeyColumnDefinition) {
          foreignKeyDefinitions.add((ForeignKeyColumnDefinition)columnDefinition);
        }
        if (!columnDefinition.uniqueGroups.isEmpty()) {
          List<Integer> groups=columnDefinition.uniqueGroups;
          for (          int group : groups) {
            List<ColumnDefinition> groupList=columnUniqueMap.get(group);
            if (groupList == null) {
              groupList=new ArrayList<>();
              columnUniqueMap.put(group,groupList);
            }
            if (!groupList.contains(columnDefinition)) {
              groupList.add(columnDefinition);
            }
          }
        }
        if (isPackagePrivate) {
          packagePrivateList.add(columnDefinition);
        }
      }
    }
 else     if (element.getAnnotation(OneToMany.class) != null) {
      OneToManyDefinition oneToManyDefinition=new OneToManyDefinition((ExecutableElement)element,manager);
      if (oneToManyValidator.validate(manager,oneToManyDefinition)) {
        oneToManyDefinitions.add(oneToManyDefinition);
      }
    }
 else     if (element.getAnnotation(ContainerKey.class) != null) {
      ContainerKeyDefinition containerKeyDefinition=new ContainerKeyDefinition(element,manager,this,isPackagePrivateNotInSamePackage);
      containerKeyDefinitions.add(containerKeyDefinition);
    }
 else     if (element.getAnnotation(ModelCacheField.class) != null) {
      if (!element.getModifiers().contains(Modifier.PUBLIC)) {
        manager.logError(""String_Node_Str"");
      }
      if (!element.getModifiers().contains(Modifier.STATIC)) {
        manager.logError(""String_Node_Str"");
      }
      if (!StringUtils.isNullOrEmpty(customCacheFieldName)) {
        manager.logError(""String_Node_Str"");
      }
 else {
        customCacheFieldName=element.getSimpleName().toString();
      }
    }
 else     if (element.getAnnotation(MultiCacheField.class) != null) {
      if (!element.getModifiers().contains(Modifier.PUBLIC)) {
        manager.logError(""String_Node_Str"");
      }
      if (!element.getModifiers().contains(Modifier.STATIC)) {
        manager.logError(""String_Node_Str"");
      }
      if (!StringUtils.isNullOrEmpty(customMultiCacheFieldName)) {
        manager.logError(""String_Node_Str"");
      }
 else {
        customMultiCacheFieldName=element.getSimpleName().toString();
      }
    }
  }
}"
26844,"/** 
 * Converts the given value for the column if it has a type converter. Then it turns that result into a string.
 * @param value The value of the column in Model format.
 * @return Returns the result of converting and type converting the specified value.
 */
@SuppressWarnings(""String_Node_Str"") public static String convertValueToString(Object value){
  String stringVal;
  if (value != null) {
    TypeConverter typeConverter=FlowManager.getTypeConverterForClass(value.getClass());
    if (typeConverter != null) {
      value=typeConverter.getDBValue(value);
    }
  }
  if (value instanceof Number) {
    stringVal=String.valueOf(value);
  }
 else {
    if (value instanceof NameAlias) {
      stringVal=((NameAlias)value).getQuery();
    }
 else     if (value instanceof SQLCondition) {
      QueryBuilder queryBuilder=new QueryBuilder();
      ((SQLCondition)value).appendConditionToQuery(queryBuilder);
      stringVal=queryBuilder.toString();
    }
 else     if (value instanceof Query) {
      stringVal=((Query)value).getQuery();
    }
 else {
      stringVal=String.valueOf(value);
      if (!stringVal.equals(Condition.Operation.EMPTY_PARAM)) {
        stringVal=DatabaseUtils.sqlEscapeString(stringVal);
      }
    }
  }
  return stringVal;
}","/** 
 * Converts the given value for the column if it has a type converter. Then it turns that result into a string.
 * @param value                       The value of the column in Model format.
 * @param appendInnerQueryParenthesis if its an inner query value in a condition, we append paranthesis to the query.
 * @return Returns the result of converting and type converting the specified value.
 */
@SuppressWarnings(""String_Node_Str"") public static String convertValueToString(Object value,boolean appendInnerQueryParenthesis){
  String stringVal;
  if (value != null) {
    TypeConverter typeConverter=FlowManager.getTypeConverterForClass(value.getClass());
    if (typeConverter != null) {
      value=typeConverter.getDBValue(value);
    }
  }
  if (value instanceof Number) {
    stringVal=String.valueOf(value);
  }
 else {
    if (appendInnerQueryParenthesis && value instanceof BaseModelQueriable) {
      stringVal=String.format(""String_Node_Str"",((BaseModelQueriable)value).getQuery().trim());
    }
 else     if (value instanceof NameAlias) {
      stringVal=((NameAlias)value).getQuery();
    }
 else     if (value instanceof SQLCondition) {
      QueryBuilder queryBuilder=new QueryBuilder();
      ((SQLCondition)value).appendConditionToQuery(queryBuilder);
      stringVal=queryBuilder.toString();
    }
 else     if (value instanceof Query) {
      stringVal=((Query)value).getQuery();
    }
 else {
      stringVal=String.valueOf(value);
      if (!stringVal.equals(Condition.Operation.EMPTY_PARAM)) {
        stringVal=DatabaseUtils.sqlEscapeString(stringVal);
      }
    }
  }
  return stringVal;
}"
26845,"/** 
 * Returns a string containing the tokens joined by delimiters and converted into the property values for a query.
 * @param delimiter The text to join the text with.
 * @param tokens    an {@link Iterable} of objects to be joined. Strings will be formed fromthe objects by calling  {@link #convertValueToString(Object)}.
 * @return A joined string
 */
public static String joinArguments(CharSequence delimiter,Iterable tokens){
  StringBuilder sb=new StringBuilder();
  boolean firstTime=true;
  for (  Object token : tokens) {
    if (firstTime) {
      firstTime=false;
    }
 else {
      sb.append(delimiter);
    }
    sb.append(convertValueToString(token));
  }
  return sb.toString();
}","/** 
 * Returns a string containing the tokens joined by delimiters and converted into the property values for a query.
 * @param delimiter The text to join the text with.
 * @param tokens    an {@link Iterable} of objects to be joined. Strings will be formed fromthe objects by calling  {@link #convertValueToString(Object,boolean)}.
 * @return A joined string
 */
public static String joinArguments(CharSequence delimiter,Iterable tokens){
  StringBuilder sb=new StringBuilder();
  boolean firstTime=true;
  for (  Object token : tokens) {
    if (firstTime) {
      firstTime=false;
    }
 else {
      sb.append(delimiter);
    }
    sb.append(convertValueToString(token,false));
  }
  return sb.toString();
}"
26846,"public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  boolean isBlobRaw=false;
  if (columnAccess instanceof WrapperColumnAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
      isBlobRaw=(typeName.equals(ClassName.get(Blob.class)));
    }
 else {
      if (columnAccess instanceof EnumColumnAccess) {
        typeName=ClassName.get(String.class);
      }
 else       if (columnAccess instanceof BlobColumnAccess) {
        typeName=ArrayTypeName.of(TypeName.BYTE);
      }
 else {
        typeName=elementTypeName;
      }
      if (!isModelContainerAdapter) {
        String shortAccess=((WrapperColumnAccess)columnAccess).existingColumnAccess.getShortAccessString(elementTypeName,elementName,isModelContainerAdapter);
        codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,shortAccess,statement);
      }
 else {
        codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
      }
    }
  }
  String putAccess=finalAccessStatement;
  if (isBlobRaw) {
    putAccess=finalAccessStatement + ""String_Node_Str"";
  }
  if (!elementTypeName.isPrimitive()) {
    if (!isModelContainerAdapter && (columnAccess instanceof EnumColumnAccess || columnAccess instanceof BlobColumnAccess || isBlobRaw)) {
      codeBuilder.beginControlFlow(""String_Node_Str"",variableNameString + ""String_Node_Str"" + elementName,putAccess);
    }
 else {
      codeBuilder.beginControlFlow(""String_Node_Str"",putAccess);
    }
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),putAccess);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  boolean isBlobRaw=false;
  TypeName finalTypeName=elementTypeName;
  if (columnAccess instanceof WrapperColumnAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    if (columnAccess instanceof TypeConverterAccess) {
      finalTypeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
      isBlobRaw=(finalTypeName.equals(ClassName.get(Blob.class)));
    }
 else {
      if (columnAccess instanceof EnumColumnAccess) {
        finalTypeName=ClassName.get(String.class);
      }
 else       if (columnAccess instanceof BlobColumnAccess) {
        finalTypeName=ArrayTypeName.of(TypeName.BYTE);
      }
 else {
        finalTypeName=elementTypeName;
      }
    }
    if (!isModelContainerAdapter && !elementTypeName.isPrimitive()) {
      String shortAccess=((WrapperColumnAccess)columnAccess).existingColumnAccess.getShortAccessString(elementTypeName,elementName,isModelContainerAdapter);
      codeBuilder.addStatement(""String_Node_Str"",finalTypeName,finalAccessStatement,shortAccess,statement);
    }
 else {
      codeBuilder.addStatement(""String_Node_Str"",finalTypeName,finalAccessStatement,statement);
    }
  }
  String putAccess=finalAccessStatement;
  if (isBlobRaw) {
    putAccess=finalAccessStatement + ""String_Node_Str"";
  }
  if (!finalTypeName.isPrimitive()) {
    if (!isModelContainerAdapter && (columnAccess instanceof EnumColumnAccess || columnAccess instanceof BlobColumnAccess || isBlobRaw)) {
      codeBuilder.beginControlFlow(""String_Node_Str"",variableNameString + ""String_Node_Str"" + elementName,putAccess);
    }
 else {
      codeBuilder.beginControlFlow(""String_Node_Str"",putAccess);
    }
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),putAccess);
  if (!finalTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}"
26847,"public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  boolean isBlobRaw=false;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
      isBlobRaw=(typeName.equals(ClassName.get(Blob.class)));
    }
 else {
      if (columnAccess instanceof EnumColumnAccess) {
        typeName=ClassName.get(String.class);
      }
 else       if (columnAccess instanceof BlobColumnAccess) {
        typeName=ArrayTypeName.of(TypeName.BYTE);
      }
 else {
        typeName=elementTypeName;
      }
      if (!isModelContainerAdapter) {
        String shortAccess=((WrapperColumnAccess)columnAccess).existingColumnAccess.getShortAccessString(elementTypeName,elementName,isModelContainerAdapter);
        codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,shortAccess,statement);
      }
 else {
        codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
      }
    }
  }
  String putAccess=finalAccessStatement;
  if (isBlobRaw) {
    putAccess=finalAccessStatement + ""String_Node_Str"";
  }
  if (!elementTypeName.isPrimitive()) {
    if (!isModelContainerAdapter && (columnAccess instanceof EnumColumnAccess || columnAccess instanceof BlobColumnAccess)) {
      codeBuilder.beginControlFlow(""String_Node_Str"",variableNameString + ""String_Node_Str"" + elementName,finalAccessStatement);
    }
 else {
      codeBuilder.beginControlFlow(""String_Node_Str"",putAccess);
    }
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),putAccess);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  boolean isBlobRaw=false;
  TypeName finalTypeName=elementTypeName;
  if (columnAccess instanceof WrapperColumnAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    if (columnAccess instanceof TypeConverterAccess) {
      finalTypeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
      isBlobRaw=(finalTypeName.equals(ClassName.get(Blob.class)));
    }
 else {
      if (columnAccess instanceof EnumColumnAccess) {
        finalTypeName=ClassName.get(String.class);
      }
 else       if (columnAccess instanceof BlobColumnAccess) {
        finalTypeName=ArrayTypeName.of(TypeName.BYTE);
      }
 else {
        finalTypeName=elementTypeName;
      }
    }
    if (!isModelContainerAdapter && !elementTypeName.isPrimitive()) {
      String shortAccess=((WrapperColumnAccess)columnAccess).existingColumnAccess.getShortAccessString(elementTypeName,elementName,isModelContainerAdapter);
      codeBuilder.addStatement(""String_Node_Str"",finalTypeName,finalAccessStatement,shortAccess,statement);
    }
 else {
      codeBuilder.addStatement(""String_Node_Str"",finalTypeName,finalAccessStatement,statement);
    }
  }
  String putAccess=finalAccessStatement;
  if (isBlobRaw) {
    putAccess=finalAccessStatement + ""String_Node_Str"";
  }
  if (!finalTypeName.isPrimitive()) {
    if (!isModelContainerAdapter && (columnAccess instanceof EnumColumnAccess || columnAccess instanceof BlobColumnAccess)) {
      codeBuilder.beginControlFlow(""String_Node_Str"",variableNameString + ""String_Node_Str"" + elementName,finalAccessStatement);
    }
 else {
      codeBuilder.beginControlFlow(""String_Node_Str"",putAccess);
    }
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),putAccess);
  if (!finalTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}"
26848,"@Override public String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock.Builder newFormattedAccess=CodeBlock.builder();
  if (typeConverterFieldName == null) {
    newFormattedAccess.add(""String_Node_Str"",typeConverterDefinition.getModelTypeName(),ClassNames.FLOW_MANAGER,METHOD_TYPE_CONVERTER,columnDefinition.elementTypeName.box()).build();
  }
 else {
    newFormattedAccess.add(typeConverterFieldName);
  }
  newFormattedAccess.add(""String_Node_Str"",typeConverterDefinition.getDbTypeName(),formattedAccess);
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess.build());
}","@Override public String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock.Builder newFormattedAccess=CodeBlock.builder();
  if (typeConverterFieldName == null) {
    newFormattedAccess.add(""String_Node_Str"",typeConverterDefinition.getModelTypeName(),ClassNames.FLOW_MANAGER,METHOD_TYPE_CONVERTER,columnDefinition.elementTypeName.box()).build();
  }
 else {
    newFormattedAccess.add(typeConverterFieldName);
  }
  String newCursorAccess=formattedAccess.toString();
  if (typeConverterDefinition.getDbTypeName().equals(ClassName.get(Blob.class))) {
    newCursorAccess=String.format(""String_Node_Str"",newCursorAccess);
  }
  newFormattedAccess.add(""String_Node_Str"",typeConverterDefinition.getDbTypeName(),newCursorAccess);
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess.build());
}"
26849,"public void testJoins(){
  String query=SQLite.select(Department_Table.emp_id,Company_Table.name,Department_Table.dept).from(Company.class).join(Department.class,Join.JoinType.INNER).on(Company_Table.id.withTable().eq(Department_Table.emp_id.withTable())).getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
}","public void testJoins(){
  From<Company> joinQuery=SQLite.select(Department_Table.emp_id,Company_Table.name,Department_Table.dept).from(Company.class).join(Department.class,Join.JoinType.INNER).on(Company_Table.id.withTable().eq(Department_Table.emp_id.withTable()));
  String query=joinQuery.getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
  List<CompanyDepartmentJoin> companyDepartmentJoins=joinQuery.queryCustomList(CompanyDepartmentJoin.class);
}"
26850,"@Override public boolean exists(){
  throw new InvalidSqlViewOperationException(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
}","@Override public boolean exists(){
  throw new InvalidSqlViewOperationException(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ ""String_Node_Str"");
}"
26851,"public void testSelectStatement(){
  Where<TestModel1> where=new Select(name).from(TestModel1.class).where(name.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where.getQuery().trim());
  where.query();
  Where<TestModel3> where1=new Select(name,type).from(TestModel3.class).where(name.is(""String_Node_Str""),type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where1.getQuery().trim());
  Where<TestModel3> where2=new Select().distinct().from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where2.getQuery().trim());
  where2.query();
  Where<TestModel3> where3=new Select(Method.count()).from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where3.getQuery().trim());
  where3.query();
  Where<TestModel3> where4=new Select().from(TestModel3.class).where(name.eq(""String_Node_Str"")).and(type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where4.getQuery().trim());
  Where<TestModel3> where6=new Select(Method.count(type)).from(TestModel3.class).orderBy(name,true).orderBy(type,true);
  assertEquals(""String_Node_Str"",where6.getQuery().trim());
}","public void testSelectStatement(){
  Where<TestModel1> where=new Select(name).from(TestModel1.class).where(name.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where.getQuery().trim());
  where.query();
  Where<TestModel3> where1=new Select(name,type).from(TestModel3.class).where(name.is(""String_Node_Str""),type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where1.getQuery().trim());
  Where<TestModel3> where2=new Select().distinct().from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where2.getQuery().trim());
  where2.query();
  Where<TestModel3> where3=new Select(Method.count()).from(TestModel3.class).where();
  assertEquals(""String_Node_Str"",where3.getQuery().trim());
  where3.query();
  Where<TestModel3> where4=new Select().from(TestModel3.class).where(name.eq(""String_Node_Str"")).and(type.is(""String_Node_Str""));
  assertEquals(""String_Node_Str"",where4.getQuery().trim());
  Where<TestModel3> where6=new Select(Method.count(type)).from(TestModel3.class).orderBy(name,true).orderBy(type,true);
  assertEquals(""String_Node_Str"",where6.getQuery().trim());
  String query=SQLite.select().from(TestModel3.class).where(TestModel3_Table.type.in(SQLite.select(TestModel2_Table.name).from(TestModel2.class).where(TestModel2_Table.name.is(""String_Node_Str"")))).getQuery();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",query.trim());
}"
26852,"/** 
 * Converts the given value for the column if it has a type converter. Then it turns that result into a string.
 * @param value The value of the column in Model format.
 * @return Returns the result of converting and type converting the specified value.
 */
@SuppressWarnings(""String_Node_Str"") public static String convertValueToString(Object value){
  String stringVal;
  if (value != null) {
    TypeConverter typeConverter=FlowManager.getTypeConverterForClass(value.getClass());
    if (typeConverter != null) {
      value=typeConverter.getDBValue(value);
    }
  }
  if (value instanceof Number) {
    stringVal=String.valueOf(value);
  }
 else {
    if (value instanceof Where) {
      stringVal=String.format(""String_Node_Str"",((Where)value).getQuery().trim());
    }
 else     if (value instanceof NameAlias) {
      stringVal=((NameAlias)value).getQuery();
    }
 else     if (value instanceof SQLCondition) {
      QueryBuilder queryBuilder=new QueryBuilder();
      ((SQLCondition)value).appendConditionToQuery(queryBuilder);
      stringVal=queryBuilder.toString();
    }
 else     if (value instanceof Query) {
      stringVal=((Query)value).getQuery();
    }
 else {
      stringVal=String.valueOf(value);
      if (!stringVal.equals(Condition.Operation.EMPTY_PARAM)) {
        stringVal=DatabaseUtils.sqlEscapeString(stringVal);
      }
    }
  }
  return stringVal;
}","/** 
 * Converts the given value for the column if it has a type converter. Then it turns that result into a string.
 * @param value The value of the column in Model format.
 * @return Returns the result of converting and type converting the specified value.
 */
@SuppressWarnings(""String_Node_Str"") public static String convertValueToString(Object value){
  String stringVal;
  if (value != null) {
    TypeConverter typeConverter=FlowManager.getTypeConverterForClass(value.getClass());
    if (typeConverter != null) {
      value=typeConverter.getDBValue(value);
    }
  }
  if (value instanceof Number) {
    stringVal=String.valueOf(value);
  }
 else {
    if (value instanceof NameAlias) {
      stringVal=((NameAlias)value).getQuery();
    }
 else     if (value instanceof SQLCondition) {
      QueryBuilder queryBuilder=new QueryBuilder();
      ((SQLCondition)value).appendConditionToQuery(queryBuilder);
      stringVal=queryBuilder.toString();
    }
 else     if (value instanceof Query) {
      stringVal=((Query)value).getQuery();
    }
 else {
      stringVal=String.valueOf(value);
      if (!stringVal.equals(Condition.Operation.EMPTY_PARAM)) {
        stringVal=DatabaseUtils.sqlEscapeString(stringVal);
      }
    }
  }
  return stringVal;
}"
26853,"@TargetApi(VERSION_CODES.JELLY_BEAN) @Override public void onChange(boolean selfChange,Uri uri){
  String fragment=uri.getFragment();
  String tableName=uri.getAuthority();
  String columnName=null;
  String param=null;
  Set<String> queryNames=uri.getQueryParameterNames();
  SQLCondition[] columnsChanged=new SQLCondition[queryNames.size()];
  if (!queryNames.isEmpty()) {
    int index=0;
    for (    String key : queryNames) {
      param=Uri.decode(uri.getQueryParameter(key));
      columnName=key;
      columnsChanged[index]=Condition.column(new NameAlias(columnName)).value(param);
      index++;
    }
  }
  Class<? extends Model> table=registeredTables.get(tableName);
  if (!isInTransaction) {
    Action action=Action.valueOf(fragment);
    if (action != null) {
      for (      OnModelStateChangedListener modelChangeListener : modelChangeListeners) {
        modelChangeListener.onModelStateChanged(table,action);
      }
      if (columnName != null && param != null) {
        for (        OnSpecificModelStateChangedListener modelChangeListener : specificModelChangeListeners) {
          modelChangeListener.onModelStateChanged(table,action,columnsChanged);
        }
      }
    }
  }
 else {
    if (!notifyAllUris) {
      uri=SqlUtils.getNotificationUri(table,Action.CHANGE);
    }
synchronized (notificationUris) {
      notificationUris.add(uri);
    }
  }
}","@TargetApi(VERSION_CODES.JELLY_BEAN) @Override public void onChange(boolean selfChange,Uri uri){
  String fragment=uri.getFragment();
  String tableName=uri.getAuthority();
  String columnName=null;
  String param=null;
  Set<String> queryNames=uri.getQueryParameterNames();
  SQLCondition[] columnsChanged=new SQLCondition[queryNames.size()];
  if (!queryNames.isEmpty()) {
    int index=0;
    for (    String key : queryNames) {
      param=Uri.decode(uri.getQueryParameter(key));
      columnName=Uri.decode(key);
      columnsChanged[index]=Condition.column(new NameAlias(columnName)).value(param);
      index++;
    }
  }
  Class<? extends Model> table=registeredTables.get(tableName);
  if (!isInTransaction) {
    Action action=Action.valueOf(fragment);
    if (action != null) {
      for (      OnModelStateChangedListener modelChangeListener : modelChangeListeners) {
        modelChangeListener.onModelStateChanged(table,action);
      }
      if (columnName != null && param != null) {
        for (        OnSpecificModelStateChangedListener modelChangeListener : specificModelChangeListeners) {
          modelChangeListener.onModelStateChanged(table,action,columnsChanged);
        }
      }
    }
  }
 else {
    if (!notifyAllUris) {
      uri=SqlUtils.getNotificationUri(table,Action.CHANGE);
    }
synchronized (notificationUris) {
      notificationUris.add(uri);
    }
  }
}"
26854,"public ContentProviderDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ContentProvider provider=element.getAnnotation(ContentProvider.class);
  try {
    provider.database();
  }
 catch (  MirroredTypeException mte) {
    databaseName=TypeName.get(mte.getTypeMirror());
  }
  DatabaseDefinition databaseDefinition=manager.getDatabaseWriter(databaseName);
  databaseNameString=databaseDefinition.databaseName;
  setOutputClassName(databaseDefinition.classSeparator + DEFINITION_NAME);
  authority=provider.authority();
  TableEndpointValidator validator=new TableEndpointValidator();
  List<? extends Element> elements=manager.getElements().getAllMembers((TypeElement)typeElement);
  for (  Element innerElement : elements) {
    if (innerElement.getAnnotation(TableEndpoint.class) != null) {
      TableEndpointDefinition endpointDefinition=new TableEndpointDefinition(innerElement,manager);
      if (validator.validate(processorManager,endpointDefinition)) {
        endpointDefinitions.add(endpointDefinition);
      }
    }
  }
  methods=new MethodDefinition[]{new QueryMethod(this,manager),new InsertMethod(this,false),new InsertMethod(this,true),new DeleteMethod(this,manager),new UpdateMethod(this,manager)};
}","public ContentProviderDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ContentProvider provider=element.getAnnotation(ContentProvider.class);
  if (provider != null) {
    try {
      provider.database();
    }
 catch (    MirroredTypeException mte) {
      databaseName=TypeName.get(mte.getTypeMirror());
    }
    DatabaseDefinition databaseDefinition=manager.getDatabaseWriter(databaseName);
    databaseNameString=databaseDefinition.databaseName;
    setOutputClassName(databaseDefinition.classSeparator + DEFINITION_NAME);
    authority=provider.authority();
    TableEndpointValidator validator=new TableEndpointValidator();
    List<? extends Element> elements=manager.getElements().getAllMembers((TypeElement)typeElement);
    for (    Element innerElement : elements) {
      if (innerElement.getAnnotation(TableEndpoint.class) != null) {
        TableEndpointDefinition endpointDefinition=new TableEndpointDefinition(innerElement,manager);
        if (validator.validate(processorManager,endpointDefinition)) {
          endpointDefinitions.add(endpointDefinition);
        }
      }
    }
  }
  methods=new MethodDefinition[]{new QueryMethod(this,manager),new InsertMethod(this,false),new InsertMethod(this,true),new DeleteMethod(this,manager),new UpdateMethod(this,manager)};
}"
26855,"public ModelContainerDefinition(TypeElement classElement,ProcessorManager manager){
  super(classElement,manager);
  ModelContainer containerKey=classElement.getAnnotation(ModelContainer.class);
  boolean putDefaultValue=containerKey.putDefault();
  tableDefinition=manager.getTableDefinition(manager.getDatabase(elementTypeName),elementTypeName);
  setOutputClassName(tableDefinition.databaseDefinition.classSeparator + DBFLOW_MODEL_CONTAINER_TAG);
  methods=new MethodDefinition[]{new BindToContentValuesMethod(tableDefinition,true,true,tableDefinition.implementsContentValuesListener),new BindToContentValuesMethod(tableDefinition,false,true,tableDefinition.implementsContentValuesListener),new BindToStatementMethod(tableDefinition,true,true),new BindToStatementMethod(tableDefinition,false,true),new ExistenceMethod(tableDefinition,true),new PrimaryConditionMethod(tableDefinition,true),new ToModelMethod(tableDefinition),new LoadFromCursorMethod(tableDefinition,true,tableDefinition.implementsLoadFromCursorListener,putDefaultValue)};
}","public ModelContainerDefinition(TypeElement classElement,ProcessorManager manager){
  super(classElement,manager);
  ModelContainer containerKey=classElement.getAnnotation(ModelContainer.class);
  if (containerKey != null) {
    boolean putDefaultValue=containerKey.putDefault();
    tableDefinition=manager.getTableDefinition(manager.getDatabase(elementTypeName),elementTypeName);
    setOutputClassName(tableDefinition.databaseDefinition.classSeparator + DBFLOW_MODEL_CONTAINER_TAG);
    methods=new MethodDefinition[]{new BindToContentValuesMethod(tableDefinition,true,true,tableDefinition.implementsContentValuesListener),new BindToContentValuesMethod(tableDefinition,false,true,tableDefinition.implementsContentValuesListener),new BindToStatementMethod(tableDefinition,true,true),new BindToStatementMethod(tableDefinition,false,true),new ExistenceMethod(tableDefinition,true),new PrimaryConditionMethod(tableDefinition,true),new ToModelMethod(tableDefinition),new LoadFromCursorMethod(tableDefinition,true,tableDefinition.implementsLoadFromCursorListener,putDefaultValue)};
  }
}"
26856,"public ModelViewDefinition(ProcessorManager manager,Element element){
  super(element,manager);
  ModelContainer containerKey=element.getAnnotation(ModelContainer.class);
  boolean putDefaultValue=containerKey != null && containerKey.putDefault();
  ModelView modelView=element.getAnnotation(ModelView.class);
  try {
    modelView.database();
  }
 catch (  MirroredTypeException mte) {
    this.databaseName=TypeName.get(mte.getTypeMirror());
  }
  databaseDefinition=manager.getDatabaseWriter(databaseName);
  this.viewTableName=getModelClassName() + databaseDefinition.classSeparator + TABLE_VIEW_TAG;
  setOutputClassName(databaseDefinition.classSeparator + DBFLOW_MODEL_VIEW_TAG);
  this.name=modelView.name();
  if (name == null || name.isEmpty()) {
    name=getModelClassName();
  }
  DeclaredType typeAdapterInterface=null;
  final DeclaredType modelViewType=manager.getTypeUtils().getDeclaredType(manager.getElements().getTypeElement(ClassNames.MODEL_VIEW.toString()),manager.getTypeUtils().getWildcardType(manager.getElements().getTypeElement(ClassNames.MODEL.toString()).asType(),null));
  for (  TypeMirror superType : manager.getTypeUtils().directSupertypes(element.asType())) {
    if (manager.getTypeUtils().isAssignable(superType,modelViewType)) {
      typeAdapterInterface=(DeclaredType)superType;
      break;
    }
  }
  if (typeAdapterInterface != null) {
    final List<? extends TypeMirror> typeArguments=typeAdapterInterface.getTypeArguments();
    modelReferenceClass=ClassName.get(manager.getElements().getTypeElement(typeArguments.get(0).toString()));
  }
  createColumnDefinitions((TypeElement)element);
  implementsLoadFromCursorListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.LOAD_FROM_CURSOR_LISTENER.toString(),(TypeElement)element);
  methods=new MethodDefinition[]{new LoadFromCursorMethod(this,false,implementsLoadFromCursorListener,putDefaultValue),new ExistenceMethod(this,false),new PrimaryConditionMethod(this,false)};
}","public ModelViewDefinition(ProcessorManager manager,Element element){
  super(element,manager);
  ModelContainer containerKey=element.getAnnotation(ModelContainer.class);
  boolean putDefaultValue=containerKey != null && containerKey.putDefault();
  ModelView modelView=element.getAnnotation(ModelView.class);
  if (modelView != null) {
    try {
      modelView.database();
    }
 catch (    MirroredTypeException mte) {
      this.databaseName=TypeName.get(mte.getTypeMirror());
    }
    databaseDefinition=manager.getDatabaseWriter(databaseName);
    this.viewTableName=getModelClassName() + databaseDefinition.classSeparator + TABLE_VIEW_TAG;
    setOutputClassName(databaseDefinition.classSeparator + DBFLOW_MODEL_VIEW_TAG);
    this.name=modelView.name();
    if (name == null || name.isEmpty()) {
      name=getModelClassName();
    }
  }
  DeclaredType typeAdapterInterface=null;
  final DeclaredType modelViewType=manager.getTypeUtils().getDeclaredType(manager.getElements().getTypeElement(ClassNames.MODEL_VIEW.toString()),manager.getTypeUtils().getWildcardType(manager.getElements().getTypeElement(ClassNames.MODEL.toString()).asType(),null));
  for (  TypeMirror superType : manager.getTypeUtils().directSupertypes(element.asType())) {
    if (manager.getTypeUtils().isAssignable(superType,modelViewType)) {
      typeAdapterInterface=(DeclaredType)superType;
      break;
    }
  }
  if (typeAdapterInterface != null) {
    final List<? extends TypeMirror> typeArguments=typeAdapterInterface.getTypeArguments();
    modelReferenceClass=ClassName.get(manager.getElements().getTypeElement(typeArguments.get(0).toString()));
  }
  if (element instanceof TypeElement) {
    createColumnDefinitions((TypeElement)element);
    implementsLoadFromCursorListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.LOAD_FROM_CURSOR_LISTENER.toString(),(TypeElement)element);
  }
 else {
    implementsLoadFromCursorListener=false;
  }
  methods=new MethodDefinition[]{new LoadFromCursorMethod(this,false,implementsLoadFromCursorListener,putDefaultValue),new ExistenceMethod(this,false),new PrimaryConditionMethod(this,false)};
}"
26857,"public QueryModelDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ModelContainer containerKey=element.getAnnotation(ModelContainer.class);
  boolean putDefaultValue=containerKey != null && containerKey.putDefault();
  QueryModel queryModel=typeElement.getAnnotation(QueryModel.class);
  try {
    queryModel.database();
  }
 catch (  MirroredTypeException mte) {
    databaseTypeName=TypeName.get(mte.getTypeMirror());
  }
  databaseDefinition=manager.getDatabaseWriter(databaseTypeName);
  allFields=queryModel.allFields();
  adapterName=getModelClassName() + databaseDefinition.classSeparator + DBFLOW_TABLE_ADAPTER;
  processorManager.addModelToDatabase(elementClassName,databaseTypeName);
  implementsLoadFromCursorListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.LOAD_FROM_CURSOR_LISTENER.toString(),(TypeElement)element);
  setOutputClassName(databaseDefinition.classSeparator + DBFLOW_QUERY_MODEL_TAG);
  methods=new MethodDefinition[]{new LoadFromCursorMethod(this,false,implementsLoadFromCursorListener,putDefaultValue)};
  createColumnDefinitions(((TypeElement)typeElement));
}","public QueryModelDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ModelContainer containerKey=element.getAnnotation(ModelContainer.class);
  boolean putDefaultValue=containerKey != null && containerKey.putDefault();
  QueryModel queryModel=typeElement.getAnnotation(QueryModel.class);
  if (queryModel != null) {
    try {
      queryModel.database();
    }
 catch (    MirroredTypeException mte) {
      databaseTypeName=TypeName.get(mte.getTypeMirror());
    }
    databaseDefinition=manager.getDatabaseWriter(databaseTypeName);
    setOutputClassName(databaseDefinition.classSeparator + DBFLOW_QUERY_MODEL_TAG);
    allFields=queryModel.allFields();
    adapterName=getModelClassName() + databaseDefinition.classSeparator + DBFLOW_TABLE_ADAPTER;
  }
  processorManager.addModelToDatabase(elementClassName,databaseTypeName);
  if (element instanceof TypeElement) {
    implementsLoadFromCursorListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.LOAD_FROM_CURSOR_LISTENER.toString(),(TypeElement)element);
  }
  methods=new MethodDefinition[]{new LoadFromCursorMethod(this,false,implementsLoadFromCursorListener,putDefaultValue)};
  if (typeElement instanceof TypeElement) {
    createColumnDefinitions(((TypeElement)typeElement));
  }
}"
26858,"public TableEndpointDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  TableEndpoint endpoint=typeElement.getAnnotation(TableEndpoint.class);
  tableName=endpoint.name();
  contentProviderName=endpoint.contentProviderName();
  isTopLevel=typeElement.getEnclosingElement() instanceof PackageElement;
  List<? extends Element> elements=processorManager.getElements().getAllMembers((TypeElement)typeElement);
  for (  Element innerElement : elements) {
    if (innerElement.getAnnotation(ContentUri.class) != null) {
      ContentUriDefinition contentUriDefinition=new ContentUriDefinition(innerElement,processorManager);
      if (!pathValidationMap.containsKey(contentUriDefinition.path)) {
        contentUriDefinitions.add(contentUriDefinition);
      }
 else {
        processorManager.logError(""String_Node_Str"" + ""String_Node_Str"",contentUriDefinition.name,contentProviderName);
      }
    }
 else     if (innerElement.getAnnotation(Notify.class) != null) {
      NotifyDefinition notifyDefinition=new NotifyDefinition(innerElement,processorManager);
      for (      String path : notifyDefinition.paths) {
        Map<Notify.Method,List<NotifyDefinition>> methodListMap=notifyDefinitionPathMap.get(path);
        if (methodListMap == null) {
          methodListMap=Maps.newHashMap();
          notifyDefinitionPathMap.put(path,methodListMap);
        }
        List<NotifyDefinition> notifyDefinitionList=methodListMap.get(notifyDefinition.method);
        if (notifyDefinitionList == null) {
          notifyDefinitionList=Lists.newArrayList();
          methodListMap.put(notifyDefinition.method,notifyDefinitionList);
        }
        notifyDefinitionList.add(notifyDefinition);
      }
    }
  }
}","public TableEndpointDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  TableEndpoint endpoint=typeElement.getAnnotation(TableEndpoint.class);
  if (endpoint != null) {
    tableName=endpoint.name();
    contentProviderName=endpoint.contentProviderName();
  }
  isTopLevel=typeElement.getEnclosingElement() instanceof PackageElement;
  List<? extends Element> elements=processorManager.getElements().getAllMembers((TypeElement)typeElement);
  for (  Element innerElement : elements) {
    if (innerElement.getAnnotation(ContentUri.class) != null) {
      ContentUriDefinition contentUriDefinition=new ContentUriDefinition(innerElement,processorManager);
      if (!pathValidationMap.containsKey(contentUriDefinition.path)) {
        contentUriDefinitions.add(contentUriDefinition);
      }
 else {
        processorManager.logError(""String_Node_Str"" + ""String_Node_Str"",contentUriDefinition.name,contentProviderName);
      }
    }
 else     if (innerElement.getAnnotation(Notify.class) != null) {
      NotifyDefinition notifyDefinition=new NotifyDefinition(innerElement,processorManager);
      for (      String path : notifyDefinition.paths) {
        Map<Notify.Method,List<NotifyDefinition>> methodListMap=notifyDefinitionPathMap.get(path);
        if (methodListMap == null) {
          methodListMap=Maps.newHashMap();
          notifyDefinitionPathMap.put(path,methodListMap);
        }
        List<NotifyDefinition> notifyDefinitionList=methodListMap.get(notifyDefinition.method);
        if (notifyDefinitionList == null) {
          notifyDefinitionList=Lists.newArrayList();
          methodListMap.put(notifyDefinition.method,notifyDefinitionList);
        }
        notifyDefinitionList.add(notifyDefinition);
      }
    }
  }
}"
26859,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ContentProviderDefinition contentProviderDefinition=new ContentProviderDefinition(element,processorManager);
  processorManager.addContentProviderDefinition(contentProviderDefinition);
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ContentProviderDefinition contentProviderDefinition=new ContentProviderDefinition(element,processorManager);
  if (contentProviderDefinition.elementClassName != null) {
    processorManager.addContentProviderDefinition(contentProviderDefinition);
  }
}"
26860,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  DatabaseDefinition managerWriter=new DatabaseDefinition(processorManager,element);
  processorManager.addFlowManagerWriter(managerWriter);
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  DatabaseDefinition managerWriter=new DatabaseDefinition(processorManager,element);
  if (validator.validate(processorManager,managerWriter)) {
    processorManager.addFlowManagerWriter(managerWriter);
  }
}"
26861,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelContainerDefinition modelContainerDefinition=new ModelContainerDefinition((TypeElement)element,processorManager);
  processorManager.addModelContainerDefinition(modelContainerDefinition);
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  if (element instanceof TypeElement) {
    ModelContainerDefinition modelContainerDefinition=new ModelContainerDefinition((TypeElement)element,processorManager);
    if (validator.validate(processorManager,modelContainerDefinition)) {
      processorManager.addModelContainerDefinition(modelContainerDefinition);
    }
  }
}"
26862,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelViewDefinition modelViewDefinition=new ModelViewDefinition(processorManager,element);
  processorManager.addModelViewDefinition(modelViewDefinition);
  try {
    modelViewDefinition.writeViewTable();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelViewDefinition modelViewDefinition=new ModelViewDefinition(processorManager,element);
  if (viewValidator.validate(processorManager,modelViewDefinition)) {
    processorManager.addModelViewDefinition(modelViewDefinition);
    try {
      modelViewDefinition.writeViewTable();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}"
26863,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  QueryModelDefinition queryModelDefinition=new QueryModelDefinition(element,processorManager);
  processorManager.addQueryModelDefinition(queryModelDefinition);
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  QueryModelDefinition queryModelDefinition=new QueryModelDefinition(element,processorManager);
  if (queryModelDefinition.databaseTypeName != null) {
    processorManager.addQueryModelDefinition(queryModelDefinition);
  }
}"
26864,"public String addColumnForTypeConverter(ColumnDefinition columnDefinition,ClassName typeConverterName){
  List<ColumnDefinition> columnDefinitions=associatedTypeConverters.get(typeConverterName);
  if (columnDefinitions == null) {
    columnDefinitions=new ArrayList<>();
  }
  columnDefinitions.add(columnDefinition);
  return ""String_Node_Str"" + typeConverterName.simpleName();
}","public String addColumnForTypeConverter(ColumnDefinition columnDefinition,ClassName typeConverterName){
  List<ColumnDefinition> columnDefinitions=associatedTypeConverters.get(typeConverterName);
  if (columnDefinitions == null) {
    columnDefinitions=new ArrayList<>();
    associatedTypeConverters.put(typeConverterName,columnDefinitions);
  }
  columnDefinitions.add(columnDefinition);
  return ""String_Node_Str"" + typeConverterName.simpleName();
}"
26865,"public ColumnDefinition(ProcessorManager processorManager,Element element,BaseTableDefinition baseTableDefinition){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=elementName;
  }
  Index index=element.getAnnotation(Index.class);
  if (index != null) {
    if (index.indexGroups().length == 0) {
      indexGroups.add(IndexGroup.GENERIC);
    }
 else {
      for (      int group : index.indexGroups()) {
        indexGroups.add(group);
      }
    }
  }
  ClassName typeConverterClassName=null;
  TypeElement typeConverterElement=null;
  if (column != null) {
    try {
      column.typeConverter();
    }
 catch (    MirroredTypeException mte) {
      typeConverterElement=manager.getElements().getTypeElement(mte.getTypeMirror().toString());
      typeConverterClassName=ClassName.get(typeConverterElement);
    }
  }
  boolean hasCustomConverter=false;
  if (typeConverterClassName != null && !typeConverterClassName.equals(ClassNames.TYPE_CONVERTER)) {
    TypeConverterDefinition typeConverterDefinition=new TypeConverterDefinition(typeConverterElement,manager);
    if (!typeConverterDefinition.getModelTypeName().equals(elementTypeName)) {
      manager.logError(""String_Node_Str"",typeConverterDefinition.getModelTypeName(),typeConverterClassName,elementTypeName);
    }
 else {
      hasCustomConverter=true;
      String fieldName=baseTableDefinition.addColumnForTypeConverter(this,typeConverterClassName);
      hasTypeConverter=true;
      columnAccess=new TypeConverterAccess(manager,this,fieldName);
    }
  }
  if (!hasCustomConverter) {
    TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
    if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
      columnAccess=new EnumColumnAccess(this);
    }
 else     if (elementTypeName.equals(ClassName.get(Blob.class))) {
      columnAccess=new BlobColumnAccess(this);
    }
 else {
      if (elementTypeName instanceof ParameterizedTypeName) {
      }
 else       if (elementTypeName instanceof ArrayTypeName) {
        processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
      }
 else {
        if (elementTypeName.box().equals(TypeName.BOOLEAN.box())) {
          isBoolean=true;
          columnAccess=new BooleanColumnAccess(manager,this);
        }
 else {
          final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
          if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
            hasTypeConverter=true;
            columnAccess=new TypeConverterAccess(manager,this);
          }
        }
      }
    }
  }
}","public ColumnDefinition(ProcessorManager processorManager,Element element,BaseTableDefinition baseTableDefinition){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=elementName;
  }
  Index index=element.getAnnotation(Index.class);
  if (index != null) {
    if (index.indexGroups().length == 0) {
      indexGroups.add(IndexGroup.GENERIC);
    }
 else {
      for (      int group : index.indexGroups()) {
        indexGroups.add(group);
      }
    }
  }
  ClassName typeConverterClassName=null;
  TypeElement typeConverterElement=null;
  if (column != null) {
    try {
      column.typeConverter();
    }
 catch (    MirroredTypeException mte) {
      typeConverterElement=manager.getElements().getTypeElement(mte.getTypeMirror().toString());
      typeConverterClassName=ClassName.get(typeConverterElement);
    }
  }
  boolean hasCustomConverter=false;
  if (typeConverterClassName != null && !typeConverterClassName.equals(ClassNames.TYPE_CONVERTER)) {
    TypeConverterDefinition typeConverterDefinition=new TypeConverterDefinition(typeConverterElement,manager);
    if (!typeConverterDefinition.getModelTypeName().equals(elementTypeName)) {
      manager.logError(""String_Node_Str"",typeConverterDefinition.getModelTypeName(),typeConverterClassName,elementTypeName);
    }
 else {
      hasCustomConverter=true;
      String fieldName=baseTableDefinition.addColumnForTypeConverter(this,typeConverterClassName);
      hasTypeConverter=true;
      columnAccess=new TypeConverterAccess(manager,this,typeConverterDefinition,fieldName);
    }
  }
  if (!hasCustomConverter) {
    TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
    if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
      columnAccess=new EnumColumnAccess(this);
    }
 else     if (elementTypeName.equals(ClassName.get(Blob.class))) {
      columnAccess=new BlobColumnAccess(this);
    }
 else {
      if (elementTypeName instanceof ParameterizedTypeName) {
      }
 else       if (elementTypeName instanceof ArrayTypeName) {
        processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
      }
 else {
        if (elementTypeName.box().equals(TypeName.BOOLEAN.box())) {
          isBoolean=true;
          columnAccess=new BooleanColumnAccess(manager,this);
        }
 else {
          final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
          if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
            hasTypeConverter=true;
            columnAccess=new TypeConverterAccess(manager,this);
          }
        }
      }
    }
  }
}"
26866,"public TypeConverterAccess(ProcessorManager manager,ColumnDefinition columnDefinition,String typeConverterFieldName){
  this(manager,columnDefinition);
  this.typeConverterFieldName=typeConverterFieldName;
}","public TypeConverterAccess(ProcessorManager manager,ColumnDefinition columnDefinition,TypeConverterDefinition typeConverterDefinition,String typeConverterFieldName){
  super(columnDefinition);
  this.manager=manager;
  this.typeConverterFieldName=typeConverterFieldName;
  this.typeConverterDefinition=typeConverterDefinition;
}"
26867,"@Override public void addToType(TypeSpec.Builder typeBuilder){
  Set<ClassName> customTypeConverters=baseTableDefinition.getAssociatedTypeConverters().keySet();
  for (  ClassName className : customTypeConverters) {
    typeBuilder.addField(FieldSpec.builder(className,""String_Node_Str"" + className.simpleName().toString(),Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",className).build());
  }
}","@Override public void addToType(TypeSpec.Builder typeBuilder){
  Set<ClassName> customTypeConverters=baseTableDefinition.getAssociatedTypeConverters().keySet();
  for (  ClassName className : customTypeConverters) {
    typeBuilder.addField(FieldSpec.builder(className,""String_Node_Str"" + className.simpleName(),Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",className).build());
  }
}"
26868,"@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  if (typeConverterFieldName == null) {
    codeBuilder.add(""String_Node_Str"",typeConverterDefinition.getDbTypeName(),ClassNames.FLOW_MANAGER,METHOD_TYPE_CONVERTER,columnDefinition.elementTypeName.box());
  }
 else {
    codeBuilder.add(typeConverterFieldName);
  }
  codeBuilder.add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter));
  return codeBuilder.build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  if (typeConverterFieldName == null) {
    codeBuilder.add(""String_Node_Str"",typeConverterDefinition.getDbTypeName(),ClassNames.FLOW_MANAGER,METHOD_TYPE_CONVERTER,columnDefinition.elementTypeName.box());
  }
 else {
    codeBuilder.add(typeConverterFieldName);
  }
  codeBuilder.add(""String_Node_Str"",typeConverterDefinition.getModelTypeName(),getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter));
  return codeBuilder.build().toString();
}"
26869,"@Override String getShortAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getShortAccessString(fieldType,elementName,isModelContainerAdapter)).build().toString();
}","@Override String getShortAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    return getExistingColumnAccess().getShortAccessString(fieldType,elementName,isModelContainerAdapter);
  }
 else {
    return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getShortAccessString(fieldType,elementName,isModelContainerAdapter)).build().toString();
  }
}"
26870,"@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    return getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  }
 else {
    return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
  }
}"
26871,"@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    String method=SQLiteType.getMethod(fieldType);
    if (method == null) {
      method=""String_Node_Str"";
    }
    return variableNameString + ""String_Node_Str"" + method+ ""String_Node_Str""+ elementName+ ""String_Node_Str"";
  }
 else {
    return variableNameString + ""String_Node_Str"" + fullElementName;
  }
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    String method=SQLiteType.getModelContainerMethod(fieldType);
    if (method == null) {
      method=""String_Node_Str"";
    }
    return variableNameString + ""String_Node_Str"" + method+ ""String_Node_Str""+ elementName+ ""String_Node_Str"";
  }
 else {
    return variableNameString + ""String_Node_Str"" + fullElementName;
  }
}"
26872,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(tableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(ClassNames.CONDITION_GROUP);
  CodeBlock.Builder code=CodeBlock.builder().add(""String_Node_Str"",ClassNames.CONDITION_GROUP);
  for (  ColumnDefinition columnDefinition : tableDefinition.getPrimaryColumnDefinitions()) {
    code.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnDefinition.columnName,columnDefinition.getRawColumnAccessString(isModelContainerAdapter));
  }
  methodBuilder.addCode(code.addStatement(""String_Node_Str"").build());
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(tableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(ClassNames.CONDITION_GROUP);
  CodeBlock.Builder code=CodeBlock.builder().add(""String_Node_Str"",ClassNames.CONDITION_GROUP);
  for (  ColumnDefinition columnDefinition : tableDefinition.getPrimaryColumnDefinitions()) {
    code.add(""String_Node_Str"",tableDefinition.getPropertyClassName(),columnDefinition.columnName,columnDefinition.getPropertyComparisonAccessStatement(isModelContainerAdapter));
  }
  methodBuilder.addCode(code.addStatement(""String_Node_Str"").build());
  return methodBuilder.build();
}"
26873,"private String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || columnAccess instanceof ModelContainerAccess || isModelContainerAdapter) {
    finalAccessStatement=getRefName();
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof ModelContainerAccess) {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}","String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || columnAccess instanceof ModelContainerAccess || isModelContainerAdapter) {
    finalAccessStatement=getRefName();
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof ModelContainerAccess) {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}"
26874,"@Override public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  String finalAccessStatement=getFinalAccessStatement(builder,isModelContainerAdapter,statement);
  builder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getContentValuesStatement(isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,referenceDefinition.columnName);
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}","@Override public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  String finalAccessStatement=getFinalAccessStatement(builder,isModelContainerAdapter,statement);
  builder.addStatement(""String_Node_Str"",statement);
  builder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getContentValuesStatement(isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,referenceDefinition.columnName);
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}"
26875,"CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(isModelContainerAdapter,foreignKeyFieldName);
  String columnShortAccess=columnAccess.getShortAccessString(isModelContainerAdapter,foreignColumnName);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getContentValuesStatement(columnShortAccess,combined,columnName,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}","CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(isModelContainerAdapter,foreignKeyFieldName);
  shortAccess=foreignKeyColumnDefinition.getForeignKeyReferenceAccess(isModelContainerAdapter,shortAccess);
  String columnShortAccess=columnAccess.getShortAccessString(isModelContainerAdapter,foreignColumnName);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getContentValuesStatement(columnShortAccess,combined,columnName,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}"
26876,"private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(databaseName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName);
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.getAdapterClassName());
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.outputClassName);
  }
  builder.addMethod(constructor.build());
}","private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(databaseName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName);
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.getAdapterClassName());
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.getAdapterClassName());
  }
  builder.addMethod(constructor.build());
}"
26877,"public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnName;
  }
  TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
  if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
 else   if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
 else {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (!args.isEmpty()) {
        columnAccess=new ModelContainerAccess(manager,this);
      }
    }
 else     if (elementTypeName instanceof ArrayTypeName) {
      processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
    }
 else {
      final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
      if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
        hasTypeConverter=true;
        columnAccess=new TypeConverterAccess(manager,this);
      }
    }
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN)) {
    isBoolean=true;
  }
}","public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnName;
  }
  TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
  if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
 else   if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
 else {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (!args.isEmpty()) {
        columnAccess=new ModelContainerAccess(manager,this);
      }
    }
 else     if (elementTypeName instanceof ArrayTypeName) {
      processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
    }
 else {
      final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
      if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
        hasTypeConverter=true;
        columnAccess=new TypeConverterAccess(manager,this);
      }
    }
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN.box())) {
    isBoolean=true;
    columnAccess=new BooleanColumnAccess(manager,this);
  }
}"
26878,"public static CodeBlock.Builder getLoadFromCursorMethod(String elementName,String fullElementName,TypeName elementTypeName,String columnName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String method=""String_Node_Str"";
  if (SQLiteType.containsMethod(elementTypeName)) {
    method=SQLiteType.getMethod(elementTypeName);
  }
 else   if (columnAccess instanceof TypeConverterAccess) {
    method=SQLiteType.getMethod(((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String indexName=""String_Node_Str"" + columnName;
  codeBuilder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,columnName);
  codeBuilder.beginControlFlow(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
  codeBuilder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,fullElementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,method,indexName).build()));
  codeBuilder.endControlFlow();
  return codeBuilder;
}","public static CodeBlock.Builder getLoadFromCursorMethod(String elementName,String fullElementName,TypeName elementTypeName,String columnName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String method=""String_Node_Str"";
  if (SQLiteType.containsMethod(elementTypeName)) {
    method=SQLiteType.getMethod(elementTypeName);
  }
 else   if (columnAccess instanceof TypeConverterAccess) {
    method=SQLiteType.getMethod(((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName());
  }
 else   if (columnAccess instanceof EnumColumnAccess) {
    method=SQLiteType.getMethod(ClassName.get(String.class));
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String indexName=""String_Node_Str"" + columnName;
  codeBuilder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,columnName);
  codeBuilder.beginControlFlow(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
  codeBuilder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,fullElementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,method,indexName).build()));
  codeBuilder.endControlFlow();
  return codeBuilder;
}"
26879,"@Override String getShortAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getShortAccessString(fieldType,elementName,isModelContainerAdapter)).build().toString();
}","@Override String getShortAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    return getExistingColumnAccess().getShortAccessString(ArrayTypeName.of(TypeName.BYTE),elementName,isModelContainerAdapter);
  }
 else {
    return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getShortAccessString(fieldType,elementName,isModelContainerAdapter)).build().toString();
  }
}"
26880,"@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  if (isModelContainerAdapter) {
    return getExistingColumnAccess().getColumnAccessString(ArrayTypeName.of(TypeName.BYTE),elementName,fullElementName,variableNameString,isModelContainerAdapter);
  }
 else {
    return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
  }
}"
26881,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",ClassName.get(Blob.class),formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",ClassName.get(Blob.class),formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(ArrayTypeName.of(TypeName.BYTE),elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26882,"public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  codeBuilder.addStatement(""String_Node_Str"",elementName,fullElementName,variableNameString);
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      typeName=ClassName.get(String.class);
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  codeBuilder.addStatement(""String_Node_Str"",elementName,fullElementName,variableNameString);
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      typeName=ClassName.get(String.class);
    }
 else     if (columnAccess instanceof BlobColumnAccess) {
      typeName=ArrayTypeName.of(TypeName.BYTE);
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}"
26883,"public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      typeName=ClassName.get(String.class);
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof EnumColumnAccess) {
      typeName=ClassName.get(String.class);
    }
 else     if (columnAccess instanceof BlobColumnAccess) {
      typeName=ArrayTypeName.of(TypeName.BYTE);
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}"
26884,"@Override public byte[] getBlbValue(String key){
  try {
    if (getData() != null) {
      Object value=getData().get(key);
      if (value instanceof Blob) {
        return ((Blob)value).getBlob();
      }
 else {
        return (byte[])value;
      }
    }
  }
 catch (  JSONException e) {
    FlowLog.logError(e);
    return null;
  }
}","@Override public byte[] getBlbValue(String key){
  try {
    if (getData() != null) {
      Object value=getData().get(key);
      if (value instanceof Blob) {
        return ((Blob)value).getBlob();
      }
 else {
        return (byte[])value;
      }
    }
  }
 catch (  JSONException e) {
    FlowLog.logError(e);
  }
  return null;
}"
26885,"CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(isModelContainerAdapter,foreignKeyFieldName);
  String columnShortAccess=getShortColumnAccess(isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getSQLiteStatementMethod(index,columnShortAccess,combined,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}","CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(isModelContainerAdapter,foreignKeyFieldName);
  shortAccess=foreignKeyColumnDefinition.getForeignKeyReferenceAccess(isModelContainerAdapter,shortAccess);
  String columnShortAccess=getShortColumnAccess(isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getSQLiteStatementMethod(index,columnShortAccess,combined,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}"
26886,"private String getShortColumnAccess(boolean isModelContainerAdapter){
  return isModelContainerAdapter ? modelContainerAccess.getShortAccessString(isModelContainerAdapter,foreignColumnName) : columnAccess.getShortAccessString(isModelContainerAdapter,foreignColumnName);
}","private String getShortColumnAccess(boolean isModelContainerAdapter){
  return isModelContainerAdapter ? foreignColumnName : columnAccess.getShortAccessString(isModelContainerAdapter,foreignColumnName);
}"
26887,"@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class),ClassName.get(String.class),ClassName.get(Class.class)),""String_Node_Str"",Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",ParameterizedTypeName.get(HashMap.class)).build());
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    constructorCode.addStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.elementTypeName);
  }
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassName.get(String.class),""String_Node_Str"").addStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").returns(ClassName.get(Class.class)).build());
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableDefinition.tableName);
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}","@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class),ClassName.get(String.class),ClassName.get(Class.class)),""String_Node_Str"",Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",ParameterizedTypeName.get(HashMap.class)).build());
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    constructorCode.addStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.erasedTypeName);
  }
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassName.get(String.class),""String_Node_Str"").addStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").returns(ClassName.get(Class.class)).build());
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableDefinition.tableName);
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}"
26888,"public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.QUERY_MODEL_ADAPTER,elementClassName));
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).build());
  JavaFile javaFile=JavaFile.builder(packageName,typeBuilder.build()).build();
  javaFile.writeTo(processingEnvironment.getFiler());
}","public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.QUERY_MODEL_ADAPTER,elementClassName));
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).returns(elementClassName).addStatement(""String_Node_Str"",elementClassName).build());
  JavaFile javaFile=JavaFile.builder(packageName,typeBuilder.build()).build();
  javaFile.writeTo(processingEnvironment.getFiler());
}"
26889,"public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addCode(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addCode(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}","public void writeAdapter(ProcessingEnvironment processingEnvironment) throws IOException {
  TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(adapterName).addModifiers(Modifier.PUBLIC,Modifier.FINAL).superclass(ParameterizedTypeName.get(ClassNames.MODEL_ADAPTER,elementClassName));
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,tableName);
  for (  MethodDefinition methodDefinition : methods) {
    MethodSpec spec=methodDefinition.getMethodSpec();
    if (spec != null) {
      typeBuilder.addMethod(spec);
    }
  }
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",elementClassName).returns(elementClassName).build());
  if (!updateConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,updateConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  if (!insertConflictActionName.isEmpty()) {
    typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",ClassNames.CONFLICT_ACTION,insertConflictActionName).returns(ClassNames.CONFLICT_ACTION).build());
  }
  JavaFile.Builder javaFileBuilder=JavaFile.builder(packageName,typeBuilder.build());
  javaFileBuilder.build().writeTo(processingEnvironment.getFiler());
}"
26890,"public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=elementName;
  }
  TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
  if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
 else   if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
 else {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (!args.isEmpty()) {
        columnAccess=new ModelContainerAccess(manager,this);
      }
    }
 else     if (elementTypeName instanceof ArrayTypeName) {
      processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
    }
 else {
      final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
      if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
        hasTypeConverter=true;
        columnAccess=new TypeConverterAccess(manager,this);
      }
    }
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN.box())) {
    isBoolean=true;
    columnAccess=new BooleanColumnAccess(manager,this);
  }
}","public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=elementName;
  }
  TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
  if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
 else   if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
 else {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (!args.isEmpty()) {
        columnAccess=new ModelContainerAccess(this);
      }
    }
 else     if (elementTypeName instanceof ArrayTypeName) {
      processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
    }
 else {
      final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
      if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
        hasTypeConverter=true;
        columnAccess=new TypeConverterAccess(manager,this);
      }
    }
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN.box())) {
    isBoolean=true;
    columnAccess=new BooleanColumnAccess(manager,this);
  }
}"
26891,"public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  codeBuilder.addStatement(""String_Node_Str"",elementName,fullElementName,variableNameString);
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}"
26892,"public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=(isModelContainerAdapter ? (variableNameString + elementName) : (""String_Node_Str"" + fullElementName));
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}"
26893,"private String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=getRefName();
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}","private String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || columnAccess instanceof ModelContainerAccess || isModelContainerAdapter) {
    finalAccessStatement=getRefName();
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else     if (columnAccess instanceof ModelContainerAccess) {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}"
26894,"public ModelContainerAccess(ProcessorManager manager,ColumnDefinition columnDefinition){
  this.columnDefinition=columnDefinition;
  this.existingColumnAccess=columnDefinition.columnAccess;
  this.manager=manager;
  ContainerKey containerKey=columnDefinition.element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnDefinition.columnName;
  }
}","public ModelContainerAccess(BaseColumnAccess existingColumnAccess,String containerKeyName){
  this.existingColumnAccess=existingColumnAccess;
  this.containerKeyName=containerKeyName;
}"
26895,"@Override public MethodSpec getMethodSpec(){
  CodeBlock.Builder code=CodeBlock.builder();
  code.beginControlFlow(""String_Node_Str"",PARAM_URI);
  for (  TableEndpointDefinition tableEndpointDefinition : contentProviderDefinition.endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      if (uriDefinition.deleteEnabled) {
        code.beginControlFlow(""String_Node_Str"",uriDefinition.name);
        SqlQueryBuilder queryBuilder=new SqlQueryBuilder(""String_Node_Str"").appendDelete().appendFromTable(contentProviderDefinition.databaseName,tableEndpointDefinition.tableName).appendWhere().appendPathSegments(manager,contentProviderDefinition.databaseName,tableEndpointDefinition.tableName,uriDefinition.segments).appendCount();
        code.addStatement(queryBuilder.getQuery());
        new NotifyMethod(tableEndpointDefinition,uriDefinition,Notify.Method.DELETE).addCode(code);
        code.addStatement(""String_Node_Str"");
        code.endControlFlow();
      }
    }
  }
  code.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalArgumentException.class),""String_Node_Str"",PARAM_URI).endControlFlow();
  return MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.URI,PARAM_URI).addParameter(ClassName.get(String.class),PARAM_SELECTION).addParameter(ArrayTypeName.of(String.class),PARAM_SELECTION_ARGS).returns(TypeName.INT).build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder method=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.URI,PARAM_URI).addParameter(ClassName.get(String.class),PARAM_SELECTION).addParameter(ArrayTypeName.of(String.class),PARAM_SELECTION_ARGS).returns(TypeName.INT);
  method.beginControlFlow(""String_Node_Str"",PARAM_URI);
  for (  TableEndpointDefinition tableEndpointDefinition : contentProviderDefinition.endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      if (uriDefinition.deleteEnabled) {
        method.beginControlFlow(""String_Node_Str"",uriDefinition.name);
        CodeBlock.Builder code=CodeBlock.builder();
        code.add(""String_Node_Str"",ClassNames.DELETE);
        ProviderMethodUtils.appendTableName(code,contentProviderDefinition.databaseName,tableEndpointDefinition.tableName);
        code.add(""String_Node_Str"");
        ProviderMethodUtils.appendPathSegments(code,manager,uriDefinition.segments,contentProviderDefinition.databaseName,tableEndpointDefinition.tableName);
        code.add(""String_Node_Str"");
        method.addCode(code.build());
        new NotifyMethod(tableEndpointDefinition,uriDefinition,Notify.Method.DELETE).addCode(code);
        method.addStatement(""String_Node_Str"");
        method.endControlFlow();
      }
    }
  }
  method.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalArgumentException.class),""String_Node_Str"",PARAM_URI).endControlFlow();
  method.endControlFlow();
  return method.build();
}"
26896,"public NotifyDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  Notify notify=typeElement.getAnnotation(Notify.class);
  paths=notify.paths();
  method=notify.method();
  parent=((TypeElement)typeElement.getEnclosingElement()).getQualifiedName().toString();
  methodName=typeElement.getSimpleName().toString();
  ExecutableElement executableElement=((ExecutableElement)typeElement);
  List<? extends VariableElement> parameters=executableElement.getParameters();
  StringBuilder paramsBuilder=new StringBuilder();
  boolean first=true;
  for (  VariableElement param : parameters) {
    if (first) {
      first=false;
    }
 else {
      paramsBuilder.append(""String_Node_Str"");
    }
    TypeMirror paramType=param.asType();
    String typeAsString=paramType.toString();
    if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
  }
  params=paramsBuilder.toString();
  TypeMirror typeMirror=executableElement.getReturnType();
  if ((ClassNames.URI + ""String_Node_Str"").equals(typeMirror.toString())) {
    returnsArray=true;
  }
 else   if (ClassNames.URI.equals(typeMirror.toString())) {
    returnsSingle=true;
  }
 else {
    processorManager.logError(""String_Node_Str"");
  }
}","public NotifyDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  Notify notify=typeElement.getAnnotation(Notify.class);
  paths=notify.paths();
  method=notify.method();
  parent=((TypeElement)typeElement.getEnclosingElement()).getQualifiedName().toString();
  methodName=typeElement.getSimpleName().toString();
  ExecutableElement executableElement=((ExecutableElement)typeElement);
  List<? extends VariableElement> parameters=executableElement.getParameters();
  StringBuilder paramsBuilder=new StringBuilder();
  boolean first=true;
  for (  VariableElement param : parameters) {
    if (first) {
      first=false;
    }
 else {
      paramsBuilder.append(""String_Node_Str"");
    }
    TypeMirror paramType=param.asType();
    String typeAsString=paramType.toString();
    if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(typeAsString)) {
      paramsBuilder.append(""String_Node_Str"");
    }
  }
  params=paramsBuilder.toString();
  TypeMirror typeMirror=executableElement.getReturnType();
  if ((ClassNames.URI + ""String_Node_Str"").equals(typeMirror.toString())) {
    returnsArray=true;
  }
 else   if (ClassNames.URI.toString().equals(typeMirror.toString())) {
    returnsSingle=true;
  }
 else {
    processorManager.logError(""String_Node_Str"");
  }
}"
26897,"public void writeSave(CodeBlock.Builder codeBuilder){
  if (isSave()) {
    codeBuilder.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassNames.SAVE_MODEL_LIST_TRANSACTION),ClassNames.PROCESS_MODEL_INFO,getMethodName());
  }
}","public void writeSave(CodeBlock.Builder codeBuilder){
  if (isSave()) {
    codeBuilder.addStatement(""String_Node_Str"",ClassNames.SAVE_MODEL_LIST_TRANSACTION,ClassNames.PROCESS_MODEL_INFO,getMethodName());
  }
}"
26898,"/** 
 * Writes a delete method that will delete all related objects.
 * @param codeBuilder
 */
public void writeDelete(CodeBlock.Builder codeBuilder){
  if (isDelete()) {
    codeBuilder.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassNames.DELETE_MODEL_LIST_TRANSACTION),ClassNames.PROCESS_MODEL_INFO,getMethodName());
    codeBuilder.addStatement(""String_Node_Str"",getVariableName());
  }
}","/** 
 * Writes a delete method that will delete all related objects.
 * @param codeBuilder
 */
public void writeDelete(CodeBlock.Builder codeBuilder){
  if (isDelete()) {
    codeBuilder.addStatement(""String_Node_Str"",ClassNames.DELETE_MODEL_LIST_TRANSACTION,ClassNames.PROCESS_MODEL_INFO,getMethodName());
    codeBuilder.addStatement(""String_Node_Str"",getVariableName());
  }
}"
26899,"public OneToManyDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  OneToMany oneToMany=typeElement.getAnnotation(OneToMany.class);
  methodName=typeElement.getSimpleName().toString();
  variableName=oneToMany.variableName();
  if (variableName == null || variableName.isEmpty()) {
    variableName=methodName.replace(""String_Node_Str"",""String_Node_Str"");
    variableName=variableName.substring(0,1).toLowerCase() + variableName.substring(1);
  }
  methods.addAll(Arrays.asList(oneToMany.methods()));
}","public OneToManyDefinition(ExecutableElement typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  OneToMany oneToMany=typeElement.getAnnotation(OneToMany.class);
  methodName=typeElement.getSimpleName().toString();
  variableName=oneToMany.variableName();
  if (variableName == null || variableName.isEmpty()) {
    variableName=methodName.replace(""String_Node_Str"",""String_Node_Str"");
    variableName=variableName.substring(0,1).toLowerCase() + variableName.substring(1);
  }
  methods.addAll(Arrays.asList(oneToMany.methods()));
}"
26900,"@Override protected void createColumnDefinitions(TypeElement typeElement){
  List<? extends Element> elements=manager.getElements().getAllMembers(typeElement);
  ColumnValidator columnValidator=new ColumnValidator();
  OneToManyValidator oneToManyValidator=new OneToManyValidator();
  for (  Element element : elements) {
    boolean isValidColumn=(allFields && (element.getKind().isField() && !element.getModifiers().contains(Modifier.STATIC) && !element.getModifiers().contains(Modifier.PRIVATE)&& !element.getModifiers().contains(Modifier.FINAL)));
    inheritedColumnMap.containsKey(element.getSimpleName().toString());
    if (element.getAnnotation(Column.class) != null || isValidColumn) {
      ColumnDefinition columnDefinition;
      if (element.getAnnotation(ForeignKey.class) != null) {
        columnDefinition=new ForeignKeyColumnDefinition(manager,element);
      }
 else {
        columnDefinition=new ColumnDefinition(manager,element);
      }
      if (columnValidator.validate(manager,columnDefinition)) {
        columnDefinitions.add(columnDefinition);
        mColumnMap.put(columnDefinition.columnName,columnDefinition);
        if (columnDefinition.isPrimaryKey) {
          primaryColumnDefinitions.add(columnDefinition);
        }
 else         if (columnDefinition instanceof ForeignKeyColumnDefinition) {
          foreignKeyDefinitions.add((ForeignKeyColumnDefinition)columnDefinition);
        }
 else         if (columnDefinition.isPrimaryKeyAutoIncrement) {
          autoIncrementDefinition=columnDefinition;
          hasAutoIncrement=true;
        }
        if (!columnDefinition.uniqueGroups.isEmpty()) {
          List<Integer> groups=columnDefinition.uniqueGroups;
          for (          int group : groups) {
            List<ColumnDefinition> groupList=columnUniqueMap.get(group);
            if (groupList == null) {
              groupList=new ArrayList<>();
              columnUniqueMap.put(group,groupList);
            }
            if (!groupList.contains(columnDefinition)) {
              groupList.add(columnDefinition);
            }
          }
        }
      }
    }
 else     if (element.getAnnotation(OneToMany.class) != null) {
      OneToManyDefinition oneToManyDefinition=new OneToManyDefinition(element,manager);
      if (oneToManyValidator.validate(manager,oneToManyDefinition)) {
        oneToManyDefinitions.add(oneToManyDefinition);
      }
    }
  }
}","@Override protected void createColumnDefinitions(TypeElement typeElement){
  List<? extends Element> elements=manager.getElements().getAllMembers(typeElement);
  ColumnValidator columnValidator=new ColumnValidator();
  OneToManyValidator oneToManyValidator=new OneToManyValidator();
  for (  Element element : elements) {
    boolean isValidColumn=(allFields && (element.getKind().isField() && !element.getModifiers().contains(Modifier.STATIC) && !element.getModifiers().contains(Modifier.PRIVATE)&& !element.getModifiers().contains(Modifier.FINAL)));
    inheritedColumnMap.containsKey(element.getSimpleName().toString());
    if (element.getAnnotation(Column.class) != null || isValidColumn) {
      ColumnDefinition columnDefinition;
      if (element.getAnnotation(ForeignKey.class) != null) {
        columnDefinition=new ForeignKeyColumnDefinition(manager,element);
      }
 else {
        columnDefinition=new ColumnDefinition(manager,element);
      }
      if (columnValidator.validate(manager,columnDefinition)) {
        columnDefinitions.add(columnDefinition);
        mColumnMap.put(columnDefinition.columnName,columnDefinition);
        if (columnDefinition.isPrimaryKey) {
          primaryColumnDefinitions.add(columnDefinition);
        }
 else         if (columnDefinition instanceof ForeignKeyColumnDefinition) {
          foreignKeyDefinitions.add((ForeignKeyColumnDefinition)columnDefinition);
        }
 else         if (columnDefinition.isPrimaryKeyAutoIncrement) {
          autoIncrementDefinition=columnDefinition;
          hasAutoIncrement=true;
        }
        if (!columnDefinition.uniqueGroups.isEmpty()) {
          List<Integer> groups=columnDefinition.uniqueGroups;
          for (          int group : groups) {
            List<ColumnDefinition> groupList=columnUniqueMap.get(group);
            if (groupList == null) {
              groupList=new ArrayList<>();
              columnUniqueMap.put(group,groupList);
            }
            if (!groupList.contains(columnDefinition)) {
              groupList.add(columnDefinition);
            }
          }
        }
      }
    }
 else     if (element.getAnnotation(OneToMany.class) != null) {
      OneToManyDefinition oneToManyDefinition=new OneToManyDefinition((ExecutableElement)element,manager);
      if (oneToManyValidator.validate(manager,oneToManyDefinition)) {
        oneToManyDefinitions.add(oneToManyDefinition);
      }
    }
  }
}"
26901,"public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnName;
  }
  final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
  if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
    hasTypeConverter=true;
    columnAccess=new TypeConverterAccess(manager,this);
  }
  if (element.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
  if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN)) {
    isBoolean=true;
  }
  if (elementTypeName instanceof ParameterizedTypeName) {
    List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
    if (!args.isEmpty()) {
      columnAccess=new ModelContainerAccess(manager,this);
    }
  }
 else   if (elementTypeName instanceof ArrayTypeName) {
    processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
  }
}","public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnName;
  }
  TypeElement typeElement=manager.getElements().getTypeElement(element.asType().toString());
  if (typeElement != null && typeElement.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
 else   if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
 else {
    if (elementTypeName instanceof ParameterizedTypeName) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (!args.isEmpty()) {
        columnAccess=new ModelContainerAccess(manager,this);
      }
    }
 else     if (elementTypeName instanceof ArrayTypeName) {
      processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
    }
 else {
      final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
      if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
        hasTypeConverter=true;
        columnAccess=new TypeConverterAccess(manager,this);
      }
    }
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN)) {
    isBoolean=true;
  }
}"
26902,"public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (!referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
 else {
    referencedTableClassName=elementClassName;
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess,this);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}","public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (!referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
 else {
    if (columnAccess instanceof ModelContainerAccess) {
      List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
      if (args.size() > 0) {
        referencedTableClassName=ClassName.bestGuess(args.get(0).toString());
      }
    }
 else {
      referencedTableClassName=ClassName.bestGuess(elementTypeName.toString());
    }
  }
  if (referencedTableClassName == null) {
    manager.logError(""String_Node_Str"",typeElement,elementTypeName);
  }
  TypeElement element=manager.getElements().getTypeElement(manager.getTypeUtils().erasure(typeElement.asType()).toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess,this);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}"
26903,"@Override public MethodSpec getMethodSpec(){
  CodeBlock.Builder code=CodeBlock.builder();
  code.beginControlFlow(""String_Node_Str"",PARAM_URI);
  for (  TableEndpointDefinition tableEndpointDefinition : contentProviderDefinition.endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      if (uriDefinition.insertEnabled) {
        code.beginControlFlow(""String_Node_Str"",uriDefinition.name);
        code.addStatement(""String_Node_Str"",ClassNames.MODEL_ADAPTER,ClassNames.FLOW_MANAGER,ClassNames.FLOW_MANAGER,contentProviderDefinition.databaseName,tableEndpointDefinition.tableName);
        SqlQueryBuilder queryBuilder=new SqlQueryBuilder(""String_Node_Str"").appendGetDatabase(contentProviderDefinition.databaseName).appendInsertWithOnConflict(tableEndpointDefinition.tableName);
        code.addStatement(queryBuilder.getQuery());
        if (!isBulk) {
          new NotifyMethod(tableEndpointDefinition,uriDefinition,Notify.Method.INSERT).addCode(code);
          code.addStatement(""String_Node_Str"",ClassNames.CONTENT_URIS);
        }
 else {
          code.addStatement(""String_Node_Str"");
        }
        code.endControlFlow();
      }
    }
  }
  code.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalStateException.class),""String_Node_Str"",PARAM_URI).endControlFlow();
  code.endControlFlow();
  return MethodSpec.methodBuilder(isBulk ? ""String_Node_Str"" : ""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassNames.URI,PARAM_URI).addParameter(ClassNames.CONTENT_VALUES,PARAM_CONTENT_VALUES).addModifiers(isBulk ? Modifier.PROTECTED : Modifier.PUBLIC,Modifier.FINAL).addCode(code.build()).returns(isBulk ? TypeName.INT : ClassNames.URI).build();
}","@Override public MethodSpec getMethodSpec(){
  CodeBlock.Builder code=CodeBlock.builder();
  code.beginControlFlow(""String_Node_Str"",PARAM_URI);
  for (  TableEndpointDefinition tableEndpointDefinition : contentProviderDefinition.endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      if (uriDefinition.insertEnabled) {
        code.beginControlFlow(""String_Node_Str"",uriDefinition.name);
        code.addStatement(""String_Node_Str"",ClassNames.MODEL_ADAPTER,ClassNames.FLOW_MANAGER,ClassNames.FLOW_MANAGER,contentProviderDefinition.databaseName,tableEndpointDefinition.tableName);
        SqlQueryBuilder queryBuilder=new SqlQueryBuilder(""String_Node_Str"").appendGetDatabase(contentProviderDefinition.databaseName).appendInsertWithOnConflict(tableEndpointDefinition.tableName);
        code.addStatement(queryBuilder.getQuery());
        if (!isBulk) {
          new NotifyMethod(tableEndpointDefinition,uriDefinition,Notify.Method.INSERT).addCode(code);
          code.addStatement(""String_Node_Str"",ClassNames.CONTENT_URIS,PARAM_URI);
        }
 else {
          code.addStatement(""String_Node_Str"");
        }
        code.endControlFlow();
      }
    }
  }
  code.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalStateException.class),""String_Node_Str"",PARAM_URI).endControlFlow();
  code.endControlFlow();
  return MethodSpec.methodBuilder(isBulk ? ""String_Node_Str"" : ""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassNames.URI,PARAM_URI).addParameter(ClassNames.CONTENT_VALUES,PARAM_CONTENT_VALUES).addModifiers(isBulk ? Modifier.PROTECTED : Modifier.PUBLIC,Modifier.FINAL).addCode(code.build()).returns(isBulk ? TypeName.INT : ClassNames.URI).build();
}"
26904,"public void setContainer(AutoIncrementContainer autoIncrementContainer){
  container=new ForeignKeyContainer<>(AutoIncrementContainer.class);
  container.put(AutoIncrementContainer_Table.A_ID,autoIncrementContainer.a_id);
  container.put(AutoIncrementContainer_Table.NAME,autoIncrementContainer.name);
  container.put(AutoIncrementContainer_Table.ID,autoIncrementContainer.id);
}","public void setContainer(AutoIncrementContainer autoIncrementContainer){
  container=new ForeignKeyContainer<>(AutoIncrementContainer.class);
}"
26905,"public void setTestModel1(ParentModel model1){
  testModel1=new ForeignKeyContainer<>(ParentModel.class);
  Map<String,Object> map=new HashMap<>();
  map.put(ParentModel_Table.NAME,model1.name);
  map.put(ParentModel_Table.TYPE,model1.type);
  testModel1.setData(map);
}","public void setTestModel1(ParentModel model1){
  testModel1=new ForeignKeyContainer<>(ParentModel.class);
  Map<String,Object> map=new HashMap<>();
  testModel1.setData(map);
}"
26906,"@OneToMany(methods={OneToMany.Method.ALL},variableName=""String_Node_Str"") public List<Ant> getMyAnts(){
  if (ants == null) {
    ants=new Select().from(Ant.class).where(column(Ant_Table.containerQueenId).eq(id)).queryList();
  }
  return ants;
}","@OneToMany(methods={OneToMany.Method.ALL},variableName=""String_Node_Str"") public List<Ant> getMyAnts(){
  if (ants == null) {
  }
  return ants;
}"
26907,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",variableNameString,formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",ClassName.get(Blob.class),formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26908,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",columnDefinition.elementClassName,formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,CodeBlock formattedAccess){
  CodeBlock newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",columnDefinition.elementTypeName,formattedAccess).build();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26909,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).returns(ClassName.get(String.class));
  CodeBlock.Builder creationBuilder=CodeBlock.builder().add(""String_Node_Str"").add(QueryBuilder.quote(tableDefinition.tableName)).add(""String_Node_Str"");
  for (int i=0; i < tableDefinition.getColumnDefinitions().size(); i++) {
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition columnDefinition=tableDefinition.getColumnDefinitions().get(i);
    creationBuilder.add(columnDefinition.getCreationName());
  }
  for (  UniqueGroupsDefinition definition : tableDefinition.uniqueGroupsDefinitions) {
    creationBuilder.add(definition.getCreationName());
  }
  int primarySize=tableDefinition.getPrimaryColumnDefinitions().size();
  for (int i=0; i < primarySize; i++) {
    if (i == 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition primaryDefinition=tableDefinition.getPrimaryColumnDefinitions().get(i);
    creationBuilder.add(QueryBuilder.quote(primaryDefinition.columnName));
    if (i == primarySize - 1) {
      creationBuilder.add(""String_Node_Str"");
    }
  }
  int foreignSize=tableDefinition.foreignKeyDefinitions.size();
  List<CodeBlock> foreignKeyBlocks=new ArrayList<>();
  List<CodeBlock> tableNameBlocks=new ArrayList<>();
  List<CodeBlock> referenceKeyBlocks=new ArrayList<>();
  for (int i=0; i < foreignSize; i++) {
    CodeBlock.Builder foreignKeyBuilder=CodeBlock.builder();
    CodeBlock.Builder referenceBuilder=CodeBlock.builder();
    ForeignKeyColumnDefinition foreignKeyColumnDefinition=tableDefinition.foreignKeyDefinitions.get(i);
    foreignKeyBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        foreignKeyBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      foreignKeyBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.columnName));
    }
    foreignKeyBuilder.add(""String_Node_Str"");
    foreignKeyBlocks.add(foreignKeyBuilder.build());
    tableNameBlocks.add(CodeBlock.builder().add(""String_Node_Str"",ClassNames.FLOW_MANAGER,foreignKeyColumnDefinition.referencedTableClassName).build());
    referenceBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        referenceBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(i);
      referenceBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.foreignColumnName));
    }
    referenceBuilder.add(""String_Node_Str"",foreignKeyColumnDefinition.onUpdate.name().replace(""String_Node_Str"",""String_Node_Str""),foreignKeyColumnDefinition.onDelete.name().replace(""String_Node_Str"",""String_Node_Str""));
    referenceKeyBlocks.add(referenceBuilder.build());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder().add(""String_Node_Str"",creationBuilder.build().toString());
  if (foreignSize > 0) {
    for (int i=0; i < foreignSize; i++) {
      codeBuilder.add(""String_Node_Str"",foreignKeyBlocks.get(i),tableNameBlocks.get(i),referenceKeyBlocks.get(i));
    }
  }
  codeBuilder.add(""String_Node_Str"",""String_Node_Str"").add(""String_Node_Str"");
  methodBuilder.addCode(codeBuilder.build());
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).returns(ClassName.get(String.class));
  CodeBlock.Builder creationBuilder=CodeBlock.builder().add(""String_Node_Str"").add(QueryBuilder.quote(tableDefinition.tableName)).add(""String_Node_Str"");
  for (int i=0; i < tableDefinition.getColumnDefinitions().size(); i++) {
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition columnDefinition=tableDefinition.getColumnDefinitions().get(i);
    creationBuilder.add(columnDefinition.getCreationName());
  }
  for (  UniqueGroupsDefinition definition : tableDefinition.uniqueGroupsDefinitions) {
    creationBuilder.add(definition.getCreationName());
  }
  int primarySize=tableDefinition.getPrimaryColumnDefinitions().size();
  for (int i=0; i < primarySize; i++) {
    if (i == 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    if (i > 0) {
      creationBuilder.add(""String_Node_Str"");
    }
    ColumnDefinition primaryDefinition=tableDefinition.getPrimaryColumnDefinitions().get(i);
    creationBuilder.add(QueryBuilder.quote(primaryDefinition.columnName));
    if (i == primarySize - 1) {
      creationBuilder.add(""String_Node_Str"");
    }
  }
  int foreignSize=tableDefinition.foreignKeyDefinitions.size();
  List<CodeBlock> foreignKeyBlocks=new ArrayList<>();
  List<CodeBlock> tableNameBlocks=new ArrayList<>();
  List<CodeBlock> referenceKeyBlocks=new ArrayList<>();
  for (int i=0; i < foreignSize; i++) {
    CodeBlock.Builder foreignKeyBuilder=CodeBlock.builder();
    CodeBlock.Builder referenceBuilder=CodeBlock.builder();
    ForeignKeyColumnDefinition foreignKeyColumnDefinition=tableDefinition.foreignKeyDefinitions.get(i);
    foreignKeyBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        foreignKeyBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      foreignKeyBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.columnName));
    }
    foreignKeyBuilder.add(""String_Node_Str"");
    foreignKeyBlocks.add(foreignKeyBuilder.build());
    tableNameBlocks.add(CodeBlock.builder().add(""String_Node_Str"",ClassNames.FLOW_MANAGER,foreignKeyColumnDefinition.referencedTableClassName).build());
    referenceBuilder.add(""String_Node_Str"");
    for (int j=0; j < foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.size(); j++) {
      if (j > 0) {
        referenceBuilder.add(""String_Node_Str"");
      }
      ForeignKeyReferenceDefinition referenceDefinition=foreignKeyColumnDefinition.foreignKeyReferenceDefinitionList.get(j);
      referenceBuilder.add(""String_Node_Str"",QueryBuilder.quote(referenceDefinition.foreignColumnName));
    }
    referenceBuilder.add(""String_Node_Str"",foreignKeyColumnDefinition.onUpdate.name().replace(""String_Node_Str"",""String_Node_Str""),foreignKeyColumnDefinition.onDelete.name().replace(""String_Node_Str"",""String_Node_Str""));
    referenceKeyBlocks.add(referenceBuilder.build());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder().add(""String_Node_Str"",creationBuilder.build().toString());
  if (foreignSize > 0) {
    for (int i=0; i < foreignSize; i++) {
      codeBuilder.add(""String_Node_Str"",foreignKeyBlocks.get(i),tableNameBlocks.get(i),referenceKeyBlocks.get(i));
    }
  }
  codeBuilder.add(""String_Node_Str"",""String_Node_Str"").add(""String_Node_Str"");
  methodBuilder.addCode(codeBuilder.build());
  return methodBuilder.build();
}"
26910,"@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName,isModelContainerAdapter) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName,isModelContainerAdapter));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,elementName,isModelContainerAdapter,LoadFromCursorMethod.PARAM_MODEL,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}","@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,ModelUtils.getVariable(isModelContainerAdapter),columnAccess.getShortAccessString(elementName,isModelContainerAdapter) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName,isModelContainerAdapter));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}"
26911,"public DatabaseDefinition(ProcessorManager manager,Element element){
  super(element,manager);
  packageName=ClassNames.FLOW_MANAGER_PACKAGE;
  Database database=element.getAnnotation(Database.class);
  databaseName=database.name();
  if (databaseName == null || databaseName.isEmpty()) {
    databaseName=element.getSimpleName().toString();
  }
  if (!isValidDatabaseName(databaseName)) {
    throw new Error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ ""String_Node_Str"");
  }
  TypeMirror openHelper=ProcessorUtils.getOpenHelperClass(database);
  if (openHelper != null) {
    sqliteOpenHelperClass=TypeName.get(openHelper);
  }
  consistencyChecksEnabled=database.consistencyCheckEnabled();
  backupEnabled=database.backupEnabled();
  classSeparator=database.generatedClassSeparator();
  setOutputClassName(databaseName + classSeparator + ""String_Node_Str"");
  databaseVersion=database.version();
  foreignKeysSupported=database.foreignKeysSupported();
  insertConflict=database.insertConflict();
  updateConflict=database.updateConflict();
}","public DatabaseDefinition(ProcessorManager manager,Element element){
  super(element,manager);
  packageName=ClassNames.FLOW_MANAGER_PACKAGE;
  Database database=element.getAnnotation(Database.class);
  databaseName=database.name();
  if (databaseName == null || databaseName.isEmpty()) {
    databaseName=element.getSimpleName().toString();
  }
  if (!isValidDatabaseName(databaseName)) {
    throw new Error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ ""String_Node_Str"");
  }
  TypeMirror openHelper=ProcessorUtils.getOpenHelperClass(database);
  if (openHelper != null) {
    sqliteOpenHelperClass=TypeName.get(openHelper);
    if (sqliteOpenHelperClass.equals(TypeName.VOID.box())) {
      sqliteOpenHelperClass=ClassNames.FLOW_SQLITE_OPEN_HELPER;
    }
  }
 else {
    sqliteOpenHelperClass=ClassNames.FLOW_SQLITE_OPEN_HELPER;
  }
  consistencyChecksEnabled=database.consistencyCheckEnabled();
  backupEnabled=database.backupEnabled();
  classSeparator=database.generatedClassSeparator();
  setOutputClassName(databaseName + classSeparator + ""String_Node_Str"");
  databaseVersion=database.version();
  foreignKeysSupported=database.foreignKeysSupported();
  insertConflict=database.insertConflict();
  updateConflict=database.updateConflict();
}"
26912,"private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(databaseName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName);
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.outputClassName);
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.outputClassName);
  }
  builder.addMethod(constructor.build());
}","private void writeConstructor(TypeSpec.Builder builder){
  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassNames.DATABASE_HOLDER,""String_Node_Str"");
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",tableDefinition.elementClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",modelViewDefinition.elementClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",queryModelDefinition.elementClassName);
  }
  Map<Integer,List<MigrationDefinition>> migrationDefinitionMap=manager.getMigrationsForDatabase(databaseName);
  if (migrationDefinitionMap != null && !migrationDefinitionMap.isEmpty()) {
    List<Integer> versionSet=new ArrayList<>(migrationDefinitionMap.keySet());
    Collections.sort(versionSet);
    for (    Integer version : versionSet) {
      List<MigrationDefinition> migrationDefinitions=migrationDefinitionMap.get(version);
      Collections.sort(migrationDefinitions,new Comparator<MigrationDefinition>(){
        @Override public int compare(        MigrationDefinition o1,        MigrationDefinition o2){
          return Integer.valueOf(o2.priority).compareTo(o1.priority);
        }
      }
);
      constructor.addStatement(""String_Node_Str"",ParameterizedTypeName.get(ClassName.get(List.class),ClassNames.MIGRATION),version,ParameterizedTypeName.get(ArrayList.class));
      constructor.addStatement(""String_Node_Str"",DatabaseHandler.MIGRATION_FIELD_NAME,version,version);
      for (      MigrationDefinition migrationDefinition : migrationDefinitions) {
        constructor.addStatement(""String_Node_Str"",version,migrationDefinition.elementClassName);
      }
    }
  }
  for (  TableDefinition tableDefinition : manager.getTableDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_FIELD_NAME,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_NAME_MAP,tableDefinition.tableName,tableDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_ADAPTER_MAP_FIELD_NAME,tableDefinition.elementClassName,tableDefinition.getAdapterClassName());
  }
  for (  ModelContainerDefinition modelContainerDefinition : manager.getModelContainers(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_CONTAINER_ADAPTER_MAP_FIELD_NAME,modelContainerDefinition.elementClassName,modelContainerDefinition.outputClassName);
  }
  for (  ModelViewDefinition modelViewDefinition : manager.getModelViewDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_FIELD_NAME,modelViewDefinition.elementClassName);
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.MODEL_VIEW_ADAPTER_MAP_FIELD_NAME,modelViewDefinition.elementClassName,modelViewDefinition.outputClassName);
  }
  for (  QueryModelDefinition queryModelDefinition : manager.getQueryModelDefinitions(databaseName)) {
    constructor.addStatement(""String_Node_Str"",DatabaseHandler.QUERY_MODEL_ADAPTER_MAP_FIELD_NAME,queryModelDefinition.elementClassName,queryModelDefinition.outputClassName);
  }
  builder.addMethod(constructor.build());
}"
26913,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelContainerDefinition modelContainerDefinition=new ModelContainerDefinition((TypeElement)element,processorManager);
  processorManager.addModelContainerDefinition(modelContainerDefinition);
  WriterUtils.writeBaseDefinition(modelContainerDefinition,processorManager);
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelContainerDefinition modelContainerDefinition=new ModelContainerDefinition((TypeElement)element,processorManager);
  processorManager.addModelContainerDefinition(modelContainerDefinition);
}"
26914,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelViewDefinition modelViewDefinition=new ModelViewDefinition(processorManager,element);
  processorManager.addModelViewDefinition(modelViewDefinition);
  WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
  try {
    modelViewDefinition.writeViewTable();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  ModelViewDefinition modelViewDefinition=new ModelViewDefinition(processorManager,element);
  processorManager.addModelViewDefinition(modelViewDefinition);
  try {
    modelViewDefinition.writeViewTable();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
26915,"@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  try {
    TableDefinition tableDefinition=new TableDefinition(processorManager,(TypeElement)element);
    if (definitionValidator.validate(processorManager,tableDefinition)) {
      WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
      tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      processorManager.addTableDefinition(tableDefinition);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override protected void onProcessElement(ProcessorManager processorManager,Element element){
  TableDefinition tableDefinition=new TableDefinition(processorManager,(TypeElement)element);
  if (definitionValidator.validate(processorManager,tableDefinition)) {
    WriterUtils.writeBaseDefinition(tableDefinition,processorManager);
    processorManager.addTableDefinition(tableDefinition);
  }
}"
26916,"@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  ContentProviderValidator validator=new ContentProviderValidator();
  Collection<ContentProviderDefinition> contentProviderDefinitions=providerMap.values();
  for (  ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
    if (validator.validate(processorManager,contentProviderDefinition)) {
      WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
    }
  }
  List<DatabaseDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseDefinition databaseDefinition : databaseDefinitions) {
    try {
      JavaFile.builder(databaseDefinition.packageName,databaseDefinition.getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}","@Override public void handle(ProcessorManager processorManager,RoundEnvironment roundEnvironment){
  for (  BaseContainerHandler containerHandler : handlers) {
    containerHandler.handle(processorManager,roundEnvironment);
  }
  ContentProviderValidator validator=new ContentProviderValidator();
  Collection<ContentProviderDefinition> contentProviderDefinitions=providerMap.values();
  for (  ContentProviderDefinition contentProviderDefinition : contentProviderDefinitions) {
    if (validator.validate(processorManager,contentProviderDefinition)) {
      WriterUtils.writeBaseDefinition(contentProviderDefinition,processorManager);
    }
  }
  List<DatabaseDefinition> databaseDefinitions=getDatabaseDefinitionMap();
  for (  DatabaseDefinition databaseDefinition : databaseDefinitions) {
    try {
      JavaFile.builder(databaseDefinition.packageName,databaseDefinition.getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
      Collection<TableDefinition> tableDefinitions=databaseDefinition.tableDefinitionMap.values();
      for (      TableDefinition tableDefinition : tableDefinitions) {
        tableDefinition.writeAdapter(processorManager.getProcessingEnvironment());
      }
      Collection<ModelContainerDefinition> modelContainerDefinitions=databaseDefinition.modelContainerDefinitionMap.values();
      for (      ModelContainerDefinition modelContainerDefinition : modelContainerDefinitions) {
        WriterUtils.writeBaseDefinition(modelContainerDefinition,processorManager);
      }
      Collection<ModelViewDefinition> modelViewDefinitions=databaseDefinition.modelViewDefinitionMap.values();
      for (      ModelViewDefinition modelViewDefinition : modelViewDefinitions) {
        WriterUtils.writeBaseDefinition(modelViewDefinition,processorManager);
      }
    }
 catch (    IOException e) {
    }
  }
  if (roundEnvironment.processingOver()) {
    try {
      JavaFile.builder(ClassNames.FLOW_MANAGER_PACKAGE,new FlowManagerHolderDefinition(processorManager).getTypeSpec()).build().writeTo(processorManager.getProcessingEnvironment().getFiler());
    }
 catch (    IOException e) {
    }
  }
}"
26917,"/** 
 * Constructs this UPDATE query with both a WHERE and SET   {@link com.raizlabs.android.dbflow.sql.builder.ConditionQueryBuilder}
 * @param dbTransactionInfo     The information about this transaction
 * @param whereConditionBuilder The set of WHERE conditions to use.
 * @param setConditionBuilder   The set of SET conditions to use.
 */
public UpdateTransaction(DBTransactionInfo dbTransactionInfo,ConditionQueryBuilder<ModelClass> whereConditionBuilder,ConditionQueryBuilder<ModelClass> setConditionBuilder){
  super(dbTransactionInfo,new Update<>(whereConditionBuilder.getTableClass()).set(setConditionBuilder).where(whereConditionBuilder));
}","/** 
 * Constructs this UPDATE query with both a WHERE and SET   {@link com.raizlabs.android.dbflow.sql.builder.ConditionQueryBuilder}
 * @param dbTransactionInfo     The information about this transaction
 * @param whereConditionBuilder The set of WHERE conditions to use.
 * @param setConditionBuilder   The set of SET conditions to use.
 */
public UpdateTransaction(DBTransactionInfo dbTransactionInfo,Class<ModelClass> table,ConditionGroup whereConditionGroup,ConditionGroup setConditionGroup){
  super(dbTransactionInfo,new Update<>(table).set(setConditionGroup).where(whereConditionGroup));
}"
26918,"/** 
 * Applies the   {@link Operation#AND} to all of the passed{@link SQLCondition}.
 * @param sqlConditions
 * @return
 */
public ConditionGroup andAll(SQLCondition... sqlConditions){
  for (  SQLCondition sqlCondition : sqlConditions) {
    and(sqlCondition);
  }
  return this;
}","/** 
 * Applies the   {@link Operation#AND} to all of the passed{@link SQLCondition}.
 * @param sqlConditions
 * @return
 */
public ConditionGroup andAll(List<SQLCondition> sqlConditions){
  for (  SQLCondition sqlCondition : sqlConditions) {
    and(sqlCondition);
  }
  return this;
}"
26919,"/** 
 * Applies the   {@link Operation#AND} to all of the passed{@link SQLCondition}.
 * @param sqlConditions
 * @return
 */
public ConditionGroup orAll(SQLCondition... sqlConditions){
  for (  SQLCondition sqlCondition : sqlConditions) {
    or(sqlCondition);
  }
  return this;
}","/** 
 * Applies the   {@link Operation#AND} to all of the passed{@link SQLCondition}.
 * @param sqlConditions
 * @return
 */
public ConditionGroup orAll(List<SQLCondition> sqlConditions){
  for (  SQLCondition sqlCondition : sqlConditions) {
    or(sqlCondition);
  }
  return this;
}"
26920,"/** 
 * Specifies a varg of conditions to append to this SET
 * @param conditions The varg of conditions
 * @return This instance.
 */
public Set<ModelClass> conditions(Condition... conditions){
  conditionGroup.andAll(conditions);
  return this;
}","/** 
 * Specifies a varg of conditions to append to this SET
 * @param conditions The varg of conditions
 * @return This instance.
 */
public Set<ModelClass> conditions(SQLCondition... conditions){
  conditionGroup.andAll(conditions);
  return this;
}"
26921,"/** 
 * Begins a SET piece of this query with a string clause with args
 * @param setClause The clause to use as a string clause.
 * @param args      The arguments to append that will get properly type-converted.
 * @return A SET query piece of this statement.
 */
public Set<ModelClass> set(String setClause,Object... args){
  return set().conditionClause(setClause,args);
}","/** 
 * Begins a SET piece of the SQL query
 * @param conditions The array of conditions that define this SET statement
 * @return A SET query piece of this statement
 */
public Set<ModelClass> set(SQLCondition... conditions){
  return new Set<>(this,table).conditions(conditions);
}"
26922,"public Update conflictAction(ConflictAction conflictAction){
  mConflictAction=conflictAction;
  return this;
}","public Update conflictAction(ConflictAction conflictAction){
  this.conflictAction=conflictAction;
  return this;
}"
26923,"/** 
 * Constructs new instace of an UPDATE query with the specified table.
 * @param table The table to use.
 */
public Update(Class<ModelClass> table){
  mTable=table;
}","/** 
 * Constructs new instace of an UPDATE query with the specified table.
 * @param table The table to use.
 */
public Update(Class<ModelClass> table){
  this.table=table;
}"
26924,"/** 
 * @param table        The table to update.
 * @param < ModelClass > The class that implements {@link Model}
 * @return A new update object. Begins a generic UPDATE query.
 */
public static <ModelClass extends Model>Update table(Class<ModelClass> table){
  return new Update(table);
}","/** 
 * @param table        The table to update.
 * @param < ModelClass > The class that implements {@link Model}
 * @return A new update object. Begins a generic UPDATE query.
 */
public static <ModelClass extends Model>Update table(Class<ModelClass> table){
  return new Update<>(table);
}"
26925,"@Override public String getQuery(){
  QueryBuilder queryBuilder=new QueryBuilder(""String_Node_Str"");
  if (mConflictAction != null && !mConflictAction.equals(ConflictAction.NONE)) {
    queryBuilder.append(""String_Node_Str"").appendSpaceSeparated(mConflictAction.name());
  }
  queryBuilder.appendQuoted(FlowManager.getTableName(mTable)).appendSpace();
  return queryBuilder.getQuery();
}","@Override public String getQuery(){
  QueryBuilder queryBuilder=new QueryBuilder(""String_Node_Str"");
  if (conflictAction != null && !conflictAction.equals(ConflictAction.NONE)) {
    queryBuilder.append(""String_Node_Str"").appendSpaceSeparated(conflictAction.name());
  }
  queryBuilder.appendQuoted(FlowManager.getTableName(table)).appendSpace();
  return queryBuilder.getQuery();
}"
26926,"/** 
 * Appends an OR with a Condition to the WHERE clause with the specified   {@link SQLCondition}
 * @param condition
 * @return
 */
public Where<ModelClass> or(SQLCondition condition){
  conditionQueryBuilder.or(condition);
  return this;
}","/** 
 * Appends an OR with a Condition to the WHERE clause with the specified   {@link SQLCondition}
 * @param condition
 * @return
 */
public Where<ModelClass> or(SQLCondition condition){
  conditionGroup.or(condition);
  return this;
}"
26927,"/** 
 * Defines a SQL HAVING statement without the HAVING.
 * @param conditions The array of {@link SQLCondition}
 * @return
 */
@Override public Where<ModelClass> having(SQLCondition... conditions){
  having.addConditions(conditions);
  return this;
}","/** 
 * Defines a SQL HAVING statement without the HAVING.
 * @param conditions The array of {@link SQLCondition}
 * @return
 */
@Override public Where<ModelClass> having(SQLCondition... conditions){
  havingGroup.andAll(conditions);
  return this;
}"
26928,"/** 
 * Adds a param to the WHERE clause with the custom   {@link SQLCondition}
 * @param condition The {@link SQLCondition} to use
 * @return
 */
public Where<ModelClass> and(SQLCondition condition){
  conditionQueryBuilder.and(condition);
  return this;
}","/** 
 * Adds a param to the WHERE clause with the custom   {@link SQLCondition}
 * @param condition The {@link SQLCondition} to use
 * @return
 */
public Where<ModelClass> and(SQLCondition condition){
  conditionGroup.and(condition);
  return this;
}"
26929,"/** 
 * Constructs this class with the specified   {@link com.raizlabs.android.dbflow.config.FlowManager}and   {@link From} chunk
 * @param whereBase The FROM or SET statement chunk
 */
Where(WhereBase<ModelClass> whereBase,SQLCondition... conditions){
  super(whereBase.getTable());
  this.whereBase=whereBase;
  databaseDefinition=FlowManager.getDatabaseForTable(this.whereBase.getTable());
  conditionQueryBuilder=new ConditionQueryBuilder<>(this.whereBase.getTable());
  having=new ConditionQueryBuilder<>(this.whereBase.getTable());
  conditionQueryBuilder.addConditions(conditions);
}","/** 
 * Constructs this class with the specified   {@link com.raizlabs.android.dbflow.config.FlowManager}and   {@link From} chunk
 * @param whereBase The FROM or SET statement chunk
 */
Where(WhereBase<ModelClass> whereBase,SQLCondition... conditions){
  super(whereBase.getTable());
  this.whereBase=whereBase;
  databaseDefinition=FlowManager.getDatabaseForTable(this.whereBase.getTable());
  conditionGroup=new ConditionGroup();
  havingGroup=new ConditionGroup();
  conditionGroup.andAll(conditions);
}"
26930,"@Override public String getQuery(){
  String fromQuery=whereBase.getQuery();
  QueryBuilder queryBuilder=new QueryBuilder().append(fromQuery).appendQualifier(""String_Node_Str"",conditionQueryBuilder.getQuery()).appendQualifier(""String_Node_Str"",QueryBuilder.join(""String_Node_Str"",groupByList)).appendQualifier(""String_Node_Str"",having.getQuery()).appendQualifier(""String_Node_Str"",QueryBuilder.join(""String_Node_Str"",orderByList));
  if (limit > VALUE_UNSET) {
    queryBuilder.appendQualifier(""String_Node_Str"",String.valueOf(limit));
  }
  if (offset > VALUE_UNSET) {
    queryBuilder.appendQualifier(""String_Node_Str"",String.valueOf(offset));
  }
  return queryBuilder.getQuery();
}","@Override public String getQuery(){
  String fromQuery=whereBase.getQuery();
  QueryBuilder queryBuilder=new QueryBuilder().append(fromQuery).appendQualifier(""String_Node_Str"",conditionGroup.getQuery()).appendQualifier(""String_Node_Str"",QueryBuilder.join(""String_Node_Str"",groupByList)).appendQualifier(""String_Node_Str"",havingGroup.getQuery()).appendQualifier(""String_Node_Str"",QueryBuilder.join(""String_Node_Str"",orderByList));
  if (limit > VALUE_UNSET) {
    queryBuilder.appendQualifier(""String_Node_Str"",String.valueOf(limit));
  }
  if (offset > VALUE_UNSET) {
    queryBuilder.appendQualifier(""String_Node_Str"",String.valueOf(offset));
  }
  return queryBuilder.getQuery();
}"
26931,"public BaseDefinition(TypeElement element,ProcessorManager processorManager){
  this.manager=processorManager;
  this.typeElement=element;
  elementClassName=ClassName.get(typeElement);
  elementName=element.getSimpleName().toString();
  packageName=manager.getElements().getPackageOf(element).toString();
}","public BaseDefinition(TypeElement element,ProcessorManager processorManager){
  this.manager=processorManager;
  this.typeElement=element;
  elementClassName=ClassName.get(typeElement);
  elementTypeName=TypeName.get(element.asType());
  elementName=element.getSimpleName().toString();
  packageName=manager.getElements().getPackageOf(element).toString();
}"
26932,"public ContentProviderDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ContentProvider provider=element.getAnnotation(ContentProvider.class);
  databaseName=provider.databaseName();
  DatabaseMethod databaseMethod=manager.getDatabaseWriter(databaseName);
  setOutputClassName(databaseMethod.classSeparator + DEFINITION_NAME);
  authority=provider.authority();
  TableEndpointValidator validator=new TableEndpointValidator();
  List<? extends Element> elements=manager.getElements().getAllMembers((TypeElement)typeElement);
  for (  Element innerElement : elements) {
    if (innerElement.getAnnotation(TableEndpoint.class) != null) {
      TableEndpointDefinition endpointDefinition=new TableEndpointDefinition(innerElement,manager);
      if (validator.validate(processorManager,endpointDefinition)) {
        endpointDefinitions.add(endpointDefinition);
      }
    }
  }
  methods=new MethodDefinition[]{new QueryMethod(this,manager),new InsertMethod(this),new DeleteMethod(this,manager),new UpdateWriter(this,manager)};
}","public ContentProviderDefinition(Element typeElement,ProcessorManager processorManager){
  super(typeElement,processorManager);
  ContentProvider provider=element.getAnnotation(ContentProvider.class);
  databaseName=provider.databaseName();
  DatabaseMethod databaseMethod=manager.getDatabaseWriter(databaseName);
  setOutputClassName(databaseMethod.classSeparator + DEFINITION_NAME);
  authority=provider.authority();
  TableEndpointValidator validator=new TableEndpointValidator();
  List<? extends Element> elements=manager.getElements().getAllMembers((TypeElement)typeElement);
  for (  Element innerElement : elements) {
    if (innerElement.getAnnotation(TableEndpoint.class) != null) {
      TableEndpointDefinition endpointDefinition=new TableEndpointDefinition(innerElement,manager);
      if (validator.validate(processorManager,endpointDefinition)) {
        endpointDefinitions.add(endpointDefinition);
      }
    }
  }
  methods=new MethodDefinition[]{new QueryMethod(this,manager),new InsertMethod(this,false),new InsertMethod(this,true),new DeleteMethod(this,manager),new UpdateMethod(this,manager)};
}"
26933,"@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ClassName.get(String.class),AUTHORITY,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL).initializer(""String_Node_Str"",authority).build());
  int code=0;
  for (  TableEndpointDefinition endpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition contentUriDefinition : endpointDefinition.contentUriDefinitions) {
      typeBuilder.addField(FieldSpec.builder(TypeName.INT,contentUriDefinition.name,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL).initializer(String.valueOf(code)).build());
      code++;
    }
  }
  FieldSpec.Builder uriField=FieldSpec.builder(ClassNames.URI_MATCHER,URI_MATCHER,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL);
  CodeBlock.Builder initializer=CodeBlock.builder().addStatement(""String_Node_Str"",ClassNames.URI_MATCHER,ClassNames.URI_MATCHER).add(""String_Node_Str"");
  for (  TableEndpointDefinition endpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition contentUriDefinition : endpointDefinition.contentUriDefinitions) {
      String path;
      if (contentUriDefinition.path != null) {
        path=""String_Node_Str"" + contentUriDefinition.path + ""String_Node_Str"";
      }
 else {
        path=CodeBlock.builder().add(""String_Node_Str"",contentUriDefinition.elementClassName,contentUriDefinition.name).build().toString();
      }
      initializer.addStatement(""String_Node_Str"",URI_MATCHER,AUTHORITY,path,contentUriDefinition.name);
    }
  }
  initializer.add(""String_Node_Str"");
  typeBuilder.addField(uriField.initializer(initializer.build()).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",databaseName).returns(ClassName.get(String.class)).build());
  MethodSpec.Builder getTypeBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassNames.URI,""String_Node_Str"").returns(ClassName.get(String.class)).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
  CodeBlock.Builder getTypeCode=CodeBlock.builder().addStatement(""String_Node_Str"",ClassName.get(String.class)).beginControlFlow(""String_Node_Str"",URI_MATCHER);
  for (  TableEndpointDefinition tableEndpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      getTypeCode.beginControlFlow(""String_Node_Str"",uriDefinition.name).addStatement(""String_Node_Str"",uriDefinition.type).addStatement(""String_Node_Str"").endControlFlow();
    }
  }
  getTypeCode.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalArgumentException.class),""String_Node_Str"",""String_Node_Str"").endControlFlow();
  getTypeCode.endControlFlow();
  getTypeCode.addStatement(""String_Node_Str"");
  getTypeBuilder.addCode(getTypeCode.build());
  typeBuilder.addMethod(getTypeBuilder.build());
  for (  FlowWriter writer : methods) {
    writer.write(javaWriter);
  }
}","@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ClassName.get(String.class),AUTHORITY,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL).initializer(""String_Node_Str"",authority).build());
  int code=0;
  for (  TableEndpointDefinition endpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition contentUriDefinition : endpointDefinition.contentUriDefinitions) {
      typeBuilder.addField(FieldSpec.builder(TypeName.INT,contentUriDefinition.name,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL).initializer(String.valueOf(code)).build());
      code++;
    }
  }
  FieldSpec.Builder uriField=FieldSpec.builder(ClassNames.URI_MATCHER,URI_MATCHER,Modifier.PRIVATE,Modifier.STATIC,Modifier.FINAL);
  CodeBlock.Builder initializer=CodeBlock.builder().addStatement(""String_Node_Str"",ClassNames.URI_MATCHER,ClassNames.URI_MATCHER).add(""String_Node_Str"");
  for (  TableEndpointDefinition endpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition contentUriDefinition : endpointDefinition.contentUriDefinitions) {
      String path;
      if (contentUriDefinition.path != null) {
        path=""String_Node_Str"" + contentUriDefinition.path + ""String_Node_Str"";
      }
 else {
        path=CodeBlock.builder().add(""String_Node_Str"",contentUriDefinition.elementClassName,contentUriDefinition.name).build().toString();
      }
      initializer.addStatement(""String_Node_Str"",URI_MATCHER,AUTHORITY,path,contentUriDefinition.name);
    }
  }
  initializer.add(""String_Node_Str"");
  typeBuilder.addField(uriField.initializer(initializer.build()).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",databaseName).returns(ClassName.get(String.class)).build());
  MethodSpec.Builder getTypeBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addParameter(ClassNames.URI,""String_Node_Str"").returns(ClassName.get(String.class)).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
  CodeBlock.Builder getTypeCode=CodeBlock.builder().addStatement(""String_Node_Str"",ClassName.get(String.class)).beginControlFlow(""String_Node_Str"",URI_MATCHER);
  for (  TableEndpointDefinition tableEndpointDefinition : endpointDefinitions) {
    for (    ContentUriDefinition uriDefinition : tableEndpointDefinition.contentUriDefinitions) {
      getTypeCode.beginControlFlow(""String_Node_Str"",uriDefinition.name).addStatement(""String_Node_Str"",uriDefinition.type).addStatement(""String_Node_Str"").endControlFlow();
    }
  }
  getTypeCode.beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ClassName.get(IllegalArgumentException.class),""String_Node_Str"",""String_Node_Str"").endControlFlow();
  getTypeCode.endControlFlow();
  getTypeCode.addStatement(""String_Node_Str"");
  getTypeBuilder.addCode(getTypeCode.build());
  typeBuilder.addMethod(getTypeBuilder.build());
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}"
26934,"public static void writeGetModelClass(TypeSpec.Builder typeBuilder,final ClassName modelClassName) throws IOException {
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",modelClassName).returns(ParameterizedTypeName.get(ClassName.get(Class.class),modelClassName)).build());
}","public static void writeGetModelClass(TypeSpec.Builder typeBuilder,final ClassName modelClassName){
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",modelClassName).returns(ParameterizedTypeName.get(ClassName.get(Class.class),modelClassName)).build());
}"
26935,"public static void writeGetTableName(TypeSpec.Builder typeBuilder,final String tableName) throws IOException {
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",tableName).returns(ClassName.get(String.class)).build());
}","public static void writeGetTableName(TypeSpec.Builder typeBuilder,final String tableName){
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",tableName).returns(ClassName.get(String.class)).build());
}"
26936,"@Override protected String getExtendsClass(){
  return ""String_Node_Str"" + elementClassName + ""String_Node_Str"";
}","@Override protected TypeName getExtendsClass(){
  return ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER_ADAPTER,elementClassName);
}"
26937,"@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  javaWriter.emitField(""String_Node_Str"",""String_Node_Str"",Sets.newHashSet(Modifier.PRIVATE,Modifier.FINAL),""String_Node_Str"");
  javaWriter.emitEmptyLine();
  javaWriter.beginConstructor(Sets.newHashSet(Modifier.PUBLIC));
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    javaWriter.emitStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.columnFieldType);
  }
  javaWriter.endConstructor();
  javaWriter.emitEmptyLine();
  javaWriter.emitAnnotation(Override.class);
  WriterUtils.emitMethod(javaWriter,new FlowWriter(){
    @Override public void write(    JavaWriter javaWriter) throws IOException {
      javaWriter.emitStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
,""String_Node_Str"",""String_Node_Str"",Sets.newHashSet(Modifier.PUBLIC,Modifier.FINAL),""String_Node_Str"",""String_Node_Str"");
  InternalAdapterHelper.writeGetModelClass(javaWriter,getModelClassQualifiedName());
  InternalAdapterHelper.writeGetTableName(javaWriter,elementClassName + tableDefinition.databaseMethod.classSeparator + TableDefinition.DBFLOW_TABLE_TAG);
  for (  FlowWriter writer : methodWriters) {
    writer.write(javaWriter);
  }
}","@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class),ClassName.get(String.class),ClassName.get(Class.class)),""String_Node_Str"",Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",ParameterizedTypeName.get(HashMap.class)).build());
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    constructorCode.addStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.elementTypeName);
  }
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassName.get(String.class),""String_Node_Str"").addStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").returns(ParameterizedTypeName.get(ClassName.get(Class.class))).build());
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,elementClassName + tableDefinition.databaseMethod.classSeparator + TableDefinition.DBFLOW_TABLE_TAG);
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}"
26938,"public ModelContainerDefinition(TypeElement classElement,ProcessorManager manager){
  super(classElement,manager);
  tableDefinition=manager.getTableDefinition(manager.getDatabase(elementClassName),classElement);
  setOutputClassName(tableDefinition.databaseMethod.classSeparator + DBFLOW_MODEL_CONTAINER_TAG);
  methodWriters=new FlowWriter[]{new SQLiteStatementWriter(tableDefinition,true,tableDefinition.implementsSqlStatementListener,tableDefinition.implementsContentValuesListener),new ExistenceWriter(tableDefinition,true),new WhereQueryWriter(tableDefinition,true),new ToModelMethod(tableDefinition,true),new LoadCursorWriter(tableDefinition,true,tableDefinition.implementsLoadFromCursorListener)};
}","public ModelContainerDefinition(TypeElement classElement,ProcessorManager manager){
  super(classElement,manager);
  tableDefinition=manager.getTableDefinition(manager.getDatabase(elementClassName),classElement);
  setOutputClassName(tableDefinition.databaseMethod.classSeparator + DBFLOW_MODEL_CONTAINER_TAG);
  methods=new MethodDefinition[]{new BindToContentValuesMethod(tableDefinition,true,true,tableDefinition.implementsContentValuesListener),new BindToContentValuesMethod(tableDefinition,false,true,tableDefinition.implementsContentValuesListener),new BindToStatementMethod(tableDefinition,true,true),new BindToStatementMethod(tableDefinition,false,true),new ExistenceMethod(tableDefinition,true),new PrimaryConditionClause(tableDefinition,true),new ToModelMethod(tableDefinition,true),new LoadFromCursorMethod(tableDefinition,true,tableDefinition.implementsLoadFromCursorListener)};
}"
26939,"public TableDefinition(ProcessorManager manager,Element element){
}","public TableDefinition(ProcessorManager manager,Element element){
  super(element,manager);
  Table table=element.getAnnotation(Table.class);
  this.tableName=table.tableName();
  databaseName=table.databaseName();
  databaseMethod=manager.getDatabaseWriter(databaseName);
  if (databaseMethod == null) {
    manager.logError(""String_Node_Str"" + tableName);
  }
  setOutputClassName(databaseMethod.classSeparator + DBFLOW_TABLE_TAG);
  this.adapterName=getModelClassName() + databaseMethod.classSeparator + DBFLOW_TABLE_ADAPTER;
  ConflictAction insertConflict=table.insertConflict();
  if (insertConflict.equals(ConflictAction.NONE) && !databaseMethod.insertConflict.equals(ConflictAction.NONE)) {
    insertConflict=databaseMethod.insertConflict;
  }
  ConflictAction updateConflict=table.updateConflict();
  if (updateConflict.equals(ConflictAction.NONE) && !databaseMethod.updateConflict.equals(ConflictAction.NONE)) {
    updateConflict=databaseMethod.updateConflict;
  }
  insertConflictActionName=insertConflict.equals(ConflictAction.NONE) ? ""String_Node_Str"" : insertConflict.name();
  updateConflictActionName=updateConflict.equals(ConflictAction.NONE) ? ""String_Node_Str"" : updateConflict.name();
  allFields=table.allFields();
  manager.addModelToDatabase(elementClassName,databaseName);
  if (tableName == null || tableName.isEmpty()) {
    tableName=element.getSimpleName().toString();
  }
  primaryColumnDefinitions=new ArrayList<>();
  foreignKeyDefinitions=new ArrayList<>();
  uniqueGroupsDefinitions=new ArrayList<>();
  InheritedColumn[] inheritedColumns=table.inheritedColumns();
  for (  InheritedColumn inheritedColumn : inheritedColumns) {
    if (inheritedColumnMap.containsKey(inheritedColumn.fieldName())) {
      manager.logError(""String_Node_Str"",inheritedColumn.fieldName(),tableName);
    }
    inheritedColumnMap.put(inheritedColumn.fieldName(),inheritedColumn);
  }
  createColumnDefinitions((TypeElement)element);
  UniqueGroup[] groups=table.uniqueColumnGroups();
  Set<Integer> uniqueNumbersSet=new HashSet<>();
  for (  UniqueGroup uniqueGroup : groups) {
    if (uniqueNumbersSet.contains(uniqueGroup.groupNumber())) {
      manager.logError(""String_Node_Str"",uniqueGroup.groupNumber(),tableName);
    }
    UniqueGroupsDefinition definition=new UniqueGroupsDefinition(manager,uniqueGroup);
    for (    ColumnDefinition columnDefinition : getColumnDefinitions()) {
      if (columnDefinition.uniqueGroups.contains(definition.number)) {
        definition.addColumnDefinition(columnDefinition);
      }
    }
    uniqueGroupsDefinitions.add(definition);
    uniqueNumbersSet.add(uniqueGroup.groupNumber());
  }
  implementsLoadFromCursorListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.LOAD_FROM_CURSOR_LISTENER.toString(),(TypeElement)element);
  implementsContentValuesListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.CONTENT_VALUES_LISTENER.toString(),(TypeElement)element);
  implementsSqlStatementListener=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.SQLITE_STATEMENT_LISTENER.toString(),((TypeElement)element));
  methods=new MethodDefinition[]{new BindToContentValuesMethod(this,true,false,implementsContentValuesListener),new BindToContentValuesMethod(this,false,false,implementsContentValuesListener),new BindToStatementMethod(this,true,false),new BindToStatementMethod(this,false,false),new InsertStatementQueryMethod(this),new CreationQueryMethod(this),new LoadFromCursorMethod(this,false,implementsLoadFromCursorListener),new ExistenceMethod(this,false),new PrimaryConditionClause(this,false),new OneToManyDeleteMethod(this,false),new OneToManySaveMethod(this,false,OneToManySaveMethod.METHOD_SAVE),new OneToManySaveMethod(this,false,OneToManySaveMethod.METHOD_INSERT),new OneToManySaveMethod(this,false,OneToManySaveMethod.METHOD_UPDATE)};
  if (getPrimaryColumnDefinitions().size() == 1) {
    ColumnDefinition columnDefinition=getPrimaryColumnDefinitions().get(0);
    if (columnDefinition.isPrimaryKey) {
      hasCachingId=!columnDefinition.hasTypeConverter;
    }
  }
}"
26940,"@Override public CodeBlock getLoadFromCursorMethod(){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",TableDefinition.getPropertyClassName(referencedTableClassName),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(LoadFromCursorMethod.PARAM_MODEL,elementName,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}","@Override public CodeBlock getLoadFromCursorMethod(){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_ADAPTER),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(LoadFromCursorMethod.PARAM_MODEL,elementName,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}"
26941,"public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL,modelType);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}","public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}"
26942,"public Set<QueryModelDefinition> getQueryModelDefinitions(String databaseName){
  Map<String,QueryModelDefinition> modelQueryDefinition=queryModelDefinitionMap.get(databaseName);
  if (modelQueryDefinition != null) {
    return Sets.newHashSet(queryModelDefinitionMap.get(databaseName).values());
  }
 else {
    return Sets.newHashSet();
  }
}","public Set<QueryModelDefinition> getQueryModelDefinitions(String databaseName){
  Map<TypeName,QueryModelDefinition> modelQueryDefinition=queryModelDefinitionMap.get(databaseName);
  if (modelQueryDefinition != null) {
    return Sets.newHashSet(queryModelDefinitionMap.get(databaseName).values());
  }
 else {
    return Sets.newHashSet();
  }
}"
26943,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(isInsert ? ""String_Node_Str"" : ""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.CONTENT_VALUES,PARAM_CONTENT_VALUES).addParameter(baseTableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getContentValuesStatement());
  }
  if (implementsContentValuesListener) {
    methodBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),isInsert ? ""String_Node_Str"" : ""String_Node_Str"",PARAM_CONTENT_VALUES);
  }
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(isInsert ? ""String_Node_Str"" : ""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.CONTENT_VALUES,PARAM_CONTENT_VALUES).addParameter(baseTableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getContentValuesStatement(isModelContainerAdapter));
  }
  if (implementsContentValuesListener) {
    methodBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),isInsert ? ""String_Node_Str"" : ""String_Node_Str"",PARAM_CONTENT_VALUES);
  }
  return methodBuilder.build();
}"
26944,"@Override public MethodSpec getMethodSpec(){
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(isInsert ? ""String_Node_Str"" : ""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.SQLITE_STATEMENT,PARAM_STATEMENT).addParameter(tableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=tableDefinition.getColumnDefinitions();
  AtomicInteger realCount=new AtomicInteger(1);
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    if (!isInsert || (isInsert && !columnDefinition.isPrimaryKeyAutoIncrement)) {
      methodBuilder.addCode(columnDefinition.getSQLiteStatementMethod(realCount,isModelContainerAdapter));
      realCount.incrementAndGet();
    }
  }
  if (tableDefinition.implementsSqlStatementListener) {
    methodBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(isModelContainerAdapter),isInsert ? ""String_Node_Str"" : ""String_Node_Str"",PARAM_STATEMENT);
  }
  return methodBuilder.build();
}"
26945,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.CURSOR,PARAM_CURSOR).addParameter(baseTableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getLoadFromCursorMethod());
  }
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.CURSOR,PARAM_CURSOR).addParameter(baseTableDefinition.getParameterClassName(isModelContainerAdapter),ModelUtils.getVariable(isModelContainerAdapter)).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getLoadFromCursorMethod(isModelContainerAdapter));
  }
  return methodBuilder.build();
}"
26946,"abstract String getColumnAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter,String variableNameString);","abstract String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter);"
26947,"abstract String setColumnAccessString(TypeName fieldType,String elementName,String formattedAccess,boolean isModelContainerAdapter,String variableNameString);","abstract String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,String formattedAccess);"
26948,"@Override String getColumnAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter,String variableNameString){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,isModelContainerAdapter,variableNameString)).build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
}"
26949,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String formattedAccess,boolean isModelContainerAdapter,String variableNameString){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",variableNameString,formattedAccess).build().toString();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,newFormattedAccess,isModelContainerAdapter,variableNameString);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,String formattedAccess){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",variableNameString,formattedAccess).build().toString();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26950,"public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  return DefinitionUtils.getSQLiteStatementMethod(index,elementName,columnAccess,elementTypeName,isModelContainerAdapter).build();
}","public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  return DefinitionUtils.getSQLiteStatementMethod(index,elementName,elementName,elementTypeName,isModelContainerAdapter,columnAccess).build();
}"
26951,"public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(elementName,columnAccess,elementTypeName,columnName,isModelContainerAdapter).build();
}","public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(elementName,elementName,elementTypeName,columnName,isModelContainerAdapter,columnAccess).build();
}"
26952,"public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  return DefinitionUtils.getContentValuesStatement(elementName,columnAccess,columnName,elementTypeName,isModelContainerAdapter).build();
}","public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  return DefinitionUtils.getContentValuesStatement(elementName,elementName,columnName,elementTypeName,isModelContainerAdapter,columnAccess).build();
}"
26953,"public String getColumnAccessString(boolean isModelContainerAdapter){
  return columnAccess.getColumnAccessString(elementTypeName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter));
}","public String getColumnAccessString(boolean isModelContainerAdapter){
  return columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
}"
26954,"public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,BaseColumnAccess columnAccess,TypeName elementTypeName,boolean isModelContainerAdapter){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter));
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + elementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}"
26955,"public static CodeBlock.Builder getLoadFromCursorMethod(String elementName,BaseColumnAccess columnAccess,TypeName elementTypeName,String columnName,boolean isModelContainerAdapter){
  String method=""String_Node_Str"";
  if (SQLiteType.containsMethod(elementTypeName)) {
    method=SQLiteType.getMethod(elementTypeName);
  }
 else   if (columnAccess instanceof TypeConverterAccess) {
    method=SQLiteType.getMethod(((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String indexName=""String_Node_Str"" + columnName;
  codeBuilder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,columnName);
  codeBuilder.beginControlFlow(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
  codeBuilder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,method,indexName).build().toString(),isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter)));
  codeBuilder.endControlFlow();
  return codeBuilder;
}","public static CodeBlock.Builder getLoadFromCursorMethod(String elementName,String fullElementName,TypeName elementTypeName,String columnName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String method=""String_Node_Str"";
  if (SQLiteType.containsMethod(elementTypeName)) {
    method=SQLiteType.getMethod(elementTypeName);
  }
 else   if (columnAccess instanceof TypeConverterAccess) {
    method=SQLiteType.getMethod(((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName());
  }
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String indexName=""String_Node_Str"" + columnName;
  codeBuilder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,columnName);
  codeBuilder.beginControlFlow(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
  codeBuilder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,fullElementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter),CodeBlock.builder().add(""String_Node_Str"",LoadFromCursorMethod.PARAM_CURSOR,method,indexName).build().toString()));
  codeBuilder.endControlFlow();
  return codeBuilder;
}"
26956,"public static CodeBlock.Builder getContentValuesStatement(String elementName,BaseColumnAccess columnAccess,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter));
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + elementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}"
26957,"@Override String getColumnAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter,String variableNameString){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,isModelContainerAdapter,variableNameString)).build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",getExistingColumnAccess().getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter)).build().toString();
}"
26958,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String formattedAccess,boolean isModelContainerAdapter,String variableNameString){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",columnDefinition.elementClassName,formattedAccess).build().toString();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,newFormattedAccess,isModelContainerAdapter,variableNameString);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,String formattedAccess){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",columnDefinition.elementClassName,formattedAccess).build().toString();
  return getExistingColumnAccess().setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26959,"@Override public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  builder.beginControlFlow(""String_Node_Str"",columnAccess.getColumnAccessString(elementTypeName,elementName,isModelContainerAdapter,BindToStatementMethod.PARAM_MODEL));
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getSQLiteStatementMethod(index,isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue());
    index.incrementAndGet();
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}","@Override public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  String finalAccessStatement=getFinalAccessStatement(builder,isModelContainerAdapter,statement);
  builder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getSQLiteStatementMethod(index,isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue());
    index.incrementAndGet();
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}"
26960,"@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName,isModelContainerAdapter) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName,isModelContainerAdapter));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString(),isModelContainerAdapter,LoadFromCursorMethod.PARAM_MODEL));
  builder.endControlFlow();
  return builder.build();
}","@Override public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName,isModelContainerAdapter) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName,isModelContainerAdapter));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(elementTypeName,elementName,elementName,isModelContainerAdapter,LoadFromCursorMethod.PARAM_MODEL,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}"
26961,"@Override public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,isModelContainerAdapter,ModelUtils.getVariable(isModelContainerAdapter));
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + elementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    builder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  builder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getContentValuesStatement(isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,referenceDefinition.columnName);
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}","@Override public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  CodeBlock.Builder builder=CodeBlock.builder();
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  String finalAccessStatement=getFinalAccessStatement(builder,isModelContainerAdapter,statement);
  builder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  CodeBlock.Builder elseBuilder=CodeBlock.builder();
  for (  ForeignKeyReferenceDefinition referenceDefinition : foreignKeyReferenceDefinitionList) {
    builder.add(referenceDefinition.getContentValuesStatement(isModelContainerAdapter));
    elseBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,referenceDefinition.columnName);
  }
  builder.nextControlFlow(""String_Node_Str"").add(elseBuilder.build()).endControlFlow();
  return builder.build();
}"
26962,"CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  return DefinitionUtils.getSQLiteStatementMethod(index,tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter) + ""String_Node_Str"" + columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter),simpleColumnAccess,columnClassName,isModelContainerAdapter).build();
}","CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getSQLiteStatementMethod(index,columnShortAccess,combined,columnClassName,isModelContainerAdapter,simpleColumnAccess).build();
}"
26963,"CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter) + ""String_Node_Str"" + columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter),simpleColumnAccess,columnClassName,columnName,isModelContainerAdapter).build();
}","CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter),tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter) + ""String_Node_Str"" + columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter),columnClassName,columnName,isModelContainerAdapter,simpleColumnAccess).build();
}"
26964,"CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  return DefinitionUtils.getContentValuesStatement(tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter) + ""String_Node_Str"" + columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter),simpleColumnAccess,columnName,columnClassName,isModelContainerAdapter).build();
}","CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getContentValuesStatement(columnShortAccess,combined,columnName,columnClassName,isModelContainerAdapter,simpleColumnAccess).build();
}"
26965,"@Override String getColumnAccessString(TypeName fieldType,String elementName,boolean isModelContainerAdapter,String variableNameString){
  return CodeBlock.builder().add(""String_Node_Str"",existingColumnAccess.getColumnAccessString(fieldType,elementName,isModelContainerAdapter,variableNameString),containerKeyName).build().toString();
}","@Override String getColumnAccessString(TypeName fieldType,String elementName,String fullElementName,String variableNameString,boolean isModelContainerAdapter){
  return CodeBlock.builder().add(""String_Node_Str"",existingColumnAccess.getColumnAccessString(fieldType,elementName,fullElementName,variableNameString,isModelContainerAdapter),containerKeyName).build().toString();
}"
26966,"@Override String setColumnAccessString(TypeName fieldType,String elementName,String formattedAccess,boolean isModelContainerAdapter,String variableNameString){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",variableNameString,containerKeyName,formattedAccess).build().toString();
  return existingColumnAccess.setColumnAccessString(fieldType,elementName,newFormattedAccess,isModelContainerAdapter,variableNameString);
}","@Override String setColumnAccessString(TypeName fieldType,String elementName,String fullElementName,boolean isModelContainerAdapter,String variableNameString,String formattedAccess){
  String newFormattedAccess=CodeBlock.builder().add(""String_Node_Str"",variableNameString,containerKeyName,formattedAccess).build().toString();
  return existingColumnAccess.setColumnAccessString(fieldType,elementName,fullElementName,isModelContainerAdapter,variableNameString,newFormattedAccess);
}"
26967,"@Override public ClassName getPropertyClassName(){
  return ClassName.get(packageName,adapterName);
}","@Override public ClassName getPropertyClassName(){
  return outputClassName;
}"
26968,"@Override public CodeBlock getLoadFromCursorMethod(){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_ADAPTER),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(LoadFromCursorMethod.PARAM_MODEL,elementName,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}","@Override public CodeBlock getLoadFromCursorMethod(){
  CodeBlock.Builder builder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder ifNullBuilder=CodeBlock.builder().add(""String_Node_Str"");
  CodeBlock.Builder selectBuilder=CodeBlock.builder();
  for (int i=0; i < foreignKeyReferenceDefinitionList.size(); i++) {
    ForeignKeyReferenceDefinition referenceDefinition=foreignKeyReferenceDefinitionList.get(i);
    String indexName=""String_Node_Str"" + referenceDefinition.columnName;
    builder.addStatement(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,referenceDefinition.columnName);
    if (i > 0) {
      ifNullBuilder.add(""String_Node_Str"");
    }
    ifNullBuilder.add(""String_Node_Str"",indexName,LoadFromCursorMethod.PARAM_CURSOR,indexName);
    selectBuilder.add(""String_Node_Str"",ClassName.get(referencedTableClassName.packageName(),referencedTableClassName.simpleName() + ""String_Node_Str"" + TableDefinition.DBFLOW_TABLE_TAG),referenceDefinition.foreignColumnName,LoadFromCursorMethod.PARAM_MODEL,columnAccess.getShortAccessString(elementName) + ""String_Node_Str"" + referenceDefinition.columnAccess.getShortAccessString(referenceDefinition.foreignColumnName));
  }
  ifNullBuilder.add(""String_Node_Str"");
  builder.beginControlFlow(ifNullBuilder.build().toString());
  builder.addStatement(columnAccess.setColumnAccessString(LoadFromCursorMethod.PARAM_MODEL,elementName,CodeBlock.builder().add(""String_Node_Str"",ClassNames.SELECT,referencedTableClassName).add(selectBuilder.build()).add(""String_Node_Str"").build().toString()));
  builder.endControlFlow();
  return builder.build();
}"
26969,"public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}","public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (!referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
 else {
    referencedTableClassName=elementClassName;
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}"
26970,"@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(baseTableDefinition.elementClassName,PARAM_MODEL).addParameter(ClassNames.CURSOR,PARAM_CURSOR).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getLoadFromCursorMethod());
  }
  return methodBuilder.build();
}","@Override public MethodSpec getMethodSpec(){
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassNames.CURSOR,PARAM_CURSOR).addParameter(baseTableDefinition.elementClassName,PARAM_MODEL).returns(TypeName.VOID);
  List<ColumnDefinition> columnDefinitionList=baseTableDefinition.getColumnDefinitions();
  for (  ColumnDefinition columnDefinition : columnDefinitionList) {
    methodBuilder.addCode(columnDefinition.getLoadFromCursorMethod());
  }
  return methodBuilder.build();
}"
26971,"public void testInOperators(){
  Condition.In in=column(ConditionModel$Table.NAME).in(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ConditionQueryBuilder<ConditionModel> conditionQueryBuilder=new ConditionQueryBuilder<>(ConditionModel.class,in);
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
  Condition.In notIn=column(ConditionModel$Table.NAME).notIn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  conditionQueryBuilder=new ConditionQueryBuilder<>(ConditionModel.class,notIn);
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
}","public void testInOperators(){
  Condition.In in=column(ConditionModel$Table.NAME).in(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ConditionGroup conditionQueryBuilder=ConditionGroup.clause().and(in);
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
  Condition.In notIn=column(ConditionModel$Table.NAME).notIn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  conditionQueryBuilder=ConditionGroup.clause().and(notIn);
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
}"
26972,"public void testChainingConditions(){
  ConditionQueryBuilder<ConditionModel> conditionQueryBuilder=new ConditionQueryBuilder<>(ConditionModel.class);
  conditionQueryBuilder.addCondition(column(ConditionModel$Table.NAME).is(""String_Node_Str"").separator(""String_Node_Str"")).addCondition(column(ConditionModel$Table.NUMBER).is(6).separator(""String_Node_Str"")).addCondition(column(ConditionModel$Table.FRACTION).is(4.5d));
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
}","public void testChainingConditions(){
  ConditionGroup conditionQueryBuilder=ConditionGroup.clause();
  conditionQueryBuilder.addCondition(column(ConditionModel$Table.NAME).is(""String_Node_Str"").separator(""String_Node_Str"")).addCondition(column(ConditionModel$Table.NUMBER).is(6).separator(""String_Node_Str"")).addCondition(column(ConditionModel$Table.FRACTION).is(4.5d));
  assertEquals(""String_Node_Str"",conditionQueryBuilder.getQuery().trim());
}"
26973,"/** 
 * Updates the model if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 * @param model        The model to update
 * @param modelAdapter The adapter to use
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the{@link DBTransactionQueue} using async to true.
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>boolean update(TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  boolean exists;
  SQLiteDatabase db=FlowManager.getDatabaseForTable(modelAdapter.getModelClass()).getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  adapter.bindToContentValues(contentValues,model);
  exists=(SQLiteCompatibilityUtils.updateWithOnConflict(db,modelAdapter.getTableName(),contentValues,adapter.getPrimaryConditions(model).getQuery(),null,ConflictAction.getSQLiteDatabaseAlgorithmInt(modelAdapter.getUpdateOnConflictAction())) != 0);
  if (!exists) {
    insert(model,adapter,modelAdapter);
  }
 else {
    notifyModelChanged(model,adapter,modelAdapter,Action.UPDATE);
  }
  return exists;
}","/** 
 * Updates the model if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 * @param model        The model to update
 * @param modelAdapter The adapter to use
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the{@link DBTransactionQueue} using async to true.
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>boolean update(TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  boolean exists;
  SQLiteDatabase db=FlowManager.getDatabaseForTable(modelAdapter.getModelClass()).getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  adapter.bindToContentValues(contentValues,model);
  exists=(SQLiteCompatibilityUtils.updateWithOnConflict(db,modelAdapter.getTableName(),contentValues,adapter.getPrimaryConditionClause(model).getQuery(),null,ConflictAction.getSQLiteDatabaseAlgorithmInt(modelAdapter.getUpdateOnConflictAction())) != 0);
  if (!exists) {
    insert(model,adapter,modelAdapter);
  }
 else {
    notifyModelChanged(model,adapter,modelAdapter,Action.UPDATE);
  }
  return exists;
}"
26974,"/** 
 * Deletes   {@link Model} from the database using the specfied {@link FlowManager}
 * @param model The model to delete
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>void delete(final TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  new Delete().from((Class<TableClass>)adapter.getModelClass()).where(adapter.getPrimaryConditions(model)).query();
  adapter.updateAutoIncrement(model,0);
  notifyModelChanged(model,adapter,modelAdapter,Action.DELETE);
}","/** 
 * Deletes   {@link Model} from the database using the specfied {@link FlowManager}
 * @param model The model to delete
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>void delete(final TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  new Delete().from((Class<TableClass>)adapter.getModelClass()).where(adapter.getPrimaryConditionClause(model)).query();
  adapter.updateAutoIncrement(model,0);
  notifyModelChanged(model,adapter,modelAdapter,Action.DELETE);
}"
26975,"public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  return DefinitionUtils.getSQLiteStatementMethod(index,elementName,elementName,elementTypeName,isModelContainerAdapter,columnAccess).build();
}","public CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  return DefinitionUtils.getSQLiteStatementMethod(index,containerKeyName,elementName,elementTypeName,isModelContainerAdapter,columnAccess,ModelUtils.getVariable(isModelContainerAdapter)).build();
}"
26976,"public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(elementName,elementName,elementTypeName,columnName,isModelContainerAdapter,columnAccess).build();
}","public CodeBlock getLoadFromCursorMethod(boolean isModelContainerAdapter){
  return DefinitionUtils.getLoadFromCursorMethod(containerKeyName,elementName,elementTypeName,columnName,isModelContainerAdapter,columnAccess).build();
}"
26977,"public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  return DefinitionUtils.getContentValuesStatement(elementName,elementName,columnName,elementTypeName,isModelContainerAdapter,columnAccess).build();
}","public CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  return DefinitionUtils.getContentValuesStatement(containerKeyName,elementName,columnName,elementTypeName,isModelContainerAdapter,columnAccess,ModelUtils.getVariable(isModelContainerAdapter)).build();
}"
26978,"public String getColumnAccessString(boolean isModelContainerAdapter){
  return columnAccess.getColumnAccessString(elementTypeName,elementName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
}","public String getColumnAccessString(boolean isModelContainerAdapter){
  return columnAccess.getColumnAccessString(elementTypeName,containerKeyName,elementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
}"
26979,"public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
  if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
    hasTypeConverter=true;
    columnAccess=new TypeConverterAccess(manager,this);
  }
  if (element.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
  if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN)) {
    isBoolean=true;
  }
  if (elementTypeName instanceof ParameterizedTypeName) {
    List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
    if (!args.isEmpty()) {
      columnAccess=new ModelContainerAccess(manager,this);
    }
  }
 else   if (elementTypeName instanceof ArrayTypeName) {
    processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
  }
}","public ColumnDefinition(ProcessorManager processorManager,Element element){
  super(element,processorManager);
  column=element.getAnnotation(Column.class);
  if (column != null) {
    this.columnName=column.name().equals(""String_Node_Str"") ? element.getSimpleName().toString() : column.name();
    length=column.length();
    collate=column.collate();
    defaultValue=column.defaultValue();
  }
 else {
    this.columnName=element.getSimpleName().toString();
  }
  boolean isPrivate=element.getModifiers().contains(Modifier.PRIVATE);
  if (isPrivate) {
    columnAccess=new PrivateColumnAccess(column);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
  PrimaryKey primaryKey=element.getAnnotation(PrimaryKey.class);
  if (primaryKey != null) {
    if (primaryKey.autoincrement()) {
      isPrimaryKeyAutoIncrement=true;
    }
 else {
      isPrimaryKey=true;
    }
  }
  Unique uniqueColumn=element.getAnnotation(Unique.class);
  if (uniqueColumn != null) {
    unique=uniqueColumn.unique();
    onUniqueConflict=uniqueColumn.onUniqueConflict();
    int[] groups=uniqueColumn.uniqueGroups();
    for (    int group : groups) {
      uniqueGroups.add(group);
    }
  }
  NotNull notNullAnno=element.getAnnotation(NotNull.class);
  if (notNullAnno != null) {
    notNull=true;
    onNullConflict=notNullAnno.onNullConflict();
  }
  ContainerKey containerKey=element.getAnnotation(ContainerKey.class);
  if (containerKey != null) {
    containerKeyName=containerKey.value();
  }
 else {
    containerKeyName=columnName;
  }
  final TypeConverterDefinition typeConverterDefinition=processorManager.getTypeConverterDefinition(elementTypeName);
  if (typeConverterDefinition != null || (!hasTypeConverter && !SQLiteType.containsType(elementTypeName))) {
    hasTypeConverter=true;
    columnAccess=new TypeConverterAccess(manager,this);
  }
  if (element.getKind() == ElementKind.ENUM) {
    columnAccess=new EnumColumnAccess(this);
  }
  if (elementTypeName.equals(ClassName.get(Blob.class))) {
    columnAccess=new BlobColumnAccess(this);
  }
  if (elementTypeName.box().equals(TypeName.BOOLEAN)) {
    isBoolean=true;
  }
  if (elementTypeName instanceof ParameterizedTypeName) {
    List<TypeName> args=((ParameterizedTypeName)elementTypeName).typeArguments;
    if (!args.isEmpty()) {
      columnAccess=new ModelContainerAccess(manager,this);
    }
  }
 else   if (elementTypeName instanceof ArrayTypeName) {
    processorManager.getMessager().printMessage(Diagnostic.Kind.ERROR,""String_Node_Str"");
  }
}"
26980,"public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getSQLiteStatementMethod(AtomicInteger index,String elementName,String fullElementName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,columnAccess.getSqliteTypeForTypeName(elementTypeName,isModelContainerAdapter).getSQLiteStatementMethod(),index.intValue(),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToStatementMethod.PARAM_STATEMENT,index.intValue()).endControlFlow();
  }
  return codeBuilder;
}"
26981,"public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,ModelUtils.getVariable(isModelContainerAdapter),isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}","public static CodeBlock.Builder getContentValuesStatement(String elementName,String fullElementName,String columnName,TypeName elementTypeName,boolean isModelContainerAdapter,BaseColumnAccess columnAccess,String variableNameString){
  String statement=columnAccess.getColumnAccessString(elementTypeName,elementName,fullElementName,variableNameString,isModelContainerAdapter);
  CodeBlock.Builder codeBuilder=CodeBlock.builder();
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + fullElementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=elementTypeName;
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.beginControlFlow(""String_Node_Str"",finalAccessStatement);
  }
  codeBuilder.addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName),finalAccessStatement);
  if (!elementTypeName.isPrimitive()) {
    codeBuilder.nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",BindToContentValuesMethod.PARAM_CONTENT_VALUES,QueryBuilder.quote(columnName)).endControlFlow();
  }
  return codeBuilder;
}"
26982,"private String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=""String_Node_Str"" + elementName;
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}","private String getFinalAccessStatement(CodeBlock.Builder codeBuilder,boolean isModelContainerAdapter,String statement){
  String finalAccessStatement=statement;
  if (columnAccess instanceof TypeConverterAccess || isModelContainerAdapter) {
    finalAccessStatement=getRefName();
    TypeName typeName;
    if (columnAccess instanceof TypeConverterAccess) {
      typeName=((TypeConverterAccess)columnAccess).typeConverterDefinition.getDbTypeName();
    }
 else {
      typeName=ModelUtils.getModelContainerType(manager,elementTypeName);
      statement=ModelUtils.getVariable(isModelContainerAdapter) + ""String_Node_Str"" + statement+ ""String_Node_Str""+ referencedTableClassName+ ""String_Node_Str"";
    }
    codeBuilder.addStatement(""String_Node_Str"",typeName,finalAccessStatement,statement);
  }
  return finalAccessStatement;
}"
26983,"public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (!referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
 else {
    referencedTableClassName=elementClassName;
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}","public ForeignKeyColumnDefinition(ProcessorManager manager,Element typeElement){
  super(manager,typeElement);
  ForeignKey foreignKey=typeElement.getAnnotation(ForeignKey.class);
  onUpdate=foreignKey.onUpdate();
  onDelete=foreignKey.onDelete();
  try {
    foreignKey.tableClass();
  }
 catch (  MirroredTypeException mte) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(mte.getTypeMirror().toString()));
  }
  if (!referencedTableClassName.equals(TypeName.OBJECT)) {
    referencedTableClassName=ClassName.get(manager.getElements().getTypeElement(typeElement.asType().toString()));
  }
 else {
    referencedTableClassName=elementClassName;
  }
  TypeElement element=manager.getProcessingEnvironment().getElementUtils().getTypeElement(elementTypeName.toString());
  isModel=ProcessorUtils.implementsClass(manager.getProcessingEnvironment(),ClassNames.MODEL.toString(),element);
  if (columnAccess instanceof TypeConverterAccess) {
    if (typeElement.getModifiers().contains(Modifier.PRIVATE)) {
      columnAccess=new PrivateColumnAccess(typeElement.getAnnotation(Column.class));
    }
 else {
      columnAccess=new SimpleColumnAccess();
    }
  }
  ForeignKeyReference[] references=foreignKey.references();
  for (  ForeignKeyReference reference : references) {
    ForeignKeyReferenceDefinition referenceDefinition=new ForeignKeyReferenceDefinition(manager,elementName,reference,columnAccess,this);
    foreignKeyReferenceDefinitionList.add(referenceDefinition);
  }
}"
26984,"CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getSQLiteStatementMethod(index,columnShortAccess,combined,columnClassName,isModelContainerAdapter,simpleColumnAccess).build();
}","CodeBlock getSQLiteStatementMethod(AtomicInteger index,boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getSQLiteStatementMethod(index,columnShortAccess,combined,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}"
26985,"CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getContentValuesStatement(columnShortAccess,combined,columnName,columnClassName,isModelContainerAdapter,simpleColumnAccess).build();
}","CodeBlock getContentValuesStatement(boolean isModelContainerAdapter){
  String shortAccess=tableColumnAccess.getShortAccessString(foreignKeyFieldName,isModelContainerAdapter);
  String columnShortAccess=columnAccess.getShortAccessString(foreignColumnName,isModelContainerAdapter);
  String combined=shortAccess + (isModelContainerAdapter ? ""String_Node_Str"" : ""String_Node_Str"") + columnShortAccess;
  return DefinitionUtils.getContentValuesStatement(columnShortAccess,combined,columnName,columnClassName,isModelContainerAdapter,simpleColumnAccess,getForeignKeyColumnVariable(isModelContainerAdapter)).build();
}"
26986,"public ForeignKeyReferenceDefinition(ProcessorManager manager,String foreignKeyFieldName,ForeignKeyReference foreignKeyReference,BaseColumnAccess tableColumnAccess){
  this.manager=manager;
  this.foreignKeyFieldName=foreignKeyFieldName;
  this.tableColumnAccess=tableColumnAccess;
  columnName=foreignKeyReference.columnName();
  foreignColumnName=foreignKeyReference.foreignKeyColumnName();
  TypeMirror columnClass=null;
  try {
    foreignKeyReference.columnType();
  }
 catch (  MirroredTypeException mte) {
    columnClass=mte.getTypeMirror();
  }
  columnClassName=TypeName.get(columnClass);
  isReferencedFieldPrivate=foreignKeyReference.referencedFieldIsPrivate();
  if (isReferencedFieldPrivate) {
    columnAccess=new PrivateColumnAccess(foreignKeyReference);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
}","public ForeignKeyReferenceDefinition(ProcessorManager manager,String foreignKeyFieldName,ForeignKeyReference foreignKeyReference,BaseColumnAccess tableColumnAccess,ForeignKeyColumnDefinition foreignKeyColumnDefinition){
  this.manager=manager;
  this.foreignKeyFieldName=foreignKeyFieldName;
  this.tableColumnAccess=tableColumnAccess;
  this.foreignKeyColumnDefinition=foreignKeyColumnDefinition;
  columnName=foreignKeyReference.columnName();
  foreignColumnName=foreignKeyReference.foreignKeyColumnName();
  TypeMirror columnClass=null;
  try {
    foreignKeyReference.columnType();
  }
 catch (  MirroredTypeException mte) {
    columnClass=mte.getTypeMirror();
  }
  columnClassName=TypeName.get(columnClass);
  isReferencedFieldPrivate=foreignKeyReference.referencedFieldIsPrivate();
  if (isReferencedFieldPrivate) {
    columnAccess=new PrivateColumnAccess(foreignKeyReference);
  }
 else {
    columnAccess=new SimpleColumnAccess();
  }
}"
26987,"public static void writeGetTableName(TypeSpec.Builder typeBuilder,final String tableName){
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",tableName).returns(ClassName.get(String.class)).build());
}","public static void writeGetTableName(TypeSpec.Builder typeBuilder,final String tableName){
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement(""String_Node_Str"",QueryBuilder.quote(tableName)).returns(ClassName.get(String.class)).build());
}"
26988,"@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class),ClassName.get(String.class),ClassName.get(Class.class)),""String_Node_Str"",Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",ParameterizedTypeName.get(HashMap.class)).build());
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    constructorCode.addStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.elementTypeName);
  }
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassName.get(String.class),""String_Node_Str"").addStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").returns(ParameterizedTypeName.get(ClassName.get(Class.class))).build());
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,elementClassName + tableDefinition.databaseMethod.classSeparator + TableDefinition.DBFLOW_TABLE_TAG);
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}","@Override public void onWriteDefinition(TypeSpec.Builder typeBuilder){
  typeBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Map.class),ClassName.get(String.class),ClassName.get(Class.class)),""String_Node_Str"",Modifier.PRIVATE,Modifier.FINAL).initializer(""String_Node_Str"",ParameterizedTypeName.get(HashMap.class)).build());
  CodeBlock.Builder constructorCode=CodeBlock.builder();
  for (  ColumnDefinition columnDefinition : tableDefinition.columnDefinitions) {
    constructorCode.addStatement(""String_Node_Str"",""String_Node_Str"",columnDefinition.columnName,columnDefinition.elementTypeName);
  }
  typeBuilder.addMethod(MethodSpec.constructorBuilder().addCode(constructorCode.build()).addModifiers(Modifier.PUBLIC).build());
  typeBuilder.addMethod(MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ClassName.get(String.class),""String_Node_Str"").addStatement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").returns(ClassName.get(Class.class)).build());
  InternalAdapterHelper.writeGetModelClass(typeBuilder,elementClassName);
  InternalAdapterHelper.writeGetTableName(typeBuilder,elementClassName + tableDefinition.databaseMethod.classSeparator + TableDefinition.DBFLOW_TABLE_TAG);
  for (  MethodDefinition method : methods) {
    MethodSpec methodSpec=method.getMethodSpec();
    if (methodSpec != null) {
      typeBuilder.addMethod(methodSpec);
    }
  }
}"
26989,"@Override public MethodSpec getMethodSpec(){
  CodeBlock.Builder codeBuilder=CodeBlock.builder().addStatement(""String_Node_Str"",tableDefinition.elementClassName,ModelUtils.getVariable(false),tableDefinition.elementClassName);
  for (  ColumnDefinition columnDefinition : tableDefinition.getColumnDefinitions()) {
    codeBuilder.add(columnDefinition.getToModelMethod(isModelContainerDefinition));
  }
  codeBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(false));
  return MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER,tableDefinition.elementTypeName),ModelUtils.getVariable(true)).addCode(codeBuilder.build()).build();
}","@Override public MethodSpec getMethodSpec(){
  CodeBlock.Builder codeBuilder=CodeBlock.builder().addStatement(""String_Node_Str"",tableDefinition.elementClassName,ModelUtils.getVariable(false),tableDefinition.elementClassName);
  for (  ColumnDefinition columnDefinition : tableDefinition.getColumnDefinitions()) {
    codeBuilder.add(columnDefinition.getToModelMethod(isModelContainerDefinition));
  }
  codeBuilder.addStatement(""String_Node_Str"",ModelUtils.getVariable(false));
  return MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addParameter(ParameterizedTypeName.get(ClassNames.MODEL_CONTAINER,tableDefinition.elementTypeName,WildcardTypeName.get(tableDefinition.manager.getTypeUtils().getWildcardType(null,null))),ModelUtils.getVariable(true)).addCode(codeBuilder.build()).build();
}"
26990,"public Set<ModelContainerDefinition> getModelContainers(String databaseName){
  Map<String,ModelContainerDefinition> modelContainerDefinitionMap=modelContainers.get(databaseName);
  if (modelContainerDefinitionMap != null) {
    return Sets.newHashSet(modelContainers.get(databaseName).values());
  }
  return Sets.newHashSet();
}","public Set<ModelContainerDefinition> getModelContainers(String databaseName){
  Map<TypeName,ModelContainerDefinition> modelContainerDefinitionMap=modelContainers.get(databaseName);
  if (modelContainerDefinitionMap != null) {
    return Sets.newHashSet(modelContainers.get(databaseName).values());
  }
  return Sets.newHashSet();
}"
26991,"public void addModelContainerDefinition(ModelContainerDefinition modelContainerDefinition){
  Map<String,ModelContainerDefinition> modelContainerDefinitionMap=modelContainers.get(getDatabase(modelContainerDefinition.elementClassName));
  if (modelContainerDefinitionMap == null) {
    modelContainerDefinitionMap=Maps.newHashMap();
    modelContainers.put(getDatabase(modelContainerDefinition.elementClassName),modelContainerDefinitionMap);
  }
  modelContainerDefinitionMap.put(modelContainerDefinition.getModelClassQualifiedName(),modelContainerDefinition);
}","public void addModelContainerDefinition(ModelContainerDefinition modelContainerDefinition){
  Map<TypeName,ModelContainerDefinition> modelContainerDefinitionMap=modelContainers.get(getDatabase(modelContainerDefinition.elementClassName));
  if (modelContainerDefinitionMap == null) {
    modelContainerDefinitionMap=Maps.newHashMap();
    modelContainers.put(getDatabase(modelContainerDefinition.elementClassName),modelContainerDefinitionMap);
  }
  modelContainerDefinitionMap.put(modelContainerDefinition.elementClassName,modelContainerDefinition);
}"
26992,"public ModelContainerDefinition getModelContainerDefinition(String databaseName,TypeElement typeElement){
  return modelContainers.get(databaseName).get(typeElement.getQualifiedName().toString());
}","public ModelContainerDefinition getModelContainerDefinition(String databaseName,TypeName typeName){
  return modelContainers.get(databaseName).get(typeName);
}"
26993,"public String getQuery(boolean useCastIfApplicable){
  AdapterQueryBuilder contentValue=new AdapterQueryBuilder();
  if (!requiresTypeConverter) {
    if (castedClass != null && useCastIfApplicable) {
      contentValue.appendCast(isABlob ? ""String_Node_Str"" : castedClass);
    }
 else {
      contentValue.append(""String_Node_Str"");
    }
  }
  contentValue.appendVariable(isModelContainerAdapter).append(""String_Node_Str"");
  if (isModelContainerAdapter) {
    contentValue.appendGetValue(containerKeyName);
  }
 else   if (fieldIsAModelContainer) {
    contentValue.append(columnName).append(""String_Node_Str"").appendGetValue(referencedColumnFieldName);
  }
 else {
    if (isForeignKeyField) {
      ColumnAccessModel columnAccessModel=new ColumnAccessModel(parentColumnDefinition.getManager(),parentColumnDefinition,isModelContainerAdapter);
      contentValue.append(columnAccessModel.getReferencedColumnFieldName()).append(""String_Node_Str"");
    }
    contentValue.append(getReferencedColumnFieldName());
  }
  if (isABlob && !isModelContainerAdapter) {
    contentValue.append(""String_Node_Str"");
  }
  if (!requiresTypeConverter) {
    contentValue.append(""String_Node_Str"");
  }
  return contentValue.getQuery();
}","public String getQuery(boolean useCastIfApplicable){
  AdapterQueryBuilder contentValue=new AdapterQueryBuilder();
  if (!requiresTypeConverter) {
    if (castedClass != null && useCastIfApplicable && !isABlob) {
      contentValue.appendCast(isABlob ? ""String_Node_Str"" : castedClass);
    }
 else {
      contentValue.append(""String_Node_Str"");
    }
  }
  contentValue.appendVariable(isModelContainerAdapter).append(""String_Node_Str"");
  if (isModelContainerAdapter) {
    contentValue.appendGetValue(containerKeyName);
  }
 else   if (fieldIsAModelContainer) {
    contentValue.append(columnName).append(""String_Node_Str"").appendGetValue(referencedColumnFieldName);
  }
 else {
    if (isForeignKeyField) {
      ColumnAccessModel columnAccessModel=new ColumnAccessModel(parentColumnDefinition.getManager(),parentColumnDefinition,isModelContainerAdapter);
      contentValue.append(columnAccessModel.getReferencedColumnFieldName()).append(""String_Node_Str"");
    }
    contentValue.append(getReferencedColumnFieldName());
  }
  if (isABlob && !isModelContainerAdapter) {
    contentValue.append(""String_Node_Str"");
  }
  if (!requiresTypeConverter) {
    contentValue.append(""String_Node_Str"");
  }
  return contentValue.getQuery();
}"
26994,"/** 
 * Constructs this transaction with a delete with the specified where args
 * @param dbTransactionInfo     The information about this transaction
 * @param conditionQueryBuilder The where statement that we will use
 */
public DeleteTransaction(DBTransactionInfo dbTransactionInfo,ConditionQueryBuilder<ModelClass> conditionQueryBuilder){
  super(dbTransactionInfo,new Delete().from(conditionQueryBuilder.getTableClass()).where(conditionQueryBuilder));
}","/** 
 * Constructs this transaction with a delete with an empty ""where"" clause
 * @param dbTransactionInfo The information about this transaction
 * @param table             The model table that we act on
 */
public DeleteTransaction(DBTransactionInfo dbTransactionInfo,Class<ModelClass> table,SQLCondition... conditions){
  super(dbTransactionInfo,new Delete().from(table).where(conditions));
}"
26995,"/** 
 * Creates an instance of this class. Selects all from the specified table.
 * @param transactionListener The transaction listener.
 * @param table               The table to select from
 * @param columns             The columns to project the selection on.
 */
public SelectListTransaction(TransactionListener<List<ModelClass>> transactionListener,Class<ModelClass> table,String... columns){
  this(new Select(columns).from(table),transactionListener);
}","/** 
 * Creates an instance of this class. Selects all from the specified table.
 * @param transactionListener The transaction listener.
 * @param table               The table to select from
 * @param columns             The columns to project the selection on.
 */
public SelectListTransaction(TransactionListener<List<ModelClass>> transactionListener,Class<ModelClass> table,Property... columns){
  this(new Select(columns).from(table),transactionListener);
}"
26996,"/** 
 * Creates an instance of this class
 * @param transactionListener        The result that returns from this query.
 * @param whereConditionQueryBuilder The query builder used to SELECT.
 * @param columns                    The columns to project the SELECT on.
 */
public SelectSingleModelTransaction(TransactionListener<ModelClass> transactionListener,ConditionQueryBuilder<ModelClass> whereConditionQueryBuilder,String... columns){
  this(new Select(columns).from(whereConditionQueryBuilder.getTableClass()).where(whereConditionQueryBuilder),transactionListener);
}","/** 
 * Creates an instance of this class
 * @param transactionListener        The result that returns from this query.
 * @param whereConditionQueryBuilder The query builder used to SELECT.
 * @param properties                 The columns to project the SELECT on.
 */
public SelectSingleModelTransaction(TransactionListener<ModelClass> transactionListener,Class<ModelClass> table,ConditionGroup conditionGroup,Property... properties){
  this(new Select(properties).from(table).where(conditionGroup),transactionListener);
}"
26997,"/** 
 * Updates the model if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 * @param model        The model to update
 * @param modelAdapter The adapter to use
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the{@link DBTransactionQueue} using async to true.
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>boolean update(TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  boolean exists;
  SQLiteDatabase db=FlowManager.getDatabaseForTable(modelAdapter.getModelClass()).getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  adapter.bindToContentValues(contentValues,model);
  exists=(SQLiteCompatibilityUtils.updateWithOnConflict(db,modelAdapter.getTableName(),contentValues,adapter.getPrimaryModelWhere(model).getQuery(),null,ConflictAction.getSQLiteDatabaseAlgorithmInt(modelAdapter.getUpdateOnConflictAction())) != 0);
  if (!exists) {
    insert(model,adapter,modelAdapter);
  }
 else {
    notifyModelChanged(model,adapter,modelAdapter,Action.UPDATE);
  }
  return exists;
}","/** 
 * Updates the model if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 * @param model        The model to update
 * @param modelAdapter The adapter to use
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the{@link DBTransactionQueue} using async to true.
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>boolean update(TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  boolean exists;
  SQLiteDatabase db=FlowManager.getDatabaseForTable(modelAdapter.getModelClass()).getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  adapter.bindToContentValues(contentValues,model);
  exists=(SQLiteCompatibilityUtils.updateWithOnConflict(db,modelAdapter.getTableName(),contentValues,adapter.getPrimaryConditions(model).getQuery(),null,ConflictAction.getSQLiteDatabaseAlgorithmInt(modelAdapter.getUpdateOnConflictAction())) != 0);
  if (!exists) {
    insert(model,adapter,modelAdapter);
  }
 else {
    notifyModelChanged(model,adapter,modelAdapter,Action.UPDATE);
  }
  return exists;
}"
26998,"/** 
 * Deletes   {@link Model} from the database using the specfied {@link FlowManager}
 * @param model The model to delete
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>void delete(final TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  new Delete().from((Class<TableClass>)adapter.getModelClass()).where(adapter.getPrimaryModelWhere(model)).query();
  adapter.updateAutoIncrement(model,0);
  notifyModelChanged(model,adapter,modelAdapter,Action.DELETE);
}","/** 
 * Deletes   {@link Model} from the database using the specfied {@link FlowManager}
 * @param model The model to delete
 */
@SuppressWarnings(""String_Node_Str"") public static <ModelClass extends Model,TableClass extends Model,AdapterClass extends RetrievalAdapter & InternalAdapter>void delete(final TableClass model,AdapterClass adapter,ModelAdapter<ModelClass> modelAdapter){
  new Delete().from((Class<TableClass>)adapter.getModelClass()).where(adapter.getPrimaryConditions(model)).query();
  adapter.updateAutoIncrement(model,0);
  notifyModelChanged(model,adapter,modelAdapter,Action.DELETE);
}"
26999,"/** 
 * Replaces empty parameter values such as ""columnName = ?"" with the array of values passed in. It must match the count of columns that are in this where query.
 * @param values The values of the fields we wish to replace. Must match the length of the empty params and must be in empty param mode.
 * @return A new {@link ConditionQueryBuilder} with the parameters filled in.
 */
public ConditionQueryBuilder<ModelClass> replaceEmptyParams(Object... values){
  if (!useEmptyParams) {
    throw new IllegalStateException(""String_Node_Str"" + ConditionQueryBuilder.class.getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (conditions.size() != values.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + modelAdapter.getTableName());
  }
  ConditionQueryBuilder<ModelClass> conditionQueryBuilder=new ConditionQueryBuilder<>(modelAdapter.getModelClass());
  for (int i=0; i < values.length; i++) {
    SQLCondition condition=conditions.get(i);
    conditionQueryBuilder.addCondition(column(NameAlias.columnRaw(condition.columnName())).operation(condition.operation()).value(values[i]));
  }
  return conditionQueryBuilder;
}","/** 
 * Replaces empty parameter values such as ""columnName = ?"" with the array of values passed in. It must match the count of columns that are in this where query.
 * @param values The values of the fields we wish to replace. Must match the length of the empty params and must be in empty param mode.
 * @return A new {@link ConditionQueryBuilder} with the parameters filled in.
 */
public ConditionQueryBuilder<ModelClass> replaceEmptyParams(Object... values){
  if (!useEmptyParams) {
    throw new IllegalStateException(""String_Node_Str"" + ConditionQueryBuilder.class.getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (conditions.size() != values.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + modelAdapter.getTableName());
  }
  ConditionQueryBuilder<ModelClass> conditionQueryBuilder=new ConditionQueryBuilder<>(modelAdapter.getModelClass());
  for (int i=0; i < values.length; i++) {
    SQLCondition condition=conditions.get(i);
    conditionQueryBuilder.addCondition(column(new NameAlias(condition.columnName()).tickName(false)).operation(condition.operation()).value(values[i]));
  }
  return conditionQueryBuilder;
}"
27000,"/** 
 * Appends the   {@link SQLCondition} with an {@link Condition.Operation#OR}
 * @param sqlCondition The condition to append.
 * @return This instance.
 */
public ConditionGroup or(SQLCondition sqlCondition){
  return operator(Condition.Operation.OR,sqlCondition);
}","/** 
 * Appends the   {@link SQLCondition} with an {@link Operation#OR}
 * @param sqlCondition The condition to append.
 * @return This instance.
 */
public ConditionGroup or(SQLCondition sqlCondition){
  return operator(Operation.OR,sqlCondition);
}"
