record_number,buggy_code,fixed_code
8001,"@Override public TTQueueTable getStreamTable(byte[] streamTableName) throws OperationException {
  TTQueueTable streamTable=this.streamTables.get(streamTableName);
  if (streamTable != null)   return streamTable;
  OrderedVersionedColumnarTable table=getTable(streamOVCTable);
  streamTable=new TTQueueTableOnVCTable(table,oracle,conf);
  TTQueueTable existing=this.streamTables.putIfAbsent(streamTableName,streamTable);
  return existing != null ? existing : streamTable;
}","@Override public TTQueueTable getStreamTable(byte[] streamTableName) throws OperationException {
  TTQueueTable streamTable=this.streamTables.get(streamTableName);
  if (streamTable != null)   return streamTable;
  OrderedVersionedColumnarTable table=getTable(streamOVCTable);
  streamTable=new TTQueueTableNewOnVCTable(table,oracle,conf);
  TTQueueTable existing=this.streamTables.putIfAbsent(streamTableName,streamTable);
  return existing != null ? existing : streamTable;
}"
8002,"private void readEntries(QueueConsumer consumer,QueueConfig config,QueueStateImpl queueState,ReadPointer readPointer,List<Long> entryIds) throws OperationException {
  if (LOG.isTraceEnabled()) {
    LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds)));
  }
  Map<Long,byte[]> currentCachedEntries=queueState.getTransientWorkingSet().getCachedEntries();
  Map<Long,byte[]> newCachedEntries=Maps.newHashMap();
  for (  long entryId : queueState.getDequeueEntrySet().getEntryIds()) {
    byte[] entry=currentCachedEntries.get(entryId);
    if (entry != null) {
      newCachedEntries.put(entryId,entry);
    }
  }
  List<Long> readEntryIds=Lists.newArrayListWithCapacity(entryIds.size());
  try {
    if (entryIds.isEmpty()) {
      return;
    }
    final byte[][] entryRowKeys=new byte[entryIds.size()][];
    for (int i=0; i < entryIds.size(); ++i) {
      entryRowKeys[i]=makeRowKey(GLOBAL_DATA_PREFIX,entryIds.get(i));
    }
    final byte[][] entryColKeys=new byte[][]{ENTRY_META,ENTRY_DATA};
    OperationResult<Map<byte[],Map<byte[],byte[]>>> entriesResult=this.table.getAllColumns(entryRowKeys,entryColKeys,readPointer);
    if (entriesResult.isEmpty()) {
    }
 else {
      for (int i=0; i < entryIds.size(); ++i) {
        Map<byte[],byte[]> entryMap=entriesResult.getValue().get(entryRowKeys[i]);
        if (entryMap == null) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds.get(i))));
          }
          return;
        }
        byte[] entryMetaBytes=entryMap.get(ENTRY_META);
        if (entryMetaBytes == null) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds.get(i))));
          }
          return;
        }
        EntryMeta entryMeta=EntryMeta.fromBytes(entryMetaBytes);
        if (LOG.isTraceEnabled()) {
          LOG.trace(getLogMessage(""String_Node_Str"" + entryIds.get(i) + ""String_Node_Str""+ entryMeta.toString()));
        }
        if (entryMeta.isInvalid() || entryMeta.isEvicted()) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(""String_Node_Str"" + entryIds.get(i) + ""String_Node_Str""+ entryMeta.toString()+ ""String_Node_Str""));
          }
        }
 else {
          assert(entryMeta.isValid());
          long entryId=entryIds.get(i);
          byte[] entryData=entryMap.get(ENTRY_DATA);
          newCachedEntries.put(entryId,entryData);
          readEntryIds.add(entryId);
        }
      }
    }
  }
  finally {
    queueState.setTransientWorkingSet(new TransientWorkingSet(readEntryIds,newCachedEntries));
  }
}","/** 
 * @returns true if all entries were skipped because they are invalid or evicted. That means we have to move theconsumer past these entries and fetch again.
 */
protected boolean readEntries(QueueConsumer consumer,QueueConfig config,QueueStateImpl queueState,ReadPointer readPointer,List<Long> entryIds) throws OperationException {
  if (LOG.isTraceEnabled()) {
    LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds)));
  }
  if (entryIds.isEmpty()) {
    return false;
  }
  Map<Long,byte[]> currentCachedEntries=queueState.getTransientWorkingSet().getCachedEntries();
  Map<Long,byte[]> newCachedEntries=Maps.newHashMap();
  for (  long entryId : queueState.getDequeueEntrySet().getEntryIds()) {
    byte[] entry=currentCachedEntries.get(entryId);
    if (entry != null) {
      newCachedEntries.put(entryId,entry);
    }
  }
  List<Long> readEntryIds=Lists.newArrayListWithCapacity(entryIds.size());
  try {
    final byte[][] entryRowKeys=new byte[entryIds.size()][];
    for (int i=0; i < entryIds.size(); ++i) {
      entryRowKeys[i]=makeRowKey(GLOBAL_DATA_PREFIX,entryIds.get(i));
    }
    final byte[][] entryColKeys=new byte[][]{ENTRY_META,ENTRY_DATA};
    OperationResult<Map<byte[],Map<byte[],byte[]>>> entriesResult=table.getAllColumns(entryRowKeys,entryColKeys,readPointer);
    if (entriesResult.isEmpty()) {
      return false;
    }
 else {
      boolean allInvalid=true;
      for (int i=0; i < entryIds.size(); ++i) {
        Map<byte[],byte[]> entryMap=entriesResult.getValue().get(entryRowKeys[i]);
        if (entryMap == null) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds.get(i))));
          }
          return false;
        }
        byte[] entryMetaBytes=entryMap.get(ENTRY_META);
        if (entryMetaBytes == null) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(String.format(""String_Node_Str"",entryIds.get(i))));
          }
          return false;
        }
        EntryMeta entryMeta=EntryMeta.fromBytes(entryMetaBytes);
        if (LOG.isTraceEnabled()) {
          LOG.trace(getLogMessage(""String_Node_Str"" + entryIds.get(i) + ""String_Node_Str""+ entryMeta.toString()));
        }
        if (entryMeta.isInvalid() || entryMeta.isEvicted()) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(getLogMessage(""String_Node_Str"" + entryIds.get(i) + ""String_Node_Str""+ entryMeta.toString()+ ""String_Node_Str""));
          }
        }
 else {
          assert(entryMeta.isValid());
          long entryId=entryIds.get(i);
          byte[] entryData=entryMap.get(ENTRY_DATA);
          newCachedEntries.put(entryId,entryData);
          readEntryIds.add(entryId);
          allInvalid=false;
        }
      }
      return allInvalid;
    }
  }
  finally {
    queueState.setTransientWorkingSet(new TransientWorkingSet(readEntryIds,newCachedEntries));
  }
}"
8003,"@Override public List<Long> fetchNextEntries(QueueConsumer consumer,QueueConfig config,QueueStateImpl queueState,ReadPointer readPointer) throws OperationException {
  List<Long> newEntryIds=new ArrayList<Long>();
  ClaimedEntryRange claimedEntryRange=queueState.getClaimedEntryList().getClaimedEntry();
  if (claimedEntryRange.isValid()) {
    for (long i=claimedEntryRange.getBegin(); i <= claimedEntryRange.getEnd(); ++i) {
      newEntryIds.add(i);
    }
    return newEntryIds;
  }
  final int batchSize=getBatchSize(config);
  QueuePartitioner partitioner=config.getPartitionerType().getPartitioner();
  while (newEntryIds.isEmpty()) {
    long groupReadPointer=getGroupReadPointer(consumer);
    if (groupReadPointer + batchSize >= queueState.getQueueWritePointer()) {
      long queueWritePointer=table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX),GLOBAL_ENTRYID_COUNTER,0);
      queueState.setQueueWritePointer(queueWritePointer);
    }
    if (groupReadPointer >= queueState.getQueueWritePointer()) {
      return Collections.EMPTY_LIST;
    }
    long curBatchSize=groupReadPointer + (batchSize * consumer.getGroupSize()) < queueState.getQueueWritePointer() ? batchSize : (queueState.getQueueWritePointer() - groupReadPointer) / consumer.getGroupSize();
    if (curBatchSize < 1) {
      curBatchSize=1;
    }
    long endEntryId=table.incrementAtomicDirtily(makeRowKey(GROUP_READ_POINTER,consumer.getGroupId()),GROUP_READ_POINTER,curBatchSize);
    long startEntryId=endEntryId - curBatchSize + 1;
    queueState.getClaimedEntryList().add(startEntryId,endEntryId);
    final int cacheSize=(int)(endEntryId - startEntryId + 1);
    for (int id=0; id < cacheSize; ++id) {
      final long currentEntryId=startEntryId + id;
      if (partitioner.shouldEmit(consumer.getGroupSize(),consumer.getInstanceId(),currentEntryId) && queueState.getReconfigPartitionersList().shouldEmit(consumer.getGroupSize(),consumer.getInstanceId(),currentEntryId)) {
        newEntryIds.add(currentEntryId);
      }
    }
  }
  return newEntryIds;
}","@Override public void fetchNextEntries(QueueConsumer consumer,QueueConfig config,QueueStateImpl queueState,ReadPointer readPointer) throws OperationException {
  while (!queueState.getTransientWorkingSet().hasNext()) {
    List<Long> nextEntryIds=claimNextEntries(consumer,config,queueState,readPointer);
    if (nextEntryIds.isEmpty()) {
      return;
    }
    boolean allInvalid=readEntries(consumer,config,queueState,readPointer,nextEntryIds);
    if (allInvalid) {
      ignoreInvalidEntries(queueState,nextEntryIds);
      continue;
    }
    break;
  }
}"
8004,"@Override public DequeueResult dequeue(QueueConsumer consumer,ReadPointer readPointer) throws OperationException {
  final QueueConfig config=consumer.getQueueConfig();
  if (LOG.isTraceEnabled()) {
    LOG.trace(getLogMessage(""String_Node_Str"" + this.dequeueReturns.get() + ""String_Node_Str""+ consumer+ ""String_Node_Str""+ config+ ""String_Node_Str""+ readPointer+ ""String_Node_Str""));
  }
  final DequeueStrategy dequeueStrategy=getDequeueStrategy(config.getPartitionerType().getPartitioner());
  final QueueStateImpl queueState=getQueueState(consumer,readPointer);
  if (config.isSingleEntry()) {
    final DequeuedEntrySet dequeueEntrySet=queueState.getDequeueEntrySet();
    if (!dequeueEntrySet.isEmpty()) {
      final TransientWorkingSet transientWorkingSet=queueState.getTransientWorkingSet();
      final Map<Long,byte[]> cachedEntries=queueState.getTransientWorkingSet().getCachedEntries();
      int numToReturn=config.returnsBatch() ? getBatchSize(config) : 1;
      List<QueueEntry> entries=Lists.newArrayListWithCapacity(numToReturn);
      List<QueueEntryPointer> pointers=Lists.newArrayListWithCapacity(numToReturn);
      for (      DequeueEntry returnEntry : dequeueEntrySet.getEntryList()) {
        if (entries.size() >= numToReturn) {
          break;
        }
        long returnEntryId=returnEntry.getEntryId();
        if (transientWorkingSet.hasNext() && transientWorkingSet.peekNext().getEntryId() == returnEntryId) {
          transientWorkingSet.next();
        }
        byte[] entryBytes=cachedEntries.get(returnEntryId);
        if (entryBytes == null) {
          throw new OperationException(StatusCode.INTERNAL_ERROR,getLogMessage(String.format(""String_Node_Str"",returnEntryId)));
        }
        entries.add(new QueueEntry(entryBytes));
        pointers.add(new QueueEntryPointer(this.queueName,returnEntryId,returnEntry.getTries()));
      }
      if (entries.size() > 0) {
        dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
        return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,pointers.toArray(new QueueEntryPointer[pointers.size()]),entries.toArray(new QueueEntry[entries.size()]));
      }
    }
  }
  if (!queueState.getTransientWorkingSet().hasNext()) {
    List<Long> entryIds=dequeueStrategy.fetchNextEntries(consumer,config,queueState,readPointer);
    readEntries(consumer,config,queueState,readPointer,entryIds);
  }
  if (!queueState.getTransientWorkingSet().hasNext()) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(getLogMessage(""String_Node_Str"" + ""String_Node_Str"" + readPointer));
    }
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    return new DequeueResult(DequeueResult.DequeueStatus.EMPTY);
  }
  if (!config.returnsBatch()) {
    DequeueEntry dequeueEntry=queueState.getTransientWorkingSet().next();
    queueState.getDequeueEntrySet().add(dequeueEntry);
    QueueEntry entry=new QueueEntry(queueState.getTransientWorkingSet().getCachedEntries().get(dequeueEntry.getEntryId()));
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    this.dequeueReturns.incrementAndGet();
    return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,new QueueEntryPointer(this.queueName,dequeueEntry.getEntryId(),dequeueEntry.getTries()),entry);
  }
 else {
    final int batchSize=getBatchSize(config);
    List<QueueEntryPointer> pointers=Lists.newArrayListWithCapacity(batchSize);
    List<QueueEntry> entries=Lists.newArrayListWithCapacity(batchSize);
    while (queueState.getTransientWorkingSet().hasNext() && entries.size() < batchSize) {
      DequeueEntry dequeueEntry=queueState.getTransientWorkingSet().next();
      queueState.getDequeueEntrySet().add(dequeueEntry);
      entries.add(new QueueEntry(queueState.getTransientWorkingSet().getCachedEntries().get(dequeueEntry.getEntryId())));
      pointers.add(new QueueEntryPointer(this.queueName,dequeueEntry.getEntryId(),dequeueEntry.getTries()));
    }
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    this.dequeueReturns.incrementAndGet();
    return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,pointers.toArray(new QueueEntryPointer[pointers.size()]),entries.toArray(new QueueEntry[entries.size()]));
  }
}","@Override public DequeueResult dequeue(QueueConsumer consumer,ReadPointer readPointer) throws OperationException {
  final QueueConfig config=consumer.getQueueConfig();
  if (LOG.isTraceEnabled()) {
    LOG.trace(getLogMessage(""String_Node_Str"" + this.dequeueReturns.get() + ""String_Node_Str""+ consumer+ ""String_Node_Str""+ config+ ""String_Node_Str""+ readPointer+ ""String_Node_Str""));
  }
  final DequeueStrategy dequeueStrategy=getDequeueStrategy(config.getPartitionerType().getPartitioner());
  final QueueStateImpl queueState=getQueueState(consumer,readPointer);
  if (config.isSingleEntry()) {
    final DequeuedEntrySet dequeueEntrySet=queueState.getDequeueEntrySet();
    if (!dequeueEntrySet.isEmpty()) {
      final TransientWorkingSet transientWorkingSet=queueState.getTransientWorkingSet();
      final Map<Long,byte[]> cachedEntries=queueState.getTransientWorkingSet().getCachedEntries();
      int numToReturn=config.returnsBatch() ? getBatchSize(config) : 1;
      List<QueueEntry> entries=Lists.newArrayListWithCapacity(numToReturn);
      List<QueueEntryPointer> pointers=Lists.newArrayListWithCapacity(numToReturn);
      for (      DequeueEntry returnEntry : dequeueEntrySet.getEntryList()) {
        if (entries.size() >= numToReturn) {
          break;
        }
        long returnEntryId=returnEntry.getEntryId();
        if (transientWorkingSet.hasNext() && transientWorkingSet.peekNext().getEntryId() == returnEntryId) {
          transientWorkingSet.next();
        }
        byte[] entryBytes=cachedEntries.get(returnEntryId);
        if (entryBytes == null) {
          throw new OperationException(StatusCode.INTERNAL_ERROR,getLogMessage(String.format(""String_Node_Str"",returnEntryId)));
        }
        entries.add(new QueueEntry(entryBytes));
        pointers.add(new QueueEntryPointer(this.queueName,returnEntryId,returnEntry.getTries()));
      }
      if (entries.size() > 0) {
        dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
        return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,pointers.toArray(new QueueEntryPointer[pointers.size()]),entries.toArray(new QueueEntry[entries.size()]));
      }
    }
  }
  if (!queueState.getTransientWorkingSet().hasNext()) {
    dequeueStrategy.fetchNextEntries(consumer,config,queueState,readPointer);
  }
  if (!queueState.getTransientWorkingSet().hasNext()) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(getLogMessage(""String_Node_Str"" + ""String_Node_Str"" + readPointer));
    }
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    return new DequeueResult(DequeueResult.DequeueStatus.EMPTY);
  }
  if (!config.returnsBatch()) {
    DequeueEntry dequeueEntry=queueState.getTransientWorkingSet().next();
    queueState.getDequeueEntrySet().add(dequeueEntry);
    QueueEntry entry=new QueueEntry(queueState.getTransientWorkingSet().getCachedEntries().get(dequeueEntry.getEntryId()));
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    this.dequeueReturns.incrementAndGet();
    return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,new QueueEntryPointer(this.queueName,dequeueEntry.getEntryId(),dequeueEntry.getTries()),entry);
  }
 else {
    final int batchSize=getBatchSize(config);
    List<QueueEntryPointer> pointers=Lists.newArrayListWithCapacity(batchSize);
    List<QueueEntry> entries=Lists.newArrayListWithCapacity(batchSize);
    while (queueState.getTransientWorkingSet().hasNext() && entries.size() < batchSize) {
      DequeueEntry dequeueEntry=queueState.getTransientWorkingSet().next();
      queueState.getDequeueEntrySet().add(dequeueEntry);
      entries.add(new QueueEntry(queueState.getTransientWorkingSet().getCachedEntries().get(dequeueEntry.getEntryId())));
      pointers.add(new QueueEntryPointer(this.queueName,dequeueEntry.getEntryId(),dequeueEntry.getTries()));
    }
    dequeueStrategy.saveDequeueState(consumer,config,queueState,readPointer);
    this.dequeueReturns.incrementAndGet();
    return new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,pointers.toArray(new QueueEntryPointer[pointers.size()]),entries.toArray(new QueueEntry[entries.size()]));
  }
}"
8005,"@Override public void deleteDequeueState(QueueConsumer consumer) throws OperationException {
  writeQueueStateStore.addColumnName(CLAIMED_ENTRY_LIST);
  writeQueueStateStore.addColumnValue(new byte[0]);
  super.deleteDequeueState(consumer);
}","@Override public void deleteDequeueState(QueueConsumer consumer) throws OperationException {
  writeQueueStateStore.addColumnName(CLAIMED_ENTRY_LIST);
  writeQueueStateStore.addColumnValue(Bytes.EMPTY_BYTE_ARRAY);
  super.deleteDequeueState(consumer);
}"
8006,"public void deleteGroupEvictionState(ReadPointer readPointer,long writeVersion) throws OperationException {
  if (groupEvictEntries.isEmpty()) {
    readGroupEvictInformationInternal(readPointer);
  }
  if (groupEvictEntries.isEmpty()) {
    return;
  }
  byte[][] columnKeys=new byte[groupEvictEntries.size()][];
  byte[][] values=new byte[groupEvictEntries.size()][];
  int i=0;
  for (  Map.Entry<Long,Long> entry : groupEvictEntries.entrySet()) {
    columnKeys[i]=makeColumnName(GROUP_EVICT_ENTRY,entry.getKey());
    values[i]=Bytes.toBytes(entry.getValue());
    ++i;
  }
  table.put(GLOBAL_EVICT_META_ROW,columnKeys,writeVersion,values);
}","public void deleteGroupEvictionState(ReadPointer readPointer,long writeVersion) throws OperationException {
  if (groupEvictEntries.isEmpty()) {
    readGroupEvictInformationInternal(readPointer);
  }
  if (groupEvictEntries.isEmpty()) {
    return;
  }
  byte[][] columnKeys=new byte[groupEvictEntries.size()][];
  byte[][] values=new byte[groupEvictEntries.size()][];
  int i=0;
  for (  Map.Entry<Long,Long> entry : groupEvictEntries.entrySet()) {
    columnKeys[i]=makeColumnName(GROUP_EVICT_ENTRY,entry.getKey());
    values[i]=Bytes.EMPTY_BYTE_ARRAY;
    ++i;
  }
  table.put(GLOBAL_EVICT_META_ROW,columnKeys,writeVersion,values);
}"
8007,"public ClaimedEntryList(ClaimedEntry claimedEntry,List<ClaimedEntry> otherClaimedEntries){
  this.current=claimedEntry;
  this.otherClaimedEntries=otherClaimedEntries;
}","public ClaimedEntryList(ClaimedEntry claimedEntry,List<ClaimedEntry> otherClaimedEntries){
  otherClaimedEntries.remove(ClaimedEntry.INVALID_CLAIMED_ENTRY);
  if (claimedEntry.isValid()) {
    this.current=claimedEntry;
  }
 else   if (!otherClaimedEntries.isEmpty()) {
    this.current=otherClaimedEntries.get(0);
  }
 else {
    this.current=ClaimedEntry.INVALID_CLAIMED_ENTRY;
  }
  this.otherClaimedEntries=otherClaimedEntries;
}"
8008,"public void addAll(ClaimedEntryList claimedEntryList){
  ClaimedEntry otherCurrent=claimedEntryList.getClaimedEntry();
  add(otherCurrent.getBegin(),otherCurrent.getEnd());
  otherClaimedEntries.addAll(claimedEntryList.otherClaimedEntries);
}","public void addAll(ClaimedEntryList claimedEntryList){
  ClaimedEntry otherCurrent=claimedEntryList.getClaimedEntry();
  add(otherCurrent.getBegin(),otherCurrent.getEnd());
  claimedEntryList.otherClaimedEntries.remove(ClaimedEntry.INVALID_CLAIMED_ENTRY);
  otherClaimedEntries.addAll(claimedEntryList.otherClaimedEntries);
}"
8009,"public void add(long begin,long end){
  ClaimedEntry claimedEntry=new ClaimedEntry(begin,end);
  if (!claimedEntry.isValid()) {
    return;
  }
  makeCurrentValid();
  if (!current.isValid()) {
    current=claimedEntry;
  }
 else {
    if (otherClaimedEntries == Collections.EMPTY_LIST) {
      otherClaimedEntries=Lists.newArrayList();
    }
    otherClaimedEntries.add(claimedEntry);
  }
}","public void add(long begin,long end){
  ClaimedEntry newClaimedEntry=new ClaimedEntry(begin,end);
  if (!newClaimedEntry.isValid()) {
    return;
  }
  makeCurrentValid();
  if (!current.isValid()) {
    current=newClaimedEntry;
  }
 else {
    otherClaimedEntries.add(newClaimedEntry);
  }
}"
8010,"private void testReconfig(List<Integer> consumerCounts,final int numEntries,final int queueBatchSize,final int perConsumerDequeueBatchSize,QueuePartitioner.PartitionerType partitionerType,Condition condition) throws Exception {
  TTQueue queue=createQueue();
  List<Integer> expectedEntries=Lists.newArrayList();
  for (int i=0; i < numEntries; ++i) {
    expectedEntries.add(i + 1);
    QueueEntry queueEntry=new QueueEntry(Bytes.toBytes(i + 1));
    queueEntry.addPartitioningKey(HASH_KEY,i + 1);
    assertTrue(queue.enqueue(queueEntry,getDirtyWriteVersion()).isSuccess());
  }
  expectedEntries=ImmutableList.copyOf(expectedEntries);
  assertEquals(numEntries,expectedEntries.size());
  List<Integer> actualEntries=Lists.newArrayList();
  List<Integer> sortedActualEntries=Lists.newArrayList();
  List<StatefulQueueConsumer> consumers=Collections.emptyList();
  QueueConfig config=new QueueConfig(partitionerType,true,queueBatchSize);
  long groupId=queue.getGroupID();
  int expectedOldConsumerCount=0;
  loop:   while (true) {
    for (    Integer newConsumerCount : consumerCounts) {
      consumers=Lists.newArrayListWithCapacity(newConsumerCount);
      int actualOldConsumerCount=-1;
      for (int i=0; i < newConsumerCount; ++i) {
        StatefulQueueConsumer consumer;
        if (partitionerType != QueuePartitioner.PartitionerType.HASH) {
          consumer=new StatefulQueueConsumer(i,groupId,newConsumerCount,config);
        }
 else {
          consumer=new StatefulQueueConsumer(i,groupId,newConsumerCount,""String_Node_Str"",HASH_KEY,config);
        }
        consumers.add(consumer);
        int oldConsumerCount=queue.configure(consumer);
        if (oldConsumerCount >= 0) {
          actualOldConsumerCount=oldConsumerCount;
        }
      }
      assertEquals(expectedOldConsumerCount,actualOldConsumerCount);
      int numDequeuesThisRun=0;
      for (      QueueConsumer consumer : consumers) {
        for (int i=0; i < perConsumerDequeueBatchSize; ++i) {
          DequeueResult result=queue.dequeue(consumer,getDirtyPointer());
          if (result.isEmpty()) {
            break;
          }
          ++numDequeuesThisRun;
          actualEntries.add(Bytes.toInt(result.getEntry().getData()));
          queue.ack(result.getEntryPointer(),consumer,getDirtyPointer());
          assertTrue(condition.check(result.getEntryPointer().getEntryId(),newConsumerCount,consumer.getInstanceId(),(int)result.getEntryPointer().getEntryId()));
        }
        actualEntries.add(-1);
      }
      sortedActualEntries=Lists.newArrayList(actualEntries);
      Collections.sort(sortedActualEntries);
      if (numDequeuesThisRun == 0) {
        break loop;
      }
      expectedOldConsumerCount=newConsumerCount;
    }
  }
  for (  QueueConsumer consumer : consumers) {
    DequeueResult result=queue.dequeue(consumer,getDirtyPointer());
    assertTrue(result.isEmpty());
  }
  sortedActualEntries.removeAll(Lists.newArrayList(-1));
  assertEquals(expectedEntries,sortedActualEntries);
}","private void testReconfig(List<Integer> consumerCounts,final int numEntries,final int queueBatchSize,final int perConsumerDequeueBatchSize,QueuePartitioner.PartitionerType partitionerType,Condition condition) throws Exception {
  Random random=new Random(System.currentTimeMillis());
  TTQueue queue=createQueue();
  List<Integer> expectedEntries=Lists.newArrayList();
  for (int i=0; i < numEntries; ++i) {
    expectedEntries.add(i + 1);
    QueueEntry queueEntry=new QueueEntry(Bytes.toBytes(i + 1));
    queueEntry.addPartitioningKey(HASH_KEY,i + 1);
    assertTrue(queue.enqueue(queueEntry,getDirtyWriteVersion()).isSuccess());
  }
  expectedEntries=ImmutableList.copyOf(expectedEntries);
  assertEquals(numEntries,expectedEntries.size());
  List<Integer> actualEntries=Lists.newArrayList();
  List<String> actualPrintEntries=Lists.newArrayList();
  List<Integer> sortedActualEntries=Lists.newArrayList();
  List<StatefulQueueConsumer> consumers=Collections.emptyList();
  QueueConfig config=new QueueConfig(partitionerType,true,queueBatchSize);
  long groupId=queue.getGroupID();
  int expectedOldConsumerCount=0;
  loop:   while (true) {
    for (    Integer newConsumerCount : consumerCounts) {
      consumers=Lists.newArrayListWithCapacity(newConsumerCount);
      int actualOldConsumerCount=-1;
      for (int i=0; i < newConsumerCount; ++i) {
        StatefulQueueConsumer consumer;
        if (partitionerType != QueuePartitioner.PartitionerType.HASH) {
          consumer=new StatefulQueueConsumer(i,groupId,newConsumerCount,config);
        }
 else {
          consumer=new StatefulQueueConsumer(i,groupId,newConsumerCount,""String_Node_Str"",HASH_KEY,config);
        }
        consumers.add(consumer);
        System.out.println(""String_Node_Str"");
        int oldConsumerCount=queue.configure(consumer);
        if (oldConsumerCount >= 0) {
          actualOldConsumerCount=oldConsumerCount;
        }
      }
      System.out.println(String.format(""String_Node_Str"",actualOldConsumerCount,newConsumerCount));
      assertEquals(expectedOldConsumerCount,actualOldConsumerCount);
      int numTriesThisRun=0;
      int numDequeuesThisRun=0;
      for (      QueueConsumer consumer : consumers) {
        int curBatchSize=random.nextInt(perConsumerDequeueBatchSize + 1);
        System.out.println(""String_Node_Str"" + curBatchSize);
        for (int i=0; i < curBatchSize; ++i) {
          ++numTriesThisRun;
          DequeueResult result=queue.dequeue(consumer,getDirtyPointer());
          if (result.isEmpty()) {
            break;
          }
          ++numDequeuesThisRun;
          actualEntries.add(Bytes.toInt(result.getEntry().getData()));
          actualPrintEntries.add(consumer.getInstanceId() + ""String_Node_Str"" + Bytes.toInt(result.getEntry().getData()));
          queue.ack(result.getEntryPointer(),consumer,getDirtyPointer());
          assertTrue(condition.check(result.getEntryPointer().getEntryId(),newConsumerCount,consumer.getInstanceId(),(int)result.getEntryPointer().getEntryId()));
        }
        actualEntries.add(-1);
      }
      System.out.println(actualPrintEntries);
      System.out.println(actualEntries);
      sortedActualEntries=Lists.newArrayList(actualEntries);
      Collections.sort(sortedActualEntries);
      System.out.println(sortedActualEntries);
      if (numDequeuesThisRun == 0 && numTriesThisRun >= consumers.size()) {
        sortedActualEntries.removeAll(Lists.newArrayList(-1));
        System.out.println(""String_Node_Str"" + expectedEntries);
        System.out.println(""String_Node_Str"" + sortedActualEntries);
        break loop;
      }
      expectedOldConsumerCount=newConsumerCount;
    }
  }
  for (  QueueConsumer consumer : consumers) {
    DequeueResult result=queue.dequeue(consumer,getDirtyPointer());
    assertTrue(result.isEmpty());
  }
  assertEquals(expectedEntries,sortedActualEntries);
}"
8011,"public void add(ClaimedEntryList claimedEntryList){
  otherClaimedEntries.add(claimedEntryList.getClaimedEntry());
  otherClaimedEntries.addAll(claimedEntryList.otherClaimedEntries);
}","public void add(long begin,long end){
  ClaimedEntry claimedEntry=new ClaimedEntry(begin,end);
  if (!claimedEntry.isValid()) {
    return;
  }
  makeCurrentValid();
  if (!current.isValid()) {
    current=claimedEntry;
  }
 else {
    if (otherClaimedEntries == Collections.EMPTY_LIST) {
      otherClaimedEntries=Lists.newArrayList();
    }
    otherClaimedEntries.add(claimedEntry);
  }
}"
8012,"@Override public void reconfigure(List<QueueConsumer> consumers,List<QueueStateImpl> queueStates,QueueConfig config,final long groupId,final int currentConsumerCount,final int newConsumerCount,ReadPointer readPointer) throws OperationException {
  if (newConsumerCount >= currentConsumerCount) {
    return;
  }
  if (consumers.isEmpty()) {
    if (currentConsumerCount != 0) {
      throw new OperationException(StatusCode.INTERNAL_ERROR,getLogMessage(String.format(""String_Node_Str"",currentConsumerCount)));
    }
    return;
  }
  PriorityQueue<ClaimedEntryList> priorityQueue=new PriorityQueue<ClaimedEntryList>(currentConsumerCount);
  for (  QueueStateImpl queueState : queueStates) {
    ClaimedEntryList claimedEntryList=queueState.getClaimedEntryList();
    priorityQueue.add(claimedEntryList);
  }
  for (int i=newConsumerCount; i < currentConsumerCount; ++i) {
    ClaimedEntryList claimedEntryList=queueStates.get(i).getClaimedEntryList();
    ClaimedEntryList transferEntryList=priorityQueue.poll();
    transferEntryList.add(claimedEntryList);
    priorityQueue.add(transferEntryList);
  }
  for (int i=0; i < newConsumerCount; ++i) {
    saveDequeueState(consumers.get(i),consumers.get(i).getQueueConfig(),queueStates.get(i),readPointer);
  }
  for (int i=newConsumerCount; i < currentConsumerCount; ++i) {
    deleteDequeueState(consumers.get(i));
  }
  return;
}","@Override public void reconfigure(List<QueueConsumer> consumers,List<QueueStateImpl> queueStates,QueueConfig config,final long groupId,final int currentConsumerCount,final int newConsumerCount,ReadPointer readPointer) throws OperationException {
  if (newConsumerCount >= currentConsumerCount) {
    return;
  }
  if (consumers.isEmpty()) {
    if (currentConsumerCount != 0) {
      throw new OperationException(StatusCode.INTERNAL_ERROR,getLogMessage(String.format(""String_Node_Str"",currentConsumerCount)));
    }
    return;
  }
  PriorityQueue<ClaimedEntryList> priorityQueue=new PriorityQueue<ClaimedEntryList>(currentConsumerCount);
  for (int i=0; i < newConsumerCount; ++i) {
    ClaimedEntryList claimedEntryList=queueStates.get(i).getClaimedEntryList();
    priorityQueue.add(claimedEntryList);
  }
  for (int i=newConsumerCount; i < currentConsumerCount; ++i) {
    ClaimedEntryList claimedEntryList=queueStates.get(i).getClaimedEntryList();
    ClaimedEntryList transferEntryList=priorityQueue.poll();
    transferEntryList.addAll(claimedEntryList);
    priorityQueue.add(transferEntryList);
  }
  for (int i=0; i < newConsumerCount; ++i) {
    saveDequeueState(consumers.get(i),consumers.get(i).getQueueConfig(),queueStates.get(i),readPointer);
  }
  for (int i=newConsumerCount; i < currentConsumerCount; ++i) {
    deleteDequeueState(consumers.get(i));
  }
  return;
}"
8013,"/** 
 * Returns the group read pointer for the consumer. This also initializes the group read pointer when the consumer group is starting for the first time.
 * @param consumer
 * @return group read pointer
 * @throws OperationException
 */
private long getGroupReadPointer(QueueConsumer consumer) throws OperationException {
  final byte[] rowKey=makeRowKey(GROUP_READ_POINTER,consumer.getGroupId());
  long groupReadPointer=table.incrementAtomicDirtily(rowKey,GROUP_READ_POINTER,0);
  if (groupReadPointer == 0) {
    long groupReadPointerInitialValue=getReadPointerIntialValue();
    table.compareAndSwapDirty(rowKey,GROUP_READ_POINTER,Bytes.toBytes(groupReadPointer),Bytes.toBytes(groupReadPointerInitialValue));
    return groupReadPointerInitialValue;
  }
  return groupReadPointer;
}","/** 
 * Returns the group read pointer for the consumer. This also initializes the group read pointer when the consumer group is starting for the first time.
 * @param consumer
 * @return group read pointer
 * @throws OperationException
 */
private long getGroupReadPointer(QueueConsumer consumer) throws OperationException {
  final byte[] rowKey=makeRowKey(GROUP_READ_POINTER,consumer.getGroupId());
  long groupReadPointer=table.incrementAtomicDirtily(rowKey,GROUP_READ_POINTER,0);
  if (groupReadPointer == 0) {
    long lastEvictEntry=getLastEvictEntry();
    if (lastEvictEntry != INVALID_ENTRY_ID) {
      table.compareAndSwapDirty(rowKey,GROUP_READ_POINTER,Bytes.toBytes(groupReadPointer),Bytes.toBytes(lastEvictEntry));
      return lastEvictEntry;
    }
  }
  return groupReadPointer;
}"
8014,"/** 
 * This function is used to initialize the read pointer when a consumer first runs. Initial value for the read pointer is max(lastEvictEntry, FIRST_QUEUE_ENTRY_ID - 1)
 * @return read pointer initial value
 * @throws OperationException
 */
protected long getReadPointerIntialValue() throws OperationException {
  QueueStateStore readEvictState=new QueueStateStore(table,oracle);
  readEvictState.setRowKey(GLOBAL_EVICT_META_PREFIX);
  readEvictState.addColumnName(GLOBAL_LAST_EVICT_ENTRY);
  readEvictState.read();
  OperationResult<Map<byte[],byte[]>> evictStateBytes=readEvictState.getReadResult();
  final long defaultInitialValue=FIRST_QUEUE_ENTRY_ID - 1;
  if (!evictStateBytes.isEmpty()) {
    byte[] lastEvictEntryBytes=evictStateBytes.getValue().get(GLOBAL_LAST_EVICT_ENTRY);
    if (lastEvictEntryBytes != null) {
      long lastEvictEntry=Bytes.toLong(lastEvictEntryBytes);
      if (lastEvictEntry > defaultInitialValue) {
        return lastEvictEntry;
      }
    }
  }
  return defaultInitialValue;
}","/** 
 * This function is used to initialize the read pointer when a consumer first runs. Initial value for the read pointer is max(lastEvictEntry, FIRST_QUEUE_ENTRY_ID - 1)
 * @return read pointer initial value
 * @throws OperationException
 */
protected long getReadPointerIntialValue() throws OperationException {
  final long defaultInitialValue=FIRST_QUEUE_ENTRY_ID - 1;
  long lastEvictEntry=getLastEvictEntry();
  if (lastEvictEntry != INVALID_ENTRY_ID && lastEvictEntry > defaultInitialValue) {
    return lastEvictEntry;
  }
  return defaultInitialValue;
}"
8015,"@Test public void testLotsOfAsyncDequeueing() throws Exception {
  TTQueue queue=createQueue();
  long dirtyVersion=getDirtyWriteVersion();
  long startTime=System.currentTimeMillis();
  int numEntries=getNumIterations();
  for (int i=1; i < numEntries + 1; i++) {
    queue.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  System.out.println(""String_Node_Str"");
  long enqueueStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (enqueueStop - startTime)+ ""String_Node_Str""+ (enqueueStop - startTime) / ((float)numEntries) + ""String_Node_Str"");
  StatefulQueueConsumer consumerSync=new StatefulQueueConsumer(0,0,1,new QueueConfig(PartitionerType.FIFO,true));
  for (int i=1; i < numEntries + 1; i++) {
    MemoryReadPointer rp=new MemoryReadPointer(timeOracle.getTimestamp());
    DequeueResult result=queue.dequeue(consumerSync,rp);
    assertTrue(result.isSuccess());
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumerSync,rp);
    queue.finalize(result.getEntryPointer(),consumerSync,-1,rp.getWritePointer());
    if (i % 100 == 0)     System.out.print(""String_Node_Str"");
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
  }
  long dequeueSyncStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (dequeueSyncStop - enqueueStop)+ ""String_Node_Str""+ (dequeueSyncStop - enqueueStop) / ((float)numEntries) + ""String_Node_Str"");
  QueueConfig configAsync=new QueueConfig(PartitionerType.FIFO,false);
  StatefulQueueConsumer consumerAsync=new StatefulQueueConsumer(0,2,1,configAsync);
  for (int i=1; i < numEntries + 1; i++) {
    DequeueResult result=queue.dequeue(consumerAsync,new MemoryReadPointer(timeOracle.getTimestamp()));
    assertTrue(result.isSuccess());
    assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    if (i % 100 == 0)     System.out.print(""String_Node_Str"");
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
  }
  long dequeueAsyncStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (dequeueAsyncStop - dequeueSyncStop)+ ""String_Node_Str""+ (dequeueAsyncStop - dequeueSyncStop) / ((float)numEntries) + ""String_Node_Str"");
  assertTrue(queue.dequeue(consumerSync,new MemoryReadPointer(timeOracle.getTimestamp())).isEmpty());
  assertTrue(queue.dequeue(consumerAsync,new MemoryReadPointer(timeOracle.getTimestamp())).isEmpty());
}","@Test public void testLotsOfAsyncDequeueing() throws Exception {
  TTQueue queue=createQueue();
  long dirtyVersion=getDirtyWriteVersion();
  long startTime=System.currentTimeMillis();
  int numEntries=getNumIterations();
  for (int i=1; i < numEntries + 1; i++) {
    queue.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  System.out.println(""String_Node_Str"");
  long enqueueStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (enqueueStop - startTime)+ ""String_Node_Str""+ (enqueueStop - startTime) / ((float)numEntries) + ""String_Node_Str"");
  StatefulQueueConsumer consumerSync=new StatefulQueueConsumer(0,0,1,new QueueConfig(PartitionerType.FIFO,true));
  for (int i=1; i < numEntries + 1; i++) {
    MemoryReadPointer rp=new MemoryReadPointer(timeOracle.getTimestamp());
    DequeueResult result=queue.dequeue(consumerSync,rp);
    assertTrue(result.isSuccess());
    assertEquals(i,Bytes.toInt(result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumerSync,rp);
    queue.finalize(result.getEntryPointer(),consumerSync,-1,rp.getWritePointer());
    if (i % 100 == 0)     System.out.print(""String_Node_Str"");
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
  }
  long dequeueSyncStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (dequeueSyncStop - enqueueStop)+ ""String_Node_Str""+ (dequeueSyncStop - enqueueStop) / ((float)numEntries) + ""String_Node_Str"");
  QueueConfig configAsync=new QueueConfig(PartitionerType.FIFO,false);
  StatefulQueueConsumer consumerAsync=new StatefulQueueConsumer(0,2,1,configAsync);
  for (int i=1; i < numEntries + 1; i++) {
    DequeueResult result=queue.dequeue(consumerAsync,new MemoryReadPointer(timeOracle.getTimestamp()));
    assertTrue(result.isSuccess());
    assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    if (i % 100 == 0)     System.out.print(""String_Node_Str"");
    if (i % 1000 == 0)     System.out.println(""String_Node_Str"" + i);
  }
  long dequeueAsyncStop=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + numEntries + ""String_Node_Str""+ (dequeueAsyncStop - dequeueSyncStop)+ ""String_Node_Str""+ (dequeueAsyncStop - dequeueSyncStop) / ((float)numEntries) + ""String_Node_Str"");
  assertTrue(queue.dequeue(consumerSync,new MemoryReadPointer(timeOracle.getTimestamp())).isEmpty());
  assertTrue(queue.dequeue(consumerAsync,new MemoryReadPointer(timeOracle.getTimestamp())).isEmpty());
}"
8016,"@Override public void deleteDirty(byte[][] rows) throws OperationException {
  for (int i=0; i < rows.length; ++i) {
    RowLockTable.Row r=new RowLockTable.Row(rows[i]);
    NavigableMap<Column,NavigableMap<Version,Value>> map=getAndLockRow(r);
    try {
      this.map.remove(r);
      this.locks.unlockAndRemove(r);
    }
  finally {
      this.locks.unlock(r);
    }
  }
}","@Override public void deleteDirty(byte[][] rows) throws OperationException {
  for (int i=0; i < rows.length; ++i) {
    RowLockTable.Row r=new RowLockTable.Row(rows[i]);
    NavigableMap<Column,NavigableMap<Version,Value>> map=getAndLockRow(r);
    try {
      this.map.remove(r);
    }
  finally {
      this.locks.unlockAndRemove(r);
    }
  }
}"
8017,"@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",super.toString()).add(""String_Node_Str"",queueState.toString()).toString();
}","@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",super.toString()).add(""String_Node_Str"",queueState).toString();
}"
8018,"@Override public void compareAndSwap(byte[] row,byte[] column,byte[] expectedValue,byte[] newValue,ReadPointer readPointer,long writeVersion) throws OperationException {
  byte[] expectedPrependedValue=null;
  KeyValue latestVisibleKV=null;
  try {
    Get get=new Get(row);
    get.addColumn(this.family,column);
    get.setTimeRange(0,getMaxStamp(readPointer));
    get.setMaxVersions();
    Result result=this.readTable.get(get);
    KeyValue[] rawResults=result.raw();
    if (rawResults != null && rawResults.length != 0) {
      expectedPrependedValue=rawResults[0].getValue();
      Set<Long> deleted=Sets.newHashSet();
      for (      KeyValue kv : result.raw()) {
        long version=kv.getTimestamp();
        if (!readPointer.isVisible(version) || deleted.contains(version)) {
          continue;
        }
        byte[] value=kv.getValue();
        byte typePrefix=value[0];
        if (typePrefix == DATA) {
          latestVisibleKV=kv;
          break;
        }
 else         if (typePrefix == DELETE_VERSION) {
          deleted.add(version);
        }
 else         if (typePrefix == DELETE_ALL) {
          latestVisibleKV=null;
          break;
        }
      }
    }
    if (equalValues(latestVisibleKV,expectedValue)) {
      byte[] newPrependedValue;
      if (newValue == null) {
        newPrependedValue=DELETE_ALL_VALUE;
      }
 else {
        newPrependedValue=prependWithTypePrefix(DATA,newValue);
      }
      if (this.readTable.checkAndPut(row,this.family,column,expectedPrependedValue,readPointer.getMaximum(),new Put(row).add(this.family,column,writeVersion,newPrependedValue))) {
        return;
      }
    }
    throw new OperationException(StatusCode.WRITE_CONFLICT,""String_Node_Str"");
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
  }
}","@Override public void compareAndSwap(byte[] row,byte[] column,byte[] expectedValue,byte[] newValue,ReadPointer readPointer,long writeVersion) throws OperationException {
  byte[] expectedPrependedValue=null;
  KeyValue latestVisibleKV=null;
  HTable writeTable=null;
  try {
    Get get=new Get(row);
    get.addColumn(this.family,column);
    get.setTimeRange(0,getMaxStamp(readPointer));
    get.setMaxVersions();
    Result result=this.readTable.get(get);
    KeyValue[] rawResults=result.raw();
    if (rawResults != null && rawResults.length != 0) {
      expectedPrependedValue=rawResults[0].getValue();
      Set<Long> deleted=Sets.newHashSet();
      for (      KeyValue kv : result.raw()) {
        long version=kv.getTimestamp();
        if (!readPointer.isVisible(version) || deleted.contains(version)) {
          continue;
        }
        byte[] value=kv.getValue();
        byte typePrefix=value[0];
        if (typePrefix == DATA) {
          latestVisibleKV=kv;
          break;
        }
 else         if (typePrefix == DELETE_VERSION) {
          deleted.add(version);
        }
 else         if (typePrefix == DELETE_ALL) {
          latestVisibleKV=null;
          break;
        }
      }
    }
    if (equalValues(latestVisibleKV,expectedValue)) {
      byte[] newPrependedValue;
      if (newValue == null) {
        newPrependedValue=DELETE_ALL_VALUE;
      }
 else {
        newPrependedValue=prependWithTypePrefix(DATA,newValue);
      }
      writeTable=getWriteTable();
      writeTable.put(new Put(row).add(this.family,column,writeVersion,newPrependedValue));
    }
 else {
      throw new OperationException(StatusCode.WRITE_CONFLICT,""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
  }
 finally {
    if (writeTable != null)     returnWriteTable(writeTable);
  }
}"
8019,"protected TTQueueNewOnVCTable(VersionedColumnarTable table,byte[] queueName,TransactionOracle oracle,final CConfiguration conf){
  this.table=table;
  this.queueName=queueName;
  this.oracle=oracle;
  final long default_batch_size=conf.getLong(""String_Node_Str"",100);
  this.DEFAULT_BATCH_SIZE=default_batch_size > 0 ? default_batch_size : 100;
  final long evict_interval_in_secs=conf.getLong(""String_Node_Str"",10 * 60 * 60);
  this.EVICT_INTERVAL_IN_SECS=evict_interval_in_secs > 0 ? evict_interval_in_secs : 10 * 60 * 60;
}","protected TTQueueNewOnVCTable(VersionedColumnarTable table,byte[] queueName,TransactionOracle oracle,final CConfiguration conf){
  this.table=table;
  this.queueName=queueName;
  this.oracle=oracle;
  final long defaultBatchSize=conf.getLong(""String_Node_Str"",100);
  this.DEFAULT_BATCH_SIZE=defaultBatchSize > 0 ? defaultBatchSize : 100;
  final long evictIntervalInSecs=conf.getLong(""String_Node_Str"",10 * 60 * 60);
  this.EVICT_INTERVAL_IN_SECS=evictIntervalInSecs >= 0 ? evictIntervalInSecs : 10 * 60 * 60;
}"
8020,"private long runEviction(QueueConsumer consumer,long currentGroupMinEvictEntry,ReadPointer readPointer) throws OperationException {
  OperationResult<Map<byte[],byte[]>> evictBytes=table.get(GLOBAL_EVICT_META_PREFIX,readPointer);
  if (evictBytes.isEmpty()) {
    if (LOG.isTraceEnabled()) {
      logTrace(""String_Node_Str"");
    }
    return INVALID_ENTRY_ID;
  }
  long minEntryToEvict=currentGroupMinEvictEntry;
  long lastEvictedEntry=FIRST_QUEUE_ENTRY_ID - 1;
  for (  Map.Entry<byte[],byte[]> entry : evictBytes.getValue().entrySet()) {
    if (Bytes.equals(GLOBAL_LAST_EVICT_ENTRY,entry.getKey())) {
      lastEvictedEntry=Bytes.toLong(entry.getValue());
    }
 else     if (Bytes.equals(makeColumnName(GROUP_MAX_EVICT_ENTRY,consumer.getGroupId()),entry.getKey())) {
    }
 else {
      long id=Bytes.toLong(entry.getValue());
      if (minEntryToEvict > id) {
        minEntryToEvict=id;
      }
    }
  }
  if (minEntryToEvict < FIRST_QUEUE_ENTRY_ID || minEntryToEvict <= lastEvictedEntry) {
    if (LOG.isTraceEnabled()) {
      logTrace(String.format(""String_Node_Str"",minEntryToEvict,lastEvictedEntry));
    }
    return INVALID_ENTRY_ID;
  }
  final long startEvictEntry=lastEvictedEntry + 1;
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",startEvictEntry,minEntryToEvict));
  }
  int i=0;
  byte[][] deleteKeys=new byte[(int)(minEntryToEvict - startEvictEntry) + 1][];
  for (long id=startEvictEntry; id <= minEntryToEvict; ++id) {
    deleteKeys[i++]=Bytes.toBytes(id);
  }
  this.table.deleteDirty(deleteKeys);
  return minEntryToEvict;
}","private long runEviction(QueueConsumer consumer,long currentGroupMinEvictEntry,int totalNumGroups,ReadPointer readPointer) throws OperationException {
  OperationResult<Map<byte[],byte[]>> evictBytes=table.get(GLOBAL_EVICT_META_PREFIX,readPointer);
  if (evictBytes.isEmpty() || evictBytes.getValue() == null) {
    if (LOG.isTraceEnabled()) {
      logTrace(""String_Node_Str"");
    }
    return INVALID_ENTRY_ID;
  }
  Map<byte[],byte[]> evictInfoMap=evictBytes.getValue();
  byte[] lastEvictedEntryBytes=evictInfoMap.get(GLOBAL_LAST_EVICT_ENTRY);
  final long lastEvictedEntry=lastEvictedEntryBytes == null ? FIRST_QUEUE_ENTRY_ID - 1 : Bytes.toLong(lastEvictedEntryBytes);
  long minEntryToEvict=Long.MAX_VALUE;
  for (int groupId=0; groupId < totalNumGroups; ++groupId) {
    long entry;
    if (groupId == consumer.getGroupId()) {
      entry=currentGroupMinEvictEntry;
    }
 else {
      byte[] entryBytes=evictInfoMap.get(makeColumnName(GROUP_MAX_EVICT_ENTRY,groupId));
      if (entryBytes == null) {
        if (LOG.isTraceEnabled()) {
          logTrace(String.format(""String_Node_Str"",groupId));
        }
        return INVALID_ENTRY_ID;
      }
      entry=Bytes.toLong(entryBytes);
    }
    if (minEntryToEvict > entry) {
      minEntryToEvict=entry;
    }
  }
  if (minEntryToEvict < FIRST_QUEUE_ENTRY_ID || minEntryToEvict <= lastEvictedEntry || minEntryToEvict == Long.MAX_VALUE) {
    if (LOG.isTraceEnabled()) {
      logTrace(String.format(""String_Node_Str"",minEntryToEvict,lastEvictedEntry));
    }
    return INVALID_ENTRY_ID;
  }
  final long startEvictEntry=lastEvictedEntry + 1;
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",startEvictEntry,minEntryToEvict));
  }
  int i=0;
  byte[][] deleteKeys=new byte[(int)(minEntryToEvict - startEvictEntry) + 1][];
  for (long id=startEvictEntry; id <= minEntryToEvict; ++id) {
    deleteKeys[i++]=makeRowKey(GLOBAL_DATA_PREFIX,id);
  }
  this.table.deleteDirty(deleteKeys);
  return minEntryToEvict;
}"
8021,"private long getMinGroupEvictEntry(QueueConsumer consumer,ReadPointer readPointer) throws OperationException {
  final byte[][] rowKeys=new byte[consumer.getGroupSize()][];
  for (int consumerId=0; consumerId < consumer.getGroupSize(); ++consumerId) {
    rowKeys[consumerId]=makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumerId);
  }
  OperationResult<Map<byte[],Map<byte[],byte[]>>> stateBytes=table.get(rowKeys,new byte[][]{CONSUMER_READ_POINTER},readPointer);
  if (stateBytes.isEmpty()) {
    if (LOG.isTraceEnabled()) {
      logTrace(String.format(""String_Node_Str"",consumer.getGroupId()));
    }
    return INVALID_ENTRY_ID;
  }
  long minGroupEvictEntry=FIRST_QUEUE_ENTRY_ID - 1;
  for (int consumerId=0; consumerId < consumer.getGroupSize(); ++consumerId) {
    Map<byte[],byte[]> readPointerMap=stateBytes.getValue().get(makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumerId));
    if (readPointer == null) {
      if (LOG.isTraceEnabled()) {
        logTrace(String.format(""String_Node_Str"",consumerId,consumer.getGroupId()));
        return INVALID_ENTRY_ID;
      }
    }
    byte[] evictEntryBytes=readPointerMap.get(CONSUMER_READ_POINTER);
    if (evictEntryBytes == null) {
      if (LOG.isTraceEnabled()) {
        logTrace(String.format(""String_Node_Str"",consumerId,consumer.getGroupId()));
        return INVALID_ENTRY_ID;
      }
    }
    long evictEntry=Bytes.toLong(evictEntryBytes) - 1;
    if (minGroupEvictEntry > evictEntry) {
      minGroupEvictEntry=evictEntry;
    }
  }
  return minGroupEvictEntry;
}","private long getMinGroupEvictEntry(QueueConsumer consumer,ReadPointer readPointer) throws OperationException {
  final byte[][] rowKeys=new byte[consumer.getGroupSize()][];
  for (int consumerId=0; consumerId < consumer.getGroupSize(); ++consumerId) {
    rowKeys[consumerId]=makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumerId);
  }
  OperationResult<Map<byte[],Map<byte[],byte[]>>> stateBytes=table.get(rowKeys,new byte[][]{CONSUMER_READ_POINTER,ACTIVE_ENTRY},readPointer);
  if (stateBytes.isEmpty()) {
    if (LOG.isTraceEnabled()) {
      logTrace(String.format(""String_Node_Str"",consumer.getGroupId()));
    }
    return INVALID_ENTRY_ID;
  }
  long minGroupEvictEntry=Long.MAX_VALUE;
  for (int consumerId=0; consumerId < consumer.getGroupSize(); ++consumerId) {
    Map<byte[],byte[]> readPointerMap=stateBytes.getValue().get(makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumerId));
    if (readPointerMap == null) {
      if (LOG.isTraceEnabled()) {
        logTrace(String.format(""String_Node_Str"",consumerId,consumer.getGroupId()));
      }
      return INVALID_ENTRY_ID;
    }
    final byte[] activeEntryBytes=readPointerMap.get(ACTIVE_ENTRY);
    if (activeEntryBytes == null) {
      if (LOG.isTraceEnabled()) {
        logTrace(String.format(""String_Node_Str"",consumerId,consumer.getGroupId()));
      }
      return INVALID_ENTRY_ID;
    }
    long evictEntry;
    final long activeEntry=Bytes.toLong(activeEntryBytes);
    if (activeEntry != INVALID_ENTRY_ID) {
      evictEntry=activeEntry - 1;
    }
 else {
      byte[] consumerReadPointerBytes=readPointerMap.get(CONSUMER_READ_POINTER);
      if (consumerReadPointerBytes == null) {
        if (LOG.isTraceEnabled()) {
          logTrace(String.format(""String_Node_Str"",consumerId,consumer.getGroupId()));
        }
        return INVALID_ENTRY_ID;
      }
      evictEntry=Bytes.toLong(consumerReadPointerBytes) - 1;
    }
    if (minGroupEvictEntry > evictEntry) {
      minGroupEvictEntry=evictEntry;
    }
  }
  return minGroupEvictEntry == Long.MAX_VALUE ? INVALID_ENTRY_ID : minGroupEvictEntry;
}"
8022,"@Override public long getGroupID() throws OperationException {
  return ++groupId;
}","@Override public long getGroupID() throws OperationException {
  return groupId++;
}"
8023,"@Override public void finalize(QueueEntryPointer entryPointer,QueueConsumer consumer,int totalNumGroups,long writePoint) throws OperationException {
  if (consumer.getInstanceId() != 0) {
    return;
  }
  ReadPointer readPointer=oracle.dirtyReadPointer();
  final long evictStartTimeInSecs=System.currentTimeMillis() / 1000;
  QueueStateImpl queueState=getQueueState(consumer,readPointer);
  if (queueState.getLastEvictTimeInSecs() + EVICT_INTERVAL_IN_SECS < evictStartTimeInSecs) {
    return;
  }
  List<byte[]> writeKeys=new ArrayList<byte[]>();
  List<byte[]> writeCols=new ArrayList<byte[]>();
  List<byte[]> writeValues=new ArrayList<byte[]>();
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",consumer.getGroupId()));
  }
  final long minGroupEvictEntry=getMinGroupEvictEntry(consumer,readPointer);
  if (minGroupEvictEntry == INVALID_ENTRY_ID) {
    return;
  }
  writeKeys.add(GLOBAL_EVICT_META_PREFIX);
  writeCols.add(makeColumnName(GROUP_MAX_EVICT_ENTRY,consumer.getGroupId()));
  writeValues.add(Bytes.toBytes(minGroupEvictEntry));
  writeKeys.add(makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumer.getInstanceId()));
  writeCols.add(LAST_EVICT_TIME_IN_SECS);
  writeValues.add(Bytes.toBytes(evictStartTimeInSecs));
  queueState.setLastEvictTimeInSecs(evictStartTimeInSecs);
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",minGroupEvictEntry,consumer.getGroupId()));
  }
  if (consumer.getGroupId() == 0) {
    if (LOG.isTraceEnabled()) {
      logTrace(""String_Node_Str"");
    }
    final long currentMinEvictedEntry=runEviction(consumer,minGroupEvictEntry,readPointer);
    if (currentMinEvictedEntry != INVALID_ENTRY_ID) {
      writeKeys.add(GLOBAL_EVICT_META_PREFIX);
      writeCols.add(GLOBAL_LAST_EVICT_ENTRY);
      writeValues.add(Bytes.toBytes(currentMinEvictedEntry));
    }
  }
  byte[][] keyArray=new byte[writeKeys.size()][];
  byte[][] colArray=new byte[writeCols.size()][];
  byte[][] valArray=new byte[writeValues.size()][];
  table.put(writeKeys.toArray(keyArray),writeCols.toArray(colArray),writePoint,writeValues.toArray(valArray));
}","@Override public void finalize(QueueEntryPointer entryPointer,QueueConsumer consumer,int totalNumGroups,long writePoint) throws OperationException {
  if (consumer.getInstanceId() != 0) {
    return;
  }
  ReadPointer readPointer=oracle.dirtyReadPointer();
  final long evictStartTimeInSecs=System.currentTimeMillis() / 1000;
  QueueStateImpl queueState=getQueueState(consumer,readPointer);
  if (evictStartTimeInSecs - queueState.getLastEvictTimeInSecs() < EVICT_INTERVAL_IN_SECS) {
    return;
  }
  List<byte[]> writeKeys=new ArrayList<byte[]>();
  List<byte[]> writeCols=new ArrayList<byte[]>();
  List<byte[]> writeValues=new ArrayList<byte[]>();
  writeKeys.add(makeRowKey(CONSUMER_META_PREFIX,consumer.getGroupId(),consumer.getInstanceId()));
  writeCols.add(LAST_EVICT_TIME_IN_SECS);
  writeValues.add(Bytes.toBytes(evictStartTimeInSecs));
  queueState.setLastEvictTimeInSecs(evictStartTimeInSecs);
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",consumer.getGroupId()));
  }
  final long minGroupEvictEntry=getMinGroupEvictEntry(consumer,readPointer);
  if (minGroupEvictEntry != INVALID_ENTRY_ID) {
    writeKeys.add(GLOBAL_EVICT_META_PREFIX);
    writeCols.add(makeColumnName(GROUP_MAX_EVICT_ENTRY,consumer.getGroupId()));
    writeValues.add(Bytes.toBytes(minGroupEvictEntry));
  }
  if (LOG.isTraceEnabled()) {
    logTrace(String.format(""String_Node_Str"",minGroupEvictEntry,consumer.getGroupId()));
  }
  if (consumer.getGroupId() == 0) {
    if (LOG.isTraceEnabled()) {
      logTrace(""String_Node_Str"");
    }
    final long currentMinEvictedEntry=runEviction(consumer,minGroupEvictEntry,totalNumGroups,readPointer);
    if (currentMinEvictedEntry != INVALID_ENTRY_ID) {
      writeKeys.add(GLOBAL_EVICT_META_PREFIX);
      writeCols.add(GLOBAL_LAST_EVICT_ENTRY);
      writeValues.add(Bytes.toBytes(currentMinEvictedEntry));
    }
  }
  byte[][] keyArray=new byte[writeKeys.size()][];
  byte[][] colArray=new byte[writeCols.size()][];
  byte[][] valArray=new byte[writeValues.size()][];
  table.put(writeKeys.toArray(keyArray),writeCols.toArray(colArray),writePoint,writeValues.toArray(valArray));
}"
8024,"@BeforeClass public static void startHBase() throws Exception {
  conf=new Configuration();
  conf.setInt(""String_Node_Str"",-1);
  conf.setInt(""String_Node_Str"",-1);
  zkCluster=new MiniZooKeeperCluster(conf);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  int zkPort=zkCluster.startup(getRandomTempDir(),1);
  System.err.println(""String_Node_Str"" + zkPort + ""String_Node_Str"");
  conf.set(HConstants.ZOOKEEPER_CLIENT_PORT,Integer.toString(zkPort));
  File dfsPath=getRandomTempDir();
  System.setProperty(""String_Node_Str"",dfsPath.toString());
  System.setProperty(""String_Node_Str"",dfsPath.toString());
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  dfsCluster=new MiniDFSCluster.Builder(conf).nameNodePort(0).numDataNodes(1).format(true).manageDataDfsDirs(true).manageNameDfsDirs(true).build();
  System.err.println(""String_Node_Str"");
  dfsCluster.waitClusterUp();
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  conf.set(""String_Node_Str"",dfsCluster.getFileSystem().getUri().toString());
  createHBaseRootDir(conf);
  conf.setInt(""String_Node_Str"",1);
  conf.setInt(""String_Node_Str"",1);
  Configuration c=new Configuration(conf);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  hbaseCluster=new MiniHBaseCluster(c,1,1);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
}","@BeforeClass public static void startHBase() throws Exception {
  conf=new Configuration();
  conf.setInt(""String_Node_Str"",-1);
  conf.setInt(""String_Node_Str"",-1);
  zkCluster=new MiniZooKeeperCluster(conf);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  int zkPort=zkCluster.startup(getRandomTempDir(),1);
  System.err.println(""String_Node_Str"" + zkPort + ""String_Node_Str"");
  conf.set(HConstants.ZOOKEEPER_CLIENT_PORT,Integer.toString(zkPort));
  File dfsPath=getRandomTempDir();
  System.setProperty(""String_Node_Str"",dfsPath.toString());
  System.setProperty(""String_Node_Str"",dfsPath.toString());
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  dfsCluster=new MiniDFSCluster.Builder(conf).nameNodePort(0).numDataNodes(1).format(true).manageDataDfsDirs(true).manageNameDfsDirs(true).build();
  System.err.println(""String_Node_Str"");
  dfsCluster.waitClusterUp();
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  conf.set(""String_Node_Str"",dfsCluster.getFileSystem().getUri().toString());
  createHBaseRootDir(conf);
  conf.setInt(""String_Node_Str"",1);
  conf.setInt(""String_Node_Str"",1);
  conf.setInt(""String_Node_Str"",300000);
  Configuration c=new Configuration(conf);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
  hbaseCluster=new MiniHBaseCluster(c,1,1);
  System.err.println(""String_Node_Str"");
  Thread.sleep(1000);
}"
8025,"@Override @Test @Ignore public void testSingleConsumerSingleEntryWithInvalid_Empty_ChangeSizeAndToMulti(){
}","/** 
 * Currently not working.  Will be fixed in ENG-???.
 */
@Override @Test @Ignore public void testSingleConsumerSingleEntryWithInvalid_Empty_ChangeSizeAndToMulti(){
}"
8026,"@Override protected TTQueue createQueue(CConfiguration conf) throws OperationException {
  String rand=""String_Node_Str"" + Math.abs(r.nextInt());
  return new TTQueueNewOnVCTable(handle.getTable(Bytes.toBytes(""String_Node_Str"" + rand)),Bytes.toBytes(""String_Node_Str"" + rand),TestTTQueue.oracle,conf);
}","@Override protected TTQueue createQueue(CConfiguration conf) throws OperationException {
  String rand=""String_Node_Str"" + Math.abs(r.nextInt());
  conf.setLong(""String_Node_Str"",0);
  return new TTQueueNewOnVCTable(handle.getTable(Bytes.toBytes(""String_Node_Str"" + rand)),Bytes.toBytes(""String_Node_Str"" + rand),TestTTQueue.oracle,conf);
}"
8027,"@Test public void testEvictOnAck_ThreeGroups() throws Exception {
  TTQueue queue=createQueue();
  final boolean singleEntry=true;
  long dirtyVersion=getDirtyWriteVersion();
  ReadPointer dirtyReadPointer=getDirtyPointer();
  QueueConfig config=new QueueConfig(PartitionerType.FIFO,singleEntry);
  QueueConsumer consumer1=new QueueConsumer(0,queue.getGroupID(),1,config);
  QueueConsumer consumer2=new QueueConsumer(0,queue.getGroupID(),1,config);
  QueueConsumer consumer3=new QueueConsumer(0,queue.getGroupID(),1,config);
  int numGroups=3;
  for (int i=0; i < 10; i++) {
    queue.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queue.dequeue(consumer1,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer1,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer1,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertFalse(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  for (int i=0; i < 10; i++) {
    DequeueResult result=queue.dequeue(consumer2,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer2,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer2,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  assertFalse(queue.dequeue(consumer3,dirtyReadPointer).isEmpty());
  for (int i=0; i < 9; i++) {
    DequeueResult result=queue.dequeue(consumer3,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer3,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer3,numGroups,dirtyReadPointer.getMaximum());
  }
  QueueConsumer consumer4=new QueueConsumer(0,queue.getGroupID(),1,config);
  DequeueResult result=queue.dequeue(consumer4,dirtyReadPointer);
  assertTrue(""String_Node_Str"" + Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(9),result.getEntry().getData()));
  queue.ack(result.getEntryPointer(),consumer4,dirtyReadPointer);
  queue.finalize(result.getEntryPointer(),consumer4,++numGroups,dirtyReadPointer.getMaximum());
  assertTrue(queue.dequeue(consumer4,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  result=queue.dequeue(consumer3,dirtyReadPointer);
  assertTrue(""String_Node_Str"" + Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(9),result.getEntry().getData()));
  queue.ack(result.getEntryPointer(),consumer3,dirtyReadPointer);
  queue.finalize(result.getEntryPointer(),consumer3,numGroups,dirtyReadPointer.getMaximum());
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer3,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer4,dirtyReadPointer).isEmpty());
}","@Test public void testEvictOnAck_ThreeGroups() throws Exception {
  TTQueue queue=createQueue();
  final boolean singleEntry=true;
  long dirtyVersion=getDirtyWriteVersion();
  ReadPointer dirtyReadPointer=getDirtyPointer();
  QueueConfig config=new QueueConfig(PartitionerType.FIFO,singleEntry);
  QueueConsumer consumer1=new QueueConsumer(0,2,1,config);
  QueueConsumer consumer2=new QueueConsumer(0,1,1,config);
  QueueConsumer consumer3=new QueueConsumer(0,0,1,config);
  int numGroups=3;
  for (int i=0; i < 10; i++) {
    queue.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queue.dequeue(consumer1,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer1,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer1,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertFalse(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  for (int i=0; i < 10; i++) {
    DequeueResult result=queue.dequeue(consumer2,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer2,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer2,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  assertFalse(queue.dequeue(consumer3,dirtyReadPointer).isEmpty());
  for (int i=0; i < 9; i++) {
    DequeueResult result=queue.dequeue(consumer3,dirtyReadPointer);
    assertTrue(Bytes.equals(Bytes.toBytes(i),result.getEntry().getData()));
    queue.ack(result.getEntryPointer(),consumer3,dirtyReadPointer);
    queue.finalize(result.getEntryPointer(),consumer3,numGroups,dirtyReadPointer.getMaximum());
  }
  QueueConsumer consumer4=new QueueConsumer(0,4,1,config);
  DequeueResult result=queue.dequeue(consumer4,dirtyReadPointer);
  assertFalse(result.isEmpty());
  assertTrue(""String_Node_Str"" + Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(9),result.getEntry().getData()));
  queue.ack(result.getEntryPointer(),consumer4,dirtyReadPointer);
  queue.finalize(result.getEntryPointer(),consumer4,++numGroups,dirtyReadPointer.getMaximum());
  assertTrue(queue.dequeue(consumer4,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  result=queue.dequeue(consumer3,dirtyReadPointer);
  assertTrue(""String_Node_Str"" + Bytes.toInt(result.getEntry().getData()),Bytes.equals(Bytes.toBytes(9),result.getEntry().getData()));
  queue.ack(result.getEntryPointer(),consumer3,dirtyReadPointer);
  queue.finalize(result.getEntryPointer(),consumer3,numGroups,dirtyReadPointer.getMaximum());
  assertTrue(queue.dequeue(consumer1,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer2,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer3,dirtyReadPointer).isEmpty());
  assertTrue(queue.dequeue(consumer4,dirtyReadPointer).isEmpty());
}"
8028,"@Test public void testEvictOnAck_OneGroup() throws Exception {
  long dirtyVersion=getDirtyWriteVersion();
  ReadPointer dirtyReadPointer=getDirtyPointer();
  QueueConfig config=new QueueConfig(PartitionerType.FIFO,true);
  QueueConsumer consumer=new QueueConsumer(0,0,1,config);
  QueueConsumer consumer2=new QueueConsumer(0,1,1,config);
  TTQueue queueNormal=createQueue();
  int numGroups=-1;
  for (int i=0; i < 10; i++) {
    queueNormal.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queueNormal.dequeue(consumer,dirtyReadPointer);
    Assert.assertFalse(result.isEmpty());
    queueNormal.ack(result.getEntryPointer(),consumer,dirtyReadPointer);
    queueNormal.finalize(result.getEntryPointer(),consumer,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queueNormal.dequeue(consumer,dirtyReadPointer).isEmpty());
  assertFalse(queueNormal.dequeue(consumer2,dirtyReadPointer).isEmpty());
  TTQueue queueEvict=createQueue();
  numGroups=1;
  for (int i=0; i < 10; i++) {
    queueEvict.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queueEvict.dequeue(consumer,dirtyReadPointer);
    queueEvict.ack(result.getEntryPointer(),consumer,dirtyReadPointer);
    queueEvict.finalize(result.getEntryPointer(),consumer,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queueEvict.dequeue(consumer,dirtyReadPointer).isEmpty());
  assertTrue(queueEvict.dequeue(consumer2,dirtyReadPointer).isEmpty());
}","@Test public void testEvictOnAck_OneGroup() throws Exception {
  long dirtyVersion=getDirtyWriteVersion();
  ReadPointer dirtyReadPointer=getDirtyPointer();
  QueueConfig config=new QueueConfig(PartitionerType.FIFO,true);
  QueueConsumer consumer=new QueueConsumer(0,0,1,config);
  QueueConsumer consumer2=new QueueConsumer(0,1,1,config);
  TTQueue queueNormal=createQueue();
  int numGroups=-1;
  for (int i=0; i < 10; i++) {
    queueNormal.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queueNormal.dequeue(consumer,dirtyReadPointer);
    Assert.assertFalse(result.isEmpty());
    queueNormal.ack(result.getEntryPointer(),consumer,dirtyReadPointer);
    queueNormal.finalize(result.getEntryPointer(),consumer,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queueNormal.dequeue(consumer,dirtyReadPointer).isEmpty());
  assertFalse(queueNormal.dequeue(consumer2,dirtyReadPointer).isEmpty());
  TTQueue queueEvict=createQueue();
  numGroups=1;
  for (int i=0; i < 10; i++) {
    queueEvict.enqueue(new QueueEntry(Bytes.toBytes(i)),dirtyVersion);
  }
  for (int i=0; i < 10; i++) {
    DequeueResult result=queueEvict.dequeue(consumer,dirtyReadPointer);
    queueEvict.ack(result.getEntryPointer(),consumer,dirtyReadPointer);
    queueEvict.finalize(result.getEntryPointer(),consumer,numGroups,dirtyReadPointer.getMaximum());
  }
  assertTrue(queueEvict.dequeue(consumer,dirtyReadPointer).isEmpty());
  DequeueResult result=queueEvict.dequeue(consumer2,dirtyReadPointer);
  assertTrue(result.toString(),result.isEmpty());
}"
8029,"@Inject public DefaultApplicationManager(OperationExecutor opex,StreamWriterFactory streamWriterFactory,ProcedureClientFactory procedureClientFactory,@Assisted AuthToken token,@Assisted(""String_Node_Str"") String accountId,@Assisted(""String_Node_Str"") String applicationId,@Assisted AppFabricService.Iface appFabricServer,@Assisted Location deployedJar,@Assisted ApplicationSpecification appSpec){
  this.token=token;
  this.accountId=accountId;
  this.applicationId=applicationId;
  this.appFabricServer=appFabricServer;
  this.streamWriterFactory=streamWriterFactory;
  this.procedureClientFactory=procedureClientFactory;
  try {
    OperationContext ctx=new OperationContext(accountId,applicationId);
    DataFabric dataFabric=new DataFabricImpl(opex,ctx);
    TransactionProxy proxy=new TransactionProxy();
    proxy.setTransactionAgent(new SynchronousTransactionAgent(opex,ctx));
    this.dataSetInstantiator=new DataSetInstantiator(dataFabric,proxy,new JarClassLoader(deployedJar));
    this.dataSetInstantiator.setDataSets(ImmutableList.copyOf(appSpec.getDataSets().values()));
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}","@Inject public DefaultApplicationManager(OperationExecutor opex,StreamWriterFactory streamWriterFactory,ProcedureClientFactory procedureClientFactory,@Assisted AuthToken token,@Assisted(""String_Node_Str"") String accountId,@Assisted(""String_Node_Str"") String applicationId,@Assisted AppFabricService.Iface appFabricServer,@Assisted Location deployedJar,@Assisted ApplicationSpecification appSpec){
  this.token=token;
  this.accountId=accountId;
  this.applicationId=applicationId;
  this.appFabricServer=appFabricServer;
  this.streamWriterFactory=streamWriterFactory;
  this.procedureClientFactory=procedureClientFactory;
  OperationContext ctx=new OperationContext(accountId,applicationId);
  DataFabric dataFabric=new DataFabricImpl(opex,ctx);
  TransactionProxy proxy=new TransactionProxy();
  proxy.setTransactionAgent(new SynchronousTransactionAgent(opex,ctx));
  try {
    this.dataSetInstantiator=new DataSetInstantiator(dataFabric,proxy,new DataSetClassLoader(new JarClassLoader(deployedJar)));
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
  this.dataSetInstantiator.setDataSets(ImmutableList.copyOf(appSpec.getDataSets().values()));
}"
8030,"@Test public void testApp() throws InterruptedException, IOException, TimeoutException, OperationException {
  ApplicationManager applicationManager=deployApplication(WordCountApp2.class);
  try {
    applicationManager.startFlow(""String_Node_Str"");
    StreamWriter streamWriter=applicationManager.getStreamWriter(""String_Node_Str"");
    for (int i=0; i < 100; i++) {
      streamWriter.send(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + i),""String_Node_Str"" + i);
    }
    RuntimeMetrics flowletMetrics=RuntimeStats.getFlowletMetrics(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    flowletMetrics.waitForProcessed(500,5,TimeUnit.SECONDS);
    Assert.assertEquals(0L,flowletMetrics.getException());
    ProcedureManager procedureManager=applicationManager.startProcedure(""String_Node_Str"");
    ProcedureClient procedureClient=procedureManager.getClient();
    Type resultType=new TypeToken<Map<String,Long>>(){
    }
.getType();
    Gson gson=new Gson();
    Map<String,Long> result=gson.fromJson(procedureClient.query(""String_Node_Str"",ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")),resultType);
    Assert.assertEquals(100L,result.get(""String_Node_Str"").longValue());
    KeyValueTable mydataset=applicationManager.getDataSet(""String_Node_Str"");
    Assert.assertEquals(100L,Longs.fromByteArray(mydataset.read(""String_Node_Str"".getBytes(Charsets.UTF_8))));
    RuntimeMetrics procedureMetrics=RuntimeStats.getProcedureMetrics(""String_Node_Str"",""String_Node_Str"");
    procedureMetrics.waitForProcessed(1,1,TimeUnit.SECONDS);
    Assert.assertEquals(0L,procedureMetrics.getException());
  }
  finally {
    applicationManager.stopAll();
  }
}","@Test public void testApp() throws InterruptedException, IOException, TimeoutException, OperationException {
  ApplicationManager applicationManager=deployApplication(WordCountApp2.class);
  try {
    applicationManager.startFlow(""String_Node_Str"");
    StreamWriter streamWriter=applicationManager.getStreamWriter(""String_Node_Str"");
    for (int i=0; i < 100; i++) {
      streamWriter.send(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + i),""String_Node_Str"" + i);
    }
    RuntimeMetrics flowletMetrics=RuntimeStats.getFlowletMetrics(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    flowletMetrics.waitForProcessed(500,5,TimeUnit.SECONDS);
    Assert.assertEquals(0L,flowletMetrics.getException());
    ProcedureManager procedureManager=applicationManager.startProcedure(""String_Node_Str"");
    ProcedureClient procedureClient=procedureManager.getClient();
    Type resultType=new TypeToken<Map<String,Long>>(){
    }
.getType();
    Gson gson=new Gson();
    Map<String,Long> result=gson.fromJson(procedureClient.query(""String_Node_Str"",ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")),resultType);
    Assert.assertEquals(100L,result.get(""String_Node_Str"").longValue());
    MyKeyValueTable mydataset=applicationManager.getDataSet(""String_Node_Str"");
    Assert.assertEquals(100L,Longs.fromByteArray(mydataset.read(""String_Node_Str"".getBytes(Charsets.UTF_8))));
    RuntimeMetrics procedureMetrics=RuntimeStats.getProcedureMetrics(""String_Node_Str"",""String_Node_Str"");
    procedureMetrics.waitForProcessed(1,1,TimeUnit.SECONDS);
    Assert.assertEquals(0L,procedureMetrics.getException());
  }
  finally {
    applicationManager.stopAll();
  }
}"
8031,"/** 
 * NOTE: fails with RuntimeException if program can't be found
 */
private Location getProgramLocation(Id.Program id,Type type) throws IOException {
  Location allAppsLocation=locationFactory.create(configuration.get(Constants.CFG_APP_FABRIC_OUTPUT_DIR,""String_Node_Str""));
  Location accountAppsLocation=allAppsLocation.append(id.getAccountId());
  String name=String.format(Locale.ENGLISH,""String_Node_Str"",type.toString(),id.getApplicationId());
  Location applicationProgramsLocation=accountAppsLocation.append(name);
  if (!applicationProgramsLocation.exists()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Location programLocation=applicationProgramsLocation.append(String.format(""String_Node_Str"",id.getId()));
  if (!programLocation.exists()) {
    throw new RuntimeException(type.toString() + ""String_Node_Str"");
  }
  return programLocation;
}","/** 
 * NOTE: fails with RuntimeException if program can't be found
 */
private Location getProgramLocation(Id.Program id,Type type) throws IOException {
  Location allAppsLocation=locationFactory.create(configuration.get(Constants.CFG_APP_FABRIC_OUTPUT_DIR,""String_Node_Str""));
  Location accountAppsLocation=allAppsLocation.append(id.getAccountId());
  String name=String.format(Locale.ENGLISH,""String_Node_Str"",type.toString(),id.getApplicationId());
  Location applicationProgramsLocation=accountAppsLocation.append(name);
  if (!applicationProgramsLocation.exists()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Location programLocation=applicationProgramsLocation.append(String.format(""String_Node_Str"",id.getId()));
  if (!programLocation.exists()) {
    throw new RuntimeException(String.format(""String_Node_Str"",id.getApplication(),id.getId(),type));
  }
  return programLocation;
}"
8032,"/** 
 * NOTE: fails with RuntimeException if program can't be found
 */
private Location getProgramLocation(Id.Program id,Type type) throws IOException {
  Location allAppsLocation=locationFactory.create(configuration.get(Constants.CFG_APP_FABRIC_OUTPUT_DIR,""String_Node_Str""));
  Location accountAppsLocation=allAppsLocation.append(id.getAccountId());
  String name=String.format(Locale.ENGLISH,""String_Node_Str"",type.toString(),id.getApplicationId());
  Location applicationProgramsLocation=accountAppsLocation.append(name);
  if (!applicationProgramsLocation.exists()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Location programLocation=applicationProgramsLocation.append(String.format(""String_Node_Str"",id.getId()));
  if (!programLocation.exists()) {
    throw new RuntimeException(type.toString() + ""String_Node_Str"");
  }
  return programLocation;
}","/** 
 * NOTE: fails with RuntimeException if program can't be found
 */
private Location getProgramLocation(Id.Program id,Type type) throws IOException {
  Location allAppsLocation=locationFactory.create(configuration.get(Constants.CFG_APP_FABRIC_OUTPUT_DIR,""String_Node_Str""));
  Location accountAppsLocation=allAppsLocation.append(id.getAccountId());
  String name=String.format(Locale.ENGLISH,""String_Node_Str"",type.toString(),id.getApplicationId());
  Location applicationProgramsLocation=accountAppsLocation.append(name);
  if (!applicationProgramsLocation.exists()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Location programLocation=applicationProgramsLocation.append(String.format(""String_Node_Str"",id.getId()));
  if (!programLocation.exists()) {
    throw new RuntimeException(String.format(""String_Node_Str"",id.getApplication(),id.getId(),type));
  }
  return programLocation;
}"
8033,"/** 
 * @param column operand
 * @return A byte array of a byte array where first and only entry is<code>column</code>
 */
public static byte[][] toByteArrays(final byte[] column){
  byte[][] result=new byte[1][];
  result[0]=column;
  return result;
}","/** 
 * Returns an array of byte arrays  where first and only entry is <code>column</code>
 * @param column operand
 * @return An array of byte arrays  where first and only entry is<code>column</code>
 */
public static byte[][] toByteArrays(final byte[] column){
  byte[][] result=new byte[1][];
  result[0]=column;
  return result;
}"
8034,"/** 
 * @param bytes byte array
 * @param offset offset where double is
 * @return Return double made from passed bytes.
 */
public static double toDouble(final byte[] bytes,final int offset){
  return Double.longBitsToDouble(toLong(bytes,offset,SIZEOF_LONG));
}","/** 
 * Return double made from passed bytes
 * @param bytes byte array
 * @param offset offset where double is
 * @return Return double made from passed bytes.
 */
public static double toDouble(final byte[] bytes,final int offset){
  return Double.longBitsToDouble(toLong(bytes,offset,SIZEOF_LONG));
}"
8035,"/** 
 * @param a first third
 * @param b second third
 * @param c third third
 * @return New array made from a, b and c
 */
public static byte[] add(final byte[] a,final byte[] b,final byte[] c){
  byte[] result=new byte[a.length + b.length + c.length];
  System.arraycopy(a,0,result,0,a.length);
  System.arraycopy(b,0,result,a.length,b.length);
  System.arraycopy(c,0,result,a.length + b.length,c.length);
  return result;
}","/** 
 * Concatenate three byte arrays
 * @param a first third
 * @param b second third
 * @param c third third
 * @return New array made from a, b and c
 */
public static byte[] add(final byte[] a,final byte[] b,final byte[] c){
  byte[] result=new byte[a.length + b.length + c.length];
  System.arraycopy(a,0,result,0,a.length);
  System.arraycopy(b,0,result,a.length,b.length);
  System.arraycopy(c,0,result,a.length + b.length,c.length);
  return result;
}"
8036,"/** 
 * @param bytes byte array
 * @param offset offset to write to
 * @param f float value
 * @return New offset in <code>bytes</code>
 */
public static int putFloat(byte[] bytes,int offset,float f){
  return putInt(bytes,offset,Float.floatToRawIntBits(f));
}","/** 
 * Put a float value out to the specified byte array position.
 * @param bytes byte array
 * @param offset offset to write to
 * @param f float value
 * @return New offset in <code>bytes</code>
 */
public static int putFloat(byte[] bytes,int offset,float f){
  return putInt(bytes,offset,Float.floatToRawIntBits(f));
}"
8037,"/** 
 * @param bytes byte array
 * @param offset offset to write to
 * @param d value
 * @return New offset into array <code>bytes</code>
 */
public static int putDouble(byte[] bytes,int offset,double d){
  return putLong(bytes,offset,Double.doubleToLongBits(d));
}","/** 
 * Put a double value out to the specified byte array position.
 * @param bytes byte array
 * @param offset offset to write to
 * @param d value
 * @return New offset into array <code>bytes</code>
 */
public static int putDouble(byte[] bytes,int offset,double d){
  return putLong(bytes,offset,Double.doubleToLongBits(d));
}"
8038,"/** 
 * @param a array
 * @param length amount of bytes to grab
 * @return First <code>length</code> bytes from <code>a</code>
 */
public static byte[] head(final byte[] a,final int length){
  if (a.length < length) {
    return null;
  }
  byte[] result=new byte[length];
  System.arraycopy(a,0,result,0,length);
  return result;
}","/** 
 * Returns first <code>length</code> bytes from byte array
 * @param a array
 * @param length amount of bytes to grab
 * @return First <code>length</code> bytes from <code>a</code>
 */
public static byte[] head(final byte[] a,final int length){
  if (a.length < length) {
    return null;
  }
  byte[] result=new byte[length];
  System.arraycopy(a,0,result,0,length);
  return result;
}"
8039,"/** 
 * @param a array
 * @param length amount of bytes to snarf
 * @return Last <code>length</code> bytes from <code>a</code>
 */
public static byte[] tail(final byte[] a,final int length){
  if (a.length < length) {
    return null;
  }
  byte[] result=new byte[length];
  System.arraycopy(a,a.length - length,result,0,length);
  return result;
}","/** 
 * Returns last <code>length</code> bytes from byte array
 * @param a array
 * @param length amount of bytes to snarf
 * @return Last <code>length</code> bytes from <code>a</code>
 */
public static byte[] tail(final byte[] a,final int length){
  if (a.length < length) {
    return null;
  }
  byte[] result=new byte[length];
  System.arraycopy(a,a.length - length,result,0,length);
  return result;
}"
8040,"/** 
 * @param b bytes to hash
 * @param length length to hash
 * @return A hash of <code>b</code> as an Integer that can be used as key inMaps.
 */
public static Integer mapKey(final byte[] b,final int length){
  return hashCode(b,length);
}","/** 
 * Returns a hash of a byte array segment as an Integer that can be used as key in Maps
 * @param b bytes to hash
 * @param length length to hash
 * @return A hash of <code>b</code> as an Integer that can be used as key inMaps.
 */
public static Integer mapKey(final byte[] b,final int length){
  return hashCode(b,length);
}"
8041,"/** 
 * @param a array
 * @param length new array size
 * @return Value in <code>a</code> plus <code>length</code> appended 0 bytes
 */
public static byte[] padTail(final byte[] a,final int length){
  byte[] padding=new byte[length];
  for (int i=0; i < length; i++) {
    padding[i]=0;
  }
  return add(a,padding);
}","/** 
 * Return a byte array with value in <code>a</code> plus <code>length</code> appended 0 bytes
 * @param a array
 * @param length new array size
 * @return Value in <code>a</code> plus <code>length</code> appended 0 bytes
 */
public static byte[] padTail(final byte[] a,final int length){
  byte[] padding=new byte[length];
  for (int i=0; i < length; i++) {
    padding[i]=0;
  }
  return add(a,padding);
}"
8042,"/** 
 * @param a array
 * @param length new array size
 * @return Value in <code>a</code> plus <code>length</code> prepended 0 bytes
 */
public static byte[] padHead(final byte[] a,final int length){
  byte[] padding=new byte[length];
  for (int i=0; i < length; i++) {
    padding[i]=0;
  }
  return add(padding,a);
}","/** 
 * Return a byte array with value in <code>a</code> plus <code>length</code> prepended 0 bytes
 * @param a array
 * @param length new array size
 * @return Value in <code>a</code> plus <code>length</code> prepended 0 bytes
 */
public static byte[] padHead(final byte[] a,final int length){
  byte[] padding=new byte[length];
  for (int i=0; i < length; i++) {
    padding[i]=0;
  }
  return add(padding,a);
}"
8043,"public static boolean equals(final byte[] left,int leftOffset,int leftLen,final byte[] right,int rightOffset,int rightLen){
  if (left == right && leftOffset == rightOffset && leftLen == rightLen) {
    return true;
  }
  if (leftLen != rightLen) {
    return false;
  }
  if (leftLen == 0) {
    return true;
  }
  if (left[leftOffset + leftLen - 1] != right[rightOffset + rightLen - 1])   return false;
  return LexicographicalComparerHolder.BEST_COMPARER.compareTo(left,leftOffset,leftLen,right,rightOffset,rightLen) == 0;
}","/** 
 * Checks segments of two byte arrays for equality
 * @param left left operand
 * @param leftOffset offset from which to start comparison
 * @param leftLen length of left segment
 * @param right right operand
 * @param rightOffset offset from which to start comparison
 * @param rightLen length of right segment
 * @return True if two segments are equal
 */
public static boolean equals(final byte[] left,int leftOffset,int leftLen,final byte[] right,int rightOffset,int rightLen){
  if (left == right && leftOffset == rightOffset && leftLen == rightLen) {
    return true;
  }
  if (leftLen != rightLen) {
    return false;
  }
  if (leftLen == 0) {
    return true;
  }
  if (left[leftOffset + leftLen - 1] != right[rightOffset + rightLen - 1])   return false;
  return LexicographicalComparerHolder.BEST_COMPARER.compareTo(left,leftOffset,leftLen,right,rightOffset,rightLen) == 0;
}"
8044,"public void increment(Increment increment) throws OperationException {
  Long indexIncrement=null;
  for (int i=0; i < increment.getColumns().length; ++i) {
    if (Arrays.equals(this.column,increment.getColumns()[i])) {
      indexIncrement=increment.getValues()[i];
      break;
    }
  }
  if (indexIncrement == null) {
    this.table.write(increment);
    return;
  }
  Long newIndexValue=this.table.incrementAndGet(increment).get(this.column);
  if (newIndexValue == null) {
    return;
  }
  byte[] oldSecondaryKey=Bytes.toBytes(newIndexValue - indexIncrement);
  this.table.write(new Delete(oldSecondaryKey,increment.getRow()));
  byte[] newSecondaryKey=Bytes.toBytes(newIndexValue);
  this.table.write(new Write(newSecondaryKey,increment.getRow(),EXISTS));
}","/** 
 * Perform an increment operation by primary key.
 * @param increment The increment operation, as if it were on a non-indexed table.Note that if the increment is on the secondary key column, then the index must be updated; otherwise this is a pass-through to the underlying table.
 * @throws OperationException if the operation goes wrong
 */
public void increment(Increment increment) throws OperationException {
  Long indexIncrement=null;
  for (int i=0; i < increment.getColumns().length; ++i) {
    if (Arrays.equals(this.column,increment.getColumns()[i])) {
      indexIncrement=increment.getValues()[i];
      break;
    }
  }
  if (indexIncrement == null) {
    this.table.write(increment);
    return;
  }
  Long newIndexValue=this.table.incrementAndGet(increment).get(this.column);
  if (newIndexValue == null) {
    return;
  }
  byte[] oldSecondaryKey=Bytes.toBytes(newIndexValue - indexIncrement);
  this.table.write(new Delete(oldSecondaryKey,increment.getRow()));
  byte[] newSecondaryKey=Bytes.toBytes(newIndexValue);
  this.table.write(new Write(newSecondaryKey,increment.getRow(),EXISTS));
}"
8045,"private void write(OperationContext context,MetaDataEntry expected,MetaDataEntry entry,boolean isUpdate,boolean resolve) throws OperationException {
  if (entry == null)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] rowkey=makeRowKey(entry);
  byte[] column=makeColumnKey(entry);
  byte[] bytes;
  try {
    bytes=getSerializer().serialize(entry);
  }
 catch (  MetaDataException e) {
    throw new OperationException(StatusCode.INTERNAL_ERROR,e.getMessage(),e.getCause());
  }
  OperationResult<Map<byte[],byte[]>> result;
  try {
    Read read=new Read(tableName,rowkey,column);
    result=opex.execute(context,read);
  }
 catch (  OperationException e) {
    String message=String.format(""String_Node_Str"",e.getMessage());
    Log.error(message,e);
    throw new OperationException(e.getStatus(),message,e);
  }
  byte[] bytesRead=null;
  if (!result.isEmpty())   bytesRead=result.getValue().get(column);
  if (!isUpdate && bytesRead != null) {
    if (resolve && Arrays.equals(bytes,bytesRead)) {
      return;
    }
    String message=String.format(""String_Node_Str"",entry);
    Log.debug(message);
    throw new OperationException(StatusCode.WRITE_CONFLICT,message);
  }
  if (isUpdate) {
    if (bytesRead == null) {
      String message=String.format(""String_Node_Str"",entry);
      Log.debug(message);
      throw new OperationException(StatusCode.ENTRY_NOT_FOUND,message);
    }
    if (expected != null) {
      byte[] expectedBytes;
      try {
        expectedBytes=getSerializer().serialize(expected);
      }
 catch (      MetaDataException e) {
        throw new OperationException(StatusCode.INTERNAL_ERROR,e.getMessage(),e);
      }
      if (!Arrays.equals(bytesRead,expectedBytes)) {
        if (resolve && Arrays.equals(bytesRead,bytes)) {
          return;
        }
        String message=String.format(""String_Node_Str"" + ""String_Node_Str"",entry);
        Log.trace(message);
        throw new OperationException(StatusCode.WRITE_CONFLICT,message);
      }
    }
  }
  try {
    if (isUpdate && expected == null) {
      Write write=new Write(tableName,rowkey,column,bytes);
      opex.commit(context,write);
    }
 else {
      CompareAndSwap compareAndSwap=new CompareAndSwap(tableName,rowkey,column,bytesRead,bytes);
      opex.commit(context,compareAndSwap);
    }
  }
 catch (  OperationException e) {
    if (resolve && e.getStatus() == StatusCode.WRITE_CONFLICT) {
      try {
        Read read=new Read(tableName,rowkey,column);
        result=opex.execute(context,read);
        if (!result.isEmpty() && Arrays.equals(bytes,result.getValue().get(column)))         return;
      }
 catch (      OperationException e1) {
        String message=String.format(""String_Node_Str"",e1.getMessage());
        Log.error(message,e1);
        throw new OperationException(e.getStatus(),message,e1);
      }
    }
    String message=String.format(""String_Node_Str"",e.getMessage());
    if (e.getStatus() != StatusCode.WRITE_CONFLICT)     Log.error(message,e);
    throw new OperationException(e.getStatus(),message,e);
  }
}","private void write(OperationContext context,MetaDataEntry expected,MetaDataEntry entry,boolean isUpdate,boolean resolve) throws OperationException {
  if (entry == null)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] rowkey=makeRowKey(entry);
  byte[] column=makeColumnKey(entry);
  byte[] bytes;
  try {
    bytes=getSerializer().serialize(entry);
  }
 catch (  MetaDataException e) {
    throw new OperationException(StatusCode.INTERNAL_ERROR,e.getMessage(),e.getCause());
  }
  OperationResult<Map<byte[],byte[]>> result;
  try {
    Read read=new Read(tableName,rowkey,column);
    result=opex.execute(context,read);
  }
 catch (  OperationException e) {
    String message=String.format(""String_Node_Str"",e.getMessage());
    Log.error(message,e);
    throw new OperationException(e.getStatus(),message,e);
  }
  byte[] bytesRead=null;
  if (!result.isEmpty())   bytesRead=result.getValue().get(column);
  if (!isUpdate && bytesRead != null) {
    if (resolve && Arrays.equals(bytes,bytesRead)) {
      return;
    }
    String message=String.format(""String_Node_Str"",entry);
    Log.debug(message);
    throw new OperationException(StatusCode.ENTRY_EXISTS,message);
  }
  if (isUpdate) {
    if (bytesRead == null) {
      String message=String.format(""String_Node_Str"",entry);
      Log.debug(message);
      throw new OperationException(StatusCode.ENTRY_NOT_FOUND,message);
    }
    if (expected != null) {
      byte[] expectedBytes;
      try {
        expectedBytes=getSerializer().serialize(expected);
      }
 catch (      MetaDataException e) {
        throw new OperationException(StatusCode.INTERNAL_ERROR,e.getMessage(),e);
      }
      if (!Arrays.equals(bytesRead,expectedBytes)) {
        if (resolve && Arrays.equals(bytesRead,bytes)) {
          return;
        }
        String message=String.format(""String_Node_Str"" + ""String_Node_Str"",entry);
        Log.trace(message);
        throw new OperationException(StatusCode.WRITE_CONFLICT,message);
      }
    }
  }
  try {
    if (isUpdate && expected == null) {
      Write write=new Write(tableName,rowkey,column,bytes);
      opex.commit(context,write);
    }
 else {
      CompareAndSwap compareAndSwap=new CompareAndSwap(tableName,rowkey,column,bytesRead,bytes);
      opex.commit(context,compareAndSwap);
    }
  }
 catch (  OperationException e) {
    if (resolve && e.getStatus() == StatusCode.WRITE_CONFLICT) {
      try {
        Read read=new Read(tableName,rowkey,column);
        result=opex.execute(context,read);
        if (!result.isEmpty() && Arrays.equals(bytes,result.getValue().get(column)))         return;
      }
 catch (      OperationException e1) {
        String message=String.format(""String_Node_Str"",e1.getMessage());
        Log.error(message,e1);
        throw new OperationException(e.getStatus(),message,e1);
      }
    }
    String message=String.format(""String_Node_Str"",e.getMessage());
    if (e.getStatus() != StatusCode.WRITE_CONFLICT)     Log.error(message,e);
    throw new OperationException(e.getStatus(),message,e);
  }
}"
8046,"private Object readRecord(Decoder decoder,Schema sourceSchema,Schema targetSchema,TypeToken<?> targetTypeToken) throws IOException {
  try {
    Object record=create(targetTypeToken);
    for (    Schema.Field sourceField : sourceSchema.getFields()) {
      Schema.Field targetField=targetSchema.getField(sourceField.getName());
      if (targetField == null) {
        continue;
      }
      Field field=null;
      for (      TypeToken<?> type : targetTypeToken.getTypes().classes()) {
        try {
          field=type.getRawType().getDeclaredField(sourceField.getName());
        }
 catch (        NoSuchFieldException e) {
          continue;
        }
        break;
      }
      check(field != null,""String_Node_Str"",targetTypeToken,sourceField.getName());
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      TypeToken<?> fieldTypeToken=targetTypeToken.resolveType(field.getGenericType());
      field.set(record,read(decoder,sourceField.getSchema(),targetField.getSchema(),fieldTypeToken));
    }
    return record;
  }
 catch (  Exception e) {
    throw propagate(e);
  }
}","private Object readRecord(Decoder decoder,Schema sourceSchema,Schema targetSchema,TypeToken<?> targetTypeToken) throws IOException {
  try {
    Object record=create(targetTypeToken);
    for (    Schema.Field sourceField : sourceSchema.getFields()) {
      Schema.Field targetField=targetSchema.getField(sourceField.getName());
      if (targetField == null) {
        skip(decoder,sourceField.getSchema());
        continue;
      }
      Field field=null;
      for (      TypeToken<?> type : targetTypeToken.getTypes().classes()) {
        try {
          field=type.getRawType().getDeclaredField(sourceField.getName());
        }
 catch (        NoSuchFieldException e) {
          continue;
        }
        break;
      }
      check(field != null,""String_Node_Str"",targetTypeToken,sourceField.getName());
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      TypeToken<?> fieldTypeToken=targetTypeToken.resolveType(field.getGenericType());
      field.set(record,read(decoder,sourceField.getSchema(),targetField.getSchema(),fieldTypeToken));
    }
    return record;
  }
 catch (  Exception e) {
    throw propagate(e);
  }
}"
8047,"private void write(Object object,Encoder encoder,Schema objSchema,Set<Object> seenRefs) throws IOException {
  if (object != null) {
    if (seenRefs.contains(object)) {
      throw new IOException(""String_Node_Str"");
    }
    seenRefs.add(object);
  }
switch (objSchema.getType()) {
case NULL:
    encoder.writeNull();
  break;
case BOOLEAN:
encoder.writeBool((Boolean)object);
break;
case INT:
encoder.writeInt(((Number)object).intValue());
break;
case LONG:
encoder.writeLong(((Number)object).longValue());
break;
case FLOAT:
encoder.writeFloat((Float)object);
break;
case DOUBLE:
encoder.writeDouble((Double)object);
break;
case STRING:
encoder.writeString(object.toString());
break;
case BYTES:
writeBytes(object,encoder);
break;
case ENUM:
writeEnum(object.toString(),encoder,objSchema);
break;
case ARRAY:
writeArray(object,encoder,objSchema.getComponentSchema(),seenRefs);
break;
case MAP:
writeMap(object,encoder,objSchema.getMapSchema(),seenRefs);
break;
case RECORD:
writeRecord(object,encoder,objSchema,seenRefs);
break;
case UNION:
if (object == null) {
encoder.writeInt(1);
}
 else {
seenRefs.remove(object);
encoder.writeInt(0);
write(object,encoder,objSchema.getUnionSchema(0),seenRefs);
}
break;
}
}","private void write(Object object,Encoder encoder,Schema objSchema,Set<Object> seenRefs) throws IOException {
  if (object != null) {
    if (objSchema.getType() == Schema.Type.RECORD && seenRefs.contains(object)) {
      throw new IOException(""String_Node_Str"");
    }
    seenRefs.add(object);
  }
switch (objSchema.getType()) {
case NULL:
    encoder.writeNull();
  break;
case BOOLEAN:
encoder.writeBool((Boolean)object);
break;
case INT:
encoder.writeInt(((Number)object).intValue());
break;
case LONG:
encoder.writeLong(((Number)object).longValue());
break;
case FLOAT:
encoder.writeFloat((Float)object);
break;
case DOUBLE:
encoder.writeDouble((Double)object);
break;
case STRING:
encoder.writeString(object.toString());
break;
case BYTES:
writeBytes(object,encoder);
break;
case ENUM:
writeEnum(object.toString(),encoder,objSchema);
break;
case ARRAY:
writeArray(object,encoder,objSchema.getComponentSchema(),seenRefs);
break;
case MAP:
writeMap(object,encoder,objSchema.getMapSchema(),seenRefs);
break;
case RECORD:
writeRecord(object,encoder,objSchema,seenRefs);
break;
case UNION:
if (object == null) {
encoder.writeInt(1);
}
 else {
seenRefs.remove(object);
encoder.writeInt(0);
write(object,encoder,objSchema.getUnionSchema(0),seenRefs);
}
break;
}
}"
8048,"/** 
 * generic method to discover a thrift service and start up the thrift transport and protocol layer
 */
private TProtocol getThriftProtocol(String serviceName) throws ServerException {
  ImmutablePair<String,Integer> addr=this.accessor.getServiceDiscovery().getServiceAddress(serviceName);
  if (addr == null) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceName);
    LOG.error(message);
    throw new ServerException(message);
  }
  TTransport transport=new TFramedTransport(new TSocket(addr.getFirst(),addr.getSecond()));
  try {
    transport.open();
  }
 catch (  TTransportException e) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceName,addr.getFirst(),addr.getSecond(),e.getMessage());
    LOG.error(message);
    throw new ServerException(message,e);
  }
  return new TBinaryProtocol(transport);
}","/** 
 * generic method to discover a thrift service and start up the thrift transport and protocol layer
 */
private TProtocol getThriftProtocol(String serviceName) throws ServerException {
  ImmutablePair<String,Integer> addr;
  if (Constants.flowServiceName.equals(serviceName)) {
    List<Discoverable> endpoints=Lists.newArrayList(accessor.getDiscoveryServiceClient().discover(""String_Node_Str""));
    if (endpoints.isEmpty()) {
      throw new ServerException(""String_Node_Str"");
    }
    Collections.shuffle(endpoints);
    InetSocketAddress endpoint=endpoints.get(0).getSocketAddress();
    addr=new ImmutablePair<String,Integer>(endpoint.getHostName(),endpoint.getPort());
  }
 else {
    addr=this.accessor.getServiceDiscovery().getServiceAddress(serviceName);
  }
  if (addr == null) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceName);
    LOG.error(message);
    throw new ServerException(message);
  }
  TTransport transport=new TFramedTransport(new TSocket(addr.getFirst(),addr.getSecond()));
  try {
    transport.open();
  }
 catch (  TTransportException e) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceName,addr.getFirst(),addr.getSecond(),e.getMessage());
    LOG.error(message);
    throw new ServerException(message,e);
  }
  return new TBinaryProtocol(transport);
}"
8049,"@Override public void messageReceived(ChannelHandlerContext context,MessageEvent message) throws Exception {
  HttpRequest request=(HttpRequest)message.getMessage();
  HttpMethod method=request.getMethod();
  String uri=request.getUri();
  LOG.trace(""String_Node_Str"" + method + ""String_Node_Str""+ uri);
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.accessor.getMetricsQualifier());
  try {
    if (method != HttpMethod.GET) {
      LOG.trace(""String_Node_Str"" + method + ""String_Node_Str"");
      respondNotAllowed(message.getChannel(),allowedMethods);
      helper.finish(BadRequest);
      return;
    }
    QueryStringDecoder decoder=new QueryStringDecoder(uri);
    Map<String,List<String>> parameters=decoder.getParameters();
    String path=decoder.getPath();
    if (!accessor.getAuthenticator().authenticateRequest(request)) {
      respondError(message.getChannel(),HttpResponseStatus.FORBIDDEN);
      helper.finish(BadRequest);
      return;
    }
    String accountId=accessor.getAuthenticator().getAccountId(request);
    if (""String_Node_Str"".equals(path)) {
      helper.setMethod(""String_Node_Str"");
      respondToPing(message.getChannel(),request);
      helper.finish(Success);
      return;
    }
    if (""String_Node_Str"".equals(path)) {
      helper.setMethod(""String_Node_Str"");
      StringBuilder resp=new StringBuilder();
      boolean first=true;
      Map<String,Integer> statusmetrics=new HashMap<String,Integer>();
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      AppFabricService.Client flowClient=this.getFlowClient();
      List<ActiveFlow> activeFlows=flowClient.getFlows(accountId);
      for (      ActiveFlow activeFlow : activeFlows) {
        if (!""String_Node_Str"".equals(activeFlow.getCurrentState())) {
          int count=statusmetrics.containsKey(activeFlow.getCurrentState()) ? statusmetrics.get(activeFlow.getCurrentState()) : 0;
          statusmetrics.put(activeFlow.getCurrentState(),count + 1);
        }
        MetricsFrontendService.Client metricsClient=this.getMetricsClient();
        CounterRequest counterRequest=new CounterRequest(new FlowArgument(accountId,activeFlow.getApplicationId(),activeFlow.getFlowId()));
        List<String> counterNames=parameters.get(""String_Node_Str"");
        if (counterNames != null) {
          counterRequest.setName(counterNames);
        }
        List<Counter> counters=metricsClient.getCounters(counterRequest);
        for (        Counter counter : counters) {
          if (first)           first=false;
 else           resp.append(',');
          if (counter.isSetQualifier()) {
            resp.append(""String_Node_Str"").append(activeFlow.getApplicationId()).append('.');
            resp.append(activeFlow.getFlowId()).append('.');
            resp.append(counter.getQualifier()).append(""String_Node_Str"");
          }
          resp.append(counter.getName()).append('=').append(counter.getValue());
        }
      }
      for (      Map.Entry<String,Integer> entry : statusmetrics.entrySet()) {
        String key=entry.getKey();
        int value=entry.getValue();
        if (first)         first=false;
 else         resp.append(',');
        resp.append(""String_Node_Str"").append(key.toLowerCase()).append('=').append(value);
      }
      respondSuccess(message.getChannel(),request,resp.toString().getBytes());
      helper.finish(Success);
      return;
    }
    String appid=null, flowid=null, query=null;
    if (path.startsWith(this.pathPrefix)) {
      int pos1=path.indexOf(""String_Node_Str"",this.pathPrefix.length());
      if (pos1 > this.pathPrefix.length()) {
        int pos2=path.indexOf(""String_Node_Str"",pos1 + 1);
        if (pos2 > pos1 + 1) {
          int pos3=path.indexOf(""String_Node_Str"",pos2 + 1);
          if (pos3 < 0 && path.length() > pos2) {
            appid=path.substring(this.pathPrefix.length(),pos1);
            flowid=path.substring(pos1 + 1,pos2);
            query=path.substring(pos2 + 1);
          }
        }
      }
    }
    if (appid == null) {
      helper.finish(BadRequest);
      LOG.trace(""String_Node_Str"" + uri);
      respondError(message.getChannel(),HttpResponseStatus.NOT_FOUND);
      return;
    }
    if (!(""String_Node_Str"".equals(query) || ""String_Node_Str"".equals(query))) {
      helper.finish(BadRequest);
      LOG.trace(""String_Node_Str"" + query);
      respondError(message.getChannel(),HttpResponseStatus.NOT_FOUND);
      return;
    }
    helper.setMethod(""String_Node_Str"");
    if (""String_Node_Str"".equals(query)) {
      AppFabricService.Client flowClient=this.getFlowClient();
      FlowStatus status=flowClient.status(new AuthToken(),new FlowIdentifier(accountId,appid,flowid,-1));
      String value=status.getStatus();
      respondSuccess(message.getChannel(),request,value.getBytes());
      helper.finish(Success);
    }
 else     if (""String_Node_Str"".equals(query)) {
      MetricsFrontendService.Client metricsClient=this.getMetricsClient();
      CounterRequest counterRequest=new CounterRequest(new FlowArgument(accountId,appid,flowid));
      List<String> counterNames=parameters.get(""String_Node_Str"");
      if (counterNames != null) {
        counterRequest.setName(counterNames);
      }
      List<Counter> counters=metricsClient.getCounters(counterRequest);
      StringBuilder str=new StringBuilder();
      boolean first=true;
      for (      Counter counter : counters) {
        if (first)         first=false;
 else         str.append(',');
        if (counter.isSetQualifier()) {
          str.append(counter.getQualifier()).append(""String_Node_Str"");
        }
        str.append(counter.getName()).append('=').append(counter.getValue());
      }
      respondSuccess(message.getChannel(),request,str.toString().getBytes());
      helper.finish(Success);
    }
 else {
      helper.finish(Error);
      respondError(message.getChannel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + this.accessor.getName() + ""String_Node_Str"",e.getCause());
    helper.finish(Error);
    if (message.getChannel().isOpen()) {
      respondError(message.getChannel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
      message.getChannel().close();
    }
  }
}","@Override public void messageReceived(ChannelHandlerContext context,MessageEvent message) throws Exception {
  HttpRequest request=(HttpRequest)message.getMessage();
  HttpMethod method=request.getMethod();
  String uri=request.getUri();
  LOG.trace(""String_Node_Str"" + method + ""String_Node_Str""+ uri);
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.accessor.getMetricsQualifier());
  try {
    if (method != HttpMethod.GET) {
      LOG.trace(""String_Node_Str"" + method + ""String_Node_Str"");
      respondNotAllowed(message.getChannel(),allowedMethods);
      helper.finish(BadRequest);
      return;
    }
    QueryStringDecoder decoder=new QueryStringDecoder(uri);
    Map<String,List<String>> parameters=decoder.getParameters();
    String path=decoder.getPath();
    if (!accessor.getAuthenticator().authenticateRequest(request)) {
      respondError(message.getChannel(),HttpResponseStatus.FORBIDDEN);
      helper.finish(BadRequest);
      return;
    }
    String accountId=accessor.getAuthenticator().getAccountId(request);
    if (""String_Node_Str"".equals(path)) {
      helper.setMethod(""String_Node_Str"");
      respondToPing(message.getChannel(),request);
      helper.finish(Success);
      return;
    }
    if (""String_Node_Str"".equals(path)) {
      helper.setMethod(""String_Node_Str"");
      StringBuilder resp=new StringBuilder();
      boolean first=true;
      Map<String,Integer> statusmetrics=new HashMap<String,Integer>();
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      statusmetrics.put(""String_Node_Str"",0);
      AppFabricService.Client flowClient=this.getFlowClient();
      List<ActiveFlow> activeFlows=flowClient.getFlows(accountId);
      for (      ActiveFlow activeFlow : activeFlows) {
        if (!""String_Node_Str"".equals(activeFlow.getCurrentState())) {
          int count=statusmetrics.containsKey(activeFlow.getCurrentState()) ? statusmetrics.get(activeFlow.getCurrentState()) : 0;
          statusmetrics.put(activeFlow.getCurrentState(),count + 1);
        }
        MetricsFrontendService.Client metricsClient=this.getMetricsClient();
        CounterRequest counterRequest=new CounterRequest(new FlowArgument(accountId,activeFlow.getApplicationId(),activeFlow.getFlowId()));
        List<String> counterNames=parameters.get(""String_Node_Str"");
        if (counterNames != null) {
          counterRequest.setName(counterNames);
        }
        List<Counter> counters=metricsClient.getCounters(counterRequest);
        for (        Counter counter : counters) {
          if (first)           first=false;
 else           resp.append(',');
          if (counter.isSetQualifier()) {
            resp.append(""String_Node_Str"").append(activeFlow.getApplicationId()).append('.');
            resp.append(activeFlow.getFlowId()).append('.');
            resp.append(counter.getQualifier()).append(""String_Node_Str"");
          }
          resp.append(counter.getName()).append('=').append(counter.getValue());
        }
      }
      for (      Map.Entry<String,Integer> entry : statusmetrics.entrySet()) {
        String key=entry.getKey();
        int value=entry.getValue();
        if (first)         first=false;
 else         resp.append(',');
        resp.append(""String_Node_Str"").append(key.toLowerCase()).append('=').append(value);
      }
      respondSuccess(message.getChannel(),request,resp.toString().getBytes());
      helper.finish(Success);
      return;
    }
    String appid=null, flowid=null, query=null;
    if (path.startsWith(this.pathPrefix)) {
      int pos1=path.indexOf(""String_Node_Str"",this.pathPrefix.length());
      if (pos1 > this.pathPrefix.length()) {
        int pos2=path.indexOf(""String_Node_Str"",pos1 + 1);
        if (pos2 > pos1 + 1) {
          int pos3=path.indexOf(""String_Node_Str"",pos2 + 1);
          if (pos3 < 0 && path.length() > pos2) {
            appid=path.substring(this.pathPrefix.length(),pos1);
            flowid=path.substring(pos1 + 1,pos2);
            query=path.substring(pos2 + 1);
          }
        }
      }
    }
    if (appid == null) {
      helper.finish(BadRequest);
      LOG.trace(""String_Node_Str"" + uri);
      respondError(message.getChannel(),HttpResponseStatus.NOT_FOUND);
      return;
    }
    if (!(""String_Node_Str"".equals(query) || ""String_Node_Str"".equals(query))) {
      helper.finish(BadRequest);
      LOG.trace(""String_Node_Str"" + query);
      respondError(message.getChannel(),HttpResponseStatus.NOT_FOUND);
      return;
    }
    helper.setMethod(""String_Node_Str"");
    if (""String_Node_Str"".equals(query)) {
      AppFabricService.Client flowClient=this.getFlowClient();
      FlowStatus status=flowClient.status(new AuthToken(),new FlowIdentifier(accountId,appid,flowid,-1));
      String value=status.getStatus();
      respondSuccess(message.getChannel(),request,value.getBytes());
      helper.finish(Success);
    }
 else     if (""String_Node_Str"".equals(query)) {
      MetricsFrontendService.Client metricsClient=this.getMetricsClient();
      CounterRequest counterRequest=new CounterRequest(new FlowArgument(accountId,appid,flowid));
      List<String> counterNames=parameters.get(""String_Node_Str"");
      if (counterNames != null) {
        counterRequest.setName(counterNames);
      }
      List<Counter> counters=metricsClient.getCounters(counterRequest);
      StringBuilder str=new StringBuilder();
      boolean first=true;
      for (      Counter counter : counters) {
        if (first)         first=false;
 else         str.append(',');
        if (counter.isSetQualifier()) {
          str.append(counter.getQualifier()).append(""String_Node_Str"");
        }
        str.append(counter.getName()).append('=').append(counter.getValue());
      }
      respondSuccess(message.getChannel(),request,str.toString().getBytes());
      helper.finish(Success);
    }
 else {
      helper.finish(Error);
      respondError(message.getChannel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + this.accessor.getName() + ""String_Node_Str"",e);
    helper.finish(Error);
    if (message.getChannel().isOpen()) {
      respondError(message.getChannel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
      message.getChannel().close();
    }
  }
}"
8050,"@Override public int compareTo(Entry other){
  return Long.signum(count - other.count);
}","@Override public int compareTo(Entry other){
  if (count == other.count) {
    return word.compareTo(other.word);
  }
  return Long.signum(count - other.count);
}"
8051,"private void increaseInstances(String flowletName,final int newInstanceCount,Map<Integer,ProgramController> liveFlowlets,int liveCount) throws InterruptedException, ExecutionException {
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.command(""String_Node_Str"",newInstanceCount);
    }
  }
)).get();
  for (int instanceId=liveCount; instanceId < newInstanceCount; instanceId++) {
    flowlets.put(flowletName,instanceId,startFlowlet(program,new FlowletOptions(flowletName,instanceId,newInstanceCount,getRunId())));
  }
}","private synchronized void increaseInstances(String flowletName,final int newInstanceCount,Map<Integer,ProgramController> liveFlowlets,int liveCount) throws InterruptedException, ExecutionException {
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.suspend();
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.command(""String_Node_Str"",newInstanceCount);
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.resume();
    }
  }
)).get();
  for (int instanceId=liveCount; instanceId < newInstanceCount; instanceId++) {
    flowlets.put(flowletName,instanceId,startFlowlet(program,new FlowletOptions(flowletName,instanceId,newInstanceCount,getRunId())));
  }
}"
8052,"private void decreaseInstances(String flowletName,final int newInstanceCount,Map<Integer,ProgramController> liveFlowlets,int liveCount) throws InterruptedException, ExecutionException {
  List<ListenableFuture<?>> futures=Lists.newArrayListWithCapacity(liveCount - newInstanceCount);
  for (int instanceId=liveCount - 1; instanceId >= newInstanceCount; instanceId--) {
    futures.add(flowlets.remove(flowletName,instanceId).stop());
  }
  Futures.successfulAsList(futures).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.suspend();
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.command(""String_Node_Str"",newInstanceCount);
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.resume();
    }
  }
)).get();
}","private synchronized void decreaseInstances(String flowletName,final int newInstanceCount,Map<Integer,ProgramController> liveFlowlets,int liveCount) throws InterruptedException, ExecutionException {
  List<ListenableFuture<?>> futures=Lists.newArrayListWithCapacity(liveCount - newInstanceCount);
  for (int instanceId=liveCount - 1; instanceId >= newInstanceCount; instanceId--) {
    futures.add(flowlets.remove(flowletName,instanceId).stop());
  }
  Futures.successfulAsList(futures).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.suspend();
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.command(""String_Node_Str"",newInstanceCount);
    }
  }
)).get();
  Futures.successfulAsList(Iterables.transform(liveFlowlets.values(),new Function<ProgramController,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    ProgramController controller){
      return controller.resume();
    }
  }
)).get();
}"
8053,"private void changeInstances(String flowletName,final int newInstanceCount) throws ExecutionException, InterruptedException {
  Map<Integer,ProgramController> liveFlowlets=flowlets.row(flowletName);
  int liveCount=liveFlowlets.size();
  if (liveCount == newInstanceCount) {
    return;
  }
  if (liveCount < newInstanceCount) {
    increaseInstances(flowletName,newInstanceCount,liveFlowlets,liveCount);
    return;
  }
  decreaseInstances(flowletName,newInstanceCount,liveFlowlets,liveCount);
}","/** 
 * Change the number of instances of the running flowlet. Notice that this method needs to be synchronized as change of instances involves multiple steps that need to be completed all at once.
 * @param flowletName Name of the flowlet
 * @param newInstanceCount New instance count
 * @throws ExecutionException
 * @throws InterruptedException
 */
private synchronized void changeInstances(String flowletName,final int newInstanceCount) throws ExecutionException, InterruptedException {
  Map<Integer,ProgramController> liveFlowlets=flowlets.row(flowletName);
  int liveCount=liveFlowlets.size();
  if (liveCount == newInstanceCount) {
    return;
  }
  if (liveCount < newInstanceCount) {
    increaseInstances(flowletName,newInstanceCount,liveFlowlets,liveCount);
    return;
  }
  decreaseInstances(flowletName,newInstanceCount,liveFlowlets,liveCount);
}"
8054,"@Override protected void doCommand(String name,Object value) throws Exception {
  if (!""String_Node_Str"".equals(name) || !(value instanceof Integer)) {
    return;
  }
  int instances=(Integer)value;
  LOG.info(""String_Node_Str"" + flowletName + ""String_Node_Str""+ instances);
  driver.suspend();
  flowletContext.setInstanceCount(instances);
  driver.resume();
  LOG.info(""String_Node_Str"" + flowletName + ""String_Node_Str""+ instances);
}","@Override protected void doCommand(String name,Object value) throws Exception {
  Preconditions.checkState(getState() == State.SUSPENDED,""String_Node_Str"");
  if (!""String_Node_Str"".equals(name) || !(value instanceof Integer)) {
    return;
  }
  int instances=(Integer)value;
  LOG.info(""String_Node_Str"" + flowletContext + ""String_Node_Str""+ instances);
  flowletContext.setInstanceCount(instances);
  LOG.info(""String_Node_Str"" + flowletContext + ""String_Node_Str""+ instances);
}"
8055,"private ProgramController programController(String programName,final String flowletName,final BasicFlowletContext flowletContext,final FlowletProcessDriver driver){
  return new AbstractProgramController(programName + ""String_Node_Str"" + flowletName,flowletContext.getRunId()){
    @Override protected void doSuspend() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.suspend();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doResume() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.resume();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doStop() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.stopAndWait();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doCommand(    String name,    Object value) throws Exception {
      if (!""String_Node_Str"".equals(name) || !(value instanceof Integer)) {
        return;
      }
      int instances=(Integer)value;
      LOG.info(""String_Node_Str"" + flowletName + ""String_Node_Str""+ instances);
      driver.suspend();
      flowletContext.setInstanceCount(instances);
      driver.resume();
      LOG.info(""String_Node_Str"" + flowletName + ""String_Node_Str""+ instances);
    }
  }
;
}","private ProgramController programController(String programName,final String flowletName,final BasicFlowletContext flowletContext,final FlowletProcessDriver driver){
  return new AbstractProgramController(programName + ""String_Node_Str"" + flowletName,flowletContext.getRunId()){
    @Override protected void doSuspend() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.suspend();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doResume() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.resume();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doStop() throws Exception {
      LOG.info(""String_Node_Str"" + flowletName);
      driver.stopAndWait();
      LOG.info(""String_Node_Str"" + flowletName);
    }
    @Override protected void doCommand(    String name,    Object value) throws Exception {
      Preconditions.checkState(getState() == State.SUSPENDED,""String_Node_Str"");
      if (!""String_Node_Str"".equals(name) || !(value instanceof Integer)) {
        return;
      }
      int instances=(Integer)value;
      LOG.info(""String_Node_Str"" + flowletContext + ""String_Node_Str""+ instances);
      flowletContext.setInstanceCount(instances);
      LOG.info(""String_Node_Str"" + flowletContext + ""String_Node_Str""+ instances);
    }
  }
;
}"
8056,"/** 
 * Executes the <code>Application.configure</code> within the same JVM. <p> This method could be dangerous and should be used only in singlenode. </p>
 * @return A instance of {@link ListenableFuture}.
 */
@Override public ListenableFuture<ConfigResponse> config(){
  StringWriter writer=null;
  SettableFuture result=SettableFuture.create();
  try {
    Application app=null;
    if (archive != null && application == null) {
      Object mainClass=new Archive(id,archive).getMainClass().newInstance();
      app=(Application)mainClass;
    }
 else     if (application != null && archive == null) {
      app=application;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    ApplicationSpecification specification=app.configure();
    writer=new StringWriter();
    ApplicationSpecificationAdapter.create(new ReflectionSchemaGenerator()).toJson(specification,writer);
    result.set(new DefaultConfigResponse(0,newStringStream(writer.toString())));
  }
 catch (  Exception e) {
    return Futures.immediateFailedFuture(e);
  }
catch (  Throwable throwable) {
    return Futures.immediateFailedFuture(throwable);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        LOG.debug(StackTraceUtil.toStringStackTrace(e));
        return Futures.immediateFailedFuture(e);
      }
    }
  }
  return result;
}","/** 
 * Executes the <code>Application.configure</code> within the same JVM. <p> This method could be dangerous and should be used only in singlenode. </p>
 * @return A instance of {@link ListenableFuture}.
 */
@Override public ListenableFuture<ConfigResponse> config(){
  StringWriter writer=null;
  SettableFuture result=SettableFuture.create();
  try {
    Application app=null;
    if (archive != null && application == null) {
      Object mainClass=new Archive(id,archive).getMainClass().newInstance();
      app=(Application)mainClass;
    }
 else     if (application != null && archive == null) {
      app=application;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    ApplicationSpecification specification=app.configure();
    writer=new StringWriter();
    ApplicationSpecificationAdapter.create(new ReflectionSchemaGenerator()).toJson(specification,writer);
    result.set(new DefaultConfigResponse(0,newStringStream(writer.toString())));
  }
 catch (  Exception e) {
    LOG.debug(StackTraceUtil.toStringStackTrace(e));
    return Futures.immediateFailedFuture(e);
  }
catch (  Throwable throwable) {
    LOG.debug(StackTraceUtil.toStringStackTrace(throwable));
    return Futures.immediateFailedFuture(throwable);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        LOG.debug(StackTraceUtil.toStringStackTrace(e));
        return Futures.immediateFailedFuture(e);
      }
    }
  }
  return result;
}"
8057,"private QueueConsumer createQueueConsumer(){
  int groupId=100000 + Objects.hashCode(getFlowletId(),getFlowletId());
  QueueConfig config=new QueueConfig(QueuePartitioner.PartitionerType.FIFO,!asyncMode);
  return new QueueConsumer(getInstanceId(),groupId,getInstanceCount(),getMetricName(),config);
}","private QueueConsumer createQueueConsumer(){
  int groupId=100000 + Objects.hashCode(getAccountId(),getApplicationId(),getFlowId(),getFlowletId());
  QueueConfig config=new QueueConfig(QueuePartitioner.PartitionerType.FIFO,!asyncMode);
  return new QueueConsumer(getInstanceId(),groupId,getInstanceCount(),getMetricName(),config);
}"
8058,"@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException();
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}","@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException(className);
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}"
8059,"/** 
 * Executes the <code>Application.configure</code> within the same JVM. <p> This method could be dangerous and should be used only in singlenode. </p>
 * @return A instance of {@link ListenableFuture}.
 */
@Override public ListenableFuture<ConfigResponse> config(){
  StringWriter writer=null;
  SettableFuture result=SettableFuture.create();
  try {
    Application app=null;
    if (archive != null && application == null) {
      Object mainClass=new Archive(id,archive).getMainClass().newInstance();
      app=(Application)mainClass;
    }
 else     if (application != null && archive == null) {
      app=application;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    ApplicationSpecification specification=app.configure();
    writer=new StringWriter();
    ApplicationSpecificationAdapter.create(new ReflectionSchemaGenerator()).toJson(specification,writer);
    result.set(new DefaultConfigResponse(0,newStringStream(writer.toString())));
  }
 catch (  Exception e) {
    return Futures.immediateFailedFuture(e);
  }
catch (  Throwable throwable) {
    return Futures.immediateFailedFuture(throwable);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        Futures.immediateFailedFuture(e);
      }
    }
  }
  return result;
}","/** 
 * Executes the <code>Application.configure</code> within the same JVM. <p> This method could be dangerous and should be used only in singlenode. </p>
 * @return A instance of {@link ListenableFuture}.
 */
@Override public ListenableFuture<ConfigResponse> config(){
  StringWriter writer=null;
  SettableFuture result=SettableFuture.create();
  try {
    Application app=null;
    if (archive != null && application == null) {
      Object mainClass=new Archive(id,archive).getMainClass().newInstance();
      app=(Application)mainClass;
    }
 else     if (application != null && archive == null) {
      app=application;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    ApplicationSpecification specification=app.configure();
    writer=new StringWriter();
    ApplicationSpecificationAdapter.create(new ReflectionSchemaGenerator()).toJson(specification,writer);
    result.set(new DefaultConfigResponse(0,newStringStream(writer.toString())));
  }
 catch (  Exception e) {
    return Futures.immediateFailedFuture(e);
  }
catch (  Throwable throwable) {
    return Futures.immediateFailedFuture(throwable);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        LOG.debug(StackTraceUtil.toStringStackTrace(e));
        return Futures.immediateFailedFuture(e);
      }
    }
  }
  return result;
}"
8060,"@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException();
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}","@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException(className);
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}"
8061,"@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException();
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}","@Override public synchronized Class<?> loadClass(String className,boolean resolveIt) throws ClassNotFoundException {
  Class<?> result=classes.get(className);
  if (result != null) {
    return result;
  }
  try {
    result=super.findSystemClass(className);
    return result;
  }
 catch (  ClassNotFoundException e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"",className,e.getMessage());
    }
  }
  byte[] classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException(className);
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError(""String_Node_Str"" + className);
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  return result;
}"
8062,"@Test public void testValidInvalidPromoteArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidPromoteArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assert(command == null);
}"
8063,"@Test public void testValidInvalidStopArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidStopArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}"
8064,"@Test public void testValidInvalidDeployArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str""});
  assertTrue(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidDeployArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str""});
  assertTrue(command == null);
}"
8065,"@Test public void testValidInvalidVerifyArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidVerifyArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}"
8066,"@Test(expected=RuntimeException.class) public void testValidInvalidStartArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidStartArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}"
8067,"@Test public void testValidInvalidStatusArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testValidInvalidStatusArgs() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=null;
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
  command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}"
8068,"@Test public void testUnknownCommands() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}","@Test(expected=IllegalArgumentException.class) public void testUnknownCommands() throws ParseException {
  AppFabricClient client=new AppFabricClient();
  String command=client.configure(CConfiguration.create(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertTrue(command == null);
}"
8069,"public void generate() throws InterruptedException {
  Integer randomNumber=new Integer(this.random.nextInt(10000));
  Thread.sleep(millis);
  millis+=direction;
  if (millis > 100 || millis < 1) {
    direction=direction * -1;
  }
  randomOutput.emit(randomNumber);
}","public void generate() throws InterruptedException {
  Integer randomNumber=new Integer(this.random.nextInt(10000));
  Thread.sleep(millis);
  millis*=direction;
  if (millis > 100 || millis < 1) {
    direction=direction * -1;
  }
  randomOutput.emit(randomNumber);
}"
8070,"public boolean isRetry(){
  return retry;
}","public boolean isRetry(){
  return retrySpec != null;
}"
8071,"private PostProcess.Callback processMethodCallback(final PriorityBlockingQueue<ProcessEntry> processQueue,final ProcessEntry processEntry,final InputDatum input){
  return new PostProcess.Callback(){
    @Override public void onSuccess(    Object object,    InputContext inputContext){
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        txCallback.onSuccess(object,inputContext);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
      }
    }
    @Override public void onFailure(    Object inputObject,    InputContext inputContext,    FailureReason reason,    PostProcess.InputAcknowledger inputAcknowledger){
      LOG.info(""String_Node_Str"" + reason.getMessage(),reason.getCause());
      FailurePolicy failurePolicy;
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
        failurePolicy=FailurePolicy.RETRY;
      }
      if (input.getRetry() >= PROCESS_MAX_RETRY) {
        failurePolicy=FailurePolicy.IGNORE;
      }
      if (failurePolicy == FailurePolicy.RETRY) {
        ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
        processQueue.offer(retryEntry);
      }
 else       if (failurePolicy == FailurePolicy.IGNORE) {
        try {
          flowletContext.getMetrics().count(""String_Node_Str"",1);
          inputAcknowledger.ack();
        }
 catch (        OperationException e) {
          LOG.error(""String_Node_Str"" + flowletContext,e);
        }
      }
    }
  }
;
}","private PostProcess.Callback processMethodCallback(final PriorityBlockingQueue<ProcessEntry> processQueue,final ProcessEntry processEntry,final InputDatum input){
  return new PostProcess.Callback(){
    @Override public void onSuccess(    Object object,    InputContext inputContext){
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        txCallback.onSuccess(object,inputContext);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
      }
 finally {
        enqueueEntry();
      }
    }
    @Override public void onFailure(    Object inputObject,    InputContext inputContext,    FailureReason reason,    PostProcess.InputAcknowledger inputAcknowledger){
      LOG.info(""String_Node_Str"" + reason.getMessage(),reason.getCause());
      FailurePolicy failurePolicy;
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
      }
 catch (      Throwable t) {
        LOG.error(""String_Node_Str"" + flowletContext,t);
        failurePolicy=FailurePolicy.RETRY;
      }
      if (input.getRetry() >= PROCESS_MAX_RETRY) {
        LOG.info(""String_Node_Str"" + input);
        failurePolicy=FailurePolicy.IGNORE;
      }
      if (failurePolicy == FailurePolicy.RETRY) {
        ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(processEntry.getProcessSpec(),new ProcessSpecification(new SingleItemQueueReader(input),processEntry.getProcessSpec().getProcessMethod()));
        processQueue.offer(retryEntry);
      }
 else       if (failurePolicy == FailurePolicy.IGNORE) {
        try {
          flowletContext.getMetrics().count(""String_Node_Str"",1);
          inputAcknowledger.ack();
        }
 catch (        OperationException e) {
          LOG.error(""String_Node_Str"" + flowletContext,e);
        }
 finally {
          enqueueEntry();
        }
      }
    }
    private void enqueueEntry(){
      if (!flowletContext.isAsyncMode()) {
        processQueue.offer(processEntry.resetRetry());
      }
    }
  }
;
}"
8072,"@Override public void onFailure(Object inputObject,InputContext inputContext,FailureReason reason,PostProcess.InputAcknowledger inputAcknowledger){
  LOG.info(""String_Node_Str"" + reason.getMessage(),reason.getCause());
  FailurePolicy failurePolicy;
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
    failurePolicy=FailurePolicy.RETRY;
  }
  if (input.getRetry() >= PROCESS_MAX_RETRY) {
    failurePolicy=FailurePolicy.IGNORE;
  }
  if (failurePolicy == FailurePolicy.RETRY) {
    ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
    processQueue.offer(retryEntry);
  }
 else   if (failurePolicy == FailurePolicy.IGNORE) {
    try {
      flowletContext.getMetrics().count(""String_Node_Str"",1);
      inputAcknowledger.ack();
    }
 catch (    OperationException e) {
      LOG.error(""String_Node_Str"" + flowletContext,e);
    }
  }
}","@Override public void onFailure(Object inputObject,InputContext inputContext,FailureReason reason,PostProcess.InputAcknowledger inputAcknowledger){
  LOG.info(""String_Node_Str"" + reason.getMessage(),reason.getCause());
  FailurePolicy failurePolicy;
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + flowletContext,t);
    failurePolicy=FailurePolicy.RETRY;
  }
  if (input.getRetry() >= PROCESS_MAX_RETRY) {
    LOG.info(""String_Node_Str"" + input);
    failurePolicy=FailurePolicy.IGNORE;
  }
  if (failurePolicy == FailurePolicy.RETRY) {
    ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(processEntry.getProcessSpec(),new ProcessSpecification(new SingleItemQueueReader(input),processEntry.getProcessSpec().getProcessMethod()));
    processQueue.offer(retryEntry);
  }
 else   if (failurePolicy == FailurePolicy.IGNORE) {
    try {
      flowletContext.getMetrics().count(""String_Node_Str"",1);
      inputAcknowledger.ack();
    }
 catch (    OperationException e) {
      LOG.error(""String_Node_Str"" + flowletContext,e);
    }
 finally {
      enqueueEntry();
    }
  }
}"
8073,"private ProcessEntry(ProcessSpecification processSpec,boolean retry){
  this.processSpec=processSpec;
  this.retry=retry;
}","private ProcessEntry(ProcessSpecification processSpec,ProcessSpecification retrySpec){
  this.processSpec=processSpec;
  this.retrySpec=retrySpec;
}"
8074,"@Override protected void run(){
  LoggingContextAccessor.setLoggingContext(loggingContext);
  initFlowlet();
  PriorityBlockingQueue<ProcessEntry> processQueue=new PriorityBlockingQueue<ProcessEntry>(processSpecs.size());
  for (  ProcessSpecification spec : processSpecs) {
    processQueue.offer(new ProcessEntry(spec));
  }
  List<ProcessEntry> processList=Lists.newArrayListWithExpectedSize(processSpecs.size() * 2);
  while (isRunning()) {
    CountDownLatch suspendLatch=suspension.get();
    if (suspendLatch != null) {
      try {
        while (inflight.get() != 0) {
          TimeUnit.MILLISECONDS.sleep(10);
        }
        suspendBarrier.await();
        suspendLatch.await();
      }
 catch (      Exception e) {
        continue;
      }
    }
    try {
      processQueue.peek().await();
    }
 catch (    InterruptedException e) {
      continue;
    }
    processList.clear();
    processQueue.drainTo(processList);
    for (    ProcessEntry entry : processList) {
      try {
        if (!entry.shouldProcess()) {
          continue;
        }
        ProcessMethod processMethod=entry.processSpec.getProcessMethod();
        if (processMethod.needsInput()) {
          flowletContext.getSystemMetrics().meter(FlowletProcessDriver.class,""String_Node_Str"",1);
        }
        InputDatum input=entry.processSpec.getQueueReader().dequeue();
        if (!input.needProcess()) {
          entry.backOff();
          continue;
        }
        if (processMethod.needsInput()) {
          flowletContext.getSystemMetrics().meter(FlowletProcessDriver.class,""String_Node_Str"",1);
        }
        entry.nextDeque=0;
        inflight.getAndIncrement();
        try {
          processMethod.invoke(input).commit(transactionExecutor,processMethodCallback(processQueue,entry,input));
        }
 catch (        Throwable t) {
          LOG.error(String.format(""String_Node_Str"",entry.processSpec,flowletContext),t);
        }
      }
 catch (      OperationException e) {
        LOG.error(""String_Node_Str"" + flowletContext,e);
      }
 finally {
        if (!entry.isRetry()) {
          processQueue.offer(entry);
        }
      }
    }
  }
  destroyFlowlet();
}","@Override protected void run(){
  LoggingContextAccessor.setLoggingContext(loggingContext);
  initFlowlet();
  PriorityBlockingQueue<ProcessEntry> processQueue=new PriorityBlockingQueue<ProcessEntry>(processSpecs.size());
  for (  ProcessSpecification spec : processSpecs) {
    processQueue.offer(new ProcessEntry(spec));
  }
  List<ProcessEntry> processList=Lists.newArrayListWithExpectedSize(processSpecs.size() * 2);
  while (isRunning()) {
    CountDownLatch suspendLatch=suspension.get();
    if (suspendLatch != null) {
      try {
        while (inflight.get() != 0) {
          TimeUnit.MILLISECONDS.sleep(10);
        }
        suspendBarrier.await();
        suspendLatch.await();
      }
 catch (      Exception e) {
        continue;
      }
    }
    try {
      processQueue.peek().await();
    }
 catch (    InterruptedException e) {
      continue;
    }
    processList.clear();
    processQueue.drainTo(processList);
    for (    ProcessEntry entry : processList) {
      boolean invoked=false;
      try {
        if (!entry.shouldProcess()) {
          continue;
        }
        ProcessMethod processMethod=entry.getProcessSpec().getProcessMethod();
        if (processMethod.needsInput()) {
          flowletContext.getSystemMetrics().meter(FlowletProcessDriver.class,""String_Node_Str"",1);
        }
        InputDatum input=entry.getProcessSpec().getQueueReader().dequeue();
        if (!input.needProcess()) {
          entry.backOff();
          continue;
        }
        if (processMethod.needsInput()) {
          flowletContext.getSystemMetrics().meter(FlowletProcessDriver.class,""String_Node_Str"",1);
        }
        entry.nextDeque=0;
        inflight.getAndIncrement();
        try {
          invoked=true;
          processMethod.invoke(input).commit(transactionExecutor,processMethodCallback(processQueue,entry,input));
        }
 catch (        Throwable t) {
          LOG.error(String.format(""String_Node_Str"",entry.getProcessSpec(),flowletContext),t);
        }
      }
 catch (      OperationException e) {
        LOG.error(""String_Node_Str"" + flowletContext,e);
      }
 finally {
        if (!invoked || (flowletContext.isAsyncMode() && !entry.isRetry())) {
          processQueue.offer(entry);
        }
      }
    }
  }
  destroyFlowlet();
}"
8075,"@Override public void onSuccess(Object object,InputContext inputContext){
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    txCallback.onSuccess(object,inputContext);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
  }
}","@Override public void onSuccess(Object object,InputContext inputContext){
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    txCallback.onSuccess(object,inputContext);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
  }
 finally {
    enqueueEntry();
  }
}"
8076,"@Override public String toString(){
  if (!dequeueResult.isEmpty()) {
    return String.format(""String_Node_Str"",queueName,dequeueResult.getEntryPointer().getEntryId(),retry);
  }
 else {
    return String.format(""String_Node_Str"",queueName,retry);
  }
}","@Override public String toString(){
  if (!dequeueResult.isEmpty()) {
    return String.format(""String_Node_Str"",queueName,dequeueResult.getEntryPointer().getEntryId(),retry.get());
  }
 else {
    return String.format(""String_Node_Str"",queueName,retry.get());
  }
}"
8077,"private PostProcess.Callback processMethodCallback(final PriorityBlockingQueue<ProcessEntry> processQueue,final ProcessEntry processEntry,final InputDatum input){
  return new PostProcess.Callback(){
    @Override public void onSuccess(    Object object,    InputContext inputContext){
      inflight.decrementAndGet();
      try {
        txCallback.onSuccess(object,inputContext);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
      }
    }
    @Override public void onFailure(    Object inputObject,    InputContext inputContext,    FailureReason reason,    PostProcess.InputAcknowledger inputAcknowledger){
      FailurePolicy failurePolicy;
      inflight.decrementAndGet();
      try {
        failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
        failurePolicy=FailurePolicy.RETRY;
      }
      if (input.getRetry() >= PROCESS_MAX_RETRY) {
        failurePolicy=FailurePolicy.IGNORE;
      }
      if (failurePolicy == FailurePolicy.RETRY) {
        ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
        processQueue.offer(retryEntry);
      }
 else       if (failurePolicy == FailurePolicy.IGNORE) {
        try {
          inputAcknowledger.ack();
        }
 catch (        OperationException e) {
          LOG.error(""String_Node_Str"" + flowletContext,e);
        }
      }
    }
  }
;
}","private PostProcess.Callback processMethodCallback(final PriorityBlockingQueue<ProcessEntry> processQueue,final ProcessEntry processEntry,final InputDatum input){
  return new PostProcess.Callback(){
    @Override public void onSuccess(    Object object,    InputContext inputContext){
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        txCallback.onSuccess(object,inputContext);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
      }
    }
    @Override public void onFailure(    Object inputObject,    InputContext inputContext,    FailureReason reason,    PostProcess.InputAcknowledger inputAcknowledger){
      FailurePolicy failurePolicy;
      inflight.decrementAndGet();
      try {
        flowletContext.getMetrics().count(""String_Node_Str"",1);
        failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
      }
 catch (      Throwable t) {
        LOG.info(""String_Node_Str"" + flowletContext,t);
        failurePolicy=FailurePolicy.RETRY;
      }
      if (input.getRetry() >= PROCESS_MAX_RETRY) {
        failurePolicy=FailurePolicy.IGNORE;
      }
      if (failurePolicy == FailurePolicy.RETRY) {
        ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
        processQueue.offer(retryEntry);
      }
 else       if (failurePolicy == FailurePolicy.IGNORE) {
        try {
          flowletContext.getMetrics().count(""String_Node_Str"",1);
          inputAcknowledger.ack();
        }
 catch (        OperationException e) {
          LOG.error(""String_Node_Str"" + flowletContext,e);
        }
      }
    }
  }
;
}"
8078,"@Override public void onFailure(Object inputObject,InputContext inputContext,FailureReason reason,PostProcess.InputAcknowledger inputAcknowledger){
  FailurePolicy failurePolicy;
  inflight.decrementAndGet();
  try {
    failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
    failurePolicy=FailurePolicy.RETRY;
  }
  if (input.getRetry() >= PROCESS_MAX_RETRY) {
    failurePolicy=FailurePolicy.IGNORE;
  }
  if (failurePolicy == FailurePolicy.RETRY) {
    ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
    processQueue.offer(retryEntry);
  }
 else   if (failurePolicy == FailurePolicy.IGNORE) {
    try {
      inputAcknowledger.ack();
    }
 catch (    OperationException e) {
      LOG.error(""String_Node_Str"" + flowletContext,e);
    }
  }
}","@Override public void onFailure(Object inputObject,InputContext inputContext,FailureReason reason,PostProcess.InputAcknowledger inputAcknowledger){
  FailurePolicy failurePolicy;
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    failurePolicy=txCallback.onFailure(inputObject,inputContext,reason);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
    failurePolicy=FailurePolicy.RETRY;
  }
  if (input.getRetry() >= PROCESS_MAX_RETRY) {
    failurePolicy=FailurePolicy.IGNORE;
  }
  if (failurePolicy == FailurePolicy.RETRY) {
    ProcessEntry retryEntry=processEntry.isRetry() ? processEntry : new ProcessEntry(new ProcessSpecification(new SingleItemQueueReader(input),processEntry.processSpec.getProcessMethod()),true);
    processQueue.offer(retryEntry);
  }
 else   if (failurePolicy == FailurePolicy.IGNORE) {
    try {
      flowletContext.getMetrics().count(""String_Node_Str"",1);
      inputAcknowledger.ack();
    }
 catch (    OperationException e) {
      LOG.error(""String_Node_Str"" + flowletContext,e);
    }
  }
}"
8079,"@Override public void onSuccess(Object object,InputContext inputContext){
  inflight.decrementAndGet();
  try {
    txCallback.onSuccess(object,inputContext);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
  }
}","@Override public void onSuccess(Object object,InputContext inputContext){
  inflight.decrementAndGet();
  try {
    flowletContext.getMetrics().count(""String_Node_Str"",1);
    txCallback.onSuccess(object,inputContext);
  }
 catch (  Throwable t) {
    LOG.info(""String_Node_Str"" + flowletContext,t);
  }
}"
8080,"/** 
 * Finds the right schema to be used for the connections. <p> A connection should have the following: <ul> <li>Equal overrides compatible : So if there is equal, we use that</li> <li>In case of compatible, we try to find one schema and only one. More than one is a error.</li> </ul> </p>
 * @param output Set of output {@link Schema}.
 * @param input  Set of input {@link Schema}.
 * @return An {@link ImmutablePair} with first as input schema and second as output schema.
 */
@Nullable public static ImmutablePair<Schema,Schema> findSchema(Set<Schema> output,Set<Schema> input){
  ImmutablePair<Schema,Schema> compatibleSchema=null;
  for (  Schema outputSchema : output) {
    for (    Schema inputSchema : input) {
      if (outputSchema.equals(inputSchema)) {
        return new ImmutablePair<Schema,Schema>(inputSchema,outputSchema);
      }
      if (outputSchema.isCompatible(inputSchema)) {
        if (compatibleSchema != null) {
          return null;
        }
        compatibleSchema=new ImmutablePair<Schema,Schema>(inputSchema,outputSchema);
      }
    }
  }
  return compatibleSchema;
}","/** 
 * Finds the right schema to be used for the connections. <p> A connection should have the following: <ul> <li>Equal overrides compatible : So if there is equal, we use that</li> <li>In case of compatible, we try to find one schema and only one. More than one is a error.</li> </ul> </p>
 * @param output Set of output {@link Schema}.
 * @param input  Set of input {@link Schema}.
 * @return An {@link ImmutablePair} with first as output schema and second as input schema.
 */
@Nullable public static ImmutablePair<Schema,Schema> findSchema(Set<Schema> output,Set<Schema> input){
  ImmutablePair<Schema,Schema> compatibleSchema=null;
  for (  Schema outputSchema : output) {
    for (    Schema inputSchema : input) {
      if (outputSchema.equals(inputSchema)) {
        return new ImmutablePair<Schema,Schema>(inputSchema,outputSchema);
      }
      if (outputSchema.isCompatible(inputSchema)) {
        if (compatibleSchema != null) {
          return null;
        }
        compatibleSchema=new ImmutablePair<Schema,Schema>(outputSchema,inputSchema);
      }
    }
  }
  return compatibleSchema;
}"
8081,"/** 
 * @return An instance of {@link QueueSpecification} containing the URI for the queueand the matching  {@link Schema}
 */
protected QueueSpecification createSpec(final QueueName queueName,final Schema inputSchema,final Schema outputSchema){
  return new QueueSpecification(){
    @Override public QueueName getQueueName(){
      return queueName;
    }
    @Override public Schema getInputSchema(){
      return inputSchema;
    }
    @Override public Schema getOutputSchema(){
      return outputSchema;
    }
    @Override public int hashCode(){
      return Objects.hashCode(getQueueName(),getInputSchema(),getOutputSchema());
    }
    @Override public boolean equals(    Object obj){
      if (obj == null || !(obj instanceof QueueSpecification)) {
        return false;
      }
      QueueSpecification other=(QueueSpecification)obj;
      return Objects.equal(getQueueName(),other.getQueueName()) && Objects.equal(getInputSchema(),other.getInputSchema()) && Objects.equal(getOutputSchema(),other.getOutputSchema());
    }
  }
;
}","/** 
 * @return An instance of {@link QueueSpecification} containing the URI for the queueand the matching  {@link Schema}
 */
protected QueueSpecification createSpec(final QueueName queueName,final Schema outputSchema,final Schema inputSchema){
  return new QueueSpecification(){
    @Override public QueueName getQueueName(){
      return queueName;
    }
    @Override public Schema getInputSchema(){
      return inputSchema;
    }
    @Override public Schema getOutputSchema(){
      return outputSchema;
    }
    @Override public int hashCode(){
      return Objects.hashCode(getQueueName(),getInputSchema(),getOutputSchema());
    }
    @Override public boolean equals(    Object obj){
      if (obj == null || !(obj instanceof QueueSpecification)) {
        return false;
      }
      QueueSpecification other=(QueueSpecification)obj;
      return Objects.equal(getQueueName(),other.getQueueName()) && Objects.equal(getInputSchema(),other.getInputSchema()) && Objects.equal(getOutputSchema(),other.getOutputSchema());
    }
    @Override public String toString(){
      return queueName.toString();
    }
  }
;
}"
8082,"@Override public ProgramController run(Program program,ProgramOptions options){
  try {
    String flowletName=options.getName();
    int instanceId=Integer.parseInt(options.getArguments().getOption(""String_Node_Str"",""String_Node_Str""));
    Preconditions.checkArgument(instanceId >= 0,""String_Node_Str"");
    int instanceCount=Integer.parseInt(options.getArguments().getOption(""String_Node_Str"",""String_Node_Str""));
    Preconditions.checkArgument(instanceCount > 0,""String_Node_Str"");
    String runIdOption=options.getArguments().getOption(""String_Node_Str"");
    Preconditions.checkNotNull(runIdOption,""String_Node_Str"");
    RunId runId=RunId.from(runIdOption);
    ApplicationSpecification appSpec=program.getSpecification();
    Preconditions.checkNotNull(appSpec,""String_Node_Str"");
    Type processorType=program.getProcessorType();
    Preconditions.checkNotNull(processorType,""String_Node_Str"");
    Preconditions.checkArgument(processorType == Type.FLOW,""String_Node_Str"");
    String processorName=program.getProgramName();
    Preconditions.checkNotNull(processorName,""String_Node_Str"");
    FlowSpecification flowSpec=appSpec.getFlows().get(processorName);
    FlowletDefinition flowletDef=flowSpec.getFlowlets().get(flowletName);
    Preconditions.checkNotNull(flowletDef,""String_Node_Str"",flowletName);
    ClassLoader classLoader=program.getMainClass().getClassLoader();
    Class<? extends Flowlet> flowletClass=(Class<? extends Flowlet>)Class.forName(flowletDef.getFlowletSpec().getClassName(),true,classLoader);
    Preconditions.checkArgument(Flowlet.class.isAssignableFrom(flowletClass),""String_Node_Str"",flowletClass);
    OperationContext opCtx=new OperationContext(program.getAccountId(),program.getApplicationId());
    TransactionProxy transactionProxy=new TransactionProxy();
    TransactionAgentSupplier txAgentSupplier=new SmartTransactionAgentSupplier(opex,opCtx,transactionProxy);
    DataFabric dataFabric=new DataFabricImpl(opex,opCtx);
    DataSetInstantiator dataSetInstantiator=new DataSetInstantiator(dataFabric,transactionProxy,classLoader);
    dataSetInstantiator.setDataSets(ImmutableList.copyOf(appSpec.getDataSets().values()));
    final BasicFlowletContext flowletContext=new BasicFlowletContext(program,flowletName,instanceId,runId,createDataSets(dataSetInstantiator,flowletDef),flowletDef.getFlowletSpec(),flowletClass.isAnnotationPresent(Async.class));
    flowletContext.setInstanceCount(instanceCount);
    Table<QueueSpecificationGenerator.Node,String,Set<QueueSpecification>> queueSpecs=new SimpleQueueSpecificationGenerator(Id.Account.from(program.getAccountId())).create(flowSpec);
    Flowlet flowlet=new InstantiatorFactory().get(TypeToken.of(flowletClass),false).create();
    TypeToken<? extends Flowlet> flowletType=TypeToken.of(flowletClass);
    OutputSubmitter outputSubmitter=injectFields(flowlet,flowletType,flowletContext,outputEmitterFactory(flowletName,flowletContext.getQueueProducer(),queueSpecs));
    Collection<ProcessSpecification> processSpecs=createProcessSpecification(flowletType,processMethodFactory(flowlet,createSchemaCache(program),txAgentSupplier,outputSubmitter),processSpecificationFactory(opex,opCtx,flowletContext,flowletName,queueSpecs),Lists.<ProcessSpecification>newLinkedList());
    FlowletProcessDriver driver=new FlowletProcessDriver(flowlet,flowletContext,processSpecs,createCallback(flowlet,flowletDef.getFlowletSpec()));
    LOG.info(""String_Node_Str"" + flowletName);
    driver.start();
    LOG.info(""String_Node_Str"" + flowletName);
    return programController(program.getProgramName(),flowletName,flowletContext,driver);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}","@Override public ProgramController run(Program program,ProgramOptions options){
  try {
    String flowletName=options.getName();
    int instanceId=Integer.parseInt(options.getArguments().getOption(""String_Node_Str"",""String_Node_Str""));
    Preconditions.checkArgument(instanceId >= 0,""String_Node_Str"");
    int instanceCount=Integer.parseInt(options.getArguments().getOption(""String_Node_Str"",""String_Node_Str""));
    Preconditions.checkArgument(instanceCount > 0,""String_Node_Str"");
    String runIdOption=options.getArguments().getOption(""String_Node_Str"");
    Preconditions.checkNotNull(runIdOption,""String_Node_Str"");
    RunId runId=RunId.from(runIdOption);
    ApplicationSpecification appSpec=program.getSpecification();
    Preconditions.checkNotNull(appSpec,""String_Node_Str"");
    Type processorType=program.getProcessorType();
    Preconditions.checkNotNull(processorType,""String_Node_Str"");
    Preconditions.checkArgument(processorType == Type.FLOW,""String_Node_Str"");
    String processorName=program.getProgramName();
    Preconditions.checkNotNull(processorName,""String_Node_Str"");
    FlowSpecification flowSpec=appSpec.getFlows().get(processorName);
    FlowletDefinition flowletDef=flowSpec.getFlowlets().get(flowletName);
    Preconditions.checkNotNull(flowletDef,""String_Node_Str"",flowletName);
    ClassLoader classLoader=program.getMainClass().getClassLoader();
    Class<? extends Flowlet> flowletClass=(Class<? extends Flowlet>)Class.forName(flowletDef.getFlowletSpec().getClassName(),true,classLoader);
    Preconditions.checkArgument(Flowlet.class.isAssignableFrom(flowletClass),""String_Node_Str"",flowletClass);
    OperationContext opCtx=new OperationContext(program.getAccountId(),program.getApplicationId());
    TransactionProxy transactionProxy=new TransactionProxy();
    TransactionAgentSupplier txAgentSupplier=new SmartTransactionAgentSupplier(opex,opCtx,transactionProxy);
    DataFabric dataFabric=new DataFabricImpl(opex,opCtx);
    DataSetInstantiator dataSetInstantiator=new DataSetInstantiator(dataFabric,transactionProxy,classLoader);
    dataSetInstantiator.setDataSets(ImmutableList.copyOf(appSpec.getDataSets().values()));
    final BasicFlowletContext flowletContext=new BasicFlowletContext(program,flowletName,instanceId,runId,DataSets.createDataSets(dataSetInstantiator,flowletDef.getDatasets()),flowletDef.getFlowletSpec(),flowletClass.isAnnotationPresent(Async.class));
    flowletContext.setInstanceCount(instanceCount);
    Table<QueueSpecificationGenerator.Node,String,Set<QueueSpecification>> queueSpecs=new SimpleQueueSpecificationGenerator(Id.Account.from(program.getAccountId())).create(flowSpec);
    Flowlet flowlet=new InstantiatorFactory().get(TypeToken.of(flowletClass),false).create();
    TypeToken<? extends Flowlet> flowletType=TypeToken.of(flowletClass);
    OutputSubmitter outputSubmitter=injectFields(flowlet,flowletType,flowletContext,outputEmitterFactory(flowletName,flowletContext.getQueueProducer(),queueSpecs));
    Collection<ProcessSpecification> processSpecs=createProcessSpecification(flowletType,processMethodFactory(flowlet,createSchemaCache(program),txAgentSupplier,outputSubmitter),processSpecificationFactory(opex,opCtx,flowletContext,flowletName,queueSpecs),Lists.<ProcessSpecification>newLinkedList());
    FlowletProcessDriver driver=new FlowletProcessDriver(flowlet,flowletContext,processSpecs,createCallback(flowlet,flowletDef.getFlowletSpec()));
    LOG.info(""String_Node_Str"" + flowletName);
    driver.start();
    LOG.info(""String_Node_Str"" + flowletName);
    return programController(program.getProgramName(),flowletName,flowletContext,driver);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
8083,"@Override public ProgramController run(Program program,ProgramOptions options){
  ApplicationSpecification appSpec=program.getSpecification();
  Preconditions.checkNotNull(appSpec,""String_Node_Str"");
  Type processorType=program.getProcessorType();
  Preconditions.checkNotNull(processorType,""String_Node_Str"");
  Preconditions.checkArgument(processorType == Type.PROCEDURE,""String_Node_Str"");
  ProcedureSpecification procedureSpec=appSpec.getProcedures().get(program.getProgramName());
  Preconditions.checkNotNull(procedureSpec,""String_Node_Str"",program.getProgramName());
  RunId runId=RunId.generate();
  bootstrap=createBootstrap(program);
  return null;
}","@Override public ProgramController run(Program program,ProgramOptions options){
  try {
    ApplicationSpecification appSpec=program.getSpecification();
    Preconditions.checkNotNull(appSpec,""String_Node_Str"");
    Type processorType=program.getProcessorType();
    Preconditions.checkNotNull(processorType,""String_Node_Str"");
    Preconditions.checkArgument(processorType == Type.PROCEDURE,""String_Node_Str"");
    ProcedureSpecification procedureSpec=appSpec.getProcedures().get(program.getProgramName());
    Preconditions.checkNotNull(procedureSpec,""String_Node_Str"",program.getProgramName());
    int instanceId=Integer.parseInt(options.getArguments().getOption(""String_Node_Str"",""String_Node_Str""));
    Class<? extends Procedure> procedureClass=(Class<? extends Procedure>)program.getMainClass();
    ClassLoader classLoader=procedureClass.getClassLoader();
    RunId runId=RunId.generate();
    OperationContext opCtx=new OperationContext(program.getAccountId(),program.getApplicationId());
    TransactionProxy transactionProxy=new TransactionProxy();
    DataFabric dataFabric=new DataFabricImpl(opex,opCtx);
    DataSetInstantiator dataSetInstantiator=new DataSetInstantiator(dataFabric,transactionProxy,classLoader);
    dataSetInstantiator.setReadOnly();
    dataSetInstantiator.setDataSets(ImmutableList.copyOf(appSpec.getDataSets().values()));
    BasicProcedureContext procedureContext=new BasicProcedureContext(program,instanceId,runId,DataSets.createDataSets(dataSetInstantiator,procedureSpec.getDataSets()),procedureSpec);
    bootstrap=createBootstrap(program);
    return null;
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
8084,"@BeforeClass public static void startService() throws Exception {
  Injector injector=Guice.createInjector(new DataFabricLevelDBModule());
  OperationExecutorServiceTest.startService(CConfiguration.create(),injector.getInstance(OperationExecutor.class));
}","@BeforeClass public static void startService() throws Exception {
  CConfiguration configuration=CConfiguration.create();
  configuration.unset(""String_Node_Str"");
  Injector injector=Guice.createInjector(new DataFabricLevelDBModule());
  OperationExecutorServiceTest.startService(CConfiguration.create(),injector.getInstance(OperationExecutor.class));
}"
8085,"/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC && levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}","/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC || levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}"
8086,"/** 
 * Shutdown the service.
 */
public void shutDown(){
  try {
    webCloudAppService.stop(true);
    gateway.stop(true);
    metaDataServer.stop(true);
    overloadFrontend.stop(true);
    overlordCollection.stop(true);
    metaDataServer.stop(true);
    appFabricServer.startAndWait();
  }
 catch (  ServerException e) {
    LOG.error(StackTraceUtil.toStringStackTrace(e));
  }
}","/** 
 * Shutdown the service.
 */
public void shutDown(){
  try {
    webCloudAppService.stop(true);
    gateway.stop(true);
    metaDataServer.stop(true);
    overloadFrontend.stop(true);
    overlordCollection.stop(true);
    metaDataServer.stop(true);
    appFabricServer.startAndWait();
  }
 catch (  Exception e) {
    LOG.error(StackTraceUtil.toStringStackTrace(e));
  }
}"
8087,"/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC && levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}","/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC || levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}"
8088,"/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC || levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}","/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC || levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}"
8089,"BasicFlowletContext(Program program,String flowletId,int instanceId,Map<String,DataSet> datasets,FlowletSpecification flowletSpec,boolean asyncMode){
  this.accountId=program.getAccountId();
  this.applicationId=program.getApplicationId();
  this.flowId=program.getProgramName();
  this.flowletId=flowletId;
  this.runId=RunId.generate();
  this.instanceId=instanceId;
  this.datasets=ImmutableMap.copyOf(datasets);
  this.flowletSpec=flowletSpec;
  this.instanceCount=program.getSpecification().getFlows().get(flowId).getFlowlets().get(flowletId).getInstances();
  this.queueProducer=new QueueProducer(getMetricName());
  this.queueConsumer=createQueueConsumer();
  this.asyncMode=asyncMode;
  this.flowletMetrics=new FlowletMetrics(accountId,applicationId,flowId,flowletId,runId.toString(),instanceId);
  this.systemMetrics=new CMetrics(MetricType.FlowSystem,getMetricName());
}","BasicFlowletContext(Program program,String flowletId,int instanceId,Map<String,DataSet> datasets,FlowletSpecification flowletSpec,boolean asyncMode){
  this.accountId=program.getAccountId();
  this.applicationId=program.getApplicationId();
  this.flowId=program.getProgramName();
  this.flowletId=flowletId;
  this.runId=RunId.generate();
  this.instanceId=instanceId;
  this.datasets=ImmutableMap.copyOf(datasets);
  this.flowletSpec=flowletSpec;
  this.asyncMode=asyncMode;
  this.instanceCount=program.getSpecification().getFlows().get(flowId).getFlowlets().get(flowletId).getInstances();
  this.queueProducer=new QueueProducer(getMetricName());
  this.queueConsumer=createQueueConsumer();
  this.flowletMetrics=new FlowletMetrics(accountId,applicationId,flowId,flowletId,runId.toString(),instanceId);
  this.systemMetrics=new CMetrics(MetricType.FlowSystem,getMetricName());
}"
8090,"private PostProcess getPostProcess(final TransactionAgent txAgent,final InputDatum input,final T event,final InputContext inputContext){
  return new PostProcess(){
    @Override public void commit(    Executor executor,    final Callback callback){
      executor.execute(new Runnable(){
        @Override public void run(){
          try {
            input.submitAck(txAgent);
            txAgent.finish();
            callback.onSuccess(event,inputContext);
          }
 catch (          Throwable t) {
            LOGGER.error(""String_Node_Str"",t);
            callback.onFailure(event,inputContext,new FailureReason(FailureReason.Type.IO_ERROR,t.getMessage()),new SimpleInputAcknowledger(txAgentSupplier,input));
          }
        }
      }
);
    }
  }
;
}","private PostProcess getPostProcess(final TransactionAgent txAgent,final InputDatum input,final T event,final InputContext inputContext){
  return new PostProcess(){
    @Override public void commit(    Executor executor,    final Callback callback){
      executor.execute(new Runnable(){
        @Override public void run(){
          try {
            input.submitAck(txAgent);
            txAgent.finish();
            callback.onSuccess(event,inputContext);
          }
 catch (          Throwable t) {
            LOGGER.error(""String_Node_Str"" + input,t);
            callback.onFailure(event,inputContext,new FailureReason(FailureReason.Type.IO_ERROR,t.getMessage()),new SimpleInputAcknowledger(txAgentSupplier,input));
          }
        }
      }
);
    }
  }
;
}"
8091,"/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC && levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}","/** 
 * The root of all goodness!
 * @param args Our cmdline arguments
 */
public static void main(String[] args){
  Copyright.print(System.out);
  try {
    if (!nodeExists()) {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(-1);
  }
  boolean inMemory=false;
  if (args.length > 0) {
    if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
      usage(false);
      return;
    }
 else     if (""String_Node_Str"".equals(args[0])) {
      inMemory=true;
    }
 else {
      usage(true);
    }
  }
  CConfiguration configuration=CConfiguration.create();
  boolean inVPC=false;
  String environment=configuration.get(""String_Node_Str"",""String_Node_Str"");
  if (environment.equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + environment);
    inVPC=true;
  }
  boolean levelDBCompatibleOS=false;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0) {
    levelDBCompatibleOS=true;
  }
  ImmutableList<Module> inMemoryModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getInMemoryModules(),new GatewayModules().getInMemoryModules(),new DataFabricModules().getInMemoryModules(),new MetadataModules().getInMemoryModules());
  ImmutableList<Module> singleNodeModules=ImmutableList.of(new BigMamaModule(configuration),new MetricsModules().getSingleNodeModules(),new GatewayModules().getSingleNodeModules(),inVPC || levelDBCompatibleOS ? new DataFabricLevelDBModule() : new DataFabricModules().getSingleNodeModules(),new MetadataModules().getSingleNodeModules());
  SingleNodeMain main=inMemory ? new SingleNodeMain(inMemoryModules,configuration) : new SingleNodeMain(singleNodeModules,configuration);
  try {
    main.startUp(args);
  }
 catch (  Exception e) {
    main.shutDown();
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(-2);
  }
}"
8092,"@Override public JsonElement serialize(ApplicationSpecification src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObj=new JsonObject();
  jsonObj.add(""String_Node_Str"",new JsonPrimitive(src.getName()));
  jsonObj.add(""String_Node_Str"",new JsonPrimitive(src.getDescription()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getStreams(),new TypeToken<Map<String,StreamSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getStreams(),new TypeToken<Map<String,DataSetSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getStreams(),new TypeToken<Map<String,FlowSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getStreams(),new TypeToken<Map<String,ProcedureSpecification>>(){
  }
.getType()));
  return jsonObj;
}","@Override public JsonElement serialize(ApplicationSpecification src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObj=new JsonObject();
  jsonObj.add(""String_Node_Str"",new JsonPrimitive(src.getName()));
  jsonObj.add(""String_Node_Str"",new JsonPrimitive(src.getDescription()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getStreams(),new TypeToken<Map<String,StreamSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getDataSets(),new TypeToken<Map<String,DataSetSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getFlows(),new TypeToken<Map<String,FlowSpecification>>(){
  }
.getType()));
  jsonObj.add(""String_Node_Str"",context.serialize(src.getProcedures(),new TypeToken<Map<String,ProcedureSpecification>>(){
  }
.getType()));
  return jsonObj;
}"
8093,"@Override protected void run(){
  LoggingContextAccessor.setLoggingContext(loggingContext);
  initFlowlet();
  PriorityBlockingQueue<ProcessEntry> processQueue=new PriorityBlockingQueue<ProcessEntry>(processSpecs.size());
  for (  ProcessSpecification spec : processSpecs) {
    processQueue.offer(new ProcessEntry(spec));
  }
  List<ProcessEntry> processList=Lists.newArrayListWithExpectedSize(processSpecs.size() * 2);
  while (isRunning()) {
    CountDownLatch suspendLatch=suspension.get();
    if (suspendLatch != null) {
      try {
        suspendBarrier.await();
        suspendLatch.await();
      }
 catch (      Exception e) {
        continue;
      }
    }
    try {
      processQueue.peek().await();
    }
 catch (    InterruptedException e) {
      LOGGER.info(""String_Node_Str"",e);
      continue;
    }
    processList.clear();
    processQueue.drainTo(processList);
    for (    ProcessEntry entry : processList) {
      try {
        if (!entry.shouldProcess()) {
          continue;
        }
        InputDatum input=entry.processSpec.getQueueReader().dequeue();
        if (input.isEmpty()) {
          LOGGER.info(""String_Node_Str"");
          entry.backOff();
          continue;
        }
        entry.nextDeque=0;
        try {
          ProcessMethod processMethod=entry.processSpec.getProcessMethod();
          LOGGER.info(""String_Node_Str"" + processMethod);
          processMethod.invoke(input).commit(transactionExecutor,processMethodCallback(processQueue,entry,input));
        }
 catch (        Throwable t) {
          LOGGER.error(String.format(""String_Node_Str"",entry.processSpec),t);
        }
      }
 catch (      OperationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        if (!entry.isRetry()) {
          processQueue.offer(entry);
        }
      }
    }
  }
  destroyFlowlet();
}","@Override protected void run(){
  LoggingContextAccessor.setLoggingContext(loggingContext);
  initFlowlet();
  PriorityBlockingQueue<ProcessEntry> processQueue=new PriorityBlockingQueue<ProcessEntry>(processSpecs.size());
  for (  ProcessSpecification spec : processSpecs) {
    processQueue.offer(new ProcessEntry(spec));
  }
  List<ProcessEntry> processList=Lists.newArrayListWithExpectedSize(processSpecs.size() * 2);
  while (isRunning()) {
    CountDownLatch suspendLatch=suspension.get();
    if (suspendLatch != null) {
      try {
        suspendBarrier.await();
        suspendLatch.await();
      }
 catch (      Exception e) {
        continue;
      }
    }
    try {
      processQueue.peek().await();
    }
 catch (    InterruptedException e) {
      LOGGER.info(""String_Node_Str"",e);
      continue;
    }
    processList.clear();
    processQueue.drainTo(processList);
    for (    ProcessEntry entry : processList) {
      try {
        if (!entry.shouldProcess()) {
          continue;
        }
        InputDatum input=entry.processSpec.getQueueReader().dequeue();
        if (input.isEmpty()) {
          entry.backOff();
          continue;
        }
        entry.nextDeque=0;
        try {
          ProcessMethod processMethod=entry.processSpec.getProcessMethod();
          processMethod.invoke(input).commit(transactionExecutor,processMethodCallback(processQueue,entry,input));
        }
 catch (        Throwable t) {
          LOGGER.error(String.format(""String_Node_Str"",entry.processSpec),t);
        }
      }
 catch (      OperationException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        if (!entry.isRetry()) {
          processQueue.offer(entry);
        }
      }
    }
  }
  destroyFlowlet();
}"
8094,"@Override public void submit(TransactionAgent agent) throws OperationException {
  List<EmittedDatum> outputs=Lists.newArrayListWithExpectedSize(dataQueue.size());
  dataQueue.drainTo(outputs);
  agent.submit(ImmutableList.copyOf(Iterables.transform(dataQueue,DATUM_TO_WRITE_OP)));
}","@Override public void submit(TransactionAgent agent) throws OperationException {
  List<EmittedDatum> outputs=Lists.newArrayListWithExpectedSize(dataQueue.size());
  dataQueue.drainTo(outputs);
  agent.submit(ImmutableList.copyOf(Iterables.transform(outputs,DATUM_TO_WRITE_OP)));
}"
8095,"/** 
 * @return Returns an instance of {@link LocalManager}
 */
public static Manager<Location,ApplicationWithPrograms> getLocalManager(CConfiguration configuration){
  LocationFactory lf=new LocalLocationFactory();
  PipelineFactory pf=new SynchronousPipelineFactory();
  final Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(OperationExecutor.class).to(NoOperationExecutor.class);
      bind(MetaDataStore.class).to(SerializingMetaDataStore.class);
      bind(ManagerFactory.class).to(SyncManagerFactory.class);
      bind(LocationFactory.class).to(LocalLocationFactory.class);
      bind(PipelineFactory.class).to(SynchronousPipelineFactory.class);
      bind(StoreFactory.class).to(MDSStoreFactory.class);
    }
  }
);
  ManagerFactory factory=injector.getInstance(ManagerFactory.class);
  return (Manager<Location,ApplicationWithPrograms>)factory.create(configuration);
}","/** 
 * @return Returns an instance of {@link LocalManager}
 */
public static Manager<Location,ApplicationWithPrograms> getLocalManager(CConfiguration configuration){
  LocationFactory lf=new LocalLocationFactory();
  PipelineFactory pf=new SynchronousPipelineFactory();
  final Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(OperationExecutor.class).to(NoOperationExecutor.class);
      bind(MetaDataStore.class).to(SerializingMetaDataStore.class);
      bind(ManagerFactory.class).to(SyncManagerFactory.class);
      bind(LocationFactory.class).to(LocalLocationFactory.class);
      bind(PipelineFactory.class).to(SynchronousPipelineFactory.class);
      bind(StoreFactory.class).to(MDSStoreFactory.class);
      bind(MetadataService.Iface.class).to(com.continuuity.metadata.MetadataService.class);
      bind(new TypeLiteral<PipelineFactory<?>>(){
      }
).to(new TypeLiteral<SynchronousPipelineFactory<?>>(){
      }
);
    }
  }
);
  ManagerFactory factory=injector.getInstance(ManagerFactory.class);
  return (Manager<Location,ApplicationWithPrograms>)factory.create(configuration);
}"
8096,"@Override protected void configure(){
  bind(OperationExecutor.class).to(NoOperationExecutor.class);
  bind(MetaDataStore.class).to(SerializingMetaDataStore.class);
  bind(ManagerFactory.class).to(SyncManagerFactory.class);
  bind(LocationFactory.class).to(LocalLocationFactory.class);
  bind(PipelineFactory.class).to(SynchronousPipelineFactory.class);
  bind(StoreFactory.class).to(MDSStoreFactory.class);
}","@Override protected void configure(){
  bind(OperationExecutor.class).to(NoOperationExecutor.class);
  bind(MetaDataStore.class).to(SerializingMetaDataStore.class);
  bind(ManagerFactory.class).to(SyncManagerFactory.class);
  bind(LocationFactory.class).to(LocalLocationFactory.class);
  bind(PipelineFactory.class).to(SynchronousPipelineFactory.class);
  bind(StoreFactory.class).to(MDSStoreFactory.class);
  bind(MetadataService.Iface.class).to(com.continuuity.metadata.MetadataService.class);
  bind(new TypeLiteral<PipelineFactory<?>>(){
  }
).to(new TypeLiteral<SynchronousPipelineFactory<?>>(){
  }
);
}"
8097,"@Override public long incrementAtomicDirtily(byte[] row,byte[] column,long amount) throws OperationException {
  try {
    Increment increment=new Increment(row);
    increment.addColumn(this.family,column,amount);
    Result result=this.readTable.increment(increment);
    if (result.isEmpty())     return 0L;
    return Bytes.toLong(result.value());
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
    return -1L;
  }
}","@Override public long incrementAtomicDirtily(byte[] row,byte[] column,long amount) throws OperationException {
  try {
    Increment increment=new Increment(row);
    increment.addColumn(this.family,column,amount);
    Result result=this.readTable.increment(increment);
    return Bytes.toLong(result.value());
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
    return -1L;
  }
}"
8098,"@Override public void compareAndSwap(byte[] row,byte[] column,byte[] expectedValue,byte[] newValue,ReadPointer readPointer,long writeVersion) throws OperationException {
  byte[] expectedPrependedValue=null;
  KeyValue latestVisibleKV=null;
  try {
    Get get=new Get(row);
    get.addColumn(this.family,column);
    get.setTimeRange(0,getMaxStamp(readPointer));
    get.setMaxVersions();
    Result result=this.readTable.get(get);
    KeyValue[] rawResults=result.raw();
    if (rawResults != null && rawResults.length != 0) {
      expectedPrependedValue=rawResults[0].getValue();
      Set<Long> deleted=Sets.newHashSet();
      for (      KeyValue kv : result.raw()) {
        long version=kv.getTimestamp();
        if (!readPointer.isVisible(version))         continue;
        if (deleted.contains(version))         continue;
        byte[] value=kv.getValue();
        byte typePrefix=value[0];
        if (typePrefix == DATA) {
          latestVisibleKV=kv;
          break;
        }
 else         if (typePrefix == DELETE_VERSION) {
          deleted.add(version);
        }
 else         if (typePrefix == DELETE_ALL) {
          latestVisibleKV=null;
          break;
        }
      }
    }
    if (equalValues(latestVisibleKV,expectedValue)) {
      byte[] newPrependedValue;
      if (newValue == null)       newPrependedValue=DELETE_ALL_VALUE;
 else       newPrependedValue=prependWithTypePrefix(DATA,newValue);
      if (this.readTable.checkAndPut(row,this.family,column,expectedPrependedValue,readPointer.getMaximum(),new Put(row).add(this.family,column,writeVersion,newPrependedValue))) {
        return;
      }
    }
    throw new OperationException(StatusCode.WRITE_CONFLICT,""String_Node_Str"");
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
  }
}","@Override public void compareAndSwap(byte[] row,byte[] column,byte[] expectedValue,byte[] newValue,ReadPointer readPointer,long writeVersion) throws OperationException {
  byte[] expectedPrependedValue=null;
  KeyValue latestVisibleKV=null;
  try {
    Get get=new Get(row);
    get.addColumn(this.family,column);
    get.setTimeRange(0,getMaxStamp(readPointer));
    get.setMaxVersions();
    Result result=this.readTable.get(get);
    KeyValue[] rawResults=result.raw();
    if (rawResults != null && rawResults.length != 0) {
      expectedPrependedValue=rawResults[0].getValue();
      Set<Long> deleted=Sets.newHashSet();
      for (      KeyValue kv : result.raw()) {
        long version=kv.getTimestamp();
        if (!readPointer.isVisible(version))         continue;
        if (deleted.contains(version))         continue;
        byte[] value=kv.getValue();
        byte typePrefix=value[0];
        if (typePrefix == DATA) {
          latestVisibleKV=kv;
          break;
        }
 else         if (typePrefix == DELETE_VERSION) {
          deleted.add(version);
        }
 else         if (typePrefix == DELETE_ALL) {
          latestVisibleKV=null;
          break;
        }
      }
    }
    if (equalValues(latestVisibleKV,expectedValue)) {
      byte[] newPrependedValue;
      if (newValue == null) {
        newPrependedValue=DELETE_ALL_VALUE;
      }
 else {
        newPrependedValue=prependWithTypePrefix(DATA,newValue);
      }
      if (this.readTable.checkAndPut(row,this.family,column,expectedPrependedValue,readPointer.getMaximum(),new Put(row).add(this.family,column,writeVersion,newPrependedValue))) {
        return;
      }
    }
    throw new OperationException(StatusCode.WRITE_CONFLICT,""String_Node_Str"");
  }
 catch (  IOException e) {
    this.exceptionHandler.handle(e);
  }
}"
8099,"/** 
 * @deprecated
 */
public void setData(byte[] data){
  this.entry.setData(data);
}","/** 
 * @deprecated
 */
public void setData(byte[] data){
  assert(this.entry != null);
  this.entry.setData(data);
}"
8100,"/** 
 * @deprecated
 */
public byte[] getData(){
  return this.entry.getData();
}","/** 
 * @deprecated
 */
public byte[] getData(){
  return this.entry == null ? null : this.entry.getData();
}"
8101,"/** 
 * Sets the authenticator to be used for all requests to this connector.
 * @param authenticator the authenticator to use for requests
 */
void setAuthenticator(GatewayAuthenticator authenticator){
  this.authenticator=authenticator;
}","/** 
 * Sets the authenticator to be used for all requests to this connector.
 * @param authenticator the authenticator to use for requests
 */
public void setAuthenticator(GatewayAuthenticator authenticator){
  this.authenticator=authenticator;
}"
8102,"/** 
 * Authenticates the specified HTTP request.
 * @param request http request
 * @return true if authentication succeeds, false if not
 */
public boolean authenticateRequest(AvroFlumeEvent flumeEvent);","/** 
 * Authenticates the specified Stream Event.
 * @param event stream event to authenticate
 * @return true if authentication succeeds, false if not
 */
public boolean authenticateRequest(Event event);"
8103,"@Override public boolean authenticateRequest(AvroFlumeEvent flumeEvent){
  return true;
}","@Override public boolean authenticateRequest(Event event){
  return true;
}"
8104,"@Override public boolean authenticateRequest(AvroFlumeEvent flumeEvent){
  CharSequence apiKeyCS=flumeEvent.getHeaders().get(CONTINUUITY_API_KEY);
  if (apiKeyCS == null || apiKeyCS.length() == 0)   return false;
  String apiKey=apiKeyCS.toString();
  return authenticate(apiKey);
}","@Override public boolean authenticateRequest(Event event){
  String apiKey=event.getHeader(CONTINUUITY_API_KEY);
  if (apiKey == null)   return false;
  return authenticate(apiKey);
}"
8105,"@Override public final Status appendBatch(List<AvroFlumeEvent> events){
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.collector.getMetricsQualifier(),""String_Node_Str"");
  LOG.trace(""String_Node_Str"" + events);
  if (!collector.getAuthenticator().authenticateRequest(events.get(0))) {
    LOG.warn(""String_Node_Str"");
    helper.finish(Error);
    return Status.FAILED;
  }
  try {
    this.collector.getConsumer().consumeEvents(convertFlume2Event(events,helper));
    helper.finish(Success);
    return Status.OK;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + e.getMessage());
    helper.finish(Error);
    return Status.FAILED;
  }
}","@Override public final Status appendBatch(List<AvroFlumeEvent> events){
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.collector.getMetricsQualifier(),""String_Node_Str"");
  LOG.trace(""String_Node_Str"" + events);
  try {
    List<Event> convertedEvents=convertFlume2Event(events,helper);
    if (!collector.getAuthenticator().authenticateRequest(convertedEvents.get(0))) {
      LOG.warn(""String_Node_Str"");
      helper.finish(Error);
      return Status.FAILED;
    }
    this.collector.getConsumer().consumeEvents(convertedEvents);
    helper.finish(Success);
    return Status.OK;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + e.getMessage());
    helper.finish(Error);
    return Status.FAILED;
  }
}"
8106,"@Override public final Status append(AvroFlumeEvent event){
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.collector.getMetricsQualifier(),""String_Node_Str"");
  LOG.trace(""String_Node_Str"" + event);
  if (!collector.getAuthenticator().authenticateRequest(event)) {
    LOG.debug(""String_Node_Str"");
    helper.finish(Error);
    return Status.FAILED;
  }
  try {
    this.collector.getConsumer().consumeEvent(convertFlume2Event(event,helper));
    helper.finish(MetricsHelper.Status.Success);
    return Status.OK;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + e.getMessage());
    helper.finish(Error);
    return Status.FAILED;
  }
}","@Override public final Status append(AvroFlumeEvent event){
  MetricsHelper helper=new MetricsHelper(this.getClass(),this.metrics,this.collector.getMetricsQualifier(),""String_Node_Str"");
  LOG.trace(""String_Node_Str"" + event);
  try {
    Event convertedEvent=convertFlume2Event(event,helper);
    if (!collector.getAuthenticator().authenticateRequest(convertedEvent)) {
      LOG.debug(""String_Node_Str"");
      helper.finish(Error);
      return Status.FAILED;
    }
    this.collector.getConsumer().consumeEvent(convertedEvent);
    helper.finish(MetricsHelper.Status.Success);
    return Status.OK;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + e.getMessage());
    helper.finish(Error);
    return Status.FAILED;
  }
}"
8107,"/** 
 * verify that collector does not bind to port until start()
 */
@Test public void testStartStop() throws Exception {
  String name=""String_Node_Str"";
  int port=PortDetector.findFreePort();
  String stream=""String_Node_Str"";
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.NoopConsumer());
  SimpleEvent event=TestUtil.createFlumeEvent(42,stream);
  try {
    TestUtil.sendFlumeEvent(port,event);
    Assert.fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  collector.start();
  TestUtil.sendFlumeEvent(port,event);
  collector.stop();
  try {
    TestUtil.sendFlumeEvent(port,event);
    Assert.fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  collector.start();
  TestUtil.sendFlumeEvent(port,event);
  collector.stop();
}","/** 
 * verify that collector does not bind to port until start()
 */
@Test public void testStartStop() throws Exception {
  String name=""String_Node_Str"";
  int port=PortDetector.findFreePort();
  String stream=""String_Node_Str"";
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.NoopConsumer());
  collector.setAuthenticator(new NoAuthenticator());
  SimpleEvent event=TestUtil.createFlumeEvent(42,stream);
  try {
    TestUtil.sendFlumeEvent(port,event);
    Assert.fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  collector.start();
  TestUtil.sendFlumeEvent(port,event);
  collector.stop();
  try {
    TestUtil.sendFlumeEvent(port,event);
    Assert.fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  collector.start();
  TestUtil.sendFlumeEvent(port,event);
  collector.stop();
}"
8108,"/** 
 * verify that flume events get transformed and annotated correctly
 */
@Test public void testTransformEvent() throws Exception {
  String name=""String_Node_Str"";
  int port=PortDetector.findFreePort();
  String stream=""String_Node_Str"";
  int eventsToSend=10;
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.VerifyConsumer(17,name,stream));
  collector.start();
  TestUtil.sendFlumeEvent(port,TestUtil.createFlumeEvent(17,stream));
  collector.stop();
  collector.setConsumer(new TestUtil.VerifyConsumer(name,stream));
  collector.start();
  TestUtil.sendFlumeEvents(port,stream,eventsToSend,4);
  collector.stop();
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsReceived());
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsSucceeded());
  Assert.assertEquals(0,collector.getConsumer().eventsFailed());
}","/** 
 * verify that flume events get transformed and annotated correctly
 */
@Test public void testTransformEvent() throws Exception {
  String name=""String_Node_Str"";
  int port=PortDetector.findFreePort();
  String stream=""String_Node_Str"";
  int eventsToSend=10;
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.VerifyConsumer(17,name,stream));
  collector.setAuthenticator(new NoAuthenticator());
  collector.start();
  TestUtil.sendFlumeEvent(port,TestUtil.createFlumeEvent(17,stream));
  collector.stop();
  collector.setConsumer(new TestUtil.VerifyConsumer(name,stream));
  collector.start();
  TestUtil.sendFlumeEvents(port,stream,eventsToSend,4);
  collector.stop();
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsReceived());
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsSucceeded());
  Assert.assertEquals(0,collector.getConsumer().eventsFailed());
}"
8109,"/** 
 * Test that we can send simulated Flume events to a Queue using EventWritingConsumer. NOTE: This has been seperated out from the above test till we figure out how OMID can handle multiple write format that gets on queue. No Ignore is added for test on purpose.
 * @throws Exception If any exceptions happen during the test
 */
public void testFlumeToQueueWithEventWritingConsumer() throws Exception {
  EventWritingConsumer eventWritingConsumer=new EventWritingConsumer();
  eventWritingConsumer.setExecutor(this.executor);
  theGateway.setConsumer(eventWritingConsumer);
  try {
    theGateway.start(null,myConfiguration);
  }
 catch (  ServerException e) {
    LOG.debug(e.getMessage());
  }
  TestUtil.enableAuth(apiKey);
  TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
  Assert.assertEquals(eventsToSend,eventWritingConsumer.eventsReceived());
  Assert.assertEquals(eventsToSend,eventWritingConsumer.eventsSucceeded());
  Assert.assertEquals(0,eventWritingConsumer.eventsFailed());
  TestUtil.consumeQueueAsEvents(this.executor,destination,name,eventsToSend);
  TestUtil.disableAuth();
  try {
    TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  theGateway.stop(false);
}","/** 
 * Test that we can send simulated Flume events to a Queue using EventWritingConsumer. NOTE: This has been seperated out from the above test till we figure out how OMID can handle multiple write format that gets on queue. No Ignore is added for test on purpose.
 * @throws Exception If any exceptions happen during the test
 */
public void testFlumeToQueueWithEventWritingConsumer() throws Exception {
  EventWritingConsumer eventWritingConsumer=new EventWritingConsumer();
  eventWritingConsumer.setExecutor(this.executor);
  theGateway.setConsumer(eventWritingConsumer);
  try {
    theGateway.start(null,myConfiguration);
  }
 catch (  ServerException e) {
    LOG.debug(e.getMessage());
  }
  TestUtil.enableAuth(apiKey);
  TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
  Assert.assertEquals(eventsToSend,eventWritingConsumer.eventsReceived());
  Assert.assertEquals(eventsToSend,eventWritingConsumer.eventsSucceeded());
  Assert.assertEquals(0,eventWritingConsumer.eventsFailed());
  TestUtil.consumeQueueAsEvents(this.executor,destination,name,eventsToSend);
  TestUtil.disableAuth();
  theGateway.stop(false);
}"
8110,"/** 
 * Test that we can send simulated Flume events to a Queue using TupleWritingConsumer
 * @throws Exception If any exceptions happen during the test
 */
@Test public void testFlumeToQueueTupleWritingConsumer() throws Exception {
  TupleWritingConsumer tupleWritingConsumer=new TupleWritingConsumer();
  tupleWritingConsumer.setExecutor(this.executor);
  theGateway.setConsumer(tupleWritingConsumer);
  try {
    theGateway.start(null,myConfiguration);
  }
 catch (  ServerException e) {
    LOG.debug(e.getMessage());
  }
  TestUtil.enableAuth(apiKey);
  TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
  Assert.assertEquals(eventsToSend,tupleWritingConsumer.eventsReceived());
  Assert.assertEquals(eventsToSend,tupleWritingConsumer.eventsSucceeded());
  Assert.assertEquals(0,tupleWritingConsumer.eventsFailed());
  TestUtil.consumeQueueAsTuples(this.executor,destination,name,eventsToSend);
  TestUtil.disableAuth();
  theGateway.stop(false);
}","/** 
 * Test that we can send simulated Flume events to a Queue using TupleWritingConsumer
 * @throws Exception If any exceptions happen during the test
 */
@Test public void testFlumeToQueueTupleWritingConsumer() throws Exception {
  TupleWritingConsumer tupleWritingConsumer=new TupleWritingConsumer();
  tupleWritingConsumer.setExecutor(this.executor);
  theGateway.setConsumer(tupleWritingConsumer);
  try {
    theGateway.start(null,myConfiguration);
  }
 catch (  ServerException e) {
    LOG.debug(e.getMessage());
  }
  TestUtil.enableAuth(apiKey);
  TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
  Assert.assertEquals(eventsToSend,tupleWritingConsumer.eventsReceived());
  Assert.assertEquals(eventsToSend,tupleWritingConsumer.eventsSucceeded());
  Assert.assertEquals(0,tupleWritingConsumer.eventsFailed());
  TestUtil.consumeQueueAsTuples(this.executor,destination,name,eventsToSend);
  TestUtil.disableAuth();
  try {
    TestUtil.sendFlumeEvents(port,destination,eventsToSend,batchSize);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  theGateway.stop(false);
}"
8111,"/** 
 * Create a new rest accessor with a given name and parameters
 * @param name   The name for the accessor
 * @param prefix The path prefix for the URI
 * @param middle The path middle for the URI
 * @return the accessor's base URL for REST requests
 */
String setupAccessor(String name,String prefix,String middle) throws Exception {
  DataRestAccessor restAccessor=new DataRestAccessor();
  restAccessor.setName(name);
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),middle);
  restAccessor.configure(configuration);
  restAccessor.setExecutor(this.executor);
  restAccessor.start();
  this.accessor=restAccessor;
  return ""String_Node_Str"" + port + prefix+ middle;
}","/** 
 * Create a new rest accessor with a given name and parameters
 * @param name   The name for the accessor
 * @param prefix The path prefix for the URI
 * @param middle The path middle for the URI
 * @return the accessor's base URL for REST requests
 */
String setupAccessor(String name,String prefix,String middle) throws Exception {
  DataRestAccessor restAccessor=new DataRestAccessor();
  restAccessor.setName(name);
  restAccessor.setAuthenticator(new NoAuthenticator());
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),middle);
  restAccessor.configure(configuration);
  restAccessor.setExecutor(this.executor);
  restAccessor.start();
  this.accessor=restAccessor;
  return ""String_Node_Str"" + port + prefix+ middle;
}"
8112,"String setupCollector(String name,String prefix,String middle) throws Exception {
  RestCollector restCollector=new RestCollector();
  restCollector.setName(name);
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),middle);
  restCollector.configure(configuration);
  TupleWritingConsumer consumer=new TupleWritingConsumer();
  consumer.setExecutor(this.executor);
  restCollector.setConsumer(consumer);
  restCollector.setExecutor(this.executor);
  restCollector.setMetadataService(new DummyMDS());
  restCollector.start();
  this.collector=restCollector;
  return ""String_Node_Str"" + port + prefix+ middle;
}","String setupCollector(String name,String prefix,String middle) throws Exception {
  RestCollector restCollector=new RestCollector();
  restCollector.setName(name);
  restCollector.setAuthenticator(new NoAuthenticator());
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),middle);
  restCollector.configure(configuration);
  TupleWritingConsumer consumer=new TupleWritingConsumer();
  consumer.setExecutor(this.executor);
  restCollector.setConsumer(consumer);
  restCollector.setExecutor(this.executor);
  restCollector.setMetadataService(new DummyMDS());
  restCollector.start();
  this.collector=restCollector;
  return ""String_Node_Str"" + port + prefix+ middle;
}"
8113,"/** 
 * This tests that the collector returns the correct HTTP codes for invalid requests
 */
@Test public void testBadRequests() throws Exception {
  final String name=""String_Node_Str"";
  final String prefix=""String_Node_Str"";
  final String path=""String_Node_Str"";
  final int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.set(Constants.CONFIG_CONNECTORS,name);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_CLASSNAME),RestCollector.class.getCanonicalName());
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),path);
  RestCollector collector=new RestCollector();
  collector.setName(name);
  collector.setConsumer(new TestUtil.NoopConsumer());
  collector.setMetadataService(new DummyMDS());
  collector.configure(configuration);
  collector.start();
  String baseUrl=collector.getHttpConfig().getBaseUrl();
  Assert.assertEquals(200,TestUtil.sendGetRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl));
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  ((DummyMDS)collector.getMetadataService()).allowAll();
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(501,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  collector.stop();
}","/** 
 * This tests that the collector returns the correct HTTP codes for invalid requests
 */
@Test public void testBadRequests() throws Exception {
  final String name=""String_Node_Str"";
  final String prefix=""String_Node_Str"";
  final String path=""String_Node_Str"";
  final int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.set(Constants.CONFIG_CONNECTORS,name);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_CLASSNAME),RestCollector.class.getCanonicalName());
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),path);
  RestCollector collector=new RestCollector();
  collector.setName(name);
  collector.setConsumer(new TestUtil.NoopConsumer());
  collector.setMetadataService(new DummyMDS());
  collector.setAuthenticator(new NoAuthenticator());
  collector.configure(configuration);
  collector.start();
  String baseUrl=collector.getHttpConfig().getBaseUrl();
  Assert.assertEquals(200,TestUtil.sendGetRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(""String_Node_Str"" + port + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl));
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  ((DummyMDS)collector.getMetadataService()).allowAll();
  Assert.assertEquals(200,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(404,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  Assert.assertEquals(501,TestUtil.sendPostRequest(baseUrl + ""String_Node_Str""));
  collector.stop();
}"
8114,"/** 
 * verify that rest events get transformed and annotated correctly
 */
@Test public void testTransformEvent() throws Exception {
  String name=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  String path=""String_Node_Str"";
  String destination=""String_Node_Str"";
  int eventsToSend=10;
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),path);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.VerifyConsumer(15,name,destination));
  collector.start();
  TestUtil.sendRestEvent(TestUtil.createHttpPost(port,prefix,path,destination,15));
  collector.stop();
  collector.setConsumer(new TestUtil.VerifyConsumer(name,destination));
  collector.start();
  TestUtil.sendRestEvents(port,prefix,path,destination,eventsToSend);
  collector.stop();
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsReceived());
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsSucceeded());
  Assert.assertEquals(0,collector.getConsumer().eventsFailed());
}","/** 
 * verify that rest events get transformed and annotated correctly
 */
@Test public void testTransformEvent() throws Exception {
  String name=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  String path=""String_Node_Str"";
  String destination=""String_Node_Str"";
  int eventsToSend=10;
  int port=PortDetector.findFreePort();
  CConfiguration configuration=new CConfiguration();
  configuration.setInt(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PORT),port);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_PREFIX),prefix);
  configuration.set(Constants.buildConnectorPropertyName(name,Constants.CONFIG_PATH_MIDDLE),path);
  Collector collector=newCollector(name);
  collector.configure(configuration);
  collector.setConsumer(new TestUtil.VerifyConsumer(15,name,destination));
  collector.setAuthenticator(new NoAuthenticator());
  collector.start();
  TestUtil.sendRestEvent(TestUtil.createHttpPost(port,prefix,path,destination,15));
  collector.stop();
  collector.setConsumer(new TestUtil.VerifyConsumer(name,destination));
  collector.start();
  TestUtil.sendRestEvents(port,prefix,path,destination,eventsToSend);
  collector.stop();
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsReceived());
  Assert.assertEquals(eventsToSend,collector.getConsumer().eventsSucceeded());
  Assert.assertEquals(0,collector.getConsumer().eventsFailed());
}"
8115,"private void executeDeferred() throws OperationException {
  if (this.state != State.Running) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.deferred.isEmpty()) {
    try {
      this.xaction=this.opex.execute(this.context,null,this.deferred);
      this.deferred.clear();
    }
 catch (    OperationException e) {
      this.xaction=null;
      this.deferred.clear();
      this.state=State.Aborted;
      throw e;
    }
  }
 else   if (this.xaction == null) {
    this.xaction=opex.startTransaction(this.context);
  }
}","private void executeDeferred() throws OperationException {
  if (this.state != State.Running) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.deferred.isEmpty()) {
    try {
      this.xaction=this.opex.execute(this.context,this.xaction,this.deferred);
      this.deferred.clear();
    }
 catch (    OperationException e) {
      this.xaction=null;
      this.deferred.clear();
      this.state=State.Aborted;
      throw e;
    }
  }
 else   if (this.xaction == null) {
    this.xaction=opex.startTransaction(this.context);
  }
}"
8116,"public void testBundler() throws Exception {
  Manifest manifest=new Manifest();
  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
  manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS,""String_Node_Str"");
  manifest.getMainAttributes().put(new Attributes.Name(""String_Node_Str""),""String_Node_Str"");
  manifest.getMainAttributes().put(new Attributes.Name(""String_Node_Str""),""String_Node_Str"");
  ArchiveBundler bundler=new ArchiveBundler(new File(""String_Node_Str""));
  bundler.clone(new File(""String_Node_Str""),manifest,new File[]{new File(""String_Node_Str"")});
}","public void testBundler() throws Exception {
  Manifest manifest=new Manifest();
  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
  manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS,""String_Node_Str"");
  manifest.getMainAttributes().put(new Attributes.Name(""String_Node_Str""),""String_Node_Str"");
  manifest.getMainAttributes().put(new Attributes.Name(""String_Node_Str""),""String_Node_Str"");
  LocationFactory lf=new LocalLocationFactory();
  ArchiveBundler bundler=new ArchiveBundler(lf.create(""String_Node_Str""));
  bundler.clone(lf.create(""String_Node_Str""),manifest,new Location[]{lf.create(""String_Node_Str"")});
}"
8117,"/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String runIdInclusion=null;
  if (request.getArgument() != null && request.getArgument().isSetRunId()) {
    runIdInclusion=String.format(""String_Node_Str"",request.getArgument().getRunId());
  }
  StringBuffer sql=new StringBuffer();
  if (request.getName() == null || request.getName().size() == 0) {
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(""String_Node_Str"").append(""String_Node_Str"").append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"");
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(""String_Node_Str"").append(""String_Node_Str"").append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(values).append(""String_Node_Str"").append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
  }
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    connection=getConnection();
    stmt=connection.prepareStatement(sql.toString());
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}","/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String runIdInclusion=null;
  if (request.getArgument() != null && request.getArgument().isSetRunId()) {
    runIdInclusion=String.format(""String_Node_Str"",request.getArgument().getRunId());
  }
  StringBuffer sql=new StringBuffer();
  if (request.getName() == null || request.getName().size() == 0) {
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(""String_Node_Str"").append(""String_Node_Str"").append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"");
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(""String_Node_Str"").append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"").append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
  }
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    connection=getConnection();
    stmt=connection.prepareStatement(sql.toString());
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}"
8118,"/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String sql=null;
  if (request.getName() == null || request.getName().size() == 0) {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + values + ""String_Node_Str"";
  }
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    connection=getConnection();
    stmt=connection.prepareStatement(sql);
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}","/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String runIdInclusion=null;
  if (request.getArgument() != null && request.getArgument().isSetRunId()) {
    runIdInclusion=String.format(""String_Node_Str"",request.getArgument().getRunId());
  }
  StringBuffer sql=new StringBuffer();
  if (request.getName() == null || request.getName().size() == 0) {
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"");
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    if (runIdInclusion != null) {
      sql.append(runIdInclusion).append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(values).append(""String_Node_Str"").append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
  }
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    connection=getConnection();
    stmt=connection.prepareStatement(sql.toString());
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}"
8119,"/** 
 * API to request time series data for a set of metrics.
 * @param request
 */
@Override public DataPoints getTimeSeries(TimeseriesRequest request) throws MetricsServiceException, TException {
  validateTimeseriesRequest(request);
  MetricTimeseriesLevel level=MetricTimeseriesLevel.FLOW_LEVEL;
  if (request.isSetLevel()) {
    level=request.getLevel();
  }
  Iterable<String> iterator=Iterables.transform(request.getMetrics(),new Function<String,String>(){
    @Override public String apply(    @Nullable String input){
      if (input.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"" + input + ""String_Node_Str"";
    }
  }
);
  String values=Joiner.on(""String_Node_Str"").join(iterator);
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  long start=System.currentTimeMillis() / 1000;
  ;
  long end=start;
  DataPoints results=new DataPoints();
  try {
    if (request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
      end=request.getStartts();
    }
    if (!request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
    }
    if (request.isSetStartts() && request.getEndts() > 0) {
      start=request.getStartts();
      end=request.getEndts();
    }
    connection=getConnection();
    if (level == MetricTimeseriesLevel.RUNID_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getRunId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
 else     if (level == MetricTimeseriesLevel.ACCOUNT_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setLong(2,start);
      stmt.setLong(3,end);
    }
 else     if (level == MetricTimeseriesLevel.APPLICATION_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setLong(3,start);
      stmt.setLong(4,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOW_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setLong(4,start);
      stmt.setLong(5,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOWLET_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getFlowletId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
    rs=stmt.executeQuery();
    Map<String,List<DataPoint>> points=Maps.newHashMap();
    Map<String,Double> previousPoint=Maps.newHashMap();
    Map<String,Double> latest=Maps.newHashMap();
    while (rs.next()) {
      String metric=rs.getString(""String_Node_Str"");
      long ts=rs.getLong(""String_Node_Str"");
      double value=rs.getFloat(""String_Node_Str"");
      double newValue=value;
      if (request.isSetSummary() && request.isSetSummary()) {
        latest.put(metric,value);
      }
      if (previousPoint.containsKey(metric)) {
        double prevValue=previousPoint.get(metric);
        newValue=value - prevValue;
        if (newValue > prevValue * 2) {
          newValue=prevValue;
        }
      }
      previousPoint.put(metric,value);
      DataPoint point=new DataPoint(ts,newValue);
      if (points.containsKey(metric)) {
        points.get(metric).add(point);
      }
 else {
        List<DataPoint> newPoints=Lists.newArrayList();
        newPoints.add(point);
        points.put(metric,newPoints);
      }
    }
    for (    Map.Entry<String,List<DataPoint>> entry : points.entrySet()) {
      entry.getValue().remove(0);
    }
    results.setPoints(points);
    if (request.isSetSummary() && request.isSetSummary()) {
      results.setLatest(latest);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",request.toString(),e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}","/** 
 * API to request time series data for a set of metrics.
 * @param request
 */
@Override public DataPoints getTimeSeries(TimeseriesRequest request) throws MetricsServiceException, TException {
  validateTimeseriesRequest(request);
  MetricTimeseriesLevel level=MetricTimeseriesLevel.FLOW_LEVEL;
  if (request.isSetLevel()) {
    level=request.getLevel();
  }
  Iterable<String> iterator=Iterables.transform(request.getMetrics(),new Function<String,String>(){
    @Override public String apply(    @Nullable String input){
      if (input.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"" + input + ""String_Node_Str"";
    }
  }
);
  String values=Joiner.on(""String_Node_Str"").join(iterator);
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  long start=System.currentTimeMillis() / 1000;
  ;
  long end=start;
  DataPoints results=new DataPoints();
  try {
    if (request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
      end=request.getStartts();
    }
    if (!request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
    }
    if (request.isSetStartts() && request.getEndts() > 0) {
      start=request.getStartts();
      end=request.getEndts();
    }
    start=start - 5;
    end=end - 5;
    connection=getConnection();
    if (level == MetricTimeseriesLevel.RUNID_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getRunId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
 else     if (level == MetricTimeseriesLevel.ACCOUNT_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setLong(2,start);
      stmt.setLong(3,end);
    }
 else     if (level == MetricTimeseriesLevel.APPLICATION_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setLong(3,start);
      stmt.setLong(4,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOW_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setLong(4,start);
      stmt.setLong(5,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOWLET_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getFlowletId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
    rs=stmt.executeQuery();
    Map<String,List<DataPoint>> points=Maps.newHashMap();
    Map<String,Double> previousPoint=Maps.newHashMap();
    Map<String,Double> latest=Maps.newHashMap();
    while (rs.next()) {
      String metric=rs.getString(""String_Node_Str"");
      long ts=rs.getLong(""String_Node_Str"");
      double value=rs.getFloat(""String_Node_Str"");
      double newValue=value;
      if (request.isSetSummary() && request.isSetSummary()) {
        latest.put(metric,value);
      }
      if (previousPoint.containsKey(metric)) {
        double prevValue=previousPoint.get(metric);
        newValue=value - prevValue;
        if (newValue > prevValue * 2) {
          newValue=prevValue;
        }
      }
      previousPoint.put(metric,value);
      DataPoint point=new DataPoint(ts,newValue);
      if (points.containsKey(metric)) {
        points.get(metric).add(point);
      }
 else {
        List<DataPoint> newPoints=Lists.newArrayList();
        newPoints.add(point);
        points.put(metric,newPoints);
      }
    }
    for (    Map.Entry<String,List<DataPoint>> entry : points.entrySet()) {
      entry.getValue().remove(0);
    }
    results.setPoints(points);
    if (request.isSetSummary() && request.isSetSummary()) {
      results.setLatest(latest);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",request.toString(),e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}"
8120,"@Test public void testQueryThroughGateway() throws Exception {
  FlowletExecutionContext ctx=new FlowletExecutionContext(""String_Node_Str"",""String_Node_Str"",false);
  ctx.setFlowIdentifier(new FlowIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1,EntityType.QUERY));
  ctx.setConfiguration(configuration);
  ctx.setInstanceId(1);
  ctx.setOperationExecutor(new NoOperationExecutor());
  final QueryProviderProcessor queryProcessor=new QueryProviderProcessor(new HelloWorldQueryProvider(),ctx);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        queryProcessor.start();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
).start();
  while (!queryProcessor.isRunning()) {
    Thread.sleep(10);
  }
  String uriPrefix=""String_Node_Str"" + port + prefix+ path;
  HttpClient httpClient=new DefaultHttpClient();
  HttpGet get=new HttpGet(uriPrefix + ""String_Node_Str"");
  HttpResponse response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatusLine().getStatusCode());
  httpClient=new DefaultHttpClient();
  get=new HttpGet(uriPrefix + ""String_Node_Str"");
  response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatusLine().getStatusCode());
  httpClient=new DefaultHttpClient();
  get=new HttpGet(uriPrefix + ""String_Node_Str"");
  response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
  String contentType=response.getEntity().getContentType().getValue();
  Assert.assertTrue(contentType.startsWith(""String_Node_Str""));
  int pos=contentType.indexOf(""String_Node_Str"");
  String charset=pos > 0 ? contentType.substring(pos + 8) : ""String_Node_Str"";
  int length=(int)response.getEntity().getContentLength();
  InputStream content=response.getEntity().getContent();
  if (length > 0) {
    byte[] bytes=new byte[length];
    int bytesRead=content.read(bytes);
    Assert.assertEquals(-1,content.read(new byte[1]));
    Assert.assertEquals(length,bytesRead);
    Assert.assertEquals(""String_Node_Str"",new String(bytes,charset));
  }
  queryProcessor.stop();
}","@Test public void testQueryThroughGateway() throws Exception {
  FlowletExecutionContext ctx=new FlowletExecutionContext(""String_Node_Str"",""String_Node_Str"",false);
  FlowIdentifier identifier=new FlowIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1);
  identifier.setType(EntityType.QUERY);
  ctx.setFlowIdentifier(identifier);
  ctx.setConfiguration(configuration);
  ctx.setInstanceId(1);
  ctx.setOperationExecutor(new NoOperationExecutor());
  final QueryProviderProcessor queryProcessor=new QueryProviderProcessor(new HelloWorldQueryProvider(),ctx);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        queryProcessor.start();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
).start();
  while (!queryProcessor.isRunning()) {
    Thread.sleep(10);
  }
  String uriPrefix=""String_Node_Str"" + port + prefix+ path;
  HttpClient httpClient=new DefaultHttpClient();
  HttpGet get=new HttpGet(uriPrefix + ""String_Node_Str"");
  HttpResponse response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatusLine().getStatusCode());
  httpClient=new DefaultHttpClient();
  get=new HttpGet(uriPrefix + ""String_Node_Str"");
  response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatusLine().getStatusCode());
  httpClient=new DefaultHttpClient();
  get=new HttpGet(uriPrefix + ""String_Node_Str"");
  response=httpClient.execute(get);
  Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
  String contentType=response.getEntity().getContentType().getValue();
  Assert.assertTrue(contentType.startsWith(""String_Node_Str""));
  int pos=contentType.indexOf(""String_Node_Str"");
  String charset=pos > 0 ? contentType.substring(pos + 8) : ""String_Node_Str"";
  int length=(int)response.getEntity().getContentLength();
  InputStream content=response.getEntity().getContent();
  if (length > 0) {
    byte[] bytes=new byte[length];
    int bytesRead=content.read(bytes);
    Assert.assertEquals(-1,content.read(new byte[1]));
    Assert.assertEquals(length,bytesRead);
    Assert.assertEquals(""String_Node_Str"",new String(bytes,charset));
  }
  queryProcessor.stop();
}"
8121,"/** 
 * Configures the service.
 * @param args from command line based for configuring service
 * @param conf Configuration instance passed around.
 * @return Pair of args for registering the service and the port service is running on.
 */
@Override protected RegisteredServerInfo configure(String[] args,CConfiguration conf){
  try {
    InetAddress serverAddress=getServerInetAddress(conf.get(Constants.CFG_METADATA_SERVER_ADDRESS));
    int serverPort=conf.getInt(Constants.CFG_METADATA_SERVER_PORT,Constants.DEFAULT_METADATA_SERVER_PORT);
    int threads=conf.getInt(Constants.CFG_METADATA_SERVER_THREADS,Constants.DEFAULT_METADATA_SERVER_THREADS);
    MetadataServiceImpl serviceImpl=new MetadataServiceImpl(opex);
    THsHaServer.Args serverArgs=new THsHaServer.Args(new TNonblockingServerSocket(new InetSocketAddress(serverAddress,serverPort))).executorService(executorService).processor(new MetadataService.Processor(serviceImpl)).workerThreads(threads);
    serverArgs.maxReadBufferBytes=getMaxReadBuffer(conf);
    server=new THsHaServer(serverArgs);
    setServerName(Constants.SERVICE_METADATA_SERVER);
    RegisteredServerInfo info=new RegisteredServerInfo(serverAddress.getHostName(),serverPort);
    info.addPayload(""String_Node_Str"",Integer.toString(threads));
    Log.info(""String_Node_Str"",serverAddress.getHostAddress(),serverPort);
    return info;
  }
 catch (  UnknownHostException e) {
    Log.error(""String_Node_Str"",e.getMessage());
    stop();
  }
catch (  TTransportException e) {
    Log.error(""String_Node_Str"",e.getMessage());
    stop();
  }
  return null;
}","/** 
 * Configures the service.
 * @param args from command line based for configuring service
 * @param conf Configuration instance passed around.
 * @return Pair of args for registering the service and the port service is running on.
 */
@Override protected RegisteredServerInfo configure(String[] args,CConfiguration conf){
  try {
    InetAddress serverAddress=getServerInetAddress(conf.get(Constants.CFG_METADATA_SERVER_ADDRESS));
    int serverPort=conf.getInt(Constants.CFG_METADATA_SERVER_PORT,Constants.DEFAULT_METADATA_SERVER_PORT);
    int threads=conf.getInt(Constants.CFG_METADATA_SERVER_THREADS,Constants.DEFAULT_METADATA_SERVER_THREADS);
    MetadataService service=new MetadataService(opex);
    THsHaServer.Args serverArgs=new THsHaServer.Args(new TNonblockingServerSocket(new InetSocketAddress(serverAddress,serverPort))).executorService(executorService).processor(new com.continuuity.metadata.stubs.MetadataService.Processor(service)).workerThreads(threads);
    serverArgs.maxReadBufferBytes=getMaxReadBuffer(conf);
    server=new THsHaServer(serverArgs);
    setServerName(Constants.SERVICE_METADATA_SERVER);
    RegisteredServerInfo info=new RegisteredServerInfo(serverAddress.getHostName(),serverPort);
    info.addPayload(""String_Node_Str"",Integer.toString(threads));
    Log.info(""String_Node_Str"",serverAddress.getHostAddress(),serverPort);
    return info;
  }
 catch (  UnknownHostException e) {
    Log.error(""String_Node_Str"",e.getMessage());
    stop();
  }
catch (  TTransportException e) {
    Log.error(""String_Node_Str"",e.getMessage());
    stop();
  }
  return null;
}"
8122,"/** 
 * Returns the time-bucketed timestamp of the specified timestamp in milliseconds (timestamp modulo 60*60*1000).
 * @param timestamp stamp in milliseconds
 * @return hour time bucket of specified timestamp in milliseconds
 */
public static Long hour(Long timestamp){
  return timestamp % 3600000;
}","/** 
 * Returns the time-bucketed timestamp of the specified timestamp in milliseconds (timestamp modulo 60*60*1000).
 * @param timestamp stamp in milliseconds
 * @return hour time bucket of specified timestamp in milliseconds
 */
public static Long hour(Long timestamp){
  return timestamp - (timestamp % 3600000);
}"
8123,"/** 
 * Returns the time-bucketed timestamp of the specified timestamp in milliseconds (timestamp modulo 60*60*1000).
 * @param timestamp stamp in milliseconds
 * @return hour time bucket of specified timestamp in milliseconds
 */
public static Long hour(Long timestamp){
  return timestamp - (timestamp % 3600000);
}","/** 
 * Returns the time-bucketed timestamp of the specified timestamp in milliseconds: timestamp - (timestamp modulo 60*60*1000).
 * @param timestamp stamp in milliseconds
 * @return hour time bucket of specified timestamp in milliseconds
 */
public static Long hour(Long timestamp){
  return timestamp - (timestamp % 3600000);
}"
8124,"/** 
 * Constructs and initializes   {@link MetricsClient}.
 * @param configuration object.
 * @throws ServiceDiscoveryClientException thrown when the client isunable to discovery the service or unable to connect to zookeeper.
 */
public MetricsClient(CConfiguration configuration) throws ServiceDiscoveryClientException {
  this.queue=new LinkedBlockingDeque<String>(10000);
  connector=new NioSocketConnector();
  connector.setConnectTimeoutMillis(CONNECT_TIMEOUT);
  ProtocolCodecFilter protocolFilter=new ProtocolCodecFilter(new MetricCodecFactory(true));
  connector.getFilterChain().addLast(""String_Node_Str"",protocolFilter);
  connector.getSessionConfig().setKeepAlive(true);
  connector.getSessionConfig().setTcpNoDelay(true);
  connector.setHandler(new MetricsClientProtocolHandler());
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      if (dispatcher != null) {
        dispatcher.stop();
      }
      if (connector != null) {
        connector.dispose();
        connector=null;
      }
      executorService.shutdown();
      if (session != null) {
        session.close(true).awaitUninterruptibly(CONNECT_TIMEOUT);
        session=null;
      }
    }
  }
);
  serviceDiscovery=new ServiceDiscoveryClient(configuration.get(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE));
  executorService.submit(dispatcher);
}","/** 
 * Constructs and initializes   {@link MetricsClient}.
 * @param configuration object.
 * @throws ServiceDiscoveryClientException thrown when the client isunable to discovery the service or unable to connect to zookeeper.
 */
public MetricsClient(CConfiguration configuration) throws ServiceDiscoveryClientException {
  this.queue=new LinkedBlockingDeque<String>(10000);
  connector=new NioSocketConnector();
  connector.setConnectTimeoutMillis(CONNECT_TIMEOUT);
  ProtocolCodecFilter protocolFilter=new ProtocolCodecFilter(new MetricCodecFactory(true));
  connector.getFilterChain().addLast(""String_Node_Str"",protocolFilter);
  connector.getSessionConfig().setKeepAlive(true);
  connector.getSessionConfig().setTcpNoDelay(true);
  connector.setHandler(new MetricsClientProtocolHandler());
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      if (dispatcher != null) {
        dispatcher.stop();
      }
      if (connector != null) {
        connector.dispose();
        connector=null;
      }
      executorService.shutdown();
      if (serviceDiscovery != null) {
        try {
          serviceDiscovery.close();
        }
 catch (        IOException e) {
          Log.warn(""String_Node_Str"",e.getMessage());
          Log.debug(StackTraceUtil.toStringStackTrace(e));
        }
      }
      if (session != null) {
        session.close(true).awaitUninterruptibly(CONNECT_TIMEOUT);
        session=null;
      }
    }
  }
);
  serviceDiscovery=new ServiceDiscoveryClient(configuration.get(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE));
  executorService.submit(dispatcher);
}"
8125,"public void run(){
  if (dispatcher != null) {
    dispatcher.stop();
  }
  if (connector != null) {
    connector.dispose();
    connector=null;
  }
  executorService.shutdown();
  if (session != null) {
    session.close(true).awaitUninterruptibly(CONNECT_TIMEOUT);
    session=null;
  }
}","public void run(){
  if (dispatcher != null) {
    dispatcher.stop();
  }
  if (connector != null) {
    connector.dispose();
    connector=null;
  }
  executorService.shutdown();
  if (serviceDiscovery != null) {
    try {
      serviceDiscovery.close();
    }
 catch (    IOException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
      Log.debug(StackTraceUtil.toStringStackTrace(e));
    }
  }
  if (session != null) {
    session.close(true).awaitUninterruptibly(CONNECT_TIMEOUT);
    session=null;
  }
}"
8126,"/** 
 * Run one iteration of the scheduled task. If any invocation of this method throws an exception, the service will transition to the   {@link com.google.common.util.concurrent.Service.State#FAILED} state and this method will nolonger be called.
 */
@Override protected void runOneIteration() throws Exception {
  for (  Future<MetricResponse.Status> future : futureList) {
    try {
      Await.ready(future,Duration.parse(""String_Node_Str""));
    }
 catch (    TimeoutException e) {
      future.failed();
    }
    if (future.isCompleted()) {
      futureList.remove(future);
    }
  }
}","/** 
 * Run one iteration of the scheduled task. If any invocation of this method throws an exception, the service will transition to the   {@link com.google.common.util.concurrent.Service.State#FAILED} state and this method will nolonger be called.
 */
@Override protected void runOneIteration() throws Exception {
  Log.debug(""String_Node_Str"",reapFutures.size());
  if (reapFutures.size() < 1) {
    return;
  }
  for (  Future<MetricResponse.Status> future : reapFutures) {
    try {
      Await.ready(future,Duration.parse(""String_Node_Str""));
    }
 catch (    TimeoutException e) {
      future.failed();
    }
    reapFutures.remove(future);
  }
  Log.debug(""String_Node_Str"",reapFutures.size());
}"
8127,"/** 
 * Processes the message received by the collection server.
 * @param session
 * @param message
 * @throws Exception
 */
@Override public void messageReceived(final IoSession session,final Object message) throws Exception {
  if (message instanceof MetricRequest) {
    final MetricRequest request=(MetricRequest)message;
    if (request.getValid()) {
      Future<MetricResponse.Status> future=null;
      for (      final ImmutablePair<MetricType,MetricsProcessor> processor : processors) {
        if (request.getMetricType() == processor.getFirst()) {
          if (future == null) {
            future=processor.getSecond().process(request);
          }
 else {
            future=future.zip(processor.getSecond().process(request)).map(new Mapper<Tuple2<MetricResponse.Status,MetricResponse.Status>,MetricResponse.Status>(){
              @Override public MetricResponse.Status apply(              Tuple2<MetricResponse.Status,MetricResponse.Status> zipped){
                if (zipped._1() != MetricResponse.Status.SUCCESS || zipped._2() != MetricResponse.Status.SUCCESS) {
                  return MetricResponse.Status.FAILED;
                }
                return MetricResponse.Status.SUCCESS;
              }
            }
);
          }
        }
      }
      if (future != null) {
        future.onComplete(new OnComplete<MetricResponse.Status>(){
          @Override public void onComplete(          Throwable failure,          MetricResponse.Status status){
            if (failure != null) {
              writeIfConnected(session,new MetricResponse(MetricResponse.Status.FAILED));
            }
 else {
              writeIfConnected(session,new MetricResponse(status));
            }
          }
        }
);
        futureList.add(future);
        return;
      }
    }
  }
 else {
    writeIfConnected(session,new MetricResponse(MetricResponse.Status.INVALID));
  }
}","/** 
 * Processes the message received by the collection server.
 * @param session
 * @param message
 * @throws Exception
 */
@Override public void messageReceived(final IoSession session,final Object message) throws Exception {
  if (message instanceof MetricRequest) {
    final MetricRequest request=(MetricRequest)message;
    if (request.getValid()) {
      Future<MetricResponse.Status> future=null;
      for (      final ImmutablePair<MetricType,MetricsProcessor> processor : processors) {
        if (request.getMetricType() == processor.getFirst()) {
          if (future == null) {
            future=processor.getSecond().process(request);
          }
 else {
            future=future.zip(processor.getSecond().process(request)).map(new Mapper<Tuple2<MetricResponse.Status,MetricResponse.Status>,MetricResponse.Status>(){
              @Override public MetricResponse.Status apply(              Tuple2<MetricResponse.Status,MetricResponse.Status> zipped){
                if (zipped._1() != MetricResponse.Status.SUCCESS || zipped._2() != MetricResponse.Status.SUCCESS) {
                  return MetricResponse.Status.FAILED;
                }
                return MetricResponse.Status.SUCCESS;
              }
            }
);
          }
        }
      }
      if (future != null) {
        future.onComplete(new OnComplete<MetricResponse.Status>(){
          @Override public void onComplete(          Throwable failure,          MetricResponse.Status status){
            if (failure != null) {
              writeIfConnected(session,new MetricResponse(MetricResponse.Status.FAILED));
            }
 else {
              writeIfConnected(session,new MetricResponse(status));
            }
          }
        }
);
        futureReaper.add(future);
      }
    }
  }
 else {
    writeIfConnected(session,new MetricResponse(MetricResponse.Status.INVALID));
  }
}"
8128,"/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}","/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  Log.info(""String_Node_Str"",hostname,port);
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}"
8129,"public OpenTSDBInMemoryServer(int port) throws IOException {
  this.server=new ServerSocket(port);
  Log.debug(""String_Node_Str"",port);
  this.server.setSoTimeout(1000);
  this.running=true;
}","public OpenTSDBInMemoryServer(int port) throws IOException {
  this.server=new ServerSocket(port);
  Log.debug(""String_Node_Str"",port);
  this.server.setSoTimeout(5000);
  this.running=true;
}"
8130,"@Override public void run(){
  while (running) {
    try {
      Socket connected=server.accept();
      BufferedReader fromClient=new BufferedReader(new InputStreamReader(connected.getInputStream()));
      String command=fromClient.readLine();
      connected.close();
      commands.add(command);
    }
 catch (    SocketTimeoutException e) {
      if (!running) {
        break;
      }
    }
catch (    IOException e) {
      Log.error(e.getMessage());
      break;
    }
  }
  try {
    server.close();
  }
 catch (  IOException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
}","@Override public void run(){
  while (running) {
    try {
      System.out.println(""String_Node_Str"");
      Socket connected=server.accept();
      BufferedReader fromClient=new BufferedReader(new InputStreamReader(connected.getInputStream()));
      System.out.println(""String_Node_Str"");
      String command=fromClient.readLine();
      System.out.println(""String_Node_Str"" + command);
      connected.close();
      commands.add(command);
    }
 catch (    SocketTimeoutException e) {
      if (!running) {
        break;
      }
    }
catch (    IOException e) {
      Log.error(e.getMessage());
      break;
    }
  }
  try {
    server.close();
  }
 catch (  IOException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
}"
8131,"private void end2endTest() throws Exception {
  final Injector injector=Guice.createInjector(new MetricsModules().getDistributedModules());
  final MetricsCollectionServerInterface serverInterface=injector.getInstance(MetricsCollectionServerInterface.class);
  Assert.assertNotNull(serverInterface);
  final int port=PortDetector.findFreePort();
  configuration.setInt(Constants.CFG_METRICS_COLLECTOR_SERVER_PORT,port);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          serverInterface.start(new String[]{},configuration);
        }
 catch (        ServerException e) {
          Assert.assertTrue(false);
        }
      }
    }
).start();
    Thread.sleep(10000);
    OverlordMetricsReporter.enable(1L,TimeUnit.SECONDS,configuration);
    CMetrics cmetrics=new CMetrics(MetricType.FlowSystem,""String_Node_Str"");
    for (int i=0; i < 10; ++i) {
      cmetrics.counter(""String_Node_Str"",1);
      cmetrics.counter(""String_Node_Str"",2);
      cmetrics.counter(""String_Node_Str"",3);
      cmetrics.meter(""String_Node_Str"",i);
      Thread.sleep(1000);
    }
    Thread.sleep(2000);
    List<Counter> counters=getMetric(new FlowArgument(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
    Assert.assertTrue(counters.size() > 0);
    for (    Counter counter : counters) {
      if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 10.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 20.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 30.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() > 2.79103);
      }
    }
  }
  finally {
    serverInterface.stop(true);
  }
}","private void end2endTest() throws Exception {
  final Injector injector=Guice.createInjector(new MetricsModules().getDistributedModules());
  final MetricsCollectionServerInterface serverInterface=injector.getInstance(MetricsCollectionServerInterface.class);
  Assert.assertNotNull(serverInterface);
  final int port=PortDetector.findFreePort();
  configuration.setInt(Constants.CFG_METRICS_COLLECTOR_SERVER_PORT,port);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          serverInterface.start(new String[]{},configuration);
        }
 catch (        ServerException e) {
          Assert.assertTrue(false);
        }
      }
    }
).start();
    Thread.sleep(10000);
    OverlordMetricsReporter.enable(1L,TimeUnit.SECONDS,configuration);
    CMetrics cmetrics=new CMetrics(MetricType.FlowUser,""String_Node_Str"");
    for (int i=0; i < 10; ++i) {
      cmetrics.counter(""String_Node_Str"",1);
      cmetrics.counter(""String_Node_Str"",2);
      cmetrics.counter(""String_Node_Str"",3);
      cmetrics.meter(""String_Node_Str"",i);
      Thread.sleep(1000);
    }
    Thread.sleep(2000);
    List<Counter> counters=getMetric(new FlowArgument(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
    Assert.assertTrue(counters.size() > 0);
    for (    Counter counter : counters) {
      if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 10.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 20.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 30.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() > 2.79103);
      }
    }
  }
  finally {
    serverInterface.stop(true);
  }
}"
8132,"@BeforeClass public static void beforeClass() throws Exception {
  connectionUrl=""String_Node_Str"";
  configuration=CConfiguration.create();
  zookeeper=new InMemoryZookeeper();
  if (zookeeper.getConnectionString() == null) {
    throw new Exception(""String_Node_Str"");
  }
  configuration.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper.getConnectionString());
  client=new MetricsFrontendServiceImpl(configuration);
  Assert.assertNotNull(client);
}","@BeforeClass public static void beforeClass() throws Exception {
  connectionUrl=""String_Node_Str"";
  configuration=CConfiguration.create();
  zookeeper=new InMemoryZookeeper();
  if (zookeeper.getConnectionString() == null) {
    throw new Exception(""String_Node_Str"");
  }
  configuration.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper.getConnectionString());
  configuration.set(Constants.CFG_METRICS_CONNECTION_URL,connectionUrl);
  client=new MetricsFrontendServiceImpl(configuration);
  Assert.assertNotNull(client);
}"
8133,"/** 
 * API to request time series data for a set of metrics.
 * @param request
 */
@Override public DataPoints getTimeSeries(TimeseriesRequest request) throws MetricsServiceException, TException {
  validateTimeseriesRequest(request);
  MetricTimeseriesLevel level=MetricTimeseriesLevel.FLOW_LEVEL;
  if (request.isSetLevel()) {
    level=request.getLevel();
  }
  Iterable<String> iterator=Iterables.transform(request.getMetrics(),new Function<String,String>(){
    @Override public String apply(    @Nullable String input){
      return ""String_Node_Str"" + input + ""String_Node_Str"";
    }
  }
);
  String values=Joiner.on(""String_Node_Str"").join(iterator);
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  long start=System.currentTimeMillis() / 1000;
  ;
  long end=start;
  DataPoints results=new DataPoints();
  try {
    if (request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
      end=request.getStartts();
    }
    if (!request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
    }
    if (request.isSetStartts() && request.getEndts() > 0) {
      if (request.getEndts() < request.getEndts()) {
        throw new MetricsServiceException(""String_Node_Str"");
      }
      start=request.getStartts();
      end=request.getEndts();
    }
    connection=getConnection();
    if (level == MetricTimeseriesLevel.RUNID_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getRunId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
 else     if (level == MetricTimeseriesLevel.ACCOUNT_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setLong(2,start);
      stmt.setLong(3,end);
    }
 else     if (level == MetricTimeseriesLevel.APPLICATION_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setLong(3,start);
      stmt.setLong(4,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOW_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setLong(4,start);
      stmt.setLong(5,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOWLET_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getFlowletId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
    rs=stmt.executeQuery();
    Map<String,List<DataPoint>> points=Maps.newHashMap();
    Map<String,Double> previousPoint=Maps.newHashMap();
    Map<String,Double> latest=Maps.newHashMap();
    while (rs.next()) {
      String metric=rs.getString(""String_Node_Str"");
      long ts=rs.getLong(""String_Node_Str"");
      double value=rs.getFloat(""String_Node_Str"");
      double newValue=value;
      if (request.isSetSummary() && request.isSetSummary()) {
        latest.put(metric,value);
      }
      if (previousPoint.containsKey(metric)) {
        newValue=Math.abs(value - previousPoint.get(metric));
      }
      previousPoint.put(metric,value);
      DataPoint point=new DataPoint(ts,newValue);
      if (points.containsKey(metric)) {
        points.get(metric).add(point);
      }
 else {
        List<DataPoint> newPoints=Lists.newArrayList();
        newPoints.add(point);
        points.put(metric,newPoints);
      }
    }
    results.setPoints(points);
    if (request.isSetSummary() && request.isSetSummary()) {
      results.setLatest(latest);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",request.toString(),e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}","/** 
 * API to request time series data for a set of metrics.
 * @param request
 */
@Override public DataPoints getTimeSeries(TimeseriesRequest request) throws MetricsServiceException, TException {
  validateTimeseriesRequest(request);
  MetricTimeseriesLevel level=MetricTimeseriesLevel.FLOW_LEVEL;
  if (request.isSetLevel()) {
    level=request.getLevel();
  }
  Iterable<String> iterator=Iterables.transform(request.getMetrics(),new Function<String,String>(){
    @Override public String apply(    @Nullable String input){
      return ""String_Node_Str"" + input + ""String_Node_Str"";
    }
  }
);
  String values=Joiner.on(""String_Node_Str"").join(iterator);
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  long start=System.currentTimeMillis() / 1000;
  ;
  long end=start;
  DataPoints results=new DataPoints();
  try {
    if (request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
      end=request.getStartts();
    }
    if (!request.isSetStartts() && request.getEndts() < 0) {
      start=request.getStartts() - request.getEndts() * 1000;
    }
    if (request.isSetStartts() && request.getEndts() > 0) {
      if (request.getEndts() < request.getEndts()) {
        throw new MetricsServiceException(""String_Node_Str"");
      }
      start=request.getStartts();
      end=request.getEndts();
    }
    connection=getConnection();
    if (level == MetricTimeseriesLevel.RUNID_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getRunId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
 else     if (level == MetricTimeseriesLevel.ACCOUNT_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setLong(2,start);
      stmt.setLong(3,end);
    }
 else     if (level == MetricTimeseriesLevel.APPLICATION_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setLong(3,start);
      stmt.setLong(4,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOW_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setLong(4,start);
      stmt.setLong(5,end);
    }
 else     if (level == MetricTimeseriesLevel.FLOWLET_LEVEL) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"").append(values).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(""String_Node_Str"");
      stmt=connection.prepareStatement(sb.toString());
      stmt.setString(1,request.getArgument().getAccountId());
      stmt.setString(2,request.getArgument().getApplicationId());
      stmt.setString(3,request.getArgument().getFlowId());
      stmt.setString(4,request.getArgument().getFlowletId());
      stmt.setLong(5,start);
      stmt.setLong(6,end);
    }
    rs=stmt.executeQuery();
    Map<String,List<DataPoint>> points=Maps.newHashMap();
    Map<String,Double> previousPoint=Maps.newHashMap();
    Map<String,Double> latest=Maps.newHashMap();
    while (rs.next()) {
      String metric=rs.getString(""String_Node_Str"");
      long ts=rs.getLong(""String_Node_Str"");
      double value=rs.getFloat(""String_Node_Str"");
      double newValue=value;
      if (request.isSetSummary() && request.isSetSummary()) {
        latest.put(metric,value);
      }
      if (previousPoint.containsKey(metric)) {
        newValue=Math.abs(value - previousPoint.get(metric));
      }
      previousPoint.put(metric,value);
      DataPoint point=new DataPoint(ts,newValue);
      if (points.containsKey(metric)) {
        points.get(metric).add(point);
      }
 else {
        List<DataPoint> newPoints=Lists.newArrayList();
        newPoints.add(point);
        points.put(metric,newPoints);
      }
    }
    for (    Map.Entry<String,List<DataPoint>> entry : points.entrySet()) {
      entry.getValue().remove(0);
    }
    results.setPoints(points);
    if (request.isSetSummary() && request.isSetSummary()) {
      results.setLatest(latest);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",request.toString(),e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}"
8134,"/** 
 * FIXME: Not sure why this test is failing.
 * @throws Exception
 */
public void end2endTest() throws Exception {
  final Injector injector=Guice.createInjector(new MetricsModules().getDistributedModules());
  final MetricsCollectionServerInterface serverInterface=injector.getInstance(MetricsCollectionServerInterface.class);
  Assert.assertNotNull(serverInterface);
  final int port=PortDetector.findFreePort();
  configuration.setInt(Constants.CFG_METRICS_COLLECTOR_SERVER_PORT,port);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          serverInterface.start(new String[]{},configuration);
        }
 catch (        ServerException e) {
          Assert.assertTrue(false);
        }
      }
    }
).start();
    Thread.sleep(10000);
    OverlordMetricsReporter.enable(1L,TimeUnit.SECONDS,configuration);
    CMetrics cmetrics=new CMetrics(MetricType.FlowUser,""String_Node_Str"");
    for (int i=0; i < 10; ++i) {
      cmetrics.counter(""String_Node_Str"",1);
      cmetrics.counter(""String_Node_Str"",2);
      cmetrics.counter(""String_Node_Str"",3);
      cmetrics.meter(""String_Node_Str"",i);
      Thread.sleep(1000);
    }
    Thread.sleep(2000);
    List<Counter> counters=getMetric(new FlowArgument(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
    Assert.assertTrue(counters.size() > 0);
    for (    Counter counter : counters) {
      if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 10.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 20.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 30.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() > 2.79103);
      }
    }
  }
  finally {
    serverInterface.stop(true);
  }
}","/** 
 * FIXME: Not sure why this test is failing.
 * @throws Exception
 */
public void end2endTest() throws Exception {
  final Injector injector=Guice.createInjector(new MetricsModules().getDistributedModules());
  final MetricsCollectionServerInterface serverInterface=injector.getInstance(MetricsCollectionServerInterface.class);
  Assert.assertNotNull(serverInterface);
  final int port=PortDetector.findFreePort();
  configuration.setInt(Constants.CFG_METRICS_COLLECTOR_SERVER_PORT,port);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          serverInterface.start(new String[]{},configuration);
        }
 catch (        ServerException e) {
          Assert.assertTrue(false);
        }
      }
    }
).start();
    Thread.sleep(10000);
    OverlordMetricsReporter.enable(1L,TimeUnit.SECONDS,configuration);
    CMetrics cmetrics=new CMetrics(MetricType.FlowSystem,""String_Node_Str"");
    for (int i=0; i < 10; ++i) {
      cmetrics.counter(""String_Node_Str"",1);
      cmetrics.counter(""String_Node_Str"",2);
      cmetrics.counter(""String_Node_Str"",3);
      cmetrics.meter(""String_Node_Str"",i);
      Thread.sleep(1000);
    }
    Thread.sleep(2000);
    List<Counter> counters=getMetric(new FlowArgument(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
    Assert.assertTrue(counters.size() > 0);
    for (    Counter counter : counters) {
      if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 10.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 20.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() >= 30.0f);
      }
 else       if (counter.getQualifier().equals(""String_Node_Str"") && counter.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(counter.getValue() > 2.79103);
      }
    }
  }
  finally {
    serverInterface.stop(true);
  }
}"
8135,"/** 
 * Clears
 */
public static synchronized void clear(String name){
  for (  Map.Entry<MetricName,Metric> entry : Metrics.defaultRegistry().allMetrics().entrySet()) {
    if (entry.getKey().getGroup().contains(name)) {
      Metrics.defaultRegistry().removeMetric(entry.getKey());
    }
  }
}","/** 
 * Clears metrics for a given name.
 */
public static synchronized void clear(String name){
  for (  Map.Entry<MetricName,Metric> entry : Metrics.defaultRegistry().allMetrics().entrySet()) {
    if (entry.getKey().getGroup().contains(name)) {
      Metrics.defaultRegistry().removeMetric(entry.getKey());
    }
  }
}"
8136,"/** 
 * Creates a new AbstractPollingReporter instance
 * @param registry the MetricRegistry containing the metrics this reporter willreport
 * @param configuration instance of configuration object.
 */
protected OverlordMetricsReporter(MetricsRegistry registry,CConfiguration configuration){
  super(registry,""String_Node_Str"");
  Preconditions.checkNotNull(configuration);
  Preconditions.checkNotNull(registry);
  this.configuration=configuration;
  this.vm=VirtualMachineMetrics.getInstance();
  this.hostname=getDefaultHostLabel();
  try {
    this.client=new MetricsClient(configuration);
  }
 catch (  ServiceDiscoveryClientException e) {
    Log.error(""String_Node_Str"");
    this.client=null;
  }
}","/** 
 * Creates a new AbstractPollingReporter instance
 * @param registry the MetricRegistry containing the metrics this reporter willreport
 * @param configuration instance of configuration object.
 */
protected OverlordMetricsReporter(MetricsRegistry registry,CConfiguration configuration){
  super(registry,""String_Node_Str"");
  Preconditions.checkNotNull(configuration);
  Preconditions.checkNotNull(registry);
  this.vm=VirtualMachineMetrics.getInstance();
  this.hostname=getDefaultHostLabel();
  try {
    this.client=new MetricsClient(configuration);
  }
 catch (  ServiceDiscoveryClientException e) {
    Log.error(""String_Node_Str"");
    this.client=null;
  }
}"
8137,"public static synchronized void disable(){
  if (reporter != null) {
    reporter.shutdown();
    reporter=null;
  }
}","/** 
 * Disables the overlord metric reporter.
 */
public static synchronized void disable(){
  if (reporter != null) {
    reporter.shutdown();
    reporter=null;
  }
}"
8138,"public FlowMetricsProcessor(CConfiguration configuration) throws Exception {
  this.connectionUrl=configuration.get(Constants.CFG_METRICS_CONNECTION_URL,Constants.DEFAULT_METIRCS_CONNECTION_URL);
  this.type=DBUtils.loadDriver(connectionUrl);
  CommonDataSource dataSource;
  if (this.type == DBUtils.DBType.MYSQL) {
    MysqlConnectionPoolDataSource mysqlDataSource=new MysqlConnectionPoolDataSource();
    mysqlDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(mysqlDataSource,40);
  }
 else   if (this.type == DBUtils.DBType.HSQLDB) {
    JDBCPooledDataSource jdbcDataSource=new JDBCPooledDataSource();
    jdbcDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(jdbcDataSource,40);
  }
  DBUtils.createMetricsTables(getConnection(),this.type);
}","public FlowMetricsProcessor(CConfiguration configuration) throws Exception {
  this.connectionUrl=configuration.get(Constants.CFG_METRICS_CONNECTION_URL,Constants.DEFAULT_METIRCS_CONNECTION_URL);
  this.type=DBUtils.loadDriver(connectionUrl);
  if (this.type == DBUtils.DBType.MYSQL) {
    MysqlConnectionPoolDataSource mysqlDataSource=new MysqlConnectionPoolDataSource();
    mysqlDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(mysqlDataSource,40);
  }
 else   if (this.type == DBUtils.DBType.HSQLDB) {
    JDBCPooledDataSource jdbcDataSource=new JDBCPooledDataSource();
    jdbcDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(jdbcDataSource,40);
  }
  DBUtils.createMetricsTables(getConnection(),this.type);
}"
8139,"/** 
 * @return true if all tables created; false otherwise
 */
public static boolean createMetricsTables(Connection connection,DBType type){
  if (type != DBUtils.DBType.HSQLDB) {
    return true;
  }
  String metricsTableCreateDDL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    connection.prepareStatement(""String_Node_Str"").execute();
    connection.prepareStatement(metricsTableCreateDDL).execute();
  }
 catch (  SQLException e) {
    if (!e.getSQLState().equalsIgnoreCase(""String_Node_Str"")) {
      Log.warn(""String_Node_Str"",e.getMessage());
      return false;
    }
  }
  return true;
}","/** 
 * @return true if all tables created; false otherwise
 */
public static boolean createMetricsTables(Connection connection,DBType type){
  if (type != DBUtils.DBType.HSQLDB) {
    return true;
  }
  String metricsTableCreateDDL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  PreparedStatement stmt=null;
  try {
    stmt=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    stmt.execute();
    connection.prepareStatement(metricsTableCreateDDL).execute();
  }
 catch (  SQLException e) {
    if (!e.getSQLState().equalsIgnoreCase(""String_Node_Str"")) {
      Log.warn(""String_Node_Str"",e.getMessage());
      return false;
    }
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return true;
}"
8140,"/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String sql=null;
  if (request.getName() == null || request.getName().size() == 0) {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + values + ""String_Node_Str"";
  }
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=getConnection().prepareStatement(sql);
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        Log.warn(""String_Node_Str"",e.getMessage());
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        Log.warn(""String_Node_Str"",e.getMessage());
      }
    }
  }
  return results;
}","/** 
 * Retrieves the counters as per the   {@link CounterRequest} specification.
 * @param request for counters.
 * @return list of {@link Counter}
 * @throws MetricsServiceException
 * @throws TException raised when thrift related issues.
 */
@Override public List<Counter> getCounters(CounterRequest request) throws MetricsServiceException, TException {
  List<Counter> results=Lists.newArrayList();
  validateArguments(request.getArgument());
  String sql=null;
  if (request.getName() == null || request.getName().size() == 0) {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  }
 else {
    Iterable<String> iterator=Iterables.transform(request.getName(),new Function<String,String>(){
      @Override public String apply(      @Nullable String input){
        return ""String_Node_Str"" + input + ""String_Node_Str"";
      }
    }
);
    String values=Joiner.on(""String_Node_Str"").join(iterator);
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + values + ""String_Node_Str"";
  }
  Connection connection=null;
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    connection=getConnection();
    stmt=connection.prepareStatement(sql);
    stmt.setString(1,request.getArgument().getAccountId());
    stmt.setString(2,request.getArgument().getApplicationId());
    stmt.setString(3,request.getArgument().getFlowId());
    rs=stmt.executeQuery();
    while (rs.next()) {
      results.add(new Counter(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getFloat(""String_Node_Str"")));
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      Log.warn(""String_Node_Str"",e.getMessage());
    }
  }
  return results;
}"
8141,"/** 
 * @return a {@link java.sql.Connection} based on the <code>connectionUrl</code>
 * @throws java.sql.SQLException thrown in case of any error.
 */
private synchronized Connection getConnection() throws SQLException {
  if (connection == null) {
    connection=DriverManager.getConnection(connectionUrl);
  }
  return connection;
}","/** 
 * @return a {@link java.sql.Connection} based on the <code>connectionUrl</code>
 * @throws java.sql.SQLException thrown in case of any error.
 */
private synchronized Connection getConnection() throws SQLException {
  if (poolManager != null) {
    return poolManager.getValidConnection();
  }
  return null;
}"
8142,"public MetricsFrontendServiceImpl(CConfiguration configuration) throws ClassNotFoundException, SQLException {
  this.connectionUrl=configuration.get(Constants.CFG_METRICS_CONNECTION_URL,Constants.DEFAULT_METIRCS_CONNECTION_URL);
  this.type=DBUtils.loadDriver(connectionUrl);
  DBUtils.createMetricsTables(getConnection(),this.type);
}","public MetricsFrontendServiceImpl(CConfiguration configuration) throws ClassNotFoundException, SQLException {
  this.connectionUrl=configuration.get(Constants.CFG_METRICS_CONNECTION_URL,Constants.DEFAULT_METIRCS_CONNECTION_URL);
  this.type=DBUtils.loadDriver(connectionUrl);
  if (this.type == DBUtils.DBType.MYSQL) {
    MysqlConnectionPoolDataSource mysqlDataSource=new MysqlConnectionPoolDataSource();
    mysqlDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(mysqlDataSource,40);
  }
 else   if (this.type == DBUtils.DBType.HSQLDB) {
    JDBCPooledDataSource jdbcDataSource=new JDBCPooledDataSource();
    jdbcDataSource.setUrl(connectionUrl);
    poolManager=new DBConnectionPoolManager(jdbcDataSource,40);
  }
  DBUtils.createMetricsTables(getConnection(),this.type);
}"
8143,"/** 
 * Load Configuration looks for all of the config xml files in the resources directory, and loads all of the properties into those files.
 */
private void loadConfiguration(){
}","/** 
 * Load Configuration looks for all of the config xml files in the resources directory, and loads all of the properties into those files.
 */
private void loadConfiguration(){
  myConfiguration=CConfiguration.create();
}"
8144,"/** 
 * Sends the metric request to openTSDB. <p> If connection is not established, then it attempts to connect N times before bailing out. </p>
 * @param request
 * @return
 * @throws IOException
 */
public WriteFuture send(String request) throws IOException {
  IoSession session=connect();
  if (session == null) {
    int attempts=RETRY_ATTEMPTS;
    while (attempts > 0) {
      try {
        Thread.sleep(INTRA_CONNECT_SLEEP_MS);
      }
 catch (      InterruptedException e) {
      }
      attempts--;
      session=connect();
    }
    if (attempts < 1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return session.write(request);
}","/** 
 * Sends the metric request to openTSDB. <p> If connection is not established, then it attempts to connect N times before bailing out. </p>
 * @param request
 * @return
 * @throws IOException
 */
public WriteFuture send(String request) throws IOException {
  session=connect();
  if (session == null) {
    int attempts=RETRY_ATTEMPTS;
    while (attempts > 0) {
      try {
        Thread.sleep(INTRA_CONNECT_SLEEP_MS);
      }
 catch (      InterruptedException e) {
      }
      attempts--;
      session=connect();
    }
    if (attempts < 1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return session.write(request);
}"
8145,"/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    session=connectFuture.getSession();
    return session;
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}","/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}"
8146,"/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}","/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    session=connectFuture.getSession();
    return session;
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}"
8147,"/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}","/** 
 * Provides a new session or selects from one of the available session.
 * @return Instance of session or null if cannot find or create one.
 */
private IoSession connect(){
  if (session != null && session.isConnected()) {
    return session;
  }
  ConnectFuture connectFuture=connector.connect(new InetSocketAddress(hostname,port));
  connectFuture.awaitUninterruptibly();
  try {
    return connectFuture.getSession();
  }
 catch (  RuntimeIoException e) {
    Log.warn(""String_Node_Str"",e.getMessage());
  }
  return null;
}"
8148,"/** 
 * Blocking call that waits for connections and serves command one client at a time. <p> Not fancy multi-threaded server and don't expect it to be :-) </p>
 * @throws CommandPortException
 */
public void serve() throws CommandPortException {
  try {
    port=serverSocket.getLocalPort();
    while (running) {
      Socket socket=serverSocket.accept();
      BufferedReader fromClient=new BufferedReader(new InputStreamReader(socket.getInputStream()));
      DataOutputStream toClient=new DataOutputStream(socket.getOutputStream());
      String command=fromClient.readLine();
      if (command != null) {
        if (""String_Node_Str"".equals(command)) {
          toClient.writeBytes(helpString);
        }
 else         if (listeners.containsKey(command)) {
          String message=listeners.get(command).act();
          toClient.writeBytes(message + ""String_Node_Str"");
        }
      }
      socket.close();
    }
  }
 catch (  IOException e) {
    throw new CommandPortException(e.getMessage());
  }
}","/** 
 * Blocking call that waits for connections and serves command one client at a time. <p> Not fancy multi-threaded server and don't expect it to be :-) </p>
 * @throws CommandPortException
 */
public void serve() throws CommandPortException {
  try {
    port=serverSocket.getLocalPort();
    serverSocket.setSoTimeout(SERVERSOCKET_TIMEOUT);
    while (running) {
      Socket socket=null;
      try {
        socket=serverSocket.accept();
      }
 catch (      SocketTimeoutException e) {
        continue;
      }
      BufferedReader fromClient=new BufferedReader(new InputStreamReader(socket.getInputStream()));
      DataOutputStream toClient=new DataOutputStream(socket.getOutputStream());
      String command=fromClient.readLine();
      if (command != null) {
        if (""String_Node_Str"".equals(command)) {
          toClient.writeBytes(helpString);
        }
 else         if (listeners.containsKey(command)) {
          String message=listeners.get(command).act();
          toClient.writeBytes(message + ""String_Node_Str"");
        }
      }
      socket.close();
    }
  }
 catch (  IOException e) {
    throw new CommandPortException(e.getMessage());
  }
}"
8149,"@Override public void process(Tuple tuple,TupleContext tupleContext,OutputCollector outputCollector){
  if (Common.debug)   System.out.println(this.getClass().getSimpleName() + ""String_Node_Str"" + tuple);
  long randomNumber=tuple.get(""String_Node_Str"");
  boolean isEven=(randomNumber % 2) == 0;
  Increment increment;
  if (isEven)   increment=new Increment(""String_Node_Str"".getBytes(),1);
 else   increment=new Increment(""String_Node_Str"".getBytes(),1);
  outputCollector.emit(increment);
}","@Override public void process(Tuple tuple,TupleContext tupleContext,OutputCollector outputCollector){
  if (Common.debug)   System.out.println(this.getClass().getSimpleName() + ""String_Node_Str"" + tuple);
  long randomNumber=((Long)tuple.get(""String_Node_Str"")).longValue();
  boolean isEven=(randomNumber % 2) == 0;
  Increment increment;
  if (isEven)   increment=new Increment(""String_Node_Str"".getBytes(),1);
 else   increment=new Increment(""String_Node_Str"".getBytes(),1);
  outputCollector.emit(increment);
}"
8150,"/** 
 * FIXME: This was done in hurry and can be written in a much better way.
 * @param accountId
 * @return
 */
@Override public List<FlowState> getFlows(String accountId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> runs=Maps.newHashMap();
  Map<String,Integer> deployed=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  List<FlowState> result=Lists.newArrayList();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String app=rs.getString(""String_Node_Str"");
      String flow=rs.getString(""String_Node_Str"");
      String appFlow=String.format(""String_Node_Str"",app,flow);
      Integer timestamp=rs.getInt(""String_Node_Str"");
      int state=rs.getInt(""String_Node_Str"");
      if (!deployed.containsKey(appFlow)) {
        deployed.put(appFlow,1);
        FlowState status=new FlowState();
        status.setApplicationId(rs.getString(""String_Node_Str""));
        status.setFlowId(rs.getString(""String_Node_Str""));
        status.setCurrentState(StateChangeType.DEPLOYED.name());
        status.setLastStarted(-1);
        status.setLastStopped(-1);
        status.setRuns(0);
        result.add(status);
      }
      if (state == StateChangeType.STARTING.getType() || state == StateChangeType.RUNNING.getType()) {
        started.put(appFlow,timestamp);
      }
 else       if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(appFlow,timestamp);
        if (runs.containsKey(flow)) {
          int run=runs.get(flow).intValue();
          runs.put(appFlow,run + 1);
        }
 else {
          runs.put(appFlow,1);
        }
      }
      states.put(appFlow,state);
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",accountId,e.getMessage());
  }
  for (  FlowState state : result) {
    String flow=state.getFlowId();
    String app=state.getApplicationId();
    String appFlow=String.format(""String_Node_Str"",app,flow);
    if (started.containsKey(appFlow)) {
      state.setLastStarted(started.get(appFlow));
    }
    if (stopped.containsKey(appFlow)) {
      state.setLastStopped(stopped.get(appFlow));
    }
    if (runs.containsKey(appFlow)) {
      state.setRuns(runs.get(appFlow));
    }
    if (states.containsKey(appFlow)) {
      int i=states.get(appFlow);
      state.setCurrentState(StateChangeType.value(i).name());
    }
  }
  return result;
}","/** 
 * FIXME: This was done in hurry and can be written in a much better way.
 * @param accountId
 * @return
 */
@Override public List<FlowState> getFlows(String accountId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> runs=Maps.newHashMap();
  Map<String,Integer> deployed=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  List<FlowState> result=Lists.newArrayList();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String app=rs.getString(""String_Node_Str"");
      String flow=rs.getString(""String_Node_Str"");
      String appFlow=String.format(""String_Node_Str"",app,flow);
      Integer timestamp=rs.getInt(""String_Node_Str"");
      int state=rs.getInt(""String_Node_Str"");
      if (!deployed.containsKey(appFlow)) {
        deployed.put(appFlow,1);
        FlowState status=new FlowState();
        status.setApplicationId(rs.getString(""String_Node_Str""));
        status.setFlowId(rs.getString(""String_Node_Str""));
        status.setCurrentState(StateChangeType.DEPLOYED.name());
        status.setLastStarted(-1);
        status.setLastStopped(-1);
        status.setRuns(0);
        result.add(status);
      }
      if (state == StateChangeType.DELETED.getType()) {
        started.remove(appFlow);
        stopped.remove(appFlow);
        runs.remove(appFlow);
        states.remove(appFlow);
      }
 else       if (state == StateChangeType.STARTING.getType() || state == StateChangeType.RUNNING.getType()) {
        started.put(appFlow,timestamp);
      }
 else       if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(appFlow,timestamp);
        if (runs.containsKey(flow)) {
          int run=runs.get(flow).intValue();
          runs.put(appFlow,run + 1);
        }
 else {
          runs.put(appFlow,1);
        }
      }
      states.put(appFlow,state);
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",accountId,e.getMessage());
  }
  for (  FlowState state : result) {
    String flow=state.getFlowId();
    String app=state.getApplicationId();
    String appFlow=String.format(""String_Node_Str"",app,flow);
    if (started.containsKey(appFlow)) {
      state.setLastStarted(started.get(appFlow));
    }
 else {
      result.remove(state);
      continue;
    }
    if (stopped.containsKey(appFlow)) {
      state.setLastStopped(stopped.get(appFlow));
    }
    if (runs.containsKey(appFlow)) {
      state.setRuns(runs.get(appFlow));
    }
    if (states.containsKey(appFlow)) {
      int i=states.get(appFlow);
      state.setCurrentState(StateChangeType.value(i).name());
    }
  }
  return result;
}"
8151,"/** 
 * Starts the   {@link com.continuuity.common.service.Server}
 * @param args arguments for the service
 * @param conf instance of configuration object.
 */
@Override public void start(String[] args,CConfiguration conf) throws ServerException {
  String zkEnsemble=conf.get(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
  try {
    executorService=Executors.newCachedThreadPool();
    client=CuratorFrameworkFactory.newClient(zkEnsemble,new RetryUntilElapsed(30000,2000));
    client.start();
    listener=StateChange.Server.newListener(client);
    listener.listen(STATE_CHANGE_QUEUE,callback);
    String portProperty=conf.get(Constants.CFG_FLOW_MONITOR_SERVER_PORT,Constants.DEFAULT_FLOW_MONITOR_SERVER_PORT);
    int port=Integer.valueOf(portProperty);
    String threadCntProperty=conf.get(Constants.CFG_RESOURCE_MANAGER_SERVER_THREADS,Constants.DEFAULT_FLOW_MONITOR_SERVER_THREADS);
    int threads=Integer.valueOf(threadCntProperty);
    MetricsImpl serviceImpl=new MetricsImpl(handler);
    THsHaServer.Args serverArgs=new THsHaServer.Args(new TNonblockingServerSocket(port)).executorService(executorService).processor(new FlowMonitor.Processor(serviceImpl)).workerThreads(threads);
    server=new THsHaServer(serverArgs);
    new Thread(new Runnable(){
      @Override public void run(){
        server.serve();
      }
    }
).start();
  }
 catch (  IOException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
catch (  TTransportException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
catch (  StateChangeListenerException e) {
    Log.error(""String_Node_Str"");
  }
}","/** 
 * Starts the   {@link com.continuuity.common.service.Server}
 * @param args arguments for the service
 * @param conf instance of configuration object.
 */
@Override public void start(String[] args,CConfiguration conf) throws ServerException {
  String zkEnsemble=conf.get(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
  try {
    executorService=Executors.newCachedThreadPool();
    client=CuratorFrameworkFactory.newClient(zkEnsemble,new RetryUntilElapsed(30000,2000));
    client.start();
    listener=StateChange.Server.newListener(client);
    listener.listen(STATE_CHANGE_QUEUE,callback);
    String portProperty=conf.get(Constants.CFG_FLOW_MONITOR_SERVER_PORT,Constants.DEFAULT_FLOW_MONITOR_SERVER_PORT);
    int port=Integer.valueOf(portProperty);
    String threadCntProperty=conf.get(Constants.CFG_FLOW_MONITOR_SERVER_THREADS,Constants.DEFAULT_FLOW_MONITOR_SERVER_THREADS);
    int threads=Integer.valueOf(threadCntProperty);
    MetricsImpl serviceImpl=new MetricsImpl(handler);
    THsHaServer.Args serverArgs=new THsHaServer.Args(new TNonblockingServerSocket(port)).executorService(executorService).processor(new FlowMonitor.Processor(serviceImpl)).workerThreads(threads);
    server=new THsHaServer(serverArgs);
    new Thread(new Runnable(){
      @Override public void run(){
        server.serve();
      }
    }
).start();
  }
 catch (  IOException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
catch (  TTransportException e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
catch (  StateChangeListenerException e) {
    Log.error(""String_Node_Str"");
  }
}"
8152,"public void doMain(String args[]) throws Exception {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  connection=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OptionsParser.init(this,args,System.out);
  try {
    CConfiguration conf=CConfiguration.create();
    if (zookeeper != null) {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper);
    }
 else {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
    }
    connection.setAutoCommit(true);
    createTable();
    clearFlowStateTable();
    populateStateTable();
    Thread.sleep(10000);
    connection.commit();
    connection.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void doMain(String args[]) throws Exception {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  connection=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OptionsParser.init(this,args,""String_Node_Str"",""String_Node_Str"",System.out);
  try {
    CConfiguration conf=CConfiguration.create();
    if (zookeeper != null) {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper);
    }
 else {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
    }
    connection.setAutoCommit(true);
    createTable();
    clearFlowStateTable();
    populateStateTable();
    Thread.sleep(10000);
    connection.commit();
    connection.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
8153,"public void doMain(String args[]){
  OptionsParser.init(this,args,System.out);
  try {
    CConfiguration conf=CConfiguration.create();
    if (zookeeper != null) {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper);
    }
 else {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
    }
    Injector injector=Guice.createInjector(new MetricsModules().getSingleNodeModules());
    MetricsServer service=injector.getInstance(MetricsServer.class);
    service.start(args,conf);
  }
 catch (  Exception e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
}","public void doMain(String args[]){
  OptionsParser.init(this,args,""String_Node_Str"",""String_Node_Str"",System.out);
  try {
    CConfiguration conf=CConfiguration.create();
    if (zookeeper != null) {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,zookeeper);
    }
 else {
      conf.set(Constants.CFG_ZOOKEEPER_ENSEMBLE,Constants.DEFAULT_ZOOKEEPER_ENSEMBLE);
    }
    Injector injector=Guice.createInjector(new MetricsModules().getSingleNodeModules());
    MetricsServer service=injector.getInstance(MetricsServer.class);
    service.start(args,conf);
  }
 catch (  Exception e) {
    Log.error(""String_Node_Str"",e.getMessage());
  }
}"
8154,"@Override public void add(FlowMetric metric){
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setLong(1,metric.getTimestamp());
    stmt.setString(2,metric.getAccountId());
    stmt.setString(3,metric.getApplication());
    stmt.setString(4,metric.getFlow());
    stmt.setString(5,metric.getRid());
    stmt.setString(6,metric.getVersion());
    stmt.setString(7,metric.getFlowlet());
    stmt.setString(8,metric.getInstance());
    stmt.setString(9,metric.getMetric());
    stmt.setLong(10,metric.getValue());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",metric.toString(),e.getMessage());
  }
}","@Override public void add(FlowMetric metric){
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setInt(1,metric.getTimestamp());
    stmt.setString(2,metric.getAccountId());
    stmt.setString(3,metric.getApplication());
    stmt.setString(4,metric.getFlow());
    stmt.setString(5,metric.getRid());
    stmt.setString(6,metric.getVersion());
    stmt.setString(7,metric.getFlowlet());
    stmt.setString(8,metric.getInstance());
    stmt.setString(9,metric.getMetric());
    stmt.setLong(10,metric.getValue());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",metric.toString(),e.getMessage());
  }
}"
8155,"/** 
 * @param accountId
 * @param app
 * @param flow
 * @param rid
 * @return
 */
@Override public List<Metric> getFlowMetric(String accountId,String app,String flow,String rid){
  List<Metric> result=Lists.newArrayList();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    stmt.setString(2,app);
    stmt.setString(3,flow);
    stmt.setString(4,rid);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Metric metric=new Metric();
      metric.setId(rs.getString(""String_Node_Str""));
      metric.setType(MetricType.FLOWLET);
      metric.setName(rs.getString(""String_Node_Str""));
      metric.setValue(rs.getLong(""String_Node_Str""));
      result.add(metric);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",new Object[]{app,flow,rid});
  }
  return result;
}","/** 
 * @param accountId
 * @param app
 * @param flow
 * @param rid
 * @return
 */
@Override public List<Metric> getFlowMetric(String accountId,String app,String flow,String rid){
  List<Metric> result=Lists.newArrayList();
  String maxTimeSQL=""String_Node_Str"" + ""String_Node_Str"";
  int maxTimestamp=-1;
  try {
    PreparedStatement maxTimeStmt=connection.prepareStatement(maxTimeSQL);
    maxTimeStmt.setString(1,accountId);
    maxTimeStmt.setString(2,app);
    maxTimeStmt.setString(3,flow);
    maxTimeStmt.setString(4,rid);
    ResultSet rs=maxTimeStmt.executeQuery();
    rs.next();
    maxTimestamp=rs.getInt(""String_Node_Str"");
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"" + new Object[]{app,flow,rid});
    return result;
  }
  if (maxTimestamp == -1) {
    Log.warn(""String_Node_Str"" + new Object[]{app,flow,rid});
    return result;
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    stmt.setString(2,app);
    stmt.setString(3,flow);
    stmt.setString(4,rid);
    stmt.setInt(5,maxTimestamp);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Metric metric=new Metric();
      metric.setId(rs.getString(""String_Node_Str""));
      metric.setType(MetricType.FLOWLET);
      metric.setName(rs.getString(""String_Node_Str""));
      metric.setValue(rs.getLong(""String_Node_Str""));
      result.add(metric);
    }
  }
 catch (  SQLException e) {
    Log.warn(""String_Node_Str"",new Object[]{app,flow,rid});
  }
  return result;
}"
8156,"@Override public Module getDistributedModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsRegisteredServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}","@Override public Module getDistributedModules(){
  loadHyperSQLDriver();
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsRegisteredServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}"
8157,"@Override public Module getSingleNodeModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsSingleNodeServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}","@Override public Module getSingleNodeModules(){
  loadHyperSQLDriver();
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsSingleNodeServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}"
8158,"@Override public Module getInMemoryModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsSingleNodeServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}","@Override public Module getInMemoryModules(){
  loadHyperSQLDriver();
  return new AbstractModule(){
    @Override protected void configure(){
      bind(MetricsServer.class).to(MetricsSingleNodeServer.class);
      bind(MetricsHandler.class).to(SQLMetricsHandler.class);
      bind(StateChangeCallback.class).to(SQLStateChangeSyncer.class);
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(""String_Node_Str"");
    }
  }
;
}"
8159,"/** 
 * FIXME : I am probably most duplicate of getFlows - Refactor me.
 * @param accountId for which the flows belong to.
 * @param appId  to which the flows belong to.
 * @param flowId is the id of the flow runs to be returned.
 * @return
 */
@Override public List<FlowRun> getFlowHistory(String accountId,String appId,String flowId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  List<FlowRun> runs=Lists.newArrayList();
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    stmt.setString(2,appId);
    stmt.setString(3,flowId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String rid=rs.getString(""String_Node_Str"");
      if (rid == null) {
        continue;
      }
      int state=rs.getInt(""String_Node_Str"");
      int timestamp=rs.getInt(""String_Node_Str"");
      if (!started.containsKey(rid)) {
        FlowRun run=new FlowRun();
        run.setStartTime(-1);
        run.setEndTime(-1);
        run.setRunId(rid);
        run.setEndStatus(""String_Node_Str"");
        runs.add(run);
      }
      if (state == StateChangeType.STARTING.getType() || state == StateChangeType.STARTED.getType()) {
        started.put(rid,timestamp);
      }
      if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(rid,timestamp);
      }
      states.put(rid,state);
    }
    for (    FlowRun run : runs) {
      String runId=run.getRunId();
      if (started.containsKey(runId)) {
        run.setStartTime(started.get(runId));
      }
      if (stopped.containsKey(runId)) {
        run.setEndTime(stopped.get(runId));
      }
      if (states.containsKey(runId)) {
        run.setEndStatus(StateChangeType.value(states.get(runId)).name());
      }
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",new Object[]{accountId,appId,flowId,e.getMessage()});
  }
  return runs;
}","/** 
 * FIXME : I am probably most duplicate of getFlows - Refactor me.
 * @param accountId for which the flows belong to.
 * @param appId  to which the flows belong to.
 * @param flowId is the id of the flow runs to be returned.
 * @return
 */
@Override public List<FlowRun> getFlowHistory(String accountId,String appId,String flowId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  List<FlowRun> runs=Lists.newArrayList();
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    stmt.setString(2,appId);
    stmt.setString(3,flowId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String rid=rs.getString(""String_Node_Str"");
      if (rid == null) {
        continue;
      }
      int state=rs.getInt(""String_Node_Str"");
      if (state == StateChangeType.DEPLOYED.getType()) {
        continue;
      }
      int timestamp=rs.getInt(""String_Node_Str"");
      if (!started.containsKey(rid)) {
        FlowRun run=new FlowRun();
        run.setStartTime(-1);
        run.setEndTime(-1);
        run.setRunId(rid);
        run.setEndStatus(""String_Node_Str"");
        runs.add(run);
      }
      if (state == StateChangeType.STARTING.getType() || state == StateChangeType.RUNNING.getType()) {
        started.put(rid,timestamp);
      }
      if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(rid,timestamp);
      }
      states.put(rid,state);
    }
    for (    FlowRun run : runs) {
      String runId=run.getRunId();
      if (started.containsKey(runId)) {
        run.setStartTime(started.get(runId));
      }
      if (stopped.containsKey(runId)) {
        run.setEndTime(stopped.get(runId));
      }
      if (states.containsKey(runId)) {
        run.setEndStatus(StateChangeType.value(states.get(runId)).name());
      }
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",new Object[]{accountId,appId,flowId,e.getMessage()});
  }
  return runs;
}"
8160,"/** 
 * FIXME: This was done in hurry and can be written in a much better way.
 * @param accountId
 * @return
 */
@Override public List<FlowState> getFlows(String accountId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> runs=Maps.newHashMap();
  Map<String,Integer> deployed=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  List<FlowState> result=Lists.newArrayList();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String app=rs.getString(""String_Node_Str"");
      String flow=rs.getString(""String_Node_Str"");
      String appFlow=String.format(""String_Node_Str"",app,flow);
      Integer timestamp=rs.getInt(""String_Node_Str"");
      int state=rs.getInt(""String_Node_Str"");
      if (!deployed.containsKey(appFlow)) {
        deployed.put(appFlow,1);
        FlowState status=new FlowState();
        status.setApplicationId(rs.getString(""String_Node_Str""));
        status.setFlowId(rs.getString(""String_Node_Str""));
        status.setCurrentState(StateChangeType.DEPLOYED.name());
        status.setLastStarted(-1);
        status.setLastStopped(-1);
        status.setRuns(0);
        result.add(status);
      }
      if (state == StateChangeType.STARTING.getType() || state == StateChangeType.STARTED.getType()) {
        started.put(appFlow,timestamp);
      }
 else       if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(appFlow,timestamp);
        if (runs.containsKey(flow)) {
          int run=runs.get(flow).intValue();
          runs.put(appFlow,run + 1);
        }
 else {
          runs.put(appFlow,1);
        }
      }
      states.put(appFlow,state);
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",accountId,e.getMessage());
  }
  for (  FlowState state : result) {
    String flow=state.getFlowId();
    String app=state.getApplicationId();
    String appFlow=String.format(""String_Node_Str"",app,flow);
    if (started.containsKey(appFlow)) {
      state.setLastStarted(started.get(appFlow));
    }
    if (stopped.containsKey(appFlow)) {
      state.setLastStopped(stopped.get(appFlow));
    }
    if (runs.containsKey(appFlow)) {
      state.setRuns(runs.get(appFlow));
    }
    if (states.containsKey(appFlow)) {
      int i=states.get(appFlow);
      state.setCurrentState(StateChangeType.value(i).name());
    }
  }
  return result;
}","/** 
 * FIXME: This was done in hurry and can be written in a much better way.
 * @param accountId
 * @return
 */
@Override public List<FlowState> getFlows(String accountId){
  Map<String,Integer> started=Maps.newHashMap();
  Map<String,Integer> stopped=Maps.newHashMap();
  Map<String,Integer> runs=Maps.newHashMap();
  Map<String,Integer> deployed=Maps.newHashMap();
  Map<String,Integer> states=Maps.newHashMap();
  List<FlowState> result=Lists.newArrayList();
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    PreparedStatement stmt=connection.prepareStatement(sql);
    stmt.setString(1,accountId);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      String app=rs.getString(""String_Node_Str"");
      String flow=rs.getString(""String_Node_Str"");
      String appFlow=String.format(""String_Node_Str"",app,flow);
      Integer timestamp=rs.getInt(""String_Node_Str"");
      int state=rs.getInt(""String_Node_Str"");
      if (!deployed.containsKey(appFlow)) {
        deployed.put(appFlow,1);
        FlowState status=new FlowState();
        status.setApplicationId(rs.getString(""String_Node_Str""));
        status.setFlowId(rs.getString(""String_Node_Str""));
        status.setCurrentState(StateChangeType.DEPLOYED.name());
        status.setLastStarted(-1);
        status.setLastStopped(-1);
        status.setRuns(0);
        result.add(status);
      }
      if (state == StateChangeType.STARTING.getType() || state == StateChangeType.RUNNING.getType()) {
        started.put(appFlow,timestamp);
      }
 else       if (state == StateChangeType.STOPPING.getType() || state == StateChangeType.STOPPED.getType() || state == StateChangeType.FAILED.getType()) {
        stopped.put(appFlow,timestamp);
        if (runs.containsKey(flow)) {
          int run=runs.get(flow).intValue();
          runs.put(appFlow,run + 1);
        }
 else {
          runs.put(appFlow,1);
        }
      }
      states.put(appFlow,state);
    }
  }
 catch (  SQLException e) {
    Log.error(""String_Node_Str"",accountId,e.getMessage());
  }
  for (  FlowState state : result) {
    String flow=state.getFlowId();
    String app=state.getApplicationId();
    String appFlow=String.format(""String_Node_Str"",app,flow);
    if (started.containsKey(appFlow)) {
      state.setLastStarted(started.get(appFlow));
    }
    if (stopped.containsKey(appFlow)) {
      state.setLastStopped(stopped.get(appFlow));
    }
    if (runs.containsKey(appFlow)) {
      state.setRuns(runs.get(appFlow));
    }
    if (states.containsKey(appFlow)) {
      int i=states.get(appFlow);
      state.setCurrentState(StateChangeType.value(i).name());
    }
  }
  return result;
}"
8161,"@Override public Module getSingleNodeModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(Consumer.class).to(TransactionalConsumer.class);
    }
  }
;
}","@Override public Module getSingleNodeModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(Consumer.class).to(TupleWritingConsumer.class);
    }
  }
;
}"
8162,"@Override public Module getInMemoryModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(Consumer.class).to(TransactionalConsumer.class);
    }
  }
;
}","@Override public Module getInMemoryModules(){
  return new AbstractModule(){
    @Override protected void configure(){
      bind(Consumer.class).to(TupleWritingConsumer.class);
    }
  }
;
}"
8163,"@Override protected void configure(){
  bind(Consumer.class).to(TransactionalConsumer.class);
}","@Override protected void configure(){
  bind(Consumer.class).to(TupleWritingConsumer.class);
}"
8164,"@Override public ImmutablePair<byte[],Long> getWithVersion(byte[] row,byte[] column,ReadPointer readPointer){
  PreparedStatement ps=null;
  try {
    ps=this.connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + this.tableName + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    ps.setBytes(1,row);
    ps.setBytes(2,column);
    ResultSet result=ps.executeQuery();
    ImmutablePair<Long,byte[]> latest=filteredLatest(result,readPointer);
    return new ImmutablePair<byte[],Long>(latest.getSecond(),latest.getFirst());
  }
 catch (  SQLException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (ps != null) {
      try {
        ps.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
}","@Override public ImmutablePair<byte[],Long> getWithVersion(byte[] row,byte[] column,ReadPointer readPointer){
  PreparedStatement ps=null;
  try {
    ps=this.connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + this.tableName + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    ps.setBytes(1,row);
    ps.setBytes(2,column);
    ResultSet result=ps.executeQuery();
    ImmutablePair<Long,byte[]> latest=filteredLatest(result,readPointer);
    if (latest == null)     return null;
    return new ImmutablePair<byte[],Long>(latest.getSecond(),latest.getFirst());
  }
 catch (  SQLException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (ps != null) {
      try {
        ps.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
}"
8165,"/** 
 * Result has (version, kvtype, id, value)
 * @param result
 * @param readPointer
 * @return
 * @throws SQLException
 */
private ImmutablePair<Long,byte[]> filteredLatest(ResultSet result,ReadPointer readPointer) throws SQLException {
  if (result == null)   return new ImmutablePair<Long,byte[]>(-1L,null);
  long lastDelete=-1;
  long undeleted=-1;
  while (result.next()) {
    long curVersion=result.getLong(1);
    if (!readPointer.isVisible(curVersion))     continue;
    Type type=Type.from(result.getInt(2));
    if (type.isUndeleteAll()) {
      undeleted=curVersion;
      continue;
    }
    if (type.isDeleteAll()) {
      if (undeleted == curVersion)       continue;
 else       break;
    }
    if (type.isDelete()) {
      lastDelete=curVersion;
      continue;
    }
    if (curVersion == lastDelete)     continue;
    return new ImmutablePair<Long,byte[]>(curVersion,result.getBytes(4));
  }
  return new ImmutablePair<Long,byte[]>(-1L,null);
}","/** 
 * Result has (version, kvtype, id, value)
 * @param result
 * @param readPointer
 * @return
 * @throws SQLException
 */
private ImmutablePair<Long,byte[]> filteredLatest(ResultSet result,ReadPointer readPointer) throws SQLException {
  if (result == null)   return null;
  long lastDelete=-1;
  long undeleted=-1;
  while (result.next()) {
    long curVersion=result.getLong(1);
    if (!readPointer.isVisible(curVersion))     continue;
    Type type=Type.from(result.getInt(2));
    if (type.isUndeleteAll()) {
      undeleted=curVersion;
      continue;
    }
    if (type.isDeleteAll()) {
      if (undeleted == curVersion)       continue;
 else       break;
    }
    if (type.isDelete()) {
      lastDelete=curVersion;
      continue;
    }
    if (curVersion == lastDelete)     continue;
    return new ImmutablePair<Long,byte[]>(curVersion,result.getBytes(4));
  }
  return null;
}"
8166,"void initializeTable(){
  String createStatement=""String_Node_Str"" + this.tableName + ""String_Node_Str""+ ""String_Node_Str""+ ROW_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ COLUMN_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ VERSION_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ TYPE_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ VALUE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"";
  String indexStatement=""String_Node_Str"" + this.tableName + ""String_Node_Str"";
  Statement stmt=null;
  try {
    stmt=this.connection.createStatement();
    stmt.executeUpdate(createStatement);
    stmt.executeUpdate(indexStatement);
  }
 catch (  SQLException e) {
    if (e.getErrorCode() != -21) {
      System.out.println(""String_Node_Str"" + e.getErrorCode() + ""String_Node_Str"");
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
}","void initializeTable(){
  String createStatement=""String_Node_Str"" + this.tableName + ""String_Node_Str""+ ""String_Node_Str""+ ROW_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ COLUMN_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ VERSION_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ TYPE_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ VALUE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"";
  String indexStatement=""String_Node_Str"" + this.tableName + ""String_Node_Str"";
  Statement stmt=null;
  try {
    stmt=this.connection.createStatement();
    stmt.executeUpdate(createStatement);
    stmt.executeUpdate(indexStatement);
  }
 catch (  SQLException e) {
    if (e.getErrorCode() != -21 && e.getErrorCode() != -23) {
      System.out.println(""String_Node_Str"" + e.getErrorCode() + ""String_Node_Str"");
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
}"
8167,"@Override public DequeueResult dequeue(QueueConsumer consumer,QueueConfig config,ReadPointer readPointer){
  if (TRACE)   log(""String_Node_Str"" + dequeueReturns.get() + ""String_Node_Str""+ consumer+ ""String_Node_Str""+ config+ ""String_Node_Str""+ readPointer+ ""String_Node_Str"");
  ImmutablePair<ReadPointer,Long> dirty=dirtyPointer();
  GroupState groupState=null;
  byte[] groupRow=makeRow(GLOBAL_GROUPS_HEADER,consumer.getGroupId());
  while (true) {
    byte[] existingValue=this.table.get(groupRow,GROUP_STATE,dirty.getFirst());
    if (existingValue == null || existingValue.length == 0) {
      log(""String_Node_Str"");
      groupState=new GroupState(consumer.getGroupSize(),new EntryPointer(1,1),config.isSingleEntry() ? ExecutionMode.SINGLE_ENTRY : ExecutionMode.MULTI_ENTRY);
      if (this.table.compareAndSwap(groupRow,GROUP_STATE,existingValue,groupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
        break;
      }
 else {
        continue;
      }
    }
 else {
      groupState=GroupState.fromBytes(existingValue);
      if (TRACE)       log(""String_Node_Str"" + groupState);
      if (groupState.getGroupSize() == consumer.getGroupSize() && groupState.getMode() == ExecutionMode.fromQueueConfig(config)) {
        break;
      }
      if (!groupIsEmpty(groupState,consumer.getGroupId(),dirty.getFirst())) {
        if (TRACE)         log(""String_Node_Str"");
        return new DequeueResult(DequeueStatus.FAILURE,""String_Node_Str"");
      }
      groupState=new GroupState(consumer.getGroupSize(),groupState.getHead(),ExecutionMode.fromQueueConfig(config));
      if (this.table.compareAndSwap(groupRow,GROUP_STATE,existingValue,groupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
        log(""String_Node_Str"");
        break;
      }
 else {
        log(""String_Node_Str"");
        continue;
      }
    }
  }
  EntryMeta entryMeta=null;
  EntryGroupMeta entryGroupMeta=null;
  EntryPointer entryPointer=groupState.getHead();
  while (entryPointer != null) {
    byte[] shardRow=makeRow(GLOBAL_DATA_HEADER,entryPointer.getShardId());
    byte[] entryMetaColumn=makeColumn(entryPointer.getEntryId(),ENTRY_META);
    ImmutablePair<byte[],Long> entryMetaDataAndStamp=this.table.getWithVersion(shardRow,entryMetaColumn,dirty.getFirst());
    if (entryMetaDataAndStamp == null) {
      log(""String_Node_Str"" + entryPointer + ""String_Node_Str""+ ""String_Node_Str""+ dirty.getFirst());
      return new DequeueResult(DequeueStatus.EMPTY);
    }
    if (!readPointer.isVisible(entryMetaDataAndStamp.getSecond())) {
      log(""String_Node_Str"" + entryPointer + ""String_Node_Str"");
      quickWait();
      return new DequeueResult(DequeueStatus.RETRY);
    }
    entryMeta=EntryMeta.fromBytes(entryMetaDataAndStamp.getFirst());
    if (TRACE)     log(""String_Node_Str"" + entryMeta.toString());
    if (entryMeta.isInvalid()) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer);
      EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      if (entryPointer.equals(groupState.getHead())) {
        GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
        if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
          groupState=newGroupState;
        }
 else {
          groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
        }
      }
      entryPointer=nextEntryPointer;
      continue;
    }
    if (entryMeta.iEndOfShard()) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getShardId() + ""String_Node_Str""+ (entryPointer.getShardId() + 1));
      EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId(),entryPointer.getShardId() + 1);
      if (entryPointer.equals(groupState.getHead())) {
        GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
        if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
          groupState=newGroupState;
        }
 else {
          groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
        }
      }
      entryPointer=nextEntryPointer;
      continue;
    }
    assert(entryMeta.isValid());
    byte[] entryGroupMetaColumn=makeColumn(entryPointer.getEntryId(),ENTRY_GROUP_META,consumer.getGroupId());
    byte[] entryGroupMetaData=this.table.get(shardRow,entryGroupMetaColumn,dirty.getFirst());
    if (entryGroupMetaData == null || entryGroupMetaData.length == 0) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getEntryId());
      entryGroupMetaData=null;
    }
 else {
      entryGroupMeta=EntryGroupMeta.fromBytes(entryGroupMetaData);
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getEntryId() + ""String_Node_Str""+ entryGroupMeta.toString());
      if (entryGroupMeta.isAckedOrSemiAcked()) {
        if (TRACE)         log(""String_Node_Str"");
        EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
        if (entryPointer.equals(groupState.getHead()) && safeToMoveHead(entryGroupMeta)) {
          GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
          if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
            groupState=newGroupState;
          }
 else {
            groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
          }
        }
        entryPointer=nextEntryPointer;
        continue;
      }
      if (entryGroupMeta.isDequeued()) {
        if (TRACE)         log(""String_Node_Str"");
        if (config.isSingleEntry() && entryGroupMeta.getInstanceId() == consumer.getInstanceId()) {
          if (TRACE)           log(""String_Node_Str"");
          EntryGroupMeta newEntryGroupMeta=new EntryGroupMeta(EntryGroupState.DEQUEUED,now(),consumer.getInstanceId());
          if (this.table.compareAndSwap(shardRow,entryGroupMetaColumn,entryGroupMetaData,newEntryGroupMeta.getBytes(),dirty.getFirst(),dirty.getSecond())) {
            dequeueReturns.incrementAndGet();
            return new DequeueResult(DequeueStatus.SUCCESS,entryPointer,this.table.get(shardRow,makeColumn(entryPointer.getEntryId(),ENTRY_DATA),dirty.getFirst()));
          }
 else {
            entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
            continue;
          }
        }
        if (entryGroupMeta.getTimestamp() + this.maxAgeBeforeExpirationInMillis >= now()) {
          log(""String_Node_Str"" + entryGroupMeta.getTimestamp() + ""String_Node_Str""+ this.maxAgeBeforeExpirationInMillis+ ""String_Node_Str""+ now());
          entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
          continue;
        }
      }
    }
    if (TRACE)     log(""String_Node_Str"");
    byte[] data=this.table.get(shardRow,makeColumn(entryPointer.getEntryId(),ENTRY_DATA),dirty.getFirst());
    if (!config.getPartitioner().shouldEmit(consumer,entryPointer.getEntryId(),data)) {
      entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      continue;
    }
    EntryGroupMeta newEntryGroupMeta=new EntryGroupMeta(EntryGroupState.DEQUEUED,now(),consumer.getInstanceId());
    if (this.table.compareAndSwap(shardRow,entryGroupMetaColumn,entryGroupMetaData,newEntryGroupMeta.getBytes(),dirty.getFirst(),dirty.getSecond())) {
      dequeueReturns.incrementAndGet();
      if (TRACE)       log(""String_Node_Str"" + entryPointer + ""String_Node_Str""+ newEntryGroupMeta);
      return new DequeueResult(DequeueStatus.SUCCESS,entryPointer,data);
    }
 else {
      if (TRACE)       log(""String_Node_Str"" + entryPointer);
      entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      continue;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","@Override public DequeueResult dequeue(QueueConsumer consumer,QueueConfig config,ReadPointer readPointer){
  if (TRACE)   log(""String_Node_Str"" + dequeueReturns.get() + ""String_Node_Str""+ consumer+ ""String_Node_Str""+ config+ ""String_Node_Str""+ readPointer+ ""String_Node_Str"");
  ImmutablePair<ReadPointer,Long> dirty=dirtyPointer();
  GroupState groupState=null;
  byte[] groupRow=makeRow(GLOBAL_GROUPS_HEADER,consumer.getGroupId());
  while (true) {
    byte[] existingValue=this.table.get(groupRow,GROUP_STATE,dirty.getFirst());
    if (existingValue == null || existingValue.length == 0) {
      log(""String_Node_Str"");
      groupState=new GroupState(consumer.getGroupSize(),new EntryPointer(1,1),config.isSingleEntry() ? ExecutionMode.SINGLE_ENTRY : ExecutionMode.MULTI_ENTRY);
      if (this.table.compareAndSwap(groupRow,GROUP_STATE,existingValue,groupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
        break;
      }
 else {
        continue;
      }
    }
 else {
      groupState=GroupState.fromBytes(existingValue);
      if (TRACE)       log(""String_Node_Str"" + groupState);
      if (groupState.getGroupSize() == consumer.getGroupSize() && groupState.getMode() == ExecutionMode.fromQueueConfig(config)) {
        break;
      }
      if (!groupIsEmpty(groupState,consumer.getGroupId(),dirty.getFirst())) {
        if (TRACE)         log(""String_Node_Str"");
        return new DequeueResult(DequeueStatus.FAILURE,""String_Node_Str"");
      }
      groupState=new GroupState(consumer.getGroupSize(),groupState.getHead(),ExecutionMode.fromQueueConfig(config));
      if (this.table.compareAndSwap(groupRow,GROUP_STATE,existingValue,groupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
        log(""String_Node_Str"");
        break;
      }
 else {
        log(""String_Node_Str"");
        continue;
      }
    }
  }
  EntryMeta entryMeta=null;
  EntryGroupMeta entryGroupMeta=null;
  EntryPointer entryPointer=groupState.getHead();
  while (entryPointer != null) {
    byte[] shardRow=makeRow(GLOBAL_DATA_HEADER,entryPointer.getShardId());
    byte[] entryMetaColumn=makeColumn(entryPointer.getEntryId(),ENTRY_META);
    ImmutablePair<byte[],Long> entryMetaDataAndStamp=this.table.getWithVersion(shardRow,entryMetaColumn,dirty.getFirst());
    if (entryMetaDataAndStamp == null) {
      log(""String_Node_Str"" + entryPointer + ""String_Node_Str""+ ""String_Node_Str""+ dirty.getFirst());
      return new DequeueResult(DequeueStatus.EMPTY);
    }
    if (!readPointer.isVisible(entryMetaDataAndStamp.getSecond())) {
      log(""String_Node_Str"" + entryPointer + ""String_Node_Str"");
      quickWait();
      return new DequeueResult(DequeueStatus.RETRY);
    }
    entryMeta=EntryMeta.fromBytes(entryMetaDataAndStamp.getFirst());
    if (TRACE)     log(""String_Node_Str"" + entryMeta.toString());
    if (entryMeta.isInvalid()) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer);
      EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      if (entryPointer.equals(groupState.getHead())) {
        GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
        if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
          groupState=newGroupState;
        }
 else {
          groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
        }
      }
      entryPointer=nextEntryPointer;
      continue;
    }
    if (entryMeta.iEndOfShard()) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getShardId() + ""String_Node_Str""+ (entryPointer.getShardId() + 1));
      EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId(),entryPointer.getShardId() + 1);
      if (entryPointer.equals(groupState.getHead())) {
        GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
        if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
          groupState=newGroupState;
        }
 else {
          groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
        }
      }
      entryPointer=nextEntryPointer;
      continue;
    }
    assert(entryMeta.isValid());
    byte[] entryGroupMetaColumn=makeColumn(entryPointer.getEntryId(),ENTRY_GROUP_META,consumer.getGroupId());
    byte[] entryGroupMetaData=this.table.get(shardRow,entryGroupMetaColumn,dirty.getFirst());
    if (entryGroupMetaData == null || entryGroupMetaData.length == 0) {
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getEntryId());
      entryGroupMetaData=null;
    }
 else {
      entryGroupMeta=EntryGroupMeta.fromBytes(entryGroupMetaData);
      if (TRACE)       log(""String_Node_Str"" + entryPointer.getEntryId() + ""String_Node_Str""+ entryGroupMeta.toString());
      if (entryGroupMeta.isAckedOrSemiAcked()) {
        if (TRACE)         log(""String_Node_Str"");
        EntryPointer nextEntryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
        if (entryPointer.equals(groupState.getHead()) && safeToMoveHead(entryGroupMeta)) {
          GroupState newGroupState=new GroupState(groupState.getGroupSize(),nextEntryPointer,groupState.getMode());
          if (this.table.compareAndSwap(groupRow,GROUP_STATE,groupState.getBytes(),newGroupState.getBytes(),dirty.getFirst(),dirty.getSecond())) {
            groupState=newGroupState;
          }
 else {
            groupState=GroupState.fromBytes(this.table.get(groupRow,GROUP_STATE,dirty.getFirst()));
          }
        }
        entryPointer=nextEntryPointer;
        continue;
      }
      if (entryGroupMeta.isDequeued()) {
        if (TRACE)         log(""String_Node_Str"");
        if (config.isSingleEntry() && entryGroupMeta.getInstanceId() == consumer.getInstanceId()) {
          if (TRACE)           log(""String_Node_Str"");
          EntryGroupMeta newEntryGroupMeta=new EntryGroupMeta(EntryGroupState.DEQUEUED,now(),consumer.getInstanceId());
          if (this.table.compareAndSwap(shardRow,entryGroupMetaColumn,entryGroupMetaData,newEntryGroupMeta.getBytes(),dirty.getFirst(),dirty.getSecond())) {
            dequeueReturns.incrementAndGet();
            return new DequeueResult(DequeueStatus.SUCCESS,entryPointer,this.table.get(shardRow,makeColumn(entryPointer.getEntryId(),ENTRY_DATA),dirty.getFirst()));
          }
 else {
            entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
            continue;
          }
        }
        if (entryGroupMeta.getTimestamp() + this.maxAgeBeforeExpirationInMillis >= now()) {
          log(""String_Node_Str"" + entryGroupMeta.getTimestamp() + ""String_Node_Str""+ this.maxAgeBeforeExpirationInMillis+ ""String_Node_Str""+ now());
          entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
          continue;
        }
      }
    }
    if (TRACE)     log(""String_Node_Str"");
    byte[] data=this.table.get(shardRow,makeColumn(entryPointer.getEntryId(),ENTRY_DATA),dirty.getFirst());
    assert(data != null);
    if (!config.getPartitioner().shouldEmit(consumer,entryPointer.getEntryId(),data)) {
      entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      continue;
    }
    EntryGroupMeta newEntryGroupMeta=new EntryGroupMeta(EntryGroupState.DEQUEUED,now(),consumer.getInstanceId());
    if (this.table.compareAndSwap(shardRow,entryGroupMetaColumn,entryGroupMetaData,newEntryGroupMeta.getBytes(),dirty.getFirst(),dirty.getSecond())) {
      dequeueReturns.incrementAndGet();
      if (TRACE)       log(""String_Node_Str"" + entryPointer + ""String_Node_Str""+ newEntryGroupMeta);
      return new DequeueResult(DequeueStatus.SUCCESS,entryPointer,data);
    }
 else {
      if (TRACE)       log(""String_Node_Str"" + entryPointer);
      entryPointer=new EntryPointer(entryPointer.getEntryId() + 1,entryPointer.getShardId());
      continue;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}"
8168,"@Override public EnqueueResult enqueue(byte[] data,long cleanWriteVersion){
  log(""String_Node_Str"" + data.length + ""String_Node_Str""+ cleanWriteVersion+ ""String_Node_Str"");
  ImmutablePair<ReadPointer,Long> dirty=dirtyPointer();
  long entryId=this.table.increment(makeRow(GLOBAL_ENTRY_HEADER),GLOBAL_ENTRYID_COUNTER,1,dirty.getFirst(),dirty.getSecond());
  log(""String_Node_Str"" + entryId);
  byte[] entryWritePointerRow=makeRow(GLOBAL_ENTRY_WRITEPOINTER_HEADER);
  while (getCounter(entryWritePointerRow,GLOBAL_ENTRYID_WRITEPOINTER_COUNTER,dirty.getFirst()) != (entryId - 1)) {
    log(""String_Node_Str"");
    quickWait();
  }
  log(""String_Node_Str"" + entryId);
  ShardMeta shardMeta=null;
  boolean movedShards=false;
  byte[] shardMetaRow=makeRow(GLOBAL_SHARDS_HEADER);
  if (entryId == 1) {
    shardMeta=new ShardMeta(1,data.length,1);
    log(""String_Node_Str"");
  }
 else {
    shardMeta=ShardMeta.fromBytes(this.table.get(shardMetaRow,GLOBAL_SHARD_META,dirty.getFirst()));
    log(""String_Node_Str"" + shardMeta.toString());
    if ((shardMeta.getShardBytes() + data.length > this.maxBytesPerShard && shardMeta.getShardEntries() > 1) || shardMeta.getShardEntries() == this.maxEntriesPerShard) {
      movedShards=true;
      shardMeta=new ShardMeta(shardMeta.getShardId() + 1,data.length,1);
      log(""String_Node_Str"");
    }
 else {
      shardMeta=new ShardMeta(shardMeta.getShardId(),shardMeta.getShardBytes() + data.length,shardMeta.getShardEntries() + 1);
    }
  }
  this.table.put(shardMetaRow,GLOBAL_SHARD_META,dirty.getSecond(),shardMeta.getBytes());
  long newWritePointer=this.table.increment(entryWritePointerRow,GLOBAL_ENTRYID_WRITEPOINTER_COUNTER,1,dirty.getFirst(),dirty.getSecond());
  log(""String_Node_Str"" + shardMeta + ""String_Node_Str""+ ""String_Node_Str""+ newWritePointer);
  if (movedShards) {
    this.table.put(makeRow(GLOBAL_DATA_HEADER,shardMeta.getShardId() - 1),makeColumn(entryId,ENTRY_META),cleanWriteVersion,new EntryMeta(EntryState.SHARD_END).getBytes());
    log(""String_Node_Str"" + shardMeta);
  }
  this.table.put(makeRow(GLOBAL_DATA_HEADER,shardMeta.getShardId()),new byte[][]{makeColumn(entryId,ENTRY_META),makeColumn(entryId,ENTRY_DATA)},cleanWriteVersion,new byte[][]{new EntryMeta(EntryState.VALID).getBytes(),data});
  return new EnqueueResult(EnqueueStatus.SUCCESS,new QueueEntryPointer(queueName,entryId,shardMeta.getShardId()));
}","@Override public EnqueueResult enqueue(byte[] data,long cleanWriteVersion){
  log(""String_Node_Str"" + data.length + ""String_Node_Str""+ cleanWriteVersion+ ""String_Node_Str"");
  ImmutablePair<ReadPointer,Long> dirty=dirtyPointer();
  long entryId=this.table.increment(makeRow(GLOBAL_ENTRY_HEADER),GLOBAL_ENTRYID_COUNTER,1,dirty.getFirst(),dirty.getSecond());
  log(""String_Node_Str"" + entryId);
  byte[] entryWritePointerRow=makeRow(GLOBAL_ENTRY_WRITEPOINTER_HEADER);
  while (getCounter(entryWritePointerRow,GLOBAL_ENTRYID_WRITEPOINTER_COUNTER,dirty.getFirst()) != (entryId - 1)) {
    log(""String_Node_Str"");
    quickWait();
  }
  log(""String_Node_Str"" + entryId);
  ShardMeta shardMeta=null;
  boolean movedShards=false;
  byte[] shardMetaRow=makeRow(GLOBAL_SHARDS_HEADER);
  if (entryId == 1) {
    shardMeta=new ShardMeta(1,data.length,1);
    log(""String_Node_Str"");
  }
 else {
    shardMeta=ShardMeta.fromBytes(this.table.get(shardMetaRow,GLOBAL_SHARD_META,dirty.getFirst()));
    log(""String_Node_Str"" + shardMeta.toString());
    if ((shardMeta.getShardBytes() + data.length > this.maxBytesPerShard && shardMeta.getShardEntries() > 1) || shardMeta.getShardEntries() == this.maxEntriesPerShard) {
      movedShards=true;
      shardMeta=new ShardMeta(shardMeta.getShardId() + 1,data.length,1);
      log(""String_Node_Str"");
    }
 else {
      shardMeta=new ShardMeta(shardMeta.getShardId(),shardMeta.getShardBytes() + data.length,shardMeta.getShardEntries() + 1);
    }
  }
  this.table.put(shardMetaRow,GLOBAL_SHARD_META,dirty.getSecond(),shardMeta.getBytes());
  long newWritePointer=this.table.increment(entryWritePointerRow,GLOBAL_ENTRYID_WRITEPOINTER_COUNTER,1,dirty.getFirst(),dirty.getSecond());
  log(""String_Node_Str"" + shardMeta + ""String_Node_Str""+ ""String_Node_Str""+ newWritePointer);
  if (movedShards) {
    this.table.put(makeRow(GLOBAL_DATA_HEADER,shardMeta.getShardId() - 1),makeColumn(entryId,ENTRY_META),cleanWriteVersion,new EntryMeta(EntryState.SHARD_END).getBytes());
    log(""String_Node_Str"" + shardMeta);
  }
  this.table.put(makeRow(GLOBAL_DATA_HEADER,shardMeta.getShardId()),new byte[][]{makeColumn(entryId,ENTRY_DATA),makeColumn(entryId,ENTRY_META)},cleanWriteVersion,new byte[][]{data,new EntryMeta(EntryState.VALID).getBytes()});
  return new EnqueueResult(EnqueueStatus.SUCCESS,new QueueEntryPointer(queueName,entryId,shardMeta.getShardId()));
}"
8169,"/** 
 * Reads the latest version of the specified column in the specified row, utilizing the specified read pointer to enforce visibility constraints, and returns both the value as well as the version this value exists at.
 * @param row
 * @param column
 * @param readPointer
 * @return value and version of the latest visible column in the specified row
 */
public ImmutablePair<byte[],Long> getWithVersion(byte[] row,byte[] column,ReadPointer readPointer);","/** 
 * Reads the latest version of the specified column in the specified row, utilizing the specified read pointer to enforce visibility constraints, and returns both the value as well as the version this value exists at.
 * @param row
 * @param column
 * @param readPointer
 * @return value and version of the latest visible column in the specifiedrow, or null if none exists
 */
public ImmutablePair<byte[],Long> getWithVersion(byte[] row,byte[] column,ReadPointer readPointer);"
8170,"public QueueEntry pop(QueueConsumer consumer,QueuePartitioner partitioner) throws InterruptedException {
  if (head == null) {
    waitForPush();
    return pop(consumer,partitioner);
  }
  ConsumerGroup group=null;
  if (!this.consumerGroups.containsKey(consumer.getGroupId())) {
    group=new ConsumerGroup(consumer.getGroupId());
    group.setHead(head);
    ConsumerGroup existingGroup=this.consumerGroups.putIfAbsent(consumer.getGroupId(),group);
    if (existingGroup != null) {
      group=existingGroup;
    }
  }
 else {
    group=this.consumerGroups.get(consumer.getConsumerId());
  }
  if (!group.hasEntriesAvailable()) {
    waitForPush();
    return pop(consumer,partitioner);
  }
synchronized (group) {
    Entry curEntry=group.getHead();
    while (curEntry != null) {
      GroupConsumptionInfo info=curEntry.getConsumerInfo(consumer.getGroupId());
      if (info.isAvailable() || info.getConsumerId() == consumer.getConsumerId()) {
        QueueEntry entry=curEntry.makeQueueEntry();
        if (partitioner.shouldEmit(consumer,entry)) {
          entry.setConsumer(consumer);
          info.setPopConsumer(consumer);
          return entry;
        }
      }
      curEntry=curEntry.getNext();
    }
  }
  waitForPush();
  return pop(consumer,partitioner);
}","public QueueEntry pop(QueueConsumer consumer,QueuePartitioner partitioner) throws InterruptedException {
  if (head == null) {
    waitForPush();
    return pop(consumer,partitioner);
  }
  ConsumerGroup group=null;
  if (!this.consumerGroups.containsKey(consumer.getGroupId())) {
    group=new ConsumerGroup(consumer.getGroupId());
    group.setHead(head);
    ConsumerGroup existingGroup=this.consumerGroups.putIfAbsent(consumer.getGroupId(),group);
    if (existingGroup != null) {
      group=existingGroup;
    }
  }
 else {
    group=this.consumerGroups.get(consumer.getConsumerId());
  }
  if (group.getHead() == null) {
    waitForPush();
    return pop(consumer,partitioner);
  }
synchronized (group) {
    Entry curEntry=group.getHead();
    while (curEntry != null) {
      GroupConsumptionInfo info=curEntry.getConsumerInfo(consumer.getGroupId());
      if (info.isAvailable() || (info.getConsumerId() == consumer.getConsumerId() && !info.isAcked())) {
        QueueEntry entry=curEntry.makeQueueEntry();
        if (partitioner.shouldEmit(consumer,entry)) {
          entry.setConsumer(consumer);
          info.setPopConsumer(consumer);
          return entry;
        }
      }
      curEntry=curEntry.getNext();
    }
  }
  waitForPush();
  return pop(consumer,partitioner);
}"
8171,"@Override protected void processInput(String input) throws SteamException {
  if (input.equals(""String_Node_Str"")) {
    controllerHandles=new SteamControllerHandle[SteamController.STEAM_CONTROLLER_MAX_COUNT];
    numControllers=controller.getConnectedControllers(controllerHandles);
    System.out.println(numControllers + ""String_Node_Str"");
    for (int i=0; i < numControllers; i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ controllerHandles[i]);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] params=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (params.length > 1) {
      SteamController.Pad pad=""String_Node_Str"".equals(params[0]) ? SteamController.Pad.Left : SteamController.Pad.Right;
      if (params.length == 2) {
        controller.triggerHapticPulse(controllerHandles[0],pad,Short.parseShort(params[1]));
      }
 else       if (params.length == 4) {
        controller.triggerRepeatedHapticPulse(controllerHandles[0],pad,Short.parseShort(params[1]),Short.parseShort(params[2]),Short.parseShort(params[3]),0);
      }
    }
  }
}","@Override protected void processInput(String input) throws SteamException {
  if (input.equals(""String_Node_Str"")) {
    controllerHandles=new SteamControllerHandle[SteamController.STEAM_CONTROLLER_MAX_COUNT];
    numControllers=controller.getConnectedControllers(controllerHandles);
    System.out.println(numControllers + ""String_Node_Str"");
    for (int i=0; i < numControllers; i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ controllerHandles[i]);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] params=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (params.length > 1) {
      SteamController.Pad pad=""String_Node_Str"".equals(params[0]) ? SteamController.Pad.Left : SteamController.Pad.Right;
      if (params.length == 2) {
        controller.triggerHapticPulse(controllerHandles[0],pad,Short.parseShort(params[1]));
      }
 else       if (params.length == 4) {
        controller.triggerRepeatedHapticPulse(controllerHandles[0],pad,Short.parseShort(params[1]),Short.parseShort(params[2]),Short.parseShort(params[3]),0);
      }
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String setName=input.substring(""String_Node_Str"".length());
    setHandle=controller.getActionSetHandle(setName);
    System.out.println(""String_Node_Str"" + setName + ""String_Node_Str""+ setHandle.getNativeHandle());
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String actionName=input.substring(""String_Node_Str"".length());
    digitalActionHandle=controller.getDigitalActionHandle(actionName);
    System.out.println(""String_Node_Str"" + actionName + ""String_Node_Str""+ digitalActionHandle.getNativeHandle());
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String actionName=input.substring(""String_Node_Str"".length());
    analogActionHandle=controller.getAnalogActionHandle(actionName);
    System.out.println(""String_Node_Str"" + actionName + ""String_Node_Str""+ analogActionHandle.getNativeHandle());
  }
}"
8172,"@Override protected void registerInterfaces(){
  System.out.println(""String_Node_Str"");
  controller=new SteamController();
  controller.init();
}","@Override protected void registerInterfaces(){
  System.out.println(""String_Node_Str"");
  controller=new SteamController();
  controller.init();
  try {
    processInput(""String_Node_Str"");
  }
 catch (  SteamException e) {
    e.printStackTrace();
  }
}"
8173,"@Override protected void processUpdate() throws SteamException {
  for (  SteamControllerHandle handle : controllerHandles) {
    long time=System.currentTimeMillis();
    if (time - motionDataLastTime > 1000) {
      controller.getMotionData(handle,motionData);
      System.out.println(""String_Node_Str"" + handle + ""String_Node_Str""+ motionData.getRotQuatX()+ ""String_Node_Str""+ motionData.getRotQuatY()+ ""String_Node_Str""+ motionData.getRotQuatZ()+ ""String_Node_Str""+ motionData.getRotQuatW()+ ""String_Node_Str""+ motionData.getPosAccelX()+ ""String_Node_Str""+ motionData.getPosAccelY()+ ""String_Node_Str""+ motionData.getPosAccelZ()+ ""String_Node_Str""+ motionData.getRotVelX()+ ""String_Node_Str""+ motionData.getRotVelY()+ ""String_Node_Str""+ motionData.getRotVelZ());
      motionDataLastTime=time;
    }
  }
}","@Override protected void processUpdate() throws SteamException {
  if (setHandle == null || setHandle.getNativeHandle() == 0) {
    return;
  }
  for (int i=0; i < numControllers; i++) {
    SteamControllerHandle handle=controllerHandles[i];
    controller.activateActionSet(handle,setHandle);
    if (digitalActionHandle != null) {
      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);
      if (digitalActionData.getActive() && digitalActionData.getState()) {
        System.out.println(""String_Node_Str"" + digitalActionHandle.getNativeHandle());
      }
    }
    if (analogActionHandle != null) {
      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);
      if (analogActionData.getActive()) {
        float x=analogActionData.getX();
        float y=analogActionData.getY();
        SteamController.SourceMode mode=analogActionData.getMode();
        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {
          System.out.println(""String_Node_Str"" + analogActionData.getX() + ""String_Node_Str""+ analogActionData.getY()+ ""String_Node_Str""+ mode.name());
        }
      }
    }
  }
}"
8174,"@Override protected void processInput(String input){
  if (input.equals(""String_Node_Str"")) {
    userStats.requestCurrentStats();
  }
 else   if (input.equals(""String_Node_Str"")) {
    userStats.storeStats();
  }
 else   if (input.equals(""String_Node_Str"")) {
    int numFiles=remoteStorage.getFileCount();
    System.out.println(""String_Node_Str"" + numFiles);
    for (int i=0; i < numFiles; i++) {
      int[] sizes=new int[1];
      String name=remoteStorage.getFileNameAndSize(i,sizes);
      boolean exists=remoteStorage.fileExists(name);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ name+ ""String_Node_Str""+ sizes[0]+ ""String_Node_Str""+ (exists ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String path=input.substring(""String_Node_Str"".length());
    File file=new File(path);
    try {
      FileInputStream in=new FileInputStream(file);
      SteamUGCFileWriteStreamHandle remoteFile=remoteStorage.fileWriteStreamOpen(path);
      if (remoteFile != null) {
        byte[] bytes=new byte[1024];
        int bytesRead;
        while ((bytesRead=in.read(bytes,0,bytes.length)) > 0) {
          ByteBuffer buffer=ByteBuffer.allocateDirect(bytesRead);
          buffer.put(bytes,0,bytesRead);
          remoteStorage.fileWriteStreamWriteChunk(remoteFile,buffer,buffer.limit());
        }
        remoteStorage.fileWriteStreamClose(remoteFile);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String path=input.substring(""String_Node_Str"".length());
    if (remoteStorage.fileDelete(path)) {
      System.out.println(""String_Node_Str"" + path + ""String_Node_Str"");
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    remoteStorage.fileShare(input.substring(""String_Node_Str"".length()));
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] paths=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (paths.length >= 2) {
      System.out.println(""String_Node_Str"" + paths[0] + ""String_Node_Str""+ paths[1]);
      remoteStorage.publishWorkshopFile(paths[0],paths[1],utils.getAppID(),""String_Node_Str"",""String_Node_Str"",SteamRemoteStorage.PublishedFileVisibility.Private,null,SteamRemoteStorage.WorkshopFileType.Community);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] paths=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (paths.length >= 3) {
      System.out.println(""String_Node_Str"" + paths[0] + ""String_Node_Str""+ paths[1]+ ""String_Node_Str""+ paths[2]);
      SteamPublishedFileID fileID=new SteamPublishedFileID(Long.parseLong(paths[0]));
      SteamPublishedFileUpdateHandle updateHandle=remoteStorage.createPublishedFileUpdateRequest(fileID);
      if (updateHandle != null) {
        remoteStorage.updatePublishedFileFile(updateHandle,paths[1]);
        remoteStorage.updatePublishedFilePreviewFile(updateHandle,paths[2]);
        remoteStorage.updatePublishedFileTitle(updateHandle,""String_Node_Str"");
        remoteStorage.updatePublishedFileDescription(updateHandle,""String_Node_Str"");
        remoteStorage.commitPublishedFileUpdate(updateHandle);
      }
    }
  }
 else   if (input.equals(""String_Node_Str"")) {
    SteamUGCQuery query=ugc.createQueryUserUGCRequest(user.getSteamID().getAccountID(),SteamUGC.UserUGCList.Subscribed,SteamUGC.MatchingUGCType.UsableInGame,SteamUGC.UserUGCListSortOrder.TitleAsc,utils.getAppID(),utils.getAppID(),1);
    if (query.isValid()) {
      System.out.println(""String_Node_Str"" + query.toString());
      ugc.sendQueryUGCRequest(query);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String name=input.substring(""String_Node_Str"".length());
    SteamUGCHandle handle=new SteamUGCHandle(Long.parseLong(name,16));
    remoteStorage.ugcDownload(handle,0);
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String name=input.substring(""String_Node_Str"".length());
    userStats.findLeaderboard(name);
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] params=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (currentLeaderboard != null && params.length >= 2) {
      userStats.downloadLeaderboardEntries(currentLeaderboard,SteamUserStats.LeaderboardDataRequest.Global,Integer.valueOf(params[0]),Integer.valueOf(params[1]));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String score=input.substring(""String_Node_Str"".length());
    if (currentLeaderboard != null) {
      System.out.println(""String_Node_Str"" + score + ""String_Node_Str""+ currentLeaderboard.toString());
      userStats.uploadLeaderboardScore(currentLeaderboard,SteamUserStats.LeaderboardUploadScoreMethod.KeepBest,Integer.valueOf(score));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String appId=input.substring(""String_Node_Str"".length());
    boolean subscribed=apps.isSubscribedApp(Long.parseLong(appId));
    System.out.println(""String_Node_Str"" + appId + ""String_Node_Str""+ (subscribed ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","@Override protected void processInput(String input) throws SteamException {
  if (input.equals(""String_Node_Str"")) {
    userStats.requestCurrentStats();
  }
 else   if (input.equals(""String_Node_Str"")) {
    userStats.storeStats();
  }
 else   if (input.equals(""String_Node_Str"")) {
    int numFiles=remoteStorage.getFileCount();
    System.out.println(""String_Node_Str"" + numFiles);
    for (int i=0; i < numFiles; i++) {
      int[] sizes=new int[1];
      String name=remoteStorage.getFileNameAndSize(i,sizes);
      boolean exists=remoteStorage.fileExists(name);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ name+ ""String_Node_Str""+ sizes[0]+ ""String_Node_Str""+ (exists ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String path=input.substring(""String_Node_Str"".length());
    File file=new File(path);
    try {
      FileInputStream in=new FileInputStream(file);
      SteamUGCFileWriteStreamHandle remoteFile=remoteStorage.fileWriteStreamOpen(path);
      if (remoteFile != null) {
        byte[] bytes=new byte[1024];
        int bytesRead;
        while ((bytesRead=in.read(bytes,0,bytes.length)) > 0) {
          ByteBuffer buffer=ByteBuffer.allocateDirect(bytesRead);
          buffer.put(bytes,0,bytesRead);
          remoteStorage.fileWriteStreamWriteChunk(remoteFile,buffer,buffer.limit());
        }
        remoteStorage.fileWriteStreamClose(remoteFile);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String path=input.substring(""String_Node_Str"".length());
    if (remoteStorage.fileDelete(path)) {
      System.out.println(""String_Node_Str"" + path + ""String_Node_Str"");
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    remoteStorage.fileShare(input.substring(""String_Node_Str"".length()));
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] paths=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (paths.length >= 2) {
      System.out.println(""String_Node_Str"" + paths[0] + ""String_Node_Str""+ paths[1]);
      remoteStorage.publishWorkshopFile(paths[0],paths[1],utils.getAppID(),""String_Node_Str"",""String_Node_Str"",SteamRemoteStorage.PublishedFileVisibility.Private,null,SteamRemoteStorage.WorkshopFileType.Community);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] paths=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (paths.length >= 3) {
      System.out.println(""String_Node_Str"" + paths[0] + ""String_Node_Str""+ paths[1]+ ""String_Node_Str""+ paths[2]);
      SteamPublishedFileID fileID=new SteamPublishedFileID(Long.parseLong(paths[0]));
      SteamPublishedFileUpdateHandle updateHandle=remoteStorage.createPublishedFileUpdateRequest(fileID);
      if (updateHandle != null) {
        remoteStorage.updatePublishedFileFile(updateHandle,paths[1]);
        remoteStorage.updatePublishedFilePreviewFile(updateHandle,paths[2]);
        remoteStorage.updatePublishedFileTitle(updateHandle,""String_Node_Str"");
        remoteStorage.updatePublishedFileDescription(updateHandle,""String_Node_Str"");
        remoteStorage.commitPublishedFileUpdate(updateHandle);
      }
    }
  }
 else   if (input.equals(""String_Node_Str"")) {
    SteamUGCQuery query=ugc.createQueryUserUGCRequest(user.getSteamID().getAccountID(),SteamUGC.UserUGCList.Subscribed,SteamUGC.MatchingUGCType.UsableInGame,SteamUGC.UserUGCListSortOrder.TitleAsc,utils.getAppID(),utils.getAppID(),1);
    if (query.isValid()) {
      System.out.println(""String_Node_Str"" + query.toString());
      ugc.sendQueryUGCRequest(query);
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String name=input.substring(""String_Node_Str"".length());
    SteamUGCHandle handle=new SteamUGCHandle(Long.parseLong(name,16));
    remoteStorage.ugcDownload(handle,0);
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String name=input.substring(""String_Node_Str"".length());
    userStats.findLeaderboard(name);
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String[] params=input.substring(""String_Node_Str"".length()).split(""String_Node_Str"");
    if (currentLeaderboard != null && params.length >= 2) {
      userStats.downloadLeaderboardEntries(currentLeaderboard,SteamUserStats.LeaderboardDataRequest.Global,Integer.valueOf(params[0]),Integer.valueOf(params[1]));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String score=input.substring(""String_Node_Str"".length());
    if (currentLeaderboard != null) {
      System.out.println(""String_Node_Str"" + score + ""String_Node_Str""+ currentLeaderboard.toString());
      userStats.uploadLeaderboardScore(currentLeaderboard,SteamUserStats.LeaderboardUploadScoreMethod.KeepBest,Integer.valueOf(score));
    }
  }
 else   if (input.startsWith(""String_Node_Str"")) {
    String appId=input.substring(""String_Node_Str"".length());
    boolean subscribed=apps.isSubscribedApp(Long.parseLong(appId));
    System.out.println(""String_Node_Str"" + appId + ""String_Node_Str""+ (subscribed ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}"
8175,"@Override public void run(){
  while (alive && mainThread.isAlive()) {
    if (scanner.hasNext()) {
      String input=scanner.next();
      if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
        alive=false;
      }
 else {
        processInput(input);
      }
    }
  }
}","@Override public void run(){
  try {
    while (alive && mainThread.isAlive()) {
      if (scanner.hasNext()) {
        String input=scanner.next();
        if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
          alive=false;
        }
 else {
          processInput(input);
        }
      }
    }
  }
 catch (  SteamException e) {
    e.printStackTrace();
  }
}"
8176,protected abstract void processInput(String input);,protected abstract void processInput(String input) throws SteamException ;
8177,"/** 
 * Gets the content of the key recursively as a JsonObject
 * @param path root path (i.e. /path1/path2)
 * @param etcdClient EtcdClient
 * @return JsonNode
 */
public static JsonNode getAsJson(String path,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  EtcdKeyGetRequest etcdKeyGetRequest=etcdClient.get(path).recursive();
  EtcdKeysResponse dataTree=etcdKeyGetRequest.send().get();
  ObjectNode jNode=JsonNodeFactory.instance.objectNode();
  for (  EtcdNode node : dataTree.getNode().getNodes()) {
    iterateOverNodes(jNode,node);
  }
  return dotNotationToStandardJson(jNode.at(path));
}","/** 
 * Gets the content of the key recursively as a JsonObject
 * @param path root path (i.e. /path1/path2)
 * @param etcdClient EtcdClient
 * @return JsonNode
 */
public static JsonNode getAsJson(String path,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  EtcdKeyGetRequest etcdKeyGetRequest=etcdClient.get(path).recursive();
  EtcdKeysResponse dataTree=etcdKeyGetRequest.send().get();
  ObjectNode jNode=JsonNodeFactory.instance.objectNode();
  if (dataTree.getNode().getNodes().isEmpty()) {
    iterateOverNodes(jNode,dataTree.getNode());
  }
 else {
    for (    EtcdNode node : dataTree.getNode().getNodes()) {
      iterateOverNodes(jNode,node);
    }
  }
  return dotNotationToStandardJson(jNode.at(path));
}"
8178,"/** 
 * Puts the content of the Json recursively from the specified <i>path</i>
 * @param path root path (i.e. /path1/path2)
 * @param data JsonNode
 * @param etcdClient EtcdClient
 */
public static void putAsJson(String path,JsonNode data,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  Map<String,Object> flattened=new JsonFlattener(EtcdUtil.jsonToString(data)).withFlattenMode(FlattenMode.MONGODB).withSeparator('/').withKeyTransformer(new KeyTransformer(){
    @Override public String transform(    String s){
      return s.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
).flattenAsMap();
  try {
    etcdClient.delete(path).recursive().send().get();
  }
 catch (  EtcdException e) {
    if (EtcdErrorCode.KeyNotFound != e.errorCode) {
      throw e;
    }
  }
  for (  Map.Entry<String,Object> entry : flattened.entrySet()) {
    etcdClient.put(path + ""String_Node_Str"" + entry.getKey(),String.valueOf(entry.getValue())).send().get();
  }
}","/** 
 * Puts the content of the Json recursively from the specified <i>path</i>
 * @param path root path (i.e. /path1/path2)
 * @param data JsonNode
 * @param etcdClient EtcdClient
 */
public static void putAsJson(String path,JsonNode data,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  Map<String,Object> flattened=new JsonFlattener(EtcdUtil.jsonToString(data)).withFlattenMode(FlattenMode.MONGODB).withSeparator('/').flattenAsMap();
  try {
    etcdClient.delete(path).recursive().send().get();
  }
 catch (  EtcdException e) {
    if (EtcdErrorCode.KeyNotFound != e.errorCode) {
      throw e;
    }
  }
  for (  Map.Entry<String,Object> entry : flattened.entrySet()) {
    etcdClient.put(path + ""String_Node_Str"" + entry.getKey(),String.valueOf(entry.getValue())).send().get();
  }
}"
8179,"/** 
 * Iterates recursively over every node path, translating the structure of the node to a JSON structure on the parameter <i>json</i>
 * @param json JSON object to complete using the node information
 * @param node Etcd node information (recursively obtained)
 */
private static void iterateOverNodes(ObjectNode json,EtcdNode node){
  if (node.isDir()) {
    for (    EtcdNode n : node.getNodes())     iterateOverNodes(json,n);
  }
 else {
    List<String> keyPath=new ArrayList<>();
    for (    String key : node.getKey().split(""String_Node_Str"")) {
      if (!key.isEmpty())       keyPath.add(key);
    }
    ObjectNode jsonNodes=json;
    Iterator<String> iterator=keyPath.iterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      if (jsonNodes.get(key) == null) {
        if (iterator.hasNext()) {
          jsonNodes=jsonNodes.putObject(key);
        }
 else {
          jsonNodes=jsonNodes.put(key,node.getValue());
        }
      }
 else {
        jsonNodes=(ObjectNode)jsonNodes.get(key);
      }
    }
  }
}","/** 
 * Iterates recursively over every node path, translating the structure of the node to a JSON structure on the parameter <i>json</i>
 * @param json JSON object to complete using the node information
 * @param node Etcd node information (recursively obtained)
 */
private static void iterateOverNodes(ObjectNode json,EtcdNode node){
  if (node.isDir()) {
    for (    EtcdNode n : node.getNodes())     iterateOverNodes(json,n);
  }
 else {
    List<String> keyPath=new ArrayList<>();
    for (    String key : node.getKey().split(""String_Node_Str"")) {
      if (!key.isEmpty())       keyPath.add(key);
    }
    ObjectNode jsonNodes=json;
    Iterator<String> iterator=keyPath.iterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      key=key.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (jsonNodes.get(key) == null) {
        if (iterator.hasNext()) {
          jsonNodes=jsonNodes.putObject(key);
        }
 else {
          jsonNodes=jsonNodes.put(key,node.getValue());
        }
      }
 else {
        jsonNodes=(ObjectNode)jsonNodes.get(key);
      }
    }
  }
}"
8180,"/** 
 * Transforms etcd format (in dot notation) to a standard Json (with arrays and primitive types)
 * @param etcdJson from etcd
 * @return standardized Json
 * @throws IOException
 */
private static JsonNode dotNotationToStandardJson(JsonNode etcdJson) throws IOException {
  String unflattened=new JsonUnflattener(jsonToString(flattenJson(etcdJson,""String_Node_Str""))).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer(){
    @Override public String transform(    String s){
      return s.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
).unflatten();
  return mapper.readTree(unflattened);
}","/** 
 * Transforms etcd format (in dot notation) to a standard Json (with arrays and primitive types)
 * @param etcdJson from etcd
 * @return standardized Json
 * @throws IOException
 */
private static JsonNode dotNotationToStandardJson(JsonNode etcdJson) throws IOException {
  if (!etcdJson.isValueNode()) {
    String unflattened=new JsonUnflattener(jsonToString(flattenJson(etcdJson,""String_Node_Str""))).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(new KeyTransformer(){
      @Override public String transform(      String s){
        return s.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
    }
).unflatten();
    return mapper.readTree(unflattened);
  }
 else {
    return etcdJson;
  }
}"
8181,"/** 
 * Puts the content of the Json recursively from the specified <i>path</i>
 * @param path root path (i.e. /path1/path2)
 * @param data JsonNode
 * @param etcdClient EtcdClient
 */
public static void putAsJson(String path,JsonNode data,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  Map<String,Object> flattened=new JsonFlattener(EtcdUtil.jsonToString(data)).withFlattenMode(FlattenMode.MONGODB).withSeparator('/').flattenAsMap();
  try {
    etcdClient.delete(path).recursive().send().get();
  }
 catch (  EtcdException e) {
    if (EtcdErrorCode.KeyNotFound != e.errorCode) {
      throw e;
    }
  }
  for (  Map.Entry<String,Object> entry : flattened.entrySet()) {
    etcdClient.put(path + ""String_Node_Str"" + entry.getKey(),String.valueOf(entry.getValue())).send().get();
  }
}","/** 
 * Puts the content of the Json recursively from the specified <i>path</i>
 * @param path root path (i.e. /path1/path2)
 * @param data JsonNode
 * @param etcdClient EtcdClient
 */
public static void putAsJson(String path,JsonNode data,EtcdClient etcdClient) throws IOException, EtcdAuthenticationException, TimeoutException, EtcdException {
  Map<String,Object> flattened=new JsonFlattener(EtcdUtil.jsonToString(data)).withFlattenMode(FlattenMode.MONGODB).withSeparator('/').withKeyTransformer(s -> s.replaceAll(""String_Node_Str"",""String_Node_Str"")).flattenAsMap();
  try {
    etcdClient.delete(path).recursive().send().get();
  }
 catch (  EtcdException e) {
    if (EtcdErrorCode.KeyNotFound != e.errorCode) {
      throw e;
    }
  }
  for (  Map.Entry<String,Object> entry : flattened.entrySet()) {
    etcdClient.put(path + ""String_Node_Str"" + entry.getKey(),String.valueOf(entry.getValue())).send().get();
  }
}"
8182,"/** 
 * Transforms etcd format (in dot notation) to a standard Json (with arrays and primitive types)
 * @param etcdJson from etcd
 * @return standardized Json
 * @throws IOException
 */
private static JsonNode dotNotationToStandardJson(JsonNode etcdJson) throws IOException {
  String unflattened=new JsonUnflattener(jsonToString(flattenJson(etcdJson,""String_Node_Str""))).withFlattenMode(FlattenMode.MONGODB).unflatten();
  return mapper.readTree(unflattened);
}","/** 
 * Transforms etcd format (in dot notation) to a standard Json (with arrays and primitive types)
 * @param etcdJson from etcd
 * @return standardized Json
 * @throws IOException
 */
private static JsonNode dotNotationToStandardJson(JsonNode etcdJson) throws IOException {
  String unflattened=new JsonUnflattener(jsonToString(flattenJson(etcdJson,""String_Node_Str""))).withFlattenMode(FlattenMode.MONGODB).withKeyTransformer(s -> s.replaceAll(""String_Node_Str"",""String_Node_Str"")).unflatten();
  return mapper.readTree(unflattened);
}"
8183,"@Test public void testPutJson() throws EtcdAuthenticationException, TimeoutException, EtcdException, IOException {
  ObjectMapper mapper=new ObjectMapper();
  File testJson=new File(""String_Node_Str"");
  JsonNode toEtcd=mapper.readTree(testJson);
  EtcdUtil.putAsJson(""String_Node_Str"",toEtcd,etcd);
  EtcdKeysResponse widget=etcd.get(""String_Node_Str"").send().get();
  assertEquals(widget.getNode().getNodes().size(),1);
  EtcdKeysResponse widgets=etcd.get(""String_Node_Str"").send().get();
  assertEquals(widgets.getNode().getNodes().size(),4);
}","@Test public void testPutJson() throws EtcdAuthenticationException, TimeoutException, EtcdException, IOException {
  ObjectMapper mapper=new ObjectMapper();
  File testJson=new File(""String_Node_Str"");
  JsonNode toEtcd=mapper.readTree(testJson);
  EtcdUtil.putAsJson(""String_Node_Str"",toEtcd,etcd);
  EtcdKeysResponse widget=etcd.get(""String_Node_Str"").send().get();
  assertEquals(widget.getNode().getNodes().size(),1);
  EtcdKeysResponse widgets=etcd.get(""String_Node_Str"").send().get();
  assertEquals(widgets.getNode().getNodes().size(),5);
}"
8184,"/** 
 * Constructor with custom eventloop group and timeout
 * @param config          for netty
 * @param securityContext security context (ssl, authentication)
 * @param uris            to connect to
 */
public EtcdNettyClient(final EtcdNettyConfig config,final EtcdSecurityContext securityContext,final URI... uris){
  logger.info(""String_Node_Str"");
  this.lastWorkingUriIndex=0;
  this.config=config.clone();
  this.securityContext=securityContext.clone();
  this.uris=uris;
  this.eventLoopGroup=config.getEventLoopGroup();
  this.bootstrap=new Bootstrap().group(eventLoopGroup).channel(config.getSocketChannelClass()).option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,config.getConnectTimeout()).resolver(new DnsAddressResolverGroup(NioDatagramChannel.class,DnsServerAddresses.defaultAddresses())).handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ChannelPipeline p=ch.pipeline();
      if (securityContext.hasNettySsl()) {
        p.addLast(securityContext.nettySslContext().newHandler(ch.alloc()));
      }
 else       if (securityContext.hasSsl()) {
        p.addLast(new SslHandler(securityContext.sslContext().createSSLEngine()));
      }
      p.addLast(""String_Node_Str"",new HttpClientCodec());
      p.addLast(""String_Node_Str"",new HttpBasicAuthHandler());
      p.addLast(""String_Node_Str"",new ChunkedWriteHandler());
      p.addLast(""String_Node_Str"",new HttpObjectAggregator(config.getMaxFrameSize()));
    }
  }
);
}","/** 
 * Constructor with custom eventloop group and timeout
 * @param config          for netty
 * @param securityContext security context (ssl, authentication)
 * @param uris            to connect to
 */
public EtcdNettyClient(final EtcdNettyConfig config,final EtcdSecurityContext securityContext,final URI... uris){
  logger.info(""String_Node_Str"");
  this.lastWorkingUriIndex=0;
  this.config=config.clone();
  this.securityContext=securityContext.clone();
  this.uris=uris;
  this.eventLoopGroup=config.getEventLoopGroup() == null ? new NioEventLoopGroup() : config.getEventLoopGroup();
  this.bootstrap=new Bootstrap().group(eventLoopGroup).channel(config.getSocketChannelClass()).option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,config.getConnectTimeout()).resolver(new DnsAddressResolverGroup(NioDatagramChannel.class,DnsServerAddresses.defaultAddresses())).handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ChannelPipeline p=ch.pipeline();
      if (securityContext.hasNettySsl()) {
        p.addLast(securityContext.nettySslContext().newHandler(ch.alloc()));
      }
 else       if (securityContext.hasSsl()) {
        p.addLast(new SslHandler(securityContext.sslContext().createSSLEngine()));
      }
      p.addLast(""String_Node_Str"",new HttpClientCodec());
      p.addLast(""String_Node_Str"",new HttpBasicAuthHandler());
      p.addLast(""String_Node_Str"",new ChunkedWriteHandler());
      p.addLast(""String_Node_Str"",new HttpObjectAggregator(config.getMaxFrameSize()));
    }
  }
);
}"
8185,"/** 
 * Set a custom event loop group. For use within existing netty architectures
 * @param eventLoopGroup eventLoopGroup to set.
 * @param managed whether event loop group will be closed when etcd client close, true represent yes
 * @return itself for chaining.
 */
public EtcdNettyConfig setEventLoopGroup(EventLoopGroup eventLoopGroup,boolean managed){
  if (this.managedEventLoopGroup) {
    this.eventLoopGroup.shutdownGracefully();
  }
  this.eventLoopGroup=eventLoopGroup;
  this.managedEventLoopGroup=managed;
  return this;
}","/** 
 * Set a custom event loop group. For use within existing netty architectures
 * @param eventLoopGroup eventLoopGroup to set.
 * @param managed whether event loop group will be closed when etcd client close, true represent yes
 * @return itself for chaining.
 */
public EtcdNettyConfig setEventLoopGroup(EventLoopGroup eventLoopGroup,boolean managed){
  if (this.eventLoopGroup != null && this.managedEventLoopGroup) {
    this.eventLoopGroup.shutdownGracefully();
  }
  this.eventLoopGroup=eventLoopGroup;
  this.managedEventLoopGroup=managed;
  return this;
}"
8186,"/** 
 * Constructor
 * @param msBeforeRetry milliseconds before retrying
 * @param timesToRetry  number of times to retry
 */
public RetryNTimes(int msBeforeRetry,int timesToRetry){
  super(msBeforeRetry);
  this.timesToRetry=timesToRetry;
}","/** 
 * Constructor
 * @param msBeforeRetry milliseconds before retrying
 * @param timesToRetry  number of times to retry
 */
public RetryNTimes(int msBeforeRetry,int timesToRetry){
  super(msBeforeRetry);
  this.timesToRetry=timesToRetry;
  if (timesToRetry > 0 && msBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
8187,"@Override public boolean shouldRetry(ConnectionState connectionState){
  return connectionState.retryCount < timesToRetry;
}","@Override public boolean shouldRetry(ConnectionState connectionState){
  return connectionState.retryCount <= timesToRetry;
}"
8188,"@Override public boolean shouldRetry(ConnectionState connectionState){
  if (!retryAttempted) {
    retryAttempted=true;
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean shouldRetry(ConnectionState connectionState){
  return connectionState.retryCount <= 1;
}"
8189,"/** 
 * Does the retry. Will always try all URIs before throwing an exception.
 * @param state        of connection
 * @param retryHandler handles the retry itself
 * @param failHandler  handles the fail
 * @throws RetryCancelled if retry is cancelled
 */
public final void retry(final ConnectionState state,final RetryHandler retryHandler,final ConnectionFailHandler failHandler) throws RetryCancelled {
  if (state.retryCount == 0) {
    state.msBeforeRetry=this.startRetryTime;
  }
  state.retryCount++;
  state.uriIndex=state.retryCount % state.uris.length;
  if (this.shouldRetry(state)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",state.retryCount);
    }
    if (state.msBeforeRetry > 0) {
      timer.newTimeout(new TimerTask(){
        @Override public void run(        Timeout timeout) throws Exception {
          try {
            retryHandler.doRetry(state);
          }
 catch (          IOException e) {
            failHandler.catchException(e);
          }
        }
      }
,state.msBeforeRetry,TimeUnit.MILLISECONDS);
    }
 else {
      try {
        retryHandler.doRetry(state);
      }
 catch (      IOException e) {
        failHandler.catchException(e);
      }
    }
  }
 else {
    timer.stop();
    throw new RetryCancelled();
  }
}","/** 
 * Does the retry. Will always try all URIs before throwing an exception.
 * @param state        of connection
 * @param retryHandler handles the retry itself
 * @param failHandler  handles the fail
 * @throws RetryCancelled if retry is cancelled
 */
public final void retry(final ConnectionState state,final RetryHandler retryHandler,final ConnectionFailHandler failHandler) throws RetryCancelled {
  if (state.retryCount == 0) {
    state.msBeforeRetry=this.startRetryTime;
  }
  state.retryCount++;
  state.uriIndex=state.retryCount % state.uris.length;
  if (this.shouldRetry(state)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",state.retryCount);
    }
    if (state.msBeforeRetry > 0) {
      state.timer.newTimeout(new TimerTask(){
        @Override public void run(        Timeout timeout) throws Exception {
          try {
            retryHandler.doRetry(state);
          }
 catch (          IOException e) {
            failHandler.catchException(e);
          }
        }
      }
,state.msBeforeRetry,TimeUnit.MILLISECONDS);
    }
 else {
      try {
        retryHandler.doRetry(state);
      }
 catch (      IOException e) {
        failHandler.catchException(e);
      }
    }
  }
 else {
    throw new RetryCancelled();
  }
}"
8190,"/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count
 * @param maxDelay           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelay){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelay=maxDelay;
}","/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count, if maxRetryCount <= 0, it will retry infinitely
 * @param maxDelay           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelay){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelay=maxDelay;
  if (startMsBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxDelay <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
8191,"@Override public boolean shouldRetry(ConnectionState state){
  if (this.maxRetryCount != -1 && state.retryCount >= this.maxRetryCount) {
    return false;
  }
  if (state.msBeforeRetry == 0) {
    state.msBeforeRetry=this.startRetryTime;
  }
 else   if (maxDelay == -1) {
    state.msBeforeRetry*=2;
  }
 else   if (state.msBeforeRetry < maxDelay) {
    state.msBeforeRetry*=2;
    if (state.msBeforeRetry > maxDelay) {
      state.msBeforeRetry=maxDelay;
    }
  }
 else {
    return false;
  }
  return true;
}","@Override public boolean shouldRetry(ConnectionState state){
  if (this.maxRetryCount > 0 && state.retryCount > this.maxRetryCount) {
    return false;
  }
  if (state.msBeforeRetry <= 0) {
    state.msBeforeRetry=startRetryTime;
  }
 else   if (state.msBeforeRetry < maxDelay) {
    state.msBeforeRetry*=2;
  }
  if (state.msBeforeRetry > maxDelay) {
    state.msBeforeRetry=maxDelay;
  }
  return true;
}"
8192,"@Override public boolean shouldRetry(ConnectionState connectionState){
  return (new Date().getTime() - connectionState.startTime) < timeoutInMs;
}","@Override public boolean shouldRetry(ConnectionState connectionState){
  return (System.currentTimeMillis() - connectionState.startTime) < timeoutInMs;
}"
8193,"/** 
 * Constructor
 * @param msBeforeRetry milliseconds before retrying
 * @param timeoutInMs   timeout in ms
 */
public RetryWithTimeout(int msBeforeRetry,int timeoutInMs){
  super(msBeforeRetry);
  this.timeoutInMs=timeoutInMs;
}","/** 
 * Constructor
 * @param msBeforeRetry milliseconds before retrying
 * @param timeoutInMs   timeout in ms
 */
public RetryWithTimeout(int msBeforeRetry,int timeoutInMs){
  super(msBeforeRetry);
  this.timeoutInMs=timeoutInMs;
  if (msBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
8194,"@Ignore @Test public void testCustomEtcdNettyClient() throws Exception {
  NioEventLoopGroup evl=new NioEventLoopGroup();
  URI uri=URI.create(""String_Node_Str"");
  EtcdNettyConfig config=new EtcdNettyConfig().setConnectTimeout(100).setSocketChannelClass(NioSocketChannel.class).setMaxFrameSize(1024 * 1024).setEventLoopGroup(evl).setHostName(""String_Node_Str"");
  EtcdNettyClient client=new EtcdNettyClient(config,uri);
  EtcdClient etcdClient=new EtcdClient(client);
  assertNotNull(etcdClient.version());
}","@Ignore @Test public void testCustomEtcdNettyClient() throws Exception {
  NioEventLoopGroup evl=new NioEventLoopGroup();
  URI uri=URI.create(""String_Node_Str"");
  EtcdNettyConfig config=new EtcdNettyConfig().setConnectTimeout(100).setSocketChannelClass(NioSocketChannel.class).setMaxFrameSize(1024 * 1024).setEventLoopGroup(evl).setHostName(""String_Node_Str"");
  EtcdNettyClient client=new EtcdNettyClient(config,uri);
  EtcdClient etcdClient=new EtcdClient(client);
  etcdClient.setRetryHandler(new RetryNTimes(0,0));
  assertNotNull(etcdClient.version());
}"
8195,"/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count, if maxRetryCount &lt;= 0, it will retry infinitely
 * @param maxDelay           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelay){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelay=maxDelay;
  if (startMsBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxDelay <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count, if maxRetryCount &lt;= 0, it will retry infinitely
 * @param maxDelayInMs           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelayInMs){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelayInMs=maxDelayInMs;
  if (startMsBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxDelayInMs <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
8196,"@Override public boolean shouldRetry(ConnectionState state){
  if (this.maxRetryCount > 0 && state.retryCount > this.maxRetryCount) {
    return false;
  }
  if (state.msBeforeRetry <= 0) {
    state.msBeforeRetry=startRetryTime;
  }
 else   if (state.msBeforeRetry < maxDelay) {
    state.msBeforeRetry*=2;
  }
  if (state.msBeforeRetry > maxDelay) {
    state.msBeforeRetry=maxDelay;
  }
  return true;
}","@Override public boolean shouldRetry(ConnectionState state){
  if (this.maxRetryCount > 0 && state.retryCount > this.maxRetryCount) {
    return false;
  }
  if (state.msBeforeRetry <= 0) {
    state.msBeforeRetry=startRetryTime;
  }
 else   if (state.msBeforeRetry < maxDelayInMs) {
    state.msBeforeRetry*=2;
  }
  if (state.msBeforeRetry > maxDelayInMs) {
    state.msBeforeRetry=maxDelayInMs;
  }
  return true;
}"
8197,"@Test public void testIfCleanClose() throws IOException, EtcdException, EtcdAuthenticationException, TimeoutException {
  EtcdClient client=new EtcdClient();
  client.setRetryHandler(new RetryWithExponentialBackOff(20,4,-1));
  EtcdResponsePromise<EtcdKeysResponse> p=client.get(""String_Node_Str"").waitForChange().send();
  client.close();
  try {
    p.get();
    fail();
  }
 catch (  IOException e) {
    if (!(e.getCause() instanceof CancellationException)) {
      fail();
    }
  }
}","@Test public void testIfCleanClose() throws IOException, EtcdException, EtcdAuthenticationException, TimeoutException {
  EtcdClient client=new EtcdClient();
  client.setRetryHandler(new RetryWithExponentialBackOff(20,4,1000));
  EtcdResponsePromise<EtcdKeysResponse> p=client.get(""String_Node_Str"").waitForChange().send();
  client.close();
  try {
    p.get();
    fail();
  }
 catch (  IOException e) {
    if (!(e.getCause() instanceof CancellationException)) {
      fail();
    }
  }
}"
8198,"@Before public void setUp() throws Exception {
  this.etcd=new EtcdClient();
  this.etcd.setRetryHandler(new RetryWithExponentialBackOff(20,4,-1));
}","@Before public void setUp() throws Exception {
  this.etcd=new EtcdClient();
  this.etcd.setRetryHandler(new RetryWithExponentialBackOff(20,4,10000));
}"
8199,"/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count, if maxRetryCount <= 0, it will retry infinitely
 * @param maxDelay           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelay){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelay=maxDelay;
  if (startMsBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxDelay <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Constructor
 * @param startMsBeforeRetry milliseconds before retrying base time
 * @param maxRetryCount      max retry count, if maxRetryCount &lt;= 0, it will retry infinitely
 * @param maxDelay           max delay between retries
 */
public RetryWithExponentialBackOff(int startMsBeforeRetry,int maxRetryCount,int maxDelay){
  super(startMsBeforeRetry);
  this.maxRetryCount=maxRetryCount;
  this.maxDelay=maxDelay;
  if (startMsBeforeRetry <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxDelay <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
8200,"@Override public Statement apply(Statement statement,Description description){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      try {
        client=new EtcdClient();
        EtcdVersionResponse response;
        long startMillis=System.currentTimeMillis();
        while (true) {
          try {
            response=client.version();
            break;
          }
 catch (          Throwable e) {
            if ((System.currentTimeMillis() - startMillis) + waitUnit.toMillis(wait) > maxWaitUnit.toMillis(maxWait)) {
              throw new IllegalStateException(""String_Node_Str"",e);
            }
            logger.info(""String_Node_Str"",wait,waitUnit);
            waitUnit.sleep(wait);
          }
        }
        logger.info(""String_Node_Str"",response.server,response.cluster);
        statement.evaluate();
      }
  finally {
        try {
          client.close();
        }
 catch (        Exception e) {
          e.printStackTrace(System.err);
        }
      }
    }
  }
;
}","@Override public Statement apply(final Statement statement,final Description description){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      try {
        client=new EtcdClient();
        EtcdVersionResponse response;
        long startMillis=System.currentTimeMillis();
        while (true) {
          try {
            response=client.version();
            break;
          }
 catch (          Throwable e) {
            if ((System.currentTimeMillis() - startMillis) + waitUnit.toMillis(wait) > maxWaitUnit.toMillis(maxWait)) {
              throw new IllegalStateException(""String_Node_Str"",e);
            }
            logger.info(""String_Node_Str"",wait,waitUnit);
            waitUnit.sleep(wait);
          }
        }
        logger.info(""String_Node_Str"",response.server,response.cluster);
        statement.evaluate();
      }
  finally {
        try {
          client.close();
        }
 catch (        Exception e) {
          e.printStackTrace(System.err);
        }
      }
    }
  }
;
}"
8201,"@Override protected void channelRead0(ChannelHandlerContext ctx,FullHttpResponse response) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + response.status().code() + ""String_Node_Str""+ this.request.getMethod().name()+ ""String_Node_Str""+ this.request.getUri());
  }
  if (response.status().equals(HttpResponseStatus.MOVED_PERMANENTLY) || response.status().equals(HttpResponseStatus.TEMPORARY_REDIRECT)) {
    if (response.headers().contains(""String_Node_Str"")) {
      this.request.setUrl(response.headers().get(""String_Node_Str""));
      this.client.connect(this.request);
      ctx.close();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + this.request.getHttpRequest().uri() + ""String_Node_Str""+ response.headers().get(""String_Node_Str""));
      }
    }
 else {
      this.promise.setFailure(new Exception(""String_Node_Str""));
    }
  }
 else {
    if (!response.content().isReadable()) {
      this.promise.setFailure(new IOException(""String_Node_Str"" + response.status()));
    }
    try {
      this.promise.setSuccess(decodeResponse(response));
    }
 catch (    Exception e) {
      this.promise.setFailure(e);
    }
  }
}","@Override protected void channelRead0(ChannelHandlerContext ctx,FullHttpResponse response) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + response.status().code() + ""String_Node_Str""+ this.request.getMethod().name()+ ""String_Node_Str""+ this.request.getUri());
  }
  if (response.status().equals(HttpResponseStatus.MOVED_PERMANENTLY) || response.status().equals(HttpResponseStatus.TEMPORARY_REDIRECT)) {
    if (response.headers().contains(""String_Node_Str"")) {
      this.request.setUrl(response.headers().get(""String_Node_Str""));
      this.client.connect(this.request);
      ctx.close();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + this.request.getHttpRequest().uri() + ""String_Node_Str""+ response.headers().get(""String_Node_Str""));
      }
    }
 else {
      this.promise.setFailure(new Exception(""String_Node_Str""));
    }
  }
 else {
    if (!response.content().isReadable()) {
      if (response.status().equals(HttpResponseStatus.OK) || response.status().equals(HttpResponseStatus.ACCEPTED) || response.status().equals(HttpResponseStatus.CREATED)) {
        this.client.connect(this.request);
        return;
      }
      this.promise.setFailure(new IOException(""String_Node_Str"" + response.status()));
    }
    try {
      this.promise.setSuccess(decodeResponse(response));
    }
 catch (    Exception e) {
      this.promise.setFailure(e);
    }
  }
}"
8202,"@Override public void initChannel(SocketChannel ch) throws Exception {
  ChannelPipeline p=ch.pipeline();
  if (sslContext != null) {
    p.addLast(sslContext.newHandler(ch.alloc()));
  }
  p.addLast(""String_Node_Str"",new HttpClientCodec());
  int maxFrameSize=Integer.parseInt(System.getProperty(""String_Node_Str"",Integer.toString(1024 * 100)));
  p.addLast(""String_Node_Str"",new HttpObjectAggregator(maxFrameSize));
}","@Override public void initChannel(SocketChannel ch) throws Exception {
  ChannelPipeline p=ch.pipeline();
  if (sslContext != null) {
    p.addLast(sslContext.newHandler(ch.alloc()));
  }
  p.addLast(""String_Node_Str"",new HttpClientCodec());
  p.addLast(""String_Node_Str"",new ChunkedWriteHandler());
  int maxFrameSize=Integer.parseInt(System.getProperty(""String_Node_Str"",Integer.toString(1024 * 100)));
  p.addLast(""String_Node_Str"",new HttpObjectAggregator(maxFrameSize));
}"
8203,"private Bootstrap initClient(final SslContext sslContext,final NioEventLoopGroup eventLoopGroup,int connectTimeout){
  return new Bootstrap().group(eventLoopGroup).channel(NioSocketChannel.class).option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,connectTimeout).handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ChannelPipeline p=ch.pipeline();
      if (sslContext != null) {
        p.addLast(sslContext.newHandler(ch.alloc()));
      }
      p.addLast(""String_Node_Str"",new HttpClientCodec());
      int maxFrameSize=Integer.parseInt(System.getProperty(""String_Node_Str"",Integer.toString(1024 * 100)));
      p.addLast(""String_Node_Str"",new HttpObjectAggregator(maxFrameSize));
    }
  }
);
}","private Bootstrap initClient(final SslContext sslContext,final NioEventLoopGroup eventLoopGroup,int connectTimeout){
  return new Bootstrap().group(eventLoopGroup).channel(NioSocketChannel.class).option(ChannelOption.ALLOCATOR,PooledByteBufAllocator.DEFAULT).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,connectTimeout).handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ChannelPipeline p=ch.pipeline();
      if (sslContext != null) {
        p.addLast(sslContext.newHandler(ch.alloc()));
      }
      p.addLast(""String_Node_Str"",new HttpClientCodec());
      p.addLast(""String_Node_Str"",new ChunkedWriteHandler());
      int maxFrameSize=Integer.parseInt(System.getProperty(""String_Node_Str"",Integer.toString(1024 * 100)));
      p.addLast(""String_Node_Str"",new HttpObjectAggregator(maxFrameSize));
    }
  }
);
}"
8204,"/** 
 * Connect to server
 * @param etcdRequest to request with
 * @param connectionState for retries
 * @param < R > Type of response
 * @throws IOException if request could not be sent.
 */
@SuppressWarnings(""String_Node_Str"") protected <R>void connect(final EtcdRequest<R> etcdRequest,final ConnectionState connectionState) throws IOException {
  URI uri=uris[connectionState.uriIndex];
  URI requestUri=URI.create(etcdRequest.getUrl());
  if (requestUri.getHost() != null && requestUri.getPort() > -1) {
    uri=requestUri;
  }
  final ChannelFuture connectFuture=bootstrap.clone().connect(uri.getHost(),uri.getPort());
  final Channel channel=connectFuture.channel();
  etcdRequest.getPromise().attachNettyPromise((Promise<R>)new DefaultPromise<>(connectFuture.channel().eventLoop()));
  connectFuture.addListener(new GenericFutureListener<ChannelFuture>(){
    @Override public void operationComplete(    final ChannelFuture f) throws Exception {
      if (!f.isSuccess()) {
        if (logger.isDebugEnabled()) {
          logger.debug(String.format(""String_Node_Str"" + connectionState.uris[connectionState.uriIndex]));
        }
        etcdRequest.getPromise().handleRetry(f.cause());
        return;
      }
      if (etcdRequest.getPromise().getNettyPromise().isCancelled()) {
        f.channel().close();
        etcdRequest.getPromise().getNettyPromise().setFailure(new CancellationException());
        return;
      }
      final Promise listenedToPromise=etcdRequest.getPromise().getNettyPromise();
      listenedToPromise.addListener(new GenericFutureListener<Future<?>>(){
        @Override public void operationComplete(        Future<?> future) throws Exception {
          if (etcdRequest.getPromise().getNettyPromise() == listenedToPromise) {
            f.channel().close();
          }
        }
      }
);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + channel.remoteAddress().toString());
      }
      lastWorkingUriIndex=connectionState.uriIndex;
      modifyPipeLine(etcdRequest,f.channel().pipeline());
      HttpRequest httpRequest=createHttpRequest(etcdRequest.getUrl(),etcdRequest);
      channel.writeAndFlush(httpRequest).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (!future.isSuccess()) {
            etcdRequest.getPromise().setException(future.cause());
            f.channel().close();
          }
        }
      }
);
      channel.closeFuture().addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + etcdRequest.getMethod().name() + ""String_Node_Str""+ etcdRequest.getUri());
          }
        }
      }
);
    }
  }
);
}","/** 
 * Connect to server
 * @param etcdRequest to request with
 * @param connectionState for retries
 * @param < R > Type of response
 * @throws IOException if request could not be sent.
 */
@SuppressWarnings(""String_Node_Str"") protected <R>void connect(final EtcdRequest<R> etcdRequest,final ConnectionState connectionState) throws IOException {
  URI uri=uris[connectionState.uriIndex];
  URI requestUri=URI.create(etcdRequest.getUrl());
  if (requestUri.getHost() != null && requestUri.getPort() > -1) {
    uri=requestUri;
  }
  final ChannelFuture connectFuture=bootstrap.clone().connect(uri.getHost(),uri.getPort());
  final Channel channel=connectFuture.channel();
  etcdRequest.getPromise().attachNettyPromise((Promise<R>)new DefaultPromise<>(connectFuture.channel().eventLoop()));
  connectFuture.addListener(new GenericFutureListener<ChannelFuture>(){
    @Override public void operationComplete(    final ChannelFuture f) throws Exception {
      if (!f.isSuccess()) {
        if (logger.isDebugEnabled()) {
          logger.debug(String.format(""String_Node_Str"" + connectionState.uris[connectionState.uriIndex]));
        }
        etcdRequest.getPromise().handleRetry(f.cause());
        return;
      }
      if (etcdRequest.getPromise().getNettyPromise().isCancelled()) {
        f.channel().close();
        etcdRequest.getPromise().getNettyPromise().setFailure(new CancellationException());
        return;
      }
      final Promise listenedToPromise=etcdRequest.getPromise().getNettyPromise();
      listenedToPromise.addListener(new GenericFutureListener<Future<?>>(){
        @Override public void operationComplete(        Future<?> future) throws Exception {
          if (etcdRequest.getPromise().getNettyPromise() == listenedToPromise) {
            f.channel().close();
          }
        }
      }
);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + channel.remoteAddress().toString());
      }
      lastWorkingUriIndex=connectionState.uriIndex;
      modifyPipeLine(etcdRequest,f.channel().pipeline());
      createAndSendHttpRequest(etcdRequest.getUrl(),etcdRequest,channel).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (!future.isSuccess()) {
            etcdRequest.getPromise().setException(future.cause());
            f.channel().close();
          }
        }
      }
);
      channel.closeFuture().addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + etcdRequest.getMethod().name() + ""String_Node_Str""+ etcdRequest.getUri());
          }
        }
      }
);
    }
  }
);
}"
8205,"/** 
 * Modify the pipeline for the request
 * @param req      to process
 * @param pipeline to modify
 * @param < R >      Type of Response
 */
@SuppressWarnings(""String_Node_Str"") private <R>void modifyPipeLine(EtcdRequest<R> req,ChannelPipeline pipeline){
  if (req.getTimeout() != -1) {
    pipeline.addFirst(new ChannelHandlerAdapter(){
      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause) throws Exception {
        req.getPromise().getNettyPromise().setFailure(cause);
      }
    }
);
    pipeline.addFirst(new ReadTimeoutHandler(req.getTimeout(),req.getTimeoutUnit()));
  }
  if (req instanceof EtcdKeyRequest) {
    pipeline.addLast(new EtcdKeyResponseHandler(this,(EtcdKeyRequest)req));
  }
 else   if (req instanceof EtcdVersionRequest) {
    pipeline.addLast(new SimpleChannelInboundHandler<FullHttpResponse>(){
      @Override protected void channelRead0(      ChannelHandlerContext ctx,      FullHttpResponse msg) throws Exception {
        ((Promise<String>)((EtcdVersionRequest)req).getPromise()).setSuccess(msg.content().toString(Charset.defaultCharset()));
      }
    }
);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + req.getClass().getName());
  }
}","/** 
 * Modify the pipeline for the request
 * @param req      to process
 * @param pipeline to modify
 * @param < R >      Type of Response
 */
@SuppressWarnings(""String_Node_Str"") private <R>void modifyPipeLine(EtcdRequest<R> req,ChannelPipeline pipeline){
  if (req.getTimeout() != -1) {
    pipeline.addFirst(new ChannelHandlerAdapter(){
      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause) throws Exception {
        req.getPromise().getNettyPromise().setFailure(cause);
      }
    }
);
    pipeline.addFirst(new ReadTimeoutHandler(req.getTimeout(),req.getTimeoutUnit()));
  }
  if (req instanceof EtcdKeyRequest) {
    pipeline.addLast(new EtcdKeyResponseHandler(this,(EtcdKeyRequest)req));
  }
 else   if (req instanceof EtcdVersionRequest) {
    pipeline.addLast(new SimpleChannelInboundHandler<FullHttpResponse>(){
      @Override protected void channelRead0(      ChannelHandlerContext ctx,      FullHttpResponse msg) throws Exception {
        (((EtcdVersionRequest)req).getPromise()).getNettyPromise().setSuccess(msg.content().toString(Charset.defaultCharset()));
      }
    }
);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + req.getClass().getName());
  }
}"
8206,"@Override protected void channelRead0(ChannelHandlerContext ctx,FullHttpResponse msg) throws Exception {
  ((Promise<String>)((EtcdVersionRequest)req).getPromise()).setSuccess(msg.content().toString(Charset.defaultCharset()));
}","@Override protected void channelRead0(ChannelHandlerContext ctx,FullHttpResponse msg) throws Exception {
  (((EtcdVersionRequest)req).getPromise()).getNettyPromise().setSuccess(msg.content().toString(Charset.defaultCharset()));
}"
8207,"/** 
 * Gives you an all purpose thread-safe persisted Tracker object.
 * @return a shared Tracker
 */
public synchronized Tracker getTracker(){
  if (mPiwikTracker == null) {
    try {
      mPiwikTracker=getPiwik().newTracker(getTrackerUrl(),getSiteId(),""String_Node_Str"");
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return mPiwikTracker;
}","/** 
 * Gives you an all purpose thread-safe persisted Tracker object.
 * @return a shared Tracker
 */
public synchronized Tracker getTracker(){
  if (mPiwikTracker == null)   mPiwikTracker=getPiwik().newTracker(getTrackerUrl(),getSiteId(),""String_Node_Str"");
  return mPiwikTracker;
}"
8208,"/** 
 * Use this to disable Piwik, e.g. if the user opted out of tracking. Piwik will persist the choice and remain disable on next instance creation.</p> The choice is stored in   {@link #PREFERENCE_FILE_NAME} under the key {@link #PREFERENCE_KEY_OPTOUT}.
 * @param optOut true to disable reporting
 */
public void setOptOut(boolean optOut){
  mOptOut=optOut;
  getSharedPreferences().edit().putBoolean(PREFERENCE_KEY_OPTOUT,optOut).apply();
}","/** 
 * Use this to disable Piwik, e.g. if the user opted out of tracking. Piwik will persist the choice and remain disable on next instance creation.<p> The choice is stored in   {@link #PREFERENCE_FILE_NAME} under the key {@link #PREFERENCE_KEY_OPTOUT}.
 * @param optOut true to disable reporting
 */
public void setOptOut(boolean optOut){
  mOptOut=optOut;
  getSharedPreferences().edit().putBoolean(PREFERENCE_KEY_OPTOUT,optOut).apply();
}"
8209,"/** 
 * For testing purposes
 * @return query of the event ?r=1&sideId=1..
 */
@VisibleForTesting public String getLastEvent(){
  return mLastEvent;
}","/** 
 * For testing purposes
 * @return query of the event
 */
@VisibleForTesting public String getLastEvent(){
  return mLastEvent;
}"
8210,"/** 
 * Defines the User ID for this request. User ID is any non empty unique string identifying the user (such as an email address or a username). To access this value, users must be logged-in in your system so you can fetch this user ID from your system, and pass it to Piwik. <p/> When specified, the User ID will be ""enforced"". This means that if there is no recent visit with this User ID, a new one will be created. If a visit is found in the last 30 minutes with your specified User ID, then the new action will be recorded to this existing visit.
 * @param userId passing null will delete the current user-id.
 */
public Tracker setUserId(String userId){
  mDefaultTrackMe.set(QueryParams.USER_ID,userId);
  getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,userId).apply();
  return this;
}","/** 
 * Defines the User ID for this request. User ID is any non empty unique string identifying the user (such as an email address or a username). To access this value, users must be logged-in in your system so you can fetch this user ID from your system, and pass it to Piwik. <p> When specified, the User ID will be ""enforced"". This means that if there is no recent visit with this User ID, a new one will be created. If a visit is found in the last 30 minutes with your specified User ID, then the new action will be recorded to this existing visit.
 * @param userId passing null will delete the current user-id.
 */
public Tracker setUserId(String userId){
  mDefaultTrackMe.set(QueryParams.USER_ID,userId);
  getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,userId).apply();
  return this;
}"
8211,"@Override public String toString(){
  if (size() == 0) {
    return null;
  }
  return new JSONObject(this).toString();
}","public String toString(){
  JSONObject json=new JSONObject(mVars);
  return json.length() > 0 ? json.toString() : null;
}"
8212,"/** 
 * @param index  index accepts values from 1 to 5.
 * @param values packed key/value pair
 * @return super.put result or null if key is null or value length is not equals 2
 */
@Override public JSONArray put(String index,JSONArray values){
  if (values.length() == 2 && index != null) {
    return super.put(index,values);
  }
  Logy.d(LOGGER_TAG,""String_Node_Str"");
  return null;
}","/** 
 * @param index  index accepts values from 1 to 5.
 * @param values packed key/value pair
 * @return super.put result or null if key is null or value length is not equals 2
 */
public JSONArray put(String index,JSONArray values){
  if (values.length() != 2 || index == null) {
    Logy.d(LOGGER_TAG,""String_Node_Str"");
    return null;
  }
  return mVars.put(index,values);
}"
8213,"@Test public void testWrongValueSize() throws Exception {
  CustomVariables cv=new CustomVariables();
  assertNull(cv.put(""String_Node_Str"",new JSONArray(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))));
  assertNull(cv.put(""String_Node_Str"",new JSONArray(Arrays.asList(""String_Node_Str"",""String_Node_Str""))));
  assertEquals(cv.get(""String_Node_Str""),cv.put(""String_Node_Str"",new JSONArray(Arrays.asList(""String_Node_Str"",""String_Node_Str""))));
}","@Test public void testWrongValueSize() throws Exception {
  CustomVariables cv=new CustomVariables();
  assertNull(cv.put(""String_Node_Str"",new JSONArray(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))));
  assertEquals(null,cv.toString());
  assertNull(cv.put(""String_Node_Str"",new JSONArray(Arrays.asList(""String_Node_Str"",""String_Node_Str""))));
  assertEquals(""String_Node_Str"",cv.toString());
}"
8214,"@Test public void testWrongIndex() throws Exception {
  CustomVariables cv=new CustomVariables();
  cv.put(1,""String_Node_Str"",""String_Node_Str"");
  cv.put(10,""String_Node_Str"",""String_Node_Str"");
  cv.put(-1,""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cv.toString());
}","@Test public void testWrongIndex() throws Exception {
  CustomVariables cv=new CustomVariables();
  cv.put(1,""String_Node_Str"",""String_Node_Str"");
  cv.put(-1,""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cv.toString());
}"
8215,"/** 
 * A custom variable is a custom name-value pair that you can assign to your users or screen views, and then visualize the reports of how many visits, conversions, etc. for each custom variable. A custom variable is defined by a name — for example, ""User status"" — and a value – for example, ""LoggedIn"" or ""Anonymous"". You can track up to 5 custom variables for each user to your app.
 * @param index this Integer accepts values from 1 to 5.A given custom variable name must always be stored in the same ""index"" per session. For example, if you choose to store the variable name = ""Gender"" in index = 1 and you record another custom variable in index = 1, then the ""Gender"" variable will be deleted and replaced with the new custom variable stored in index 1.
 * @param name  String defines the name of a specific Custom Variable such as ""User type"".
 * @param value String defines the value of a specific Custom Variable such as ""Customer"".
 */
public synchronized TrackMe setScreenCustomVariable(int index,String name,String value){
  mScreenCustomVariable.put(index,name,value);
  return this;
}","/** 
 * Just like   {@link Tracker#setVisitCustomVariable(int,String,String)} but only valid per screen.Only takes effect when setting prior to tracking the screen view.
 */
public synchronized TrackMe setScreenCustomVariable(int index,String name,String value){
  mScreenCustomVariable.put(index,name,value);
  return this;
}"
8216,"/** 
 * Does exactly the same as setUserCustomVariable but use screen scope You can track up to 5 custom variables for each screen view.
 */
public Tracker setVisitCustomVariable(int index,String name,String value){
  mVisitCustomVariable.put(index,name,value);
  return this;
}","/** 
 * A custom variable is a custom name-value pair that you can assign to your users or screen views, and then visualize the reports of how many visits, conversions, etc. for each custom variable. A custom variable is defined by a name — for example, ""User status"" — and a value – for example, ""LoggedIn"" or ""Anonymous"". You can track up to 5 custom variables for each user to your app.
 * @param index this Integer accepts values from 1 to 5.A given custom variable name must always be stored in the same ""index"" per session. For example, if you choose to store the variable name = ""Gender"" in index = 1 and you record another custom variable in index = 1, then the ""Gender"" variable will be deleted and replaced with the new custom variable stored in index 1.
 * @param name  String defines the name of a specific Custom Variable such as ""User type"".
 * @param value String defines the value of a specific Custom Variable such as ""Customer"".
 */
public Tracker setVisitCustomVariable(int index,String name,String value){
  mVisitCustomVariable.put(index,name,value);
  return this;
}"
8217,"/** 
 * Use Piwik.newTracker() method to create new trackers
 * @param url       (required) Tracking HTTP API endpoint, for example, http://your-piwik-domain.tld/piwik.php
 * @param siteId    (required) id of site
 * @param authToken (optional) could be null
 * @param piwik     piwik object used to gain access to application params such as name, resolution or lang
 * @throws MalformedURLException
 */
protected Tracker(@NonNull final String url,@NonNull int siteId,String authToken,@NonNull Piwik piwik) throws MalformedURLException {
  String checkUrl=url;
  if (checkUrl.endsWith(""String_Node_Str"") || checkUrl.endsWith(""String_Node_Str"")) {
    mApiUrl=new URL(checkUrl);
  }
 else {
    if (!checkUrl.endsWith(""String_Node_Str"")) {
      checkUrl+=""String_Node_Str"";
    }
    mApiUrl=new URL(checkUrl + ""String_Node_Str"");
  }
  mPiwik=piwik;
  mSiteId=siteId;
  mDispatcher=new Dispatcher(mPiwik,mApiUrl,authToken);
  String userId=getSharedPreferences().getString(PREF_KEY_TRACKER_USERID,null);
  if (userId == null)   getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,UUID.randomUUID().toString()).commit();
  mDefaultTrackMe.set(QueryParams.USER_ID,userId);
  mDefaultTrackMe.set(QueryParams.SESSION_START,DEFAULT_TRUE_VALUE);
  String resolution=DEFAULT_UNKNOWN_VALUE;
  int[] res=DeviceHelper.getResolution(mPiwik.getContext());
  if (res != null)   resolution=String.format(""String_Node_Str"",res[0],res[1]);
  mDefaultTrackMe.set(QueryParams.SCREEN_RESOLUTION,resolution);
  mDefaultTrackMe.set(QueryParams.USER_AGENT,DeviceHelper.getUserAgent());
  mDefaultTrackMe.set(QueryParams.LANGUAGE,DeviceHelper.getUserLanguage());
  mDefaultTrackMe.set(QueryParams.COUNTRY,DeviceHelper.getUserCountry());
  mDefaultTrackMe.set(QueryParams.VISITOR_ID,makeRandomVisitorId());
}","/** 
 * Use Piwik.newTracker() method to create new trackers
 * @param url       (required) Tracking HTTP API endpoint, for example, http://your-piwik-domain.tld/piwik.php
 * @param siteId    (required) id of site
 * @param authToken (optional) could be null
 * @param piwik     piwik object used to gain access to application params such as name, resolution or lang
 * @throws MalformedURLException
 */
protected Tracker(@NonNull final String url,int siteId,String authToken,@NonNull Piwik piwik) throws MalformedURLException {
  String checkUrl=url;
  if (checkUrl.endsWith(""String_Node_Str"") || checkUrl.endsWith(""String_Node_Str"")) {
    mApiUrl=new URL(checkUrl);
  }
 else {
    if (!checkUrl.endsWith(""String_Node_Str"")) {
      checkUrl+=""String_Node_Str"";
    }
    mApiUrl=new URL(checkUrl + ""String_Node_Str"");
  }
  mPiwik=piwik;
  mSiteId=siteId;
  mDispatcher=new Dispatcher(mPiwik,mApiUrl,authToken);
  String userId=getSharedPreferences().getString(PREF_KEY_TRACKER_USERID,null);
  if (userId == null) {
    userId=UUID.randomUUID().toString();
    getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,userId).commit();
  }
  mDefaultTrackMe.set(QueryParams.USER_ID,userId);
  mDefaultTrackMe.set(QueryParams.SESSION_START,DEFAULT_TRUE_VALUE);
  String resolution=DEFAULT_UNKNOWN_VALUE;
  int[] res=DeviceHelper.getResolution(mPiwik.getContext());
  if (res != null)   resolution=String.format(""String_Node_Str"",res[0],res[1]);
  mDefaultTrackMe.set(QueryParams.SCREEN_RESOLUTION,resolution);
  mDefaultTrackMe.set(QueryParams.USER_AGENT,DeviceHelper.getUserAgent());
  mDefaultTrackMe.set(QueryParams.LANGUAGE,DeviceHelper.getUserLanguage());
  mDefaultTrackMe.set(QueryParams.COUNTRY,DeviceHelper.getUserCountry());
  mDefaultTrackMe.set(QueryParams.VISITOR_ID,makeRandomVisitorId());
}"
8218,"@Test public void testSetUserId() throws Exception {
  Tracker tracker=createTracker();
  tracker.setUserId(""String_Node_Str"");
  assertEquals(tracker.getUserId(),""String_Node_Str"");
  tracker.setUserId(""String_Node_Str"");
  assertEquals(tracker.getUserId(),""String_Node_Str"");
  tracker.setUserId(null);
  assertNull(tracker.getUserId());
  String uuid=UUID.randomUUID().toString();
  tracker.setUserId(uuid);
  assertEquals(uuid,tracker.getUserId());
  assertEquals(uuid,createTracker().getUserId());
}","@Test public void testSetUserId() throws Exception {
  Tracker tracker=createTracker();
  assertNotNull(tracker.getDefaultTrackMe().get(QueryParams.USER_ID));
  tracker.setUserId(""String_Node_Str"");
  assertEquals(tracker.getUserId(),""String_Node_Str"");
  tracker.setUserId(""String_Node_Str"");
  assertEquals(tracker.getUserId(),""String_Node_Str"");
  tracker.setUserId(null);
  assertNull(tracker.getUserId());
  String uuid=UUID.randomUUID().toString();
  tracker.setUserId(uuid);
  assertEquals(uuid,tracker.getUserId());
  assertEquals(uuid,createTracker().getUserId());
}"
8219,"private boolean doRequest(HttpRequestBase requestBase){
  HttpClient client=new DefaultHttpClient();
  HttpConnectionParams.setConnectionTimeout(client.getParams(),mTimeOut);
  HttpResponse response;
  if (mPiwik.isDryRun()) {
    Logy.d(LOGGER_TAG,""String_Node_Str"" + mDryRunOutput.size());
    mDryRunOutput.add(requestBase);
  }
 else {
    if (!mDryRunOutput.isEmpty())     mDryRunOutput.clear();
    try {
      response=client.execute(requestBase);
      int statusCode=response.getStatusLine().getStatusCode();
      Logy.d(LOGGER_TAG,String.format(""String_Node_Str"",statusCode));
      return statusCode == HttpStatus.SC_NO_CONTENT || statusCode == HttpStatus.SC_OK;
    }
 catch (    IOException e) {
      Logy.w(LOGGER_TAG,""String_Node_Str"",e);
    }
  }
  return false;
}","private boolean doRequest(HttpRequestBase requestBase){
  HttpClient client=new DefaultHttpClient();
  HttpConnectionParams.setConnectionTimeout(client.getParams(),mTimeOut);
  HttpResponse response;
  if (mPiwik.isDryRun()) {
    Logy.d(LOGGER_TAG,""String_Node_Str"" + mDryRunOutput.size());
    mDryRunOutput.add(requestBase);
  }
 else {
    if (!mDryRunOutput.isEmpty())     mDryRunOutput.clear();
    try {
      response=client.execute(requestBase);
      int statusCode=response.getStatusLine().getStatusCode();
      Logy.d(LOGGER_TAG,String.format(""String_Node_Str"",statusCode));
      return statusCode == HttpStatus.SC_NO_CONTENT || statusCode == HttpStatus.SC_OK;
    }
 catch (    Exception e) {
      Logy.w(LOGGER_TAG,""String_Node_Str"",e);
    }
  }
  return false;
}"
8220,"public int getTimeOut(){
  return mTimeOut;
}","/** 
 * Connection timeout in miliseconds
 * @return
 */
public int getTimeOut(){
  return mTimeOut;
}"
8221,"public long getSessionTimeout(){
  return mSessionTimeout;
}","/** 
 * Default is 30min (30*60*1000).
 * @return session timeout value in miliseconds
 */
public long getSessionTimeout(){
  return mSessionTimeout;
}"
8222,"public Tracker track(TrackMe trackMe){
  doInjections(trackMe);
  String event=trackMe.build();
  if (mPiwik.isOptOut()) {
    mLastEvent=event;
    Logy.d(Tracker.LOGGER_TAG,String.format(""String_Node_Str"",event));
  }
 else {
    Logy.d(Tracker.LOGGER_TAG,String.format(""String_Node_Str"",event));
    mDispatcher.submit(event);
  }
  return this;
}","public Tracker track(TrackMe trackMe){
  boolean newSession;
synchronized (mSessionLock) {
    newSession=tryNewSession();
    if (newSession)     mSessionStartLatch=new CountDownLatch(1);
  }
  if (newSession) {
    injectInitialParams(trackMe);
  }
 else {
    try {
      mSessionStartLatch.await(mDispatcher.getTimeOut(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  injectBaseParams(trackMe);
  String event=trackMe.build();
  if (mPiwik.isOptOut()) {
    mLastEvent=event;
    Logy.d(Tracker.LOGGER_TAG,String.format(""String_Node_Str"",event));
  }
 else {
    Logy.d(Tracker.LOGGER_TAG,String.format(""String_Node_Str"",event));
    mDispatcher.submit(event);
  }
  if (newSession)   mSessionStartLatch.countDown();
  return this;
}"
8223,"/** 
 * There parameters are only interesting for the very first query.
 */
private void injectInitialParams(TrackMe trackMe){
  trackMe.trySet(QueryParams.SESSION_START,mDefaultTrackMe.get(QueryParams.SESSION_START));
  trackMe.trySet(QueryParams.SCREEN_RESOLUTION,mDefaultTrackMe.get(QueryParams.SCREEN_RESOLUTION));
  trackMe.trySet(QueryParams.USER_AGENT,mDefaultTrackMe.get(QueryParams.USER_AGENT));
  trackMe.trySet(QueryParams.LANGUAGE,mDefaultTrackMe.get(QueryParams.LANGUAGE));
  trackMe.trySet(QueryParams.COUNTRY,mDefaultTrackMe.get(QueryParams.COUNTRY));
  trackMe.trySet(QueryParams.FIRST_VISIT_TIMESTAMP,mDefaultTrackMe.get(QueryParams.FIRST_VISIT_TIMESTAMP));
  trackMe.trySet(QueryParams.TOTAL_NUMBER_OF_VISITS,mDefaultTrackMe.get(QueryParams.TOTAL_NUMBER_OF_VISITS));
  trackMe.trySet(QueryParams.PREVIOUS_VISIT_TIMESTAMP,mDefaultTrackMe.get(QueryParams.PREVIOUS_VISIT_TIMESTAMP));
}","/** 
 * There parameters are only interesting for the very first query.
 */
private void injectInitialParams(TrackMe trackMe){
  long firstVisitTime;
  int visitCount;
  long previousVisit;
synchronized (getSharedPreferences()) {
    visitCount=1 + getSharedPreferences().getInt(PREF_KEY_TRACKER_VISITCOUNT,0);
    getSharedPreferences().edit().putInt(PREF_KEY_TRACKER_VISITCOUNT,visitCount).apply();
  }
synchronized (getSharedPreferences()) {
    firstVisitTime=getSharedPreferences().getLong(PREF_KEY_TRACKER_FIRSTVISIT,-1);
    if (firstVisitTime == -1) {
      firstVisitTime=System.currentTimeMillis() / 1000;
      getSharedPreferences().edit().putLong(PREF_KEY_TRACKER_FIRSTVISIT,firstVisitTime).apply();
    }
  }
synchronized (getSharedPreferences()) {
    previousVisit=getSharedPreferences().getLong(PREF_KEY_TRACKER_PREVIOUSVISIT,-1);
    getSharedPreferences().edit().putLong(PREF_KEY_TRACKER_PREVIOUSVISIT,System.currentTimeMillis() / 1000).apply();
  }
  mDefaultTrackMe.trySet(QueryParams.FIRST_VISIT_TIMESTAMP,firstVisitTime);
  mDefaultTrackMe.trySet(QueryParams.TOTAL_NUMBER_OF_VISITS,visitCount);
  if (previousVisit != -1)   mDefaultTrackMe.trySet(QueryParams.PREVIOUS_VISIT_TIMESTAMP,previousVisit);
  trackMe.trySet(QueryParams.SESSION_START,mDefaultTrackMe.get(QueryParams.SESSION_START));
  trackMe.trySet(QueryParams.SCREEN_RESOLUTION,mDefaultTrackMe.get(QueryParams.SCREEN_RESOLUTION));
  trackMe.trySet(QueryParams.USER_AGENT,mDefaultTrackMe.get(QueryParams.USER_AGENT));
  trackMe.trySet(QueryParams.LANGUAGE,mDefaultTrackMe.get(QueryParams.LANGUAGE));
  trackMe.trySet(QueryParams.COUNTRY,mDefaultTrackMe.get(QueryParams.COUNTRY));
  trackMe.trySet(QueryParams.FIRST_VISIT_TIMESTAMP,mDefaultTrackMe.get(QueryParams.FIRST_VISIT_TIMESTAMP));
  trackMe.trySet(QueryParams.TOTAL_NUMBER_OF_VISITS,mDefaultTrackMe.get(QueryParams.TOTAL_NUMBER_OF_VISITS));
  trackMe.trySet(QueryParams.PREVIOUS_VISIT_TIMESTAMP,mDefaultTrackMe.get(QueryParams.PREVIOUS_VISIT_TIMESTAMP));
}"
8224,"/** 
 * Returns real screen size if QueryParams.SCREEN_RESOLUTION is empty Note that the results also depend on the current device orientation. http://stackoverflow.com/a/9316553
 * @return formatted string: WxH
 */
public String getResolution(){
  int[] resolution=DeviceHelper.getResolution(mPiwik.getContext());
  if (resolution == null)   return DEFAULT_UNKNOWN_VALUE;
  return String.format(""String_Node_Str"",resolution[0],resolution[1]);
}","/** 
 * Returns real screen size if QueryParams.SCREEN_RESOLUTION is empty Note that the results also depend on the current device orientation. http://stackoverflow.com/a/9316553
 * @return formatted string: WxH
 */
public String getResolution(){
  if (mScreenResolution == null) {
    int[] resolution=DeviceHelper.getResolution(mPiwik.getContext());
    if (resolution == null)     mScreenResolution=DEFAULT_UNKNOWN_VALUE;
 else     mScreenResolution=String.format(""String_Node_Str"",resolution[0],resolution[1]);
  }
  return mScreenResolution;
}"
8225,"/** 
 * Returns user country
 * @return country
 */
public String getCountry(){
  if (userCountry == null) {
    userCountry=Locale.getDefault().getCountry();
  }
  return userCountry;
}","/** 
 * Returns user country
 * @return country
 */
public String getCountry(){
  if (mUserCountry == null) {
    mUserCountry=DeviceHelper.getUserCountry();
  }
  return mUserCountry;
}"
8226,"private void injectBaseParams(TrackMe trackMe){
  trackMe.trySet(QueryParams.API_VERSION,defaultAPIVersionValue);
  trackMe.trySet(QueryParams.RECORD,defaultRecordValue);
  trackMe.trySet(QueryParams.SITE_ID,mSiteId);
  trackMe.trySet(QueryParams.VISIT_SCOPE_CUSTOM_VARIABLES,mVisitCustomVariable.toString());
  trackMe.trySet(QueryParams.RANDOM_NUMBER,randomObject.nextInt(100000));
  trackMe.trySet(QueryParams.VISITOR_ID,getVisitorId());
  trackMe.trySet(QueryParams.USER_ID,getUserId());
  trackMe.trySet(QueryParams.DATETIME_OF_REQUEST,new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  trackMe.trySet(QueryParams.SEND_IMAGE,""String_Node_Str"");
  String urlPath=trackMe.get(QueryParams.URL_PATH);
  if (urlPath == null) {
    urlPath=getApplicationBaseURL() + ""String_Node_Str"";
  }
 else   if (urlPath.startsWith(""String_Node_Str"")) {
    urlPath=getApplicationBaseURL() + urlPath;
  }
 else   if (urlPath.startsWith(""String_Node_Str"") || urlPath.startsWith(""String_Node_Str"")) {
  }
 else   if (!urlPath.startsWith(""String_Node_Str"")) {
    urlPath=getApplicationBaseURL() + ""String_Node_Str"" + urlPath;
  }
  trackMe.set(QueryParams.URL_PATH,urlPath);
}","private void injectBaseParams(TrackMe trackMe){
  trackMe.trySet(QueryParams.API_VERSION,defaultAPIVersionValue);
  trackMe.trySet(QueryParams.RECORD,defaultRecordValue);
  trackMe.trySet(QueryParams.SITE_ID,mSiteId);
  trackMe.trySet(QueryParams.VISIT_SCOPE_CUSTOM_VARIABLES,mVisitCustomVariable.toString());
  trackMe.trySet(QueryParams.RANDOM_NUMBER,mRandomAntiCachingValue.nextInt(100000));
  trackMe.trySet(QueryParams.VISITOR_ID,getVisitorId());
  trackMe.trySet(QueryParams.USER_ID,getUserId());
  trackMe.trySet(QueryParams.DATETIME_OF_REQUEST,new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  trackMe.trySet(QueryParams.SEND_IMAGE,""String_Node_Str"");
  String urlPath=trackMe.get(QueryParams.URL_PATH);
  if (urlPath == null) {
    urlPath=getApplicationBaseURL() + ""String_Node_Str"";
  }
 else   if (urlPath.startsWith(""String_Node_Str"")) {
    urlPath=getApplicationBaseURL() + urlPath;
  }
 else   if (urlPath.startsWith(""String_Node_Str"") || urlPath.startsWith(""String_Node_Str"")) {
  }
 else   if (!urlPath.startsWith(""String_Node_Str"")) {
    urlPath=getApplicationBaseURL() + ""String_Node_Str"" + urlPath;
  }
  trackMe.set(QueryParams.URL_PATH,urlPath);
}"
8227,"/** 
 * Domain used to build required parameter url (http://developer.piwik.org/api-reference/tracking-api) If domain wasn't set `Application.getPackageName()` method will be used
 * @param domain your-domain.com
 */
public Tracker setApplicationDomain(String domain){
  applicationDomain=domain;
  return this;
}","/** 
 * Domain used to build required parameter url (http://developer.piwik.org/api-reference/tracking-api) If domain wasn't set `Application.getPackageName()` method will be used
 * @param domain your-domain.com
 */
public Tracker setApplicationDomain(String domain){
  mApplicationDomain=domain;
  return this;
}"
8228,"/** 
 * Returns user language
 * @return language
 */
public String getLanguage(){
  if (userLanguage == null) {
    userLanguage=Locale.getDefault().getLanguage();
  }
  return userLanguage;
}","/** 
 * Returns user language
 * @return language
 */
public String getLanguage(){
  if (mUserLanguage == null) {
    mUserLanguage=DeviceHelper.getUserLanguage();
  }
  return mUserLanguage;
}"
8229,"/** 
 * Sets custom UserAgent
 * @param userAgent your custom UserAgent String
 */
public void setUserAgent(String userAgent){
  this.userAgent=userAgent;
}","/** 
 * Sets custom UserAgent
 * @param userAgent your custom UserAgent String
 */
public void setUserAgent(String userAgent){
  mUserAgent=userAgent;
}"
8230,"protected String getApplicationDomain(){
  return applicationDomain != null ? applicationDomain : mPiwik.getApplicationDomain();
}","protected String getApplicationDomain(){
  return mApplicationDomain != null ? mApplicationDomain : mPiwik.getApplicationDomain();
}"
8231,"/** 
 * Returns android system user agent
 * @return well formatted user agent
 */
public String getUserAgent(){
  if (userAgent == null) {
    userAgent=System.getProperty(""String_Node_Str"");
  }
  return userAgent;
}","/** 
 * Returns android system user agent
 * @return well formatted user agent
 */
public String getUserAgent(){
  if (mUserAgent == null) {
    mUserAgent=DeviceHelper.getUserAgent();
  }
  return mUserAgent;
}"
8232,"/** 
 * Events are a useful way to collect data about a user's interaction with interactive components of your app, like button presses or the use of a particular item in a game.
 * @param category (required) – this String defines the event category.You might define event categories based on the class of user actions, like clicks or gestures or voice commands, or you might define them based upon the features available in your application (play, pause, fast forward, etc.).
 * @param action   (required) this String defines the specific event action within the category specified.In the example, we are basically saying that the category of the event is user clicks, and the action is a button click.
 * @param label    defines a label associated with the event. For example, if you have multiple Button controls on ascreen, you might use the label to specify the specific View control identifier that was clicked.
 * @param value    defines a numeric value associated with the event. For example, if you were tracking ""Buy""button clicks, you might log the number of items being purchased, or their total cost.
 */
public Tracker trackEvent(String category,String action,String label,Integer value){
  return track(new TrackMe().set(QueryParams.EVENT_ACTION,action).set(QueryParams.EVENT_CATEGORY,category).set(QueryParams.EVENT_NAME,label).set(QueryParams.EVENT_VALUE,value));
}","/** 
 * Events are a useful way to collect data about a user's interaction with interactive components of your app, like button presses or the use of a particular item in a game.
 * @param category (required) – this String defines the event category.You might define event categories based on the class of user actions, like clicks or gestures or voice commands, or you might define them based upon the features available in your application (play, pause, fast forward, etc.).
 * @param action   (required) this String defines the specific event action within the category specified.In the example, we are basically saying that the category of the event is user clicks, and the action is a button click.
 * @param label    defines a label associated with the event. For example, if you have multiple Button controls on ascreen, you might use the label to specify the specific View control identifier that was clicked.
 * @param value    defines a numeric value associated with the event. For example, if you were tracking ""Buy""button clicks, you might log the number of items being purchased, or their total cost.
 */
public Tracker trackEvent(String category,String action,String label,Integer value){
  return track(new TrackMe().set(QueryParams.EVENT_CATEGORY,category).set(QueryParams.EVENT_ACTION,action).set(QueryParams.EVENT_NAME,label).set(QueryParams.EVENT_VALUE,value));
}"
8233,"/** 
 * The current user-id, if none is set, one will be generated and persisted.
 * @return
 */
public String getUserId(){
  if (mUserId == null) {
    mUserId=UUID.randomUUID().toString();
    getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,mUserId).commit();
  }
  return mUserId;
}","/** 
 * @return a user-id string, either the one you set or the one Piwik generated for you.
 */
public String getUserId(){
  if (mUserId == null) {
    mUserId=UUID.randomUUID().toString();
    getSharedPreferences().edit().putString(PREF_KEY_TRACKER_USERID,mUserId).commit();
  }
  return mUserId;
}"
8234,"public void setDebug(boolean debug){
  mDebug=debug;
  Logy.sLoglevel=debug ? Logy.VERBOSE : Logy.NORMAL;
}","public void setDebug(boolean debug){
  mDebug=debug;
  Logy.sLoglevel=debug ? Logy.VERBOSE : Logy.QUIET;
}"
8235,"public static void e(String c,String s,Throwable tr){
  if (sLoglevel >= SILENT) {
    Log.e(c,s,tr);
  }
}","public static void e(String c,String s,Throwable tr){
  if (sLoglevel != SILENT) {
    Log.e(c,s,tr);
  }
}"
8236,"public static void w(String c,String s,Throwable tr){
  if (sLoglevel >= SILENT) {
    Log.w(c,s,tr);
  }
}","public static void w(String c,String s,Throwable tr){
  if (sLoglevel > QUIET) {
    Log.w(c,s,tr);
  }
}"
8237,"@Test public void testPiwikExceptionHandler() throws Exception {
  assertFalse(Thread.getDefaultUncaughtExceptionHandler() instanceof PiwikExceptionHandler);
  QuickTrack.trackUncaughtExceptions(dummyTracker);
  assertTrue(Thread.getDefaultUncaughtExceptionHandler() instanceof PiwikExceptionHandler);
  try {
    int i=1 / 0;
    assertNotEquals(i,0);
  }
 catch (  Exception e) {
    (Thread.getDefaultUncaughtExceptionHandler()).uncaughtException(Thread.currentThread(),e);
  }
  QueryHashMap<String,String> queryParams=parseEventUrl(dummyTracker.getLastEvent());
  validateDefaultQuery(queryParams);
  assertEquals(queryParams.get(QueryParams.EVENT_CATEGORY),""String_Node_Str"");
  assertTrue(queryParams.get(QueryParams.EVENT_ACTION).startsWith(""String_Node_Str""));
  assertEquals(queryParams.get(QueryParams.EVENT_NAME),""String_Node_Str"");
  assertEquals(queryParams.get(QueryParams.EVENT_VALUE),""String_Node_Str"");
}","@Test public void testPiwikExceptionHandler() throws Exception {
  Tracker tracker=createTracker();
  assertFalse(Thread.getDefaultUncaughtExceptionHandler() instanceof PiwikExceptionHandler);
  QuickTrack.trackUncaughtExceptions(tracker);
  assertTrue(Thread.getDefaultUncaughtExceptionHandler() instanceof PiwikExceptionHandler);
  try {
    int i=1 / 0;
    assertNotEquals(i,0);
  }
 catch (  Exception e) {
    (Thread.getDefaultUncaughtExceptionHandler()).uncaughtException(Thread.currentThread(),e);
  }
  QueryHashMap<String,String> queryParams=parseEventUrl(tracker.getLastEvent());
  validateDefaultQuery(queryParams);
  assertEquals(queryParams.get(QueryParams.EVENT_CATEGORY),""String_Node_Str"");
  assertTrue(queryParams.get(QueryParams.EVENT_ACTION).startsWith(""String_Node_Str""));
  assertEquals(queryParams.get(QueryParams.EVENT_NAME),""String_Node_Str"");
  assertEquals(queryParams.get(QueryParams.EVENT_VALUE),""String_Node_Str"");
}"
8238,"public static ItemStack getFirstBagWithSuctionItem(EntityPlayer player,NonNullList<ItemStack> inventory){
  for (  ItemStack stack : inventory) {
    if (stack.isEmpty()) {
      continue;
    }
    if (stack.getItem() == ObjHandler.alchBag) {
      IItemHandler inv=player.getCapability(ProjectEAPI.ALCH_BAG_CAPABILITY,null).getBag(EnumDyeColor.byMetadata(stack.getItemDamage()));
      if (ItemHelper.invContainsItem(inv,new ItemStack(ObjHandler.blackHole,1,1)) || ItemHelper.invContainsItem(inv,new ItemStack(ObjHandler.voidRing,1,1)))       return stack;
    }
  }
  return ItemStack.EMPTY;
}","public static ItemStack getFirstBagWithSuctionItem(EntityPlayer player,NonNullList<ItemStack> inventory){
  for (  ItemStack stack : inventory) {
    if (stack.isEmpty()) {
      continue;
    }
    if (stack.getItem() == ObjHandler.alchBag) {
      IItemHandler inv=player.getCapability(ProjectEAPI.ALCH_BAG_CAPABILITY,null).getBag(EnumDyeColor.byMetadata(stack.getItemDamage()));
      for (int i=0; i < inv.getSlots(); i++) {
        ItemStack ring=inv.getStackInSlot(i);
        if (!ring.isEmpty() && (ring.getItem() instanceof BlackHoleBand || ring.getItem() instanceof VoidRing)) {
          if (ItemHelper.getOrCreateCompound(ring).getBoolean(TAG_ACTIVE)) {
            return stack;
          }
        }
      }
    }
  }
  return ItemStack.EMPTY;
}"
8239,"@Override public void onUpdate(ItemStack stack,World world,Entity entity,int slot,boolean isHeld){
  super.onUpdate(stack,world,entity,slot,isHeld);
  ObjHandler.blackHole.onUpdate(stack,world,entity,slot,isHeld);
  if (!ItemHelper.getOrCreateCompound(stack).hasKey(""String_Node_Str"")) {
    stack.getTagCompound().setByte(""String_Node_Str"",((byte)10));
  }
  stack.getTagCompound().setByte(""String_Node_Str"",((byte)(stack.getTagCompound().getByte(""String_Node_Str"") - 1)));
}","@Override public void onUpdate(ItemStack stack,World world,Entity entity,int slot,boolean isHeld){
  super.onUpdate(stack,world,entity,slot,isHeld);
  ObjHandler.blackHole.onUpdate(stack,world,entity,slot,isHeld);
  if (!ItemHelper.getOrCreateCompound(stack).hasKey(""String_Node_Str"")) {
    stack.getTagCompound().setByte(""String_Node_Str"",((byte)10));
  }
  if (stack.getTagCompound().getByte(""String_Node_Str"") > 0) {
    stack.getTagCompound().setByte(""String_Node_Str"",((byte)(stack.getTagCompound().getByte(""String_Node_Str"") - 1)));
  }
}"
8240,"@Override public void sync(@Nonnull EnumDyeColor color,@Nonnull EntityPlayerMP player){
  PacketHandler.sendTo(new SyncBagDataPKT(writeNBT(color)),player);
}","@Override public void sync(@Nullable EnumDyeColor color,@Nonnull EntityPlayerMP player){
  PacketHandler.sendTo(new SyncBagDataPKT(writeNBT(color)),player);
}"
8241,"/** 
 * Does not consider stack size
 */
public static int getEmcValue(ItemStack stack){
  if (stack == null) {
    return 0;
  }
  SimpleStack iStack=new SimpleStack(stack);
  if (!iStack.isValid()) {
    return 0;
  }
  if (!EMCMapper.mapContains(iStack) && ItemHelper.isDamageable(stack)) {
    iStack=iStack.withMeta(0);
    if (EMCMapper.mapContains(iStack)) {
      int emc=EMCMapper.getEmcValue(iStack);
      int relDamage=(stack.getMaxDamage() - stack.getItemDamage());
      if (relDamage <= 0) {
        return emc;
      }
      long result=emc * relDamage;
      if (result <= 0) {
        return emc;
      }
      result/=stack.getMaxDamage();
      result+=getEnchantEmcBonus(stack);
      result+=getStoredEMCBonus(stack);
      if (result > Integer.MAX_VALUE) {
        return emc;
      }
      if (result <= 0) {
        return 1;
      }
      return (int)result;
    }
  }
 else {
    if (EMCMapper.mapContains(iStack)) {
      return EMCMapper.getEmcValue(iStack) + getEnchantEmcBonus(stack) + (int)getStoredEMCBonus(stack);
    }
  }
  return 0;
}","/** 
 * Does not consider stack size
 */
public static int getEmcValue(ItemStack stack){
  if (stack == null) {
    return 0;
  }
  SimpleStack iStack=new SimpleStack(stack);
  if (!iStack.isValid()) {
    return 0;
  }
  if (!EMCMapper.mapContains(iStack) && ItemHelper.isDamageable(stack)) {
    iStack=iStack.withMeta(0);
    if (EMCMapper.mapContains(iStack)) {
      int emc=EMCMapper.getEmcValue(iStack);
      int relDamage=(stack.getMaxDamage() + 1 - stack.getItemDamage());
      if (relDamage <= 0) {
        return emc;
      }
      long result=emc * relDamage;
      if (result <= 0) {
        return emc;
      }
      result/=stack.getMaxDamage();
      result+=getEnchantEmcBonus(stack);
      result+=getStoredEMCBonus(stack);
      if (result > Integer.MAX_VALUE) {
        return emc;
      }
      if (result <= 0) {
        return 1;
      }
      return (int)result;
    }
  }
 else {
    if (EMCMapper.mapContains(iStack)) {
      return EMCMapper.getEmcValue(iStack) + getEnchantEmcBonus(stack) + (int)getStoredEMCBonus(stack);
    }
  }
  return 0;
}"
8242,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  Slot slot=this.getSlot(slotIndex);
  if (slot == null || !slot.getHasStack()) {
    return null;
  }
  ItemStack stack=slot.getStack();
  ItemStack newStack=stack.copy();
  if (slotIndex <= 7) {
    return null;
  }
 else   if (slotIndex >= 10 && slotIndex <= 25) {
    int emc=EMCHelper.getEmcValue(newStack);
    int stackSize=0;
    IItemHandler inv=player.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,EnumFacing.UP);
    while (transmutationInventory.provider.getEmc() >= emc && stackSize < newStack.getMaxStackSize() && ItemHelper.hasSpace(player.inventory.mainInventory,newStack)) {
      transmutationInventory.removeEmc(emc);
      ItemHandlerHelper.insertItemStacked(inv,ItemHelper.getNormalizedStack(stack),false);
      stackSize++;
    }
    transmutationInventory.updateClientTargets();
  }
 else   if (slotIndex >= 26) {
    int emc=EMCHelper.getEmcValue(stack);
    if (emc == 0 && stack.getItem() != ObjHandler.tome) {
      return null;
    }
    while (!transmutationInventory.hasMaxedEmc() && stack.stackSize > 0) {
      transmutationInventory.addEmc(emc);
      --stack.stackSize;
    }
    transmutationInventory.handleKnowledge(newStack);
    if (stack.stackSize == 0) {
      slot.putStack(null);
    }
  }
  return null;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  Slot slot=this.getSlot(slotIndex);
  if (slot == null || !slot.getHasStack()) {
    return null;
  }
  ItemStack stack=slot.getStack();
  ItemStack newStack=stack.copy();
  if (slotIndex <= 7) {
    return null;
  }
 else   if (slotIndex >= 11 && slotIndex <= 26) {
    int emc=EMCHelper.getEmcValue(newStack);
    int stackSize=0;
    IItemHandler inv=player.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,EnumFacing.UP);
    while (transmutationInventory.provider.getEmc() >= emc && stackSize < newStack.getMaxStackSize() && ItemHelper.hasSpace(player.inventory.mainInventory,newStack)) {
      transmutationInventory.removeEmc(emc);
      ItemHandlerHelper.insertItemStacked(inv,ItemHelper.getNormalizedStack(stack),false);
      stackSize++;
    }
    transmutationInventory.updateClientTargets();
  }
 else   if (slotIndex > 26) {
    int emc=EMCHelper.getEmcValue(stack);
    if (emc == 0 && stack.getItem() != ObjHandler.tome) {
      return null;
    }
    while (!transmutationInventory.hasMaxedEmc() && stack.stackSize > 0) {
      transmutationInventory.addEmc(emc);
      --stack.stackSize;
    }
    transmutationInventory.handleKnowledge(newStack);
    if (stack.stackSize == 0) {
      slot.putStack(null);
    }
  }
  return null;
}"
8243,"public CondenserContainer(InventoryPlayer invPlayer,CondenserTile condenser){
  tile=condenser;
  tile.numPlayersUsing++;
  this.addSlotToContainer(new SlotCondenserLock(this,0,12,6));
  IItemHandler handler=tile.getInput();
  int counter=0;
  for (int i=0; i < 7; i++)   for (int j=0; j < 13; j++)   this.addSlotToContainer(new ValidatedSlot(handler,counter++,12 + j * 18,26 + i * 18,SlotPredicates.HAS_EMC));
  for (int i=0; i < 3; i++)   for (int j=0; j < 9; j++)   this.addSlotToContainer(new Slot(invPlayer,j + i * 9 + 9,48 + j * 18,154 + i * 18));
  for (int i=0; i < 9; i++)   this.addSlotToContainer(new Slot(invPlayer,i,48 + i * 18,212));
}","public CondenserContainer(InventoryPlayer invPlayer,CondenserTile condenser){
  tile=condenser;
  tile.numPlayersUsing++;
  this.addSlotToContainer(new SlotCondenserLock(this,0,12,6));
  IItemHandler handler=tile.getInput();
  int counter=0;
  for (int i=0; i < 7; i++)   for (int j=0; j < 13; j++)   this.addSlotToContainer(new SlotItemHandler(handler,counter++,12 + j * 18,26 + i * 18));
  for (int i=0; i < 3; i++)   for (int j=0; j < 9; j++)   this.addSlotToContainer(new Slot(invPlayer,j + i * 9 + 9,48 + j * 18,154 + i * 18));
  for (int i=0; i < 9; i++)   this.addSlotToContainer(new Slot(invPlayer,i,48 + i * 18,212));
}"
8244,"protected ItemStackHandler createInput(){
  return new StackHandler(91);
}","protected ItemStackHandler createInput(){
  return new StackHandler(91){
    @Override public ItemStack insertItem(    int slot,    ItemStack stack,    boolean simulate){
      if (!isStackEqualToLock(stack) && EMCHelper.doesItemHaveEmc(stack))       return super.insertItem(slot,stack,simulate);
 else       return stack;
    }
  }
;
}"
8245,"@Override public ItemStack insertItem(int slot,ItemStack stack,boolean simulate){
  if (TileEntityFurnace.isItemFuel(stack) || stack.getItem() instanceof IItemEmc)   return super.insertItem(slot,stack,simulate);
 else   return null;
}","@Override public ItemStack insertItem(int slot,ItemStack stack,boolean simulate){
  if (TileEntityFurnace.isItemFuel(stack) || stack.getItem() instanceof IItemEmc)   return super.insertItem(slot,stack,simulate);
 else   return stack;
}"
8246,"@Override public ItemStack extractItem(int slot,int amount,boolean simulate){
  ItemStack stack=getStackInSlot(slot);
  if (stack != null && stack.getItem() instanceof IItemEmc) {
    IItemEmc item=((IItemEmc)stack.getItem());
    if (item.getStoredEmc(stack) >= item.getMaximumEmc(stack)) {
      return super.extractItem(slot,amount,simulate);
    }
  }
  return super.extractItem(slot,amount,simulate);
}","@Override public ItemStack extractItem(int slot,int amount,boolean simulate){
  ItemStack stack=getStackInSlot(slot);
  if (stack != null && stack.getItem() instanceof IItemEmc) {
    IItemEmc item=((IItemEmc)stack.getItem());
    if (item.getStoredEmc(stack) >= item.getMaximumEmc(stack)) {
      return super.extractItem(slot,amount,simulate);
    }
 else {
      return null;
    }
  }
  return super.extractItem(slot,amount,simulate);
}"
8247,"public int getKleinStarChargeScaled(int i){
  if (inventory[0] == null || displayItemCharge <= 0) {
    return 0;
  }
  return ((int)Math.round(displayItemCharge * i / ((IItemEmc)inventory[0].getItem()).getMaximumEmc(inventory[0])));
}","public int getKleinStarChargeScaled(int i){
  if (inventory[0] == null || displayItemCharge <= 0 || !(inventory[0].getItem() instanceof IItemEmc)) {
    return 0;
  }
  return ((int)Math.round(displayItemCharge * i / ((IItemEmc)inventory[0].getItem()).getMaximumEmc(inventory[0])));
}"
8248,"@Override public void renderTileEntityAt(DMPedestalTile te,double x,double y,double z,float partialTicks,int destroyStage){
  if (!te.isInvalid()) {
    if (te.getItemStack() != null) {
      GlStateManager.pushMatrix();
      GlStateManager.translate(x + 0.5,y + 1,z + 0.5);
      GlStateManager.scale(0.5,0.5,0.5);
      GlStateManager.translate(0,0.3 * Math.sin(0.1 * (te.getWorld().getWorldTime() + partialTicks)),0);
      float angle=(te.getWorld().getWorldTime() + partialTicks) / 20.0F * (180F / (float)Math.PI);
      GlStateManager.rotate(angle,0.0F,1.0F,0.0F);
      Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
      Minecraft.getMinecraft().getRenderItem().func_181564_a(te.getItemStack(),ItemCameraTransforms.TransformType.GROUND);
      GlStateManager.popMatrix();
    }
  }
}","@Override public void renderTileEntityAt(DMPedestalTile te,double x,double y,double z,float partialTicks,int destroyStage){
  if (!te.isInvalid()) {
    if (te.getItemStack() != null) {
      GlStateManager.pushMatrix();
      GlStateManager.translate(x + 0.5,y + 1,z + 0.5);
      GlStateManager.scale(0.5,0.5,0.5);
      GlStateManager.translate(0,0.3 * Math.sin(0.1 * (te.getWorld().getWorldTime() + partialTicks)),0);
      float angle=(te.getWorld().getWorldTime() + partialTicks) / 20.0F * (180F / (float)Math.PI);
      GlStateManager.rotate(angle,0.0F,1.0F,0.0F);
      Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
      Minecraft.getMinecraft().getRenderItem().renderItem(te.getItemStack(),ItemCameraTransforms.TransformType.GROUND);
      GlStateManager.popMatrix();
    }
  }
}"
8249,"public static void registerMCBindings(){
  ImmutableBiMap.Builder<KeyBinding,PEKeybind> builder=ImmutableBiMap.builder();
  for (  PEKeybind k : PEKeybind.values()) {
    KeyBinding mcK=new KeyBinding(StatCollector.translateToLocal(k.keyName),k.defaultKeyCode,PECore.MODID);
    builder.put(mcK,k);
    ClientRegistry.registerKeyBinding(mcK);
  }
  mcToPe=builder.build();
  peToMc=mcToPe.inverse();
}","public static void registerMCBindings(){
  ImmutableBiMap.Builder<KeyBinding,PEKeybind> builder=ImmutableBiMap.builder();
  for (  PEKeybind k : PEKeybind.values()) {
    KeyBinding mcK=new KeyBinding(k.keyName,k.defaultKeyCode,PECore.MODID);
    builder.put(mcK,k);
    ClientRegistry.registerKeyBinding(mcK);
  }
  mcToPe=builder.build();
  peToMc=mcToPe.inverse();
}"
8250,"@Mod.EventHandler public void serverStarting(FMLServerStartingEvent event){
  event.registerServerCommand(new ProjectECMD());
  if (!ThreadCheckUpdate.hasRunServer()) {
    new ThreadCheckUpdate(true).start();
  }
  if (!ThreadCheckUUID.hasRunServer()) {
    new ThreadCheckUUID(true).start();
  }
  long start=System.currentTimeMillis();
  CustomEMCParser.readUserData();
  PELogger.logInfo(""String_Node_Str"");
  EMCMapper.map();
  PELogger.logInfo(""String_Node_Str"" + EMCMapper.emc.size() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  File dir=new File(event.getServer().getEntityWorld().getSaveHandler().getWorldDirectory(),""String_Node_Str"");
  if (!dir.exists()) {
    dir.mkdirs();
  }
  IOHandler.init(new File(dir,""String_Node_Str""),new File(dir,""String_Node_Str""));
}","@Mod.EventHandler public void serverStarting(FMLServerStartingEvent event){
  event.registerServerCommand(new ProjectECMD());
  if (!ThreadCheckUpdate.hasRunServer()) {
    new ThreadCheckUpdate(true).start();
  }
  if (!ThreadCheckUUID.hasRunServer()) {
    new ThreadCheckUUID(true).start();
  }
  long start=System.currentTimeMillis();
  CustomEMCParser.readUserData();
  PELogger.logInfo(""String_Node_Str"");
  EMCMapper.map();
  PELogger.logInfo(""String_Node_Str"" + EMCMapper.emc.size() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  File dir=new File(event.getServer().getEntityWorld().getSaveHandler().getWorldDirectory(),""String_Node_Str"");
  if (!dir.exists()) {
    dir.mkdirs();
  }
}"
8251,"public static void init(File configFile){
  Configuration config=new Configuration(configFile);
  try {
    config.load();
    enableDebugLog=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showUnlocalizedNames=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showODNames=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showEMCTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showStatTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showPedestalTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showPedestalTooltipInGUI=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    useLootBalls=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    pulsatingOverlay=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    unsafeKeyBinds=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    enableAlcChest=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableITorch=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector3=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCondenser=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCondenser2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay3=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableTransTable=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRedFurnace=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableDarkFurnace=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableDarkPedestal=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableTimeWatch=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    craftableTome=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    altCraftingMat=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    useOldDamage=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    offensiveAbilities=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    config.getCategory(""String_Node_Str"").setComment(""String_Node_Str"" + ""String_Node_Str"");
    archangelPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",100,-1,Integer.MAX_VALUE,""String_Node_Str"");
    bodyPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    evertidePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    harvestPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    ignitePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",40,-1,Integer.MAX_VALUE,""String_Node_Str"");
    lifePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",5,-1,Integer.MAX_VALUE,""String_Node_Str"");
    repairPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    swrgPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",70,-1,Integer.MAX_VALUE,""String_Node_Str"");
    soulPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    volcanitePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    zeroPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",40,-1,Integer.MAX_VALUE,""String_Node_Str"");
    timePedBonus=config.getInt(""String_Node_Str"",""String_Node_Str"",18,0,256,""String_Node_Str"");
    timePedMobSlowness=config.getFloat(""String_Node_Str"",""String_Node_Str"",0.10F,0.0F,1.0F,""String_Node_Str"");
    interdictionMode=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    pickaxeAoeVeinMining=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    harvBandGrass=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    PELogger.logInfo(""String_Node_Str"");
  }
 catch (  Exception e) {
    PELogger.logFatal(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (config.hasChanged()) {
      config.save();
    }
  }
}","public static void init(File configFile){
  Configuration config=new Configuration(configFile);
  try {
    config.load();
    enableDebugLog=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showUnlocalizedNames=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showODNames=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    showEMCTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showStatTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showPedestalTooltip=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    showPedestalTooltipInGUI=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    useLootBalls=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    pulsatingOverlay=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    unsafeKeyBinds=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    projectileCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",0,0,Integer.MAX_VALUE,""String_Node_Str"");
    enableAlcChest=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableITorch=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCollector3=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCondenser=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableCondenser2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay2=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRelay3=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableTransTable=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableRedFurnace=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableDarkFurnace=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableDarkPedestal=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    enableTimeWatch=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    craftableTome=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    altCraftingMat=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    useOldDamage=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    offensiveAbilities=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    katarDeathAura=config.getFloat(""String_Node_Str"",""String_Node_Str"",1000F,0,Integer.MAX_VALUE,""String_Node_Str"");
    config.getCategory(""String_Node_Str"").setComment(""String_Node_Str"" + ""String_Node_Str"");
    archangelPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",100,-1,Integer.MAX_VALUE,""String_Node_Str"");
    bodyPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    evertidePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    harvestPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    ignitePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",40,-1,Integer.MAX_VALUE,""String_Node_Str"");
    lifePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",5,-1,Integer.MAX_VALUE,""String_Node_Str"");
    repairPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    swrgPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",70,-1,Integer.MAX_VALUE,""String_Node_Str"");
    soulPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",10,-1,Integer.MAX_VALUE,""String_Node_Str"");
    volcanitePedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",20,-1,Integer.MAX_VALUE,""String_Node_Str"");
    zeroPedCooldown=config.getInt(""String_Node_Str"",""String_Node_Str"",40,-1,Integer.MAX_VALUE,""String_Node_Str"");
    timePedBonus=config.getInt(""String_Node_Str"",""String_Node_Str"",18,0,256,""String_Node_Str"");
    timePedMobSlowness=config.getFloat(""String_Node_Str"",""String_Node_Str"",0.10F,0.0F,1.0F,""String_Node_Str"");
    interdictionMode=config.getBoolean(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    pickaxeAoeVeinMining=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    harvBandGrass=config.getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    PELogger.logInfo(""String_Node_Str"");
  }
 catch (  Exception e) {
    PELogger.logFatal(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (config.hasChanged()) {
      config.save();
    }
  }
}"
8252,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int blockX,int blockY,int blockZ,int sideHit,float px,float py,float pz){
  if (world.isRemote) {
    return false;
  }
  MetaBlock mBlock=new MetaBlock(world,blockX,blockY,blockZ);
  if (mBlock.getBlock() != Blocks.air) {
    TileEntity tile=world.getTileEntity(blockX,blockY,blockZ);
    if (player.isSneaking()) {
      if (tile instanceof TileEmc) {
        NBTTagCompound nbt=new NBTTagCompound();
        nbt.setBoolean(""String_Node_Str"",true);
        tile.writeToNBT(nbt);
        if (mBlock.getBlock() == ObjHandler.dmFurnaceOn) {
          mBlock.setBlock(ObjHandler.dmFurnaceOff);
        }
 else         if (mBlock.getBlock() == ObjHandler.rmFurnaceOn) {
          mBlock.setBlock(ObjHandler.rmFurnaceOff);
        }
        ItemStack s=mBlock.toItemStack();
        if (s.getHasSubtypes()) {
          s.setItemDamage(world.getBlockMetadata(blockX,blockY,blockZ));
        }
 else {
          s.setItemDamage(0);
        }
        s.setTagCompound(nbt);
        world.removeTileEntity(blockX,blockY,blockZ);
        world.setBlock(blockX,blockY,blockZ,Blocks.air,0,2);
        WorldHelper.spawnEntityItem(world,s,blockX,blockY,blockZ);
      }
    }
  }
  MetaBlock result=WorldTransmutations.getWorldTransmutation(world,blockX,blockY,blockZ,player.isSneaking());
  if (result != null) {
    Coordinates pos=new Coordinates(blockX,blockY,blockZ);
    int mode=this.getMode(stack);
    int charge=this.getCharge(stack);
    ForgeDirection direction=ForgeDirection.getOrientation(sideHit);
    if (mode == 0) {
      doWorldTransmutation(world,mBlock,result,pos,0,0,charge,player);
    }
 else     if (mode == 1) {
      getAxisOrientedPanel(direction,charge,mBlock,result,pos,world,player);
    }
 else {
      getAxisOrientedLine(direction,charge,mBlock,result,pos,world,player);
    }
    world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
    PlayerHelper.swingItem(player);
  }
  return true;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int blockX,int blockY,int blockZ,int sideHit,float px,float py,float pz){
  if (world.isRemote) {
    return false;
  }
  MetaBlock mBlock=new MetaBlock(world,blockX,blockY,blockZ);
  MetaBlock result=WorldTransmutations.getWorldTransmutation(world,blockX,blockY,blockZ,player.isSneaking());
  if (result != null) {
    Coordinates pos=new Coordinates(blockX,blockY,blockZ);
    int mode=this.getMode(stack);
    int charge=this.getCharge(stack);
    ForgeDirection direction=ForgeDirection.getOrientation(sideHit);
    if (mode == 0) {
      doWorldTransmutation(world,mBlock,result,pos,0,0,charge,player);
    }
 else     if (mode == 1) {
      getAxisOrientedPanel(direction,charge,mBlock,result,pos,world,player);
    }
 else {
      getAxisOrientedLine(direction,charge,mBlock,result,pos,world,player);
    }
    world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
    PlayerHelper.swingItem(player);
  }
  return true;
}"
8253,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  deforestAOE(world,stack,player,0);
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  clearOdAOE(world,stack,player,""String_Node_Str"",0);
  clearOdAOE(world,stack,player,""String_Node_Str"",0);
  return stack;
}"
8254,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  player.setItemInUse(stack,this.getMaxItemUseDuration(stack));
  if (world.isRemote) {
    return stack;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null) {
    if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
      Block blockHit=world.getBlock(mop.blockX,mop.blockY,mop.blockZ);
      if (blockHit instanceof BlockGrass || blockHit instanceof BlockDirt) {
        tillAOE(stack,player,world,mop.blockX,mop.blockY,mop.blockZ,world.getBlockMetadata(mop.blockX,mop.blockY,mop.blockZ),0);
      }
 else       if (blockHit instanceof BlockLog) {
        deforestAOE(world,stack,player,0);
      }
    }
  }
 else {
    shearEntityAOE(stack,player,0);
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  player.setItemInUse(stack,this.getMaxItemUseDuration(stack));
  if (world.isRemote) {
    return stack;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null) {
    if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
      Block blockHit=world.getBlock(mop.blockX,mop.blockY,mop.blockZ);
      if (blockHit instanceof BlockGrass || blockHit instanceof BlockDirt) {
        tillAOE(stack,player,world,mop.blockX,mop.blockY,mop.blockZ,world.getBlockMetadata(mop.blockX,mop.blockY,mop.blockZ),0);
      }
 else       if (blockHit instanceof BlockLog) {
        clearOdAOE(world,stack,player,""String_Node_Str"",0);
      }
 else       if (blockHit instanceof BlockLeaves) {
        clearOdAOE(world,stack,player,""String_Node_Str"",0);
      }
    }
  }
 else {
    shearEntityAOE(stack,player,0);
  }
  return stack;
}"
8255,"@Override public void doExtraFunction(ItemStack stack,EntityPlayer player){
  attackAOE(stack,player,getMode(stack) == 1,KATAR_DEATHATTACK,0);
}","@Override public void doExtraFunction(ItemStack stack,EntityPlayer player){
  attackAOE(stack,player,getMode(stack) == 1,ProjectEConfig.katarDeathAura,0);
}"
8256,"public void checkLockAndUpdate(){
  lock=inventory[0];
  if (lock == null) {
    displayEmc=0;
    requiredEmc=0;
    this.isAcceptingEmc=false;
    return;
  }
  if (EMCHelper.doesItemHaveEmc(lock)) {
    int lockEmc=EMCHelper.getEmcValue(lock);
    if (requiredEmc != lockEmc) {
      requiredEmc=lockEmc;
      this.isAcceptingEmc=true;
    }
    if (this.getStoredEmc() > requiredEmc) {
      handleMassCondense();
    }
  }
 else {
    lock=null;
    inventory[0]=null;
    displayEmc=0;
    requiredEmc=0;
    this.isAcceptingEmc=false;
  }
}","public void checkLockAndUpdate(){
  lock=inventory[0];
  if (lock == null) {
    displayEmc=0;
    requiredEmc=0;
    this.isAcceptingEmc=false;
    return;
  }
  if (EMCHelper.doesItemHaveEmc(lock)) {
    int lockEmc=EMCHelper.getEmcValue(lock);
    if (requiredEmc != lockEmc) {
      requiredEmc=lockEmc;
      this.isAcceptingEmc=true;
    }
  }
 else {
    lock=null;
    inventory[0]=null;
    displayEmc=0;
    requiredEmc=0;
    this.isAcceptingEmc=false;
  }
}"
8257,"public static void onPlayerChangeDimension(EntityPlayerMP playerMP){
  PlayerHelper.updateClientServerFlight(playerMP,playerMP.capabilities.allowFlying);
  PlayerHelper.updateClientServerStepHeight(playerMP,playerMP.stepHeight);
}","public static void onPlayerChangeDimension(EntityPlayerMP playerMP){
  PlayerHelper.updateClientServerFlight(playerMP,playerMP.capabilities.allowFlying);
  PlayerHelper.updateClientServerStepHeight(playerMP,shouldPlayerStep(playerMP) ? 1.0F : 0.5F);
}"
8258,"public static void update(EntityPlayerMP player){
  if (!shouldPlayerFly(player) && hadFlightItem.contains(player)) {
    if (player.capabilities.allowFlying) {
      PlayerHelper.updateClientServerFlight(player,false);
    }
    hadFlightItem.remove(player);
  }
 else   if (shouldPlayerFly(player) && !hadFlightItem.contains(player)) {
    if (!player.capabilities.allowFlying) {
      PlayerHelper.updateClientServerFlight(player,true);
    }
    hadFlightItem.add(player);
  }
  if (!shouldPlayerResistFire(player)) {
    if (player.isImmuneToFire()) {
      PlayerHelper.setPlayerFireImmunity(player,false);
    }
  }
 else {
    if (!player.isImmuneToFire()) {
      PlayerHelper.setPlayerFireImmunity(player,true);
    }
  }
  if (!shouldPlayerStep(player)) {
    if (player.stepHeight > 0.5F) {
      PlayerHelper.updateClientServerStepHeight(player,0.5F);
    }
  }
 else {
    if (player.stepHeight < 1.0F) {
      PlayerHelper.updateClientServerStepHeight(player,1.0F);
    }
  }
}","public static void update(EntityPlayerMP player){
  if (projectileCooldowns.containsKey(player) && projectileCooldowns.get(player) > 0) {
    projectileCooldowns.adjustValue(player,-1);
  }
  if (!shouldPlayerFly(player) && hadFlightItem.contains(player)) {
    if (player.capabilities.allowFlying) {
      PlayerHelper.updateClientServerFlight(player,false);
    }
    hadFlightItem.remove(player);
  }
 else   if (shouldPlayerFly(player) && !hadFlightItem.contains(player)) {
    if (!player.capabilities.allowFlying) {
      PlayerHelper.updateClientServerFlight(player,true);
    }
    hadFlightItem.add(player);
  }
  if (!shouldPlayerResistFire(player)) {
    if (player.isImmuneToFire()) {
      PlayerHelper.setPlayerFireImmunity(player,false);
    }
  }
 else {
    if (!player.isImmuneToFire()) {
      PlayerHelper.setPlayerFireImmunity(player,true);
    }
  }
  if (!shouldPlayerStep(player)) {
    if (player.stepHeight > 0.5F) {
      PlayerHelper.updateClientServerStepHeight(player,0.5F);
    }
  }
 else {
    if (player.stepHeight < 1.0F) {
      PlayerHelper.updateClientServerStepHeight(player,1.0F);
    }
  }
}"
8259,"public static void clearLists(){
  swrgOverrides.clear();
  gemArmorReadyChecks.clear();
}","public static void clearLists(){
  swrgOverrides.clear();
  gemArmorReadyChecks.clear();
  hadFlightItem.clear();
  projectileCooldowns.clear();
}"
8260,"public static void removePlayerFromLists(EntityPlayerMP player){
  swrgOverrides.remove(player);
  gemArmorReadyChecks.remove(player);
}","public static void removePlayerFromLists(EntityPlayerMP player){
  swrgOverrides.remove(player);
  gemArmorReadyChecks.remove(player);
  hadFlightItem.remove(player);
  projectileCooldowns.remove(player);
}"
8261,"@Override public IMessage onMessage(final KeyPressPKT message,final MessageContext ctx){
  EntityPlayerMP player=ctx.getServerHandler().playerEntity;
  ItemStack stack=player.getHeldItem();
switch (message.key) {
case ARMOR_TOGGLE:
    if (player.isSneaking()) {
      ItemStack helm=player.inventory.armorItemInSlot(3);
      if (helm != null && helm.getItem() == ObjHandler.gemHelmet) {
        GemHelmet.toggleNightVision(helm,player);
      }
    }
 else {
      ItemStack boots=player.inventory.armorItemInSlot(0);
      if (boots != null && boots.getItem() == ObjHandler.gemFeet) {
        ((GemFeet)ObjHandler.gemFeet).toggleStepAssist(boots,player);
      }
    }
  break;
case CHARGE:
if (stack != null && stack.getItem() instanceof IItemCharge) {
  ((IItemCharge)stack.getItem()).changeCharge(player,stack);
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
  if (GemArmorBase.hasAnyPiece(player)) {
    PlayerChecks.setGemState(player,!PlayerChecks.getGemState(player));
    player.addChatMessage(new ChatComponentTranslation(PlayerChecks.getGemState(player) ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case EXTRA_FUNCTION:
if (stack != null && stack.getItem() instanceof IExtraFunction) {
((IExtraFunction)stack.getItem()).doExtraFunction(stack,player);
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
if (PlayerChecks.getGemState(player) && player.inventory.armorInventory[2] != null && player.inventory.armorInventory[2].getItem() == ObjHandler.gemChest) {
((GemChest)ObjHandler.gemChest).doExplode(player);
}
}
break;
case FIRE_PROJECTILE:
if (stack != null && stack.getItem() instanceof IProjectileShooter) {
if (((IProjectileShooter)stack.getItem()).shootProjectile(player,stack)) {
PlayerHelper.swingItem((player));
}
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
if (PlayerChecks.getGemState(player) && player.inventory.armorInventory[3] != null && player.inventory.armorInventory[3].getItem() == ObjHandler.gemHelmet) {
((GemHelmet)ObjHandler.gemHelmet).doZap(player);
}
}
break;
case MODE:
if (stack != null && stack.getItem() instanceof IModeChanger) {
((IModeChanger)stack.getItem()).changeMode(player,stack);
}
break;
}
return null;
}","@Override public IMessage onMessage(final KeyPressPKT message,final MessageContext ctx){
  EntityPlayerMP player=ctx.getServerHandler().playerEntity;
  ItemStack stack=player.getHeldItem();
switch (message.key) {
case ARMOR_TOGGLE:
    if (player.isSneaking()) {
      ItemStack helm=player.inventory.armorItemInSlot(3);
      if (helm != null && helm.getItem() == ObjHandler.gemHelmet) {
        GemHelmet.toggleNightVision(helm,player);
      }
    }
 else {
      ItemStack boots=player.inventory.armorItemInSlot(0);
      if (boots != null && boots.getItem() == ObjHandler.gemFeet) {
        ((GemFeet)ObjHandler.gemFeet).toggleStepAssist(boots,player);
      }
    }
  break;
case CHARGE:
if (stack != null && stack.getItem() instanceof IItemCharge) {
  ((IItemCharge)stack.getItem()).changeCharge(player,stack);
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
  if (GemArmorBase.hasAnyPiece(player)) {
    PlayerChecks.setGemState(player,!PlayerChecks.getGemState(player));
    player.addChatMessage(new ChatComponentTranslation(PlayerChecks.getGemState(player) ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}
break;
case EXTRA_FUNCTION:
if (stack != null && stack.getItem() instanceof IExtraFunction) {
((IExtraFunction)stack.getItem()).doExtraFunction(stack,player);
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
if (PlayerChecks.getGemState(player) && player.inventory.armorInventory[2] != null && player.inventory.armorInventory[2].getItem() == ObjHandler.gemChest) {
((GemChest)ObjHandler.gemChest).doExplode(player);
}
}
break;
case FIRE_PROJECTILE:
if (stack != null && stack.getItem() instanceof IProjectileShooter) {
if (PlayerChecks.getCooldown(player) <= 0) {
if (((IProjectileShooter)stack.getItem()).shootProjectile(player,stack)) {
PlayerHelper.swingItem((player));
}
PlayerChecks.resetCooldown(player);
}
}
 else if (stack == null || ProjectEConfig.unsafeKeyBinds) {
if (PlayerChecks.getGemState(player) && player.inventory.armorInventory[3] != null && player.inventory.armorInventory[3].getItem() == ObjHandler.gemHelmet) {
((GemHelmet)ObjHandler.gemHelmet).doZap(player);
}
}
break;
case MODE:
if (stack != null && stack.getItem() instanceof IModeChanger) {
((IModeChanger)stack.getItem()).changeMode(player,stack);
}
break;
}
return null;
}"
8262,"@Override public void saveNBTData(NBTTagCompound compound){
  NBTTagCompound properties=new NBTTagCompound();
  NBTTagList listOfInventories=new NBTTagList();
  for (int i=0; i < 16; i++) {
    if (bagData.get(i) == null) {
      continue;
    }
    NBTTagCompound inventory=new NBTTagCompound();
    inventory.setInteger(""String_Node_Str"",i);
    inventory.setTag(""String_Node_Str"",ItemHelper.toIndexedNBTList(bagData.get(i)));
    listOfInventories.appendTag(inventory);
  }
  properties.setTag(""String_Node_Str"",listOfInventories);
  properties.setBoolean(""String_Node_Str"",hasMigrated);
  compound.setTag(PROP_NAME,properties);
}","@Override public void saveNBTData(NBTTagCompound compound){
  NBTTagCompound properties=new NBTTagCompound();
  NBTTagList listOfInventories=new NBTTagList();
  for (int i=0; i < 16; i++) {
    if (bagData.get(i) == null) {
      continue;
    }
    NBTTagCompound inventory=new NBTTagCompound();
    inventory.setInteger(""String_Node_Str"",i);
    inventory.setTag(""String_Node_Str"",ItemHelper.toIndexedNBTList(bagData.get(i)));
    listOfInventories.appendTag(inventory);
  }
  properties.setTag(""String_Node_Str"",listOfInventories);
  compound.setTag(PROP_NAME,properties);
}"
8263,"@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  NBTTagList listOfInventoies=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  hasMigrated=properties.getBoolean(""String_Node_Str"");
  if (!hasMigrated && !player.worldObj.isRemote) {
    if (AlchemicalBags.hasLegacyData(player)) {
      listOfInventoies=AlchemicalBags.migratePlayerData(player);
      PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName() + ""String_Node_Str"");
    }
 else {
      PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName() + ""String_Node_Str"");
    }
    hasMigrated=true;
  }
  for (int i=0; i < listOfInventoies.tagCount(); i++) {
    NBTTagCompound inventory=listOfInventoies.getCompoundTagAt(i);
    bagData.put(inventory.getInteger(""String_Node_Str""),ItemHelper.copyIndexedNBTToArray(inventory.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND),new ItemStack[104]));
  }
}","@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  NBTTagList listOfInventoies=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < listOfInventoies.tagCount(); i++) {
    NBTTagCompound inventory=listOfInventoies.getCompoundTagAt(i);
    bagData.put(inventory.getInteger(""String_Node_Str""),ItemHelper.copyIndexedNBTToArray(inventory.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND),new ItemStack[104]));
  }
}"
8264,"public static boolean consumeFuel(EntityPlayer player,ItemStack stack,double amount,boolean shouldRemove){
  if (amount <= 0) {
    return true;
  }
  double current=getEmc(stack);
  if (current < amount) {
    removeEmc(stack,current);
    amount-=current;
    double consume=EMCHelper.consumePlayerFuel(player,amount);
    if (consume == -1) {
      addEmcToStack(stack,current);
      return false;
    }
    addEmcToStack(stack,consume);
  }
  if (shouldRemove) {
    removeEmc(stack,amount);
  }
  return true;
}","public static boolean consumeFuel(EntityPlayer player,ItemStack stack,double amount,boolean shouldRemove){
  if (amount <= 0) {
    return true;
  }
  double current=getEmc(stack);
  if (current < amount) {
    double consume=EMCHelper.consumePlayerFuel(player,amount - current);
    if (consume == -1) {
      return false;
    }
    addEmcToStack(stack,consume);
  }
  if (shouldRemove) {
    removeEmc(stack,amount);
  }
  return true;
}"
8265,"private void sendRelayBonus(){
  for (  Map.Entry<ForgeDirection,TileEntity> entry : WorldHelper.getAdjacentTileEntitiesMapped(worldObj,this).entrySet()) {
    ForgeDirection dir=entry.getKey();
    TileEntity tile=entry.getValue();
    if (tile instanceof RelayMK3Tile) {
      double provide=this.provideEMC(dir.getOpposite(),0.5);
      double remain=provide - ((RelayMK3Tile)tile).acceptEMC(dir,provide);
      this.addEMC(remain);
    }
 else     if (tile instanceof RelayMK2Tile) {
      double provide=this.provideEMC(dir.getOpposite(),0.15);
      double remain=provide - ((RelayMK2Tile)tile).acceptEMC(dir,provide);
      this.addEMC(remain);
    }
 else     if (tile instanceof RelayMK1Tile) {
      double provide=this.provideEMC(dir.getOpposite(),0.05);
      double remain=provide - ((RelayMK1Tile)tile).acceptEMC(dir,provide);
      this.addEMC(remain);
    }
  }
}","private void sendRelayBonus(){
  for (  Map.Entry<ForgeDirection,TileEntity> entry : WorldHelper.getAdjacentTileEntitiesMapped(worldObj,this).entrySet()) {
    ForgeDirection dir=entry.getKey();
    TileEntity tile=entry.getValue();
    if (tile instanceof RelayMK3Tile) {
      ((RelayMK3Tile)tile).acceptEMC(dir,0.5);
    }
 else     if (tile instanceof RelayMK2Tile) {
      ((RelayMK2Tile)tile).acceptEMC(dir,0.15);
    }
 else     if (tile instanceof RelayMK1Tile) {
      ((RelayMK1Tile)tile).acceptEMC(dir,0.05);
    }
  }
}"
8266,"/** 
 * The amount provided will be divided and evenly distributed as best as possible between adjacent IEMCAcceptors Remainder or rejected EMC is added back to this provider
 * @param emc The maximum combined emc to send to others
 */
public void sendToAllAcceptors(double emc){
  if (!(this instanceof IEMCProvider)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Map<ForgeDirection,TileEntity> tiles=Maps.filterValues(WorldHelper.getAdjacentTileEntitiesMapped(worldObj,this),Predicates.instanceOf(IEMCAcceptor.class));
  double emcPer=emc / tiles.size();
  for (  Map.Entry<ForgeDirection,TileEntity> entry : tiles.entrySet()) {
    if (this instanceof RelayMK1Tile && entry.getValue() instanceof RelayMK1Tile) {
      continue;
    }
    double provide=((IEMCProvider)this).provideEMC(entry.getKey().getOpposite(),emcPer);
    double remain=provide - ((IEMCAcceptor)entry.getValue()).acceptEMC(entry.getKey(),provide);
    this.addEMC(remain);
  }
}","/** 
 * The amount provided will be divided and evenly distributed as best as possible between adjacent IEMCAcceptors Remainder or rejected EMC is added back to this provider
 * @param emc The maximum combined emc to send to others
 */
public void sendToAllAcceptors(double emc){
  if (!(this instanceof IEmcProvider)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Map<ForgeDirection,TileEntity> tiles=Maps.filterValues(WorldHelper.getAdjacentTileEntitiesMapped(worldObj,this),Predicates.instanceOf(IEmcAcceptor.class));
  double emcPer=emc / tiles.size();
  for (  Map.Entry<ForgeDirection,TileEntity> entry : tiles.entrySet()) {
    if (this instanceof RelayMK1Tile && entry.getValue() instanceof RelayMK1Tile) {
      continue;
    }
    double provide=((IEmcProvider)this).provideEMC(entry.getKey().getOpposite(),emcPer);
    double remain=provide - ((IEmcAcceptor)entry.getValue()).acceptEMC(entry.getKey(),provide);
    this.addEMC(remain);
  }
}"
8267,"public static Map<ForgeDirection,TileEntity> getAdjacentTileEntitiesMapped(final World world,final TileEntity tile){
  Map<ForgeDirection,TileEntity> ret2=Maps.asMap(Sets.newHashSet(ForgeDirection.VALID_DIRECTIONS),new Function<ForgeDirection,TileEntity>(){
    @Nullable @Override public TileEntity apply(    ForgeDirection input){
      return world.getTileEntity(tile.xCoord + input.offsetX,tile.yCoord + input.offsetY,tile.zCoord + input.offsetZ);
    }
  }
);
  return Maps.filterValues(ret2,Predicates.notNull());
}","public static Map<ForgeDirection,TileEntity> getAdjacentTileEntitiesMapped(final World world,final TileEntity tile){
  Map<ForgeDirection,TileEntity> ret2=Maps.asMap(ImmutableSet.copyOf(ForgeDirection.VALID_DIRECTIONS),new Function<ForgeDirection,TileEntity>(){
    @Nullable @Override public TileEntity apply(    ForgeDirection input){
      return world.getTileEntity(tile.xCoord + input.offsetX,tile.yCoord + input.offsetY,tile.zCoord + input.offsetZ);
    }
  }
);
  return Maps.filterValues(ret2,Predicates.notNull());
}"
8268,"public static List<TileEntity> getAdjacentTileEntities(World world,TileEntity tile){
  return Lists.newArrayList(getAdjacentTileEntitiesMapped(world,tile).values());
}","public static List<TileEntity> getAdjacentTileEntities(World world,TileEntity tile){
  return ImmutableList.copyOf(getAdjacentTileEntitiesMapped(world,tile).values());
}"
8269,"@Override protected void apply(MovingObjectPosition mop){
  if (!worldObj.isRemote && mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int x=mop.blockX;
    int y=mop.blockY;
    int z=mop.blockZ;
    Block block=worldObj.getBlock(x,y,z);
    if (block == Blocks.obsidian) {
      PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)getThrower()),x,y,z,Blocks.flowing_lava,0);
    }
 else {
      for (int x1=x - 1; x1 <= x + 1; x1++)       for (int y1=y - 1; y1 <= y + 1; y1++)       for (int z1=z - 1; z1 <= z + 1; z1++) {
        if (worldObj.isAirBlock(x1,y1,z1)) {
          PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)getThrower()),x1,y1,z1,Blocks.fire,0);
        }
 else         if (worldObj.getBlock(x1,y1,z1) == Blocks.sand) {
          PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)getThrower()),x1,y1,z1,Blocks.glass,0);
        }
      }
    }
  }
}","@Override protected void apply(MovingObjectPosition mop){
  if (!worldObj.isRemote && mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int x=mop.blockX;
    int y=mop.blockY;
    int z=mop.blockZ;
    Block block=worldObj.getBlock(x,y,z);
    if (block == Blocks.obsidian) {
      PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)getThrower()),x,y,z,Blocks.flowing_lava,0);
    }
 else {
      for (int x1=x - 1; x1 <= x + 1; x1++)       for (int y1=y - 1; y1 <= y + 1; y1++)       for (int z1=z - 1; z1 <= z + 1; z1++) {
        if (worldObj.isAirBlock(x1,y1,z1)) {
          PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)getThrower()),x1,y1,z1,Blocks.fire,0);
        }
 else         if (worldObj.getBlock(x1,y1,z1) == Blocks.sand) {
          PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)getThrower()),x1,y1,z1,Blocks.glass,0);
        }
      }
    }
  }
}"
8270,"@Override public void onUpdate(){
  super.onUpdate();
  if (!this.worldObj.isRemote) {
    if (ticksExisted > 400 || !this.worldObj.blockExists(((int)this.posX),((int)this.posY),((int)this.posZ))) {
      this.setDead();
      return;
    }
    boolean flag=true;
    for (int x=(int)(this.posX - 3); x <= this.posX + 3; x++)     for (int y=(int)(this.posY - 3); y <= this.posY + 3; y++)     for (int z=(int)(this.posZ - 3); z <= this.posZ + 3; z++) {
      Block block=this.worldObj.getBlock(x,y,z);
      if (block == Blocks.water || block == Blocks.flowing_water) {
        this.worldObj.setBlockToAir(x,y,z);
        if (flag) {
          this.worldObj.playSoundEffect((double)((float)x + 0.5F),(double)((float)y + 0.5F),(double)((float)z + 0.5F),""String_Node_Str"",0.5F,2.6F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.8F);
          flag=false;
        }
      }
    }
    if (this.posY > 128) {
      WorldInfo worldInfo=this.worldObj.getWorldInfo();
      worldInfo.setRaining(false);
      this.setDead();
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!this.worldObj.isRemote) {
    if (ticksExisted > 400 || !this.worldObj.blockExists(((int)this.posX),((int)this.posY),((int)this.posZ))) {
      this.setDead();
      return;
    }
    boolean flag=true;
    if (getThrower() instanceof EntityPlayerMP) {
      EntityPlayerMP player=((EntityPlayerMP)getThrower());
      for (int x=(int)(this.posX - 3); x <= this.posX + 3; x++)       for (int y=(int)(this.posY - 3); y <= this.posY + 3; y++)       for (int z=(int)(this.posZ - 3); z <= this.posZ + 3; z++) {
        Block block=this.worldObj.getBlock(x,y,z);
        if (block == Blocks.water || block == Blocks.flowing_water) {
          if (PlayerHelper.hasBreakPermission(player,x,y,z)) {
            this.worldObj.setBlockToAir(x,y,z);
          }
          if (flag) {
            this.worldObj.playSoundEffect(x + 0.5,y + 0.5,z + 0.5,""String_Node_Str"",0.5F,2.6F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.8F);
            flag=false;
          }
        }
      }
    }
    if (this.posY > 128) {
      WorldInfo worldInfo=this.worldObj.getWorldInfo();
      worldInfo.setRaining(false);
      this.setDead();
    }
  }
}"
8271,"@Override public void onUpdate(){
  super.onUpdate();
  if (!this.worldObj.isRemote) {
    if (ticksExisted > 400 || !this.worldObj.blockExists(((int)this.posX),((int)this.posY),((int)this.posZ))) {
      this.setDead();
      return;
    }
    for (int x=(int)(this.posX - 3); x <= this.posX + 3; x++)     for (int y=(int)(this.posY - 3); y <= this.posY + 3; y++)     for (int z=(int)(this.posZ - 3); z <= this.posZ + 3; z++) {
      Block block=this.worldObj.getBlock(x,y,z);
      boolean flag=false;
      if (block == Blocks.lava) {
        this.worldObj.setBlock(x,y,z,Blocks.obsidian);
      }
 else       if (block == Blocks.flowing_lava) {
        this.worldObj.setBlock(x,y,z,Blocks.cobblestone);
      }
 else {
        continue;
      }
      this.worldObj.playSoundEffect((double)((float)x + 0.5F),(double)((float)y + 0.5F),(double)((float)z + 0.5F),""String_Node_Str"",0.5F,2.6F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.8F);
    }
    if (this.isInWater()) {
      this.setDead();
    }
    if (this.posY > 128) {
      WorldInfo worldInfo=this.worldObj.getWorldInfo();
      worldInfo.setRaining(true);
      this.setDead();
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!this.worldObj.isRemote) {
    if (ticksExisted > 400 || !this.worldObj.blockExists(((int)this.posX),((int)this.posY),((int)this.posZ))) {
      this.setDead();
      return;
    }
    if (getThrower() instanceof EntityPlayerMP) {
      EntityPlayerMP player=((EntityPlayerMP)getThrower());
      for (int x=(int)(this.posX - 3); x <= this.posX + 3; x++)       for (int y=(int)(this.posY - 3); y <= this.posY + 3; y++)       for (int z=(int)(this.posZ - 3); z <= this.posZ + 3; z++) {
        Block block=this.worldObj.getBlock(x,y,z);
        if (block == Blocks.lava) {
          PlayerHelper.checkedReplaceBlock(player,x,y,z,Blocks.obsidian,0);
        }
 else         if (block == Blocks.flowing_lava) {
          PlayerHelper.checkedReplaceBlock(player,x,y,z,Blocks.cobblestone,0);
        }
        this.worldObj.playSoundEffect(x + 0.5,y + 0.5,z + 0.5,""String_Node_Str"",0.5F,2.6F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.8F);
      }
    }
    if (this.isInWater()) {
      this.setDead();
    }
    if (this.posY > 128) {
      WorldInfo worldInfo=this.worldObj.getWorldInfo();
      worldInfo.setRaining(true);
      this.setDead();
    }
  }
}"
8272,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (world.isRemote)   return stack;
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null && mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
    int numRows=calculateDepthFromCharge(stack);
    boolean hasAction=false;
    ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
    Coordinates coords=new Coordinates(mop);
    AxisAlignedBB box=WorldHelper.getDeepBox(coords,direction,--numRows);
    List<ItemStack> drops=Lists.newArrayList();
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block block=world.getBlock(x,y,z);
      float hardness=block.getBlockHardness(world,x,y,z);
      if (block == Blocks.air || hardness >= 50.0F || hardness == -1.0F) {
        continue;
      }
      if (!consumeFuel(player,stack,8,true)) {
        break;
      }
      if (!hasAction) {
        hasAction=true;
      }
      if (PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
        List<ItemStack> list=WorldHelper.getBlockDrops(world,player,block,stack,x,y,z);
        if (list != null && list.size() > 0) {
          drops.addAll(list);
        }
        world.setBlockToAir(x,y,z);
        if (world.rand.nextInt(8) == 0) {
          PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
        }
      }
    }
    PlayerHelper.swingItem(player);
    if (hasAction) {
      WorldHelper.createLootDrop(drops,world,mop.blockX,mop.blockY,mop.blockZ);
      world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
    }
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (world.isRemote)   return stack;
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null && mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
    int numRows=calculateDepthFromCharge(stack);
    boolean hasAction=false;
    ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
    Coordinates coords=new Coordinates(mop);
    AxisAlignedBB box=WorldHelper.getDeepBox(coords,direction,--numRows);
    List<ItemStack> drops=Lists.newArrayList();
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block block=world.getBlock(x,y,z);
      float hardness=block.getBlockHardness(world,x,y,z);
      if (block == Blocks.air || hardness >= 50.0F || hardness == -1.0F) {
        continue;
      }
      if (!consumeFuel(player,stack,8,true)) {
        break;
      }
      if (!hasAction) {
        hasAction=true;
      }
      if (PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
        List<ItemStack> list=WorldHelper.getBlockDrops(world,player,block,stack,x,y,z);
        if (list != null && list.size() > 0) {
          drops.addAll(list);
        }
        world.setBlockToAir(x,y,z);
        if (world.rand.nextInt(8) == 0) {
          PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
        }
      }
    }
    PlayerHelper.swingItem(player);
    if (hasAction) {
      WorldHelper.createLootDrop(drops,world,mop.blockX,mop.blockY,mop.blockZ);
      world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
    }
  }
  return stack;
}"
8273,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int sideHit,float f1,float f2,float f3){
  if (!world.isRemote && PlayerHelper.hasEditPermission(world,((EntityPlayerMP)player),x,y,z)) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof IFluidHandler) {
      IFluidHandler tank=(IFluidHandler)tile;
      if (FluidHelper.canFillTank(tank,FluidRegistry.WATER,sideHit)) {
        FluidHelper.fillTank(tank,FluidRegistry.WATER,sideHit,1000);
        return true;
      }
    }
    Block block=world.getBlock(x,y,z);
    int meta=world.getBlockMetadata(x,y,z);
    if (block == Blocks.cauldron && meta < 3) {
      ((BlockCauldron)block).func_150024_a(world,x,y,z,meta + 1);
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int sideHit,float f1,float f2,float f3){
  if (!world.isRemote && PlayerHelper.hasEditPermission(((EntityPlayerMP)player),x,y,z)) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof IFluidHandler) {
      IFluidHandler tank=(IFluidHandler)tile;
      if (FluidHelper.canFillTank(tank,FluidRegistry.WATER,sideHit)) {
        FluidHelper.fillTank(tank,FluidRegistry.WATER,sideHit,1000);
        return true;
      }
    }
    Block block=world.getBlock(x,y,z);
    int meta=world.getBlockMetadata(x,y,z);
    if (block == Blocks.cauldron && meta < 3) {
      ((BlockCauldron)block).func_150024_a(world,x,y,z,meta + 1);
    }
  }
  return false;
}"
8274,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
    if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
      return stack;
    }
    ItemStack[] inventory=getInventory(stack);
    if (inventory[0] == null || inventory[1] == null) {
      return stack;
    }
    Block newBlock=Block.getBlockFromItem(inventory[1].getItem());
    if (newBlock == Blocks.air) {
      return stack;
    }
    int newMeta=inventory[1].getItemDamage();
    double kleinEmc=ItemPE.getEmc(inventory[0]);
    int reqEmc=EMCHelper.getEmcValue(inventory[1]);
    byte charge=getCharge(stack);
    byte mode=this.getMode(stack);
    int facing=MathHelper.floor_double((double)((player.rotationYaw * 4F) / 360F) + 0.5D) & 3;
    ForgeDirection dir=ForgeDirection.getOrientation(mop.sideHit);
    Vec3 look=player.getLookVec();
    AxisAlignedBB box=AxisAlignedBB.getBoundingBox(mop.blockX,mop.blockY,mop.blockZ,mop.blockX,mop.blockY,mop.blockZ);
    int dX=0, dY=0, dZ=0;
    boolean lookingDown=look.yCoord >= -1 && look.yCoord <= -WALL_MODE;
    boolean lookingUp=look.yCoord <= 1 && look.yCoord >= WALL_MODE;
    boolean lookingAlongZ=facing == 0 || facing == 2;
switch (dir) {
case UP:
      if (lookingDown || mode == TRANSMUTATION_MODE) {
        box=box.expand(charge,0,charge);
        dY=1;
      }
 else       if (lookingAlongZ)       box=box.expand(charge,charge * 2,0).offset(0,charge,0);
 else       box=box.expand(0,charge * 2,charge).offset(0,charge,0);
    break;
case DOWN:
  if (lookingUp || mode == TRANSMUTATION_MODE) {
    box=box.expand(charge,0,charge);
    dY=-1;
  }
 else   if (lookingAlongZ)   box=box.expand(charge,charge * 2,0).offset(0,-charge,0);
 else   box=box.expand(0,charge * 2,charge).offset(0,-charge,0);
break;
case EAST:
box=box.expand(0,charge,charge);
dX=1;
break;
case WEST:
box=box.expand(0,charge,charge);
dX=-1;
break;
case SOUTH:
box=box.expand(charge,charge,0);
dZ=1;
break;
case NORTH:
box=box.expand(charge,charge,0);
dZ=-1;
break;
}
if (NORMAL_MODE == mode) box=box.offset(dX,dY,dZ);
if (box != null) {
for (int x=(int)box.minX; x <= (int)box.maxX; x++) {
for (int y=(int)box.minY; y <= (int)box.maxY; y++) {
for (int z=(int)box.minZ; z <= (int)box.maxZ; z++) {
Block oldBlock=world.getBlock(x,y,z);
int oldMeta=oldBlock.getDamageValue(world,x,y,z);
if (mode == NORMAL_MODE && oldBlock == Blocks.air) {
if (kleinEmc < reqEmc) break;
if (PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
removeKleinEMC(stack,reqEmc);
kleinEmc-=reqEmc;
}
}
 else if (mode == TRANSMUTATION_MODE) {
if ((oldBlock == newBlock && oldMeta == newMeta) || oldBlock == Blocks.air || world.getTileEntity(x,y,z) != null || !EMCHelper.doesItemHaveEmc(new ItemStack(oldBlock,1,oldMeta))) {
continue;
}
int emc=EMCHelper.getEmcValue(new ItemStack(oldBlock,1,oldMeta));
if (emc > reqEmc) {
if (PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
int difference=emc - reqEmc;
kleinEmc+=MathHelper.clamp_double(kleinEmc,0,EMCHelper.getKleinStarMaxEmc(inventory[0]));
addKleinEMC(stack,difference);
}
}
 else if (emc < reqEmc) {
int difference=reqEmc - emc;
if (kleinEmc >= difference) {
if (PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
kleinEmc-=difference;
removeKleinEMC(stack,difference);
}
}
}
 else {
PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta);
}
}
}
}
}
player.worldObj.playSoundAtEntity(player,""String_Node_Str"",1.0F,0.80F + ((0.20F / (float)numCharges) * charge));
}
}
return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
    if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
      return stack;
    }
    ItemStack[] inventory=getInventory(stack);
    if (inventory[0] == null || inventory[1] == null) {
      return stack;
    }
    Block newBlock=Block.getBlockFromItem(inventory[1].getItem());
    if (newBlock == Blocks.air) {
      return stack;
    }
    int newMeta=inventory[1].getItemDamage();
    double kleinEmc=ItemPE.getEmc(inventory[0]);
    int reqEmc=EMCHelper.getEmcValue(inventory[1]);
    byte charge=getCharge(stack);
    byte mode=this.getMode(stack);
    int facing=MathHelper.floor_double((double)((player.rotationYaw * 4F) / 360F) + 0.5D) & 3;
    ForgeDirection dir=ForgeDirection.getOrientation(mop.sideHit);
    Vec3 look=player.getLookVec();
    AxisAlignedBB box=AxisAlignedBB.getBoundingBox(mop.blockX,mop.blockY,mop.blockZ,mop.blockX,mop.blockY,mop.blockZ);
    int dX=0, dY=0, dZ=0;
    boolean lookingDown=look.yCoord >= -1 && look.yCoord <= -WALL_MODE;
    boolean lookingUp=look.yCoord <= 1 && look.yCoord >= WALL_MODE;
    boolean lookingAlongZ=facing == 0 || facing == 2;
switch (dir) {
case UP:
      if (lookingDown || mode == TRANSMUTATION_MODE) {
        box=box.expand(charge,0,charge);
        dY=1;
      }
 else       if (lookingAlongZ)       box=box.expand(charge,charge * 2,0).offset(0,charge,0);
 else       box=box.expand(0,charge * 2,charge).offset(0,charge,0);
    break;
case DOWN:
  if (lookingUp || mode == TRANSMUTATION_MODE) {
    box=box.expand(charge,0,charge);
    dY=-1;
  }
 else   if (lookingAlongZ)   box=box.expand(charge,charge * 2,0).offset(0,-charge,0);
 else   box=box.expand(0,charge * 2,charge).offset(0,-charge,0);
break;
case EAST:
box=box.expand(0,charge,charge);
dX=1;
break;
case WEST:
box=box.expand(0,charge,charge);
dX=-1;
break;
case SOUTH:
box=box.expand(charge,charge,0);
dZ=1;
break;
case NORTH:
box=box.expand(charge,charge,0);
dZ=-1;
break;
}
if (NORMAL_MODE == mode) box=box.offset(dX,dY,dZ);
if (box != null) {
for (int x=(int)box.minX; x <= (int)box.maxX; x++) {
for (int y=(int)box.minY; y <= (int)box.maxY; y++) {
for (int z=(int)box.minZ; z <= (int)box.maxZ; z++) {
Block oldBlock=world.getBlock(x,y,z);
int oldMeta=oldBlock.getDamageValue(world,x,y,z);
if (mode == NORMAL_MODE && oldBlock == Blocks.air) {
if (kleinEmc < reqEmc) break;
if (PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
removeKleinEMC(stack,reqEmc);
kleinEmc-=reqEmc;
}
}
 else if (mode == TRANSMUTATION_MODE) {
if ((oldBlock == newBlock && oldMeta == newMeta) || oldBlock == Blocks.air || world.getTileEntity(x,y,z) != null || !EMCHelper.doesItemHaveEmc(new ItemStack(oldBlock,1,oldMeta))) {
continue;
}
int emc=EMCHelper.getEmcValue(new ItemStack(oldBlock,1,oldMeta));
if (emc > reqEmc) {
if (PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
int difference=emc - reqEmc;
kleinEmc+=MathHelper.clamp_double(kleinEmc,0,EMCHelper.getKleinStarMaxEmc(inventory[0]));
addKleinEMC(stack,difference);
}
}
 else if (emc < reqEmc) {
int difference=reqEmc - emc;
if (kleinEmc >= difference) {
if (PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta)) {
kleinEmc-=difference;
removeKleinEMC(stack,difference);
}
}
}
 else {
PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y,z,newBlock,newMeta);
}
}
}
}
}
player.worldObj.playSoundAtEntity(player,""String_Node_Str"",1.0F,0.80F + ((0.20F / (float)numCharges) * charge));
}
}
return stack;
}"
8275,"private void changeBlock(World world,MetaBlock pointed,MetaBlock result,int x,int y,int z,EntityPlayer player){
  MetaBlock block=new MetaBlock(world,x,y,z);
  if (block.equals(pointed)) {
    PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,result.getBlock(),result.getMeta());
    if (world.rand.nextInt(8) == 0) {
      PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y + 1,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
    }
  }
}","private void changeBlock(World world,MetaBlock pointed,MetaBlock result,int x,int y,int z,EntityPlayer player){
  MetaBlock block=new MetaBlock(world,x,y,z);
  if (block.equals(pointed)) {
    PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y,z,result.getBlock(),result.getMeta());
    if (world.rand.nextInt(8) == 0) {
      PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y + 1,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
    }
  }
}"
8276,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int sideHit,float f1,float f2,float f3){
  if (!world.isRemote && PlayerHelper.hasEditPermission(world,((EntityPlayerMP)player),x,y,z)) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof IFluidHandler) {
      IFluidHandler tank=(IFluidHandler)tile;
      if (FluidHelper.canFillTank(tank,FluidRegistry.LAVA,sideHit)) {
        if (consumeFuel(player,stack,32.0F,true)) {
          FluidHelper.fillTank(tank,FluidRegistry.LAVA,sideHit,1000);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int sideHit,float f1,float f2,float f3){
  if (!world.isRemote && PlayerHelper.hasEditPermission(((EntityPlayerMP)player),x,y,z)) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof IFluidHandler) {
      IFluidHandler tank=(IFluidHandler)tile;
      if (FluidHelper.canFillTank(tank,FluidRegistry.LAVA,sideHit)) {
        if (consumeFuel(player,stack,32.0F,true)) {
          FluidHelper.fillTank(tank,FluidRegistry.LAVA,sideHit,1000);
          return true;
        }
      }
    }
  }
  return false;
}"
8277,"/** 
 * Tills in an AOE. Charge affects the AOE. Optional per-block EMC cost.
 */
protected void tillAOE(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int meta,int emcCost){
  byte charge=this.getCharge(stack);
  boolean hasAction=false;
  boolean hasSoundPlayed=false;
  for (int i=x - charge; i <= x + charge; i++) {
    for (int j=z - charge; j <= z + charge; j++) {
      Block block=world.getBlock(i,y,j);
      Block blockAbove=world.getBlock(i,y + 1,j);
      if (!blockAbove.isOpaqueCube() && (block == Blocks.grass || block == Blocks.dirt)) {
        Block block1=Blocks.farmland;
        if (!hasSoundPlayed) {
          world.playSoundEffect((double)((float)i + 0.5F),(double)((float)y + 0.5F),(double)((float)j + 0.5F),block1.stepSound.getStepResourcePath(),(block1.stepSound.getVolume() + 1.0F) / 2.0F,block1.stepSound.getPitch() * 0.8F);
          hasSoundPlayed=true;
        }
        if (world.isRemote) {
          return;
        }
 else {
          if (MinecraftForge.EVENT_BUS.post(new UseHoeEvent(player,stack,world,i,y,j))) {
            continue;
          }
          if ((i == x && j == z) || consumeFuel(player,stack,emcCost,true)) {
            world.setBlock(i,y,j,block1);
            if ((blockAbove.getMaterial() == Material.plants || blockAbove.getMaterial() == Material.vine) && !(blockAbove instanceof ITileEntityProvider)) {
              world.func_147480_a(i,y + 1,j,true);
            }
            if (!hasAction) {
              hasAction=true;
            }
          }
        }
      }
    }
  }
  if (hasAction) {
    player.worldObj.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
  }
}","/** 
 * Tills in an AOE. Charge affects the AOE. Optional per-block EMC cost.
 */
protected void tillAOE(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int meta,int emcCost){
  byte charge=this.getCharge(stack);
  boolean hasAction=false;
  boolean hasSoundPlayed=false;
  for (int i=x - charge; i <= x + charge; i++) {
    for (int j=z - charge; j <= z + charge; j++) {
      Block block=world.getBlock(i,y,j);
      Block blockAbove=world.getBlock(i,y + 1,j);
      if (!blockAbove.isOpaqueCube() && (block == Blocks.grass || block == Blocks.dirt)) {
        if (!hasSoundPlayed) {
          world.playSoundEffect((double)((float)i + 0.5F),(double)((float)y + 0.5F),(double)((float)j + 0.5F),Blocks.farmland.stepSound.getStepResourcePath(),(Blocks.farmland.stepSound.getVolume() + 1.0F) / 2.0F,Blocks.farmland.stepSound.getPitch() * 0.8F);
          hasSoundPlayed=true;
        }
        if (world.isRemote) {
          return;
        }
 else {
          if (MinecraftForge.EVENT_BUS.post(new UseHoeEvent(player,stack,world,i,y,j))) {
            continue;
          }
          if ((i == x && j == z) || consumeFuel(player,stack,emcCost,true)) {
            PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),i,y,j,Blocks.farmland,0);
            if ((blockAbove.getMaterial() == Material.plants || blockAbove.getMaterial() == Material.vine) && !(blockAbove instanceof ITileEntityProvider)) {
              if (PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),i,y + 1,j)) {
                world.func_147480_a(i,y + 1,j,true);
              }
            }
            if (!hasAction) {
              hasAction=true;
            }
          }
        }
      }
    }
  }
  if (hasAction) {
    player.worldObj.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
  }
}"
8278,"/** 
 * Carves in an AOE. Charge affects the breadth and/or depth of the AOE. Optional per-block EMC cost.
 */
protected void digAOE(ItemStack stack,World world,EntityPlayer player,boolean affectDepth,int emcCost){
  if (world.isRemote || this.getCharge(stack) == 0) {
    return;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
    return;
  }
  AxisAlignedBB box=affectDepth ? WorldHelper.getBroadDeepBox(new Coordinates(mop.blockX,mop.blockY,mop.blockZ),ForgeDirection.getOrientation(mop.sideHit),this.getCharge(stack)) : WorldHelper.getFlatYBox(new Coordinates(mop.blockX,mop.blockY,mop.blockZ),this.getCharge(stack));
  List<ItemStack> drops=Lists.newArrayList();
  for (int i=(int)box.minX; i <= box.maxX; i++)   for (int j=(int)box.minY; j <= box.maxY; j++)   for (int k=(int)box.minZ; k <= box.maxZ; k++) {
    Block b=world.getBlock(i,j,k);
    if (PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),i,j,k) && b != Blocks.air && b.getBlockHardness(world,i,j,k) != -1 && canHarvestBlock(b,stack) && consumeFuel(player,stack,emcCost,true)) {
      drops.addAll(WorldHelper.getBlockDrops(world,player,b,stack,i,j,k));
      world.setBlockToAir(i,j,k);
    }
  }
  WorldHelper.createLootDrop(drops,world,mop.blockX,mop.blockY,mop.blockZ);
  PlayerHelper.swingItem(player);
  if (!drops.isEmpty()) {
    world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
  }
}","/** 
 * Carves in an AOE. Charge affects the breadth and/or depth of the AOE. Optional per-block EMC cost.
 */
protected void digAOE(ItemStack stack,World world,EntityPlayer player,boolean affectDepth,int emcCost){
  if (world.isRemote || this.getCharge(stack) == 0) {
    return;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
    return;
  }
  AxisAlignedBB box=affectDepth ? WorldHelper.getBroadDeepBox(new Coordinates(mop.blockX,mop.blockY,mop.blockZ),ForgeDirection.getOrientation(mop.sideHit),this.getCharge(stack)) : WorldHelper.getFlatYBox(new Coordinates(mop.blockX,mop.blockY,mop.blockZ),this.getCharge(stack));
  List<ItemStack> drops=Lists.newArrayList();
  for (int i=(int)box.minX; i <= box.maxX; i++)   for (int j=(int)box.minY; j <= box.maxY; j++)   for (int k=(int)box.minZ; k <= box.maxZ; k++) {
    Block b=world.getBlock(i,j,k);
    if (b != Blocks.air && b.getBlockHardness(world,i,j,k) != -1 && canHarvestBlock(b,stack) && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),i,j,k) && consumeFuel(player,stack,emcCost,true)) {
      drops.addAll(WorldHelper.getBlockDrops(world,player,b,stack,i,j,k));
      world.setBlockToAir(i,j,k);
    }
  }
  WorldHelper.createLootDrop(drops,world,mop.blockX,mop.blockY,mop.blockZ);
  PlayerHelper.swingItem(player);
  if (!drops.isEmpty()) {
    world.playSoundAtEntity(player,""String_Node_Str"",1.0F,1.0F);
  }
}"
8279,"/** 
 * Called when tools that act as shears start breaking a block. Free operation.
 */
protected void shearBlock(ItemStack stack,int x,int y,int z,EntityPlayer player){
  if (player.worldObj.isRemote) {
    return;
  }
  Block block=player.worldObj.getBlock(x,y,z);
  if (block instanceof IShearable) {
    IShearable target=(IShearable)block;
    if (target.isShearable(stack,player.worldObj,x,y,z) && PlayerHelper.hasBreakPermission(player.worldObj,((EntityPlayerMP)player),x,y,z)) {
      ArrayList<ItemStack> drops=target.onSheared(stack,player.worldObj,x,y,z,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
      Random rand=new Random();
      for (      ItemStack drop : drops) {
        float f=0.7F;
        double d=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d1=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d2=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        EntityItem entityitem=new EntityItem(player.worldObj,(double)x + d,(double)y + d1,(double)z + d2,drop);
        entityitem.delayBeforeCanPickup=10;
        player.worldObj.spawnEntityInWorld(entityitem);
      }
      stack.damageItem(1,player);
      player.addStat(StatList.mineBlockStatArray[Block.getIdFromBlock(block)],1);
    }
  }
}","/** 
 * Called when tools that act as shears start breaking a block. Free operation.
 */
protected void shearBlock(ItemStack stack,int x,int y,int z,EntityPlayer player){
  if (player.worldObj.isRemote) {
    return;
  }
  Block block=player.worldObj.getBlock(x,y,z);
  if (block instanceof IShearable) {
    IShearable target=(IShearable)block;
    if (target.isShearable(stack,player.worldObj,x,y,z) && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
      ArrayList<ItemStack> drops=target.onSheared(stack,player.worldObj,x,y,z,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
      Random rand=new Random();
      for (      ItemStack drop : drops) {
        float f=0.7F;
        double d=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d1=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d2=(double)(rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        EntityItem entityitem=new EntityItem(player.worldObj,(double)x + d,(double)y + d1,(double)z + d2,drop);
        entityitem.delayBeforeCanPickup=10;
        player.worldObj.spawnEntityInWorld(entityitem);
      }
      stack.damageItem(1,player);
      player.addStat(StatList.mineBlockStatArray[Block.getIdFromBlock(block)],1);
    }
  }
}"
8280,"/** 
 * Deforests in an AOE. Charge affects the AOE. Optional per-block EMC cost.
 */
protected void deforestAOE(World world,ItemStack stack,EntityPlayer player,int emcCost){
  byte charge=getCharge(stack);
  if (charge == 0 || world.isRemote) {
    return;
  }
  List<ItemStack> drops=Lists.newArrayList();
  for (int x=(int)player.posX - (5 * charge); x <= player.posX + (5 * charge); x++)   for (int y=(int)player.posY - (10 * charge); y <= player.posY + (10 * charge); y++)   for (int z=(int)player.posZ - (5 * charge); z <= player.posZ + (5 * charge); z++) {
    Block block=world.getBlock(x,y,z);
    if (block == Blocks.air) {
      continue;
    }
    ItemStack s=new ItemStack(block);
    int[] oreIds=OreDictionary.getOreIDs(s);
    if (oreIds.length == 0) {
      continue;
    }
    String oreName=OreDictionary.getOreName(oreIds[0]);
    if (oreName.equals(""String_Node_Str"") || oreName.equals(""String_Node_Str"")) {
      ArrayList<ItemStack> blockDrops=WorldHelper.getBlockDrops(world,player,block,stack,x,y,z);
      if (!blockDrops.isEmpty() && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z) && consumeFuel(player,stack,emcCost,true)) {
        drops.addAll(blockDrops);
        world.setBlockToAir(x,y,z);
      }
    }
  }
  WorldHelper.createLootDrop(drops,world,player.posX,player.posY,player.posZ);
  PlayerHelper.swingItem(player);
}","/** 
 * Deforests in an AOE. Charge affects the AOE. Optional per-block EMC cost.
 */
protected void deforestAOE(World world,ItemStack stack,EntityPlayer player,int emcCost){
  byte charge=getCharge(stack);
  if (charge == 0 || world.isRemote) {
    return;
  }
  List<ItemStack> drops=Lists.newArrayList();
  for (int x=(int)player.posX - (5 * charge); x <= player.posX + (5 * charge); x++)   for (int y=(int)player.posY - (10 * charge); y <= player.posY + (10 * charge); y++)   for (int z=(int)player.posZ - (5 * charge); z <= player.posZ + (5 * charge); z++) {
    Block block=world.getBlock(x,y,z);
    if (block == Blocks.air) {
      continue;
    }
    ItemStack s=new ItemStack(block);
    int[] oreIds=OreDictionary.getOreIDs(s);
    if (oreIds.length == 0) {
      continue;
    }
    String oreName=OreDictionary.getOreName(oreIds[0]);
    if (oreName.equals(""String_Node_Str"") || oreName.equals(""String_Node_Str"")) {
      ArrayList<ItemStack> blockDrops=WorldHelper.getBlockDrops(world,player,block,stack,x,y,z);
      if (!blockDrops.isEmpty() && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z) && consumeFuel(player,stack,emcCost,true)) {
        drops.addAll(blockDrops);
        world.setBlockToAir(x,y,z);
      }
    }
  }
  WorldHelper.createLootDrop(drops,world,player.posX,player.posY,player.posZ);
  PlayerHelper.swingItem(player);
}"
8281,"/** 
 * Called by multiple tools' left click function. Charge has no effect. Free operation.
 */
protected void digBasedOnMode(ItemStack stack,World world,Block block,int x,int y,int z,EntityLivingBase living){
  if (world.isRemote || !(living instanceof EntityPlayer)) {
    return;
  }
  EntityPlayer player=(EntityPlayer)living;
  byte mode=this.getMode(stack);
  if (mode == 0) {
    return;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  AxisAlignedBB box;
  if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
    return;
  }
  ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
  if (mode == 1) {
    box=AxisAlignedBB.getBoundingBox(x,y - 1,z,x,y + 1,z);
  }
 else   if (mode == 2) {
    if (direction.offsetX != 0) {
      box=AxisAlignedBB.getBoundingBox(x,y,z - 1,x,y,z + 1);
    }
 else     if (direction.offsetZ != 0) {
      box=AxisAlignedBB.getBoundingBox(x - 1,y,z,x + 1,y,z);
    }
 else {
      int dir=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
      if (dir == 0 || dir == 2) {
        box=AxisAlignedBB.getBoundingBox(x,y,z - 1,x,y,z + 1);
      }
 else {
        box=AxisAlignedBB.getBoundingBox(x - 1,y,z,x + 1,y,z);
      }
    }
  }
 else {
    if (direction.offsetX == 1) {
      box=AxisAlignedBB.getBoundingBox(x - 2,y,z,x,y,z);
    }
 else     if (direction.offsetX == -1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x + 2,y,z);
    }
 else     if (direction.offsetZ == 1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z - 2,x,y,z);
    }
 else     if (direction.offsetZ == -1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x,y,z + 2);
    }
 else     if (direction.offsetY == 1) {
      box=AxisAlignedBB.getBoundingBox(x,y - 2,z,x,y,z);
    }
 else {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x,y + 2,z);
    }
  }
  List<ItemStack> drops=Lists.newArrayList();
  for (int i=(int)box.minX; i <= box.maxX; i++)   for (int j=(int)box.minY; j <= box.maxY; j++)   for (int k=(int)box.minZ; k <= box.maxZ; k++) {
    Block b=world.getBlock(i,j,k);
    if (PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z) && b != Blocks.air && b.getBlockHardness(world,i,j,k) != -1 && (canHarvestBlock(block,stack) || ForgeHooks.canToolHarvestBlock(block,world.getBlockMetadata(i,j,k),stack))) {
      drops.addAll(WorldHelper.getBlockDrops(world,player,b,stack,i,j,k));
      world.setBlockToAir(i,j,k);
    }
  }
  WorldHelper.createLootDrop(drops,world,x,y,z);
}","/** 
 * Called by multiple tools' left click function. Charge has no effect. Free operation.
 */
protected void digBasedOnMode(ItemStack stack,World world,Block block,int x,int y,int z,EntityLivingBase living){
  if (world.isRemote || !(living instanceof EntityPlayer)) {
    return;
  }
  EntityPlayer player=(EntityPlayer)living;
  byte mode=this.getMode(stack);
  if (mode == 0) {
    return;
  }
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  AxisAlignedBB box;
  if (mop == null || mop.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) {
    return;
  }
  ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
  if (mode == 1) {
    box=AxisAlignedBB.getBoundingBox(x,y - 1,z,x,y + 1,z);
  }
 else   if (mode == 2) {
    if (direction.offsetX != 0) {
      box=AxisAlignedBB.getBoundingBox(x,y,z - 1,x,y,z + 1);
    }
 else     if (direction.offsetZ != 0) {
      box=AxisAlignedBB.getBoundingBox(x - 1,y,z,x + 1,y,z);
    }
 else {
      int dir=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
      if (dir == 0 || dir == 2) {
        box=AxisAlignedBB.getBoundingBox(x,y,z - 1,x,y,z + 1);
      }
 else {
        box=AxisAlignedBB.getBoundingBox(x - 1,y,z,x + 1,y,z);
      }
    }
  }
 else {
    if (direction.offsetX == 1) {
      box=AxisAlignedBB.getBoundingBox(x - 2,y,z,x,y,z);
    }
 else     if (direction.offsetX == -1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x + 2,y,z);
    }
 else     if (direction.offsetZ == 1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z - 2,x,y,z);
    }
 else     if (direction.offsetZ == -1) {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x,y,z + 2);
    }
 else     if (direction.offsetY == 1) {
      box=AxisAlignedBB.getBoundingBox(x,y - 2,z,x,y,z);
    }
 else {
      box=AxisAlignedBB.getBoundingBox(x,y,z,x,y + 2,z);
    }
  }
  List<ItemStack> drops=Lists.newArrayList();
  for (int i=(int)box.minX; i <= box.maxX; i++)   for (int j=(int)box.minY; j <= box.maxY; j++)   for (int k=(int)box.minZ; k <= box.maxZ; k++) {
    Block b=world.getBlock(i,j,k);
    if (b != Blocks.air && b.getBlockHardness(world,i,j,k) != -1 && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z) && (canHarvestBlock(block,stack) || ForgeHooks.canToolHarvestBlock(block,world.getBlockMetadata(i,j,k),stack))) {
      drops.addAll(WorldHelper.getBlockDrops(world,player,b,stack,i,j,k));
      world.setBlockToAir(i,j,k);
    }
  }
  WorldHelper.createLootDrop(drops,world,x,y,z);
}"
8282,"/** 
 * Recursively mines out a vein of the given Block, starting from the provided coordinates
 */
public static void harvestVein(World world,EntityPlayer player,ItemStack stack,Coordinates coords,Block target,List<ItemStack> currentDrops,int numMined){
  if (numMined >= Constants.MAX_VEIN_SIZE) {
    return;
  }
  AxisAlignedBB b=AxisAlignedBB.getBoundingBox(coords.x - 1,coords.y - 1,coords.z - 1,coords.x + 1,coords.y + 1,coords.z + 1);
  for (int x=(int)b.minX; x <= b.maxX; x++)   for (int y=(int)b.minY; y <= b.maxY; y++)   for (int z=(int)b.minZ; z <= b.maxZ; z++) {
    Block block=world.getBlock(x,y,z);
    if (block == target || (target == Blocks.lit_redstone_ore && block == Blocks.redstone_ore)) {
      if (PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
        currentDrops.addAll(getBlockDrops(world,player,block,stack,x,y,z));
        world.setBlockToAir(x,y,z);
      }
      numMined++;
      harvestVein(world,player,stack,new Coordinates(x,y,z),target,currentDrops,numMined);
    }
  }
}","/** 
 * Recursively mines out a vein of the given Block, starting from the provided coordinates
 */
public static void harvestVein(World world,EntityPlayer player,ItemStack stack,Coordinates coords,Block target,List<ItemStack> currentDrops,int numMined){
  if (numMined >= Constants.MAX_VEIN_SIZE) {
    return;
  }
  AxisAlignedBB b=AxisAlignedBB.getBoundingBox(coords.x - 1,coords.y - 1,coords.z - 1,coords.x + 1,coords.y + 1,coords.z + 1);
  for (int x=(int)b.minX; x <= b.maxX; x++)   for (int y=(int)b.minY; y <= b.maxY; y++)   for (int z=(int)b.minZ; z <= b.maxZ; z++) {
    Block block=world.getBlock(x,y,z);
    if (block == target || (target == Blocks.lit_redstone_ore && block == Blocks.redstone_ore)) {
      if (PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
        currentDrops.addAll(getBlockDrops(world,player,block,stack,x,y,z));
        world.setBlockToAir(x,y,z);
      }
      numMined++;
      harvestVein(world,player,stack,new Coordinates(x,y,z),target,currentDrops,numMined);
    }
  }
}"
8283,"public static void extinguishNearby(World world,EntityPlayer player){
  for (int x=(int)(player.posX - 1); x <= player.posX + 1; x++)   for (int y=(int)(player.posY - 1); y <= player.posY + 1; y++)   for (int z=(int)(player.posZ - 1); z <= player.posZ + 1; z++)   if (world.getBlock(x,y,z) == Blocks.fire && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
    world.setBlockToAir(x,y,z);
  }
}","public static void extinguishNearby(World world,EntityPlayer player){
  for (int x=(int)(player.posX - 1); x <= player.posX + 1; x++)   for (int y=(int)(player.posY - 1); y <= player.posY + 1; y++)   for (int z=(int)(player.posZ - 1); z <= player.posZ + 1; z++)   if (world.getBlock(x,y,z) == Blocks.fire && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
    world.setBlockToAir(x,y,z);
  }
}"
8284,"public static void freezeInBoundingBox(World world,AxisAlignedBB box,EntityPlayer player,boolean random){
  for (int x=(int)box.minX; x <= box.maxX; x++) {
    for (int y=(int)box.minY; y <= box.maxY; y++) {
      for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block b=world.getBlock(x,y,z);
        if ((b == Blocks.water || b == Blocks.flowing_water) && (!random || world.rand.nextInt(128) == 0)) {
          if (player != null) {
            PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y,z,Blocks.ice,0);
          }
 else {
            world.setBlock(x,y,z,Blocks.ice);
          }
        }
 else         if (b.isSideSolid(world,x,y,z,ForgeDirection.UP)) {
          Block b2=world.getBlock(x,y + 1,z);
          if (b2 == Blocks.air && (!random || world.rand.nextInt(128) == 0)) {
            if (player != null) {
              PlayerHelper.checkedPlaceBlock(((EntityPlayerMP)player),x,y + 1,z,Blocks.snow_layer,0);
            }
 else {
              world.setBlock(x,y + 1,z,Blocks.snow_layer);
            }
          }
        }
      }
    }
  }
}","public static void freezeInBoundingBox(World world,AxisAlignedBB box,EntityPlayer player,boolean random){
  for (int x=(int)box.minX; x <= box.maxX; x++) {
    for (int y=(int)box.minY; y <= box.maxY; y++) {
      for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block b=world.getBlock(x,y,z);
        if ((b == Blocks.water || b == Blocks.flowing_water) && (!random || world.rand.nextInt(128) == 0)) {
          if (player != null) {
            PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y,z,Blocks.ice,0);
          }
 else {
            world.setBlock(x,y,z,Blocks.ice);
          }
        }
 else         if (b.isSideSolid(world,x,y,z,ForgeDirection.UP)) {
          Block b2=world.getBlock(x,y + 1,z);
          if (b2 == Blocks.air && (!random || world.rand.nextInt(128) == 0)) {
            if (player != null) {
              PlayerHelper.checkedReplaceBlock(((EntityPlayerMP)player),x,y + 1,z,Blocks.snow_layer,0);
            }
 else {
              world.setBlock(x,y + 1,z,Blocks.snow_layer);
            }
          }
        }
      }
    }
  }
}"
8285,"public static void growNearbyRandomly(boolean harvest,World world,double xCoord,double yCoord,double zCoord,EntityPlayer player){
  int chance=harvest ? 16 : 32;
  for (int x=(int)(xCoord - 5); x <= xCoord + 5; x++)   for (int y=(int)(yCoord - 3); y <= yCoord + 3; y++)   for (int z=(int)(zCoord - 5); z <= zCoord + 5; z++) {
    Block crop=world.getBlock(x,y,z);
    if (crop instanceof IShearable) {
      if (harvest) {
        if (player != null && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
          world.func_147480_a(x,y,z,true);
        }
 else         if (player == null) {
          world.func_147480_a(x,y,z,true);
        }
      }
    }
 else     if (crop instanceof IGrowable) {
      IGrowable growable=(IGrowable)crop;
      if (harvest && !growable.func_149851_a(world,x,y,z,false)) {
        if (player != null && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
          world.func_147480_a(x,y,z,true);
        }
 else         if (player == null) {
          world.func_147480_a(x,y,z,true);
        }
      }
 else       if (world.rand.nextInt(chance) == 0) {
        if (ProjectEConfig.harvBandGrass || !crop.getUnlocalizedName().toLowerCase().contains(""String_Node_Str"")) {
          growable.func_149853_b(world,world.rand,x,y,z);
        }
      }
    }
 else     if (crop instanceof IPlantable) {
      if (world.rand.nextInt(chance / 4) == 0) {
        for (int i=0; i < (harvest ? 8 : 4); i++) {
          crop.updateTick(world,x,y,z,world.rand);
        }
      }
      if (harvest) {
        if (crop instanceof BlockFlower) {
          if (player != null && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
            world.func_147480_a(x,y,z,true);
          }
 else           if (player == null) {
            world.func_147480_a(x,y,z,true);
          }
        }
        if (crop == Blocks.reeds || crop == Blocks.cactus) {
          boolean shouldHarvest=true;
          for (int i=1; i < 3; i++) {
            if (world.getBlock(x,y + i,z) != crop) {
              shouldHarvest=false;
              break;
            }
          }
          if (shouldHarvest) {
            for (int i=crop == Blocks.reeds ? 1 : 0; i < 3; i++) {
              if (player != null && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
                world.func_147480_a(x,y,z,true);
              }
 else               if (player == null) {
                world.func_147480_a(x,y,z,true);
              }
            }
          }
        }
        if (crop == Blocks.nether_wart) {
          int meta=((IPlantable)crop).getPlantMetadata(world,x,y,z);
          if (meta == 3) {
            if (player != null && PlayerHelper.hasBreakPermission(world,((EntityPlayerMP)player),x,y,z)) {
              world.func_147480_a(x,y,z,true);
            }
 else             if (player == null) {
              world.func_147480_a(x,y,z,true);
            }
          }
        }
      }
    }
  }
}","public static void growNearbyRandomly(boolean harvest,World world,double xCoord,double yCoord,double zCoord,EntityPlayer player){
  int chance=harvest ? 16 : 32;
  for (int x=(int)(xCoord - 5); x <= xCoord + 5; x++)   for (int y=(int)(yCoord - 3); y <= yCoord + 3; y++)   for (int z=(int)(zCoord - 5); z <= zCoord + 5; z++) {
    Block crop=world.getBlock(x,y,z);
    if (crop instanceof IShearable) {
      if (harvest) {
        if (player != null && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
          world.func_147480_a(x,y,z,true);
        }
 else         if (player == null) {
          world.func_147480_a(x,y,z,true);
        }
      }
    }
 else     if (crop instanceof IGrowable) {
      IGrowable growable=(IGrowable)crop;
      if (harvest && !growable.func_149851_a(world,x,y,z,false)) {
        if (player != null && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
          world.func_147480_a(x,y,z,true);
        }
 else         if (player == null) {
          world.func_147480_a(x,y,z,true);
        }
      }
 else       if (world.rand.nextInt(chance) == 0) {
        if (ProjectEConfig.harvBandGrass || !crop.getUnlocalizedName().toLowerCase().contains(""String_Node_Str"")) {
          growable.func_149853_b(world,world.rand,x,y,z);
        }
      }
    }
 else     if (crop instanceof IPlantable) {
      if (world.rand.nextInt(chance / 4) == 0) {
        for (int i=0; i < (harvest ? 8 : 4); i++) {
          crop.updateTick(world,x,y,z,world.rand);
        }
      }
      if (harvest) {
        if (crop instanceof BlockFlower) {
          if (player != null && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
            world.func_147480_a(x,y,z,true);
          }
 else           if (player == null) {
            world.func_147480_a(x,y,z,true);
          }
        }
        if (crop == Blocks.reeds || crop == Blocks.cactus) {
          boolean shouldHarvest=true;
          for (int i=1; i < 3; i++) {
            if (world.getBlock(x,y + i,z) != crop) {
              shouldHarvest=false;
              break;
            }
          }
          if (shouldHarvest) {
            for (int i=crop == Blocks.reeds ? 1 : 0; i < 3; i++) {
              if (player != null && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
                world.func_147480_a(x,y,z,true);
              }
 else               if (player == null) {
                world.func_147480_a(x,y,z,true);
              }
            }
          }
        }
        if (crop == Blocks.nether_wart) {
          int meta=((IPlantable)crop).getPlantMetadata(world,x,y,z);
          if (meta == 3) {
            if (player != null && PlayerHelper.hasBreakPermission(((EntityPlayerMP)player),x,y,z)) {
              world.func_147480_a(x,y,z,true);
            }
 else             if (player == null) {
              world.func_147480_a(x,y,z,true);
            }
          }
        }
      }
    }
  }
}"
8286,"@Override public FixedValues deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  FixedValues fixed=new FixedValues();
  JsonObject o=json.getAsJsonObject();
  fixed.setValueBefore=parseSetValueMapFromObject(o,""String_Node_Str"");
  fixed.setValueAfter=parseSetValueMapFromObject(o,""String_Node_Str"");
  fixed.conversion=context.deserialize(o.getAsJsonArray(""String_Node_Str""),new TypeToken<List<CustomConversion>>(){
  }
.getType());
  return fixed;
}","@Override public FixedValues deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  FixedValues fixed=new FixedValues();
  JsonObject o=json.getAsJsonObject();
  for (  Map.Entry<String,JsonElement> entry : o.entrySet()) {
    if (entry.getKey().equals(""String_Node_Str"")) {
      fixed.setValueBefore=parseSetValueMap(entry.getValue().getAsJsonObject());
    }
 else     if (entry.getKey().equals(""String_Node_Str"")) {
      fixed.setValueAfter=parseSetValueMap(entry.getValue().getAsJsonObject());
    }
 else     if (entry.getKey().equals(""String_Node_Str"")) {
      fixed.conversion=context.deserialize(entry.getValue().getAsJsonArray(),new TypeToken<List<CustomConversion>>(){
      }
.getType());
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",entry.getKey(),entry.getValue()));
    }
  }
  return fixed;
}"
8287,"@Override public void updateEntity(){
  centeredX=xCoord + 0.5;
  centeredY=yCoord + 0.5;
  centeredZ=zCoord + 0.5;
  if (effectBounds == null) {
    effectBounds=AxisAlignedBB.getBoundingBox(centeredX - 4.5,centeredY - 4.5,centeredZ - 4.5,centeredX + 4.5,centeredY + 4.5,centeredZ + 4.5);
  }
  if (getActive()) {
    if (getItemStack() != null) {
      Item item=getItemStack().getItem();
      if (item instanceof IPedestalItem) {
        ((IPedestalItem)item).updateInPedestal(worldObj,xCoord,yCoord,zCoord);
      }
      if (particleCooldown <= 0) {
        spawnParticles();
        particleCooldown=10;
      }
 else {
        particleCooldown--;
      }
    }
 else {
      setActive(false);
    }
  }
}","@Override public void updateEntity(){
  if (worldObj.isRemote) {
    if (worldObj.getChunkFromBlockCoords(xCoord,zCoord) instanceof EmptyChunk) {
      return;
    }
  }
  centeredX=xCoord + 0.5;
  centeredY=yCoord + 0.5;
  centeredZ=zCoord + 0.5;
  if (effectBounds == null) {
    effectBounds=AxisAlignedBB.getBoundingBox(centeredX - 4.5,centeredY - 4.5,centeredZ - 4.5,centeredX + 4.5,centeredY + 4.5,centeredZ + 4.5);
  }
  if (getActive()) {
    if (getItemStack() != null) {
      Item item=getItemStack().getItem();
      if (item instanceof IPedestalItem) {
        ((IPedestalItem)item).updateInPedestal(worldObj,xCoord,yCoord,zCoord);
      }
      if (particleCooldown <= 0) {
        spawnParticles();
        particleCooldown=10;
      }
 else {
        particleCooldown--;
      }
    }
 else {
      setActive(false);
    }
  }
}"
8288,"@Override public List<ItemStack> getKnowledge(UUID playerUUID){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
    Preconditions.checkState(PECore.proxy.getClientPlayer() != null,""String_Node_Str"");
    return Transmutation.getKnowledge(PECore.proxy.getClientPlayer());
  }
 else {
    Preconditions.checkState(Loader.instance().hasReachedState(LoaderState.SERVER_STARTED),""String_Node_Str"");
    EntityPlayer player=findOnlinePlayer(playerUUID);
    if (player != null) {
      return Transmutation.getKnowledge(player);
    }
 else {
      return TransmutationOffline.getKnowledge(playerUUID);
    }
  }
}","@Override public List<ItemStack> getKnowledge(@Nonnull UUID playerUUID){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
    Preconditions.checkState(PECore.proxy.getClientPlayer() != null,""String_Node_Str"");
    return Transmutation.getKnowledge(PECore.proxy.getClientPlayer());
  }
 else {
    Preconditions.checkState(Loader.instance().hasReachedState(LoaderState.SERVER_STARTED),""String_Node_Str"");
    EntityPlayer player=findOnlinePlayer(playerUUID);
    if (player != null) {
      return Transmutation.getKnowledge(player);
    }
 else {
      return TransmutationOffline.getKnowledge(playerUUID);
    }
  }
}"
8289,"@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (this.visible) {
    boolean hover=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    mc.getTextureManager().bindTexture(bookGui);
    int u=0;
    int v=192;
    if (hover) {
      u+=bWidth;
    }
    if (!pointsRight) {
      v+=bHeight;
    }
    this.drawTexturedModalRect(this.xPosition,this.yPosition,u,v,bWidth,bHeight);
  }
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (this.visible) {
    boolean hover=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    mc.getTextureManager().bindTexture(bookGui);
    int u=0;
    int v=192;
    if (hover) {
      u+=bWidth;
    }
    if (!pointsRight) {
      v+=bHeight;
    }
    GL11.glEnable(GL11.GL_BLEND);
    this.drawTexturedModalRect(this.xPosition,this.yPosition,u,v,bWidth,bHeight);
    GL11.glDisable(GL11.GL_BLEND);
  }
}"
8290,"@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  NBTTagList listOfInventoies=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  hasMigrated=properties.getBoolean(""String_Node_Str"");
  if (!hasMigrated && !player.worldObj.isRemote) {
    listOfInventoies=AlchemicalBags.migratePlayerData(player);
    PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName());
    hasMigrated=true;
  }
  for (int i=0; i < listOfInventoies.tagCount(); i++) {
    NBTTagCompound inventory=listOfInventoies.getCompoundTagAt(i);
    bagData.put(inventory.getInteger(""String_Node_Str""),copyNBTToArray(inventory.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND)));
  }
}","@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  NBTTagList listOfInventoies=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  hasMigrated=properties.getBoolean(""String_Node_Str"");
  if (!hasMigrated && !player.worldObj.isRemote) {
    if (AlchemicalBags.hasLegacyData(player)) {
      listOfInventoies=AlchemicalBags.migratePlayerData(player);
      PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName());
    }
    hasMigrated=true;
  }
  for (int i=0; i < listOfInventoies.tagCount(); i++) {
    NBTTagCompound inventory=listOfInventoies.getCompoundTagAt(i);
    bagData.put(inventory.getInteger(""String_Node_Str""),copyNBTToArray(inventory.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND)));
  }
}"
8291,"@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  hasMigrated=properties.getBoolean(""String_Node_Str"");
  if (!hasMigrated && !player.worldObj.isRemote) {
    properties=Transmutation.migratePlayerData(player);
    PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName());
    hasMigrated=true;
  }
  transmutationEmc=properties.getDouble(""String_Node_Str"");
  hasFullKnowledge=properties.getBoolean(""String_Node_Str"");
  NBTTagList list=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  knowledge.clear();
  for (int i=0; i < list.tagCount(); i++) {
    ItemStack item=ItemStack.loadItemStackFromNBT(list.getCompoundTagAt(i));
    if (item != null) {
      knowledge.add(item);
    }
  }
}","@Override public void loadNBTData(NBTTagCompound compound){
  NBTTagCompound properties=compound.getCompoundTag(PROP_NAME);
  hasMigrated=properties.getBoolean(""String_Node_Str"");
  if (!hasMigrated && !player.worldObj.isRemote) {
    if (Transmutation.hasLegacyData(player)) {
      properties=Transmutation.migratePlayerData(player);
      PELogger.logInfo(""String_Node_Str"" + player.getCommandSenderName());
    }
    hasMigrated=true;
  }
  transmutationEmc=properties.getDouble(""String_Node_Str"");
  hasFullKnowledge=properties.getBoolean(""String_Node_Str"");
  NBTTagList list=properties.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  knowledge.clear();
  for (int i=0; i < list.tagCount(); i++) {
    ItemStack item=ItemStack.loadItemStackFromNBT(list.getCompoundTagAt(i));
    if (item != null) {
      knowledge.add(item);
    }
  }
}"
8292,"public int getFuelProgressScaled(int i){
  if (inventory[0] == null || !FuelMapper.isStackFuel(inventory[0])) {
    return 0;
  }
  int reqEmc=0;
  if (inventory[lockSlot] != null) {
    reqEmc=EMCHelper.getEmcValue(inventory[lockSlot]) - EMCHelper.getEmcValue(inventory[0]);
    if (reqEmc < 0) {
      return 0;
    }
  }
 else {
    reqEmc=EMCHelper.getEmcValue(FuelMapper.getFuelUpgrade(inventory[0])) - EMCHelper.getEmcValue(inventory[0]);
  }
  if (this.getStoredEmc() >= reqEmc) {
    return i;
  }
  return displayEmc * i / reqEmc;
}","public int getFuelProgressScaled(int i){
  if (inventory[0] == null || !FuelMapper.isStackFuel(inventory[0])) {
    return 0;
  }
  int reqEmc=0;
  if (inventory[lockSlot] != null) {
    reqEmc=EMCHelper.getEmcValue(inventory[lockSlot]) - EMCHelper.getEmcValue(inventory[0]);
    if (reqEmc < 0) {
      return 0;
    }
  }
 else {
    if (FuelMapper.getFuelUpgrade(inventory[0]) == null) {
      this.setInventorySlotContents(0,null);
      return 0;
    }
 else {
      reqEmc=EMCHelper.getEmcValue(FuelMapper.getFuelUpgrade(inventory[0])) - EMCHelper.getEmcValue(inventory[0]);
    }
  }
  if (this.getStoredEmc() >= reqEmc) {
    return i;
  }
  return displayEmc * i / reqEmc;
}"
8293,"public void updateEmc(){
  this.checkSurroundingBlocks(false);
  int numRequest=this.getNumRequesting();
  if (this.getStoredEmc() == 0) {
    return;
  }
 else   if (hasKleinStar) {
    double toSend=this.getStoredEmc() < emcGen ? this.getStoredEmc() : emcGen;
    double starEmc=ItemPE.getEmc(inventory[0]);
    int maxStarEmc=EMCHelper.getKleinStarMaxEmc(inventory[0]);
    if ((starEmc + toSend) > maxStarEmc) {
      toSend=maxStarEmc - starEmc;
    }
    ItemPE.addEmc(inventory[0],toSend);
    this.removeEmc(toSend);
  }
 else   if (hasFuel) {
    ItemStack result=inventory[lockSlot] == null ? FuelMapper.getFuelUpgrade(inventory[0]) : inventory[lockSlot].copy();
    int upgradeCost=EMCHelper.getEmcValue(result) - EMCHelper.getEmcValue(inventory[0]);
    if (upgradeCost > 0 && this.getStoredEmc() >= upgradeCost) {
      ItemStack upgrade=inventory[upgradedSlot];
      if (inventory[upgradedSlot] == null) {
        this.removeEmc(upgradeCost);
        this.setInventorySlotContents(upgradedSlot,result);
        this.decrStackSize(0,1);
      }
 else       if (ItemHelper.basicAreStacksEqual(result,upgrade) && upgrade.stackSize < upgrade.getMaxStackSize()) {
        this.removeEmc(upgradeCost);
        inventory[upgradedSlot].stackSize++;
        this.decrStackSize(0,1);
      }
    }
  }
 else   if (numRequest > 0 && !this.isRequestingEmc) {
    double toSend=this.getStoredEmc() < emcGen ? this.getStoredEmc() : emcGen;
    this.sendEmcToRequesting(toSend / numRequest);
    this.sendRelayBonus();
    this.removeEmc(toSend);
  }
}","public void updateEmc(){
  this.checkSurroundingBlocks(false);
  int numRequest=this.getNumRequesting();
  if (this.getStoredEmc() == 0) {
    return;
  }
 else   if (hasKleinStar) {
    double toSend=this.getStoredEmc() < emcGen ? this.getStoredEmc() : emcGen;
    double starEmc=ItemPE.getEmc(inventory[0]);
    int maxStarEmc=EMCHelper.getKleinStarMaxEmc(inventory[0]);
    if ((starEmc + toSend) > maxStarEmc) {
      toSend=maxStarEmc - starEmc;
    }
    ItemPE.addEmc(inventory[0],toSend);
    this.removeEmc(toSend);
  }
 else   if (hasFuel) {
    if (FuelMapper.getFuelUpgrade(inventory[0]) == null) {
      this.setInventorySlotContents(0,null);
    }
    ItemStack result=inventory[lockSlot] == null ? FuelMapper.getFuelUpgrade(inventory[0]) : inventory[lockSlot].copy();
    int upgradeCost=EMCHelper.getEmcValue(result) - EMCHelper.getEmcValue(inventory[0]);
    if (upgradeCost > 0 && this.getStoredEmc() >= upgradeCost) {
      ItemStack upgrade=inventory[upgradedSlot];
      if (inventory[upgradedSlot] == null) {
        this.removeEmc(upgradeCost);
        this.setInventorySlotContents(upgradedSlot,result);
        this.decrStackSize(0,1);
      }
 else       if (ItemHelper.basicAreStacksEqual(result,upgrade) && upgrade.stackSize < upgrade.getMaxStackSize()) {
        this.removeEmc(upgradeCost);
        inventory[upgradedSlot].stackSize++;
        this.decrStackSize(0,1);
      }
    }
  }
 else   if (numRequest > 0 && !this.isRequestingEmc) {
    double toSend=this.getStoredEmc() < emcGen ? this.getStoredEmc() : emcGen;
    this.sendEmcToRequesting(toSend / numRequest);
    this.sendRelayBonus();
    this.removeEmc(toSend);
  }
}"
8294,"public int getFuelProgressScaled(int i){
  if (inventory[0] == null || !FuelMapper.isStackFuel(inventory[0])) {
    return 0;
  }
  int reqEmc=0;
  if (inventory[lockSlot] != null) {
    reqEmc=Utils.getEmcValue(inventory[lockSlot]) - Utils.getEmcValue(inventory[0]);
    if (reqEmc < 0) {
      return 0;
    }
  }
 else {
    reqEmc=Utils.getEmcValue(FuelMapper.getFuelUpgrade(inventory[0])) - Utils.getEmcValue(inventory[0]);
  }
  if (this.getStoredEmc() >= reqEmc) {
    return i;
  }
  return displayEmc * i / reqEmc;
}","public int getFuelProgressScaled(int i){
  if (inventory[0] == null || !FuelMapper.isStackFuel(inventory[0])) {
    return 0;
  }
  int reqEmc=0;
  if (inventory[lockSlot] != null) {
    reqEmc=Utils.getEmcValue(inventory[lockSlot]) - Utils.getEmcValue(inventory[0]);
    if (reqEmc < 0) {
      return 0;
    }
  }
 else {
    reqEmc=Utils.getEmcValue(FuelMapper.getFuelUpgrade(inventory[0])) - Utils.getEmcValue(inventory[0]);
  }
  if (displayEmc >= reqEmc) {
    return i;
  }
  return displayEmc * i / reqEmc;
}"
8295,"public CataliticLens(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public CataliticLens(){
  super(""String_Node_Str"",(byte)7);
  this.setNoRepair();
}"
8296,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (world.isRemote)   return stack;
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null && mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
    int charge=this.getCharge(stack);
    int numRows;
    boolean hasAction=false;
    if (charge == 0)     numRows=1;
 else     if (charge == 1)     numRows=16;
 else     if (charge == 2)     numRows=32;
 else     numRows=64;
    ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
    Coordinates coords=new Coordinates(mop);
    CoordinateBox box=getBoxFromDirection(direction,coords,numRows);
    List<ItemStack> drops=new ArrayList();
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block block=world.getBlock(x,y,z);
      float hardness=block.getBlockHardness(world,x,y,z);
      if (block == null || block == Blocks.air || hardness >= 50.0F || hardness == -1.0F) {
        continue;
      }
      if (!this.consumeFuel(player,stack,8,true)) {
        break;
      }
      if (!hasAction) {
        hasAction=true;
      }
      ArrayList<ItemStack> list=Utils.getBlockDrops(world,player,block,stack,x,y,z);
      if (list != null && list.size() > 0) {
        drops.addAll(list);
      }
      world.setBlockToAir(x,y,z);
      if (world.rand.nextInt(8) == 0) {
        PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
      }
    }
    PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
    if (hasAction) {
      world.playSoundAtEntity(player,""String_Node_Str"",0.5F,1.0F);
      world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
    }
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (world.isRemote)   return stack;
  MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (mop != null && mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
    int charge=this.getCharge(stack);
    int numRows;
    boolean hasAction=false;
    if (charge == 0)     numRows=1;
 else     if (charge == 1)     numRows=16;
 else     if (charge == 2)     numRows=24;
 else     if (charge == 3)     numRows=32;
 else     if (charge == 4)     numRows=40;
 else     if (charge == 5)     numRows=48;
 else     if (charge == 6)     numRows=56;
 else     numRows=64;
    ForgeDirection direction=ForgeDirection.getOrientation(mop.sideHit);
    Coordinates coords=new Coordinates(mop);
    CoordinateBox box=getBoxFromDirection(direction,coords,numRows);
    List<ItemStack> drops=new ArrayList();
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block block=world.getBlock(x,y,z);
      float hardness=block.getBlockHardness(world,x,y,z);
      if (block == null || block == Blocks.air || hardness >= 50.0F || hardness == -1.0F) {
        continue;
      }
      if (!this.consumeFuel(player,stack,8,true)) {
        break;
      }
      if (!hasAction) {
        hasAction=true;
      }
      ArrayList<ItemStack> list=Utils.getBlockDrops(world,player,block,stack,x,y,z);
      if (list != null && list.size() > 0) {
        drops.addAll(list);
      }
      world.setBlockToAir(x,y,z);
      if (world.rand.nextInt(8) == 0) {
        PacketHandler.sendToAllAround(new ParticlePKT(""String_Node_Str"",x,y,z),new TargetPoint(world.provider.dimensionId,x,y + 1,z,32));
      }
    }
    PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
    if (hasAction) {
      world.playSoundAtEntity(player,""String_Node_Str"",0.5F,1.0F);
      world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
    }
  }
  return stack;
}"
8297,"public DestructionCatalyst(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public DestructionCatalyst(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8298,"public HyperkineticLens(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public HyperkineticLens(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8299,"public TimeWatch(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public TimeWatch(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8300,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    CoordinateBox box=new CoordinateBox(player.boundingBox);
    int offset=4 + this.getCharge(stack);
    box.expand(offset,offset,offset);
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block b=world.getBlock(x,y,z);
      if (b == Blocks.water || b == Blocks.flowing_water) {
        world.setBlock(x,y,z,Blocks.ice);
      }
 else       if (b.isSideSolid(world,x,y,z,ForgeDirection.UP)) {
        Block b2=world.getBlock(x,y + 1,z);
        if (b2 == Blocks.air) {
          world.setBlock(x,y + 1,z,Blocks.snow_layer);
        }
      }
    }
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    CoordinateBox box=new CoordinateBox(player.boundingBox);
    int offset=3 + this.getCharge(stack);
    box.expand(offset,offset,offset);
    for (int x=(int)box.minX; x <= box.maxX; x++)     for (int y=(int)box.minY; y <= box.maxY; y++)     for (int z=(int)box.minZ; z <= box.maxZ; z++) {
      Block b=world.getBlock(x,y,z);
      if (b == Blocks.water || b == Blocks.flowing_water) {
        world.setBlock(x,y,z,Blocks.ice);
      }
 else       if (b.isSideSolid(world,x,y,z,ForgeDirection.UP)) {
        Block b2=world.getBlock(x,y + 1,z);
        if (b2 == Blocks.air) {
          world.setBlock(x,y + 1,z,Blocks.snow_layer);
        }
      }
    }
  }
  return stack;
}"
8301,"public DarkAxe(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkAxe(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8302,"public DarkHammer(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkHammer(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8303,"public DarkHoe(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkHoe(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8304,"public DarkPickaxe(){
  super(""String_Node_Str"",(byte)3,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.setNoRepair();
}","public DarkPickaxe(){
  super(""String_Node_Str"",(byte)2,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.setNoRepair();
}"
8305,"public DarkShears(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkShears(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8306,"public DarkShovel(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkShovel(){
  super(""String_Node_Str"",(byte)1);
  this.setNoRepair();
}"
8307,"public DarkSword(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}","public DarkSword(){
  super(""String_Node_Str"",(byte)2);
  this.setNoRepair();
}"
8308,"@Override public boolean hitEntity(ItemStack stack,EntityLivingBase damaged,EntityLivingBase damager){
  if (!(damager instanceof EntityPlayer)) {
    return false;
  }
  DamageSource dmg=DamageSource.causePlayerDamage((EntityPlayer)damager);
  byte charge=this.getCharge(stack);
  float totalDmg=10.0f;
  if (charge > 0) {
    dmg.setDamageBypassesArmor();
    totalDmg+=charge;
  }
  damaged.attackEntityFrom(dmg,totalDmg);
  return true;
}","@Override public boolean hitEntity(ItemStack stack,EntityLivingBase damaged,EntityLivingBase damager){
  if (!(damager instanceof EntityPlayer)) {
    return false;
  }
  DamageSource dmg=DamageSource.causePlayerDamage((EntityPlayer)damager);
  byte charge=this.getCharge(stack);
  float totalDmg=12.0f;
  if (charge > 0) {
    dmg.setDamageBypassesArmor();
    totalDmg+=charge;
  }
  damaged.attackEntityFrom(dmg,totalDmg);
  return true;
}"
8309,"public RedAxe(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedAxe(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8310,"public RedHammer(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedHammer(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8311,"public RedHoe(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedHoe(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8312,"private void shear(World world,ItemStack stack,EntityPlayer player,byte charge){
  int offset=0;
switch (charge) {
case 0:
    offset=4;
  break;
case 1:
offset=8;
break;
case 2:
offset=16;
break;
case 3:
offset=32;
break;
}
AxisAlignedBB bBox=player.boundingBox.expand(offset,offset / 2,offset);
List<Entity> list=world.getEntitiesWithinAABB(IShearable.class,bBox);
if (list.isEmpty()) {
return;
}
List<ItemStack> drops=new ArrayList<ItemStack>();
for (Entity ent : list) {
IShearable target=(IShearable)ent;
if (target.isShearable(stack,ent.worldObj,(int)ent.posX,(int)ent.posY,(int)ent.posZ)) {
ArrayList<ItemStack> entDrops=target.onSheared(stack,ent.worldObj,(int)ent.posX,(int)ent.posY,(int)ent.posZ,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
if (entDrops.isEmpty()) {
continue;
}
for (ItemStack drop : entDrops) {
drop.stackSize+=Utils.randomIntInRange(6,3);
}
drops.addAll(entDrops);
}
}
if (!drops.isEmpty()) {
world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
}
}","private void shear(World world,ItemStack stack,EntityPlayer player,byte charge){
  int offset=0;
switch (charge) {
case 0:
    offset=4;
  break;
case 1:
offset=8;
break;
case 2:
offset=16;
break;
case 3:
offset=32;
break;
case 4:
offset=40;
break;
}
AxisAlignedBB bBox=player.boundingBox.expand(offset,offset / 2,offset);
List<Entity> list=world.getEntitiesWithinAABB(IShearable.class,bBox);
if (list.isEmpty()) {
return;
}
List<ItemStack> drops=new ArrayList<ItemStack>();
for (Entity ent : list) {
IShearable target=(IShearable)ent;
if (target.isShearable(stack,ent.worldObj,(int)ent.posX,(int)ent.posY,(int)ent.posZ)) {
ArrayList<ItemStack> entDrops=target.onSheared(stack,ent.worldObj,(int)ent.posX,(int)ent.posY,(int)ent.posZ,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
if (entDrops.isEmpty()) {
continue;
}
for (ItemStack drop : entDrops) {
drop.stackSize+=Utils.randomIntInRange(6,3);
}
drops.addAll(entDrops);
}
}
if (!drops.isEmpty()) {
world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
}
}"
8313,"private void attackNearby(World world,ItemStack stack,EntityPlayer player,byte charge){
  int offset=0;
switch (charge) {
case 0:
    offset=4;
  break;
case 1:
offset=5;
break;
case 2:
offset=6;
break;
case 3:
offset=7;
break;
}
AxisAlignedBB bBox=player.boundingBox.expand(offset,offset / 2,offset);
List<EntityLiving> list=world.getEntitiesWithinAABB(EntityLiving.class,bBox);
if (list.isEmpty()) {
return;
}
List<ItemStack> drops=new ArrayList<ItemStack>();
for (EntityLiving ent : list) {
if (ent.getHealth() <= 0) {
continue;
}
DamageSource dmg=DamageSource.causePlayerDamage(player);
float totalDmg=15.0f;
if (charge > 0) {
dmg.setDamageBypassesArmor();
totalDmg+=charge;
}
ent.attackEntityFrom(dmg,totalDmg);
List<EntityItem> entDrops=ent.capturedDrops;
if (entDrops.isEmpty()) {
continue;
}
for (EntityItem item : entDrops) {
drops.add(item.getEntityItem());
item.setDead();
}
}
PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
if (!drops.isEmpty()) {
world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
}
}","private void attackNearby(World world,ItemStack stack,EntityPlayer player,byte charge){
  int offset=0;
switch (charge) {
case 0:
    offset=4;
  break;
case 1:
offset=5;
break;
case 2:
offset=6;
break;
case 3:
offset=7;
break;
case 4:
offset=8;
break;
}
AxisAlignedBB bBox=player.boundingBox.expand(offset,offset / 2,offset);
List<EntityLiving> list=world.getEntitiesWithinAABB(EntityLiving.class,bBox);
if (list.isEmpty()) {
return;
}
List<ItemStack> drops=new ArrayList<ItemStack>();
for (EntityLiving ent : list) {
if (ent.getHealth() <= 0) {
continue;
}
DamageSource dmg=DamageSource.causePlayerDamage(player);
float totalDmg=15.0f;
if (charge > 0) {
dmg.setDamageBypassesArmor();
totalDmg+=charge;
}
ent.attackEntityFrom(dmg,totalDmg);
List<EntityItem> entDrops=ent.capturedDrops;
if (entDrops.isEmpty()) {
continue;
}
for (EntityItem item : entDrops) {
drops.add(item.getEntityItem());
item.setDead();
}
}
PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
if (!drops.isEmpty()) {
world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
}
}"
8314,"public RedPick(){
  super(""String_Node_Str"",(byte)4,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.setNoRepair();
}","public RedPick(){
  super(""String_Node_Str"",(byte)3,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.setNoRepair();
}"
8315,"public RedShears(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedShears(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8316,"public RedShovel(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedShovel(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8317,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
    if (mop == null || !mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
      int offset=this.getCharge(stack) + 3;
      CoordinateBox box=new CoordinateBox(player.posX - offset,player.posY - offset,player.posZ - offset,player.posX + offset,player.posY + offset,player.posZ + offset);
      List<ItemStack> drops=new ArrayList<ItemStack>();
      for (int x=(int)box.minX; x <= box.maxX; x++)       for (int y=(int)box.minY; y <= box.maxY; y++)       for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block block=world.getBlock(x,y,z);
        if (Utils.isOre(block) && block.getBlockHardness(world,x,y,z) != -1 && canHarvestBlock(block,stack)) {
          Utils.harvestVein(world,player,stack,new Coordinates(x,y,z),block,drops,0);
        }
      }
      if (!drops.isEmpty()) {
        world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
        PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
      }
      return stack;
    }
    Block block=world.getBlock(mop.blockX,mop.blockY,mop.blockZ);
    List<ItemStack> drops=new ArrayList<ItemStack>();
    if (Utils.isOre(block) || block.equals(Blocks.gravel)) {
      Utils.harvestVein(world,player,stack,new Coordinates(mop),block,drops,0);
    }
 else     if (block.getHarvestTool(0) == null || block.getHarvestTool(0).equals(""String_Node_Str"")) {
      CoordinateBox box=getRelativeBox(new Coordinates(mop),ForgeDirection.getOrientation(mop.sideHit),this.getCharge(stack) + 1);
      byte charge=this.getCharge(stack);
      for (int x=(int)box.minX; x <= box.maxX; x++)       for (int y=(int)box.minY; y <= box.maxY; y++)       for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block b=world.getBlock(x,y,z);
        if (b != Blocks.air && b.getBlockHardness(world,x,y,z) != -1 && canHarvestBlock(b,stack)) {
          drops.addAll(Utils.getBlockDrops(world,player,b,stack,x,y,z));
          world.setBlockToAir(x,y,z);
        }
      }
    }
    if (!drops.isEmpty()) {
      world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
      PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
    }
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote && this.getCharge(stack) != 0) {
    MovingObjectPosition mop=this.getMovingObjectPositionFromPlayer(world,player,false);
    if (mop == null || !mop.typeOfHit.equals(MovingObjectType.BLOCK)) {
      int offset=(this.getCharge(stack) - 1) + 3;
      CoordinateBox box=new CoordinateBox(player.posX - offset,player.posY - offset,player.posZ - offset,player.posX + offset,player.posY + offset,player.posZ + offset);
      List<ItemStack> drops=new ArrayList<ItemStack>();
      for (int x=(int)box.minX; x <= box.maxX; x++)       for (int y=(int)box.minY; y <= box.maxY; y++)       for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block block=world.getBlock(x,y,z);
        if (Utils.isOre(block) && block.getBlockHardness(world,x,y,z) != -1 && canHarvestBlock(block,stack)) {
          Utils.harvestVein(world,player,stack,new Coordinates(x,y,z),block,drops,0);
        }
      }
      if (!drops.isEmpty()) {
        world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
        PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
      }
      return stack;
    }
    Block block=world.getBlock(mop.blockX,mop.blockY,mop.blockZ);
    List<ItemStack> drops=new ArrayList<ItemStack>();
    if (Utils.isOre(block) || block.equals(Blocks.gravel)) {
      Utils.harvestVein(world,player,stack,new Coordinates(mop),block,drops,0);
    }
 else     if (block.getHarvestTool(0) == null || block.getHarvestTool(0).equals(""String_Node_Str"")) {
      CoordinateBox box=getRelativeBox(new Coordinates(mop),ForgeDirection.getOrientation(mop.sideHit),(this.getCharge(stack) - 1) + 1);
      byte charge=this.getCharge(stack);
      for (int x=(int)box.minX; x <= box.maxX; x++)       for (int y=(int)box.minY; y <= box.maxY; y++)       for (int z=(int)box.minZ; z <= box.maxZ; z++) {
        Block b=world.getBlock(x,y,z);
        if (b != Blocks.air && b.getBlockHardness(world,x,y,z) != -1 && canHarvestBlock(b,stack)) {
          drops.addAll(Utils.getBlockDrops(world,player,b,stack,x,y,z));
          world.setBlockToAir(x,y,z);
        }
      }
    }
    if (!drops.isEmpty()) {
      world.spawnEntityInWorld(new EntityLootBall(world,drops,player.posX,player.posY,player.posZ));
      PacketHandler.sendTo(new SwingItemPKT(),(EntityPlayerMP)player);
    }
  }
  return stack;
}"
8318,"@Override public boolean hitEntity(ItemStack stack,EntityLivingBase damaged,EntityLivingBase damager){
  if (!(damager instanceof EntityPlayer)) {
    return false;
  }
  DamageSource dmg=DamageSource.causePlayerDamage((EntityPlayer)damager);
  byte charge=this.getCharge(stack);
  float totalDmg=15.0f;
  if (charge > 0) {
    dmg.setDamageBypassesArmor();
    totalDmg+=charge;
  }
  damaged.attackEntityFrom(dmg,totalDmg);
  return true;
}","@Override public boolean hitEntity(ItemStack stack,EntityLivingBase damaged,EntityLivingBase damager){
  if (!(damager instanceof EntityPlayer)) {
    return false;
  }
  DamageSource dmg=DamageSource.causePlayerDamage((EntityPlayer)damager);
  byte charge=this.getCharge(stack);
  float totalDmg=14.0f;
  if (charge > 0) {
    dmg.setDamageBypassesArmor();
    totalDmg+=charge;
  }
  damaged.attackEntityFrom(dmg,totalDmg);
  return true;
}"
8319,"public RedSword(){
  super(""String_Node_Str"",(byte)4);
  this.setNoRepair();
}","public RedSword(){
  super(""String_Node_Str"",(byte)3);
  this.setNoRepair();
}"
8320,"public static void map(){
  loadEmcFromIMC();
  lazyInit();
  loadEmcFromOD();
  mapFromSmelting();
  mapFromRecipes(2);
  lateEmcMapping();
  FluidMapper.map();
  mapFromRecipes(1);
  assertMinEmcValues();
  Transmutation.loadCompleteKnowledge();
  FuelMapper.loadMap();
}","public static void map(){
  List<IEMCMapper<NormalizedSimpleStack>> emcMappers=Arrays.asList(new LazyMapper(),new OreDictionaryMapper(),new CraftingMapper(),new SmeltingMapper());
  GraphMapper<NormalizedSimpleStack> graphMapper=new GraphMapper<NormalizedSimpleStack>();
  for (  IEMCMapper<NormalizedSimpleStack> emcMapper : emcMappers) {
    emcMapper.addMappings(graphMapper);
  }
  Map<NormalizedSimpleStack,Double> graphMapperValues=graphMapper.generateValues();
  loadEmcFromIMC();
  lazyInit();
  loadEmcFromOD();
  mapFromSmelting();
  mapFromRecipes(2);
  lateEmcMapping();
  FluidMapper.map();
  mapFromRecipes(1);
  assertMinEmcValues();
  Transmutation.loadCompleteKnowledge();
  FuelMapper.loadMap();
  Set<NormalizedSimpleStack> allItems=new HashSet<NormalizedSimpleStack>();
  allItems.addAll(graphMapperValues.keySet());
  Map<NormalizedSimpleStack,Integer> left=new HashMap<NormalizedSimpleStack,Integer>();
  Map<NormalizedSimpleStack,Integer> right=new HashMap<NormalizedSimpleStack,Integer>();
  for (  SimpleStack stack : emc.keySet()) {
    allItems.add(new NormalizedSimpleStack(stack.toItemStack()));
    left.put(new NormalizedSimpleStack(stack.toItemStack()),emc.get(stack));
  }
  for (  Entry<NormalizedSimpleStack,Double> entry : graphMapperValues.entrySet())   right.put(entry.getKey(),(int)(double)entry.getValue());
  for (  NormalizedSimpleStack stack : allItems) {
    int leftValue=left.containsKey(stack) ? left.get(stack) : 0;
    char leftChar=left.containsKey(stack) ? '!' : ' ';
    int rightValue=right.containsKey(stack) ? right.get(stack) : 0;
    ;
    char rightChar=right.containsKey(stack) ? '!' : ' ';
    if (leftValue != rightValue) {
      System.out.format(""String_Node_Str"",stack.toString(),leftChar,leftValue,rightValue,rightChar);
    }
  }
}"
8321,"@Override public int hashCode(){
  return id + 255 * damage;
}","@Override public int hashCode(){
  return id;
}"
8322,"@Override public Iterable<IngredientMap<NormalizedSimpleStack>> getIngredientsFor(IRecipe recipe){
  List<IngredientMap<NormalizedSimpleStack>> inputs=new LinkedList<IngredientMap<NormalizedSimpleStack>>();
  Iterable<Object> recipeItems=null;
  if (recipe instanceof ShapedOreRecipe) {
    recipeItems=Arrays.asList(((ShapedOreRecipe)recipe).getInput());
  }
 else   if (recipe instanceof ShapelessRecipes) {
    recipeItems=((ShapelessOreRecipe)recipe).getInput();
  }
  ArrayList<Iterable<NormalizedSimpleStack>> variableInputs=new ArrayList<Iterable<NormalizedSimpleStack>>();
  ArrayList<NormalizedSimpleStack> fixedInputs=new ArrayList<NormalizedSimpleStack>();
  for (  Object recipeItem : recipeItems) {
    if (recipeItem instanceof ItemStack) {
      fixedInputs.add(new NormalizedSimpleStack((ItemStack)recipeItem));
    }
 else     if (recipeItem instanceof Iterable) {
      List<NormalizedSimpleStack> recipeItemOptions=new LinkedList<NormalizedSimpleStack>();
      for (      Object option : (Iterable)recipeItem) {
        if (option instanceof ItemStack) {
          recipeItemOptions.add(new NormalizedSimpleStack((ItemStack)option));
        }
 else {
          PELogger.logWarn(""String_Node_Str"" + recipe + ""String_Node_Str""+ option.toString()+ ""String_Node_Str"");
          return null;
        }
      }
      variableInputs.add(recipeItemOptions);
    }
    for (    Iterable<NormalizedSimpleStack> recipeIngredients : recursiveRecipeInput(fixedInputs,variableInputs)) {
      IngredientMap<NormalizedSimpleStack> ingredientMap=new IngredientMap<NormalizedSimpleStack>();
      for (      NormalizedSimpleStack i : recipeIngredients) {
        ingredientMap.addIngredient(i,1);
      }
      inputs.add(ingredientMap);
    }
  }
  return inputs;
}","@Override public Iterable<IngredientMap<NormalizedSimpleStack>> getIngredientsFor(IRecipe recipe){
  List<IngredientMap<NormalizedSimpleStack>> inputs=new LinkedList<IngredientMap<NormalizedSimpleStack>>();
  Iterable<Object> recipeItems=null;
  if (recipe instanceof ShapedOreRecipe) {
    recipeItems=Arrays.asList(((ShapedOreRecipe)recipe).getInput());
  }
 else   if (recipe instanceof ShapelessRecipes) {
    recipeItems=((ShapelessOreRecipe)recipe).getInput();
  }
  if (recipeItems == null)   return null;
  ArrayList<Iterable<NormalizedSimpleStack>> variableInputs=new ArrayList<Iterable<NormalizedSimpleStack>>();
  ArrayList<NormalizedSimpleStack> fixedInputs=new ArrayList<NormalizedSimpleStack>();
  for (  Object recipeItem : recipeItems) {
    if (recipeItem instanceof ItemStack) {
      fixedInputs.add(new NormalizedSimpleStack((ItemStack)recipeItem));
    }
 else     if (recipeItem instanceof Iterable) {
      List<NormalizedSimpleStack> recipeItemOptions=new LinkedList<NormalizedSimpleStack>();
      for (      Object option : (Iterable)recipeItem) {
        if (option instanceof ItemStack) {
          recipeItemOptions.add(new NormalizedSimpleStack((ItemStack)option));
        }
 else {
          PELogger.logWarn(""String_Node_Str"" + recipe + ""String_Node_Str""+ option.toString()+ ""String_Node_Str"");
          return null;
        }
      }
      variableInputs.add(recipeItemOptions);
    }
  }
  for (  Iterable<NormalizedSimpleStack> recipeIngredients : recursiveRecipeInput(fixedInputs,variableInputs)) {
    IngredientMap<NormalizedSimpleStack> ingredientMap=new IngredientMap<NormalizedSimpleStack>();
    for (    NormalizedSimpleStack i : recipeIngredients) {
      ingredientMap.addIngredient(i,1);
    }
    inputs.add(ingredientMap);
  }
  return inputs;
}"
8323,"private void removeXP(EntityPlayer player,int amount){
  player.experienceTotal-=amount;
  player.experienceLevel=getLvlForXP(player.experienceTotal);
  player.experience=(player.experienceTotal - getXPForLvl(player.experienceLevel)) / (float)player.xpBarCap();
  if (player.experienceTotal < 0) {
    player.experienceTotal=0;
    player.experienceLevel=0;
    player.experience=0;
  }
}","private void removeXP(EntityPlayer player,int amount){
  int experiencetotal=getXP(player) - amount;
  if (experiencetotal < 0) {
    player.experienceTotal=0;
    player.experienceLevel=0;
    player.experience=0;
  }
 else {
    player.experienceTotal=experiencetotal;
    player.experienceLevel=getLvlForXP(experiencetotal);
    player.experience=(float)(experiencetotal - getXPForLvl(player.experienceLevel)) / (float)player.xpBarCap();
  }
}"
8324,"@Override public void onUpdate(ItemStack stack,World world,Entity entity,int par4,boolean par5){
  if (world.isRemote || par4 > 8 || !(entity instanceof EntityPlayer)) {
    return;
  }
  super.onUpdate(stack,world,entity,par4,par5);
  EntityPlayer player=(EntityPlayer)entity;
  if (stack.getItemDamage() != 0) {
    if (!canStore(stack)) {
      this.changeMode(player,stack);
      return;
    }
    if (player.experienceTotal > 0) {
      int toAdd=player.experienceTotal >= TRANSFER_RATE ? TRANSFER_RATE : player.experienceTotal;
      addStoredXP(stack,toAdd);
      removeXP(player,TRANSFER_RATE);
    }
  }
}","@Override public void onUpdate(ItemStack stack,World world,Entity entity,int par4,boolean par5){
  if (world.isRemote || par4 > 8 || !(entity instanceof EntityPlayer)) {
    return;
  }
  super.onUpdate(stack,world,entity,par4,par5);
  EntityPlayer player=(EntityPlayer)entity;
  if (stack.getItemDamage() != 0) {
    if (!canStore(stack)) {
      this.changeMode(player,stack);
      return;
    }
    if (getXP(player) > 0) {
      int toAdd=getXP(player) >= TRANSFER_RATE ? TRANSFER_RATE : getXP(player);
      addStoredXP(stack,toAdd);
      removeXP(player,TRANSFER_RATE);
    }
  }
}"
8325,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int par4,int par5,int par6,int par7,float par8,float par9,float par10){
  if (!world.isRemote && stack.getItemDamage() == 0 && getStoredXP(stack) != 0) {
    int toAdd=removeStoredXP(stack,TRANSFER_RATE);
    if (toAdd > 0) {
      player.addExperience(toAdd);
      return true;
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int par4,int par5,int par6,int par7,float par8,float par9,float par10){
  if (!world.isRemote && stack.getItemDamage() == 0 && getStoredXP(stack) != 0) {
    int toAdd=removeStoredXP(stack,TRANSFER_RATE);
    if (toAdd > 0) {
      addXP(player,toAdd);
      return true;
    }
  }
  return false;
}"
8326,"@org.junit.Test public void testGenerateValuesSimpleMultiRecipe() throws Exception {
  GraphMapper<String> graphMapper=new GraphMapper<String>();
  graphMapper.setValue(""String_Node_Str"",1,GraphMapper.FixedValue.FixAndInherit);
  graphMapper.addConversion(1,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  graphMapper.addConversion(2,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  graphMapper.addConversion(1,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  Map<String,Double> values=graphMapper.generateValues();
  assertEquals(1,getValue(values,""String_Node_Str""));
  assertEquals(2,getValue(values,""String_Node_Str""));
  assertEquals(4,getValue(values,""String_Node_Str""));
}","@org.junit.Test public void testGenerateValuesSimpleMultiRecipe() throws Exception {
  GraphMapper<String> graphMapper=new GraphMapper<String>();
  graphMapper.setValue(""String_Node_Str"",1,GraphMapper.FixedValue.FixAndInherit);
  graphMapper.addConversion(1,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  graphMapper.addConversion(2,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  graphMapper.addConversion(1,""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  Map<String,Double> values=graphMapper.generateValues();
  assertEquals(1,getValue(values,""String_Node_Str""));
  assertEquals(2,getValue(values,""String_Node_Str""));
  assertEquals(2,getValue(values,""String_Node_Str""));
}"
8327,"@Override public boolean showNodes(ItemStack stack,EntityLivingBase player){
  return true;
}","@Override public boolean showNodes(ItemStack itemstack,EntityLivingBase player){
  if (itemstack != null && itemstack.getItem() == ObjHandler.gemHelmet)   return true;
  return false;
}"
8328,"@Override public boolean showIngamePopups(ItemStack stack,EntityLivingBase player){
  return true;
}","@Override public boolean showIngamePopups(ItemStack itemstack,EntityLivingBase player){
  if (itemstack != null && itemstack.getItem() == ObjHandler.gemHelmet)   return true;
  return false;
}"
8329,"private void doRequest(long n){
  if (!done.get()) {
    request(n);
  }
}","private void doRequest(long n){
  if (!done.get()) {
    BackpressureUtils.getAndAddRequest(childRequested,n);
    request(n);
  }
}"
8330,"@Override public void request(long n){
  if (n < 1) {
    unsubscribe();
    onError(new IllegalArgumentException(""String_Node_Str""));
  }
  requested.set(true);
  doRequest(n);
}","@Override public void request(long n){
  if (n < 1) {
    unsubscribe();
    onError(new IllegalArgumentException(""String_Node_Str""));
    return;
  }
  requested.set(true);
  doRequest(n);
}"
8331,"@Override public void onStart(){
  final AtomicBoolean requested=new AtomicBoolean();
  s.onSubscribe(new Subscription(){
    @Override public void request(    long n){
      if (n < 1) {
        unsubscribe();
        onError(new IllegalArgumentException(""String_Node_Str""));
      }
      requested.set(true);
      doRequest(n);
    }
    @Override public void cancel(){
      unsubscribe();
      fireDone();
    }
  }
);
  if (!requested.get()) {
    request(0);
  }
}","@Override public void onStart(){
  final AtomicBoolean requested=new AtomicBoolean();
  s.onSubscribe(new Subscription(){
    @Override public void request(    long n){
      if (n < 1) {
        unsubscribe();
        onError(new IllegalArgumentException(""String_Node_Str""));
        return;
      }
      requested.set(true);
      doRequest(n);
    }
    @Override public void cancel(){
      unsubscribe();
      fireDone();
    }
  }
);
  if (!requested.get()) {
    request(0);
  }
}"
8332,"@Override public void subscribe(final Subscriber<? super T> s){
  if (subscribers.add(s)) {
    observable.subscribe(new rx.Subscriber<T>(){
      private final AtomicBoolean done=new AtomicBoolean();
      private void doRequest(      long n){
        if (!done.get()) {
          request(n);
        }
      }
      @Override public void onStart(){
        final AtomicBoolean requested=new AtomicBoolean();
        s.onSubscribe(new Subscription(){
          @Override public void request(          long n){
            if (n < 1) {
              unsubscribe();
              onError(new IllegalArgumentException(""String_Node_Str""));
            }
            requested.set(true);
            doRequest(n);
          }
          @Override public void cancel(){
            unsubscribe();
            fireDone();
          }
        }
);
        if (!requested.get()) {
          request(0);
        }
      }
      private boolean fireDone(){
        boolean first=done.compareAndSet(false,true);
        if (first) {
          subscribers.remove(s);
        }
        return first;
      }
      @Override public void onCompleted(){
        if (fireDone()) {
          s.onComplete();
        }
      }
      @Override public void onError(      Throwable e){
        if (fireDone()) {
          s.onError(e);
        }
      }
      @Override public void onNext(      T t){
        if (!done.get()) {
          s.onNext(t);
        }
      }
    }
);
  }
 else {
    s.onError(new IllegalArgumentException(""String_Node_Str""));
  }
}","@Override public void subscribe(final Subscriber<? super T> s){
  if (subscribers.putIfAbsent(s,s) == null) {
    observable.subscribe(new rx.Subscriber<T>(){
      private final AtomicBoolean done=new AtomicBoolean();
      private final AtomicLong childRequested=new AtomicLong();
      private void doRequest(      long n){
        if (!done.get()) {
          BackpressureUtils.getAndAddRequest(childRequested,n);
          request(n);
        }
      }
      @Override public void onStart(){
        final AtomicBoolean requested=new AtomicBoolean();
        s.onSubscribe(new Subscription(){
          @Override public void request(          long n){
            if (n < 1) {
              unsubscribe();
              onError(new IllegalArgumentException(""String_Node_Str""));
              return;
            }
            requested.set(true);
            doRequest(n);
          }
          @Override public void cancel(){
            unsubscribe();
            fireDone();
          }
        }
);
        if (!requested.get()) {
          request(0);
        }
      }
      private boolean fireDone(){
        boolean first=done.compareAndSet(false,true);
        if (first) {
          subscribers.remove(s);
        }
        return first;
      }
      @Override public void onCompleted(){
        if (fireDone()) {
          s.onComplete();
        }
      }
      @Override public void onError(      Throwable e){
        if (fireDone()) {
          s.onError(e);
        }
      }
      @Override public void onNext(      T t){
        if (!done.get()) {
          if (childRequested.get() > 0) {
            s.onNext(t);
            childRequested.decrementAndGet();
          }
 else {
            try {
              onError(new IllegalStateException(""String_Node_Str""));
            }
  finally {
              unsubscribe();
            }
          }
        }
      }
    }
);
  }
 else {
    s.onError(new IllegalArgumentException(""String_Node_Str""));
  }
}"
8333,"@Override public void onNext(T t){
  if (!done.get()) {
    s.onNext(t);
  }
}","@Override public void onNext(T t){
  if (!done.get()) {
    if (childRequested.get() > 0) {
      s.onNext(t);
      childRequested.decrementAndGet();
    }
 else {
      try {
        onError(new IllegalStateException(""String_Node_Str""));
      }
  finally {
        unsubscribe();
      }
    }
  }
}"
8334,"private void debugLifeCycleMethods(CtClass classToTransform,CtMethod[] methods) throws CannotCompileException, AfterBurnerImpossibleException, NotFoundException {
  for (  CtMethod lifeCycleHook : methods) {
    String methodName=lifeCycleHook.getName();
    if (methodName.startsWith(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + methodName);
      try {
        afterBurner.afterOverrideMethod(classToTransform,methodName,""String_Node_Str"" + methodName + ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"",e);
      }
    }
  }
}","private void debugLifeCycleMethods(CtClass classToTransform,CtMethod[] methods) throws CannotCompileException, AfterBurnerImpossibleException, NotFoundException {
  for (  CtMethod lifeCycleHook : methods) {
    String methodName=lifeCycleHook.getName();
    if (methodName.startsWith(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + methodName);
      try {
        String body=String.format(""String_Node_Str"",classToTransform.getSimpleName(),methodName);
        afterBurner.afterOverrideMethod(classToTransform,methodName,body);
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"",e);
      }
    }
  }
}"
8335,"public BluetoothListPreference(final Context context,final AttributeSet attrs){
  super(context,attrs);
  if (D)   Log.d(TAG,""String_Node_Str"");
  CharSequence[] entries=new CharSequence[1];
  CharSequence[] values=new CharSequence[1];
  final BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  Set<BluetoothDevice> devices=adapter.getBondedDevices();
  if (devices.size() > 0) {
    entries=new CharSequence[devices.size()];
    values=new CharSequence[devices.size()];
    int i=0;
    for (    BluetoothDevice device : devices) {
      entries[i]=device.getName();
      values[i]=device.getAddress();
      i++;
    }
  }
 else {
    entries[0]=context.getResources().getString(R.string.msg_btlist_empty);
    values[0]=""String_Node_Str"";
  }
  setEntries(entries);
  setEntryValues(values);
}","public BluetoothListPreference(final Context context,final AttributeSet attrs){
  super(context,attrs);
  if (D)   Log.d(TAG,""String_Node_Str"");
  CharSequence[] entries=new CharSequence[1];
  CharSequence[] values=new CharSequence[1];
  Set<BluetoothDevice> devices=null;
  final BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter != null) {
    devices=adapter.getBondedDevices();
    if (devices.size() > 0) {
      entries=new CharSequence[devices.size()];
      values=new CharSequence[devices.size()];
      int i=0;
      for (      BluetoothDevice device : devices) {
        entries[i]=device.getName();
        values[i]=device.getAddress();
        i++;
      }
    }
  }
  if (devices == null || devices.size() <= 0) {
    entries[0]=context.getResources().getString(R.string.msg_error_no_bluetooth);
    values[0]=""String_Node_Str"";
  }
  setEntries(entries);
  setEntryValues(values);
}"
8336,"/** 
 * This method connects a network.
 * @param callbackContext        A Cordova callback context
 * @param data                JSON Array, with [0] being SSID to connect
 * @return    true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  Log.d(TAG,""String_Node_Str"");
  if (!validateData(data)) {
    callbackContext.error(""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  String ssidToConnect=""String_Node_Str"";
  try {
    ssidToConnect=data.getString(0);
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
    Log.d(TAG,e.getMessage());
    return false;
  }
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect > 0) {
    wifiManager.disableNetwork(networkIdToConnect);
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
}","/** 
 * This method connects a network.
 * @param callbackContext        A Cordova callback context
 * @param data                JSON Array, with [0] being SSID to connect
 * @return    true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  Log.d(TAG,""String_Node_Str"");
  if (!validateData(data)) {
    callbackContext.error(""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  String ssidToConnect=""String_Node_Str"";
  try {
    ssidToConnect=data.getString(0);
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
    Log.d(TAG,e.getMessage());
    return false;
  }
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect >= 0) {
    wifiManager.disableNetwork(networkIdToConnect);
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
}"
8337,"/** 
 * This method connects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToConnect;
  try {
    ssidToConnect=data.getString(0);
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
  }
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect > 0) {
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return false;
  }
}","/** 
 * This method connects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToConnect=""String_Node_Str"";
  try {
    ssidToConnect=data.getString(0);
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
  }
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect > 0) {
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return false;
  }
}"
8338,"/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToDisconnect=data.getString(0);
  int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
  if (networkIdToRemove > 0) {
    wifiManager.removeNetwork(networkIdToRemove);
    wifiManager.saveConfiguration();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
}","/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  try {
    String ssidToDisconnect=data.getString(0);
    int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
    if (networkIdToRemove > 0) {
      wifiManager.removeNetwork(networkIdToRemove);
      wifiManager.saveConfiguration();
      callbackContext.success(""String_Node_Str"");
      return true;
    }
 else {
      callbackContext.error(""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
  }
}"
8339,"private boolean validateData(JSONArray data){
  try {
    if (data == null || data.get(0) == null) {
      callbackContext.error(""String_Node_Str"");
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
  }
}","private boolean validateData(JSONArray data){
  try {
    if (data == null || data.get(0) == null) {
      callbackContext.error(""String_Node_Str"");
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
  }
  return false;
}"
8340,"/** 
 * This method takes a given String, searches the current list of configured WiFi networks, and returns the networkId for the netowrk if the SSID matches. If not, it returns -1.
 */
private int ssidToNetworkId(String ssid){
  List<WifiConfiguration> currentNetworks=wifiManager.getConfiguredNetworks();
  int numberOfNetworks=currentNetworks.size();
  int networkId;
  WifiConfiguration test;
  for (int i=0; i < numberOfNetworks; i++) {
    test=currentNetworks.get(i);
    if (test.SSID.equals(ssid)) {
      networkId=test.networkId;
    }
  }
  return networkId;
}","/** 
 * This method takes a given String, searches the current list of configured WiFi networks, and returns the networkId for the netowrk if the SSID matches. If not, it returns -1.
 */
private int ssidToNetworkId(String ssid){
  List<WifiConfiguration> currentNetworks=wifiManager.getConfiguredNetworks();
  int numberOfNetworks=currentNetworks.size();
  int networkId=-1;
  WifiConfiguration test;
  for (int i=0; i < numberOfNetworks; i++) {
    test=currentNetworks.get(i);
    if (test.SSID.equals(ssid)) {
      networkId=test.networkId;
    }
  }
  return networkId;
}"
8341,"/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  Log.d(TAG,""String_Node_Str"");
  if (!validateData(data)) {
    callbackContext.error(""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  try {
    String ssidToDisconnect=data.getString(0);
    int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
    if (networkIdToRemove > 0) {
      wifiManager.removeNetwork(networkIdToRemove);
      wifiManager.saveConfiguration();
      callbackContext.success(""String_Node_Str"");
      return true;
    }
 else {
      callbackContext.error(""String_Node_Str"");
      Log.d(TAG,""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
    Log.d(TAG,e.getMessage());
    return false;
  }
}","/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  Log.d(TAG,""String_Node_Str"");
  if (!validateData(data)) {
    callbackContext.error(""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  try {
    String ssidToDisconnect=data.getString(0);
    int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
    if (networkIdToRemove >= 0) {
      wifiManager.removeNetwork(networkIdToRemove);
      wifiManager.saveConfiguration();
      callbackContext.success(""String_Node_Str"");
      return true;
    }
 else {
      callbackContext.error(""String_Node_Str"");
      Log.d(TAG,""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    callbackContext.error(e.getMessage());
    Log.d(TAG,e.getMessage());
    return false;
  }
}"
8342,"/** 
 * This method disconnects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network disconnected, false if failed
 */
private boolean disconnectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToDisconnect=data.get(0);
  int networkIdToDisconnect=ssidToNetworkId(ssidToDisconnect);
  if (networkIdToDisconnect > 0) {
    wifiManager.disableNetwork(networkIdToDisconnect);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return false;
  }
}","/** 
 * This method disconnects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network disconnected, false if failed
 */
private boolean disconnectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToDisconnect=data.getString(0);
  int networkIdToDisconnect=ssidToNetworkId(ssidToDisconnect);
  if (networkIdToDisconnect > 0) {
    wifiManager.disableNetwork(networkIdToDisconnect);
    callbackContext.success(""String_Node_Str"" + ssidToDisconnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToDisconnect + ""String_Node_Str"");
    return false;
  }
}"
8343,"/** 
 * This methods adds a network to the list of available WiFi networks. If the network already exists, then it updates it.
 * @params callbackContext 	A Cordova callback context.
 * @params data				JSON Array with [0] == SSID, [1] == password
 * @return true	if add successful, false if add fails
 */
private boolean addNetwork(CallbackContext callbackContext,JSONArray data){
  WifiConfiguration wifi=new WifiConfiguration();
  String authType=data.getString(2);
  if (authType.equals(""String_Node_Str"")) {
  }
 else   if (authType.equals(""String_Node_Str"")) {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
 else {
    log.d(TAG,""String_Node_Str"");
    callbackContext.error(""String_Node_Str"" + authType);
    return false;
  }
  wifi.SSID=data.getString(0);
  wifi.preSharedKey=data.getString(1);
  wifi.status=WifiConfiguration.Status.ENABLED;
  wifi.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
  wifi.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
  wifi.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
  wifi.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
  wifi.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
  wifi.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
  wifiManager.addNetwork();
  wifiManager.saveConfiguration();
  return true;
}","/** 
 * This methods adds a network to the list of available WiFi networks. If the network already exists, then it updates it.
 * @params callbackContext 	A Cordova callback context.
 * @params data				JSON Array with [0] == SSID, [1] == password
 * @return true	if add successful, false if add fails
 */
private boolean addNetwork(CallbackContext callbackContext,JSONArray data){
  WifiConfiguration wifi=new WifiConfiguration();
  String authType=data.getString(2);
  if (authType.equals(""String_Node_Str"")) {
  }
 else   if (authType.equals(""String_Node_Str"")) {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
 else {
    callbackContext.error(""String_Node_Str"" + authType);
    return false;
  }
  wifi.SSID=data.getString(0);
  wifi.preSharedKey=data.getString(1);
  wifi.status=WifiConfiguration.Status.ENABLED;
  wifi.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
  wifi.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
  wifi.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
  wifi.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
  wifi.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
  wifi.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
  wifiManager.addNetwork(wifi);
  wifiManager.saveConfiguration();
  return true;
}"
8344,"/** 
 * This method connects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToConnect=data.get(0);
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect > 0) {
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return false;
  }
}","/** 
 * This method connects a network.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to connect
 * @return	true if network connected, false if failed
 */
private boolean connectNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToConnect=data.geString(0);
  int networkIdToConnect=ssidToNetworkId(ssidToConnect);
  if (networkIdToConnect > 0) {
    wifiManager.enableNetwork(networkIdToConnect,true);
    callbackContext.success(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"" + ssidToConnect + ""String_Node_Str"");
    return false;
  }
}"
8345,"/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToDisconnect=data.get(0);
  int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
  if (networkIdToRemove > 0) {
    wifiManager.removeNetwork(networkIdToRemove);
    wifiManager.saveConfiguration();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
}","/** 
 * This method removes a network from the list of configured networks.
 * @param callbackContext		A Cordova callback context
 * @param data				JSON Array, with [0] being SSID to remove
 * @return	true if network removed, false if failed
 */
private boolean removeNetwork(CallbackContext callbackContext,JSONArray data){
  if (!validateData(data)) {
    return false;
  }
  String ssidToDisconnect=data.getString(0);
  int networkIdToRemove=ssidToNetworkId(ssidToDisconnect);
  if (networkIdToRemove > 0) {
    wifiManager.removeNetwork(networkIdToRemove);
    wifiManager.saveConfiguration();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
}"
8346,"@override public void initialize(CordovaInterface cordova,CordovaWebView webView){
  super.initialize(cordova,webView);
  this.wifiManager=(WifiManager)cordova.getActivity().getSystemService(Context.WIFI_SERVICE);
}","@Override public void initialize(CordovaInterface cordova,CordovaWebView webView){
  super.initialize(cordova,webView);
  this.wifiManager=(WifiManager)cordova.getActivity().getSystemService(Context.WIFI_SERVICE);
}"
8347,"@override public boolean execute(String action,JSONArray data,CallbackContext callbackContext) throws JSONException {
  this.callbackContext=callbackContext;
  if (!wifiManager.isWifiEnabled()) {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
  if (action.equals(ADD_NETWORK)) {
    return this.addNetwork(callbackContext,data);
  }
 else   if (action.equals(REMOVE_NETWORK)) {
    return this.removeNetwork(callbackContext,data);
  }
 else   if (action.equals(CONNECT_NETWORK)) {
    return this.connectNetwork(callbackContext,data);
  }
 else   if (action.equals(DISCONNECT_NETOWRK)) {
    return this.disconnectNetwork(callbackContext,data);
  }
 else   if (action.equals(LIST_NETWORKS)) {
    return this.listNetworks(callbackContext,data);
  }
  return false;
}","@Override public boolean execute(String action,JSONArray data,CallbackContext callbackContext) throws JSONException {
  this.callbackContext=callbackContext;
  if (!wifiManager.isWifiEnabled()) {
    callbackContext.error(""String_Node_Str"");
    return false;
  }
  if (action.equals(ADD_NETWORK)) {
    return this.addNetwork(callbackContext,data);
  }
 else   if (action.equals(REMOVE_NETWORK)) {
    return this.removeNetwork(callbackContext,data);
  }
 else   if (action.equals(CONNECT_NETWORK)) {
    return this.connectNetwork(callbackContext,data);
  }
 else   if (action.equals(DISCONNECT_NETWORK)) {
    return this.disconnectNetwork(callbackContext,data);
  }
 else   if (action.equals(LIST_NETWORKS)) {
    return this.listNetworks(callbackContext);
  }
  callbackContext.error(""String_Node_Str"" + action);
  return false;
}"
8348,"/** 
 * A method that helps in closing off the current session.
 */
public void closeSession(){
  logger.entering();
  if (isStarted() && (Grid.getTestSession() != null)) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  Grid.getThreadLocalException().set(null);
  this.isSessionStarted=false;
  logger.exiting();
}","/** 
 * A method that helps in closing off the current session.
 */
public void closeSession(){
  logger.entering();
  if (isStarted() && (Grid.getTestSession() != null)) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  this.isSessionStarted=false;
  logger.exiting();
}"
8349,"@Override public final void closeSession(){
  logger.entering();
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  Grid.getThreadLocalException().set(null);
  setStarted(false);
  logger.exiting();
}","@Override public final void closeSession(){
  logger.entering();
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  setStarted(false);
  logger.exiting();
}"
8350,"private boolean isPriorityUnique(IInvokedMethod method){
  Set<Integer> check=new HashSet<Integer>();
  int length=method.getTestMethod().getTestClass().getTestMethods().length;
  for (int i=0; i < length; i++) {
    check.add(method.getTestMethod().getTestClass().getTestMethods()[i].getPriority());
    if (check.size() != i + 1) {
      return false;
    }
  }
  return true;
}","private boolean isPriorityUnique(IInvokedMethod method){
  Set<Integer> check=new HashSet<Integer>();
  int length=method.getTestMethod().getTestClass().getTestMethods().length;
  int expectedSize=0;
  for (int i=0; i < length; i++) {
    if (!method.getTestMethod().getTestClass().getTestMethods()[i].getEnabled()) {
      continue;
    }
    check.add(method.getTestMethod().getTestClass().getTestMethods()[i].getPriority());
    expectedSize+=1;
    if (check.size() != expectedSize) {
      return false;
    }
  }
  return true;
}"
8351,"private boolean isHighPriority(IInvokedMethod method){
  int high=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (test.getPriority() > high) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  if (!(t.dataProvider().isEmpty())) {
    int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
    int parameterInvocationCount=method.getTestMethod().getParameterInvocationCount();
    return (currentInvocationCount == parameterInvocationCount);
  }
  return true;
}","private boolean isHighPriority(IInvokedMethod method){
  if (!isAnnotatedWithTest(method)) {
    return true;
  }
  int high=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (test.getEnabled() && test.getPriority() > high) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  if (!(t.dataProvider().isEmpty())) {
    int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
    int parameterInvocationCount=method.getTestMethod().getParameterInvocationCount();
    return (currentInvocationCount == parameterInvocationCount);
  }
  return true;
}"
8352,"/** 
 * Identifies which version and name of browser to start if it specified in &#064;webtest <br> <b>sample</b><br> &#064;webtest(<b>browser=""*firefox""</b>)<br>
 * @see org.testng.IInvokedMethodListener#beforeInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.isCurrentMethodSkipped(this)) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    if (!method.isTestMethod() && !isSeLionAnnotatedTestClass(method)) {
      return;
    }
    if (isSeLionAnnotatedTestClass(method)) {
      if (!isValidBeforeCondition(method)) {
        return;
      }
      if (method.isTestMethod()) {
        if (isLowPriority(method)) {
          testSessionSharingRules(method);
        }
 else {
          return;
        }
      }
    }
    if (Grid.getTestSession() != null) {
      return;
    }
    AbstractTestSession testSession=TestSessionFactory.newInstance(method);
    Grid.getThreadLocalTestSession().set(testSession);
    InvokedMethodInformation methodInfo=TestNGUtils.getInvokedMethodInformation(method,testResult);
    testSession.initializeTestSession(methodInfo);
    if (!(testSession instanceof BasicTestSession)) {
      try {
        LocalGridManager.spawnLocalHub(testSession);
      }
 catch (      NoClassDefFoundError e) {
        logger.log(Level.SEVERE,""String_Node_Str"" + ""String_Node_Str"",e);
        System.exit(1);
      }
    }
  }
 catch (  Exception e) {
    Grid.getThreadLocalException().set(e);
  }
  logger.exiting();
}","/** 
 * Identifies which version and name of browser to start if it specified in &#064;webtest <br> <b>sample</b><br> &#064;webtest(<b>browser=""*firefox""</b>)<br>
 * @see org.testng.IInvokedMethodListener#beforeInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.isCurrentMethodSkipped(this)) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    if (!method.isTestMethod() && !isSeLionAnnotatedTestClass(method)) {
      return;
    }
    if (isSeLionAnnotatedTestClass(method)) {
      if (!isValidBeforeCondition(method)) {
        return;
      }
      if (method.isTestMethod()) {
        if (isLowPriority(method)) {
          testSessionSharingRules(method);
        }
 else {
          return;
        }
      }
    }
    if (Grid.getTestSession() != null) {
      return;
    }
    AbstractTestSession testSession=TestSessionFactory.newInstance(method);
    Grid.getThreadLocalTestSession().set(testSession);
    InvokedMethodInformation methodInfo=TestNGUtils.getInvokedMethodInformation(method,testResult);
    testSession.initializeTestSession(methodInfo);
    if (!(testSession instanceof BasicTestSession)) {
      try {
        LocalGridManager.spawnLocalHub(testSession);
      }
 catch (      NoClassDefFoundError e) {
        logger.log(Level.SEVERE,""String_Node_Str"" + ""String_Node_Str"",e);
        System.exit(1);
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof RuntimeException) {
      throw e;
    }
    throw new RuntimeException(e.getMessage(),e);
  }
  logger.exiting();
}"
8353,"private boolean isLowPriority(IInvokedMethod method){
  int low=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (test.getPriority() < low) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
  if (!t.dataProvider().isEmpty()) {
    return currentInvocationCount == 0;
  }
  return true;
}","private boolean isLowPriority(IInvokedMethod method){
  int low=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (!isAnnotatedWithTest(test.getConstructorOrMethod().getMethod())) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (test.getEnabled() && test.getPriority() < low) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
  if (!t.dataProvider().isEmpty()) {
    return currentInvocationCount == 0;
  }
  return true;
}"
8354,"/** 
 * @return A non-null {@link RemoteWebDriver} object which can be used with {@link MobileTest} and/or{@link WebTest} annotated tests. Throws an {@link IllegalStateException} when there is no{@link RemoteWebDriver} session active such as when called outside of a {@link MobileTest} or{@link WebTest} flow.
 */
public static RemoteWebDriver driver(){
  Exception exception=threadLocalException.get();
  if (exception != null) {
    if (exception instanceof RuntimeException) {
      throw (RuntimeException)exception;
    }
    throw new RuntimeException(exception.getMessage(),exception);
  }
  AbstractTestSession testSession=getTestSession();
  if (!testSession.isStarted()) {
    testSession.startSession();
  }
  RemoteWebDriver rwd=threadLocalWebDriver.get();
  if (rwd == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return rwd;
}","/** 
 * @return A non-null {@link RemoteWebDriver} object which can be used with {@link MobileTest} and/or{@link WebTest} annotated tests. Throws an {@link IllegalStateException} when there is no{@link RemoteWebDriver} session active such as when called outside of a {@link MobileTest} or{@link WebTest} flow.
 */
public static RemoteWebDriver driver(){
  AbstractTestSession testSession=getTestSession();
  if (testSession == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (!testSession.isStarted()) {
    testSession.startSession();
  }
  RemoteWebDriver rwd=threadLocalWebDriver.get();
  if (rwd == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return rwd;
}"
8355,"public static ThreadLocal<Exception> getThreadLocalException(){
  return threadLocalException;
}","@Deprecated public static ThreadLocal<Exception> getThreadLocalException(){
  return threadLocalException;
}"
8356,"/** 
 * Use this constructor when a file that is available in the classpath is to be read by the ExcelDataProvider for supporting Data Driven Tests.
 * @param fileStream the stream of the excel file to be read.
 * @throws IOException If the file cannot be located, or cannot read by the method.
 */
public ExcelReader(DataResource resource) throws IOException {
  logger.entering(resource);
  if (resource == null || StringUtils.isBlank(resource.getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (resource.getType().toLowerCase().endsWith(""String_Node_Str"")) {
      workBook=new XSSFWorkbook(resource.getInputStream());
    }
 else     if (resource.getType().toLowerCase().endsWith(""String_Node_Str"")) {
      workBook=new HSSFWorkbook(resource.getInputStream());
    }
    IOUtils.closeQuietly(resource.getInputStream());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    throw new IOException(e);
  }
  logger.exiting();
}","/** 
 * Use this constructor when a file that is available in the classpath is to be read by the ExcelDataProvider for supporting Data Driven Tests.
 * @param resource the stream of the excel file to be read.
 * @throws IOException If the file cannot be located, or cannot read by the method.
 */
public ExcelReader(DataResource resource) throws IOException {
  logger.entering(resource);
  if (resource == null || StringUtils.isBlank(resource.getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (resource.getType().toLowerCase().endsWith(""String_Node_Str"")) {
      workBook=new XSSFWorkbook(resource.getInputStream());
    }
 else     if (resource.getType().toLowerCase().endsWith(""String_Node_Str"")) {
      workBook=new HSSFWorkbook(resource.getInputStream());
    }
    IOUtils.closeQuietly(resource.getInputStream());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    throw new IOException(e);
  }
  logger.exiting();
}"
8357,"@Test(groups=""String_Node_Str"") public void testgetJsonDataByIndexFilter() throws IOException {
  DataResource resource=new FileSystemResource(jsonPojoArrayDataFile,USER.class);
  SeLionDataProvider dataProvider=DataProviderFactory.getDataProvider(resource);
  SimpleIndexInclusionFilter filter=new SimpleIndexInclusionFilter(""String_Node_Str"");
  Iterator<Object[]> dataObject=dataProvider.getDataByFilter(filter);
  for (int i=0; dataObject.hasNext(); i++) {
    USER userData=(USER)dataObject.next()[0];
switch (i) {
case 0:
{
        assertTrue(userData.getName().equals(""String_Node_Str""));
        assertTrue(userData.getBank().getAddress().getStreet().equals(""String_Node_Str""));
        break;
      }
case 1:
{
      assertTrue(userData.getName().equals(""String_Node_Str""));
      assertTrue(userData.getBank().getName().equals(""String_Node_Str""));
      break;
    }
case 2:
{
    assertTrue(userData.getPhoneNumber().equals(""String_Node_Str""));
    assertTrue(userData.getAreaCode()[1].getAreaCode().equals(""String_Node_Str""));
    break;
  }
}
}
}","@Test(groups=""String_Node_Str"") public void testgetJsonDataByIndexFilter() throws IOException {
  DataResource resource=new FileSystemResource(jsonPojoArrayDataFile,USER.class);
  SeLionDataProvider dataProvider=DataProviderFactory.getDataProvider(resource);
  SimpleIndexInclusionFilter filter=new SimpleIndexInclusionFilter(""String_Node_Str"");
  Iterator<Object[]> dataObject=dataProvider.getDataByFilter(filter);
  for (int i=0; dataObject.hasNext(); i++) {
    USER userData=(USER)dataObject.next()[0];
switch (i) {
case 0:
{
        assertTrue(userData.getName().equals(""String_Node_Str""));
        assertTrue(userData.getBank().getAddress().getStreet().equals(""String_Node_Str""));
        break;
      }
case 1:
{
      assertTrue(userData.getName().equals(""String_Node_Str""));
      assertTrue(userData.getBank().getName().equals(""String_Node_Str""));
      break;
    }
case 2:
{
    assertTrue(userData.getPhoneNumber().equals(""String_Node_Str""));
    assertTrue(userData.getAreaCode()[1].getAreaCode().equals(""String_Node_Str""));
    break;
  }
default :
{
  fail(""String_Node_Str"");
}
}
}
}"
8358,"public AREA_CODE[] getAreaCode(){
  return areaCode;
}","public AREA_CODE[] getAreaCode(){
  return (areaCode == null) ? null : Arrays.copyOf(areaCode,areaCode.length);
}"
8359,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  LOGGER.entering();
  Map<String,String> requestParams=ServletHelper.getParameters(req);
  if (!CONFIGURED_TOKEN_VALUE.equals(requestParams.get(TOKEN_PARAMETER))) {
    ServletHelper.respondAsJsonWithHttpStatus(resp,new NodeResponseBody().setFailed(),HttpServletResponse.SC_FORBIDDEN);
    LOGGER.exiting();
    return;
  }
  ServletHelper.respondAsJsonWithHttpStatus(resp,new NodeResponseBody().setSuccess(),HttpServletResponse.SC_OK);
  LOGGER.warning(""String_Node_Str"");
  try {
    shutdownHandler.shutdownProcesses();
  }
 catch (  ProcessHandlerException e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          System.exit(0);
        }
        System.exit(0);
      }
    }
,""String_Node_Str"").start();
  }
  LOGGER.exiting();
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  LOGGER.entering();
  Map<String,String> requestParams=ServletHelper.getParameters(req);
  if (!CONFIGURED_TOKEN_VALUE.equals(requestParams.get(TOKEN_PARAMETER))) {
    ServletHelper.respondAsJsonWithHttpStatus(resp,new NodeResponseBody().setFailed(),HttpServletResponse.SC_FORBIDDEN);
    LOGGER.exiting();
    return;
  }
  LOGGER.warning(""String_Node_Str"");
  try {
    shutdownHandler.shutdownProcesses();
  }
 catch (  ProcessHandlerException e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    ServletHelper.respondAsJsonWithHttpStatus(resp,new NodeResponseBody().setSuccess(),HttpServletResponse.SC_OK);
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          System.exit(0);
        }
        System.exit(0);
      }
    }
,""String_Node_Str"").start();
  }
  LOGGER.exiting();
}"
8360,"/** 
 * Forcefully shuts the node down by calling   {@link NodeForceRestartServlet}
 */
public synchronized void forceNodeShutdown(){
  LOGGER.entering();
  stopNodeRecycleThread();
  if (!canForceShutdown) {
    LOGGER.exiting();
    return;
  }
  for (  TestSlot slot : getTestSlots()) {
    if (slot.getSession() != null) {
      totalSessionsCompleted++;
      proxyLogger.info(""String_Node_Str"" + totalSessionsCompleted + ""String_Node_Str""+ slot.getSession().toString()+ ""String_Node_Str"");
      getRegistry().forceRelease(slot,SessionTerminationReason.TIMEOUT);
    }
  }
  List<NameValuePair> nvps=new ArrayList<>();
  nvps.add(new BasicNameValuePair(NodeForceRestartServlet.TOKEN_PARAMETER,NodeForceRestartServlet.CONFIGURED_TOKEN_VALUE));
  HttpResponse response=sendToNodeServlet(NodeForceRestartServlet.class,nvps);
  if (response == null) {
    proxyLogger.warning(""String_Node_Str"" + getId() + ""String_Node_Str"");
    LOGGER.exiting(false);
    return;
  }
  final int responseStatusCode=response.getStatusLine().getStatusCode();
  if (responseStatusCode != HttpStatus.SC_OK) {
    proxyLogger.info(""String_Node_Str"" + getId() + ""String_Node_Str""+ responseStatusCode);
    LOGGER.exiting(false);
    return;
  }
  proxyLogger.info(""String_Node_Str"" + getId() + ""String_Node_Str"");
  getRegistry().removeIfPresent(this);
  LOGGER.exiting();
}","/** 
 * Forcefully shuts the node down by calling   {@link NodeForceRestartServlet}
 */
public synchronized void forceNodeShutdown(){
  LOGGER.entering();
  stopNodeRecycleThread();
  if (!canForceShutdown) {
    LOGGER.exiting();
    return;
  }
  for (  TestSlot slot : getTestSlots()) {
    if (slot.getSession() != null) {
      totalSessionsCompleted++;
      proxyLogger.info(""String_Node_Str"" + totalSessionsCompleted + ""String_Node_Str""+ slot.getSession().toString()+ ""String_Node_Str"");
      getRegistry().forceRelease(slot,SessionTerminationReason.TIMEOUT);
    }
  }
  List<NameValuePair> nvps=new ArrayList<>();
  nvps.add(new BasicNameValuePair(NodeForceRestartServlet.TOKEN_PARAMETER,NodeForceRestartServlet.CONFIGURED_TOKEN_VALUE));
  HttpResponse response=sendToNodeServlet(NodeForceRestartServlet.class,nvps);
  if (response == null) {
    proxyLogger.warning(""String_Node_Str"" + getId() + ""String_Node_Str"");
    LOGGER.exiting(false);
    return;
  }
  final int responseStatusCode=response.getStatusLine().getStatusCode();
  if (responseStatusCode != HttpStatus.SC_OK) {
    proxyLogger.info(""String_Node_Str"" + getId() + ""String_Node_Str""+ responseStatusCode);
    LOGGER.exiting(false);
    return;
  }
  proxyLogger.info(""String_Node_Str"" + getId() + ""String_Node_Str"");
  LOGGER.exiting();
}"
8361,"private void readConfigFileContents() throws IOException {
  LOGGER.entering();
  InputStream stream=null;
  if (StringUtils.isBlank(configFile)) {
    LOGGER.fine(""String_Node_Str"");
    stream=this.getClass().getResourceAsStream(SeLionGridConstants.SELION_CONFIG_FILE_RESOURCE);
  }
 else {
    File config=new File(configFile);
    String path=config.getAbsolutePath();
    checkArgument(config.exists(),path + ""String_Node_Str"");
    checkArgument(config.isFile(),path + ""String_Node_Str"");
    LOGGER.fine(""String_Node_Str"" + configFile);
    stream=new FileInputStream(config);
  }
  BufferedReader br=new BufferedReader(new InputStreamReader(stream));
  StringBuilder builder=new StringBuilder();
  String line=null;
  try {
    while ((line=br.readLine()) != null) {
      builder.append(line);
    }
  }
  finally {
    IOUtils.closeQuietly(br);
  }
  try {
    configuration=new JsonParser().parse(builder.toString()).getAsJsonObject();
  }
 catch (  JsonSyntaxException e) {
    throw new ConfigParserException(e);
  }
  LOGGER.exiting();
}","private static void readConfigFileContents() throws IOException {
  LOGGER.entering();
  InputStream stream=null;
  if (StringUtils.isBlank(configFile)) {
    LOGGER.fine(""String_Node_Str"");
    stream=ConfigParser.class.getResourceAsStream(SeLionGridConstants.SELION_CONFIG_FILE_RESOURCE);
  }
 else {
    File config=new File(configFile);
    String path=config.getAbsolutePath();
    checkArgument(config.exists(),path + ""String_Node_Str"");
    checkArgument(config.isFile(),path + ""String_Node_Str"");
    LOGGER.fine(""String_Node_Str"" + configFile);
    stream=new FileInputStream(config);
  }
  BufferedReader br=new BufferedReader(new InputStreamReader(stream));
  StringBuilder builder=new StringBuilder();
  String line=null;
  try {
    while ((line=br.readLine()) != null) {
      builder.append(line);
    }
  }
  finally {
    IOUtils.closeQuietly(br);
  }
  try {
    configuration=new JsonParser().parse(builder.toString()).getAsJsonObject();
  }
 catch (  JsonSyntaxException e) {
    throw new ConfigParserException(e);
  }
  LOGGER.exiting();
}"
8362,"private ConfigParser(){
  try {
    readConfigFileContents();
  }
 catch (  IOException e) {
    throw new ConfigParserException(e);
  }
}","private ConfigParser(){
}"
8363,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(configuration.toString());
  builder.append(""String_Node_Str"");
  builder.append(configFile);
  builder.append(""String_Node_Str"");
  return builder.toString();
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(configuration == null ? null : configuration.toString());
  builder.append(""String_Node_Str"");
  builder.append(configFile);
  builder.append(""String_Node_Str"");
  return builder.toString();
}"
8364,"/** 
 * @return A {@link ConfigParser} object that can be used to retrieve values from the Configuration object asrepresented by the JSON file passed via the JVM argument <b>SeLionConfig</b>
 */
public static ConfigParser parse(){
  LOGGER.exiting(parser.toString());
  return parser;
}","/** 
 * @return A {@link ConfigParser} object that can be used to retrieve values from the Configuration object asrepresented by the JSON file passed via the JVM argument <b>SeLionConfig</b>
 */
public static ConfigParser parse(){
  LOGGER.entering();
  if (configuration == null) {
    try {
      readConfigFileContents();
    }
 catch (    IOException e) {
      throw new ConfigParserException(e);
    }
  }
  LOGGER.exiting(parser.toString());
  return parser;
}"
8365,"/** 
 * Set the config file
 * @param file the SeLion Grid config file to use
 */
public static void setConfigFile(String file){
  LOGGER.entering(file);
  configFile=file;
}","/** 
 * Set the config file
 * @param file the SeLion Grid config file to use
 */
public static ConfigParser setConfigFile(String file){
  LOGGER.entering(file);
  if (configuration == null) {
    configFile=file;
  }
  LOGGER.exiting(parser.toString());
  return parser;
}"
8366,"@BeforeClass public void before() throws Exception {
  mockStatic(ConfigParser.class);
  doCallRealMethod().when(ConfigParser.class,""String_Node_Str"",Mockito.anyString());
  when(ConfigParser.parse()).thenCallRealMethod();
  ConfigParser.setConfigFile(new File(ConfigParserTest.class.getResource(""String_Node_Str"").getPath()).getAbsolutePath());
}","@BeforeClass public void before() throws Exception {
  mockStatic(ConfigParser.class);
  doCallRealMethod().when(ConfigParser.class,""String_Node_Str"",Mockito.anyString());
  when(ConfigParser.parse()).thenCallRealMethod();
  doCallRealMethod().when(ConfigParser.class,""String_Node_Str"");
  ConfigParser.setConfigFile(new File(ConfigParserTest.class.getResource(""String_Node_Str"").getPath()).getAbsolutePath());
}"
8367,"/** 
 * Gracefully shuts the node down by;<br> <br> 1. Stops accepting new sessions<br> 2. Waits for sessions to complete<br> 3. Calls   {@link #forceNodeShutdown}<br>
 */
public synchronized void requestNodeShutdown(){
  LOGGER.entering();
  forceShutDown=true;
  startNodeRecycleThread();
  LOGGER.exiting();
}","/** 
 * Gracefully shuts the node down by;<br> <br> 1. Stops accepting new sessions<br> 2. Waits for sessions to complete<br> 3. Calls   {@link #forceNodeShutdown}<br>
 */
public void requestNodeShutdown(){
  LOGGER.entering();
  forceShutDown=true;
  startNodeRecycleThread();
  LOGGER.exiting();
}"
8368,"@Override public TestSession getNewSession(Map<String,Object> requestedCapability){
  LOGGER.entering();
  TestSession session;
synchronized (this) {
    if (totalSessionsStarted >= maxSessionsAllowed || forceShutDown) {
      proxyLogger.fine(""String_Node_Str"" + (totalSessionsStarted >= maxSessionsAllowed) + ""String_Node_Str""+ getId());
      proxyLogger.fine(""String_Node_Str"" + (forceShutDown) + ""String_Node_Str""+ getId());
      LOGGER.exiting(null);
      return null;
    }
    session=super.getNewSession(requestedCapability);
    if (session != null) {
      totalSessionsStarted++;
      if (totalSessionsStarted >= maxSessionsAllowed) {
        startNodeRecycleThread();
      }
      proxyLogger.fine(""String_Node_Str"" + totalSessionsStarted + ""String_Node_Str""+ session.toString()+ ""String_Node_Str"");
    }
    LOGGER.exiting((session != null) ? session.toString() : null);
    return session;
  }
}","@Override public TestSession getNewSession(Map<String,Object> requestedCapability){
  LOGGER.entering();
  if (totalSessionsStarted >= maxSessionsAllowed || forceShutDown) {
    return logSessionInfo();
  }
  try {
    accessLock.lock();
    if (totalSessionsStarted >= maxSessionsAllowed || forceShutDown) {
      return logSessionInfo();
    }
    TestSession session=super.getNewSession(requestedCapability);
    if (session != null) {
      totalSessionsStarted++;
      if (totalSessionsStarted >= maxSessionsAllowed) {
        startNodeRecycleThread();
      }
      proxyLogger.fine(""String_Node_Str"" + totalSessionsStarted + ""String_Node_Str""+ session.toString()+ ""String_Node_Str"");
    }
    LOGGER.exiting((session != null) ? session.toString() : null);
    return session;
  }
  finally {
    accessLock.unlock();
  }
}"
8369,"/** 
 * Forcefully shuts the node down by calling   {@link NodeForceRestartServlet}
 */
public synchronized void forceNodeShutdown(){
  LOGGER.entering();
  CloseableHttpClient client=HttpClientBuilder.create().build();
  String url=String.format(""String_Node_Str"",machine,this.getRemoteHost().getPort(),NodeForceRestartServlet.class.getSimpleName());
  HttpPost post=new HttpPost(url);
  int responseStatusCode=HttpStatus.SC_NOT_FOUND;
  try {
    HttpResponse response=client.execute(post);
    responseStatusCode=response.getStatusLine().getStatusCode();
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (responseStatusCode == HttpStatus.SC_OK) {
      proxyLogger.info(""String_Node_Str"" + machine + ""String_Node_Str"");
    }
 else {
      proxyLogger.info(""String_Node_Str"" + machine + ""String_Node_Str""+ responseStatusCode);
    }
    try {
      client.close();
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  stopNodeRecycleThread();
  if (responseStatusCode == HttpStatus.SC_OK) {
    getRegistry().removeIfPresent(this);
  }
  LOGGER.exiting();
}","/** 
 * Forcefully shuts the node down by calling   {@link NodeForceRestartServlet}
 */
public synchronized void forceNodeShutdown(){
  LOGGER.entering();
  for (  TestSlot slot : getTestSlots()) {
    getRegistry().forceRelease(slot,SessionTerminationReason.TIMEOUT);
  }
  CloseableHttpClient client=HttpClientBuilder.create().build();
  String url=String.format(""String_Node_Str"",machine,this.getRemoteHost().getPort(),NodeForceRestartServlet.class.getSimpleName());
  HttpPost post=new HttpPost(url);
  int responseStatusCode=HttpStatus.SC_NOT_FOUND;
  try {
    HttpResponse response=client.execute(post);
    responseStatusCode=response.getStatusLine().getStatusCode();
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (responseStatusCode == HttpStatus.SC_OK) {
      proxyLogger.info(""String_Node_Str"" + machine + ""String_Node_Str"");
    }
 else {
      proxyLogger.info(""String_Node_Str"" + machine + ""String_Node_Str""+ responseStatusCode);
    }
    try {
      client.close();
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  stopNodeRecycleThread();
  if (responseStatusCode == HttpStatus.SC_OK) {
    getRegistry().removeIfPresent(this);
  }
  LOGGER.exiting();
}"
8370,"@Override public void afterSession(TestSession session){
  LOGGER.entering();
synchronized (this) {
    totalSessionsCompleted++;
    if (totalSessionsCompleted <= maxSessionsAllowed) {
      proxyLogger.fine(""String_Node_Str"" + totalSessionsCompleted + ""String_Node_Str""+ session.toString()+ ""String_Node_Str"");
    }
    proxyLogger.fine(""String_Node_Str"" + getTotalUsed() + ""String_Node_Str""+ getId());
  }
  LOGGER.exiting();
}","@Override public void afterSession(TestSession session){
  LOGGER.entering();
  totalSessionsCompleted++;
  proxyLogger.fine(""String_Node_Str"" + totalSessionsCompleted + ""String_Node_Str""+ session.toString()+ ""String_Node_Str"");
  proxyLogger.fine(""String_Node_Str"" + getTotalUsed() + ""String_Node_Str""+ getId());
  LOGGER.exiting();
}"
8371,"private static void loadValuesFromEnvironment(){
  final String PREFIX=""String_Node_Str"";
  for (  ConfigProperty configProps : ConfigProperty.values()) {
    String envValue=System.getenv(PREFIX + configProps.name());
    if (StringUtils.isNotBlank(envValue)) {
      config.setProperty(configProps.getName(),envValue);
    }
    String sysValue=System.getProperty(PREFIX + configProps.name());
    if (StringUtils.isNotBlank(sysValue)) {
      config.setProperty(configProps.getName(),sysValue);
    }
  }
}","private static void loadValuesFromEnvironment(){
  final String PREFIX=""String_Node_Str"";
  for (  ConfigProperty configProps : ConfigProperty.values()) {
    String envValue=System.getenv(PREFIX + configProps.name());
    if (StringUtils.isNotBlank(envValue)) {
      xmlConfig.setProperty(configProps.getName(),envValue);
    }
    String sysValue=System.getProperty(PREFIX + configProps.name());
    if (StringUtils.isNotBlank(sysValue)) {
      xmlConfig.setProperty(configProps.getName(),sysValue);
    }
  }
}"
8372,"private static void loadInitialValues(){
  for (  ConfigProperty configProps : ConfigProperty.values()) {
    config.setProperty(configProps.getName(),configProps.getDefaultValue());
  }
}","private static void loadInitialValues(){
  for (  ConfigProperty configProps : ConfigProperty.values()) {
    xmlConfig.setProperty(configProps.getName(),configProps.getDefaultValue());
  }
}"
8373,"/** 
 * Initializes the configuration, reloading all data while adding the supplied <code>initialValues</code> to the configuration.
 * @param initialValues The initial set of values used to configure SeLion
 */
public synchronized static void initConfig(Map<ConfigProperty,String> initialValues){
  SeLionLogger.getLogger().entering(initialValues);
  boolean permitClogging=Boolean.valueOf(System.getProperty(""String_Node_Str"",""String_Node_Str"")).booleanValue();
  if (!permitClogging) {
    LogFactory factory=LogFactory.getFactory();
    factory.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (config == null) {
    config=new XMLConfiguration();
    config.setThrowExceptionOnMissing(false);
    config.setAutoSave(false);
    loadInitialValues();
  }
  loadValuesFromUser(initialValues);
  loadValuesFromEnvironment();
  boolean runLocally=config.getBoolean(ConfigProperty.SELENIUM_RUN_LOCALLY.getName());
  if (runLocally) {
    config.setProperty(ConfigProperty.SELENIUM_HOST.getName(),""String_Node_Str"");
  }
  SeLionLogger.getLogger().exiting();
}","/** 
 * Initializes the configuration, reloading all data while adding the supplied <code>initialValues</code> to the configuration.
 * @param initialValues The initial set of values used to configure SeLion
 */
public synchronized static void initConfig(Map<ConfigProperty,String> initialValues){
  SeLionLogger.getLogger().entering(initialValues);
  boolean permitClogging=Boolean.valueOf(System.getProperty(""String_Node_Str"",""String_Node_Str"")).booleanValue();
  if (!permitClogging) {
    LogFactory factory=LogFactory.getFactory();
    factory.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (xmlConfig == null) {
    xmlConfig=new XMLConfiguration();
    xmlConfig.setThrowExceptionOnMissing(false);
    xmlConfig.setAutoSave(false);
    loadInitialValues();
  }
  loadValuesFromUser(initialValues);
  loadValuesFromEnvironment();
  boolean runLocally=xmlConfig.getBoolean(ConfigProperty.SELENIUM_RUN_LOCALLY.getName());
  if (runLocally) {
    xmlConfig.setProperty(ConfigProperty.SELENIUM_HOST.getName(),""String_Node_Str"");
  }
  SeLionLogger.getLogger().exiting();
}"
8374,"static XMLConfiguration getConfig(){
  if (config != null) {
    return config;
  }
  initConfig();
  return config;
}","static XMLConfiguration getConfig(){
  if (xmlConfig != null) {
    return xmlConfig;
  }
  initConfig();
  return xmlConfig;
}"
8375,"private static void loadValuesFromUser(Map<ConfigProperty,String> initialValues){
  if (!initialValues.isEmpty()) {
    for (    Entry<ConfigProperty,String> eachConfig : initialValues.entrySet()) {
      config.setProperty(eachConfig.getKey().getName(),eachConfig.getValue());
    }
  }
}","private static void loadValuesFromUser(Map<ConfigProperty,String> initialValues){
  if (!initialValues.isEmpty()) {
    for (    Entry<ConfigProperty,String> eachConfig : initialValues.entrySet()) {
      xmlConfig.setProperty(eachConfig.getKey().getName(),eachConfig.getValue());
    }
  }
}"
8376,"/** 
 * Check if   {@link ITestNGListener} is to be skipped
 * @param listener the  {@link ITestNGListener}
 * @return true if method is to be skipped.
 */
public static boolean isCurrentMethodSkipped(ITestNGListener listener){
  return (executeCurrentMethod(listener) == false);
}","/** 
 * Check if   {@link ITestNGListener} is to be skipped
 * @param listener the  {@link ITestNGListener}
 * @return true if method is to be skipped.
 */
public static boolean isCurrentMethodSkipped(ITestNGListener listener){
  return !executeCurrentMethod(listener);
}"
8377,"/** 
 * Prints the configuration values associated with the LocalConfig. Used for logging/debug.
 * @param testName - The &lt;test&gt; to which this configuration pertains to.
 */
public synchronized void printConfigValues(String testName){
  if (localConfig.isEmpty()) {
    return;
  }
  StringBuilder builder=new StringBuilder(String.format(""String_Node_Str"",testName));
  for (  ConfigProperty configProperty : ConfigProperty.values()) {
    String value=Config.getConfig().getString(configProperty.getName());
    String msg=null;
    if (localConfig.containsKey(configProperty.getName())) {
      value=localConfig.getString(configProperty.getName());
    }
    if (value != null && !value.trim().isEmpty()) {
      msg=String.format(""String_Node_Str"",configProperty,value);
      builder.append(msg);
    }
  }
  builder.append(""String_Node_Str"");
  SeLionLogger.getLogger().info(builder.toString());
}","/** 
 * Prints the configuration values associated with the LocalConfig. Used for logging/debug.
 * @param testName - The &lt;test&gt; to which this configuration pertains to.
 */
public synchronized void printConfigValues(String testName){
  if (baseConfig.isEmpty()) {
    return;
  }
  StringBuilder builder=new StringBuilder(String.format(""String_Node_Str"",testName));
  for (  ConfigProperty configProperty : ConfigProperty.values()) {
    String value=Config.getConfig().getString(configProperty.getName());
    String msg=null;
    if (baseConfig.containsKey(configProperty.getName())) {
      value=baseConfig.getString(configProperty.getName());
    }
    if (value != null && !value.trim().isEmpty()) {
      msg=String.format(""String_Node_Str"",configProperty,value);
      builder.append(msg);
    }
  }
  builder.append(""String_Node_Str"");
  SeLionLogger.getLogger().info(builder.toString());
}"
8378,"/** 
 * Returns only the local configuration values associated with the Local Config. Used for logging/reporting.
 * @return The local configuration property name/values as map.
 */
public synchronized Map<String,String> getLocalConfigValues(){
  Map<String,String> result=new HashMap<String,String>();
  Iterator<String> iter=localConfig.getKeys();
  while (iter.hasNext()) {
    String key=iter.next();
    result.put(key,localConfig.getString(key));
  }
  return result;
}","/** 
 * Returns only the local configuration values associated with the Local Config. Used for logging/reporting.
 * @return The local configuration property name/values as map.
 */
public synchronized Map<String,String> getLocalConfigValues(){
  Map<String,String> result=new HashMap<String,String>();
  Iterator<String> iter=baseConfig.getKeys();
  while (iter.hasNext()) {
    String key=iter.next();
    result.put(key,baseConfig.getString(key));
  }
  return result;
}"
8379,"/** 
 * Constructs a new instance of this class from the specified initial values.
 * @param initialValues Map The initial MAP of ConfigProperty values used to create the local configuration.
 */
public LocalConfig(Map<ConfigProperty,String> initialValues){
  this();
  if (initialValues != null && !initialValues.isEmpty()) {
    for (    Map.Entry<ConfigProperty,String> entry : initialValues.entrySet()) {
      if (entry.getKey().isGlobalScopeOnly()) {
        String message=String.format(""String_Node_Str"",entry.getKey());
        throw new IllegalArgumentException(message);
      }
      localConfig.setProperty(entry.getKey().getName(),entry.getValue());
    }
  }
}","/** 
 * Constructs a new instance of this class from the specified initial values.
 * @param initialValues Map The initial MAP of ConfigProperty values used to create the local configuration.
 */
public LocalConfig(Map<ConfigProperty,String> initialValues){
  this();
  if (initialValues != null && !initialValues.isEmpty()) {
    for (    Map.Entry<ConfigProperty,String> entry : initialValues.entrySet()) {
      if (entry.getKey().isGlobalScopeOnly()) {
        String message=String.format(""String_Node_Str"",entry.getKey());
        throw new IllegalArgumentException(message);
      }
      baseConfig.setProperty(entry.getKey().getName(),entry.getValue());
    }
  }
}"
8380,"/** 
 * Answer if local configuration contains a value for specified property.
 * @return True if local configuration has value for configProperty.
 */
public synchronized boolean isLocalValuePresent(ConfigProperty configProperty){
  checkArgument(configProperty != null,""String_Node_Str"");
  String value=localConfig.getString(configProperty.getName());
  return (value != null ? true : false);
}","/** 
 * Answer if local configuration contains a value for specified property.
 * @return True if local configuration has value for configProperty.
 */
public synchronized boolean isLocalValuePresent(ConfigProperty configProperty){
  checkArgument(configProperty != null,""String_Node_Str"");
  String value=baseConfig.getString(configProperty.getName());
  return (value != null ? true : false);
}"
8381,"/** 
 * Get the configuration property value for configProperty.
 * @param configProperty The configuration property value to get
 * @return The configuration property value or null if property does not exit.
 */
public synchronized String getConfigProperty(Config.ConfigProperty configProperty){
  SeLionLogger.getLogger().entering(configProperty);
  checkArgument(configProperty != null,""String_Node_Str"");
  String propValue=null;
  if (localConfig.containsKey(configProperty.getName())) {
    propValue=localConfig.getString(configProperty.getName());
  }
  if (StringUtils.isBlank(propValue)) {
    propValue=Config.getConfigProperty(configProperty);
  }
  SeLionLogger.getLogger().exiting(propValue);
  return propValue;
}","/** 
 * Get the configuration property value for configProperty.
 * @param configProperty The configuration property value to get
 * @return The configuration property value or null if property does not exit.
 */
public synchronized String getConfigProperty(Config.ConfigProperty configProperty){
  SeLionLogger.getLogger().entering(configProperty);
  checkArgument(configProperty != null,""String_Node_Str"");
  String propValue=null;
  if (baseConfig.containsKey(configProperty.getName())) {
    propValue=baseConfig.getString(configProperty.getName());
  }
  if (StringUtils.isBlank(propValue)) {
    propValue=Config.getConfigProperty(configProperty);
  }
  SeLionLogger.getLogger().exiting(propValue);
  return propValue;
}"
8382,"/** 
 * Sets the SeLion configuration property value.
 * @param configProperty The configuration property to set.
 * @param configPropertyValue The configuration property value to set.
 */
public synchronized void setConfigProperty(Config.ConfigProperty configProperty,String configPropertyValue){
  checkArgument(configProperty != null,""String_Node_Str"");
  checkArgument(checkNotInGlobalScope(configProperty),String.format(""String_Node_Str"",configProperty));
  checkArgument(configPropertyValue != null,""String_Node_Str"");
  localConfig.setProperty(configProperty.getName(),configPropertyValue);
}","/** 
 * Sets the SeLion configuration property value.
 * @param configProperty The configuration property to set.
 * @param configPropertyValue The configuration property value to set.
 */
public synchronized void setConfigProperty(Config.ConfigProperty configProperty,String configPropertyValue){
  checkArgument(configProperty != null,""String_Node_Str"");
  checkArgument(checkNotInGlobalScope(configProperty),String.format(""String_Node_Str"",configProperty));
  checkArgument(configPropertyValue != null,""String_Node_Str"");
  baseConfig.setProperty(configProperty.getName(),configPropertyValue);
}"
8383,"private boolean checkNotInGlobalScope(ConfigProperty configProperty){
  return (configProperty.isGlobalScopeOnly() == false);
}","private boolean checkNotInGlobalScope(ConfigProperty configProperty){
  return !configProperty.isGlobalScopeOnly();
}"
8384,"/** 
 * @return whether the session is started <code>true</code> or <code>false</code>
 */
public boolean isStarted(){
  return isStarted;
}","/** 
 * @return whether the session is started <code>true</code> or <code>false</code>
 */
public boolean isStarted(){
  return isSessionStarted;
}"
8385,"protected final void initTestSession(InvokedMethodInformation method){
  logger.entering(method);
  isSessionShared=isSessionShared(method);
  this.dependsOnMethods=method.getMethodsDependedUpon();
  this.className=method.getCurrentClassName();
  this.methodName=method.getCurrentMethodName();
  this.parameters=getParamsInfo(method);
  this.xmlTestName=method.getCurrentTestName();
  logger.exiting();
}","protected final void initTestSession(InvokedMethodInformation method){
  logger.entering(method);
  isSharedSession=isSessionShared(method);
  this.dependsOnMethods=method.getMethodsDependedUpon();
  this.className=method.getCurrentClassName();
  this.methodName=method.getCurrentMethodName();
  this.parameters=getParamsInfo(method);
  this.xmlTestName=method.getCurrentTestName();
  logger.exiting();
}"
8386,"/** 
 * Returns a test name for the current method. This method returns the the Class name, Method name, and Method parameters if any, for a test case running on a Non-Session-Sharing context. For a test case running under Session-Sharing context this method returns the Class name, Method name, and Method parameters if any.
 * @return - test name.
 */
public final String getTestName(){
  StringBuilder stringBuilder=new StringBuilder();
  if (isSessionShared) {
    stringBuilder.append(getDeclaringClassName());
  }
 else {
    stringBuilder.append(getDeclaringClassName()).append(':').append(getMethodName()).append('(').append(')');
  }
  if (parameters != null) {
    stringBuilder.append('[').append(parameters).append(']');
  }
  return stringBuilder.toString();
}","/** 
 * Returns a test name for the current method. This method returns the the Class name, Method name, and Method parameters if any, for a test case running on a Non-Session-Sharing context. For a test case running under Session-Sharing context this method returns the Class name, Method name, and Method parameters if any.
 * @return - test name.
 */
public final String getTestName(){
  StringBuilder stringBuilder=new StringBuilder();
  if (isSharedSession) {
    stringBuilder.append(getDeclaringClassName());
  }
 else {
    stringBuilder.append(getDeclaringClassName()).append(':').append(getMethodName()).append('(').append(')');
  }
  if (parameters != null) {
    stringBuilder.append('[').append(parameters).append(']');
  }
  return stringBuilder.toString();
}"
8387,"/** 
 * Set the session to started.
 * @param started <code>true</code> or <code>false</code>
 */
protected final void setStarted(boolean started){
  this.isStarted=started;
}","/** 
 * Set the session to started.
 * @param started <code>true</code> or <code>false</code>
 */
protected final void setStarted(boolean started){
  this.isSessionStarted=started;
}"
8388,"/** 
 * A method that helps in closing off the current session.
 */
public void closeSession(){
  logger.entering();
  if (isStarted() && (Grid.getTestSession() != null)) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  Grid.getThreadLocalException().set(null);
  this.isStarted=false;
  logger.exiting();
}","/** 
 * A method that helps in closing off the current session.
 */
public void closeSession(){
  logger.entering();
  if (isStarted() && (Grid.getTestSession() != null)) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  Grid.getThreadLocalException().set(null);
  this.isSessionStarted=false;
  logger.exiting();
}"
8389,"/** 
 * This method helps shut down the already spawned hub for local runs
 */
final static synchronized void shutDownHub(){
  LOGGER.entering();
  if (!isRunLocally()) {
    LOGGER.exiting();
    return;
  }
  Collections.reverse(toBoot);
  for (  LocalServerComponent eachItem : toBoot) {
    eachItem.shutdown();
  }
  clearToBootList();
  LOGGER.exiting();
}","/** 
 * This method helps shut down the already spawned hub for local runs
 */
static synchronized void shutDownHub(){
  LOGGER.entering();
  if (!isRunLocally()) {
    LOGGER.exiting();
    return;
  }
  Collections.reverse(toBoot);
  for (  LocalServerComponent eachItem : toBoot) {
    eachItem.shutdown();
  }
  clearToBootList();
  LOGGER.exiting();
}"
8390,"synchronized final LocalHub getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalHub();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(Integer.parseInt(Config.getConfigProperty(ConfigProperty.SELENIUM_PORT)));
    LauncherOptions launcherOptions=new LauncherOptionsImpl().setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new ThreadedLauncher(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost()},launcherOptions));
  }
  return instance;
}","synchronized LocalHub getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalHub();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(Integer.parseInt(Config.getConfigProperty(ConfigProperty.SELENIUM_PORT)));
    LauncherOptions launcherOptions=new LauncherOptionsImpl().setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new ThreadedLauncher(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost()},launcherOptions));
  }
  return instance;
}"
8391,"static synchronized final LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalHub().getLocalServerComponent();
  }
  return instance;
}","static synchronized LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalHub().getLocalServerComponent();
  }
  return instance;
}"
8392,"synchronized final LocalIOSNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalIOSNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    String[] folder=new String[]{""String_Node_Str"",""String_Node_Str""};
    String autFolder=Config.getConfigProperty(ConfigProperty.MOBILE_APP_FOLDER);
    if (StringUtils.isNotEmpty(autFolder)) {
      folder=new String[]{""String_Node_Str"",autFolder};
    }
    ProcessLauncherOptions processOptions=new ProcessLauncherOptionsImpl().setContinuouslyRestart(false).setIncludeJarsInPresentWorkingDir(false).setIncludeParentProcessClassPath(false).setIncludeJavaSystemProperties(false).setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new IOSDriverJarSpawner(new String[]{""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub,folder[0],folder[1],""String_Node_Str"",Config.getConfigProperty(ConfigProperty.MOBILE_DRIVER_SESSION_TIMEOUT)},processOptions));
  }
  return instance;
}","synchronized LocalIOSNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalIOSNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    String[] folder=new String[]{""String_Node_Str"",""String_Node_Str""};
    String autFolder=Config.getConfigProperty(ConfigProperty.MOBILE_APP_FOLDER);
    if (StringUtils.isNotEmpty(autFolder)) {
      folder=new String[]{""String_Node_Str"",autFolder};
    }
    ProcessLauncherOptions processOptions=new ProcessLauncherOptionsImpl().setContinuouslyRestart(false).setIncludeJarsInPresentWorkingDir(false).setIncludeParentProcessClassPath(false).setIncludeJavaSystemProperties(false).setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new IOSDriverJarSpawner(new String[]{""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub,folder[0],folder[1],""String_Node_Str"",Config.getConfigProperty(ConfigProperty.MOBILE_DRIVER_SESSION_TIMEOUT)},processOptions));
  }
  return instance;
}"
8393,"static synchronized final LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalIOSNode().getLocalServerComponent();
  }
  return instance;
}","static synchronized LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalIOSNode().getLocalServerComponent();
  }
  return instance;
}"
8394,"synchronized final LocalNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    LauncherOptions launcherOptions=new LauncherOptionsImpl().setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    List<String> downloadList=determineListOfDownloadsToProcess();
    instance.setLauncher(new ThreadedLauncher(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",DefaultRemoteProxy.class.getName(),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub},launcherOptions,downloadList));
  }
  return instance;
}","synchronized LocalNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    LauncherOptions launcherOptions=new LauncherOptionsImpl().setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    List<String> downloadList=determineListOfDownloadsToProcess();
    instance.setLauncher(new ThreadedLauncher(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",DefaultRemoteProxy.class.getName(),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub},launcherOptions,downloadList));
  }
  return instance;
}"
8395,"static synchronized final LocalServerComponent getSingleton(){
  if (instance == null) {
    return new LocalNode().getLocalServerComponent();
  }
  return instance;
}","static synchronized LocalServerComponent getSingleton(){
  if (instance == null) {
    return new LocalNode().getLocalServerComponent();
  }
  return instance;
}"
8396,"private List<String> determineListOfDownloadsToProcess(){
  List<String> list=new ArrayList<>();
  if (!Config.getBoolConfigProperty(ConfigProperty.DOWNLOAD_DEPENDENCIES)) {
    return list;
  }
  if (SystemUtils.IS_OS_WINDOWS) {
    if (!checkForPresenceOf(ConfigProperty.SELENIUM_IEDRIVER_PATH,SeLionConstants.WEBDRIVER_IE_DRIVER_PROPERTY,SeLionConstants.IE_DRIVER)) {
      Config.setConfigProperty(ConfigProperty.SELENIUM_IEDRIVER_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.IE_DRIVER);
      list.add(""String_Node_Str"");
    }
  }
  if (!checkForPresenceOf(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH,SeLionConstants.WEBDRIVER_CHROME_DRIVER_PROPERTY,SeLionConstants.CHROME_DRIVER)) {
    Config.setConfigProperty(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.CHROME_DRIVER);
    list.add(""String_Node_Str"");
  }
  if (!checkForPresenceOf(ConfigProperty.SELENIUM_PHANTOMJS_PATH,SeLionConstants.WEBDRIVER_PHANTOMJS_DRIVER_PROPERTY,SeLionConstants.PHANTOMJS_DRIVER)) {
    Config.setConfigProperty(ConfigProperty.SELENIUM_PHANTOMJS_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.PHANTOMJS_DRIVER);
    list.add(""String_Node_Str"");
  }
  return list;
}","private List<String> determineListOfDownloadsToProcess(){
  List<String> list=new ArrayList<>();
  if (!Config.getBoolConfigProperty(ConfigProperty.DOWNLOAD_DEPENDENCIES)) {
    return list;
  }
  if (SystemUtils.IS_OS_WINDOWS && !checkForPresenceOf(ConfigProperty.SELENIUM_IEDRIVER_PATH,SeLionConstants.WEBDRIVER_IE_DRIVER_PROPERTY,SeLionConstants.IE_DRIVER)) {
    Config.setConfigProperty(ConfigProperty.SELENIUM_IEDRIVER_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.IE_DRIVER);
    list.add(""String_Node_Str"");
  }
  if (!checkForPresenceOf(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH,SeLionConstants.WEBDRIVER_CHROME_DRIVER_PROPERTY,SeLionConstants.CHROME_DRIVER)) {
    Config.setConfigProperty(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.CHROME_DRIVER);
    list.add(""String_Node_Str"");
  }
  if (!checkForPresenceOf(ConfigProperty.SELENIUM_PHANTOMJS_PATH,SeLionConstants.WEBDRIVER_PHANTOMJS_DRIVER_PROPERTY,SeLionConstants.PHANTOMJS_DRIVER)) {
    Config.setConfigProperty(ConfigProperty.SELENIUM_PHANTOMJS_PATH,SeLionConstants.SELION_HOME_DIR + SeLionConstants.PHANTOMJS_DRIVER);
    list.add(""String_Node_Str"");
  }
  return list;
}"
8397,"synchronized final LocalSelendroidNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalSelendroidNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    String[] folder=new String[]{""String_Node_Str"",""String_Node_Str""};
    String autFolder=Config.getConfigProperty(ConfigProperty.MOBILE_APP_FOLDER);
    if (StringUtils.isNotEmpty(autFolder)) {
      folder=new String[]{""String_Node_Str"",autFolder};
    }
    String forceReinstall=""String_Node_Str"";
    if (Config.getBoolConfigProperty(ConfigProperty.SELENDROID_SERVER_FORCE_REINSTALL)) {
      forceReinstall=(""String_Node_Str"");
    }
    ProcessLauncherOptions processOptions=new ProcessLauncherOptionsImpl().setContinuouslyRestart(false).setIncludeJarsInPresentWorkingDir(false).setIncludeParentProcessClassPath(false).setIncludeJavaSystemProperties(false).setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new SelendroidJarSpawner(new String[]{""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub,folder[0],folder[1],""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_SERVER_PORT),""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_EMULATOR_START_TIMEOUT),""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_SERVER_START_TIMEOUT),forceReinstall,""String_Node_Str"",Config.getConfigProperty(ConfigProperty.MOBILE_DRIVER_SESSION_TIMEOUT)},processOptions));
  }
  return instance;
}","synchronized LocalSelendroidNode getLocalServerComponent(){
  if (instance == null) {
    instance=new LocalSelendroidNode();
    instance.setHost(new NetworkUtils().getIpOfLoopBackIp4());
    instance.setPort(PortProber.findFreePort());
    String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
    String hub=String.format(""String_Node_Str"",instance.getHost(),hubPort);
    String[] folder=new String[]{""String_Node_Str"",""String_Node_Str""};
    String autFolder=Config.getConfigProperty(ConfigProperty.MOBILE_APP_FOLDER);
    if (StringUtils.isNotEmpty(autFolder)) {
      folder=new String[]{""String_Node_Str"",autFolder};
    }
    String forceReinstall=""String_Node_Str"";
    if (Config.getBoolConfigProperty(ConfigProperty.SELENDROID_SERVER_FORCE_REINSTALL)) {
      forceReinstall=(""String_Node_Str"");
    }
    ProcessLauncherOptions processOptions=new ProcessLauncherOptionsImpl().setContinuouslyRestart(false).setIncludeJarsInPresentWorkingDir(false).setIncludeParentProcessClassPath(false).setIncludeJavaSystemProperties(false).setFileDownloadCheckTimeStampOnInvocation(false).setFileDownloadCleanupOnInvocation(false);
    instance.setLauncher(new SelendroidJarSpawner(new String[]{""String_Node_Str"",String.valueOf(instance.getPort()),""String_Node_Str"",instance.getHost(),""String_Node_Str"",hub,folder[0],folder[1],""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_SERVER_PORT),""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_EMULATOR_START_TIMEOUT),""String_Node_Str"",Config.getConfigProperty(ConfigProperty.SELENDROID_SERVER_START_TIMEOUT),forceReinstall,""String_Node_Str"",Config.getConfigProperty(ConfigProperty.MOBILE_DRIVER_SESSION_TIMEOUT)},processOptions));
  }
  return instance;
}"
8398,"static synchronized final LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalSelendroidNode().getLocalServerComponent();
  }
  return instance;
}","static synchronized LocalServerComponent getSingleton(){
  if (instance == null) {
    instance=new LocalSelendroidNode().getLocalServerComponent();
  }
  return instance;
}"
8399,"@Override public void initializeTestSession(InvokedMethodInformation method){
  logger.entering(method);
  initTestSession(method);
  MobileTest deviceTestAnnotation=method.getAnnotation(MobileTest.class);
  if (deviceTestAnnotation == null) {
    deviceTestAnnotation=method.getActualMethod().getDeclaringClass().getAnnotation(MobileTest.class);
  }
  String mobileNode=Config.getConfigProperty(ConfigProperty.MOBILE_NODE_TYPE);
  appName=getLocalConfigProperty(ConfigProperty.MOBILE_APP_NAME);
  appPath=getLocalConfigProperty(ConfigProperty.MOBILE_APP_PATH);
  deviceSerial=getLocalConfigProperty(ConfigProperty.SELENDROID_DEVICE_SERIAL);
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_NODE_TYPE))) {
    mobileNode=getLocalConfigProperty(ConfigProperty.MOBILE_NODE_TYPE);
  }
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_APP_LOCALE))) {
    appLocale=getLocalConfigProperty(ConfigProperty.MOBILE_APP_LOCALE);
  }
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_APP_LANGUAGE))) {
    appLanguage=getLocalConfigProperty(ConfigProperty.MOBILE_APP_LANGUAGE);
  }
  if (deviceTestAnnotation != null) {
    if (StringUtils.isNotBlank(deviceTestAnnotation.appName())) {
      this.appName=deviceTestAnnotation.appName();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.language())) {
      this.appLanguage=deviceTestAnnotation.language();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.locale())) {
      this.appLocale=deviceTestAnnotation.locale();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.device())) {
      this.device=deviceTestAnnotation.device();
      String[] devices=StringUtils.split(this.device,""String_Node_Str"");
      if (StringUtils.contains(device,""String_Node_Str"")) {
        this.platformVersion=devices[1];
        this.device=devices[0];
      }
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.deviceSerial())) {
      this.deviceSerial=deviceTestAnnotation.deviceSerial();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.deviceType())) {
      this.deviceType=deviceTestAnnotation.deviceType();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.appPath())) {
      this.appPath=deviceTestAnnotation.appPath();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.mobileNodeType())) {
      mobileNode=deviceTestAnnotation.mobileNodeType();
    }
    this.mobileNodeType=MobileNodeType.getMobileNodeType(mobileNode);
    initializeAdditionalCapabilities(deviceTestAnnotation.additionalCapabilities(),method);
  }
  boolean appPathProvided=StringUtils.isNotBlank(appPath);
  checkArgument(!(mobileNodeType != MobileNodeType.APPIUM && appPathProvided),""String_Node_Str"");
  checkArgument(StringUtils.isNotBlank(appName) ^ StringUtils.isNotBlank(appPath),""String_Node_Str"" + ""String_Node_Str"");
  checkArgument(isDeviceDefined(),""String_Node_Str"" + ""String_Node_Str"");
  if (StringUtils.contains(this.appName,""String_Node_Str"")) {
    String[] appNames=StringUtils.split(this.appName,""String_Node_Str"");
    appVersion=appNames[1];
    appName=appNames[0];
  }
  if (this.appPath.startsWith(SELION_HUB_STORAGE)) {
    this.appPath=getSelionHubStorageUrl(this.appPath);
  }
 else   if (!this.appPath.startsWith(SAUCE_URL) && !StringUtils.startsWithIgnoreCase(appPath,""String_Node_Str"")) {
    Path p=Paths.get(appPath);
    if (!p.isAbsolute()) {
      this.appPath=String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),appPath);
    }
  }
  this.platform=WebDriverPlatform.ANDROID;
  if (""String_Node_Str"".equalsIgnoreCase(getDevice()) || ""String_Node_Str"".equalsIgnoreCase(getDevice())) {
    this.platform=WebDriverPlatform.IOS;
  }
  logger.exiting();
}","@Override public void initializeTestSession(InvokedMethodInformation method){
  logger.entering(method);
  initTestSession(method);
  MobileTest deviceTestAnnotation=method.getAnnotation(MobileTest.class);
  if (deviceTestAnnotation == null) {
    deviceTestAnnotation=method.getActualMethod().getDeclaringClass().getAnnotation(MobileTest.class);
  }
  String mobileNode=Config.getConfigProperty(ConfigProperty.MOBILE_NODE_TYPE);
  appName=getLocalConfigProperty(ConfigProperty.MOBILE_APP_NAME);
  appPath=getLocalConfigProperty(ConfigProperty.MOBILE_APP_PATH);
  deviceSerial=getLocalConfigProperty(ConfigProperty.SELENDROID_DEVICE_SERIAL);
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_NODE_TYPE))) {
    mobileNode=getLocalConfigProperty(ConfigProperty.MOBILE_NODE_TYPE);
  }
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_APP_LOCALE))) {
    appLocale=getLocalConfigProperty(ConfigProperty.MOBILE_APP_LOCALE);
  }
  if (StringUtils.isNotBlank(getLocalConfigProperty(ConfigProperty.MOBILE_APP_LANGUAGE))) {
    appLanguage=getLocalConfigProperty(ConfigProperty.MOBILE_APP_LANGUAGE);
  }
  if (deviceTestAnnotation != null) {
    if (StringUtils.isNotBlank(deviceTestAnnotation.appName())) {
      this.appName=deviceTestAnnotation.appName();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.language())) {
      this.appLanguage=deviceTestAnnotation.language();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.locale())) {
      this.appLocale=deviceTestAnnotation.locale();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.device())) {
      this.device=deviceTestAnnotation.device();
      String[] devices=StringUtils.split(this.device,""String_Node_Str"");
      if (StringUtils.contains(device,""String_Node_Str"")) {
        this.platformVersion=devices[1];
        this.device=devices[0];
      }
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.deviceSerial())) {
      this.deviceSerial=deviceTestAnnotation.deviceSerial();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.deviceType())) {
      this.deviceType=deviceTestAnnotation.deviceType();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.appPath())) {
      this.appPath=deviceTestAnnotation.appPath();
    }
    if (StringUtils.isNotBlank(deviceTestAnnotation.mobileNodeType())) {
      mobileNode=deviceTestAnnotation.mobileNodeType();
    }
    this.mobileNodeType=MobileNodeType.getMobileNodeType(mobileNode);
    initializeAdditionalCapabilities(deviceTestAnnotation.additionalCapabilities(),method);
  }
  boolean appPathProvided=StringUtils.isNotBlank(appPath);
  checkArgument(!(mobileNodeType != MobileNodeType.APPIUM && appPathProvided),""String_Node_Str"");
  checkArgument(StringUtils.isNotBlank(appName) ^ StringUtils.isNotBlank(appPath),""String_Node_Str"" + ""String_Node_Str"");
  checkArgument(isDeviceDefined(),""String_Node_Str"" + ""String_Node_Str"");
  if (StringUtils.contains(this.appName,""String_Node_Str"")) {
    String[] appNames=StringUtils.split(this.appName,""String_Node_Str"");
    appVersion=appNames[1];
    appName=appNames[0];
  }
  if (this.appPath.startsWith(SELION_HUB_STORAGE)) {
    this.appPath=getSelionHubStorageUrl(this.appPath);
  }
 else   if (!this.appPath.startsWith(SAUCE_URL) && !StringUtils.startsWithIgnoreCase(appPath,""String_Node_Str"")) {
    Path p=Paths.get(appPath);
    if (!p.isAbsolute()) {
      this.appPath=String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),appPath);
    }
  }
  this.platform=WebDriverPlatform.ANDROID;
  if (IPHONE.equalsIgnoreCase(getDevice()) || IPAD.equalsIgnoreCase(getDevice())) {
    this.platform=WebDriverPlatform.IOS;
  }
  logger.exiting();
}"
8400,"private static boolean isServiceLoaderDisabled(){
  return serviceLoaderEnabled == false;
}","private static boolean isServiceLoaderDisabled(){
  return !serviceLoaderEnabled;
}"
8401,"/** 
 * Return true when one of the following conditions is met <br> <br> 1. ConfigProperty for driverBinary is specified and not blank or null. <br> 2. System Property which Selenium uses to find driverBinary is present. <br> 3. driverBinary exists in the current working directory OR the PATH <br>
 */
private boolean checkForPresenceOf(ConfigProperty property,String systemProperty,String driverBinary){
  if (StringUtils.isBlank(Config.getConfigProperty(property)) && System.getProperty(systemProperty) == null) {
    @SuppressWarnings(""String_Node_Str"") String location=CommandLine.find(driverBinary.replace(""String_Node_Str"",""String_Node_Str""));
    if (location != null) {
      return true;
    }
    return false;
  }
  return true;
}","/** 
 * Return true when one of the following conditions is met <br> <br> 1. ConfigProperty for driverBinary is specified and not blank or null. <br> 2. System Property which Selenium uses to find driverBinary is present. <br> 3. driverBinary exists in the current working directory OR the PATH <br>
 */
private boolean checkForPresenceOf(ConfigProperty property,String systemProperty,String driverBinary){
  if (StringUtils.isBlank(Config.getConfigProperty(property)) && System.getProperty(systemProperty) == null) {
    @SuppressWarnings(""String_Node_Str"") String location=CommandLine.find(driverBinary.replace(""String_Node_Str"",""String_Node_Str""));
    return (location != null);
  }
  return true;
}"
8402,"private boolean isDeviceDefined(){
  if (device.contains(""String_Node_Str"") || device.contains(""String_Node_Str"") || device.contains(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","private boolean isDeviceDefined(){
  return (device.contains(""String_Node_Str"") || device.contains(""String_Node_Str"") || device.contains(""String_Node_Str""));
}"
8403,"private boolean isValidBeforeCondition(IInvokedMethod method){
  if (method.isTestMethod()) {
    return true;
  }
  if (method.getTestMethod().isBeforeClassConfiguration()) {
    return true;
  }
  return false;
}","private boolean isValidBeforeCondition(IInvokedMethod method){
  if (method.isTestMethod()) {
    return true;
  }
  return method.getTestMethod().isBeforeClassConfiguration();
}"
8404,"private boolean isHighPriority(IInvokedMethod method){
  int high=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (test.getPriority() > high) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  if (!(t.dataProvider().isEmpty())) {
    int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
    int parameterInvocationCount=method.getTestMethod().getParameterInvocationCount();
    if (currentInvocationCount == parameterInvocationCount) {
      return true;
    }
    return false;
  }
  return true;
}","private boolean isHighPriority(IInvokedMethod method){
  int high=method.getTestMethod().getPriority();
  for (  ITestNGMethod test : method.getTestMethod().getTestClass().getTestMethods()) {
    if (test.getPriority() > high) {
      return false;
    }
  }
  Test t=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  if (!(t.dataProvider().isEmpty())) {
    int currentInvocationCount=method.getTestMethod().getCurrentInvocationCount();
    int parameterInvocationCount=method.getTestMethod().getParameterInvocationCount();
    return (currentInvocationCount == parameterInvocationCount);
  }
  return true;
}"
8405,"WebTestSession(){
}","WebTestSession(){
  super();
}"
8406,"@Override public DesiredCapabilities getCapabilities(DesiredCapabilities capabilities){
  MobileTestSession mobileSession=Grid.getMobileTestSession();
  capabilities=SelendroidCapabilities.android();
  if ((new File(mobileSession.getAppLocation()).exists()) && ((new File(mobileSession.getAppLocation() + File.separator + mobileSession.getAppName())).exists())) {
    capabilities.setBrowserName(SELENDROID);
  }
 else {
    capabilities.setBrowserName(ANDROID);
  }
  capabilities.setCapability(MOBILE_NODE_TYPE,mobileSession.getMobileNodeType().getAsString());
  capabilities.setCapability(SelendroidCapabilities.AUT,mobileSession.getAppName());
  capabilities.setCapability(SelendroidCapabilities.LOCALE,mobileSession.getAppLocale());
  if (StringUtils.isNotBlank(mobileSession.getDeviceType())) {
    capabilities.setCapability(SelendroidCapabilities.MODEL,mobileSession.getDeviceType());
  }
  if (StringUtils.isNotBlank(mobileSession.getPlatformVersion())) {
    capabilities.setCapability(SelendroidCapabilities.PLATFORM_VERSION,mobileSession.getPlatformVersion());
  }
  if (StringUtils.isNotBlank(mobileSession.getdeviceSerial())) {
    capabilities.setCapability(SelendroidCapabilities.SERIAL,mobileSession.getdeviceSerial());
  }
  return capabilities;
}","@Override public DesiredCapabilities getCapabilities(DesiredCapabilities capabilities){
  MobileTestSession mobileSession=Grid.getMobileTestSession();
  DesiredCapabilities tempCapabilities=SelendroidCapabilities.android();
  if ((new File(mobileSession.getAppLocation()).exists()) && ((new File(mobileSession.getAppLocation() + File.separator + mobileSession.getAppName())).exists())) {
    tempCapabilities.setBrowserName(SELENDROID);
  }
 else {
    tempCapabilities.setBrowserName(ANDROID);
  }
  tempCapabilities.setCapability(MOBILE_NODE_TYPE,mobileSession.getMobileNodeType().getAsString());
  tempCapabilities.setCapability(SelendroidCapabilities.AUT,mobileSession.getAppName());
  tempCapabilities.setCapability(SelendroidCapabilities.LOCALE,mobileSession.getAppLocale());
  if (StringUtils.isNotBlank(mobileSession.getDeviceType())) {
    tempCapabilities.setCapability(SelendroidCapabilities.MODEL,mobileSession.getDeviceType());
  }
  if (StringUtils.isNotBlank(mobileSession.getPlatformVersion())) {
    tempCapabilities.setCapability(SelendroidCapabilities.PLATFORM_VERSION,mobileSession.getPlatformVersion());
  }
  if (StringUtils.isNotBlank(mobileSession.getdeviceSerial())) {
    tempCapabilities.setCapability(SelendroidCapabilities.SERIAL,mobileSession.getdeviceSerial());
  }
  return tempCapabilities;
}"
8407,"int fillData(HSSFSheet sheet,int rowNum,HSSFCellStyle style){
  logger.entering(new Object[]{sheet,rowNum,style});
  HSSFRow row;
  style=Styles.getStyleBorderThinLeftTop();
  for (  List<String> dataString : this.getLstEntities()) {
    row=sheet.createRow(rowNum);
    int iColNum=getStartColNum();
    for (int i=0; i < this.getColTitles().size(); i++) {
      row.createCell(iColNum);
      row.getCell(iColNum).setCellStyle(style);
      if (this.getColTitles().get(i).contains(""String_Node_Str"")) {
        Long timeInMilli=Long.parseLong(dataString.get(i));
        row.getCell(iColNum).setCellValue(formatMilliSecondTime(timeInMilli));
      }
 else       if (this.getColTitles().get(i).contains(""String_Node_Str"")) {
        Hyperlink link=new HSSFHyperlink(Hyperlink.LINK_DOCUMENT);
        link.setAddress(dataString.get(i));
        row.getCell(iColNum).setCellStyle(Styles.getHyperLinkStyle());
        row.getCell(iColNum).setCellValue(""String_Node_Str"");
        row.getCell(iColNum).setHyperlink(link);
      }
 else {
        row.getCell(iColNum).setCellStyle(style);
        row.getCell(iColNum).setCellValue(dataString.get(i));
      }
      sheet.autoSizeColumn(iColNum++);
    }
    rowNum++;
  }
  logger.exiting(rowNum);
  return rowNum;
}","int fillData(HSSFSheet sheet,int rowNum,HSSFCellStyle style){
  logger.entering(new Object[]{sheet,rowNum,style});
  HSSFRow row;
  HSSFCellStyle newStyle=Styles.getStyleBorderThinLeftTop();
  for (  List<String> dataString : this.getLstEntities()) {
    row=sheet.createRow(rowNum);
    int iColNum=getStartColNum();
    for (int i=0; i < this.getColTitles().size(); i++) {
      row.createCell(iColNum);
      row.getCell(iColNum).setCellStyle(newStyle);
      if (this.getColTitles().get(i).contains(""String_Node_Str"")) {
        Long timeInMilli=Long.parseLong(dataString.get(i));
        row.getCell(iColNum).setCellValue(formatMilliSecondTime(timeInMilli));
      }
 else       if (this.getColTitles().get(i).contains(""String_Node_Str"")) {
        Hyperlink link=new HSSFHyperlink(Hyperlink.LINK_DOCUMENT);
        link.setAddress(dataString.get(i));
        row.getCell(iColNum).setCellStyle(Styles.getHyperLinkStyle());
        row.getCell(iColNum).setCellValue(""String_Node_Str"");
        row.getCell(iColNum).setHyperlink(link);
      }
 else {
        row.getCell(iColNum).setCellStyle(newStyle);
        row.getCell(iColNum).setCellValue(dataString.get(i));
      }
      sheet.autoSizeColumn(iColNum++);
    }
    rowNum++;
  }
  logger.exiting(rowNum);
  return rowNum;
}"
8408,"static public void initStyles(HSSFWorkbook wb){
  wb1=wb;
  setHeadingStyle(createCustomStyle(createCustomFont(HSSFColor.LEMON_CHIFFON.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_CENTER));
  getHeadingStyle().setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
  getHeadingStyle().setFillForegroundColor(new HSSFColor.BLUE_GREY().getIndex());
  setHeadingStyle(setAllBorders(HSSFCellStyle.BORDER_DOUBLE,getHeadingStyle()));
  subHeading1Style=createCustomStyle(createCustomFont(HSSFColor.LIGHT_BLUE.index,HSSFFont.U_NONE));
  subHeading1Style=setAllBorders(HSSFCellStyle.BORDER_THIN,subHeading1Style);
  setSubHeading2Style(createCustomStyle(createCustomFont(HSSFColor.BROWN.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_CENTER));
  setSubHeading2Style(setAllBorders(HSSFCellStyle.BORDER_MEDIUM,getSubHeading2Style()));
  setSubHeading2StyleThinBorder(createCustomStyle(createCustomFont(HSSFColor.BROWN.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_LEFT));
  setSubHeading2StyleThinBorder(setAllBorders(HSSFCellStyle.BORDER_THIN,getSubHeading2StyleThinBorder()));
  setThinBorderStyle(wb.createCellStyle());
  setThinBorderStyle(setAllBorders(HSSFCellStyle.BORDER_THIN,getThinBorderStyle()));
  setStyleBorderThinCenter(wb.createCellStyle());
  setStyleBorderThinCenter(setAllBorders(HSSFCellStyle.BORDER_THIN,getStyleBorderThinCenter()));
  getStyleBorderThinCenter().setAlignment(HSSFCellStyle.ALIGN_CENTER);
  setStyleBorderThinLeftTop(wb.createCellStyle());
  setStyleBorderThinLeftTop(setAllBorders(HSSFCellStyle.BORDER_THIN,getStyleBorderThinLeftTop()));
  getStyleBorderThinLeftTop().setAlignment(HSSFCellStyle.ALIGN_LEFT);
  getStyleBorderThinLeftTop().setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);
  setHyperLinkStyle(wb.createCellStyle());
  setHyperLinkStyle(setAllBorders(HSSFCellStyle.BORDER_THIN,getHyperLinkStyle()));
  HSSFFont hyperLinkFont=createCustomFont(HSSFColor.BLUE.index,HSSFFont.U_SINGLE);
  hyperLinkFont.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);
  getHyperLinkStyle().setFont(hyperLinkFont);
}","public static void initStyles(HSSFWorkbook wb){
  wb1=wb;
  setHeadingStyle(createCustomStyle(createCustomFont(HSSFColor.LEMON_CHIFFON.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_CENTER));
  getHeadingStyle().setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
  getHeadingStyle().setFillForegroundColor(new HSSFColor.BLUE_GREY().getIndex());
  setHeadingStyle(setAllBorders(HSSFCellStyle.BORDER_DOUBLE,getHeadingStyle()));
  subHeading1Style=createCustomStyle(createCustomFont(HSSFColor.LIGHT_BLUE.index,HSSFFont.U_NONE));
  subHeading1Style=setAllBorders(HSSFCellStyle.BORDER_THIN,subHeading1Style);
  setSubHeading2Style(createCustomStyle(createCustomFont(HSSFColor.BROWN.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_CENTER));
  setSubHeading2Style(setAllBorders(HSSFCellStyle.BORDER_MEDIUM,getSubHeading2Style()));
  setSubHeading2StyleThinBorder(createCustomStyle(createCustomFont(HSSFColor.BROWN.index,HSSFFont.U_NONE),HSSFCellStyle.ALIGN_LEFT));
  setSubHeading2StyleThinBorder(setAllBorders(HSSFCellStyle.BORDER_THIN,getSubHeading2StyleThinBorder()));
  setThinBorderStyle(wb.createCellStyle());
  setThinBorderStyle(setAllBorders(HSSFCellStyle.BORDER_THIN,getThinBorderStyle()));
  setStyleBorderThinCenter(wb.createCellStyle());
  setStyleBorderThinCenter(setAllBorders(HSSFCellStyle.BORDER_THIN,getStyleBorderThinCenter()));
  getStyleBorderThinCenter().setAlignment(HSSFCellStyle.ALIGN_CENTER);
  setStyleBorderThinLeftTop(wb.createCellStyle());
  setStyleBorderThinLeftTop(setAllBorders(HSSFCellStyle.BORDER_THIN,getStyleBorderThinLeftTop()));
  getStyleBorderThinLeftTop().setAlignment(HSSFCellStyle.ALIGN_LEFT);
  getStyleBorderThinLeftTop().setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);
  setHyperLinkStyle(wb.createCellStyle());
  setHyperLinkStyle(setAllBorders(HSSFCellStyle.BORDER_THIN,getHyperLinkStyle()));
  HSSFFont hyperLinkFont=createCustomFont(HSSFColor.BLUE.index,HSSFFont.U_SINGLE);
  hyperLinkFont.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);
  getHyperLinkStyle().setFont(hyperLinkFont);
}"
8409,"public ByOrOperator(List<By> bys){
  this.bys=bys;
}","public ByOrOperator(List<By> bys){
  super();
  this.bys=bys;
}"
8410,"/** 
 * Detects Selenium   {@link org.openqa.selenium.By By} type depending on what the locator string starts with.
 * @param locator String that represents the means to locate this element (could be id/name/xpath/css locator).
 * @return {@link By} sub-class that represents the actual location strategy that will be used.
 */
public static By getFindElementType(String locator){
  logger.entering(locator);
  Preconditions.checkArgument(StringUtils.isNotBlank(locator),INVALID_LOCATOR_ERR_MSG);
  By valueToReturn=null;
  locator=locator.trim();
  int typeDelimiterIndex=locator.indexOf('=');
  String locatorType=typeDelimiterIndex != -1 ? locator.substring(0,typeDelimiterIndex) : locator;
switch (locatorType) {
case ""String_Node_Str"":
    valueToReturn=By.id(locator.substring(typeDelimiterIndex + 1));
  break;
case ""String_Node_Str"":
valueToReturn=By.name(locator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.linkText(locator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.xpath(locator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.cssSelector(locator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.className(locator.substring(typeDelimiterIndex + 1));
break;
default :
if (locator.startsWith(""String_Node_Str"") || locator.startsWith(""String_Node_Str"")) {
valueToReturn=By.xpath(locator);
break;
}
valueToReturn=new ByIdOrName(locator);
}
if (logger.isLoggable(Level.FINE)) {
String msg=valueToReturn.getClass().getSimpleName() + ""String_Node_Str"" + locator;
logger.log(Level.FINE,msg);
}
logger.exiting(valueToReturn);
return valueToReturn;
}","/** 
 * Detects Selenium   {@link org.openqa.selenium.By By} type depending on what the locator string starts with.
 * @param locator String that represents the means to locate this element (could be id/name/xpath/css locator).
 * @return {@link By} sub-class that represents the actual location strategy that will be used.
 */
public static By getFindElementType(String locator){
  logger.entering(locator);
  Preconditions.checkArgument(StringUtils.isNotBlank(locator),INVALID_LOCATOR_ERR_MSG);
  By valueToReturn=null;
  String seleniumLocator=locator.trim();
  int typeDelimiterIndex=seleniumLocator.indexOf('=');
  String locatorType=typeDelimiterIndex != -1 ? seleniumLocator.substring(0,typeDelimiterIndex) : seleniumLocator;
switch (locatorType) {
case ""String_Node_Str"":
    valueToReturn=By.id(seleniumLocator.substring(typeDelimiterIndex + 1));
  break;
case ""String_Node_Str"":
valueToReturn=By.name(seleniumLocator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.linkText(seleniumLocator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.xpath(seleniumLocator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.cssSelector(seleniumLocator.substring(typeDelimiterIndex + 1));
break;
case ""String_Node_Str"":
valueToReturn=By.className(seleniumLocator.substring(typeDelimiterIndex + 1));
break;
default :
if (seleniumLocator.startsWith(""String_Node_Str"") || seleniumLocator.startsWith(""String_Node_Str"")) {
valueToReturn=By.xpath(seleniumLocator);
break;
}
valueToReturn=new ByIdOrName(seleniumLocator);
}
if (logger.isLoggable(Level.FINE)) {
String msg=valueToReturn.getClass().getSimpleName() + ""String_Node_Str"" + seleniumLocator;
logger.log(Level.FINE,msg);
}
logger.exiting(valueToReturn);
return valueToReturn;
}"
8411,"private List<String> asList(String allValues){
  List<String> valuesList=Collections.emptyList();
  if (!StringUtils.isBlank(allValues)) {
    allValues=allValues.trim().substring(1,allValues.length() - 1);
    valuesList=Arrays.asList(allValues.split(""String_Node_Str""));
  }
  return valuesList;
}","private List<String> asList(String allValues){
  List<String> valuesList=Collections.emptyList();
  if (!StringUtils.isBlank(allValues)) {
    String tempAllValues=allValues.trim().substring(1,allValues.length() - 1);
    valuesList=Arrays.asList(tempAllValues.split(""String_Node_Str""));
  }
  return valuesList;
}"
8412,"@Test(groups={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @WebTest public void testCorrectBrowserLaunched(ITestContext ctx){
  Grid.driver().get(""String_Node_Str"");
  String userAgent=(String)Grid.driver().executeScript(""String_Node_Str"",""String_Node_Str"");
  UserAgentStringParser parser=UADetectorServiceFactory.getResourceModuleParser();
  ReadableUserAgent agent=parser.parse(userAgent);
  String actualBrowser=agent.getName().toLowerCase();
  String browserParam=ctx.getCurrentXmlTest().getParameter(""String_Node_Str"");
  assertTrue(!browserParam.isEmpty());
  if (browserParam.equals(""String_Node_Str"")) {
    assertTrue(actualBrowser.equalsIgnoreCase(""String_Node_Str""));
  }
 else {
    assertTrue(actualBrowser.contains(browserParam.substring(1).toLowerCase()));
  }
}","@Test(groups={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) @WebTest public void testCorrectBrowserLaunched(ITestContext ctx){
  Grid.driver().get(""String_Node_Str"");
  String userAgent=(String)Grid.driver().executeScript(""String_Node_Str"",""String_Node_Str"");
  UserAgentStringParser parser=UADetectorServiceFactory.getResourceModuleParser();
  ReadableUserAgent agent=parser.parse(userAgent);
  String actualBrowser=agent.getName().toLowerCase();
  String browserParam=ctx.getCurrentXmlTest().getParameter(""String_Node_Str"");
  assertTrue(!browserParam.isEmpty());
  if (""String_Node_Str"".equals(browserParam)) {
    assertTrue(actualBrowser.equalsIgnoreCase(""String_Node_Str""));
  }
 else {
    assertTrue(actualBrowser.contains(browserParam.substring(1).toLowerCase()));
  }
}"
8413,"@Test(groups=""String_Node_Str"") public void testInsertTestMethodDetail(){
  String suiteName=""String_Node_Str"";
  String testName=""String_Node_Str"";
  String packageName=""String_Node_Str"";
  String className=""String_Node_Str"";
  JsonRuntimeReporterHelper helper=new JsonRuntimeReporterHelper();
  ITestResult result=Reporter.getCurrentTestResult();
  helper.insertTestMethod(suiteName,testName,packageName,className,result);
  result.setStatus(1);
  helper.insertTestMethod(suiteName,testName,packageName,className,result);
  List<TestMethodInfo> completedTests=helper.getCompletedTestContent();
  assertEquals(completedTests.size(),1);
  TestMethodInfo testMethod=completedTests.get(0);
  JsonObject jsonObject=new JsonParser().parse(testMethod.toJson()).getAsJsonObject();
  ;
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),suiteName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),testName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),packageName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),className);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),""String_Node_Str"");
}","@Test(groups=""String_Node_Str"") public void testInsertTestMethodDetail(){
  String suiteName=""String_Node_Str"";
  String testName=""String_Node_Str"";
  String packageName=""String_Node_Str"";
  String className=""String_Node_Str"";
  JsonRuntimeReporterHelper helper=new JsonRuntimeReporterHelper();
  ITestResult result=Reporter.getCurrentTestResult();
  helper.insertTestMethod(suiteName,testName,packageName,className,result);
  result.setStatus(1);
  helper.insertTestMethod(suiteName,testName,packageName,className,result);
  List<TestMethodInfo> completedTests=helper.getCompletedTestContent();
  assertEquals(completedTests.size(),1);
  TestMethodInfo testMethod=completedTests.get(0);
  JsonObject jsonObject=new JsonParser().parse(testMethod.toJson()).getAsJsonObject();
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),suiteName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),testName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),packageName);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),className);
  assertEquals(jsonObject.get(""String_Node_Str"").getAsString(),""String_Node_Str"");
}"
8414,"SampleSuccessInMemoryPage(){
  getPage();
}","SampleSuccessInMemoryPage(){
  super();
  getPage();
}"
8415,"public SampleSuccessPage(){
  super.initPage(""String_Node_Str"",""String_Node_Str"");
}","public SampleSuccessPage(){
  super();
  super.initPage(""String_Node_Str"",""String_Node_Str"");
}"
8416,"public SampleTestPage(){
  super.initPage(""String_Node_Str"",""String_Node_Str"");
}","public SampleTestPage(){
  super();
  super.initPage(""String_Node_Str"",""String_Node_Str"");
}"
8417,"/** 
 * Creates a new TestInitializeElementsPage object
 * @param siteLocale The Country locale for the site you are accessing
 */
public TestInitializeElementsPage(String siteLocale){
  super.initPage(PAGE_DOMAIN,CLASS_NAME,siteLocale);
}","/** 
 * Creates a new TestInitializeElementsPage object
 * @param siteLocale The Country locale for the site you are accessing
 */
public TestInitializeElementsPage(String siteLocale){
  super();
  super.initPage(PAGE_DOMAIN,CLASS_NAME,siteLocale);
}"
8418,"public TestPage(String siteLocale,String className){
  super.initPage(PAGE_DOMAIN,className,siteLocale);
}","public TestPage(String siteLocale,String className){
  super();
  super.initPage(PAGE_DOMAIN,className,siteLocale);
}"
8419,"@Override public void processPage(FileSystemResource resource) throws IOException {
  boolean platformDefined=false;
  String fileName=resource.getFileName();
  InputStream is=resource.getInputStream();
  Logger.getLogger().debug(String.format(""String_Node_Str"",fileName));
  Iterable<Object> allObjects=getYaml().loadAll(new BufferedReader(new InputStreamReader(is,""String_Node_Str"")));
  try {
    for (    Object data : allObjects) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)data;
      String key=((String)map.get(KEY)).trim();
      if (key.equals(""String_Node_Str"")) {
        continue;
      }
      if (""String_Node_Str"".equals(map.get(KEY))) {
        Logger.getLogger().debug(String.format(""String_Node_Str"",map.get(""String_Node_Str""),fileName));
        setBaseClassName((String)map.get(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(map.get(KEY))) {
        if (!platformDefined) {
          TestPlatform currentPlatform=TestPlatform.identifyPlatform((String)map.get(""String_Node_Str""));
          if (currentPlatform == null) {
            String dataFile=new File(fileName).getAbsolutePath();
            throw new IllegalArgumentException(""String_Node_Str"" + dataFile);
          }
          setPlatform(currentPlatform);
          platformDefined=true;
        }
      }
    }
    if (!platformDefined) {
      setPlatform(TestPlatform.WEB);
    }
    TestPlatform currentPlatform=getPlatform();
    is.close();
    InputStream newStream=resource.getInputStream();
    Iterable<Object> allObjects1=getYaml().loadAll(new BufferedReader(new InputStreamReader(newStream,""String_Node_Str"")));
    for (    Object data : allObjects1) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)data;
      String key=((String)map.get(KEY)).trim();
      if (key.equals(""String_Node_Str"")) {
        continue;
      }
      if (map.get(KEY).equals(""String_Node_Str"") || map.get(KEY).equals(""String_Node_Str"")) {
        continue;
      }
      appendKey(key);
      if (canHaveContainers(currentPlatform,key,map)) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<Object> allElements=(ArrayList<Object>)map.get(ELEMENTS);
        List<String> elementKeys=parseKeysForContainer(fileName,allElements);
        for (        String elementKey : elementKeys) {
          appendKey(key + DELIMITER + elementKey);
        }
      }
    }
    setProcessed(true);
  }
 catch (  Exception e) {
    Logger.getLogger().debug(String.format(""String_Node_Str"",resource.getFileName(),e.getLocalizedMessage()));
  }
}","@Override public void processPage(FileSystemResource resource) throws IOException {
  boolean platformDefined=false;
  String fileName=resource.getFileName();
  InputStream is=resource.getInputStream();
  Logger.getLogger().debug(String.format(""String_Node_Str"",fileName));
  Iterable<Object> allObjects=getYaml().loadAll(new BufferedReader(new InputStreamReader(is,""String_Node_Str"")));
  try {
    for (    Object data : allObjects) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)data;
      String key=((String)map.get(KEY)).trim();
      if (key.equals(""String_Node_Str"")) {
        continue;
      }
      if (""String_Node_Str"".equals(map.get(KEY))) {
        Logger.getLogger().debug(String.format(""String_Node_Str"",map.get(""String_Node_Str""),fileName));
        setBaseClassName((String)map.get(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(map.get(KEY))) {
        if (!platformDefined) {
          TestPlatform currentPlatform=TestPlatform.identifyPlatform((String)map.get(""String_Node_Str""));
          if (currentPlatform == null) {
            String dataFile=new File(fileName).getAbsolutePath();
            throw new IllegalArgumentException(""String_Node_Str"" + dataFile);
          }
          setPlatform(currentPlatform);
          platformDefined=true;
        }
      }
    }
    if (!platformDefined) {
      setPlatform(TestPlatform.WEB);
    }
    TestPlatform currentPlatform=getPlatform();
    is.close();
    InputStream newStream=resource.getInputStream();
    Iterable<Object> allObjects1=getYaml().loadAll(new BufferedReader(new InputStreamReader(newStream,""String_Node_Str"")));
    for (    Object data : allObjects1) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)data;
      String key=((String)map.get(KEY)).trim();
      if (""String_Node_Str"".equals(key)) {
        continue;
      }
      if (map.get(KEY).equals(""String_Node_Str"") || map.get(KEY).equals(""String_Node_Str"")) {
        continue;
      }
      appendKey(key);
      if (canHaveContainers(currentPlatform,key,map)) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<Object> allElements=(ArrayList<Object>)map.get(ELEMENTS);
        List<String> elementKeys=parseKeysForContainer(fileName,allElements);
        for (        String elementKey : elementKeys) {
          appendKey(key + DELIMITER + elementKey);
        }
      }
    }
    setProcessed(true);
  }
 catch (  Exception e) {
    Logger.getLogger().debug(String.format(""String_Node_Str"",resource.getFileName(),e.getLocalizedMessage()));
  }
}"
8420,"/** 
 * This is a public constructor to create an input stream and YAML instance for the input file.
 * @param fileName the name of the YAML data file.
 * @throws IOException
 */
public YamlV2Reader(String fileName) throws IOException {
  FileSystemResource resource=new FileSystemResource(fileName);
  processPage(resource);
}","/** 
 * This is a public constructor to create an input stream and YAML instance for the input file.
 * @param fileName the name of the YAML data file.
 * @throws IOException
 */
public YamlV2Reader(String fileName) throws IOException {
  super();
  FileSystemResource resource=new FileSystemResource(fileName);
  processPage(resource);
}"
8421,"/** 
 * @param request a  {@link RegistrationRequest} request which represents the basic information that is to be consumed bythe grid when it is registering a new node.
 * @param registry a  {@link Registry} object that represent's the Grid's registry.
 * @throws IOException
 */
public SeLionRemoteProxy(RegistrationRequest request,Registry registry) throws IOException {
  super(request,registry);
  StringBuffer info=new StringBuffer();
  maxSessionsAllowed=getUniqueSessionCount();
  machine=getRemoteHost().getHost();
  SimpleLoggerSettings loggerSettings=new SimpleLoggerSettings();
  loggerSettings.setUserLogFileName(machine + ""String_Node_Str"");
  loggerSettings.setLogsDir(SeLionGridConstants.LOGS_DIR);
  loggerSettings.setDevLevel(Level.OFF);
  loggerSettings.setLoggerName(SeLionRemoteProxy.class.getCanonicalName());
  loggerSettings.setClassName(SeLionRemoteProxy.class.getSimpleName());
  loggerSettings.setIdentifier(SeLionBuildInfo.getBuildValue(SeLionBuildProperty.SELION_VERSION));
  loggerSettings.setMaxFileCount(1);
  loggerSettings.setMaxFileSize(5);
  proxyLogger=SimpleLogger.getLogger(loggerSettings);
  info.append(""String_Node_Str"").append(machine);
  proxyLogger.info(info.toString());
  info=new StringBuffer();
  info.append(""String_Node_Str"");
  info.append(machine).append(""String_Node_Str"").append(maxSessionsAllowed).append(""String_Node_Str"");
  proxyLogger.info(info.toString());
}","/** 
 * @param request a  {@link RegistrationRequest} request which represents the basic information that is to be consumed bythe grid when it is registering a new node.
 * @param registry a  {@link Registry} object that represent's the Grid's registry.
 * @throws IOException
 */
public SeLionRemoteProxy(RegistrationRequest request,Registry registry) throws IOException {
  super(request,registry);
  StringBuffer info=new StringBuffer();
  maxSessionsAllowed=getUniqueSessionCount();
  machine=getRemoteHost().getHost();
  SimpleLoggerSettings loggerSettings=new SimpleLoggerSettings();
  loggerSettings.setUserLogFileName(machine + ""String_Node_Str"");
  loggerSettings.setLogsDir(SeLionGridConstants.LOGS_DIR);
  loggerSettings.setDevLevel(Level.OFF);
  loggerSettings.setLoggerName(machine);
  loggerSettings.setClassName(SeLionRemoteProxy.class.getSimpleName());
  loggerSettings.setIdentifier(SeLionBuildInfo.getBuildValue(SeLionBuildProperty.SELION_VERSION));
  loggerSettings.setMaxFileCount(1);
  loggerSettings.setMaxFileSize(5);
  proxyLogger=SimpleLogger.getLogger(loggerSettings);
  info.append(""String_Node_Str"").append(machine);
  proxyLogger.info(info.toString());
  info=new StringBuffer();
  info.append(""String_Node_Str"");
  info.append(machine).append(""String_Node_Str"").append(maxSessionsAllowed).append(""String_Node_Str"");
  proxyLogger.info(info.toString());
}"
8422,"@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
  if (Reporter.getCurrentTestResult() != null) {
    SeLionSoftAssert sa=(SeLionSoftAssert)Reporter.getCurrentTestResult().getAttribute(SeLionSoftAssert.SOFT_ASSERT_ATTRIBUTE_NAME);
    if (sa != null) {
      sa.assertAll();
    }
  }
}","@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    if (Reporter.getCurrentTestResult() != null) {
      SeLionSoftAssert sa=(SeLionSoftAssert)Reporter.getCurrentTestResult().getAttribute(SeLionSoftAssert.SOFT_ASSERT_ATTRIBUTE_NAME);
      if (sa != null) {
        sa.assertAll();
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
}"
8423,"@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
  SeLionSoftAssert softAsserts=new SeLionSoftAssert();
  testResult.setAttribute(SeLionSoftAssert.SOFT_ASSERT_ATTRIBUTE_NAME,softAsserts);
}","@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    SeLionSoftAssert softAsserts=new SeLionSoftAssert();
    testResult.setAttribute(SeLionSoftAssert.SOFT_ASSERT_ATTRIBUTE_NAME,softAsserts);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
}"
8424,"/** 
 * Executes when test case is finished<br> Identify if webtest wants to have session open, otherwise close session<br> <b>sample</b><br> &#064;webtest(browser=""*firefox"", <b>keepSessionOpen = true</b>)<br> Analyzes failure if any
 * @see org.testng.IInvokedMethodListener#afterInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
  if (!method.isTestMethod()) {
    return;
  }
  boolean isWebTestClass=method.getTestMethod().getInstance().getClass().getAnnotation(WebTest.class) != null;
  boolean isMobileTestClass=method.getTestMethod().getInstance().getClass().getAnnotation(MobileTest.class) != null;
  if ((isWebTestClass || isMobileTestClass) && !isHighPriority(method)) {
    return;
  }
  AbstractTestSession testSession=Grid.getTestSession();
  testSession.closeSession();
  logger.exiting();
}","/** 
 * Executes when test case is finished<br> Identify if webtest wants to have session open, otherwise close session<br> <b>sample</b><br> &#064;webtest(browser=""*firefox"", <b>keepSessionOpen = true</b>)<br> Analyzes failure if any
 * @see org.testng.IInvokedMethodListener#afterInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    if (!method.isTestMethod()) {
      return;
    }
    Class<?> cls=method.getTestMethod().getInstance().getClass();
    boolean isWebTestClass=cls.getAnnotation(WebTest.class) != null;
    boolean isMobileTestClass=cls.getAnnotation(MobileTest.class) != null;
    if ((isWebTestClass || isMobileTestClass) && !isHighPriority(method)) {
      return;
    }
    AbstractTestSession testSession=Grid.getTestSession();
    testSession.closeSession();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
  logger.exiting();
}"
8425,"/** 
 * Identifies which version and name of browser to start if it specified in &#064;webtest <br> <b>sample</b><br> &#064;webtest(<b>browser=""*firefox""</b>)<br>
 * @see org.testng.IInvokedMethodListener#beforeInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
  if (!method.isTestMethod()) {
    return;
  }
  boolean isWebTestClass=method.getTestMethod().getInstance().getClass().getAnnotation(WebTest.class) != null;
  boolean isMobileTestClass=method.getTestMethod().getInstance().getClass().getAnnotation(MobileTest.class) != null;
  if ((isWebTestClass || isMobileTestClass)) {
    if (isLowPriority(method)) {
      testSessionSharingRules(method);
    }
 else {
      return;
    }
  }
  AbstractTestSession testSession=TestSessionFactory.newInstance(method);
  Grid.getThreadLocalTestSession().set(testSession);
  InvokedMethodInformation methodInfo=TestNGUtils.getInvokedMethodInformation(method,testResult);
  testSession.initializeTestSession(methodInfo);
  if (!(testSession instanceof BasicTestSession)) {
    LocalGridManager.spawnLocalHub(testSession);
  }
  logger.exiting();
}","/** 
 * Identifies which version and name of browser to start if it specified in &#064;webtest <br> <b>sample</b><br> &#064;webtest(<b>browser=""*firefox""</b>)<br>
 * @see org.testng.IInvokedMethodListener#beforeInvocation(org.testng.IInvokedMethod,org.testng.ITestResult)
 */
@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  logger.entering(new Object[]{method,testResult});
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    if (!method.isTestMethod()) {
      return;
    }
    Class<?> cls=method.getTestMethod().getInstance().getClass();
    boolean isWebTestClass=cls.getAnnotation(WebTest.class) != null;
    boolean isMobileTestClass=cls.getAnnotation(MobileTest.class) != null;
    if ((isWebTestClass || isMobileTestClass)) {
      if (isLowPriority(method)) {
        testSessionSharingRules(method);
      }
 else {
        return;
      }
    }
    AbstractTestSession testSession=TestSessionFactory.newInstance(method);
    Grid.getThreadLocalTestSession().set(testSession);
    InvokedMethodInformation methodInfo=TestNGUtils.getInvokedMethodInformation(method,testResult);
    testSession.initializeTestSession(methodInfo);
    if (!(testSession instanceof BasicTestSession)) {
      LocalGridManager.spawnLocalHub(testSession);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
  logger.exiting();
}"
8426,"@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
}","@Override public void afterInvocation(IInvokedMethod method,ITestResult testResult){
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
}"
8427,"@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  if (ListenerManager.executeCurrentMethod(this) == false) {
    logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
    return;
  }
  Test testMethod=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
  if (testMethod != null) {
    String testName=testMethod.testName();
    if (StringUtils.isNotEmpty(testName)) {
      testResult.setAttribute(TEST_NAME_KEY,testName);
    }
  }
}","@Override public void beforeInvocation(IInvokedMethod method,ITestResult testResult){
  try {
    if (ListenerManager.executeCurrentMethod(this) == false) {
      logger.exiting(ListenerManager.THREAD_EXCLUSION_MSG);
      return;
    }
    Test testMethod=method.getTestMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);
    if (testMethod != null) {
      String testName=testMethod.testName();
      if (StringUtils.isNotEmpty(testName)) {
        testResult.setAttribute(TEST_NAME_KEY,testName);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
  }
}"
8428,"/** 
 * This method is used to insert test method details based on the methods suite, test, groups and class name.
 * @param suite - suite name of the test method.
 * @param test - test name of the test method.
 * @param packages - group name of the test method. If the test method doesn't belong to any group then we should pass null.
 * @param classname - class name of the test method.
 * @param result - ITestResult instance of the test method.
 */
public synchronized void insertTestMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  TestMethodInfo test1=new TestMethodInfo(suite,test,packages,classname,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningTest.add(test1);
    return;
  }
  for (  TestMethodInfo temp : runningTest) {
    if (temp.getResult().equals(result)) {
      runningTest.remove(temp);
      appendFile(jsonCompletedTest,test1.toJson().concat(""String_Node_Str""));
      break;
    }
  }
  logger.exiting();
}","/** 
 * This method is used to insert test method details based on the methods suite, test, groups and class name.
 * @param suite - suite name of the test method.
 * @param test - test name of the test method.
 * @param packages - group name of the test method. If the test method doesn't belong to any group then we should pass null.
 * @param classname - class name of the test method.
 * @param result - ITestResult instance of the test method.
 */
public synchronized void insertTestMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  TestMethodInfo test1=new TestMethodInfo(suite,test,packages,classname,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningTest.add(test1);
    return;
  }
  for (  TestMethodInfo temp : runningTest) {
    if (temp.getResult().getMethod().equals(result.getMethod())) {
      runningTest.remove(temp);
      appendFile(jsonCompletedTest,test1.toJson().concat(""String_Node_Str""));
      break;
    }
  }
  logger.exiting();
}"
8429,"/** 
 * This method is used to insert configuration method details based on the suite, test, groups and class name.
 * @param suite - suite name of the configuration method.
 * @param test - test name of the configuration method.
 * @param packages - group name of the configuration method. If the configuration method doesn't belong to any group then we should pass null.
 * @param classname - class name of the configuration method.
 * @param result - ITestResult instance of the configuration method.
 */
public synchronized void insertConfigMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  String type=null;
  if (result.getMethod().isBeforeSuiteConfiguration()) {
    type=BEFORE_SUITE;
  }
 else   if (result.getMethod().isBeforeTestConfiguration()) {
    type=BEFORE_TEST;
  }
 else   if (result.getMethod().isBeforeGroupsConfiguration()) {
    type=BEFORE_GROUP;
  }
 else   if (result.getMethod().isBeforeClassConfiguration()) {
    type=BEFORE_CLASS;
  }
 else   if (result.getMethod().isBeforeMethodConfiguration()) {
    type=BEFORE_METHOD;
  }
 else   if (result.getMethod().isAfterSuiteConfiguration()) {
    type=AFTER_SUITE;
  }
 else   if (result.getMethod().isAfterTestConfiguration()) {
    type=AFTER_TEST;
  }
 else   if (result.getMethod().isAfterGroupsConfiguration()) {
    type=AFTER_GROUP;
  }
 else   if (result.getMethod().isAfterClassConfiguration()) {
    type=AFTER_CLASS;
  }
 else   if (result.getMethod().isAfterMethodConfiguration()) {
    type=AFTER_METHOD;
  }
  ConfigMethodInfo config1=new ConfigMethodInfo(suite,test,packages,classname,type,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningConfig.add(config1);
    return;
  }
  for (  ConfigMethodInfo temp : runningConfig) {
    if (temp.getResult().equals(result)) {
      runningConfig.remove(temp);
      break;
    }
  }
  appendFile(jsonCompletedConfig,config1.toJson().concat(""String_Node_Str""));
  logger.exiting();
}","/** 
 * This method is used to insert configuration method details based on the suite, test, groups and class name.
 * @param suite - suite name of the configuration method.
 * @param test - test name of the configuration method.
 * @param packages - group name of the configuration method. If the configuration method doesn't belong to any group then we should pass null.
 * @param classname - class name of the configuration method.
 * @param result - ITestResult instance of the configuration method.
 */
public synchronized void insertConfigMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  String type=null;
  if (result.getMethod().isBeforeSuiteConfiguration()) {
    type=BEFORE_SUITE;
  }
 else   if (result.getMethod().isBeforeTestConfiguration()) {
    type=BEFORE_TEST;
  }
 else   if (result.getMethod().isBeforeGroupsConfiguration()) {
    type=BEFORE_GROUP;
  }
 else   if (result.getMethod().isBeforeClassConfiguration()) {
    type=BEFORE_CLASS;
  }
 else   if (result.getMethod().isBeforeMethodConfiguration()) {
    type=BEFORE_METHOD;
  }
 else   if (result.getMethod().isAfterSuiteConfiguration()) {
    type=AFTER_SUITE;
  }
 else   if (result.getMethod().isAfterTestConfiguration()) {
    type=AFTER_TEST;
  }
 else   if (result.getMethod().isAfterGroupsConfiguration()) {
    type=AFTER_GROUP;
  }
 else   if (result.getMethod().isAfterClassConfiguration()) {
    type=AFTER_CLASS;
  }
 else   if (result.getMethod().isAfterMethodConfiguration()) {
    type=AFTER_METHOD;
  }
  ConfigMethodInfo config1=new ConfigMethodInfo(suite,test,packages,classname,type,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningConfig.add(config1);
    return;
  }
  for (  ConfigMethodInfo temp : runningConfig) {
    if (temp.getResult().getMethod().equals(result.getMethod())) {
      runningConfig.remove(temp);
      break;
    }
  }
  appendFile(jsonCompletedConfig,config1.toJson().concat(""String_Node_Str""));
  logger.exiting();
}"
8430,"/** 
 * A method that helps in closing off the current session.
 */
public final void closeSession(){
  logger.entering();
  if (isStarted() && Grid.driver() != null) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      ITestResult testResult=Reporter.getCurrentTestResult();
      if (testResult.getStatus() == ITestResult.FAILURE && (testResult.getThrowable() instanceof WebDriverException || testResult.getThrowable() instanceof AssertionError)) {
        warnUserOfTestFailures(testResult);
      }
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  this.isStarted=false;
  logger.exiting();
}","/** 
 * A method that helps in closing off the current session.
 */
public final void closeSession(){
  logger.entering();
  ITestResult testResult=Reporter.getCurrentTestResult();
  if (isStarted() && Grid.driver() != null) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    try {
      if (testResult.getStatus() == ITestResult.FAILURE && (testResult.getThrowable() instanceof WebDriverException || testResult.getThrowable() instanceof AssertionError)) {
        warnUserOfTestFailures(testResult);
      }
      Grid.driver().quit();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    }
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  this.isStarted=false;
  testResult.setAttribute(JsonRuntimeReporterHelper.IS_COMPLETED,true);
  logger.exiting();
}"
8431,"/** 
 * This method is used to insert test method details based on the methods suite, test, groups and class name.
 * @param suite - suite name of the test method.
 * @param test - test name of the test method.
 * @param packages - group name of the test method. If the test method doesn't belong to any group then we should pass null.
 * @param classname - class name of the test method.
 * @param result - ITestResult instance of the test method.
 */
public synchronized void insertTestMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  TestMethodInfo test1=new TestMethodInfo(suite,test,packages,classname,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningTest.add(test1);
    return;
  }
  for (  TestMethodInfo temp : runningTest) {
    if (temp.getResult().getMethod().equals(result.getMethod())) {
      runningTest.remove(temp);
      appendFile(jsonCompletedTest,test1.toJson().concat(""String_Node_Str""));
      break;
    }
  }
  logger.exiting();
}","/** 
 * This method is used to insert test method details based on the methods suite, test, groups and class name.
 * @param suite - suite name of the test method.
 * @param test - test name of the test method.
 * @param packages - group name of the test method. If the test method doesn't belong to any group then we should pass null.
 * @param classname - class name of the test method.
 * @param result - ITestResult instance of the test method.
 */
public synchronized void insertTestMethod(String suite,String test,String packages,String classname,ITestResult result){
  logger.entering(new Object[]{suite,test,packages,classname,result});
  TestMethodInfo test1=new TestMethodInfo(suite,test,packages,classname,result);
  if (result.getStatus() == ITestResult.STARTED) {
    runningTest.add(test1);
    return;
  }
  for (  TestMethodInfo temp : runningTest) {
    if (temp.getResult().getMethod().equals(result.getMethod())) {
      runningTest.remove(temp);
      completedTest.add(test1);
      break;
    }
  }
  logger.exiting();
}"
8432,"public JsonArray getCompletedTestContent() throws JsonParseException {
  return loadJSONArray(jsonCompletedTest);
}","/** 
 * Get list of test methods.
 * @return A list of {@link TestMethodInfo}.
 */
public List<TestMethodInfo> getCompletedTestContent(){
  return completedTest;
}"
8433,"/** 
 * This method will generate local Configuration summary by fetching the details from ReportDataGenerator
 * @param suiteName - suite name of the test method.
 * @param testName - test name of the test method.
 */
public void generateLocalConfigSummary(String suiteName,String testName){
  logger.entering(new Object[]{suiteName,testName});
  try {
    Map<String,String> testLocalConfigValues=ConfigSummaryData.getLocalConfigSummary(testName);
    JsonObject json=new JsonObject();
    if (testLocalConfigValues == null) {
      json.addProperty(ReporterDateFormatter.CURRENTDATE,ReporterDateFormatter.getISO8601String(new Date()));
    }
 else {
      for (      Entry<String,String> temp : testLocalConfigValues.entrySet()) {
        json.addProperty(temp.getKey(),temp.getValue());
      }
    }
    json.addProperty(""String_Node_Str"",suiteName);
    json.addProperty(""String_Node_Str"",testName);
    this.testJsonLocalConfigSummary.add(json);
  }
 catch (  JsonParseException e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new ReporterException(e);
  }
  logger.exiting();
}","/** 
 * This method will generate local Configuration summary by fetching the details from ReportDataGenerator
 * @param suiteName - suite name of the test method.
 * @param testName - test name of the test method.
 */
public void generateLocalConfigSummary(String suiteName,String testName){
  logger.entering(new Object[]{suiteName,testName});
  try {
    Map<String,String> testLocalConfigValues=ConfigSummaryData.getLocalConfigSummary(testName);
    JsonObject json=new JsonObject();
    if (testLocalConfigValues == null) {
      json.addProperty(ReporterDateFormatter.CURRENTDATE,ReporterDateFormatter.getISO8601String(new Date()));
    }
 else {
      for (      Entry<String,String> temp : testLocalConfigValues.entrySet()) {
        json.addProperty(temp.getKey(),temp.getValue());
      }
    }
    json.addProperty(""String_Node_Str"",suiteName);
    json.addProperty(""String_Node_Str"",testName);
synchronized (this) {
      this.testJsonLocalConfigSummary.add(json);
    }
  }
 catch (  JsonParseException e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new ReporterException(e);
  }
  logger.exiting();
}"
8434,"/** 
 * Generate the final report.json from the completed test and completed configuration temporary files.
 * @param outputDirectory - output directory
 * @param bForceWrite - setting true will forcibly generate the report.json
 */
public synchronized void writeJSON(String outputDirectory,boolean bForceWrite){
  logger.entering(new Object[]{outputDirectory,bForceWrite});
  long currentTime=System.currentTimeMillis();
  if (!bForceWrite) {
    if (currentTime - previousTime < ONE_MINUTE) {
      return;
    }
  }
  previousTime=currentTime;
  generateReports(outputDirectory);
  logger.exiting();
}","/** 
 * Generate the final report.json from the completed test and completed configuration temporary files.
 * @param outputDirectory - output directory
 * @param bForceWrite - setting true will forcibly generate the report.json
 */
public synchronized void writeJSON(String outputDirectory,boolean bForceWrite){
  logger.entering(new Object[]{outputDirectory,bForceWrite});
  long currentTime=System.currentTimeMillis();
  if (!bForceWrite) {
    if (currentTime - previousTime < ONE_MINUTE) {
      return;
    }
  }
  previousTime=currentTime;
  parseCompletedTest();
  generateReports(outputDirectory);
  logger.exiting();
}"
8435,"/** 
 * Construct the JSON report for report generation
 * @return
 */
private JsonObject buildJSONReport(){
  logger.entering();
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  JsonArray testObjects=loadJSONArray(jsonCompletedTest);
  for (  TestMethodInfo temp : runningTest) {
    testObjects.add(gson.fromJson(temp.toJson(),JsonElement.class));
  }
  JsonArray configObjects=loadJSONArray(jsonCompletedConfig);
  for (  ConfigMethodInfo temp : runningConfig) {
    configObjects.add(gson.fromJson(temp.toJson(),JsonElement.class));
  }
  JsonObject summary=new JsonObject();
  summary.add(""String_Node_Str"",getReportSummaryCounts(testObjects));
  summary.add(""String_Node_Str"",getReportSummaryCounts(configObjects));
  JsonElement reportMetadata=gson.fromJson(ReporterConfigMetadata.toJsonAsString(),JsonElement.class);
  JsonObject reporter=new JsonObject();
  reporter.add(""String_Node_Str"",summary);
  reporter.add(""String_Node_Str"",testObjects);
  reporter.add(""String_Node_Str"",configObjects);
  reporter.add(""String_Node_Str"",generateConfigSummary());
  reporter.add(""String_Node_Str"",testJsonLocalConfigSummary);
  reporter.add(""String_Node_Str"",reportMetadata);
  logger.exiting(reporter);
  return reporter;
}","/** 
 * Construct the JSON report for report generation
 * @return
 */
private JsonObject buildJSONReport(){
  logger.entering();
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  JsonArray testObjects=loadJSONArray(jsonCompletedTest);
  for (  TestMethodInfo temp : completedTest) {
    testObjects.add(gson.fromJson(temp.toJson(),JsonElement.class));
  }
  for (  TestMethodInfo temp : runningTest) {
    testObjects.add(gson.fromJson(temp.toJson(),JsonElement.class));
  }
  JsonArray configObjects=loadJSONArray(jsonCompletedConfig);
  for (  ConfigMethodInfo temp : runningConfig) {
    configObjects.add(gson.fromJson(temp.toJson(),JsonElement.class));
  }
  JsonObject summary=new JsonObject();
  summary.add(""String_Node_Str"",getReportSummaryCounts(testObjects));
  summary.add(""String_Node_Str"",getReportSummaryCounts(configObjects));
  JsonElement reportMetadata=gson.fromJson(ReporterConfigMetadata.toJsonAsString(),JsonElement.class);
  JsonObject reporter=new JsonObject();
  reporter.add(""String_Node_Str"",summary);
  reporter.add(""String_Node_Str"",testObjects);
  reporter.add(""String_Node_Str"",configObjects);
  reporter.add(""String_Node_Str"",generateConfigSummary());
  reporter.add(""String_Node_Str"",testJsonLocalConfigSummary);
  reporter.add(""String_Node_Str"",reportMetadata);
  logger.exiting(reporter);
  return reporter;
}"
8436,"public JsonArray getCompletedConfigContent() throws JsonParseException {
  return loadJSONArray(jsonCompletedConfig);
}","/** 
 * Get list of configuration methods as a   {@link JsonArray}.
 * @return A {@link JsonArray}.
 */
public JsonArray getCompletedConfigContent(){
  return loadJSONArray(jsonCompletedConfig);
}"
8437,"/** 
 * This method generate the JSON string for the instance. GSON builder helps to build JSON string and it will exclude the static and transient variable during generation.
 * @return - JSON string
 */
public String toJson(){
  logger.entering();
  Gson gson=new GsonBuilder().setPrettyPrinting().excludeFieldsWithModifiers(Modifier.STATIC,Modifier.TRANSIENT).create();
  String json=gson.toJson(this);
  logger.exiting(json);
  return json;
}","/** 
 * This method generate the JSON string for the instance. GSON builder helps to build JSON string and it will exclude the static and transient variable during generation.
 * @return - JSON string
 */
public String toJson(){
  logger.entering();
  parseResults();
  Gson gson=new GsonBuilder().setPrettyPrinting().excludeFieldsWithModifiers(Modifier.STATIC,Modifier.TRANSIENT).create();
  String json=gson.toJson(this);
  logger.exiting(json);
  return json;
}"
8438,"public ITestResult getResult(){
  return result;
}","/** 
 * Gets the current test result.
 * @return An {@link ITestResult}.
 */
public ITestResult getResult(){
  return result;
}"
8439,"public MethodInfo(String suite,String test,String packages,String classname,ITestResult result){
  this.suite=suite;
  this.test=test;
  this.packageInfo=packages;
  this.className=classname;
  this.result=result;
  this.methodName=result.getName();
  if (result.getStatus() == ITestResult.SUCCESS) {
    this.status=""String_Node_Str"";
  }
 else   if (result.getStatus() == ITestResult.FAILURE) {
    this.status=""String_Node_Str"";
  }
 else   if (result.getStatus() == ITestResult.SKIP) {
    this.status=""String_Node_Str"";
  }
 else   if (result.getStatus() == ITestResult.STARTED) {
    this.status=""String_Node_Str"";
  }
  Calendar c=Calendar.getInstance();
  c.setTimeInMillis(result.getStartMillis());
  this.startTime=ReporterDateFormatter.getISO8601String(c.getTime());
  c.setTimeInMillis(result.getEndMillis());
  this.endTime=ReporterDateFormatter.getISO8601String(c.getTime());
  if (result.getMethod().getDescription() != null) {
    this.description=result.getMethod().getDescription();
  }
  if (result.getThrowable() != null) {
    this.exception=result.getThrowable().getClass().toString() + ""String_Node_Str"" + result.getThrowable().getLocalizedMessage();
    this.stacktrace=getStackTraceInfo(result.getThrowable());
  }
  loadMethodInfo(result);
}","/** 
 * Constructor.
 * @param suite name of the suite
 * @param test name of the test
 * @param packages name of the package without class name
 * @param classname name of the class without package name
 * @param result ITestResult of the method which need to be reported
 */
public MethodInfo(String suite,String test,String packages,String classname,ITestResult result){
  this.suite=suite;
  this.test=test;
  this.packageInfo=packages;
  this.className=classname;
  this.result=result;
  this.methodName=result.getName();
}"
8440,"/** 
 * A method that helps in closing off the current session.
 */
public final void closeSession(){
  logger.entering();
  new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
  if (Grid.driver() != null) {
    Grid.driver().quit();
    Grid.getThreadLocalWebDriver().set(null);
    Grid.getThreadLocalTestSession().set(null);
  }
  logger.exiting();
}","/** 
 * A method that helps in closing off the current session.
 */
public final void closeSession(){
  logger.entering();
  if ((isStarted()) && (Grid.driver() != null)) {
    new SauceLabsHelper().embedSauceLabsJobUrlToTestReport();
    Grid.driver().quit();
  }
  Grid.getThreadLocalWebDriver().set(null);
  Grid.getThreadLocalTestSession().set(null);
  this.isStarted=false;
  logger.exiting();
}"
8441,"@Test(groups=""String_Node_Str"",expectedExceptions={RuntimeException.class}) @WebTest(browser=""String_Node_Str"") public void testWrongBrowser(){
  fail(""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",expectedExceptions={IllegalArgumentException.class}) @WebTest(browser=""String_Node_Str"") public void testWrongBrowser(){
  Grid.driver().executeScript(""String_Node_Str"",""String_Node_Str"");
  fail(""String_Node_Str"");
}"
8442,"/** 
 * this method is used to download a file from the specified url
 * @param artifactUrl - url of the file to be downloaded.
 * @param checksum - checksum to downloaded file.
 * @return the downloaded file path.
 */
public static String downloadFile(String artifactUrl,String checksum){
  LOGGER.entering(new Object[]{artifactUrl,checksum});
  Preconditions.checkArgument(artifactUrl != null && !artifactUrl.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(checksum != null && !checksum.isEmpty(),""String_Node_Str"");
  isValidFileType(artifactUrl);
  String algorithm=null;
  if (isValidSHA1(checksum)) {
    algorithm=""String_Node_Str"";
  }
 else   if (isValidMD5(checksum)) {
    algorithm=""String_Node_Str"";
  }
  String result=downloadFile(artifactUrl,checksum,algorithm);
  LOGGER.exiting(result);
  return result;
}","/** 
 * this method is used to download a file from the specified url
 * @param artifactUrl - url of the file to be downloaded.
 * @param checksum - checksum to downloaded file.
 * @return the downloaded file path.
 */
static String downloadFile(String artifactUrl,String checksum){
  LOGGER.entering(new Object[]{artifactUrl,checksum});
  Preconditions.checkArgument(artifactUrl != null && !artifactUrl.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(checksum != null && !checksum.isEmpty(),""String_Node_Str"");
  isValidFileType(artifactUrl);
  String algorithm=null;
  if (isValidSHA1(checksum)) {
    algorithm=""String_Node_Str"";
  }
 else   if (isValidMD5(checksum)) {
    algorithm=""String_Node_Str"";
  }
  String result=downloadFile(artifactUrl,checksum,algorithm);
  LOGGER.exiting(result);
  return result;
}"
8443,"private static boolean checkLocalFile(String filename,String checksum,String algorithm){
  InputStream is=null;
  MessageDigest md=null;
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  try {
    md=MessageDigest.getInstance(algorithm);
  }
 catch (  NoSuchAlgorithmException e1) {
  }
  try {
    int bytesRead;
    is=new FileInputStream(filename);
    byte[] buf=new byte[1024];
    while ((bytesRead=is.read(buf)) != -1) {
      md.update(buf,0,bytesRead);
    }
    byte[] mdbytes=md.digest();
    for (int i=0; i < mdbytes.length; i++) {
      sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100,16).substring(1));
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (checksum.equals(sb.toString())) {
    LOGGER.info(""String_Node_Str"" + filename);
    return true;
  }
  return false;
}","private static boolean checkLocalFile(String filename,String checksum,String algorithm){
  InputStream is=null;
  MessageDigest md=null;
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  try {
    md=MessageDigest.getInstance(algorithm);
  }
 catch (  NoSuchAlgorithmException e1) {
  }
  try {
    int bytesRead;
    is=new FileInputStream(filename);
    byte[] buf=new byte[1024];
    while ((bytesRead=is.read(buf)) != -1) {
      md.update(buf,0,bytesRead);
    }
    byte[] mdbytes=md.digest();
    for (int i=0; i < mdbytes.length; i++) {
      sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100,16).substring(1));
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (checksum.equals(sb.toString())) {
    LOGGER.fine(""String_Node_Str"" + filename);
    return true;
  }
  return false;
}"
8444,"/** 
 * This method will check whether the download.json file got modified and download all the files in download.json
 */
public static void checkForDownloads(){
  LOGGER.entering();
  File downloadFile=new File(SeLionGridConstants.DOWNLOAD_JSON_FILE);
  if (lastModifiedTime == downloadFile.lastModified()) {
    return;
  }
  lastModifiedTime=downloadFile.lastModified();
  cleanup();
  LOGGER.info(""String_Node_Str"" + Platform.getCurrent());
  List<URLChecksumEntity> artifactDetails=new ArrayList<ArtifactDetails.URLChecksumEntity>();
  try {
    artifactDetails=ArtifactDetails.getArtifactDetailsForCurrentPlatform(downloadFile);
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
  for (Iterator<URLChecksumEntity> iterator=artifactDetails.iterator(); iterator.hasNext(); ) {
    URLChecksumEntity entity=(URLChecksumEntity)iterator.next();
    String url=entity.getUrl().getValue();
    String checksum=entity.getChecksum().getValue();
    StringBuilder msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(url).append(""String_Node_Str"");
    msg.append(""String_Node_Str"").append(checksum).append(""String_Node_Str"");
    LOGGER.info(msg.toString());
    String result;
    while ((result=downloadFile(url,checksum)) == null) {
      LOGGER.warning(""String_Node_Str"" + url + ""String_Node_Str"");
    }
    files.add(result);
    if (!result.endsWith(""String_Node_Str"")) {
      List<String> extractedFileList=FileExtractor.extractArchive(result);
      files.addAll(extractedFileList);
    }
  }
  LOGGER.info(""String_Node_Str"" + files.toString());
  LOGGER.exiting();
}","/** 
 * This method will check whether the download.json file got modified and download all the files in download.json
 */
static void checkForDownloads(){
  LOGGER.entering();
  File downloadFile=new File(SeLionGridConstants.DOWNLOAD_JSON_FILE);
  if (lastModifiedTime == downloadFile.lastModified()) {
    return;
  }
  lastModifiedTime=downloadFile.lastModified();
  cleanup();
  LOGGER.info(""String_Node_Str"" + Platform.getCurrent());
  List<URLChecksumEntity> artifactDetails=new ArrayList<ArtifactDetails.URLChecksumEntity>();
  try {
    artifactDetails=ArtifactDetails.getArtifactDetailsForCurrentPlatform(downloadFile);
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
  for (Iterator<URLChecksumEntity> iterator=artifactDetails.iterator(); iterator.hasNext(); ) {
    URLChecksumEntity entity=(URLChecksumEntity)iterator.next();
    String url=entity.getUrl().getValue();
    String checksum=entity.getChecksum().getValue();
    StringBuilder msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(url).append(""String_Node_Str"");
    msg.append(""String_Node_Str"").append(checksum).append(""String_Node_Str"");
    LOGGER.fine(msg.toString());
    String result;
    while ((result=downloadFile(url,checksum)) == null) {
      LOGGER.warning(""String_Node_Str"" + url + ""String_Node_Str"");
    }
    files.add(result);
    if (!result.endsWith(""String_Node_Str"")) {
      List<String> extractedFileList=FileExtractor.extractArchive(result);
      files.addAll(extractedFileList);
    }
  }
  LOGGER.fine(""String_Node_Str"" + files.toString());
  LOGGER.exiting();
}"
8445,"/** 
 * This method is used to cleanup all the files already downloaded
 */
public static void cleanup(){
  LOGGER.entering();
  for (  String temp : files) {
    new File(temp).delete();
  }
  files.clear();
  LOGGER.exiting();
}","/** 
 * This method is used to cleanup all the files already downloaded
 */
static void cleanup(){
  LOGGER.entering();
  for (  String temp : files) {
    new File(temp).delete();
  }
  files.clear();
  LOGGER.exiting();
}"
8446,"private static String getFileNameFromPath(String name){
  String[] path=name.split(""String_Node_Str"");
  String s=path[path.length - 1];
  return s;
}","static String getFileNameFromPath(String name){
  String[] path=name.split(""String_Node_Str"");
  String s=path[path.length - 1];
  return s;
}"
8447,"public static List<String> extractArchive(String archiveFile){
  LOGGER.entering(archiveFile);
  LOGGER.info(""String_Node_Str"" + archiveFile);
  String archiveStreamType;
  boolean isCompressedArchive=false;
  String compressName=null;
  String outputArchiveName=null;
  List<String> files=new ArrayList<String>();
  if (archiveFile.endsWith(""String_Node_Str"")) {
    isCompressedArchive=true;
    compressName=CompressorStreamFactory.BZIP2;
    outputArchiveName=archiveFile.substring(0,archiveFile.lastIndexOf('.'));
    LOGGER.fine(""String_Node_Str"" + outputArchiveName);
  }
  if (isCompressedArchive) {
    LOGGER.fine(""String_Node_Str"");
    CompressorInputStream is;
    try {
      is=new CompressorStreamFactory().createCompressorInputStream(compressName,new FileInputStream(archiveFile));
      FileOutputStream decompressStream=new FileOutputStream(outputArchiveName);
      IOUtils.copy(is,decompressStream);
      is.close();
      decompressStream.close();
      archiveFile=outputArchiveName;
      files.add(outputArchiveName);
    }
 catch (    CompressorException|IOException e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  archiveStreamType=ArchiveStreamFactory.ZIP;
  if (archiveFile.endsWith(""String_Node_Str"")) {
    archiveStreamType=ArchiveStreamFactory.TAR;
  }
  OutputStream outputFileStream=null;
  List<String> executableNameList=new ArrayList<String>();
  LOGGER.fine(""String_Node_Str"" + archiveFile);
  executableNameList=ProcessNames.getExecutableNames();
  LOGGER.fine(""String_Node_Str"" + executableNameList.toString());
  ArchiveInputStream archiveStream=null;
  try {
    archiveStream=new ArchiveStreamFactory().createArchiveInputStream(archiveStreamType,new FileInputStream(archiveFile));
    ArchiveEntry entry;
    while ((entry=archiveStream.getNextEntry()) != null) {
      String fileNameInEntry=getFileNameFromPath(entry.getName());
      if (!entry.isDirectory() && executableNameList.contains(fileNameInEntry.toLowerCase())) {
        String filename=SeLionGridConstants.SELION_HOME_DIR + getFileNameFromPath(entry.getName());
        File outputFile=new File(filename);
        if (outputFile.exists()) {
          outputFile.delete();
        }
        outputFile.createNewFile();
        LOGGER.fine(String.format(""String_Node_Str"",outputFile.getAbsolutePath()));
        outputFileStream=new FileOutputStream(outputFile);
        IOUtils.copy(archiveStream,outputFileStream);
        LOGGER.fine(""String_Node_Str"" + outputFile.canExecute());
        if (!outputFile.canExecute()) {
          LOGGER.fine(""String_Node_Str"");
          outputFile.setExecutable(true);
        }
        files.add(filename);
        break;
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    try {
      if (archiveStream != null) {
        archiveStream.close();
      }
      if (outputFileStream != null) {
        outputFileStream.close();
      }
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  LOGGER.exiting(files.toString());
  return files;
}","static List<String> extractArchive(String archiveFile){
  LOGGER.entering(archiveFile);
  LOGGER.info(""String_Node_Str"" + archiveFile);
  String archiveStreamType;
  boolean isCompressedArchive=false;
  String compressName=null;
  String outputArchiveName=null;
  List<String> files=new ArrayList<String>();
  if (archiveFile.endsWith(""String_Node_Str"")) {
    isCompressedArchive=true;
    compressName=CompressorStreamFactory.BZIP2;
    outputArchiveName=archiveFile.substring(0,archiveFile.lastIndexOf('.'));
    LOGGER.fine(""String_Node_Str"" + outputArchiveName);
  }
  if (isCompressedArchive) {
    LOGGER.fine(""String_Node_Str"");
    CompressorInputStream is;
    try {
      is=new CompressorStreamFactory().createCompressorInputStream(compressName,new FileInputStream(archiveFile));
      FileOutputStream decompressStream=new FileOutputStream(outputArchiveName);
      IOUtils.copy(is,decompressStream);
      is.close();
      decompressStream.close();
      archiveFile=outputArchiveName;
      files.add(outputArchiveName);
    }
 catch (    CompressorException|IOException e) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  archiveStreamType=ArchiveStreamFactory.ZIP;
  if (archiveFile.endsWith(""String_Node_Str"")) {
    archiveStreamType=ArchiveStreamFactory.TAR;
  }
  OutputStream outputFileStream=null;
  LOGGER.fine(""String_Node_Str"" + archiveFile);
  List<String> executableNameList=FileExtractor.getExecutableNames();
  LOGGER.fine(""String_Node_Str"" + executableNameList.toString());
  ArchiveInputStream archiveStream=null;
  try {
    archiveStream=new ArchiveStreamFactory().createArchiveInputStream(archiveStreamType,new FileInputStream(archiveFile));
    ArchiveEntry entry;
    while ((entry=archiveStream.getNextEntry()) != null) {
      String fileNameInEntry=getFileNameFromPath(entry.getName());
      if (!entry.isDirectory() && executableNameList.contains(fileNameInEntry.toLowerCase())) {
        String filename=SeLionGridConstants.SELION_HOME_DIR + getFileNameFromPath(entry.getName());
        File outputFile=new File(filename);
        if (outputFile.exists()) {
          outputFile.delete();
        }
        outputFile.createNewFile();
        LOGGER.fine(String.format(""String_Node_Str"",outputFile.getAbsolutePath()));
        outputFileStream=new FileOutputStream(outputFile);
        IOUtils.copy(archiveStream,outputFileStream);
        LOGGER.fine(""String_Node_Str"" + outputFile.canExecute());
        if (!outputFile.canExecute()) {
          LOGGER.fine(""String_Node_Str"");
          outputFile.setExecutable(true);
        }
        files.add(filename);
        break;
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    try {
      if (archiveStream != null) {
        archiveStream.close();
      }
      if (outputFileStream != null) {
        outputFileStream.close();
      }
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  LOGGER.exiting(files.toString());
  return files;
}"
8448,"private FileExtractor(){
}","FileExtractor(){
}"
8449,"/** 
 * Set the classpath for the child process. Adds all jars from CWD and SELION_HOME_DIR. Does not recurse into sub directories. Filters out duplicates.
 * @param the cmdLine we are building
 * @return the changed {@link CommandLine}
 */
private CommandLine addClassPathToCommanLine(CommandLine cmdLine){
  Set<String> uniqueClassPathEntries=new LinkedHashSet<String>();
  Collection<File> homeFiles=FileUtils.listFiles(new File(SELION_HOME_DIR),new String[]{""String_Node_Str""},false);
  for (  File file : homeFiles) {
    uniqueClassPathEntries.add(file.getAbsolutePath());
  }
  Collection<File> localFiles=FileUtils.listFiles(new File(System.getProperty(""String_Node_Str"")),new String[]{""String_Node_Str""},false);
  for (  File file : localFiles) {
    uniqueClassPathEntries.add(file.getName());
  }
  String classpath=System.getProperty(""String_Node_Str"");
  uniqueClassPathEntries.addAll(Arrays.asList(classpath.split(""String_Node_Str"")));
  StringBuffer buf=new StringBuffer();
  for (  String s : uniqueClassPathEntries) {
    buf.append(s + File.pathSeparatorChar);
  }
  buf.deleteCharAt(buf.length() - 1);
  cmdLine.addArgument(""String_Node_Str"");
  cmdLine.addArgument(buf.toString());
  cmdLine.addArgument(SeLionGridLauncher.class.getName());
  return cmdLine;
}","/** 
 * Set the classpath for the child process. Adds all jars from CWD and SELION_HOME_DIR. Does not recurse into sub directories. Filters out duplicates.
 * @param the cmdLine we are building
 * @return the changed {@link CommandLine}
 */
private CommandLine addClassPathToCommanLine(CommandLine cmdLine){
  Set<String> uniqueClassPathEntries=new LinkedHashSet<String>();
  Collection<File> homeFiles=FileUtils.listFiles(new File(SELION_HOME_DIR),new String[]{""String_Node_Str""},false);
  for (  File file : homeFiles) {
    uniqueClassPathEntries.add(file.getAbsolutePath());
  }
  Collection<File> localFiles=FileUtils.listFiles(new File(System.getProperty(""String_Node_Str"")),new String[]{""String_Node_Str""},false);
  for (  File file : localFiles) {
    uniqueClassPathEntries.add(file.getName());
  }
  String classpath=System.getProperty(""String_Node_Str"");
  uniqueClassPathEntries.addAll(Arrays.asList(classpath.split(SystemUtils.PATH_SEPARATOR)));
  StringBuffer buf=new StringBuffer();
  for (  String s : uniqueClassPathEntries) {
    buf.append(s + File.pathSeparatorChar);
  }
  buf.deleteCharAt(buf.length() - 1);
  cmdLine.addArgument(""String_Node_Str"");
  cmdLine.addArgument(buf.toString());
  cmdLine.addArgument(SeLionGridLauncher.class.getName());
  return cmdLine;
}"
8450,"public static void main(String[] args) throws IOException, InterruptedException {
  List<String> commands=Arrays.asList(args);
  JarSpawner spawner=new JarSpawner();
  spawner.initialSetup();
  if (commands.contains(SELION_CONFIG_ARG)) {
    ConfigParser.setConfigFile(commands.get(commands.indexOf(SELION_CONFIG_ARG) + 1));
  }
  long interval=ConfigParser.getInstance().getLong(""String_Node_Str"",60000L);
  LOGGER.info(""String_Node_Str"" + interval + ""String_Node_Str"");
  while (true) {
    FileDownloader.checkForDownloads();
    if (commands.contains(HELP_ARG) || commands.contains(""String_Node_Str"")) {
      spawner.continuouslyRestart(commands,100,true);
      spawner.printUsageInfo();
      return;
    }
    spawner.continuouslyRestart(commands,interval,false);
    LOGGER.info(""String_Node_Str"");
  }
}","public static void main(String[] args) throws IOException, InterruptedException {
  List<String> commands=Arrays.asList(args);
  JarSpawner spawner=new JarSpawner();
  spawner.initialSetup();
  if (commands.contains(SELION_CONFIG_ARG)) {
    ConfigParser.setConfigFile(commands.get(commands.indexOf(SELION_CONFIG_ARG) + 1));
  }
  long interval=ConfigParser.parse().getLong(""String_Node_Str"",60000L);
  LOGGER.info(""String_Node_Str"" + interval + ""String_Node_Str"");
  while (true) {
    FileDownloader.checkForDownloads();
    if (commands.contains(HELP_ARG) || commands.contains(""String_Node_Str"")) {
      spawner.continuouslyRestart(commands,100,true);
      spawner.printUsageInfo();
      return;
    }
    spawner.continuouslyRestart(commands,interval,false);
    LOGGER.info(""String_Node_Str"");
  }
}"
8451,"public DefaultManagedArtifact(String pathName){
  this.filePath=pathName;
  artifactFile=new File(this.filePath);
  timeToLiveInMillis=ConfigParser.getInstance().getLong(EXPIRY_CONFIG_PROPERTY);
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,""String_Node_Str"" + timeToLiveInMillis + ""String_Node_Str"");
  }
}","public DefaultManagedArtifact(String pathName){
  this.filePath=pathName;
  artifactFile=new File(this.filePath);
  timeToLiveInMillis=ConfigParser.parse().getLong(EXPIRY_CONFIG_PROPERTY);
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,""String_Node_Str"" + timeToLiveInMillis + ""String_Node_Str"");
  }
}"
8452,"private Criteria formCriteria(){
  if (requestedCriteria == null) {
    EnumMap<RequestHeaders,String> parametersMap=getParametersMap();
    try {
      String criteriaClassName=ConfigParser.getInstance().getString(CRITERIA_CONFIG_PROPERTY);
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,""String_Node_Str"" + criteriaClassName);
      }
      @SuppressWarnings(""String_Node_Str"") Class<? extends Criteria> criteriaClass=(Class<? extends Criteria>)this.getClass().getClassLoader().loadClass(criteriaClassName);
      requestedCriteria=criteriaClass.getConstructor(new Class[]{EnumMap.class}).newInstance(new Object[]{parametersMap});
    }
 catch (    InvocationTargetException exe) {
      throw new ArtifactDownloadException(exe.getCause().getMessage(),exe);
    }
catch (    Exception exe) {
      throw new ArtifactDownloadException(exe.getClass().getSimpleName() + ""String_Node_Str"" + ConfigParser.getInstance().getString(CRITERIA_CONFIG_PROPERTY),exe);
    }
  }
  return requestedCriteria;
}","private Criteria formCriteria(){
  if (requestedCriteria == null) {
    EnumMap<RequestHeaders,String> parametersMap=getParametersMap();
    try {
      String criteriaClassName=ConfigParser.parse().getString(CRITERIA_CONFIG_PROPERTY);
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,""String_Node_Str"" + criteriaClassName);
      }
      @SuppressWarnings(""String_Node_Str"") Class<? extends Criteria> criteriaClass=(Class<? extends Criteria>)this.getClass().getClassLoader().loadClass(criteriaClassName);
      requestedCriteria=criteriaClass.getConstructor(new Class[]{EnumMap.class}).newInstance(new Object[]{parametersMap});
    }
 catch (    InvocationTargetException exe) {
      throw new ArtifactDownloadException(exe.getCause().getMessage(),exe);
    }
catch (    Exception exe) {
      throw new ArtifactDownloadException(exe.getClass().getSimpleName() + ""String_Node_Str"" + ConfigParser.parse().getString(CRITERIA_CONFIG_PROPERTY),exe);
    }
  }
  return requestedCriteria;
}"
8453,"@SuppressWarnings(""String_Node_Str"") private ManagedArtifact getManagedArtifact(String pathName){
  ManagedArtifact managedArtifact=null;
  try {
    String managedArtifactClassName=ConfigParser.getInstance().getString(ARTIFACT_CONFIG_PROPERTY);
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,""String_Node_Str"" + managedArtifactClassName);
    }
    Class<? extends ManagedArtifact> managedArtifactClass=(Class<? extends ManagedArtifact>)this.getClass().getClassLoader().loadClass(managedArtifactClassName);
    managedArtifact=managedArtifactClass.getConstructor(new Class[]{String.class}).newInstance(new Object[]{pathName});
    return managedArtifact;
  }
 catch (  InvocationTargetException exe) {
    throw new ArtifactUploadException(exe.getCause().getMessage(),exe);
  }
catch (  Exception exe) {
    throw new ArtifactUploadException(exe.getClass().getSimpleName() + ""String_Node_Str"" + ConfigParser.getInstance().getString(ARTIFACT_CONFIG_PROPERTY),exe);
  }
}","@SuppressWarnings(""String_Node_Str"") private ManagedArtifact getManagedArtifact(String pathName){
  ManagedArtifact managedArtifact=null;
  try {
    String managedArtifactClassName=ConfigParser.parse().getString(ARTIFACT_CONFIG_PROPERTY);
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,""String_Node_Str"" + managedArtifactClassName);
    }
    Class<? extends ManagedArtifact> managedArtifactClass=(Class<? extends ManagedArtifact>)this.getClass().getClassLoader().loadClass(managedArtifactClassName);
    managedArtifact=managedArtifactClass.getConstructor(new Class[]{String.class}).newInstance(new Object[]{pathName});
    return managedArtifact;
  }
 catch (  InvocationTargetException exe) {
    throw new ArtifactUploadException(exe.getCause().getMessage(),exe);
  }
catch (  Exception exe) {
    throw new ArtifactUploadException(exe.getClass().getSimpleName() + ""String_Node_Str"" + ConfigParser.parse().getString(ARTIFACT_CONFIG_PROPERTY),exe);
  }
}"
8454,"protected AbstractUploadRequestProcessor(TransferContext transferContext){
  super();
  MAX_FILE_SIZE=ConfigParser.getInstance().getInt(MAX_FILE_CONFIG_PROPERTY);
  this.transferContext=transferContext;
  this.httpServletRequest=transferContext.getHttpServletRequest();
  repository=ManagedArtifactRepository.getInstance();
  managedArtifactList=new ArrayList<>();
}","protected AbstractUploadRequestProcessor(TransferContext transferContext){
  super();
  MAX_FILE_SIZE=ConfigParser.parse().getInt(MAX_FILE_CONFIG_PROPERTY);
  this.transferContext=transferContext;
  this.httpServletRequest=transferContext.getHttpServletRequest();
  repository=ManagedArtifactRepository.getInstance();
  managedArtifactList=new ArrayList<>();
}"
8455,"/** 
 * Verify if the element is availible based on a certain action
 * @param elementName
 * @param action
 */
private void verifyElementByAction(String elementName,String action){
  AbstractElement element=getAbstractElementThroughReflection(elementName);
switch (action) {
case ""String_Node_Str"":
    if (!element.isElementPresent()) {
      throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
    }
  break;
case ""String_Node_Str"":
if (!element.isElementPresent() && !element.isVisible()) {
  throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
if (!element.isElementPresent() && !element.isEnabled()) {
throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
default :
if (!HtmlElementUtils.isElementPresent(element.getLocator())) {
throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
}
}","/** 
 * Verify if the element is availible based on a certain action
 * @param elementName
 * @param action
 */
private void verifyElementByAction(String elementName,String action){
  AbstractElement element=getAbstractElementThroughReflection(elementName);
  boolean present=element.isElementPresent();
switch (action) {
case ""String_Node_Str"":
    if (!present) {
      throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
    }
  break;
case ""String_Node_Str"":
if (!present || (present && !element.isVisible())) {
  throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
if (!present || (present && !element.isEnabled())) {
throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
default :
if (!present) {
throw new PageValidationException(getClass().getSimpleName() + ""String_Node_Str"" + elementName+ ""String_Node_Str"");
}
break;
}
}"
8456,"/** 
 * This test demonstrates how to use SeLion for running tests against ANDROID browser using appium. <ul> <li> An appium instance/server should be installed and running where selenium host and port should be  pointed to this instance.</li> <li> For setting up Appium Android refer http://appium.io/slate/en/master/?ruby#system-setup-(android) </li> </ul> 
 */
@Test @MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") public void testWithBrowser(){
  RemoteWebDriver driver=Grid.driver();
  assertNotNull(driver);
  driver.get(""String_Node_Str"");
  WebElement element=driver.findElement(By.name(""String_Node_Str""));
  element.sendKeys(""String_Node_Str"");
  element.submit();
  MobileReporter.log(""String_Node_Str"",true);
}","/** 
 * This test demonstrates how to use SeLion for running tests against ANDROID browser using appium. <ul> <li> An appium instance/server should be installed and running where selenium host and port should be  pointed to this instance.</li> <li> For setting up Appium Android refer http://appium.io/slate/en/master/?ruby#system-setup-(android) </li> </ul> 
 */
@Test @MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") public void testWithBrowser(){
  RemoteWebDriver driver=Grid.driver();
  assertNotNull(driver);
  driver.get(""String_Node_Str"");
  WebElement element=driver.findElement(By.name(""String_Node_Str""));
  element.sendKeys(""String_Node_Str"");
  element.submit();
  SeLionReporter.log(""String_Node_Str"",true);
}"
8457,"/** 
 * This test demonstrates how to use SeLion for running tests against IOS safari using appium. <ul> <li> An appium instance/server should be installed and running where selenium host and port should be  configured to the same appium instance.</li>  <li> For setting up Appium iOS refer http://appium.io/slate/en/master/?ruby#system-setup-(ios) </li> </ul>
 */
@Test @MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") public void testWithSafari(){
  RemoteWebDriver driver=Grid.driver();
  assertNotNull(driver);
  driver.get(""String_Node_Str"");
  WebElement element=driver.findElement(By.name(""String_Node_Str""));
  element.sendKeys(""String_Node_Str"");
  element.submit();
  MobileReporter.log(""String_Node_Str"",true);
}","/** 
 * This test demonstrates how to use SeLion for running tests against IOS safari using appium. <ul> <li> An appium instance/server should be installed and running where selenium host and port should be  configured to the same appium instance.</li>  <li> For setting up Appium iOS refer http://appium.io/slate/en/master/?ruby#system-setup-(ios) </li> </ul>
 */
@Test @MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") public void testWithSafari(){
  RemoteWebDriver driver=Grid.driver();
  assertNotNull(driver);
  driver.get(""String_Node_Str"");
  WebElement element=driver.findElement(By.name(""String_Node_Str""));
  element.sendKeys(""String_Node_Str"");
  element.submit();
  SeLionReporter.log(""String_Node_Str"",true);
}"
8458,"/** 
 * This test demonstrates how to use SeLion for running tests against a Native IOS app using appium. <ul> <li> An appium instance/server should be locally installed and running and point SeLion to this server using any of the following options.  <ol> <li>Through the JVM arguments -DSELION_SELENIUM_HOST and -DSELION_SELENIUM_PORT </li> (or) <li>Through suite file &lt;parameter name=""seleniumhost"" value=""""/&gt; and &lt;parameter name=""seleniumport"" value=""""/&gt;</li> </ol></li> For setting up Appium iOS refer http://appium.io/slate/en/master/?ruby#system-setup-(ios) </li> <li> The app InternationalMountains.app to be tested should be placed in the  Current Working directory(src/test/resources).</li> </ul>
 */
@MobileTest(appPath=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testWithNativeApp() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Reporter.log(text.getAttribute(""String_Node_Str""),true);
}","/** 
 * This test demonstrates how to use SeLion for running tests against a Native IOS app using appium. <ul> <li> An appium instance/server should be locally installed and running and point SeLion to this server using any of the following options.  <ol> <li>Through the JVM arguments -DSELION_SELENIUM_HOST and -DSELION_SELENIUM_PORT </li> (or) <li>Through suite file &lt;parameter name=""seleniumhost"" value=""""/&gt; and &lt;parameter name=""seleniumport"" value=""""/&gt;</li> </ol></li> For setting up Appium iOS refer http://appium.io/slate/en/master/?ruby#system-setup-(ios) </li> <li> The app InternationalMountains.app to be tested should be placed in the  Current Working directory(src/test/resources).</li> </ul>
 */
@MobileTest(appPath=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testWithNativeApp() throws InterruptedException {
  SeLionReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  SeLionReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Reporter.log(text.getAttribute(""String_Node_Str""),true);
}"
8459,"@Test @MobileTest(appPath=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"",additionalCapabilities={""String_Node_Str""}) public void testWithNativeIOSApp() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
}","@Test @MobileTest(appPath=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"",additionalCapabilities={""String_Node_Str""}) public void testWithNativeIOSApp() throws InterruptedException {
  SeLionReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  SeLionReporter.log(""String_Node_Str"",true);
}"
8460,"/** 
 * This test demonstrates how to use SeLion for running tests against a Native IOS app using appium. This test case needs an local IOS simulator spawned. 
 */
@MobileTest(appName=""String_Node_Str"") @Test public void testMethod() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Reporter.log(text.getAttribute(""String_Node_Str""),true);
}","/** 
 * This test demonstrates how to use SeLion for running tests against a Native IOS app using appium. This test case needs an local IOS simulator spawned. 
 */
@MobileTest(appName=""String_Node_Str"") @Test public void testMethod() throws InterruptedException {
  SeLionReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  SeLionReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Reporter.log(text.getAttribute(""String_Node_Str""),true);
}"
8461,"@Override public List<ProcessInfo> potentialProcessToBeKilled() throws ProcessHandlerException {
  try {
    int ourProcessPID=CLibrary.INSTANCE.getpid();
    String cmd=String.format(""String_Node_Str"",Integer.toString(ourProcessPID),DELIMITER);
    return getProcessInfo(new String[]{""String_Node_Str"",""String_Node_Str"",cmd},DELIMITER,OSPlatform.NONWINDOWS);
  }
 catch (  IOException|InterruptedException e) {
    throw new ProcessHandlerException(e);
  }
}","@Override public List<ProcessInfo> potentialProcessToBeKilled() throws ProcessHandlerException {
  int ourProcessPID=getCurrentProcessID();
  String cmd=String.format(""String_Node_Str"",Integer.toString(ourProcessPID),DELIMITER);
  try {
    return getProcessInfo(new String[]{""String_Node_Str"",""String_Node_Str"",cmd},DELIMITER,OSPlatform.NONWINDOWS);
  }
 catch (  IOException|InterruptedException e) {
    throw new ProcessHandlerException(e);
  }
}"
8462,"@Override public List<ProcessInfo> potentialProcessToBeKilled() throws ProcessHandlerException {
  int ourPid=Kernel32.INSTANCE.GetCurrentProcessId();
  String cmd=String.format(""String_Node_Str"",String.valueOf(ourPid));
  try {
    return super.getProcessInfo(new String[]{""String_Node_Str"",""String_Node_Str"",cmd},DELIMITER,OSPlatform.WINDOWS);
  }
 catch (  IOException|InterruptedException e) {
    throw new ProcessHandlerException(e);
  }
}","@Override public List<ProcessInfo> potentialProcessToBeKilled() throws ProcessHandlerException {
  int ourPid=getCurrentProcessID();
  String cmd=String.format(""String_Node_Str"",String.valueOf(ourPid));
  try {
    return super.getProcessInfo(new String[]{""String_Node_Str"",""String_Node_Str"",cmd},DELIMITER,OSPlatform.WINDOWS);
  }
 catch (  IOException|InterruptedException e) {
    throw new ProcessHandlerException(e);
  }
}"
8463,"public void boot(AbstractTestSession testSession){
  logger.entering(testSession.getPlatform());
  if (testSession instanceof MobileTestSession && ((MobileTestSession)testSession).getMobileNodeType() != MobileNodeType.IOS_DRIVER) {
    return;
  }
  if (isRunning) {
    logger.exiting();
    return;
  }
  String host=""String_Node_Str"";
  String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
  String registrationUrl=String.format(""String_Node_Str"",host,hubPort);
  try {
    int port=new LocalGridConfigFileParser().getPort() + 1;
    startIOSDriverNode(port);
    waitForNodeToComeUp(port,""String_Node_Str"");
    isRunning=true;
    logger.log(Level.INFO,""String_Node_Str"" + registrationUrl);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new GridException(""String_Node_Str"",e);
  }
}","public void boot(AbstractTestSession testSession){
  logger.entering(testSession.getPlatform());
  if ((testSession.getPlatform() != WebDriverPlatform.IOS) && !(testSession instanceof MobileTestSession)) {
    return;
  }
  if (((MobileTestSession)testSession).getMobileNodeType() != MobileNodeType.IOS_DRIVER) {
    return;
  }
  if (isRunning) {
    logger.exiting();
    return;
  }
  String host=""String_Node_Str"";
  String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
  String registrationUrl=String.format(""String_Node_Str"",host,hubPort);
  try {
    int port=new LocalGridConfigFileParser().getPort() + 1;
    startIOSDriverNode(port);
    waitForNodeToComeUp(port,""String_Node_Str"");
    isRunning=true;
    logger.log(Level.INFO,""String_Node_Str"" + registrationUrl);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new GridException(""String_Node_Str"",e);
  }
}"
8464,"@Override public void boot(AbstractTestSession testSession){
  logger.entering(testSession.getPlatform());
  if (testSession instanceof MobileTestSession && ((MobileTestSession)testSession).getMobileNodeType() != MobileNodeType.SELENDROID) {
    return;
  }
  if (isRunning) {
    logger.exiting();
    return;
  }
  String host=""String_Node_Str"";
  String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
  String registrationUrl=String.format(""String_Node_Str"",host,hubPort);
  try {
    int port=new LocalGridConfigFileParser().getPort() + 2;
    startSelendroidDriverNode(port);
    waitForNodeToComeUp(port,""String_Node_Str"");
    isRunning=true;
    logger.log(Level.INFO,""String_Node_Str"" + registrationUrl);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new GridException(""String_Node_Str"",e);
  }
}","@Override public void boot(AbstractTestSession testSession){
  logger.entering(testSession.getPlatform());
  if ((testSession.getPlatform() != WebDriverPlatform.ANDROID) && !(testSession instanceof MobileTestSession)) {
    return;
  }
  if (((MobileTestSession)testSession).getMobileNodeType() != MobileNodeType.SELENDROID) {
    return;
  }
  if (isRunning) {
    logger.exiting();
    return;
  }
  String host=""String_Node_Str"";
  String hubPort=Config.getConfigProperty(ConfigProperty.SELENIUM_PORT);
  String registrationUrl=String.format(""String_Node_Str"",host,hubPort);
  try {
    int port=new LocalGridConfigFileParser().getPort() + 2;
    startSelendroidDriverNode(port);
    waitForNodeToComeUp(port,""String_Node_Str"");
    isRunning=true;
    logger.log(Level.INFO,""String_Node_Str"" + registrationUrl);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw new GridException(""String_Node_Str"",e);
  }
}"
8465,"private DesiredCapabilities appendSauceLabsCredentials(DesiredCapabilities caps){
  logger.entering(caps);
  String sauceUserName=Config.getConfigProperty(ConfigProperty.SAUCELAB_USER_NAME);
  String sauceApiKey=Config.getConfigProperty(ConfigProperty.SAUCELAB_API_KEY);
  String tunnelUserId=Config.getConfigProperty(ConfigProperty.TUNNEL_USER_ID);
  if (sauceUserName != null && sauceApiKey != null) {
    caps.setCapability(USER_NAME,sauceUserName);
    caps.setCapability(ACCESS_KEY,sauceApiKey);
    caps.setCapability(PARENT_TUNNEL,tunnelUserId);
  }
  logger.exiting(caps);
  return caps;
}","private DesiredCapabilities appendSauceLabsCredentials(DesiredCapabilities caps){
  logger.entering(caps);
  String sauceUserName=Config.getConfigProperty(ConfigProperty.SAUCELAB_USER_NAME);
  String sauceApiKey=Config.getConfigProperty(ConfigProperty.SAUCELAB_API_KEY);
  String tunnelUserId=Config.getConfigProperty(ConfigProperty.SAUCELAB_TUNNEL_USER_ID);
  if (sauceUserName != null && sauceApiKey != null) {
    caps.setCapability(USER_NAME,sauceUserName);
    caps.setCapability(ACCESS_KEY,sauceApiKey);
    caps.setCapability(PARENT_TUNNEL,tunnelUserId);
  }
  logger.exiting(caps);
  return caps;
}"
8466,"@Override public DesiredCapabilities getCapabilities(DesiredCapabilities capabilities){
  MobileTestSession mobileSession=Grid.getMobileTestSession();
  capabilities=SelendroidCapabilities.android();
  capabilities.setBrowserName(SELENDROID);
  capabilities.setCapability(MOBILE_NODE_TYPE,SELENDROID);
  capabilities.setCapability(SelendroidCapabilities.AUT,mobileSession.getAppName());
  capabilities.setCapability(SelendroidCapabilities.LOCALE,mobileSession.getAppLocale());
  if (StringUtils.isNotBlank(mobileSession.getDeviceType())) {
    capabilities.setCapability(SelendroidCapabilities.MODEL,mobileSession.getDeviceType());
  }
  if (StringUtils.isNotBlank(mobileSession.getPlatformVersion())) {
    capabilities.setCapability(SelendroidCapabilities.PLATFORM_VERSION,mobileSession.getPlatformVersion());
  }
  if (StringUtils.isNotBlank(mobileSession.getdeviceSerial())) {
    capabilities.setCapability(SelendroidCapabilities.SERIAL,mobileSession.getdeviceSerial());
  }
  return capabilities;
}","@Override public DesiredCapabilities getCapabilities(DesiredCapabilities capabilities){
  MobileTestSession mobileSession=Grid.getMobileTestSession();
  capabilities=SelendroidCapabilities.android();
  if ((new File(mobileSession.getAppLocation()).exists()) && ((new File(mobileSession.getAppLocation() + File.separator + mobileSession.getAppName())).exists())) {
    capabilities.setBrowserName(SELENDROID);
  }
 else {
    capabilities.setBrowserName(ANDROID);
  }
  capabilities.setCapability(MOBILE_NODE_TYPE,SELENDROID);
  capabilities.setCapability(SelendroidCapabilities.AUT,mobileSession.getAppName());
  capabilities.setCapability(SelendroidCapabilities.LOCALE,mobileSession.getAppLocale());
  if (StringUtils.isNotBlank(mobileSession.getDeviceType())) {
    capabilities.setCapability(SelendroidCapabilities.MODEL,mobileSession.getDeviceType());
  }
  if (StringUtils.isNotBlank(mobileSession.getPlatformVersion())) {
    capabilities.setCapability(SelendroidCapabilities.PLATFORM_VERSION,mobileSession.getPlatformVersion());
  }
  if (StringUtils.isNotBlank(mobileSession.getdeviceSerial())) {
    capabilities.setCapability(SelendroidCapabilities.SERIAL,mobileSession.getdeviceSerial());
  }
  return capabilities;
}"
8467,"@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testIOSDefaultsIphone6() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
}","@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testIOSDefaultsIphone6() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Assert.assertNotNull(text.getAttribute(""String_Node_Str""));
}"
8468,"@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"") @Test public void testIOSDefaults() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
}","@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"") @Test public void testIOSDefaults() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Assert.assertNotNull(text.getAttribute(""String_Node_Str""));
}"
8469,"@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testSDKDeviceVariation4s() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
}","@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testSDKDeviceVariation4s() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Assert.assertNotNull(text.getAttribute(""String_Node_Str""));
}"
8470,"@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testSDKDeviceVariation5s() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
}","@MobileTest(appName=""String_Node_Str"",device=""String_Node_Str"",deviceType=""String_Node_Str"") @Test public void testSDKDeviceVariation5s() throws InterruptedException {
  MobileReporter.log(""String_Node_Str"",true);
  List<WebElement> cells=Grid.driver().findElements(By.className(""String_Node_Str""));
  Assert.assertEquals(9,cells.size());
  WebElement first=cells.get(0);
  first.click();
  Thread.sleep(10 * 1000);
  MobileReporter.log(""String_Node_Str"",true);
  By selector=By.xpath(""String_Node_Str"");
  WebElement text=Grid.driver().findElement(selector);
  Assert.assertNotNull(text.getAttribute(""String_Node_Str""));
}"
8471,"@Test(groups={""String_Node_Str""}) public void testlocalGridManagerStartHub() throws MalformedURLException, IOException, JSONException {
  String runLocally=Config.getConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY);
  Config.setConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY,""String_Node_Str"");
  AbstractTestSession testSession=new AbstractTestSession(){
    @Override public SeLionSession startSession(    Map<String,SeLionSession> sessions){
      return null;
    }
    @Override public SeLionSession startSesion(){
      return null;
    }
    @Override public void initializeTestSession(    InvokedMethodInformation method){
    }
    @Override public void initializeTestSession(    InvokedMethodInformation method,    Map<String,SeLionSession> sessionMap){
    }
    @Override public WebDriverPlatform getPlatform(){
      return WebDriverPlatform.WEB;
    }
    @Override public void closeCurrentSession(    Map<String,SeLionSession> sessionMap,    InvokedMethodInformation result){
    }
    @Override public void closeAllSessions(    Map<String,SeLionSession> sessionMap){
    }
  }
;
  String msg=""String_Node_Str"";
  try {
    LocalGridManager.spawnLocalHub(testSession);
    assertTrue(getHubStatus(),""String_Node_Str"");
    JSONObject nodeStatus=getNodeStatus();
    assertNotNull(nodeStatus,""String_Node_Str"");
    assertTrue(nodeStatus.getBoolean(""String_Node_Str""),""String_Node_Str"");
    assertTrue(nodeStatus.getString(""String_Node_Str"").contains(msg),""String_Node_Str"");
  }
  finally {
    LocalGridManager.shutDownHub();
    Config.setConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY,runLocally);
    assertFalse(getHubStatus(),""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""}) public void testlocalGridManagerStartHub() throws MalformedURLException, IOException, JSONException {
  String runLocally=Config.getConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY);
  Config.setConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY,""String_Node_Str"");
  String msg=""String_Node_Str"";
  try {
    WebTestSession testSession=new WebTestSession();
    LocalGridManager.spawnLocalHub(testSession);
    assertTrue(getHubStatus(),""String_Node_Str"");
    JSONObject nodeStatus=getNodeStatus();
    assertNotNull(nodeStatus,""String_Node_Str"");
    assertTrue(nodeStatus.getBoolean(""String_Node_Str""),""String_Node_Str"");
    assertTrue(nodeStatus.getString(""String_Node_Str"").contains(msg),""String_Node_Str"");
  }
  finally {
    LocalGridManager.shutDownHub();
    Config.setConfigProperty(ConfigProperty.SELENIUM_RUN_LOCALLY,runLocally);
    assertFalse(getHubStatus(),""String_Node_Str"");
  }
}"
8472,"/** 
 * Currently this function will handle these data types: <ul> <li>1. Primitive data type: int, boolean, double, float, long</li> <li>2. Object data type: String, Integer, Double, Float, Long</li> <li>3. Array of primitive data type: int[], boolean[], double[], float[], long[]</li> <li>4. Array of object data type: String[], Integer[], Boolean[], Double[], Float[], Long[]</li> <li>5. User defined data type.</li> <li>6. Array of user defined data type.</li> </ul>
 * @param userObj this object is used by the function to extract the object info, such as class name, objects declarations, object data structure...
 * @param fields the array contains the list of name in the specify data structure
 * @param excelRowData the raw data read from the excel sheet to be extracted and filled up the object before return the full object to the caller.
 * @return Object which can be cast into a user defined type to get access to its fields
 */
protected Object prepareObject(Object userObj,Field[] fields,List<String> excelRowData) throws IllegalAccessException, ExcelDataProviderException {
  logger.entering(new Object[]{userObj,fields,excelRowData});
  Object objectToReturn=createObjectToUse(userObj);
  int index=0;
  for (  Field eachField : fields) {
    Class<?> eachFieldType=eachField.getType();
    if (eachFieldType.isInterface()) {
      throw new IllegalArgumentException(eachField.getName() + ""String_Node_Str"");
    }
    String data=excelRowData.get(index++);
    if (StringUtils.isEmpty(data)) {
      continue;
    }
    eachField.setAccessible(true);
    boolean isArray=eachFieldType.isArray();
    DataMemberInformation memberInfo=new DataMemberInformation(eachField,userObj,objectToReturn,data);
    if (isArray) {
      try {
        setValueForArrayType(memberInfo);
      }
 catch (      ArrayIndexOutOfBoundsException|IllegalArgumentException|InstantiationException e) {
        throw new ExcelDataProviderException(e.getMessage(),e);
      }
    }
 else {
      try {
        setValueForNonArrayType(memberInfo);
      }
 catch (      InstantiationException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
        throw new ExcelDataProviderException(e.getMessage(),e);
      }
    }
  }
  logger.exiting(objectToReturn);
  return objectToReturn;
}","/** 
 * Currently this function will handle these data types: <ul> <li>1. Primitive data type: int, boolean, double, float, long</li> <li>2. Object data type: String, Integer, Double, Float, Long</li> <li>3. Array of primitive data type: int[], boolean[], double[], float[], long[]</li> <li>4. Array of object data type: String[], Integer[], Boolean[], Double[], Float[], Long[]</li> <li>5. User defined data type.</li> <li>6. Array of user defined data type.</li> </ul>
 * @param userObj this object is used by the function to extract the object info, such as class name, objects declarations, object data structure...
 * @param fields the array contains the list of name in the specify data structure
 * @param excelRowData the raw data read from the excel sheet to be extracted and filled up the object before return the full object to the caller.
 * @return Object which can be cast into a user defined type to get access to its fields
 */
protected Object prepareObject(Object userObj,Field[] fields,List<String> excelRowData) throws IllegalAccessException, ExcelDataProviderException {
  logger.entering(new Object[]{userObj,fields,excelRowData});
  Object objectToReturn=createObjectToUse(userObj);
  int index=0;
  for (  Field eachField : fields) {
    String data=excelRowData.get(index++);
    if (StringUtils.isEmpty(data)) {
      continue;
    }
    Class<?> eachFieldType=eachField.getType();
    if (eachFieldType.isInterface()) {
      throw new IllegalArgumentException(eachField.getName() + ""String_Node_Str"");
    }
    eachField.setAccessible(true);
    boolean isArray=eachFieldType.isArray();
    DataMemberInformation memberInfo=new DataMemberInformation(eachField,userObj,objectToReturn,data);
    if (isArray) {
      try {
        setValueForArrayType(memberInfo);
      }
 catch (      ArrayIndexOutOfBoundsException|IllegalArgumentException|InstantiationException e) {
        throw new ExcelDataProviderException(e.getMessage(),e);
      }
    }
 else {
      try {
        setValueForNonArrayType(memberInfo);
      }
 catch (      InstantiationException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
        throw new ExcelDataProviderException(e.getMessage(),e);
      }
    }
  }
  logger.exiting(objectToReturn);
  return objectToReturn;
}"
8473,"/** 
 * A utility method to provide additional information to the user when a NoSuchElementException is thrown.
 * @param cause The associated cause for the exception.
 */
private void addInfoForNoSuchElementException(NoSuchElementException cause){
  if (parent == null) {
    throw cause;
  }
  BasicPageImpl page=this.parent.getCurrentPage();
  if (page == null) {
    throw cause;
  }
  String resolvedPageName=page.getClass().getSimpleName();
  boolean pageExists=page.hasExpectedPageTitle();
  if (!pageExists) {
    throw new ParentNotFoundException(resolvedPageName + ""String_Node_Str"" + page.getActualPageTitle()+ ""String_Node_Str"",cause);
  }
  StringBuilder msg=new StringBuilder(""String_Node_Str"");
  if (this.controlName != null) {
    msg.append(this.controlName).append(""String_Node_Str"");
  }
  if (resolvedPageName != null) {
    msg.append(resolvedPageName);
  }
  msg.append(""String_Node_Str"").append(locator).append(""String_Node_Str"");
  throw new NoSuchElementException(msg.toString(),cause);
}","/** 
 * A utility method to provide additional information to the user when a NoSuchElementException is thrown.
 * @param cause The associated cause for the exception.
 */
private void addInfoForNoSuchElementException(NoSuchElementException cause){
  if (parent == null) {
    throw cause;
  }
  BasicPageImpl page=this.parent.getCurrentPage();
  if (page == null) {
    throw cause;
  }
  String resolvedPageName=page.getClass().getSimpleName();
  boolean pageExists=false;
  try {
    pageExists=page.hasExpectedPageTitle();
  }
 catch (  PageYamlException ex) {
  }
  if (!pageExists) {
    throw new ParentNotFoundException(resolvedPageName + ""String_Node_Str"" + page.getActualPageTitle()+ ""String_Node_Str"",cause);
  }
  StringBuilder msg=new StringBuilder(""String_Node_Str"");
  if (this.controlName != null) {
    msg.append(this.controlName).append(""String_Node_Str"");
  }
  if (resolvedPageName != null) {
    msg.append(resolvedPageName);
  }
  msg.append(""String_Node_Str"").append(locator).append(""String_Node_Str"");
  throw new NoSuchElementException(msg.toString(),cause);
}"
8474,"/** 
 * Validates whether the actual current page title equals to expected page title.
 * @return true if the actual page title is equal to any of the titles represented by this page object otherwisereturns false
 */
public boolean hasExpectedPageTitle(){
  List<String> pageTitles=Arrays.asList(getPage().pageTitle.split(""String_Node_Str""));
  for (  String title : pageTitles) {
    if (RegexUtils.wildCardMatch(getPage().getActualPageTitle(),title)) {
      return true;
    }
  }
  return false;
}","/** 
 * Validates whether the actual current page title equals to expected page title.
 * @return true if the actual page title is equal to any of the titles represented by this page object otherwisereturns false
 */
public boolean hasExpectedPageTitle(){
  if (getPage().pageTitle == null) {
    throw new PageYamlException(getPage().getClass().getName() + ""String_Node_Str"");
  }
  List<String> pageTitles=Arrays.asList(getPage().pageTitle.split(""String_Node_Str""));
  for (  String title : pageTitles) {
    if (RegexUtils.wildCardMatch(getPage().getActualPageTitle(),title)) {
      return true;
    }
  }
  return false;
}"
8475,"/** 
 * Waits until element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
 * @param elementLocator identifier of element to be visible
 */
public static void waitUntilElementIsVisible(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.getFindElementType(elementLocator);
  ExpectedCondition<WebElement> condition=ExpectedConditions.visibilityOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}","/** 
 * Waits until element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
 * @param elementLocator identifier of element to be visible
 */
public static void waitUntilElementIsVisible(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.resolveByType(elementLocator);
  ExpectedCondition<WebElement> condition=ExpectedConditions.visibilityOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}"
8476,"/** 
 * Waits until element element is present on the DOM of a page. This does not necessarily mean that the element is visible.
 * @param elementLocator identifier of element to be found
 */
public static void waitUntilElementIsPresent(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.getFindElementType(elementLocator);
  ExpectedCondition<WebElement> condition=ExpectedConditions.presenceOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}","/** 
 * Waits until element element is present on the DOM of a page. This does not necessarily mean that the element is visible.
 * @param elementLocator identifier of element to be found
 */
public static void waitUntilElementIsPresent(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.resolveByType(elementLocator);
  ExpectedCondition<WebElement> condition=ExpectedConditions.presenceOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}"
8477,"/** 
 * Waits until element is either invisible or not present on the DOM.
 * @param elementLocator identifier of element to be found
 */
public static void waitUntilElementIsInvisible(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.getFindElementType(elementLocator);
  ExpectedCondition<Boolean> condition=ExpectedConditions.invisibilityOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}","/** 
 * Waits until element is either invisible or not present on the DOM.
 * @param elementLocator identifier of element to be found
 */
public static void waitUntilElementIsInvisible(final String elementLocator){
  logger.entering(elementLocator);
  Preconditions.checkState(Grid.driver() != null,INVALID_STATE_ERR_MSG);
  By by=HtmlElementUtils.resolveByType(elementLocator);
  ExpectedCondition<Boolean> condition=ExpectedConditions.invisibilityOfElementLocated(by);
  waitForCondition(condition);
  logger.exiting();
}"
8478,"@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementVisiblePos(){
  Grid.driver().get(url);
  try {
    WebDriverWaitUtils.waitUntilElementIsVisible(locator);
    assertTrue(true);
  }
 catch (  WaitTimedOutException e) {
    fail(e.getMessage());
  }
}","@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementVisiblePos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilElementIsVisible(locator);
}"
8479,"@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilPageTitlePresentPos(){
  Grid.driver().get(url);
  try {
    WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);
    assertTrue(true);
  }
 catch (  WaitTimedOutException e) {
    fail(e.getMessage());
  }
}","@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilPageTitlePresentPos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);
}"
8480,"@Test(groups={""String_Node_Str""},expectedExceptions={WaitTimedOutException.class}) @WebTest public void testWaitUntilElementVisibleNeg(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilElementIsVisible(badLocator);
  fail(""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilElementVisibleNeg(){
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    Grid.driver().get(url);
    WebDriverWaitUtils.waitUntilElementIsVisible(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
}"
8481,"@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilTextPresentPos(){
  Grid.driver().get(url);
  try {
    WebDriverWaitUtils.waitUntilTextPresent(text);
    assertTrue(true);
  }
 catch (  WaitTimedOutException e) {
    fail(e.getMessage());
  }
}","@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilTextPresentPos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilTextPresent(text);
}"
8482,"@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementPresentPos(){
  Grid.driver().get(url);
  try {
    WebDriverWaitUtils.waitUntilElementIsPresent(locator);
    assertTrue(true);
  }
 catch (  WaitTimedOutException e) {
    fail(e.getMessage());
  }
}","@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementPresentPos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilElementIsPresent(locator);
}"
8483,"@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementDisapearPos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);
  Button btn=new Button(disappearElement);
  btn.click();
  try {
    WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);
    assertTrue(true);
  }
 catch (  WaitTimedOutException e) {
    fail(e.getMessage());
  }
}","@Test(groups={""String_Node_Str""}) @WebTest public void testWaitUntilElementDisapearPos(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);
  Button btn=new Button(disappearElement);
  btn.click();
  WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);
}"
8484,"@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilTextPresentNeg(){
  Grid.driver().get(url);
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    WebDriverWaitUtils.waitUntilTextPresent(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
  fail(""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilTextPresentNeg(){
  Grid.driver().get(url);
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    WebDriverWaitUtils.waitUntilTextPresent(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
}"
8485,"@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilElementPresentNeg(){
  Grid.driver().get(url);
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    WebDriverWaitUtils.waitUntilElementIsPresent(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
  fail(""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilElementPresentNeg(){
  Grid.driver().get(url);
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    WebDriverWaitUtils.waitUntilElementIsPresent(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
}"
8486,"@Test(groups={""String_Node_Str""},expectedExceptions={WaitTimedOutException.class}) @WebTest public void testWaitUntilPageTitlePresentNeg(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilPageTitleContains(badLocator);
  fail(""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},expectedExceptions={TimeoutException.class}) @WebTest public void testWaitUntilPageTitlePresentNeg(){
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    Grid.driver().get(url);
    WebDriverWaitUtils.waitUntilPageTitleContains(badLocator);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
}"
8487,"@Test(groups={""String_Node_Str""},expectedExceptions={RuntimeException.class}) @WebTest public void testWaitUntilElementDisapearNeg(){
  Grid.driver().get(url);
  WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);
  fail(""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},expectedExceptions={RuntimeException.class}) @WebTest public void testWaitUntilElementDisapearNeg(){
  String origTimeout=Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);
  try {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,""String_Node_Str"");
    Grid.driver().get(url);
    WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);
  }
  finally {
    Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT,origTimeout);
  }
}"
8488,"/** 
 * Create and return a session, connected.
 * @return JSch session
 * @throws IOException If some IO problem inside
 */
@RetryOnFailure(attempts=Tv.SEVEN,delay=1,unit=TimeUnit.MINUTES,verbose=false,randomize=true,types=IOException.class) private Session session() throws IOException {
  try {
    JSch.setConfig(""String_Node_Str"",""String_Node_Str"");
    JSch.setLogger(new JschLogger());
    final JSch jsch=new JSch();
    final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    FileUtils.forceDeleteOnExit(file);
    FileUtils.write(file,this.key.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim(),CharEncoding.UTF_8);
    jsch.setHostKeyRepository(new EasyRepo());
    jsch.addIdentity(file.getAbsolutePath());
    Logger.debug(this,""String_Node_Str"",this.login,this.addr,this.port,file.length());
    final Session session=jsch.getSession(this.login,this.addr,this.port);
    session.setServerAliveInterval((int)TimeUnit.SECONDS.toMillis((long)Tv.TEN));
    session.setServerAliveCountMax(Tv.MILLION);
    session.connect();
    FileUtils.deleteQuietly(file);
    return session;
  }
 catch (  final JSchException ex) {
    throw new IOException(ex);
  }
}","@Override @RetryOnFailure(attempts=Tv.SEVEN,delay=1,unit=TimeUnit.MINUTES,verbose=false,randomize=true,types=IOException.class) public Session session() throws IOException {
  try {
    JSch.setConfig(""String_Node_Str"",""String_Node_Str"");
    JSch.setLogger(new JschLogger());
    final JSch jsch=new JSch();
    final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    FileUtils.forceDeleteOnExit(file);
    FileUtils.write(file,this.key.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim(),CharEncoding.UTF_8);
    jsch.setHostKeyRepository(new EasyRepo());
    jsch.addIdentity(file.getAbsolutePath());
    Logger.debug(this,""String_Node_Str"",this.getLogin(),this.getAddr(),this.getPort(),file.length());
    final Session session=jsch.getSession(this.getLogin(),this.getAddr(),this.getPort());
    session.setServerAliveInterval((int)TimeUnit.SECONDS.toMillis(Tv.TEN));
    session.setServerAliveCountMax(Tv.MILLION);
    session.connect();
    FileUtils.deleteQuietly(file);
    return session;
  }
 catch (  final JSchException ex) {
    throw new IOException(ex);
  }
}"
8489,"/** 
 * Constructor.
 * @param adr IP address
 * @param prt Port of server
 * @param user Login
 * @param priv Private SSH key
 * @throws UnknownHostException If fails
 * @checkstyle ParameterNumberCheck (6 lines)
 */
public SSH(final String adr,final int prt,final String user,final String priv) throws UnknownHostException {
  this.addr=InetAddress.getByName(adr).getHostAddress();
  Validate.matchesPattern(this.addr,""String_Node_Str"",""String_Node_Str"",this.addr);
  this.login=user;
  Validate.notEmpty(this.login,""String_Node_Str"");
  this.key=priv;
  this.port=prt;
}","/** 
 * Constructor.
 * @param adr IP address
 * @param prt Port of server
 * @param user Login
 * @param priv Private SSH key
 * @throws UnknownHostException If fails
 * @checkstyle ParameterNumberCheck (6 lines)
 */
public SSH(final String adr,final int prt,final String user,final String priv) throws UnknownHostException {
  super(adr,prt,user);
  this.key=priv;
}"
8490,"/** 
 * Create and return a session, connected.
 * @return JSch session
 * @throws IOException If some IO problem inside
 */
@RetryOnFailure(attempts=Tv.SEVEN,delay=1,unit=TimeUnit.MINUTES,verbose=false,randomize=true,types=IOException.class) private Session session() throws IOException {
  try {
    JSch.setConfig(""String_Node_Str"",""String_Node_Str"");
    JSch.setLogger(new JschLogger());
    final JSch jsch=new JSch();
    Logger.debug(this,""String_Node_Str"",this.login,this.addr,this.port);
    final Session session=jsch.getSession(this.login,this.addr,this.port);
    session.setPassword(this.password);
    session.setServerAliveInterval((int)TimeUnit.SECONDS.toMillis((long)Tv.TEN));
    session.setServerAliveCountMax(Tv.MILLION);
    session.connect();
    return session;
  }
 catch (  final JSchException ex) {
    throw new IOException(ex);
  }
}","@Override @RetryOnFailure(attempts=Tv.SEVEN,delay=1,unit=TimeUnit.MINUTES,verbose=false,randomize=true,types=IOException.class) public Session session() throws IOException {
  try {
    JSch.setConfig(""String_Node_Str"",""String_Node_Str"");
    JSch.setLogger(new JschLogger());
    final JSch jsch=new JSch();
    Logger.debug(this,""String_Node_Str"",this.getLogin(),this.getAddr(),this.getPort());
    final Session session=jsch.getSession(this.getLogin(),this.getAddr(),this.getPort());
    session.setPassword(this.password);
    session.setServerAliveInterval((int)TimeUnit.SECONDS.toMillis(Tv.TEN));
    session.setServerAliveCountMax(Tv.MILLION);
    session.connect();
    return session;
  }
 catch (  final JSchException ex) {
    throw new IOException(ex);
  }
}"
8491,"/** 
 * Constructor.
 * @param adr IP address
 * @param prt Port of server
 * @param user Login
 * @param passwd Password
 * @throws UnknownHostException If fails
 * @checkstyle ParameterNumberCheck (6 lines)
 */
public SSHByPassword(final String adr,final int prt,final String user,final String passwd) throws UnknownHostException {
  this.addr=InetAddress.getByName(adr).getHostAddress();
  Validate.matchesPattern(this.addr,""String_Node_Str"",""String_Node_Str"",this.addr);
  this.port=prt;
  this.login=user;
  Validate.notEmpty(this.login,""String_Node_Str"");
  this.password=passwd;
}","/** 
 * Constructor.
 * @param adr IP address
 * @param prt Port of server
 * @param user Login
 * @param passwd Password
 * @throws UnknownHostException If fails
 * @checkstyle ParameterNumberCheck (6 lines)
 */
public SSHByPassword(final String adr,final int prt,final String user,final String passwd) throws UnknownHostException {
  super(adr,prt,user);
  this.password=passwd;
}"
8492,"/** 
 * 更新索引 Map
 */
private Map<Character,Integer> updateIndex(List<ContactItem> list){
  Character lastCharcter='#';
  Map<Character,Integer> map=new HashMap<>();
  for (int i=0; i < list.size(); i++) {
    Character curChar=Character.toLowerCase(list.get(i).sortContent.charAt(0));
    if (!lastCharcter.equals(curChar)) {
      map.put(curChar,i);
    }
    lastCharcter=curChar;
  }
  return map;
}","/** 
 * 更新索引 Map
 */
private Map<Character,Integer> updateIndex(List<ContactItem> list){
  Character lastCharcter='#';
  Map<Character,Integer> map=new HashMap<>();
  for (int i=0; i < list.size(); i++) {
    if (!TextUtils.isEmpty(list.get(i).sortContent)) {
      Character curChar=Character.toLowerCase(list.get(i).sortContent.charAt(0));
      if (!lastCharcter.equals(curChar)) {
        map.put(curChar,i);
      }
      lastCharcter=curChar;
    }
  }
  return map;
}"
8493,"/** 
 * 处理 LetterView 发送过来的 MemberLetterEvent 会通过 MembersAdapter 获取应该要跳转到的位置，然后跳转
 */
public void onEvent(MemberLetterEvent event){
  Character targetChar=Character.toLowerCase(event.letter);
  if (itemAdapter.getIndexMap().containsKey(targetChar)) {
    int index=itemAdapter.getIndexMap().get(targetChar);
    if (index > 0 && index < itemAdapter.getItemCount()) {
      layoutManager.scrollToPositionWithOffset(index,0);
    }
  }
}","/** 
 * 处理 LetterView 发送过来的 MemberLetterEvent 会通过 MembersAdapter 获取应该要跳转到的位置，然后跳转
 */
public void onEvent(MemberLetterEvent event){
  Character targetChar=Character.toLowerCase(event.letter);
  if (itemAdapter.getIndexMap().containsKey(targetChar)) {
    int index=itemAdapter.getIndexMap().get(targetChar);
    if (index > 0 && index < itemAdapter.getItemCount()) {
      layoutManager.scrollToPositionWithOffset(index + 1,0);
    }
  }
}"
8494,"@Override public void bindData(ContactItem memberItem){
  contactItem=memberItem;
  alpha.setVisibility(memberItem.initialVisible ? View.VISIBLE : View.GONE);
  alpha.setText(String.valueOf(Character.toUpperCase(memberItem.sortContent.charAt(0))));
  Picasso.with(getContext()).load(memberItem.user.getAvatarUrl()).placeholder(R.drawable.lcim_default_avatar_icon).into(avatarView);
  nameView.setText(memberItem.user.getUsername());
}","@Override public void bindData(ContactItem memberItem){
  contactItem=memberItem;
  alpha.setVisibility(memberItem.initialVisible ? View.VISIBLE : View.GONE);
  if (!TextUtils.isEmpty(memberItem.sortContent)) {
    alpha.setText(String.valueOf(Character.toUpperCase(memberItem.sortContent.charAt(0))));
  }
 else {
    alpha.setText(""String_Node_Str"");
  }
  Picasso.with(getContext()).load(memberItem.user.getAvatarUrl()).placeholder(R.drawable.lcim_default_avatar_icon).into(avatarView);
  nameView.setText(memberItem.user.getUsername());
}"
8495,"@Override public void onCreate(){
  super.onCreate();
  AVOSCloud.initialize(this,""String_Node_Str"",""String_Node_Str"");
  ChatManager.setDebugEnabled(true);
  AVOSCloud.setDebugLogEnabled(true);
  ChatManager.getInstance().init(this);
  initImageLoader(this);
  ThirdPartUserUtils.setThirdPartUserProvider(new CustomUserProvider());
}","@Override public void onCreate(){
  super.onCreate();
  AVOSCloud.initialize(this,""String_Node_Str"",""String_Node_Str"");
  ChatManager.setDebugEnabled(true);
  AVOSCloud.setDebugLogEnabled(true);
  initImageLoader(this);
  ThirdPartUserUtils.setThirdPartUserProvider(new CustomUserProvider());
}"
8496,"/** 
 * 获取 conversation，为了避免重复的创建，此处先 query 是否已经存在只包含该 member 的 conversation 如果存在，则直接赋值给 ChatFragment，否者创建后再赋值
 */
private void getConversation(final String memberId){
  Map<String,Object> attrs=new HashMap<>();
  attrs.put(ConversationType.TYPE_KEY,ConversationType.Single.getValue());
  ChatManager.getInstance().getImClient().createConversation(Arrays.asList(memberId),""String_Node_Str"",attrs,false,true,new AVIMConversationCreatedCallback(){
    @Override public void done(    AVIMConversation avimConversation,    AVIMException e){
      if (filterException(e)) {
        ChatManager.getInstance().getRoomsTable().insertRoom(conversation.getConversationId());
        updateConversation(conversation);
      }
    }
  }
);
}","/** 
 * 获取 conversation，为了避免重复的创建，此处先 query 是否已经存在只包含该 member 的 conversation 如果存在，则直接赋值给 ChatFragment，否者创建后再赋值
 */
private void getConversation(final String memberId){
  Map<String,Object> attrs=new HashMap<>();
  attrs.put(ConversationType.TYPE_KEY,ConversationType.Single.getValue());
  ChatManager.getInstance().getImClient().createConversation(Arrays.asList(memberId),""String_Node_Str"",attrs,false,true,new AVIMConversationCreatedCallback(){
    @Override public void done(    AVIMConversation avimConversation,    AVIMException e){
      if (filterException(e)) {
        ChatManager.getInstance().getRoomsTable().insertRoom(avimConversation.getConversationId());
        updateConversation(avimConversation);
      }
    }
  }
);
}"
8497,"@Override public void done(AVIMConversation avimConversation,AVIMException e){
  if (filterException(e)) {
    ChatManager.getInstance().getRoomsTable().insertRoom(conversation.getConversationId());
    updateConversation(conversation);
  }
}","@Override public void done(AVIMConversation avimConversation,AVIMException e){
  if (filterException(e)) {
    ChatManager.getInstance().getRoomsTable().insertRoom(avimConversation.getConversationId());
    updateConversation(avimConversation);
  }
}"
8498,"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_chat,container,false);
  recyclerView=(RecyclerView)view.findViewById(R.id.fragment_chat_rv_chat);
  refreshLayout=(SwipeRefreshLayout)view.findViewById(R.id.fragment_chat_srl_pullrefresh);
  refreshLayout.setEnabled(false);
  inputBottomBar=(InputBottomBar)view.findViewById(R.id.fragment_chat_inputbottombar);
  layoutManager=new LinearLayoutManager(getActivity());
  recyclerView.setLayoutManager(layoutManager);
  itemAdapter=new MultipleItemAdapter();
  itemAdapter.resetRecycledViewPoolSize(recyclerView);
  recyclerView.setAdapter(itemAdapter);
  EventBus.getDefault().register(this);
  return view;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_chat,container,false);
  localCameraPath=PathUtils.getPicturePathByCurrentTime(getContext());
  recyclerView=(RecyclerView)view.findViewById(R.id.fragment_chat_rv_chat);
  refreshLayout=(SwipeRefreshLayout)view.findViewById(R.id.fragment_chat_srl_pullrefresh);
  refreshLayout.setEnabled(false);
  inputBottomBar=(InputBottomBar)view.findViewById(R.id.fragment_chat_inputbottombar);
  layoutManager=new LinearLayoutManager(getActivity());
  recyclerView.setLayoutManager(layoutManager);
  itemAdapter=new MultipleItemAdapter();
  itemAdapter.resetRecycledViewPoolSize(recyclerView);
  recyclerView.setAdapter(itemAdapter);
  EventBus.getDefault().register(this);
  return view;
}"
8499,"@Override public void onMessage(AVIMTypedMessage message,AVIMConversation conversation,AVIMClient client){
  if (message == null || message.getMessageId() == null) {
    LogUtils.d(""String_Node_Str"");
    return;
  }
  if (!ConversationHelper.isValidConversation(conversation)) {
    LogUtils.d(""String_Node_Str"");
  }
  if (ChatManager.getInstance().getSelfId() == null) {
    LogUtils.d(""String_Node_Str"");
    client.close(null);
  }
 else {
    if (!client.getClientId().equals(ChatManager.getInstance().getSelfId())) {
      client.close(null);
    }
 else {
      ChatManager.getInstance().getRoomsTable().insertRoom(message.getConversationId());
      if (!message.getFrom().equals(client.getClientId())) {
        if (NotificationUtils.isShowNotification(conversation.getConversationId())) {
          sendNotification(message,conversation);
        }
        ChatManager.getInstance().getRoomsTable().increaseUnreadCount(message.getConversationId());
      }
      sendEvent(message,conversation);
    }
  }
}","@Override public void onMessage(AVIMTypedMessage message,AVIMConversation conversation,AVIMClient client){
  if (message == null || message.getMessageId() == null) {
    LogUtils.d(""String_Node_Str"");
    return;
  }
  if (!ConversationHelper.isValidConversation(conversation)) {
    LogUtils.d(""String_Node_Str"");
  }
  if (ChatManager.getInstance().getSelfId() == null) {
    LogUtils.d(""String_Node_Str"");
    client.close(null);
  }
 else {
    if (!client.getClientId().equals(ChatManager.getInstance().getSelfId())) {
      client.close(null);
    }
 else {
      ChatManager.getInstance().getRoomsTable().insertRoom(message.getConversationId());
      if (!message.getFrom().equals(client.getClientId())) {
        if (NotificationUtils.isShowNotification(conversation.getConversationId())) {
          sendNotification(message,conversation);
        }
        ChatManager.getInstance().getRoomsTable().increaseUnreadCount(message.getConversationId());
        sendEvent(message,conversation);
      }
    }
  }
}"
8500,"public static CharSequence outlineOfMsg(AVIMTypedMessage msg){
  AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
switch (type) {
case TextMessageType:
    return EmotionHelper.replace(ChatManager.getContext(),((AVIMTextMessage)msg).getText());
case ImageMessageType:
  return bracket(ChatManager.getContext().getString(R.string.chat_image));
case LocationMessageType:
AVIMLocationMessage locMsg=(AVIMLocationMessage)msg;
String address=locMsg.getText();
if (address == null) {
address=""String_Node_Str"";
}
return bracket(ChatManager.getContext().getString(R.string.chat_position)) + address;
case AudioMessageType:
return bracket(ChatManager.getContext().getString(R.string.chat_audio));
}
return null;
}","public static CharSequence outlineOfMsg(AVIMMessage msg){
  if (msg instanceof AVIMTypedMessage) {
    AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(((AVIMTypedMessage)msg).getMessageType());
switch (type) {
case TextMessageType:
      return EmotionHelper.replace(ChatManager.getContext(),((AVIMTextMessage)msg).getText());
case ImageMessageType:
    return bracket(ChatManager.getContext().getString(R.string.chat_image));
case LocationMessageType:
  AVIMLocationMessage locMsg=(AVIMLocationMessage)msg;
String address=locMsg.getText();
if (address == null) {
address=""String_Node_Str"";
}
return bracket(ChatManager.getContext().getString(R.string.chat_position)) + address;
case AudioMessageType:
return bracket(ChatManager.getContext().getString(R.string.chat_audio));
}
return null;
}
 else {
return msg.getContent();
}
}"
8501,"public void refreshUserData(List<String> userList){
  thirdPartDataProvider.getFriends(userList,new FetchUserCallBack(){
    @Override public void done(    List<ThirdPartUser> userList,    Exception e){
      if (null != e && null != userList) {
        for (        ThirdPartUser user : userList) {
          ThirdPartDataCache.getInstance().cacheUser(user.userId,user);
        }
      }
    }
  }
);
}","public void refreshUserData(List<String> userList){
  thirdPartDataProvider.getFriends(userList,new FetchUserCallBack(){
    @Override public void done(    List<ThirdPartUser> userList,    Exception e){
      if (null == e && null != userList) {
        for (        ThirdPartUser user : userList) {
          ThirdPartDataCache.getInstance().cacheUser(user.userId,user);
        }
      }
    }
  }
);
}"
8502,"private void refresh(){
  LeanchatUser curUser=(LeanchatUser)AVUser.getCurrentUser();
  userNameView.setText(curUser.getUsername());
  ImageLoader.getInstance().displayImage(curUser.getAvatarUrl(),avatarView,com.avoscloud.leanchatlib.utils.PhotoUtils.avatarImageOptions);
}","private void refresh(){
  LeanchatUser curUser=AVUser.getCurrentUser(LeanchatUser.class);
  userNameView.setText(curUser.getUsername());
  ImageLoader.getInstance().displayImage(curUser.getAvatarUrl(),avatarView,com.avoscloud.leanchatlib.utils.PhotoUtils.avatarImageOptions);
}"
8503,"private void setListData(){
  AVUser.getCurrentUser(LeanchatUser.class).findFriendsWithCachePolicy(AVQuery.CachePolicy.CACHE_ELSE_NETWORK,new FindCallback<LeanchatUser>(){
    @Override public void done(    List<LeanchatUser> users,    AVException e){
      if (filterException(e)) {
        List<String> userIds=new ArrayList<String>();
        for (        AVUser user : users) {
          userIds.add(user.getObjectId());
        }
        userIds.removeAll(conversation.getMembers());
        adapter.setDatas(userIds);
        adapter.notifyDataSetChanged();
      }
    }
  }
);
}","private void setListData(){
  AVUser.getCurrentUser(LeanchatUser.class).findFriendsWithCachePolicy(AVQuery.CachePolicy.CACHE_ELSE_NETWORK,new FindCallback<LeanchatUser>(){
    @Override public void done(    List<LeanchatUser> users,    AVException e){
      if (filterException(e)) {
        final List<String> userIds=new ArrayList<String>();
        for (        AVUser user : users) {
          userIds.add(user.getObjectId());
        }
        userIds.removeAll(conversation.getMembers());
        CacheService.cacheUsers(userIds,new AVUserCacheUtils.CacheUserCallback(){
          @Override public void done(          Exception e){
            adapter.setDatas(userIds);
            adapter.notifyDataSetChanged();
          }
        }
);
      }
    }
  }
);
}"
8504,"@Override public View getView(final int position,View conView,ViewGroup parent){
  if (conView == null) {
    conView=View.inflate(ctx,R.layout.conversation_add_members_item,null);
  }
  String userId=datas.get(position);
  AVUser user=CacheService.lookupUser(userId);
  ImageView avatarView=ViewHolder.findViewById(conView,R.id.avatar);
  TextView nameView=ViewHolder.findViewById(conView,R.id.username);
  ImageLoader.getInstance().displayImage(((LeanchatUser)user).getAvatarUrl(),avatarView,PhotoUtils.avatarImageOptions);
  nameView.setText(user.getUsername());
  CheckBox checkBox=ViewHolder.findViewById(conView,R.id.checkbox);
  setCheckBox(checkBox,position);
  checkBox.setOnCheckedChangeListener(new CheckListener(position));
  return conView;
}","@Override public View getView(final int position,View conView,ViewGroup parent){
  if (conView == null) {
    conView=View.inflate(ctx,R.layout.conversation_add_members_item,null);
  }
  String userId=datas.get(position);
  LeanchatUser user=CacheService.lookupUser(userId);
  ImageView avatarView=ViewHolder.findViewById(conView,R.id.avatar);
  TextView nameView=ViewHolder.findViewById(conView,R.id.username);
  if (null != user) {
    ImageLoader.getInstance().displayImage(user.getAvatarUrl(),avatarView,PhotoUtils.avatarImageOptions);
    nameView.setText(user.getUsername());
  }
 else {
    nameView.setText(""String_Node_Str"");
  }
  CheckBox checkBox=ViewHolder.findViewById(conView,R.id.checkbox);
  setCheckBox(checkBox,position);
  checkBox.setOnCheckedChangeListener(new CheckListener(position));
  return conView;
}"
8505,"public static void cacheUsers(List<String> ids) throws AVException {
  Set<String> uncachedIds=new HashSet<String>();
  for (  String id : ids) {
    if (lookupUser(id) == null) {
      uncachedIds.add(id);
    }
  }
  List<LeanchatUser> foundUsers=findUsers(new ArrayList<String>(uncachedIds));
  registerUsers(foundUsers);
}","public static void cacheUsers(List<String> userIds,final AVUserCacheUtils.CacheUserCallback callback){
  if (userIds.size() <= 0) {
    callback.done(null);
    return;
  }
  AVQuery<LeanchatUser> q=AVUser.getQuery(LeanchatUser.class);
  q.whereContainedIn(Constants.OBJECT_ID,userIds);
  q.setLimit(1000);
  q.setCachePolicy(AVQuery.CachePolicy.NETWORK_ELSE_CACHE);
  q.findInBackground(new FindCallback<LeanchatUser>(){
    @Override public void done(    List<LeanchatUser> list,    AVException e){
      registerUsers(list);
      callback.done(e);
    }
  }
);
}"
8506,"public static void registerUsers(List<LeanchatUser> users){
  for (  LeanchatUser user : users) {
    registerUser(user);
  }
}","public static void registerUsers(List<LeanchatUser> users){
  if (null != users) {
    for (    LeanchatUser user : users) {
      registerUser(user);
    }
  }
}"
8507,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  findView();
  init();
  conversationBtn.performClick();
  initBaiduLocClient();
  CacheService.registerUser((LeanchatUser)AVUser.getCurrentUser());
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  findView();
  init();
  conversationBtn.performClick();
  initBaiduLocClient();
  CacheService.registerUser(AVUser.getCurrentUser(LeanchatUser.class));
}"
8508,"@Override public void onRefresh(){
  AVIMMessage message=itemAdapter.getFirstMessage();
  imConversation.queryMessages(message.getMessageId(),message.getTimestamp(),20,new AVIMMessagesQueryCallback(){
    @Override public void done(    List<AVIMMessage> list,    AVIMException e){
      refreshLayout.setRefreshing(false);
      if (filterException(e)) {
        if (null != list && list.size() > 0) {
          itemAdapter.addMessageList(list);
          itemAdapter.notifyDataSetChanged();
          layoutManager.scrollToPositionWithOffset(list.size() - 1,0);
        }
      }
    }
  }
);
}","@Override public void onRefresh(){
  AVIMMessage message=itemAdapter.getFirstMessage();
  if (null == message) {
    refreshLayout.setRefreshing(false);
  }
 else {
    imConversation.queryMessages(message.getMessageId(),message.getTimestamp(),20,new AVIMMessagesQueryCallback(){
      @Override public void done(      List<AVIMMessage> list,      AVIMException e){
        refreshLayout.setRefreshing(false);
        if (filterException(e)) {
          if (null != list && list.size() > 0) {
            itemAdapter.addMessageList(list);
            itemAdapter.notifyDataSetChanged();
            layoutManager.scrollToPositionWithOffset(list.size() - 1,0);
          }
        }
      }
    }
);
  }
}"
8509,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  refreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      AVIMMessage message=itemAdapter.getFirstMessage();
      imConversation.queryMessages(message.getMessageId(),message.getTimestamp(),20,new AVIMMessagesQueryCallback(){
        @Override public void done(        List<AVIMMessage> list,        AVIMException e){
          refreshLayout.setRefreshing(false);
          if (filterException(e)) {
            if (null != list && list.size() > 0) {
              itemAdapter.addMessageList(list);
              itemAdapter.notifyDataSetChanged();
              layoutManager.scrollToPositionWithOffset(list.size() - 1,0);
            }
          }
        }
      }
);
    }
  }
);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  refreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      AVIMMessage message=itemAdapter.getFirstMessage();
      if (null == message) {
        refreshLayout.setRefreshing(false);
      }
 else {
        imConversation.queryMessages(message.getMessageId(),message.getTimestamp(),20,new AVIMMessagesQueryCallback(){
          @Override public void done(          List<AVIMMessage> list,          AVIMException e){
            refreshLayout.setRefreshing(false);
            if (filterException(e)) {
              if (null != list && list.size() > 0) {
                itemAdapter.addMessageList(list);
                itemAdapter.notifyDataSetChanged();
                layoutManager.scrollToPositionWithOffset(list.size() - 1,0);
              }
            }
          }
        }
);
      }
    }
  }
);
}"
8510,"protected void updateConversation(AVIMConversation conversation){
  if (null != conversation) {
    this.conversation=conversation;
    chatFragment.setConversation(conversation);
    initActionBar(ConversationHelper.titleOfConversation(conversation));
  }
}","protected void updateConversation(AVIMConversation conversation){
  if (null != conversation) {
    this.conversation=conversation;
    chatFragment.setConversation(conversation);
    chatFragment.showUserName(ConversationHelper.typeOfConversation(conversation) != ConversationType.Single);
    initActionBar(ConversationHelper.titleOfConversation(conversation));
  }
}"
8511,"@Override public void onMessage(AVIMTypedMessage message,AVIMConversation conversation,AVIMClient client){
  if (message == null || message.getMessageId() == null) {
    LogUtils.d(""String_Node_Str"");
    return;
  }
  if (!ConversationHelper.isValidConversation(conversation)) {
    LogUtils.d(""String_Node_Str"");
  }
  ChatManager.getInstance().getRoomsTable().insertRoom(message.getConversationId());
  ChatManager.getInstance().getRoomsTable().increaseUnreadCount(message.getConversationId());
  if (ChatManager.getInstance().getSelfId() == null) {
    LogUtils.d(""String_Node_Str"");
  }
 else {
    if (client.getClientId().equals(ChatManager.getInstance().getSelfId())) {
      if (!message.getFrom().equals(client.getClientId())) {
        sendEvent(message,conversation);
        if (NotificationUtils.isShowNotification(conversation.getConversationId())) {
          sendNotification(message,conversation);
        }
        return;
      }
    }
  }
  client.close(null);
}","@Override public void onMessage(AVIMTypedMessage message,AVIMConversation conversation,AVIMClient client){
  if (message == null || message.getMessageId() == null) {
    LogUtils.d(""String_Node_Str"");
    return;
  }
  if (!ConversationHelper.isValidConversation(conversation)) {
    LogUtils.d(""String_Node_Str"");
  }
  if (ChatManager.getInstance().getSelfId() == null) {
    LogUtils.d(""String_Node_Str"");
    client.close(null);
  }
 else {
    if (!client.getClientId().equals(ChatManager.getInstance().getSelfId())) {
      client.close(null);
    }
 else {
      ChatManager.getInstance().getRoomsTable().insertRoom(message.getConversationId());
      if (!message.getFrom().equals(client.getClientId())) {
        if (NotificationUtils.isShowNotification(conversation.getConversationId())) {
          sendNotification(message,conversation);
        }
        ChatManager.getInstance().getRoomsTable().increaseUnreadCount(message.getConversationId());
      }
      sendEvent(message,conversation);
    }
  }
}"
8512,"@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
  int menuId=item.getItemId();
  if (menuId == ADD_MEMBERS) {
    Intent intent=new Intent(this,ConversationAddMembersActivity.class);
    startActivityForResult(intent,ADD_MEMBERS);
  }
  return super.onMenuItemSelected(featureId,item);
}","@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
  int menuId=item.getItemId();
  if (menuId == ADD_MEMBERS) {
    Intent intent=new Intent(this,ConversationAddMembersActivity.class);
    intent.putExtra(Constants.CONVERSATION_ID,conversation.getConversationId());
    startActivityForResult(intent,ADD_MEMBERS);
  }
  return super.onMenuItemSelected(featureId,item);
}"
8513,"private void init(){
  volumeHandler=new ShowVolumeHandler();
  setBackgroundResource(BACK_IDLE);
  initRecordDialog();
}","private void init(){
  volumeHandler=new ShowVolumeHandler();
  setBackgroundResource(BACK_IDLE);
}"
8514,"private void startRecord(){
  startTime=System.currentTimeMillis();
  setBackgroundResource(BACK_RECORDING);
  startRecording();
  recordIndicator.show();
}","private void startRecord(){
  initRecordDialog();
  startTime=System.currentTimeMillis();
  setBackgroundResource(BACK_RECORDING);
  startRecording();
  recordIndicator.show();
}"
8515,"private void initRecordDialog(){
  recordIndicator=new Dialog(getContext(),R.style.chat_record_button_toast_dialog_style);
  view=inflate(getContext(),R.layout.chat_record_layout,null);
  imageView=(ImageView)view.findViewById(R.id.imageView);
  textView=(TextView)view.findViewById(R.id.textView);
  recordIndicator.setContentView(view,new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  recordIndicator.setOnDismissListener(onDismiss);
  LayoutParams lp=recordIndicator.getWindow().getAttributes();
  lp.gravity=Gravity.CENTER;
}","private void initRecordDialog(){
  if (null == recordIndicator) {
    recordIndicator=new Dialog(getContext(),R.style.chat_record_button_toast_dialog_style);
    view=inflate(getContext(),R.layout.chat_record_layout,null);
    imageView=(ImageView)view.findViewById(R.id.imageView);
    textView=(TextView)view.findViewById(R.id.textView);
    recordIndicator.setContentView(view,new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
    recordIndicator.setOnDismissListener(onDismiss);
    LayoutParams lp=recordIndicator.getWindow().getAttributes();
    lp.gravity=Gravity.CENTER;
  }
}"
8516,"private void cancelRecord(){
  stopRecording();
  setBackgroundResource(BACK_IDLE);
  recordIndicator.dismiss();
  Toast.makeText(getContext(),getContext().getString(R.string.chat_cancelRecord),Toast.LENGTH_SHORT).show();
  File file=new File(outputPath);
  if (file.exists()) {
    file.delete();
  }
}","private void cancelRecord(){
  stopRecording();
  setBackgroundResource(BACK_IDLE);
  recordIndicator.dismiss();
  Toast.makeText(getContext(),getContext().getString(R.string.chat_cancelRecord),Toast.LENGTH_SHORT).show();
  removeFile();
}"
8517,"private void finishRecord(){
  stopRecording();
  recordIndicator.dismiss();
  setBackgroundResource(BACK_IDLE);
  long intervalTime=System.currentTimeMillis() - startTime;
  if (intervalTime < MIN_INTERVAL_TIME) {
    Toast.makeText(getContext(),getContext().getString(R.string.chat_record_button_pleaseSayMore),Toast.LENGTH_SHORT).show();
    File file=new File(outputPath);
    file.delete();
    return;
  }
  int sec=Math.round(intervalTime * 1.0f / 1000);
  if (recordEventListener != null) {
    recordEventListener.onFinishedRecord(outputPath,sec);
  }
}","private void finishRecord(){
  stopRecording();
  recordIndicator.dismiss();
  setBackgroundResource(BACK_IDLE);
  long intervalTime=System.currentTimeMillis() - startTime;
  if (intervalTime < MIN_INTERVAL_TIME) {
    Toast.makeText(getContext(),getContext().getString(R.string.chat_record_button_pleaseSayMore),Toast.LENGTH_SHORT).show();
    removeFile();
    return;
  }
  int sec=Math.round(intervalTime * 1.0f / 1000);
  if (recordEventListener != null) {
    recordEventListener.onFinishedRecord(outputPath,sec);
  }
}"
8518,"private void startRecording(){
  if (recorder == null) {
    recorder=new MediaRecorder();
    recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
    recorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
    recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
    recorder.setOutputFile(outputPath);
    try {
      recorder.prepare();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    recorder.reset();
    recorder.setOutputFile(outputPath);
  }
  recorder.start();
  thread=new ObtainDecibelThread();
  thread.start();
  recordEventListener.onStartRecord();
}","private void startRecording(){
  try {
    if (recorder == null) {
      recorder=new MediaRecorder();
      recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
      recorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
      recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
      recorder.setOutputFile(outputPath);
      recorder.prepare();
    }
 else {
      recorder.reset();
      recorder.setOutputFile(outputPath);
    }
    recorder.start();
    thread=new ObtainDecibelThread();
    thread.start();
    recordEventListener.onStartRecord();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
8519,"private void stopRecording(){
  if (thread != null) {
    thread.exit();
    thread=null;
  }
  if (recorder != null) {
    recorder.stop();
    recorder.release();
    recorder=null;
  }
}","private void stopRecording(){
  if (thread != null) {
    thread.exit();
    thread=null;
  }
  if (recorder != null) {
    try {
      recorder.stop();
    }
 catch (    Exception e) {
    }
 finally {
      recorder.release();
      recorder=null;
    }
  }
}"
8520,"public void findConversationsByConversationIds(List<String> ids,AVIMConversationQueryCallback callback){
  if (ids.size() > 0) {
    AVIMConversationQuery q=ChatManager.getInstance().getQuery();
    q.whereContainsIn(Constant.OBJECT_ID,ids);
    q.setLimit(1000);
    q.findInBackground(callback);
  }
 else {
    callback.done(new ArrayList<AVIMConversation>(),null);
  }
}","public void findConversationsByConversationIds(List<String> ids,AVIMConversationQueryCallback callback){
  AVIMConversationQuery conversationQuery=ChatManager.getInstance().getQuery();
  if (ids.size() > 0 && null != conversationQuery) {
    conversationQuery.whereContainsIn(Constant.OBJECT_ID,ids);
    conversationQuery.setLimit(1000);
    conversationQuery.findInBackground(callback);
  }
 else   if (null != callback) {
    callback.done(new ArrayList<AVIMConversation>(),null);
  }
}"
8521,"public void findGroupConversationsIncludeMe(AVIMConversationQueryCallback callback){
  AVIMConversationQuery q=ChatManager.getInstance().getQuery();
  q.containsMembers(Arrays.asList(ChatManager.getInstance().getSelfId()));
  q.whereEqualTo(ConversationType.ATTR_TYPE_KEY,ConversationType.Group.getValue());
  q.orderByDescending(Constant.UPDATED_AT);
  q.findInBackground(callback);
}","public void findGroupConversationsIncludeMe(AVIMConversationQueryCallback callback){
  AVIMConversationQuery conversationQuery=ChatManager.getInstance().getQuery();
  if (null != conversationQuery) {
    conversationQuery.containsMembers(Arrays.asList(ChatManager.getInstance().getSelfId()));
    conversationQuery.whereEqualTo(ConversationType.ATTR_TYPE_KEY,ConversationType.Group.getValue());
    conversationQuery.orderByDescending(Constant.UPDATED_AT);
    conversationQuery.findInBackground(callback);
  }
 else   if (null != callback) {
    callback.done(new ArrayList<AVIMConversation>(),null);
  }
}"
8522,"public AVIMConversationQuery getQuery(){
  return imClient.getQuery();
}","public AVIMConversationQuery getQuery(){
  if (null != imClient) {
    return imClient.getQuery();
  }
  return null;
}"
8523,"@Override public int compare(Room lhs,Room rhs){
  if (lhs.getLastMessage() != null && rhs.getLastMessage() != null) {
    long value=lhs.getLastMessage().getTimestamp() - rhs.getLastMessage().getTimestamp();
    if (value > 0) {
      return -1;
    }
 else     if (value < 0) {
      return 1;
    }
  }
  return 0;
}","@Override public int compare(Room lhs,Room rhs){
  long leftTs=getCompareTimestamp(lhs.getLastMessage());
  long rightTs=getCompareTimestamp(rhs.getLastMessage());
  long value=leftTs - rightTs;
  if (value > 0) {
    return -1;
  }
 else   if (value < 0) {
    return 1;
  }
 else {
    return 0;
  }
}"
8524,"public List<Room> findAndCacheRooms() throws AVException, InterruptedException {
  List<Room> rooms=ChatManager.getInstance().findRecentRooms();
  List<String> convids=new ArrayList<>();
  for (  Room room : rooms) {
    convids.add(room.getConversationId());
  }
  final AVException[] es=new AVException[1];
  final CountDownLatch latch=new CountDownLatch(1);
  CacheService.cacheConvs(convids,new AVIMConversationCallback(){
    @Override public void done(    AVIMException e){
      es[0]=e;
      latch.countDown();
    }
  }
);
  latch.await();
  if (es[0] != null) {
    throw es[0];
  }
  List<Room> validRooms=new ArrayList<>();
  for (  Room room : rooms) {
    AVIMConversation conversation=CacheService.lookupConv(room.getConversationId());
    if (ConversationHelper.isValidConversation(conversation)) {
      validRooms.add(room);
    }
 else {
      LogUtils.e(""String_Node_Str"",getConversationInfo(conversation));
    }
  }
  List<String> userIds=new ArrayList<>();
  for (  Room room : validRooms) {
    AVIMConversation conversation=CacheService.lookupConv(room.getConversationId());
    room.setConversation(conversation);
    room.setLastMessage(ChatManager.getInstance().queryLatestMessage(conversation));
    if (ConversationHelper.typeOfConversation(conversation) == ConversationType.Single) {
      userIds.add(ConversationHelper.otherIdOfConversation(conversation));
    }
  }
  Collections.sort(validRooms,new Comparator<Room>(){
    @Override public int compare(    Room lhs,    Room rhs){
      if (lhs.getLastMessage() != null && rhs.getLastMessage() != null) {
        long value=lhs.getLastMessage().getTimestamp() - rhs.getLastMessage().getTimestamp();
        if (value > 0) {
          return -1;
        }
 else         if (value < 0) {
          return 1;
        }
      }
      return 0;
    }
  }
);
  CacheService.cacheUsers(new ArrayList<>(userIds));
  return validRooms;
}","public List<Room> findAndCacheRooms() throws AVException, InterruptedException {
  List<Room> rooms=ChatManager.getInstance().findRecentRooms();
  List<String> convids=new ArrayList<>();
  for (  Room room : rooms) {
    convids.add(room.getConversationId());
  }
  final AVException[] es=new AVException[1];
  final CountDownLatch latch=new CountDownLatch(1);
  CacheService.cacheConvs(convids,new AVIMConversationCallback(){
    @Override public void done(    AVIMException e){
      es[0]=e;
      latch.countDown();
    }
  }
);
  latch.await();
  if (es[0] != null) {
    throw es[0];
  }
  final List<Room> validRooms=new ArrayList<>();
  for (  Room room : rooms) {
    AVIMConversation conversation=CacheService.lookupConv(room.getConversationId());
    if (ConversationHelper.isValidConversation(conversation)) {
      validRooms.add(room);
    }
 else {
      LogUtils.e(""String_Node_Str"",getConversationInfo(conversation));
    }
  }
  List<String> userIds=new ArrayList<>();
  for (  Room room : validRooms) {
    AVIMConversation conversation=CacheService.lookupConv(room.getConversationId());
    room.setConversation(conversation);
    room.setLastMessage(ChatManager.getInstance().queryLatestMessage(conversation));
    if (ConversationHelper.typeOfConversation(conversation) == ConversationType.Single) {
      userIds.add(ConversationHelper.otherIdOfConversation(conversation));
    }
  }
  Collections.sort(validRooms,new Comparator<Room>(){
    private long getCompareTimestamp(    AVIMMessage msg){
      long ts;
      if (msg != null) {
        ts=msg.getTimestamp();
      }
 else {
        ts=0;
      }
      return ts;
    }
    @Override public int compare(    Room lhs,    Room rhs){
      long leftTs=getCompareTimestamp(lhs.getLastMessage());
      long rightTs=getCompareTimestamp(rhs.getLastMessage());
      long value=leftTs - rightTs;
      if (value > 0) {
        return -1;
      }
 else       if (value < 0) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  CacheService.cacheUsers(new ArrayList<>(userIds));
  return validRooms;
}"
8525,"private void initChatManager(){
  final ChatManager chatManager=ChatManager.getInstance();
  chatManager.init(this);
  if (AVUser.getCurrentUser() != null) {
    chatManager.setupDatabaseWithSelfId(AVUser.getCurrentUser().getObjectId());
  }
  chatManager.setConversationEventHandler(ConversationManager.getEventHandler());
  ChatManagerAdapterImpl chatManagerAdapter=new ChatManagerAdapterImpl(App.ctx);
  chatManager.setChatManagerAdapter(chatManagerAdapter);
  ChatManager.setDebugEnabled(App.debug);
}","private void initChatManager(){
  final ChatManager chatManager=ChatManager.getInstance();
  chatManager.init(this);
  if (AVUser.getCurrentUser() != null) {
    chatManager.setupManagerWithUserId(AVUser.getCurrentUser().getObjectId());
  }
  chatManager.setConversationEventHandler(ConversationManager.getEventHandler());
  ChatManagerAdapterImpl chatManagerAdapter=new ChatManagerAdapterImpl(App.ctx);
  chatManager.setChatManagerAdapter(chatManagerAdapter);
  ChatManager.setDebugEnabled(App.debug);
}"
8526,"public void findConversationsByConversationIds(List<String> ids,AVIMConversationQueryCallback callback){
  if (ids.size() > 0) {
    AVIMConversationQuery q=ChatManager.getInstance().getQuery();
    q.whereContainsIn(Constant.OBJECT_ID,ids);
    q.setLimit(1000);
    q.findInBackground(callback);
  }
 else {
    callback.done(new ArrayList<AVIMConversation>(),null);
  }
}","public void findConversationsByConversationIds(List<String> ids,AVIMConversationQueryCallback callback){
  if (ids.size() > 0) {
    AVIMConversationQuery q=ChatManager.getInstance().getConversationQuery();
    q.whereContainsIn(Constant.OBJECT_ID,ids);
    q.setLimit(1000);
    q.findInBackground(callback);
  }
 else {
    callback.done(new ArrayList<AVIMConversation>(),null);
  }
}"
8527,"public void createGroupConversation(List<String> members,final AVIMConversationCreatedCallback callback){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(ConversationType.TYPE_KEY,ConversationType.Group.getValue());
  final String name=MessageHelper.nameByUserIds(members);
  map.put(ConversationType.NAME_KEY,name);
  ChatManager.getInstance().getImClient().createConversation(members,map,callback);
}","public void createGroupConversation(List<String> members,final AVIMConversationCreatedCallback callback){
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(ConversationType.TYPE_KEY,ConversationType.Group.getValue());
  final String name=MessageHelper.nameByUserIds(members);
  map.put(""String_Node_Str"",name);
  ChatManager.getInstance().createConversation(members,map,callback);
}"
8528,"public void findGroupConversationsIncludeMe(AVIMConversationQueryCallback callback){
  AVIMConversationQuery q=ChatManager.getInstance().getQuery();
  q.containsMembers(Arrays.asList(ChatManager.getInstance().getSelfId()));
  q.whereEqualTo(ConversationType.ATTR_TYPE_KEY,ConversationType.Group.getValue());
  q.orderByDescending(Constant.UPDATED_AT);
  q.findInBackground(callback);
}","public void findGroupConversationsIncludeMe(AVIMConversationQueryCallback callback){
  AVIMConversationQuery q=ChatManager.getInstance().getConversationQuery();
  q.containsMembers(Arrays.asList(ChatManager.getInstance().getSelfId()));
  q.whereEqualTo(ConversationType.ATTR_TYPE_KEY,ConversationType.Group.getValue());
  q.orderByDescending(Constant.UPDATED_AT);
  q.findInBackground(callback);
}"
8529,"public static void goMainActivityFromActivity(Activity fromActivity){
  EventBus eventBus=EventBus.getDefault();
  eventBus.post(new LoginFinishEvent());
  ChatManager chatManager=ChatManager.getInstance();
  chatManager.setupDatabaseWithSelfId(AVUser.getCurrentUser().getObjectId());
  chatManager.openClientWithSelfId(AVUser.getCurrentUser().getObjectId(),null);
  Intent intent=new Intent(fromActivity,MainActivity.class);
  fromActivity.startActivity(intent);
}","public static void goMainActivityFromActivity(Activity fromActivity){
  EventBus eventBus=EventBus.getDefault();
  eventBus.post(new LoginFinishEvent());
  ChatManager chatManager=ChatManager.getInstance();
  chatManager.setupManagerWithUserId(AVUser.getCurrentUser().getObjectId());
  chatManager.openClientWithUserId(null);
  Intent intent=new Intent(fromActivity,MainActivity.class);
  fromActivity.startActivity(intent);
}"
8530,"@OnClick(R.id.quit_layout) void quit(){
  final String convid=conv().getConversationId();
  conv().quit(new AVIMConversationCallback(){
    @Override public void done(    AVException e){
      if (filterException(e)) {
        RoomsTable roomsTable=RoomsTable.getCurrentUserInstance();
        roomsTable.deleteRoom(convid);
        Utils.toast(R.string.conversation_alreadyQuitConv);
        ConversationDetailActivity.this.finish();
        if (ChatActivity.getChatInstance() != null) {
          ChatActivity.getChatInstance().finish();
        }
      }
    }
  }
);
}","@OnClick(R.id.quit_layout) void quit(){
  final String convid=conv().getConversationId();
  conv().quit(new AVIMConversationCallback(){
    @Override public void done(    AVException e){
      if (filterException(e)) {
        ChatManager.getInstance().getRoomsTable().deleteRoom(convid);
        Utils.toast(R.string.conversation_alreadyQuitConv);
        ConversationDetailActivity.this.finish();
        if (ChatActivity.getChatInstance() != null) {
          ChatActivity.getChatInstance().finish();
        }
      }
    }
  }
);
}"
8531,"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.avatarLayout) {
    Intent intent=new Intent(Intent.ACTION_PICK,null);
    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,""String_Node_Str"");
    startActivityForResult(intent,IMAGE_PICK_REQUEST);
  }
 else   if (id == R.id.logoutLayout) {
    RoomsTable.DBHelper.getCurrentUserInstance().closeHelper();
    chatManager.closeWithCallback(new AVIMClientCallback(){
      @Override public void done(      AVIMClient avimClient,      AVException e){
      }
    }
);
    AVUser.logOut();
    getActivity().finish();
    Utils.goActivity(ctx,EntryLoginActivity.class);
  }
 else   if (id == R.id.notifyLayout) {
    Utils.goActivity(ctx,ProfileNotifySettingActivity.class);
  }
 else   if (id == R.id.updateLayout) {
    UpdateService updateService=UpdateService.getInstance(getActivity());
    updateService.showSureUpdateDialog();
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.avatarLayout) {
    Intent intent=new Intent(Intent.ACTION_PICK,null);
    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,""String_Node_Str"");
    startActivityForResult(intent,IMAGE_PICK_REQUEST);
  }
 else   if (id == R.id.logoutLayout) {
    chatManager.closeWithCallback(new AVIMClientCallback(){
      @Override public void done(      AVIMClient avimClient,      AVException e){
      }
    }
);
    AVUser.logOut();
    getActivity().finish();
    Utils.goActivity(ctx,EntryLoginActivity.class);
  }
 else   if (id == R.id.notifyLayout) {
    Utils.goActivity(ctx,ProfileNotifySettingActivity.class);
  }
 else   if (id == R.id.updateLayout) {
    UpdateService updateService=UpdateService.getInstance(getActivity());
    updateService.showSureUpdateDialog();
  }
}"
8532,"@Override public void onCreate(){
  super.onCreate();
  AVOSCloud.initialize(this,""String_Node_Str"",""String_Node_Str"");
  ChatManager.setDebugEnabled(true);
  AVOSCloud.setDebugLogEnabled(true);
  final ChatManager chatManager=ChatManager.getInstance();
  chatManager.init(this);
  chatManager.setChatManagerAdapter(new ChatManagerAdapter(){
    @Override public UserInfo getUserInfoById(    String userId){
      UserInfo userInfo=new UserInfo();
      userInfo.setUsername(userId);
      userInfo.setAvatarUrl(""String_Node_Str"");
      return userInfo;
    }
    @Override public void cacheUserInfoByIdsInBackground(    List<String> userIds) throws Exception {
    }
    @Override public void shouldShowNotification(    Context context,    String selfId,    AVIMConversation conversation,    AVIMTypedMessage message){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
);
  initImageLoader(this);
}","@Override public void onCreate(){
  super.onCreate();
  AVOSCloud.initialize(this,""String_Node_Str"",""String_Node_Str"");
  ChatManager.setDebugEnabled(true);
  AVOSCloud.setDebugLogEnabled(true);
  ChatManager.getInstance().init(this);
  ChatManager.getInstance().setChatManagerAdapter(new ChatManagerAdapter(){
    @Override public UserInfo getUserInfoById(    String userId){
      UserInfo userInfo=new UserInfo();
      userInfo.setUsername(userId);
      userInfo.setAvatarUrl(""String_Node_Str"");
      return userInfo;
    }
    @Override public void cacheUserInfoByIdsInBackground(    List<String> userIds) throws Exception {
    }
    @Override public void shouldShowNotification(    Context context,    String selfId,    AVIMConversation conversation,    AVIMTypedMessage message){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
);
  initImageLoader(this);
}"
8533,"@Override public void onClick(View view){
  String selfId=selfIdEditText.getText().toString();
  if (!TextUtils.isEmpty(selfId)) {
    ChatManager chatManager=ChatManager.getInstance();
    chatManager.setupDatabaseWithSelfId(selfId);
    chatManager.openClientWithSelfId(selfId,new AVIMClientCallback(){
      @Override public void done(      AVIMClient avimClient,      AVException e){
        if (e != null) {
          e.printStackTrace();
        }
        Intent intent=new Intent(LoginActivity.this,MainActivity.class);
        startActivity(intent);
        finish();
      }
    }
);
  }
}","@Override public void onClick(View view){
  String selfId=selfIdEditText.getText().toString();
  if (!TextUtils.isEmpty(selfId)) {
    ChatManager chatManager=ChatManager.getInstance();
    chatManager.setupManagerWithUserId(selfId);
    chatManager.openClientWithUserId(new AVIMClientCallback(){
      @Override public void done(      AVIMClient avimClient,      AVException e){
        if (e != null) {
          e.printStackTrace();
        }
        Intent intent=new Intent(LoginActivity.this,MainActivity.class);
        startActivity(intent);
        finish();
      }
    }
);
  }
}"
8534,"public static String getCurrentChattingConvid(){
  return currentChattingConvid;
}","public static String getCurrentChattingConvid(){
  return ChatManager.currentChattingConvid;
}"
8535,"void commonInit(){
  chatInstance=this;
  roomsTable=RoomsTable.getCurrentUserInstance();
  eventBus=EventBus.getDefault();
  eventBus.register(this);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
}","void commonInit(){
  chatInstance=this;
  roomsTable=ChatManager.getInstance().getRoomsTable();
  eventBus=EventBus.getDefault();
  eventBus.register(this);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
}"
8536,"protected void onLocationMessageViewClicked(AVIMLocationMessage locationMessage){
}","/** 
 * 当地图消息view被点击时
 * @param locationMessage
 */
protected void onLocationMessageViewClicked(AVIMLocationMessage locationMessage){
}"
8537,"@Override public void onFailButtonClick(AVIMTypedMessage msg){
  messageAgent.resendMessage(msg,new MessageAgent.SendCallback(){
    @Override public void onError(    AVIMTypedMessage message,    Exception e){
      Utils.log();
      loadMessagesWhenInit(adapter.getCount());
    }
    @Override public void onSuccess(    AVIMTypedMessage message){
      Utils.log();
      loadMessagesWhenInit(adapter.getCount());
    }
  }
);
}","@Override public void onFailButtonClick(AVIMTypedMessage msg){
  messageAgent.resendMessage(msg,new MessageAgent.SendCallback(){
    @Override public void onError(    AVIMTypedMessage message,    Exception e){
      LogUtils.i();
      loadMessagesWhenInit(adapter.getCount());
    }
    @Override public void onSuccess(    AVIMTypedMessage message){
      LogUtils.i();
      loadMessagesWhenInit(adapter.getCount());
    }
  }
);
}"
8538,"public void loadOldMessages(){
  if (adapter.getDatas().size() == 0) {
    refreshableView.finishRefreshing();
    return;
  }
 else {
    AVIMTypedMessage firstMsg=adapter.getDatas().get(0);
    String msgId=adapter.getDatas().get(0).getMessageId();
    long time=firstMsg.getTimestamp();
    ChatManager.getInstance().queryMessages(conversation,msgId,time,PAGE_SIZE,new AVIMTypedMessagesArrayCallback(){
      @Override public void done(      List<AVIMTypedMessage> typedMessages,      AVException e){
        refreshableView.finishRefreshing();
        if (filterException(e)) {
          new CacheMessagesTask(ChatActivity.this,typedMessages){
            @Override void onSucceed(            List<AVIMTypedMessage> typedMessages){
              List<AVIMTypedMessage> newMessages=new ArrayList<>();
              newMessages.addAll(typedMessages);
              newMessages.addAll(adapter.getDatas());
              adapter.setDatas(newMessages);
              adapter.notifyDataSetChanged();
              if (typedMessages.size() > 0) {
                messageListView.setSelection(typedMessages.size() - 1);
              }
 else {
                toast(R.string.chat_activity_loadMessagesFinish);
              }
            }
          }
.execute();
        }
      }
    }
);
  }
}","public void loadOldMessages(){
  if (adapter.getDatas().size() == 0) {
    refreshableView.finishRefreshing();
    return;
  }
 else {
    AVIMTypedMessage firstMsg=adapter.getDatas().get(0);
    String msgId=firstMsg.getMessageId();
    long time=firstMsg.getTimestamp();
    ChatManager.getInstance().queryMessages(conversation,msgId,time,PAGE_SIZE,new AVIMTypedMessagesArrayCallback(){
      @Override public void done(      List<AVIMTypedMessage> typedMessages,      AVException e){
        refreshableView.finishRefreshing();
        if (filterException(e)) {
          new CacheMessagesTask(ChatActivity.this,typedMessages){
            @Override void onSucceed(            List<AVIMTypedMessage> typedMessages){
              List<AVIMTypedMessage> newMessages=new ArrayList<>(PAGE_SIZE);
              newMessages.addAll(typedMessages);
              newMessages.addAll(adapter.getDatas());
              adapter.setDatas(newMessages);
              adapter.notifyDataSetChanged();
              if (typedMessages.size() > 0) {
                messageListView.setSelection(typedMessages.size() - 1);
              }
 else {
                toast(R.string.chat_activity_loadMessagesFinish);
              }
            }
          }
.execute();
        }
      }
    }
);
  }
}"
8539,"@Override protected Void doInBackground(Void... voids){
  try {
    Set<String> userIds=new HashSet<String>();
    for (    AVIMTypedMessage msg : messages) {
      AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
      if (type == AVIMReservedMessageType.AudioMessageType) {
        File file=new File(MessageHelper.getFilePath(msg));
        if (!file.exists()) {
          AVIMAudioMessage audioMsg=(AVIMAudioMessage)msg;
          String url=audioMsg.getFileUrl();
          Utils.downloadFileIfNotExists(url,file);
        }
      }
      userIds.add(msg.getFrom());
    }
    if (chatManager.getChatManagerAdapter() == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    chatManager.getChatManagerAdapter().cacheUserInfoByIdsInBackground(new ArrayList<String>(userIds));
  }
 catch (  Exception e) {
    this.e=e;
  }
  return null;
}","@Override protected Void doInBackground(Void... voids){
  try {
    Set<String> userIds=new HashSet<String>();
    for (    AVIMTypedMessage msg : messages) {
      AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
      if (type == AVIMReservedMessageType.AudioMessageType) {
        File file=new File(MessageHelper.getFilePath(msg));
        if (!file.exists()) {
          AVIMAudioMessage audioMsg=(AVIMAudioMessage)msg;
          String url=audioMsg.getFileUrl();
          Utils.downloadFileIfNotExists(url,file);
        }
      }
      userIds.add(msg.getFrom());
    }
    if (chatManager.getChatManagerAdapter() == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    chatManager.getChatManagerAdapter().cacheUserInfoByIdsInBackground(new ArrayList<String>(userIds));
  }
 catch (  Exception e) {
    this.e=e;
  }
  return null;
}"
8540,"public void initData(Intent intent){
  String convid=intent.getStringExtra(CONVID);
  conversation=chatManager.lookUpConversationById(convid);
  if (conversation == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  initActionBar(ConversationHelper.titleOfConversation(conversation));
  messageAgent=new MessageAgent(conversation);
  messageAgent.setSendCallback(defaultSendCallback);
  roomsTable.clearUnread(conversation.getConversationId());
  conversationType=ConversationHelper.typeOfConversation(conversation);
  bindAdapterToListView(conversationType);
}","public void initData(Intent intent){
  String convid=intent.getStringExtra(CONVID);
  conversation=chatManager.lookUpConversationById(convid);
  if (isConversationEmpty(conversation)) {
    return;
  }
  initActionBar(ConversationHelper.titleOfConversation(conversation));
  messageAgent=new MessageAgent(conversation);
  messageAgent.setSendCallback(defaultSendCallback);
  roomsTable.clearUnread(conversation.getConversationId());
  conversationType=ConversationHelper.typeOfConversation(conversation);
  bindAdapterToListView(conversationType);
}"
8541,"public static void setCurrentChattingConvid(String currentChattingConvid){
  ChatActivity.currentChattingConvid=currentChattingConvid;
}","public static void setCurrentChattingConvid(String currentChattingConvid){
  ChatManager.currentChattingConvid=currentChattingConvid;
}"
8542,"protected void initActionBar(String title){
  ActionBar actionBar=getActionBar();
  if (actionBar == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (title != null) {
    actionBar.setTitle(title);
  }
  actionBar.setDisplayUseLogoEnabled(false);
  actionBar.setDisplayHomeAsUpEnabled(true);
}","protected void initActionBar(String title){
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    if (title != null) {
      actionBar.setTitle(title);
    }
    actionBar.setDisplayUseLogoEnabled(false);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
 else {
    LogUtils.i(""String_Node_Str"");
  }
}"
8543,"@Override public void done(List<AVIMTypedMessage> typedMessages,AVException e){
  refreshableView.finishRefreshing();
  if (filterException(e)) {
    new CacheMessagesTask(ChatActivity.this,typedMessages){
      @Override void onSucceed(      List<AVIMTypedMessage> typedMessages){
        List<AVIMTypedMessage> newMessages=new ArrayList<>();
        newMessages.addAll(typedMessages);
        newMessages.addAll(adapter.getDatas());
        adapter.setDatas(newMessages);
        adapter.notifyDataSetChanged();
        if (typedMessages.size() > 0) {
          messageListView.setSelection(typedMessages.size() - 1);
        }
 else {
          toast(R.string.chat_activity_loadMessagesFinish);
        }
      }
    }
.execute();
  }
}","@Override public void done(List<AVIMTypedMessage> typedMessages,AVException e){
  refreshableView.finishRefreshing();
  if (filterException(e)) {
    new CacheMessagesTask(ChatActivity.this,typedMessages){
      @Override void onSucceed(      List<AVIMTypedMessage> typedMessages){
        List<AVIMTypedMessage> newMessages=new ArrayList<>(PAGE_SIZE);
        newMessages.addAll(typedMessages);
        newMessages.addAll(adapter.getDatas());
        adapter.setDatas(newMessages);
        adapter.notifyDataSetChanged();
        if (typedMessages.size() > 0) {
          messageListView.setSelection(typedMessages.size() - 1);
        }
 else {
          toast(R.string.chat_activity_loadMessagesFinish);
        }
      }
    }
.execute();
  }
}"
8544,"@Override protected void onResume(){
  super.onResume();
  if (conversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  setCurrentChattingConvid(conversation.getConversationId());
}","@Override protected void onResume(){
  super.onResume();
  if (isConversationEmpty(conversation)) {
    return;
  }
  setCurrentChattingConvid(conversation.getConversationId());
}"
8545,"@Override void onSucceed(List<AVIMTypedMessage> typedMessages){
  List<AVIMTypedMessage> newMessages=new ArrayList<>();
  newMessages.addAll(typedMessages);
  newMessages.addAll(adapter.getDatas());
  adapter.setDatas(newMessages);
  adapter.notifyDataSetChanged();
  if (typedMessages.size() > 0) {
    messageListView.setSelection(typedMessages.size() - 1);
  }
 else {
    toast(R.string.chat_activity_loadMessagesFinish);
  }
}","@Override void onSucceed(List<AVIMTypedMessage> typedMessages){
  List<AVIMTypedMessage> newMessages=new ArrayList<>(PAGE_SIZE);
  newMessages.addAll(typedMessages);
  newMessages.addAll(adapter.getDatas());
  adapter.setDatas(newMessages);
  adapter.notifyDataSetChanged();
  if (typedMessages.size() > 0) {
    messageListView.setSelection(typedMessages.size() - 1);
  }
 else {
    toast(R.string.chat_activity_loadMessagesFinish);
  }
}"
8546,"public void initRecordBtn(){
  recordBtn.setSavePath(com.avoscloud.leanchatlib.utils.PathUtils.getRecordTmpPath());
  recordBtn.setRecordEventListener(new RecordButton.RecordEventListener(){
    @Override public void onFinishedRecord(    final String audioPath,    int secs){
      messageAgent.sendAudio(audioPath);
    }
    @Override public void onStartRecord(){
    }
  }
);
}","public void initRecordBtn(){
  recordBtn.setSavePath(PathUtils.getRecordTmpPath());
  recordBtn.setRecordEventListener(new RecordButton.RecordEventListener(){
    @Override public void onFinishedRecord(    final String audioPath,    int secs){
      messageAgent.sendAudio(audioPath);
    }
    @Override public void onStartRecord(){
    }
  }
);
}"
8547,"@Override public void onError(AVIMTypedMessage message,Exception e){
  Utils.log();
  addMessageAndScroll(message);
}","@Override public void onError(AVIMTypedMessage message,Exception e){
  LogUtils.i();
  addMessageAndScroll(message);
}"
8548,"protected void onAddLocationButtonClicked(View v){
}","/** 
 * 当发送地理位置按钮被点击时
 * @param v
 */
protected void onAddLocationButtonClicked(View v){
}"
8549,"public void onEvent(MessageEvent messageEvent){
  final AVIMTypedMessage message=messageEvent.getMessage();
  if (message.getConversationId().equals(conversation.getConversationId())) {
    if (messageEvent.getType() == MessageEvent.Type.Come) {
      new CacheMessagesTask(this,Arrays.asList(message)){
        @Override void onSucceed(        List<AVIMTypedMessage> messages){
          addMessageAndScroll(message);
        }
      }
.execute();
    }
 else     if (messageEvent.getType() == MessageEvent.Type.Receipt) {
      Utils.log(""String_Node_Str"");
      AVIMTypedMessage originMessage=findMessage(message.getMessageId());
      if (originMessage != null) {
        originMessage.setMessageStatus(message.getMessageStatus());
        originMessage.setReceiptTimestamp(message.getReceiptTimestamp());
        adapter.notifyDataSetChanged();
      }
    }
  }
}","public void onEvent(MessageEvent messageEvent){
  final AVIMTypedMessage message=messageEvent.getMessage();
  if (message.getConversationId().equals(conversation.getConversationId())) {
    if (messageEvent.getType() == MessageEvent.Type.Come) {
      new CacheMessagesTask(this,Arrays.asList(message)){
        @Override void onSucceed(        List<AVIMTypedMessage> messages){
          addMessageAndScroll(message);
        }
      }
.execute();
    }
 else     if (messageEvent.getType() == MessageEvent.Type.Receipt) {
      AVIMTypedMessage originMessage=findMessage(message.getMessageId());
      if (originMessage != null) {
        originMessage.setMessageStatus(message.getMessageStatus());
        originMessage.setReceiptTimestamp(message.getReceiptTimestamp());
        adapter.notifyDataSetChanged();
      }
    }
  }
}"
8550,"private void bindAdapterToListView(ConversationType conversationType){
  adapter=new ChatMessageAdapter(this,conversationType);
  adapter.setClickListener(new ChatMessageAdapter.ClickListener(){
    @Override public void onFailButtonClick(    AVIMTypedMessage msg){
      messageAgent.resendMessage(msg,new MessageAgent.SendCallback(){
        @Override public void onError(        AVIMTypedMessage message,        Exception e){
          Utils.log();
          loadMessagesWhenInit(adapter.getCount());
        }
        @Override public void onSuccess(        AVIMTypedMessage message){
          Utils.log();
          loadMessagesWhenInit(adapter.getCount());
        }
      }
);
    }
    @Override public void onLocationViewClick(    AVIMLocationMessage locMsg){
      onLocationMessageViewClicked(locMsg);
    }
    @Override public void onImageViewClick(    AVIMImageMessage imageMsg){
      ImageBrowserActivity.go(ChatActivity.this,MessageHelper.getFilePath(imageMsg),imageMsg.getFileUrl());
    }
  }
);
  messageListView.setAdapter(adapter);
}","private void bindAdapterToListView(ConversationType conversationType){
  adapter=new ChatMessageAdapter(this,conversationType);
  adapter.setClickListener(new ChatMessageAdapter.ClickListener(){
    @Override public void onFailButtonClick(    AVIMTypedMessage msg){
      messageAgent.resendMessage(msg,new MessageAgent.SendCallback(){
        @Override public void onError(        AVIMTypedMessage message,        Exception e){
          LogUtils.i();
          loadMessagesWhenInit(adapter.getCount());
        }
        @Override public void onSuccess(        AVIMTypedMessage message){
          LogUtils.i();
          loadMessagesWhenInit(adapter.getCount());
        }
      }
);
    }
    @Override public void onLocationViewClick(    AVIMLocationMessage locMsg){
      onLocationMessageViewClicked(locMsg);
    }
    @Override public void onImageViewClick(    AVIMImageMessage imageMsg){
      ImageBrowserActivity.go(ChatActivity.this,MessageHelper.getFilePath(imageMsg),imageMsg.getFileUrl());
    }
  }
);
  messageListView.setAdapter(adapter);
}"
8551,"@Override public void onSuccess(AVIMTypedMessage message){
  Utils.log();
  addMessageAndScroll(message);
}","@Override public void onSuccess(AVIMTypedMessage message){
  addMessageAndScroll(message);
}"
8552,"@Override public int getItemViewType(int position){
  AVIMTypedMessage msg=datas.get(position);
  boolean comeMsg=isComeMsg(msg);
  MsgViewType viewType;
  AVIMReservedMessageType msgType=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
switch (msgType) {
case TextMessageType:
    viewType=comeMsg ? MsgViewType.ComeText : MsgViewType.ToText;
  break;
case ImageMessageType:
viewType=comeMsg ? MsgViewType.ComeImage : MsgViewType.ToImage;
break;
case AudioMessageType:
viewType=comeMsg ? MsgViewType.ComeAudio : MsgViewType.ToAudio;
break;
case LocationMessageType:
viewType=comeMsg ? MsgViewType.ComeLocation : MsgViewType.ToLocation;
break;
default :
throw new IllegalStateException();
}
return viewType.getValue();
}","@Override public int getItemViewType(int position){
  AVIMTypedMessage msg=datas.get(position);
  boolean comeMsg=isComeMsg(msg);
  MsgViewType viewType;
  AVIMReservedMessageType msgType=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
switch (msgType) {
case TextMessageType:
    viewType=comeMsg ? MsgViewType.ComeText : MsgViewType.ToText;
  break;
case ImageMessageType:
viewType=comeMsg ? MsgViewType.ComeImage : MsgViewType.ToImage;
break;
case AudioMessageType:
viewType=comeMsg ? MsgViewType.ComeAudio : MsgViewType.ToAudio;
break;
case LocationMessageType:
viewType=comeMsg ? MsgViewType.ComeLocation : MsgViewType.ToLocation;
break;
default :
viewType=comeMsg ? MsgViewType.ComeText : MsgViewType.ToText;
break;
}
return viewType.getValue();
}"
8553,"private void initPlayBtn(AVIMTypedMessage msg,PlayButton playBtn){
  playBtn.setLeftSide(isComeMsg(msg));
  AudioHelper audioHelper=AudioHelper.getInstance();
  playBtn.setAudioHelper(audioHelper);
  playBtn.setPath(MessageHelper.getFilePath(msg));
}","private void initPlayBtn(AVIMTypedMessage msg,PlayButton playBtn){
  playBtn.setLeftSide(isComeMsg(msg));
  playBtn.setPath(MessageHelper.getFilePath(msg));
}"
8554,"public View createViewByType(AVIMReservedMessageType type,boolean comeMsg){
  View baseView;
  if (comeMsg) {
    baseView=View.inflate(context,R.layout.chat_item_base_left,null);
  }
 else {
    baseView=View.inflate(context,R.layout.chat_item_base_right,null);
  }
  LinearLayout contentView=(LinearLayout)baseView.findViewById(R.id.contentLayout);
  int contentId;
switch (type) {
case TextMessageType:
    contentId=R.layout.chat_item_text;
  break;
case AudioMessageType:
contentId=R.layout.chat_item_audio;
break;
case ImageMessageType:
contentId=R.layout.chat_item_image;
break;
case LocationMessageType:
contentId=R.layout.chat_item_location;
break;
default :
throw new IllegalStateException();
}
contentView.removeAllViews();
View content=View.inflate(context,contentId,null);
if (type == AVIMReservedMessageType.AudioMessageType) {
PlayButton btn=(PlayButton)content;
btn.setLeftSide(comeMsg);
}
 else if (type == AVIMReservedMessageType.TextMessageType) {
TextView textView=(TextView)content;
if (comeMsg) {
textView.setTextColor(Color.BLACK);
}
 else {
textView.setTextColor(Color.WHITE);
}
}
contentView.addView(content);
return baseView;
}","public View createViewByType(AVIMReservedMessageType type,boolean comeMsg){
  View baseView;
  if (comeMsg) {
    baseView=View.inflate(context,R.layout.chat_item_base_left,null);
  }
 else {
    baseView=View.inflate(context,R.layout.chat_item_base_right,null);
  }
  LinearLayout contentView=(LinearLayout)baseView.findViewById(R.id.contentLayout);
  int contentId;
switch (type) {
case TextMessageType:
    contentId=R.layout.chat_item_text;
  break;
case AudioMessageType:
contentId=R.layout.chat_item_audio;
break;
case ImageMessageType:
contentId=R.layout.chat_item_image;
break;
case LocationMessageType:
contentId=R.layout.chat_item_location;
break;
default :
contentId=R.layout.chat_item_text;
break;
}
contentView.removeAllViews();
View content=View.inflate(context,contentId,null);
if (type == AVIMReservedMessageType.AudioMessageType) {
PlayButton btn=(PlayButton)content;
btn.setLeftSide(comeMsg);
}
 else if (type == AVIMReservedMessageType.TextMessageType) {
TextView textView=(TextView)content;
if (comeMsg) {
textView.setTextColor(Color.BLACK);
}
 else {
textView.setTextColor(Color.WHITE);
}
}
contentView.addView(content);
return baseView;
}"
8555,"public View getView(int position,View conView,ViewGroup parent){
  AVIMTypedMessage msg=datas.get(position);
  boolean isComMsg=isComeMsg(msg);
  if (conView == null) {
    conView=createViewByType(AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType()),isComMsg);
  }
  TextView sendTimeView=ViewHolder.findViewById(conView,R.id.sendTimeView);
  TextView contentView=ViewHolder.findViewById(conView,R.id.textContent);
  View contentLayout=ViewHolder.findViewById(conView,R.id.contentLayout);
  ImageView imageView=ViewHolder.findViewById(conView,R.id.imageView);
  ImageView avatarView=ViewHolder.findViewById(conView,R.id.avatar);
  PlayButton playBtn=ViewHolder.findViewById(conView,R.id.playBtn);
  TextView locationView=ViewHolder.findViewById(conView,R.id.locationView);
  TextView usernameView=ViewHolder.findViewById(conView,R.id.username);
  View statusSendFailed=ViewHolder.findViewById(conView,R.id.status_send_failed);
  View statusSendSucceed=ViewHolder.findViewById(conView,R.id.status_send_succeed);
  View statusSendStart=ViewHolder.findViewById(conView,R.id.status_send_start);
  if (position == 0 || haveTimeGap(datas.get(position - 1).getTimestamp(),msg.getTimestamp())) {
    sendTimeView.setVisibility(View.VISIBLE);
    sendTimeView.setText(millisecsToDateString(msg.getTimestamp()));
  }
 else {
    sendTimeView.setVisibility(View.GONE);
  }
  UserInfo user=ChatManager.getInstance().getChatManagerAdapter().getUserInfoById(msg.getFrom());
  if (user == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (isComMsg) {
    if (conversationType == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    if (conversationType == ConversationType.Single) {
      usernameView.setVisibility(View.GONE);
    }
 else {
      usernameView.setVisibility(View.VISIBLE);
      usernameView.setText(user.getUsername());
    }
  }
  ImageLoader.getInstance().displayImage(user.getAvatarUrl(),avatarView,PhotoUtils.avatarImageOptions);
  AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
switch (type) {
case TextMessageType:
    AVIMTextMessage textMsg=(AVIMTextMessage)msg;
  contentView.setText(EmotionHelper.replace(ChatManager.getContext(),textMsg.getText()));
contentLayout.requestLayout();
break;
case ImageMessageType:
AVIMImageMessage imageMsg=(AVIMImageMessage)msg;
PhotoUtils.displayImageCacheElseNetwork(imageView,MessageHelper.getFilePath(imageMsg),imageMsg.getFileUrl());
setImageOnClickListener(imageView,imageMsg);
break;
case AudioMessageType:
initPlayBtn(msg,playBtn);
break;
case LocationMessageType:
setLocationView(msg,locationView);
break;
default :
break;
}
if (isComMsg == false) {
hideStatusViews(statusSendStart,statusSendFailed,statusSendSucceed);
setSendFailedBtnListener(statusSendFailed,msg);
switch (msg.getMessageStatus()) {
case AVIMMessageStatusFailed:
statusSendFailed.setVisibility(View.VISIBLE);
break;
case AVIMMessageStatusSent:
if (conversationType == ConversationType.Single) {
statusSendSucceed.setVisibility(View.VISIBLE);
}
break;
case AVIMMessageStatusSending:
statusSendStart.setVisibility(View.VISIBLE);
break;
case AVIMMessageStatusNone:
case AVIMMessageStatusReceipt:
break;
}
}
return conView;
}","public View getView(int position,View conView,ViewGroup parent){
  AVIMTypedMessage msg=datas.get(position);
  boolean isComMsg=isComeMsg(msg);
  if (conView == null) {
    conView=createViewByType(AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType()),isComMsg);
  }
  TextView sendTimeView=ViewHolder.findViewById(conView,R.id.sendTimeView);
  TextView contentView=ViewHolder.findViewById(conView,R.id.textContent);
  View contentLayout=ViewHolder.findViewById(conView,R.id.contentLayout);
  ImageView imageView=ViewHolder.findViewById(conView,R.id.imageView);
  ImageView avatarView=ViewHolder.findViewById(conView,R.id.avatar);
  PlayButton playBtn=ViewHolder.findViewById(conView,R.id.playBtn);
  TextView locationView=ViewHolder.findViewById(conView,R.id.locationView);
  TextView usernameView=ViewHolder.findViewById(conView,R.id.username);
  View statusSendFailed=ViewHolder.findViewById(conView,R.id.status_send_failed);
  View statusSendSucceed=ViewHolder.findViewById(conView,R.id.status_send_succeed);
  View statusSendStart=ViewHolder.findViewById(conView,R.id.status_send_start);
  if (position == 0 || haveTimeGap(datas.get(position - 1).getTimestamp(),msg.getTimestamp())) {
    sendTimeView.setVisibility(View.VISIBLE);
    sendTimeView.setText(millisecsToDateString(msg.getTimestamp()));
  }
 else {
    sendTimeView.setVisibility(View.GONE);
  }
  UserInfo user=ChatManager.getInstance().getChatManagerAdapter().getUserInfoById(msg.getFrom());
  if (user == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (isComMsg) {
    if (conversationType == null) {
      return conView;
    }
    if (conversationType == ConversationType.Single) {
      usernameView.setVisibility(View.GONE);
    }
 else {
      usernameView.setVisibility(View.VISIBLE);
      usernameView.setText(user.getUsername());
    }
  }
  ImageLoader.getInstance().displayImage(user.getAvatarUrl(),avatarView,PhotoUtils.avatarImageOptions);
  AVIMReservedMessageType type=AVIMReservedMessageType.getAVIMReservedMessageType(msg.getMessageType());
switch (type) {
case TextMessageType:
    AVIMTextMessage textMsg=(AVIMTextMessage)msg;
  contentView.setText(EmotionHelper.replace(ChatManager.getContext(),textMsg.getText()));
contentLayout.requestLayout();
break;
case ImageMessageType:
AVIMImageMessage imageMsg=(AVIMImageMessage)msg;
PhotoUtils.displayImageCacheElseNetwork(imageView,MessageHelper.getFilePath(imageMsg),imageMsg.getFileUrl());
setImageOnClickListener(imageView,imageMsg);
break;
case AudioMessageType:
initPlayBtn(msg,playBtn);
break;
case LocationMessageType:
setLocationView(msg,locationView);
break;
default :
contentView.setText(""String_Node_Str"");
contentLayout.requestLayout();
break;
}
if (isComMsg == false) {
hideStatusViews(statusSendStart,statusSendFailed,statusSendSucceed);
setSendFailedBtnListener(statusSendFailed,msg);
switch (msg.getMessageStatus()) {
case AVIMMessageStatusFailed:
statusSendFailed.setVisibility(View.VISIBLE);
break;
case AVIMMessageStatusSent:
if (conversationType == ConversationType.Single) {
statusSendSucceed.setVisibility(View.VISIBLE);
}
break;
case AVIMMessageStatusSending:
statusSendStart.setVisibility(View.VISIBLE);
break;
case AVIMMessageStatusNone:
case AVIMMessageStatusReceipt:
break;
}
}
return conView;
}"
8556,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case LOCATION_REQUEST:
      final double latitude=data.getDoubleExtra(LocationActivity.LATITUDE,0);
    final double longitude=data.getDoubleExtra(LocationActivity.LONGITUDE,0);
  final String address=data.getStringExtra(LocationActivity.ADDRESS);
if (!TextUtils.isEmpty(address)) {
  messageAgent.sendLocation(latitude,longitude,address);
}
 else {
  toast(R.string.chat_cannotGetYourAddressInfo);
}
hideBottomLayout();
break;
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  super.onActivityResult(requestCode,resultCode,intent);
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case LOCATION_REQUEST:
      final double latitude=intent.getDoubleExtra(LocationActivity.LATITUDE,0);
    final double longitude=intent.getDoubleExtra(LocationActivity.LONGITUDE,0);
  final String address=intent.getStringExtra(LocationActivity.ADDRESS);
if (!TextUtils.isEmpty(address)) {
  messageAgent.sendLocation(latitude,longitude,address);
}
 else {
  toast(R.string.chat_cannotGetYourAddressInfo);
}
hideBottomLayout();
break;
}
}
}"
8557,"@TargetApi(Build.VERSION_CODES.KITKAT) @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case GALLERY_REQUEST:
case GALLERY_KITKAT_REQUEST:
      if (data == null) {
        toast(""String_Node_Str"");
        return;
      }
    Uri uri;
  if (requestCode == GALLERY_REQUEST) {
    uri=data.getData();
  }
 else {
    uri=data.getData();
    final int takeFlags=data.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    getContentResolver().takePersistableUriPermission(uri,takeFlags);
  }
String localSelectPath=ProviderPathUtils.getPath(this,uri);
messageAgent.sendImage(localSelectPath);
hideBottomLayout();
break;
case TAKE_CAMERA_REQUEST:
messageAgent.sendImage(localCameraPath);
hideBottomLayout();
break;
}
}
}","@TargetApi(Build.VERSION_CODES.KITKAT) @Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  super.onActivityResult(requestCode,resultCode,intent);
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case GALLERY_REQUEST:
case GALLERY_KITKAT_REQUEST:
      if (intent == null) {
        toast(""String_Node_Str"");
        return;
      }
    Uri uri;
  if (requestCode == GALLERY_REQUEST) {
    uri=intent.getData();
  }
 else {
    uri=intent.getData();
    final int takeFlags=intent.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    getContentResolver().takePersistableUriPermission(uri,takeFlags);
  }
String localSelectPath=ProviderPathUtils.getPath(this,uri);
messageAgent.sendImage(localSelectPath);
hideBottomLayout();
break;
case TAKE_CAMERA_REQUEST:
messageAgent.sendImage(localCameraPath);
hideBottomLayout();
break;
}
}
}"
8558,"public void selectImageFromCamera(){
  Intent openCameraIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
  Uri imageUri=Uri.fromFile(new File(localCameraPath));
  openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);
  startActivityForResult(openCameraIntent,TAKE_CAMERA_REQUEST);
}","public void selectImageFromCamera(){
  Intent takePictureIntent=new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
  Uri imageUri=Uri.fromFile(new File(localCameraPath));
  takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,imageUri);
  if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
    startActivityForResult(takePictureIntent,TAKE_CAMERA_REQUEST);
  }
}"
8559,"public static String checkAndMkdirs(String dir){
  File file=new File(dir);
  if (!file.exists()) {
    file.mkdirs();
  }
  return dir;
}","private static File checkAndMkdirs(File file){
  if (!file.exists()) {
    file.mkdirs();
  }
  return file;
}"
8560,"public static String getCacheDir(){
  return ChatManager.getContext().getCacheDir().getAbsolutePath() + ""String_Node_Str"";
}","private static File getCacheDir(){
  File sdcard=Environment.getExternalStorageDirectory();
  File leanchatDir=new File(sdcard,""String_Node_Str"");
  return leanchatDir;
}"
8561,"public static String getChatFileDir(){
  String dir=getCacheDir() + ""String_Node_Str"";
  return checkAndMkdirs(dir);
}","private static File getChatFileDir(){
  File filesDir=new File(getCacheDir(),""String_Node_Str"");
  return checkAndMkdirs(filesDir);
}"
8562,"public static String getRecordTmpPath(){
  return getChatFileDir() + ""String_Node_Str"";
}","public static String getRecordTmpPath(){
  return new File(getChatFileDir(),""String_Node_Str"").getAbsolutePath();
}"
8563,"public static String getChatFilePath(String id){
  String dir=getChatFileDir();
  String path=dir + id;
  return path;
}","public static String getChatFilePath(String id){
  return new File(getChatFileDir(),id).getAbsolutePath();
}"
8564,"public synchronized static IM getInstance(){
  if (im == null) {
    im=new IM();
  }
  return im;
}","public static synchronized IM getInstance(){
  if (im == null) {
    im=new IM();
  }
  return im;
}"
8565,"@Override protected void onPost(Exception e){
  boolean chatting=ChatActivity.instance != null && ChatActivity.instance.isVisible() && CacheService.isCurConvid(message.getConversationId());
  if (!chatting && AVUser.getCurrentUser() != null) {
    PreferenceMap preferenceMap=PreferenceMap.getCurUserPrefDao(App.ctx);
    if (preferenceMap.isNotifyWhenNews()) {
      notifyMsg(App.ctx,conversation,message);
    }
  }
}","@Override protected void onPost(Exception exception){
  boolean chatting=ChatActivity.instance != null && ChatActivity.instance.isVisible() && CacheService.isCurConvid(message.getConversationId());
  if (!chatting && AVUser.getCurrentUser() != null) {
    PreferenceMap preferenceMap=PreferenceMap.getCurUserPrefDao(App.ctx);
    if (preferenceMap.isNotifyWhenNews()) {
      notifyMsg(App.ctx,conversation,message);
    }
  }
}"
8566,"@Override public void onMessage(final AVIMTypedMessage message,final AVIMConversation conversation,AVIMClient client){
  im.onMessage(message,conversation);
}","@Override public void onMessage(AVIMTypedMessage message,AVIMConversation conversation,AVIMClient client){
  im.onMessage(message,conversation);
}"
8567,"public static ProgressDialog showHorizontalDialog(Activity activity){
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  dialog.setCancelable(true);
  dialog.show();
  return dialog;
}","public static ProgressDialog showHorizontalDialog(Activity activity){
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  dialog.setCancelable(true);
  if (activity.isFinishing() == false) {
    dialog.show();
  }
  return dialog;
}"
8568,"public static ProgressDialog showHorizontalDialog(Activity activity){
  activity=modifyDialogContext(activity);
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  dialog.setCancelable(true);
  dialog.show();
  return dialog;
}","public static ProgressDialog showHorizontalDialog(Activity activity){
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  dialog.setCancelable(true);
  dialog.show();
  return dialog;
}"
8569,"public static AlertDialog.Builder getBaseDialogBuilder(Activity ctx){
  ctx=modifyDialogContext(ctx);
  return new AlertDialog.Builder(ctx).setTitle(R.string.tips).setIcon(R.drawable.icon_info_2);
}","public static AlertDialog.Builder getBaseDialogBuilder(Activity ctx){
  return new AlertDialog.Builder(ctx).setTitle(R.string.tips).setIcon(R.drawable.icon_info_2);
}"
8570,"public static ProgressDialog showSpinnerDialog(Activity activity){
  activity=modifyDialogContext(activity);
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
  dialog.setCancelable(true);
  dialog.setMessage(App.ctx.getString(R.string.hardLoading));
  dialog.show();
  return dialog;
}","public static ProgressDialog showSpinnerDialog(Activity activity){
  ProgressDialog dialog=new ProgressDialog(activity);
  dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
  dialog.setCancelable(true);
  dialog.setMessage(App.ctx.getString(R.string.hardLoading));
  dialog.show();
  return dialog;
}"
8571,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.message_fragment,null);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.message_fragment,container,false);
}"
8572,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.discover_fragment,null);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.discover_fragment,container,false);
}"
8573,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.my_space_fragment,null);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.my_space_fragment,container,false);
}"
8574,"/** 
 * Call this, if you want to override gear method of article handling, in this case, you can provide articles locally and let HelpStack choose from it. It is light weight call. Call this after calling setGear.
 * @param articleResId
 */
public void overrideGearArticlesWithLocalArticlePath(int articleResId){
}","/** 
 * Call this, if you want to override gear method of article handling, in this case, you can provide articles locally and let HelpStack choose from it. It is light weight call. Call this after calling setGear.
 * @param articleResId Article Resource ID
 */
public void overrideGearArticlesWithLocalArticlePath(int articleResId){
}"
8575,"/** 
 * Shows a credit @ bottom of the page.
 * @param showCredits
 */
public void setShowCredits(boolean showCredits){
  this.showCredits=showCredits;
}","/** 
 * Shows a credit @ bottom of the page.
 * @param showCredits Show Credits or not
 */
public void setShowCredits(boolean showCredits){
  this.showCredits=showCredits;
}"
8576,"/** 
 * Starts a Help activity. It shows all FAQ and also let user report new issue if not found in FAQ.
 * @param activity
 */
public void showHelp(Activity activity){
  activity.startActivity(new Intent(""String_Node_Str""));
}","/** 
 * Starts a Help activity. It shows all FAQ and also let user report new issue if not found in FAQ.
 * @param activity Activity
 */
public void showHelp(Activity activity){
  activity.startActivity(new Intent(""String_Node_Str""));
}"
8577,"/** 
 * @param context
 * @return singleton instance of this class.
 */
public static HSHelpStack getInstance(Context context){
  if (singletonInstance == null) {
synchronized (HSHelpStack.class) {
      if (singletonInstance == null) {
        Log.d(TAG,""String_Node_Str"");
        singletonInstance=new HSHelpStack(context.getApplicationContext());
      }
    }
  }
  return singletonInstance;
}","/** 
 * @param context Context
 * @return singleton instance of this class.
 */
public static HSHelpStack getInstance(Context context){
  if (singletonInstance == null) {
synchronized (HSHelpStack.class) {
      if (singletonInstance == null) {
        Log.d(TAG,""String_Node_Str"");
        singletonInstance=new HSHelpStack(context.getApplicationContext());
      }
    }
  }
  return singletonInstance;
}"
8578,"/** 
 * Sets which gear to use in HelpStack. It has to be set before calling any show* functions.
 * @param gear
 */
public void setGear(HSGear gear){
  this.gear=gear;
}","/** 
 * Sets which gear to use in HelpStack. It has to be set before calling any show* functions.
 * @param gear Gear
 */
public void setGear(HSGear gear){
  this.gear=gear;
}"
8579,"/** 
 * @return if credit can be shown.
 * @default Yes
 */
public boolean getShowCredits(){
  return this.showCredits;
}","/** 
 * @return if credit can be shown.
 */
public boolean getShowCredits(){
  return this.showCredits;
}"
8580,"/** 
 * @param cancelTag
 * @param firstName
 * @param lastname
 * @param emailAddress
 * @param queue
 * @param success
 * @param errorListener
 */
public void registerNewUser(String cancelTag,String firstName,String lastname,String emailAddress,RequestQueue queue,OnFetchedSuccessListener success,ErrorListener errorListener){
  success.onSuccess(HSUser.createNewUserWithDetails(firstName,lastname,emailAddress));
}","/** 
 * @param cancelTag Cancel Tag
 * @param firstName First Name
 * @param lastname Last Name
 * @param emailAddress Email Address
 * @param queue Queue
 * @param success Success Listener
 * @param errorListener Error Listener
 */
public void registerNewUser(String cancelTag,String firstName,String lastname,String emailAddress,RequestQueue queue,OnFetchedSuccessListener success,ErrorListener errorListener){
  success.onSuccess(HSUser.createNewUserWithDetails(firstName,lastname,emailAddress));
}"
8581,"/** 
 * @param cancelTag
 * @param ticket
 * @param user
 * @param queue
 * @param success
 * @param errorListener
 */
public void fetchAllUpdateOnTicket(String cancelTag,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}","/** 
 * @param cancelTag Cancel Tag
 * @param ticket Ticket
 * @param user User
 * @param queue Queue
 * @param success Success Listener
 * @param errorListener Error Listener
 */
public void fetchAllUpdateOnTicket(String cancelTag,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}"
8582,"/** 
 * @param cancelTag
 * @param section
 * @param queue
 * @param success
 * @param errorListener
 */
public void fetchKBArticle(String cancelTag,HSKBItem section,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}","/** 
 * @param cancelTag Cancel Tag
 * @param section Section
 * @param queue Queue
 * @param success Success listener
 * @param errorListener Error listener
 */
public void fetchKBArticle(String cancelTag,HSKBItem section,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}"
8583,"/** 
 * Sets maximum number of attachment gears can handle.
 * @default 1
 * @param numberOfAttachmentGearCanHandle
 */
public void setNumberOfAttachmentGearCanHandle(int numberOfAttachmentGearCanHandle){
  this.numberOfAttachmentGearCanHandle=numberOfAttachmentGearCanHandle;
}","/** 
 * Sets maximum number of attachment gears can handle. Default:  1
 * @param numberOfAttachmentGearCanHandle Number of Attachments that the Gear can handle
 */
public void setNumberOfAttachmentGearCanHandle(int numberOfAttachmentGearCanHandle){
  this.numberOfAttachmentGearCanHandle=numberOfAttachmentGearCanHandle;
}"
8584,"/** 
 * HSUploadAttachment.getAttachment() can contain mime/Type and filename
 * @param user
 * @param subject
 * @param body
 * @param successListener
 * @param errorListener
 */
public void createNewTicket(String cancelTag,HSUser user,String subject,String body,HSUploadAttachment[] attachments,RequestQueue queue,OnNewTicketFetchedSuccessListener successListener,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}","/** 
 * HSUploadAttachment.getAttachment() can contain mime/Type and filename
 * @param user User
 * @param subject Subject
 * @param body Body
 * @param successListener Success Listener
 * @param errorListener Error Listener
 */
public void createNewTicket(String cancelTag,HSUser user,String subject,String body,HSUploadAttachment[] attachments,RequestQueue queue,OnNewTicketFetchedSuccessListener successListener,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}"
8585,"/** 
 * if true, gear don't have to return back HSTicketUpdate object, after a reply is been added.
 * @default : false, means it is necessary for the gear to return HSTicketUpdate object, after a reply is been added.
 * @param canIgnore
 */
public void ignoreTicketUpdateInformationAfterAddingReply(boolean canIgnore){
  this.ignoreTicketUpdateInformationAfterAddingReply=canIgnore;
}","/** 
 * if true, gear don't have to return back HSTicketUpdate object, after a reply is been added. Default: false, means it is necessary for the gear to return HSTicketUpdate object, after a reply is been added.
 * @param canIgnore Can Ignore
 */
public void ignoreTicketUpdateInformationAfterAddingReply(boolean canIgnore){
  this.ignoreTicketUpdateInformationAfterAddingReply=canIgnore;
}"
8586,"/** 
 * Set this parameter, if gear is not implementing handling of Issues. Doing this, default email client will be open with given support Email Address. Then there is no need to implement issues fetching related methods.
 * @default  it is considered that gear is gonna implement ticket fetching.
 * @param companySupportEmailAddress
 */
public void setNotImplementingTicketsFetching(String companySupportEmailAddress){
  implementsTicketFetching=false;
  this.companySupportEmailAddress=companySupportEmailAddress;
}","/** 
 * Set this parameter, if gear is not implementing handling of Issues. Doing this, default email client will be open with given support Email Address. Then there is no need to implement issues fetching related methods. Default:   it is considered that gear is gonna implement ticket fetching.
 * @param companySupportEmailAddress Company Support Email Address
 */
public void setNotImplementingTicketsFetching(String companySupportEmailAddress){
  implementsTicketFetching=false;
  this.companySupportEmailAddress=companySupportEmailAddress;
}"
8587,"/** 
 * @param message
 * @param ticket
 * @param user
 * @param queue
 * @param success
 * @param errorListener
 */
public void addReplyOnATicket(String cancelTag,String message,HSUploadAttachment[] attachments,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedSuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}","/** 
 * @param message Message
 * @param ticket Ticket
 * @param user User
 * @param queue Queue
 * @param success Success Listener
 * @param errorListener Error Listener
 */
public void addReplyOnATicket(String cancelTag,String message,HSUploadAttachment[] attachments,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedSuccessListener success,ErrorListener errorListener){
  errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
}"
8588,"/** 
 * Returns if gear have implemented Ticket Fetching. Modify this parameter using   {@link #setNotImplementingTicketsFetching(java.lang.String) setNotImplementingTicketsFetching}
 * @default true
 * @return
 */
public boolean haveImplementedTicketFetching(){
  return implementsTicketFetching;
}","/** 
 * Returns if gear have implemented Ticket Fetching. Modify this parameter using   {@link #setNotImplementingTicketsFetching(java.lang.String) setNotImplementingTicketsFetching}Default:  true
 */
public boolean haveImplementedTicketFetching(){
  return implementsTicketFetching;
}"
8589,"/** 
 * Set this parameter, if gear is not implementing handling of FAQ. Doing this, FAQ will be fetched from article path. Then there is no need to implement issues fetching related methods.
 * @default  it is considered that gear is gonna implement email fetching.
 * @param articleResid
 */
public void setNotImplementingKBFetching(int articleResid){
  implementsKBFetching=false;
  this.articleResid=articleResid;
}","/** 
 * Set this parameter, if gear is not implementing handling of FAQ. Doing this, FAQ will be fetched from article path. Then there is no need to implement issues fetching related methods. Default:   it is considered that gear is gonna implement email fetching.
 * @param articleResid Article Resource ID
 */
public void setNotImplementingKBFetching(int articleResid){
  implementsKBFetching=false;
  this.articleResid=articleResid;
}"
8590,"/** 
 * If this parameter is set, message written by user in chat screen and new issue screen will be returned in HTML format.
 * @default false
 * @param htmlEnabled
 */
public void uploadMessageAsHtmlString(boolean htmlEnabled){
  this.supportHtmlMessage=htmlEnabled;
}","/** 
 * If this parameter is set, message written by user in chat screen and new issue screen will be returned in HTML format. Default:  false
 * @param htmlEnabled HTML Enabled
 */
public void uploadMessageAsHtmlString(boolean htmlEnabled){
  this.supportHtmlMessage=htmlEnabled;
}"
8591,"/** 
 * @return maximum number of attachment gear can handle.
 * @default is 1
 */
public int getNumberOfAttachmentGearCanHandle(){
  return numberOfAttachmentGearCanHandle;
}","/** 
 * @return maximum number of attachment gear can handle.Default:  is 1
 */
public int getNumberOfAttachmentGearCanHandle(){
  return numberOfAttachmentGearCanHandle;
}"
8592,"/** 
 * Returns if gear have implemented KB Fetching. Modify this parameter using   {@link #setNotImplementingKBFetching(int) setNotImplementingKBFetching}
 * @default true
 * @return
 */
public boolean haveImplementedKBFetching(){
  return implementsKBFetching;
}","/** 
 * Returns if gear have implemented KB Fetching. Modify this parameter using   {@link #setNotImplementingKBFetching(int) setNotImplementingKBFetching}Default:  true
 */
public boolean haveImplementedKBFetching(){
  return implementsKBFetching;
}"
8593,"/** 
 * returns if gear can upload message as html string.
 * @default false
 * @return
 */
public boolean canUplaodMessageAsHtmlString(){
  return supportHtmlMessage;
}","/** 
 * returns if gear can upload message as html string. Default:  false
 */
public boolean canUplaodMessageAsHtmlString(){
  return supportHtmlMessage;
}"
8594,"@Override public void fetchAllUpdateOnTicket(String cancelTag,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  TicketFormRequest request=new TicketFormRequest(getApiUrl() + ""String_Node_Str"" + ticket.getTicketId(),new HappyfoxArrayBaseListener<JSONObject>(success,errorListener){
    @Override public void onResponse(    JSONObject response){
      try {
        JSONArray updateArray=response.getJSONArray(""String_Node_Str"");
        ArrayList<HSTicketUpdate> ticketUpdates=new ArrayList<HSTicketUpdate>();
        int updateLen=updateArray.length();
        for (int i=0; i < updateLen; i++) {
          JSONObject updateObject=updateArray.getJSONObject(i);
          if (!updateObject.isNull(""String_Node_Str"")) {
            ticketUpdates.add(parseTicketUpdateFromJson(updateObject));
          }
        }
        HSTicketUpdate[] array=new HSTicketUpdate[0];
        array=ticketUpdates.toArray(array);
        this.successCallback.onSuccess(array);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        this.errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
      }
    }
  }
,errorListener);
  request.addCredential(api_key,auth_code);
  request.setTag(cancelTag);
  queue.add(request);
  queue.start();
}","@Override public void fetchAllUpdateOnTicket(String cancelTag,HSTicket ticket,HSUser user,RequestQueue queue,OnFetchedArraySuccessListener success,ErrorListener errorListener){
  TicketFormRequest request=new TicketFormRequest(getApiUrl() + ""String_Node_Str"" + ticket.getTicketId(),new HappyfoxArrayBaseListener<JSONObject>(success,errorListener){
    @Override public void onResponse(    JSONObject response){
      try {
        JSONArray updateArray=response.getJSONArray(""String_Node_Str"");
        ArrayList<HSTicketUpdate> ticketUpdates=new ArrayList<HSTicketUpdate>();
        int updateLen=updateArray.length();
        for (int i=0; i < updateLen; i++) {
          JSONObject updateObject=updateArray.getJSONObject(i);
          if (!updateObject.isNull(""String_Node_Str"")) {
            HSTicketUpdate update=parseTicketUpdateFromJson(updateObject);
            if (update != null) {
              ticketUpdates.add(update);
            }
          }
        }
        HSTicketUpdate[] array=new HSTicketUpdate[0];
        array=ticketUpdates.toArray(array);
        this.successCallback.onSuccess(array);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        this.errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
      }
    }
  }
,errorListener);
  request.addCredential(api_key,auth_code);
  request.setTag(cancelTag);
  queue.add(request);
  queue.start();
}"
8595,"private HSTicketUpdate parseTicketUpdateFromJson(JSONObject updateObject) throws JSONException {
  String updateId=null;
  String userName=null;
  JSONObject byObject=updateObject.getJSONObject(""String_Node_Str"");
  if (!byObject.isNull(""String_Node_Str"")) {
    userName=updateObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  }
  String message=updateObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Date update_time=null;
  if (!updateObject.isNull(""String_Node_Str"")) {
    update_time=parseTime(updateObject.getString(""String_Node_Str""));
  }
  JSONArray attachmentObjects=updateObject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  HSAttachment[] attachments=null;
  if (attachmentObjects != null) {
    int length=attachmentObjects.length();
    ArrayList<HSAttachment> attachmentArray=new ArrayList<HSAttachment>();
    for (int i=0; i < length; i++) {
      JSONObject attachmentData=attachmentObjects.getJSONObject(i);
      String attachment_url=attachmentData.getString(""String_Node_Str"");
      if (attachment_url.startsWith(""String_Node_Str"")) {
        attachment_url=instanceUrl.concat(attachment_url.substring(1));
      }
      HSAttachment attachData=HSAttachment.createAttachment(attachment_url,attachmentData.getString(""String_Node_Str""),null);
      attachmentArray.add(attachData);
    }
    attachments=attachmentArray.toArray(new HSAttachment[length]);
  }
  if (byObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachments);
  }
 else {
    return HSTicketUpdate.createUpdateByStaff(updateId,userName,message,update_time,attachments);
  }
}","/** 
 * @param updateObject, can be null if it is private note
 * @return
 * @throws JSONException
 */
private HSTicketUpdate parseTicketUpdateFromJson(JSONObject updateObject) throws JSONException {
  String updateId=null;
  String userName=null;
  if (updateObject.isNull(""String_Node_Str"")) {
    return null;
  }
  JSONObject messageObject=updateObject.getJSONObject(""String_Node_Str"");
  if (!messageObject.isNull(""String_Node_Str"") && messageObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return null;
  }
  JSONObject byObject=updateObject.getJSONObject(""String_Node_Str"");
  if (!byObject.isNull(""String_Node_Str"")) {
    userName=updateObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  }
  String message=updateObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Date update_time=null;
  if (!updateObject.isNull(""String_Node_Str"")) {
    update_time=parseTime(updateObject.getString(""String_Node_Str""));
  }
  JSONArray attachmentObjects=updateObject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  HSAttachment[] attachments=null;
  if (attachmentObjects != null) {
    int length=attachmentObjects.length();
    ArrayList<HSAttachment> attachmentArray=new ArrayList<HSAttachment>();
    for (int i=0; i < length; i++) {
      JSONObject attachmentData=attachmentObjects.getJSONObject(i);
      String attachment_url=attachmentData.getString(""String_Node_Str"");
      if (attachment_url.startsWith(""String_Node_Str"")) {
        attachment_url=instanceUrl.concat(attachment_url.substring(1));
      }
      HSAttachment attachData=HSAttachment.createAttachment(attachment_url,attachmentData.getString(""String_Node_Str""),null);
      attachmentArray.add(attachData);
    }
    attachments=attachmentArray.toArray(new HSAttachment[length]);
  }
  if (byObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachments);
  }
 else {
    return HSTicketUpdate.createUpdateByStaff(updateId,userName,message,update_time,attachments);
  }
}"
8596,"@Override public void onResponse(JSONObject response){
  try {
    JSONArray updateArray=response.getJSONArray(""String_Node_Str"");
    ArrayList<HSTicketUpdate> ticketUpdates=new ArrayList<HSTicketUpdate>();
    int updateLen=updateArray.length();
    for (int i=0; i < updateLen; i++) {
      JSONObject updateObject=updateArray.getJSONObject(i);
      if (!updateObject.isNull(""String_Node_Str"")) {
        ticketUpdates.add(parseTicketUpdateFromJson(updateObject));
      }
    }
    HSTicketUpdate[] array=new HSTicketUpdate[0];
    array=ticketUpdates.toArray(array);
    this.successCallback.onSuccess(array);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    this.errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
}","@Override public void onResponse(JSONObject response){
  try {
    JSONArray updateArray=response.getJSONArray(""String_Node_Str"");
    ArrayList<HSTicketUpdate> ticketUpdates=new ArrayList<HSTicketUpdate>();
    int updateLen=updateArray.length();
    for (int i=0; i < updateLen; i++) {
      JSONObject updateObject=updateArray.getJSONObject(i);
      if (!updateObject.isNull(""String_Node_Str"")) {
        HSTicketUpdate update=parseTicketUpdateFromJson(updateObject);
        if (update != null) {
          ticketUpdates.add(update);
        }
      }
    }
    HSTicketUpdate[] array=new HSTicketUpdate[0];
    array=ticketUpdates.toArray(array);
    this.successCallback.onSuccess(array);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    this.errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
}"
8597,"private void addReplyToTicket(String cancelTag,HSTicket ticket,HSUser user,final String message,String[] attachmentToken,final HSAttachment[] attachmentObjectList,RequestQueue queue,final OnFetchedSuccessListener successListener,final Response.ErrorListener errorListener){
  JSONObject ticketJson=null;
  try {
    ticketJson=retrieveRequestProperties(message,attachmentToken);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
  ZendeskJsonObjectRequest request=new ZendeskJsonObjectRequest(cancelTag,user.getEmail(),Request.Method.PUT,getApiUrl().concat(""String_Node_Str"").concat(ticket.getTicketId()).concat(""String_Node_Str""),ticketJson,new ZendeskBaseListener<JSONObject>(successListener,errorListener){
    @Override public void onResponse(    JSONObject response){
      if (response == null) {
        this.errorListener.onErrorResponse(new VolleyError());
      }
 else {
        HSTicketUpdate update;
        String updateId=null;
        String userName=null;
        Date update_time=null;
        HSAttachment[] attachmentList=attachmentObjectList;
        try {
          JSONObject requestObject=response.getJSONObject(""String_Node_Str"");
          if (!requestObject.isNull(""String_Node_Str"")) {
            userName=requestObject.getString(""String_Node_Str"");
          }
          if (!requestObject.isNull(""String_Node_Str"")) {
            update_time=parseTime(requestObject.getString(""String_Node_Str""));
          }
          update=HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachmentList);
          successListener.onSuccess(update);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
        }
      }
    }
  }
,errorListener);
  request.addCredential(staff_email_address,api_token);
  request.setTag(cancelTag);
  request.setRetryPolicy(new DefaultRetryPolicy(ZendeskJsonObjectRequest.TIMEOUT_MS,ZendeskJsonObjectRequest.MAX_RETRIES,ZendeskJsonObjectRequest.BACKOFF_MULT));
  queue.add(request);
  queue.start();
}","private void addReplyToTicket(String cancelTag,HSTicket ticket,HSUser user,final String message,String[] attachmentToken,final HSAttachment[] attachmentObjectList,RequestQueue queue,final OnFetchedSuccessListener successListener,final Response.ErrorListener errorListener){
  JSONObject ticketJson=null;
  try {
    ticketJson=retrieveRequestProperties(message,attachmentToken);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
  ZendeskJsonObjectRequest request=new ZendeskJsonObjectRequest(cancelTag,user.getEmail(),Request.Method.PUT,getApiUrl().concat(""String_Node_Str"").concat(ticket.getTicketId()).concat(""String_Node_Str""),ticketJson,new ZendeskBaseListener<JSONObject>(successListener,errorListener){
    @Override public void onResponse(    JSONObject response){
      if (response == null) {
        this.errorListener.onErrorResponse(new VolleyError());
      }
 else {
        HSTicketUpdate update;
        String updateId=null;
        String userName=null;
        Date update_time=null;
        HSAttachment[] attachmentList=attachmentObjectList;
        try {
          JSONObject requestObject=response.getJSONObject(""String_Node_Str"");
          if (!requestObject.isNull(""String_Node_Str"")) {
            userName=requestObject.getString(""String_Node_Str"");
          }
          if (!requestObject.isNull(""String_Node_Str"")) {
            update_time=parseTime(requestObject.getString(""String_Node_Str""));
          }
          update=HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachmentList);
          successListener.onSuccess(update);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
        }
      }
    }
  }
,errorListener);
  request.addCredential(user.getEmail(),api_token);
  request.setTag(cancelTag);
  request.setRetryPolicy(new DefaultRetryPolicy(ZendeskJsonObjectRequest.TIMEOUT_MS,ZendeskJsonObjectRequest.MAX_RETRIES,ZendeskJsonObjectRequest.BACKOFF_MULT));
  queue.add(request);
  queue.start();
}"
8598,"/** 
 * Note: Returns null if it is not pubic note.
 * @param updateObject
 * @param usersArray
 * @return
 * @throws JSONException
 */
private HSTicketUpdate retrieveTicketUpdate(JSONObject updateObject,JSONArray usersArray) throws JSONException {
  int authorId=-1;
  String content=null;
  String updateId=null;
  String from=null;
  boolean publicNote=true;
  Date update_time=null;
  boolean isUpdateTypeUserReply=false;
  HSAttachment[] attachments=null;
  JSONArray eventsArray=updateObject.getJSONArray(""String_Node_Str"");
  int eventsArrayLength=eventsArray.length();
  for (int i=0; i < eventsArrayLength; i++) {
    JSONObject eventObject=eventsArray.getJSONObject(i);
    if (eventObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
      publicNote=eventObject.getBoolean(""String_Node_Str"");
      if (!publicNote) {
        return null;
      }
      content=eventObject.getString(""String_Node_Str"");
      if (!eventObject.isNull(""String_Node_Str"")) {
        authorId=eventObject.getInt(""String_Node_Str"");
      }
      JSONObject author=searchForUser(authorId,usersArray);
      if (!author.isNull(""String_Node_Str"")) {
        from=author.getString(""String_Node_Str"");
      }
      if (!updateObject.isNull(""String_Node_Str"")) {
        update_time=parseTime(updateObject.getString(""String_Node_Str""));
      }
      String role=author.getString(""String_Node_Str"");
      if (role.equals(""String_Node_Str"")) {
        isUpdateTypeUserReply=true;
      }
      JSONArray attachmentObjects=eventObject.getJSONArray(""String_Node_Str"");
      if (attachmentObjects != null) {
        int length=attachmentObjects.length();
        ArrayList<HSAttachment> attachmentArray=new ArrayList<HSAttachment>();
        for (int j=0; j < length; j++) {
          JSONObject attachmentData=attachmentObjects.getJSONObject(j);
          String attachment_url=attachmentData.getString(""String_Node_Str"");
          if (attachment_url.startsWith(""String_Node_Str"")) {
            attachment_url=instanceUrl.concat(attachment_url.substring(1));
          }
          HSAttachment attachData=HSAttachment.createAttachment(attachment_url,attachmentData.getString(""String_Node_Str""),attachmentData.getString(""String_Node_Str""));
          attachmentArray.add(attachData);
        }
        attachments=attachmentArray.toArray(new HSAttachment[length]);
      }
    }
  }
  if (isUpdateTypeUserReply) {
    return HSTicketUpdate.createUpdateByUser(updateId,from,content,update_time,attachments);
  }
 else {
    return HSTicketUpdate.createUpdateByStaff(updateId,from,content,update_time,attachments);
  }
}","/** 
 * Note: Returns null if it is not pubic note.
 * @param updateObject
 * @param usersArray
 * @return
 * @throws JSONException
 */
private HSTicketUpdate retrieveTicketUpdate(JSONObject updateObject,JSONArray usersArray) throws JSONException {
  int authorId=-1;
  String content=null;
  String updateId=null;
  String from=null;
  boolean publicNote=true;
  Date update_time=null;
  boolean isUpdateTypeUserReply=false;
  HSAttachment[] attachments=null;
  JSONArray eventsArray=updateObject.getJSONArray(""String_Node_Str"");
  int eventsArrayLength=eventsArray.length();
  for (int i=0; i < eventsArrayLength; i++) {
    JSONObject eventObject=eventsArray.getJSONObject(i);
    if (eventObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
      publicNote=eventObject.getBoolean(""String_Node_Str"");
      if (!publicNote) {
        return null;
      }
      content=eventObject.getString(""String_Node_Str"");
      if (!eventObject.isNull(""String_Node_Str"")) {
        authorId=eventObject.getInt(""String_Node_Str"");
      }
      JSONObject author=searchForUser(authorId,usersArray);
      if (author != null) {
        if (!author.isNull(""String_Node_Str"")) {
          from=author.getString(""String_Node_Str"");
        }
        String role=author.getString(""String_Node_Str"");
        if (role.equals(""String_Node_Str"")) {
          isUpdateTypeUserReply=true;
        }
      }
      if (!updateObject.isNull(""String_Node_Str"")) {
        update_time=parseTime(updateObject.getString(""String_Node_Str""));
      }
      JSONArray attachmentObjects=eventObject.getJSONArray(""String_Node_Str"");
      if (attachmentObjects != null) {
        int length=attachmentObjects.length();
        ArrayList<HSAttachment> attachmentArray=new ArrayList<HSAttachment>();
        for (int j=0; j < length; j++) {
          JSONObject attachmentData=attachmentObjects.getJSONObject(j);
          String attachment_url=attachmentData.getString(""String_Node_Str"");
          if (attachment_url.startsWith(""String_Node_Str"")) {
            attachment_url=instanceUrl.concat(attachment_url.substring(1));
          }
          HSAttachment attachData=HSAttachment.createAttachment(attachment_url,attachmentData.getString(""String_Node_Str""),attachmentData.getString(""String_Node_Str""));
          attachmentArray.add(attachData);
        }
        attachments=attachmentArray.toArray(new HSAttachment[length]);
      }
      break;
    }
  }
  if (isUpdateTypeUserReply) {
    return HSTicketUpdate.createUpdateByUser(updateId,from,content,update_time,attachments);
  }
 else {
    return HSTicketUpdate.createUpdateByStaff(updateId,from,content,update_time,attachments);
  }
}"
8599,"private JSONObject searchForUser(int userId,JSONArray usersArray) throws JSONException {
  JSONObject usersObject=null;
  int usersArrayLength=usersArray.length();
  for (int i=0; i < usersArrayLength; i++) {
    usersObject=usersArray.getJSONObject(i);
    if (usersObject.getInt(""String_Node_Str"") == userId) {
      return usersObject;
    }
  }
  return usersObject;
}","private JSONObject searchForUser(int userId,JSONArray usersArray) throws JSONException {
  JSONObject usersObject=null;
  int usersArrayLength=usersArray.length();
  for (int i=0; i < usersArrayLength; i++) {
    usersObject=usersArray.getJSONObject(i);
    if (usersObject.getInt(""String_Node_Str"") == userId) {
      return usersObject;
    }
  }
  return null;
}"
8600,"@Override public void onCreate(){
  super.onCreate();
  helpStack=HSHelpStack.getInstance(this);
  HSDeskGear deskGear=new HSDeskGear(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  helpStack.setGear(deskGear);
}","@Override public void onCreate(){
  super.onCreate();
  helpStack=HSHelpStack.getInstance(this);
  HSZendeskGear zenDeskGear=new HSZendeskGear(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  helpStack.setGear(zenDeskGear);
}"
8601,"public void loadImage(){
  closeAsync();
  localAsync=new LocalAsync();
  localAsync.execute(image_url);
}","public void loadImage(){
  if (image_url.startsWith(""String_Node_Str"")) {
    closeAsync();
    localAsync=new LocalAsync();
    localAsync.execute(image_url);
    getActivity().invalidateOptionsMenu();
  }
 else   if (image_url.startsWith(""String_Node_Str"")) {
    Bitmap selectedBitmap;
    try {
      selectedBitmap=NewIssueFragment.downscaleAndReadBitmap(getActivity(),Uri.parse(image_url));
      imageView.setImageBitmap(selectedBitmap);
      showLoading(false);
    }
 catch (    FileNotFoundException e) {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      getActivity().finish();
    }
  }
 else {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    getActivity().finish();
  }
}"
8602,"private void addReplyToTicket(String cancelTag,HSTicket ticket,HSUser user,final String message,String[] attachmentToken,RequestQueue queue,final OnFetchedSuccessListener successListener,final Response.ErrorListener errorListener){
  JSONObject ticketJson=null;
  try {
    ticketJson=retrieveRequestProperties(message,attachmentToken);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
  ZendeskJsonObjectRequest request=new ZendeskJsonObjectRequest(cancelTag,user.getEmail(),Request.Method.PUT,getApiUrl().concat(""String_Node_Str"").concat(ticket.getTicketId()).concat(""String_Node_Str""),ticketJson,new ZendeskBaseListener<JSONObject>(successListener,errorListener){
    @Override public void onResponse(    JSONObject response){
      if (response == null) {
        this.errorListener.onErrorResponse(new VolleyError());
      }
 else {
        HSTicketUpdate update;
        String updateId=null;
        String userName=null;
        Date update_time=null;
        HSAttachment[] attachmentList=null;
        try {
          JSONObject requestObject=response.getJSONObject(""String_Node_Str"");
          if (!requestObject.isNull(""String_Node_Str"")) {
            userName=requestObject.getString(""String_Node_Str"");
          }
          if (!requestObject.isNull(""String_Node_Str"")) {
            update_time=parseTime(requestObject.getString(""String_Node_Str""));
          }
          update=HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachmentList);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
        }
      }
    }
  }
,errorListener);
  addRequestAndStartQueue(queue,request);
}","private void addReplyToTicket(String cancelTag,HSTicket ticket,HSUser user,final String message,String[] attachmentToken,final HSAttachment[] attachmentObjectList,RequestQueue queue,final OnFetchedSuccessListener successListener,final Response.ErrorListener errorListener){
  JSONObject ticketJson=null;
  try {
    ticketJson=retrieveRequestProperties(message,attachmentToken);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
  }
  ZendeskJsonObjectRequest request=new ZendeskJsonObjectRequest(cancelTag,user.getEmail(),Request.Method.PUT,getApiUrl().concat(""String_Node_Str"").concat(ticket.getTicketId()).concat(""String_Node_Str""),ticketJson,new ZendeskBaseListener<JSONObject>(successListener,errorListener){
    @Override public void onResponse(    JSONObject response){
      if (response == null) {
        this.errorListener.onErrorResponse(new VolleyError());
      }
 else {
        HSTicketUpdate update;
        String updateId=null;
        String userName=null;
        Date update_time=null;
        HSAttachment[] attachmentList=attachmentObjectList;
        try {
          JSONObject requestObject=response.getJSONObject(""String_Node_Str"");
          if (!requestObject.isNull(""String_Node_Str"")) {
            userName=requestObject.getString(""String_Node_Str"");
          }
          if (!requestObject.isNull(""String_Node_Str"")) {
            update_time=parseTime(requestObject.getString(""String_Node_Str""));
          }
          update=HSTicketUpdate.createUpdateByUser(updateId,userName,message,update_time,attachmentList);
          successListener.onSuccess(update);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
        }
      }
    }
  }
,errorListener);
  addRequestAndStartQueue(queue,request);
}"
8603,"private void addReplyToTicketWithAttachment(final String cancelTag,final HSTicket ticket,final HSUser user,final String message,HSUploadAttachment[] attachments,final RequestQueue queue,final OnFetchedSuccessListener successListener,final ErrorListener errorListener){
  Uri.Builder builder=new Uri.Builder();
  builder.encodedPath(getApiUrl());
  builder.appendEncodedPath(""String_Node_Str"");
  HSUploadAttachment attachmentObject=attachments[0];
  String attachmentFileName=getAttachmentFileName(attachmentObject);
  builder.appendQueryParameter(""String_Node_Str"",attachmentFileName);
  String attachmentUrl=builder.build().toString();
  ZendeskObjectRequest attachmentRequest=new ZendeskObjectRequest(cancelTag,attachmentUrl,attachmentObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject jsonObject){
      try {
        String attachmentToken=jsonObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
        String[] attachmentTokenList=new String[1];
        attachmentTokenList[0]=attachmentToken;
        addReplyToTicket(cancelTag,ticket,user,message,attachmentTokenList,queue,successListener,errorListener);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
      }
    }
  }
,errorListener);
  addRequestAndStartQueue(queue,attachmentRequest);
}","private void addReplyToTicketWithAttachment(final String cancelTag,final HSTicket ticket,final HSUser user,final String message,HSUploadAttachment[] attachments,final RequestQueue queue,final OnFetchedSuccessListener successListener,final ErrorListener errorListener){
  Uri.Builder builder=new Uri.Builder();
  builder.encodedPath(getApiUrl());
  builder.appendEncodedPath(""String_Node_Str"");
  final HSUploadAttachment attachmentObject=attachments[0];
  String attachmentFileName=getAttachmentFileName(attachmentObject);
  builder.appendQueryParameter(""String_Node_Str"",attachmentFileName);
  String attachmentUrl=builder.build().toString();
  ZendeskObjectRequest attachmentRequest=new ZendeskObjectRequest(cancelTag,attachmentUrl,attachmentObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject jsonObject){
      try {
        String attachmentToken=jsonObject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
        String[] attachmentTokenList=new String[1];
        attachmentTokenList[0]=attachmentToken;
        HSAttachment[] attachmentObjectList=new HSAttachment[1];
        attachmentObjectList[0]=attachmentObject.getAttachment();
        addReplyToTicket(cancelTag,ticket,user,message,attachmentTokenList,attachmentObjectList,queue,successListener,errorListener);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
      }
    }
  }
,errorListener);
  addRequestAndStartQueue(queue,attachmentRequest);
}"
8604,"@Override public void addReplyOnATicket(final String cancelTag,final String message,final HSUploadAttachment[] attachments,final HSTicket ticket,final HSUser user,RequestQueue queue,final OnFetchedSuccessListener successListener,ErrorListener errorListener){
  if (attachments != null && attachments.length > 0) {
    addReplyToTicketWithAttachment(cancelTag,ticket,user,message,attachments,queue,successListener,errorListener);
  }
 else {
    addReplyToTicket(cancelTag,ticket,user,message,null,queue,successListener,errorListener);
  }
}","@Override public void addReplyOnATicket(final String cancelTag,final String message,final HSUploadAttachment[] attachments,final HSTicket ticket,final HSUser user,RequestQueue queue,final OnFetchedSuccessListener successListener,ErrorListener errorListener){
  if (attachments != null && attachments.length > 0) {
    addReplyToTicketWithAttachment(cancelTag,ticket,user,message,attachments,queue,successListener,errorListener);
  }
 else {
    addReplyToTicket(cancelTag,ticket,user,message,null,null,queue,successListener,errorListener);
  }
}"
8605,"public void addReplyOnATicket(String cancelTag,String message,HSAttachment[] attachments,HSTicket ticket,OnFetchedSuccessListener success,ErrorListener errorListener){
  if (gear.canUplaodMessageAsHtmlString()) {
    message=Html.toHtml(new SpannableString(message));
  }
  gear.addReplyOnATicket(cancelTag,message,convertAttachmentArrayToUploadAttachment(attachments),ticket,getUser(),mRequestQueue,new OnFetchedSuccessListenerWrapper(success,message,attachments){
    @Override public void onSuccess(    Object successObject){
      if (!gear.getWillSendTicketUpdateInformationAfterAddingReply()) {
        HSTicketUpdate update=HSTicketUpdate.createUpdateByUser(null,null,this.message,Calendar.getInstance().getTime(),this.attachments);
        super.onSuccess(update);
      }
 else {
        super.onSuccess(successObject);
      }
    }
  }
,new ErrorWrapper(""String_Node_Str"",errorListener));
}","public void addReplyOnATicket(String cancelTag,String message,HSAttachment[] attachments,HSTicket ticket,OnFetchedSuccessListener success,ErrorListener errorListener){
  if (gear.canUplaodMessageAsHtmlString()) {
    message=Html.toHtml(new SpannableString(message));
  }
  gear.addReplyOnATicket(cancelTag,message,convertAttachmentArrayToUploadAttachment(attachments),ticket,getUser(),mRequestQueue,new OnFetchedSuccessListenerWrapper(success,message,attachments){
    @Override public void onSuccess(    Object successObject){
      if (gear.canIgnoreTicketUpdateInformationAfterAddingReply()) {
        HSTicketUpdate update=HSTicketUpdate.createUpdateByUser(null,null,this.message,Calendar.getInstance().getTime(),this.attachments);
        super.onSuccess(update);
      }
 else {
        super.onSuccess(successObject);
      }
    }
  }
,new ErrorWrapper(""String_Node_Str"",errorListener));
}"
8606,"private void resetAttachmentImage(){
  if (selectedAttachment == null) {
    this.imageView1.setImageResource(R.drawable.hs_attachment_img);
  }
 else {
    try {
      Uri uri=Uri.parse(selectedAttachment.getUrl());
      Bitmap selectedBitmap;
      selectedBitmap=downscaleAndReadBitmap(getActivity(),uri);
      this.imageView1.setImageBitmap(selectedBitmap);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
}","private void resetAttachmentImage(){
  if (selectedAttachment == null) {
    this.imageView1.setImageResource(R.drawable.hs_add_attachment_img);
  }
 else {
    try {
      Uri uri=Uri.parse(selectedAttachment.getUrl());
      Bitmap selectedBitmap;
      selectedBitmap=downscaleAndReadBitmap(getActivity(),uri);
      this.imageView1.setImageBitmap(selectedBitmap);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
}"
8607,"public void addSearchViewInMenuItem(Context context,MenuItem searchItem){
  MenuItemCompat.setShowAsAction(searchItem,MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
  SearchView searchView=new SearchView(context);
  MenuItemCompat.setActionView(searchItem,searchView);
  searchView.setQueryHint(getString(R.string.hs_search_hint));
  searchView.setSubmitButtonEnabled(false);
  searchView.setOnSearchClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchStarted();
    }
  }
);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String q){
      doSearchForQuery(q);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      doSearchForQuery(newText);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(searchItem,new OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      setVisibility(true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      setVisibility(false);
      return true;
    }
  }
);
}","public void addSearchViewInMenuItem(Context context,MenuItem searchItem){
  MenuItemCompat.setShowAsAction(searchItem,MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
  searchView=new SearchView(context);
  MenuItemCompat.setActionView(searchItem,searchView);
  searchView.setSubmitButtonEnabled(false);
  searchView.setOnSearchClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchStarted();
    }
  }
);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String q){
      doSearchForQuery(q);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      doSearchForQuery(newText);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(searchItem,new OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      setVisibility(true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      setVisibility(false);
      return true;
    }
  }
);
  if (Build.VERSION.SDK_INT >= 14) {
    searchView.setQueryHint(getString(R.string.hs_search_hint));
  }
}"
8608,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_article);
  if (savedInstanceState == null) {
    ArticleFragment articleFragment=new ArticleFragment();
    this.kbItem=(HSKBItem)getIntent().getSerializableExtra(""String_Node_Str"");
    articleFragment.kbItem=this.kbItem;
    getSupportActionBar().setTitle(this.kbItem.getSubject());
    getSupportFragmentManager().beginTransaction().add(R.id.container,articleFragment).commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_article);
  if (savedInstanceState == null) {
    HSKBItem kbItem=(HSKBItem)getIntent().getSerializableExtra(""String_Node_Str"");
    ArticleFragment sectionFragment=HSFragmentManager.getArticleFragment(this,kbItem);
    HSFragmentManager.putFragmentInActivity(this,R.id.container,sectionFragment,""String_Node_Str"");
    getHelpStackActionBar().setTitle(kbItem.getSubject());
  }
}"
8609,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_attachment);
  boolean isLocalAttachment=getIntent().getExtras().getBoolean(""String_Node_Str"");
  if (savedInstanceState == null) {
    if (!isLocalAttachment) {
      AttachmentFragment attachmentFragment=new AttachmentFragment();
      HSFragmentManager.putFragmentInActivity(this,R.id.container,attachmentFragment,""String_Node_Str"");
    }
 else {
      LocalAttachmentFragment attachmentFragment=new LocalAttachmentFragment();
      HSFragmentManager.putFragmentInActivity(this,R.id.container,attachmentFragment,""String_Node_Str"");
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_attachment);
  if (savedInstanceState == null) {
    AttachmentFragment attachmentFragment=new AttachmentFragment();
    HSFragmentManager.putFragmentInActivity(this,R.id.container,attachmentFragment,""String_Node_Str"");
  }
}"
8610,"public static void startNewIssueActivity(HSActivityParent context,HSUser user,int requestCode){
  Intent intent=new Intent(context,NewIssueActivity.class);
  intent.putExtra(NewIssueActivity.EXTRAS_USER,user);
  context.startActivityForResult(intent,requestCode);
}","public static void startNewIssueActivity(HSFragmentParent context,HSUser user,int requestCode){
  Intent intent=new Intent(context.getActivity(),NewIssueActivity.class);
  intent.putExtra(NewIssueActivity.EXTRAS_USER,user);
  context.startActivityForResult(intent,requestCode);
}"
8611,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_issue_detail);
  mIssueDetailFragment=HSFragmentManager.getIssueDetailFragment();
  HSFragmentManager.putFragmentInActivity(this,R.id.container,mIssueDetailFragment,""String_Node_Str"");
  mIssueDetailFragment.setTicket((HSTicket)getIntent().getExtras().getSerializable(EXTRAS_TICKET));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_issue_detail);
  if (savedInstanceState == null) {
    IssueDetailFragment mIssueDetailFragment=HSFragmentManager.getIssueDetailFragment();
    HSFragmentManager.putFragmentInActivity(this,R.id.container,mIssueDetailFragment,""String_Node_Str"");
    HSTicket ticket=(HSTicket)getIntent().getExtras().getSerializable(EXTRAS_TICKET);
    mIssueDetailFragment.setTicket(ticket);
    getHelpStackActionBar().setTitle(ticket.getSubject());
  }
}"
8612,"@Override public void configureActionBar(ActionBar actionBar){
  super.configureActionBar(actionBar);
  actionBar.setDisplayHomeAsUpEnabled(true);
  HSTicket ticket=(HSTicket)getIntent().getExtras().getSerializable(EXTRAS_TICKET);
  if (ticket != null) {
    actionBar.setTitle(ticket.getSubject());
  }
}","@Override public void configureActionBar(ActionBar actionBar){
  super.configureActionBar(actionBar);
  actionBar.setDisplayHomeAsUpEnabled(true);
}"
8613,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_section);
  HSKBItem kbSectionItem=(HSKBItem)getIntent().getSerializableExtra(""String_Node_Str"");
  if (savedInstanceState == null) {
    SectionFragment sectionFragment=new SectionFragment();
    sectionFragment.kbItem=kbSectionItem;
    this.actionBar.setTitle(kbSectionItem.getSubject());
    getSupportFragmentManager().beginTransaction().add(R.id.container,sectionFragment).commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_section);
  if (savedInstanceState == null) {
    HSKBItem kbSectionItem=(HSKBItem)getIntent().getSerializableExtra(EXTRAS_SECTION_ITEM);
    SectionFragment sectionFragment=HSFragmentManager.getSectionFragment(this,kbSectionItem);
    HSFragmentManager.putFragmentInActivity(this,R.id.container,sectionFragment,""String_Node_Str"");
    getHelpStackActionBar().setTitle(kbSectionItem.getSubject());
  }
}"
8614,"@Override public void configureActionBar(ActionBar actionBar){
  super.configureActionBar(actionBar);
  this.actionBar=actionBar;
  actionBar.setDisplayHomeAsUpEnabled(true);
}","@Override public void configureActionBar(ActionBar actionBar){
  super.configureActionBar(actionBar);
  actionBar.setDisplayHomeAsUpEnabled(true);
}"
8615,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_article,container,false);
  getHelpStackActivity().setProgressBarIndeterminateVisibility(true);
  WebView webview=(WebView)rootView.findViewById(R.id.webview);
  String content=this.kbItem.getBody();
  String contentText=String.format(HTML_WRAPPER_WITH_TITLE,this.kbItem.getSubject(),content);
  webview.loadData(contentText,""String_Node_Str"",null);
  getHelpStackActivity().setProgressBarIndeterminateVisibility(false);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_article,container,false);
  webview=(WebView)rootView.findViewById(R.id.webview);
  if (savedInstanceState != null) {
    kbItem=(HSKBItem)savedInstanceState.getSerializable(""String_Node_Str"");
  }
  webview.setWebChromeClient(new WebChromeClient(){
    public void onProgressChanged(    WebView view,    int progress){
      progress=progress * 100;
      getHelpStackActivity().setSupportProgressBarVisibility(progress < 98);
      getHelpStackActivity().setSupportProgress(progress);
    }
  }
);
  initializeView();
  return rootView;
}"
8616,"private void showAttachments(final HSAttachment[] attachmentsArray){
  ArrayList<String> attachments=new ArrayList<String>();
  for (  HSAttachment attachment : attachmentsArray) {
    attachments.add(attachment.getFileName());
  }
  String[] attachmentNames=attachments.toArray(new String[attachments.size()]);
  AlertDialog.Builder alertDialog=new AlertDialog.Builder(getActivity());
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View convertView=(View)inflater.inflate(R.layout.attachment_dialog,null);
  alertDialog.setView(convertView);
  alertDialog.setTitle(""String_Node_Str"");
  ListView lv=(ListView)convertView.findViewById(R.id.listView1);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,attachmentNames);
  lv.setAdapter(adapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      HSAttachment attachmentToShow=attachmentsArray[position];
      openAttachment(attachmentToShow);
    }
  }
);
  alertDialog.show();
}","private void showAttachments(final HSAttachment[] attachmentsArray){
  ArrayList<String> attachments=new ArrayList<String>();
  for (  HSAttachment attachment : attachmentsArray) {
    attachments.add(attachment.getFileName());
  }
  String[] attachmentNames=attachments.toArray(new String[attachments.size()]);
  AlertDialog.Builder alertDialog=new AlertDialog.Builder(getActivity());
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View convertView=(View)inflater.inflate(R.layout.attachment_dialog,null);
  alertDialog.setView(convertView);
  alertDialog.setTitle(""String_Node_Str"");
  final AlertDialog dialog=alertDialog.create();
  ListView lv=(ListView)convertView.findViewById(R.id.listView1);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,attachmentNames);
  lv.setAdapter(adapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      HSAttachment attachmentToShow=attachmentsArray[position];
      openAttachment(attachmentToShow);
      dialog.dismiss();
    }
  }
);
  dialog.show();
}"
8617,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  HSAttachment attachmentToShow=attachmentsArray[position];
  openAttachment(attachmentToShow);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  HSAttachment attachmentToShow=attachmentsArray[position];
  openAttachment(attachmentToShow);
  dialog.dismiss();
}"
8618,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_issue_detail,null);
  replyEditTextView=(EditText)rootView.findViewById(R.id.replyEditText);
  sendButton=(Button)rootView.findViewById(R.id.button1);
  sendButton.setOnClickListener(sendReplyListener);
  mExpandableListView=(ExpandableListView)rootView.findViewById(R.id.expandableList);
  mAttachmentButton=(ImageView)rootView.findViewById(R.id.attachmentbutton);
  mAttachmentButton.setOnClickListener(attachmentClickListener);
  mAdapter=new LocalAdapter(getActivity());
  mExpandableListView.setAdapter(mAdapter);
  gearSource=new HSSource(getActivity());
  mAdapter.setOnChildItemClickListener(listChildClickListener);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_issue_detail,null);
  replyEditTextView=(EditText)rootView.findViewById(R.id.replyEditText);
  sendButton=(Button)rootView.findViewById(R.id.button1);
  sendButton.setOnClickListener(sendReplyListener);
  mExpandableListView=(ExpandableListView)rootView.findViewById(R.id.expandableList);
  mAttachmentButton=(ImageView)rootView.findViewById(R.id.attachmentbutton);
  mAttachmentButton.setOnClickListener(attachmentClickListener);
  mAdapter=new LocalAdapter(getActivity());
  mExpandableListView.setAdapter(mAdapter);
  mExpandableListView.setTranscriptMode(ListView.TRANSCRIPT_MODE_ALWAYS_SCROLL);
  gearSource=new HSSource(getActivity());
  mAdapter.setOnChildItemClickListener(listChildClickListener);
  return rootView;
}"
8619,"@Override public void onSuccess(Object successObject){
  sendButton.setEnabled(true);
  HSTicketUpdate update=(HSTicketUpdate)successObject;
  ArrayList<HSTicketUpdate> updateList=new ArrayList<HSTicketUpdate>();
  updateList.addAll(Arrays.asList(fetchedUpdates));
  updateList.add(update);
  HSTicketUpdate[] updateArray=new HSTicketUpdate[0];
  fetchedUpdates=updateList.toArray(updateArray);
  refreshList();
  selectedAttachment=null;
  replyEditTextView.setText(""String_Node_Str"");
  getHelpStackActivity().setProgressBarIndeterminateVisibility(false);
  scrollListToBottom();
}","@Override public void onSuccess(Object successObject){
  sendButton.setEnabled(true);
  HSTicketUpdate update=(HSTicketUpdate)successObject;
  ArrayList<HSTicketUpdate> updateList=new ArrayList<HSTicketUpdate>();
  updateList.addAll(Arrays.asList(fetchedUpdates));
  updateList.add(update);
  HSTicketUpdate[] updateArray=new HSTicketUpdate[0];
  fetchedUpdates=updateList.toArray(updateArray);
  refreshList();
  selectedAttachment=null;
  replyEditTextView.setText(""String_Node_Str"");
  resetAttachmentImage();
  getHelpStackActivity().setProgressBarIndeterminateVisibility(false);
  scrollListToBottom();
}"
8620,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.doneItem) {
    if (getMessage().trim().length() == 0 || getSubject().trim().length() == 0) {
      HSUtils.showAlertDialog(getActivity(),""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(true);
    HSSource source=new HSSource(getActivity());
    HSAttachment[] attachmentArray=null;
    if (selectedAttachment != null) {
      attachmentArray=new HSAttachment[1];
      attachmentArray[0]=selectedAttachment;
    }
    String formattedBody=getMessage() + HSSource.getDeviceInformation(getActivity());
    source.createNewTicket(userDetails,getSubject(),formattedBody,attachmentArray,new OnNewTicketFetchedSuccessListener(){
      @Override public void onSuccess(      HSUser udpatedUserDetail,      HSTicket ticket){
        getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(false);
        sendSuccessSignal(ticket);
      }
    }
,new ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
        HSUtils.showAlertDialog(getActivity(),""String_Node_Str"",""String_Node_Str"");
        getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(false);
      }
    }
);
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.doneItem) {
    if (getMessage().trim().length() == 0 || getSubject().trim().length() == 0) {
      HSUtils.showAlertDialog(getActivity(),""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(true);
    HSSource source=new HSSource(getActivity());
    HSAttachment[] attachmentArray=null;
    if (selectedAttachment != null) {
      attachmentArray=new HSAttachment[1];
      attachmentArray[0]=selectedAttachment;
    }
    String formattedBody=getMessage();
    source.createNewTicket(userDetails,getSubject(),formattedBody,attachmentArray,new OnNewTicketFetchedSuccessListener(){
      @Override public void onSuccess(      HSUser udpatedUserDetail,      HSTicket ticket){
        getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(false);
        sendSuccessSignal(ticket);
      }
    }
,new ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
        HSUtils.showAlertDialog(getActivity(),""String_Node_Str"",""String_Node_Str"");
        getHelpStackActivity().setSupportProgressBarIndeterminateVisibility(false);
      }
    }
);
    return true;
  }
  return super.onOptionsItemSelected(item);
}"
8621,"public void addSearchViewInMenuItem(Context context,MenuItem searchItem){
  MenuItemCompat.setShowAsAction(searchItem,MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
  SearchView searchView=new SearchView(context);
  MenuItemCompat.setActionView(searchItem,R.layout.custom_searchview);
  searchView.setQueryHint(""String_Node_Str"");
  searchView.setSubmitButtonEnabled(true);
  searchView.setOnSearchClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchStarted();
    }
  }
);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String q){
      doSearchForQuery(q);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      doSearchForQuery(newText);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(searchItem,new OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      setVisibility(true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      setVisibility(false);
      return true;
    }
  }
);
}","public void addSearchViewInMenuItem(Context context,MenuItem searchItem){
  MenuItemCompat.setShowAsAction(searchItem,MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
  SearchView searchView=new SearchView(context);
  MenuItemCompat.setActionView(searchItem,searchView);
  searchView.setQueryHint(getString(R.string.search_hint));
  searchView.setSubmitButtonEnabled(true);
  searchView.setOnSearchClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchStarted();
    }
  }
);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String q){
      doSearchForQuery(q);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      doSearchForQuery(newText);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(searchItem,new OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      setVisibility(true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      setVisibility(false);
      return true;
    }
  }
);
}"
8622,"public void searchStarted(){
  searchAdapter.refreshList(allKbArticles);
  searchAdapter.notifyDataSetChanged();
  searchAdapter.getFilter().filter(""String_Node_Str"");
}","public void searchStarted(){
  searchAdapter.refreshList(allKbArticles);
  searchAdapter.getFilter().filter(""String_Node_Str"");
  searchAdapter.notifyDataSetChanged();
}"
8623,"public void createNewTicket(HSUser user,String subject,String message,HSAttachment[] attachment,OnNewTicketFetchedSuccessListener successListener,ErrorListener errorListener){
  HSUploadAttachment[] upload_attachments=convertAttachmentArrayToUploadAttachment(attachment);
  gear.createNewTicket(user,subject,message,upload_attachments,mRequestQueue,new NewTicketSuccessWrapper(successListener){
    @Override public void onSuccess(    HSUser udpatedUserDetail,    HSTicket ticket){
      doSaveNewTicketPropertiesForGearInCache(ticket);
      doSaveNewUserPropertiesForGearInCache(udpatedUserDetail);
      super.onSuccess(udpatedUserDetail,ticket);
    }
  }
,new ErrorWrapper(""String_Node_Str"",errorListener));
}","public void createNewTicket(HSUser user,String subject,String message,HSAttachment[] attachment,OnNewTicketFetchedSuccessListener successListener,ErrorListener errorListener){
  HSUploadAttachment[] upload_attachments=convertAttachmentArrayToUploadAttachment(attachment);
  message=message + getDeviceInformation(mContext);
  if (gear.canUplaodMessageAsHtmlString()) {
    message=Html.toHtml(new SpannableString(message));
  }
  gear.createNewTicket(user,subject,message,upload_attachments,mRequestQueue,new NewTicketSuccessWrapper(successListener){
    @Override public void onSuccess(    HSUser udpatedUserDetail,    HSTicket ticket){
      doSaveNewTicketPropertiesForGearInCache(ticket);
      doSaveNewUserPropertiesForGearInCache(udpatedUserDetail);
      super.onSuccess(udpatedUserDetail,ticket);
    }
  }
,new ErrorWrapper(""String_Node_Str"",errorListener));
}"
8624,"public void addReplyOnATicket(String message,HSAttachment[] attachments,HSTicket ticket,OnFetchedSuccessListener success,ErrorListener errorListener){
  gear.addReplyOnATicket(message,convertAttachmentArrayToUploadAttachment(attachments),ticket,getUser(),mRequestQueue,success,new ErrorWrapper(""String_Node_Str"",errorListener));
}","public void addReplyOnATicket(String message,HSAttachment[] attachments,HSTicket ticket,OnFetchedSuccessListener success,ErrorListener errorListener){
  if (gear.canUplaodMessageAsHtmlString()) {
    message=Html.toHtml(new SpannableString(message));
  }
  gear.addReplyOnATicket(message,convertAttachmentArrayToUploadAttachment(attachments),ticket,getUser(),mRequestQueue,success,new ErrorWrapper(""String_Node_Str"",errorListener));
}"
8625,"public static String getDeviceInformation(Activity activity){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(Build.VERSION.SDK_INT);
  builder.append(""String_Node_Str"");
  builder.append(Build.MODEL);
  builder.append(""String_Node_Str"");
  try {
    builder.append(activity.getPackageManager().getPackageInfo(activity.getPackageName(),0).packageName);
  }
 catch (  NameNotFoundException e) {
    builder.append(""String_Node_Str"");
  }
  builder.append(""String_Node_Str"");
  try {
    builder.append(activity.getPackageManager().getPackageInfo(activity.getPackageName(),0).versionCode);
  }
 catch (  NameNotFoundException e) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}","private static String getDeviceInformation(Context activity){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(Build.VERSION.SDK_INT);
  builder.append(""String_Node_Str"");
  builder.append(Build.MODEL);
  builder.append(""String_Node_Str"");
  try {
    builder.append(activity.getPackageManager().getPackageInfo(activity.getPackageName(),0).packageName);
  }
 catch (  NameNotFoundException e) {
    builder.append(""String_Node_Str"");
  }
  builder.append(""String_Node_Str"");
  try {
    builder.append(activity.getPackageManager().getPackageInfo(activity.getPackageName(),0).versionCode);
  }
 catch (  NameNotFoundException e) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}"
8626,"public MainItemVO(MainItemVO vo){
  uniqueId=vo.uniqueId;
  itemIdentifier=new String(vo.itemIdentifier);
  itemName=new String(vo.itemName);
  if (tags != null)   tags=Arrays.copyOf(vo.tags,vo.tags.length);
  customVars=new String(vo.customVars);
  x=vo.x;
  y=vo.y;
  rotation=vo.rotation;
  zIndex=vo.zIndex;
  layerName=new String(vo.layerName);
  if (vo.tint != null)   tint=Arrays.copyOf(vo.tint,vo.tint.length);
  scaleX=vo.scaleX;
  scaleY=vo.scaleY;
  originX=vo.originX;
  originY=vo.originY;
  if (vo.shape != null) {
    shape=vo.shape.clone();
  }
  if (vo.physics != null) {
    physics=new PhysicsBodyDataVO(vo.physics);
  }
}","public MainItemVO(MainItemVO vo){
  uniqueId=vo.uniqueId;
  itemIdentifier=new String(vo.itemIdentifier);
  itemName=new String(vo.itemName);
  if (vo.tags != null)   tags=Arrays.copyOf(vo.tags,vo.tags.length);
  customVars=new String(vo.customVars);
  x=vo.x;
  y=vo.y;
  rotation=vo.rotation;
  zIndex=vo.zIndex;
  layerName=new String(vo.layerName);
  if (vo.tint != null)   tint=Arrays.copyOf(vo.tint,vo.tint.length);
  scaleX=vo.scaleX;
  scaleY=vo.scaleY;
  originX=vo.originX;
  originY=vo.originY;
  if (vo.shape != null) {
    shape=vo.shape.clone();
  }
  if (vo.physics != null) {
    physics=new PhysicsBodyDataVO(vo.physics);
  }
}"
8627,"protected void processMain(Actor actor,MainItemVO vo){
  buildCoreData(actor,vo);
  actor.setPosition(vo.x * pixelsPerWU / resMultiplier,vo.y * pixelsPerWU / resMultiplier);
  actor.setOrigin(vo.originX * pixelsPerWU / resMultiplier,vo.originY * pixelsPerWU / resMultiplier);
  actor.setScale(vo.scaleX,vo.scaleY);
  actor.setRotation(vo.rotation);
  actor.setColor(new Color(vo.tint[0],vo.tint[1],vo.tint[2],vo.tint[3]));
  indexes.put(getLayerIndex(vo.layerName) + vo.zIndex,actor);
  if (layerMap.get(vo.layerName).isVisible) {
    actor.setVisible(true);
  }
 else {
    actor.setVisible(false);
  }
}","protected void processMain(Actor actor,MainItemVO vo){
  actor.setName(vo.itemIdentifier);
  buildCoreData(actor,vo);
  actor.setPosition(vo.x * pixelsPerWU / resMultiplier,vo.y * pixelsPerWU / resMultiplier);
  actor.setOrigin(vo.originX * pixelsPerWU / resMultiplier,vo.originY * pixelsPerWU / resMultiplier);
  actor.setScale(vo.scaleX,vo.scaleY);
  actor.setRotation(vo.rotation);
  actor.setColor(new Color(vo.tint[0],vo.tint[1],vo.tint[2],vo.tint[3]));
  indexes.put(getLayerIndex(vo.layerName) + vo.zIndex,actor);
  if (layerMap.get(vo.layerName).isVisible) {
    actor.setVisible(true);
  }
 else {
    actor.setVisible(false);
  }
}"
8628,"@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  ProjectInfoVO projectInfoVO=rm.getProjectVO();
  component.boundBox=new Rectangle(-10f / projectInfoVO.pixelToWorld,-10f / projectInfoVO.pixelToWorld,20f / projectInfoVO.pixelToWorld,20f / projectInfoVO.pixelToWorld);
  entity.add(component);
  return component;
}","@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  float boundBoxSize=10f;
  component.boundBox=new Rectangle(-boundBoxSize / 2f,-boundBoxSize / 2f,boundBoxSize,boundBoxSize);
  entity.add(component);
  return component;
}"
8629,"@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  ProjectInfoVO projectInfoVO=rm.getProjectVO();
  float boundBoxSize=70f;
  component.boundBox=new Rectangle((-boundBoxSize / 2f) / projectInfoVO.pixelToWorld,(-boundBoxSize / 2f) / projectInfoVO.pixelToWorld,boundBoxSize / projectInfoVO.pixelToWorld,boundBoxSize / projectInfoVO.pixelToWorld);
  entity.add(component);
  return component;
}","@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  float boundBoxSize=10f;
  component.boundBox=new Rectangle(-boundBoxSize / 2f,-boundBoxSize / 2f,boundBoxSize,boundBoxSize);
  entity.add(component);
  return component;
}"
8630,"@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  float boundBoxSize=10f;
  component.boundBox=new Rectangle(-boundBoxSize / 2f,-boundBoxSize / 2f,boundBoxSize,boundBoxSize);
  entity.add(component);
  return component;
}","@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  ProjectInfoVO projectInfoVO=rm.getProjectVO();
  component.boundBox=new Rectangle(-10f / projectInfoVO.pixelToWorld,-10f / projectInfoVO.pixelToWorld,20f / projectInfoVO.pixelToWorld,20f / projectInfoVO.pixelToWorld);
  entity.add(component);
  return component;
}"
8631,"@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  float boundBoxSize=10f;
  component.boundBox=new Rectangle(-boundBoxSize / 2f,-boundBoxSize / 2f,boundBoxSize,boundBoxSize);
  entity.add(component);
  return component;
}","@Override protected DimensionsComponent createDimensionsComponent(Entity entity,MainItemVO vo){
  DimensionsComponent component=new DimensionsComponent();
  ProjectInfoVO projectInfoVO=rm.getProjectVO();
  float boundBoxSize=70f;
  component.boundBox=new Rectangle((-boundBoxSize / 2f) / projectInfoVO.pixelToWorld,(-boundBoxSize / 2f) / projectInfoVO.pixelToWorld,boundBoxSize / projectInfoVO.pixelToWorld,boundBoxSize / projectInfoVO.pixelToWorld);
  entity.add(component);
  return component;
}"
8632,"public static void removeActions(Entity entity){
  ActionComponent actionComponent=ComponentRetriever.get(entity,ActionComponent.class);
  if (actionComponent != null) {
    entity.remove(ActionComponent.class);
  }
}","public static void removeActions(Entity entity){
  ActionComponent actionComponent=ComponentRetriever.get(entity,ActionComponent.class);
  if (actionComponent != null) {
    actionComponent.dataArray.clear();
  }
}"
8633,"public void makeRectangle(float width,float height){
  Vector2[] points=new Vector2[4];
  points[0]=new Vector2(0,0);
  points[1]=new Vector2(0,height);
  points[2]=new Vector2(width,height);
  points[3]=new Vector2(width,0);
  vertices=new Vector2[1][4];
  vertices[0]=points;
}","public void makeRectangle(float x,float y,float width,float height){
  Vector2[] points=new Vector2[4];
  points[0]=new Vector2(x,y);
  points[1]=new Vector2(x,y + height);
  points[2]=new Vector2(x + width,y + height);
  points[3]=new Vector2(x + width,y);
  vertices=new Vector2[1][4];
  vertices[0]=points;
}"
8634,"public void recalculateSize(){
  float lowerX=0, lowerY=0, upperX=0, upperY=0;
  SnapshotArray<Entity> entities=nodeComponent.children;
  float cos=0;
  float sin=0;
  float x1, y1, x2, y2, x3, y3, x4, y4;
  float worldOriginX;
  float worldOriginY;
  float fx;
  float fy;
  float fx2;
  float fy2;
  for (int i=0; i < entities.size; i++) {
    Entity entity=entities.get(i);
    transformComponent=transformMapper.get(entity);
    DimensionsComponent childDimentionsComponent=dimensionsMapper.get(entity);
    worldOriginX=transformComponent.x + transformComponent.originX;
    worldOriginY=transformComponent.y + transformComponent.originY;
    fx=-transformComponent.originX;
    fy=-transformComponent.originY;
    fx2=childDimentionsComponent.width - transformComponent.originX;
    fy2=childDimentionsComponent.height - transformComponent.originY;
    if (transformComponent.scaleX != 1 || transformComponent.scaleY != 1) {
      fx*=transformComponent.scaleX;
      fy*=transformComponent.scaleY;
      fx2*=transformComponent.scaleX;
      fy2*=transformComponent.scaleY;
    }
    x1=fx;
    y1=fy;
    x2=fx;
    y2=fy2;
    x3=fx2;
    y3=fy;
    x4=fx2;
    y4=fy2;
    if (transformComponent.rotation != 0) {
      cos=MathUtils.cosDeg(transformComponent.rotation);
      sin=MathUtils.sinDeg(transformComponent.rotation);
      x1=fx * cos - fy * sin;
      y1=fx * sin + fy * cos;
      x2=fx * cos - fy2 * sin;
      y2=fx * sin + fy2 * cos;
      x3=fx2 * cos - fy * sin;
      y3=fx2 * sin + fy * cos;
      x4=fx2 * cos - fy2 * sin;
      y4=fx2 * sin + fy2 * cos;
    }
    x1+=worldOriginX;
    y1+=worldOriginY;
    x2+=worldOriginX;
    y2+=worldOriginY;
    x3+=worldOriginX;
    y3+=worldOriginY;
    x4+=worldOriginX;
    y4+=worldOriginY;
    lowerX=Math.min(Math.min(Math.min(Math.min(x1,x2),x3),x4),lowerX);
    upperX=Math.max(Math.max(Math.max(Math.max(x1,x2),x3),x4),upperX);
    lowerY=Math.min(Math.min(Math.min(Math.min(y1,y2),y3),y4),lowerY);
    upperY=Math.max(Math.max(Math.max(Math.max(y1,y2),y3),y4),upperY);
  }
  dimensionsComponent.width=(upperX - lowerX);
  dimensionsComponent.height=(upperY - lowerY);
  dimensionsComponent.boundBox.set(lowerX,lowerY,dimensionsComponent.width,dimensionsComponent.height);
}","public void recalculateSize(){
  float lowerX=Float.MAX_VALUE, lowerY=Float.MAX_VALUE, upperX=Float.MIN_VALUE, upperY=Float.MIN_VALUE;
  SnapshotArray<Entity> entities=nodeComponent.children;
  float cos=0;
  float sin=0;
  float x1, y1, x2, y2, x3, y3, x4, y4;
  float worldOriginX;
  float worldOriginY;
  float fx;
  float fy;
  float fx2;
  float fy2;
  for (int i=0; i < entities.size; i++) {
    Entity entity=entities.get(i);
    transformComponent=transformMapper.get(entity);
    DimensionsComponent childDimentionsComponent=dimensionsMapper.get(entity);
    worldOriginX=transformComponent.x + transformComponent.originX;
    worldOriginY=transformComponent.y + transformComponent.originY;
    fx=-transformComponent.originX;
    fy=-transformComponent.originY;
    fx2=childDimentionsComponent.width - transformComponent.originX;
    fy2=childDimentionsComponent.height - transformComponent.originY;
    if (transformComponent.scaleX != 1 || transformComponent.scaleY != 1) {
      fx*=transformComponent.scaleX;
      fy*=transformComponent.scaleY;
      fx2*=transformComponent.scaleX;
      fy2*=transformComponent.scaleY;
    }
    x1=fx;
    y1=fy;
    x2=fx;
    y2=fy2;
    x3=fx2;
    y3=fy;
    x4=fx2;
    y4=fy2;
    if (transformComponent.rotation != 0) {
      cos=MathUtils.cosDeg(transformComponent.rotation);
      sin=MathUtils.sinDeg(transformComponent.rotation);
      x1=fx * cos - fy * sin;
      y1=fx * sin + fy * cos;
      x2=fx * cos - fy2 * sin;
      y2=fx * sin + fy2 * cos;
      x3=fx2 * cos - fy * sin;
      y3=fx2 * sin + fy * cos;
      x4=fx2 * cos - fy2 * sin;
      y4=fx2 * sin + fy2 * cos;
    }
    x1+=worldOriginX;
    y1+=worldOriginY;
    x2+=worldOriginX;
    y2+=worldOriginY;
    x3+=worldOriginX;
    y3+=worldOriginY;
    x4+=worldOriginX;
    y4+=worldOriginY;
    lowerX=Math.min(Math.min(Math.min(Math.min(x1,x2),x3),x4),lowerX);
    upperX=Math.max(Math.max(Math.max(Math.max(x1,x2),x3),x4),upperX);
    lowerY=Math.min(Math.min(Math.min(Math.min(y1,y2),y3),y4),lowerY);
    upperY=Math.max(Math.max(Math.max(Math.max(y1,y2),y3),y4),upperY);
  }
  dimensionsComponent.width=(upperX - lowerX);
  dimensionsComponent.height=(upperY - lowerY);
  dimensionsComponent.boundBox.set(lowerX,lowerY,dimensionsComponent.width,dimensionsComponent.height);
}"
8635,"@Override protected void processEntity(Entity entity,float deltaTime){
  ParticleComponent particleComponent=particleComponentMapper.get(entity);
  TransformComponent transformComponent=transformComponentMapper.get(entity);
  DimensionsComponent dimensionsComponent=ComponentRetriever.get(entity,DimensionsComponent.class);
  ParticleEffect particleEffect=particleComponent.particleEffect;
  particleEffect.setPosition(transformComponent.x,transformComponent.y);
  particleEffect.update(deltaTime);
}","@Override protected void processEntity(Entity entity,float deltaTime){
  ParticleComponent particleComponent=particleComponentMapper.get(entity);
  ParticleEffect particleEffect=particleComponent.particleEffect;
  particleEffect.update(deltaTime);
}"
8636,"public ParticleDrawableLogic(){
  particleMapper=ComponentMapper.getFor(ParticleComponent.class);
}","public ParticleDrawableLogic(){
}"
8637,"@Override public void draw(Batch batch,Entity entity,float parentAlpha){
  ParticleComponent particleComponent=particleMapper.get(entity);
  particleComponent.particleEffect.draw(batch);
}","@Override public void draw(Batch batch,Entity entity,float parentAlpha){
  ParticleComponent particleComponent=particleComponentMapper.get(entity);
  TransformComponent transformComponent=transformComponentMapper.get(entity);
  particleComponent.particleEffect.setPosition(transformComponent.x,transformComponent.y);
  particleComponent.particleEffect.draw(batch);
}"
8638,"public Body createBody(World world,PhysicsBodyComponent physicsComponent,Vector2[][] minPolygonData,Vector2 mulVec,float rotationRad){
  FixtureDef fixtureDef=new FixtureDef();
  if (physicsComponent != null) {
    fixtureDef.density=physicsComponent.density;
    fixtureDef.friction=physicsComponent.friction;
    fixtureDef.restitution=physicsComponent.restitution;
    fixtureDef.isSensor=physicsComponent.sensor;
  }
  BodyDef bodyDef=new BodyDef();
  bodyDef.position.set(0,0);
  bodyDef.awake=physicsComponent.awake;
  bodyDef.allowSleep=physicsComponent.allowSleep;
  bodyDef.bullet=physicsComponent.bullet;
  if (physicsComponent.bodyType == 0) {
    bodyDef.type=BodyDef.BodyType.StaticBody;
  }
 else   if (physicsComponent.bodyType == 1) {
    bodyDef.type=BodyDef.BodyType.KinematicBody;
  }
 else {
    bodyDef.type=BodyDef.BodyType.DynamicBody;
  }
  Body body=world.createBody(bodyDef);
  PolygonShape polygonShape=new PolygonShape();
  for (int i=0; i < minPolygonData.length; i++) {
    float[] verts=new float[minPolygonData[i].length * 2];
    for (int j=0; j < verts.length; j+=2) {
      minPolygonData[i][j / 2].x-=physicsComponent.centerX;
      minPolygonData[i][j / 2].y-=physicsComponent.centerY;
      verts[j]=(minPolygonData[i][j / 2].x * (float)Math.cos(rotationRad) - minPolygonData[i][j / 2].y * (float)Math.sin(rotationRad)) * mulVec.x * scale;
      verts[j + 1]=(minPolygonData[i][j / 2].x * (float)Math.sin(rotationRad) + minPolygonData[i][j / 2].y * (float)Math.cos(rotationRad)) * mulVec.y * scale;
      verts[j]+=physicsComponent.centerX;
      verts[j + 1]+=physicsComponent.centerY;
    }
    polygonShape.set(verts);
    fixtureDef.shape=polygonShape;
    body.createFixture(fixtureDef);
  }
  return body;
}","public Body createBody(World world,PhysicsBodyComponent physicsComponent,Vector2[][] minPolygonData,Vector2 mulVec,float rotationRad){
  FixtureDef fixtureDef=new FixtureDef();
  if (physicsComponent != null) {
    fixtureDef.density=physicsComponent.density;
    fixtureDef.friction=physicsComponent.friction;
    fixtureDef.restitution=physicsComponent.restitution;
    fixtureDef.isSensor=physicsComponent.sensor;
  }
  BodyDef bodyDef=new BodyDef();
  bodyDef.position.set(0,0);
  bodyDef.awake=physicsComponent.awake;
  bodyDef.allowSleep=physicsComponent.allowSleep;
  bodyDef.bullet=physicsComponent.bullet;
  if (physicsComponent.bodyType == 0) {
    bodyDef.type=BodyDef.BodyType.StaticBody;
  }
 else   if (physicsComponent.bodyType == 1) {
    bodyDef.type=BodyDef.BodyType.KinematicBody;
  }
 else {
    bodyDef.type=BodyDef.BodyType.DynamicBody;
  }
  Body body=world.createBody(bodyDef);
  PolygonShape polygonShape=new PolygonShape();
  for (int i=0; i < minPolygonData.length; i++) {
    float[] verts=new float[minPolygonData[i].length * 2];
    for (int j=0; j < verts.length; j+=2) {
      minPolygonData[i][j / 2].x-=physicsComponent.centerX;
      minPolygonData[i][j / 2].y-=physicsComponent.centerY;
      minPolygonData[i][j / 2].x*=mulVec.x;
      minPolygonData[i][j / 2].y*=mulVec.y;
      verts[j]=(minPolygonData[i][j / 2].x * (float)Math.cos(rotationRad) - minPolygonData[i][j / 2].y * (float)Math.sin(rotationRad)) * scale;
      verts[j + 1]=(minPolygonData[i][j / 2].x * (float)Math.sin(rotationRad) + minPolygonData[i][j / 2].y * (float)Math.cos(rotationRad)) * scale;
      verts[j]+=physicsComponent.centerX;
      verts[j + 1]+=physicsComponent.centerY;
    }
    polygonShape.set(verts);
    fixtureDef.shape=polygonShape;
    body.createFixture(fixtureDef);
  }
  return body;
}"
8639,"protected void processBody(Entity entity){
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  PolygonComponent polygonComponent=ComponentRetriever.get(entity,PolygonComponent.class);
  TransformComponent transformComponent=ComponentRetriever.get(entity,TransformComponent.class);
  if (polygonComponent == null && physicsBodyComponent.body != null) {
    world.destroyBody(physicsBodyComponent.body);
    physicsBodyComponent.body=null;
  }
  if (physicsBodyComponent.body == null && polygonComponent != null) {
    if (polygonComponent.vertices == null)     return;
    DimensionsComponent dimensionsComponent=ComponentRetriever.get(entity,DimensionsComponent.class);
    physicsBodyComponent.centerX=dimensionsComponent.width / 2;
    physicsBodyComponent.centerY=dimensionsComponent.height / 2;
    PhysicsBodyComponent bodyPropertiesComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
    physicsBodyComponent.body=PhysicsBodyLoader.getInstance().createBody(world,bodyPropertiesComponent,polygonComponent.vertices,new Vector2(1,1),transformComponent.rotation * MathUtils.degreesToRadians);
    physicsBodyComponent.body.setTransform(new Vector2(transformComponent.x * PhysicsBodyLoader.getScale(),transformComponent.y * PhysicsBodyLoader.getScale()),physicsBodyComponent.body.getAngle());
    physicsBodyComponent.body.setUserData(entity);
  }
}","protected void processBody(Entity entity){
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  PolygonComponent polygonComponent=ComponentRetriever.get(entity,PolygonComponent.class);
  TransformComponent transformComponent=ComponentRetriever.get(entity,TransformComponent.class);
  if (polygonComponent == null && physicsBodyComponent.body != null) {
    world.destroyBody(physicsBodyComponent.body);
    physicsBodyComponent.body=null;
  }
  if (physicsBodyComponent.body == null && polygonComponent != null) {
    if (polygonComponent.vertices == null)     return;
    DimensionsComponent dimensionsComponent=ComponentRetriever.get(entity,DimensionsComponent.class);
    physicsBodyComponent.centerX=dimensionsComponent.width / 2;
    physicsBodyComponent.centerY=dimensionsComponent.height / 2;
    PhysicsBodyComponent bodyPropertiesComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
    physicsBodyComponent.body=PhysicsBodyLoader.getInstance().createBody(world,bodyPropertiesComponent,polygonComponent.vertices,new Vector2(transformComponent.scaleX,transformComponent.scaleY),transformComponent.rotation * MathUtils.degreesToRadians);
    physicsBodyComponent.body.setTransform(new Vector2(transformComponent.x * PhysicsBodyLoader.getScale(),transformComponent.y * PhysicsBodyLoader.getScale()),physicsBodyComponent.body.getAngle());
    physicsBodyComponent.body.setUserData(entity);
  }
}"
8640,"public Body createBody(World world,PhysicsBodyComponent physicsComponent,Vector2[][] minPolygonData,Vector2 mulVec){
  FixtureDef fixtureDef=new FixtureDef();
  if (physicsComponent != null) {
    fixtureDef.density=physicsComponent.density;
    fixtureDef.friction=physicsComponent.friction;
    fixtureDef.restitution=physicsComponent.restitution;
    fixtureDef.isSensor=physicsComponent.sensor;
  }
  BodyDef bodyDef=new BodyDef();
  bodyDef.position.set(0,0);
  bodyDef.awake=physicsComponent.awake;
  bodyDef.allowSleep=physicsComponent.allowSleep;
  bodyDef.bullet=physicsComponent.bullet;
  if (physicsComponent.bodyType == 0) {
    bodyDef.type=BodyDef.BodyType.StaticBody;
  }
 else   if (physicsComponent.bodyType == 1) {
    bodyDef.type=BodyDef.BodyType.KinematicBody;
  }
 else {
    bodyDef.type=BodyDef.BodyType.DynamicBody;
  }
  Body body=world.createBody(bodyDef);
  PolygonShape polygonShape=new PolygonShape();
  for (int i=0; i < minPolygonData.length; i++) {
    float[] verts=new float[minPolygonData[i].length * 2];
    for (int j=0; j < verts.length; j+=2) {
      verts[j]=minPolygonData[i][j / 2].x * mulVec.x * scale;
      verts[j + 1]=minPolygonData[i][j / 2].y * mulVec.y * scale;
    }
    polygonShape.set(verts);
    fixtureDef.shape=polygonShape;
    body.createFixture(fixtureDef);
  }
  return body;
}","public Body createBody(World world,PhysicsBodyComponent physicsComponent,Vector2[][] minPolygonData,Vector2 mulVec,float rotationRad){
  FixtureDef fixtureDef=new FixtureDef();
  if (physicsComponent != null) {
    fixtureDef.density=physicsComponent.density;
    fixtureDef.friction=physicsComponent.friction;
    fixtureDef.restitution=physicsComponent.restitution;
    fixtureDef.isSensor=physicsComponent.sensor;
  }
  BodyDef bodyDef=new BodyDef();
  bodyDef.position.set(0,0);
  bodyDef.awake=physicsComponent.awake;
  bodyDef.allowSleep=physicsComponent.allowSleep;
  bodyDef.bullet=physicsComponent.bullet;
  if (physicsComponent.bodyType == 0) {
    bodyDef.type=BodyDef.BodyType.StaticBody;
  }
 else   if (physicsComponent.bodyType == 1) {
    bodyDef.type=BodyDef.BodyType.KinematicBody;
  }
 else {
    bodyDef.type=BodyDef.BodyType.DynamicBody;
  }
  Body body=world.createBody(bodyDef);
  PolygonShape polygonShape=new PolygonShape();
  for (int i=0; i < minPolygonData.length; i++) {
    float[] verts=new float[minPolygonData[i].length * 2];
    for (int j=0; j < verts.length; j+=2) {
      minPolygonData[i][j / 2].x-=physicsComponent.centerX;
      minPolygonData[i][j / 2].y-=physicsComponent.centerY;
      verts[j]=(minPolygonData[i][j / 2].x * (float)Math.cos(rotationRad) - minPolygonData[i][j / 2].y * (float)Math.sin(rotationRad)) * mulVec.x * scale;
      verts[j + 1]=(minPolygonData[i][j / 2].x * (float)Math.sin(rotationRad) + minPolygonData[i][j / 2].y * (float)Math.cos(rotationRad)) * mulVec.y * scale;
      verts[j]+=physicsComponent.centerX;
      verts[j + 1]+=physicsComponent.centerY;
    }
    polygonShape.set(verts);
    fixtureDef.shape=polygonShape;
    body.createFixture(fixtureDef);
  }
  return body;
}"
8641,"@Override protected void processEntity(Entity entity,float deltaTime){
  TransformComponent transformComponent=transformComponentMapper.get(entity);
  processBody(entity);
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  Body body=physicsBodyComponent.body;
  transformComponent.x=body.getPosition().x / PhysicsBodyLoader.getScale();
  transformComponent.y=body.getPosition().y / PhysicsBodyLoader.getScale();
  transformComponent.rotation=body.getAngle() * MathUtils.radiansToDegrees;
}","@Override protected void processEntity(Entity entity,float deltaTime){
  TransformComponent transformComponent=transformComponentMapper.get(entity);
  processBody(entity);
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  Body body=physicsBodyComponent.body;
  transformComponent.x=body.getPosition().x / PhysicsBodyLoader.getScale();
  transformComponent.y=body.getPosition().y / PhysicsBodyLoader.getScale();
}"
8642,"protected void processBody(Entity entity){
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  PolygonComponent polygonComponent=ComponentRetriever.get(entity,PolygonComponent.class);
  TransformComponent transformComponent=ComponentRetriever.get(entity,TransformComponent.class);
  if (polygonComponent == null && physicsBodyComponent.body != null) {
    world.destroyBody(physicsBodyComponent.body);
    physicsBodyComponent.body=null;
  }
  if (physicsBodyComponent.body == null && polygonComponent != null) {
    if (polygonComponent.vertices == null)     return;
    PhysicsBodyComponent bodyPropertiesComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
    physicsBodyComponent.body=PhysicsBodyLoader.getInstance().createBody(world,bodyPropertiesComponent,polygonComponent.vertices,new Vector2(1,1));
    physicsBodyComponent.body.setTransform(new Vector2(transformComponent.x * PhysicsBodyLoader.getScale(),transformComponent.y * PhysicsBodyLoader.getScale()),physicsBodyComponent.body.getAngle());
    physicsBodyComponent.body.setUserData(entity);
  }
}","protected void processBody(Entity entity){
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  PolygonComponent polygonComponent=ComponentRetriever.get(entity,PolygonComponent.class);
  TransformComponent transformComponent=ComponentRetriever.get(entity,TransformComponent.class);
  if (polygonComponent == null && physicsBodyComponent.body != null) {
    world.destroyBody(physicsBodyComponent.body);
    physicsBodyComponent.body=null;
  }
  if (physicsBodyComponent.body == null && polygonComponent != null) {
    if (polygonComponent.vertices == null)     return;
    DimensionsComponent dimensionsComponent=ComponentRetriever.get(entity,DimensionsComponent.class);
    physicsBodyComponent.centerX=dimensionsComponent.width / 2;
    physicsBodyComponent.centerY=dimensionsComponent.height / 2;
    PhysicsBodyComponent bodyPropertiesComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
    physicsBodyComponent.body=PhysicsBodyLoader.getInstance().createBody(world,bodyPropertiesComponent,polygonComponent.vertices,new Vector2(1,1),transformComponent.rotation * MathUtils.degreesToRadians);
    physicsBodyComponent.body.setTransform(new Vector2(transformComponent.x * PhysicsBodyLoader.getScale(),transformComponent.y * PhysicsBodyLoader.getScale()),physicsBodyComponent.body.getAngle());
    physicsBodyComponent.body.setUserData(entity);
  }
}"
8643,"private void drawChildren(Entity rootEntity,Batch batch,CompositeTransformComponent curCompositeTransformComponent,float parentAlpha){
  NodeComponent nodeComponent=nodeMapper.get(rootEntity);
  Entity[] children=nodeComponent.children.begin();
  if (curCompositeTransformComponent.transform) {
    for (int i=0, n=nodeComponent.children.size; i < n; i++) {
      Entity child=children[i];
      LayerMapComponent rootLayers=ComponentRetriever.get(rootEntity,LayerMapComponent.class);
      ZIndexComponent childZIndexComponent=ComponentRetriever.get(child,ZIndexComponent.class);
      if (!rootLayers.isVisible(childZIndexComponent.layerName)) {
        continue;
      }
      MainItemComponent childMainItemComponent=mainItemComponentMapper.get(child);
      if (!childMainItemComponent.visible) {
        continue;
      }
      int entityType=childMainItemComponent.entityType;
      NodeComponent childNodeComponent=nodeMapper.get(child);
      if (childNodeComponent == null) {
        drawableLogicMapper.getDrawable(entityType).draw(batch,child,parentAlpha);
      }
 else {
        drawRecursively(child,parentAlpha);
      }
    }
  }
 else {
    TransformComponent compositeTransform=transformMapper.get(rootEntity);
    float offsetX=compositeTransform.x, offsetY=compositeTransform.y;
    if (viewPortMapper.has(rootEntity)) {
      offsetX=0;
      offsetY=0;
    }
    for (int i=0, n=nodeComponent.children.size; i < n; i++) {
      Entity child=children[i];
      LayerMapComponent rootLayers=ComponentRetriever.get(rootEntity,LayerMapComponent.class);
      ZIndexComponent childZIndexComponent=ComponentRetriever.get(child,ZIndexComponent.class);
      if (!rootLayers.isVisible(childZIndexComponent.layerName)) {
        continue;
      }
      MainItemComponent childMainItemComponent=mainItemComponentMapper.get(child);
      if (!childMainItemComponent.visible) {
        continue;
      }
      TransformComponent childTransformComponent=transformMapper.get(child);
      float cx=childTransformComponent.x, cy=childTransformComponent.y;
      childTransformComponent.x=cx + offsetX;
      childTransformComponent.y=cy + offsetY;
      NodeComponent childNodeComponent=nodeMapper.get(child);
      int entityType=mainItemComponentMapper.get(child).entityType;
      if (childNodeComponent == null) {
        drawableLogicMapper.getDrawable(entityType).draw(batch,child,parentAlpha);
      }
 else {
        drawRecursively(child,parentAlpha);
      }
      childTransformComponent.x=cx;
      childTransformComponent.y=cy;
    }
  }
  nodeComponent.children.end();
}","private void drawChildren(Entity rootEntity,Batch batch,CompositeTransformComponent curCompositeTransformComponent,float parentAlpha){
  NodeComponent nodeComponent=nodeMapper.get(rootEntity);
  Entity[] children=nodeComponent.children.begin();
  TransformComponent transform=transformMapper.get(rootEntity);
  if (curCompositeTransformComponent.transform || transform.rotation != 0 || transform.scaleX != 0 || transform.scaleY != 0) {
    for (int i=0, n=nodeComponent.children.size; i < n; i++) {
      Entity child=children[i];
      LayerMapComponent rootLayers=ComponentRetriever.get(rootEntity,LayerMapComponent.class);
      ZIndexComponent childZIndexComponent=ComponentRetriever.get(child,ZIndexComponent.class);
      if (!rootLayers.isVisible(childZIndexComponent.layerName)) {
        continue;
      }
      MainItemComponent childMainItemComponent=mainItemComponentMapper.get(child);
      if (!childMainItemComponent.visible) {
        continue;
      }
      int entityType=childMainItemComponent.entityType;
      NodeComponent childNodeComponent=nodeMapper.get(child);
      if (childNodeComponent == null) {
        drawableLogicMapper.getDrawable(entityType).draw(batch,child,parentAlpha);
      }
 else {
        drawRecursively(child,parentAlpha);
      }
    }
  }
 else {
    TransformComponent compositeTransform=transformMapper.get(rootEntity);
    float offsetX=compositeTransform.x, offsetY=compositeTransform.y;
    if (viewPortMapper.has(rootEntity)) {
      offsetX=0;
      offsetY=0;
    }
    for (int i=0, n=nodeComponent.children.size; i < n; i++) {
      Entity child=children[i];
      LayerMapComponent rootLayers=ComponentRetriever.get(rootEntity,LayerMapComponent.class);
      ZIndexComponent childZIndexComponent=ComponentRetriever.get(child,ZIndexComponent.class);
      if (!rootLayers.isVisible(childZIndexComponent.layerName)) {
        continue;
      }
      MainItemComponent childMainItemComponent=mainItemComponentMapper.get(child);
      if (!childMainItemComponent.visible) {
        continue;
      }
      TransformComponent childTransformComponent=transformMapper.get(child);
      float cx=childTransformComponent.x, cy=childTransformComponent.y;
      childTransformComponent.x=cx + offsetX;
      childTransformComponent.y=cy + offsetY;
      NodeComponent childNodeComponent=nodeMapper.get(child);
      int entityType=mainItemComponentMapper.get(child).entityType;
      if (childNodeComponent == null) {
        drawableLogicMapper.getDrawable(entityType).draw(batch,child,parentAlpha);
      }
 else {
        drawRecursively(child,parentAlpha);
      }
      childTransformComponent.x=cx;
      childTransformComponent.y=cy;
    }
  }
  nodeComponent.children.end();
}"
8644,"private void addEntityRemoveListener(){
  engine.addEntityListener(new EntityListener(){
    @Override public void entityAdded(    Entity entity){
      ScriptComponent scriptComponent=entity.getComponent(ScriptComponent.class);
      if (scriptComponent != null) {
        for (        IScript script : scriptComponent.scripts) {
          script.init(entity);
        }
      }
    }
    @Override public void entityRemoved(    Entity entity){
      ParentNodeComponent parentComponent=ComponentRetriever.get(entity,ParentNodeComponent.class);
      if (parentComponent == null) {
        return;
      }
      Entity parentEntity=parentComponent.parentEntity;
      NodeComponent parentNodeComponent=ComponentRetriever.get(parentEntity,NodeComponent.class);
      parentNodeComponent.removeChild(entity);
      NodeComponent nodeComponent=ComponentRetriever.get(entity,NodeComponent.class);
      if (nodeComponent != null) {
        for (        Entity node : nodeComponent.children) {
          engine.removeEntity(node);
        }
      }
      PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
      if (physicsBodyComponent != null) {
        world.destroyBody(physicsBodyComponent.body);
      }
      LightObjectComponent lightObjectComponent=ComponentRetriever.get(entity,LightObjectComponent.class);
      if (lightObjectComponent != null) {
        lightObjectComponent.lightObject.remove(true);
      }
    }
  }
);
}","private void addEntityRemoveListener(){
  engine.addEntityListener(new EntityListener(){
    @Override public void entityAdded(    Entity entity){
      ScriptComponent scriptComponent=entity.getComponent(ScriptComponent.class);
      if (scriptComponent != null) {
        for (        IScript script : scriptComponent.scripts) {
          script.init(entity);
        }
      }
    }
    @Override public void entityRemoved(    Entity entity){
      ParentNodeComponent parentComponent=ComponentRetriever.get(entity,ParentNodeComponent.class);
      if (parentComponent == null) {
        return;
      }
      Entity parentEntity=parentComponent.parentEntity;
      NodeComponent parentNodeComponent=ComponentRetriever.get(parentEntity,NodeComponent.class);
      parentNodeComponent.removeChild(entity);
      NodeComponent nodeComponent=ComponentRetriever.get(entity,NodeComponent.class);
      if (nodeComponent != null) {
        for (        Entity node : nodeComponent.children) {
          engine.removeEntity(node);
        }
      }
      PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
      if (physicsBodyComponent != null && physicsBodyComponent.body != null) {
        world.destroyBody(physicsBodyComponent.body);
      }
      LightObjectComponent lightObjectComponent=ComponentRetriever.get(entity,LightObjectComponent.class);
      if (lightObjectComponent != null) {
        lightObjectComponent.lightObject.remove(true);
      }
    }
  }
);
}"
8645,"@Override public void entityRemoved(Entity entity){
  ParentNodeComponent parentComponent=ComponentRetriever.get(entity,ParentNodeComponent.class);
  if (parentComponent == null) {
    return;
  }
  Entity parentEntity=parentComponent.parentEntity;
  NodeComponent parentNodeComponent=ComponentRetriever.get(parentEntity,NodeComponent.class);
  parentNodeComponent.removeChild(entity);
  NodeComponent nodeComponent=ComponentRetriever.get(entity,NodeComponent.class);
  if (nodeComponent != null) {
    for (    Entity node : nodeComponent.children) {
      engine.removeEntity(node);
    }
  }
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  if (physicsBodyComponent != null) {
    world.destroyBody(physicsBodyComponent.body);
  }
  LightObjectComponent lightObjectComponent=ComponentRetriever.get(entity,LightObjectComponent.class);
  if (lightObjectComponent != null) {
    lightObjectComponent.lightObject.remove(true);
  }
}","@Override public void entityRemoved(Entity entity){
  ParentNodeComponent parentComponent=ComponentRetriever.get(entity,ParentNodeComponent.class);
  if (parentComponent == null) {
    return;
  }
  Entity parentEntity=parentComponent.parentEntity;
  NodeComponent parentNodeComponent=ComponentRetriever.get(parentEntity,NodeComponent.class);
  parentNodeComponent.removeChild(entity);
  NodeComponent nodeComponent=ComponentRetriever.get(entity,NodeComponent.class);
  if (nodeComponent != null) {
    for (    Entity node : nodeComponent.children) {
      engine.removeEntity(node);
    }
  }
  PhysicsBodyComponent physicsBodyComponent=ComponentRetriever.get(entity,PhysicsBodyComponent.class);
  if (physicsBodyComponent != null && physicsBodyComponent.body != null) {
    world.destroyBody(physicsBodyComponent.body);
  }
  LightObjectComponent lightObjectComponent=ComponentRetriever.get(entity,LightObjectComponent.class);
  if (lightObjectComponent != null) {
    lightObjectComponent.lightObject.remove(true);
  }
}"
8646,"public void addParentComponent(Entity entity,Entity root){
  ParentNodeComponent parentNodeComponent=new ParentNodeComponent();
  parentNodeComponent.parentEntity=root;
  entity.add(parentNodeComponent);
  NodeComponent nodeComponent=nodeComponentMapper.get(root);
  nodeComponent.children.add(entity);
}","public void addParentComponent(Entity entity,Entity root){
  ParentNodeComponent parentNodeComponent=new ParentNodeComponent();
  parentNodeComponent.parentEntity=root;
  entity.add(parentNodeComponent);
  NodeComponent nodeComponent=nodeComponentMapper.get(root);
  nodeComponent.children.add(entity);
  if (entity.flags == COMPOSITE_TYPE) {
    NodeComponent node=new NodeComponent();
    entity.add(node);
  }
}"
8647,"public void addPhysicsComponents(Entity entity,MainItemVO vo){
  PhysicsBodyPropertiesComponent pysicsComponent=new PhysicsBodyPropertiesComponent();
  pysicsComponent.allowSleep=vo.physicsBodyData.allowSleep;
  pysicsComponent.awake=vo.physicsBodyData.awake;
  pysicsComponent.bodyType=vo.physicsBodyData.bodyType;
  pysicsComponent.bullet=vo.physicsBodyData.bullet;
  pysicsComponent.centerOfMass=vo.physicsBodyData.centerOfMass;
  pysicsComponent.damping=vo.physicsBodyData.damping;
  pysicsComponent.density=vo.physicsBodyData.density;
  pysicsComponent.friction=vo.physicsBodyData.friction;
  pysicsComponent.gravityScale=vo.physicsBodyData.gravityScale;
  pysicsComponent.mass=vo.physicsBodyData.mass;
  pysicsComponent.restitution=vo.physicsBodyData.restitution;
  pysicsComponent.rotationalInertia=vo.physicsBodyData.rotationalInertia;
  MeshComponont meshComponent=new MeshComponont();
  meshComponent.meshId=vo.meshId;
  meshComponent.minPolygonData=rm.getProjectVO().meshes.get(vo.meshId).minPolygonData;
  PhysicsBodyComponent bodyComponent=new PhysicsBodyComponent();
  bodyComponent.body=PhysicsBodyLoader.createBody(world,pysicsComponent,meshComponent.minPolygonData,new Vector2(1,1));
  entity.add(pysicsComponent);
  entity.add(meshComponent);
  entity.add(bodyComponent);
}","public void addPhysicsComponents(Entity entity,MainItemVO vo){
  if (vo.physicsBodyData == null) {
    return;
  }
  PhysicsBodyPropertiesComponent pysicsComponent=new PhysicsBodyPropertiesComponent();
  pysicsComponent.allowSleep=vo.physicsBodyData.allowSleep;
  pysicsComponent.awake=vo.physicsBodyData.awake;
  pysicsComponent.bodyType=vo.physicsBodyData.bodyType;
  pysicsComponent.bullet=vo.physicsBodyData.bullet;
  pysicsComponent.centerOfMass=vo.physicsBodyData.centerOfMass;
  pysicsComponent.damping=vo.physicsBodyData.damping;
  pysicsComponent.density=vo.physicsBodyData.density;
  pysicsComponent.friction=vo.physicsBodyData.friction;
  pysicsComponent.gravityScale=vo.physicsBodyData.gravityScale;
  pysicsComponent.mass=vo.physicsBodyData.mass;
  pysicsComponent.restitution=vo.physicsBodyData.restitution;
  pysicsComponent.rotationalInertia=vo.physicsBodyData.rotationalInertia;
  MeshComponont meshComponent=new MeshComponont();
  meshComponent.meshId=vo.meshId;
  meshComponent.minPolygonData=rm.getProjectVO().meshes.get(vo.meshId).minPolygonData;
  PhysicsBodyComponent bodyComponent=new PhysicsBodyComponent();
  bodyComponent.body=PhysicsBodyLoader.createBody(world,pysicsComponent,meshComponent.minPolygonData,new Vector2(1,1));
  entity.add(pysicsComponent);
  entity.add(meshComponent);
  entity.add(bodyComponent);
}"
8648,"public EntityFactory(RayHandler rayHandler,World world,ResourceManager rm){
  this.rayHandler=rayHandler;
  this.world=world;
  this.rm=rm;
  nodeComponentMapper=ComponentMapper.getFor(NodeComponent.class);
}","public EntityFactory(RayHandler rayHandler,World world,IResourceRetriever rm){
  this.rayHandler=rayHandler;
  this.world=world;
  this.rm=rm;
  nodeComponentMapper=ComponentMapper.getFor(NodeComponent.class);
}"
8649,"public Entity createEntity(Entity root,CompositeItemVO vo){
  Entity entity=new Entity();
  addCommonComponents(entity,vo);
  addParentComponent(entity,root);
  addPhysicsComponents(entity,vo);
  entity.flags=COMPOSITE_TYPE;
  return entity;
}","public Entity createEntity(Entity root,CompositeItemVO vo){
  Entity entity=new Entity();
  entity.flags=COMPOSITE_TYPE;
  addCommonComponents(entity,vo,vo.composite);
  addParentComponent(entity,root);
  addPhysicsComponents(entity,vo);
  return entity;
}"
8650,"public void setEntity(int i){
  currentEntityIndex=i;
  updateDataVO();
  initPlayer();
}","public void setEntity(int i){
  currentEntityIndex=i;
  setAnimation(0);
  updateDataVO();
  initPlayer();
}"
8651,"@Override public void draw(Batch batch,float parentAlpha){
  batch.setColor(1,1,1,parentAlpha * getColor().a);
  super.draw(batch,parentAlpha);
  player.setPosition(getX(),getY());
  player.setScale(dataVO.scale * this.mulX);
  player.rotate(getRotation() - player.getAngle());
  drawer.beforeDraw(player,batch);
}","@Override public void draw(Batch batch,float parentAlpha){
  batch.setColor(1,1,1,parentAlpha * getColor().a);
  super.draw(batch,parentAlpha);
  player.setPosition(getX(),getY());
  player.setPivot(getWidth() / 2,getHeight() / 2);
  player.setScale(dataVO.scale * this.mulX);
  player.rotate(getRotation() - player.getAngle());
  drawer.beforeDraw(player,batch);
}"
8652,"@Override protected Sprite loadResource(FileReference ref){
  FileHandle f;
  String filename=new File(data.getFile(ref).name).getName();
  String path=super.root + ""String_Node_Str"" + filename;
switch (Gdx.app.getType()) {
case iOS:
    f=Gdx.files.absolute(path);
  break;
default :
f=Gdx.files.internal(path);
break;
}
if (!f.exists()) throw new GdxRuntimeException(""String_Node_Str"" + path + ""String_Node_Str"");
if (this.packer == null && this.pack) this.packer=new PixmapPacker(this.atlasWidth,this.atlasHeight,Pixmap.Format.RGBA8888,2,true);
final Pixmap pix=new Pixmap(f);
this.pixmaps.put(ref,pix);
return null;
}","@Override protected Sprite loadResource(FileReference ref){
  FileHandle f;
  String filename=new File(data.getFile(ref).name).getName();
  String path=super.root + ""String_Node_Str"" + filename;
  System.out.println(path);
switch (Gdx.app.getType()) {
case iOS:
    f=Gdx.files.absolute(path);
  break;
default :
f=Gdx.files.internal(path);
break;
}
if (!f.exists()) throw new GdxRuntimeException(""String_Node_Str"" + path + ""String_Node_Str"");
if (this.packer == null && this.pack) this.packer=new PixmapPacker(this.atlasWidth,this.atlasHeight,Pixmap.Format.RGBA8888,2,true);
final Pixmap pix=new Pixmap(f);
this.pixmaps.put(ref,pix);
return null;
}"
8653,"@Override public void updateDataVO(){
  dataVO.x=getX() / this.mulX;
  dataVO.y=getY() / this.mulY;
  dataVO.rotation=getRotation();
  if (getZIndex() >= 0) {
    dataVO.zIndex=getZIndex();
  }
  if (dataVO.layerName == null || dataVO.layerName.equals(""String_Node_Str"")) {
    dataVO.layerName=""String_Node_Str"";
  }
  for (int i=0; i < items.size(); i++) {
    items.get(i).updateDataVO();
  }
  sortZindexes();
  dataVO.customVars=customVariables.saveAsString();
}","@Override public void updateDataVO(){
  dataVO.x=getX() / this.mulX;
  dataVO.y=getY() / this.mulY;
  dataVO.rotation=getRotation();
  if (getZIndex() >= 0) {
    dataVO.zIndex=getZIndex();
  }
  if (dataVO.layerName == null || dataVO.layerName.equals(""String_Node_Str"")) {
    dataVO.layerName=""String_Node_Str"";
  }
  for (int i=0; i < items.size(); i++) {
    items.get(i).updateDataVO();
  }
  sortZindexes();
  dataVO.scaleX=getScaleX();
  dataVO.scaleY=getScaleY();
  dataVO.customVars=customVariables.saveAsString();
}"
8654,"private void reAssemble(){
  clear();
  if (items != null) {
    for (int i=0; i < items.size(); i++) {
      items.get(i).dispose();
    }
  }
  items.clear();
  for (int i=0; i < dataVO.composite.sImages.size(); i++) {
    SimpleImageVO tmpVo=dataVO.composite.sImages.get(i);
    ImageItem itm=new ImageItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(tmpVo.zIndex);
  }
  for (int i=0; i < dataVO.composite.sImage9patchs.size(); i++) {
    Image9patchVO tmpVo=dataVO.composite.sImage9patchs.get(i);
    Image9patchItem itm=new Image9patchItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(tmpVo.zIndex);
  }
  for (int i=0; i < dataVO.composite.sTextBox.size(); i++) {
    TextBoxVO tmpVo=dataVO.composite.sTextBox.get(i);
    TextBoxItem itm=new TextBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sButtons.size(); i++) {
    ButtonVO tmpVo=dataVO.composite.sButtons.get(i);
    TextButtonItem itm=new TextButtonItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sLabels.size(); i++) {
    LabelVO tmpVo=dataVO.composite.sLabels.get(i);
    LabelItem itm=new LabelItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sCheckBoxes.size(); i++) {
    CheckBoxVO tmpVo=dataVO.composite.sCheckBoxes.get(i);
    CheckBoxItem itm=new CheckBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sSelectBoxes.size(); i++) {
    SelectBoxVO tmpVo=dataVO.composite.sSelectBoxes.get(i);
    SelectBoxItem itm=new SelectBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sComposites.size(); i++) {
    CompositeItemVO tmpVo=dataVO.composite.sComposites.get(i);
    CompositeItem itm=new CompositeItem(tmpVo,essentials,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sParticleEffects.size(); i++) {
    ParticleEffectVO tmpVo=dataVO.composite.sParticleEffects.get(i);
    ParticleItem itm=new ParticleItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  if (essentials.rayHandler != null) {
    for (int i=0; i < dataVO.composite.slights.size(); i++) {
      LightVO tmpVo=dataVO.composite.slights.get(i);
      LightActor itm=new LightActor(tmpVo,essentials,this);
      inventorize(itm);
      addActor(itm);
    }
  }
  for (int i=0; i < dataVO.composite.sSpineAnimations.size(); i++) {
    SpineVO tmpVo=dataVO.composite.sSpineAnimations.get(i);
    SpineActor itm=new SpineActor(tmpVo,essentials,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  if (essentials.spineReflectionHelper != null) {
    for (int i=0; i < dataVO.composite.sSpriteAnimations.size(); i++) {
      SpriteAnimationVO tmpVo=dataVO.composite.sSpriteAnimations.get(i);
      SpriteAnimation itm=new SpriteAnimation(tmpVo,essentials,this);
      inventorize(itm);
      itm.start();
      addActor(itm);
      itm.setZIndex(itm.dataVO.zIndex);
    }
  }
  if (dataVO.composite.layers.size() == 0) {
    LayerItemVO layerVO=new LayerItemVO();
    layerVO.layerName=""String_Node_Str"";
    dataVO.composite.layers.add(layerVO);
  }
  recalculateSize();
  sortZindexes();
  reAssembleLayers();
}","private void reAssemble(){
  clear();
  if (items != null) {
    for (int i=0; i < items.size(); i++) {
      items.get(i).dispose();
    }
  }
  items.clear();
  for (int i=0; i < dataVO.composite.sImages.size(); i++) {
    SimpleImageVO tmpVo=dataVO.composite.sImages.get(i);
    ImageItem itm=new ImageItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(tmpVo.zIndex);
  }
  for (int i=0; i < dataVO.composite.sImage9patchs.size(); i++) {
    Image9patchVO tmpVo=dataVO.composite.sImage9patchs.get(i);
    Image9patchItem itm=new Image9patchItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(tmpVo.zIndex);
  }
  for (int i=0; i < dataVO.composite.sTextBox.size(); i++) {
    TextBoxVO tmpVo=dataVO.composite.sTextBox.get(i);
    TextBoxItem itm=new TextBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sButtons.size(); i++) {
    ButtonVO tmpVo=dataVO.composite.sButtons.get(i);
    TextButtonItem itm=new TextButtonItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sLabels.size(); i++) {
    LabelVO tmpVo=dataVO.composite.sLabels.get(i);
    LabelItem itm=new LabelItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sCheckBoxes.size(); i++) {
    CheckBoxVO tmpVo=dataVO.composite.sCheckBoxes.get(i);
    CheckBoxItem itm=new CheckBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sSelectBoxes.size(); i++) {
    SelectBoxVO tmpVo=dataVO.composite.sSelectBoxes.get(i);
    SelectBoxItem itm=new SelectBoxItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sComposites.size(); i++) {
    CompositeItemVO tmpVo=dataVO.composite.sComposites.get(i);
    CompositeItem itm=new CompositeItem(tmpVo,essentials,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  for (int i=0; i < dataVO.composite.sParticleEffects.size(); i++) {
    ParticleEffectVO tmpVo=dataVO.composite.sParticleEffects.get(i);
    ParticleItem itm=new ParticleItem(tmpVo,essentials.rm,this);
    inventorize(itm);
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  if (essentials.rayHandler != null) {
    for (int i=0; i < dataVO.composite.sLights.size(); i++) {
      LightVO tmpVo=dataVO.composite.sLights.get(i);
      LightActor itm=new LightActor(tmpVo,essentials,this);
      inventorize(itm);
      addActor(itm);
    }
  }
  if (essentials.spineReflectionHelper != null) {
    for (int i=0; i < dataVO.composite.sSpineAnimations.size(); i++) {
      SpineVO tmpVo=dataVO.composite.sSpineAnimations.get(i);
      SpineActor itm=new SpineActor(tmpVo,essentials,this);
      inventorize(itm);
      addActor(itm);
      itm.setZIndex(itm.dataVO.zIndex);
    }
  }
  for (int i=0; i < dataVO.composite.sSpriteAnimations.size(); i++) {
    SpriteAnimationVO tmpVo=dataVO.composite.sSpriteAnimations.get(i);
    SpriteAnimation itm=new SpriteAnimation(tmpVo,essentials,this);
    inventorize(itm);
    itm.start();
    addActor(itm);
    itm.setZIndex(itm.dataVO.zIndex);
  }
  if (dataVO.composite.layers.size() == 0) {
    LayerItemVO layerVO=new LayerItemVO();
    layerVO.layerName=""String_Node_Str"";
    dataVO.composite.layers.add(layerVO);
  }
  recalculateSize();
  sortZindexes();
  reAssembleLayers();
}"
8655,"private void initStage(){
  RayHandler.setGammaCorrection(true);
  RayHandler.useDiffuseLight(true);
  rayHandler=new RayHandler(null);
  rayHandler.setAmbientLight(0.5f,0.5f,0.5f,1f);
  rayHandler.setCulling(true);
  rayHandler.setBlur(true);
  rayHandler.setBlurNum(3);
  rayHandler.setShadows(true);
  rayHandler.setCombinedMatrix(getCamera().combined);
  skeletonRenderer=new SkeletonRenderer();
  essentials.rayHandler=rayHandler;
  SpineReflectionHelper refdata=new SpineReflectionHelper();
  if (refdata.isSpineAviable) {
    essentials.spineReflectionHelper=refdata;
  }
}","private void initStage(){
  RayHandler.setGammaCorrection(true);
  RayHandler.useDiffuseLight(true);
  rayHandler=new RayHandler(null);
  rayHandler.setAmbientLight(0.5f,0.5f,0.5f,1f);
  rayHandler.setCulling(true);
  rayHandler.setBlur(true);
  rayHandler.setBlurNum(3);
  rayHandler.setShadows(true);
  rayHandler.setCombinedMatrix(getCamera().combined);
  essentials.rayHandler=rayHandler;
  SpineReflectionHelper refdata=new SpineReflectionHelper();
  if (refdata.isSpineAviable) {
    essentials.spineReflectionHelper=refdata;
  }
}"
8656,"/** 
 * Set the state of this component to the given value, applying the corresponding animation, if possible.
 * @param checked The component state.
 */
public void setChecked(boolean checked){
  mChecked=checked;
  mViewFlipper.setDisplayedChild(checked ? STATUS_CHECKED : STATUS_NOT_CHECKED);
  if (checked)   mIVAccept.startAnimation(acceptAnimation);
  mOnCheckedChangeListener.onCheckedChanged(this,mChecked);
}","/** 
 * Set the state of this component to the given value, applying the corresponding animation, if possible.
 * @param checked The component state.
 */
public void setChecked(boolean checked){
  mChecked=checked;
  mViewFlipper.setDisplayedChild(checked ? STATUS_CHECKED : STATUS_NOT_CHECKED);
  if (isChecked())   mIVAccept.startAnimation(acceptAnimation);
  mOnCheckedChangeListener.onCheckedChanged(this,isChecked());
}"
8657,"/** 
 * Set the state of this component to the given value, without applying the corresponding animation.
 * @param checked The component state.
 */
public void setCheckedInmediate(boolean checked){
  mChecked=checked;
  if (mViewFlipper.getInAnimation() != null)   mViewFlipper.setInAnimation(null);
  if (mViewFlipper.getOutAnimation() != null)   mViewFlipper.setOutAnimation(null);
  mViewFlipper.setDisplayedChild(checked ? STATUS_CHECKED : STATUS_NOT_CHECKED);
  initInAnimation();
  initOutAnimation();
  mOnCheckedChangeListener.onCheckedChanged(this,mChecked);
}","/** 
 * Set the state of this component to the given value, without applying the corresponding animation, and without firing an event.
 * @param checked The component state.
 */
public void setCheckedInmediate(boolean checked){
  mChecked=checked;
  if (mViewFlipper.getInAnimation() != null)   mViewFlipper.setInAnimation(null);
  if (mViewFlipper.getOutAnimation() != null)   mViewFlipper.setOutAnimation(null);
  mViewFlipper.setDisplayedChild(checked ? STATUS_CHECKED : STATUS_NOT_CHECKED);
  initInAnimation();
  initOutAnimation();
}"
8658,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  pickUpSharedManagerIfExists(config);
  String urlPrefix=config.getInitParameter(URL_PREFIX_INIT_PARAMETER);
  initRequestProcessor(urlPrefix);
  String pluginClasses=config.getInitParameter(PLUGIN_CLASSES_INIT_PARAMETER);
  if (pluginClasses != null) {
    requestProcessor.getPluginManager().addPlugins(pluginClasses);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  pickUpSharedManagerIfExists(config);
  String urlPrefix=config.getInitParameter(URL_PREFIX_INIT_PARAMETER);
  String pluginClasses=config.getInitParameter(PLUGIN_CLASSES_INIT_PARAMETER);
  initRequestProcessor(urlPrefix,pluginClasses);
}"
8659,"public void initRequestProcessor(String urlPrefix){
  if (urlPrefix == null) {
    urlPrefix=""String_Node_Str"";
  }
 else {
    urlPrefix=urlPrefix.trim();
  }
  requestProcessor=new SimonConsoleRequestProcessor(urlPrefix);
  requestProcessor.initActionBindings();
}","public void initRequestProcessor(String urlPrefix,String pluginClasses){
  if (urlPrefix == null) {
    urlPrefix=""String_Node_Str"";
  }
 else {
    urlPrefix=urlPrefix.trim();
  }
  requestProcessor=new SimonConsoleRequestProcessor(urlPrefix);
  if (pluginClasses != null) {
    requestProcessor.getPluginManager().addPlugins(pluginClasses);
  }
  requestProcessor.initActionBindings();
}"
8660,"@Override public void execute() throws ServletException, IOException, ActionException {
  InputStream resourceIStream=null;
  try {
    resourceIStream=getClass().getResourceAsStream(""String_Node_Str"" + resourcePath);
    if (resourceIStream == null) {
      getContext().getResponse().sendError(HttpServletResponse.SC_NOT_FOUND);
      throw new ActionException(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
    }
    String extension=resourcePath.substring(resourcePath.lastIndexOf('.') + 1).toLowerCase();
    String contentType=CONTENT_TYPES.get(extension);
    if (contentType != null) {
      getContext().setContentType(contentType);
      if (contentType.startsWith(""String_Node_Str"")) {
        getContext().getResponse().setCharacterEncoding(""String_Node_Str"");
      }
    }
    getContext().getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
    copyStream(resourceIStream);
  }
  finally {
    if (resourceIStream != null) {
      resourceIStream.close();
    }
  }
}","@Override public void execute() throws ServletException, IOException, ActionException {
  InputStream resourceIStream=null;
  try {
    resourceIStream=getClass().getResourceAsStream(""String_Node_Str"" + resourcePath);
    if (resourceIStream == null) {
      getContext().getResponse().setStatus(HttpServletResponse.SC_NOT_FOUND);
      throw new ActionException(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
    }
    String extension=resourcePath.substring(resourcePath.lastIndexOf('.') + 1).toLowerCase();
    String contentType=CONTENT_TYPES.get(extension);
    if (contentType != null) {
      getContext().setContentType(contentType);
      if (contentType.startsWith(""String_Node_Str"")) {
        getContext().getResponse().setCharacterEncoding(""String_Node_Str"");
      }
    }
    getContext().getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
    copyStream(resourceIStream);
  }
  finally {
    if (resourceIStream != null) {
      resourceIStream.close();
    }
  }
}"
8661,"/** 
 * Factory method that creates Stopwatch name pattern - or returns   {@code null} if parameter is {@code null}.
 * @param pattern Stopwatch name pattern as string
 * @return Stopwatch name pattern or {@code null} if pattern parameter is {@code null}
 */
public static SimonPattern createForStopwatch(String pattern){
  return createForType(pattern,Stopwatch.class);
}","/** 
 * Factory method that creates Stopwatch name pattern - or returns a pattern that accepts all Stopwatches if parameter is   {@code null}.
 * @param pattern Stopwatch name pattern as string
 * @return Stopwatch name pattern
 */
public static SimonPattern createForStopwatch(String pattern){
  return createForType(pattern,Stopwatch.class);
}"
8662,"/** 
 * Factory method that creates Simon name pattern - or returns   {@code null} if parameter is {@code null}.
 * @param pattern Simon name pattern as string
 * @return Simon name pattern or {@code null} if pattern parameter is {@code null}
 */
public static SimonPattern create(String pattern){
  return createForType(pattern,Simon.class);
}","/** 
 * Factory method that creates Simon name pattern - or returns   {@code null} if parameter is {@code null}.
 * @param pattern Simon name pattern as string
 * @return Simon name pattern or {@code null} if pattern parameter is {@code null}
 */
public static SimonPattern create(String pattern){
  if (pattern == null) {
    return null;
  }
  return createForType(pattern,Simon.class);
}"
8663,"/** 
 * Factory method that creates Counter name pattern - or returns   {@code null} if parameter is {@code null}.
 * @param pattern Counter name pattern as string
 * @return Counter name pattern or {@code null} if pattern parameter is {@code null}
 */
public static SimonPattern createForCounter(String pattern){
  return createForType(pattern,Counter.class);
}","/** 
 * Factory method that creates Counter name pattern - or returns a pattern that accepts all Counters if parameter is   {@code null}.
 * @param pattern Counter name pattern as string
 * @return Counter name pattern
 */
public static SimonPattern createForCounter(String pattern){
  return createForType(pattern,Counter.class);
}"
8664,"private static SimonPattern createForType(String pattern,Class<? extends Simon> expectedType){
  if (pattern == null) {
    return null;
  }
  return new SimonPattern(pattern,expectedType);
}","private static SimonPattern createForType(String pattern,Class<? extends Simon> expectedType){
  if (pattern == null) {
    return new SimonPattern(""String_Node_Str"",expectedType);
  }
  return new SimonPattern(pattern,expectedType);
}"
8665,"protected String getParameter(String name){
  return getRequest().getParameter(name);
}","protected String getParameter(String name){
  String value=getRequest().getParameter(name);
  if (value != null) {
    try {
      value=URLDecoder.decode(value,getCharacterEncoding());
    }
 catch (    UnsupportedEncodingException unsupportedEncodingException) {
    }
  }
  return value;
}"
8666,"/** 
 * Add basic simons A, B, C and X. X is used to test Counter rendering
 */
private void addDefaultSimons(){
  SimonData.initialize();
}","/** 
 * Add basic simons A, B, C and X. X is used to test Counter rendering
 */
private void addDefaultSimons(){
  SimonData.initialize();
  addStopwatchSplits(SimonManager.getStopwatch(""String_Node_Str""),5);
}"
8667,"@Override public void execute() throws ServletException, IOException, ActionException {
  if (name == null) {
    throw new ActionException(""String_Node_Str"");
  }
  Simon simon=getContext().getManager().getSimon(name);
  if (simon == null) {
    throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  getContext().setContentType(""String_Node_Str"");
  SimonType simonType=SimonTypeFactory.getValueFromInstance(simon);
  DetailHtmlBuilder htmlBuilder=new DetailHtmlBuilder(getContext().getWriter(),stringifierFactory);
  htmlBuilder.header(""String_Node_Str"",DetailPlugin.getResources(getContext(),DetailPlugin.class)).beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().labelCell(""String_Node_Str"").beginValueCell().simonTypeImg(simonType,""String_Node_Str"").object(simonType).endValueCell().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
switch (simonType) {
case STOPWATCH:
    htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
  break;
case COUNTER:
htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
break;
}
for (DetailPlugin plugin : getContext().getPluginManager().getPluginsByType(DetailPlugin.class)) {
if (plugin.supports(simon)) {
htmlBuilder.beginSection(plugin.getId() + ""String_Node_Str"",plugin.getLabel());
plugin.executeHtml(getContext(),htmlBuilder,stringifierFactory,simon);
htmlBuilder.endSection();
}
}
htmlBuilder.footer();
}","@Override public void execute() throws ServletException, IOException, ActionException {
  if (name == null) {
    throw new ActionException(""String_Node_Str"");
  }
  Simon simon=getContext().getManager().getSimon(name);
  if (simon == null) {
    throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  getContext().setContentType(""String_Node_Str"");
  SimonType simonType=SimonTypeFactory.getValueFromInstance(simon);
  DetailHtmlBuilder htmlBuilder=new DetailHtmlBuilder(getContext().getWriter(),stringifierFactory);
  htmlBuilder.header(""String_Node_Str"",DetailPlugin.getResources(getContext(),DetailPlugin.class)).beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().labelCell(""String_Node_Str"").beginValueCell().simonTypeImg(simonType,""String_Node_Str"").object(simonType).endValueCell().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
switch (simonType) {
case STOPWATCH:
    htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
  break;
case COUNTER:
htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
break;
}
for (DetailPlugin plugin : getContext().getPluginManager().getPluginsByType(DetailPlugin.class)) {
if (plugin.supports(simon)) {
htmlBuilder.beginSection(plugin.getId() + ""String_Node_Str"",plugin.getLabel());
plugin.executeHtml(getContext(),htmlBuilder,stringifierFactory,simon);
htmlBuilder.endSection();
}
}
htmlBuilder.footer();
}"
8668,"/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    InputStream stream=null;
    try {
      stream=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
      drivers.load(stream);
    }
  finally {
      if (stream != null) {
        stream.close();
      }
    }
  }
 catch (  IOException e) {
  }
}","/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
}"
8669,"/** 
 * {@inheritDoc}
 */
@Override public boolean acceptsURL(String url) throws SQLException {
  return url != null && url.toLowerCase().startsWith(Url.SIMON_JDBC);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean acceptsURL(String url) throws SQLException {
  return SimonConnectionConfiguration.isSimonUrl(url);
}"
8670,"/** 
 * Returns fully qualified class name of the real driver.
 * @return driver class FQN
 */
public String getRealDriver(){
  return realDriver;
}","/** 
 * Tries to determine driver class, instantiate it and register if already not registered. For more detail look at   {@link org.javasimon.jdbc4.Driver} class javadoc.
 * @param configuration instance of url object that represents url
 * @param info parameters from {@link #connect(String,java.util.Properties)} method
 * @return instance of real driver
 * @throws java.sql.SQLException if real driver can't be determined or is not registerd
 */
private java.sql.Driver getRealDriver(SimonConnectionConfiguration configuration,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(configuration.getRealUrl());
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(SimonConnectionConfiguration.REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(SimonConnectionConfiguration.REAL_DRIVER));
  }
  if (drv == null && configuration.getRealDriver() != null) {
    drv=registerDriver(configuration.getRealDriver());
  }
  if (drv == null) {
    if (configuration.getRealDriver() != null) {
      drv=registerDriver(configuration.getRealDriver());
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}"
8671,"/** 
 * Opens new Simon proxy driver connection associated with real connection to the specified database.
 * @param simonUrl JDBC connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws java.sql.SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc4.Driver
 */
@Override public Connection connect(String simonUrl,Properties info) throws SQLException {
  if (!acceptsURL(simonUrl)) {
    return null;
  }
  Url url=new Url(simonUrl);
  java.sql.Driver driver=getRealDriver(url,info);
  return new SimonConnection(driver.connect(url.getRealUrl(),info),url.getPrefix());
}","/** 
 * Opens new Simon proxy driver connection associated with real connection to the specified database.
 * @param simonUrl JDBC connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws java.sql.SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc4.Driver
 */
@Override public Connection connect(String simonUrl,Properties info) throws SQLException {
  if (!acceptsURL(simonUrl)) {
    return null;
  }
  SimonConnectionConfiguration url=new SimonConnectionConfiguration(simonUrl);
  java.sql.Driver driver=getRealDriver(url,info);
  return new SimonConnection(driver.connect(url.getRealUrl(),info),url.getPrefix());
}"
8672,"@Override public void execute() throws ServletException, IOException, ActionException {
  if (name == null) {
    throw new ActionException(""String_Node_Str"");
  }
  Simon simon=getContext().getManager().getSimon(name);
  if (simon == null) {
    throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  getContext().setContentType(""String_Node_Str"");
  SimonType simonType=SimonTypeFactory.getValueFromInstance(simon);
  DetailHtmlBuilder htmlBuilder=new DetailHtmlBuilder(getContext().getWriter(),stringifierFactory);
  htmlBuilder.header(""String_Node_Str"",DetailPlugin.getResources(getContext(),DetailPlugin.class)).beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().labelCell(""String_Node_Str"").beginValueCell().simonTypeImg(simonType,""String_Node_Str"").object(simonType).endValueCell().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
switch (simonType) {
case STOPWATCH:
    htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
  break;
case COUNTER:
htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
break;
}
for (DetailPlugin plugin : getContext().getPluginManager().getPluginsByType(DetailPlugin.class)) {
if (plugin.supports(simon)) {
htmlBuilder.beginSection(plugin.getId() + ""String_Node_Str"",plugin.getLabel());
plugin.executeHtml(getContext(),htmlBuilder,stringifierFactory,simon);
htmlBuilder.endSection();
}
}
htmlBuilder.footer();
}","@Override public void execute() throws ServletException, IOException, ActionException {
  if (name == null) {
    throw new ActionException(""String_Node_Str"");
  }
  Simon simon=getContext().getManager().getSimon(name);
  if (simon == null) {
    throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  getContext().setContentType(""String_Node_Str"");
  SimonType simonType=SimonTypeFactory.getValueFromInstance(simon);
  DetailHtmlBuilder htmlBuilder=new DetailHtmlBuilder(getContext().getWriter(),stringifierFactory);
  htmlBuilder.header(""String_Node_Str"",DetailPlugin.getResources(getContext(),DetailPlugin.class)).beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().labelCell(""String_Node_Str"").beginValueCell().simonTypeImg(simonType,""String_Node_Str"").object(simonType).endValueCell().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",5).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
switch (simonType) {
case STOPWATCH:
    htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"",3).simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
  break;
case COUNTER:
htmlBuilder.beginSection(""String_Node_Str"",""String_Node_Str"").beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().beginRow().simonProperty(simon,""String_Node_Str"",""String_Node_Str"").simonProperty(simon,""String_Node_Str"",""String_Node_Str"").endRow().endSection();
break;
}
for (DetailPlugin plugin : getContext().getPluginManager().getPluginsByType(DetailPlugin.class)) {
if (plugin.supports(simon)) {
htmlBuilder.beginSection(plugin.getId() + ""String_Node_Str"",plugin.getLabel());
plugin.executeHtml(getContext(),htmlBuilder,stringifierFactory,simon);
htmlBuilder.endSection();
}
}
htmlBuilder.footer();
}"
8673,"/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    InputStream stream=null;
    try {
      stream=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
      drivers.load(stream);
    }
  finally {
      if (stream != null) {
        stream.close();
      }
    }
  }
 catch (  IOException e) {
  }
}","/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
}"
8674,"/** 
 * {@inheritDoc}
 */
@Override public boolean acceptsURL(String url) throws SQLException {
  return url != null && url.toLowerCase().startsWith(Url.SIMON_JDBC);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean acceptsURL(String url) throws SQLException {
  return SimonConnectionConfiguration.isSimonUrl(url);
}"
8675,"/** 
 * Returns fully qualified class name of the real driver.
 * @return driver class FQN
 */
public String getRealDriver(){
  return realDriver;
}","/** 
 * Tries to determine driver class, instantiate it and register if already not registered. For more detail look at   {@link org.javasimon.jdbc4.Driver} class javadoc.
 * @param configuration instance of url object that represents url
 * @param info parameters from {@link #connect(String,java.util.Properties)} method
 * @return instance of real driver
 * @throws java.sql.SQLException if real driver can't be determined or is not registerd
 */
private java.sql.Driver getRealDriver(SimonConnectionConfiguration configuration,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(configuration.getRealUrl());
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(SimonConnectionConfiguration.REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(SimonConnectionConfiguration.REAL_DRIVER));
  }
  if (drv == null && configuration.getRealDriver() != null) {
    drv=registerDriver(configuration.getRealDriver());
  }
  if (drv == null) {
    if (configuration.getRealDriver() != null) {
      drv=registerDriver(configuration.getRealDriver());
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}"
8676,"/** 
 * Opens new Simon proxy driver connection associated with real connection to the specified database.
 * @param simonUrl JDBC connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws java.sql.SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc4.Driver
 */
@Override public Connection connect(String simonUrl,Properties info) throws SQLException {
  if (!acceptsURL(simonUrl)) {
    return null;
  }
  Url url=new Url(simonUrl);
  java.sql.Driver driver=getRealDriver(url,info);
  return new SimonConnection(driver.connect(url.getRealUrl(),info),url.getPrefix());
}","/** 
 * Opens new Simon proxy driver connection associated with real connection to the specified database.
 * @param simonUrl JDBC connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws java.sql.SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc4.Driver
 */
@Override public Connection connect(String simonUrl,Properties info) throws SQLException {
  if (!acceptsURL(simonUrl)) {
    return null;
  }
  SimonConnectionConfiguration url=new SimonConnectionConfiguration(simonUrl);
  java.sql.Driver driver=getRealDriver(url,info);
  return new SimonConnection(driver.connect(url.getRealUrl(),info),url.getPrefix());
}"
8677,"private Simon getOrCreateSimon(String name,Class<? extends AbstractSimon> simonClass){
  if (name == null) {
    return newSimon(null,simonClass);
  }
  if (name.equals(ROOT_SIMON_NAME)) {
    throw new SimonException(""String_Node_Str"");
  }
  AbstractSimon simon=allSimons.get(name);
  if (simon != null && simonClass.isInstance(simon)) {
    return simon;
  }
  return createOrReplaceUnknownSimon(name,simonClass);
}","private Simon getOrCreateSimon(String name,Class<? extends AbstractSimon> simonClass){
  if (name == null) {
    return instantiateSimon(null,simonClass);
  }
  if (name.equals(ROOT_SIMON_NAME)) {
    throw new SimonException(""String_Node_Str"");
  }
  AbstractSimon simon=allSimons.get(name);
  if (simon != null && simonClass.isInstance(simon)) {
    return simon;
  }
  return createOrReplaceUnknownSimon(name,simonClass);
}"
8678,"private void addToHierarchy(AbstractSimon simon,String name){
  allSimons.put(name,simon);
  int ix=name.lastIndexOf(HIERARCHY_DELIMITER);
  AbstractSimon parent=rootSimon;
  if (ix != -1) {
    String parentName=name.substring(0,ix);
    parent=allSimons.get(parentName);
    if (parent == null) {
      parent=new UnknownSimon(parentName,this);
      addToHierarchy(parent,parentName);
    }
  }
  parent.addChild(simon);
}","private void addToHierarchy(AbstractSimon simon,String name){
  int ix=name.lastIndexOf(HIERARCHY_DELIMITER);
  AbstractSimon parent=rootSimon;
  if (ix != -1) {
    String parentName=name.substring(0,ix);
    parent=allSimons.get(parentName);
    if (parent == null) {
      parent=new UnknownSimon(parentName,this);
      addToHierarchy(parent,parentName);
    }
  }
  parent.addChild(simon);
  allSimons.put(name,simon);
}"
8679,"/** 
 * Entry point to the Aggregation Example.
 * @param args unused
 */
public static void main(String[] args){
  for (int i=0; i < ITERATIONS; i++) {
    Split split=SimonManager.getStopwatch(STOPWATCH_PARENT + Manager.HIERARCHY_DELIMITER + random.nextInt(STOPWATCH_COUNT)).start();
    try {
      Thread.sleep(random.nextInt(ITERATION_MS_MAX));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    split.stop();
  }
  Simon parent=SimonManager.getSimon(STOPWATCH_PARENT);
  List<Simon> children=parent.getChildren();
  System.out.println(""String_Node_Str"" + children.size());
  long totalSum=0;
  for (  Simon child : children) {
    System.out.println(child);
    totalSum+=((Stopwatch)child).getTotal();
  }
  System.out.println(""String_Node_Str"" + SimonUtils.presentNanoTime(totalSum));
}","/** 
 * Entry point to the Aggregation Example.
 * @param args unused
 */
public static void main(String[] args){
  for (int i=0; i < ITERATIONS; i++) {
    Split split=SimonManager.getStopwatch(STOPWATCH_PARENT + Manager.HIERARCHY_DELIMITER + random.nextInt(STOPWATCH_COUNT)).start();
    ExampleUtils.waitRandomlySquared(30);
    split.stop();
  }
  Simon parent=SimonManager.getSimon(STOPWATCH_PARENT);
  List<Simon> children=parent.getChildren();
  System.out.println(""String_Node_Str"" + children.size());
  long totalSum=0;
  for (  Simon child : children) {
    System.out.println(child);
    totalSum+=((Stopwatch)child).getTotal();
  }
  System.out.println(""String_Node_Str"" + SimonUtils.presentNanoTime(totalSum));
}"
8680,"/** 
 * Entry point to the Example.
 * @param args unused
 */
public static void main(String[] args){
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  for (int i=1; i <= 10; i++) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomly(50);
    split.stop();
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ stopwatch);
  }
  System.out.println(""String_Node_Str"" + stopwatch.sample());
}","/** 
 * Entry point to the Example.
 * @param args unused
 */
public static void main(String[] args){
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  for (int i=1; i <= 10; i++) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomlySquared(50);
    split.stop();
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ stopwatch);
  }
  System.out.println(""String_Node_Str"" + stopwatch.sample());
}"
8681,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 * @throws InterruptedException when sleep is interrupted
 */
public static void main(String[] args) throws InterruptedException {
  for (int i=0; i < THREADS; i++) {
    new MultithreadedSleeping().start();
  }
  latch.await();
  System.out.println(""String_Node_Str"" + SimonManager.getStopwatch(NAME));
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 * @throws InterruptedException when sleep is interrupted
 */
public static void main(String[] args) throws InterruptedException {
  System.out.println(""String_Node_Str"" + THREADS + ""String_Node_Str"");
  Split realTimeSplit=new Split();
  for (int i=0; i < THREADS; i++) {
    new MultithreadedSleeping().start();
  }
  latch.await();
  System.out.println(""String_Node_Str"" + SimonManager.getStopwatch(NAME));
  System.out.println(""String_Node_Str"" + realTimeSplit.stop());
}"
8682,"/** 
 * Run method implementing the code performed by the thread.
 */
@Override public void run(){
  Split split=SimonManager.getStopwatch(NAME).start();
  try {
    sleep(SLEEP);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  split.stop();
  latch.countDown();
}","/** 
 * Run method implementing the code performed by the thread.
 */
@Override public void run(){
  Stopwatch stopwatch=SimonManager.getStopwatch(NAME);
  Split split=stopwatch.start();
  try {
    sleep(SLEEP);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  split.stop();
  latch.countDown();
}"
8683,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  Sampler sampler=new Sampler();
  sampler.setDaemon(true);
  sampler.start();
  while (true) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomly(50);
    split.stop();
  }
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  Sampler sampler=new Sampler();
  sampler.setDaemon(true);
  sampler.start();
  while (true) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomlySquared(50);
    split.stop();
  }
}"
8684,"/** 
 * Entry point to the JMX Callback Example.
 * @param args unused
 * @throws Exception whatever may happen in this crazy world
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  SimonManager.callback().addCallback(new JmxRegisterCallback(""String_Node_Str""));
  Counter counter=SimonManager.getCounter(""String_Node_Str"");
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getCounter(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  while (true) {
    counter.increase();
    Split split=stopwatch.start();
    ExampleUtils.waitRandomly(40);
    split.stop();
  }
}","/** 
 * Entry point to the JMX Callback Example.
 * @param args unused
 * @throws Exception whatever may happen in this crazy world
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  SimonManager.callback().addCallback(new JmxRegisterCallback(""String_Node_Str""));
  Counter counter=SimonManager.getCounter(""String_Node_Str"");
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getCounter(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  while (true) {
    counter.increase();
    Split split=stopwatch.start();
    ExampleUtils.waitRandomlySquared(40);
    split.stop();
  }
}"
8685,"@SuppressWarnings(""String_Node_Str"") @Override protected boolean shouldBeAddedStopwatchInfo(StopwatchInfo info){
  if (isJdbcResultSetNextSimon(info)) {
    return false;
  }
  return true;
}","@Override protected boolean shouldBeAddedStopwatchInfo(StopwatchInfo info){
  return !(isJdbcResultSetNextSimon(info));
}"
8686,"private Simon getOrCreateSimon(String name,Class<? extends AbstractSimon> simonClass){
  if (name == null) {
    return newSimon(null,simonClass);
  }
  if (name.equals(ROOT_SIMON_NAME)) {
    throw new SimonException(""String_Node_Str"");
  }
  AbstractSimon simon=allSimons.get(name);
  if (simon != null && simonClass.isInstance(simon)) {
    return simon;
  }
  return createOrReplaceUnknownSimon(name,simonClass);
}","private Simon getOrCreateSimon(String name,Class<? extends AbstractSimon> simonClass){
  if (name == null) {
    return instantiateSimon(null,simonClass);
  }
  if (name.equals(ROOT_SIMON_NAME)) {
    throw new SimonException(""String_Node_Str"");
  }
  AbstractSimon simon=allSimons.get(name);
  if (simon != null && simonClass.isInstance(simon)) {
    return simon;
  }
  return createOrReplaceUnknownSimon(name,simonClass);
}"
8687,"private void addToHierarchy(AbstractSimon simon,String name){
  allSimons.put(name,simon);
  int ix=name.lastIndexOf(HIERARCHY_DELIMITER);
  AbstractSimon parent=rootSimon;
  if (ix != -1) {
    String parentName=name.substring(0,ix);
    parent=allSimons.get(parentName);
    if (parent == null) {
      parent=new UnknownSimon(parentName,this);
      addToHierarchy(parent,parentName);
    }
  }
  parent.addChild(simon);
}","private void addToHierarchy(AbstractSimon simon,String name){
  int ix=name.lastIndexOf(HIERARCHY_DELIMITER);
  AbstractSimon parent=rootSimon;
  if (ix != -1) {
    String parentName=name.substring(0,ix);
    parent=allSimons.get(parentName);
    if (parent == null) {
      parent=new UnknownSimon(parentName,this);
      addToHierarchy(parent,parentName);
    }
  }
  parent.addChild(simon);
  allSimons.put(name,simon);
}"
8688,"/** 
 * Entry point to the Aggregation Example.
 * @param args unused
 */
public static void main(String[] args){
  for (int i=0; i < ITERATIONS; i++) {
    Split split=SimonManager.getStopwatch(STOPWATCH_PARENT + Manager.HIERARCHY_DELIMITER + random.nextInt(STOPWATCH_COUNT)).start();
    try {
      Thread.sleep(random.nextInt(ITERATION_MS_MAX));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    split.stop();
  }
  Simon parent=SimonManager.getSimon(STOPWATCH_PARENT);
  List<Simon> children=parent.getChildren();
  System.out.println(""String_Node_Str"" + children.size());
  long totalSum=0;
  for (  Simon child : children) {
    System.out.println(child);
    totalSum+=((Stopwatch)child).getTotal();
  }
  System.out.println(""String_Node_Str"" + SimonUtils.presentNanoTime(totalSum));
}","/** 
 * Entry point to the Aggregation Example.
 * @param args unused
 */
public static void main(String[] args){
  for (int i=0; i < ITERATIONS; i++) {
    Split split=SimonManager.getStopwatch(STOPWATCH_PARENT + Manager.HIERARCHY_DELIMITER + random.nextInt(STOPWATCH_COUNT)).start();
    ExampleUtils.waitRandomlySquared(30);
    split.stop();
  }
  Simon parent=SimonManager.getSimon(STOPWATCH_PARENT);
  List<Simon> children=parent.getChildren();
  System.out.println(""String_Node_Str"" + children.size());
  long totalSum=0;
  for (  Simon child : children) {
    System.out.println(child);
    totalSum+=((Stopwatch)child).getTotal();
  }
  System.out.println(""String_Node_Str"" + SimonUtils.presentNanoTime(totalSum));
}"
8689,"/** 
 * Entry point to the Example.
 * @param args unused
 */
public static void main(String[] args){
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  for (int i=1; i <= 10; i++) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomly(50);
    split.stop();
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ stopwatch);
  }
  System.out.println(""String_Node_Str"" + stopwatch.sample());
}","/** 
 * Entry point to the Example.
 * @param args unused
 */
public static void main(String[] args){
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  for (int i=1; i <= 10; i++) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomlySquared(50);
    split.stop();
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ stopwatch);
  }
  System.out.println(""String_Node_Str"" + stopwatch.sample());
}"
8690,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 * @throws InterruptedException when sleep is interrupted
 */
public static void main(String[] args) throws InterruptedException {
  for (int i=0; i < THREADS; i++) {
    new MultithreadedSleeping().start();
  }
  latch.await();
  System.out.println(""String_Node_Str"" + SimonManager.getStopwatch(NAME));
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 * @throws InterruptedException when sleep is interrupted
 */
public static void main(String[] args) throws InterruptedException {
  System.out.println(""String_Node_Str"" + THREADS + ""String_Node_Str"");
  Split realTimeSplit=new Split();
  for (int i=0; i < THREADS; i++) {
    new MultithreadedSleeping().start();
  }
  latch.await();
  System.out.println(""String_Node_Str"" + SimonManager.getStopwatch(NAME));
  System.out.println(""String_Node_Str"" + realTimeSplit.stop());
}"
8691,"/** 
 * Run method implementing the code performed by the thread.
 */
@Override public void run(){
  Split split=SimonManager.getStopwatch(NAME).start();
  try {
    sleep(SLEEP);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  split.stop();
  latch.countDown();
}","/** 
 * Run method implementing the code performed by the thread.
 */
@Override public void run(){
  Stopwatch stopwatch=SimonManager.getStopwatch(NAME);
  Split split=stopwatch.start();
  try {
    sleep(SLEEP);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  split.stop();
  latch.countDown();
}"
8692,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  Sampler sampler=new Sampler();
  sampler.setDaemon(true);
  sampler.start();
  while (true) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomly(50);
    split.stop();
  }
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  Sampler sampler=new Sampler();
  sampler.setDaemon(true);
  sampler.start();
  while (true) {
    Split split=SimonManager.getStopwatch(""String_Node_Str"").start();
    ExampleUtils.waitRandomlySquared(50);
    split.stop();
  }
}"
8693,"/** 
 * Entry point to the JMX Callback Example.
 * @param args unused
 * @throws Exception whatever may happen in this crazy world
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  SimonManager.callback().addCallback(new JmxRegisterCallback(""String_Node_Str""));
  Counter counter=SimonManager.getCounter(""String_Node_Str"");
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getCounter(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  while (true) {
    counter.increase();
    Split split=stopwatch.start();
    ExampleUtils.waitRandomly(40);
    split.stop();
  }
}","/** 
 * Entry point to the JMX Callback Example.
 * @param args unused
 * @throws Exception whatever may happen in this crazy world
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  SimonManager.callback().addCallback(new JmxRegisterCallback(""String_Node_Str""));
  Counter counter=SimonManager.getCounter(""String_Node_Str"");
  Stopwatch stopwatch=SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getCounter(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  SimonManager.getStopwatch(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  while (true) {
    counter.increase();
    Split split=stopwatch.start();
    ExampleUtils.waitRandomlySquared(40);
    split.stop();
  }
}"
8694,"@SuppressWarnings(""String_Node_Str"") @Override protected boolean shouldBeAddedStopwatchInfo(StopwatchInfo info){
  if (isJdbcResultSetNextSimon(info)) {
    return false;
  }
  return true;
}","@Override protected boolean shouldBeAddedStopwatchInfo(StopwatchInfo info){
  return !(isJdbcResultSetNextSimon(info));
}"
8695,"/** 
 * Get the main interface of the type
 * @param type Implementation class
 * @return Main interface class
 */
public static Class normalizeType(Class type){
  SimonType simonType=SimonTypeFactory.getValueFromType(type);
  Class normalizedType;
  if (simonType == null) {
    simonType=SimonTypeFactory.getValueFromSampleType(type);
    if (simonType == null) {
      normalizedType=null;
    }
 else {
      normalizedType=simonType.getSampleType();
    }
  }
 else {
    normalizedType=simonType.getType();
  }
  return normalizedType;
}","/** 
 * Get the main interface of the type
 * @param type Implementation class
 * @return Main interface class
 */
public static Class normalizeType(Class type){
  SimonType simonType=SimonTypeFactory.getValueFromType(type);
  Class normalizedType;
  if (simonType == null) {
    simonType=SimonTypeFactory.getValueFromSampleType(type);
    if (simonType == null) {
      normalizedType=type;
    }
 else {
      normalizedType=simonType.getSampleType();
    }
  }
 else {
    normalizedType=simonType.getType();
  }
  return normalizedType;
}"
8696,"/** 
 * Get the main interface of the type
 * @param type Implementation class
 * @return Main interface class
 */
public static Class normalizeType(Class type){
  SimonType simonType=SimonTypeFactory.getValueFromType(type);
  Class normalizedType;
  if (simonType == null) {
    simonType=SimonTypeFactory.getValueFromSampleType(type);
    if (simonType == null) {
      normalizedType=null;
    }
 else {
      normalizedType=simonType.getSampleType();
    }
  }
 else {
    normalizedType=simonType.getType();
  }
  return normalizedType;
}","/** 
 * Get the main interface of the type
 * @param type Implementation class
 * @return Main interface class
 */
public static Class normalizeType(Class type){
  SimonType simonType=SimonTypeFactory.getValueFromType(type);
  Class normalizedType;
  if (simonType == null) {
    simonType=SimonTypeFactory.getValueFromSampleType(type);
    if (simonType == null) {
      normalizedType=type;
    }
 else {
      normalizedType=simonType.getSampleType();
    }
  }
 else {
    normalizedType=simonType.getType();
  }
  return normalizedType;
}"
8697,"@Override protected boolean isValid(Double object){
  return super.isValid(object) && object >= 0D;
}","@Override protected boolean isValid(Double object){
  return super.isValid(object) && object >= 0D && object < Double.MAX_VALUE && object != Double.NaN;
}"
8698,"/** 
 * Warning and stack trace are print out to the error output. Either cause or warning (or both) should be provided otherwise the method does nothing. <p/>  {@inheritDoc}
 */
@Override public void onManagerWarning(String warning,Exception cause){
  if (warning != null) {
    System.err.println(""String_Node_Str"" + warning);
  }
  if (cause != null) {
    cause.printStackTrace();
  }
}","/** 
 * Warning and stack trace are print out to the error output. Either cause or warning (or both) should be provided otherwise the method does nothing. <p/>  {@inheritDoc}
 */
@Override public void onManagerWarning(String warning,Exception cause){
  if (warning != null) {
    System.err.println(DEBUG_PREFIX + ""String_Node_Str"" + warning);
  }
  if (cause != null) {
    System.err.print(DEBUG_PREFIX);
    cause.printStackTrace();
  }
}"
8699,"@Override public void onStopwatchStop(Split split,StopwatchSample sample){
  System.out.println(""String_Node_Str"" + split + ""String_Node_Str""+ sample.stopwatchToString());
}","@Override public void onStopwatchStop(Split split,StopwatchSample sample){
  out(""String_Node_Str"" + split + ""String_Node_Str""+ sample.stopwatchToString());
}"
8700,"@Override public void onSimonReset(Simon simon){
  System.out.println(""String_Node_Str"" + simon);
}","@Override public void onSimonReset(Simon simon){
  out(""String_Node_Str"" + simon);
}"
8701,"private Stopwatch getStopwatch(){
  return SimonManager.getStopwatch(getClass().getName() + ""String_Node_Str"");
}","private Stopwatch getStopwatch(){
  return manager.getStopwatch(getClass().getName() + ""String_Node_Str"");
}"
8702,"@BeforeClass public static void addCallcack(){
  SimonManager.manager().callback().addCallback(lastSplitsCallback);
}","@BeforeClass public void addCallcack(){
  manager.callback().addCallback(lastSplitsCallback);
}"
8703,"/** 
 * Get request parameter as a String
 * @param name Parameter name
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public String getParameterAsString(String name,String defaultValue){
  String value=getParameter(name);
  if (value != null) {
    value=value.trim();
    if (value.equals(""String_Node_Str"")) {
      value=null;
    }
  }
  if (value == null) {
    value=defaultValue;
  }
  return value;
}","/** 
 * Get request parameter as a String
 * @param name Parameter name
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public String getParameterAsString(String name,String defaultValue){
  return defaultValue(blankToNull(getParameter(name)),defaultValue);
}"
8704,"/** 
 * Get request parameter as a Enum
 * @param name Parameter name
 * @param type Enum type
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public <T extends Enum<T>>T getParameterAsEnum(String name,Class<T> type,T defaultValue){
  String value=getParameterAsString(name,null);
  return (value == null) ? defaultValue : Enum.valueOf(type,value.toUpperCase());
}","/** 
 * Get request parameter as a Enum
 * @param name Parameter name
 * @param type Enum type
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public <T extends Enum<T>>T getParameterAsEnum(String name,Class<T> type,T defaultValue){
  return defaultValue(stringToEnum(blankToNull(getParameter(name)),type),defaultValue);
}"
8705,"/** 
 * Visit simons as a list. Calls   {@link Manager#getSimons(org.javasimon.SimonPattern)} methodthen Simons are sorted by name and filtered by type finally the visitor is called on each of them.
 * @param manager Simon manager
 * @param pattern Pattern
 * @param type Type
 * @param visitor Visitor
 * @throws IOException
 */
public static void visitList(Manager manager,String pattern,SimonType type,SimonVisitor visitor) throws IOException {
  List<Simon> simons=new ArrayList<Simon>(manager.getSimons(SimonPattern.create(pattern)));
  Collections.sort(simons,new Comparator<Simon>(){
    public int compare(    Simon s1,    Simon s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
);
  for (  Simon simon : simons) {
    SimonType lType=SimonType.getValueFromInstance(simon);
    if (type == null || type == lType) {
      visitor.visit(simon);
    }
  }
}","/** 
 * Visit simons as a list. Calls   {@link Manager#getSimons(org.javasimon.SimonPattern)} methodthen Simons are sorted by name and filtered by type finally the visitor is called on each of them.
 * @param manager Simon manager
 * @param pattern Pattern
 * @param type Type
 * @param visitor Visitor
 * @throws IOException
 */
public static void visitList(Manager manager,String pattern,Set<SimonType> types,SimonVisitor visitor) throws IOException {
  List<Simon> simons=new ArrayList<Simon>(manager.getSimons(SimonPattern.create(pattern)));
  Collections.sort(simons,new Comparator<Simon>(){
    public int compare(    Simon s1,    Simon s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
);
  for (  Simon simon : simons) {
    SimonType lType=SimonType.getValueFromInstance(simon);
    if (types == null || types.contains(lType)) {
      visitor.visit(simon);
    }
  }
}"
8706,"@Override public void readParameters(){
  TimeFormatType timeFormat=getContext().getParameterAsEnum(""String_Node_Str"",TimeFormatType.class,TimeFormatType.MILLISECOND);
  stringifierFactory.init(timeFormat,StringifierFactory.READABLE_DATE_PATTERN,numberPattern);
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  TimeFormatType timeFormat=getContext().getParameterAsEnum(""String_Node_Str"",TimeFormatType.class,TimeFormatType.MILLISECOND);
  stringifierFactory.init(timeFormat,StringifierFactory.READABLE_DATE_PATTERN,numberPattern);
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8707,"protected void printBody(PrintWriter writer) throws IOException {
  SimonVisitors.visitList(getContext().getManager(),pattern,type,new SimonVisitorImpl(writer));
}","protected void printBody(PrintWriter writer) throws IOException {
  SimonVisitors.visitList(getContext().getManager(),pattern,types,new SimonVisitorImpl(writer));
}"
8708,"@Override public void readParameters(){
  super.readParameters();
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  super.readParameters();
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8709,"@Override public void execute() throws ServletException, IOException, ActionException {
  getContext().setContentType(""String_Node_Str"");
  ArrayJS arrayJS=new ArrayJS();
  SimonVisitors.visitList(getContext().getManager(),pattern,type,new SimonVisitorImpl(arrayJS));
  arrayJS.write(getContext().getWriter());
}","@Override public void execute() throws ServletException, IOException, ActionException {
  getContext().setContentType(""String_Node_Str"");
  ArrayJS arrayJS=new ArrayJS();
  SimonVisitors.visitList(getContext().getManager(),pattern,types,new SimonVisitorImpl(arrayJS));
  arrayJS.write(getContext().getWriter());
}"
8710,"@Override public void readParameters(){
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  name=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  name=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8711,"@Override public void execute() throws ServletException, IOException, ActionException {
  SimonVisitorImpl visitor=new SimonVisitorImpl();
  if (name != null) {
    Simon simon=SimonManager.getSimon(name);
    if (simon == null) {
      throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      visitor.visit(simon);
    }
  }
 else {
    SimonVisitors.visitList(getContext().getManager(),pattern,type,visitor);
  }
  getContext().getWriter().print(""String_Node_Str"" + visitor.getCount() + ""String_Node_Str"");
}","@Override public void execute() throws ServletException, IOException, ActionException {
  SimonVisitorImpl visitor=new SimonVisitorImpl();
  if (name != null) {
    Simon simon=SimonManager.getSimon(name);
    if (simon == null) {
      throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      visitor.visit(simon);
    }
  }
 else {
    SimonVisitors.visitList(getContext().getManager(),pattern,types,visitor);
  }
  getContext().getWriter().print(""String_Node_Str"" + visitor.getCount() + ""String_Node_Str"");
}"
8712,"/** 
 * Get request parameter as a String
 * @param name Parameter name
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public String getParameterAsString(String name,String defaultValue){
  String value=getParameter(name);
  if (value != null) {
    value=value.trim();
    if (value.equals(""String_Node_Str"")) {
      value=null;
    }
  }
  if (value == null) {
    value=defaultValue;
  }
  return value;
}","/** 
 * Get request parameter as a String
 * @param name Parameter name
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public String getParameterAsString(String name,String defaultValue){
  return defaultValue(blankToNull(getParameter(name)),defaultValue);
}"
8713,"/** 
 * Get request parameter as a Enum
 * @param name Parameter name
 * @param type Enum type
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public <T extends Enum<T>>T getParameterAsEnum(String name,Class<T> type,T defaultValue){
  String value=getParameterAsString(name,null);
  return (value == null) ? defaultValue : Enum.valueOf(type,value.toUpperCase());
}","/** 
 * Get request parameter as a Enum
 * @param name Parameter name
 * @param type Enum type
 * @param defaultValue Parameter default value (can be null)
 * @return Parameter value
 */
public <T extends Enum<T>>T getParameterAsEnum(String name,Class<T> type,T defaultValue){
  return defaultValue(stringToEnum(blankToNull(getParameter(name)),type),defaultValue);
}"
8714,"/** 
 * Visit simons as a list. Calls   {@link Manager#getSimons(org.javasimon.SimonPattern)} methodthen Simons are sorted by name and filtered by type finally the visitor is called on each of them.
 * @param manager Simon manager
 * @param pattern Pattern
 * @param type Type
 * @param visitor Visitor
 * @throws IOException
 */
public static void visitList(Manager manager,String pattern,SimonType type,SimonVisitor visitor) throws IOException {
  List<Simon> simons=new ArrayList<Simon>(manager.getSimons(SimonPattern.create(pattern)));
  Collections.sort(simons,new Comparator<Simon>(){
    public int compare(    Simon s1,    Simon s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
);
  for (  Simon simon : simons) {
    SimonType lType=SimonType.getValueFromInstance(simon);
    if (type == null || type == lType) {
      visitor.visit(simon);
    }
  }
}","/** 
 * Visit simons as a list. Calls   {@link Manager#getSimons(org.javasimon.SimonPattern)} methodthen Simons are sorted by name and filtered by type finally the visitor is called on each of them.
 * @param manager Simon manager
 * @param pattern Pattern
 * @param type Type
 * @param visitor Visitor
 * @throws IOException
 */
public static void visitList(Manager manager,String pattern,Set<SimonType> types,SimonVisitor visitor) throws IOException {
  List<Simon> simons=new ArrayList<Simon>(manager.getSimons(SimonPattern.create(pattern)));
  Collections.sort(simons,new Comparator<Simon>(){
    public int compare(    Simon s1,    Simon s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
);
  for (  Simon simon : simons) {
    SimonType lType=SimonType.getValueFromInstance(simon);
    if (types == null || types.contains(lType)) {
      visitor.visit(simon);
    }
  }
}"
8715,"@Override public void readParameters(){
  TimeFormatType timeFormat=getContext().getParameterAsEnum(""String_Node_Str"",TimeFormatType.class,TimeFormatType.MILLISECOND);
  stringifierFactory.init(timeFormat,StringifierFactory.READABLE_DATE_PATTERN,numberPattern);
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  TimeFormatType timeFormat=getContext().getParameterAsEnum(""String_Node_Str"",TimeFormatType.class,TimeFormatType.MILLISECOND);
  stringifierFactory.init(timeFormat,StringifierFactory.READABLE_DATE_PATTERN,numberPattern);
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8716,"protected void printBody(PrintWriter writer) throws IOException {
  SimonVisitors.visitList(getContext().getManager(),pattern,type,new SimonVisitorImpl(writer));
}","protected void printBody(PrintWriter writer) throws IOException {
  SimonVisitors.visitList(getContext().getManager(),pattern,types,new SimonVisitorImpl(writer));
}"
8717,"@Override public void readParameters(){
  super.readParameters();
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  super.readParameters();
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8718,"@Override public void execute() throws ServletException, IOException, ActionException {
  getContext().setContentType(""String_Node_Str"");
  ArrayJS arrayJS=new ArrayJS();
  SimonVisitors.visitList(getContext().getManager(),pattern,type,new SimonVisitorImpl(arrayJS));
  arrayJS.write(getContext().getWriter());
}","@Override public void execute() throws ServletException, IOException, ActionException {
  getContext().setContentType(""String_Node_Str"");
  ArrayJS arrayJS=new ArrayJS();
  SimonVisitors.visitList(getContext().getManager(),pattern,types,new SimonVisitorImpl(arrayJS));
  arrayJS.write(getContext().getWriter());
}"
8719,"@Override public void readParameters(){
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  name=getContext().getParameterAsString(""String_Node_Str"",null);
  type=getContext().getParameterAsEnum(""String_Node_Str"",SimonType.class,null);
}","@Override public void readParameters(){
  pattern=getContext().getParameterAsString(""String_Node_Str"",null);
  name=getContext().getParameterAsString(""String_Node_Str"",null);
  types=getContext().getParametersAsEnums(""String_Node_Str"",SimonType.class,null);
}"
8720,"@Override public void execute() throws ServletException, IOException, ActionException {
  SimonVisitorImpl visitor=new SimonVisitorImpl();
  if (name != null) {
    Simon simon=SimonManager.getSimon(name);
    if (simon == null) {
      throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      visitor.visit(simon);
    }
  }
 else {
    SimonVisitors.visitList(getContext().getManager(),pattern,type,visitor);
  }
  getContext().getWriter().print(""String_Node_Str"" + visitor.getCount() + ""String_Node_Str"");
}","@Override public void execute() throws ServletException, IOException, ActionException {
  SimonVisitorImpl visitor=new SimonVisitorImpl();
  if (name != null) {
    Simon simon=SimonManager.getSimon(name);
    if (simon == null) {
      throw new ActionException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      visitor.visit(simon);
    }
  }
 else {
    SimonVisitors.visitList(getContext().getManager(),pattern,types,visitor);
  }
  getContext().getWriter().print(""String_Node_Str"" + visitor.getCount() + ""String_Node_Str"");
}"
8721,"@Override protected boolean isValid(Double object){
  return super.isValid(object) && object >= 0D;
}","@Override protected boolean isValid(Double object){
  return super.isValid(object) && object >= 0D && object < Double.MAX_VALUE && object != Double.NaN;
}"
8722,"/** 
 * Warning and stack trace are print out to the error output. Either cause or warning (or both) should be provided otherwise the method does nothing. <p/>  {@inheritDoc}
 */
@Override public void onManagerWarning(String warning,Exception cause){
  if (warning != null) {
    System.err.println(""String_Node_Str"" + warning);
  }
  if (cause != null) {
    cause.printStackTrace();
  }
}","/** 
 * Warning and stack trace are print out to the error output. Either cause or warning (or both) should be provided otherwise the method does nothing. <p/>  {@inheritDoc}
 */
@Override public void onManagerWarning(String warning,Exception cause){
  if (warning != null) {
    System.err.println(DEBUG_PREFIX + ""String_Node_Str"" + warning);
  }
  if (cause != null) {
    System.err.print(DEBUG_PREFIX);
    cause.printStackTrace();
  }
}"
8723,"@Override public void onStopwatchStop(Split split,StopwatchSample sample){
  System.out.println(""String_Node_Str"" + split + ""String_Node_Str""+ sample.stopwatchToString());
}","@Override public void onStopwatchStop(Split split,StopwatchSample sample){
  out(""String_Node_Str"" + split + ""String_Node_Str""+ sample.stopwatchToString());
}"
8724,"@Override public void onSimonReset(Simon simon){
  System.out.println(""String_Node_Str"" + simon);
}","@Override public void onSimonReset(Simon simon){
  out(""String_Node_Str"" + simon);
}"
8725,"private Stopwatch getStopwatch(){
  return SimonManager.getStopwatch(getClass().getName() + ""String_Node_Str"");
}","private Stopwatch getStopwatch(){
  return manager.getStopwatch(getClass().getName() + ""String_Node_Str"");
}"
8726,"@BeforeClass public static void addCallcack(){
  SimonManager.manager().callback().addCallback(lastSplitsCallback);
}","@BeforeClass public void addCallcack(){
  manager.callback().addCallback(lastSplitsCallback);
}"
8727,"/** 
 * Wraps the HTTP request with Simon measuring. Separate Simons are created for different URIs (parameters ignored).
 * @param servletRequest HTTP servlet request
 * @param response HTTP servlet response
 * @param filterChain filter chain
 * @throws IOException possibly thrown by other filter/serlvet in the chain
 * @throws ServletException possibly thrown by other filter/serlvet in the chain
 */
public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  if (consolePath != null && request.getRequestURI().startsWith(consolePath)) {
    consolePage(request,(HttpServletResponse)response);
    return;
  }
  if (reportThreshold != null) {
    SPLITS.set(new ArrayList<Split>());
  }
  String simonName=getSimonName(request);
  Stopwatch stopwatch=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName);
  if (stopwatch.getNote() == null) {
    stopwatch.setNote(request.getRequestURI());
  }
  Split split=stopwatch.start();
  try {
    filterChain.doFilter(request,response);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    long splitNanoTime=split.stop().runningFor();
    if (reportThreshold != null) {
      if (splitNanoTime > reportThreshold) {
        SimonManager.message(""String_Node_Str"" + SimonUtils.presentNanoTime(splitNanoTime) + ""String_Node_Str""+ SPLITS.get());
      }
      SPLITS.remove();
    }
  }
}","/** 
 * Wraps the HTTP request with Simon measuring. Separate Simons are created for different URIs (parameters ignored).
 * @param servletRequest HTTP servlet request
 * @param response HTTP servlet response
 * @param filterChain filter chain
 * @throws IOException possibly thrown by other filter/serlvet in the chain
 * @throws ServletException possibly thrown by other filter/serlvet in the chain
 */
public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String localPath=request.getRequestURI().substring(request.getContextPath().length());
  if (consolePath != null && localPath.startsWith(consolePath)) {
    consolePage(request,(HttpServletResponse)response,localPath);
    return;
  }
  if (reportThreshold != null) {
    SPLITS.set(new ArrayList<Split>());
  }
  String simonName=getSimonName(request);
  Stopwatch stopwatch=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName);
  if (stopwatch.getNote() == null) {
    stopwatch.setNote(request.getRequestURI());
  }
  Split split=stopwatch.start();
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    long splitNanoTime=split.stop().runningFor();
    if (reportThreshold != null) {
      if (splitNanoTime > reportThreshold) {
        SimonManager.message(""String_Node_Str"" + SimonUtils.presentNanoTime(splitNanoTime) + ""String_Node_Str""+ SPLITS.get());
      }
      SPLITS.remove();
    }
  }
}"
8728,"private void consolePage(HttpServletRequest request,HttpServletResponse response) throws IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String subcommand=request.getRequestURI().substring(consolePath.length());
  if (subcommand.isEmpty()) {
    printSimonTree(response);
  }
 else   if (subcommand.equalsIgnoreCase(""String_Node_Str"")) {
    SimonManager.clear();
    response.getOutputStream().println(""String_Node_Str"");
  }
 else {
    response.getOutputStream().println(""String_Node_Str"");
    simonHelp(response);
  }
}","private void consolePage(HttpServletRequest request,HttpServletResponse response,String localPath) throws IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String subcommand=localPath.substring(consolePath.length());
  if (subcommand.isEmpty()) {
    printSimonTree(response);
  }
 else   if (subcommand.equalsIgnoreCase(""String_Node_Str"")) {
    SimonManager.clear();
    response.getOutputStream().println(""String_Node_Str"");
  }
 else {
    response.getOutputStream().println(""String_Node_Str"");
    simonHelp(response);
  }
}"
8729,"/** 
 * Wraps the HTTP request with Simon measuring. Separate Simons are created for different URIs (parameters ignored).
 * @param servletRequest HTTP servlet request
 * @param response HTTP servlet response
 * @param filterChain filter chain
 * @throws IOException possibly thrown by other filter/serlvet in the chain
 * @throws ServletException possibly thrown by other filter/serlvet in the chain
 */
public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  if (consolePath != null && request.getRequestURI().startsWith(consolePath)) {
    consolePage(request,(HttpServletResponse)response);
    return;
  }
  if (reportThreshold != null) {
    SPLITS.set(new ArrayList<Split>());
  }
  String simonName=getSimonName(request);
  Stopwatch stopwatch=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName);
  if (stopwatch.getNote() == null) {
    stopwatch.setNote(request.getRequestURI());
  }
  Split split=stopwatch.start();
  try {
    filterChain.doFilter(request,response);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    long splitNanoTime=split.stop().runningFor();
    if (reportThreshold != null) {
      if (splitNanoTime > reportThreshold) {
        SimonManager.message(""String_Node_Str"" + SimonUtils.presentNanoTime(splitNanoTime) + ""String_Node_Str""+ SPLITS.get());
      }
      SPLITS.remove();
    }
  }
}","/** 
 * Wraps the HTTP request with Simon measuring. Separate Simons are created for different URIs (parameters ignored).
 * @param servletRequest HTTP servlet request
 * @param response HTTP servlet response
 * @param filterChain filter chain
 * @throws IOException possibly thrown by other filter/serlvet in the chain
 * @throws ServletException possibly thrown by other filter/serlvet in the chain
 */
public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String localPath=request.getRequestURI().substring(request.getContextPath().length());
  if (consolePath != null && localPath.startsWith(consolePath)) {
    consolePage(request,(HttpServletResponse)response,localPath);
    return;
  }
  if (reportThreshold != null) {
    SPLITS.set(new ArrayList<Split>());
  }
  String simonName=getSimonName(request);
  Stopwatch stopwatch=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName);
  if (stopwatch.getNote() == null) {
    stopwatch.setNote(request.getRequestURI());
  }
  Split split=stopwatch.start();
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    long splitNanoTime=split.stop().runningFor();
    if (reportThreshold != null) {
      if (splitNanoTime > reportThreshold) {
        SimonManager.message(""String_Node_Str"" + SimonUtils.presentNanoTime(splitNanoTime) + ""String_Node_Str""+ SPLITS.get());
      }
      SPLITS.remove();
    }
  }
}"
8730,"private void consolePage(HttpServletRequest request,HttpServletResponse response) throws IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String subcommand=request.getRequestURI().substring(consolePath.length());
  if (subcommand.isEmpty()) {
    printSimonTree(response);
  }
 else   if (subcommand.equalsIgnoreCase(""String_Node_Str"")) {
    SimonManager.clear();
    response.getOutputStream().println(""String_Node_Str"");
  }
 else {
    response.getOutputStream().println(""String_Node_Str"");
    simonHelp(response);
  }
}","private void consolePage(HttpServletRequest request,HttpServletResponse response,String localPath) throws IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String subcommand=localPath.substring(consolePath.length());
  if (subcommand.isEmpty()) {
    printSimonTree(response);
  }
 else   if (subcommand.equalsIgnoreCase(""String_Node_Str"")) {
    SimonManager.clear();
    response.getOutputStream().println(""String_Node_Str"");
  }
 else {
    response.getOutputStream().println(""String_Node_Str"");
    simonHelp(response);
  }
}"
8731,"/** 
 * Returns unmodifiable collection containing names of all existing Simons.
 * @return collection of all Simon names
 * @since 3.1
 */
Collection<String> getSimonNames();","/** 
 * Returns unmodifiable collection containing names of all existing Simons. Collection is not ordered.
 * @return collection of all Simon names
 * @since 3.1
 */
Collection<String> getSimonNames();"
8732,"/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sampleAndReset(){
  return new CounterSample((org.javasimon.CounterSample)counter.sampleAndReset());
}","/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sampleAndReset(){
  return new CounterSample(counter.sampleAndReset());
}"
8733,"/** 
 * Creates the MX bean for the provided Counter.
 * @param counter wrapped Counter
 */
protected CounterMXBeanImpl(Counter counter){
  this.counter=counter;
}","/** 
 * Creates the MX bean for the provided Counter.
 * @param counter wrapped Counter
 */
public CounterMXBeanImpl(Counter counter){
  this.counter=counter;
}"
8734,"/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sample(){
  return new CounterSample((org.javasimon.CounterSample)counter.sample());
}","/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sample(){
  return new CounterSample(counter.sample());
}"
8735,"/** 
 * Returns array containing names and types of all existing Simons.
 * @return array of {@link SimonInfo} object
 */
SimonInfo[] getSimonInfos();","/** 
 * Returns array containing names and types of all existing Simons ordered naturally by name.
 * @return array of {@link SimonInfo} objects
 */
SimonInfo[] getSimonInfos();"
8736,"/** 
 * Returns array containing full hierarchical names of all existing Simons.
 * @return array of all Simon names
 * @see org.javasimon.Manager#simonNames()
 */
String[] getSimonNames();","/** 
 * Returns array containing full hierarchical names of all existing Simons.
 * @return array of all Simon names
 * @see org.javasimon.Manager#getSimonNames()
 */
String[] getSimonNames();"
8737,"/** 
 * {@inheritDoc}
 */
public final SimonInfo[] getSimonInfos(){
  Collection<String> simonNames=manager.getSimonNames();
  SimonInfo[] simonInfo=new SimonInfo[simonNames.size()];
  int i=0;
  for (  String name : simonNames) {
    Simon s=manager.getSimon(name);
    simonInfo[i++]=new SimonInfo(name,s instanceof Stopwatch ? SimonInfo.STOPWATCH : s instanceof Counter ? SimonInfo.COUNTER : SimonInfo.UNKNOWN);
  }
  return simonInfo;
}","/** 
 * {@inheritDoc}
 */
public final SimonInfo[] getSimonInfos(){
  String[] simonNames=getSimonNamesOrdered();
  SimonInfo[] simonInfo=new SimonInfo[simonNames.length];
  int i=0;
  for (  String name : simonNames) {
    Simon s=manager.getSimon(name);
    simonInfo[i++]=new SimonInfo(name,s instanceof Stopwatch ? SimonInfo.STOPWATCH : s instanceof Counter ? SimonInfo.COUNTER : SimonInfo.UNKNOWN);
  }
  return simonInfo;
}"
8738,"/** 
 * {@inheritDoc}
 */
public final String[] getSimonNames(){
  return (String[])manager.getSimonNames().toArray();
}","/** 
 * {@inheritDoc}
 */
public final String[] getSimonNames(){
  Collection<String> simonNames=manager.getSimonNames();
  return simonNames.toArray(new String[simonNames.size()]);
}"
8739,"/** 
 * {@inheritDoc}
 */
public void reset(String name){
  manager.getSimon(name).reset();
}","/** 
 * {@inheritDoc}
 */
public final void reset(String name){
  manager.getSimon(name).reset();
}"
8740,"/** 
 * {@inheritDoc}
 */
@Override public String getLastAsString(){
  return SimonUtils.presentNanoTime(getLast());
}","/** 
 * {@inheritDoc}
 */
@Override public final String getLastAsString(){
  return SimonUtils.presentNanoTime(getLast());
}"
8741,"/** 
 * Creates the MX bean for the provided Stopwatch.
 * @param stopwatch wrapped Stopwatch
 */
protected StopwatchMXBeanImpl(Stopwatch stopwatch){
  this.stopwatch=stopwatch;
}","/** 
 * Creates the MX bean for the provided Stopwatch.
 * @param stopwatch wrapped Stopwatch
 */
public StopwatchMXBeanImpl(Stopwatch stopwatch){
  this.stopwatch=stopwatch;
}"
8742,"/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sampleAndReset(){
  return new StopwatchSample((org.javasimon.StopwatchSample)stopwatch.sampleAndReset());
}","/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sampleAndReset(){
  return new StopwatchSample(stopwatch.sampleAndReset());
}"
8743,"/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sample(){
  return new StopwatchSample((org.javasimon.StopwatchSample)stopwatch.sample());
}","/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sample(){
  return new StopwatchSample(stopwatch.sample());
}"
8744,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  StopwatchSample[] results=BenchmarkUtils.run(2,5,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ms=System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ns=System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start().stop();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        SimonManager.getStopwatch(""String_Node_Str"").start().stop();
      }
    }
  }
);
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",false));
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",true));
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  ExampleUtils.fillManagerWithSimons(100000);
  StopwatchSample[] results=BenchmarkUtils.run(2,5,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ms=System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ns=System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start().stop();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        SimonManager.getStopwatch(""String_Node_Str"").start().stop();
      }
    }
  }
);
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",false));
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",true));
}"
8745,"/** 
 * Returns unmodifiable collection containing names of all existing Simons.
 * @return collection of all Simon names
 * @since 3.1
 */
Collection<String> getSimonNames();","/** 
 * Returns unmodifiable collection containing names of all existing Simons. Collection is not ordered.
 * @return collection of all Simon names
 * @since 3.1
 */
Collection<String> getSimonNames();"
8746,"/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sampleAndReset(){
  return new CounterSample((org.javasimon.CounterSample)counter.sampleAndReset());
}","/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sampleAndReset(){
  return new CounterSample(counter.sampleAndReset());
}"
8747,"/** 
 * Creates the MX bean for the provided Counter.
 * @param counter wrapped Counter
 */
protected CounterMXBeanImpl(Counter counter){
  this.counter=counter;
}","/** 
 * Creates the MX bean for the provided Counter.
 * @param counter wrapped Counter
 */
public CounterMXBeanImpl(Counter counter){
  this.counter=counter;
}"
8748,"/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sample(){
  return new CounterSample((org.javasimon.CounterSample)counter.sample());
}","/** 
 * {@inheritDoc}
 */
@Override public final CounterSample sample(){
  return new CounterSample(counter.sample());
}"
8749,"/** 
 * Returns array containing names and types of all existing Simons.
 * @return array of {@link SimonInfo} object
 */
SimonInfo[] getSimonInfos();","/** 
 * Returns array containing names and types of all existing Simons ordered naturally by name.
 * @return array of {@link SimonInfo} objects
 */
SimonInfo[] getSimonInfos();"
8750,"/** 
 * Returns array containing full hierarchical names of all existing Simons.
 * @return array of all Simon names
 * @see org.javasimon.Manager#simonNames()
 */
String[] getSimonNames();","/** 
 * Returns array containing full hierarchical names of all existing Simons.
 * @return array of all Simon names
 * @see org.javasimon.Manager#getSimonNames()
 */
String[] getSimonNames();"
8751,"/** 
 * {@inheritDoc}
 */
public final SimonInfo[] getSimonInfos(){
  Collection<String> simonNames=manager.getSimonNames();
  SimonInfo[] simonInfo=new SimonInfo[simonNames.size()];
  int i=0;
  for (  String name : simonNames) {
    Simon s=manager.getSimon(name);
    simonInfo[i++]=new SimonInfo(name,s instanceof Stopwatch ? SimonInfo.STOPWATCH : s instanceof Counter ? SimonInfo.COUNTER : SimonInfo.UNKNOWN);
  }
  return simonInfo;
}","/** 
 * {@inheritDoc}
 */
public final SimonInfo[] getSimonInfos(){
  String[] simonNames=getSimonNamesOrdered();
  SimonInfo[] simonInfo=new SimonInfo[simonNames.length];
  int i=0;
  for (  String name : simonNames) {
    Simon s=manager.getSimon(name);
    simonInfo[i++]=new SimonInfo(name,s instanceof Stopwatch ? SimonInfo.STOPWATCH : s instanceof Counter ? SimonInfo.COUNTER : SimonInfo.UNKNOWN);
  }
  return simonInfo;
}"
8752,"/** 
 * {@inheritDoc}
 */
public final String[] getSimonNames(){
  return (String[])manager.getSimonNames().toArray();
}","/** 
 * {@inheritDoc}
 */
public final String[] getSimonNames(){
  Collection<String> simonNames=manager.getSimonNames();
  return simonNames.toArray(new String[simonNames.size()]);
}"
8753,"/** 
 * {@inheritDoc}
 */
public void reset(String name){
  manager.getSimon(name).reset();
}","/** 
 * {@inheritDoc}
 */
public final void reset(String name){
  manager.getSimon(name).reset();
}"
8754,"/** 
 * {@inheritDoc}
 */
@Override public String getLastAsString(){
  return SimonUtils.presentNanoTime(getLast());
}","/** 
 * {@inheritDoc}
 */
@Override public final String getLastAsString(){
  return SimonUtils.presentNanoTime(getLast());
}"
8755,"/** 
 * Creates the MX bean for the provided Stopwatch.
 * @param stopwatch wrapped Stopwatch
 */
protected StopwatchMXBeanImpl(Stopwatch stopwatch){
  this.stopwatch=stopwatch;
}","/** 
 * Creates the MX bean for the provided Stopwatch.
 * @param stopwatch wrapped Stopwatch
 */
public StopwatchMXBeanImpl(Stopwatch stopwatch){
  this.stopwatch=stopwatch;
}"
8756,"/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sampleAndReset(){
  return new StopwatchSample((org.javasimon.StopwatchSample)stopwatch.sampleAndReset());
}","/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sampleAndReset(){
  return new StopwatchSample(stopwatch.sampleAndReset());
}"
8757,"/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sample(){
  return new StopwatchSample((org.javasimon.StopwatchSample)stopwatch.sample());
}","/** 
 * {@inheritDoc}
 */
@Override public final StopwatchSample sample(){
  return new StopwatchSample(stopwatch.sample());
}"
8758,"/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  StopwatchSample[] results=BenchmarkUtils.run(2,5,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ms=System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ns=System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start().stop();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        SimonManager.getStopwatch(""String_Node_Str"").start().stop();
      }
    }
  }
);
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",false));
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",true));
}","/** 
 * Entry point of the demo application.
 * @param args command line arguments
 */
public static void main(String[] args){
  ExampleUtils.fillManagerWithSimons(100000);
  StopwatchSample[] results=BenchmarkUtils.run(2,5,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ms=System.currentTimeMillis();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        long ns=System.nanoTime();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      Stopwatch simon=SimonManager.getStopwatch(null);
      for (int i=0; i < LOOP; i++) {
        simon.start().stop();
      }
    }
  }
,new BenchmarkUtils.Task(""String_Node_Str""){
    @Override public void perform() throws Exception {
      for (int i=0; i < LOOP; i++) {
        SimonManager.getStopwatch(""String_Node_Str"").start().stop();
      }
    }
  }
);
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",false));
  System.out.println(""String_Node_Str"" + GoogleChartImageGenerator.barChart(results,""String_Node_Str"",SimonUtils.NANOS_IN_MILLIS,""String_Node_Str"",true));
}"
8759,"public void init(FilterConfig filterConfig) throws ServletException {
  simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}","public void init(FilterConfig filterConfig) throws ServletException {
  if (filterConfig.getInitParameter(INIT_PARAM_PREFIX) != null) {
    simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  }
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}"
8760,"public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  filterChain.doFilter(request,response);
  split.stop();
}","public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    split.stop();
  }
}"
8761,"private void register(SimonSuperMXBean simonMxBean){
  String name=simonMxBean.getName() + ""String_Node_Str"" + simonMxBean.getType();
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}","private void register(SimonSuperMXBean simonMxBean){
  String name=constructObjectName(simonMxBean);
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}"
8762,"/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}","/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  if (timestamp == 0) {
    return UNDEF_STRING;
  }
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}"
8763,"public void init(FilterConfig filterConfig) throws ServletException {
  simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}","public void init(FilterConfig filterConfig) throws ServletException {
  if (filterConfig.getInitParameter(INIT_PARAM_PREFIX) != null) {
    simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  }
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}"
8764,"public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  filterChain.doFilter(request,response);
  split.stop();
}","public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    split.stop();
  }
}"
8765,"private void register(SimonSuperMXBean simonMxBean){
  String name=simonMxBean.getName() + ""String_Node_Str"" + simonMxBean.getType();
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}","private void register(SimonSuperMXBean simonMxBean){
  String name=constructObjectName(simonMxBean);
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}"
8766,"/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}","/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  if (timestamp == 0) {
    return UNDEF_STRING;
  }
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}"
8767,"/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    drivers.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
  }
}","/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    InputStream stream=null;
    try {
      stream=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
      drivers.load(stream);
    }
  finally {
      if (stream != null) {
        stream.close();
      }
    }
  }
 catch (  IOException e) {
  }
}"
8768,"/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}","/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url	jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}"
8769,"private static void printSimon(int level,Simon simon){
  for (int i=0; i < level; i++) {
    System.out.print(""String_Node_Str"");
  }
  System.out.println(localName(simon.getName()) + ""String_Node_Str"" + (simon.isEnabled() ? '+' : '-')+ ""String_Node_Str""+ simon);
}","private static void printSimon(int level,Simon simon,StringBuilder sb){
  for (int i=0; i < level; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(localName(simon.getName())).append('(').append(simon.isEnabled() ? '+' : '-').append(""String_Node_Str"").append(simon.toString()).append('\n');
}"
8770,"private static void printSimonTree(int level,Simon simon){
  printSimon(level,simon);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child);
  }
}","private static void printSimonTree(int level,Simon simon,StringBuilder sb){
  printSimon(level,simon,sb);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child,sb);
  }
}"
8771,"/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    drivers.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
  }
}","/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    InputStream stream=null;
    try {
      stream=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
      drivers.load(stream);
    }
  finally {
      if (stream != null) {
        stream.close();
      }
    }
  }
 catch (  IOException e) {
  }
}"
8772,"/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}","/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url	jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}"
8773,"private static void printSimon(int level,Simon simon){
  for (int i=0; i < level; i++) {
    System.out.print(""String_Node_Str"");
  }
  System.out.println(localName(simon.getName()) + ""String_Node_Str"" + (simon.isEnabled() ? '+' : '-')+ ""String_Node_Str""+ simon);
}","private static void printSimon(int level,Simon simon,StringBuilder sb){
  for (int i=0; i < level; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(localName(simon.getName())).append('(').append(simon.isEnabled() ? '+' : '-').append(""String_Node_Str"").append(simon.toString()).append('\n');
}"
8774,"private static void printSimonTree(int level,Simon simon){
  printSimon(level,simon);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child);
  }
}","private static void printSimonTree(int level,Simon simon,StringBuilder sb){
  printSimon(level,simon,sb);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child,sb);
  }
}"
8775,"private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Pattern re=Pattern.compile(""String_Node_Str"" + REAL_DRIVER + ""String_Node_Str"");
    Matcher matcher=re.matcher(url);
    if (matcher.lookingAt()) {
      drv=registerDriver(matcher.group(1).trim());
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}","private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Matcher matcher=REAL_DRIVER_PATTERN.matcher(url);
    if (matcher.find()) {
      drv=registerDriver(matcher.group(1));
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}"
8776,"private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Pattern re=Pattern.compile(""String_Node_Str"" + REAL_DRIVER + ""String_Node_Str"");
    Matcher matcher=re.matcher(url);
    if (matcher.lookingAt()) {
      drv=registerDriver(matcher.group(1).trim());
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}","private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Matcher matcher=REAL_DRIVER_PATTERN.matcher(url);
    if (matcher.find()) {
      drv=registerDriver(matcher.group(1));
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}"
8777,"private void getWeather(){
  if (mCurCity == null)   mCurCity=getArguments().getParcelable(ARG_CITY);
  if (NetUtil.getNetworkState(getActivity()) == NetUtil.NETWORN_NONE) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  mAsynState=AsynTaskState.PROCESSING;
  if (!mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.setRefreshing();
  final String postID=mCurCity.getPostID();
  StringRequest sr=new StringRequest(String.format(WEATHER_ALL,postID),new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      mAsynState=AsynTaskState.RPOCESSED;
      try {
        WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
        if (!WeatherSpider.isEmpty(weatherInfo)) {
          mWeatherInfo=weatherInfo;
          save2Database(postID,response);
          updateWeatherView();
        }
      }
 catch (      JSONException e) {
        if (getActivity() != null)         Toast.makeText(getActivity(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
      mAsynState=AsynTaskState.COMPLETE;
      mHandler.removeCallbacks(stopRefreshAnim);
      mHandler.postDelayed(stopRefreshAnim,500);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      mAsynState=AsynTaskState.RPOCESSED;
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + error.getMessage(),Toast.LENGTH_SHORT).show();
      mAsynState=AsynTaskState.COMPLETE;
      mHandler.removeCallbacks(stopRefreshAnim);
      mHandler.postDelayed(stopRefreshAnim,500);
    }
  }
);
  sr.setTag(postID);
  App.getVolleyRequestQueue().add(sr);
}","/** 
 * 异步任务获取天气信息
 */
private void getWeather(){
  if (mCurCity == null)   mCurCity=getArguments().getParcelable(ARG_CITY);
  if (NetUtil.getNetworkState(getActivity()) == NetUtil.NETWORN_NONE) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  mAsynState=AsynTaskState.PROCESSING;
  if (!mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.setRefreshing();
  final String postID=mCurCity.getPostID();
  StringRequest sr=new StringRequest(String.format(WeatherSpider.WEATHER_ALL,postID),new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      mAsynState=AsynTaskState.RPOCESSED;
      try {
        WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
        if (!WeatherSpider.isEmpty(weatherInfo)) {
          mWeatherInfo=weatherInfo;
          save2Database(postID,response);
          updateWeatherView();
        }
      }
 catch (      JSONException e) {
        if (getActivity() != null)         Toast.makeText(getActivity(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
      mAsynState=AsynTaskState.COMPLETE;
      mHandler.removeCallbacks(stopRefreshAnim);
      mHandler.postDelayed(stopRefreshAnim,500);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      mAsynState=AsynTaskState.RPOCESSED;
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + error.getMessage(),Toast.LENGTH_SHORT).show();
      mAsynState=AsynTaskState.COMPLETE;
      mHandler.removeCallbacks(stopRefreshAnim);
      mHandler.postDelayed(stopRefreshAnim,500);
    }
  }
);
  sr.setTag(postID);
  App.getVolleyRequestQueue().add(sr);
}"
8778,"public static Alerts convertToNewAlert(JSONArray alertJSONArray,String language) throws JSONException {
  ArrayList<Alert> alertLists=new ArrayList<Alert>();
  Alerts alerts=new Alerts();
  for (int i=0; i < alertJSONArray.length(); ++i) {
    JSONObject jsonObject=alertJSONArray.getJSONObject(i);
    Alerts.Alert alert=new Alerts.Alert();
    alert.setAbnormal(jsonObject.getString(""String_Node_Str""));
    alert.setDetail(jsonObject.getString(""String_Node_Str""));
    alert.setHoliday(jsonObject.getString(""String_Node_Str""));
    alert.setLevel(jsonObject.getString(""String_Node_Str""));
    alert.setPubTime(Long.valueOf(jsonObject.getLong(""String_Node_Str"")));
    alert.setTitle(jsonObject.getString(""String_Node_Str""));
    alertLists.add(alert);
  }
  alerts.setPid(language);
  alerts.setArryAlert(alertLists);
  return alerts;
}","public static Alerts convertToNewAlert(JSONArray alertJSONArray,String language){
  ArrayList<Alert> alertLists=new ArrayList<Alert>();
  Alerts alerts=new Alerts();
  try {
    for (int i=0; i < alertJSONArray.length(); ++i) {
      JSONObject jsonObject=alertJSONArray.getJSONObject(i);
      Alerts.Alert alert=new Alerts.Alert();
      alert.setAbnormal(jsonObject.getString(""String_Node_Str""));
      alert.setDetail(jsonObject.getString(""String_Node_Str""));
      alert.setHoliday(jsonObject.getString(""String_Node_Str""));
      alert.setLevel(jsonObject.getString(""String_Node_Str""));
      alert.setPubTime(Long.valueOf(jsonObject.getLong(""String_Node_Str"")));
      alert.setTitle(jsonObject.getString(""String_Node_Str""));
      alertLists.add(alert);
    }
    alerts.setPid(language);
    alerts.setArryAlert(alertLists);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return alerts;
}"
8779,"public static AQI convertToNewAQI(JSONObject aqiJSONObject,String language,String pid) throws JSONException {
  AQI aqi=new AQI();
  aqi.setCity_code(pid);
  aqi.setPub_time(getAQITime(aqiJSONObject.getString(""String_Node_Str"")));
  int aqiValue=WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str""));
  aqi.setAqi(aqiValue);
  aqi.setPm25(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
  aqi.setPm10(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
  aqi.setNo2(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
  aqi.setSo2(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
  aqi.setCo(WeatherConstants.NO_VALUE_FLAG);
  aqi.setO3(WeatherConstants.NO_VALUE_FLAG);
  aqi.setAqi_level(WeatherUtilities.getAqiLevel(aqiValue,language));
  aqi.setAqi_desc(WeatherUtilities.getAqiDesc(aqiValue,language));
  aqi.setSource(WeatherUtilities.getAQISource(language));
  aqi.setSpot(aqiJSONObject.getString(""String_Node_Str""));
  return aqi;
}","public static AQI convertToNewAQI(JSONObject aqiJSONObject,String language,String pid){
  AQI aqi=new AQI();
  aqi.setCity_code(pid);
  try {
    aqi.setPub_time(getAQITime(aqiJSONObject.getString(""String_Node_Str"")));
    int aqiValue=WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str""));
    aqi.setAqi(aqiValue);
    aqi.setPm25(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
    aqi.setPm10(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
    aqi.setNo2(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
    aqi.setSo2(WeatherUtilities.getAqi(aqiJSONObject.getString(""String_Node_Str"")));
    aqi.setCo(WeatherConstants.NO_VALUE_FLAG);
    aqi.setO3(WeatherConstants.NO_VALUE_FLAG);
    aqi.setAqi_level(WeatherUtilities.getAqiLevel(aqiValue,language));
    aqi.setAqi_desc(WeatherUtilities.getAqiDesc(aqiValue,language));
    aqi.setSource(WeatherUtilities.getAQISource(language));
    aqi.setSpot(aqiJSONObject.getString(""String_Node_Str""));
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return aqi;
}"
8780,"private static long parseTime(String timeStr){
  String[] times=timeStr.split(""String_Node_Str"");
  int hour=Integer.parseInt(times[0]);
  int minute=Integer.parseInt(times[1]);
  Long localTime=Calendar.getInstance().getTimeInMillis();
  if (hour - Calendar.getInstance().get(11) > 2)   localTime=Long.valueOf(localTime.longValue() - 24 * 60 * 60* 1000L);
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(localTime.longValue());
  calendar.set(11,hour);
  calendar.set(12,minute);
  return calendar.getTimeInMillis();
}","private static long parseTime(String timeStr){
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  String data=simpleDateFormat.format(new Date(System.currentTimeMillis()));
  timeStr=data + ""String_Node_Str"" + timeStr;
  long realTime=getAQITime(timeStr);
  Log.i(""String_Node_Str"",""String_Node_Str"" + timeStr + ""String_Node_Str""+ realTime);
  return realTime;
}"
8781,"@Override public View getView(int position,View convertView,ViewGroup parent){
  int itemType=getItemViewType(position);
  if (convertView == null || !convertView.getTag().equals(R.drawable.ic_launcher + itemType)) {
    final WeakReference<WeatherBaseView> weakFragment=mWeatherBaseViews.get(itemType);
    if (weakFragment != null && weakFragment.get() != null) {
      convertView=weakFragment.get();
    }
 else {
switch (itemType) {
case FORECAST_TYPE:
        convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_forecast,parent,false);
      break;
case WEATHER_DETAILS_TYPE:
    convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_details,parent,false);
  break;
case AQI_TYPE:
convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_aqi,parent,false);
break;
case INDEX_TYPE:
convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_index,parent,false);
break;
default :
break;
}
mWeatherBaseViews.put(itemType,new WeakReference<WeatherBaseView>((WeatherBaseView)convertView));
}
convertView.setTag(R.drawable.ic_launcher + itemType);
}
if (convertView instanceof WeatherBaseView && !WeatherSpider.isEmpty(mWeatherInfo)) {
WeatherBaseView baseView=(WeatherBaseView)convertView;
baseView.setWeatherInfo(mWeatherInfo);
return baseView;
}
return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  int itemType=getItemViewType(position);
  if (convertView == null || !convertView.getTag().equals(R.drawable.ic_launcher + itemType)) {
    final WeatherBaseView weakFragment=mWeatherBaseViews.get(itemType);
    if (weakFragment != null) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + weakFragment);
      convertView=weakFragment;
    }
 else {
switch (itemType) {
case FORECAST_TYPE:
        convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_forecast,parent,false);
      break;
case WEATHER_DETAILS_TYPE:
    convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_details,parent,false);
  break;
case AQI_TYPE:
convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_aqi,parent,false);
break;
case INDEX_TYPE:
convertView=(WeatherBaseView)mLayoutInflater.inflate(R.layout.weather_index,parent,false);
break;
default :
break;
}
mWeatherBaseViews.put(itemType,(WeatherBaseView)convertView);
}
convertView.setTag(R.drawable.ic_launcher + itemType);
}
if (convertView instanceof WeatherBaseView && !WeatherSpider.isEmpty(mWeatherInfo)) {
WeatherBaseView baseView=(WeatherBaseView)convertView;
baseView.setWeatherInfo(mWeatherInfo);
return baseView;
}
return convertView;
}"
8782,"/** 
 * 初始化所有的view
 * @param view
 */
private void initViews(View view,Bundle savedInstanceState){
  mSwipeRefreshLayout=(SwipeRefreshLayout)view.findViewById(R.id.swiperefresh);
  mSwipeRefreshLayout.setOnRefreshListener(this);
  mListView=(ListView)view.findViewById(R.id.drag_list);
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mNormalImageView=(ImageView)view.findViewById(R.id.weather_background);
  mBlurredImageView=(ImageView)view.findViewById(R.id.weather_background_blurred);
  if (savedInstanceState != null) {
    float alpha=savedInstanceState.getFloat(ALPHA_KEY);
    mBlurredImageView.setAlpha(alpha);
  }
 else {
    mBlurredImageView.setAlpha(0f);
  }
  mListHeaderView=LayoutInflater.from(getActivity()).inflate(R.layout.weather_current_condition,null);
  int displayHeight=SystemUtils.getDisplayHeight(getActivity());
  mHeaderHeight=displayHeight - getResources().getDimensionPixelSize(R.dimen.abs__action_bar_default_height);
  mListHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,mHeaderHeight));
  mListView.addHeaderView(mListHeaderView,null,false);
  mListView.setOnScrollListener(mOnScrollListener);
  initCurWeatherViews(view);
}","/** 
 * 初始化所有的view
 * @param view
 */
private void initViews(View view,Bundle savedInstanceState){
  mSwipeRefreshLayout=(SwipeRefreshLayout)view.findViewById(R.id.swiperefresh);
  mSwipeRefreshLayout.setOnRefreshListener(this);
  mListView=(ListView)view.findViewById(R.id.drag_list);
  mNormalImageView=(ImageView)view.findViewById(R.id.weather_background);
  mBlurredImageView=(ImageView)view.findViewById(R.id.weather_background_blurred);
  if (savedInstanceState != null) {
    float alpha=savedInstanceState.getFloat(ALPHA_KEY);
    mBlurredImageView.setAlpha(alpha);
  }
 else {
    mBlurredImageView.setAlpha(0f);
  }
  mListHeaderView=LayoutInflater.from(getActivity()).inflate(R.layout.weather_current_condition,null);
  int displayHeight=SystemUtils.getDisplayHeight(getActivity());
  mHeaderHeight=displayHeight - getResources().getDimensionPixelSize(R.dimen.abs__action_bar_default_height);
  mListHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,mHeaderHeight));
  mListView.addHeaderView(mListHeaderView,null,false);
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mListView.setOnScrollListener(mOnScrollListener);
  initCurWeatherViews(view);
}"
8783,"@Override public WeatherInfo workInBackground(Boolean... params) throws TaskException {
  boolean isForce=params[0];
  WeatherInfo weatherInfo=null;
  if (isNeedRequestNet() || isForce) {
    try {
      weatherInfo=loadWeatherInfoFromNetwork();
    }
 catch (    Exception e) {
    }
    if (WeatherSpider.isEmpty(weatherInfo)) {
      weatherInfo=loadWeatherInfoFromLocal();
      weatherInfo.setNewData(false);
    }
 else {
      weatherInfo.setNewData(true);
    }
  }
 else {
    weatherInfo=loadWeatherInfoFromLocal();
  }
  if (WeatherSpider.isEmpty(weatherInfo))   weatherInfo=loadWeatherInfoFromLocal();
  return weatherInfo;
}","@Override public WeatherInfo workInBackground(Boolean... params) throws TaskException {
  mWeatherAdapter.initViews();
  boolean isForce=params[0];
  WeatherInfo weatherInfo=null;
  if (isNeedRequestNet() || isForce) {
    try {
      weatherInfo=loadWeatherInfoFromNetwork();
    }
 catch (    Exception e) {
    }
    if (WeatherSpider.isEmpty(weatherInfo)) {
      weatherInfo=loadWeatherInfoFromLocal();
      weatherInfo.setNewData(false);
    }
 else {
      weatherInfo.setNewData(true);
    }
  }
 else {
    weatherInfo=loadWeatherInfoFromLocal();
  }
  if (WeatherSpider.isEmpty(weatherInfo))   weatherInfo=loadWeatherInfoFromLocal();
  return weatherInfo;
}"
8784,"public static WeatherInfo getWeatherInfo(Context context,String postID,String result) throws JSONException {
  String language=context.getResources().getConfiguration().locale.toString();
  JSONObject response=new JSONObject(result);
  Forecast forecast=WeatherController.convertToNewForecast(response,language,postID);
  RealTime realTime=WeatherController.convertToNewRealTime(response.getJSONObject(""String_Node_Str""),language,postID);
  Alerts alerts=WeatherController.convertToNewAlert(response.getJSONArray(""String_Node_Str""),postID);
  Index index=WeatherController.convertToNewIndex(response,language,postID);
  AQI aqi=WeatherController.convertToNewAQI(response.getJSONObject(""String_Node_Str""),language,postID);
  return new WeatherInfo(realTime,forecast,aqi,index,alerts);
}","public static WeatherInfo getWeatherInfo(Context context,String postID,String result) throws JSONException {
  String language=context.getResources().getConfiguration().locale.toString();
  JSONObject response=new JSONObject(TextUtils.isEmpty(result) ? ""String_Node_Str"" : result);
  Forecast forecast=WeatherController.convertToNewForecast(response,language,postID);
  RealTime realTime=WeatherController.convertToNewRealTime(response.getJSONObject(""String_Node_Str""),language,postID);
  Alerts alerts=WeatherController.convertToNewAlert(response.getJSONArray(""String_Node_Str""),postID);
  Index index=WeatherController.convertToNewIndex(response,language,postID);
  AQI aqi=WeatherController.convertToNewAQI(response.getJSONObject(""String_Node_Str""),language,postID);
  return new WeatherInfo(realTime,forecast,aqi,index,alerts);
}"
8785,"/** 
 * 根据  {@link ABaseTask} 的加载状态，刷新视图
 * @param state
 * @param tag
 */
protected void taskStateChanged(ABaseTaskState state,Serializable tag){
  if (state == ABaseTaskState.prepare) {
    mHandler.removeCallbacks(startRefreshAnim);
    mHandler.postDelayed(startRefreshAnim,200);
  }
 else   if (state == ABaseTaskState.success) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.canceled) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.falid) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.finished) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
}","/** 
 * 根据  {@link ABaseTask} 的加载状态，刷新视图
 * @param state
 * @param tag
 */
protected void taskStateChanged(ABaseTaskState state,Serializable tag){
  if (state == ABaseTaskState.prepare) {
    mHandler.removeCallbacks(startRefreshAnim);
    mHandler.postDelayed(startRefreshAnim,200);
  }
 else   if (state == ABaseTaskState.success) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.canceled) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.falid) {
    Toast.makeText(mActivity,""String_Node_Str"" + tag,Toast.LENGTH_SHORT).show();
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
 else   if (state == ABaseTaskState.finished) {
    mHandler.removeCallbacks(stopRefreshAnim);
    mHandler.postDelayed(stopRefreshAnim,500);
  }
}"
8786,"/** 
 * 更新天气信息界面
 */
private void updateWeatherView(WeatherInfo weatherInfo){
  if (WeatherSpider.isEmpty(weatherInfo)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (!isVisible)   return;
  isLoaded=true;
  Toast.makeText(mActivity,mCurCity.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  Glide.with(this).load(WeatherIconUtils.getWeatherNromalBg(type)).placeholder(R.drawable.bg_na_blur).error(R.drawable.bg_na).into(mNormalImageView);
  Glide.with(this).load(WeatherIconUtils.getWeatherBlurBg(type)).placeholder(R.drawable.bg_na_blur).error(R.drawable.bg_na_blur).into(mBlurredImageView);
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}","/** 
 * 更新天气信息界面
 */
private void updateWeatherView(WeatherInfo weatherInfo){
  if (WeatherSpider.isEmpty(weatherInfo)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (!isVisible)   return;
  isLoaded=true;
  if (weatherInfo.isNewData())   Toast.makeText(mActivity,mCurCity.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  mNormalImageView.setImageResource(WeatherIconUtils.getWeatherNromalBg(type));
  mBlurredImageView.setImageResource(WeatherIconUtils.getWeatherBlurBg(type));
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}"
8787,"@Override public WeatherInfo workInBackground(Boolean... params) throws TaskException {
  boolean isForce=params[0];
  WeatherInfo weatherInfo=null;
  if (isNeedRequestNet() || isForce) {
    weatherInfo=loadWeatherInfoFromNetwork();
  }
 else {
    weatherInfo=loadWeatherInfoFromLocal();
  }
  return weatherInfo;
}","@Override public WeatherInfo workInBackground(Boolean... params) throws TaskException {
  boolean isForce=params[0];
  WeatherInfo weatherInfo=null;
  if (isNeedRequestNet() || isForce) {
    try {
      weatherInfo=loadWeatherInfoFromNetwork();
    }
 catch (    Exception e) {
    }
    if (WeatherSpider.isEmpty(weatherInfo)) {
      weatherInfo=loadWeatherInfoFromLocal();
      weatherInfo.setNewData(false);
    }
 else {
      weatherInfo.setNewData(true);
    }
  }
 else {
    weatherInfo=loadWeatherInfoFromLocal();
  }
  if (WeatherSpider.isEmpty(weatherInfo))   weatherInfo=loadWeatherInfoFromLocal();
  return weatherInfo;
}"
8788,"@Override public String toString(){
  return ""String_Node_Str"" + realTime + ""String_Node_Str""+ forecast+ ""String_Node_Str""+ aqi+ ""String_Node_Str""+ index+ ""String_Node_Str""+ alerts+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + isNewData + ""String_Node_Str""+ realTime+ ""String_Node_Str""+ forecast+ ""String_Node_Str""+ aqi+ ""String_Node_Str""+ index+ ""String_Node_Str""+ alerts+ ""String_Node_Str"";
}"
8789,"@Override public Fragment getItem(int position){
  ItemInfo info=mItemInfos.get(position);
  if (info.fragment == null) {
    info.fragment=new WeatherFragment(mActivity,info.city);
  }
  return info.fragment;
}","@Override public Fragment getItem(int position){
  ItemInfo info=mItemInfos.get(position);
  if (info.fragment == null) {
    info.fragment=WeatherFragment.newInstance(info.city);
  }
  return info.fragment;
}"
8790,"public WeatherPagerAdapter(BaseActivity activity){
  super(activity.getFragmentManager());
  this.mActivity=activity;
  mItemInfos=new ArrayList<ItemInfo>();
}","public WeatherPagerAdapter(BaseActivity activity){
  super(activity.getFragmentManager());
  mItemInfos=new ArrayList<ItemInfo>();
}"
8791,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mContentResolver=getActivity().getContentResolver();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mActivity=(MainActivity)getActivity();
  mContentResolver=getActivity().getContentResolver();
}"
8792,"private void loadWeatherInfoFromLocal(){
  if (mCurCity == null)   return;
  try {
    mWeatherInfo=WeatherSpider.getWeatherInfo(mActivity,mCurCity.getPostID(),mCurCity.getWeatherInfoStr());
    if (!WeatherSpider.isEmpty(mWeatherInfo)) {
      updateWeatherView();
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","private void loadWeatherInfoFromLocal(){
  if (mCurCity == null)   return;
  if (isVisible && !mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.setRefreshing();
  try {
    mWeatherInfo=WeatherSpider.getWeatherInfo(mActivity,mCurCity.getPostID(),mCurCity.getWeatherInfoStr());
    if (!WeatherSpider.isEmpty(mWeatherInfo)) {
      updateWeatherView();
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  if (isVisible && mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.onRefreshComplete();
}"
8793,"@Override public void onDestroyView(){
  super.onDestroyView();
  if (isNeedDestroy()) {
    mRootView=null;
    isVisible=false;
    isPrepared=false;
    isLoaded=false;
    mAsynState=AsynTaskState.INIT;
  }
}","@Override public void onDestroyView(){
  super.onDestroyView();
  Log.i(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + mCurCity.getName());
  if (isNeedDestroy()) {
    mRootView=null;
    isVisible=false;
    isPrepared=false;
    isLoaded=false;
  }
  mAsynState=AsynTaskState.INIT;
}"
8794,"private void getWeather(final String postID){
  mAsynState=AsynTaskState.PROCESSING;
  mPullRefreshScrollView.setRefreshing();
  StringRequest sr=new StringRequest(String.format(WEATHER_ALL,postID),new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      mAsynState=AsynTaskState.RPOCESSED;
      mPullRefreshScrollView.onRefreshComplete();
      try {
        WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
        if (!WeatherSpider.isEmpty(weatherInfo)) {
          mWeatherInfo=weatherInfo;
          isLoaded=true;
          if (getActivity() != null)           Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
          save2Database(postID,response);
          updateWeatherView();
        }
 else {
          if (getActivity() != null)           Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
        if (getActivity() != null)         Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      }
      mAsynState=AsynTaskState.COMPLETE;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      mAsynState=AsynTaskState.RPOCESSED;
      mPullRefreshScrollView.onRefreshComplete();
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      mAsynState=AsynTaskState.COMPLETE;
    }
  }
);
  sr.setTag(postID);
  App.getVolleyRequestQueue().add(sr);
}","private void getWeather(final String postID){
  mAsynState=AsynTaskState.PROCESSING;
  if (!mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.setRefreshing();
  StringRequest sr=new StringRequest(String.format(WEATHER_ALL,postID),new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      mAsynState=AsynTaskState.RPOCESSED;
      if (mPullRefreshScrollView.isRefreshing())       mPullRefreshScrollView.onRefreshComplete();
      try {
        WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
        if (!WeatherSpider.isEmpty(weatherInfo)) {
          mWeatherInfo=weatherInfo;
          isLoaded=true;
          if (getActivity() != null)           Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
          save2Database(postID,response);
          updateWeatherView();
        }
 else {
          if (getActivity() != null)           Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
        if (getActivity() != null)         Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      }
      mAsynState=AsynTaskState.COMPLETE;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      mAsynState=AsynTaskState.RPOCESSED;
      if (mPullRefreshScrollView.isRefreshing())       mPullRefreshScrollView.onRefreshComplete();
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      mAsynState=AsynTaskState.COMPLETE;
    }
  }
);
  sr.setTag(postID);
  App.getVolleyRequestQueue().add(sr);
}"
8795,"public WeatherFragment(BaseActivity activity,City city){
  mActivity=activity;
  mCurCity=city;
}","public WeatherFragment(){
}"
8796,"/** 
 * 在Fragment可见时进行判断是否载入数据
 */
private void onLoadedData(){
  if (!isPrepared)   return;
  if (isLoaded) {
    updateWeatherView();
  }
 else {
switch (mAsynState) {
case INIT:
      if (isNeedRequestNet()) {
        mAsynState=AsynTaskState.PROCESSING;
        getWeather(mCurCity.getPostID());
        if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING)         mPullRefreshScrollView.setRefreshing();
      }
 else {
        loadWeatherInfoFromLocal();
      }
    break;
case PROCESSING:
  if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING)   mPullRefreshScrollView.setRefreshing();
break;
case RPOCESSED:
if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING) mPullRefreshScrollView.setRefreshing();
break;
case COMPLETE:
updateWeatherView();
break;
}
}
}","/** 
 * 在Fragment可见时进行判断是否载入数据
 */
private void onLoadedData(){
  mCurCity=getArguments().getParcelable(ARG_CITY);
  Log.i(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + mCurCity.getName() + ""String_Node_Str""+ isLoaded+ ""String_Node_Str""+ mAsynState+ ""String_Node_Str""+ isPrepared+ ""String_Node_Str""+ isVisible);
  if (!isPrepared)   return;
  if (isLoaded) {
    updateWeatherView();
  }
 else {
switch (mAsynState) {
case INIT:
      if (isNeedRequestNet()) {
        getWeather(mCurCity.getPostID());
      }
 else {
        loadWeatherInfoFromLocal();
      }
    break;
case PROCESSING:
case RPOCESSED:
  if (!mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.setRefreshing();
break;
case COMPLETE:
updateWeatherView();
break;
}
}
}"
8797,"@Override public void onResponse(String response){
  mAsynState=AsynTaskState.RPOCESSED;
  mPullRefreshScrollView.onRefreshComplete();
  try {
    WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
    if (!WeatherSpider.isEmpty(weatherInfo)) {
      mWeatherInfo=weatherInfo;
      isLoaded=true;
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      save2Database(postID,response);
      updateWeatherView();
    }
 else {
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
    if (getActivity() != null)     Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
  }
  mAsynState=AsynTaskState.COMPLETE;
}","@Override public void onResponse(String response){
  mAsynState=AsynTaskState.RPOCESSED;
  if (mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.onRefreshComplete();
  try {
    WeatherInfo weatherInfo=WeatherSpider.getWeatherInfo(mActivity,postID,response);
    if (!WeatherSpider.isEmpty(weatherInfo)) {
      mWeatherInfo=weatherInfo;
      isLoaded=true;
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
      save2Database(postID,response);
      updateWeatherView();
    }
 else {
      if (getActivity() != null)       Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
    if (getActivity() != null)     Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
  }
  mAsynState=AsynTaskState.COMPLETE;
}"
8798,"/** 
 * 更新天气信息界面
 */
private void updateWeatherView(){
  WeatherInfo weatherInfo=mWeatherInfo;
  if (WeatherSpider.isEmpty(weatherInfo)) {
    return;
  }
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  mNormalImageView.setImageResource(WeatherIconUtils.getWeatherNromalBg(type));
  mBlurredImageView.setImageResource(WeatherIconUtils.getWeatherBlurBg(type));
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}","/** 
 * 更新天气信息界面
 */
private void updateWeatherView(){
  WeatherInfo weatherInfo=mWeatherInfo;
  if (WeatherSpider.isEmpty(weatherInfo)) {
    return;
  }
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  mNormalImageView.setImageBitmap(SystemUtils.readBitMap(mActivity,WeatherIconUtils.getRawNromalBg(type)));
  mBlurredImageView.setImageBitmap(SystemUtils.readBitMap(mActivity,WeatherIconUtils.getRawBlurBg(type)));
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}"
8799,"private boolean isNeedRequestNet(){
  int netState=NetUtil.getNetworkState(getActivity());
  if (netState == NetUtil.NETWORN_NONE) {
    return false;
  }
  long refreshTime=getRefreshTime();
  if (netState == NetUtil.NETWORN_WIFI) {
    return ((System.currentTimeMillis() - refreshTime) > (1000 * 60 * 30));
  }
  if (netState == NetUtil.NETWORN_MOBILE) {
    return ((System.currentTimeMillis() - refreshTime) > (1000 * 60 * 60* 2));
  }
  return false;
}","private boolean isNeedRequestNet(){
  int netState=NetUtil.getNetworkState(getActivity());
  if (netState == NetUtil.NETWORN_NONE) {
    return false;
  }
  long refreshTime=getRefreshTime();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mCurCity.getName() + ""String_Node_Str""+ refreshTime+ ""String_Node_Str""+ (System.currentTimeMillis() - refreshTime) / (1000 * 60) + ""String_Node_Str"");
  if (netState == NetUtil.NETWORN_WIFI) {
    return ((System.currentTimeMillis() - refreshTime) > (1000 * 60 * 30));
  }
  if (netState == NetUtil.NETWORN_MOBILE) {
    return ((System.currentTimeMillis() - refreshTime) > (1000 * 60 * 60* 2));
  }
  return false;
}"
8800,"/** 
 * 不提供覆写，需监听可见性的子类可覆写  {@link #onFragmentVisible()}和  {@link #onFragmentInvisible()}方法
 * @param isVisibleToUser 当前Fragment的可见性
 */
@Override public final void setUserVisibleHint(boolean isVisibleToUser){
  super.setUserVisibleHint(isVisibleToUser);
  isVisible=isVisibleToUser;
  if (getUserVisibleHint()) {
    onLoadedData();
  }
 else {
  }
}","/** 
 * 不提供覆写，需监听可见性的子类可覆写  {@link #onFragmentVisible()}和  {@link #onFragmentInvisible()}方法
 * @param isVisibleToUser 当前Fragment的可见性
 */
@Override public final void setUserVisibleHint(boolean isVisibleToUser){
  super.setUserVisibleHint(isVisibleToUser);
  isVisible=isVisibleToUser;
  if (getUserVisibleHint()) {
    onLoadedData();
  }
 else {
    if (mPullRefreshScrollView != null && mPullRefreshScrollView.isRefreshing())     mPullRefreshScrollView.onRefreshComplete();
  }
}"
8801,"/** 
 * 更新背景模糊度和移动距离
 * @param scrollPosition
 */
private void onNewScroll(int scrollPosition){
  if (scrollPosition == 0) {
    mPullRefreshScrollView.setMode(Mode.PULL_FROM_START);
  }
 else {
    if (mPullRefreshScrollView.getState() == State.RESET) {
      mPullRefreshScrollView.setMode(Mode.DISABLED);
    }
 else     if (scrollPosition > mHeaderHeight / 2) {
      mPullRefreshScrollView.onRefreshComplete();
      App.getVolleyRequestQueue().cancelAll(mCurCity.getPostID());
    }
  }
  float ratio=Math.min(1.5f * (-mListHeaderView.getTop()) / mHeaderHeight,1.0f);
  mBlurredImageView.setAlpha(ratio);
  int dampedScroll=Math.round(scrollPosition * 0.125f);
  int offset=mLastDampedScroll - dampedScroll;
  mBlurredImageView.offsetTopAndBottom(offset);
  mNormalImageView.offsetTopAndBottom(offset);
  mLastDampedScroll=dampedScroll;
}","/** 
 * 更新背景模糊度和移动距离
 * @param scrollPosition
 */
private void onNewScroll(int scrollPosition){
  if (scrollPosition == 0) {
    mPullRefreshScrollView.setMode(Mode.PULL_FROM_START);
  }
 else {
    if (mPullRefreshScrollView.getState() == State.RESET) {
      mPullRefreshScrollView.setMode(Mode.DISABLED);
    }
 else     if (scrollPosition > mHeaderHeight / 2) {
      if (mPullRefreshScrollView.isRefreshing()) {
        mPullRefreshScrollView.onRefreshComplete();
        App.getVolleyRequestQueue().cancelAll(mCurCity.getPostID());
      }
    }
  }
  float ratio=Math.min(1.5f * (-mListHeaderView.getTop()) / mHeaderHeight,1.0f);
  mBlurredImageView.setAlpha(ratio);
  int dampedScroll=Math.round(scrollPosition * 0.125f);
  int offset=mLastDampedScroll - dampedScroll;
  mBlurredImageView.offsetTopAndBottom(offset);
  mNormalImageView.offsetTopAndBottom(offset);
  mLastDampedScroll=dampedScroll;
}"
8802,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (mRootView == null) {
    mRootView=inflater.inflate(R.layout.weather_fragment,container,false);
    initViews(mRootView);
    isPrepared=true;
    isLoaded=false;
    if (isVisible) {
      if (isNeedRequestNet()) {
        getWeather(mCurCity.getPostID());
      }
 else {
        loadWeatherInfoFromLocal();
      }
    }
 else {
      loadWeatherInfoFromLocal();
    }
  }
 else {
    ViewGroup mRootParent=(ViewGroup)mRootView.getParent();
    if (mRootParent != null) {
      mRootParent.removeView(mRootView);
    }
    if (isLoaded) {
      updateWeatherView();
    }
 else {
      if (isVisible) {
switch (mAsynState) {
case INIT:
          if (isNeedRequestNet()) {
            mAsynState=AsynTaskState.PROCESSING;
            getWeather(mCurCity.getPostID());
            if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING)             mPullRefreshScrollView.setRefreshing();
          }
 else {
            loadWeatherInfoFromLocal();
          }
        break;
case PROCESSING:
      if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING)       mPullRefreshScrollView.setRefreshing();
    break;
case RPOCESSED:
  if (mPullRefreshScrollView.getState() != State.MANUAL_REFRESHING)   mPullRefreshScrollView.setRefreshing();
break;
case COMPLETE:
updateWeatherView();
break;
}
}
 else {
}
}
}
return mRootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mCurCity=getArguments().getParcelable(ARG_CITY);
  Log.i(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + mCurCity.getName() + ""String_Node_Str""+ mRootView+ ""String_Node_Str""+ isVisible+ ""String_Node_Str""+ isLoaded);
  if (mRootView == null) {
    mRootView=inflater.inflate(R.layout.weather_fragment,container,false);
    initViews(mRootView);
    isPrepared=true;
    isLoaded=false;
    if (isVisible) {
      if (isNeedRequestNet()) {
        getWeather(mCurCity.getPostID());
      }
 else {
        loadWeatherInfoFromLocal();
      }
    }
 else {
      loadWeatherInfoFromLocal();
    }
  }
 else {
    ViewGroup mRootParent=(ViewGroup)mRootView.getParent();
    if (mRootParent != null) {
      mRootParent.removeView(mRootView);
    }
    if (isLoaded) {
      updateWeatherView();
    }
 else {
      if (isVisible) {
switch (mAsynState) {
case INIT:
          if (isNeedRequestNet()) {
            getWeather(mCurCity.getPostID());
          }
 else {
            loadWeatherInfoFromLocal();
          }
        break;
case PROCESSING:
case RPOCESSED:
      if (!mPullRefreshScrollView.isRefreshing())       mPullRefreshScrollView.setRefreshing();
    break;
case COMPLETE:
  updateWeatherView();
break;
}
}
 else {
}
}
}
return mRootView;
}"
8803,"@Override public void onErrorResponse(VolleyError error){
  mAsynState=AsynTaskState.RPOCESSED;
  mPullRefreshScrollView.onRefreshComplete();
  if (getActivity() != null)   Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
  mAsynState=AsynTaskState.COMPLETE;
}","@Override public void onErrorResponse(VolleyError error){
  mAsynState=AsynTaskState.RPOCESSED;
  if (mPullRefreshScrollView.isRefreshing())   mPullRefreshScrollView.onRefreshComplete();
  if (getActivity() != null)   Toast.makeText(getActivity(),""String_Node_Str"" + mCurCity.getName(),Toast.LENGTH_SHORT).show();
  mAsynState=AsynTaskState.COMPLETE;
}"
8804,"private void updateUI(){
  L.i(""String_Node_Str"");
  if (mTmpCities.isEmpty()) {
    visibleAddCityBtn();
    return;
  }
  mFragmentAdapter=new WeatherPagerAdapter(this);
  mFragmentAdapter.addAllItems(mTmpCities);
  mMainViewPager.setAdapter(mFragmentAdapter);
  mMainViewPager.setOffscreenPageLimit(mFragmentAdapter.getCount() - 1);
  mCirclePageIndicator.setViewPager(mMainViewPager);
  mCirclePageIndicator.setOnPageChangeListener(this);
  mMenuAdapter.addContent(mTmpCities);
  if (mAddCityBtn.getVisibility() == View.VISIBLE)   mAddCityBtn.setVisibility(View.GONE);
  if (mTmpCities.size() > 1)   mCirclePageIndicator.setVisibility(View.VISIBLE);
 else   mCirclePageIndicator.setVisibility(View.GONE);
  mShareBtn.setEnabled(true);
  int defaultTab=PreferenceUtils.getPrefInt(this,INSTANCESTATE_TAB,0);
  if (defaultTab > (mTmpCities.size() - 1))   defaultTab=0;
  mMainViewPager.setCurrentItem(defaultTab,true);
  mTitleTextView.setText(mFragmentAdapter.getPageTitle(defaultTab));
  if (mTmpCities.get(defaultTab).getIsLocation())   mLocationIV.setVisibility(View.VISIBLE);
 else   mLocationIV.setVisibility(View.GONE);
}","private void updateUI(){
  L.i(""String_Node_Str"");
  if (mTmpCities.isEmpty()) {
    visibleAddCityBtn();
    return;
  }
  mFragmentAdapter.addAllItems(mTmpCities);
  mMenuAdapter.addContent(mTmpCities);
  if (mAddCityBtn.getVisibility() == View.VISIBLE)   mAddCityBtn.setVisibility(View.GONE);
  if (mTmpCities.size() > 1)   mCirclePageIndicator.setVisibility(View.VISIBLE);
 else   mCirclePageIndicator.setVisibility(View.GONE);
  mShareBtn.setEnabled(true);
  int defaultTab=PreferenceUtils.getPrefInt(this,INSTANCESTATE_TAB,0);
  if (defaultTab > (mTmpCities.size() - 1))   defaultTab=0;
  mMainViewPager.setCurrentItem(defaultTab,true);
  mTitleTextView.setText(mFragmentAdapter.getPageTitle(defaultTab));
  if (mTmpCities.get(defaultTab).getIsLocation())   mLocationIV.setVisibility(View.VISIBLE);
 else   mLocationIV.setVisibility(View.GONE);
}"
8805,"@Override protected void onPause(){
  super.onPause();
  PreferenceUtils.setPrefInt(this,INSTANCESTATE_TAB,mMainViewPager.getCurrentItem());
  if (mFragmentAdapter != null)   mFragmentAdapter.clearItems();
}","@Override protected void onPause(){
  super.onPause();
  PreferenceUtils.setPrefInt(this,INSTANCESTATE_TAB,mMainViewPager.getCurrentItem());
}"
8806,"private void initViews(){
  setSwipeBackEnable(false);
  mBlurImageView=(ImageView)findViewById(R.id.blur_overlay_img);
  mRootView=(FrameLayout)findViewById(R.id.root_view);
  mAddCityBtn=(Button)findViewById(R.id.add_city_btn);
  mAddCityBtn.setOnClickListener(this);
  mTitleTextView=(TextView)findViewById(R.id.location_city_textview);
  mLocationIV=(ImageView)findViewById(R.id.curr_loc_icon);
  mMainViewPager=(ViewPager)findViewById(R.id.main_viewpager);
  mCirclePageIndicator=(CirclePageIndicator)findViewById(R.id.indicator);
  mTitleTextView.setOnClickListener(this);
  findViewById(R.id.sidebarButton).setOnClickListener(this);
  mShareBtn=(ImageView)findViewById(R.id.shareButton);
  mShareBtn.setOnClickListener(this);
}","private void initViews(){
  setSwipeBackEnable(false);
  mBlurImageView=(ImageView)findViewById(R.id.blur_overlay_img);
  mRootView=(FrameLayout)findViewById(R.id.root_view);
  mAddCityBtn=(Button)findViewById(R.id.add_city_btn);
  mAddCityBtn.setOnClickListener(this);
  mTitleTextView=(TextView)findViewById(R.id.location_city_textview);
  mLocationIV=(ImageView)findViewById(R.id.curr_loc_icon);
  mMainViewPager=(ViewPager)findViewById(R.id.main_viewpager);
  mFragmentAdapter=new WeatherPagerAdapter(this);
  mMainViewPager.setAdapter(mFragmentAdapter);
  mCirclePageIndicator=(CirclePageIndicator)findViewById(R.id.indicator);
  mCirclePageIndicator.setViewPager(mMainViewPager);
  mCirclePageIndicator.setOnPageChangeListener(this);
  mTitleTextView.setOnClickListener(this);
  findViewById(R.id.sidebarButton).setOnClickListener(this);
  mShareBtn=(ImageView)findViewById(R.id.shareButton);
  mShareBtn.setOnClickListener(this);
}"
8807,"/** 
 * Method that sets the current page position.
 * @param currentPage The current page.
 */
public void setCurrentPage(final int currentPage){
  mCurrentPage=currentPage;
}","/** 
 * Method that sets the current page position.
 * @param currentPage The current page.
 */
public void setCurrentPage(final int currentPage){
  mCurrentPage=currentPage;
  Log.i(""String_Node_Str"",""String_Node_Str"" + currentPage);
  if (mCurrentPage < 0 || mCurrentPage >= getCount())   return;
  final WeakReference<Fragment> weakFragment=mFragmentArray.get(currentPage);
  Log.i(""String_Node_Str"",""String_Node_Str"" + weakFragment);
  if (weakFragment != null && weakFragment.get() != null) {
    WeatherFragment fragment=(WeatherFragment)weakFragment.get();
    Log.i(""String_Node_Str"",""String_Node_Str"" + fragment);
    fragment.refreshUI();
  }
}"
8808,"@Override protected void onResume(){
  super.onResume();
  mTmpCities=getTmpCities();
  if (!mTmpCities.isEmpty()) {
    updateUI();
  }
 else {
    startActivity(new Intent(MainActivity.this,QueryCityActivity.class));
  }
}","@Override protected void onResume(){
  super.onResume();
  mTmpCities=getTmpCities();
  if (!mTmpCities.isEmpty()) {
    updateUI();
  }
 else {
    if (PreferenceUtils.getPrefBoolean(this,FIRST_RUN_APP,true)) {
      startActivity(new Intent(MainActivity.this,QueryCityActivity.class));
      PreferenceUtils.setPrefBoolean(this,FIRST_RUN_APP,false);
    }
  }
}"
8809,"public CharSequence formatBigMessage(String city){
  final TextAppearanceSpan notificationSubjectSpan=new TextAppearanceSpan(this,R.style.NotificationPrimaryText);
  final String message=!TextUtils.isEmpty(city) ? city : ""String_Node_Str"";
  String afterStr=""String_Node_Str"";
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(city);
  if (!TextUtils.isEmpty(afterStr)) {
    spannableStringBuilder.append(afterStr);
    spannableStringBuilder.setSpan(notificationSubjectSpan,city.length(),city.length() + afterStr.length(),0);
  }
  return spannableStringBuilder;
}","public CharSequence formatBigMessage(String city){
  final TextAppearanceSpan notificationSubjectSpan=new TextAppearanceSpan(this,R.style.NotificationPrimaryText);
  final String message=!TextUtils.isEmpty(city) ? city : ""String_Node_Str"";
  String afterStr=""String_Node_Str"";
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(message);
  if (!TextUtils.isEmpty(afterStr)) {
    spannableStringBuilder.append(afterStr);
    spannableStringBuilder.setSpan(notificationSubjectSpan,message.length(),message.length() + afterStr.length(),0);
  }
  return spannableStringBuilder;
}"
8810,"/** 
 * 更新天气信息界面
 */
private void updateWeatherView(WeatherInfo weatherInfo){
  if (WeatherSpider.isEmpty(weatherInfo)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (!isVisible)   return;
  isLoaded=true;
  if (weatherInfo.isNewData())   Toast.makeText(mActivity,mCurCity.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  mNormalImageView.setImageResource(WeatherIconUtils.getWeatherNromalBg(type));
  mBlurredImageView.setImageResource(WeatherIconUtils.getWeatherBlurBg(type));
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}","/** 
 * 更新天气信息界面
 */
private void updateWeatherView(WeatherInfo weatherInfo){
  if (WeatherSpider.isEmpty(weatherInfo)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (!isVisible)   return;
  isLoaded=true;
  if (weatherInfo.isNewData())   Toast.makeText(mActivity,mCurCity.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  RealTime realTime=weatherInfo.getRealTime();
  AQI aqi=weatherInfo.getAqi();
  Forecast forecast=weatherInfo.getForecast();
  Index index=weatherInfo.getIndex();
  int type=realTime.getAnimation_type();
  mNormalImageView.setImageResource(WeatherIconUtils.getWeatherNromalBg(type));
  mBlurredImageView.setImageResource(WeatherIconUtils.getWeatherBlurBg(type));
  mCurWeatherIV.setImageResource(WeatherIconUtils.getWeatherIcon(type));
  mCurWeatherTV.setText(realTime.getWeather_name());
  mCurFeelsTempTV.setText(realTime.getTemp() + ""String_Node_Str"");
  mCurHighTempTV.setText(forecast.getTmpHigh(1) + ""String_Node_Str"");
  mCurLowTempTV.setText(forecast.getTmpLow(1) + ""String_Node_Str"");
  mCurWeatherCopyTV.setText(TimeUtils.getDay(realTime.getPub_time()) + ""String_Node_Str"");
  mWeatherAdapter.setWeather(realTime,aqi,forecast,index);
}"
8811,"/** 
 * 初始化所有的view
 * @param view
 */
private void initViews(View view){
  mListView=(ListView)view.findViewById(R.id.drag_list);
  mNormalImageView=(ImageView)view.findViewById(R.id.weather_background);
  mBlurredImageView=(ImageView)view.findViewById(R.id.weather_background_blurred);
  mBlurredImageView.setAlpha(0f);
  mPullRefreshScrollView=(PullToRefreshScrollView)view.findViewById(R.id.pull_refresh_scrollview);
  mPullRefreshScrollView.setOnRefreshListener(this);
  mPullRefreshScrollView.setOnPullEventListener(this);
  mListHeaderView=LayoutInflater.from(getActivity()).inflate(R.layout.weather_current_condition,null);
  int displayHeight=SystemUtils.getDisplayHeight(getActivity());
  mHeaderHeight=displayHeight - getResources().getDimensionPixelSize(R.dimen.abs__action_bar_default_height);
  mListHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,mHeaderHeight));
  int backgroundHeight=displayHeight + mHeaderHeight / 8;
  mNormalImageView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,backgroundHeight));
  mBlurredImageView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,backgroundHeight));
  mListView.addHeaderView(mListHeaderView,null,false);
  mListView.setOnScrollListener(mOnScrollListener);
  initCurWeatherViews(view);
}","/** 
 * 初始化所有的view
 * @param view
 */
private void initViews(View view){
  mListView=(ListView)view.findViewById(R.id.drag_list);
  mWeatherAdapter=new WeatherListAdapter(getActivity());
  mListView.setAdapter(mWeatherAdapter);
  mNormalImageView=(ImageView)view.findViewById(R.id.weather_background);
  mBlurredImageView=(ImageView)view.findViewById(R.id.weather_background_blurred);
  mBlurredImageView.setAlpha(0f);
  mPullRefreshScrollView=(PullToRefreshScrollView)view.findViewById(R.id.pull_refresh_scrollview);
  mPullRefreshScrollView.setOnRefreshListener(this);
  mPullRefreshScrollView.setOnPullEventListener(this);
  mListHeaderView=LayoutInflater.from(getActivity()).inflate(R.layout.weather_current_condition,null);
  int displayHeight=SystemUtils.getDisplayHeight(getActivity());
  mHeaderHeight=displayHeight - getResources().getDimensionPixelSize(R.dimen.abs__action_bar_default_height);
  mListHeaderView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,mHeaderHeight));
  int backgroundHeight=displayHeight + mHeaderHeight / 8;
  mNormalImageView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,backgroundHeight));
  mBlurredImageView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,backgroundHeight));
  mListView.addHeaderView(mListHeaderView,null,false);
  mListView.setOnScrollListener(mOnScrollListener);
  initCurWeatherViews(view);
}"
8812,"@SuppressWarnings(""String_Node_Str"") public void onActivityCreate(){
  mActivity.getWindow().setBackgroundDrawable(new ColorDrawable(0));
  mActivity.getWindow().getDecorView().setBackgroundDrawable(null);
  mSwipeBackLayout=(SwipeBackLayout)LayoutInflater.from(mActivity).inflate(com.way.yahoo.R.layout.swipeback_layout,null);
  mSwipeBackLayout.addSwipeListener(new SwipeBackLayout.SwipeListener(){
    @Override public void onScrollStateChange(    int state,    float scrollPercent){
      if (state == SwipeBackLayout.STATE_IDLE && scrollPercent == 0) {
        convertActivityFromTranslucent();
      }
    }
    @Override public void onEdgeTouch(    int edgeFlag){
      convertActivityToTranslucent();
    }
    @Override public void onScrollOverThreshold(){
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public void onActivityCreate(){
  mActivity.getWindow().setBackgroundDrawable(new ColorDrawable(0));
  mActivity.getWindow().getDecorView().setBackgroundDrawable(null);
  mSwipeBackLayout=(SwipeBackLayout)LayoutInflater.from(mActivity).inflate(com.way.yahoo.R.layout.swipeback_layout,null);
  mSwipeBackLayout.addSwipeListener(new SwipeBackLayout.SwipeListener(){
    @Override public void onScrollStateChange(    int state,    float scrollPercent){
      if (state == SwipeBackLayout.STATE_IDLE && scrollPercent == 0) {
        convertActivityFromTranslucent();
      }
    }
    @Override public void onEdgeTouch(    int edgeFlag){
      convertActivityToTranslucent();
    }
    @Override public void onScrollOverThreshold(){
    }
    @Override public void onScrollLeftChange(    int left){
    }
  }
);
}"
8813,"@Override public boolean tryCaptureView(View view,int i){
  boolean ret=mDragHelper.isEdgeTouched(mEdgeFlag,i);
  if (ret) {
    if (mDragHelper.isEdgeTouched(EDGE_LEFT,i)) {
      mTrackingEdge=EDGE_LEFT;
    }
 else     if (mDragHelper.isEdgeTouched(EDGE_RIGHT,i)) {
      mTrackingEdge=EDGE_RIGHT;
    }
 else     if (mDragHelper.isEdgeTouched(EDGE_BOTTOM,i)) {
      mTrackingEdge=EDGE_BOTTOM;
    }
    if (mListeners != null && !mListeners.isEmpty()) {
      for (      SwipeListener listener : mListeners) {
        listener.onEdgeTouch(mTrackingEdge);
      }
    }
    mIsScrollOverValid=true;
  }
  return ret;
}","@Override public boolean tryCaptureView(View view,int i){
  boolean ret=mDragHelper.isEdgeTouched(mEdgeFlag,i);
  if (ret) {
    if (mDragHelper.isEdgeTouched(EDGE_LEFT,i)) {
      mTrackingEdge=EDGE_LEFT;
    }
 else     if (mDragHelper.isEdgeTouched(EDGE_RIGHT,i)) {
      mTrackingEdge=EDGE_RIGHT;
    }
 else     if (mDragHelper.isEdgeTouched(EDGE_BOTTOM,i)) {
      mTrackingEdge=EDGE_BOTTOM;
    }
    if (mListeners != null && !mListeners.isEmpty()) {
      for (      SwipeListener listener : mListeners) {
        listener.onEdgeTouch(mTrackingEdge);
      }
    }
    mIsScrollOverValid=true;
  }
  boolean directionCheck=false;
  if (mEdgeFlag == EDGE_LEFT || mEdgeFlag == EDGE_RIGHT) {
    directionCheck=!mDragHelper.checkTouchSlop(ViewDragHelper.DIRECTION_VERTICAL,i);
  }
 else   if (mEdgeFlag == EDGE_BOTTOM) {
    directionCheck=!mDragHelper.checkTouchSlop(ViewDragHelper.DIRECTION_HORIZONTAL,i);
  }
 else   if (mEdgeFlag == EDGE_ALL) {
    directionCheck=true;
  }
  return ret & directionCheck;
}"
8814,"@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  super.onViewPositionChanged(changedView,left,top,dx,dy);
  if ((mTrackingEdge & EDGE_LEFT) != 0) {
    mScrollPercent=Math.abs((float)left / (mContentView.getWidth() + mShadowLeft.getIntrinsicWidth()));
  }
 else   if ((mTrackingEdge & EDGE_RIGHT) != 0) {
    mScrollPercent=Math.abs((float)left / (mContentView.getWidth() + mShadowRight.getIntrinsicWidth()));
  }
 else   if ((mTrackingEdge & EDGE_BOTTOM) != 0) {
    mScrollPercent=Math.abs((float)top / (mContentView.getHeight() + mShadowBottom.getIntrinsicHeight()));
  }
  mContentLeft=left;
  mContentTop=top;
  invalidate();
  if (mScrollPercent < mScrollThreshold && !mIsScrollOverValid) {
    mIsScrollOverValid=true;
  }
  if (mListeners != null && !mListeners.isEmpty() && mDragHelper.getViewDragState() == STATE_DRAGGING && mScrollPercent >= mScrollThreshold && mIsScrollOverValid) {
    mIsScrollOverValid=false;
    for (    SwipeListener listener : mListeners) {
      listener.onScrollOverThreshold();
    }
  }
  if (mScrollPercent >= 1) {
    if (!mActivity.isFinishing())     mActivity.finish();
  }
}","@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  for (  SwipeListener listener : mListeners) {
    listener.onScrollLeftChange(left);
  }
  super.onViewPositionChanged(changedView,left,top,dx,dy);
  if ((mTrackingEdge & EDGE_LEFT) != 0) {
    mScrollPercent=Math.abs((float)left / (mContentView.getWidth() + mShadowLeft.getIntrinsicWidth()));
  }
 else   if ((mTrackingEdge & EDGE_RIGHT) != 0) {
    mScrollPercent=Math.abs((float)left / (mContentView.getWidth() + mShadowRight.getIntrinsicWidth()));
  }
 else   if ((mTrackingEdge & EDGE_BOTTOM) != 0) {
    mScrollPercent=Math.abs((float)top / (mContentView.getHeight() + mShadowBottom.getIntrinsicHeight()));
  }
  mContentLeft=left;
  mContentTop=top;
  invalidate();
  if (mScrollPercent < mScrollThreshold && !mIsScrollOverValid) {
    mIsScrollOverValid=true;
  }
  if (mListeners != null && !mListeners.isEmpty() && mDragHelper.getViewDragState() == STATE_DRAGGING && mScrollPercent >= mScrollThreshold && mIsScrollOverValid) {
    mIsScrollOverValid=false;
    for (    SwipeListener listener : mListeners) {
      listener.onScrollOverThreshold();
    }
  }
  if (mScrollPercent >= 1) {
    if (!mActivity.isFinishing()) {
      mActivity.finish();
      mActivity.overridePendingTransition(0,0);
    }
  }
}"
8815,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private String fullContent(Notification notification,Context context,List<String> texts,String text){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  ViewGroup localView=(ViewGroup)inflater.inflate(notification.bigContentView.getLayoutId(),null);
  notification.bigContentView.reapply(context.getApplicationContext(),localView);
  ArrayList<View> allChildren=getAllChildren(localView);
  String viewTexts=""String_Node_Str"";
  for (  View view : allChildren) {
    if (view instanceof TextView) {
      Mlog.d(logTag,view.getClass().getSimpleName());
      String mText=String.valueOf(((TextView)view).getText());
      Mlog.d(logTag,mText);
      if (!mText.equals(texts.get(0)) && mText.length() > 1 && !mText.matches(""String_Node_Str"") && !view.getClass().getSimpleName().equals(""String_Node_Str"")) {
        if (mText.startsWith(texts.get(0))) {
          mText=mText.substring(texts.get(0).length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(1);
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
        }
        Mlog.d(logTag,mText);
        viewTexts=viewTexts.concat(mText).concat(""String_Node_Str"");
      }
    }
  }
  viewTexts=viewTexts.trim();
  if (viewTexts.length() > 1 && viewTexts.length() > 3) {
    if (viewTexts.startsWith(""String_Node_Str""))     viewTexts=viewTexts.substring(""String_Node_Str"".length());
    Mlog.d(logTag,viewTexts);
    return viewTexts.substring(0,viewTexts.length() - 1);
  }
  return null;
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private String fullContent(Notification notification,Context context,List<String> texts,String text){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  ViewGroup localView=(ViewGroup)inflater.inflate(notification.bigContentView.getLayoutId(),null);
  notification.bigContentView.reapply(context.getApplicationContext(),localView);
  ArrayList<View> allChildren=getAllChildren(localView);
  String viewTexts=""String_Node_Str"";
  for (  View view : allChildren) {
    if (view instanceof TextView) {
      Mlog.d(logTag,view.getClass().getSimpleName());
      String mText=String.valueOf(((TextView)view).getText());
      Mlog.d(logTag,mText);
      if (!mText.equals(texts.get(0)) && mText.length() > 1 && !mText.matches(""String_Node_Str"") && !view.getClass().getSimpleName().equals(""String_Node_Str"")) {
        if (mText.startsWith(texts.get(0))) {
          mText=mText.substring(texts.get(0).length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(1);
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
        }
        Mlog.d(logTag,mText);
        viewTexts=viewTexts.concat(mText).concat(""String_Node_Str"");
      }
    }
  }
  viewTexts=viewTexts.trim();
  if (viewTexts.length() > 1 && viewTexts.length() > 3) {
    Mlog.d(logTag,viewTexts);
    return viewTexts;
  }
  return null;
}"
8816,"public void handleActionAdd(Notification notification,String packageName,String tag,int id,String key,Context context,String src){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  Mlog.d(logTag,packageName);
  try {
    final Set<String> packageBlacklist=(Set<String>)ObjectSerializer.deserialize(preferences.getString(""String_Node_Str"",""String_Node_Str""));
    if (packageBlacklist != null) {
      final boolean isBlacklistInverted=preferences.getBoolean(""String_Node_Str"",false);
      final boolean contains=packageBlacklist.contains(packageName);
      if (!isBlacklistInverted && contains)       return;
 else       if (isBlacklistInverted && !contains)       return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassCastException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  if (Build.VERSION.SDK_INT >= 16) {
    Set<String> priority_settings=preferences.getStringSet(""String_Node_Str"",null);
    if (priority_settings != null) {
      if (!priority_settings.contains(String.valueOf(notification.priority))) {
        return;
      }
    }
  }
  String title=null;
  String text=null;
  if (Build.VERSION.SDK_INT >= 21) {
    for (    String extraKey : notification.extras.keySet()) {
      Mlog.d(logTag,extraKey + ""String_Node_Str"" + notification.extras.get(extraKey));
    }
    try {
      title=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    text=notification.extras.get(""String_Node_Str"").toString();
    String bigText=null;
    try {
      bigText=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    if (bigText != null && bigText.length() > 3) {
      text=bigText;
    }
  }
 else {
    List<String> texts=null;
    try {
      texts=getText(notification);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (texts == null) {
      return;
    }
    if (texts.size() > 1) {
      Mlog.d(logTag,texts.toString());
      text=texts.get(1);
    }
    if (text == null)     text=String.valueOf(notification.tickerText);
    if (texts.size() == 0)     texts.add(text);
    if (text == null || text.equals(""String_Node_Str""))     return;
    title=texts.get(0);
    if (Build.VERSION.SDK_INT >= 16) {
      if (notification.bigContentView != null) {
        try {
          Mlog.d(logTag,""String_Node_Str"");
          final String fullContent=fullContent(notification,context,texts,text);
          if (fullContent != null)           text=fullContent;
        }
 catch (        Resources.NotFoundException ignored) {
        }
catch (        RuntimeException rte) {
          try {
            Looper.prepareMainLooper();
          }
 catch (          IllegalStateException ilse) {
            try {
              fullContent(notification,context,texts,text);
              final String fullContent=fullContent(notification,context,texts,text);
              if (fullContent != null)               text=fullContent;
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
    }
  }
  Intent intent=new Intent();
  intent.setAction(ACTION_ADD);
  if (""String_Node_Str"".equals(src))   intent.setClass(context,OverlayService.class);
 else   intent.setClass(context,OverlayServiceCommon.class);
  Mlog.d(title,text);
  intent.putExtra(""String_Node_Str"",packageName);
  intent.putExtra(""String_Node_Str"",title);
  intent.putExtra(""String_Node_Str"",text);
  intent.putExtra(""String_Node_Str"",notification.contentIntent);
  if (Build.VERSION.SDK_INT >= 11)   intent.putExtra(""String_Node_Str"",notification.largeIcon);
  intent.putExtra(""String_Node_Str"",notification.icon);
  if (Build.VERSION.SDK_INT >= 21)   intent.putExtra(""String_Node_Str"",notification.color);
 else   if (Build.VERSION.SDK_INT >= 19)   intent.putExtra(""String_Node_Str"",notification.extras.getInt(""String_Node_Str""));
  intent.putExtra(""String_Node_Str"",tag);
  intent.putExtra(""String_Node_Str"",id);
  intent.putExtra(""String_Node_Str"",key);
  if (Build.VERSION.SDK_INT >= 19) {
    try {
      Notification.Action[] actions=notification.actions;
      if (actions != null) {
        intent.putExtra(""String_Node_Str"",actions.length);
        Mlog.d(logTag,String.valueOf(actions.length));
        int i=actions.length;
        for (        Notification.Action action : actions) {
          if (i < 0)           break;
          Mlog.d(logTag,action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.icon);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.actionIntent);
          i--;
        }
      }
    }
 catch (    IllegalAccessError iae) {
      Mlog.e(logTag,iae.getMessage());
    }
catch (    Exception e) {
      try {
        String report=e.getMessage();
        Writer writer=new StringWriter();
        PrintWriter printWriter=new PrintWriter(writer);
        e.printStackTrace(printWriter);
        report=report.concat(writer.toString());
        if (preferences != null) {
          SharedPreferences.Editor editor=preferences.edit();
          editor.putString(""String_Node_Str"",report);
          editor.putString(""String_Node_Str"",ObjectSerializer.serialize(e));
          editor.apply();
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
  if (preferences != null && preferences.getBoolean(""String_Node_Str"",false)) {
    Mlog.d(logTag,""String_Node_Str"");
    final Intent broadcastIntent=new Intent(ACTION_ADD).putExtras(intent.getExtras());
    if (Build.VERSION.SDK_INT >= 16)     broadcastIntent.putExtra(""String_Node_Str"",notification.priority);
    context.sendBroadcast(broadcastIntent,""String_Node_Str"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK + Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS + Intent.FLAG_ACTIVITY_NO_ANIMATION);
  context.startService(intent);
}","public void handleActionAdd(Notification notification,String packageName,String tag,int id,String key,Context context,String src){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  Mlog.d(logTag,packageName);
  try {
    final Set<String> packageBlacklist=(Set<String>)ObjectSerializer.deserialize(preferences.getString(""String_Node_Str"",""String_Node_Str""));
    if (packageBlacklist != null) {
      final boolean isBlacklistInverted=preferences.getBoolean(""String_Node_Str"",false);
      final boolean contains=packageBlacklist.contains(packageName);
      if (!isBlacklistInverted && contains)       return;
 else       if (isBlacklistInverted && !contains)       return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassCastException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  if (Build.VERSION.SDK_INT >= 16) {
    Set<String> priority_settings=preferences.getStringSet(""String_Node_Str"",null);
    if (priority_settings != null) {
      if (!priority_settings.contains(String.valueOf(notification.priority))) {
        return;
      }
    }
  }
  String title=null;
  String text=null;
  if (Build.VERSION.SDK_INT >= 21) {
    try {
      title=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    text=notification.extras.get(""String_Node_Str"").toString();
    String bigText=null;
    try {
      bigText=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    if (bigText != null && bigText.length() > 3) {
      text=bigText;
    }
  }
 else {
    List<String> texts=null;
    try {
      texts=getText(notification);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (texts == null) {
      return;
    }
    if (texts.size() > 1) {
      Mlog.d(logTag,texts.toString());
      text=texts.get(1);
    }
    if (text == null)     text=String.valueOf(notification.tickerText);
    if (texts.size() == 0)     texts.add(text);
    if (text == null || text.equals(""String_Node_Str""))     return;
    title=texts.get(0);
    if (Build.VERSION.SDK_INT >= 16) {
      if (notification.bigContentView != null) {
        try {
          Mlog.d(logTag,""String_Node_Str"");
          final String fullContent=fullContent(notification,context,texts,text);
          if (fullContent != null)           text=fullContent;
        }
 catch (        Resources.NotFoundException ignored) {
        }
catch (        RuntimeException rte) {
          try {
            Looper.prepareMainLooper();
          }
 catch (          IllegalStateException ilse) {
            try {
              fullContent(notification,context,texts,text);
              final String fullContent=fullContent(notification,context,texts,text);
              if (fullContent != null)               text=fullContent;
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
    }
  }
  Intent intent=new Intent();
  intent.setAction(ACTION_ADD);
  if (""String_Node_Str"".equals(src))   intent.setClass(context,OverlayService.class);
 else   intent.setClass(context,OverlayServiceCommon.class);
  Mlog.d(title,text);
  intent.putExtra(""String_Node_Str"",packageName);
  intent.putExtra(""String_Node_Str"",title);
  intent.putExtra(""String_Node_Str"",text);
  intent.putExtra(""String_Node_Str"",notification.contentIntent);
  if (Build.VERSION.SDK_INT >= 11)   intent.putExtra(""String_Node_Str"",notification.largeIcon);
  intent.putExtra(""String_Node_Str"",notification.icon);
  if (Build.VERSION.SDK_INT >= 21)   intent.putExtra(""String_Node_Str"",notification.color);
 else   if (Build.VERSION.SDK_INT >= 19)   intent.putExtra(""String_Node_Str"",notification.extras.getInt(""String_Node_Str""));
  intent.putExtra(""String_Node_Str"",tag);
  intent.putExtra(""String_Node_Str"",id);
  intent.putExtra(""String_Node_Str"",key);
  if (Build.VERSION.SDK_INT >= 19) {
    try {
      Notification.Action[] actions=notification.actions;
      if (actions != null) {
        intent.putExtra(""String_Node_Str"",actions.length);
        Mlog.d(logTag,String.valueOf(actions.length));
        int i=actions.length;
        for (        Notification.Action action : actions) {
          if (i < 0)           break;
          Mlog.d(logTag,action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.icon);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.actionIntent);
          i--;
        }
      }
    }
 catch (    IllegalAccessError iae) {
      Mlog.e(logTag,iae.getMessage());
    }
catch (    Exception e) {
      try {
        String report=e.getMessage();
        Writer writer=new StringWriter();
        PrintWriter printWriter=new PrintWriter(writer);
        e.printStackTrace(printWriter);
        report=report.concat(writer.toString());
        if (preferences != null) {
          SharedPreferences.Editor editor=preferences.edit();
          editor.putString(""String_Node_Str"",report);
          editor.putString(""String_Node_Str"",ObjectSerializer.serialize(e));
          editor.apply();
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
  if (preferences != null && preferences.getBoolean(""String_Node_Str"",false)) {
    Mlog.d(logTag,""String_Node_Str"");
    final Intent broadcastIntent=new Intent(ACTION_ADD).putExtras(intent.getExtras());
    if (Build.VERSION.SDK_INT >= 16)     broadcastIntent.putExtra(""String_Node_Str"",notification.priority);
    context.sendBroadcast(broadcastIntent,""String_Node_Str"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK + Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS + Intent.FLAG_ACTIVITY_NO_ANIMATION);
  context.startService(intent);
}"
8817,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private String fullContent(Notification notification,Context context,List<String> texts,String text){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  ViewGroup localView=(ViewGroup)inflater.inflate(notification.bigContentView.getLayoutId(),null);
  notification.bigContentView.reapply(context.getApplicationContext(),localView);
  ArrayList<View> allChildren=getAllChildren(localView);
  String viewTexts=""String_Node_Str"";
  for (  View view : allChildren) {
    if (view instanceof TextView) {
      Mlog.d(logTag,view.getClass().getSimpleName());
      String mText=String.valueOf(((TextView)view).getText());
      Mlog.d(logTag,mText);
      if (!mText.equals(texts.get(0)) && mText.length() > 1 && !mText.matches(""String_Node_Str"") && !view.getClass().getSimpleName().equals(""String_Node_Str"")) {
        if (mText.startsWith(texts.get(0))) {
          mText=mText.substring(texts.get(0).length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(1);
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
        }
        Mlog.d(logTag,mText);
        viewTexts=viewTexts.concat(mText).concat(""String_Node_Str"");
      }
    }
  }
  if (viewTexts.length() > 1 && viewTexts.length() > text.length()) {
    if (viewTexts.startsWith(""String_Node_Str""))     viewTexts=viewTexts.substring(""String_Node_Str"".length());
    Mlog.d(logTag,viewTexts);
    return viewTexts.substring(0,viewTexts.length() - 1);
  }
  return null;
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private String fullContent(Notification notification,Context context,List<String> texts,String text){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  ViewGroup localView=(ViewGroup)inflater.inflate(notification.bigContentView.getLayoutId(),null);
  notification.bigContentView.reapply(context.getApplicationContext(),localView);
  ArrayList<View> allChildren=getAllChildren(localView);
  String viewTexts=""String_Node_Str"";
  for (  View view : allChildren) {
    if (view instanceof TextView) {
      Mlog.d(logTag,view.getClass().getSimpleName());
      String mText=String.valueOf(((TextView)view).getText());
      Mlog.d(logTag,mText);
      if (!mText.equals(texts.get(0)) && mText.length() > 1 && !mText.matches(""String_Node_Str"") && !view.getClass().getSimpleName().equals(""String_Node_Str"")) {
        if (mText.startsWith(texts.get(0))) {
          mText=mText.substring(texts.get(0).length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(1);
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
          if (mText.startsWith(""String_Node_Str""))           mText=mText.substring(""String_Node_Str"".length());
        }
        Mlog.d(logTag,mText);
        viewTexts=viewTexts.concat(mText).concat(""String_Node_Str"");
      }
    }
  }
  viewTexts=viewTexts.trim();
  if (viewTexts.length() > 1 && viewTexts.length() > 3) {
    if (viewTexts.startsWith(""String_Node_Str""))     viewTexts=viewTexts.substring(""String_Node_Str"".length());
    Mlog.d(logTag,viewTexts);
    return viewTexts.substring(0,viewTexts.length() - 1);
  }
  return null;
}"
8818,"public LLand(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  setFocusable(true);
  PARAMS=new Params(getResources());
  setTimeOfDay();
}","public LLand(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  setFocusable(true);
  PARAMS=new Params(getResources());
  mTimeOfDay=irand(0,SKIES.length);
  if (Build.VERSION.SDK_INT >= 17)   setLayoutDirection(LAYOUT_DIRECTION_LTR);
}"
8819,"@Override public boolean onTrackballEvent(MotionEvent ev){
  if (DEBUG)   L(""String_Node_Str"",ev);
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    poke();
  return true;
case MotionEvent.ACTION_UP:
unpoke();
return true;
}
return false;
}","@Override public boolean onTrackballEvent(MotionEvent ev){
  L(""String_Node_Str"",ev);
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    poke();
  return true;
case MotionEvent.ACTION_UP:
unpoke();
return true;
}
return false;
}"
8820,"public Player(Context context){
  super(context);
  setBackgroundResource(R.drawable.android);
  if (Build.VERSION.SDK_INT >= 21) {
    getBackground().setTintMode(PorterDuff.Mode.SRC_ATOP);
    getBackground().setTint(0xFF00FF00);
    setOutlineProvider(new ViewOutlineProvider(){
      @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(      View view,      Outline outline){
        final int w=view.getWidth();
        final int h=view.getHeight();
        final int ix=(int)(w * 0.3f);
        final int iy=(int)(h * 0.2f);
        outline.setRect(ix,iy,w - ix,h - iy);
      }
    }
);
  }
}","public Player(Context context){
  super(context);
  setBackgroundResource(R.drawable.android);
  if (Build.VERSION.SDK_INT >= 21) {
    getBackground().setTintMode(PorterDuff.Mode.SRC_ATOP);
    getBackground().setTint(sColors[0]);
    setOutlineProvider(new ViewOutlineProvider(){
      @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(      View view,      Outline outline){
        final int w=view.getWidth();
        final int h=view.getHeight();
        final int ix=(int)(w * 0.3f);
        final int iy=(int)(h * 0.2f);
        outline.setRect(ix,iy,w - ix,h - iy);
      }
    }
);
  }
}"
8821,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (DEBUG)   L(""String_Node_Str"",ev);
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    poke();
  return true;
case MotionEvent.ACTION_UP:
unpoke();
return true;
}
return false;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  L(""String_Node_Str"",ev);
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    poke();
  return true;
case MotionEvent.ACTION_UP:
unpoke();
return true;
}
return false;
}"
8822,"public Params(Resources res){
  TRANSLATION_PER_SEC=res.getDimension(R.dimen.translation_per_sec);
  OBSTACLE_SPACING=res.getDimensionPixelSize(R.dimen.obstacle_spacing);
  OBSTACLE_PERIOD=(int)(OBSTACLE_SPACING / TRANSLATION_PER_SEC);
  BOOST_DV=res.getDimensionPixelSize(R.dimen.boost_dv);
  PLAYER_HIT_SIZE=res.getDimensionPixelSize(R.dimen.player_hit_size);
  PLAYER_SIZE=res.getDimensionPixelSize(R.dimen.player_size);
  OBSTACLE_WIDTH=res.getDimensionPixelSize(R.dimen.obstacle_width);
  OBSTACLE_STEM_WIDTH=res.getDimensionPixelSize(R.dimen.obstacle_stem_width);
  OBSTACLE_GAP=res.getDimensionPixelSize(R.dimen.obstacle_gap);
  OBSTACLE_MIN=res.getDimensionPixelSize(R.dimen.obstacle_height_min);
  BUILDING_HEIGHT_MIN=res.getDimensionPixelSize(R.dimen.building_height_min);
  BUILDING_WIDTH_MIN=res.getDimensionPixelSize(R.dimen.building_width_min);
  BUILDING_WIDTH_MAX=res.getDimensionPixelSize(R.dimen.building_width_max);
  CLOUD_SIZE_MIN=res.getDimensionPixelSize(R.dimen.cloud_size_min);
  CLOUD_SIZE_MAX=res.getDimensionPixelSize(R.dimen.cloud_size_max);
  STAR_SIZE_MIN=res.getDimensionPixelSize(R.dimen.star_size_min);
  STAR_SIZE_MAX=res.getDimensionPixelSize(R.dimen.star_size_max);
  G=res.getDimensionPixelSize(R.dimen.G);
  MAX_V=res.getDimensionPixelSize(R.dimen.max_v);
  SCENERY_Z=res.getDimensionPixelSize(R.dimen.scenery_z);
  OBSTACLE_Z=res.getDimensionPixelSize(R.dimen.obstacle_z);
  PLAYER_Z=res.getDimensionPixelSize(R.dimen.player_z);
  PLAYER_Z_BOOST=res.getDimensionPixelSize(R.dimen.player_z_boost);
  HUD_Z=res.getDimensionPixelSize(R.dimen.hud_z);
}","public Params(Resources res){
  TRANSLATION_PER_SEC=res.getDimension(R.dimen.translation_per_sec);
  OBSTACLE_SPACING=res.getDimensionPixelSize(R.dimen.obstacle_spacing);
  OBSTACLE_PERIOD=(int)(OBSTACLE_SPACING / TRANSLATION_PER_SEC);
  BOOST_DV=res.getDimensionPixelSize(R.dimen.boost_dv);
  PLAYER_HIT_SIZE=res.getDimensionPixelSize(R.dimen.player_hit_size);
  PLAYER_SIZE=res.getDimensionPixelSize(R.dimen.player_size);
  OBSTACLE_WIDTH=res.getDimensionPixelSize(R.dimen.obstacle_width);
  OBSTACLE_STEM_WIDTH=res.getDimensionPixelSize(R.dimen.obstacle_stem_width);
  OBSTACLE_GAP=res.getDimensionPixelSize(R.dimen.obstacle_gap);
  OBSTACLE_MIN=res.getDimensionPixelSize(R.dimen.obstacle_height_min);
  BUILDING_HEIGHT_MIN=res.getDimensionPixelSize(R.dimen.building_height_min);
  BUILDING_WIDTH_MIN=res.getDimensionPixelSize(R.dimen.building_width_min);
  BUILDING_WIDTH_MAX=res.getDimensionPixelSize(R.dimen.building_width_max);
  CLOUD_SIZE_MIN=res.getDimensionPixelSize(R.dimen.cloud_size_min);
  CLOUD_SIZE_MAX=res.getDimensionPixelSize(R.dimen.cloud_size_max);
  STAR_SIZE_MIN=res.getDimensionPixelSize(R.dimen.star_size_min);
  STAR_SIZE_MAX=res.getDimensionPixelSize(R.dimen.star_size_max);
  G=res.getDimensionPixelSize(R.dimen.G);
  MAX_V=res.getDimensionPixelSize(R.dimen.max_v);
  SCENERY_Z=res.getDimensionPixelSize(R.dimen.scenery_z);
  OBSTACLE_Z=res.getDimensionPixelSize(R.dimen.obstacle_z);
  PLAYER_Z=res.getDimensionPixelSize(R.dimen.player_z);
  PLAYER_Z_BOOST=res.getDimensionPixelSize(R.dimen.player_z_boost);
  HUD_Z=res.getDimensionPixelSize(R.dimen.hud_z);
  if (OBSTACLE_MIN <= OBSTACLE_WIDTH / 2) {
    Mlog.e(TAG,""String_Node_Str"");
    OBSTACLE_MIN=OBSTACLE_WIDTH / 2 + 1;
  }
}"
8823,"private void poke(){
  L(""String_Node_Str"");
  if (mFrozen)   return;
  if (!mAnimating) {
    reset();
    startGame(true);
  }
 else   if (!mPlaying) {
    startGame(true);
  }
  mDroid.boost();
  if (DEBUG) {
    mDroid.dv*=DEBUG_SPEED_MULTIPLIER;
    mDroid.animate().setDuration((long)(200 / DEBUG_SPEED_MULTIPLIER));
  }
}","private void poke(){
  L(""String_Node_Str"");
  if (mFrozen)   return;
  if (!mAnimating) {
    reset();
    start(true);
  }
 else   if (!mPlaying) {
    start(true);
  }
  mDroid.boost();
  if (DEBUG) {
    mDroid.dv*=DEBUG_SPEED_MULTIPLIER;
    mDroid.animate().setDuration((long)(200 / DEBUG_SPEED_MULTIPLIER));
  }
}"
8824,"public Pop(Context context,float h){
  super(context,h);
  int idx=2 * irand(0,POPS.length / 2);
  setBackgroundResource(POPS[idx]);
  setScaleX(frand() < 0.5f ? -1 : 1);
  mRotate=POPS[idx + 1] == 0 ? 0 : (frand() < 0.5f ? -1 : 1);
  if (Build.VERSION.SDK_INT >= 21) {
    setOutlineProvider(new ViewOutlineProvider(){
      @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(      View view,      Outline outline){
        final int pad=(int)(getWidth() * 0.02f);
        outline.setOval(pad,pad,getWidth() - pad,getHeight() - pad);
      }
    }
);
  }
}","public Pop(Context context,float h){
  super(context,h);
  int idx=3 * irand(0,POPS.length / 3);
  setBackgroundResource(POPS[idx]);
  setAlpha((float)(POPS[idx + 2]) / 255);
  setScaleX(frand() < 0.5f ? -1 : 1);
  mRotate=POPS[idx + 1] == 0 ? 0 : (frand() < 0.5f ? -1 : 1);
  if (Build.VERSION.SDK_INT >= 21)   setOutlineProvider(new ViewOutlineProvider(){
    @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(    View view,    Outline outline){
      final int pad=(int)(getWidth() * 0.02f);
      outline.setOval(pad,pad,getWidth() - pad,getHeight() - pad);
    }
  }
);
}"
8825,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  stopGame();
  reset();
  if (AUTOSTART) {
    startGame(false);
  }
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  stop();
  reset();
  if (AUTOSTART) {
    start(false);
  }
}"
8826,"@Override public boolean onGenericMotionEvent(MotionEvent ev){
  if (DEBUG)   L(""String_Node_Str"",ev);
  return false;
}","@Override public boolean onGenericMotionEvent(MotionEvent ev){
  L(""String_Node_Str"",ev);
  return false;
}"
8827,"private void reset(){
  L(""String_Node_Str"");
  final Drawable sky=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,SKIES[mTimeOfDay]);
  sky.setDither(true);
  setBackground(sky);
  mFlipped=frand() > 0.5f;
  setScaleX(mFlipped ? -1 : 1);
  setScore(0);
  int i=getChildCount();
  while (i-- > 0) {
    final View v=getChildAt(i);
    if (v instanceof GameView) {
      removeViewAt(i);
    }
  }
  mObstaclesInPlay.clear();
  mWidth=getWidth();
  mHeight=getHeight();
  boolean showingSun=(mTimeOfDay == DAY || mTimeOfDay == SUNSET) && frand() > 0.25;
  if (showingSun) {
    final Star sun=new Star(getContext());
    sun.setBackgroundResource(R.drawable.sun);
    final int w=getResources().getDimensionPixelSize(R.dimen.sun_size);
    sun.setTranslationX(frand(w,mWidth - w));
    if (mTimeOfDay == DAY) {
      sun.setTranslationY(frand(w,(mHeight * 0.66f)));
      if (Build.VERSION.SDK_INT >= 21)       sun.getBackground().setTint(0);
    }
 else {
      sun.setTranslationY(frand(mHeight * 0.66f,mHeight - w));
      if (Build.VERSION.SDK_INT >= 21) {
        sun.getBackground().setTintMode(PorterDuff.Mode.SRC_ATOP);
        sun.getBackground().setTint(0xC0FF8000);
      }
    }
    addView(sun,new LayoutParams(w,w));
  }
  if (!showingSun) {
    final boolean dark=mTimeOfDay == NIGHT || mTimeOfDay == TWILIGHT;
    final float ff=frand();
    if ((dark && ff < 0.75f) || ff < 0.5f) {
      final Star moon=new Star(getContext());
      moon.setBackgroundResource(R.drawable.moon);
      moon.getBackground().setAlpha(dark ? 255 : 128);
      moon.setScaleX(frand() > 0.5 ? -1 : 1);
      moon.setRotation(moon.getScaleX() * frand(5,30));
      final int w=getResources().getDimensionPixelSize(R.dimen.sun_size);
      moon.setTranslationX(frand(w,mWidth - w));
      moon.setTranslationY(frand(w,mHeight - w));
      addView(moon,new LayoutParams(w,w));
    }
  }
  final int mh=mHeight / 6;
  final boolean cloudless=frand() < 0.25;
  final int N=20;
  for (i=0; i < N; i++) {
    final float r1=frand();
    final Scenery s;
    if (HAVE_STARS && r1 < 0.3 && mTimeOfDay != DAY) {
      s=new Star(getContext());
    }
 else     if (r1 < 0.6 && !cloudless) {
      s=new Cloud(getContext());
    }
 else {
      s=new Building(getContext());
      s.z=(float)i / N;
      if (Build.VERSION.SDK_INT >= 21)       s.setTranslationZ(PARAMS.SCENERY_Z * (1 + s.z));
      s.v=0.85f * s.z;
      hsv[0]=175;
      hsv[1]=0.25f;
      hsv[2]=1 * s.z;
      s.setBackgroundColor(Color.HSVToColor(hsv));
      s.h=irand(PARAMS.BUILDING_HEIGHT_MIN,mh);
    }
    final LayoutParams lp=new LayoutParams(s.w,s.h);
    if (s instanceof Building) {
      lp.gravity=Gravity.BOTTOM;
    }
 else {
      lp.gravity=Gravity.TOP;
      final float r=frand();
      if (s instanceof Star) {
        lp.topMargin=(int)(r * r * mHeight);
      }
 else {
        lp.topMargin=(int)(1 - r * r * mHeight / 2) + mHeight / 2;
      }
    }
    addView(s,lp);
    s.setTranslationX(frand(-lp.width,mWidth + lp.width));
  }
  mDroid=new Player(getContext());
  mDroid.setX(mWidth / 2);
  mDroid.setY(mHeight / 2);
  addView(mDroid,new LayoutParams(PARAMS.PLAYER_SIZE,PARAMS.PLAYER_SIZE));
  mAnim=new TimeAnimator();
  mAnim.setTimeListener(new TimeAnimator.TimeListener(){
    @Override public void onTimeUpdate(    TimeAnimator timeAnimator,    long t,    long dt){
      step(t,dt);
    }
  }
);
}","public void reset(){
  L(""String_Node_Str"");
  final Drawable sky=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,SKIES[mTimeOfDay]);
  sky.setDither(true);
  setBackground(sky);
  mFlipped=frand() > 0.5f;
  setScaleX(mFlipped ? -1 : 1);
  setScore(0);
  int i=getChildCount();
  while (i-- > 0) {
    final View v=getChildAt(i);
    if (v instanceof GameView) {
      removeViewAt(i);
    }
  }
  mObstaclesInPlay.clear();
  mWidth=getWidth();
  mHeight=getHeight();
  boolean showingSun=(mTimeOfDay == DAY || mTimeOfDay == SUNSET) && frand() > 0.25;
  if (showingSun) {
    final Star sun=new Star(getContext());
    sun.setBackgroundResource(R.drawable.sun);
    final int w=getResources().getDimensionPixelSize(R.dimen.sun_size);
    sun.setTranslationX(frand(w,mWidth - w));
    if (mTimeOfDay == DAY) {
      sun.setTranslationY(frand(w,(mHeight * 0.66f)));
      if (Build.VERSION.SDK_INT >= 21)       sun.getBackground().setTint(0);
    }
 else {
      sun.setTranslationY(frand(mHeight * 0.66f,mHeight - w));
      if (Build.VERSION.SDK_INT >= 21) {
        sun.getBackground().setTintMode(PorterDuff.Mode.SRC_ATOP);
        sun.getBackground().setTint(0xC0FF8000);
      }
    }
    addView(sun,new LayoutParams(w,w));
  }
  if (!showingSun) {
    final boolean dark=mTimeOfDay == NIGHT || mTimeOfDay == TWILIGHT;
    final float ff=frand();
    if ((dark && ff < 0.75f) || ff < 0.5f) {
      final Star moon=new Star(getContext());
      moon.setBackgroundResource(R.drawable.moon);
      moon.getBackground().setAlpha(dark ? 255 : 128);
      moon.setScaleX(frand() > 0.5 ? -1 : 1);
      moon.setRotation(moon.getScaleX() * frand(5,30));
      final int w=getResources().getDimensionPixelSize(R.dimen.sun_size);
      moon.setTranslationX(frand(w,mWidth - w));
      moon.setTranslationY(frand(w,mHeight - w));
      addView(moon,new LayoutParams(w,w));
    }
  }
  final int mh=mHeight / 6;
  final boolean cloudless=frand() < 0.25;
  final int N=20;
  for (i=0; i < N; i++) {
    final float r1=frand();
    final Scenery s;
    if (HAVE_STARS && r1 < 0.3 && mTimeOfDay != DAY) {
      s=new Star(getContext());
    }
 else     if (r1 < 0.6 && !cloudless) {
      s=new Cloud(getContext());
    }
 else {
      s=new Building(getContext());
      s.z=(float)i / N;
      if (Build.VERSION.SDK_INT >= 21)       s.setTranslationZ(PARAMS.SCENERY_Z * (1 + s.z));
      s.v=0.85f * s.z;
      hsv[0]=175;
      hsv[1]=0.25f;
      hsv[2]=1 * s.z;
      s.setBackgroundColor(Color.HSVToColor(hsv));
      s.h=irand(PARAMS.BUILDING_HEIGHT_MIN,mh);
    }
    final LayoutParams lp=new LayoutParams(s.w,s.h);
    if (s instanceof Building) {
      lp.gravity=Gravity.BOTTOM;
    }
 else {
      lp.gravity=Gravity.TOP;
      final float r=frand();
      if (s instanceof Star) {
        lp.topMargin=(int)(r * r * mHeight);
      }
 else {
        lp.topMargin=(int)(1 - r * r * mHeight / 2) + mHeight / 2;
      }
    }
    addView(s,lp);
    s.setTranslationX(frand(-lp.width,mWidth + lp.width));
  }
  mDroid=new Player(getContext());
  mDroid.setX(mWidth / 2);
  mDroid.setY(mHeight / 2);
  addView(mDroid,new LayoutParams(PARAMS.PLAYER_SIZE,PARAMS.PLAYER_SIZE));
  mAnim=new TimeAnimator();
  mAnim.setTimeListener(new TimeAnimator.TimeListener(){
    @Override public void onTimeUpdate(    TimeAnimator timeAnimator,    long t,    long dt){
      step(t,dt);
    }
  }
);
}"
8828,"@Override public boolean onKeyDown(int keyCode,KeyEvent ev){
  if (DEBUG)   L(""String_Node_Str"",keyCode);
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_SPACE:
case KeyEvent.KEYCODE_ENTER:
case KeyEvent.KEYCODE_BUTTON_A:
    poke();
  return true;
}
return false;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent ev){
  L(""String_Node_Str"",keyCode);
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_SPACE:
case KeyEvent.KEYCODE_ENTER:
case KeyEvent.KEYCODE_BUTTON_A:
    poke();
  return true;
}
return false;
}"
8829,"public boolean intersects(Player p){
  final int N=p.corners.length / 2;
  for (int i=0; i < N; i++) {
    final int x=(int)p.corners[i * 2];
    final int y=(int)p.corners[i * 2 + 1];
    final int deltaX=x - cx;
    final int deltaY=y - cy;
    final double hypot=Math.hypot(deltaX,deltaY);
    if (hypot <= r)     return true;
  }
  return false;
}","public boolean intersects(Player p){
  final int N=p.corners.length / 2;
  for (int i=0; i < N; i++) {
    final int x=(int)p.corners[i * 2];
    final int y=(int)p.corners[i * 2 + 1];
    if (Math.hypot(x - cx,y - cy) <= r)     return true;
  }
  return false;
}"
8830,"public static final void L(String s,Object... objects){
  if (DEBUG) {
    Log.d(TAG,String.format(s,objects));
  }
}","public static void L(String s,Object... objects){
  if (DEBUG) {
    Log.d(TAG,String.format(s,objects));
  }
}"
8831,"@TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(View view,Outline outline){
  outline.setRect(0,0,getWidth(),getHeight());
}","@Override public void getOutline(View view,Outline outline){
  outline.setRect(0,0,getWidth(),getHeight());
}"
8832,"@Override public void onAttachedToWindow(){
  super.onAttachedToWindow();
  setWillNotDraw(false);
  if (Build.VERSION.SDK_INT >= 21)   setOutlineProvider(new ViewOutlineProvider(){
    @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void getOutline(    View view,    Outline outline){
      outline.setRect(0,0,getWidth(),getHeight());
    }
  }
);
}","@Override public void onAttachedToWindow(){
  super.onAttachedToWindow();
  setWillNotDraw(false);
  if (Build.VERSION.SDK_INT >= 21)   setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setRect(0,0,getWidth(),getHeight());
    }
  }
);
}"
8833,"@Override public boolean onKeyUp(int keyCode,KeyEvent ev){
  if (DEBUG)   L(""String_Node_Str"",keyCode);
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_SPACE:
case KeyEvent.KEYCODE_ENTER:
case KeyEvent.KEYCODE_BUTTON_A:
    unpoke();
  return true;
}
return false;
}","@Override public boolean onKeyUp(int keyCode,KeyEvent ev){
  L(""String_Node_Str"",keyCode);
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_SPACE:
case KeyEvent.KEYCODE_ENTER:
case KeyEvent.KEYCODE_BUTTON_A:
    unpoke();
  return true;
}
return false;
}"
8834,"private void setScore(int score){
  mScore=score;
  if (mScoreField != null)   mScoreField.setText(String.valueOf(score));
}","private void setScore(int score){
  mScore=score;
  if (mScoreField != null) {
    mScoreField.setText(DEBUG_IDDQD ? ""String_Node_Str"" : String.valueOf(score));
  }
}"
8835,"public void handleActionAdd(Notification notification,String packageName,String tag,int id,String key,Context context,String src){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  Mlog.d(logTag,packageName);
  try {
    final Set<String> packageBlacklist=(Set<String>)ObjectSerializer.deserialize(preferences.getString(""String_Node_Str"",""String_Node_Str""));
    if (packageBlacklist != null) {
      final boolean isBlacklistInverted=preferences.getBoolean(""String_Node_Str"",false);
      final boolean contains=packageBlacklist.contains(packageName);
      if (!isBlacklistInverted && contains)       return;
 else       if (isBlacklistInverted && !contains)       return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassCastException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  if (Build.VERSION.SDK_INT >= 16) {
    Set<String> priority_settings=preferences.getStringSet(""String_Node_Str"",null);
    if (priority_settings != null) {
      if (!priority_settings.contains(String.valueOf(notification.priority))) {
        return;
      }
    }
  }
  String title=null;
  String text=null;
  if (Build.VERSION.SDK_INT >= 21) {
    title=notification.extras.getString(""String_Node_Str"");
    text=notification.extras.get(""String_Node_Str"").toString();
    String bigText=null;
    try {
      bigText=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    if (bigText != null && bigText.length() > 3) {
      text=bigText;
    }
  }
 else {
    List<String> texts=null;
    try {
      texts=getText(notification);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (texts == null) {
      return;
    }
    if (texts.size() > 1) {
      Mlog.d(logTag,texts.toString());
      text=texts.get(1);
    }
    if (text == null)     text=String.valueOf(notification.tickerText);
    if (texts.size() == 0)     texts.add(text);
    if (text == null || text.equals(""String_Node_Str""))     return;
    title=texts.get(0);
    if (Build.VERSION.SDK_INT >= 16) {
      if (notification.bigContentView != null) {
        try {
          Mlog.d(logTag,""String_Node_Str"");
          final String fullContent=fullContent(notification,context,texts,text);
          if (fullContent != null)           text=fullContent;
        }
 catch (        Resources.NotFoundException ignored) {
        }
catch (        RuntimeException rte) {
          try {
            Looper.prepareMainLooper();
          }
 catch (          IllegalStateException ilse) {
            try {
              fullContent(notification,context,texts,text);
              final String fullContent=fullContent(notification,context,texts,text);
              if (fullContent != null)               text=fullContent;
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
    }
  }
  Intent intent=new Intent();
  intent.setAction(ACTION_ADD);
  if (""String_Node_Str"".equals(src))   intent.setClass(context,OverlayService.class);
 else   intent.setClass(context,OverlayServiceCommon.class);
  Mlog.d(title,text);
  intent.putExtra(""String_Node_Str"",packageName);
  intent.putExtra(""String_Node_Str"",title);
  intent.putExtra(""String_Node_Str"",text);
  intent.putExtra(""String_Node_Str"",notification.contentIntent);
  if (Build.VERSION.SDK_INT >= 11)   intent.putExtra(""String_Node_Str"",notification.largeIcon);
  intent.putExtra(""String_Node_Str"",notification.icon);
  intent.putExtra(""String_Node_Str"",tag);
  intent.putExtra(""String_Node_Str"",id);
  intent.putExtra(""String_Node_Str"",key);
  if (Build.VERSION.SDK_INT >= 19) {
    try {
      Notification.Action[] actions=notification.actions;
      if (actions != null) {
        intent.putExtra(""String_Node_Str"",actions.length);
        Mlog.d(logTag,String.valueOf(actions.length));
        int i=actions.length;
        for (        Notification.Action action : actions) {
          if (i < 0)           break;
          Mlog.d(logTag,action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.icon);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.actionIntent);
          i--;
        }
      }
    }
 catch (    IllegalAccessError iae) {
      Mlog.e(logTag,iae.getMessage());
    }
catch (    Exception e) {
      try {
        String report=e.getMessage();
        Writer writer=new StringWriter();
        PrintWriter printWriter=new PrintWriter(writer);
        e.printStackTrace(printWriter);
        report=report.concat(writer.toString());
        if (preferences != null) {
          SharedPreferences.Editor editor=preferences.edit();
          editor.putString(""String_Node_Str"",report);
          editor.putString(""String_Node_Str"",ObjectSerializer.serialize(e));
          editor.apply();
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
  if (preferences != null && preferences.getBoolean(""String_Node_Str"",false)) {
    Mlog.d(logTag,""String_Node_Str"");
    final Intent broadcastIntent=new Intent(ACTION_ADD).putExtras(intent.getExtras());
    if (Build.VERSION.SDK_INT >= 16)     broadcastIntent.putExtra(""String_Node_Str"",notification.priority);
    context.sendBroadcast(broadcastIntent,""String_Node_Str"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK + Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS + Intent.FLAG_ACTIVITY_NO_ANIMATION);
  context.startService(intent);
}","public void handleActionAdd(Notification notification,String packageName,String tag,int id,String key,Context context,String src){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  Mlog.d(logTag,packageName);
  try {
    final Set<String> packageBlacklist=(Set<String>)ObjectSerializer.deserialize(preferences.getString(""String_Node_Str"",""String_Node_Str""));
    if (packageBlacklist != null) {
      final boolean isBlacklistInverted=preferences.getBoolean(""String_Node_Str"",false);
      final boolean contains=packageBlacklist.contains(packageName);
      if (!isBlacklistInverted && contains)       return;
 else       if (isBlacklistInverted && !contains)       return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassCastException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  if (Build.VERSION.SDK_INT >= 16) {
    Set<String> priority_settings=preferences.getStringSet(""String_Node_Str"",null);
    if (priority_settings != null) {
      if (!priority_settings.contains(String.valueOf(notification.priority))) {
        return;
      }
    }
  }
  String title=null;
  String text=null;
  if (Build.VERSION.SDK_INT >= 21) {
    try {
      title=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    text=notification.extras.get(""String_Node_Str"").toString();
    String bigText=null;
    try {
      bigText=notification.extras.get(""String_Node_Str"").toString();
    }
 catch (    Exception ignored) {
    }
    if (bigText != null && bigText.length() > 3) {
      text=bigText;
    }
  }
 else {
    List<String> texts=null;
    try {
      texts=getText(notification);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (texts == null) {
      return;
    }
    if (texts.size() > 1) {
      Mlog.d(logTag,texts.toString());
      text=texts.get(1);
    }
    if (text == null)     text=String.valueOf(notification.tickerText);
    if (texts.size() == 0)     texts.add(text);
    if (text == null || text.equals(""String_Node_Str""))     return;
    title=texts.get(0);
    if (Build.VERSION.SDK_INT >= 16) {
      if (notification.bigContentView != null) {
        try {
          Mlog.d(logTag,""String_Node_Str"");
          final String fullContent=fullContent(notification,context,texts,text);
          if (fullContent != null)           text=fullContent;
        }
 catch (        Resources.NotFoundException ignored) {
        }
catch (        RuntimeException rte) {
          try {
            Looper.prepareMainLooper();
          }
 catch (          IllegalStateException ilse) {
            try {
              fullContent(notification,context,texts,text);
              final String fullContent=fullContent(notification,context,texts,text);
              if (fullContent != null)               text=fullContent;
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
    }
  }
  Intent intent=new Intent();
  intent.setAction(ACTION_ADD);
  if (""String_Node_Str"".equals(src))   intent.setClass(context,OverlayService.class);
 else   intent.setClass(context,OverlayServiceCommon.class);
  Mlog.d(title,text);
  intent.putExtra(""String_Node_Str"",packageName);
  intent.putExtra(""String_Node_Str"",title);
  intent.putExtra(""String_Node_Str"",text);
  intent.putExtra(""String_Node_Str"",notification.contentIntent);
  if (Build.VERSION.SDK_INT >= 11)   intent.putExtra(""String_Node_Str"",notification.largeIcon);
  intent.putExtra(""String_Node_Str"",notification.icon);
  intent.putExtra(""String_Node_Str"",tag);
  intent.putExtra(""String_Node_Str"",id);
  intent.putExtra(""String_Node_Str"",key);
  if (Build.VERSION.SDK_INT >= 19) {
    try {
      Notification.Action[] actions=notification.actions;
      if (actions != null) {
        intent.putExtra(""String_Node_Str"",actions.length);
        Mlog.d(logTag,String.valueOf(actions.length));
        int i=actions.length;
        for (        Notification.Action action : actions) {
          if (i < 0)           break;
          Mlog.d(logTag,action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.icon);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.title);
          intent.putExtra(""String_Node_Str"" + i + ""String_Node_Str"",action.actionIntent);
          i--;
        }
      }
    }
 catch (    IllegalAccessError iae) {
      Mlog.e(logTag,iae.getMessage());
    }
catch (    Exception e) {
      try {
        String report=e.getMessage();
        Writer writer=new StringWriter();
        PrintWriter printWriter=new PrintWriter(writer);
        e.printStackTrace(printWriter);
        report=report.concat(writer.toString());
        if (preferences != null) {
          SharedPreferences.Editor editor=preferences.edit();
          editor.putString(""String_Node_Str"",report);
          editor.putString(""String_Node_Str"",ObjectSerializer.serialize(e));
          editor.apply();
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
  if (preferences != null && preferences.getBoolean(""String_Node_Str"",false)) {
    Mlog.d(logTag,""String_Node_Str"");
    final Intent broadcastIntent=new Intent(ACTION_ADD).putExtras(intent.getExtras());
    if (Build.VERSION.SDK_INT >= 16)     broadcastIntent.putExtra(""String_Node_Str"",notification.priority);
    context.sendBroadcast(broadcastIntent,""String_Node_Str"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK + Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS + Intent.FLAG_ACTIVITY_NO_ANIMATION);
  context.startService(intent);
}"
8836,"@Override protected Texture getLoadingScreenTexture(){
  int index=Collections.binarySearch(AVAILABLE_WIDTHS,Main.getUserSettings().getAppSettings().getWidth());
  if (index < 0) {
    index=Math.min(AVAILABLE_WIDTHS.size() - 1,~index + 1);
  }
  String screen=SCREENS.get(AVAILABLE_WIDTHS.get(index));
  TextureKey texKey=new TextureKey(""String_Node_Str"" + screen);
  return assetManager.loadTexture(texKey);
}","@Override protected Texture getLoadingScreenTexture(){
  int index=Collections.binarySearch(AVAILABLE_WIDTHS,Main.getUserSettings().getAppSettings().getWidth());
  if (index < 0) {
    index=Math.min(AVAILABLE_WIDTHS.size() - 1,~index + 1);
  }
  String screen=SCREENS.get(AVAILABLE_WIDTHS.get(index));
  TextureKey texKey=new TextureKey(getLocalizedLoadingScreenTextureFolder() + screen);
  return assetManager.loadTexture(texKey);
}"
8837,"@Override protected Texture getLoadingScreenTexture(){
  int index=Collections.binarySearch(AVAILABLE_WIDTHS,Main.getUserSettings().getAppSettings().getWidth());
  if (index < 0) {
    index=Math.min(AVAILABLE_WIDTHS.size() - 1,~index + 1);
  }
  String screen=SCREENS.get(AVAILABLE_WIDTHS.get(index));
  TextureKey texKey=new TextureKey(""String_Node_Str"" + screen);
  return assetManager.loadTexture(texKey);
}","@Override protected Texture getLoadingScreenTexture(){
  int index=Collections.binarySearch(AVAILABLE_WIDTHS,Main.getUserSettings().getAppSettings().getWidth());
  if (index < 0) {
    index=Math.min(AVAILABLE_WIDTHS.size() - 1,~index + 1);
  }
  String screen=SCREENS.get(AVAILABLE_WIDTHS.get(index));
  TextureKey texKey=new TextureKey(getLocalizedLoadingScreenTextureFolder() + screen);
  return assetManager.loadTexture(texKey);
}"
8838,"/** 
 * Convert a single KMF to JME object
 * @param assetManager assetManager, for finding stuff
 * @param entry KMF / name entry
 * @param destination destination directory
 * @throws RuntimeException May fail
 */
private void convertModel(AssetManager assetManager,Entry<String,KmfFile> entry,String destination,EngineTexturesFile engineTexturesFile) throws RuntimeException {
  KmfAssetInfo ai=new KmfAssetInfo(assetManager,new AssetKey(entry.getKey()),entry.getValue(),true);
  KmfModelLoader kmfModelLoader=new KmfModelLoader();
  try {
    Node n=(Node)kmfModelLoader.load(ai);
    BinaryExporter exporter=BinaryExporter.getInstance();
    File file=new File(destination.concat(entry.getKey().substring(0,entry.getKey().length() - 4)).concat(""String_Node_Str""));
    exporter.save(n,file);
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + entry.getKey() + ""String_Node_Str"";
    logger.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
}","/** 
 * Convert a single KMF to JME object
 * @param assetManager assetManager, for finding stuff
 * @param entry KMF / name entry
 * @param destination destination directory
 * @throws RuntimeException May fail
 */
private void convertModel(AssetManager assetManager,Entry<String,KmfFile> entry,String destination,EngineTexturesFile engineTexturesFile) throws RuntimeException {
  KmfAssetInfo ai=new KmfAssetInfo(assetManager,new AssetKey(entry.getKey()),entry.getValue(),true);
  KmfModelLoader kmfModelLoader=new KmfModelLoader();
  try {
    Node n=(Node)kmfModelLoader.load(ai);
    BinaryExporter exporter=BinaryExporter.getInstance();
    File file=new File(destination.concat(entry.getKey().substring(0,entry.getKey().length() - 4)).concat(""String_Node_Str""));
    exporter.save(n,file);
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + entry.getKey() + ""String_Node_Str"";
    LOGGER.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
}"
8839,"/** 
 * Extract and convert DK II font files (BF4)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertFonts(final String dungeonKeeperFolder,final String destination){
  if (!ConvertProcess.FONTS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.FONTS);
  AssetUtils.deleteFolder(new File(destination));
  try {
    new File(destination).mkdirs();
    final List<File> bf4Files=new ArrayList<>();
    Files.walkFileTree(new File(dungeonKeeperFolder + PathUtils.DKII_TEXT_DEFAULT_FOLDER).toPath(),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          bf4Files.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
    int i=0;
    int total=bf4Files.size();
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    for (    File file : bf4Files) {
      updateStatus(i,total,ConvertProcess.FONTS);
      final int fontSize;
      final String imageFileName;
      final String descriptionFileName;
      Matcher matcher=pattern.matcher(file.getName());
      boolean found=matcher.find();
      if (!found) {
        logger.log(Level.SEVERE,""String_Node_Str"",file.getName());
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        fontSize=Integer.parseInt(matcher.group(""String_Node_Str""));
        String baseFileName=matcher.group(""String_Node_Str"");
        baseFileName=destination.concat(Character.toUpperCase(baseFileName.charAt(0)) + baseFileName.substring(1).toLowerCase() + fontSize);
        imageFileName=baseFileName.concat(""String_Node_Str"");
        descriptionFileName=baseFileName.concat(""String_Node_Str"");
      }
      FontCreator fc=new FontCreator(new Bf4File(file)){
        @Override protected int getFontSize(){
          return fontSize;
        }
        @Override protected String getFileName(){
          return imageFileName.substring(destination.length());
        }
      }
;
      ImageIO.write(fc.getFontImage(),""String_Node_Str"",new File(imageFileName));
      try (OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(descriptionFileName))){
        out.write(fc.getDescription());
      }
       i++;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
    logger.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
}","/** 
 * Extract and convert DK II font files (BF4)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertFonts(final String dungeonKeeperFolder,final String destination){
  if (!ConvertProcess.FONTS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.FONTS);
  AssetUtils.deleteFolder(new File(destination));
  try {
    new File(destination).mkdirs();
    final List<File> bf4Files=new ArrayList<>();
    Files.walkFileTree(new File(dungeonKeeperFolder + PathUtils.DKII_TEXT_DEFAULT_FOLDER).toPath(),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          bf4Files.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
    int i=0;
    int total=bf4Files.size();
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    for (    File file : bf4Files) {
      updateStatus(i,total,ConvertProcess.FONTS);
      final int fontSize;
      final String imageFileName;
      final String descriptionFileName;
      Matcher matcher=pattern.matcher(file.getName());
      boolean found=matcher.find();
      if (!found) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",file.getName());
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        fontSize=Integer.parseInt(matcher.group(""String_Node_Str""));
        String baseFileName=matcher.group(""String_Node_Str"");
        baseFileName=destination.concat(Character.toUpperCase(baseFileName.charAt(0)) + baseFileName.substring(1).toLowerCase() + fontSize);
        imageFileName=baseFileName.concat(""String_Node_Str"");
        descriptionFileName=baseFileName.concat(""String_Node_Str"");
      }
      FontCreator fc=new FontCreator(new Bf4File(file)){
        @Override protected int getFontSize(){
          return fontSize;
        }
        @Override protected String getFileName(){
          return imageFileName.substring(destination.length());
        }
      }
;
      ImageIO.write(fc.getFontImage(),""String_Node_Str"",new File(imageFileName));
      try (OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(descriptionFileName))){
        out.write(fc.getDescription());
      }
       i++;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
    LOGGER.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
}"
8840,"/** 
 * Extract and copy DK II sounds & music
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertSounds(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MUSIC_AND_SOUNDS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MUSIC_AND_SOUNDS);
  AssetUtils.deleteFolder(new File(destination));
  String dataDirectory=PathUtils.DKII_SFX_FOLDER;
  final List<File> sdtFiles=new ArrayList<>();
  File dataDir=null;
  try {
    dataDir=new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,dataDirectory));
    Files.walkFileTree(dataDir.toPath(),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          sdtFiles.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException ex) {
    String msg=""String_Node_Str"" + dataDirectory + ""String_Node_Str"";
    logger.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
  int i=0;
  int total=sdtFiles.size();
  for (  File file : sdtFiles) {
    updateStatus(i,total,ConvertProcess.MUSIC_AND_SOUNDS);
    i++;
    SdtFile sdt=new SdtFile(file);
    String path=file.toString().substring(0,file.toString().length() - 4);
    Path relative=dataDir.toPath().relativize(new File(path).toPath());
    String dest=destination;
    dest+=relative.toString();
    sdt.extractFileData(dest);
  }
}","/** 
 * Extract and copy DK II sounds & music
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertSounds(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MUSIC_AND_SOUNDS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MUSIC_AND_SOUNDS);
  AssetUtils.deleteFolder(new File(destination));
  String dataDirectory=PathUtils.DKII_SFX_FOLDER;
  final List<File> sdtFiles=new ArrayList<>();
  File dataDir=null;
  try {
    dataDir=new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,dataDirectory));
    Files.walkFileTree(dataDir.toPath(),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          sdtFiles.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException ex) {
    String msg=""String_Node_Str"" + dataDirectory + ""String_Node_Str"";
    LOGGER.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
  int i=0;
  int total=sdtFiles.size();
  for (  File file : sdtFiles) {
    updateStatus(i,total,ConvertProcess.MUSIC_AND_SOUNDS);
    i++;
    SdtFile sdt=new SdtFile(file);
    String path=file.toString().substring(0,file.toString().length() - 4);
    Path relative=dataDir.toPath().relativize(new File(path).toPath());
    String dest=destination;
    dest+=relative.toString();
    sdt.extractFileData(dest);
  }
}"
8841,"/** 
 * Convert all the original DK II assets to our formats and copy to our working folder
 */
public void convertAssets(){
  long start=System.currentTimeMillis();
  String currentFolder=getCurrentFolder();
  logger.log(Level.INFO,""String_Node_Str"",dungeonKeeperFolder);
  logger.log(Level.INFO,""String_Node_Str"",currentFolder);
  currentFolder=currentFolder.concat(ASSETS_FOLDER).concat(File.separator);
  convertTextures(dungeonKeeperFolder,currentFolder.concat(TEXTURES_FOLDER).concat(File.separator));
  convertModels(dungeonKeeperFolder,currentFolder.concat(MODELS_FOLDER).concat(File.separator),assetManager);
  convertMouseCursors(dungeonKeeperFolder,currentFolder.concat(MOUSE_CURSORS_FOLDER).concat(File.separator));
  convertSounds(dungeonKeeperFolder,currentFolder.concat(SOUNDS_FOLDER).concat(File.separator));
  convertTexts(dungeonKeeperFolder,currentFolder.concat(TEXTS_FOLDER).concat(File.separator));
  convertPaths(dungeonKeeperFolder,currentFolder.concat(PATHS_FOLDER).concat(File.separator));
  convertHiScores(dungeonKeeperFolder);
  convertFonts(dungeonKeeperFolder,currentFolder.concat(FONTS_FOLDER).concat(File.separator));
  generateMapThumbnails(dungeonKeeperFolder,currentFolder.concat(MAP_THUMBNAILS_FOLDER).concat(File.separator));
  long duration=System.currentTimeMillis() - start;
  logger.log(Level.INFO,""String_Node_Str"",TimeUnit.SECONDS.convert(duration,TimeUnit.MILLISECONDS));
}","/** 
 * Convert all the original DK II assets to our formats and copy to our working folder
 */
public void convertAssets(){
  long start=System.currentTimeMillis();
  String currentFolder=getCurrentFolder();
  LOGGER.log(Level.INFO,""String_Node_Str"",dungeonKeeperFolder);
  LOGGER.log(Level.INFO,""String_Node_Str"",currentFolder);
  currentFolder=currentFolder.concat(ASSETS_FOLDER).concat(File.separator);
  convertTextures(dungeonKeeperFolder,currentFolder.concat(TEXTURES_FOLDER).concat(File.separator));
  convertModels(dungeonKeeperFolder,currentFolder.concat(MODELS_FOLDER).concat(File.separator),assetManager);
  convertMouseCursors(dungeonKeeperFolder,currentFolder.concat(MOUSE_CURSORS_FOLDER).concat(File.separator));
  convertSounds(dungeonKeeperFolder,currentFolder.concat(SOUNDS_FOLDER).concat(File.separator));
  convertTexts(dungeonKeeperFolder,currentFolder.concat(TEXTS_FOLDER).concat(File.separator));
  convertPaths(dungeonKeeperFolder,currentFolder.concat(PATHS_FOLDER).concat(File.separator));
  convertHiScores(dungeonKeeperFolder);
  convertFonts(dungeonKeeperFolder,currentFolder.concat(FONTS_FOLDER).concat(File.separator));
  generateMapThumbnails(dungeonKeeperFolder,currentFolder.concat(MAP_THUMBNAILS_FOLDER).concat(File.separator));
  long duration=System.currentTimeMillis() - start;
  LOGGER.log(Level.INFO,""String_Node_Str"",TimeUnit.SECONDS.convert(duration,TimeUnit.MILLISECONDS));
}"
8842,"/** 
 * Extracts the wad files and updates the progress bar
 * @param i current entry number
 * @param total total entry number
 * @param wad wad file
 * @param destination destination directory
 */
private void extractTextureContainer(int i,int total,WadFile wad,String destination){
  for (  final String entry : wad.getWadFileEntries()) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    if (entry.endsWith(""String_Node_Str"")) {
      LoadingScreenFile lsf=new LoadingScreenFile(wad.getFileData(entry));
      try {
        File dest=wad.extractFileData(entry,destination,true);
        String destFilename=dest.getCanonicalPath();
        ImageIO.write(lsf.getImage(),""String_Node_Str"",new File(destFilename.substring(0,destFilename.length() - 3).concat(""String_Node_Str"")));
      }
 catch (      IOException ex) {
        throw new RuntimeException(""String_Node_Str"" + entry + ""String_Node_Str"",ex);
      }
    }
 else {
      wad.extractFileData(entry,destination);
    }
  }
}","/** 
 * Extracts the wad files and updates the progress bar
 * @param i current entry number
 * @param total total entry number
 * @param wad wad file
 * @param destination destination directory
 */
private void extractTextureContainer(int i,int total,WadFile wad,String destination){
  for (  final String entry : wad.getWadFileEntries()) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    if (entry.endsWith(""String_Node_Str"")) {
      LoadingScreenFile lsf=new LoadingScreenFile(wad.getFileData(entry));
      try {
        File destFile=new File(destination + entry);
        String destFilename=destFile.getCanonicalPath();
        destFile.getParentFile().mkdirs();
        ImageIO.write(lsf.getImage(),""String_Node_Str"",new File(destFilename.substring(0,destFilename.length() - 3).concat(""String_Node_Str"")));
      }
 catch (      IOException ex) {
        throw new RuntimeException(""String_Node_Str"" + entry + ""String_Node_Str"",ex);
      }
    }
 else {
      wad.extractFileData(entry,destination);
    }
  }
}"
8843,"/** 
 * Generates thumbnails out of map files (only the skirmish/mp)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void generateMapThumbnails(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MAP_THUMBNAILS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MAP_THUMBNAILS);
  File destFolder=new File(destination);
  AssetUtils.deleteFolder(destFolder);
  destFolder.mkdirs();
  try {
    File f=new File(dungeonKeeperFolder + PathUtils.DKII_MAPS_FOLDER);
    File[] files=f.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.toLowerCase().endsWith(""String_Node_Str"");
      }
    }
);
    List<KwdFile> maps=new ArrayList<>(files.length);
    for (    File file : files) {
      KwdFile kwd=new KwdFile(dungeonKeeperFolder,file,false);
      if (kwd.getGameLevel().getLvlFlags().contains(LevFlag.IS_SKIRMISH_LEVEL) || kwd.getGameLevel().getLvlFlags().contains(LevFlag.IS_MULTIPLAYER_LEVEL)) {
        maps.add(kwd);
      }
    }
    int i=0;
    int total=maps.size();
    for (    KwdFile kwd : maps) {
      updateStatus(i,total,ConvertProcess.MAP_THUMBNAILS);
      genererateMapThumbnail(kwd,destination);
      i++;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
    logger.log(Level.WARNING,msg,ex);
  }
}","/** 
 * Generates thumbnails out of map files (only the skirmish/mp)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void generateMapThumbnails(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MAP_THUMBNAILS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MAP_THUMBNAILS);
  File destFolder=new File(destination);
  AssetUtils.deleteFolder(destFolder);
  destFolder.mkdirs();
  try {
    File f=new File(dungeonKeeperFolder + PathUtils.DKII_MAPS_FOLDER);
    File[] files=f.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.toLowerCase().endsWith(""String_Node_Str"");
      }
    }
);
    List<KwdFile> maps=new ArrayList<>(files.length);
    for (    File file : files) {
      KwdFile kwd=new KwdFile(dungeonKeeperFolder,file,false);
      if (kwd.getGameLevel().getLvlFlags().contains(LevFlag.IS_SKIRMISH_LEVEL) || kwd.getGameLevel().getLvlFlags().contains(LevFlag.IS_MULTIPLAYER_LEVEL)) {
        maps.add(kwd);
      }
    }
    int i=0;
    int total=maps.size();
    for (    KwdFile kwd : maps) {
      updateStatus(i,total,ConvertProcess.MAP_THUMBNAILS);
      genererateMapThumbnail(kwd,destination);
      i++;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
    LOGGER.log(Level.WARNING,msg,ex);
  }
}"
8844,"/** 
 * Extract and copy DK II camera sweep files (paths)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertPaths(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.PATHS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.PATHS);
  AssetUtils.deleteFolder(new File(destination));
  WadFile wad=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  int i=0;
  int total=wad.getWadFileEntryCount();
  File tmpdir=new File(System.getProperty(""String_Node_Str""));
  BinaryExporter exporter=BinaryExporter.getInstance();
  for (  final String entry : wad.getWadFileEntries()) {
    try {
      updateStatus(i,total,ConvertProcess.PATHS);
      i++;
      if (entry.toLowerCase().endsWith(""String_Node_Str"")) {
        File f=wad.extractFileData(entry,tmpdir.toString());
        f.deleteOnExit();
        KcsFile kcsFile=new KcsFile(f);
        List<CameraSweepDataEntry> entries=new ArrayList<>(kcsFile.getKcsEntries().size());
        for (        KcsEntry kcsEntry : kcsFile.getKcsEntries()) {
          Matrix3f mat=new Matrix3f();
          Vector3f direction=ConversionUtils.convertVector(kcsEntry.getDirection());
          Vector3f left=ConversionUtils.convertVector(kcsEntry.getLeft());
          Vector3f up=ConversionUtils.convertVector(kcsEntry.getUp());
          mat.setColumn(0,new Vector3f(-direction.x,direction.y,direction.z));
          mat.setColumn(1,new Vector3f(left.x,-left.y,-left.z));
          mat.setColumn(2,new Vector3f(-up.x,up.y,up.z));
          entries.add(new CameraSweepDataEntry(ConversionUtils.convertVector(kcsEntry.getPosition()),new Quaternion().fromRotationMatrix(mat),FastMath.RAD_TO_DEG * kcsEntry.getLens(),kcsEntry.getNear()));
        }
        CameraSweepData cameraSweepData=new CameraSweepData(entries);
        exporter.save(cameraSweepData,new File(destination.concat(entry.substring(0,entry.length() - 3)).concat(CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION)));
      }
 else       if (entry.toLowerCase().endsWith(""String_Node_Str"")) {
        wad.extractFileData(entry,destination);
      }
    }
 catch (    Exception ex) {
      String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
      logger.log(Level.SEVERE,msg,ex);
      throw new RuntimeException(msg,ex);
    }
  }
}","/** 
 * Extract and copy DK II camera sweep files (paths)
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertPaths(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.PATHS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.PATHS);
  AssetUtils.deleteFolder(new File(destination));
  WadFile wad=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  int i=0;
  int total=wad.getWadFileEntryCount();
  File tmpdir=new File(System.getProperty(""String_Node_Str""));
  BinaryExporter exporter=BinaryExporter.getInstance();
  for (  final String entry : wad.getWadFileEntries()) {
    try {
      updateStatus(i,total,ConvertProcess.PATHS);
      i++;
      if (entry.toLowerCase().endsWith(""String_Node_Str"")) {
        File f=wad.extractFileData(entry,tmpdir.toString());
        f.deleteOnExit();
        KcsFile kcsFile=new KcsFile(f);
        List<CameraSweepDataEntry> entries=new ArrayList<>(kcsFile.getKcsEntries().size());
        for (        KcsEntry kcsEntry : kcsFile.getKcsEntries()) {
          Matrix3f mat=new Matrix3f();
          Vector3f direction=ConversionUtils.convertVector(kcsEntry.getDirection());
          Vector3f left=ConversionUtils.convertVector(kcsEntry.getLeft());
          Vector3f up=ConversionUtils.convertVector(kcsEntry.getUp());
          mat.setColumn(0,new Vector3f(-direction.x,direction.y,direction.z));
          mat.setColumn(1,new Vector3f(left.x,-left.y,-left.z));
          mat.setColumn(2,new Vector3f(-up.x,up.y,up.z));
          entries.add(new CameraSweepDataEntry(ConversionUtils.convertVector(kcsEntry.getPosition()),new Quaternion().fromRotationMatrix(mat),FastMath.RAD_TO_DEG * kcsEntry.getLens(),kcsEntry.getNear()));
        }
        CameraSweepData cameraSweepData=new CameraSweepData(entries);
        exporter.save(cameraSweepData,new File(destination.concat(entry.substring(0,entry.length() - 3)).concat(CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION)));
      }
 else       if (entry.toLowerCase().endsWith(""String_Node_Str"")) {
        wad.extractFileData(entry,destination);
      }
    }
 catch (    Exception ex) {
      String msg=""String_Node_Str"" + destination + ""String_Node_Str"";
      LOGGER.log(Level.SEVERE,msg,ex);
      throw new RuntimeException(msg,ex);
    }
  }
}"
8845,"/** 
 * Extract and copy DK II HiScores
 * @param dungeonKeeperFolder DK II main folder
 */
private void convertHiScores(String dungeonKeeperFolder){
  if (!ConvertProcess.HI_SCORES.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"");
  updateStatus(0,1,ConvertProcess.HI_SCORES);
  try {
    File file=new File(dungeonKeeperFolder + ""String_Node_Str"");
    HiScoresFile originalHiScores=new HiScoresFile(file);
    HiScores hiScores=new HiScores();
    for (    HiScoresEntry entry : originalHiScores.getHiScoresEntries()) {
      hiScores.add(entry.getScore(),entry.getName(),entry.getLevel());
    }
    updateStatus(1,1,ConvertProcess.HI_SCORES);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","/** 
 * Extract and copy DK II HiScores
 * @param dungeonKeeperFolder DK II main folder
 */
private void convertHiScores(String dungeonKeeperFolder){
  if (!ConvertProcess.HI_SCORES.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"");
  updateStatus(0,1,ConvertProcess.HI_SCORES);
  try {
    File file=new File(dungeonKeeperFolder + ""String_Node_Str"");
    HiScoresFile originalHiScores=new HiScoresFile(file);
    HiScores hiScores=new HiScores();
    for (    HiScoresEntry entry : originalHiScores.getHiScoresEntries()) {
      hiScores.add(entry.getScore(),entry.getName(),entry.getLevel());
    }
    updateStatus(1,1,ConvertProcess.HI_SCORES);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
}"
8846,"/** 
 * Extract and copy DK II models
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertModels(String dungeonKeeperFolder,String destination,AssetManager assetManager){
  if (!ConvertProcess.MODELS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MODELS);
  AssetUtils.deleteFolder(new File(destination));
  File materialFolder=new File(getAssetsFolder().concat(AssetsConverter.MATERIALS_FOLDER));
  AssetUtils.deleteFolder(materialFolder);
  materialFolder.mkdirs();
  EngineTexturesFile engineTexturesFile=getEngineTexturesFile(dungeonKeeperFolder);
  WadFile wad=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  HashMap<String,KmfFile> kmfs=new HashMap<>();
  File tmpdir=new File(System.getProperty(""String_Node_Str""));
  int i=0;
  int total=wad.getWadFileEntryCount();
  for (  final String entry : wad.getWadFileEntries()) {
    try {
      updateStatus(i,total,ConvertProcess.MODELS);
      if (!OVERWRITE_DATA && new File(destination.concat(entry.substring(0,entry.length() - 4)).concat(""String_Node_Str"")).exists()) {
        logger.log(Level.INFO,""String_Node_Str"",entry);
        i++;
        continue;
      }
      File f=wad.extractFileData(entry,tmpdir.toString());
      f.deleteOnExit();
      final KmfFile kmfFile=new KmfFile(f);
      if (kmfFile.getType() == KmfFile.Type.MESH || kmfFile.getType() == KmfFile.Type.ANIM) {
        convertModel(assetManager,new Entry<String,KmfFile>(){
          @Override public String getKey(){
            return entry;
          }
          @Override public KmfFile getValue(){
            return kmfFile;
          }
          @Override public KmfFile setValue(          KmfFile value){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
        }
,destination,engineTexturesFile);
        f.delete();
        i++;
      }
 else {
        kmfs.put(entry,kmfFile);
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + entry + ""String_Node_Str"",ex);
      throw ex;
    }
  }
  for (  Entry<String,KmfFile> entry : kmfs.entrySet()) {
    updateStatus(i,total,ConvertProcess.MODELS);
    convertModel(assetManager,entry,destination,engineTexturesFile);
    i++;
  }
}","/** 
 * Extract and copy DK II models
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertModels(String dungeonKeeperFolder,String destination,AssetManager assetManager){
  if (!ConvertProcess.MODELS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MODELS);
  AssetUtils.deleteFolder(new File(destination));
  File materialFolder=new File(getAssetsFolder().concat(AssetsConverter.MATERIALS_FOLDER));
  AssetUtils.deleteFolder(materialFolder);
  materialFolder.mkdirs();
  EngineTexturesFile engineTexturesFile=getEngineTexturesFile(dungeonKeeperFolder);
  WadFile wad=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  HashMap<String,KmfFile> kmfs=new HashMap<>();
  File tmpdir=new File(System.getProperty(""String_Node_Str""));
  int i=0;
  int total=wad.getWadFileEntryCount();
  for (  final String entry : wad.getWadFileEntries()) {
    try {
      updateStatus(i,total,ConvertProcess.MODELS);
      if (!OVERWRITE_DATA && new File(destination.concat(entry.substring(0,entry.length() - 4)).concat(""String_Node_Str"")).exists()) {
        LOGGER.log(Level.INFO,""String_Node_Str"",entry);
        i++;
        continue;
      }
      File f=wad.extractFileData(entry,tmpdir.toString());
      f.deleteOnExit();
      final KmfFile kmfFile=new KmfFile(f);
      if (kmfFile.getType() == KmfFile.Type.MESH || kmfFile.getType() == KmfFile.Type.ANIM) {
        convertModel(assetManager,new Entry<String,KmfFile>(){
          @Override public String getKey(){
            return entry;
          }
          @Override public KmfFile getValue(){
            return kmfFile;
          }
          @Override public KmfFile setValue(          KmfFile value){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
        }
,destination,engineTexturesFile);
        f.delete();
        i++;
      }
 else {
        kmfs.put(entry,kmfFile);
      }
    }
 catch (    Exception ex) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + entry + ""String_Node_Str"",ex);
      throw ex;
    }
  }
  for (  Entry<String,KmfFile> entry : kmfs.entrySet()) {
    updateStatus(i,total,ConvertProcess.MODELS);
    convertModel(assetManager,entry,destination,engineTexturesFile);
    i++;
  }
}"
8847,"/** 
 * Extract and copy DK II interface texts
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTexts(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.INTERFACE_TEXTS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.INTERFACE_TEXTS);
  AssetUtils.deleteFolder(new File(destination));
  String dataDirectory=dungeonKeeperFolder + PathUtils.DKII_TEXT_DEFAULT_FOLDER;
  final List<File> srtFiles=new ArrayList<>();
  File dataDir=new File(dataDirectory);
  try {
    Files.walkFileTree(dataDir.toPath(),EnumSet.noneOf(FileVisitOption.class),1,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          srtFiles.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException ex) {
    String msg=""String_Node_Str"" + dataDirectory + ""String_Node_Str"";
    logger.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
  new File(destination).mkdirs();
  int i=0;
  int total=srtFiles.size();
  CharBuffer codePage=null;
  for (  File file : srtFiles) {
    updateStatus(i,total,ConvertProcess.INTERFACE_TEXTS);
    i++;
    StrFile strFile;
    if (codePage == null) {
      strFile=new StrFile(file);
      codePage=strFile.getCodePage();
    }
 else {
      strFile=new StrFile(codePage,file);
    }
    String fileName=file.getName();
    fileName=fileName.substring(0,fileName.length() - 3);
    File dictFile=new File(destination.concat(fileName).concat(""String_Node_Str""));
    try (PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(dictFile,false),""String_Node_Str""))){
      for (      Map.Entry<Integer,String> entry : strFile.getEntriesAsSet()) {
        pw.println(entry.getKey() + ""String_Node_Str"" + entry.getValue());
      }
    }
 catch (    IOException ex) {
      String msg=""String_Node_Str"" + dictFile + ""String_Node_Str"";
      logger.log(Level.SEVERE,msg,ex);
      throw new RuntimeException(msg,ex);
    }
  }
}","/** 
 * Extract and copy DK II interface texts
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTexts(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.INTERFACE_TEXTS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.INTERFACE_TEXTS);
  AssetUtils.deleteFolder(new File(destination));
  String dataDirectory=dungeonKeeperFolder + PathUtils.DKII_TEXT_DEFAULT_FOLDER;
  final List<File> srtFiles=new ArrayList<>();
  File dataDir=new File(dataDirectory);
  try {
    Files.walkFileTree(dataDir.toPath(),EnumSet.noneOf(FileVisitOption.class),1,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile() && file.getFileName().toString().toLowerCase().endsWith(""String_Node_Str"")) {
          srtFiles.add(file.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException ex) {
    String msg=""String_Node_Str"" + dataDirectory + ""String_Node_Str"";
    LOGGER.log(Level.SEVERE,msg,ex);
    throw new RuntimeException(msg,ex);
  }
  new File(destination).mkdirs();
  int i=0;
  int total=srtFiles.size();
  CharBuffer codePage=null;
  for (  File file : srtFiles) {
    updateStatus(i,total,ConvertProcess.INTERFACE_TEXTS);
    i++;
    StrFile strFile;
    if (codePage == null) {
      strFile=new StrFile(file);
      codePage=strFile.getCodePage();
    }
 else {
      strFile=new StrFile(codePage,file);
    }
    String fileName=file.getName();
    fileName=fileName.substring(0,fileName.length() - 3);
    File dictFile=new File(destination.concat(fileName).concat(""String_Node_Str""));
    try (PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(dictFile,false),""String_Node_Str""))){
      for (      Map.Entry<Integer,String> entry : strFile.getEntriesAsSet()) {
        pw.println(entry.getKey() + ""String_Node_Str"" + entry.getValue());
      }
    }
 catch (    IOException ex) {
      String msg=""String_Node_Str"" + dictFile + ""String_Node_Str"";
      LOGGER.log(Level.SEVERE,msg,ex);
      throw new RuntimeException(msg,ex);
    }
  }
}"
8848,"/** 
 * Extract and copy DK II textures
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTextures(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.TEXTURES.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.TEXTURES);
  AssetUtils.deleteFolder(new File(destination));
  EngineTexturesFile etFile=getEngineTexturesFile(dungeonKeeperFolder);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  WadFile frontEnd;
  WadFile engineTextures;
  try {
    frontEnd=new WadFile(new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,PathUtils.DKII_DATA_FOLDER + ""String_Node_Str"")));
    engineTextures=new WadFile(new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,PathUtils.DKII_DATA_FOLDER + ""String_Node_Str"")));
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  int i=0;
  int total=etFile.getFileCount() + frontEnd.getWadFileEntries().size() + engineTextures.getWadFileEntries().size();
  for (  String textureFile : etFile) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    Matcher matcher=pattern.matcher(textureFile);
    boolean found=matcher.find();
    if (found && Integer.parseInt(matcher.group(""String_Node_Str"")) == 0) {
      File f=etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
      File newFile=new File(f.toString().replaceFirst(""String_Node_Str"" + matcher.group(""String_Node_Str""),""String_Node_Str""));
      if (OVERWRITE_DATA && newFile.exists()) {
        newFile.delete();
      }
 else       if (!OVERWRITE_DATA && newFile.exists()) {
        logger.log(Level.INFO,""String_Node_Str"",newFile);
        f.delete();
        continue;
      }
      f.renameTo(newFile);
    }
 else     if (!found) {
      etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
    }
  }
  extractTextureContainer(i,total,frontEnd,destination);
  extractTextureContainer(i,total,engineTextures,destination);
}","/** 
 * Extract and copy DK II textures
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTextures(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.TEXTURES.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.TEXTURES);
  AssetUtils.deleteFolder(new File(destination));
  EngineTexturesFile etFile=getEngineTexturesFile(dungeonKeeperFolder);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  WadFile frontEnd;
  WadFile engineTextures;
  try {
    frontEnd=new WadFile(new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,PathUtils.DKII_DATA_FOLDER + ""String_Node_Str"")));
    engineTextures=new WadFile(new File(ConversionUtils.getRealFileName(dungeonKeeperFolder,PathUtils.DKII_DATA_FOLDER + ""String_Node_Str"")));
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  int i=0;
  int total=etFile.getFileCount() + frontEnd.getWadFileEntries().size() + engineTextures.getWadFileEntries().size();
  for (  String textureFile : etFile) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    Matcher matcher=pattern.matcher(textureFile);
    boolean found=matcher.find();
    if (found && Integer.parseInt(matcher.group(""String_Node_Str"")) == 0) {
      File f=etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
      File newFile=new File(f.toString().replaceFirst(""String_Node_Str"" + matcher.group(""String_Node_Str""),""String_Node_Str""));
      if (OVERWRITE_DATA && newFile.exists()) {
        newFile.delete();
      }
 else       if (!OVERWRITE_DATA && newFile.exists()) {
        LOGGER.log(Level.INFO,""String_Node_Str"",newFile);
        f.delete();
        continue;
      }
      f.renameTo(newFile);
    }
 else     if (!found) {
      etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
    }
  }
  extractTextureContainer(i,total,frontEnd,destination);
  extractTextureContainer(i,total,engineTextures,destination);
}"
8849,"/** 
 * Extract and copy DK II mouse cursors
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertMouseCursors(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MOUSE_CURSORS.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MOUSE_CURSORS);
  AssetUtils.deleteFolder(new File(destination));
  WadFile wadFile=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  int i=0;
  int total=wadFile.getWadFileEntryCount();
  File destinationFolder=new File(getAssetsFolder().concat(SPRITES_FOLDER).concat(File.separator));
  AssetUtils.deleteFolder(destinationFolder);
  destinationFolder.mkdirs();
  for (  String fileName : wadFile.getWadFileEntries()) {
    updateStatus(i,total,ConvertProcess.MOUSE_CURSORS);
    i++;
    File extracted=wadFile.extractFileData(fileName,destination);
    if (fileName.toLowerCase().endsWith(""String_Node_Str"")) {
      SprFile sprFile=new SprFile(extracted);
      try {
        sprFile.extract(destinationFolder.getPath(),fileName.substring(0,fileName.length() - 4));
        extracted.delete();
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
}","/** 
 * Extract and copy DK II mouse cursors
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertMouseCursors(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.MOUSE_CURSORS.isOutdated()) {
    return;
  }
  LOGGER.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.MOUSE_CURSORS);
  AssetUtils.deleteFolder(new File(destination));
  WadFile wadFile=new WadFile(new File(dungeonKeeperFolder + PathUtils.DKII_DATA_FOLDER + ""String_Node_Str""));
  int i=0;
  int total=wadFile.getWadFileEntryCount();
  File destinationFolder=new File(getAssetsFolder().concat(SPRITES_FOLDER).concat(File.separator));
  AssetUtils.deleteFolder(destinationFolder);
  destinationFolder.mkdirs();
  for (  String fileName : wadFile.getWadFileEntries()) {
    updateStatus(i,total,ConvertProcess.MOUSE_CURSORS);
    i++;
    File extracted=wadFile.extractFileData(fileName,destination);
    if (fileName.toLowerCase().endsWith(""String_Node_Str"")) {
      SprFile sprFile=new SprFile(extracted);
      try {
        sprFile.extract(destinationFolder.getPath(),fileName.substring(0,fileName.length() - 4));
        extracted.delete();
      }
 catch (      Exception ex) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
}"
8850,"/** 
 * Kicks out AI players that do not fit to the map, fixes Keepers so that they are in order
 * @param players the player list
 * @param maxPlayers the max player count
 * @return a list of players to kick
 */
public static Set<ClientInfo> compactPlayers(Set<ClientInfo> players,int maxPlayers){
  Set<ClientInfo> kickedPlayers=Collections.emptySet();
  if (players.size() > maxPlayers) {
    List<ClientInfo> keepers=new ArrayList<>(players);
    Collections.sort(keepers,(    ClientInfo o1,    ClientInfo o2) -> Short.compare(o2.getKeeper().getId(),o1.getKeeper().getId()));
    int playersToKick=players.size() - maxPlayers;
    int playersKicked=0;
    kickedPlayers=new HashSet<>(playersToKick);
    for (    ClientInfo keeper : keepers) {
      if (keeper.getKeeper().isAi()) {
        kickedPlayers.add(keeper);
        playersKicked++;
      }
      if (playersKicked == playersToKick) {
        break;
      }
    }
  }
  List<ClientInfo> keepers=new ArrayList<>(players);
  Collections.sort(keepers,(  ClientInfo o1,  ClientInfo o2) -> Short.compare(o1.getKeeper().getId(),o2.getKeeper().getId()));
  short id=Keeper.KEEPER1_ID;
  for (  ClientInfo keeper : keepers) {
    if (!kickedPlayers.contains(keeper)) {
      keeper.getKeeper().setId(id);
      id++;
    }
  }
  return kickedPlayers;
}","/** 
 * Kicks out AI players that do not fit to the map, fixes Keepers so that they are in order
 * @param players the player list
 * @param maxPlayers the max player count
 * @return a list of players to kick
 */
public static Set<ClientInfo> compactPlayers(Set<ClientInfo> players,int maxPlayers){
  Set<ClientInfo> kickedPlayers=Collections.emptySet();
  if (players.size() > maxPlayers) {
    List<ClientInfo> keepers=new ArrayList<>(players);
    Collections.sort(keepers,(    ClientInfo o1,    ClientInfo o2) -> Short.compare(o2.getKeeper().getId(),o1.getKeeper().getId()));
    int playersToKick=players.size() - maxPlayers;
    int playersKicked=0;
    kickedPlayers=new HashSet<>(playersToKick);
    for (    ClientInfo keeper : keepers) {
      if (keeper.getKeeper().isAi()) {
        kickedPlayers.add(keeper);
        playersKicked++;
      }
      if (playersKicked == playersToKick) {
        break;
      }
    }
  }
  List<ClientInfo> keepers=new ArrayList<>(players);
  Collections.sort(keepers,(  ClientInfo o1,  ClientInfo o2) -> Short.compare(o1.getKeeper().getId(),o2.getKeeper().getId()));
  short id=Player.KEEPER1_ID;
  for (  ClientInfo keeper : keepers) {
    if (!kickedPlayers.contains(keeper)) {
      keeper.getKeeper().setId(id);
      id++;
    }
  }
  return kickedPlayers;
}"
8851,"/** 
 * Get the next available keeper
 * @param ai AI or human
 * @param players the current player list
 * @return the next available Keeper
 */
public static Keeper getNextKeeper(boolean ai,Set<ClientInfo> players){
  short id=Keeper.KEEPER1_ID;
  List<Short> keepers=players.stream().map(c -> c.getKeeper().getId()).collect(toList());
  Collections.sort(keepers);
  while (Collections.binarySearch(keepers,id) >= 0) {
    id++;
  }
  return new Keeper(ai,id,null);
}","/** 
 * Get the next available keeper
 * @param ai AI or human
 * @param players the current player list
 * @return the next available Keeper
 */
public static Keeper getNextKeeper(boolean ai,Set<ClientInfo> players){
  short id=Player.KEEPER1_ID;
  List<Short> keepers=players.stream().map(c -> c.getKeeper().getId()).collect(toList());
  Collections.sort(keepers);
  while (Collections.binarySearch(keepers,id) >= 0) {
    id++;
  }
  return new Keeper(ai,id,null);
}"
8852,"public LocalLobby(){
  Keeper keeper=new Keeper(false,Keeper.KEEPER1_ID,null);
  ClientInfo clientInfo=createClientInfo(keeper,Utils.getMainTextResourceBundle().getString(""String_Node_Str""));
  players.put(clientInfo.getId(),clientInfo);
  keeper=new Keeper(true,Keeper.KEEPER2_ID,null);
  clientInfo=createClientInfo(keeper,null);
  players.put(clientInfo.getId(),clientInfo);
}","public LocalLobby(){
  Keeper keeper=new Keeper(false,Player.KEEPER1_ID,null);
  ClientInfo clientInfo=createClientInfo(keeper,Utils.getMainTextResourceBundle().getString(""String_Node_Str""));
  players.put(clientInfo.getId(),clientInfo);
  keeper=new Keeper(true,Player.KEEPER2_ID,null);
  clientInfo=createClientInfo(keeper,null);
  players.put(clientInfo.getId(),clientInfo);
}"
8853,"public void start() throws IOException {
  if (server == null) {
    server=Network.createServer(GAME_NAME,PROTOCOL_VERSION,port,port);
  }
  server.addChannel(port + 1);
  server.addChannel(port + 2);
  initialize();
  server.addConnectionListener(new ServerConnectionListener(this));
  server.getServices().addServices(new RpcHostedService(),new RmiHostedService(),new AccountHostedService(name),new LobbyHostedService(),new ChatHostedService());
  server.start();
  start=System.nanoTime();
}","@Override public void start(){
  System.out.println(""String_Node_Str"");
}"
8854,"/** 
 * Fill the list box with the objects of currently selected type
 * @param type the selected type
 */
private void fillList(Types type){
  getModelListBox().clear();
switch (type) {
case MODELS:
{
      fillWithFiles(models,AssetsConverter.getAssetsFolder(),AssetsConverter.getAssetsFolder() + AssetsConverter.MODELS_FOLDER + File.separator,""String_Node_Str"");
      break;
    }
case TERRAIN:
{
    fillTerrain();
    break;
  }
case MAPS:
{
  fillWithFiles(maps,dkIIFolder,dkIIFolder.concat(AssetsConverter.MAPS_FOLDER),""String_Node_Str"");
  break;
}
case EFFECTS:
{
fillEffects();
break;
}
}
}","/** 
 * Fill the list box with the objects of currently selected type
 * @param type the selected type
 */
private void fillList(Types type){
  getModelListBox().clear();
switch (type) {
case MODELS:
{
      fillWithFiles(models,AssetsConverter.getAssetsFolder(),AssetsConverter.getAssetsFolder() + AssetsConverter.MODELS_FOLDER + File.separator,""String_Node_Str"");
      break;
    }
case TERRAIN:
{
    fillTerrain();
    break;
  }
case MAPS:
{
  fillWithFiles(maps,dkIIFolder,dkIIFolder.concat(AssetsConverter.MAPS_FOLDER),""String_Node_Str"");
  break;
}
case OBJECTS:
{
fillObjects();
break;
}
case EFFECTS:
{
fillEffects();
break;
}
}
}"
8855,"@NiftyEventSubscriber(id=""String_Node_Str"") public void onListBoxSelectionChanged(final String id,final ListBoxSelectionChangedEvent<Object> event){
  effectManagerState.setEnabled(false);
  List<Object> selection=event.getSelection();
  if (selection.size() == 1) {
switch (getTypeDropDown().getSelection()) {
case MODELS:
{
        Node spat=(Node)AssetUtils.loadModel(assetManager,(String)selection.get(0));
        setupModel(spat,false);
        break;
      }
case TERRAIN:
{
      Node spat=(Node)new TerrainLoader().load(this.getAssetManager(),(Terrain)selection.get(0));
      setupModel(spat,false);
      break;
    }
case MAPS:
{
    String file=(String)selection.get(0) + ""String_Node_Str"";
    KwdFile kwd=new KwdFile(dkIIFolder,new File(dkIIFolder + AssetsConverter.MAPS_FOLDER + file));
    Node spat=(Node)new MapLoader(this.getAssetManager(),kwd,new EffectManagerState(kwd,this.getAssetManager()),null,new ObjectLoader(kwdFile,null)){
      @Override protected void updateProgress(      float progress){
      }
    }
.load(this.getAssetManager(),kwd);
    setupModel(spat,true);
    break;
  }
case EFFECTS:
{
  Node spat=new Node();
  effectManagerState.setEnabled(true);
  final int selectedIndex=event.getSelectionIndices().get(0) + 1;
  effectManagerState.loadSingleEffect(spat,new Vector3f(0,0,0),selectedIndex,true);
  setupModel(spat,false);
  break;
}
}
}
}","@NiftyEventSubscriber(id=""String_Node_Str"") public void onListBoxSelectionChanged(final String id,final ListBoxSelectionChangedEvent<Object> event){
  effectManagerState.setEnabled(false);
  List<Object> selection=event.getSelection();
  if (selection.size() == 1) {
switch (getTypeDropDown().getSelection()) {
case MODELS:
{
        Node spat=(Node)AssetUtils.loadAsset(assetManager,(String)selection.get(0));
        setupModel(spat,false);
        break;
      }
case TERRAIN:
{
      Node spat=(Node)new TerrainsLoader().load(this.getAssetManager(),(Terrain)selection.get(0));
      setupModel(spat,false);
      break;
    }
case MAPS:
{
    String file=(String)selection.get(0) + ""String_Node_Str"";
    KwdFile kwd=new KwdFile(dkIIFolder,new File(dkIIFolder + AssetsConverter.MAPS_FOLDER + file));
    Node spat=(Node)new MapLoader(this.getAssetManager(),kwd,new EffectManagerState(kwd,this.getAssetManager()),null,new ObjectLoader(kwdFile,null)){
      @Override protected void updateProgress(      float progress){
      }
    }
.load(this.getAssetManager(),kwd);
    setupModel(spat,true);
    break;
  }
case OBJECTS:
{
  Node spat=(Node)new ObjectsLoader().load(this.getAssetManager(),(toniarts.openkeeper.tools.convert.map.Object)selection.get(0));
  setupModel(spat,false);
  break;
}
case EFFECTS:
{
Node spat=new Node();
effectManagerState.setEnabled(true);
final int selectedIndex=event.getSelectionIndices().get(0) + 1;
effectManagerState.loadSingleEffect(spat,new Vector3f(0,0,0),selectedIndex,true);
setupModel(spat,false);
break;
}
}
}
}"
8856,"private void setupModel(final Node spat,boolean isMap){
  spat.setName(NODE_NAME);
  if (!isMap) {
    for (    Spatial subSpat : spat.getChildren()) {
      subSpat.setLocalScale(1);
      subSpat.setLocalTranslation(0,0,0);
    }
    RotatorControl rotator=new RotatorControl();
    rotator.setEnabled(rotate);
    spat.addControl(rotator);
  }
  floorGeom.setCullHint(!isMap ? Spatial.CullHint.Never : Spatial.CullHint.Always);
  spat.setShadowMode(RenderQueue.ShadowMode.CastAndReceive);
  rootNode.detachChildNamed(NODE_NAME);
  rootNode.attachChild(spat);
  toggleWireframe();
  toggleShowNormals();
  if (!spat.getChildren().isEmpty()) {
    final Spatial spatial=spat.getChild(0);
    AnimControl animControl=(AnimControl)spatial.getControl(AnimControl.class);
    if (animControl != null) {
      AnimChannel channel=animControl.createChannel();
      channel.setAnim(""String_Node_Str"");
      AnimationLoader.setLoopModeOnChannel(spatial,channel);
    }
  }
}","private void setupModel(final Node spat,boolean isMap){
  spat.setName(NODE_NAME);
  if (!isMap) {
    RotatorControl rotator=new RotatorControl();
    rotator.setEnabled(rotate);
    spat.addControl(rotator);
  }
  floorGeom.setCullHint(!isMap ? Spatial.CullHint.Never : Spatial.CullHint.Always);
  spat.setShadowMode(RenderQueue.ShadowMode.CastAndReceive);
  rootNode.detachChildNamed(NODE_NAME);
  rootNode.attachChild(spat);
  toggleWireframe();
  toggleShowNormals();
  if (!spat.getChildren().isEmpty()) {
    final Spatial spatial=spat.getChild(0);
    AnimControl animControl=(AnimControl)spatial.getControl(AnimControl.class);
    if (animControl != null) {
      AnimChannel channel=animControl.createChannel();
      channel.setAnim(""String_Node_Str"");
      AnimationLoader.setLoopModeOnChannel(spatial,channel);
    }
  }
}"
8857,"private void addIfValidCoordinate(final int x,final int y,List<Point> tileCoords){
  if ((x >= 0 && x < mapData.getWidth() && y >= 0 && y < mapData.getHeight())) {
    tileCoords.add(new Point(x,y));
  }
}","private void addIfValidCoordinate(final int x,final int y,List<Point> tileCoords){
  TileData tile=mapData.getTile(x,y);
  if (tile != null) {
    tileCoords.add(tile.getLocation());
  }
}"
8858,"private void handleTorch(TileData tile,Node pageNode){
  String name=null;
  float angleY=0;
  Vector3f position=Vector3f.ZERO;
  if (tile.getY() % 2 == 0 && tile.getX() % 2 != 0 && canPlaceTorch(tile.getX(),tile.getY() - 1)) {
    name=""String_Node_Str"";
    angleY=-FastMath.HALF_PI;
    position=new Vector3f(0,TORCH_HEIGHT,-TILE_WIDTH / 2);
  }
 else   if (tile.getX() % 2 == 0 && tile.getY() % 2 == 0 && canPlaceTorch(tile.getX() - 1,tile.getY())) {
    name=""String_Node_Str"";
    position=new Vector3f(-TILE_WIDTH / 2,TORCH_HEIGHT,0);
  }
 else   if (tile.getY() % 2 == 0 && tile.getX() % 2 != 0 && canPlaceTorch(tile.getX(),tile.getY() + 1)) {
    name=""String_Node_Str"";
    angleY=FastMath.HALF_PI;
    position=new Vector3f(0,TORCH_HEIGHT,TILE_WIDTH / 2);
  }
 else   if (tile.getX() % 2 == 0 && tile.getY() % 2 == 0 && canPlaceTorch(tile.getX() + 1,tile.getY())) {
    name=""String_Node_Str"";
    angleY=FastMath.PI;
    position=new Vector3f(TILE_WIDTH / 2,TORCH_HEIGHT,0);
  }
  if (name != null) {
    Spatial spatial=AssetUtils.loadModel(assetManager,name);
    spatial.addControl(new TorchControl(kwdFile,assetManager,angleY));
    spatial.rotate(0,angleY,0);
    spatial.move(position);
    AssetUtils.moveToTile(spatial,tile.getLocation());
    ((Node)getTileNode(tile.getLocation(),(Node)pageNode.getChild(WALL_INDEX))).attachChild(spatial);
  }
}","private void handleTorch(TileData tile,Node pageNode){
  String name=null;
  float angleY=0;
  Vector3f position=Vector3f.ZERO;
  if (tile.getY() % 2 == 0 && tile.getX() % 2 != 0 && canPlaceTorch(tile.getX(),tile.getY() - 1)) {
    name=""String_Node_Str"";
    angleY=-FastMath.HALF_PI;
    position=new Vector3f(0,TORCH_HEIGHT,-TILE_WIDTH / 2);
  }
 else   if (tile.getX() % 2 == 0 && tile.getY() % 2 == 0 && canPlaceTorch(tile.getX() - 1,tile.getY())) {
    name=""String_Node_Str"";
    position=new Vector3f(-TILE_WIDTH / 2,TORCH_HEIGHT,0);
  }
 else   if (tile.getY() % 2 == 0 && tile.getX() % 2 != 0 && canPlaceTorch(tile.getX(),tile.getY() + 1)) {
    name=""String_Node_Str"";
    angleY=FastMath.HALF_PI;
    position=new Vector3f(0,TORCH_HEIGHT,TILE_WIDTH / 2);
  }
 else   if (tile.getX() % 2 == 0 && tile.getY() % 2 == 0 && canPlaceTorch(tile.getX() + 1,tile.getY())) {
    name=""String_Node_Str"";
    angleY=FastMath.PI;
    position=new Vector3f(TILE_WIDTH / 2,TORCH_HEIGHT,0);
  }
  if (name != null) {
    Spatial spatial=AssetUtils.loadModel(assetManager,name);
    spatial.addControl(new TorchControl(kwdFile,assetManager,angleY));
    spatial.rotate(0,angleY,0);
    spatial.setLocalTranslation(WorldUtils.pointToVector3f(tile.getLocation()).addLocal(position));
    ((Node)getTileNode(tile.getLocation(),(Node)pageNode.getChild(WALL_INDEX))).attachChild(spatial);
  }
}"
8859,"/** 
 * Handle top construction on the tile
 * @param tile this tile
 * @param terrain DO NOT REMOVE. Need for construct water bed
 * @param pageNode page node
 */
private void handleTop(TileData tile,Terrain terrain,Node pageNode){
  ArtResource model=terrain.getCompleteResource();
  Point p=tile.getLocation();
  Spatial spatial;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.CONSTRUCTION_TYPE_WATER)) {
    if (!terrainBatchCoordinates.containsKey(p)) {
      EntityInstance<Terrain> entityInstance=new EntityInstance<>(terrain);
      findTerrainBatch(p,entityInstance);
      if (terrain.getFlags().contains(Terrain.TerrainFlag.LAVA)) {
        lavaBatches.add(entityInstance);
      }
 else {
        waterBatches.add(entityInstance);
      }
    }
    spatial=new WaterConstructor(kwdFile).construct(mapData,p.x,p.y,terrain,assetManager,model.getName());
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.CONSTRUCTION_TYPE_QUAD)) {
    String modelName=(model == null && terrain.getTerrainId() == 35) ? ""String_Node_Str"" : model.getName();
    spatial=new QuadConstructor(kwdFile).construct(mapData,p.x,p.y,terrain,assetManager,modelName);
  }
 else {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
      model=terrain.getTopResource();
    }
    spatial=loadModel(model.getName());
  }
  if (terrain.getFlags().contains(Terrain.TerrainFlag.RANDOM_TEXTURE)) {
    setRandomTexture(spatial,tile);
  }
  Node topTileNode;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    topTileNode=getTileNode(p,(Node)pageNode.getChild(TOP_INDEX));
  }
 else {
    topTileNode=getTileNode(p,(Node)pageNode.getChild(FLOOR_INDEX));
  }
  topTileNode.attachChild(spatial);
  setTileMaterialToGeometries(tile,topTileNode);
  AssetUtils.moveToTile(topTileNode,p);
  tile.setTopNode(topTileNode);
}","/** 
 * Handle top construction on the tile
 * @param tile this tile
 * @param terrain DO NOT REMOVE. Need for construct water bed
 * @param pageNode page node
 */
private void handleTop(TileData tile,Terrain terrain,Node pageNode){
  ArtResource model=terrain.getCompleteResource();
  Point p=tile.getLocation();
  Spatial spatial;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.CONSTRUCTION_TYPE_WATER)) {
    if (!terrainBatchCoordinates.containsKey(p)) {
      EntityInstance<Terrain> entityInstance=new EntityInstance<>(terrain);
      findTerrainBatch(p,entityInstance);
      if (terrain.getFlags().contains(Terrain.TerrainFlag.LAVA)) {
        lavaBatches.add(entityInstance);
      }
 else {
        waterBatches.add(entityInstance);
      }
    }
    spatial=new WaterConstructor(kwdFile).construct(mapData,p.x,p.y,terrain,assetManager,model.getName());
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.CONSTRUCTION_TYPE_QUAD)) {
    String modelName=(model == null && terrain.getTerrainId() == 35) ? ""String_Node_Str"" : model.getName();
    spatial=new QuadConstructor(kwdFile).construct(mapData,p.x,p.y,terrain,assetManager,modelName);
  }
 else {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
      model=terrain.getTopResource();
    }
    spatial=loadModel(model.getName());
  }
  if (terrain.getFlags().contains(Terrain.TerrainFlag.RANDOM_TEXTURE)) {
    setRandomTexture(spatial,tile);
  }
  Node topTileNode;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    topTileNode=getTileNode(p,(Node)pageNode.getChild(TOP_INDEX));
  }
 else {
    topTileNode=getTileNode(p,(Node)pageNode.getChild(FLOOR_INDEX));
  }
  topTileNode.attachChild(spatial);
  setTileMaterialToGeometries(tile,topTileNode);
  AssetUtils.translateToTile(topTileNode,p);
  tile.setTopNode(topTileNode);
}"
8860,"private void handleSide(TileData tile,Node pageNode){
  Point p=tile.getLocation();
  Node sideTileNode=getTileNode(p,(Node)pageNode.getChild(WALL_INDEX));
  for (  WallDirection direction : WallDirection.values()) {
    Spatial wall=getWallSpatial(tile,direction);
    if (wall != null) {
      wall.rotate(0,direction.getAngle(),0);
      sideTileNode.attachChild(wall);
    }
  }
  setTileMaterialToGeometries(tile,sideTileNode);
  AssetUtils.moveToTile(sideTileNode,p);
  tile.setSideNode(sideTileNode);
}","private void handleSide(TileData tile,Node pageNode){
  Point p=tile.getLocation();
  Node sideTileNode=getTileNode(p,(Node)pageNode.getChild(WALL_INDEX));
  for (  WallDirection direction : WallDirection.values()) {
    Spatial wall=getWallSpatial(tile,direction);
    if (wall != null) {
      wall.rotate(0,direction.getAngle(),0);
      sideTileNode.attachChild(wall);
    }
  }
  setTileMaterialToGeometries(tile,sideTileNode);
  AssetUtils.translateToTile(sideTileNode,p);
  tile.setSideNode(sideTileNode);
}"
8861,"/** 
 * Damage a tile
 * @param point the point
 * @param playerId the player applying the damage
 * @return you might get gold out of this
 */
public int damageTile(Point point,short playerId){
  TileData tile=getMapData().getTile(point);
  Terrain terrain=tile.getTerrain();
  int damage=0;
  int returnedGold=0;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE)) {
      if (tile.getPlayerId() == playerId) {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_OWN_WALL_HEALTH);
      }
 else {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_ENEMY_WALL_HEALTH);
      }
    }
 else     if (tile.getGold() > 0) {
      if (terrain.getFlags().contains(Terrain.TerrainFlag.IMPENETRABLE)) {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.GOLD_MINED_FROM_GEMS);
      }
 else {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.MINE_GOLD_HEALTH);
      }
    }
 else {
      damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_ROCK_HEALTH);
    }
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE) && tile.getPlayerId() != playerId) {
    damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.ATTACK_TILE_HEALTH);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + terrain.getName() + ""String_Node_Str""+ point+ ""String_Node_Str"");
  }
  boolean tileDestroyed;
  damage=Math.abs(damage);
  if (tile.getGold() > 0) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.IMPENETRABLE)) {
      returnedGold=damage;
      tileDestroyed=false;
    }
 else {
      returnedGold=tile.mineGold(damage);
      tileDestroyed=(tile.getGold() < 1);
    }
  }
 else {
    tileDestroyed=tile.applyDamage(damage);
  }
  if (tileDestroyed) {
    if (terrain.getDestroyedEffectId() != 0) {
      effectManager.load(worldNode,WorldUtils.pointToVector3f(point),terrain.getDestroyedEffectId(),false);
    }
    tile.setTerrainId(terrain.getDestroyedTypeTerrainId());
    updateRoomWalls(tile);
    mapLoader.updateTiles(mapLoader.getSurroundingTiles(tile.getLocation(),true));
    notifyTileChange(point);
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.DECAY)) {
    mapLoader.updateTiles(point);
  }
  return returnedGold;
}","/** 
 * Damage a tile
 * @param point the point
 * @param playerId the player applying the damage
 * @return you might get gold out of this
 */
public int damageTile(Point point,short playerId){
  TileData tile=getMapData().getTile(point);
  Terrain terrain=tile.getTerrain();
  int damage=0;
  int returnedGold=0;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE)) {
      if (tile.getPlayerId() == playerId) {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_OWN_WALL_HEALTH);
      }
 else {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_ENEMY_WALL_HEALTH);
      }
    }
 else     if (tile.getGold() > 0) {
      if (terrain.getFlags().contains(Terrain.TerrainFlag.IMPENETRABLE)) {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.GOLD_MINED_FROM_GEMS);
      }
 else {
        damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.MINE_GOLD_HEALTH);
      }
    }
 else {
      damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.DIG_ROCK_HEALTH);
    }
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE) && tile.getPlayerId() != playerId) {
    damage=(int)getLevelVariable(Variable.MiscVariable.MiscType.ATTACK_TILE_HEALTH);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + terrain.getName() + ""String_Node_Str""+ point+ ""String_Node_Str"");
  }
  boolean tileDestroyed;
  damage=Math.abs(damage);
  if (tile.getGold() > 0) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.IMPENETRABLE)) {
      returnedGold=damage;
      tileDestroyed=false;
    }
 else {
      returnedGold=tile.mineGold(damage);
      tileDestroyed=(tile.getGold() < 1);
    }
  }
 else {
    tileDestroyed=tile.applyDamage(damage);
  }
  if (tileDestroyed) {
    if (terrain.getDestroyedEffectId() != 0) {
      effectManager.load(worldNode,WorldUtils.pointToVector3f(point).addLocal(0,MapLoader.FLOOR_HEIGHT,0),terrain.getDestroyedEffectId(),false);
    }
    tile.setTerrainId(terrain.getDestroyedTypeTerrainId());
    updateRoomWalls(tile);
    mapLoader.updateTiles(mapLoader.getSurroundingTiles(tile.getLocation(),true));
    notifyTileChange(point);
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.DECAY)) {
    mapLoader.updateTiles(point);
  }
  return returnedGold;
}"
8862,"/** 
 * Heal a tile
 * @param point the point
 * @param playerId the player applying the healing
 */
public void healTile(Point point,short playerId){
  TileData tile=getMapData().getTile(point);
  Terrain terrain=tile.getTerrain();
  int healing;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE)) {
      if (tile.getPlayerId() == playerId) {
        healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REPAIR_WALL_HEALTH);
      }
 else {
        healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.CLAIM_TILE_HEALTH);
      }
    }
 else {
      healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REINFORCE_WALL_HEALTH);
    }
  }
 else {
    healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REPAIR_TILE_HEALTH);
  }
  if (tile.applyHealing(healing)) {
    if (terrain.getMaxHealthEffectId() != 0) {
      effectManager.load(worldNode,WorldUtils.pointToVector3f(point),terrain.getMaxHealthEffectId(),false);
    }
    if (terrain.getMaxHealthTypeTerrainId() > 0) {
      tile.setTerrainId(terrain.getMaxHealthTypeTerrainId());
      tile.setPlayerId(playerId);
    }
    updateRoomWalls(tile);
    mapLoader.updateTiles(mapLoader.getSurroundingTiles(tile.getLocation(),true));
    notifyTileChange(point);
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.DECAY)) {
    mapLoader.updateTiles(point);
  }
}","/** 
 * Heal a tile
 * @param point the point
 * @param playerId the player applying the healing
 */
public void healTile(Point point,short playerId){
  TileData tile=getMapData().getTile(point);
  Terrain terrain=tile.getTerrain();
  int healing;
  if (terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (terrain.getFlags().contains(Terrain.TerrainFlag.OWNABLE)) {
      if (tile.getPlayerId() == playerId) {
        healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REPAIR_WALL_HEALTH);
      }
 else {
        healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.CLAIM_TILE_HEALTH);
      }
    }
 else {
      healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REINFORCE_WALL_HEALTH);
    }
  }
 else {
    healing=(int)getLevelVariable(Variable.MiscVariable.MiscType.REPAIR_TILE_HEALTH);
  }
  if (tile.applyHealing(healing)) {
    if (terrain.getMaxHealthEffectId() != 0) {
      effectManager.load(worldNode,WorldUtils.pointToVector3f(point).addLocal(0,MapLoader.FLOOR_HEIGHT,0),terrain.getMaxHealthEffectId(),false);
    }
    if (terrain.getMaxHealthTypeTerrainId() > 0) {
      tile.setTerrainId(terrain.getMaxHealthTypeTerrainId());
      tile.setPlayerId(playerId);
    }
    updateRoomWalls(tile);
    mapLoader.updateTiles(mapLoader.getSurroundingTiles(tile.getLocation(),true));
    notifyTileChange(point);
  }
 else   if (terrain.getFlags().contains(Terrain.TerrainFlag.DECAY)) {
    mapLoader.updateTiles(point);
  }
}"
8863,"@Override protected void controlUpdate(float tpf){
  if (steeringReady) {
    steeringReady=false;
    getSpatial().setLocalTranslation(position.x,0,position.y);
    getSpatial().setLocalRotation(getSpatial().getLocalRotation().fromAngles(0,-orientation,0));
  }
}","@Override protected void controlUpdate(float tpf){
  if (steeringReady) {
    steeringReady=false;
    getSpatial().setLocalTranslation(position.x,MapLoader.FLOOR_HEIGHT,position.y);
    getSpatial().setLocalRotation(getSpatial().getLocalRotation().fromAngles(0,-orientation,0));
  }
}"
8864,"protected void lockDoor(){
  locked=true;
  if (lockSpatial == null && lockObject != null) {
    lockSpatial=AssetUtils.loadModel(assetManager,lockObject.getMeshResource().getName());
    lockSpatial.move(0,MapLoader.TORCH_HEIGHT,0);
    lockSpatial.setUserData(AssetUtils.USER_DATA_KEY_REMOVABLE,false);
    ((Node)getSpatial()).attachChild(lockSpatial);
  }
  closeDoor();
}","protected void lockDoor(){
  locked=true;
  if (lockSpatial == null && lockObject != null) {
    lockSpatial=AssetUtils.loadModel(assetManager,lockObject.getMeshResource().getName());
    lockSpatial.move(0,MapLoader.TOP_HEIGHT,0);
    lockSpatial.setUserData(AssetUtils.USER_DATA_KEY_REMOVABLE,false);
    ((Node)getSpatial()).attachChild(lockSpatial);
  }
  closeDoor();
}"
8865,"@Override protected BatchNode constructFloor(){
  BatchNode root=new BatchNode();
  String modelName=roomInstance.getRoom().getCompleteResource().getName();
  for (  Point p : roomInstance.getCoordinates()) {
    boolean N=roomInstance.hasCoordinate(new Point(p.x,p.y - 1));
    boolean NE=roomInstance.hasCoordinate(new Point(p.x + 1,p.y - 1));
    boolean E=roomInstance.hasCoordinate(new Point(p.x + 1,p.y));
    boolean SE=roomInstance.hasCoordinate(new Point(p.x + 1,p.y + 1));
    boolean S=roomInstance.hasCoordinate(new Point(p.x,p.y + 1));
    boolean SW=roomInstance.hasCoordinate(new Point(p.x - 1,p.y + 1));
    boolean W=roomInstance.hasCoordinate(new Point(p.x - 1,p.y));
    boolean NW=roomInstance.hasCoordinate(new Point(p.x - 1,p.y - 1));
    Node model=constructQuad(assetManager,modelName,N,NE,E,SE,S,SW,W,NW);
    AssetUtils.scale(model);
    AssetUtils.moveToTile(model,p);
    root.attachChild(model);
  }
  return root;
}","@Override protected BatchNode constructFloor(){
  BatchNode root=new BatchNode();
  String modelName=roomInstance.getRoom().getCompleteResource().getName();
  for (  Point p : roomInstance.getCoordinates()) {
    boolean N=roomInstance.hasCoordinate(new Point(p.x,p.y - 1));
    boolean NE=roomInstance.hasCoordinate(new Point(p.x + 1,p.y - 1));
    boolean E=roomInstance.hasCoordinate(new Point(p.x + 1,p.y));
    boolean SE=roomInstance.hasCoordinate(new Point(p.x + 1,p.y + 1));
    boolean S=roomInstance.hasCoordinate(new Point(p.x,p.y + 1));
    boolean SW=roomInstance.hasCoordinate(new Point(p.x - 1,p.y + 1));
    boolean W=roomInstance.hasCoordinate(new Point(p.x - 1,p.y));
    boolean NW=roomInstance.hasCoordinate(new Point(p.x - 1,p.y - 1));
    Node model=constructQuad(assetManager,modelName,N,NE,E,SE,S,SW,W,NW);
    AssetUtils.translateToTile(model,p);
    root.attachChild(model);
  }
  return root;
}"
8866,"@Override public void onMouseButtonEvent(MouseButtonEvent evt){
  timeFromLastUpdate=0;
  if (isOnGui || !isOnMap) {
    return;
  }
  if (evt.getButtonIndex() == MouseInput.BUTTON_LEFT) {
    if (evt.isPressed()) {
      if (interactionState.getType() == Type.SPELL) {
        if (interactiveControl != null && interactionState.getItemId() == SPELL_POSSESSION_ID && interactiveControl.isPickable(player.getPlayerId())) {
          CreatureControl cc=interactiveControl.getSpatial().getControl(CreatureControl.class);
          if (cc != null) {
            onPossession(cc);
            setInteractionState(Type.NONE,0);
          }
        }
      }
 else       if (interactionState.getType() == Type.TRAP) {
      }
 else       if (interactionState.getType() == Type.DOOR) {
      }
 else       if (interactionState.getType() == Type.NONE && interactiveControl != null && !keeperHand.isFull() && interactiveControl.isPickable(player.getPlayerId())) {
        pickupObject(interactiveControl);
      }
 else {
        if (selectionHandler.isVisible()) {
          selectionHandler.setActive(true);
        }
        if (isTaggable) {
          updateCursor();
          Vector2f pos=selectionHandler.getPointedTilePosition();
          getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,""String_Node_Str"");
        }
      }
    }
 else     if (evt.isReleased() && selectionHandler.isActive()) {
      SelectionArea selectionArea=selectionHandler.getSelectionArea();
      if (interactionState.getType() == Type.NONE || (interactionState.getType() == Type.ROOM && getWorldHandler().isTaggable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y))) {
        boolean select=!getWorldHandler().isSelected((int)Math.max(0,selectionArea.getRealStart().x),(int)Math.max(0,selectionArea.getRealStart().y));
        getWorldHandler().selectTiles(selectionArea,select,player.getPlayerId());
      }
 else       if (interactionState.getType() == Type.ROOM && getWorldHandler().isBuildable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y,player,gameState.getLevelData().getRoomById(interactionState.getItemId()))) {
        getWorldHandler().build(selectionArea,player,gameState.getLevelData().getRoomById(interactionState.getItemId()));
      }
 else       if (interactionState.getType() == Type.SELL) {
        getWorldHandler().sell(selectionArea,player);
      }
      selectionHandler.setActive(false);
      updateCursor();
    }
  }
 else   if (evt.getButtonIndex() == MouseInput.BUTTON_RIGHT && evt.isReleased()) {
    Vector2f pos=selectionHandler.getPointedTilePosition();
    if (interactionState.getType() == Type.NONE) {
      if (keeperHand.getItem() != null) {
        TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
        IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
        if (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE) {
          keeperHand.pop().drop(tile,selectionHandler.getPointedPositionInTile(),interactiveControl);
          updateCursor();
        }
      }
 else       if (Main.isDebug()) {
        if (getWorldHandler().isTaggable((int)pos.x,(int)pos.y)) {
          getWorldHandler().digTile((int)pos.x,(int)pos.y);
        }
 else         if (getWorldHandler().isClaimable((int)pos.x,(int)pos.y,player.getPlayerId())) {
          getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
        }
      }
 else       if (interactiveControl != null && interactiveControl.isInteractable(player.getPlayerId())) {
        getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,KeeperHand.getSlapSound());
        interactiveControl.interact(player.getPlayerId());
      }
    }
    setInteractionState(Type.NONE,0);
    updateCursor();
    selectionHandler.setActive(false);
  }
 else   if (evt.getButtonIndex() == MouseInput.BUTTON_MIDDLE && evt.isReleased()) {
    Vector2f pos=selectionHandler.getPointedTilePosition();
    if (Main.isDebug()) {
      getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
    }
  }
}","@Override public void onMouseButtonEvent(MouseButtonEvent evt){
  timeFromLastUpdate=0;
  if (isOnGui || !isOnMap) {
    return;
  }
  if (evt.getButtonIndex() == MouseInput.BUTTON_LEFT) {
    if (evt.isPressed()) {
      if (interactionState.getType() == Type.SPELL) {
        if (interactiveControl != null && interactionState.getItemId() == SPELL_POSSESSION_ID && interactiveControl.isPickable(player.getPlayerId())) {
          CreatureControl cc=interactiveControl.getSpatial().getControl(CreatureControl.class);
          if (cc != null) {
            onPossession(cc);
            setInteractionState(Type.NONE,0);
          }
        }
      }
 else       if (interactionState.getType() == Type.TRAP) {
      }
 else       if (interactionState.getType() == Type.DOOR) {
      }
 else       if (interactionState.getType() == Type.NONE && interactiveControl != null && !keeperHand.isFull() && interactiveControl.isPickable(player.getPlayerId())) {
        pickupObject(interactiveControl);
      }
 else {
        if (selectionHandler.isVisible()) {
          selectionHandler.setActive(true);
        }
        if (isTaggable) {
          updateCursor();
          Vector2f pos=selectionHandler.getPointedTilePosition();
          getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,""String_Node_Str"");
        }
      }
    }
 else     if (evt.isReleased() && selectionHandler.isActive()) {
      SelectionArea selectionArea=selectionHandler.getSelectionArea();
      if (interactionState.getType() == Type.NONE || (interactionState.getType() == Type.ROOM && getWorldHandler().isTaggable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y))) {
        boolean select=!getWorldHandler().isSelected((int)Math.max(0,selectionArea.getRealStart().x),(int)Math.max(0,selectionArea.getRealStart().y));
        getWorldHandler().selectTiles(selectionArea,select,player.getPlayerId());
      }
 else       if (interactionState.getType() == Type.ROOM && getWorldHandler().isBuildable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y,player,gameState.getLevelData().getRoomById(interactionState.getItemId()))) {
        getWorldHandler().build(selectionArea,player,gameState.getLevelData().getRoomById(interactionState.getItemId()));
      }
 else       if (interactionState.getType() == Type.SELL) {
        getWorldHandler().sell(selectionArea,player);
      }
      selectionHandler.setActive(false);
      updateCursor();
    }
  }
 else   if (evt.getButtonIndex() == MouseInput.BUTTON_RIGHT && evt.isReleased()) {
    Vector2f pos=selectionHandler.getPointedTilePosition();
    if (interactionState.getType() == Type.NONE) {
      if (keeperHand.getItem() != null) {
        TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
        IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
        if (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE) {
          keeperHand.pop().drop(tile,selectionHandler.getPointedPositionInTile(),interactiveControl);
          updateCursor();
        }
      }
 else       if (interactiveControl != null && interactiveControl.isInteractable(player.getPlayerId())) {
        getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,KeeperHand.getSlapSound());
        interactiveControl.interact(player.getPlayerId());
      }
 else       if (Main.isDebug()) {
        if (getWorldHandler().isTaggable((int)pos.x,(int)pos.y)) {
          getWorldHandler().digTile((int)pos.x,(int)pos.y);
        }
 else         if (getWorldHandler().isClaimable((int)pos.x,(int)pos.y,player.getPlayerId())) {
          getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
        }
      }
    }
    setInteractionState(Type.NONE,0);
    updateCursor();
    selectionHandler.setActive(false);
  }
 else   if (evt.getButtonIndex() == MouseInput.BUTTON_MIDDLE && evt.isReleased()) {
    Vector2f pos=selectionHandler.getPointedTilePosition();
    if (Main.isDebug()) {
      getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
    }
  }
}"
8867,"private void initializeInput(){
  inputListener=new RawInputListener(){
    @Override public void beginInput(){
    }
    @Override public void endInput(){
    }
    @Override public void onJoyAxisEvent(    JoyAxisEvent evt){
    }
    @Override public void onJoyButtonEvent(    JoyButtonEvent evt){
    }
    @Override public void onMouseMotionEvent(    MouseMotionEvent evt){
      mousePosition.set(evt.getX(),evt.getY());
      keeperHand.setPosition(evt.getX(),evt.getY());
    }
    @Override public void onMouseButtonEvent(    MouseButtonEvent evt){
      timeFromLastUpdate=0;
      if (isOnGui || !isOnMap) {
        return;
      }
      if (evt.getButtonIndex() == MouseInput.BUTTON_LEFT) {
        if (evt.isPressed()) {
          if (interactionState.getType() == Type.SPELL) {
            if (interactiveControl != null && interactionState.getItemId() == SPELL_POSSESSION_ID && interactiveControl.isPickable(player.getPlayerId())) {
              CreatureControl cc=interactiveControl.getSpatial().getControl(CreatureControl.class);
              if (cc != null) {
                onPossession(cc);
                setInteractionState(Type.NONE,0);
              }
            }
          }
 else           if (interactionState.getType() == Type.TRAP) {
          }
 else           if (interactionState.getType() == Type.DOOR) {
          }
 else           if (interactionState.getType() == Type.NONE && interactiveControl != null && !keeperHand.isFull() && interactiveControl.isPickable(player.getPlayerId())) {
            pickupObject(interactiveControl);
          }
 else {
            if (selectionHandler.isVisible()) {
              selectionHandler.setActive(true);
            }
            if (isTaggable) {
              updateCursor();
              Vector2f pos=selectionHandler.getPointedTilePosition();
              getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,""String_Node_Str"");
            }
          }
        }
 else         if (evt.isReleased() && selectionHandler.isActive()) {
          SelectionArea selectionArea=selectionHandler.getSelectionArea();
          if (interactionState.getType() == Type.NONE || (interactionState.getType() == Type.ROOM && getWorldHandler().isTaggable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y))) {
            boolean select=!getWorldHandler().isSelected((int)Math.max(0,selectionArea.getRealStart().x),(int)Math.max(0,selectionArea.getRealStart().y));
            getWorldHandler().selectTiles(selectionArea,select,player.getPlayerId());
          }
 else           if (interactionState.getType() == Type.ROOM && getWorldHandler().isBuildable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y,player,gameState.getLevelData().getRoomById(interactionState.getItemId()))) {
            getWorldHandler().build(selectionArea,player,gameState.getLevelData().getRoomById(interactionState.getItemId()));
          }
 else           if (interactionState.getType() == Type.SELL) {
            getWorldHandler().sell(selectionArea,player);
          }
          selectionHandler.setActive(false);
          updateCursor();
        }
      }
 else       if (evt.getButtonIndex() == MouseInput.BUTTON_RIGHT && evt.isReleased()) {
        Vector2f pos=selectionHandler.getPointedTilePosition();
        if (interactionState.getType() == Type.NONE) {
          if (keeperHand.getItem() != null) {
            TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
            IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
            if (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE) {
              keeperHand.pop().drop(tile,selectionHandler.getPointedPositionInTile(),interactiveControl);
              updateCursor();
            }
          }
 else           if (Main.isDebug()) {
            if (getWorldHandler().isTaggable((int)pos.x,(int)pos.y)) {
              getWorldHandler().digTile((int)pos.x,(int)pos.y);
            }
 else             if (getWorldHandler().isClaimable((int)pos.x,(int)pos.y,player.getPlayerId())) {
              getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
            }
          }
 else           if (interactiveControl != null && interactiveControl.isInteractable(player.getPlayerId())) {
            getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,KeeperHand.getSlapSound());
            interactiveControl.interact(player.getPlayerId());
          }
        }
        setInteractionState(Type.NONE,0);
        updateCursor();
        selectionHandler.setActive(false);
      }
 else       if (evt.getButtonIndex() == MouseInput.BUTTON_MIDDLE && evt.isReleased()) {
        Vector2f pos=selectionHandler.getPointedTilePosition();
        if (Main.isDebug()) {
          getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
        }
      }
    }
    @Override public void onKeyEvent(    KeyInputEvent evt){
      if (evt.isPressed()) {
        if (evt.getKeyCode() == KeyInput.KEY_F12) {
          CheatState cheat=stateManager.getState(CheatState.class);
          if (!cheat.isEnabled()) {
            cheat.setEnabled(true);
          }
        }
 else         if (evt.getKeyCode() == ConsoleState.KEY && Main.isDebug()) {
          stateManager.getState(ConsoleState.class).setEnabled(true);
        }
 else         if (evt.getKeyCode() == (Integer)Settings.Setting.TOGGLE_PLAYER_INFORMATION.getDefaultValue()) {
          Element stats=view.findElementById(""String_Node_Str"");
          if (stats != null) {
            if (stats.isVisible()) {
              stats.hide();
            }
 else {
              stats.show();
            }
          }
        }
      }
    }
    @Override public void onTouchEvent(    TouchEvent evt){
    }
  }
;
}","private void initializeInput(){
  inputListener=new RawInputListener(){
    @Override public void beginInput(){
    }
    @Override public void endInput(){
    }
    @Override public void onJoyAxisEvent(    JoyAxisEvent evt){
    }
    @Override public void onJoyButtonEvent(    JoyButtonEvent evt){
    }
    @Override public void onMouseMotionEvent(    MouseMotionEvent evt){
      mousePosition.set(evt.getX(),evt.getY());
      keeperHand.setPosition(evt.getX(),evt.getY());
    }
    @Override public void onMouseButtonEvent(    MouseButtonEvent evt){
      timeFromLastUpdate=0;
      if (isOnGui || !isOnMap) {
        return;
      }
      if (evt.getButtonIndex() == MouseInput.BUTTON_LEFT) {
        if (evt.isPressed()) {
          if (interactionState.getType() == Type.SPELL) {
            if (interactiveControl != null && interactionState.getItemId() == SPELL_POSSESSION_ID && interactiveControl.isPickable(player.getPlayerId())) {
              CreatureControl cc=interactiveControl.getSpatial().getControl(CreatureControl.class);
              if (cc != null) {
                onPossession(cc);
                setInteractionState(Type.NONE,0);
              }
            }
          }
 else           if (interactionState.getType() == Type.TRAP) {
          }
 else           if (interactionState.getType() == Type.DOOR) {
          }
 else           if (interactionState.getType() == Type.NONE && interactiveControl != null && !keeperHand.isFull() && interactiveControl.isPickable(player.getPlayerId())) {
            pickupObject(interactiveControl);
          }
 else {
            if (selectionHandler.isVisible()) {
              selectionHandler.setActive(true);
            }
            if (isTaggable) {
              updateCursor();
              Vector2f pos=selectionHandler.getPointedTilePosition();
              getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,""String_Node_Str"");
            }
          }
        }
 else         if (evt.isReleased() && selectionHandler.isActive()) {
          SelectionArea selectionArea=selectionHandler.getSelectionArea();
          if (interactionState.getType() == Type.NONE || (interactionState.getType() == Type.ROOM && getWorldHandler().isTaggable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y))) {
            boolean select=!getWorldHandler().isSelected((int)Math.max(0,selectionArea.getRealStart().x),(int)Math.max(0,selectionArea.getRealStart().y));
            getWorldHandler().selectTiles(selectionArea,select,player.getPlayerId());
          }
 else           if (interactionState.getType() == Type.ROOM && getWorldHandler().isBuildable((int)selectionArea.getRealStart().x,(int)selectionArea.getRealStart().y,player,gameState.getLevelData().getRoomById(interactionState.getItemId()))) {
            getWorldHandler().build(selectionArea,player,gameState.getLevelData().getRoomById(interactionState.getItemId()));
          }
 else           if (interactionState.getType() == Type.SELL) {
            getWorldHandler().sell(selectionArea,player);
          }
          selectionHandler.setActive(false);
          updateCursor();
        }
      }
 else       if (evt.getButtonIndex() == MouseInput.BUTTON_RIGHT && evt.isReleased()) {
        Vector2f pos=selectionHandler.getPointedTilePosition();
        if (interactionState.getType() == Type.NONE) {
          if (keeperHand.getItem() != null) {
            TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
            IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
            if (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE) {
              keeperHand.pop().drop(tile,selectionHandler.getPointedPositionInTile(),interactiveControl);
              updateCursor();
            }
          }
 else           if (interactiveControl != null && interactiveControl.isInteractable(player.getPlayerId())) {
            getWorldHandler().playSoundAtTile((int)pos.x,(int)pos.y,KeeperHand.getSlapSound());
            interactiveControl.interact(player.getPlayerId());
          }
 else           if (Main.isDebug()) {
            if (getWorldHandler().isTaggable((int)pos.x,(int)pos.y)) {
              getWorldHandler().digTile((int)pos.x,(int)pos.y);
            }
 else             if (getWorldHandler().isClaimable((int)pos.x,(int)pos.y,player.getPlayerId())) {
              getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
            }
          }
        }
        setInteractionState(Type.NONE,0);
        updateCursor();
        selectionHandler.setActive(false);
      }
 else       if (evt.getButtonIndex() == MouseInput.BUTTON_MIDDLE && evt.isReleased()) {
        Vector2f pos=selectionHandler.getPointedTilePosition();
        if (Main.isDebug()) {
          getWorldHandler().claimTile((int)pos.x,(int)pos.y,player.getPlayerId());
        }
      }
    }
    @Override public void onKeyEvent(    KeyInputEvent evt){
      if (evt.isPressed()) {
        if (evt.getKeyCode() == KeyInput.KEY_F12) {
          CheatState cheat=stateManager.getState(CheatState.class);
          if (!cheat.isEnabled()) {
            cheat.setEnabled(true);
          }
        }
 else         if (evt.getKeyCode() == ConsoleState.KEY && Main.isDebug()) {
          stateManager.getState(ConsoleState.class).setEnabled(true);
        }
 else         if (evt.getKeyCode() == (Integer)Settings.Setting.TOGGLE_PLAYER_INFORMATION.getDefaultValue()) {
          Element stats=view.findElementById(""String_Node_Str"");
          if (stats != null) {
            if (stats.isVisible()) {
              stats.hide();
            }
 else {
              stats.show();
            }
          }
        }
      }
    }
    @Override public void onTouchEvent(    TouchEvent evt){
    }
  }
;
}"
8868,"private boolean isPlayerAffordToBuild(Player player,Room room){
  int playerMoney=getWorldHandler().getGameState().getPlayer(player.getPlayerId()).getGoldControl().getGold();
  if (playerMoney == 0) {
    return false;
  }
  int buildablePlots=0;
  for (int x=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().x); x < Math.min(getWorldHandler().getMapData().getWidth(),selectionHandler.getSelectionArea().getEnd().x + 1); x++) {
    for (int y=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().y); y < Math.min(getWorldHandler().getMapData().getHeight(),selectionHandler.getSelectionArea().getEnd().y + 1); y++) {
      if (getWorldHandler().isBuildable(x,y,player,room)) {
        buildablePlots++;
      }
      if (buildablePlots > 3) {
        return false;
      }
    }
  }
  return true;
}","private boolean isPlayerAffordToBuild(Player player,Room room){
  int playerMoney=getWorldHandler().getGameState().getPlayer(player.getPlayerId()).getGoldControl().getGold();
  if (playerMoney == 0) {
    return false;
  }
  int buildablePlots=0;
  for (int x=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().x); x < Math.min(getWorldHandler().getMapData().getWidth(),selectionHandler.getSelectionArea().getEnd().x + 1); x++) {
    for (int y=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().y); y < Math.min(getWorldHandler().getMapData().getHeight(),selectionHandler.getSelectionArea().getEnd().y + 1); y++) {
      if (getWorldHandler().isBuildable(x,y,player,room)) {
        buildablePlots++;
      }
      if (playerMoney < buildablePlots * room.getCost()) {
        return false;
      }
    }
  }
  return true;
}"
8869,"@Override public void initialize(final AppStateManager stateManager,final Application app){
  super.initialize(stateManager,app);
  this.app=(Main)app;
  assetManager=this.app.getAssetManager();
  this.stateManager=this.app.getStateManager();
  inputManager=this.app.getInputManager();
  gameState=this.stateManager.getState(GameState.class);
  PlayerScreenController psc=this.stateManager.getState(PlayerState.class).getScreen();
  this.view=psc.getGuiConstraint();
  this.tooltip=psc.getTooltip();
  keeperHand=new KeeperHand(assetManager,(int)gameState.getLevelVariable(MiscType.MAX_NUMBER_OF_THINGS_IN_HAND));
  this.app.getGuiNode().attachChild(keeperHand.getNode());
  selectionHandler=new SelectionHandler(this.app){
    @Override public boolean isVisible(){
      if (isTaggable || selectionHandler.isActive()) {
        return true;
      }
      if (!isOnMap) {
        return false;
      }
switch (interactionState.getType()) {
case NONE:
        return (keeperHand.getItem() != null);
case SELL:
case ROOM:
case DOOR:
case TRAP:
      return true;
  }
  return false;
}
@Override protected SelectionHandler.ColorIndicator getColorIndicator(){
  Vector2f pos;
  if (selectionHandler.isActive()) {
    pos=selectionHandler.getSelectionArea().getRealStart();
  }
 else {
    pos=selectionHandler.getPointedTilePosition();
  }
  if (interactionState.getType() == Type.NONE && keeperHand.getItem() != null) {
    TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
    IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
    return (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE ? ColorIndicator.BLUE : ColorIndicator.RED);
  }
  if (interactionState.getType() == Type.SELL) {
    return ColorIndicator.RED;
  }
 else   if (interactionState.getType() == Type.ROOM && !(getWorldHandler().isTaggable((int)pos.x,(int)pos.y) || (getWorldHandler().isBuildable((int)pos.x,(int)pos.y,player,gameState.getLevelData().getRoomById(interactionState.getItemId())) && isPlayerAffordToBuild(player,gameState.getLevelData().getRoomById(interactionState.getItemId()))))) {
    return ColorIndicator.RED;
  }
  return ColorIndicator.BLUE;
}
private boolean isPlayerAffordToBuild(Player player,Room room){
  int playerMoney=getWorldHandler().getGameState().getPlayer(player.getPlayerId()).getGoldControl().getGold();
  if (playerMoney == 0) {
    return false;
  }
  int buildablePlots=0;
  for (int x=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().x); x < Math.min(getWorldHandler().getMapData().getWidth(),selectionHandler.getSelectionArea().getEnd().x + 1); x++) {
    for (int y=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().y); y < Math.min(getWorldHandler().getMapData().getHeight(),selectionHandler.getSelectionArea().getEnd().y + 1); y++) {
      if (getWorldHandler().isBuildable(x,y,player,room)) {
        buildablePlots++;
      }
      if (buildablePlots > 3) {
        return false;
      }
    }
  }
  return true;
}
}
;
CheatState cheatState=new CheatState(app){
@Override public void onSuccess(CheatState.CheatType cheat){
switch (cheat) {
case MONEY:
    getWorldHandler().addGold(player.getPlayerId(),100000);
  break;
case MANA:
gameState.getPlayer(player.getPlayerId()).getManaControl().addMana(100000);
break;
default :
logger.log(Level.WARNING,""String_Node_Str"",cheat.toString());
}
}
}
;
this.stateManager.attach(cheatState);
if (isEnabled()) {
setEnabled(true);
}
}","@Override public void initialize(final AppStateManager stateManager,final Application app){
  super.initialize(stateManager,app);
  this.app=(Main)app;
  assetManager=this.app.getAssetManager();
  this.stateManager=this.app.getStateManager();
  inputManager=this.app.getInputManager();
  gameState=this.stateManager.getState(GameState.class);
  PlayerScreenController psc=this.stateManager.getState(PlayerState.class).getScreen();
  this.view=psc.getGuiConstraint();
  this.tooltip=psc.getTooltip();
  keeperHand=new KeeperHand(assetManager,(int)gameState.getLevelVariable(MiscType.MAX_NUMBER_OF_THINGS_IN_HAND));
  this.app.getGuiNode().attachChild(keeperHand.getNode());
  selectionHandler=new SelectionHandler(this.app){
    @Override public boolean isVisible(){
      if (isTaggable || selectionHandler.isActive()) {
        return true;
      }
      if (!isOnMap) {
        return false;
      }
switch (interactionState.getType()) {
case NONE:
        return (keeperHand.getItem() != null);
case SELL:
case ROOM:
case DOOR:
case TRAP:
      return true;
  }
  return false;
}
@Override protected SelectionHandler.ColorIndicator getColorIndicator(){
  Vector2f pos;
  if (selectionHandler.isActive()) {
    pos=selectionHandler.getSelectionArea().getRealStart();
  }
 else {
    pos=selectionHandler.getPointedTilePosition();
  }
  if (interactionState.getType() == Type.NONE && keeperHand.getItem() != null) {
    TileData tile=getWorldHandler().getMapData().getTile((int)pos.x,(int)pos.y);
    IInteractiveControl.DroppableStatus status=keeperHand.peek().getDroppableStatus(tile);
    return (status != IInteractiveControl.DroppableStatus.NOT_DROPPABLE ? ColorIndicator.BLUE : ColorIndicator.RED);
  }
  if (interactionState.getType() == Type.SELL) {
    return ColorIndicator.RED;
  }
 else   if (interactionState.getType() == Type.ROOM && !(getWorldHandler().isTaggable((int)pos.x,(int)pos.y) || (getWorldHandler().isBuildable((int)pos.x,(int)pos.y,player,gameState.getLevelData().getRoomById(interactionState.getItemId())) && isPlayerAffordToBuild(player,gameState.getLevelData().getRoomById(interactionState.getItemId()))))) {
    return ColorIndicator.RED;
  }
  return ColorIndicator.BLUE;
}
private boolean isPlayerAffordToBuild(Player player,Room room){
  int playerMoney=getWorldHandler().getGameState().getPlayer(player.getPlayerId()).getGoldControl().getGold();
  if (playerMoney == 0) {
    return false;
  }
  int buildablePlots=0;
  for (int x=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().x); x < Math.min(getWorldHandler().getMapData().getWidth(),selectionHandler.getSelectionArea().getEnd().x + 1); x++) {
    for (int y=(int)Math.max(0,selectionHandler.getSelectionArea().getStart().y); y < Math.min(getWorldHandler().getMapData().getHeight(),selectionHandler.getSelectionArea().getEnd().y + 1); y++) {
      if (getWorldHandler().isBuildable(x,y,player,room)) {
        buildablePlots++;
      }
      if (playerMoney < buildablePlots * room.getCost()) {
        return false;
      }
    }
  }
  return true;
}
}
;
CheatState cheatState=new CheatState(app){
@Override public void onSuccess(CheatState.CheatType cheat){
switch (cheat) {
case MONEY:
    getWorldHandler().addGold(player.getPlayerId(),100000);
  break;
case MANA:
gameState.getPlayer(player.getPlayerId()).getManaControl().addMana(100000);
break;
default :
logger.log(Level.WARNING,""String_Node_Str"",cheat.toString());
}
}
}
;
this.stateManager.attach(cheatState);
if (isEnabled()) {
setEnabled(true);
}
}"
8870,"protected void updateSelectedItem(PlayerInteractionState.InteractionState state){
  for (  PlayerInteractionState.InteractionState.Type interaction : PlayerInteractionState.InteractionState.Type.values()) {
    Element content=nifty.getScreen(HUD_SCREEN_ID).findElementById(""String_Node_Str"" + interaction.toString().toLowerCase() + ""String_Node_Str"");
    if (content == null || !content.isVisible()) {
      continue;
    }
    for (    Element e : content.getChildren()) {
      e.stopEffect(EffectEventId.onCustom);
    }
  }
  String itemId=state.toString().toLowerCase() + ""String_Node_Str"" + state.getItemId();
  Element item=nifty.getScreen(HUD_SCREEN_ID).findElementById(itemId);
  if (item != null) {
    item.startEffect(EffectEventId.onCustom,null,""String_Node_Str"");
  }
}","protected void updateSelectedItem(PlayerInteractionState.InteractionState state){
  for (  PlayerInteractionState.InteractionState.Type interaction : PlayerInteractionState.InteractionState.Type.values()) {
    Element content=nifty.getScreen(HUD_SCREEN_ID).findElementById(""String_Node_Str"" + interaction.toString().toLowerCase() + ""String_Node_Str"");
    if (content == null || !content.isVisible()) {
      continue;
    }
    for (    Element e : content.getChildren()) {
      e.stopEffect(EffectEventId.onCustom);
    }
  }
  String itemId=state.getType().toString().toLowerCase() + ""String_Node_Str"" + state.getItemId();
  Element item=nifty.getScreen(HUD_SCREEN_ID).findElementById(itemId);
  if (item != null) {
    item.startEffect(EffectEventId.onCustom,null,""String_Node_Str"");
  }
}"
8871,"@Override public void update(float tpf){
  if (enabled) {
    controlUpdate(tpf);
  }
}","@Override public void update(float tpf){
  if (enabled) {
    updateControl(tpf);
  }
}"
8872,"/** 
 * Sets the right material to tile (selected / decayed...)
 * @param node
 */
private void setTileMaterialToGeometries(final TileData tile,final Node node){
}","/** 
 * Sets the right material to tile (selected / decayed...)
 * @param node
 */
private void setTileMaterialToGeometries(final TileData tile,final Node node){
  if (!tile.isFlashed() && !tile.isSelected() && !tile.getTerrain().getFlags().contains(Terrain.TerrainFlag.DECAY)) {
    return;
  }
  node.depthFirstTraversal(new SceneGraphVisitor(){
    @Override public void visit(    Spatial spatial){
      if (!(spatial instanceof Geometry)) {
        return;
      }
      Material material=((Geometry)spatial).getMaterial();
      if (tile.getTerrain().getFlags().contains(Terrain.TerrainFlag.DECAY) && tile.getTerrain().getTextureFrames() > 1) {
        Integer texCount=spatial.getUserData(KmfModelLoader.MATERIAL_ALTERNATIVE_TEXTURES_COUNT);
        if (texCount != null) {
          int textureIndex=tile.getTerrain().getTextureFrames() - (int)Math.ceil(tile.getHealthPercent() / (100f / tile.getTerrain().getTextureFrames()));
          String diffuseTexture=((Texture)material.getParam(""String_Node_Str"").getValue()).getKey().getName().replaceFirst(""String_Node_Str"",""String_Node_Str"");
          if (textureIndex > 0) {
            if (textureIndex == 1) {
              diffuseTexture=diffuseTexture.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              diffuseTexture=diffuseTexture.replaceFirst(""String_Node_Str"",""String_Node_Str"" + textureIndex + ""String_Node_Str"");
            }
          }
          try {
            Texture texture=assetManager.loadTexture(new TextureKey(ConversionUtils.getCanonicalAssetKey(diffuseTexture),false));
            material.setTexture(""String_Node_Str"",texture);
            AssetUtils.assignMapsToMaterial(assetManager,material);
          }
 catch (          Exception e) {
            logger.log(Level.WARNING,""String_Node_Str"",new Object[]{diffuseTexture,tile.getTerrain().getName(),e.getMessage()});
          }
        }
      }
      if (tile.isFlashed()) {
        material.setColor(""String_Node_Str"",COLOR_FLASH);
        material.setBoolean(""String_Node_Str"",true);
      }
      if (tile.isSelected()) {
        material.setColor(""String_Node_Str"",COLOR_TAG);
        material.setBoolean(""String_Node_Str"",true);
      }
    }
  }
);
}"
8873,"public void setFlashed(boolean flashed){
  this.flashed=flashed;
}","public void setFlashed(boolean flashed){
  if (!terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    flashed=false;
  }
  this.flashed=flashed;
}"
8874,"@Override protected void setTerrainId(short terrainId){
  super.setTerrainId(terrainId);
  if (terrain.getTerrainId() != terrainId) {
    terrain=kwdFile.getTerrain(getTerrainId());
    setAttributesFromTerrain();
    if (!terrain.getFlags().contains(Terrain.TerrainFlag.TAGGABLE)) {
      setSelected(false,(short)0);
    }
  }
}","@Override protected void setTerrainId(short terrainId){
  super.setTerrainId(terrainId);
  if (terrain.getTerrainId() != terrainId) {
    terrain=kwdFile.getTerrain(getTerrainId());
    setAttributesFromTerrain();
    if (!terrain.getFlags().contains(Terrain.TerrainFlag.TAGGABLE)) {
      setSelected(false,(short)0);
    }
    if (!terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
      flashed=false;
    }
  }
}"
8875,"/** 
 * Dig a tile at x & y
 * @param x x coordinate
 * @param y y coordinate
 */
public void digTile(int x,int y){
}","/** 
 * Dig a tile at x & y
 * @param x x coordinate
 * @param y y coordinate
 */
public void digTile(int x,int y){
  TileData tile=getMapData().getTile(x,y);
  if (tile == null) {
    return;
  }
  Terrain terrain=tile.getTerrain();
  if (terrain.getFlags().contains(Terrain.TerrainFlag.IMPENETRABLE)) {
    return;
  }
  addPlayerGold(Keeper.KEEPER1_ID,terrain.getGoldValue());
  tile.setTerrainId(terrain.getDestroyedTypeTerrainId());
  tile.setSelected(false,Keeper.KEEPER1_ID);
  tile.setFlashed(false);
  updateRoomWalls(tile);
  mapLoader.updateTiles(mapLoader.getSurroundingTiles(tile.getLocation(),true));
}"
8876,"/** 
 * Called by the GUI, start the selected level
 * @param type where level selected. @TODO change campaign like others or otherwise
 */
public void startLevel(String type){
  if (""String_Node_Str"".equals(type.toLowerCase())) {
    setEnabled(false);
    String level=String.format(""String_Node_Str"",selectedLevel.getType(),selectedLevel.getLevel(),selectedLevel.getVariation());
    GameState gameState=new GameState(level);
    stateManager.attach(gameState);
  }
 else   if (""String_Node_Str"".equals(type.toLowerCase())) {
    if (mapSelector.getMap() == null) {
      logger.warning(""String_Node_Str"");
      return;
    }
    setEnabled(false);
    GameState gameState=new GameState(mapSelector.getMap(),skirmishPlayers);
    stateManager.attach(gameState);
  }
 else   if (""String_Node_Str"".equals(type.toLowerCase())) {
    if (mapSelector.getMap() == null) {
      logger.warning(""String_Node_Str"");
      return;
    }
    setEnabled(false);
    GameState gameState=new GameState(mapSelector.getMap(),new ArrayList<>());
    stateManager.attach(gameState);
  }
 else {
    logger.warning(""String_Node_Str"" + type);
  }
}","/** 
 * Called by the GUI, start the selected level
 * @param type where level selected. @TODO change campaign like others orotherwise
 */
public void startLevel(String type){
  if (""String_Node_Str"".equals(type.toLowerCase())) {
    setEnabled(false);
    String level=String.format(""String_Node_Str"",selectedLevel.getType(),selectedLevel.getLevel(),selectedLevel.getVariation());
    GameState gameState=new GameState(level);
    stateManager.attach(gameState);
  }
 else   if (""String_Node_Str"".equals(type.toLowerCase())) {
    if (mapSelector.getMap() == null) {
      logger.warning(""String_Node_Str"");
      return;
    }
    setEnabled(false);
    GameState gameState=new GameState(mapSelector.getMap(),skirmishPlayers);
    stateManager.attach(gameState);
  }
 else   if (""String_Node_Str"".equals(type.toLowerCase())) {
    if (mapSelector.getMap() == null) {
      logger.warning(""String_Node_Str"");
      return;
    }
    setEnabled(false);
    GameState gameState=new GameState(mapSelector.getMap(),new ArrayList<>());
    stateManager.attach(gameState);
  }
 else {
    logger.warning(""String_Node_Str"" + type);
  }
}"
8877,"@Override public void onStartScreen(){
  bind(nifty,nifty.getCurrentScreen());
switch (nifty.getCurrentScreen().getScreenId()) {
case ""String_Node_Str"":
    mapSelector.reset();
  initSkirmishPlayers();
break;
case ""String_Node_Str"":
inputManager.addRawInputListener(listener);
break;
case ""String_Node_Str"":
Label levelTitle=screen.findNiftyControl(""String_Node_Str"",Label.class);
levelTitle.setText(getLevelTitle());
Label mainObjective=screen.findNiftyControl(""String_Node_Str"",Label.class);
mainObjective.setText(getLevelResourceBundle().getString(""String_Node_Str""));
Element mainObjectiveImage=screen.findElementById(""String_Node_Str"");
NiftyImage img=nifty.createImage(""String_Node_Str"" + selectedLevel.getFullName() + ""String_Node_Str"",false);
mainObjectiveImage.getRenderer(ImageRenderer.class).setImage(img);
mainObjectiveImage.setWidth(img.getWidth());
mainObjectiveImage.setHeight(img.getHeight());
String subText1=getLevelResourceBundle().getString(""String_Node_Str"");
String subText2=getLevelResourceBundle().getString(""String_Node_Str"");
String subText3=getLevelResourceBundle().getString(""String_Node_Str"");
Element subObjectivePanel=screen.findElementById(""String_Node_Str"");
subObjectivePanel.hide();
if (!(subText1.isEmpty() && subText2.isEmpty() && subText3.isEmpty())) {
subObjectivePanel.show();
setupSubObjectiveLabel(""String_Node_Str"",subText1);
setupSubObjectiveLabel(""String_Node_Str"",subText2);
Label subObjective=setupSubObjectiveLabel(""String_Node_Str"",subText3);
subObjective.getElement().getParent().layoutElements();
Element subObjectiveImage=screen.findElementById(""String_Node_Str"");
subObjectiveImage.hide();
if (selectedLevel.getType().equals(Level.LevelType.Level)) {
subObjectiveImage.show();
img=nifty.createImage(""String_Node_Str"" + selectedLevel.getFullName() + ""String_Node_Str"",false);
subObjectiveImage.getRenderer(ImageRenderer.class).setImage(img);
subObjectiveImage.setWidth(img.getWidth());
subObjectiveImage.setHeight(img.getHeight());
levelBriefing=new AudioNode(assetManager,""String_Node_Str"" + String.format(""String_Node_Str"",selectedLevel.getLevel()) + ""String_Node_Str"",false);
levelBriefing.setLooping(false);
levelBriefing.setDirectional(false);
levelBriefing.setPositional(false);
levelBriefing.play();
}
}
break;
case ""String_Node_Str"":
generateHiscoreList();
break;
case ""String_Node_Str"":
setGraphicsSettingsToGUI();
break;
case ""String_Node_Str"":
setControlSettingsToGUI();
break;
case ""String_Node_Str"":
generateMovieList();
break;
case ""String_Node_Str"":
mapSelector.setSkirmish(true);
populateSelectedMap(mapSelector.getMap());
populateSkirmishPlayerTable();
break;
case ""String_Node_Str"":
mapSelector.reset();
break;
case ""String_Node_Str"":
mapSelector.setSkirmish(false);
populateSelectedMap(mapSelector.getMap());
if (client != null) {
ListBox<TableRow> players=screen.findNiftyControl(""String_Node_Str"",ListBox.class);
if (players != null) {
players.addItem(new TableRow(players.itemCount(),client.getPlayer()));
}
client.setChat(MainMenuState.this.screen.findNiftyControl(""String_Node_Str"",Chat.class));
Label title=screen.findNiftyControl(""String_Node_Str"",Label.class);
if (title != null) {
title.setText(client.getClient().getGameName());
}
if (client.getRole() == NetworkClient.Role.SLAVE) {
Element element=screen.findElementById(""String_Node_Str"");
if (element != null) {
element.hide();
}
element=screen.findElementById(""String_Node_Str"");
if (element != null) {
element.hide();
}
}
}
break;
case ""String_Node_Str"":
mapSelector.reset();
break;
case ""String_Node_Str"":
{
populateMapSelection();
}
}
}","@Override public void onStartScreen(){
  bind(nifty,nifty.getCurrentScreen());
switch (nifty.getCurrentScreen().getScreenId()) {
case ""String_Node_Str"":
    mapSelector.reset();
  initSkirmishPlayers();
break;
case ""String_Node_Str"":
inputManager.addRawInputListener(listener);
break;
case ""String_Node_Str"":
Label levelTitle=screen.findNiftyControl(""String_Node_Str"",Label.class);
levelTitle.setText(getLevelTitle());
Label mainObjective=screen.findNiftyControl(""String_Node_Str"",Label.class);
mainObjective.setText(getLevelResourceBundle().getString(""String_Node_Str""));
Element mainObjectiveImage=screen.findElementById(""String_Node_Str"");
NiftyImage img=nifty.createImage(""String_Node_Str"" + selectedLevel.getFullName() + ""String_Node_Str"",false);
mainObjectiveImage.getRenderer(ImageRenderer.class).setImage(img);
mainObjectiveImage.setWidth(img.getWidth());
mainObjectiveImage.setHeight(img.getHeight());
String subText1=getLevelResourceBundle().getString(""String_Node_Str"");
String subText2=getLevelResourceBundle().getString(""String_Node_Str"");
String subText3=getLevelResourceBundle().getString(""String_Node_Str"");
Element subObjectivePanel=screen.findElementById(""String_Node_Str"");
subObjectivePanel.hide();
if (!(subText1.isEmpty() && subText2.isEmpty() && subText3.isEmpty())) {
subObjectivePanel.show();
setupSubObjectiveLabel(""String_Node_Str"",subText1);
setupSubObjectiveLabel(""String_Node_Str"",subText2);
Label subObjective=setupSubObjectiveLabel(""String_Node_Str"",subText3);
subObjective.getElement().getParent().layoutElements();
Element subObjectiveImage=screen.findElementById(""String_Node_Str"");
subObjectiveImage.hide();
if (selectedLevel.getType().equals(Level.LevelType.Level)) {
subObjectiveImage.show();
img=nifty.createImage(""String_Node_Str"" + selectedLevel.getFullName() + ""String_Node_Str"",false);
subObjectiveImage.getRenderer(ImageRenderer.class).setImage(img);
subObjectiveImage.setWidth(img.getWidth());
subObjectiveImage.setHeight(img.getHeight());
levelBriefing=new AudioNode(assetManager,ConversionUtils.getCanonicalAssetKey(""String_Node_Str"" + String.format(""String_Node_Str"",selectedLevel.getLevel()) + ""String_Node_Str""),DataType.Stream);
levelBriefing.setLooping(false);
levelBriefing.setDirectional(false);
levelBriefing.setPositional(false);
levelBriefing.play();
}
}
break;
case ""String_Node_Str"":
generateHiscoreList();
break;
case ""String_Node_Str"":
setGraphicsSettingsToGUI();
break;
case ""String_Node_Str"":
setControlSettingsToGUI();
break;
case ""String_Node_Str"":
generateMovieList();
break;
case ""String_Node_Str"":
mapSelector.setSkirmish(true);
populateSelectedMap(mapSelector.getMap());
populateSkirmishPlayerTable();
break;
case ""String_Node_Str"":
mapSelector.reset();
break;
case ""String_Node_Str"":
mapSelector.setSkirmish(false);
populateSelectedMap(mapSelector.getMap());
if (client != null) {
ListBox<TableRow> players=screen.findNiftyControl(""String_Node_Str"",ListBox.class);
if (players != null) {
players.addItem(new TableRow(players.itemCount(),client.getPlayer()));
}
client.setChat(MainMenuState.this.screen.findNiftyControl(""String_Node_Str"",Chat.class));
Label title=screen.findNiftyControl(""String_Node_Str"",Label.class);
if (title != null) {
title.setText(client.getClient().getGameName());
}
if (client.getRole() == NetworkClient.Role.SLAVE) {
Element element=screen.findElementById(""String_Node_Str"");
if (element != null) {
element.hide();
}
element=screen.findElementById(""String_Node_Str"");
if (element != null) {
element.hide();
}
}
}
break;
case ""String_Node_Str"":
mapSelector.reset();
break;
case ""String_Node_Str"":
{
populateMapSelection();
}
}
}"
8878,"public void selectRandomMap(){
  KwdFile map;
  List<KwdFile> maps;
  maps=skirmishMapSelect ? skirmishMaps : multiplayerMaps;
  if (maps.isEmpty()) {
    return;
  }
 else   if (maps.size() == 1) {
    map=maps.get(0);
  }
 else {
    do {
      map=maps.get(FastMath.nextRandomInt(0,maps.size() - 1));
    }
 while (map.equals(selectedMap));
  }
  selectedMap=map;
  setSkirmishMapDataToGUI();
  GameState gameState=new GameState(selectedMap,skirmishPlayers);
  stateManager.attach(gameState);
}","public void selectRandomMap(){
  KwdFile map;
  List<KwdFile> maps;
  maps=skirmishMapSelect ? skirmishMaps : multiplayerMaps;
  if (maps.isEmpty()) {
    return;
  }
 else   if (maps.size() == 1) {
    map=maps.get(0);
  }
 else {
    do {
      map=maps.get(FastMath.nextRandomInt(0,maps.size() - 1));
    }
 while (map.equals(selectedMap));
  }
  selectedMap=map;
  setSkirmishMapDataToGUI();
}"
8879,"/** 
 * Called by the GUI, start the selected level
 * @param type where level selected. @TODO change campaign like others or otherwise
 */
public void startLevel(String type){
  if (""String_Node_Str"".equals(type.toLowerCase())) {
    setEnabled(false);
    String level=String.format(""String_Node_Str"",selectedLevel.getType(),selectedLevel.getLevel(),selectedLevel.getVariation());
    GameState gameState=new GameState(level);
    stateManager.attach(gameState);
  }
 else   if (selectedMap != null) {
    setEnabled(false);
    GameState gameState=new GameState(selectedMap);
    stateManager.attach(gameState);
  }
}","/** 
 * Called by the GUI, start the selected level
 * @param type where level selected. @TODO change campaign like others or otherwise
 */
public void startLevel(String type){
  if (""String_Node_Str"".equals(type.toLowerCase())) {
    setEnabled(false);
    String level=String.format(""String_Node_Str"",selectedLevel.getType(),selectedLevel.getLevel(),selectedLevel.getVariation());
    GameState gameState=new GameState(level);
    stateManager.attach(gameState);
  }
 else   if (selectedMap != null) {
    setEnabled(false);
    GameState gameState=new GameState(selectedMap,skirmishPlayers);
    stateManager.attach(gameState);
  }
}"
8880,"@Override public Void onLoad(){
  try {
    if (level != null) {
      kwdFile=new KwdFile(Main.getDkIIFolder(),new File(Main.getDkIIFolder() + AssetsConverter.MAPS_FOLDER + level+ ""String_Node_Str""));
    }
 else {
      kwdFile.load();
    }
    setProgress(0.1f);
    WorldState worldState=new WorldState(kwdFile,assetManager){
      @Override protected void updateProgress(      int progress,      int max){
        setProgress(0.1f + ((float)progress / max * 0.5f));
      }
    }
;
    GameState.this.stateManager.attach(worldState);
    GameState.this.stateManager.attach(new SoundState(false));
    setProgress(0.60f);
    GameState.this.stateManager.attach(new ActionPointState(false));
    setProgress(0.70f);
    GameState.this.stateManager.attach(new PartytState(false));
    setProgress(0.80f);
    int triggerId=kwdFile.getGameLevel().getTriggerId();
    if (triggerId != 0) {
      triggerControl=new TriggerControl(stateManager,triggerId);
      setProgress(0.90f);
    }
    setProgress(1.0f);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  return null;
}","@Override public Void onLoad(){
  try {
    if (level != null) {
      kwdFile=new KwdFile(Main.getDkIIFolder(),new File(ConversionUtils.getRealFileName(Main.getDkIIFolder(),AssetsConverter.MAPS_FOLDER + level + ""String_Node_Str"")));
    }
 else {
      kwdFile.load();
    }
    setProgress(0.1f);
    WorldState worldState=new WorldState(kwdFile,assetManager){
      @Override protected void updateProgress(      int progress,      int max){
        setProgress(0.1f + ((float)progress / max * 0.5f));
      }
    }
;
    GameState.this.stateManager.attach(worldState);
    GameState.this.stateManager.attach(new SoundState(false));
    setProgress(0.60f);
    GameState.this.stateManager.attach(new ActionPointState(false));
    setProgress(0.70f);
    GameState.this.stateManager.attach(new PartytState(false));
    setProgress(0.80f);
    int triggerId=kwdFile.getGameLevel().getTriggerId();
    if (triggerId != 0) {
      triggerControl=new TriggerControl(stateManager,triggerId);
      setProgress(0.90f);
    }
    setProgress(1.0f);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  return null;
}"
8881,"@Override public void initialize(final AppStateManager stateManager,final Application app){
  super.initialize(stateManager,app);
  this.app=(Main)app;
  this.stateManager=stateManager;
  SingleBarLoadingState loader=new SingleBarLoadingState(){
    @Override public Void onLoad(){
      try {
        if (level != null) {
          kwdFile=new KwdFile(Main.getDkIIFolder(),new File(Main.getDkIIFolder() + AssetsConverter.MAPS_FOLDER + level+ ""String_Node_Str""));
        }
 else {
          kwdFile.load();
        }
        setProgress(0.1f);
        WorldState worldState=new WorldState(kwdFile,assetManager){
          @Override protected void updateProgress(          int progress,          int max){
            setProgress(0.1f + ((float)progress / max * 0.5f));
          }
        }
;
        GameState.this.stateManager.attach(worldState);
        GameState.this.stateManager.attach(new SoundState(false));
        setProgress(0.60f);
        GameState.this.stateManager.attach(new ActionPointState(false));
        setProgress(0.70f);
        GameState.this.stateManager.attach(new PartytState(false));
        setProgress(0.80f);
        int triggerId=kwdFile.getGameLevel().getTriggerId();
        if (triggerId != 0) {
          triggerControl=new TriggerControl(stateManager,triggerId);
          setProgress(0.90f);
        }
        setProgress(1.0f);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      return null;
    }
    @Override public void onLoadComplete(){
      GameState.this.app.setViewProcessors();
      GameState.this.stateManager.getState(PlayerState.class).setEnabled(true);
      GameState.this.stateManager.getState(ActionPointState.class).setEnabled(true);
      GameState.this.stateManager.getState(PartytState.class).setEnabled(true);
      GameState.this.stateManager.getState(SoundState.class).setEnabled(true);
      for (short i=0; i < 128; i++) {
        flags.put(i,0);
      }
      for (byte i=0; i < 16; i++) {
        timers.put(i,new GameTimer());
      }
    }
  }
;
  stateManager.attach(loader);
}","@Override public void initialize(final AppStateManager stateManager,final Application app){
  super.initialize(stateManager,app);
  this.app=(Main)app;
  this.stateManager=stateManager;
  SingleBarLoadingState loader=new SingleBarLoadingState(){
    @Override public Void onLoad(){
      try {
        if (level != null) {
          kwdFile=new KwdFile(Main.getDkIIFolder(),new File(ConversionUtils.getRealFileName(Main.getDkIIFolder(),AssetsConverter.MAPS_FOLDER + level + ""String_Node_Str"")));
        }
 else {
          kwdFile.load();
        }
        setProgress(0.1f);
        WorldState worldState=new WorldState(kwdFile,assetManager){
          @Override protected void updateProgress(          int progress,          int max){
            setProgress(0.1f + ((float)progress / max * 0.5f));
          }
        }
;
        GameState.this.stateManager.attach(worldState);
        GameState.this.stateManager.attach(new SoundState(false));
        setProgress(0.60f);
        GameState.this.stateManager.attach(new ActionPointState(false));
        setProgress(0.70f);
        GameState.this.stateManager.attach(new PartytState(false));
        setProgress(0.80f);
        int triggerId=kwdFile.getGameLevel().getTriggerId();
        if (triggerId != 0) {
          triggerControl=new TriggerControl(stateManager,triggerId);
          setProgress(0.90f);
        }
        setProgress(1.0f);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      return null;
    }
    @Override public void onLoadComplete(){
      GameState.this.app.setViewProcessors();
      GameState.this.stateManager.getState(PlayerState.class).setEnabled(true);
      GameState.this.stateManager.getState(ActionPointState.class).setEnabled(true);
      GameState.this.stateManager.getState(PartytState.class).setEnabled(true);
      GameState.this.stateManager.getState(SoundState.class).setEnabled(true);
      for (short i=0; i < 128; i++) {
        flags.put(i,0);
      }
      for (byte i=0; i < 16; i++) {
        timers.put(i,new GameTimer());
      }
    }
  }
;
  stateManager.attach(loader);
}"
8882,"private String getRandomSoundFile(){
  int first, second, third;
  Random random=new Random();
  while (true) {
    first=random.nextInt(3);
switch (first) {
case 1:
      break;
case 3:
    break;
default :
  continue;
}
second=random.nextInt(4);
if (first == 1 && second == 1) {
third=random.nextInt(46);
}
 else if (first == 1 && second == 2) {
third=random.nextInt(35);
}
 else if (first == 1 && second == 3) {
third=random.nextInt(22);
}
 else if (first == 1 && second == 4) {
third=random.nextInt(13);
}
 else if (first == 3 && second == 1) {
third=random.nextInt(79);
}
 else if (first == 3 && second == 2) {
third=random.nextInt(20);
}
 else if (first == 3 && second == 3) {
third=random.nextInt(18);
}
 else {
third=random.nextInt(24);
}
return String.format(""String_Node_Str"",first,second,third);
}
}","private String getRandomSoundFile(){
  int first, second, third;
  Random random=new Random();
  while (true) {
    first=random.nextInt(2) + 1;
switch (first) {
case 1:
      break;
case 3:
    break;
default :
  continue;
}
second=random.nextInt(3) + 1;
if (first == 1 && second == 1) {
third=random.nextInt(45) + 1;
}
 else if (first == 1 && second == 2) {
third=random.nextInt(34) + 1;
}
 else if (first == 1 && second == 3) {
third=random.nextInt(21) + 1;
}
 else if (first == 1 && second == 4) {
third=random.nextInt(12) + 1;
}
 else if (first == 3 && second == 1) {
third=random.nextInt(78) + 1;
}
 else if (first == 3 && second == 2) {
third=random.nextInt(19) + 1;
}
 else if (first == 3 && second == 3) {
third=random.nextInt(17) + 1;
}
 else {
third=random.nextInt(23) + 1;
}
return String.format(""String_Node_Str"",first,second,third);
}
}"
8883,"@Override public void onAction(String name,boolean isPressed,float tpf){
  if (!isEnabled()) {
    return;
  }
  if (name.equals(Setting.USE_ATTACK.name())) {
    if (isPressed) {
      Cinematic transition=stateManager.getState(Cinematic.class);
      AudioNode speech=(AudioNode)((Main)stateManager.getApplication()).getRootNode().getChild(""String_Node_Str"");
      if (transition != null) {
        transition.stop();
        if (speech != null) {
          speech.stop();
          speech.removeFromParent();
        }
      }
    }
    return;
  }
switch (name) {
case SPECIAL_KEY_CONTROL:
    if (isPressed) {
      keys.add(KeyInput.KEY_LCONTROL);
      keys.add(KeyInput.KEY_RCONTROL);
    }
 else {
      keys.remove(Integer.valueOf(KeyInput.KEY_LCONTROL));
      keys.remove(Integer.valueOf(KeyInput.KEY_RCONTROL));
    }
  break;
case SPECIAL_KEY_ALT:
if (isPressed) {
  keys.add(KeyInput.KEY_LMENU);
  keys.add(KeyInput.KEY_RMENU);
}
 else {
  keys.remove(Integer.valueOf(KeyInput.KEY_LMENU));
  keys.remove(Integer.valueOf(KeyInput.KEY_RMENU));
}
break;
case SPECIAL_KEY_SHIFT:
if (isPressed) {
keys.add(KeyInput.KEY_LSHIFT);
keys.add(KeyInput.KEY_RSHIFT);
}
 else {
keys.remove(Integer.valueOf(KeyInput.KEY_LSHIFT));
keys.remove(Integer.valueOf(KeyInput.KEY_RSHIFT));
}
break;
}
}","@Override public void onAction(String name,boolean isPressed,float tpf){
  if (!isEnabled()) {
    return;
  }
  if (name.equals(Setting.USE_ATTACK.name())) {
    if (isPressed) {
      Cinematic transition=stateManager.getState(Cinematic.class);
      if (transition != null) {
        stateManager.getState(SoundState.class).stopSpeech();
        transition.stop();
      }
    }
    return;
  }
switch (name) {
case SPECIAL_KEY_CONTROL:
    if (isPressed) {
      keys.add(KeyInput.KEY_LCONTROL);
      keys.add(KeyInput.KEY_RCONTROL);
    }
 else {
      keys.remove(Integer.valueOf(KeyInput.KEY_LCONTROL));
      keys.remove(Integer.valueOf(KeyInput.KEY_RCONTROL));
    }
  break;
case SPECIAL_KEY_ALT:
if (isPressed) {
  keys.add(KeyInput.KEY_LMENU);
  keys.add(KeyInput.KEY_RMENU);
}
 else {
  keys.remove(Integer.valueOf(KeyInput.KEY_LMENU));
  keys.remove(Integer.valueOf(KeyInput.KEY_RMENU));
}
break;
case SPECIAL_KEY_SHIFT:
if (isPressed) {
keys.add(KeyInput.KEY_LSHIFT);
keys.add(KeyInput.KEY_RSHIFT);
}
 else {
keys.remove(Integer.valueOf(KeyInput.KEY_LSHIFT));
keys.remove(Integer.valueOf(KeyInput.KEY_RSHIFT));
}
break;
}
}"
8884,"private boolean isInteractable(){
  CreatureControl controller=getInteractiveObjectOnCursor();
  Vector2f v=null;
  if (controller != null) {
    tooltip.setText(controller.getTooltip());
  }
 else {
    v=handler.getRoundedMousePos();
    TileData tile=getWorldHandler().getMapLoader().getTile((int)v.x,(int)v.y);
    if (tile != null) {
      if (tile.getTerrain().getFlags().contains(Terrain.TerrainFlag.ROOM)) {
        RoomInstance roomInstance=getWorldHandler().getMapLoader().getRoomCoordinates().get(new Point((int)v.x,(int)v.y));
        GenericRoom room=getWorldHandler().getMapLoader().getRoomActuals().get(roomInstance);
        tooltip.setText(room.getTooltip());
      }
 else {
        ResourceBundle bundle=Main.getResourceBundle(""String_Node_Str"");
        tooltip.setText(bundle.getString(Integer.toString(tile.getTerrain().getTooltipStringId())));
      }
    }
 else {
      tooltip.setText(""String_Node_Str"");
    }
  }
  if (PlayerInteractionState.this.app.isDebug()) {
    StringBuilder sb=new StringBuilder();
    Point p;
    if (controller != null) {
      p=getWorldHandler().getTileCoordinates(controller.getSpatial().getWorldTranslation());
    }
 else {
      p=new Point((int)v.x,(int)v.y);
    }
    sb.append(""String_Node_Str"");
    sb.append(p.x);
    sb.append(""String_Node_Str"");
    sb.append(p.y);
    sb.append(""String_Node_Str"");
    sb.append(tooltip.getText());
    tooltip.setText(sb.toString());
  }
  return (controller != null);
}","private boolean isInteractable(){
  CreatureControl controller=getInteractiveObjectOnCursor();
  Vector2f v=null;
  if (controller != null) {
    tooltip.setText(controller.getTooltip());
  }
 else {
    v=handler.getRoundedMousePos();
    TileData tile=getWorldHandler().getMapData().getTile((int)v.x,(int)v.y);
    if (tile != null) {
      if (tile.getTerrain().getFlags().contains(Terrain.TerrainFlag.ROOM)) {
        RoomInstance roomInstance=getWorldHandler().getMapLoader().getRoomCoordinates().get(new Point((int)v.x,(int)v.y));
        GenericRoom room=getWorldHandler().getMapLoader().getRoomActuals().get(roomInstance);
        tooltip.setText(room.getTooltip());
      }
 else {
        ResourceBundle bundle=Main.getResourceBundle(""String_Node_Str"");
        tooltip.setText(bundle.getString(Integer.toString(tile.getTerrain().getTooltipStringId())));
      }
    }
 else {
      tooltip.setText(""String_Node_Str"");
    }
  }
  if (PlayerInteractionState.this.app.isDebug()) {
    StringBuilder sb=new StringBuilder();
    Point p;
    if (controller != null) {
      p=getWorldHandler().getTileCoordinates(controller.getSpatial().getWorldTranslation());
    }
 else {
      p=new Point((int)v.x,(int)v.y);
    }
    sb.append(""String_Node_Str"");
    sb.append(p.x);
    sb.append(""String_Node_Str"");
    sb.append(p.y);
    sb.append(""String_Node_Str"");
    sb.append(tooltip.getText());
    tooltip.setText(sb.toString());
  }
  return (controller != null);
}"
8885,"public MapData(KwdFile kwdFile){
  this.kwdFile=kwdFile;
  width=this.kwdFile.getMap().getWidth();
  height=this.kwdFile.getMap().getHeight();
  this.tiles=new TileData[getWidth()][getHeight()];
  for (int y=0; y < getHeight(); y++) {
    for (int x=0; x < getWidth(); x++) {
      Tile tile=this.kwdFile.getMap().getTile(x,y);
      tiles[x][y]=new TileData(tile,kwdFile.getTerrain(tile.getTerrainId()));
    }
  }
}","public MapData(KwdFile kwdFile){
  this.kwdFile=kwdFile;
  width=this.kwdFile.getMap().getWidth();
  height=this.kwdFile.getMap().getHeight();
  this.tiles=new TileData[getWidth()][getHeight()];
  for (int y=0; y < getHeight(); y++) {
    for (int x=0; x < getWidth(); x++) {
      Tile tile=this.kwdFile.getMap().getTile(x,y);
      tiles[x][y]=new TileData(kwdFile,tile,kwdFile.getTerrain(tile.getTerrainId()),x,y,y * getWidth() + x);
    }
  }
}"
8886,"public Spatial load(BulletAppState bulletAppState,AssetManager assetManager,KwdFile kwdFile){
  CreatureLoader creatureLoader=new CreatureLoader(kwdFile,worldState);
  List<Node> result=new ArrayList<>();
  for (  toniarts.openkeeper.tools.convert.map.Thing obj : kwdFile.getThings()) {
    try {
      if (obj instanceof Thing.Object) {
        Thing.Creature cr=(Thing.Creature)obj;
        nodeCreatures.attachChild(creatureLoader.load(assetManager,cr));
      }
    }
 catch (    Exception ex) {
      System.err.println(ex);
    }
  }
  return result;
}","public Spatial load(BulletAppState bulletAppState,AssetManager assetManager,KwdFile kwdFile){
  CreatureLoader creatureLoader=new CreatureLoader(kwdFile,worldState);
  Node root=new Node(""String_Node_Str"");
  Node nodeCreatures=new Node(""String_Node_Str"");
  Node nodeObjects=new Node(""String_Node_Str"");
  for (  toniarts.openkeeper.tools.convert.map.Thing obj : kwdFile.getThings()) {
    try {
      if (obj instanceof Thing.Creature) {
        Thing.Creature cr=(Thing.Creature)obj;
        nodeCreatures.attachChild(creatureLoader.load(assetManager,cr));
      }
 else       if (obj instanceof Thing.Object) {
        Thing.Object objectThing=(Thing.Object)obj;
        Object object=kwdFile.getObject(objectThing.getObjectId());
        Node nodeObject=(Node)assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + object.getMeshResource().getName()+ ""String_Node_Str"");
        nodeObject.setLocalTranslation(objectThing.getPosX() * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2f,0 * MapLoader.TILE_HEIGHT,objectThing.getPosY() * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2f);
        nodeObjects.attachChild(nodeObject);
      }
    }
 catch (    Exception ex) {
      System.err.println(ex);
    }
  }
  root.attachChild(nodeCreatures);
  root.attachChild(nodeObjects);
  return root;
}"
8887,"public ThingLoader(WorldState worldState){
  this.worldState=worldState;
}","public ThingLoader(WorldState worldHandler){
  this.worldState=worldHandler;
}"
8888,"/** 
 * Get a random tile, that is not a starting tile
 * @param start starting coordinates
 * @param radius radius, in tiles
 * @param creature
 * @return a random tile if one is found
 */
public Point findRandomAccessibleTile(Point start,int radius,Creature creature){
  List<Point> tiles=new ArrayList<>(radius * radius - 1);
  for (int y=start.y - radius / 2; y < start.y + radius / 2; y++) {
    for (int x=start.x - radius / 2; x < start.x + radius / 2; x++) {
      if (x == start.x && y == start.y) {
        continue;
      }
      TileData tile=getMapLoader().getTile(x,y);
      if (tile != null && isAccessible(tile,creature)) {
        tiles.add(new Point(x,y));
      }
    }
  }
  if (!tiles.isEmpty()) {
    return Utils.getRandomItem(tiles);
  }
  return null;
}","/** 
 * Get a random tile, that is not a starting tile
 * @param start starting coordinates
 * @param radius radius, in tiles
 * @param creature
 * @return a random tile if one is found
 */
public Point findRandomAccessibleTile(Point start,int radius,Creature creature){
  List<Point> tiles=new ArrayList<>(radius * radius - 1);
  for (int y=start.y - radius / 2; y < start.y + radius / 2; y++) {
    for (int x=start.x - radius / 2; x < start.x + radius / 2; x++) {
      if (x == start.x && y == start.y) {
        continue;
      }
      TileData tile=getMapData().getTile(x,y);
      if (tile != null && isAccessible(tile,creature)) {
        tiles.add(new Point(x,y));
      }
    }
  }
  if (!tiles.isEmpty()) {
    return Utils.getRandomItem(tiles);
  }
  return null;
}"
8889,"@Override public void initialize(final AppStateManager stateManager,final Application app){
  this.app=(Main)app;
  this.stateManager=stateManager;
  this.assetManager=app.getAssetManager();
  BulletAppState bulletAppState=new BulletAppState();
  this.stateManager.attach(bulletAppState);
  kwdFile=this.stateManager.getState(GameState.class).getLevelData();
  this.mapLoader=new MapLoader(assetManager,kwdFile){
    @Override protected void updateProgress(    int progress,    int max){
      WorldState.this.updateProgress(progress,max);
    }
  }
;
  worldNode.attachChild(mapLoader.load(assetManager,kwdFile));
  pathFindingMap=new MapIndexedGraph(this,kwdFile);
  pathFinder=new MapPathFinder(pathFindingMap,false);
  heuristic=new MapDistance();
  thingsNode=(Node)new ThingLoader(this).load(bulletAppState,assetManager,kwdFile);
  worldNode.attachChild(thingsNode);
  this.app.getRootNode().attachChild(worldNode);
  super.initialize(stateManager,app);
}","@Override public void initialize(final AppStateManager stateManager,final Application app){
  this.app=(Main)app;
  this.stateManager=stateManager;
  this.assetManager=app.getAssetManager();
  BulletAppState bulletAppState=new BulletAppState();
  this.stateManager.attach(bulletAppState);
  kwdFile=this.stateManager.getState(GameState.class).getLevelData();
  this.mapLoader=new MapLoader(assetManager,kwdFile){
    @Override protected void updateProgress(    int progress,    int max){
      WorldState.this.updateProgress(progress,max);
    }
  }
;
  worldNode.attachChild(mapLoader.load(assetManager,kwdFile));
  pathFindingMap=new MapIndexedGraph(this);
  pathFinder=new MapPathFinder(pathFindingMap,false);
  heuristic=new MapDistance();
  thingsNode=(Node)new ThingLoader(this).load(bulletAppState,assetManager,kwdFile);
  worldNode.attachChild(thingsNode);
  this.app.getRootNode().attachChild(worldNode);
  super.initialize(stateManager,app);
}"
8890,"/** 
 * FIXME: This can NOT be. Just for quick easy testing.
 * @param start start point
 * @param end end point
 * @param creature the creature to find path for
 * @return output path
 */
public GraphPath<TileData> findPath(Point start,Point end,Creature creature){
  pathFindingMap.setCreature(creature);
  GraphPath<TileData> outPath=new DefaultGraphPath<>();
  pathFinder.searchNodePath(getMapLoader().getTile(start.x,start.y),getMapLoader().getTile(end.x,end.y),heuristic,outPath);
  return outPath;
}","/** 
 * FIXME: This can NOT be. Just for quick easy testing.
 * @param start start point
 * @param end end point
 * @param creature the creature to find path for
 * @return output path
 */
public GraphPath<TileData> findPath(Point start,Point end,Creature creature){
  pathFindingMap.setCreature(creature);
  GraphPath<TileData> outPath=new DefaultGraphPath<>();
  pathFinder.searchNodePath(getMapData().getTile(start.x,start.y),getMapData().getTile(end.x,end.y),heuristic,outPath);
  return outPath;
}"
8891,"public void wander(){
  PrioritySteering<Vector2> prioritySteering=new PrioritySteering(this,0.0001f);
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new CreatureRayCastCollisionDetector(worldHandler);
  RaycastObstacleAvoidance<Vector2> raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<>(this,new SingleRayConfiguration<Vector2>(this,1.5f),raycastCollisionDetector,0.5f);
  prioritySteering.add(raycastObstacleAvoidanceSB);
  prioritySteering.add(new Wander<>(this).setFaceEnabled(false).setAlignTolerance(0.001f).setDecelerationRadius(5).setTimeToTarget(0.1f).setWanderOffset(10).setWanderOrientation(10).setWanderRadius(10).setWanderRate(FastMath.TWO_PI * 4));
  setSteeringBehavior(prioritySteering);
}","public void wander(){
  PrioritySteering<Vector2> prioritySteering=new PrioritySteering(this,0.0001f);
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new CreatureRayCastCollisionDetector(worldState);
  RaycastObstacleAvoidance<Vector2> raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<>(this,new SingleRayConfiguration<>(this,1.5f),raycastCollisionDetector,0.5f);
  prioritySteering.add(raycastObstacleAvoidanceSB);
  prioritySteering.add(new Wander<>(this).setFaceEnabled(false).setAlignTolerance(0.001f).setDecelerationRadius(5).setTimeToTarget(0.1f).setWanderOffset(10).setWanderOrientation(10).setWanderRadius(10).setWanderRate(FastMath.TWO_PI * 4));
  setSteeringBehavior(prioritySteering);
}"
8892,"private void navigateToRandomPoint(){
  Point p=worldHandler.findRandomAccessibleTile(worldHandler.getTileCoordinates(getSpatial().getLocalTranslation()),10,creature);
  if (p != null) {
    GraphPath<TileData> outPath=worldHandler.findPath(worldHandler.getTileCoordinates(getSpatial().getWorldTranslation()),p,creature);
    if (outPath.getCount() > 1) {
      PrioritySteering<Vector2> prioritySteering=new PrioritySteering(this,0.0001f);
      FollowPath<Vector2,LinePathParam> followPath=new FollowPath(this,new LinePath<>(pathToArray(outPath),true),2);
      followPath.setDecelerationRadius(1f);
      followPath.setArrivalTolerance(0.2f);
      prioritySteering.add(followPath);
      setSteeringBehavior(prioritySteering);
    }
  }
}","private void navigateToRandomPoint(){
  Point p=worldState.findRandomAccessibleTile(worldState.getTileCoordinates(getSpatial().getLocalTranslation()),10,creature);
  if (p != null) {
    GraphPath<TileData> outPath=worldState.findPath(worldState.getTileCoordinates(getSpatial().getWorldTranslation()),p,creature);
    if (outPath.getCount() > 1) {
      PrioritySteering<Vector2> prioritySteering=new PrioritySteering(this,0.0001f);
      FollowPath<Vector2,LinePathParam> followPath=new FollowPath(this,new LinePath<>(pathToArray(outPath),true),2);
      followPath.setDecelerationRadius(1f);
      followPath.setArrivalTolerance(0.2f);
      prioritySteering.add(followPath);
      setSteeringBehavior(prioritySteering);
    }
  }
}"
8893,"public CreatureControl(Thing.Creature creatureInstance,Creature creature,WorldHandler worldHandler){
  super(creature);
  stateMachine=new DefaultStateMachine<>(this);
  this.worldHandler=worldHandler;
  ResourceBundle bundle=Main.getResourceBundle(""String_Node_Str"");
  tooltip=bundle.getString(Integer.toString(creature.getTooltipStringId()));
  name=Utils.generateCreatureName();
  bloodType=Utils.generateBloodType();
  gold=creatureInstance.getGoldHeld();
  health=creature.getHp();
  if (creatureInstance instanceof KeeperCreature) {
    health=((KeeperCreature)creatureInstance).getInitialHealth();
    level=((KeeperCreature)creatureInstance).getLevel();
    ownerId=((KeeperCreature)creatureInstance).getPlayerId();
  }
 else   if (creatureInstance instanceof GoodCreature) {
    health=((GoodCreature)creatureInstance).getInitialHealth();
    level=((GoodCreature)creatureInstance).getLevel();
    ownerId=Player.GOOD_PLAYER_ID;
  }
 else   if (creatureInstance instanceof NeutralCreature) {
    health=((NeutralCreature)creatureInstance).getInitialHealth();
    level=((NeutralCreature)creatureInstance).getLevel();
    ownerId=Player.NEUTRAL_PLAYER_ID;
  }
 else   if (creatureInstance instanceof DeadBody) {
    ownerId=((DeadBody)creatureInstance).getPlayerId();
  }
}","public CreatureControl(Thing.Creature creatureInstance,Creature creature,WorldState worldState){
  super(creature);
  stateMachine=new DefaultStateMachine<>(this);
  this.worldState=worldState;
  ResourceBundle bundle=Main.getResourceBundle(""String_Node_Str"");
  tooltip=bundle.getString(Integer.toString(creature.getTooltipStringId()));
  name=Utils.generateCreatureName();
  bloodType=Utils.generateBloodType();
  gold=creatureInstance.getGoldHeld();
  health=creature.getHp();
  if (creatureInstance instanceof KeeperCreature) {
    health=((KeeperCreature)creatureInstance).getInitialHealth();
    level=((KeeperCreature)creatureInstance).getLevel();
    ownerId=((KeeperCreature)creatureInstance).getPlayerId();
  }
 else   if (creatureInstance instanceof GoodCreature) {
    health=((GoodCreature)creatureInstance).getInitialHealth();
    level=((GoodCreature)creatureInstance).getLevel();
    ownerId=Player.GOOD_PLAYER_ID;
  }
 else   if (creatureInstance instanceof NeutralCreature) {
    health=((NeutralCreature)creatureInstance).getInitialHealth();
    level=((NeutralCreature)creatureInstance).getLevel();
    ownerId=Player.NEUTRAL_PLAYER_ID;
  }
 else   if (creatureInstance instanceof DeadBody) {
    ownerId=((DeadBody)creatureInstance).getPlayerId();
  }
}"
8894,"@Override public void setEnabled(boolean enabled){
  super.setEnabled(enabled);
  if (enabled) {
    final GameState gameState=stateManager.getState(GameState.class);
    if (!gameState.getLevelData().getGameLevel().getLvlFlags().contains(GameLevel.LevFlag.IS_SKIRMISH_LEVEL)) {
      String levelResource=""String_Node_Str"" + gameState.getLevel().toUpperCase();
      this.app.getNifty().getNifty().getResourceBundles().put(""String_Node_Str"",Main.getResourceBundle(levelResource));
    }
    int triggerId=gameState.getLevelData().getPlayer(playerId).getTriggerId();
    if (triggerId != 0) {
      triggerControl=new PlayerTriggerControl(stateManager,triggerId);
      triggerControl.setPlayerState(this);
    }
    nifty=app.getNifty().getNifty();
    nifty.gotoScreen(HUD_SCREEN_ID);
    initHudItems();
    app.getInputManager().setCursorVisible(true);
    Element middle=app.getNifty().getNifty().getScreen(HUD_SCREEN_ID).findElementByName(""String_Node_Str"");
    Rectangle guiConstraint=new Rectangle(middle.getX(),middle.getY(),middle.getWidth(),middle.getHeight());
    if (nifty != null) {
      paused=false;
      nifty.getScreen(HUD_SCREEN_ID).findElementByName(""String_Node_Str"").setVisible(paused);
    }
    Player player=gameState.getLevelData().getPlayer(playerId);
    possessionState=new PossessionInteractionState(true){
      @Override protected void onExit(){
        super.onExit();
        for (        AbstractAppState state : storedAppStates) {
          stateManager.detach(state);
        }
        for (        AbstractAppState state : appStates) {
          state.setEnabled(true);
        }
        nifty.gotoScreen(HUD_SCREEN_ID);
      }
      @Override protected void onActionChange(      PossessionInteractionState.Action action){
        PlayerState.this.updatePossessionSelectedItem(action);
      }
    }
;
    cameraState=new PlayerCameraState(player);
    interactionState=new PlayerInteractionState(player,gameState,guiConstraint,tooltip){
      @Override protected void onInteractionStateChange(      InteractionState interactionState,      int id){
        PlayerState.this.updateSelectedItem(interactionState,id);
      }
      @Override protected void onPossession(      Thing.KeeperCreature creature){
        for (        AbstractAppState state : appStates) {
          state.setEnabled(false);
        }
        storedAppStates=new ArrayList<>();
        storedAppStates.add(possessionState);
        possessionState.setTarget(creature);
        possessionCameraState=new PossessionCameraState(creature,gameState.getLevelData());
        storedAppStates.add(possessionCameraState);
        for (        AbstractAppState state : storedAppStates) {
          stateManager.attach(state);
        }
        nifty.gotoScreen(POSSESSION_SCREEN_ID);
      }
    }
;
    appStates.add(interactionState);
    appStates.add(cameraState);
    for (    AbstractAppState state : appStates) {
      stateManager.attach(state);
    }
  }
 else {
    for (    AbstractAppState state : appStates) {
      stateManager.detach(state);
    }
    appStates.clear();
    if (nifty != null) {
      nifty.gotoScreen(""String_Node_Str"");
    }
  }
}","@Override public void setEnabled(boolean enabled){
  super.setEnabled(enabled);
  if (enabled) {
    final GameState gameState=stateManager.getState(GameState.class);
    if (!gameState.getLevelData().getGameLevel().getLvlFlags().contains(GameLevel.LevFlag.IS_SKIRMISH_LEVEL)) {
      String levelResource=""String_Node_Str"" + gameState.getLevel().toUpperCase();
      try {
        this.app.getNifty().getNifty().getResourceBundles().put(""String_Node_Str"",Main.getResourceBundle(levelResource));
      }
 catch (      Exception ex) {
        logger.warning(ex.toString());
      }
    }
    int triggerId=gameState.getLevelData().getPlayer(playerId).getTriggerId();
    if (triggerId != 0) {
      triggerControl=new PlayerTriggerControl(stateManager,triggerId);
      triggerControl.setPlayerState(this);
    }
    nifty=app.getNifty().getNifty();
    nifty.gotoScreen(HUD_SCREEN_ID);
    initHudItems();
    app.getInputManager().setCursorVisible(true);
    Element middle=app.getNifty().getNifty().getScreen(HUD_SCREEN_ID).findElementByName(""String_Node_Str"");
    Rectangle guiConstraint=new Rectangle(middle.getX(),middle.getY(),middle.getWidth(),middle.getHeight());
    if (nifty != null) {
      paused=false;
      nifty.getScreen(HUD_SCREEN_ID).findElementByName(""String_Node_Str"").setVisible(paused);
    }
    Player player=gameState.getLevelData().getPlayer(playerId);
    possessionState=new PossessionInteractionState(true){
      @Override protected void onExit(){
        super.onExit();
        for (        AbstractAppState state : storedAppStates) {
          stateManager.detach(state);
        }
        for (        AbstractAppState state : appStates) {
          state.setEnabled(true);
        }
        nifty.gotoScreen(HUD_SCREEN_ID);
      }
      @Override protected void onActionChange(      PossessionInteractionState.Action action){
        PlayerState.this.updatePossessionSelectedItem(action);
      }
    }
;
    cameraState=new PlayerCameraState(player);
    interactionState=new PlayerInteractionState(player,gameState,guiConstraint,tooltip){
      @Override protected void onInteractionStateChange(      InteractionState interactionState,      int id){
        PlayerState.this.updateSelectedItem(interactionState,id);
      }
      @Override protected void onPossession(      Thing.KeeperCreature creature){
        for (        AbstractAppState state : appStates) {
          state.setEnabled(false);
        }
        storedAppStates=new ArrayList<>();
        storedAppStates.add(possessionState);
        possessionState.setTarget(creature);
        possessionCameraState=new PossessionCameraState(creature,gameState.getLevelData());
        storedAppStates.add(possessionCameraState);
        for (        AbstractAppState state : storedAppStates) {
          stateManager.attach(state);
        }
        nifty.gotoScreen(POSSESSION_SCREEN_ID);
      }
    }
;
    appStates.add(interactionState);
    appStates.add(cameraState);
    for (    AbstractAppState state : appStates) {
      stateManager.attach(state);
    }
  }
 else {
    for (    AbstractAppState state : appStates) {
      stateManager.detach(state);
    }
    appStates.clear();
    if (nifty != null) {
      nifty.gotoScreen(""String_Node_Str"");
    }
  }
}"
8895,"/** 
 * Find room wall sections, continuous sections facing the same way
 * @param tiles tiles
 * @param roomInstance room instance
 */
private void findRoomWallSections(RoomInstance roomInstance){
  if (hasRoomWalls(roomInstance.getRoom())) {
    List<WallSection> sections=new ArrayList<>();
    Map<Point,Set<WallDirection>> alreadyWalledPoints=new HashMap<>();
    for (    Point p : roomInstance.getCoordinates()) {
      traverseRoomWalls(p,roomInstance,WallDirection.NORTH,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.EAST,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.SOUTH,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.WEST,sections,alreadyWalledPoints);
    }
    roomInstance.setWallPoints(sections);
  }
}","/** 
 * Find room wall sections, continuous sections facing the same way
 * @param tiles tiles
 * @param roomInstance room instance
 */
private void findRoomWallSections(RoomInstance roomInstance){
  if (hasRoomWalls(roomInstance.getRoom())) {
    List<WallSection> sections=new ArrayList<>();
    Map<Point,Set<WallDirection>> alreadyWalledPoints=new HashMap<>();
    for (    Point p : roomInstance.getCoordinates()) {
      traverseRoomWalls(p,roomInstance,WallDirection.NORTH,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.EAST,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.SOUTH,sections,alreadyWalledPoints);
      traverseRoomWalls(p,roomInstance,WallDirection.WEST,sections,alreadyWalledPoints);
    }
    roomInstance.setWallSections(sections);
  }
}"
8896,"@Override public void simpleInitApp(){
  getAssetManager().registerLocator(AssetsConverter.getAssetsFolder(),FileLocator.class);
  TitleScreenState gameLoader=new TitleScreenState(){
    @Override public Void onLoad(){
      try {
        long startTime=System.currentTimeMillis();
        getAssetManager().registerLoader(MP2Loader.class,""String_Node_Str"");
        getAssetManager().registerLoader(CameraSweepDataLoader.class,CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION);
        setAnisotropy();
        ScreenshotAppState screenShotState=new ScreenshotAppState(SCREENSHOTS_FOLDER);
        stateManager.attach(screenShotState);
        if (params.containsKey(""String_Node_Str"")) {
          float quality=(getUserSettings().getSettingFloat(Settings.Setting.RECORDER_QUALITY));
          int frameRate=(getUserSettings().getSettingInteger(Settings.Setting.RECORDER_FPS));
          getSettings().setFrameRate(frameRate);
          VideoRecorderAppState recorder=new VideoRecorderAppState(quality,frameRate);
          String folder=params.get(""String_Node_Str"");
          if (folder == null) {
            folder=SCREENSHOTS_FOLDER;
          }
          if (!folder.endsWith(File.separator)) {
            folder=folder.concat(File.separator);
          }
          folder=folder.concat(getSettings().getTitle()).concat(""String_Node_Str"").concat(String.valueOf(System.currentTimeMillis() / 1000)).concat(""String_Node_Str"");
          recorder.setFile(new File(folder));
          stateManager.attach(recorder);
        }
        NiftyJmeDisplay niftyDisplay=getNifty();
        List<String> guiXMLs=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
        for (        String xml : guiXMLs) {
          try {
          }
 catch (          Exception e) {
            throw new RuntimeException(""String_Node_Str"" + xml + ""String_Node_Str"",e);
          }
        }
        MainMenuState mainMenuState=new MainMenuState(!params.containsKey(""String_Node_Str""),assetManager);
        mainMenuState.setEnabled(false);
        PlayerState playerState=new PlayerState();
        playerState.setEnabled(false);
        stateManager.attach(mainMenuState);
        stateManager.attach(playerState);
        niftyDisplay.getNifty().registerScreenController(mainMenuState,playerState);
        for (        String xml : guiXMLs) {
          niftyDisplay.getNifty().addXml(xml);
        }
        if (!params.containsKey(""String_Node_Str"") && !params.containsKey(""String_Node_Str"")) {
          long waitTime=5000 - (System.currentTimeMillis() - startTime);
          if (waitTime > 0) {
            Thread.sleep(waitTime);
          }
        }
      }
 catch (      InterruptedException ex) {
      }
catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
        app.stop();
      }
      return null;
    }
    @Override public void onLoadComplete(){
      AmbientLight al=new AmbientLight();
      al.setColor(ColorRGBA.White.multLocal(5f));
      rootNode.addLight(al);
      if (params.containsKey(""String_Node_Str"") || params.containsKey(""String_Node_Str"")) {
        startGame();
      }
 else {
        playIntro();
      }
    }
  }
;
  this.stateManager.attach(gameLoader);
}","@Override public void simpleInitApp(){
  getAssetManager().registerLocator(AssetsConverter.getAssetsFolder(),FileLocator.class);
  TitleScreenState gameLoader=new TitleScreenState(){
    @Override public Void onLoad(){
      try {
        long startTime=System.currentTimeMillis();
        getAssetManager().registerLoader(MP2Loader.class,""String_Node_Str"");
        getAssetManager().registerLoader(CameraSweepDataLoader.class,CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION);
        setAnisotropy();
        ScreenshotAppState screenShotState=new ScreenshotAppState(SCREENSHOTS_FOLDER);
        stateManager.attach(screenShotState);
        if (params.containsKey(""String_Node_Str"")) {
          float quality=(getUserSettings().getSettingFloat(Settings.Setting.RECORDER_QUALITY));
          int frameRate=(getUserSettings().getSettingInteger(Settings.Setting.RECORDER_FPS));
          getSettings().setFrameRate(frameRate);
          VideoRecorderAppState recorder=new VideoRecorderAppState(quality,frameRate);
          String folder=params.get(""String_Node_Str"");
          if (folder == null) {
            folder=SCREENSHOTS_FOLDER;
          }
          if (!folder.endsWith(File.separator)) {
            folder=folder.concat(File.separator);
          }
          folder=folder.concat(getSettings().getTitle()).concat(""String_Node_Str"").concat(String.valueOf(System.currentTimeMillis() / 1000)).concat(""String_Node_Str"");
          recorder.setFile(new File(folder));
          stateManager.attach(recorder);
        }
        NiftyJmeDisplay niftyDisplay=getNifty();
        List<String> guiXMLs=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
        for (        String xml : guiXMLs) {
          try {
          }
 catch (          Exception e) {
            throw new RuntimeException(""String_Node_Str"" + xml + ""String_Node_Str"",e);
          }
        }
        MainMenuState mainMenuState=new MainMenuState(!params.containsKey(""String_Node_Str""),assetManager);
        mainMenuState.setEnabled(false);
        PlayerState playerState=new PlayerState(3,false);
        stateManager.attach(mainMenuState);
        stateManager.attach(playerState);
        niftyDisplay.getNifty().registerScreenController(mainMenuState,playerState);
        for (        String xml : guiXMLs) {
          niftyDisplay.getNifty().addXml(xml);
        }
        if (!params.containsKey(""String_Node_Str"") && !params.containsKey(""String_Node_Str"")) {
          long waitTime=5000 - (System.currentTimeMillis() - startTime);
          if (waitTime > 0) {
            Thread.sleep(waitTime);
          }
        }
      }
 catch (      InterruptedException ex) {
      }
catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
        app.stop();
      }
      return null;
    }
    @Override public void onLoadComplete(){
      AmbientLight al=new AmbientLight();
      al.setColor(ColorRGBA.White.multLocal(5f));
      rootNode.addLight(al);
      if (params.containsKey(""String_Node_Str"") || params.containsKey(""String_Node_Str"")) {
        startGame();
      }
 else {
        playIntro();
      }
    }
  }
;
  this.stateManager.attach(gameLoader);
}"
8897,"@Override public Void onLoad(){
  try {
    long startTime=System.currentTimeMillis();
    getAssetManager().registerLoader(MP2Loader.class,""String_Node_Str"");
    getAssetManager().registerLoader(CameraSweepDataLoader.class,CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION);
    setAnisotropy();
    ScreenshotAppState screenShotState=new ScreenshotAppState(SCREENSHOTS_FOLDER);
    stateManager.attach(screenShotState);
    if (params.containsKey(""String_Node_Str"")) {
      float quality=(getUserSettings().getSettingFloat(Settings.Setting.RECORDER_QUALITY));
      int frameRate=(getUserSettings().getSettingInteger(Settings.Setting.RECORDER_FPS));
      getSettings().setFrameRate(frameRate);
      VideoRecorderAppState recorder=new VideoRecorderAppState(quality,frameRate);
      String folder=params.get(""String_Node_Str"");
      if (folder == null) {
        folder=SCREENSHOTS_FOLDER;
      }
      if (!folder.endsWith(File.separator)) {
        folder=folder.concat(File.separator);
      }
      folder=folder.concat(getSettings().getTitle()).concat(""String_Node_Str"").concat(String.valueOf(System.currentTimeMillis() / 1000)).concat(""String_Node_Str"");
      recorder.setFile(new File(folder));
      stateManager.attach(recorder);
    }
    NiftyJmeDisplay niftyDisplay=getNifty();
    List<String> guiXMLs=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
    for (    String xml : guiXMLs) {
      try {
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + xml + ""String_Node_Str"",e);
      }
    }
    MainMenuState mainMenuState=new MainMenuState(!params.containsKey(""String_Node_Str""),assetManager);
    mainMenuState.setEnabled(false);
    PlayerState playerState=new PlayerState();
    playerState.setEnabled(false);
    stateManager.attach(mainMenuState);
    stateManager.attach(playerState);
    niftyDisplay.getNifty().registerScreenController(mainMenuState,playerState);
    for (    String xml : guiXMLs) {
      niftyDisplay.getNifty().addXml(xml);
    }
    if (!params.containsKey(""String_Node_Str"") && !params.containsKey(""String_Node_Str"")) {
      long waitTime=5000 - (System.currentTimeMillis() - startTime);
      if (waitTime > 0) {
        Thread.sleep(waitTime);
      }
    }
  }
 catch (  InterruptedException ex) {
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    app.stop();
  }
  return null;
}","@Override public Void onLoad(){
  try {
    long startTime=System.currentTimeMillis();
    getAssetManager().registerLoader(MP2Loader.class,""String_Node_Str"");
    getAssetManager().registerLoader(CameraSweepDataLoader.class,CameraSweepDataLoader.CAMERA_SWEEP_DATA_FILE_EXTENSION);
    setAnisotropy();
    ScreenshotAppState screenShotState=new ScreenshotAppState(SCREENSHOTS_FOLDER);
    stateManager.attach(screenShotState);
    if (params.containsKey(""String_Node_Str"")) {
      float quality=(getUserSettings().getSettingFloat(Settings.Setting.RECORDER_QUALITY));
      int frameRate=(getUserSettings().getSettingInteger(Settings.Setting.RECORDER_FPS));
      getSettings().setFrameRate(frameRate);
      VideoRecorderAppState recorder=new VideoRecorderAppState(quality,frameRate);
      String folder=params.get(""String_Node_Str"");
      if (folder == null) {
        folder=SCREENSHOTS_FOLDER;
      }
      if (!folder.endsWith(File.separator)) {
        folder=folder.concat(File.separator);
      }
      folder=folder.concat(getSettings().getTitle()).concat(""String_Node_Str"").concat(String.valueOf(System.currentTimeMillis() / 1000)).concat(""String_Node_Str"");
      recorder.setFile(new File(folder));
      stateManager.attach(recorder);
    }
    NiftyJmeDisplay niftyDisplay=getNifty();
    List<String> guiXMLs=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
    for (    String xml : guiXMLs) {
      try {
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + xml + ""String_Node_Str"",e);
      }
    }
    MainMenuState mainMenuState=new MainMenuState(!params.containsKey(""String_Node_Str""),assetManager);
    mainMenuState.setEnabled(false);
    PlayerState playerState=new PlayerState(3,false);
    stateManager.attach(mainMenuState);
    stateManager.attach(playerState);
    niftyDisplay.getNifty().registerScreenController(mainMenuState,playerState);
    for (    String xml : guiXMLs) {
      niftyDisplay.getNifty().addXml(xml);
    }
    if (!params.containsKey(""String_Node_Str"") && !params.containsKey(""String_Node_Str"")) {
      long waitTime=5000 - (System.currentTimeMillis() - startTime);
      if (waitTime > 0) {
        Thread.sleep(waitTime);
      }
    }
  }
 catch (  InterruptedException ex) {
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    app.stop();
  }
  return null;
}"
8898,"@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (result) {
    return result;
  }
  result=false;
  float target=0;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case CREATURE_CREATED:
    return false;
case CREATURE_KILLED:
  return false;
case CREATURE_SLAPPED:
return false;
case CREATURE_ATTACKED:
return false;
case CREATURE_IMPRISONED:
return false;
case CREATURE_TORTURED:
return false;
case CREATURE_CONVERTED:
return false;
case CREATURE_CLAIMED:
return false;
case CREATURE_ANGRY:
return false;
case CREATURE_AFRAID:
return false;
case CREATURE_STEALS:
return false;
case CREATURE_LEAVES:
return false;
case CREATURE_STUNNED:
return false;
case CREATURE_DYING:
return false;
case CREATURE_HEALTH:
return false;
case CREATURE_GOLD_HELD:
return false;
case CREATURE_EXPERIENCE_LEVEL:
return false;
case CREATURE_HUNGER_SATED:
return false;
case CREATURE_PICKS_UP_PORTAL_GEM:
return false;
case CREATURE_SACKED:
return false;
case CREATURE_PICKED_UP:
return false;
}
TriggerGeneric.ComparisonType comparisonType=trigger.getComparison();
if (comparisonType != null && comparisonType != TriggerGeneric.ComparisonType.NONE) {
result=compare(target,comparisonType,(int)trigger.getUserData(""String_Node_Str""));
}
return result;
}","@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (checked) {
    return result;
  }
  result=false;
  float target=0;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case CREATURE_CREATED:
    return false;
case CREATURE_KILLED:
  return false;
case CREATURE_SLAPPED:
return false;
case CREATURE_ATTACKED:
return false;
case CREATURE_IMPRISONED:
return false;
case CREATURE_TORTURED:
return false;
case CREATURE_CONVERTED:
return false;
case CREATURE_CLAIMED:
return false;
case CREATURE_ANGRY:
return false;
case CREATURE_AFRAID:
return false;
case CREATURE_STEALS:
return false;
case CREATURE_LEAVES:
return false;
case CREATURE_STUNNED:
return false;
case CREATURE_DYING:
return false;
case CREATURE_HEALTH:
return false;
case CREATURE_GOLD_HELD:
return false;
case CREATURE_EXPERIENCE_LEVEL:
return false;
case CREATURE_HUNGER_SATED:
return false;
case CREATURE_PICKS_UP_PORTAL_GEM:
return false;
case CREATURE_SACKED:
return false;
case CREATURE_PICKED_UP:
return false;
default :
logger.warning(""String_Node_Str"");
return false;
}
}"
8899,"@Override public void initialize(AppStateManager stateManager,Application app){
  super.initialize(stateManager,app);
  this.stateManager=stateManager;
  this.app=(Main)app;
  actionPoints=new HashMap<>();
  for (  Thing thing : stateManager.getState(GameState.class).getLevelData().getThings()) {
    if (thing instanceof Thing.ActionPoint) {
      Thing.ActionPoint temp=(Thing.ActionPoint)thing;
      ActionPoint ap=new ActionPoint(temp);
      if (temp.getTriggerId() != 0) {
        ap.addControl(new ActionPointTriggerControl(this.app,temp.getTriggerId()));
      }
      actionPoints.put(ap.getId(),ap);
    }
  }
}","@Override public void initialize(AppStateManager stateManager,Application app){
  super.initialize(stateManager,app);
  this.stateManager=stateManager;
  this.app=(Main)app;
  actionPoints=new HashMap<>();
  for (  Thing thing : this.stateManager.getState(GameState.class).getLevelData().getThings()) {
    if (thing instanceof Thing.ActionPoint) {
      Thing.ActionPoint temp=(Thing.ActionPoint)thing;
      ActionPoint ap=new ActionPoint(temp);
      if (temp.getTriggerId() != 0) {
        ap.addControl(new ActionPointTriggerControl(this.app,temp.getTriggerId()));
      }
      actionPoints.put(ap.getId(),ap);
    }
  }
}"
8900,"@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (result) {
    return result;
  }
  float target=0;
  result=false;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case AP_CONGREGATE_IN:
    return false;
case AP_CLAIM_PART_OF:
  return false;
case AP_CLAIM_ALL_OF:
return false;
case AP_SLAP_TYPES:
return false;
case AP_TAG_PART_OF:
return false;
case AP_TAG_ALL_OF:
return false;
case AP_POSESSED_CREATURE_ENTERS:
return false;
}
TriggerGeneric.ComparisonType comparisonType=trigger.getComparison();
if (comparisonType != null && comparisonType != TriggerGeneric.ComparisonType.NONE) {
result=compare(target,comparisonType,(int)trigger.getUserData(""String_Node_Str""));
}
return result;
}","@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (checked) {
    return result;
  }
  int target=0;
  int value=0;
  ActionPoint ap=(ActionPoint)parent;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case AP_CONGREGATE_IN:
    short playerId=trigger.getUserData(""String_Node_Str"",short.class);
  short targetId=trigger.getUserData(""String_Node_Str"",short.class);
value=trigger.getUserData(""String_Node_Str"",int.class);
short type=trigger.getUserData(""String_Node_Str"",short.class);
switch (type) {
case 0:
case 3:
break;
case 6:
break;
default :
logger.log(Level.WARNING,""String_Node_Str"",type);
break;
}
return false;
case AP_POSESSED_CREATURE_ENTERS:
playerId=trigger.getUserData(""String_Node_Str"",short.class);
targetId=trigger.getUserData(""String_Node_Str"",short.class);
value=trigger.getUserData(""String_Node_Str"",int.class);
type=trigger.getUserData(""String_Node_Str"",short.class);
switch (type) {
case 3:
break;
case 6:
break;
default :
logger.warning(""String_Node_Str"");
break;
}
return false;
case AP_CLAIM_PART_OF:
playerId=trigger.getUserData(""String_Node_Str"",short.class);
value=trigger.getUserData(""String_Node_Str"",int.class);
MapData map=stateManager.getState(WorldState.class).getMapData();
for (int x=(int)ap.getStart().x; x <= (int)ap.getEnd().x; x++) {
for (int y=(int)ap.getStart().y; y <= (int)ap.getEnd().y; y++) {
if (playerId == map.getTile(x,y).getPlayerId()) {
target++;
}
}
}
break;
case AP_CLAIM_ALL_OF:
playerId=trigger.getUserData(""String_Node_Str"",short.class);
map=stateManager.getState(WorldState.class).getMapData();
for (int x=(int)ap.getStart().x; x <= (int)ap.getEnd().x; x++) {
for (int y=(int)ap.getStart().y; y <= (int)ap.getEnd().y; y++) {
if (playerId != map.getTile(x,y).getPlayerId()) {
return false;
}
}
}
return true;
case AP_SLAB_TYPES:
playerId=trigger.getUserData(""String_Node_Str"",short.class);
targetId=trigger.getUserData(""String_Node_Str"",short.class);
value=trigger.getUserData(""String_Node_Str"",int.class);
map=stateManager.getState(WorldState.class).getMapData();
for (int x=(int)ap.getStart().x; x <= (int)ap.getEnd().x; x++) {
for (int y=(int)ap.getStart().y; y <= (int)ap.getEnd().y; y++) {
TileData tile=map.getTile(x,y);
if (playerId != 0 && playerId != tile.getPlayerId() || targetId != tile.getTerrainId()) {
continue;
}
target++;
}
}
break;
case AP_TAG_PART_OF:
value=trigger.getUserData(""String_Node_Str"",int.class);
map=stateManager.getState(WorldState.class).getMapData();
for (int x=(int)ap.getStart().x; x <= (int)ap.getEnd().x; x++) {
for (int y=(int)ap.getStart().y; y <= (int)ap.getEnd().y; y++) {
if (map.getTile(x,y).isSelected()) {
target++;
}
}
}
break;
case AP_TAG_ALL_OF:
map=stateManager.getState(WorldState.class).getMapData();
for (int x=(int)ap.getStart().x; x <= (int)ap.getEnd().x; x++) {
for (int y=(int)ap.getStart().y; y <= (int)ap.getEnd().y; y++) {
if (!map.getTile(x,y).isSelected()) {
return false;
}
}
}
return true;
default :
logger.warning(""String_Node_Str"");
return false;
}
TriggerGeneric.ComparisonType comparisonType=trigger.getComparison();
if (comparisonType != null && comparisonType != TriggerGeneric.ComparisonType.NONE) {
result=compare(target,comparisonType,value);
}
return result;
}"
8901,"private static File getFile(){
  return new File(AssetsConverter.getCurrentFolder().concat(HISCORES_FILENAME));
}","private static File getFile(){
  return new File(AssetsConverter.getAssetsFolder() + HISCORES_FILENAME);
}"
8902,"protected void setCreated(boolean created){
  this.created=created;
}","public void setCreated(boolean created){
  this.created=created;
}"
8903,"@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (result) {
    return result;
  }
  result=false;
  float target=0;
  int value=0;
  Party party=(Party)parent;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case PARTY_CREATED:
    return party.isCreated();
case PARTY_MEMBERS_KILLED:
  short unknown=(short)trigger.getUserData(""String_Node_Str"");
value=(int)trigger.getUserData(""String_Node_Str"");
break;
case PARTY_MEMBERS_CAPTURED:
value=(int)trigger.getUserData(""String_Node_Str"");
break;
case PARTY_MEMBERS_INCAPACITATED:
unknown=(short)trigger.getUserData(""String_Node_Str"");
value=(int)trigger.getUserData(""String_Node_Str"");
break;
}
TriggerGeneric.ComparisonType comparisonType=trigger.getComparison();
if (comparisonType != null && comparisonType != TriggerGeneric.ComparisonType.NONE) {
result=compare(target,comparisonType,value);
}
return result;
}","@Override protected boolean isActive(TriggerGenericData trigger){
  boolean result=super.isActive(trigger);
  if (checked) {
    return result;
  }
  result=false;
  float target=0;
  int value=0;
  Party party=(Party)parent;
  TriggerGeneric.TargetType targetType=trigger.getType();
switch (targetType) {
case PARTY_CREATED:
    return party.isCreated();
case PARTY_MEMBERS_KILLED:
  short unknown=(short)trigger.getUserData(""String_Node_Str"");
value=(int)trigger.getUserData(""String_Node_Str"");
break;
case PARTY_MEMBERS_CAPTURED:
value=(int)trigger.getUserData(""String_Node_Str"");
break;
case PARTY_MEMBERS_INCAPACITATED:
unknown=(short)trigger.getUserData(""String_Node_Str"");
value=(int)trigger.getUserData(""String_Node_Str"");
break;
default :
logger.warning(""String_Node_Str"");
return false;
}
TriggerGeneric.ComparisonType comparisonType=trigger.getComparison();
if (comparisonType != null && comparisonType != TriggerGeneric.ComparisonType.NONE) {
result=compare(target,comparisonType,value);
}
return result;
}"
8904,"@Override public void updateControl(float tpf){
  if (parent == null || camera == null || !enabled) {
    return;
  }
  if (tick > 1) {
    parent.removeControl(this);
    return;
  }
  Vector3f look=FastMath.interpolateLinear(tick,from,to);
  camera.setLookAt(look);
  tick+=tpf / SPEED;
}","@Override public void updateControl(float tpf){
  if (parent == null || camera == null || !enabled) {
    return;
  }
  if (tick > 1) {
    parent.removeControl(this);
    return;
  }
  Vector3f look=FastMath.interpolateLinear(tick,from,to);
  camera.setLookAt(look);
  tick+=tpf * SPEED;
}"
8905,"/** 
 * Check if given tile is accessible by the given creature
 * @param tile the tile
 * @param creature creature
 * @return is accessible
 */
public boolean isAccessible(TileData tile,Creature creature){
  Terrain terrain=tile.getTerrain();
  if (!terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (creature.getFlags().contains(Creature.CreatureFlag.CAN_FLY)) {
      return true;
    }
 else     if (terrain.getFlags().contains(Terrain.TerrainFlag.LAVA) && creature.getFlags().contains(Creature.CreatureFlag.CAN_WALK_ON_LAVA)) {
      return true;
    }
 else     if (terrain.getFlags().contains(Terrain.TerrainFlag.WATER) && creature.getFlags().contains(Creature.CreatureFlag.CAN_WALK_ON_WATER)) {
      return true;
    }
  }
  return false;
}","/** 
 * Check if given tile is accessible by the given creature
 * @param tile the tile
 * @param creature creature
 * @return is accessible
 */
public boolean isAccessible(TileData tile,Creature creature){
  Terrain terrain=tile.getTerrain();
  if (!terrain.getFlags().contains(Terrain.TerrainFlag.SOLID)) {
    if (creature.getFlags().contains(Creature.CreatureFlag.CAN_FLY)) {
      return true;
    }
 else     if (terrain.getFlags().contains(Terrain.TerrainFlag.LAVA) && !creature.getFlags().contains(Creature.CreatureFlag.CAN_WALK_ON_LAVA)) {
      return false;
    }
 else     if (terrain.getFlags().contains(Terrain.TerrainFlag.WATER) && !creature.getFlags().contains(Creature.CreatureFlag.CAN_WALK_ON_WATER)) {
      return false;
    }
    return true;
  }
  return false;
}"
8906,"/** 
 * Get tile coordinates from 3D coordinates
 * @param translation position
 * @return tile coordinates
 */
public Point getTileCoordinates(Vector3f translation){
  return new Point((int)Math.floor(translation.x),(int)Math.floor(translation.z));
}","/** 
 * Get tile coordinates from 3D coordinates
 * @param location position
 * @return tile coordinates
 */
public Point getTileCoordinates(Vector3f location){
  return new Point((int)Math.floor(location.x),(int)Math.floor(location.z));
}"
8907,"/** 
 * Checks if this terrain piece is actually a room and the room type has walls
 * @param terrain the terrain piece
 * @return true if this is a room and it has its own walls
 */
private boolean hasRoomWalls(Terrain terrain){
  ArtResource ceilingResource=getCeilingResource(terrain);
  if (ceilingResource == null && terrain.getCompleteResource() == null) {
    Room room=kwdFile.getRoomByTerrain(terrain.getTerrainId());
    return room.getFlags().contains(Room.RoomFlag.HAS_WALLS) || room.getTileConstruction() == Room.TileConstruction.HERO_GATE_FRONT_END || room.getTileConstruction() == Room.TileConstruction.HERO_GATE_3_BY_1 || room.getTileConstruction() == Room.TileConstruction.HERO_GATE;
  }
  return false;
}","/** 
 * Checks if this terrain piece is actually a room and the room type has walls
 * @param terrain the terrain piece
 * @return true if this is a room and it has its own walls
 */
private boolean hasRoomWalls(Terrain terrain){
  ArtResource ceilingResource=getCeilingResource(terrain);
  if (ceilingResource == null && terrain.getCompleteResource() == null) {
    Room room=kwdFile.getRoomByTerrain(terrain.getTerrainId());
    return room.getFlags().contains(Room.RoomFlag.HAS_WALLS) || room.getTileConstruction() == Room.TileConstruction.HERO_GATE_FRONT_END || room.getTileConstruction() == Room.TileConstruction.HERO_GATE_3_BY_1;
  }
  return false;
}"
8908,"@Override protected void contructWall(Node root){
  Point start=roomInstance.getCoordinates().get(0);
  for (  WallSection section : roomInstance.getWallPoints()) {
    int i=0;
    resetWallIndex();
    for (    Point p : section.getCoordinates()) {
      int piece;
      if (section.getDirection() == WallSection.WallDirection.NORTH) {
        piece=(i == 1) ? 5 : 7;
        Spatial part=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCompleteResource().getName()+ piece+ ""String_Node_Str"");
        resetAndMoveSpatial(part,start,new Point(start.x + p.x,start.y + p.y));
        part.move(-0.5f,0,-0.5f);
        root.attachChild(part);
        i++;
      }
 else       if (section.getDirection() == WallSection.WallDirection.WEST) {
        piece=7;
        Spatial part=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCompleteResource().getName()+ piece+ ""String_Node_Str"");
        resetAndMoveSpatial(part,start,new Point(start.x + p.x,start.y + p.y));
        part.rotate(0,FastMath.HALF_PI,0);
        part.move(-0.5f,0,-0.5f);
        root.attachChild(part);
      }
 else       if (section.getDirection() == WallSection.WallDirection.EAST) {
        piece=7;
        Spatial part=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCompleteResource().getName()+ piece+ ""String_Node_Str"");
        resetAndMoveSpatial(part,start,new Point(start.x + p.x,start.y + p.y));
        part.rotate(0,-FastMath.HALF_PI,0);
        part.move(-0.5f,0,-0.5f);
        root.attachChild(part);
      }
 else       if (section.getDirection() == WallSection.WallDirection.SOUTH) {
        if (i == 0) {
          piece=4;
        }
 else         if (i == 1) {
          piece=5;
        }
 else {
          piece=8;
        }
        Spatial part=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCompleteResource().getName()+ piece+ ""String_Node_Str"");
        resetAndMoveSpatial(part,start,new Point(start.x + p.x,start.y + p.y));
        part.rotate(0,FastMath.PI,0);
        part.move(-0.5f,0,-0.5f);
        root.attachChild(part);
        i++;
      }
    }
  }
}","@Override protected void contructWall(Node root){
  Point start=roomInstance.getCoordinates().get(0);
  String modelName=roomInstance.getRoom().getCompleteResource().getName();
  int south=0;
  for (  WallSection section : roomInstance.getWallPoints()) {
    int i=0;
    for (    Point p : section.getCoordinates()) {
      int piece;
      Spatial part;
      float yAngle=0;
      if (section.getDirection() == WallSection.WallDirection.NORTH) {
        if (section.getCoordinates().size() == 1) {
          piece=6;
        }
 else {
          piece=(i == 1) ? 5 : 7;
        }
      }
 else       if (section.getDirection() == WallSection.WallDirection.WEST) {
        if (section.getCoordinates().size() == 1) {
          continue;
        }
        piece=7;
        yAngle=FastMath.HALF_PI;
      }
 else       if (section.getDirection() == WallSection.WallDirection.EAST) {
        if (section.getCoordinates().size() == 1) {
          continue;
        }
        piece=7;
        yAngle=-FastMath.HALF_PI;
      }
 else {
        if (south == 0) {
          piece=4;
        }
 else         if (south == 1) {
          piece=8;
        }
 else {
          piece=6;
        }
        south++;
        yAngle=FastMath.PI;
      }
      i++;
      part=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + modelName+ piece+ ""String_Node_Str"");
      if (yAngle != 0) {
        part.rotate(0,yAngle,0);
      }
      resetAndMoveSpatial(part,start,new Point(start.x + p.x,start.y + p.y));
      part.move(-MapLoader.TILE_WIDTH / 2,0,-MapLoader.TILE_WIDTH / 2);
      root.attachChild(part);
    }
  }
}"
8909,"@Override protected void contructFloor(Node n){
  Point start=roomInstance.getCoordinates().get(0);
  for (  Point p : roomInstance.getCoordinates()) {
    int piece=2;
    float yAngle=0;
    boolean N=roomInstance.hasCoordinate(new Point(p.x,p.y - 1));
    boolean E=roomInstance.hasCoordinate(new Point(p.x + 1,p.y));
    boolean S=roomInstance.hasCoordinate(new Point(p.x,p.y + 1));
    boolean W=roomInstance.hasCoordinate(new Point(p.x - 1,p.y));
    if (!N && E && W) {
      piece=1;
    }
 else     if (!S && !E && !W) {
      piece=9;
    }
 else     if (!W) {
      piece=3;
    }
 else     if (!E) {
      piece=3;
      yAngle=-2 * FastMath.HALF_PI;
    }
    Node tile=(Node)assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCompleteResource().getName()+ piece+ ""String_Node_Str"");
    resetAndMoveSpatial(tile,start,p);
    if (yAngle != 0) {
      tile.rotate(0,yAngle,0);
    }
    n.attachChild(tile);
  }
  n.move(start.x * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2,0,start.y * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2);
  n.scale(MapLoader.TILE_WIDTH);
}","@Override protected void contructFloor(Node n){
  Point start=roomInstance.getCoordinates().get(0);
  String modelName=roomInstance.getRoom().getCompleteResource().getName();
  for (  Point p : roomInstance.getCoordinates()) {
    Spatial tile;
    int piece=2;
    float yAngle=0;
    boolean N=roomInstance.hasCoordinate(new Point(p.x,p.y - 1));
    boolean E=roomInstance.hasCoordinate(new Point(p.x + 1,p.y));
    boolean S=roomInstance.hasCoordinate(new Point(p.x,p.y + 1));
    boolean W=roomInstance.hasCoordinate(new Point(p.x - 1,p.y));
    if (!N && E && W) {
      piece=1;
    }
 else     if (!S && !E && !W) {
      tile=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + roomInstance.getRoom().getCapResource().getName()+ ""String_Node_Str"");
      resetAndMoveSpatial(tile,start,p);
      n.attachChild(tile);
      piece=9;
    }
 else     if (!W) {
      piece=3;
    }
 else     if (!E) {
      piece=3;
      yAngle=-2 * FastMath.HALF_PI;
    }
    tile=assetManager.loadModel(AssetsConverter.MODELS_FOLDER + ""String_Node_Str"" + modelName+ piece+ ""String_Node_Str"");
    resetAndMoveSpatial(tile,start,p);
    if (yAngle != 0) {
      tile.rotate(0,yAngle,0);
    }
    n.attachChild(tile);
  }
  n.move(start.x * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2,0,start.y * MapLoader.TILE_WIDTH - MapLoader.TILE_WIDTH / 2);
  n.scale(MapLoader.TILE_WIDTH);
}"
8910,"/** 
 * Loads up an instance of the engine textures catalog
 * @param dungeonKeeperFolder DK II folder
 * @return EngineTextures catalog
 */
public static EngineTexturesFile getEngineTexturesFile(String dungeonKeeperFolder){
  String dataDirectory=dungeonKeeperFolder.concat(""String_Node_Str"").concat(File.separator);
  EngineTexturesFile etFile=new EngineTexturesFile(new File(dataDirectory.concat(""String_Node_Str"")));
  return etFile;
}","/** 
 * Loads up an instance of the engine textures catalog
 * @param dungeonKeeperFolder DK II folder
 * @return EngineTextures catalog
 */
public static EngineTexturesFile getEngineTexturesFile(String dungeonKeeperFolder){
  try {
    EngineTexturesFile etFile=new EngineTexturesFile(new File(Utils.getRealFileName(dungeonKeeperFolder,""String_Node_Str"".concat(File.separator).concat(""String_Node_Str""))));
    return etFile;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
8911,"/** 
 * Extract and copy DK II textures
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTextures(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.TEXTURES.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.TEXTURES);
  EngineTexturesFile etFile=getEngineTexturesFile(dungeonKeeperFolder);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  WadFile frontEnd=new WadFile(new File(dungeonKeeperFolder.concat(""String_Node_Str"").concat(File.separator).concat(""String_Node_Str"")));
  WadFile engineTextures=new WadFile(new File(dungeonKeeperFolder.concat(""String_Node_Str"").concat(File.separator).concat(""String_Node_Str"")));
  int i=0;
  int total=etFile.getFileCount() + frontEnd.getWadFileEntries().size() + engineTextures.getWadFileEntries().size();
  for (  String textureFile : etFile) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    Matcher matcher=pattern.matcher(textureFile);
    boolean found=matcher.find();
    if (found && Integer.parseInt(matcher.group(""String_Node_Str"")) == 0) {
      File f=etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
      File newFile=new File(f.toString().replaceFirst(""String_Node_Str"" + matcher.group(""String_Node_Str""),""String_Node_Str""));
      if (OVERWRITE_DATA && newFile.exists()) {
        newFile.delete();
      }
 else       if (!OVERWRITE_DATA && newFile.exists()) {
        logger.log(Level.INFO,""String_Node_Str"",newFile);
        f.delete();
        continue;
      }
      f.renameTo(newFile);
    }
 else     if (!found) {
      etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
    }
  }
  extractTextureContainer(i,total,frontEnd,destination);
  extractTextureContainer(i,total,engineTextures,destination);
}","/** 
 * Extract and copy DK II textures
 * @param dungeonKeeperFolder DK II main folder
 * @param destination Destination folder
 */
private void convertTextures(String dungeonKeeperFolder,String destination){
  if (!ConvertProcess.TEXTURES.isOutdated()) {
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",destination);
  updateStatus(null,null,ConvertProcess.TEXTURES);
  EngineTexturesFile etFile=getEngineTexturesFile(dungeonKeeperFolder);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  WadFile frontEnd;
  WadFile engineTextures;
  try {
    frontEnd=new WadFile(new File(Utils.getRealFileName(dungeonKeeperFolder,""String_Node_Str"".concat(File.separator).concat(""String_Node_Str""))));
    engineTextures=new WadFile(new File(Utils.getRealFileName(dungeonKeeperFolder,""String_Node_Str"".concat(File.separator).concat(""String_Node_Str""))));
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  int i=0;
  int total=etFile.getFileCount() + frontEnd.getWadFileEntries().size() + engineTextures.getWadFileEntries().size();
  for (  String textureFile : etFile) {
    updateStatus(i,total,ConvertProcess.TEXTURES);
    i++;
    Matcher matcher=pattern.matcher(textureFile);
    boolean found=matcher.find();
    if (found && Integer.parseInt(matcher.group(""String_Node_Str"")) == 0) {
      File f=etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
      File newFile=new File(f.toString().replaceFirst(""String_Node_Str"" + matcher.group(""String_Node_Str""),""String_Node_Str""));
      if (OVERWRITE_DATA && newFile.exists()) {
        newFile.delete();
      }
 else       if (!OVERWRITE_DATA && newFile.exists()) {
        logger.log(Level.INFO,""String_Node_Str"",newFile);
        f.delete();
        continue;
      }
      f.renameTo(newFile);
    }
 else     if (!found) {
      etFile.extractFileData(textureFile,destination,OVERWRITE_DATA);
    }
  }
  extractTextureContainer(i,total,frontEnd,destination);
  extractTextureContainer(i,total,engineTextures,destination);
}"
8912,"/** 
 * Constructs a new STR file reader using given code page. Particularly useful for batch runs, no need to read the code page all over again<br> Reads the STR file structure
 * @param codePage the code page
 * @param file the str file to read
 */
public StrFile(CharBuffer codePage,File file){
  this.codePage=codePage;
  try (RandomAccessFile rawStr=new RandomAccessFile(file,""String_Node_Str"")){
    byte[] header=new byte[4];
    rawStr.read(header);
    if (!STR_HEADER_IDENTIFIER.equals(Utils.bytesToString(header))) {
      throw new RuntimeException(""String_Node_Str"" + STR_HEADER_IDENTIFIER + ""String_Node_Str""+ header+ ""String_Node_Str"");
    }
    fileId=Utils.readUnsignedInteger(rawStr);
    int offsetsCount=Utils.readUnsignedInteger(rawStr);
    List<Integer> offsets=new ArrayList<>(offsetsCount);
    for (int i=0; i < offsetsCount; i++) {
      offsets.add(Utils.readUnsignedInteger(rawStr));
    }
    entries=new LinkedHashMap<>(offsetsCount);
    for (int i=0; i < offsetsCount; i++) {
      rawStr.seek(offsets.get(i) + STR_HEADER_SIZE);
      int dataLength=(int)(i < offsets.size() - 1 ? offsets.get(i + 1) - offsets.get(i) : rawStr.length() - offsets.get(i) - STR_HEADER_SIZE);
      byte[] data=new byte[dataLength];
      int dataRead=rawStr.read(data);
      if (dataRead < dataLength) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{i,dataLength,dataRead});
      }
      String entry=decodeEntry(data);
      if (entry == null) {
        throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str"");
      }
      entries.put(i,entry);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + file + ""String_Node_Str"",e);
  }
}","/** 
 * Constructs a new STR file reader using given code page. Particularly useful for batch runs, no need to read the code page all over again<br> Reads the STR file structure
 * @param codePage the code page
 * @param file the str file to read
 */
public StrFile(CharBuffer codePage,File file){
  this.codePage=codePage;
  try (RandomAccessFile rawStr=new RandomAccessFile(file,""String_Node_Str"")){
    byte[] header=new byte[4];
    rawStr.read(header);
    if (!STR_HEADER_IDENTIFIER.equals(Utils.bytesToString(header))) {
      throw new RuntimeException(""String_Node_Str"" + STR_HEADER_IDENTIFIER + ""String_Node_Str""+ header+ ""String_Node_Str"");
    }
    fileId=Utils.readUnsignedInteger(rawStr);
    int offsetsCount=Utils.readUnsignedInteger(rawStr);
    List<Integer> offsets=new ArrayList<>(offsetsCount);
    for (int i=0; i < offsetsCount; i++) {
      offsets.add(Utils.readUnsignedInteger(rawStr));
    }
    List<Integer> offsetsCopy=new ArrayList<>(offsets);
    Collections.sort(offsetsCopy);
    entries=new LinkedHashMap<>(offsetsCount);
    for (int i=0; i < offsetsCount; i++) {
      rawStr.seek(offsets.get(i) + STR_HEADER_SIZE);
      int j=Collections.binarySearch(offsetsCopy,offsets.get(i));
      int dataLength=(int)(j < offsetsCopy.size() - 1 ? offsetsCopy.get(j + 1) - offsets.get(i) : rawStr.length() - offsets.get(i) - STR_HEADER_SIZE);
      byte[] data=new byte[dataLength];
      int dataRead=rawStr.read(data);
      if (dataRead < dataLength) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{i,dataLength,dataRead});
      }
      String entry=decodeEntry(data);
      if (entry == null) {
        throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str"");
      }
      entries.put(i,entry);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + file + ""String_Node_Str"",e);
  }
}"
8913,"@Override public String toString(){
  final StringBuilder s=new StringBuilder(""String_Node_Str"");
  s.append(""String_Node_Str"");
  if (observer != null)   s.append(""String_Node_Str"").append(observer.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(observer.hashCode())).append(""String_Node_Str"");
 else   s.append(""String_Node_Str"");
  s.append(""String_Node_Str"").append(kind).append(""String_Node_Str"");
  if (kind == Kind.OnNext)   s.append(""String_Node_Str"").append(quote(value));
  if (kind == Kind.OnError)   s.append(""String_Node_Str"").append(throwable.getMessage().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  if (kind == Kind.Request)   s.append(""String_Node_Str"").append(n);
  if (source != null)   s.append(""String_Node_Str"").append(source.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(source.hashCode())).append(""String_Node_Str"");
  if (sourceFunc != null)   s.append(""String_Node_Str"").append(sourceFunc.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(sourceFunc.hashCode())).append(""String_Node_Str"");
  if (from != null)   s.append(""String_Node_Str"").append(from.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(from.hashCode())).append(""String_Node_Str"");
  if (to != null)   s.append(""String_Node_Str"").append(to.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(to.hashCode())).append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  return s.toString();
}","@Override public String toString(){
  final StringBuilder s=new StringBuilder(""String_Node_Str"");
  s.append(""String_Node_Str"");
  if (observer != null)   s.append(""String_Node_Str"").append(observer.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(observer.hashCode())).append(""String_Node_Str"");
 else   s.append(""String_Node_Str"");
  s.append(""String_Node_Str"").append(kind).append(""String_Node_Str"");
  if (kind == Kind.OnNext)   s.append(""String_Node_Str"").append(quote(value));
  if (kind == Kind.OnError)   s.append(""String_Node_Str"").append(throwable.getMessage() == null ? throwable.getClass().getSimpleName() : throwable.getMessage().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  if (kind == Kind.Request)   s.append(""String_Node_Str"").append(n);
  if (source != null)   s.append(""String_Node_Str"").append(source.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(source.hashCode())).append(""String_Node_Str"");
  if (sourceFunc != null)   s.append(""String_Node_Str"").append(sourceFunc.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(sourceFunc.hashCode())).append(""String_Node_Str"");
  if (from != null)   s.append(""String_Node_Str"").append(from.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(from.hashCode())).append(""String_Node_Str"");
  if (to != null)   s.append(""String_Node_Str"").append(to.getClass().getName()).append(""String_Node_Str"").append(Integer.toHexString(to.hashCode())).append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  return s.toString();
}"
8914,"@Override public void request(long n){
  final DebugNotification<T> dn=DebugNotification.createRequest(o,from,to,n);
  C context=listener.start(dn);
  try {
    producer.request(n);
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
  }
}","@Override public void request(long n){
  final DebugNotification<T> dn=DebugNotification.createRequest(o,from,to,n);
  C context=listener.start(dn);
  try {
    producer.request(n);
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
    throw Exceptions.propagate(e);
  }
}"
8915,"@Override public void onStart(){
  final DebugNotification<T> n=DebugNotification.createStart(o,from,to);
  C context=listener.start(n);
  try {
    o.onStart();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
  }
}","@Override public void onStart(){
  final DebugNotification<T> n=DebugNotification.createStart(o,from,to);
  C context=listener.start(n);
  try {
    o.onStart();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
    throw Exceptions.propagate(e);
  }
}"
8916,"@Override public void onError(Throwable e){
  final DebugNotification<T> n=DebugNotification.createOnError(o,from,e,to);
  C context=listener.start(n);
  try {
    o.onError(e);
    listener.complete(context);
  }
 catch (  Throwable e2) {
    listener.error(context,e2);
  }
}","@Override public void onError(Throwable e){
  final DebugNotification<T> n=DebugNotification.createOnError(o,from,e,to);
  C context=listener.start(n);
  try {
    o.onError(e);
    listener.complete(context);
  }
 catch (  Throwable e2) {
    listener.error(context,e2);
    throw Exceptions.propagate(e);
  }
}"
8917,"@Override public void onCompleted(){
  final DebugNotification<T> n=DebugNotification.createOnCompleted(o,from,to);
  C context=listener.start(n);
  try {
    o.onCompleted();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
  }
}","@Override public void onCompleted(){
  final DebugNotification<T> n=DebugNotification.createOnCompleted(o,from,to);
  C context=listener.start(n);
  try {
    o.onCompleted();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
    throw Exceptions.propagate(e);
  }
}"
8918,"@Override public void setProducer(final Producer producer){
  o.setProducer(new Producer(){
    @Override public void request(    long n){
      final DebugNotification<T> dn=DebugNotification.createRequest(o,from,to,n);
      C context=listener.start(dn);
      try {
        producer.request(n);
        listener.complete(context);
      }
 catch (      Throwable e) {
        listener.error(context,e);
      }
    }
  }
);
}","@Override public void setProducer(final Producer producer){
  o.setProducer(new Producer(){
    @Override public void request(    long n){
      final DebugNotification<T> dn=DebugNotification.createRequest(o,from,to,n);
      C context=listener.start(dn);
      try {
        producer.request(n);
        listener.complete(context);
      }
 catch (      Throwable e) {
        listener.error(context,e);
        throw Exceptions.propagate(e);
      }
    }
  }
);
}"
8919,"@Override public void onNext(T t){
  final DebugNotification<T> n=DebugNotification.createOnNext(o,from,t,to);
  t=(T)listener.onNext(n);
  C context=listener.start(n);
  try {
    o.onNext(t);
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
  }
}","@Override public void onNext(T t){
  final DebugNotification<T> n=DebugNotification.createOnNext(o,from,t,to);
  t=(T)listener.onNext(n);
  C context=listener.start(n);
  try {
    o.onNext(t);
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
    throw Exceptions.propagate(e);
  }
}"
8920,"@Override public void unsubscribe(){
  final DebugNotification<T> n=DebugNotification.<T>createUnsubscribe(debugObserver.getActual(),debugObserver.getFrom(),debugObserver.getTo());
  C context=listener.start(n);
  try {
    debugObserver.unsubscribe();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
  }
}","@Override public void unsubscribe(){
  final DebugNotification<T> n=DebugNotification.<T>createUnsubscribe(debugObserver.getActual(),debugObserver.getFrom(),debugObserver.getTo());
  C context=listener.start(n);
  try {
    debugObserver.unsubscribe();
    listener.complete(context);
  }
 catch (  Throwable e) {
    listener.error(context,e);
    throw Exceptions.propagate(e);
  }
}"
8921,"@Override public <T>OnSubscribe<T> onSubscribeStart(final Observable<? extends T> observableInstance,final OnSubscribe<T> f){
  return new OnSubscribe<T>(){
    @Override public void call(    Subscriber<? super T> o){
      final DebugNotification<T> n=DebugNotification.createSubscribe(o,observableInstance,f);
      o=wrapOutbound(null,o);
      C context=listener.start(n);
      try {
        f.call(o);
        listener.complete(context);
      }
 catch (      Throwable e) {
        listener.error(context,e);
      }
    }
  }
;
}","@Override public <T>OnSubscribe<T> onSubscribeStart(final Observable<? extends T> observableInstance,final OnSubscribe<T> f){
  return new OnSubscribe<T>(){
    @Override public void call(    Subscriber<? super T> o){
      final DebugNotification<T> n=DebugNotification.createSubscribe(o,observableInstance,f);
      o=wrapOutbound(null,o);
      C context=listener.start(n);
      try {
        f.call(o);
        listener.complete(context);
      }
 catch (      Throwable e) {
        listener.error(context,e);
        throw Exceptions.propagate(e);
      }
    }
  }
;
}"
8922,"@Test public void testOneOp(){
  Action1<DebugNotification> events=mock(Action1.class);
  final DebugHook hook=new DebugHook(null,events);
  RxJavaPlugins.getInstance().registerObservableExecutionHook(hook);
  Observable.from(Arrays.asList(1,3)).flatMap(new Func1<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> call(    Integer it){
      return Observable.from(Arrays.asList(it,it + 1));
    }
  }
).take(3).subscribe(new Observer<Integer>(){
    @Override public void onCompleted(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
    }
  }
);
  verify(events,times(6)).call(subscribe());
  verify(events,times(4)).call(onNext(1));
  verify(events,times(3)).call(onNext(2));
  verify(events,times(4)).call(onNext(3));
  verify(events,never()).call(onNext(4));
}","@Test public void testOneOp(){
  Action1<DebugNotification> events=mock(Action1.class);
  final DebugHook hook=new DebugHook(null,events);
  RxJavaPlugins.getInstance().registerObservableExecutionHook(hook);
  Observable.from(Arrays.asList(1,3)).flatMap(new Func1<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> call(    Integer it){
      return Observable.from(Arrays.asList(it,it + 1));
    }
  }
).take(3).subscribe(new Observer<Integer>(){
    @Override public void onCompleted(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
    }
  }
);
  verify(events,atLeast(3)).call(subscribe());
  verify(events,times(4)).call(onNext(1));
  verify(events,times(3)).call(onNext(2));
  verify(events,times(4)).call(onNext(3));
  verify(events,never()).call(onNext(4));
}"
8923,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLongPressSent) {
    return true;
  }
  if (!mDragging) {
    removeLongPressCallback();
    return false;
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrAnimView);
        float maxScrollDistance=0.15f * size;
        if (Math.abs(delta) >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrAnimView,delta);
      updateAlphaFromOffset(mCurrAnimView,mCanCurrViewBeDimissed);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView != null) {
  float maxVelocity=MAX_DISMISS_VELOCITY * mDensityScale;
  mVelocityTracker.computeCurrentVelocity(1000,maxVelocity);
  float escapeVelocity=SWIPE_ESCAPE_VELOCITY * mDensityScale;
  float velocity=getVelocity(mVelocityTracker);
  float perpendicularVelocity=getPerpendicularVelocity(mVelocityTracker);
  boolean childSwipedFarEnough=DISMISS_IF_SWIPED_FAR_ENOUGH && Math.abs(getTranslation(mCurrAnimView)) > 0.4 * getSize(mCurrAnimView);
  boolean childSwipedFastEnough=(Math.abs(velocity) > escapeVelocity) && (Math.abs(velocity) > Math.abs(perpendicularVelocity)) && (Math.abs(velocity) > 0)&& (Math.abs(getTranslation(mCurrAnimView)) > 0);
  boolean dismissChild=mCallback.canChildBeDismissed(mCurrView) && (childSwipedFastEnough || childSwipedFarEnough);
  if (dismissChild) {
    dismissChild(mCurrView,childSwipedFastEnough ? velocity : 0f);
  }
 else {
    mCallback.onDragCancelled(mCurrView);
    snapChild(mCurrView,velocity);
  }
}
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLongPressSent) {
    return true;
  }
  if (!mDragging) {
    removeLongPressCallback();
    return false;
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrAnimView);
        float maxScrollDistance=0.15f * size;
        if (Math.abs(delta) >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrAnimView,delta);
      updateAlphaFromOffset(mCurrAnimView,mCanCurrViewBeDimissed);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView != null) {
  float maxVelocity=MAX_DISMISS_VELOCITY * mDensityScale;
  mVelocityTracker.computeCurrentVelocity(1000,maxVelocity);
  float escapeVelocity=SWIPE_ESCAPE_VELOCITY * mDensityScale;
  float velocity=getVelocity(mVelocityTracker);
  float perpendicularVelocity=getPerpendicularVelocity(mVelocityTracker);
  float translation=getTranslation(mCurrAnimView);
  boolean childSwipedFarEnough=DISMISS_IF_SWIPED_FAR_ENOUGH && Math.abs(translation) > 0.4 * getSize(mCurrAnimView);
  boolean childSwipedFastEnough=(Math.abs(velocity) > escapeVelocity) && (Math.abs(velocity) > Math.abs(perpendicularVelocity)) && (velocity > 0) == (translation > 0) && velocity != 0 && translation != 0;
  boolean dismissChild=mCallback.canChildBeDismissed(mCurrView) && (childSwipedFastEnough || childSwipedFarEnough);
  if (dismissChild) {
    dismissChild(mCurrView,childSwipedFastEnough ? velocity : 0f);
  }
 else {
    mCallback.onDragCancelled(mCurrView);
    snapChild(mCurrView,velocity);
  }
}
break;
}
return true;
}"
8924,"/** 
 * Removes   {@link #mHolder#rootView view} from window.
 * @see #attachToWindow()
 */
private void detachFromWindow(){
  mHolder.wm.removeView(mHolder.rootView);
}","/** 
 * Removes   {@link #mHolder#rootView view} from window.
 * @see #attachToWindow()
 */
private void detachFromWindow(){
  mHolder.wm.removeView(mHolder.rootView);
  mAttached=false;
}"
8925,"/** 
 * Adds   {@link #mHolder#rootView view} to window.
 * @see #detachFromWindow()
 */
private void attachToWindow(){
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT);
  lp.gravity=Gravity.TOP | Gravity.CENTER_HORIZONTAL;
  mHolder.wm.addView(mHolder.rootView,lp);
}","/** 
 * Adds   {@link #mHolder#rootView view} to window.
 * @see #detachFromWindow()
 */
private void attachToWindow(){
  if (mAttached) {
    mHolder.rootView.clearAnimation();
    detachFromWindow();
  }
  mAttached=true;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT);
  lp.gravity=Gravity.TOP | Gravity.CENTER_HORIZONTAL;
  mHolder.wm.addView(mHolder.rootView,lp);
}"
8926,"void onStop(){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  NotificationPresenter.getInstance().unregisterListener(this);
  getConfig().unregisterListener(this);
  mHolder.context.unregisterReceiver(mReceiver);
  mHandler.removeCallbacksAndMessages(null);
  mHolder=null;
}","void onStop(){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  if (mAttached) {
    Log.w(TAG,""String_Node_Str"");
    detachFromWindow();
  }
  NotificationPresenter.getInstance().unregisterListener(this);
  getConfig().unregisterListener(this);
  mHolder.context.unregisterReceiver(mReceiver);
  mHandler.removeCallbacksAndMessages(null);
  mHolder=null;
}"
8927,"@Override public int onNotificationChanged(@NonNull OpenNotification n,@NonNull OpenNotification old){
  NotificationData dataOld=old.getNotificationData();
  NotificationData dataNew=n.getNotificationData();
  if (dataNew.number == dataOld.number && TextUtils.equals(dataNew.titleText,dataOld.titleText) && TextUtils.equals(dataNew.messageText,dataOld.messageText) && TextUtils.equals(dataNew.infoText,dataOld.infoText)) {
    n.getNotificationData().markAsRead(old.getNotificationData().isRead);
    if (!n.isMine()) {
      notifyListeners(n,EVENT_CHANGED_SPAM);
      return RESULT_SPAM;
    }
  }
  notifyListeners(n,EVENT_CHANGED);
  return RESULT_SUCCESS;
}","@Override public int onNotificationChanged(@NonNull OpenNotification n,@NonNull OpenNotification old){
  NotificationData dataOld=old.getNotificationData();
  NotificationData dataNew=n.getNotificationData();
  if (dataNew.number == dataOld.number && TextUtils.equals(dataNew.titleText,dataOld.titleText) && TextUtils.equals(dataNew.titleBigText,dataOld.titleBigText) && TextUtils.equals(dataNew.messageText,dataOld.messageText) && TextUtils.equals(dataNew.infoText,dataOld.infoText)) {
    n.getNotificationData().markAsRead(old.getNotificationData().isRead);
    if (!n.isMine()) {
      notifyListeners(n,EVENT_CHANGED_SPAM);
      return RESULT_SPAM;
    }
  }
  notifyListeners(n,EVENT_CHANGED);
  return RESULT_SUCCESS;
}"
8928,"/** 
 * Returns   {@code false} if the notification doesn't fitthe requirements (such as not ongoing and clearable).
 */
private boolean isValidForLocal(@NonNull OpenNotification o){
  AppConfig config=mBlacklist.getAppConfig(o.getPackageName());
  if (config.isHidden()) {
    return false;
  }
  if (!o.isClearable() && !config.isNonClearableEnabled()) {
    return false;
  }
  if (o.getNotification().priority <= Notification.PRIORITY_LOW && !mConfig.isLowPriorityNotificationsAllowed()) {
    return false;
  }
  NotificationData data=o.getNotificationData();
  return !(TextUtils.isEmpty(data.titleText) && TextUtils.isEmpty(data.getMergedMessage()) && TextUtils.isEmpty(data.infoText));
}","/** 
 * Returns   {@code false} if the notification doesn't fitthe requirements (such as not ongoing and clearable).
 */
private boolean isValidForLocal(@NonNull OpenNotification o){
  AppConfig config=mBlacklist.getAppConfig(o.getPackageName());
  if (config.isHidden()) {
    return false;
  }
  if (!o.isClearable() && !config.isNonClearableEnabled()) {
    return false;
  }
  if (o.getNotification().priority <= Notification.PRIORITY_LOW && !mConfig.isLowPriorityNotificationsAllowed()) {
    return false;
  }
  NotificationData data=o.getNotificationData();
  return !(TextUtils.isEmpty(data.titleText) && TextUtils.isEmpty(data.titleBigText) && TextUtils.isEmpty(data.messageText)&& TextUtils.isEmpty(data.infoText)&& data.messageTextLines == null);
}"
8929,"@SuppressLint(""String_Node_Str"") public NotificationData loadTexts(Context context,OpenNotification openNotification,NotificationData data){
  while (true) {
    final Notification n=openNotification.getNotification();
    final Bundle extras=getExtras(n);
    if (extras != null) {
      data.titleText=extras.getCharSequence(Notification.EXTRA_TITLE_BIG);
      if (data.titleText == null) {
        data.titleText=extras.getCharSequence(Notification.EXTRA_TITLE);
      }
      data.infoText=extras.getCharSequence(Notification.EXTRA_INFO_TEXT);
      data.subText=extras.getCharSequence(Notification.EXTRA_SUB_TEXT);
      data.summaryText=extras.getCharSequence(Notification.EXTRA_SUMMARY_TEXT);
      data.messageText=Utils.removeSpaces(extras.getCharSequence(Notification.EXTRA_TEXT));
      CharSequence[] messageTextLines=extras.getCharSequenceArray(Notification.EXTRA_TEXT_LINES);
      if (messageTextLines != null) {
        ArrayList<CharSequence> messageTextList=new ArrayList<>();
        for (        CharSequence msg : messageTextLines) {
          msg=Utils.removeSpaces(msg);
          if (!TextUtils.isEmpty(msg)) {
            messageTextList.add(msg);
          }
        }
        messageTextLines=messageTextList.toArray(new CharSequence[messageTextList.size()]);
        data.messageTextLines=messageTextLines;
      }
    }
    final Context contextNotify=NotificationUtils.createContext(context,openNotification);
    final RemoteViews rvs=n.bigContentView == null ? n.contentView : n.bigContentView;
    if (rvs == null) {
      break;
    }
    LayoutInflater inflater=(LayoutInflater)contextNotify.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    ViewGroup view=(ViewGroup)inflater.inflate(rvs.getLayoutId(),null);
    if (view == null) {
      break;
    }
    try {
      rvs.reapply(contextNotify,view);
    }
 catch (    Exception e) {
      break;
    }
    ArrayList<TextView> textViews=new RecursiveFinder<>(TextView.class).expand(view);
    removeClickableViews(textViews);
    removeSubtextViews(context,textViews);
    removeActionViews(data.actions,textViews);
    if (textViews.size() == 0)     break;
    TextView title=findTitleTextView(textViews);
    textViews.remove(title);
    data.titleText=title.getText();
    if (textViews.size() == 0)     break;
    int length=textViews.size();
    CharSequence[] messages=new CharSequence[length];
    for (int i=0; i < length; i++) {
      messages[i]=textViews.get(i).getText();
    }
    data.messageText=Utils.mergeLargeMessage(messages);
    break;
  }
  return data;
}","@SuppressLint(""String_Node_Str"") public NotificationData loadTexts(Context context,OpenNotification openNotification,NotificationData data){
  final Notification n=openNotification.getNotification();
  final Bundle extras=getExtras(n);
  if (extras != null)   loadFromExtras(data,extras);
  if (TextUtils.isEmpty(data.titleText) && TextUtils.isEmpty(data.titleBigText) && TextUtils.isEmpty(data.messageText)&& data.messageTextLines == null) {
    loadFromView(data,context,openNotification);
  }
  return data;
}"
8930,"@SuppressLint(""String_Node_Str"") private Bundle getExtras(Notification notification){
  if (Device.hasKitKatApi()) {
    return notification.extras;
  }
  try {
    Field field=Notification.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    return (Bundle)field.get(notification);
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"");
    return null;
  }
}","/** 
 * Gets a bundle with additional data from notification.
 */
@Nullable @SuppressLint(""String_Node_Str"") private Bundle getExtras(Notification notification){
  if (Device.hasKitKatApi()) {
    return notification.extras;
  }
  try {
    Field field=notification.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    return (Bundle)field.get(notification);
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"");
    return null;
  }
}"
8931,"/** 
 * {@inheritDoc}
 */
@Override public void setNotification(OpenNotification osbn){
  mNotification=osbn;
  if (osbn == null) {
    return;
  }
  Notification n=osbn.getNotification();
  NotificationData data=osbn.getNotificationData();
  Bitmap bitmap=data.getCircleIcon();
  if (bitmap == null)   bitmap=n.largeIcon;
  if (bitmap != null) {
    if (bitmap == n.largeIcon && BitmapUtils.hasTransparentCorners(bitmap) && Color.red(data.dominantColor) > 127 && Color.blue(data.dominantColor) > 127 && Color.green(data.dominantColor) > 127 && hasDarkTextColor(mTitleTextView)) {
      mIcon.setColorFilter(mColorFilterDark);
    }
 else {
      mIcon.setColorFilter(null);
    }
    mIcon.setNotification(null);
    mIcon.setImageBitmap(bitmap);
    setSmallIcon(osbn);
  }
 else {
    mIcon.setNotification(osbn);
    mIcon.setColorFilter(hasDarkTextColor(mTitleTextView) ? mColorFilterDark : null);
    setSmallIcon(null);
  }
  mTitleTextView.setText(data.titleText);
  mSubtextTextView.setText(data.infoText == null ? data.subText : data.infoText);
  mWhenTextView.setText(DateUtils.formatDateTime(getContext(),n.when,DateUtils.FORMAT_SHOW_TIME));
  setActions(osbn);
  setMessageLines(data.messageTextLines == null ? data.messageText == null ? null : new CharSequence[]{data.messageText} : data.messageTextLines);
}","/** 
 * {@inheritDoc}
 */
@Override public void setNotification(OpenNotification osbn){
  mNotification=osbn;
  if (osbn == null) {
    return;
  }
  Notification n=osbn.getNotification();
  NotificationData data=osbn.getNotificationData();
  Bitmap bitmap=data.getCircleIcon();
  if (bitmap == null)   bitmap=n.largeIcon;
  if (bitmap != null) {
    if (bitmap == n.largeIcon && BitmapUtils.hasTransparentCorners(bitmap) && Color.red(data.dominantColor) > 127 && Color.blue(data.dominantColor) > 127 && Color.green(data.dominantColor) > 127 && hasDarkTextColor(mTitleTextView)) {
      mIcon.setColorFilter(mColorFilterDark);
    }
 else {
      mIcon.setColorFilter(null);
    }
    mIcon.setNotification(null);
    mIcon.setImageBitmap(bitmap);
    setSmallIcon(osbn);
  }
 else {
    mIcon.setNotification(osbn);
    mIcon.setColorFilter(hasDarkTextColor(mTitleTextView) ? mColorFilterDark : null);
    setSmallIcon(null);
  }
  mTitleTextView.setText(data.titleBigText == null ? data.titleText : data.titleBigText);
  mSubtextTextView.setText(data.infoText == null ? data.subText : data.infoText);
  mWhenTextView.setText(DateUtils.formatDateTime(getContext(),n.when,DateUtils.FORMAT_SHOW_TIME));
  setActions(osbn);
  setMessageLines(data.messageTextLines == null ? data.messageText == null ? null : new CharSequence[]{data.messageText} : data.messageTextLines);
}"
8932,"public BatteryMeterView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mContext=context;
  TypedArray arr=context.obtainStyledAttributes(attrs,R.styleable.BatteryMeterView,defStyle,0);
  mBatteryHeight=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_height,0);
  mBatteryWidth=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_width,0);
  mBatteryPadding=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_padding,0);
  setPadding(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  final Resources res=context.getResources();
  TypedArray levels=res.obtainTypedArray(R.array.batterymeter_color_levels);
  TypedArray colors=res.obtainTypedArray(R.array.batterymeter_color_values);
  final int n=levels.length();
  mColors=new int[2 * n];
  for (int i=0; i < n; i++) {
    mColors[2 * i]=levels.getInt(i,0);
    mColors[2 * i + 1]=colors.getColor(i,0);
  }
  levels.recycle();
  colors.recycle();
  mChargeColor=getResources().getColor(R.color.batterymeter_charge_color);
  mBatteryFormat=getResources().getString(R.string.batterymeter_precise);
  mWarningString=context.getString(R.string.batterymeter_very_low_overlay_symbol);
  setMode(BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT);
  mBatteryDrawable.onSizeChanged(mBatteryWidth,mBatteryHeight,0,0);
  setLayerType(View.LAYER_TYPE_SOFTWARE,null);
}","public BatteryMeterView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mContext=context;
  TypedArray arr=context.obtainStyledAttributes(attrs,R.styleable.BatteryMeterView,defStyle,0);
  mBatteryHeight=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_height,0);
  mBatteryWidth=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_width,0);
  mBatteryPadding=arr.getDimensionPixelSize(R.styleable.BatteryMeterView_battery_padding,0);
  setPadding(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  final Resources res=context.getResources();
  if (!isInEditMode()) {
    TypedArray levels=res.obtainTypedArray(R.array.batterymeter_color_levels);
    TypedArray colors=res.obtainTypedArray(R.array.batterymeter_color_values);
    final int n=levels.length();
    mColors=new int[2 * n];
    for (int i=0; i < n; i++) {
      mColors[2 * i]=levels.getInt(i,0);
      mColors[2 * i + 1]=colors.getColor(i,0);
    }
    levels.recycle();
    colors.recycle();
  }
 else {
    mColors=new int[]{4,res.getColor(R.color.batterymeter_critical),15,res.getColor(R.color.batterymeter_low),100,res.getColor(R.color.batterymeter_full)};
  }
  mChargeColor=getResources().getColor(R.color.batterymeter_charge_color);
  mBatteryFormat=getResources().getString(R.string.batterymeter_precise);
  mWarningString=context.getString(R.string.batterymeter_very_low_overlay_symbol);
  setMode(BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT);
  mBatteryDrawable.onSizeChanged(mBatteryWidth,mBatteryHeight,0,0);
  setLayerType(View.LAYER_TYPE_SOFTWARE,null);
}"
8933,"private float[] loadBoltPoints(Resources res){
  final int[] pts=res.getIntArray(getBoltPointsArrayResource());
  int maxX=0, maxY=0;
  for (int i=0; i < pts.length; i+=2) {
    maxX=Math.max(maxX,pts[i]);
    maxY=Math.max(maxY,pts[i + 1]);
  }
  final float[] ptsF=new float[pts.length];
  for (int i=0; i < pts.length; i+=2) {
    ptsF[i]=(float)pts[i] / maxX;
    ptsF[i + 1]=(float)pts[i + 1] / maxY;
  }
  return ptsF;
}","private float[] loadBoltPoints(Resources res){
  if (!isInEditMode()) {
    final int[] pts=res.getIntArray(getBoltPointsArrayResource());
    int maxX=0, maxY=0;
    for (int i=0; i < pts.length; i+=2) {
      maxX=Math.max(maxX,pts[i]);
      maxY=Math.max(maxY,pts[i + 1]);
    }
    final float[] ptsF=new float[pts.length];
    for (int i=0; i < pts.length; i+=2) {
      ptsF[i]=(float)pts[i] / maxX;
      ptsF[i + 1]=(float)pts[i + 1] / maxY;
    }
    return ptsF;
  }
 else {
    return new float[]{0,0,1,1};
  }
}"
8934,"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  Config config=Config.getInstance();
  config.unregisterListener(this);
}","@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  if (!isInEditMode()) {
    Config config=Config.getInstance();
    config.unregisterListener(this);
  }
}"
8935,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  Config config=Config.getInstance();
  config.registerListener(this);
  updateBatteryVisibility();
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (!isInEditMode()) {
    Config config=Config.getInstance();
    config.registerListener(this);
  }
  updateBatteryVisibility();
}"
8936,"/** 
 * Turns screen off and sends a test notification.
 * @param fake {@code true} if it simply starts {@link AcDisplayActivity},  {@code false} if it uses notification
 */
private void startAcDisplayTest(boolean fake){
  if (fake) {
    sendTestNotification();
    startActivity(new Intent(this,AcDisplayActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION));
    return;
  }
  int delay=getResources().getInteger(R.integer.config_test_notification_delay);
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakeLock.acquire(delay);
  try {
    DevicePolicyManager dpm=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
    dpm.lockNow();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        sendTestNotification();
      }
    }
,delay);
  }
 catch (  SecurityException e) {
    Log.wtf(TAG,""String_Node_Str"");
    wakeLock.release();
  }
}","/** 
 * Turns screen off and sends a test notification.
 * @param fake {@code true} if it simply starts {@link AcDisplayActivity},  {@code false} if it uses notification
 */
private void startAcDisplayTest(boolean fake){
  if (fake) {
    sendTestNotification();
    startActivity(new Intent(this,AcDisplayActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(KeyguardActivity.EXTRA_FINISH_ON_SCREEN_OFF,!mConfig.isKeyguardEnabled()));
    return;
  }
  int delay=getResources().getInteger(R.integer.config_test_notification_delay);
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakeLock.acquire(delay);
  try {
    DevicePolicyManager dpm=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
    dpm.lockNow();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        sendTestNotification();
      }
    }
,delay);
  }
 catch (  SecurityException e) {
    Log.wtf(TAG,""String_Node_Str"");
    wakeLock.release();
  }
}"
8937,"/** 
 * {@inheritDoc}
 */
@Override protected void onWidgetDismiss(Widget widget){
  if (widget instanceof NotifyWidget) {
    NotificationPresenter np=NotificationPresenter.getInstance();
    if (np.getList().size() <= 1 && mActivity.getConfig().isScreenOffAfterLastNotify()) {
      mActivity.lock();
    }
  }
  super.onWidgetDismiss(widget);
}","/** 
 * {@inheritDoc}
 */
@Override protected void onWidgetDismiss(Widget widget){
  boolean lock=false;
  if (widget instanceof NotifyWidget) {
    NotificationPresenter np=NotificationPresenter.getInstance();
    lock=np.getList().size() <= 1 && mActivity.getConfig().isScreenOffAfterLastNotify();
  }
  super.onWidgetDismiss(widget);
  if (lock) {
    mActivity.lock();
  }
}"
8938,"public static void startService(Context context,Class<? extends ChildService> clazz){
synchronized (monitor) {
    if (sCreated) {
      Intent intent=new Intent(ACTION_ADD_SERVICE);
      intent.putExtra(EXTRA_SERVICE_CLASS,clazz);
      LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
 else     if (!sServiceMap.containsKey(clazz)) {
      try {
        ChildService child=clazz.newInstance();
        sServiceMap.put(clazz,child);
      }
 catch (      InstantiationException|IllegalAccessException e) {
        throw new RuntimeException(e.getMessage());
      }
      context.startService(new Intent(context,BathService.class));
    }
  }
}","public static void startService(Context context,Class<? extends ChildService> clazz){
synchronized (monitor) {
    if (sCreated) {
      Intent intent=new Intent(ACTION_ADD_SERVICE);
      intent.putExtra(EXTRA_SERVICE_CLASS,clazz);
      LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
 else     if (!sServiceMap.containsKey(clazz)) {
      try {
        sServiceMap.put(clazz,clazz.newInstance());
        context.startService(new Intent(context,BathService.class));
      }
 catch (      InstantiationException|IllegalAccessException e) {
        throw new RuntimeException(e.getMessage());
      }
    }
  }
}"
8939,"public static void stopService(Context context,Class<? extends ChildService> clazz){
synchronized (monitor) {
    if (sCreated) {
      Intent intent=new Intent(ACTION_REMOVE_SERVICE);
      intent.putExtra(EXTRA_SERVICE_CLASS,clazz);
      LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
 else     if (sServiceMap.containsKey(clazz)) {
      ChildService child=sServiceMap.remove(clazz);
      child.onDestroy();
    }
  }
}","public static void stopService(Context context,Class<? extends ChildService> clazz){
synchronized (monitor) {
    if (sCreated) {
      Intent intent=new Intent(ACTION_REMOVE_SERVICE);
      intent.putExtra(EXTRA_SERVICE_CLASS,clazz);
      LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
 else {
      sServiceMap.remove(clazz);
    }
  }
}"
8940,"@Override public void onReceive(Context context,Intent intent){
  boolean add=false;
switch (intent.getAction()) {
case ACTION_ADD_SERVICE:
    add=true;
case ACTION_REMOVE_SERVICE:
  break;
default :
return;
}
synchronized (monitor) {
Class clazz=(Class)intent.getSerializableExtra(EXTRA_SERVICE_CLASS);
boolean containsClazz=sServiceMap.containsKey(clazz);
if (containsClazz == add) {
if (Build.DEBUG) Log.e(TAG,""String_Node_Str"");
return;
}
if (add) {
try {
  ChildService child=(ChildService)clazz.newInstance();
  child.setContext(BathService.this);
  child.onCreate();
  sServiceMap.put(clazz,child);
}
 catch (InstantiationException|IllegalAccessException e) {
  throw new RuntimeException(e.getMessage());
}
updateNotification();
return;
}
ChildService child=sServiceMap.remove(clazz);
child.onDestroy();
if (sServiceMap.isEmpty()) {
BathService.this.stopSelf();
}
 else {
updateNotification();
}
}
}","@Override public void onReceive(Context context,Intent intent){
  boolean add=false;
switch (intent.getAction()) {
case ACTION_ADD_SERVICE:
    add=true;
case ACTION_REMOVE_SERVICE:
  break;
default :
return;
}
synchronized (monitor) {
Class clazz=(Class)intent.getSerializableExtra(EXTRA_SERVICE_CLASS);
boolean containsClazz=mMap.containsKey(clazz);
if (containsClazz == add) {
return;
}
if (add) {
try {
  ChildService child=(ChildService)clazz.newInstance();
  child.setContext(BathService.this);
  child.onCreate();
  mMap.put(clazz,child);
}
 catch (InstantiationException|IllegalAccessException e) {
  throw new RuntimeException(e.getMessage());
}
updateNotification();
return;
}
ChildService child=mMap.remove(clazz);
child.onDestroy();
if (mMap.isEmpty()) {
stopSelf();
}
 else {
updateNotification();
}
}
}"
8941,"private Notification buildNotification(){
  boolean empty=true;
  StringBuilder builder=new StringBuilder();
  String divider=getString(R.string.settings_multi_list_divider);
  Enumeration<ChildService> elements=sServiceMap.elements();
  while (elements.hasMoreElements()) {
    if (!empty) {
      builder.append(divider);
    }
    ChildService child=elements.nextElement();
    builder.append(child.getName());
    empty=false;
  }
  String contentText=builder.toString();
  contentText=contentText.charAt(0) + contentText.substring(1).toLowerCase();
  PendingIntent pendingIntent=PendingIntent.getActivity(this,App.ID_NOTIFY_BATH,new Intent(this,MainActivity.class),PendingIntent.FLAG_UPDATE_CURRENT);
  return new Notification.Builder(this).setContentTitle(getString(R.string.service_bath)).setContentText(contentText).setContentIntent(pendingIntent).setSmallIcon(R.drawable.stat_acdisplay).setPriority(Notification.PRIORITY_MIN).build();
}","/** 
 * <p>NOT SYNCHRONIZED!</p> Builds fresh notification with all   {@link ChildService children services}'s  {@link com.achep.acdisplay.services.BathService.ChildService#getLabel() labels} in.Content intent starts  {@link com.achep.acdisplay.activities.MainActivity}.
 */
private Notification buildNotification(){
  boolean empty=true;
  StringBuilder builder=new StringBuilder();
  String divider=getString(R.string.settings_multi_list_divider);
  for (  ChildService child : mMap.values()) {
    if (!empty) {
      builder.append(divider);
    }
    builder.append(child.getLabel());
    empty=false;
  }
  String contentText=builder.toString();
  if (contentText.length() > 0) {
    contentText=contentText.charAt(0) + contentText.substring(1).toLowerCase();
  }
  PendingIntent pendingIntent=PendingIntent.getActivity(this,App.ID_NOTIFY_BATH,new Intent(this,MainActivity.class),PendingIntent.FLAG_UPDATE_CURRENT);
  return new Notification.Builder(this).setContentTitle(getString(R.string.service_bath)).setContentText(contentText).setContentIntent(pendingIntent).setSmallIcon(R.drawable.stat_acdisplay).setPriority(Notification.PRIORITY_MIN).build();
}"
8942,"public ChildService(){
  if (Build.DEBUG)   Log.d(TAG,""String_Node_Str"");
}","public ChildService(){
  if (Build.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str"");
  }
}"
8943,"@Override public void onCreate(){
  super.onCreate();
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_SCREEN_ON);
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  intentFilter.setPriority(Integer.MAX_VALUE);
  registerReceiver(mReceiver,intentFilter);
  int notificationId=NotificationIds.LOCKSCREEN_NOTIFICATION;
  PendingIntent pendingIntent=PendingIntent.getActivity(this,notificationId,new Intent(this,Settings.LockscreenSettingsActivity.class),PendingIntent.FLAG_UPDATE_CURRENT);
  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_lock).setContentTitle(getString(R.string.service_lockscreen,getString(R.string.app_name))).setContentText(getString(R.string.service_lockscreen_text)).setPriority(Notification.PRIORITY_MIN).setContentIntent(pendingIntent).setOngoing(true).build();
  startForeground(notificationId,notification);
}","@Override public void onCreate(){
  super.onCreate();
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_SCREEN_ON);
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  intentFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY - 1);
  registerReceiver(mReceiver,intentFilter);
  int notificationId=NotificationIds.LOCKSCREEN_NOTIFICATION;
  Intent intent=new Intent(this,Settings.LockscreenSettingsActivity.class);
  PendingIntent pendingIntent=PendingIntent.getActivity(this,notificationId,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_lock).setContentTitle(getString(R.string.service_lockscreen,getString(R.string.app_name))).setContentText(getString(R.string.service_lockscreen_text)).setPriority(Notification.PRIORITY_MIN).setContentIntent(pendingIntent).setOngoing(true).build();
  startForeground(notificationId,notification);
}"
8944,"private void startGui(){
  startActivity(new Intent(Intent.ACTION_MAIN,null).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS | Intent.FLAG_ACTIVITY_NO_USER_ACTION| Intent.FLAG_ACTIVITY_NO_ANIMATION| Intent.FLAG_FROM_BACKGROUND).setClass(this,AcDisplayActivity.class));
}","private void startGui(){
  startActivity(new Intent(this,AcDisplayActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS | Intent.FLAG_ACTIVITY_NO_ANIMATION));
}"
8945,"private void stopMonitoringActivities(){
  if (mActivityMonitorThread != null) {
    if (Project.DEBUG)     Log.d(TAG,""String_Node_Str"");
    mActivityMonitorThread.running=false;
  }
}","private void stopMonitoringActivities(){
  if (mActivityMonitorThread != null) {
    if (Project.DEBUG)     Log.d(TAG,""String_Node_Str"");
    mActivityMonitorThread.running=false;
    mActivityMonitorThread.interrupt();
  }
}"
8946,"@Override public void run(){
  super.run();
  while (running) {
    monitor();
    try {
      Thread.sleep(MONITORING_PERIOD);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  super.run();
  while (running) {
    monitor();
    try {
      Thread.sleep(MONITORING_PERIOD);
    }
 catch (    InterruptedException e) {
    }
  }
}"
8947,"/** 
 * Checks what activity is on the latest.
 */
public synchronized void monitor(){
}","/** 
 * Checks what activity is the latest.
 */
public synchronized void monitor(){
}"
8948,"/** 
 * @deprecated hopefully the bug with it is fixed now, so no need to use it. Just in cause...
 */
@Deprecated public static void ignoreCurrentTurningOn(){
  sIgnoreTillTime=SystemClock.elapsedRealtime() + 2000;
}","/** 
 * @deprecated hopefully the bug with it is fixed now, so no need to use it. Just in case...
 */
@Deprecated public static void ignoreCurrentTurningOn(){
  sIgnoreTillTime=SystemClock.elapsedRealtime() + 2000;
}"
8949,"@Test(dataProvider=""String_Node_Str"") public void referenceLink(@NotNull ReferenceLink referenceLink,@NotNull ReferenceLink.Lang lang) throws IOException {
  try (InputStream stream=new URL(referenceLink.getLink(lang)).openStream()){
    ByteStreams.toByteArray(stream);
  }
 }","@Test(dataProvider=""String_Node_Str"") public void referenceLink(@NotNull ReferenceLink referenceLink,@NotNull ReferenceLink.Lang lang) throws IOException {
  if (System.getenv(""String_Node_Str"") != null)   return;
  try (InputStream stream=new URL(referenceLink.getLink(lang)).openStream()){
    ByteStreams.toByteArray(stream);
  }
 }"
8950,"protected void sendResponse(@NotNull SessionContext context,@NotNull String path,int rev) throws IOException, SVNException {
  final SvnServerWriter writer=getWriter(context);
  sendDelta(context,path,rev);
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
  final SvnServerParser parser=context.getParser();
  parser.readToken(ListBeginToken.class);
  final String clientStatus=parser.readText();
switch (clientStatus) {
case ""String_Node_Str"":
{
      parser.readToken(ListBeginToken.class);
      parser.readToken(ListBeginToken.class);
      final int errorCode=parser.readNumber();
      final String errorMessage=parser.readText();
      final String errorFile=parser.readText();
      final int errorLine=parser.readNumber();
      parser.readToken(ListEndToken.class);
      parser.readToken(ListEndToken.class);
      parser.readToken(ListEndToken.class);
      if (errorFile.isEmpty()) {
        log.error(""String_Node_Str"",errorCode,errorMessage);
      }
 else {
        log.error(""String_Node_Str"",errorFile,errorLine,errorCode,errorMessage);
      }
      writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
      writer.listBegin().word(""String_Node_Str"").listBegin().listBegin().number(errorCode).string(errorMessage).string(errorFile).number(errorLine).listEnd().listEnd().listEnd();
      writer.listBegin();
      break;
    }
case ""String_Node_Str"":
{
    parser.skipItems();
    writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
    break;
  }
default :
{
  log.error(""String_Node_Str"",clientStatus);
  throw new EOFException(""String_Node_Str"");
}
}
}","protected void sendResponse(@NotNull SessionContext context,@NotNull String path,int rev) throws IOException, SVNException {
  final SvnServerWriter writer=getWriter(context);
  sendDelta(context,path,rev);
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
  final SvnServerParser parser=context.getParser();
  parser.readToken(ListBeginToken.class);
  final String clientStatus=parser.readText();
switch (clientStatus) {
case ""String_Node_Str"":
{
      parser.readToken(ListBeginToken.class);
      final List<FailureInfo> failures=new ArrayList<>();
      while (parser.readItem(ListBeginToken.class) != null) {
        final FailureInfo failure=new FailureInfo(parser);
        if (failure.errorFile.isEmpty()) {
          log.error(""String_Node_Str"",failure.errorCode,failure.errorMessage);
        }
 else {
          log.error(""String_Node_Str"",failure.errorFile,failure.errorLine,failure.errorCode,failure.errorMessage);
        }
        failures.add(failure);
      }
      parser.readToken(ListEndToken.class);
      writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
      writer.listBegin().word(""String_Node_Str"").listBegin();
      for (      FailureInfo failure : failures) {
        failure.write(writer);
      }
      writer.listEnd().listEnd();
      writer.listBegin();
      break;
    }
case ""String_Node_Str"":
{
    parser.skipItems();
    writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
    break;
  }
default :
{
  log.error(""String_Node_Str"",clientStatus);
  throw new EOFException(""String_Node_Str"");
}
}
}"
8951,"/** 
 * Remove redundant pattern parts and make patterns more simple.
 * @param tokens Original modifiable list.
 * @return Return tokens,
 */
@NotNull public static List<String> normalizePattern(@NotNull List<String> tokens){
  if (tokens.size() == 1) {
    if (tokens.get(0).equals(""String_Node_Str"")) {
      tokens.set(0,""String_Node_Str"");
    }
 else {
      tokens.add(0,""String_Node_Str"");
    }
  }
  if (tokens.size() == 0 || !tokens.get(0).equals(""String_Node_Str"")) {
    tokens.add(0,""String_Node_Str"");
  }
  int index=1;
  while (index < tokens.size()) {
    final String thisToken=tokens.get(index);
    final String prevToken=tokens.get(index - 1);
    if (thisToken.equals(""String_Node_Str"")) {
      tokens.remove(index);
      continue;
    }
    if (thisToken.equals(""String_Node_Str"") && prevToken.equals(""String_Node_Str"")) {
      tokens.remove(index);
      continue;
    }
    if ((!thisToken.equals(""String_Node_Str"")) && thisToken.startsWith(""String_Node_Str"")) {
      tokens.add(index,""String_Node_Str"");
      tokens.set(index + 1,thisToken.substring(1));
      continue;
    }
    if (thisToken.equals(""String_Node_Str"") && prevToken.equals(""String_Node_Str"")) {
      tokens.set(index - 1,""String_Node_Str"");
      tokens.set(index,""String_Node_Str"");
      index--;
      continue;
    }
    index++;
  }
  while (!tokens.isEmpty()) {
    final String token=tokens.get(tokens.size() - 1);
    if (token.equals(""String_Node_Str"") || token.equals(""String_Node_Str"")) {
      tokens.remove(tokens.size() - 1);
    }
 else {
      break;
    }
  }
  return tokens;
}","/** 
 * Remove redundant pattern parts and make patterns more simple.
 * @param tokens Original modifiable list.
 * @return Return tokens,
 */
@NotNull public static List<String> normalizePattern(@NotNull List<String> tokens){
  if (tokens.size() == 1 && !tokens.get(0).contains(""String_Node_Str"")) {
    tokens.add(0,""String_Node_Str"");
  }
  if (tokens.size() == 0 || !tokens.get(0).equals(""String_Node_Str"")) {
    tokens.add(0,""String_Node_Str"");
  }
  int index=1;
  while (index < tokens.size()) {
    final String thisToken=tokens.get(index);
    final String prevToken=tokens.get(index - 1);
    if (thisToken.equals(""String_Node_Str"")) {
      tokens.remove(index);
      continue;
    }
    if (thisToken.equals(""String_Node_Str"") && prevToken.equals(""String_Node_Str"")) {
      tokens.remove(index);
      continue;
    }
    if ((!thisToken.equals(""String_Node_Str"")) && thisToken.startsWith(""String_Node_Str"")) {
      tokens.add(index,""String_Node_Str"");
      tokens.set(index + 1,thisToken.substring(1));
      continue;
    }
    if (thisToken.equals(""String_Node_Str"") && prevToken.equals(""String_Node_Str"")) {
      tokens.set(index - 1,""String_Node_Str"");
      tokens.set(index,""String_Node_Str"");
      index--;
      continue;
    }
    index++;
  }
  while (!tokens.isEmpty()) {
    final String token=tokens.get(tokens.size() - 1);
    if (token.equals(""String_Node_Str"") || token.equals(""String_Node_Str"")) {
      tokens.remove(tokens.size() - 1);
    }
 else {
      break;
    }
  }
  return tokens;
}"
8952,"@Override public boolean isMatch(@NotNull String name,boolean isDir){
  return isDir;
}","@Override public boolean isMatch(@NotNull String name,boolean isDir){
  return true;
}"
8953,"@Nullable @Override public PathMatcher createChild(@NotNull String name,boolean isDir){
  if (matcher.isMatch(name,isDir)) {
    return AlwaysMatcher.INSTANCE;
  }
  return this;
}","@Nullable @Override public PathMatcher createChild(@NotNull String name,boolean isDir){
  if (matcher.isMatch(name,isDir)) {
    return AlwaysMatcher.INSTANCE;
  }
  if (!isDir) {
    return null;
  }
  return this;
}"
8954,"@Nullable @Override public PathMatcher createChild(@NotNull String name,boolean isDir){
  final int[] childs=new int[indexes.length * 2];
  boolean changed=false;
  boolean childMatch=false;
  int count=0;
  for (  int index : indexes) {
    if (nameMatchers[index].isMatch(name,isDir)) {
      if (nameMatchers[index].isRecursive()) {
        childs[count++]=index;
        if (index + 1 < nameMatchers.length && nameMatchers[index + 1].isMatch(name,isDir)) {
          if (index + 2 == nameMatchers.length) {
            return AlwaysMatcher.INSTANCE;
          }
          childs[count++]=index + 2;
          changed=true;
        }
      }
 else {
        if (index + 1 == nameMatchers.length) {
          return AlwaysMatcher.INSTANCE;
        }
 else         if (index + 2 == nameMatchers.length && nameMatchers[index + 1].isRecursive()) {
          childMatch=true;
        }
        childs[count++]=index + 1;
        changed=true;
      }
    }
 else {
      changed=true;
    }
  }
  if (!changed) {
    return this;
  }
  return count == 0 ? null : new RecursivePathMatcher(nameMatchers,Arrays.copyOf(childs,count),childMatch);
}","@Nullable @Override public PathMatcher createChild(@NotNull String name,boolean isDir){
  final int[] childs=new int[indexes.length * 2];
  boolean changed=false;
  int count=0;
  for (  int index : indexes) {
    if (nameMatchers[index].isMatch(name,isDir)) {
      if (nameMatchers[index].isRecursive()) {
        childs[count++]=index;
        if (nameMatchers[index + 1].isMatch(name,isDir)) {
          if (index + 2 == nameMatchers.length) {
            return AlwaysMatcher.INSTANCE;
          }
          childs[count++]=index + 2;
          changed=true;
        }
      }
 else {
        if (index + 1 == nameMatchers.length) {
          return AlwaysMatcher.INSTANCE;
        }
        childs[count++]=index + 1;
        changed=true;
      }
    }
 else {
      changed=true;
    }
  }
  if (!isDir) {
    return null;
  }
  if (!changed) {
    return this;
  }
  return count == 0 ? null : new RecursivePathMatcher(nameMatchers,Arrays.copyOf(childs,count));
}"
8955,"private RecursivePathMatcher(@NotNull NameMatcher[] nameMatchers,@NotNull int[] indexes,boolean selfMatch){
  this.nameMatchers=nameMatchers;
  this.indexes=indexes;
  this.selfMatch=selfMatch;
}","private RecursivePathMatcher(@NotNull NameMatcher[] nameMatchers,@NotNull int[] indexes){
  this.nameMatchers=nameMatchers;
  this.indexes=indexes;
}"
8956,"@Override public boolean isMatch(){
  return selfMatch;
}","@Override public boolean isMatch(){
  return false;
}"
8957,"@DataProvider public static Object[][] normalizePatternData(){
  return new Object[][]{new Object[]{""String_Node_Str"",new String[0]},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}}};
}","@DataProvider public static Object[][] normalizePatternData(){
  return new Object[][]{new Object[]{""String_Node_Str"",new String[0]},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""}},new Object[]{""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}}};
}"
8958,"@DataProvider public static Object[][] pathMatcherData(){
  return new Object[][]{new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true}};
}","@DataProvider public static Object[][] pathMatcherData(){
  return new Object[][]{new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",null},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",false},new Object[]{""String_Node_Str"",""String_Node_Str"",true},new Object[]{""String_Node_Str"",""String_Node_Str"",true}};
}"
8959,"@NotNull public LfsStorage createStorage(@NotNull LocalContext context){
  File dataRoot=new File(context.getShared().getBasePath(),path);
  File metaRoot=isSaveMeta() ? new File(context.sure(GitLocation.class).getFullPath(),""String_Node_Str"") : null;
  return new LfsLocalStorage(getLayout(),dataRoot,metaRoot,isCompress());
}","@NotNull public LfsStorage createStorage(@NotNull LocalContext context){
  File dataRoot=ConfigHelper.joinPath(context.getShared().getBasePath(),getPath());
  File metaRoot=isSaveMeta() ? new File(context.sure(GitLocation.class).getFullPath(),""String_Node_Str"") : null;
  return new LfsLocalStorage(getLayout(),dataRoot,metaRoot,isCompress());
}"
8960,"public GitLabAccess(@NotNull LocalContext local,@NotNull GitLabMappingConfig config,int projectId){
  this.cache=CacheBuilder.newBuilder().maximumSize(config.getCacheMaximumSize()).expireAfterWrite(config.getCacheTimeSec(),TimeUnit.SECONDS).build(new CacheLoader<String,GitlabProject>(){
    @Override public GitlabProject load(    @NotNull String userId) throws Exception {
      final GitlabAPI api=GitLabContext.sure(local.getShared()).connect();
      String tailUrl=GitlabProject.URL + ""String_Node_Str"" + projectId;
      if (userId.isEmpty()) {
        tailUrl+=""String_Node_Str"" + userId;
      }
      return api.retrieve().to(tailUrl,GitlabProject.class);
    }
  }
);
}","public GitLabAccess(@NotNull LocalContext local,@NotNull GitLabMappingConfig config,int projectId){
  this.cache=CacheBuilder.newBuilder().maximumSize(config.getCacheMaximumSize()).expireAfterWrite(config.getCacheTimeSec(),TimeUnit.SECONDS).build(new CacheLoader<String,GitlabProject>(){
    @Override public GitlabProject load(    @NotNull String userId) throws Exception {
      final GitlabAPI api=GitLabContext.sure(local.getShared()).connect();
      String tailUrl=GitlabProject.URL + ""String_Node_Str"" + projectId;
      if (!userId.isEmpty()) {
        tailUrl+=""String_Node_Str"" + userId;
      }
      return api.retrieve().to(tailUrl,GitlabProject.class);
    }
  }
);
}"
8961,"@Override public GitlabProject load(@NotNull String userId) throws Exception {
  final GitlabAPI api=GitLabContext.sure(local.getShared()).connect();
  String tailUrl=GitlabProject.URL + ""String_Node_Str"" + projectId;
  if (userId.isEmpty()) {
    tailUrl+=""String_Node_Str"" + userId;
  }
  return api.retrieve().to(tailUrl,GitlabProject.class);
}","@Override public GitlabProject load(@NotNull String userId) throws Exception {
  final GitlabAPI api=GitLabContext.sure(local.getShared()).connect();
  String tailUrl=GitlabProject.URL + ""String_Node_Str"" + projectId;
  if (!userId.isEmpty()) {
    tailUrl+=""String_Node_Str"" + userId;
  }
  return api.retrieve().to(tailUrl,GitlabProject.class);
}"
8962,"private boolean isProjectOwner(@NotNull GitlabProject project,@NotNull User user){
  GitlabUser owner=project.getOwner();
  if (owner == null) {
    return false;
  }
  return owner.getId().toString().equals(user.getExternalId()) || owner.getEmail().equals(user.getEmail()) || owner.getName().equals(user.getUserName());
}","private boolean isProjectOwner(@NotNull GitlabProject project,@NotNull User user){
  if (user.isAnonymous()) {
    return false;
  }
  GitlabUser owner=project.getOwner();
  if (owner == null) {
    return false;
  }
  return owner.getId().toString().equals(user.getExternalId()) || owner.getName().equals(user.getUserName());
}"
8963,"@Override public void checkWrite(@NotNull User user,@Nullable String path) throws SVNException, IOException {
  if (user.isAnonymous()) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
  try {
    final GitlabProject project=getProjectViaSudo(user);
    if (isProjectOwner(project,user))     return;
    final GitlabPermission permissions=project.getPermissions();
    if (permissions != null) {
      if (hasAccess(permissions.getProjectAccess(),GitlabAccessLevel.Developer) || hasAccess(permissions.getProjectGroupAccess(),GitlabAccessLevel.Developer)) {
        return;
      }
    }
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
 catch (  FileNotFoundException ignored) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
}","@Override public void checkWrite(@NotNull User user,@Nullable String path) throws SVNException, IOException {
  if (user.isAnonymous()) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
  try {
    final GitlabProject project=getProjectViaSudo(user);
    if (isProjectOwner(project,user)) {
      return;
    }
    final GitlabPermission permissions=project.getPermissions();
    if (permissions != null) {
      if (hasAccess(permissions.getProjectAccess(),GitlabAccessLevel.Developer) || hasAccess(permissions.getProjectGroupAccess(),GitlabAccessLevel.Developer)) {
        return;
      }
    }
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
 catch (  FileNotFoundException ignored) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED,""String_Node_Str""));
  }
}"
8964,"@Override public GitLogPair next(){
  final int compare;
  if (newItem == null) {
    compare=-1;
  }
 else   if (oldItem == null) {
    compare=1;
  }
 else {
    final GitTreeEntry oldTreeEntry=oldItem.getTreeEntry();
    final GitTreeEntry newTreeEntry=newItem.getTreeEntry();
    if (oldTreeEntry == null || newTreeEntry == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    compare=oldItem.getTreeEntry().compareTo(newItem.getTreeEntry());
  }
  final GitFile oldEntry;
  final GitFile newEntry;
  if (compare <= 0) {
    oldEntry=oldItem;
    oldItem=nextItem(oldIter);
  }
 else {
    oldEntry=null;
  }
  if (compare >= 0) {
    newEntry=newItem;
    newItem=nextItem(newIter);
  }
 else {
    newEntry=null;
  }
  return new GitLogPair(oldEntry,newEntry);
}","@Override public GitLogPair next(){
  final int compare;
  if (newItem == null) {
    compare=-1;
  }
 else   if (oldItem == null) {
    compare=1;
  }
 else {
    final GitTreeEntry oldTreeEntry=oldItem.getTreeEntry();
    final GitTreeEntry newTreeEntry=newItem.getTreeEntry();
    if (oldTreeEntry == null || newTreeEntry == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    compare=oldTreeEntry.compareTo(newTreeEntry);
  }
  final GitFile oldEntry;
  final GitFile newEntry;
  if (compare <= 0) {
    oldEntry=oldItem;
    oldItem=nextItem(oldIter);
  }
 else {
    oldEntry=null;
  }
  if (compare >= 0) {
    newEntry=newItem;
    newItem=nextItem(newIter);
  }
 else {
    newEntry=null;
  }
  return new GitLogPair(oldEntry,newEntry);
}"
8965,"@NotNull private static Iterable<GitFile> getIterable(@Nullable GitFile tree) throws IOException, SVNException {
  return tree != null ? tree.getEntries() : Collections.emptyList();
}","@NotNull private static Iterable<GitFile> getIterable(@Nullable GitFile tree) throws IOException, SVNException {
  try {
    return tree != null ? tree.getEntries() : Collections.emptyList();
  }
 catch (  SvnForbiddenException e) {
    return Collections.emptyList();
  }
}"
8966,"public void serveClient(@NotNull Socket socket) throws IOException, SVNException {
  socket.setTcpNoDelay(true);
  final SvnServerWriter writer=new SvnServerWriter(new BufferedOutputStream(socket.getOutputStream()));
  final SvnServerParser parser=new SvnServerParser(socket.getInputStream());
  final ClientInfo clientInfo=exchangeCapabilities(parser,writer);
  final RepositoryInfo repositoryInfo=repositoryMapping.getRepository(clientInfo.getUrl());
  if (repositoryInfo == null) {
    BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_REPOS_NOT_FOUND,""String_Node_Str"" + clientInfo.getUrl()));
    return;
  }
  final User user=authenticate(parser,writer,repositoryInfo);
  log.info(""String_Node_Str"",user);
  final SessionContext context=new SessionContext(parser,writer,this,repositoryInfo,clientInfo,user);
  final VcsRepository repository=context.getRepository();
  repository.updateRevisions();
  sendAnnounce(writer,repositoryInfo);
  while (!isInterrupted()) {
    try {
      Step step=context.poll();
      if (step != null) {
        step.process(context);
        continue;
      }
      final SvnServerToken token=parser.readToken();
      if (token != ListBeginToken.instance) {
        throw new IOException(""String_Node_Str"" + token);
      }
      final String cmd=parser.readText();
      BaseCmd command=commands.get(cmd);
      if (command != null) {
        log.debug(""String_Node_Str"",cmd);
        Object param=MessageParser.parse(command.getArguments(),parser);
        parser.readToken(ListEndToken.class);
        command.process(context,param);
      }
 else {
        log.warn(""String_Node_Str"",cmd);
        BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_UNKNOWN_CMD,""String_Node_Str"" + cmd));
        parser.skipItems();
      }
    }
 catch (    SVNException e) {
      log.error(""String_Node_Str"",e);
      BaseCmd.sendError(writer,e.getErrorMessage());
    }
  }
}","public void serveClient(@NotNull Socket socket) throws IOException, SVNException {
  socket.setTcpNoDelay(true);
  final SvnServerWriter writer=new SvnServerWriter(new BufferedOutputStream(socket.getOutputStream()));
  final SvnServerParser parser=new SvnServerParser(socket.getInputStream());
  final ClientInfo clientInfo=exchangeCapabilities(parser,writer);
  final RepositoryInfo repositoryInfo=repositoryMapping.getRepository(clientInfo.getUrl());
  if (repositoryInfo == null) {
    BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_REPOS_NOT_FOUND,""String_Node_Str"" + clientInfo.getUrl()));
    return;
  }
  final User user=authenticate(parser,writer,repositoryInfo);
  log.info(""String_Node_Str"",user);
  final SessionContext context=new SessionContext(parser,writer,this,repositoryInfo,clientInfo,user);
  final VcsRepository repository=context.getRepository();
  repository.updateRevisions();
  sendAnnounce(writer,repositoryInfo);
  while (!isInterrupted()) {
    try {
      Step step=context.poll();
      if (step != null) {
        step.process(context);
        continue;
      }
      final SvnServerToken token=parser.readToken();
      if (token != ListBeginToken.instance) {
        throw new IOException(""String_Node_Str"" + token);
      }
      final String cmd=parser.readText();
      BaseCmd command=commands.get(cmd);
      if (command != null) {
        log.debug(""String_Node_Str"",cmd);
        Object param=MessageParser.parse(command.getArguments(),parser);
        parser.readToken(ListEndToken.class);
        command.process(context,param);
      }
 else {
        log.warn(""String_Node_Str"",cmd);
        BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_UNKNOWN_CMD,""String_Node_Str"" + cmd));
        parser.skipItems();
      }
    }
 catch (    SVNException e) {
      if (e.getErrorMessage().getErrorCode() == SVNErrorCode.RA_NOT_AUTHORIZED) {
        log.warn(""String_Node_Str"",e.getMessage());
      }
 else {
        log.error(""String_Node_Str"",e);
      }
      BaseCmd.sendError(writer,e.getErrorMessage());
    }
  }
}"
8967,"private void openFile(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.debug(""String_Node_Str"",args.name,rev);
  VcsFile vcsFile=parent.getEntry(StringHelper.baseName(args.name));
  final VcsDeltaConsumer deltaConsumer=writer.modifyFile(parent.entry,vcsFile.getFileName(),vcsFile);
  files.put(args.token,new FileUpdater(deltaConsumer));
  if (parent.head && (rev >= 0)) {
    checkUpToDate(vcsFile,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.saveFile(StringHelper.baseName(args.name),deltaConsumer,true));
}","private void openFile(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  context.checkWrite(StringHelper.joinPath(parent.entry.getFullPath(),args.name));
  log.debug(""String_Node_Str"",args.name,rev);
  VcsFile vcsFile=parent.getEntry(StringHelper.baseName(args.name));
  final VcsDeltaConsumer deltaConsumer=writer.modifyFile(parent.entry,vcsFile.getFileName(),vcsFile);
  files.put(args.token,new FileUpdater(deltaConsumer));
  if (parent.head && (rev >= 0)) {
    checkUpToDate(vcsFile,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.saveFile(StringHelper.baseName(args.name),deltaConsumer,true));
}"
8968,"private void editorCommand(@NotNull SessionContext context) throws IOException, SVNException {
  final SvnServerParser parser=context.getParser();
  final SvnServerWriter writer=context.getWriter();
  parser.readToken(ListBeginToken.class);
  final String cmd=parser.readText();
  log.debug(""String_Node_Str"",cmd);
  BaseCmd command=exitCommands.get(cmd);
  if (command == null) {
    context.push(this::editorCommand);
    command=commands.get(cmd);
  }
  if ((command != null) && (!aborted)) {
    try {
      Object param=MessageParser.parse(command.getArguments(),parser);
      parser.readToken(ListEndToken.class);
      command.process(context,param);
    }
 catch (    Throwable e) {
      log.warn(""String_Node_Str"" + cmd,e);
      aborted=true;
      throw e;
    }
  }
 else   if (command != null) {
    parser.skipItems();
  }
 else {
    log.error(""String_Node_Str"",cmd);
    BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_UNKNOWN_CMD,""String_Node_Str"" + cmd));
    parser.skipItems();
  }
}","private void editorCommand(@NotNull SessionContext context) throws IOException, SVNException {
  final SvnServerParser parser=context.getParser();
  final SvnServerWriter writer=context.getWriter();
  parser.readToken(ListBeginToken.class);
  final String cmd=parser.readText();
  log.debug(""String_Node_Str"",cmd);
  BaseCmd command=exitCommands.get(cmd);
  if (command == null) {
    context.push(this::editorCommand);
    command=commands.get(cmd);
  }
  if ((command != null) && (!aborted)) {
    try {
      Object param=MessageParser.parse(command.getArguments(),parser);
      parser.readToken(ListEndToken.class);
      command.process(context,param);
    }
 catch (    SVNException e) {
      if (e.getErrorMessage().getErrorCode() != SVNErrorCode.RA_NOT_AUTHORIZED) {
        log.warn(""String_Node_Str"" + cmd,e);
      }
      aborted=true;
      throw e;
    }
catch (    Throwable e) {
      log.warn(""String_Node_Str"" + cmd,e);
      aborted=true;
      throw e;
    }
  }
 else   if (command != null) {
    parser.skipItems();
  }
 else {
    log.error(""String_Node_Str"",cmd);
    BaseCmd.sendError(writer,SVNErrorMessage.create(SVNErrorCode.RA_SVN_UNKNOWN_CMD,""String_Node_Str"" + cmd));
    parser.skipItems();
  }
}"
8969,"@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final int rev=getRevision(args.rev,() -> context.getRepository().getLatestRevision().getId());
  final String path=context.getRepositoryPath(args.path);
  final LockTarget lockTarget=new LockTarget(path,rev);
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  final LockDesc[] lockDescs=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,new LockTarget[]{lockTarget}));
  if (lockDescs.length != 1) {
    throw new IllegalStateException();
  }
  final SvnServerWriter writer=context.getWriter();
  writer.listBegin().word(""String_Node_Str"").listBegin();
  LockCmd.writeLock(writer,lockDescs[0]);
  writer.listEnd().listEnd();
}","@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final int rev=getRevision(args.rev,() -> context.getRepository().getLatestRevision().getId());
  final String path=context.getRepositoryPath(args.path);
  final LockTarget lockTarget=new LockTarget(path,rev);
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  context.checkWrite(path);
  final LockDesc[] lockDescs=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,new LockTarget[]{lockTarget}));
  if (lockDescs.length != 1) {
    throw new IllegalStateException();
  }
  final SvnServerWriter writer=context.getWriter();
  writer.listBegin().word(""String_Node_Str"").listBegin();
  LockCmd.writeLock(writer,lockDescs[0]);
  writer.listEnd().listEnd();
}"
8970,"@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final int latestRev=context.getRepository().getLatestRevision().getId();
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  final LockTarget[] targets=new LockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final String path=context.getRepositoryPath(args.paths[i].path);
    final int rev=getRevision(args.paths[i].rev,latestRev);
    targets[i]=new LockTarget(path,rev);
  }
  final LockDesc[] locks;
  try {
    locks=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,targets));
    for (    LockDesc lock : locks) {
      writer.listBegin().word(""String_Node_Str"");
      LockCmd.writeLock(writer,lock);
      writer.listEnd();
    }
  }
 catch (  SVNException e) {
    sendError(writer,e.getErrorMessage());
  }
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}","@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final int latestRev=context.getRepository().getLatestRevision().getId();
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  final LockTarget[] targets=new LockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final String path=context.getRepositoryPath(args.paths[i].path);
    context.checkWrite(path);
    final int rev=getRevision(args.paths[i].rev,latestRev);
    targets[i]=new LockTarget(path,rev);
  }
  final LockDesc[] locks;
  try {
    locks=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,targets));
    for (    LockDesc lock : locks) {
      writer.listBegin().word(""String_Node_Str"");
      LockCmd.writeLock(writer,lock);
      writer.listEnd();
    }
  }
 catch (  SVNException e) {
    sendError(writer,e.getErrorMessage());
  }
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}"
8971,"@Override public void filter(ContainerRequestContext requestContext) throws IOException {
  final WebServer server=context.getShared().sure(WebServer.class);
  User user=server.getAuthInfo(requestContext.getHeaderString(HttpHeaders.AUTHORIZATION));
  try {
    checkAccess(context,user,checker);
    requestContext.setProperty(User.class.getName(),user);
  }
 catch (  ClientErrorException e) {
    requestContext.abortWith(e.getResponse());
  }
}","@Override public void filter(ContainerRequestContext requestContext) throws IOException {
  final WebServer server=context.getShared().sure(WebServer.class);
  User user=server.getAuthInfo(requestContext.getHeaderString(HttpHeaders.AUTHORIZATION));
  try {
    if (user == null) {
      user=User.getAnonymous();
    }
    checkAccess(context,user,checker);
    requestContext.setProperty(User.class.getName(),user);
  }
 catch (  ClientErrorException e) {
    requestContext.abortWith(e.getResponse());
  }
}"
8972,"@Nullable public static Response checkAccess(@NotNull LocalContext context,@Nullable User user,@NotNull Checker checker) throws IOException, ClientErrorException {
  final VcsAccess access=context.sure(VcsAccess.class);
  if (user == null) {
    user=User.getAnonymous();
  }
  try {
    checker.check(access,user);
    return null;
  }
 catch (  SVNException ignored) {
    if (user.isAnonymous()) {
      final WebServer server=context.getShared().sure(WebServer.class);
      throw new NotAuthorizedException(Response.status(Response.Status.UNAUTHORIZED).header(""String_Node_Str"",""String_Node_Str"" + server.getRealm() + ""String_Node_Str"").entity(""String_Node_Str"").build());
    }
 else {
      throw new ForbiddenException(Response.status(Response.Status.FORBIDDEN).entity(""String_Node_Str"").build());
    }
  }
}","@Nullable public static Response checkAccess(@NotNull LocalContext context,@NotNull User user,@NotNull Checker checker) throws IOException, ClientErrorException {
  final VcsAccess access=context.sure(VcsAccess.class);
  try {
    checker.check(access,user);
    return null;
  }
 catch (  SVNException ignored) {
    if (user.isAnonymous()) {
      final WebServer server=context.getShared().sure(WebServer.class);
      throw new NotAuthorizedException(Response.status(Response.Status.UNAUTHORIZED).header(""String_Node_Str"",""String_Node_Str"" + server.getRealm() + ""String_Node_Str"").entity(""String_Node_Str"").build());
    }
 else {
      throw new ForbiddenException(Response.status(Response.Status.FORBIDDEN).entity(""String_Node_Str"").build());
    }
  }
}"
8973,"/** 
 * Check for deny modify locking file.
 * @throws Exception
 */
@Test(dataProvider=""String_Node_Str"",dataProviderClass=SvnTesterDataProvider.class) public void modifyLockedInvalidLock(@NotNull SvnTesterFactory factory) throws Exception {
  try (SvnTester server=factory.create()){
    final SVNRepository repo=server.openSvnRepository();
    createFile(repo,""String_Node_Str"",""String_Node_Str"",null);
    final long latestRevision=repo.getLatestRevision();
    final SVNLock oldLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    Assert.assertNotNull(oldLock);
    unlock(repo,oldLock,false,null);
    final SVNLock newLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    try {
      final Map<String,String> locks=new HashMap<>();
      locks.put(oldLock.getPath(),oldLock.getID());
      final ISVNEditor editor=repo.getCommitEditor(""String_Node_Str"",locks,false,null);
      editor.openRoot(-1);
      editor.openFile(""String_Node_Str"",latestRevision);
      sendDeltaAndClose(editor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      editor.closeDir();
      editor.closeEdit();
      Assert.fail();
    }
 catch (    SVNException e) {
      Assert.assertEquals(e.getErrorMessage().getErrorCode(),SVNErrorCode.FS_BAD_LOCK_TOKEN);
    }
    compareLock(server.openSvnRepository().getLock(""String_Node_Str""),newLock);
  }
 }","/** 
 * Check for deny modify locking file.
 * @throws Exception
 */
@Test(dataProvider=""String_Node_Str"",dataProviderClass=SvnTesterDataProvider.class) public void modifyLockedInvalidLock(@NotNull SvnTesterFactory factory) throws Exception {
  try (SvnTester server=factory.create()){
    final SVNRepository repo=server.openSvnRepository();
    createFile(repo,""String_Node_Str"",""String_Node_Str"",null);
    final long latestRevision=repo.getLatestRevision();
    final SVNLock oldLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    Assert.assertNotNull(oldLock);
    unlock(repo,oldLock,false,null);
    SVNLock newLock;
    for (int pass=0; ; ++pass) {
      Assert.assertTrue(pass < MAX_RELOCK_COUNT);
      newLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
      Assert.assertNotNull(newLock);
      if (!newLock.getID().equals(oldLock.getID())) {
        break;
      }
      unlock(repo,newLock,false,null);
    }
    try {
      final Map<String,String> locks=new HashMap<>();
      locks.put(oldLock.getPath(),oldLock.getID());
      final ISVNEditor editor=repo.getCommitEditor(""String_Node_Str"",locks,false,null);
      editor.openRoot(-1);
      editor.openFile(""String_Node_Str"",latestRevision);
      sendDeltaAndClose(editor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      editor.closeDir();
      editor.closeEdit();
      Assert.fail();
    }
 catch (    SVNException e) {
      Assert.assertEquals(e.getErrorMessage().getErrorCode(),SVNErrorCode.FS_BAD_LOCK_TOKEN);
    }
    compareLock(server.openSvnRepository().getLock(""String_Node_Str""),newLock);
  }
 }"
8974,"@NotNull private FileOutputStream ensureFile() throws IOException {
  if (fileOutputStream == null) {
    tempFile=new FileHolder();
    fileOutputStream=new FileOutputStream(tempFile.file);
  }
  return fileOutputStream;
}","@NotNull private FileOutputStream ensureFile() throws IOException {
  if (fileOutputStream == null) {
    file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    file.deleteOnExit();
    fileOutputStream=new FileOutputStream(file);
  }
  return fileOutputStream;
}"
8975,"public TemporaryOutputStream(int maxMemorySize){
  this.maxMemorySize=maxMemorySize;
}","public TemporaryOutputStream(int maxMemorySize){
  this.maxMemorySize=maxMemorySize;
  this.holder=new FileHolder(this::cleanup);
}"
8976,"private TemporaryInputStream(@NotNull byte[] memoryBytes,@NotNull FileHolder holder) throws FileNotFoundException {
  this.memoryBytes=memoryBytes;
  this.holder=holder.copy();
  this.fileStream=new FileInputStream(holder.file);
}","private TemporaryInputStream(@NotNull byte[] memoryBytes,@NotNull File file,@NotNull Holder holder) throws FileNotFoundException {
  this.memoryBytes=memoryBytes;
  this.holder=holder.copy();
  this.fileStream=new FileInputStream(file);
}"
8977,"@TestOnly @Nullable File tempFile(){
  return tempFile != null ? tempFile.file : null;
}","@TestOnly @Nullable File tempFile(){
  return file;
}"
8978,"@NotNull public FileHolder copy(){
  usages.incrementAndGet();
  return new FileHolder(file,usages);
}","@NotNull public FileHolder copy(){
  usages.incrementAndGet();
  return new FileHolder(action,usages);
}"
8979,"@NotNull public InputStream toInputStream() throws IOException {
  if (fileOutputStream != null) {
    flush();
  }
  if (tempFile != null) {
    return new TemporaryInputStream(memoryStream.toByteArray(),tempFile);
  }
 else {
    return new ByteArrayInputStream(memoryStream.toByteArray());
  }
}","@NotNull public InputStream toInputStream() throws IOException {
  if (fileOutputStream != null) {
    flush();
  }
  if (file != null) {
    return new TemporaryInputStream(memoryStream.toByteArray(),file,holder);
  }
 else {
    return new ByteArrayInputStream(memoryStream.toByteArray());
  }
}"
8980,"public void close() throws IOException {
  if (closed.compareAndSet(false,true)) {
    if (usages.decrementAndGet() == 0) {
      if (!file.delete()) {
        throw new IOException(""String_Node_Str"" + file.getAbsolutePath());
      }
    }
  }
}","@Override public void close() throws IOException {
  if (closed.compareAndSet(false,true)) {
    if (usages.decrementAndGet() == 0) {
      action.close();
    }
  }
}"
8981,"private FileHolder(@NotNull File file,@NotNull AtomicInteger usages){
  this.file=file;
  this.usages=usages;
}","private FileHolder(@NotNull CloseAction action,@NotNull AtomicInteger usages){
  this.action=action;
  this.usages=usages;
}"
8982,"@Override public void textDeltaEnd(String path) throws SVNException {
  try {
    if (window == null)     throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_SVN_CMD_ERR));
    final Repository repo=gitRepository.getRepository();
    final ObjectInserter inserter=repo.newObjectInserter();
    md5=window.textDeltaEnd();
    try (InputStream stream=temporaryStream.toInputStream()){
      objectId=new GitObject<>(repo,inserter.insert(Constants.OBJ_BLOB,temporaryStream.size(),stream));
    }
     inserter.flush();
    log.info(""String_Node_Str"",objectId.getObject().getName(),path);
  }
 catch (  IOException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
}","@Override public void textDeltaEnd(String path) throws SVNException {
  try (TemporaryOutputStream.Holder holder=temporaryStream.holder()){
    if (window == null)     throw new SVNException(SVNErrorMessage.create(SVNErrorCode.RA_SVN_CMD_ERR));
    final Repository repo=gitRepository.getRepository();
    final ObjectInserter inserter=repo.newObjectInserter();
    md5=window.textDeltaEnd();
    try (InputStream stream=temporaryStream.toInputStream()){
      objectId=new GitObject<>(repo,inserter.insert(Constants.OBJ_BLOB,temporaryStream.size(),stream));
    }
     inserter.flush();
    log.info(""String_Node_Str"",objectId.getObject().getName(),path);
  }
 catch (  IOException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
}"
8983,"public boolean migrateFilter(@NotNull GitFilter filter) throws IOException, SVNException {
  if (newFilter == null || objectId == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final GitObject<ObjectId> beforeId=objectId;
  if (!newFilter.equals(filter)) {
    final Repository repo=gitRepository.getRepository();
    final TemporaryOutputStream content=new TemporaryOutputStream();
    try (InputStream inputStream=newFilter.inputStream(objectId);OutputStream outputStream=filter.outputStream(content)){
      IOUtils.copy(inputStream,outputStream);
    }
     final ObjectInserter inserter=repo.newObjectInserter();
    try (InputStream inputStream=content.toInputStream()){
      objectId=new GitObject<>(repo,inserter.insert(Constants.OBJ_BLOB,content.size(),inputStream));
      newFilter=filter;
    }
     inserter.flush();
  }
  return !beforeId.equals(objectId);
}","public boolean migrateFilter(@NotNull GitFilter filter) throws IOException, SVNException {
  if (newFilter == null || objectId == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final GitObject<ObjectId> beforeId=objectId;
  if (!newFilter.equals(filter)) {
    final Repository repo=gitRepository.getRepository();
    try (final TemporaryOutputStream content=new TemporaryOutputStream();final TemporaryOutputStream.Holder holder=content.holder()){
      try (InputStream inputStream=newFilter.inputStream(objectId);OutputStream outputStream=filter.outputStream(content)){
        IOUtils.copy(inputStream,outputStream);
      }
       final ObjectInserter inserter=repo.newObjectInserter();
      try (InputStream inputStream=content.toInputStream()){
        objectId=new GitObject<>(repo,inserter.insert(Constants.OBJ_BLOB,content.size(),inputStream));
        newFilter=filter;
      }
       inserter.flush();
    }
   }
  return !beforeId.equals(objectId);
}"
8984,"/** 
 * Try to remove not-owned lock.
 * @throws Exception
 */
@Test(dataProvider=""String_Node_Str"",dataProviderClass=SvnTesterDataProvider.class) public void unlockNotOwner(@NotNull SvnTesterFactory factory) throws Exception {
  try (SvnTester server=factory.create()){
    final SVNRepository repo=server.openSvnRepository();
    createFile(repo,""String_Node_Str"",""String_Node_Str"",null);
    final long latestRevision=repo.getLatestRevision();
    final SVNLock oldLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    Assert.assertNotNull(oldLock);
    unlock(repo,oldLock,false,null);
    final SVNLock newLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    Assert.assertNotNull(newLock);
    unlock(repo,oldLock,false,SVNErrorCode.FS_NO_SUCH_LOCK);
  }
 }","/** 
 * Try to remove not-owned lock.
 * @throws Exception
 */
@Test(dataProvider=""String_Node_Str"",dataProviderClass=SvnTesterDataProvider.class) public void unlockNotOwner(@NotNull SvnTesterFactory factory) throws Exception {
  try (SvnTester server=factory.create()){
    final SVNRepository repo=server.openSvnRepository();
    createFile(repo,""String_Node_Str"",""String_Node_Str"",null);
    final long latestRevision=repo.getLatestRevision();
    final SVNLock oldLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
    Assert.assertNotNull(oldLock);
    unlock(repo,oldLock,false,null);
    for (int pass=0; ; ++pass) {
      Assert.assertTrue(pass < MAX_RELOCK_COUNT);
      final SVNLock newLock=lock(repo,""String_Node_Str"",latestRevision,false,null);
      Assert.assertNotNull(newLock);
      if (!newLock.getID().equals(oldLock.getID())) {
        break;
      }
      unlock(repo,newLock,false,null);
    }
    unlock(repo,oldLock,false,SVNErrorCode.FS_NO_SUCH_LOCK);
  }
 }"
8985,"@Override public GitRevision commit(@NotNull User userInfo,@NotNull String message) throws SVNException, IOException {
  final GitTreeUpdate root=treeStack.element();
  ObjectId treeId=root.buildTree(inserter);
  log.info(""String_Node_Str"",treeId.name());
  final CommitBuilder commitBuilder=new CommitBuilder();
  final PersonIdent ident=createIdent(userInfo);
  commitBuilder.setAuthor(ident);
  commitBuilder.setCommitter(ident);
  commitBuilder.setMessage(message);
  final RevCommit parentCommit=revision.getGitNewCommit();
  if (parentCommit != null) {
    commitBuilder.setParentId(parentCommit.getId());
  }
  commitBuilder.setTreeId(treeId);
  final ObjectId commitId=inserter.insert(commitBuilder);
  inserter.flush();
  if (filterMigration(new RevWalk(repo.getRepository()).parseTree(treeId)) != 0) {
    log.info(""String_Node_Str"");
    return null;
  }
synchronized (pushLock) {
    log.info(""String_Node_Str"");
    validateProperties(new RevWalk(repo.getRepository()).parseTree(treeId));
    log.info(""String_Node_Str"",commitId.name(),message);
    log.info(""String_Node_Str"",branch);
    if (!pushMode.push(repo.getRepository(),commitId,branch)) {
      log.info(""String_Node_Str"");
      return null;
    }
    log.info(""String_Node_Str"");
    repo.updateRevisions();
    return repo.getRevision(commitId);
  }
}","@Override public GitRevision commit(@NotNull User userInfo,@NotNull String message) throws SVNException, IOException {
  final GitTreeUpdate root=treeStack.element();
  ObjectId treeId=root.buildTree(inserter);
  log.debug(""String_Node_Str"",treeId.name());
  final CommitBuilder commitBuilder=new CommitBuilder();
  final PersonIdent ident=createIdent(userInfo);
  commitBuilder.setAuthor(ident);
  commitBuilder.setCommitter(ident);
  commitBuilder.setMessage(message);
  final RevCommit parentCommit=revision.getGitNewCommit();
  if (parentCommit != null) {
    commitBuilder.setParentId(parentCommit.getId());
  }
  commitBuilder.setTreeId(treeId);
  final ObjectId commitId=inserter.insert(commitBuilder);
  inserter.flush();
  log.info(""String_Node_Str"",commitId.name(),message);
  if (filterMigration(new RevWalk(repo.getRepository()).parseTree(treeId)) != 0) {
    log.info(""String_Node_Str"");
    return null;
  }
synchronized (pushLock) {
    log.info(""String_Node_Str"");
    validateProperties(new RevWalk(repo.getRepository()).parseTree(treeId));
    log.info(""String_Node_Str"",branch);
    if (!pushMode.push(repo.getRepository(),commitId,branch)) {
      log.info(""String_Node_Str"");
      return null;
    }
    log.info(""String_Node_Str"");
    repo.updateRevisions();
    return repo.getRevision(commitId);
  }
}"
8986,"private void openFile(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",parent,rev);
  VcsFile vcsFile=parent.getEntry(StringHelper.baseName(args.name));
  final VcsDeltaConsumer deltaConsumer=writer.modifyFile(parent.entry,vcsFile.getFileName(),vcsFile);
  files.put(args.token,new FileUpdater(deltaConsumer));
  if (parent.head && (rev >= 0)) {
    checkUpToDate(vcsFile,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.saveFile(StringHelper.baseName(args.name),deltaConsumer,true));
}","private void openFile(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",args.name,rev);
  VcsFile vcsFile=parent.getEntry(StringHelper.baseName(args.name));
  final VcsDeltaConsumer deltaConsumer=writer.modifyFile(parent.entry,vcsFile.getFileName(),vcsFile);
  files.put(args.token,new FileUpdater(deltaConsumer));
  if (parent.head && (rev >= 0)) {
    checkUpToDate(vcsFile,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.saveFile(StringHelper.baseName(args.name),deltaConsumer,true));
}"
8987,"public GitSubmodules(@NotNull File basePath,@NotNull Collection<String> paths) throws IOException {
  for (  String path : paths) {
    final File file=new File(basePath,path).getAbsoluteFile();
    if (!file.exists()) {
      throw new FileNotFoundException(file.getPath());
    }
    log.info(""String_Node_Str"",file);
    repositories.add(new FileRepository(file));
  }
}","public GitSubmodules(@NotNull File basePath,@NotNull Collection<String> paths) throws IOException {
  for (  String path : paths) {
    final File file=ConfigHelper.joinPath(basePath,path).getAbsoluteFile();
    if (!file.exists()) {
      throw new FileNotFoundException(file.getPath());
    }
    log.info(""String_Node_Str"",file);
    repositories.add(new FileRepository(file));
  }
}"
8988,"private EntryUpdater(@NotNull VcsEntry entry,boolean head) throws IOException, SVNException {
  this.entry=entry;
  this.head=head;
  if (entry instanceof VcsFile) {
    this.props=new HashMap<>(((VcsFile)entry).getProperties());
  }
 else {
    this.props=new HashMap<>();
  }
}","private EntryUpdater(@NotNull VcsEntry entry,@Nullable VcsFile source,boolean head) throws IOException, SVNException {
  this.entry=entry;
  this.source=source;
  this.head=head;
  this.props=source == null ? new HashMap<>() : new HashMap<>(source.getProperties());
}"
8989,"private void openDir(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",args.name,rev);
  final VcsFile sourceDir=parent.getEntry(StringHelper.baseName(args.name));
  final EntryUpdater dir=new EntryUpdater(sourceDir,parent.head);
  if ((rev >= 0) && (parent.head)) {
    checkUpToDate(sourceDir,rev,false);
  }
  paths.put(args.token,dir);
  parent.changes.add(treeBuilder -> {
    treeBuilder.openDir(StringHelper.baseName(args.name));
    updateDir(treeBuilder,dir);
    if (rev >= 0) {
      treeBuilder.checkDirProperties(dir.props);
    }
    treeBuilder.closeDir();
  }
);
}","private void openDir(@NotNull SessionContext context,@NotNull OpenParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",args.name,rev);
  final VcsFile sourceDir=parent.getEntry(StringHelper.baseName(args.name));
  final EntryUpdater dir=new EntryUpdater(sourceDir,sourceDir,parent.head);
  if ((rev >= 0) && (parent.head)) {
    checkUpToDate(sourceDir,rev,false);
  }
  paths.put(args.token,dir);
  parent.changes.add(treeBuilder -> {
    treeBuilder.openDir(StringHelper.baseName(args.name));
    updateDir(treeBuilder,dir);
    if (rev >= 0) {
      treeBuilder.checkDirProperties(dir.props);
    }
    treeBuilder.closeDir();
  }
);
}"
8990,"private void addDir(@NotNull SessionContext context,@NotNull AddParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final VcsFile source;
  if (args.copyParams.copyFrom != null) {
    log.info(""String_Node_Str"",args.name,args.copyParams.copyFrom,args.copyParams.rev);
    source=context.getFile(args.copyParams.rev,args.copyParams.copyFrom);
    if (source == null) {
      throw new SVNException(SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,""String_Node_Str"" + args.copyParams.copyFrom + ""String_Node_Str""+ args.copyParams.rev));
    }
  }
 else {
    log.info(""String_Node_Str"",args.name);
    source=null;
  }
  final EntryUpdater updater=new EntryUpdater(parent.entry,false);
  paths.put(args.token,updater);
  parent.changes.add(treeBuilder -> {
    treeBuilder.addDir(StringHelper.baseName(args.name),source);
    updateDir(treeBuilder,updater);
    treeBuilder.checkDirProperties(updater.props);
    treeBuilder.closeDir();
  }
);
}","private void addDir(@NotNull SessionContext context,@NotNull AddParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final VcsFile source;
  if (args.copyParams.copyFrom != null) {
    log.info(""String_Node_Str"",args.name,args.copyParams.copyFrom,args.copyParams.rev);
    source=context.getFile(args.copyParams.rev,args.copyParams.copyFrom);
    if (source == null) {
      throw new SVNException(SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,""String_Node_Str"" + args.copyParams.copyFrom + ""String_Node_Str""+ args.copyParams.rev));
    }
  }
 else {
    log.info(""String_Node_Str"",args.name);
    source=null;
  }
  final EntryUpdater updater=new EntryUpdater(parent.entry,source,false);
  paths.put(args.token,updater);
  parent.changes.add(treeBuilder -> {
    treeBuilder.addDir(StringHelper.baseName(args.name),source);
    updateDir(treeBuilder,updater);
    treeBuilder.checkDirProperties(updater.props);
    treeBuilder.closeDir();
  }
);
}"
8991,"@NotNull public VcsFile getEntry(@NotNull String name) throws IOException, SVNException {
  final VcsFile file=entry.getEntry(name);
  if (file == null) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,""String_Node_Str"" + name + ""String_Node_Str""+ entry.getFullPath()));
  }
  return file;
}","@NotNull public VcsFile getEntry(@NotNull String name) throws IOException, SVNException {
  if (source == null) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,""String_Node_Str"" + name));
  }
  final VcsFile file=source.getEntry(name);
  if (file == null) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,""String_Node_Str"" + name + ""String_Node_Str""+ source.getFullPath()));
  }
  return file;
}"
8992,"private void openRoot(@NotNull SessionContext context,@NotNull OpenRootParams args) throws SVNException, IOException {
  final String fullPath=context.getRepositoryPath(""String_Node_Str"");
  final String[] rootPath=fullPath.split(""String_Node_Str"");
  EntryUpdater lastUpdater=rootEntry;
  for (int i=1; i < rootPath.length; ++i) {
    String name=rootPath[i];
    final VcsFile entry=lastUpdater.getEntry(name);
    final EntryUpdater updater=new EntryUpdater(entry,true);
    lastUpdater.changes.add(treeBuilder -> {
      treeBuilder.openDir(name);
      updateDir(treeBuilder,updater);
      treeBuilder.closeDir();
    }
);
    lastUpdater=updater;
  }
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  if (rev >= 0) {
    if (lastUpdater.entry instanceof VcsFile) {
      checkUpToDate((VcsFile)lastUpdater.entry,rev,false);
      final Map<String,String> props=lastUpdater.props;
      lastUpdater.changes.add(treeBuilder -> treeBuilder.checkDirProperties(props));
    }
 else {
      throw new IllegalStateException();
    }
  }
  paths.put(args.token,lastUpdater);
}","private void openRoot(@NotNull SessionContext context,@NotNull OpenRootParams args) throws SVNException, IOException {
  final String fullPath=context.getRepositoryPath(""String_Node_Str"");
  final String[] rootPath=fullPath.split(""String_Node_Str"");
  EntryUpdater lastUpdater=rootEntry;
  for (int i=1; i < rootPath.length; ++i) {
    String name=rootPath[i];
    final VcsFile entry=lastUpdater.getEntry(name);
    final EntryUpdater updater=new EntryUpdater(entry,entry,true);
    lastUpdater.changes.add(treeBuilder -> {
      treeBuilder.openDir(name);
      updateDir(treeBuilder,updater);
      treeBuilder.closeDir();
    }
);
    lastUpdater=updater;
  }
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  if (rev >= 0) {
    if (lastUpdater.source == null) {
      throw new IllegalStateException();
    }
    checkUpToDate(lastUpdater.source,rev,false);
    final Map<String,String> props=lastUpdater.props;
    lastUpdater.changes.add(treeBuilder -> treeBuilder.checkDirProperties(props));
  }
  paths.put(args.token,lastUpdater);
}"
8993,"private void deleteEntry(@NotNull SessionContext context,@NotNull DeleteParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",args.name,rev);
  final VcsFile entry=parent.getEntry(StringHelper.baseName(args.name));
  if (parent.head && (rev >= 0) && (parent.entry instanceof VcsFile)) {
    checkUpToDate(entry,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.delete(entry.getFileName()));
}","private void deleteEntry(@NotNull SessionContext context,@NotNull DeleteParams args) throws SVNException, IOException {
  final EntryUpdater parent=getParent(args.parentToken);
  final int rev=args.rev.length > 0 ? args.rev[0] : -1;
  log.info(""String_Node_Str"",args.name,rev);
  final VcsFile entry=parent.getEntry(StringHelper.baseName(args.name));
  if (parent.head && (rev >= 0) && (parent.source != null)) {
    checkUpToDate(entry,rev,true);
  }
  parent.changes.add(treeBuilder -> treeBuilder.delete(entry.getFileName()));
}"
8994,"public EditorPipeline(@NotNull SessionContext context,@NotNull CommitParams params) throws IOException, SVNException {
  this.message=params.message;
  this.keepLocks=params.keepLocks;
  final VcsFile entry=context.getRepository().getLatestRevision().getFile(""String_Node_Str"");
  if (entry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rootEntry=new EntryUpdater(entry,true);
  paths=new HashMap<>();
  files=new HashMap<>();
  locks=getLocks(context,params.locks);
  commands=new HashMap<>();
  commands.put(""String_Node_Str"",new LambdaCmd<>(AddParams.class,this::addDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(AddParams.class,this::addFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChangePropParams.class,this::changeDirProp));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChangePropParams.class,this::changeFileProp));
  commands.put(""String_Node_Str"",new LambdaCmd<>(DeleteParams.class,this::deleteEntry));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenRootParams.class,this::openRoot));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenParams.class,this::openDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenParams.class,this::openFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(TokenParams.class,this::closeDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChecksumParams.class,this::closeFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(DeltaChunkParams.class,this::deltaChunk));
  commands.put(""String_Node_Str"",new LambdaCmd<>(TokenParams.class,this::deltaEnd));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChecksumParams.class,this::deltaApply));
  exitCommands=new HashMap<>();
  exitCommands.put(""String_Node_Str"",new LambdaCmd<>(NoParams.class,this::closeEdit));
  exitCommands.put(""String_Node_Str"",new LambdaCmd<>(NoParams.class,this::abortEdit));
}","public EditorPipeline(@NotNull SessionContext context,@NotNull CommitParams params) throws IOException, SVNException {
  this.message=params.message;
  this.keepLocks=params.keepLocks;
  final VcsFile entry=context.getRepository().getLatestRevision().getFile(""String_Node_Str"");
  if (entry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rootEntry=new EntryUpdater(entry,entry,true);
  paths=new HashMap<>();
  files=new HashMap<>();
  locks=getLocks(context,params.locks);
  commands=new HashMap<>();
  commands.put(""String_Node_Str"",new LambdaCmd<>(AddParams.class,this::addDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(AddParams.class,this::addFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChangePropParams.class,this::changeDirProp));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChangePropParams.class,this::changeFileProp));
  commands.put(""String_Node_Str"",new LambdaCmd<>(DeleteParams.class,this::deleteEntry));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenRootParams.class,this::openRoot));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenParams.class,this::openDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(OpenParams.class,this::openFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(TokenParams.class,this::closeDir));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChecksumParams.class,this::closeFile));
  commands.put(""String_Node_Str"",new LambdaCmd<>(DeltaChunkParams.class,this::deltaChunk));
  commands.put(""String_Node_Str"",new LambdaCmd<>(TokenParams.class,this::deltaEnd));
  commands.put(""String_Node_Str"",new LambdaCmd<>(ChecksumParams.class,this::deltaApply));
  exitCommands=new HashMap<>();
  exitCommands.put(""String_Node_Str"",new LambdaCmd<>(NoParams.class,this::closeEdit));
  exitCommands.put(""String_Node_Str"",new LambdaCmd<>(NoParams.class,this::abortEdit));
}"
8995,"@Override public long getSize() throws IOException, SVNException {
  if (getFileMode().getObjectType() != Constants.OBJ_BLOB)   return 0L;
  if (treeEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return repo.getObjectSize(treeEntry.getObjectId(),' ',() -> {
    final ObjectLoader loader=getObjectLoader();
    if (loader == null)     return 0L;
    return loader.getSize();
  }
) + (isSymlink() ? 0 : SvnConstants.LINK_PREFIX.length());
}","@Override public long getSize() throws IOException, SVNException {
  if (getFileMode().getObjectType() != Constants.OBJ_BLOB)   return 0L;
  if (treeEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final GitObject<ObjectId> objectId=treeEntry.getObjectId();
  ObjectReader reader=objectId.getRepo().newObjectReader();
  long objectSize=reader.getObjectSize(objectId.getObject(),treeEntry.getFileMode().getObjectType());
  return objectSize + (isSymlink() ? 0 : SvnConstants.LINK_PREFIX.length());
}"
8996,"public GitRepository(@NotNull Repository repository,@NotNull List<Repository> linked,@NotNull GitPushMode pushMode,@NotNull String branch,boolean renameDetection,@NotNull LockManagerFactory lockManagerFactory,@NotNull DB cacheDb) throws IOException, SVNException {
  this.cacheDb=cacheDb;
  this.md5Cache=cacheDb.getHashMap(""String_Node_Str"");
  this.sizeCache=cacheDb.getHashMap(""String_Node_Str"");
  this.binaryCache=cacheDb.getHashMap(""String_Node_Str"");
  this.repository=repository;
  this.pushMode=pushMode;
  this.renameDetection=renameDetection;
  this.lockManagerFactory=lockManagerFactory;
  linkedRepositories=new ArrayList<>(linked);
  this.svnBranch=LayoutHelper.initRepository(repository,branch).getName();
  this.gitBranch=Constants.R_HEADS + branch;
  loadRevisions();
  cacheRevisions();
  updateRevisions();
  this.uuid=UUID.nameUUIDFromBytes((getRepositoryId() + ""String_Node_Str"" + gitBranch).getBytes(StandardCharsets.UTF_8)).toString();
  log.info(""String_Node_Str"",gitBranch);
}","public GitRepository(@NotNull Repository repository,@NotNull List<Repository> linked,@NotNull GitPushMode pushMode,@NotNull String branch,boolean renameDetection,@NotNull LockManagerFactory lockManagerFactory,@NotNull DB cacheDb) throws IOException, SVNException {
  this.cacheDb=cacheDb;
  this.md5Cache=cacheDb.getHashMap(""String_Node_Str"");
  this.binaryCache=cacheDb.getHashMap(""String_Node_Str"");
  this.repository=repository;
  this.pushMode=pushMode;
  this.renameDetection=renameDetection;
  this.lockManagerFactory=lockManagerFactory;
  linkedRepositories=new ArrayList<>(linked);
  this.svnBranch=LayoutHelper.initRepository(repository,branch).getName();
  this.gitBranch=Constants.R_HEADS + branch;
  loadRevisions();
  cacheRevisions();
  updateRevisions();
  this.uuid=UUID.nameUUIDFromBytes((getRepositoryId() + ""String_Node_Str"" + gitBranch).getBytes(StandardCharsets.UTF_8)).toString();
  log.info(""String_Node_Str"",gitBranch);
}"
8997,"private void updateDirEntries(@NotNull SessionContext context,@NotNull String wcPath,@Nullable VcsFile oldFile,@NotNull VcsFile newFile,@NotNull String tokenId,@NotNull Depth wcDepth,@NotNull Depth requestedDepth) throws IOException, SVNException {
  final Depth.Action dirAction=wcDepth.determineAction(requestedDepth,true);
  final Depth.Action fileAction=wcDepth.determineAction(requestedDepth,false);
  final Map<String,VcsFile> oldEntries;
  if (oldFile != null) {
    oldEntries=new HashMap<>();
    for (    VcsFile entry : oldFile.getEntries()) {
      oldEntries.put(entry.getFileName(),entry);
    }
  }
 else {
    oldEntries=Collections.emptyMap();
  }
  final Set<String> forced=new HashSet<>(forcedPaths.getOrDefault(wcPath,Collections.emptySet()));
  for (  VcsFile newEntry : newFile.getEntries()) {
    final String entryPath=joinPath(wcPath,newEntry.getFileName());
    final VcsFile oldEntry=getPrevFile(context,entryPath,oldEntries.remove(newEntry.getFileName()));
    final Depth.Action action=newEntry.isDirectory() ? dirAction : fileAction;
    if (!forced.remove(entryPath) && newEntry.equals(oldEntry) && action == Depth.Action.Normal)     continue;
    if (action == Depth.Action.Skip)     continue;
    final Depth entryDepth=getWcDepth(entryPath,wcDepth);
    updateEntry(context,entryPath,action == Depth.Action.Upgrade ? null : oldEntry,newEntry,tokenId,false,entryDepth,requestedDepth.deepen());
  }
  for (  VcsFile entry : oldEntries.values()) {
    final String entryPath=joinPath(wcPath,entry.getFileName());
    removeEntry(context,entryPath,entry.getLastChange().getId(),tokenId);
    forced.remove(entryPath);
  }
  for (  String removed : forced) {
    removeEntry(context,removed,newFile.getLastChange().getId(),tokenId);
  }
}","private void updateDirEntries(@NotNull SessionContext context,@NotNull String wcPath,@Nullable VcsFile oldFile,@NotNull VcsFile newFile,@NotNull String tokenId,@NotNull Depth wcDepth,@NotNull Depth requestedDepth) throws IOException, SVNException {
  final Depth.Action dirAction=wcDepth.determineAction(requestedDepth,true);
  final Depth.Action fileAction=wcDepth.determineAction(requestedDepth,false);
  final Map<String,VcsFile> oldEntries;
  if (oldFile != null) {
    oldEntries=new HashMap<>();
    for (    VcsFile entry : oldFile.getEntries()) {
      oldEntries.put(entry.getFileName(),entry);
    }
  }
 else {
    oldEntries=Collections.emptyMap();
  }
  final Set<String> forced=new HashSet<>(forcedPaths.getOrDefault(wcPath,Collections.emptySet()));
  for (  VcsFile newEntry : newFile.getEntries()) {
    final String entryPath=joinPath(wcPath,newEntry.getFileName());
    final VcsFile oldEntry=getPrevFile(context,entryPath,oldEntries.remove(newEntry.getFileName()));
    final Depth.Action action=newEntry.isDirectory() ? dirAction : fileAction;
    if (!forced.remove(entryPath) && newEntry.equals(oldEntry) && action == Depth.Action.Normal && requestedDepth == wcDepth)     continue;
    if (action == Depth.Action.Skip)     continue;
    final Depth entryDepth=getWcDepth(entryPath,wcDepth);
    updateEntry(context,entryPath,action == Depth.Action.Upgrade ? null : oldEntry,newEntry,tokenId,false,entryDepth,requestedDepth.deepen());
  }
  for (  VcsFile entry : oldEntries.values()) {
    final String entryPath=joinPath(wcPath,entry.getFileName());
    removeEntry(context,entryPath,entry.getLastChange().getId(),tokenId);
    forced.remove(entryPath);
  }
  for (  String removed : forced) {
    removeEntry(context,removed,newFile.getLastChange().getId(),tokenId);
  }
}"
8998,"@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final int latestRev=context.getRepository().getLatestRevision().getId();
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  final LockTarget[] targets=new LockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final String path=context.getRepositoryPath(args.paths[i].path);
    final int rev=getRevision(args.paths[i].rev,latestRev);
    targets[i]=new LockTarget(path,rev);
  }
  final LockDesc[] locks;
  try {
    locks=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,targets));
  }
 catch (  SVNException e) {
    writer.word(""String_Node_Str"");
    throw e;
  }
  for (  LockDesc lock : locks) {
    writer.listBegin().word(""String_Node_Str"");
    LockCmd.writeLock(writer,lock);
    writer.listEnd();
  }
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}","@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final int latestRev=context.getRepository().getLatestRevision().getId();
  final String comment=args.comment.length == 0 ? null : args.comment[0];
  final LockTarget[] targets=new LockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final String path=context.getRepositoryPath(args.paths[i].path);
    final int rev=getRevision(args.paths[i].rev,latestRev);
    targets[i]=new LockTarget(path,rev);
  }
  final LockDesc[] locks;
  try {
    locks=context.getRepository().wrapLockWrite((lockManager) -> lockManager.lock(context,comment,args.stealLock,targets));
    for (    LockDesc lock : locks) {
      writer.listBegin().word(""String_Node_Str"");
      LockCmd.writeLock(writer,lock);
      writer.listEnd();
    }
  }
 catch (  SVNException e) {
    sendError(writer,e.getErrorMessage());
  }
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}"
8999,"@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final UnlockTarget[] targets=new UnlockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final PathToken pathToken=args.paths[i];
    final String path=context.getRepositoryPath(pathToken.path);
    final String lockToken=pathToken.lockToken.length == 0 ? null : pathToken.lockToken[0];
    targets[i]=new UnlockTarget(context.getRepositoryPath(path),lockToken);
  }
  try {
    context.getRepository().wrapLockWrite((lockManager) -> {
      lockManager.unlock(context,args.breakLock,targets);
      return Boolean.TRUE;
    }
);
  }
 catch (  SVNException e) {
    writer.word(""String_Node_Str"");
    throw e;
  }
  for (  PathToken path : args.paths)   writer.listBegin().word(""String_Node_Str"").listBegin().string(path.path).listEnd().listEnd();
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}","@Override protected void processCommand(@NotNull SessionContext context,@NotNull Params args) throws IOException, SVNException {
  final SvnServerWriter writer=context.getWriter();
  final UnlockTarget[] targets=new UnlockTarget[args.paths.length];
  for (int i=0; i < args.paths.length; ++i) {
    final PathToken pathToken=args.paths[i];
    final String path=context.getRepositoryPath(pathToken.path);
    final String lockToken=pathToken.lockToken.length == 0 ? null : pathToken.lockToken[0];
    targets[i]=new UnlockTarget(context.getRepositoryPath(path),lockToken);
  }
  try {
    context.getRepository().wrapLockWrite((lockManager) -> {
      lockManager.unlock(context,args.breakLock,targets);
      return Boolean.TRUE;
    }
);
    for (    PathToken path : args.paths)     writer.listBegin().word(""String_Node_Str"").listBegin().string(path.path).listEnd().listEnd();
  }
 catch (  SVNException e) {
    sendError(writer,e.getErrorMessage());
  }
  writer.word(""String_Node_Str"");
  writer.listBegin().word(""String_Node_Str"").listBegin().listEnd().listEnd();
}"
9000,boolean isDirectory() throws IOException ;,boolean isDirectory();
